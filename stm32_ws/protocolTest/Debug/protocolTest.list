
protocolTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f77c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a38  0800f92c  0800f92c  0001f92c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010364  08010364  00030150  2**0
                  CONTENTS
  4 .ARM          00000008  08010364  08010364  00020364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801036c  0801036c  00030150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801036c  0801036c  0002036c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010370  08010370  00020370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000150  20000000  08010374  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030150  2**0
                  CONTENTS
 10 .bss          00021d98  20000150  20000150  00030150  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20021ee8  20021ee8  00030150  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030150  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030180  2**0
                  CONTENTS, READONLY
 14 .debug_info   00028eb1  00000000  00000000  000301c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000078ab  00000000  00000000  00059074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002280  00000000  00000000  00060920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001a37  00000000  00000000  00062ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002de97  00000000  00000000  000645d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00030411  00000000  00000000  0009246e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ed00d  00000000  00000000  000c287f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00008f60  00000000  00000000  001af88c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000085  00000000  00000000  001b87ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000150 	.word	0x20000150
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800f914 	.word	0x0800f914

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000154 	.word	0x20000154
 80001ec:	0800f914 	.word	0x0800f914

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000210:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000214:	f000 b970 	b.w	80004f8 <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9e08      	ldr	r6, [sp, #32]
 8000236:	460d      	mov	r5, r1
 8000238:	4604      	mov	r4, r0
 800023a:	460f      	mov	r7, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14a      	bne.n	80002d6 <__udivmoddi4+0xa6>
 8000240:	428a      	cmp	r2, r1
 8000242:	4694      	mov	ip, r2
 8000244:	d965      	bls.n	8000312 <__udivmoddi4+0xe2>
 8000246:	fab2 f382 	clz	r3, r2
 800024a:	b143      	cbz	r3, 800025e <__udivmoddi4+0x2e>
 800024c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000250:	f1c3 0220 	rsb	r2, r3, #32
 8000254:	409f      	lsls	r7, r3
 8000256:	fa20 f202 	lsr.w	r2, r0, r2
 800025a:	4317      	orrs	r7, r2
 800025c:	409c      	lsls	r4, r3
 800025e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000262:	fa1f f58c 	uxth.w	r5, ip
 8000266:	fbb7 f1fe 	udiv	r1, r7, lr
 800026a:	0c22      	lsrs	r2, r4, #16
 800026c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000270:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000274:	fb01 f005 	mul.w	r0, r1, r5
 8000278:	4290      	cmp	r0, r2
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x62>
 800027c:	eb1c 0202 	adds.w	r2, ip, r2
 8000280:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000284:	f080 811c 	bcs.w	80004c0 <__udivmoddi4+0x290>
 8000288:	4290      	cmp	r0, r2
 800028a:	f240 8119 	bls.w	80004c0 <__udivmoddi4+0x290>
 800028e:	3902      	subs	r1, #2
 8000290:	4462      	add	r2, ip
 8000292:	1a12      	subs	r2, r2, r0
 8000294:	b2a4      	uxth	r4, r4
 8000296:	fbb2 f0fe 	udiv	r0, r2, lr
 800029a:	fb0e 2210 	mls	r2, lr, r0, r2
 800029e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a2:	fb00 f505 	mul.w	r5, r0, r5
 80002a6:	42a5      	cmp	r5, r4
 80002a8:	d90a      	bls.n	80002c0 <__udivmoddi4+0x90>
 80002aa:	eb1c 0404 	adds.w	r4, ip, r4
 80002ae:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x294>
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x294>
 80002bc:	4464      	add	r4, ip
 80002be:	3802      	subs	r0, #2
 80002c0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c4:	1b64      	subs	r4, r4, r5
 80002c6:	2100      	movs	r1, #0
 80002c8:	b11e      	cbz	r6, 80002d2 <__udivmoddi4+0xa2>
 80002ca:	40dc      	lsrs	r4, r3
 80002cc:	2300      	movs	r3, #0
 80002ce:	e9c6 4300 	strd	r4, r3, [r6]
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d908      	bls.n	80002ec <__udivmoddi4+0xbc>
 80002da:	2e00      	cmp	r6, #0
 80002dc:	f000 80ed 	beq.w	80004ba <__udivmoddi4+0x28a>
 80002e0:	2100      	movs	r1, #0
 80002e2:	e9c6 0500 	strd	r0, r5, [r6]
 80002e6:	4608      	mov	r0, r1
 80002e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ec:	fab3 f183 	clz	r1, r3
 80002f0:	2900      	cmp	r1, #0
 80002f2:	d149      	bne.n	8000388 <__udivmoddi4+0x158>
 80002f4:	42ab      	cmp	r3, r5
 80002f6:	d302      	bcc.n	80002fe <__udivmoddi4+0xce>
 80002f8:	4282      	cmp	r2, r0
 80002fa:	f200 80f8 	bhi.w	80004ee <__udivmoddi4+0x2be>
 80002fe:	1a84      	subs	r4, r0, r2
 8000300:	eb65 0203 	sbc.w	r2, r5, r3
 8000304:	2001      	movs	r0, #1
 8000306:	4617      	mov	r7, r2
 8000308:	2e00      	cmp	r6, #0
 800030a:	d0e2      	beq.n	80002d2 <__udivmoddi4+0xa2>
 800030c:	e9c6 4700 	strd	r4, r7, [r6]
 8000310:	e7df      	b.n	80002d2 <__udivmoddi4+0xa2>
 8000312:	b902      	cbnz	r2, 8000316 <__udivmoddi4+0xe6>
 8000314:	deff      	udf	#255	; 0xff
 8000316:	fab2 f382 	clz	r3, r2
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8090 	bne.w	8000440 <__udivmoddi4+0x210>
 8000320:	1a8a      	subs	r2, r1, r2
 8000322:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000326:	fa1f fe8c 	uxth.w	lr, ip
 800032a:	2101      	movs	r1, #1
 800032c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000330:	fb07 2015 	mls	r0, r7, r5, r2
 8000334:	0c22      	lsrs	r2, r4, #16
 8000336:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033a:	fb0e f005 	mul.w	r0, lr, r5
 800033e:	4290      	cmp	r0, r2
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x124>
 8000342:	eb1c 0202 	adds.w	r2, ip, r2
 8000346:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x122>
 800034c:	4290      	cmp	r0, r2
 800034e:	f200 80cb 	bhi.w	80004e8 <__udivmoddi4+0x2b8>
 8000352:	4645      	mov	r5, r8
 8000354:	1a12      	subs	r2, r2, r0
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb2 f0f7 	udiv	r0, r2, r7
 800035c:	fb07 2210 	mls	r2, r7, r0, r2
 8000360:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000364:	fb0e fe00 	mul.w	lr, lr, r0
 8000368:	45a6      	cmp	lr, r4
 800036a:	d908      	bls.n	800037e <__udivmoddi4+0x14e>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000374:	d202      	bcs.n	800037c <__udivmoddi4+0x14c>
 8000376:	45a6      	cmp	lr, r4
 8000378:	f200 80bb 	bhi.w	80004f2 <__udivmoddi4+0x2c2>
 800037c:	4610      	mov	r0, r2
 800037e:	eba4 040e 	sub.w	r4, r4, lr
 8000382:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000386:	e79f      	b.n	80002c8 <__udivmoddi4+0x98>
 8000388:	f1c1 0720 	rsb	r7, r1, #32
 800038c:	408b      	lsls	r3, r1
 800038e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000392:	ea4c 0c03 	orr.w	ip, ip, r3
 8000396:	fa05 f401 	lsl.w	r4, r5, r1
 800039a:	fa20 f307 	lsr.w	r3, r0, r7
 800039e:	40fd      	lsrs	r5, r7
 80003a0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a4:	4323      	orrs	r3, r4
 80003a6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003aa:	fa1f fe8c 	uxth.w	lr, ip
 80003ae:	fb09 5518 	mls	r5, r9, r8, r5
 80003b2:	0c1c      	lsrs	r4, r3, #16
 80003b4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003b8:	fb08 f50e 	mul.w	r5, r8, lr
 80003bc:	42a5      	cmp	r5, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	fa00 f001 	lsl.w	r0, r0, r1
 80003c6:	d90b      	bls.n	80003e0 <__udivmoddi4+0x1b0>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003d0:	f080 8088 	bcs.w	80004e4 <__udivmoddi4+0x2b4>
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	f240 8085 	bls.w	80004e4 <__udivmoddi4+0x2b4>
 80003da:	f1a8 0802 	sub.w	r8, r8, #2
 80003de:	4464      	add	r4, ip
 80003e0:	1b64      	subs	r4, r4, r5
 80003e2:	b29d      	uxth	r5, r3
 80003e4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e8:	fb09 4413 	mls	r4, r9, r3, r4
 80003ec:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f4:	45a6      	cmp	lr, r4
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x1da>
 80003f8:	eb1c 0404 	adds.w	r4, ip, r4
 80003fc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000400:	d26c      	bcs.n	80004dc <__udivmoddi4+0x2ac>
 8000402:	45a6      	cmp	lr, r4
 8000404:	d96a      	bls.n	80004dc <__udivmoddi4+0x2ac>
 8000406:	3b02      	subs	r3, #2
 8000408:	4464      	add	r4, ip
 800040a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800040e:	fba3 9502 	umull	r9, r5, r3, r2
 8000412:	eba4 040e 	sub.w	r4, r4, lr
 8000416:	42ac      	cmp	r4, r5
 8000418:	46c8      	mov	r8, r9
 800041a:	46ae      	mov	lr, r5
 800041c:	d356      	bcc.n	80004cc <__udivmoddi4+0x29c>
 800041e:	d053      	beq.n	80004c8 <__udivmoddi4+0x298>
 8000420:	b156      	cbz	r6, 8000438 <__udivmoddi4+0x208>
 8000422:	ebb0 0208 	subs.w	r2, r0, r8
 8000426:	eb64 040e 	sbc.w	r4, r4, lr
 800042a:	fa04 f707 	lsl.w	r7, r4, r7
 800042e:	40ca      	lsrs	r2, r1
 8000430:	40cc      	lsrs	r4, r1
 8000432:	4317      	orrs	r7, r2
 8000434:	e9c6 7400 	strd	r7, r4, [r6]
 8000438:	4618      	mov	r0, r3
 800043a:	2100      	movs	r1, #0
 800043c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000440:	f1c3 0120 	rsb	r1, r3, #32
 8000444:	fa02 fc03 	lsl.w	ip, r2, r3
 8000448:	fa20 f201 	lsr.w	r2, r0, r1
 800044c:	fa25 f101 	lsr.w	r1, r5, r1
 8000450:	409d      	lsls	r5, r3
 8000452:	432a      	orrs	r2, r5
 8000454:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000460:	fb07 1510 	mls	r5, r7, r0, r1
 8000464:	0c11      	lsrs	r1, r2, #16
 8000466:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046a:	fb00 f50e 	mul.w	r5, r0, lr
 800046e:	428d      	cmp	r5, r1
 8000470:	fa04 f403 	lsl.w	r4, r4, r3
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x258>
 8000476:	eb1c 0101 	adds.w	r1, ip, r1
 800047a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800047e:	d22f      	bcs.n	80004e0 <__udivmoddi4+0x2b0>
 8000480:	428d      	cmp	r5, r1
 8000482:	d92d      	bls.n	80004e0 <__udivmoddi4+0x2b0>
 8000484:	3802      	subs	r0, #2
 8000486:	4461      	add	r1, ip
 8000488:	1b49      	subs	r1, r1, r5
 800048a:	b292      	uxth	r2, r2
 800048c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000490:	fb07 1115 	mls	r1, r7, r5, r1
 8000494:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000498:	fb05 f10e 	mul.w	r1, r5, lr
 800049c:	4291      	cmp	r1, r2
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x282>
 80004a0:	eb1c 0202 	adds.w	r2, ip, r2
 80004a4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004a8:	d216      	bcs.n	80004d8 <__udivmoddi4+0x2a8>
 80004aa:	4291      	cmp	r1, r2
 80004ac:	d914      	bls.n	80004d8 <__udivmoddi4+0x2a8>
 80004ae:	3d02      	subs	r5, #2
 80004b0:	4462      	add	r2, ip
 80004b2:	1a52      	subs	r2, r2, r1
 80004b4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004b8:	e738      	b.n	800032c <__udivmoddi4+0xfc>
 80004ba:	4631      	mov	r1, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xa2>
 80004c0:	4639      	mov	r1, r7
 80004c2:	e6e6      	b.n	8000292 <__udivmoddi4+0x62>
 80004c4:	4610      	mov	r0, r2
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x90>
 80004c8:	4548      	cmp	r0, r9
 80004ca:	d2a9      	bcs.n	8000420 <__udivmoddi4+0x1f0>
 80004cc:	ebb9 0802 	subs.w	r8, r9, r2
 80004d0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d4:	3b01      	subs	r3, #1
 80004d6:	e7a3      	b.n	8000420 <__udivmoddi4+0x1f0>
 80004d8:	4645      	mov	r5, r8
 80004da:	e7ea      	b.n	80004b2 <__udivmoddi4+0x282>
 80004dc:	462b      	mov	r3, r5
 80004de:	e794      	b.n	800040a <__udivmoddi4+0x1da>
 80004e0:	4640      	mov	r0, r8
 80004e2:	e7d1      	b.n	8000488 <__udivmoddi4+0x258>
 80004e4:	46d0      	mov	r8, sl
 80004e6:	e77b      	b.n	80003e0 <__udivmoddi4+0x1b0>
 80004e8:	3d02      	subs	r5, #2
 80004ea:	4462      	add	r2, ip
 80004ec:	e732      	b.n	8000354 <__udivmoddi4+0x124>
 80004ee:	4608      	mov	r0, r1
 80004f0:	e70a      	b.n	8000308 <__udivmoddi4+0xd8>
 80004f2:	4464      	add	r4, ip
 80004f4:	3802      	subs	r0, #2
 80004f6:	e742      	b.n	800037e <__udivmoddi4+0x14e>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000500:	4b17      	ldr	r3, [pc, #92]	; (8000560 <MX_CAN1_Init+0x64>)
 8000502:	4a18      	ldr	r2, [pc, #96]	; (8000564 <MX_CAN1_Init+0x68>)
 8000504:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 7;
 8000506:	4b16      	ldr	r3, [pc, #88]	; (8000560 <MX_CAN1_Init+0x64>)
 8000508:	2207      	movs	r2, #7
 800050a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800050c:	4b14      	ldr	r3, [pc, #80]	; (8000560 <MX_CAN1_Init+0x64>)
 800050e:	2200      	movs	r2, #0
 8000510:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000512:	4b13      	ldr	r3, [pc, #76]	; (8000560 <MX_CAN1_Init+0x64>)
 8000514:	2200      	movs	r2, #0
 8000516:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000518:	4b11      	ldr	r3, [pc, #68]	; (8000560 <MX_CAN1_Init+0x64>)
 800051a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800051e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000520:	4b0f      	ldr	r3, [pc, #60]	; (8000560 <MX_CAN1_Init+0x64>)
 8000522:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000526:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000528:	4b0d      	ldr	r3, [pc, #52]	; (8000560 <MX_CAN1_Init+0x64>)
 800052a:	2200      	movs	r2, #0
 800052c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800052e:	4b0c      	ldr	r3, [pc, #48]	; (8000560 <MX_CAN1_Init+0x64>)
 8000530:	2200      	movs	r2, #0
 8000532:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000534:	4b0a      	ldr	r3, [pc, #40]	; (8000560 <MX_CAN1_Init+0x64>)
 8000536:	2200      	movs	r2, #0
 8000538:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800053a:	4b09      	ldr	r3, [pc, #36]	; (8000560 <MX_CAN1_Init+0x64>)
 800053c:	2200      	movs	r2, #0
 800053e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000540:	4b07      	ldr	r3, [pc, #28]	; (8000560 <MX_CAN1_Init+0x64>)
 8000542:	2200      	movs	r2, #0
 8000544:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 8000546:	4b06      	ldr	r3, [pc, #24]	; (8000560 <MX_CAN1_Init+0x64>)
 8000548:	2201      	movs	r2, #1
 800054a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800054c:	4804      	ldr	r0, [pc, #16]	; (8000560 <MX_CAN1_Init+0x64>)
 800054e:	f001 f9c5 	bl	80018dc <HAL_CAN_Init>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000558:	f000 fbae 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800055c:	bf00      	nop
 800055e:	bd80      	pop	{r7, pc}
 8000560:	2000016c 	.word	0x2000016c
 8000564:	40006400 	.word	0x40006400

08000568 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 800056c:	4b16      	ldr	r3, [pc, #88]	; (80005c8 <MX_CAN2_Init+0x60>)
 800056e:	4a17      	ldr	r2, [pc, #92]	; (80005cc <MX_CAN2_Init+0x64>)
 8000570:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 8000572:	4b15      	ldr	r3, [pc, #84]	; (80005c8 <MX_CAN2_Init+0x60>)
 8000574:	2210      	movs	r2, #16
 8000576:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000578:	4b13      	ldr	r3, [pc, #76]	; (80005c8 <MX_CAN2_Init+0x60>)
 800057a:	2200      	movs	r2, #0
 800057c:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800057e:	4b12      	ldr	r3, [pc, #72]	; (80005c8 <MX_CAN2_Init+0x60>)
 8000580:	2200      	movs	r2, #0
 8000582:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000584:	4b10      	ldr	r3, [pc, #64]	; (80005c8 <MX_CAN2_Init+0x60>)
 8000586:	2200      	movs	r2, #0
 8000588:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 800058a:	4b0f      	ldr	r3, [pc, #60]	; (80005c8 <MX_CAN2_Init+0x60>)
 800058c:	2200      	movs	r2, #0
 800058e:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000590:	4b0d      	ldr	r3, [pc, #52]	; (80005c8 <MX_CAN2_Init+0x60>)
 8000592:	2200      	movs	r2, #0
 8000594:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000596:	4b0c      	ldr	r3, [pc, #48]	; (80005c8 <MX_CAN2_Init+0x60>)
 8000598:	2200      	movs	r2, #0
 800059a:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 800059c:	4b0a      	ldr	r3, [pc, #40]	; (80005c8 <MX_CAN2_Init+0x60>)
 800059e:	2200      	movs	r2, #0
 80005a0:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80005a2:	4b09      	ldr	r3, [pc, #36]	; (80005c8 <MX_CAN2_Init+0x60>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80005a8:	4b07      	ldr	r3, [pc, #28]	; (80005c8 <MX_CAN2_Init+0x60>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80005ae:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <MX_CAN2_Init+0x60>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80005b4:	4804      	ldr	r0, [pc, #16]	; (80005c8 <MX_CAN2_Init+0x60>)
 80005b6:	f001 f991 	bl	80018dc <HAL_CAN_Init>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 80005c0:	f000 fb7a 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80005c4:	bf00      	nop
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	20000194 	.word	0x20000194
 80005cc:	40006800 	.word	0x40006800

080005d0 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b08c      	sub	sp, #48	; 0x30
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d8:	f107 031c 	add.w	r3, r7, #28
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
 80005e6:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a4a      	ldr	r2, [pc, #296]	; (8000718 <HAL_CAN_MspInit+0x148>)
 80005ee:	4293      	cmp	r3, r2
 80005f0:	d145      	bne.n	800067e <HAL_CAN_MspInit+0xae>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80005f2:	4b4a      	ldr	r3, [pc, #296]	; (800071c <HAL_CAN_MspInit+0x14c>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	3301      	adds	r3, #1
 80005f8:	4a48      	ldr	r2, [pc, #288]	; (800071c <HAL_CAN_MspInit+0x14c>)
 80005fa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80005fc:	4b47      	ldr	r3, [pc, #284]	; (800071c <HAL_CAN_MspInit+0x14c>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	2b01      	cmp	r3, #1
 8000602:	d10d      	bne.n	8000620 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000604:	2300      	movs	r3, #0
 8000606:	61bb      	str	r3, [r7, #24]
 8000608:	4b45      	ldr	r3, [pc, #276]	; (8000720 <HAL_CAN_MspInit+0x150>)
 800060a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060c:	4a44      	ldr	r2, [pc, #272]	; (8000720 <HAL_CAN_MspInit+0x150>)
 800060e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000612:	6413      	str	r3, [r2, #64]	; 0x40
 8000614:	4b42      	ldr	r3, [pc, #264]	; (8000720 <HAL_CAN_MspInit+0x150>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000618:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800061c:	61bb      	str	r3, [r7, #24]
 800061e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000620:	2300      	movs	r3, #0
 8000622:	617b      	str	r3, [r7, #20]
 8000624:	4b3e      	ldr	r3, [pc, #248]	; (8000720 <HAL_CAN_MspInit+0x150>)
 8000626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000628:	4a3d      	ldr	r2, [pc, #244]	; (8000720 <HAL_CAN_MspInit+0x150>)
 800062a:	f043 0308 	orr.w	r3, r3, #8
 800062e:	6313      	str	r3, [r2, #48]	; 0x30
 8000630:	4b3b      	ldr	r3, [pc, #236]	; (8000720 <HAL_CAN_MspInit+0x150>)
 8000632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000634:	f003 0308 	and.w	r3, r3, #8
 8000638:	617b      	str	r3, [r7, #20]
 800063a:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800063c:	2303      	movs	r3, #3
 800063e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000640:	2302      	movs	r3, #2
 8000642:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000644:	2300      	movs	r3, #0
 8000646:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000648:	2303      	movs	r3, #3
 800064a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800064c:	2309      	movs	r3, #9
 800064e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000650:	f107 031c 	add.w	r3, r7, #28
 8000654:	4619      	mov	r1, r3
 8000656:	4833      	ldr	r0, [pc, #204]	; (8000724 <HAL_CAN_MspInit+0x154>)
 8000658:	f002 f958 	bl	800290c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 800065c:	2200      	movs	r2, #0
 800065e:	2105      	movs	r1, #5
 8000660:	2013      	movs	r0, #19
 8000662:	f001 fd27 	bl	80020b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000666:	2013      	movs	r0, #19
 8000668:	f001 fd40 	bl	80020ec <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 800066c:	2200      	movs	r2, #0
 800066e:	2105      	movs	r1, #5
 8000670:	2014      	movs	r0, #20
 8000672:	f001 fd1f 	bl	80020b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000676:	2014      	movs	r0, #20
 8000678:	f001 fd38 	bl	80020ec <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 800067c:	e048      	b.n	8000710 <HAL_CAN_MspInit+0x140>
  else if(canHandle->Instance==CAN2)
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	4a29      	ldr	r2, [pc, #164]	; (8000728 <HAL_CAN_MspInit+0x158>)
 8000684:	4293      	cmp	r3, r2
 8000686:	d143      	bne.n	8000710 <HAL_CAN_MspInit+0x140>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000688:	2300      	movs	r3, #0
 800068a:	613b      	str	r3, [r7, #16]
 800068c:	4b24      	ldr	r3, [pc, #144]	; (8000720 <HAL_CAN_MspInit+0x150>)
 800068e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000690:	4a23      	ldr	r2, [pc, #140]	; (8000720 <HAL_CAN_MspInit+0x150>)
 8000692:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000696:	6413      	str	r3, [r2, #64]	; 0x40
 8000698:	4b21      	ldr	r3, [pc, #132]	; (8000720 <HAL_CAN_MspInit+0x150>)
 800069a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800069c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80006a0:	613b      	str	r3, [r7, #16]
 80006a2:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80006a4:	4b1d      	ldr	r3, [pc, #116]	; (800071c <HAL_CAN_MspInit+0x14c>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	3301      	adds	r3, #1
 80006aa:	4a1c      	ldr	r2, [pc, #112]	; (800071c <HAL_CAN_MspInit+0x14c>)
 80006ac:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80006ae:	4b1b      	ldr	r3, [pc, #108]	; (800071c <HAL_CAN_MspInit+0x14c>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	2b01      	cmp	r3, #1
 80006b4:	d10d      	bne.n	80006d2 <HAL_CAN_MspInit+0x102>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	60fb      	str	r3, [r7, #12]
 80006ba:	4b19      	ldr	r3, [pc, #100]	; (8000720 <HAL_CAN_MspInit+0x150>)
 80006bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006be:	4a18      	ldr	r2, [pc, #96]	; (8000720 <HAL_CAN_MspInit+0x150>)
 80006c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006c4:	6413      	str	r3, [r2, #64]	; 0x40
 80006c6:	4b16      	ldr	r3, [pc, #88]	; (8000720 <HAL_CAN_MspInit+0x150>)
 80006c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	60bb      	str	r3, [r7, #8]
 80006d6:	4b12      	ldr	r3, [pc, #72]	; (8000720 <HAL_CAN_MspInit+0x150>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	4a11      	ldr	r2, [pc, #68]	; (8000720 <HAL_CAN_MspInit+0x150>)
 80006dc:	f043 0302 	orr.w	r3, r3, #2
 80006e0:	6313      	str	r3, [r2, #48]	; 0x30
 80006e2:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <HAL_CAN_MspInit+0x150>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	f003 0302 	and.w	r3, r3, #2
 80006ea:	60bb      	str	r3, [r7, #8]
 80006ec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80006ee:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80006f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f4:	2302      	movs	r3, #2
 80006f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f8:	2300      	movs	r3, #0
 80006fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006fc:	2303      	movs	r3, #3
 80006fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000700:	2309      	movs	r3, #9
 8000702:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000704:	f107 031c 	add.w	r3, r7, #28
 8000708:	4619      	mov	r1, r3
 800070a:	4808      	ldr	r0, [pc, #32]	; (800072c <HAL_CAN_MspInit+0x15c>)
 800070c:	f002 f8fe 	bl	800290c <HAL_GPIO_Init>
}
 8000710:	bf00      	nop
 8000712:	3730      	adds	r7, #48	; 0x30
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40006400 	.word	0x40006400
 800071c:	200001bc 	.word	0x200001bc
 8000720:	40023800 	.word	0x40023800
 8000724:	40020c00 	.word	0x40020c00
 8000728:	40006800 	.word	0x40006800
 800072c:	40020400 	.word	0x40020400

08000730 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	4b10      	ldr	r3, [pc, #64]	; (800077c <MX_DMA_Init+0x4c>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	4a0f      	ldr	r2, [pc, #60]	; (800077c <MX_DMA_Init+0x4c>)
 8000740:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000744:	6313      	str	r3, [r2, #48]	; 0x30
 8000746:	4b0d      	ldr	r3, [pc, #52]	; (800077c <MX_DMA_Init+0x4c>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8000752:	2200      	movs	r2, #0
 8000754:	2105      	movs	r1, #5
 8000756:	2039      	movs	r0, #57	; 0x39
 8000758:	f001 fcac 	bl	80020b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800075c:	2039      	movs	r0, #57	; 0x39
 800075e:	f001 fcc5 	bl	80020ec <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8000762:	2200      	movs	r2, #0
 8000764:	2105      	movs	r1, #5
 8000766:	2045      	movs	r0, #69	; 0x45
 8000768:	f001 fca4 	bl	80020b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800076c:	2045      	movs	r0, #69	; 0x45
 800076e:	f001 fcbd 	bl	80020ec <HAL_NVIC_EnableIRQ>

}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40023800 	.word	0x40023800

08000780 <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800078a:	bf00      	nop
 800078c:	370c      	adds	r7, #12
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr

08000796 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000796:	b480      	push	{r7}
 8000798:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 800079a:	bf00      	nop
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr

080007a4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80007a4:	b5b0      	push	{r4, r5, r7, lr}
 80007a6:	b086      	sub	sp, #24
 80007a8:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80007aa:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <MX_FREERTOS_Init+0x2c>)
 80007ac:	1d3c      	adds	r4, r7, #4
 80007ae:	461d      	mov	r5, r3
 80007b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007b4:	682b      	ldr	r3, [r5, #0]
 80007b6:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80007b8:	1d3b      	adds	r3, r7, #4
 80007ba:	2100      	movs	r1, #0
 80007bc:	4618      	mov	r0, r3
 80007be:	f009 fd0c 	bl	800a1da <osThreadCreate>
 80007c2:	4603      	mov	r3, r0
 80007c4:	4a03      	ldr	r2, [pc, #12]	; (80007d4 <MX_FREERTOS_Init+0x30>)
 80007c6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80007c8:	bf00      	nop
 80007ca:	3718      	adds	r7, #24
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bdb0      	pop	{r4, r5, r7, pc}
 80007d0:	0800f938 	.word	0x0800f938
 80007d4:	200001c0 	.word	0x200001c0

080007d8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80007e0:	f00b fa50 	bl	800bc84 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80007e4:	2001      	movs	r0, #1
 80007e6:	f009 fd1f 	bl	800a228 <osDelay>
 80007ea:	e7fb      	b.n	80007e4 <StartDefaultTask+0xc>

080007ec <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b08e      	sub	sp, #56	; 0x38
 80007f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	60da      	str	r2, [r3, #12]
 8000800:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	623b      	str	r3, [r7, #32]
 8000806:	4bb3      	ldr	r3, [pc, #716]	; (8000ad4 <MX_GPIO_Init+0x2e8>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4ab2      	ldr	r2, [pc, #712]	; (8000ad4 <MX_GPIO_Init+0x2e8>)
 800080c:	f043 0310 	orr.w	r3, r3, #16
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4bb0      	ldr	r3, [pc, #704]	; (8000ad4 <MX_GPIO_Init+0x2e8>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0310 	and.w	r3, r3, #16
 800081a:	623b      	str	r3, [r7, #32]
 800081c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	61fb      	str	r3, [r7, #28]
 8000822:	4bac      	ldr	r3, [pc, #688]	; (8000ad4 <MX_GPIO_Init+0x2e8>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4aab      	ldr	r2, [pc, #684]	; (8000ad4 <MX_GPIO_Init+0x2e8>)
 8000828:	f043 0302 	orr.w	r3, r3, #2
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4ba9      	ldr	r3, [pc, #676]	; (8000ad4 <MX_GPIO_Init+0x2e8>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0302 	and.w	r3, r3, #2
 8000836:	61fb      	str	r3, [r7, #28]
 8000838:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	61bb      	str	r3, [r7, #24]
 800083e:	4ba5      	ldr	r3, [pc, #660]	; (8000ad4 <MX_GPIO_Init+0x2e8>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4aa4      	ldr	r2, [pc, #656]	; (8000ad4 <MX_GPIO_Init+0x2e8>)
 8000844:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4ba2      	ldr	r3, [pc, #648]	; (8000ad4 <MX_GPIO_Init+0x2e8>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000852:	61bb      	str	r3, [r7, #24]
 8000854:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	617b      	str	r3, [r7, #20]
 800085a:	4b9e      	ldr	r3, [pc, #632]	; (8000ad4 <MX_GPIO_Init+0x2e8>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a9d      	ldr	r2, [pc, #628]	; (8000ad4 <MX_GPIO_Init+0x2e8>)
 8000860:	f043 0308 	orr.w	r3, r3, #8
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b9b      	ldr	r3, [pc, #620]	; (8000ad4 <MX_GPIO_Init+0x2e8>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f003 0308 	and.w	r3, r3, #8
 800086e:	617b      	str	r3, [r7, #20]
 8000870:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	613b      	str	r3, [r7, #16]
 8000876:	4b97      	ldr	r3, [pc, #604]	; (8000ad4 <MX_GPIO_Init+0x2e8>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a96      	ldr	r2, [pc, #600]	; (8000ad4 <MX_GPIO_Init+0x2e8>)
 800087c:	f043 0304 	orr.w	r3, r3, #4
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
 8000882:	4b94      	ldr	r3, [pc, #592]	; (8000ad4 <MX_GPIO_Init+0x2e8>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f003 0304 	and.w	r3, r3, #4
 800088a:	613b      	str	r3, [r7, #16]
 800088c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	60fb      	str	r3, [r7, #12]
 8000892:	4b90      	ldr	r3, [pc, #576]	; (8000ad4 <MX_GPIO_Init+0x2e8>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a8f      	ldr	r2, [pc, #572]	; (8000ad4 <MX_GPIO_Init+0x2e8>)
 8000898:	f043 0301 	orr.w	r3, r3, #1
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b8d      	ldr	r3, [pc, #564]	; (8000ad4 <MX_GPIO_Init+0x2e8>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	60bb      	str	r3, [r7, #8]
 80008ae:	4b89      	ldr	r3, [pc, #548]	; (8000ad4 <MX_GPIO_Init+0x2e8>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	4a88      	ldr	r2, [pc, #544]	; (8000ad4 <MX_GPIO_Init+0x2e8>)
 80008b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008b8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ba:	4b86      	ldr	r3, [pc, #536]	; (8000ad4 <MX_GPIO_Init+0x2e8>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008c2:	60bb      	str	r3, [r7, #8]
 80008c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	607b      	str	r3, [r7, #4]
 80008ca:	4b82      	ldr	r3, [pc, #520]	; (8000ad4 <MX_GPIO_Init+0x2e8>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	4a81      	ldr	r2, [pc, #516]	; (8000ad4 <MX_GPIO_Init+0x2e8>)
 80008d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008d4:	6313      	str	r3, [r2, #48]	; 0x30
 80008d6:	4b7f      	ldr	r3, [pc, #508]	; (8000ad4 <MX_GPIO_Init+0x2e8>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	603b      	str	r3, [r7, #0]
 80008e6:	4b7b      	ldr	r3, [pc, #492]	; (8000ad4 <MX_GPIO_Init+0x2e8>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	4a7a      	ldr	r2, [pc, #488]	; (8000ad4 <MX_GPIO_Init+0x2e8>)
 80008ec:	f043 0320 	orr.w	r3, r3, #32
 80008f0:	6313      	str	r3, [r2, #48]	; 0x30
 80008f2:	4b78      	ldr	r3, [pc, #480]	; (8000ad4 <MX_GPIO_Init+0x2e8>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	f003 0320 	and.w	r3, r3, #32
 80008fa:	603b      	str	r3, [r7, #0]
 80008fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, IST_RESET_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 80008fe:	2200      	movs	r2, #0
 8000900:	f640 0104 	movw	r1, #2052	; 0x804
 8000904:	4874      	ldr	r0, [pc, #464]	; (8000ad8 <MX_GPIO_Init+0x2ec>)
 8000906:	f002 f9ad 	bl	8002c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, POWER1_CTRL_Pin|POWER2_CTRL_Pin|POWER3_CTRL_Pin|POWER4_CTRL_Pin, GPIO_PIN_RESET);
 800090a:	2200      	movs	r2, #0
 800090c:	213c      	movs	r1, #60	; 0x3c
 800090e:	4873      	ldr	r0, [pc, #460]	; (8000adc <MX_GPIO_Init+0x2f0>)
 8000910:	f002 f9a8 	bl	8002c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED_A_Pin|LED_B_Pin|LED_C_Pin|LED_D_Pin
 8000914:	2200      	movs	r2, #0
 8000916:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 800091a:	4871      	ldr	r0, [pc, #452]	; (8000ae0 <MX_GPIO_Init+0x2f4>)
 800091c:	f002 f9a2 	bl	8002c64 <HAL_GPIO_WritePin>
                          |LED_E_Pin|LED_F_Pin|LED_G_Pin|LED_H_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SPI5_NSS_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 8000920:	2200      	movs	r2, #0
 8000922:	f244 0140 	movw	r1, #16448	; 0x4040
 8000926:	486f      	ldr	r0, [pc, #444]	; (8000ae4 <MX_GPIO_Init+0x2f8>)
 8000928:	f002 f99c 	bl	8002c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IO_PROBE_GPIO_Port, IO_PROBE_Pin, GPIO_PIN_RESET);
 800092c:	2200      	movs	r2, #0
 800092e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000932:	486d      	ldr	r0, [pc, #436]	; (8000ae8 <MX_GPIO_Init+0x2fc>)
 8000934:	f002 f996 	bl	8002c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE1 PE0 PE4
                           PE5 PE6 PE13 PE8
                           PE9 PE7 PE10 PE12
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_4
 8000938:	f24b 73fb 	movw	r3, #47099	; 0xb7fb
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_13|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800093e:	2303      	movs	r3, #3
 8000940:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000946:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800094a:	4619      	mov	r1, r3
 800094c:	4862      	ldr	r0, [pc, #392]	; (8000ad8 <MX_GPIO_Init+0x2ec>)
 800094e:	f001 ffdd 	bl	800290c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = IST_RESET_Pin|LED_RED_Pin;
 8000952:	f640 0304 	movw	r3, #2052	; 0x804
 8000956:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000958:	2301      	movs	r3, #1
 800095a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000960:	2300      	movs	r3, #0
 8000962:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000964:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000968:	4619      	mov	r1, r3
 800096a:	485b      	ldr	r0, [pc, #364]	; (8000ad8 <MX_GPIO_Init+0x2ec>)
 800096c:	f001 ffce 	bl	800290c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB4 PB3 PB9
                           PB7 PB6 PB1 PB0
                           PB10 PB11 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_9
 8000970:	f64c 73db 	movw	r3, #53211	; 0xcfdb
 8000974:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1|GPIO_PIN_0
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000976:	2303      	movs	r3, #3
 8000978:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800097e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000982:	4619      	mov	r1, r3
 8000984:	4859      	ldr	r0, [pc, #356]	; (8000aec <MX_GPIO_Init+0x300>)
 8000986:	f001 ffc1 	bl	800290c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG13 PG15 PG12 PG11
                           PG10 PG0 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_12|GPIO_PIN_11
 800098a:	f64b 4301 	movw	r3, #48129	; 0xbc01
 800098e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_10|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000990:	2303      	movs	r3, #3
 8000992:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000998:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800099c:	4619      	mov	r1, r3
 800099e:	4850      	ldr	r0, [pc, #320]	; (8000ae0 <MX_GPIO_Init+0x2f4>)
 80009a0:	f001 ffb4 	bl	800290c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD7 PD5 PD4 PD3
                           PD2 PD15 PD14 PD13
                           PD11 PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3
 80009a4:	f64e 43bc 	movw	r3, #60604	; 0xecbc
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_2|GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13
                          |GPIO_PIN_11|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009aa:	2303      	movs	r3, #3
 80009ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b6:	4619      	mov	r1, r3
 80009b8:	484b      	ldr	r0, [pc, #300]	; (8000ae8 <MX_GPIO_Init+0x2fc>)
 80009ba:	f001 ffa7 	bl	800290c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC12 PC11 PC10 PC13
                           PC14 PC15 PC9 PC8
                           PC7 PC6 PC0 PC1
                           PC2 PC3 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_13
 80009be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009c2:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009c4:	2303      	movs	r3, #3
 80009c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d0:	4619      	mov	r1, r3
 80009d2:	4847      	ldr	r0, [pc, #284]	; (8000af0 <MX_GPIO_Init+0x304>)
 80009d4:	f001 ff9a 	bl	800290c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA15 PA10 PA9 PA4
                           PA6 PA5 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_4
 80009d8:	f248 63f0 	movw	r3, #34544	; 0x86f0
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009de:	2303      	movs	r3, #3
 80009e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ea:	4619      	mov	r1, r3
 80009ec:	4841      	ldr	r0, [pc, #260]	; (8000af4 <MX_GPIO_Init+0x308>)
 80009ee:	f001 ff8d 	bl	800290c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SYS_CFG_Pin;
 80009f2:	2340      	movs	r3, #64	; 0x40
 80009f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f6:	2300      	movs	r3, #0
 80009f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SYS_CFG_GPIO_Port, &GPIO_InitStruct);
 80009fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a02:	4619      	mov	r1, r3
 8000a04:	4838      	ldr	r0, [pc, #224]	; (8000ae8 <MX_GPIO_Init+0x2fc>)
 8000a06:	f001 ff81 	bl	800290c <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = PIN_Y_Pin|PIN_X_Pin|PIN_V_Pin|PIN_Z_Pin;
 8000a0a:	23e4      	movs	r3, #228	; 0xe4
 8000a0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4836      	ldr	r0, [pc, #216]	; (8000af8 <MX_GPIO_Init+0x30c>)
 8000a1e:	f001 ff75 	bl	800290c <HAL_GPIO_Init>

  /*Configure GPIO pins : PI3 PI8 PI9 PI4
                           PI1 PI10 PI11 PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_4
 8000a22:	f640 731b 	movw	r3, #3867	; 0xf1b
 8000a26:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a28:	2303      	movs	r3, #3
 8000a2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a34:	4619      	mov	r1, r3
 8000a36:	4830      	ldr	r0, [pc, #192]	; (8000af8 <MX_GPIO_Init+0x30c>)
 8000a38:	f001 ff68 	bl	800290c <HAL_GPIO_Init>

  /*Configure GPIO pins : PH15 PH13 PH14 PH12
                           PH11 PH10 PH8 PH9
                           PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_12
 8000a3c:	f64f 7380 	movw	r3, #65408	; 0xff80
 8000a40:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a42:	2303      	movs	r3, #3
 8000a44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000a4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4822      	ldr	r0, [pc, #136]	; (8000adc <MX_GPIO_Init+0x2f0>)
 8000a52:	f001 ff5b 	bl	800290c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF2 PF1 PF3
                           PF4 PF5 PF13 PF12
                           PF15 PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_3
 8000a56:	f64b 033f 	movw	r3, #47167	; 0xb83f
 8000a5a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_13|GPIO_PIN_12
                          |GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a5c:	2303      	movs	r3, #3
 8000a5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a68:	4619      	mov	r1, r3
 8000a6a:	481e      	ldr	r0, [pc, #120]	; (8000ae4 <MX_GPIO_Init+0x2f8>)
 8000a6c:	f001 ff4e 	bl	800290c <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = POWER1_CTRL_Pin|POWER2_CTRL_Pin|POWER3_CTRL_Pin|POWER4_CTRL_Pin;
 8000a70:	233c      	movs	r3, #60	; 0x3c
 8000a72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a74:	2301      	movs	r3, #1
 8000a76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000a80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a84:	4619      	mov	r1, r3
 8000a86:	4815      	ldr	r0, [pc, #84]	; (8000adc <MX_GPIO_Init+0x2f0>)
 8000a88:	f001 ff40 	bl	800290c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LED_A_Pin|LED_B_Pin|LED_C_Pin|LED_D_Pin
 8000a8c:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 8000a90:	627b      	str	r3, [r7, #36]	; 0x24
                          |LED_E_Pin|LED_F_Pin|LED_G_Pin|LED_H_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a92:	2301      	movs	r3, #1
 8000a94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	480e      	ldr	r0, [pc, #56]	; (8000ae0 <MX_GPIO_Init+0x2f4>)
 8000aa6:	f001 ff31 	bl	800290c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = SPI5_NSS_Pin|LED_GREEN_Pin;
 8000aaa:	f244 0340 	movw	r3, #16448	; 0x4040
 8000aae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000abc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4808      	ldr	r0, [pc, #32]	; (8000ae4 <MX_GPIO_Init+0x2f8>)
 8000ac4:	f001 ff22 	bl	800290c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 8000ac8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000acc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ace:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ad2:	e013      	b.n	8000afc <MX_GPIO_Init+0x310>
 8000ad4:	40023800 	.word	0x40023800
 8000ad8:	40021000 	.word	0x40021000
 8000adc:	40021c00 	.word	0x40021c00
 8000ae0:	40021800 	.word	0x40021800
 8000ae4:	40021400 	.word	0x40021400
 8000ae8:	40020c00 	.word	0x40020c00
 8000aec:	40020400 	.word	0x40020400
 8000af0:	40020800 	.word	0x40020800
 8000af4:	40020000 	.word	0x40020000
 8000af8:	40022000 	.word	0x40022000
 8000afc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000afe:	2301      	movs	r3, #1
 8000b00:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 8000b02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b06:	4619      	mov	r1, r3
 8000b08:	4816      	ldr	r0, [pc, #88]	; (8000b64 <MX_GPIO_Init+0x378>)
 8000b0a:	f001 feff 	bl	800290c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8000b0e:	2304      	movs	r3, #4
 8000b10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b12:	2300      	movs	r3, #0
 8000b14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 8000b1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4811      	ldr	r0, [pc, #68]	; (8000b68 <MX_GPIO_Init+0x37c>)
 8000b22:	f001 fef3 	bl	800290c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = PIN_YA1_Pin|PIN_ZA0_Pin|PIN_XA2_Pin|PIN_W_Pin;
 8000b26:	230f      	movs	r3, #15
 8000b28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b36:	4619      	mov	r1, r3
 8000b38:	480c      	ldr	r0, [pc, #48]	; (8000b6c <MX_GPIO_Init+0x380>)
 8000b3a:	f001 fee7 	bl	800290c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IO_PROBE_Pin;
 8000b3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b44:	2301      	movs	r3, #1
 8000b46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(IO_PROBE_GPIO_Port, &GPIO_InitStruct);
 8000b50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b54:	4619      	mov	r1, r3
 8000b56:	4806      	ldr	r0, [pc, #24]	; (8000b70 <MX_GPIO_Init+0x384>)
 8000b58:	f001 fed8 	bl	800290c <HAL_GPIO_Init>

}
 8000b5c:	bf00      	nop
 8000b5e:	3738      	adds	r7, #56	; 0x38
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	40021400 	.word	0x40021400
 8000b68:	40020400 	.word	0x40020400
 8000b6c:	40020000 	.word	0x40020000
 8000b70:	40020c00 	.word	0x40020c00

08000b74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b78:	f000 fe4a 	bl	8001810 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b7c:	f000 f820 	bl	8000bc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b80:	f7ff fe34 	bl	80007ec <MX_GPIO_Init>
  MX_DMA_Init();
 8000b84:	f7ff fdd4 	bl	8000730 <MX_DMA_Init>
  MX_SPI5_Init();
 8000b88:	f000 f89c 	bl	8000cc4 <MX_SPI5_Init>
  MX_CAN1_Init();
 8000b8c:	f7ff fcb6 	bl	80004fc <MX_CAN1_Init>
  MX_USART6_UART_Init();
 8000b90:	f000 fcfc 	bl	800158c <MX_USART6_UART_Init>
  MX_TIM1_Init();
 8000b94:	f000 fa34 	bl	8001000 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000b98:	f000 fac2 	bl	8001120 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000b9c:	f000 fb0c 	bl	80011b8 <MX_TIM3_Init>
  MX_TIM12_Init();
 8000ba0:	f000 fb64 	bl	800126c <MX_TIM12_Init>
  MX_CAN2_Init();
 8000ba4:	f7ff fce0 	bl	8000568 <MX_CAN2_Init>
  MX_USART3_UART_Init();
 8000ba8:	f000 fcc6 	bl	8001538 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  hw_init();
 8000bac:	f00b fdd2 	bl	800c754 <hw_init>
  init_task();
 8000bb0:	f00b fdd6 	bl	800c760 <init_task>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000bb4:	f7ff fdf6 	bl	80007a4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000bb8:	f009 faf8 	bl	800a1ac <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <main+0x48>
	...

08000bc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b094      	sub	sp, #80	; 0x50
 8000bc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bc6:	f107 0320 	add.w	r3, r7, #32
 8000bca:	2230      	movs	r2, #48	; 0x30
 8000bcc:	2100      	movs	r1, #0
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f00e fdc1 	bl	800f756 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bd4:	f107 030c 	add.w	r3, r7, #12
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]
 8000be0:	60da      	str	r2, [r3, #12]
 8000be2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000be4:	2300      	movs	r3, #0
 8000be6:	60bb      	str	r3, [r7, #8]
 8000be8:	4b28      	ldr	r3, [pc, #160]	; (8000c8c <SystemClock_Config+0xcc>)
 8000bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bec:	4a27      	ldr	r2, [pc, #156]	; (8000c8c <SystemClock_Config+0xcc>)
 8000bee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bf2:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf4:	4b25      	ldr	r3, [pc, #148]	; (8000c8c <SystemClock_Config+0xcc>)
 8000bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bfc:	60bb      	str	r3, [r7, #8]
 8000bfe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c00:	2300      	movs	r3, #0
 8000c02:	607b      	str	r3, [r7, #4]
 8000c04:	4b22      	ldr	r3, [pc, #136]	; (8000c90 <SystemClock_Config+0xd0>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a21      	ldr	r2, [pc, #132]	; (8000c90 <SystemClock_Config+0xd0>)
 8000c0a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c0e:	6013      	str	r3, [r2, #0]
 8000c10:	4b1f      	ldr	r3, [pc, #124]	; (8000c90 <SystemClock_Config+0xd0>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c18:	607b      	str	r3, [r7, #4]
 8000c1a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c24:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c26:	2302      	movs	r3, #2
 8000c28:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c2a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8000c30:	2306      	movs	r3, #6
 8000c32:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000c34:	23a8      	movs	r3, #168	; 0xa8
 8000c36:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000c3c:	2307      	movs	r3, #7
 8000c3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c40:	f107 0320 	add.w	r3, r7, #32
 8000c44:	4618      	mov	r0, r3
 8000c46:	f003 fa91 	bl	800416c <HAL_RCC_OscConfig>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c50:	f000 f832 	bl	8000cb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c54:	230f      	movs	r3, #15
 8000c56:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c60:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c64:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c6a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c6c:	f107 030c 	add.w	r3, r7, #12
 8000c70:	2105      	movs	r1, #5
 8000c72:	4618      	mov	r0, r3
 8000c74:	f003 fcf2 	bl	800465c <HAL_RCC_ClockConfig>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000c7e:	f000 f81b 	bl	8000cb8 <Error_Handler>
  }
}
 8000c82:	bf00      	nop
 8000c84:	3750      	adds	r7, #80	; 0x50
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40023800 	.word	0x40023800
 8000c90:	40007000 	.word	0x40007000

08000c94 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a04      	ldr	r2, [pc, #16]	; (8000cb4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d101      	bne.n	8000caa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ca6:	f000 fdd5 	bl	8001854 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000caa:	bf00      	nop
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40000c00 	.word	0x40000c00

08000cb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cbc:	b672      	cpsid	i
}
 8000cbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cc0:	e7fe      	b.n	8000cc0 <Error_Handler+0x8>
	...

08000cc4 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8000cc8:	4b17      	ldr	r3, [pc, #92]	; (8000d28 <MX_SPI5_Init+0x64>)
 8000cca:	4a18      	ldr	r2, [pc, #96]	; (8000d2c <MX_SPI5_Init+0x68>)
 8000ccc:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000cce:	4b16      	ldr	r3, [pc, #88]	; (8000d28 <MX_SPI5_Init+0x64>)
 8000cd0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000cd4:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000cd6:	4b14      	ldr	r3, [pc, #80]	; (8000d28 <MX_SPI5_Init+0x64>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cdc:	4b12      	ldr	r3, [pc, #72]	; (8000d28 <MX_SPI5_Init+0x64>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ce2:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <MX_SPI5_Init+0x64>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ce8:	4b0f      	ldr	r3, [pc, #60]	; (8000d28 <MX_SPI5_Init+0x64>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000cee:	4b0e      	ldr	r3, [pc, #56]	; (8000d28 <MX_SPI5_Init+0x64>)
 8000cf0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cf4:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000cf6:	4b0c      	ldr	r3, [pc, #48]	; (8000d28 <MX_SPI5_Init+0x64>)
 8000cf8:	2230      	movs	r2, #48	; 0x30
 8000cfa:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cfc:	4b0a      	ldr	r3, [pc, #40]	; (8000d28 <MX_SPI5_Init+0x64>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d02:	4b09      	ldr	r3, [pc, #36]	; (8000d28 <MX_SPI5_Init+0x64>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d08:	4b07      	ldr	r3, [pc, #28]	; (8000d28 <MX_SPI5_Init+0x64>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000d0e:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <MX_SPI5_Init+0x64>)
 8000d10:	220a      	movs	r2, #10
 8000d12:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000d14:	4804      	ldr	r0, [pc, #16]	; (8000d28 <MX_SPI5_Init+0x64>)
 8000d16:	f003 feb3 	bl	8004a80 <HAL_SPI_Init>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000d20:	f7ff ffca 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000d24:	bf00      	nop
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	200001c4 	.word	0x200001c4
 8000d2c:	40015000 	.word	0x40015000

08000d30 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08a      	sub	sp, #40	; 0x28
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]
 8000d46:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a19      	ldr	r2, [pc, #100]	; (8000db4 <HAL_SPI_MspInit+0x84>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d12c      	bne.n	8000dac <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	613b      	str	r3, [r7, #16]
 8000d56:	4b18      	ldr	r3, [pc, #96]	; (8000db8 <HAL_SPI_MspInit+0x88>)
 8000d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5a:	4a17      	ldr	r2, [pc, #92]	; (8000db8 <HAL_SPI_MspInit+0x88>)
 8000d5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000d60:	6453      	str	r3, [r2, #68]	; 0x44
 8000d62:	4b15      	ldr	r3, [pc, #84]	; (8000db8 <HAL_SPI_MspInit+0x88>)
 8000d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d6a:	613b      	str	r3, [r7, #16]
 8000d6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	4b11      	ldr	r3, [pc, #68]	; (8000db8 <HAL_SPI_MspInit+0x88>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	4a10      	ldr	r2, [pc, #64]	; (8000db8 <HAL_SPI_MspInit+0x88>)
 8000d78:	f043 0320 	orr.w	r3, r3, #32
 8000d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7e:	4b0e      	ldr	r3, [pc, #56]	; (8000db8 <HAL_SPI_MspInit+0x88>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	f003 0320 	and.w	r3, r3, #32
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF9     ------> SPI5_MOSI
    PF8     ------> SPI5_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_8;
 8000d8a:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000d8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d90:	2302      	movs	r3, #2
 8000d92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d98:	2303      	movs	r3, #3
 8000d9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000d9c:	2305      	movs	r3, #5
 8000d9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000da0:	f107 0314 	add.w	r3, r7, #20
 8000da4:	4619      	mov	r1, r3
 8000da6:	4805      	ldr	r0, [pc, #20]	; (8000dbc <HAL_SPI_MspInit+0x8c>)
 8000da8:	f001 fdb0 	bl	800290c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8000dac:	bf00      	nop
 8000dae:	3728      	adds	r7, #40	; 0x28
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	40015000 	.word	0x40015000
 8000db8:	40023800 	.word	0x40023800
 8000dbc:	40021400 	.word	0x40021400

08000dc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	607b      	str	r3, [r7, #4]
 8000dca:	4b12      	ldr	r3, [pc, #72]	; (8000e14 <HAL_MspInit+0x54>)
 8000dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dce:	4a11      	ldr	r2, [pc, #68]	; (8000e14 <HAL_MspInit+0x54>)
 8000dd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dd4:	6453      	str	r3, [r2, #68]	; 0x44
 8000dd6:	4b0f      	ldr	r3, [pc, #60]	; (8000e14 <HAL_MspInit+0x54>)
 8000dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dde:	607b      	str	r3, [r7, #4]
 8000de0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	603b      	str	r3, [r7, #0]
 8000de6:	4b0b      	ldr	r3, [pc, #44]	; (8000e14 <HAL_MspInit+0x54>)
 8000de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dea:	4a0a      	ldr	r2, [pc, #40]	; (8000e14 <HAL_MspInit+0x54>)
 8000dec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000df0:	6413      	str	r3, [r2, #64]	; 0x40
 8000df2:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <HAL_MspInit+0x54>)
 8000df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dfa:	603b      	str	r3, [r7, #0]
 8000dfc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	210f      	movs	r1, #15
 8000e02:	f06f 0001 	mvn.w	r0, #1
 8000e06:	f001 f955 	bl	80020b4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40023800 	.word	0x40023800

08000e18 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08e      	sub	sp, #56	; 0x38
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000e20:	2300      	movs	r3, #0
 8000e22:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000e24:	2300      	movs	r3, #0
 8000e26:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000e28:	2300      	movs	r3, #0
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	4b33      	ldr	r3, [pc, #204]	; (8000efc <HAL_InitTick+0xe4>)
 8000e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e30:	4a32      	ldr	r2, [pc, #200]	; (8000efc <HAL_InitTick+0xe4>)
 8000e32:	f043 0308 	orr.w	r3, r3, #8
 8000e36:	6413      	str	r3, [r2, #64]	; 0x40
 8000e38:	4b30      	ldr	r3, [pc, #192]	; (8000efc <HAL_InitTick+0xe4>)
 8000e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3c:	f003 0308 	and.w	r3, r3, #8
 8000e40:	60fb      	str	r3, [r7, #12]
 8000e42:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e44:	f107 0210 	add.w	r2, r7, #16
 8000e48:	f107 0314 	add.w	r3, r7, #20
 8000e4c:	4611      	mov	r1, r2
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f003 fde4 	bl	8004a1c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e54:	6a3b      	ldr	r3, [r7, #32]
 8000e56:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d103      	bne.n	8000e66 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e5e:	f003 fdb5 	bl	80049cc <HAL_RCC_GetPCLK1Freq>
 8000e62:	6378      	str	r0, [r7, #52]	; 0x34
 8000e64:	e004      	b.n	8000e70 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e66:	f003 fdb1 	bl	80049cc <HAL_RCC_GetPCLK1Freq>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e72:	4a23      	ldr	r2, [pc, #140]	; (8000f00 <HAL_InitTick+0xe8>)
 8000e74:	fba2 2303 	umull	r2, r3, r2, r3
 8000e78:	0c9b      	lsrs	r3, r3, #18
 8000e7a:	3b01      	subs	r3, #1
 8000e7c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000e7e:	4b21      	ldr	r3, [pc, #132]	; (8000f04 <HAL_InitTick+0xec>)
 8000e80:	4a21      	ldr	r2, [pc, #132]	; (8000f08 <HAL_InitTick+0xf0>)
 8000e82:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000e84:	4b1f      	ldr	r3, [pc, #124]	; (8000f04 <HAL_InitTick+0xec>)
 8000e86:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e8a:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000e8c:	4a1d      	ldr	r2, [pc, #116]	; (8000f04 <HAL_InitTick+0xec>)
 8000e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e90:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000e92:	4b1c      	ldr	r3, [pc, #112]	; (8000f04 <HAL_InitTick+0xec>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e98:	4b1a      	ldr	r3, [pc, #104]	; (8000f04 <HAL_InitTick+0xec>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e9e:	4b19      	ldr	r3, [pc, #100]	; (8000f04 <HAL_InitTick+0xec>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8000ea4:	4817      	ldr	r0, [pc, #92]	; (8000f04 <HAL_InitTick+0xec>)
 8000ea6:	f003 fe74 	bl	8004b92 <HAL_TIM_Base_Init>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000eb0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d11b      	bne.n	8000ef0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8000eb8:	4812      	ldr	r0, [pc, #72]	; (8000f04 <HAL_InitTick+0xec>)
 8000eba:	f003 feb9 	bl	8004c30 <HAL_TIM_Base_Start_IT>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000ec4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d111      	bne.n	8000ef0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000ecc:	2032      	movs	r0, #50	; 0x32
 8000ece:	f001 f90d 	bl	80020ec <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2b0f      	cmp	r3, #15
 8000ed6:	d808      	bhi.n	8000eea <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	6879      	ldr	r1, [r7, #4]
 8000edc:	2032      	movs	r0, #50	; 0x32
 8000ede:	f001 f8e9 	bl	80020b4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ee2:	4a0a      	ldr	r2, [pc, #40]	; (8000f0c <HAL_InitTick+0xf4>)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6013      	str	r3, [r2, #0]
 8000ee8:	e002      	b.n	8000ef0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000ef0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3738      	adds	r7, #56	; 0x38
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	40023800 	.word	0x40023800
 8000f00:	431bde83 	.word	0x431bde83
 8000f04:	2000021c 	.word	0x2000021c
 8000f08:	40000c00 	.word	0x40000c00
 8000f0c:	20000004 	.word	0x20000004

08000f10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f14:	e7fe      	b.n	8000f14 <NMI_Handler+0x4>

08000f16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f16:	b480      	push	{r7}
 8000f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f1a:	e7fe      	b.n	8000f1a <HardFault_Handler+0x4>

08000f1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f20:	e7fe      	b.n	8000f20 <MemManage_Handler+0x4>

08000f22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f22:	b480      	push	{r7}
 8000f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f26:	e7fe      	b.n	8000f26 <BusFault_Handler+0x4>

08000f28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f2c:	e7fe      	b.n	8000f2c <UsageFault_Handler+0x4>

08000f2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f32:	bf00      	nop
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000f40:	4802      	ldr	r0, [pc, #8]	; (8000f4c <CAN1_TX_IRQHandler+0x10>)
 8000f42:	f000 fdc6 	bl	8001ad2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	2000016c 	.word	0x2000016c

08000f50 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000f54:	4802      	ldr	r0, [pc, #8]	; (8000f60 <CAN1_RX0_IRQHandler+0x10>)
 8000f56:	f000 fdbc 	bl	8001ad2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	2000016c 	.word	0x2000016c

08000f64 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f68:	4802      	ldr	r0, [pc, #8]	; (8000f74 <TIM2_IRQHandler+0x10>)
 8000f6a:	f003 ff20 	bl	8004dae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	200002ac 	.word	0x200002ac

08000f78 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000f7c:	4802      	ldr	r0, [pc, #8]	; (8000f88 <TIM5_IRQHandler+0x10>)
 8000f7e:	f003 ff16 	bl	8004dae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	2000021c 	.word	0x2000021c

08000f8c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8000f90:	4802      	ldr	r0, [pc, #8]	; (8000f9c <DMA2_Stream1_IRQHandler+0x10>)
 8000f92:	f001 fa51 	bl	8002438 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20000414 	.word	0x20000414

08000fa0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000fa4:	4802      	ldr	r0, [pc, #8]	; (8000fb0 <OTG_FS_IRQHandler+0x10>)
 8000fa6:	f001 ffd4 	bl	8002f52 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	20010b0c 	.word	0x20010b0c

08000fb4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8000fb8:	4802      	ldr	r0, [pc, #8]	; (8000fc4 <DMA2_Stream6_IRQHandler+0x10>)
 8000fba:	f001 fa3d 	bl	8002438 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	20000474 	.word	0x20000474

08000fc8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000fcc:	4802      	ldr	r0, [pc, #8]	; (8000fd8 <USART6_IRQHandler+0x10>)
 8000fce:	f004 fe29 	bl	8005c24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	200003cc 	.word	0x200003cc

08000fdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fe0:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <SystemInit+0x20>)
 8000fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fe6:	4a05      	ldr	r2, [pc, #20]	; (8000ffc <SystemInit+0x20>)
 8000fe8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b092      	sub	sp, #72	; 0x48
 8001004:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001006:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001010:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
 800101e:	611a      	str	r2, [r3, #16]
 8001020:	615a      	str	r2, [r3, #20]
 8001022:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001024:	1d3b      	adds	r3, r7, #4
 8001026:	2220      	movs	r2, #32
 8001028:	2100      	movs	r1, #0
 800102a:	4618      	mov	r0, r3
 800102c:	f00e fb93 	bl	800f756 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001030:	4b39      	ldr	r3, [pc, #228]	; (8001118 <MX_TIM1_Init+0x118>)
 8001032:	4a3a      	ldr	r2, [pc, #232]	; (800111c <MX_TIM1_Init+0x11c>)
 8001034:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16;
 8001036:	4b38      	ldr	r3, [pc, #224]	; (8001118 <MX_TIM1_Init+0x118>)
 8001038:	2210      	movs	r2, #16
 800103a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800103c:	4b36      	ldr	r3, [pc, #216]	; (8001118 <MX_TIM1_Init+0x118>)
 800103e:	2200      	movs	r2, #0
 8001040:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 8001042:	4b35      	ldr	r3, [pc, #212]	; (8001118 <MX_TIM1_Init+0x118>)
 8001044:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001048:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800104a:	4b33      	ldr	r3, [pc, #204]	; (8001118 <MX_TIM1_Init+0x118>)
 800104c:	2200      	movs	r2, #0
 800104e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001050:	4b31      	ldr	r3, [pc, #196]	; (8001118 <MX_TIM1_Init+0x118>)
 8001052:	2200      	movs	r2, #0
 8001054:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001056:	4b30      	ldr	r3, [pc, #192]	; (8001118 <MX_TIM1_Init+0x118>)
 8001058:	2200      	movs	r2, #0
 800105a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800105c:	482e      	ldr	r0, [pc, #184]	; (8001118 <MX_TIM1_Init+0x118>)
 800105e:	f003 fe57 	bl	8004d10 <HAL_TIM_PWM_Init>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001068:	f7ff fe26 	bl	8000cb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800106c:	2300      	movs	r3, #0
 800106e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001070:	2300      	movs	r3, #0
 8001072:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001074:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001078:	4619      	mov	r1, r3
 800107a:	4827      	ldr	r0, [pc, #156]	; (8001118 <MX_TIM1_Init+0x118>)
 800107c:	f004 fc30 	bl	80058e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001086:	f7ff fe17 	bl	8000cb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800108a:	2360      	movs	r3, #96	; 0x60
 800108c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1000;
 800108e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001092:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001094:	2300      	movs	r3, #0
 8001096:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001098:	2300      	movs	r3, #0
 800109a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800109c:	2300      	movs	r3, #0
 800109e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010a0:	2300      	movs	r3, #0
 80010a2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010a4:	2300      	movs	r3, #0
 80010a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ac:	2200      	movs	r2, #0
 80010ae:	4619      	mov	r1, r3
 80010b0:	4819      	ldr	r0, [pc, #100]	; (8001118 <MX_TIM1_Init+0x118>)
 80010b2:	f003 ff6d 	bl	8004f90 <HAL_TIM_PWM_ConfigChannel>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 80010bc:	f7ff fdfc 	bl	8000cb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80010c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c4:	220c      	movs	r2, #12
 80010c6:	4619      	mov	r1, r3
 80010c8:	4813      	ldr	r0, [pc, #76]	; (8001118 <MX_TIM1_Init+0x118>)
 80010ca:	f003 ff61 	bl	8004f90 <HAL_TIM_PWM_ConfigChannel>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 80010d4:	f7ff fdf0 	bl	8000cb8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010d8:	2300      	movs	r3, #0
 80010da:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010dc:	2300      	movs	r3, #0
 80010de:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010e0:	2300      	movs	r3, #0
 80010e2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010e4:	2300      	movs	r3, #0
 80010e6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010e8:	2300      	movs	r3, #0
 80010ea:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010f0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010f2:	2300      	movs	r3, #0
 80010f4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80010f6:	1d3b      	adds	r3, r7, #4
 80010f8:	4619      	mov	r1, r3
 80010fa:	4807      	ldr	r0, [pc, #28]	; (8001118 <MX_TIM1_Init+0x118>)
 80010fc:	f004 fc6c 	bl	80059d8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8001106:	f7ff fdd7 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800110a:	4803      	ldr	r0, [pc, #12]	; (8001118 <MX_TIM1_Init+0x118>)
 800110c:	f000 f968 	bl	80013e0 <HAL_TIM_MspPostInit>

}
 8001110:	bf00      	nop
 8001112:	3748      	adds	r7, #72	; 0x48
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20000264 	.word	0x20000264
 800111c:	40010000 	.word	0x40010000

08001120 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001126:	f107 0308 	add.w	r3, r7, #8
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	605a      	str	r2, [r3, #4]
 8001130:	609a      	str	r2, [r3, #8]
 8001132:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001134:	463b      	mov	r3, r7
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800113c:	4b1d      	ldr	r3, [pc, #116]	; (80011b4 <MX_TIM2_Init+0x94>)
 800113e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001142:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8001144:	4b1b      	ldr	r3, [pc, #108]	; (80011b4 <MX_TIM2_Init+0x94>)
 8001146:	2253      	movs	r2, #83	; 0x53
 8001148:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800114a:	4b1a      	ldr	r3, [pc, #104]	; (80011b4 <MX_TIM2_Init+0x94>)
 800114c:	2200      	movs	r2, #0
 800114e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001150:	4b18      	ldr	r3, [pc, #96]	; (80011b4 <MX_TIM2_Init+0x94>)
 8001152:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001156:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001158:	4b16      	ldr	r3, [pc, #88]	; (80011b4 <MX_TIM2_Init+0x94>)
 800115a:	2200      	movs	r2, #0
 800115c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800115e:	4b15      	ldr	r3, [pc, #84]	; (80011b4 <MX_TIM2_Init+0x94>)
 8001160:	2200      	movs	r2, #0
 8001162:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001164:	4813      	ldr	r0, [pc, #76]	; (80011b4 <MX_TIM2_Init+0x94>)
 8001166:	f003 fd14 	bl	8004b92 <HAL_TIM_Base_Init>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001170:	f7ff fda2 	bl	8000cb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001174:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001178:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800117a:	f107 0308 	add.w	r3, r7, #8
 800117e:	4619      	mov	r1, r3
 8001180:	480c      	ldr	r0, [pc, #48]	; (80011b4 <MX_TIM2_Init+0x94>)
 8001182:	f003 ffc7 	bl	8005114 <HAL_TIM_ConfigClockSource>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800118c:	f7ff fd94 	bl	8000cb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001190:	2300      	movs	r3, #0
 8001192:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001194:	2300      	movs	r3, #0
 8001196:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001198:	463b      	mov	r3, r7
 800119a:	4619      	mov	r1, r3
 800119c:	4805      	ldr	r0, [pc, #20]	; (80011b4 <MX_TIM2_Init+0x94>)
 800119e:	f004 fb9f 	bl	80058e0 <HAL_TIMEx_MasterConfigSynchronization>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80011a8:	f7ff fd86 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011ac:	bf00      	nop
 80011ae:	3718      	adds	r7, #24
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	200002ac 	.word	0x200002ac

080011b8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b08a      	sub	sp, #40	; 0x28
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011be:	f107 0320 	add.w	r3, r7, #32
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011c8:	1d3b      	adds	r3, r7, #4
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	605a      	str	r2, [r3, #4]
 80011d0:	609a      	str	r2, [r3, #8]
 80011d2:	60da      	str	r2, [r3, #12]
 80011d4:	611a      	str	r2, [r3, #16]
 80011d6:	615a      	str	r2, [r3, #20]
 80011d8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011da:	4b22      	ldr	r3, [pc, #136]	; (8001264 <MX_TIM3_Init+0xac>)
 80011dc:	4a22      	ldr	r2, [pc, #136]	; (8001268 <MX_TIM3_Init+0xb0>)
 80011de:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 80011e0:	4b20      	ldr	r3, [pc, #128]	; (8001264 <MX_TIM3_Init+0xac>)
 80011e2:	2253      	movs	r2, #83	; 0x53
 80011e4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011e6:	4b1f      	ldr	r3, [pc, #124]	; (8001264 <MX_TIM3_Init+0xac>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000-1;
 80011ec:	4b1d      	ldr	r3, [pc, #116]	; (8001264 <MX_TIM3_Init+0xac>)
 80011ee:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80011f2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011f4:	4b1b      	ldr	r3, [pc, #108]	; (8001264 <MX_TIM3_Init+0xac>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011fa:	4b1a      	ldr	r3, [pc, #104]	; (8001264 <MX_TIM3_Init+0xac>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001200:	4818      	ldr	r0, [pc, #96]	; (8001264 <MX_TIM3_Init+0xac>)
 8001202:	f003 fd85 	bl	8004d10 <HAL_TIM_PWM_Init>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800120c:	f7ff fd54 	bl	8000cb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001210:	2300      	movs	r3, #0
 8001212:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001214:	2300      	movs	r3, #0
 8001216:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001218:	f107 0320 	add.w	r3, r7, #32
 800121c:	4619      	mov	r1, r3
 800121e:	4811      	ldr	r0, [pc, #68]	; (8001264 <MX_TIM3_Init+0xac>)
 8001220:	f004 fb5e 	bl	80058e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800122a:	f7ff fd45 	bl	8000cb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800122e:	2360      	movs	r3, #96	; 0x60
 8001230:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001232:	2300      	movs	r3, #0
 8001234:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001236:	2300      	movs	r3, #0
 8001238:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800123a:	2300      	movs	r3, #0
 800123c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800123e:	1d3b      	adds	r3, r7, #4
 8001240:	2204      	movs	r2, #4
 8001242:	4619      	mov	r1, r3
 8001244:	4807      	ldr	r0, [pc, #28]	; (8001264 <MX_TIM3_Init+0xac>)
 8001246:	f003 fea3 	bl	8004f90 <HAL_TIM_PWM_ConfigChannel>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001250:	f7ff fd32 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001254:	4803      	ldr	r0, [pc, #12]	; (8001264 <MX_TIM3_Init+0xac>)
 8001256:	f000 f8c3 	bl	80013e0 <HAL_TIM_MspPostInit>

}
 800125a:	bf00      	nop
 800125c:	3728      	adds	r7, #40	; 0x28
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	200002f4 	.word	0x200002f4
 8001268:	40000400 	.word	0x40000400

0800126c <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b088      	sub	sp, #32
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001272:	1d3b      	adds	r3, r7, #4
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	611a      	str	r2, [r3, #16]
 8001280:	615a      	str	r2, [r3, #20]
 8001282:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001284:	4b1a      	ldr	r3, [pc, #104]	; (80012f0 <MX_TIM12_Init+0x84>)
 8001286:	4a1b      	ldr	r2, [pc, #108]	; (80012f4 <MX_TIM12_Init+0x88>)
 8001288:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 83;
 800128a:	4b19      	ldr	r3, [pc, #100]	; (80012f0 <MX_TIM12_Init+0x84>)
 800128c:	2253      	movs	r2, #83	; 0x53
 800128e:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001290:	4b17      	ldr	r3, [pc, #92]	; (80012f0 <MX_TIM12_Init+0x84>)
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 20000-1;
 8001296:	4b16      	ldr	r3, [pc, #88]	; (80012f0 <MX_TIM12_Init+0x84>)
 8001298:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800129c:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800129e:	4b14      	ldr	r3, [pc, #80]	; (80012f0 <MX_TIM12_Init+0x84>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012a4:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <MX_TIM12_Init+0x84>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80012aa:	4811      	ldr	r0, [pc, #68]	; (80012f0 <MX_TIM12_Init+0x84>)
 80012ac:	f003 fd30 	bl	8004d10 <HAL_TIM_PWM_Init>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 80012b6:	f7ff fcff 	bl	8000cb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012ba:	2360      	movs	r3, #96	; 0x60
 80012bc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012be:	2300      	movs	r3, #0
 80012c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012c2:	2300      	movs	r3, #0
 80012c4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012c6:	2300      	movs	r3, #0
 80012c8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012ca:	1d3b      	adds	r3, r7, #4
 80012cc:	2200      	movs	r2, #0
 80012ce:	4619      	mov	r1, r3
 80012d0:	4807      	ldr	r0, [pc, #28]	; (80012f0 <MX_TIM12_Init+0x84>)
 80012d2:	f003 fe5d 	bl	8004f90 <HAL_TIM_PWM_ConfigChannel>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 80012dc:	f7ff fcec 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80012e0:	4803      	ldr	r0, [pc, #12]	; (80012f0 <MX_TIM12_Init+0x84>)
 80012e2:	f000 f87d 	bl	80013e0 <HAL_TIM_MspPostInit>

}
 80012e6:	bf00      	nop
 80012e8:	3720      	adds	r7, #32
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	2000033c 	.word	0x2000033c
 80012f4:	40001800 	.word	0x40001800

080012f8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b087      	sub	sp, #28
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a1f      	ldr	r2, [pc, #124]	; (8001384 <HAL_TIM_PWM_MspInit+0x8c>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d10e      	bne.n	8001328 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	617b      	str	r3, [r7, #20]
 800130e:	4b1e      	ldr	r3, [pc, #120]	; (8001388 <HAL_TIM_PWM_MspInit+0x90>)
 8001310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001312:	4a1d      	ldr	r2, [pc, #116]	; (8001388 <HAL_TIM_PWM_MspInit+0x90>)
 8001314:	f043 0301 	orr.w	r3, r3, #1
 8001318:	6453      	str	r3, [r2, #68]	; 0x44
 800131a:	4b1b      	ldr	r3, [pc, #108]	; (8001388 <HAL_TIM_PWM_MspInit+0x90>)
 800131c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	617b      	str	r3, [r7, #20]
 8001324:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8001326:	e026      	b.n	8001376 <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM3)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a17      	ldr	r2, [pc, #92]	; (800138c <HAL_TIM_PWM_MspInit+0x94>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d10e      	bne.n	8001350 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	613b      	str	r3, [r7, #16]
 8001336:	4b14      	ldr	r3, [pc, #80]	; (8001388 <HAL_TIM_PWM_MspInit+0x90>)
 8001338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133a:	4a13      	ldr	r2, [pc, #76]	; (8001388 <HAL_TIM_PWM_MspInit+0x90>)
 800133c:	f043 0302 	orr.w	r3, r3, #2
 8001340:	6413      	str	r3, [r2, #64]	; 0x40
 8001342:	4b11      	ldr	r3, [pc, #68]	; (8001388 <HAL_TIM_PWM_MspInit+0x90>)
 8001344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	613b      	str	r3, [r7, #16]
 800134c:	693b      	ldr	r3, [r7, #16]
}
 800134e:	e012      	b.n	8001376 <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM12)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a0e      	ldr	r2, [pc, #56]	; (8001390 <HAL_TIM_PWM_MspInit+0x98>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d10d      	bne.n	8001376 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	4b0a      	ldr	r3, [pc, #40]	; (8001388 <HAL_TIM_PWM_MspInit+0x90>)
 8001360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001362:	4a09      	ldr	r2, [pc, #36]	; (8001388 <HAL_TIM_PWM_MspInit+0x90>)
 8001364:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001368:	6413      	str	r3, [r2, #64]	; 0x40
 800136a:	4b07      	ldr	r3, [pc, #28]	; (8001388 <HAL_TIM_PWM_MspInit+0x90>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	68fb      	ldr	r3, [r7, #12]
}
 8001376:	bf00      	nop
 8001378:	371c      	adds	r7, #28
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	40010000 	.word	0x40010000
 8001388:	40023800 	.word	0x40023800
 800138c:	40000400 	.word	0x40000400
 8001390:	40001800 	.word	0x40001800

08001394 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013a4:	d115      	bne.n	80013d2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	60fb      	str	r3, [r7, #12]
 80013aa:	4b0c      	ldr	r3, [pc, #48]	; (80013dc <HAL_TIM_Base_MspInit+0x48>)
 80013ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ae:	4a0b      	ldr	r2, [pc, #44]	; (80013dc <HAL_TIM_Base_MspInit+0x48>)
 80013b0:	f043 0301 	orr.w	r3, r3, #1
 80013b4:	6413      	str	r3, [r2, #64]	; 0x40
 80013b6:	4b09      	ldr	r3, [pc, #36]	; (80013dc <HAL_TIM_Base_MspInit+0x48>)
 80013b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80013c2:	2200      	movs	r2, #0
 80013c4:	2105      	movs	r1, #5
 80013c6:	201c      	movs	r0, #28
 80013c8:	f000 fe74 	bl	80020b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013cc:	201c      	movs	r0, #28
 80013ce:	f000 fe8d 	bl	80020ec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80013d2:	bf00      	nop
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40023800 	.word	0x40023800

080013e0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b08c      	sub	sp, #48	; 0x30
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e8:	f107 031c 	add.w	r3, r7, #28
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]
 80013f6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a46      	ldr	r2, [pc, #280]	; (8001518 <HAL_TIM_MspPostInit+0x138>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d13e      	bne.n	8001480 <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	61bb      	str	r3, [r7, #24]
 8001406:	4b45      	ldr	r3, [pc, #276]	; (800151c <HAL_TIM_MspPostInit+0x13c>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	4a44      	ldr	r2, [pc, #272]	; (800151c <HAL_TIM_MspPostInit+0x13c>)
 800140c:	f043 0301 	orr.w	r3, r3, #1
 8001410:	6313      	str	r3, [r2, #48]	; 0x30
 8001412:	4b42      	ldr	r3, [pc, #264]	; (800151c <HAL_TIM_MspPostInit+0x13c>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	61bb      	str	r3, [r7, #24]
 800141c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	617b      	str	r3, [r7, #20]
 8001422:	4b3e      	ldr	r3, [pc, #248]	; (800151c <HAL_TIM_MspPostInit+0x13c>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	4a3d      	ldr	r2, [pc, #244]	; (800151c <HAL_TIM_MspPostInit+0x13c>)
 8001428:	f043 0310 	orr.w	r3, r3, #16
 800142c:	6313      	str	r3, [r2, #48]	; 0x30
 800142e:	4b3b      	ldr	r3, [pc, #236]	; (800151c <HAL_TIM_MspPostInit+0x13c>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	f003 0310 	and.w	r3, r3, #16
 8001436:	617b      	str	r3, [r7, #20]
 8001438:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800143a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800143e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001440:	2302      	movs	r3, #2
 8001442:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	2300      	movs	r3, #0
 8001446:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001448:	2300      	movs	r3, #0
 800144a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800144c:	2301      	movs	r3, #1
 800144e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001450:	f107 031c 	add.w	r3, r7, #28
 8001454:	4619      	mov	r1, r3
 8001456:	4832      	ldr	r0, [pc, #200]	; (8001520 <HAL_TIM_MspPostInit+0x140>)
 8001458:	f001 fa58 	bl	800290c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800145c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001460:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001462:	2302      	movs	r3, #2
 8001464:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146a:	2300      	movs	r3, #0
 800146c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800146e:	2301      	movs	r3, #1
 8001470:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001472:	f107 031c 	add.w	r3, r7, #28
 8001476:	4619      	mov	r1, r3
 8001478:	482a      	ldr	r0, [pc, #168]	; (8001524 <HAL_TIM_MspPostInit+0x144>)
 800147a:	f001 fa47 	bl	800290c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800147e:	e046      	b.n	800150e <HAL_TIM_MspPostInit+0x12e>
  else if(timHandle->Instance==TIM3)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a28      	ldr	r2, [pc, #160]	; (8001528 <HAL_TIM_MspPostInit+0x148>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d11e      	bne.n	80014c8 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	613b      	str	r3, [r7, #16]
 800148e:	4b23      	ldr	r3, [pc, #140]	; (800151c <HAL_TIM_MspPostInit+0x13c>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	4a22      	ldr	r2, [pc, #136]	; (800151c <HAL_TIM_MspPostInit+0x13c>)
 8001494:	f043 0302 	orr.w	r3, r3, #2
 8001498:	6313      	str	r3, [r2, #48]	; 0x30
 800149a:	4b20      	ldr	r3, [pc, #128]	; (800151c <HAL_TIM_MspPostInit+0x13c>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	613b      	str	r3, [r7, #16]
 80014a4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80014a6:	2320      	movs	r3, #32
 80014a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014aa:	2302      	movs	r3, #2
 80014ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ae:	2300      	movs	r3, #0
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b2:	2300      	movs	r3, #0
 80014b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80014b6:	2302      	movs	r3, #2
 80014b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ba:	f107 031c 	add.w	r3, r7, #28
 80014be:	4619      	mov	r1, r3
 80014c0:	481a      	ldr	r0, [pc, #104]	; (800152c <HAL_TIM_MspPostInit+0x14c>)
 80014c2:	f001 fa23 	bl	800290c <HAL_GPIO_Init>
}
 80014c6:	e022      	b.n	800150e <HAL_TIM_MspPostInit+0x12e>
  else if(timHandle->Instance==TIM12)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a18      	ldr	r2, [pc, #96]	; (8001530 <HAL_TIM_MspPostInit+0x150>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d11d      	bne.n	800150e <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	60fb      	str	r3, [r7, #12]
 80014d6:	4b11      	ldr	r3, [pc, #68]	; (800151c <HAL_TIM_MspPostInit+0x13c>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	4a10      	ldr	r2, [pc, #64]	; (800151c <HAL_TIM_MspPostInit+0x13c>)
 80014dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014e0:	6313      	str	r3, [r2, #48]	; 0x30
 80014e2:	4b0e      	ldr	r3, [pc, #56]	; (800151c <HAL_TIM_MspPostInit+0x13c>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80014ee:	2340      	movs	r3, #64	; 0x40
 80014f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f2:	2302      	movs	r3, #2
 80014f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f6:	2300      	movs	r3, #0
 80014f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fa:	2300      	movs	r3, #0
 80014fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80014fe:	2309      	movs	r3, #9
 8001500:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001502:	f107 031c 	add.w	r3, r7, #28
 8001506:	4619      	mov	r1, r3
 8001508:	480a      	ldr	r0, [pc, #40]	; (8001534 <HAL_TIM_MspPostInit+0x154>)
 800150a:	f001 f9ff 	bl	800290c <HAL_GPIO_Init>
}
 800150e:	bf00      	nop
 8001510:	3730      	adds	r7, #48	; 0x30
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40010000 	.word	0x40010000
 800151c:	40023800 	.word	0x40023800
 8001520:	40020000 	.word	0x40020000
 8001524:	40021000 	.word	0x40021000
 8001528:	40000400 	.word	0x40000400
 800152c:	40020400 	.word	0x40020400
 8001530:	40001800 	.word	0x40001800
 8001534:	40021c00 	.word	0x40021c00

08001538 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800153c:	4b11      	ldr	r3, [pc, #68]	; (8001584 <MX_USART3_UART_Init+0x4c>)
 800153e:	4a12      	ldr	r2, [pc, #72]	; (8001588 <MX_USART3_UART_Init+0x50>)
 8001540:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 8001542:	4b10      	ldr	r3, [pc, #64]	; (8001584 <MX_USART3_UART_Init+0x4c>)
 8001544:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8001548:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800154a:	4b0e      	ldr	r3, [pc, #56]	; (8001584 <MX_USART3_UART_Init+0x4c>)
 800154c:	2200      	movs	r2, #0
 800154e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001550:	4b0c      	ldr	r3, [pc, #48]	; (8001584 <MX_USART3_UART_Init+0x4c>)
 8001552:	2200      	movs	r2, #0
 8001554:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001556:	4b0b      	ldr	r3, [pc, #44]	; (8001584 <MX_USART3_UART_Init+0x4c>)
 8001558:	2200      	movs	r2, #0
 800155a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800155c:	4b09      	ldr	r3, [pc, #36]	; (8001584 <MX_USART3_UART_Init+0x4c>)
 800155e:	220c      	movs	r2, #12
 8001560:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001562:	4b08      	ldr	r3, [pc, #32]	; (8001584 <MX_USART3_UART_Init+0x4c>)
 8001564:	2200      	movs	r2, #0
 8001566:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001568:	4b06      	ldr	r3, [pc, #24]	; (8001584 <MX_USART3_UART_Init+0x4c>)
 800156a:	2200      	movs	r2, #0
 800156c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800156e:	4805      	ldr	r0, [pc, #20]	; (8001584 <MX_USART3_UART_Init+0x4c>)
 8001570:	f004 fa98 	bl	8005aa4 <HAL_UART_Init>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800157a:	f7ff fb9d 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	20000384 	.word	0x20000384
 8001588:	40004800 	.word	0x40004800

0800158c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001590:	4b11      	ldr	r3, [pc, #68]	; (80015d8 <MX_USART6_UART_Init+0x4c>)
 8001592:	4a12      	ldr	r2, [pc, #72]	; (80015dc <MX_USART6_UART_Init+0x50>)
 8001594:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 921600;
 8001596:	4b10      	ldr	r3, [pc, #64]	; (80015d8 <MX_USART6_UART_Init+0x4c>)
 8001598:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 800159c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800159e:	4b0e      	ldr	r3, [pc, #56]	; (80015d8 <MX_USART6_UART_Init+0x4c>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80015a4:	4b0c      	ldr	r3, [pc, #48]	; (80015d8 <MX_USART6_UART_Init+0x4c>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80015aa:	4b0b      	ldr	r3, [pc, #44]	; (80015d8 <MX_USART6_UART_Init+0x4c>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80015b0:	4b09      	ldr	r3, [pc, #36]	; (80015d8 <MX_USART6_UART_Init+0x4c>)
 80015b2:	220c      	movs	r2, #12
 80015b4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015b6:	4b08      	ldr	r3, [pc, #32]	; (80015d8 <MX_USART6_UART_Init+0x4c>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80015bc:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <MX_USART6_UART_Init+0x4c>)
 80015be:	2200      	movs	r2, #0
 80015c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80015c2:	4805      	ldr	r0, [pc, #20]	; (80015d8 <MX_USART6_UART_Init+0x4c>)
 80015c4:	f004 fa6e 	bl	8005aa4 <HAL_UART_Init>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80015ce:	f7ff fb73 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	200003cc 	.word	0x200003cc
 80015dc:	40011400 	.word	0x40011400

080015e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b08c      	sub	sp, #48	; 0x30
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e8:	f107 031c 	add.w	r3, r7, #28
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	609a      	str	r2, [r3, #8]
 80015f4:	60da      	str	r2, [r3, #12]
 80015f6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a66      	ldr	r2, [pc, #408]	; (8001798 <HAL_UART_MspInit+0x1b8>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d12d      	bne.n	800165e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	61bb      	str	r3, [r7, #24]
 8001606:	4b65      	ldr	r3, [pc, #404]	; (800179c <HAL_UART_MspInit+0x1bc>)
 8001608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160a:	4a64      	ldr	r2, [pc, #400]	; (800179c <HAL_UART_MspInit+0x1bc>)
 800160c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001610:	6413      	str	r3, [r2, #64]	; 0x40
 8001612:	4b62      	ldr	r3, [pc, #392]	; (800179c <HAL_UART_MspInit+0x1bc>)
 8001614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001616:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800161a:	61bb      	str	r3, [r7, #24]
 800161c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	617b      	str	r3, [r7, #20]
 8001622:	4b5e      	ldr	r3, [pc, #376]	; (800179c <HAL_UART_MspInit+0x1bc>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	4a5d      	ldr	r2, [pc, #372]	; (800179c <HAL_UART_MspInit+0x1bc>)
 8001628:	f043 0308 	orr.w	r3, r3, #8
 800162c:	6313      	str	r3, [r2, #48]	; 0x30
 800162e:	4b5b      	ldr	r3, [pc, #364]	; (800179c <HAL_UART_MspInit+0x1bc>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	f003 0308 	and.w	r3, r3, #8
 8001636:	617b      	str	r3, [r7, #20]
 8001638:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD9     ------> USART3_RX
    PD8     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 800163a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800163e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001640:	2302      	movs	r3, #2
 8001642:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001644:	2301      	movs	r3, #1
 8001646:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001648:	2303      	movs	r3, #3
 800164a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800164c:	2307      	movs	r3, #7
 800164e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001650:	f107 031c 	add.w	r3, r7, #28
 8001654:	4619      	mov	r1, r3
 8001656:	4852      	ldr	r0, [pc, #328]	; (80017a0 <HAL_UART_MspInit+0x1c0>)
 8001658:	f001 f958 	bl	800290c <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800165c:	e097      	b.n	800178e <HAL_UART_MspInit+0x1ae>
  else if(uartHandle->Instance==USART6)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a50      	ldr	r2, [pc, #320]	; (80017a4 <HAL_UART_MspInit+0x1c4>)
 8001664:	4293      	cmp	r3, r2
 8001666:	f040 8092 	bne.w	800178e <HAL_UART_MspInit+0x1ae>
    __HAL_RCC_USART6_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	613b      	str	r3, [r7, #16]
 800166e:	4b4b      	ldr	r3, [pc, #300]	; (800179c <HAL_UART_MspInit+0x1bc>)
 8001670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001672:	4a4a      	ldr	r2, [pc, #296]	; (800179c <HAL_UART_MspInit+0x1bc>)
 8001674:	f043 0320 	orr.w	r3, r3, #32
 8001678:	6453      	str	r3, [r2, #68]	; 0x44
 800167a:	4b48      	ldr	r3, [pc, #288]	; (800179c <HAL_UART_MspInit+0x1bc>)
 800167c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167e:	f003 0320 	and.w	r3, r3, #32
 8001682:	613b      	str	r3, [r7, #16]
 8001684:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	60fb      	str	r3, [r7, #12]
 800168a:	4b44      	ldr	r3, [pc, #272]	; (800179c <HAL_UART_MspInit+0x1bc>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	4a43      	ldr	r2, [pc, #268]	; (800179c <HAL_UART_MspInit+0x1bc>)
 8001690:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001694:	6313      	str	r3, [r2, #48]	; 0x30
 8001696:	4b41      	ldr	r3, [pc, #260]	; (800179c <HAL_UART_MspInit+0x1bc>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 80016a2:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80016a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a8:	2302      	movs	r3, #2
 80016aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016ac:	2301      	movs	r3, #1
 80016ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b0:	2303      	movs	r3, #3
 80016b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80016b4:	2308      	movs	r3, #8
 80016b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016b8:	f107 031c 	add.w	r3, r7, #28
 80016bc:	4619      	mov	r1, r3
 80016be:	483a      	ldr	r0, [pc, #232]	; (80017a8 <HAL_UART_MspInit+0x1c8>)
 80016c0:	f001 f924 	bl	800290c <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80016c4:	4b39      	ldr	r3, [pc, #228]	; (80017ac <HAL_UART_MspInit+0x1cc>)
 80016c6:	4a3a      	ldr	r2, [pc, #232]	; (80017b0 <HAL_UART_MspInit+0x1d0>)
 80016c8:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80016ca:	4b38      	ldr	r3, [pc, #224]	; (80017ac <HAL_UART_MspInit+0x1cc>)
 80016cc:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80016d0:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016d2:	4b36      	ldr	r3, [pc, #216]	; (80017ac <HAL_UART_MspInit+0x1cc>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016d8:	4b34      	ldr	r3, [pc, #208]	; (80017ac <HAL_UART_MspInit+0x1cc>)
 80016da:	2200      	movs	r2, #0
 80016dc:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016de:	4b33      	ldr	r3, [pc, #204]	; (80017ac <HAL_UART_MspInit+0x1cc>)
 80016e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016e4:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016e6:	4b31      	ldr	r3, [pc, #196]	; (80017ac <HAL_UART_MspInit+0x1cc>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016ec:	4b2f      	ldr	r3, [pc, #188]	; (80017ac <HAL_UART_MspInit+0x1cc>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 80016f2:	4b2e      	ldr	r3, [pc, #184]	; (80017ac <HAL_UART_MspInit+0x1cc>)
 80016f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016f8:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80016fa:	4b2c      	ldr	r3, [pc, #176]	; (80017ac <HAL_UART_MspInit+0x1cc>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001700:	4b2a      	ldr	r3, [pc, #168]	; (80017ac <HAL_UART_MspInit+0x1cc>)
 8001702:	2200      	movs	r2, #0
 8001704:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8001706:	4829      	ldr	r0, [pc, #164]	; (80017ac <HAL_UART_MspInit+0x1cc>)
 8001708:	f000 fcfe 	bl	8002108 <HAL_DMA_Init>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <HAL_UART_MspInit+0x136>
      Error_Handler();
 8001712:	f7ff fad1 	bl	8000cb8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4a24      	ldr	r2, [pc, #144]	; (80017ac <HAL_UART_MspInit+0x1cc>)
 800171a:	63da      	str	r2, [r3, #60]	; 0x3c
 800171c:	4a23      	ldr	r2, [pc, #140]	; (80017ac <HAL_UART_MspInit+0x1cc>)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8001722:	4b24      	ldr	r3, [pc, #144]	; (80017b4 <HAL_UART_MspInit+0x1d4>)
 8001724:	4a24      	ldr	r2, [pc, #144]	; (80017b8 <HAL_UART_MspInit+0x1d8>)
 8001726:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8001728:	4b22      	ldr	r3, [pc, #136]	; (80017b4 <HAL_UART_MspInit+0x1d4>)
 800172a:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800172e:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001730:	4b20      	ldr	r3, [pc, #128]	; (80017b4 <HAL_UART_MspInit+0x1d4>)
 8001732:	2240      	movs	r2, #64	; 0x40
 8001734:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001736:	4b1f      	ldr	r3, [pc, #124]	; (80017b4 <HAL_UART_MspInit+0x1d4>)
 8001738:	2200      	movs	r2, #0
 800173a:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 800173c:	4b1d      	ldr	r3, [pc, #116]	; (80017b4 <HAL_UART_MspInit+0x1d4>)
 800173e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001742:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001744:	4b1b      	ldr	r3, [pc, #108]	; (80017b4 <HAL_UART_MspInit+0x1d4>)
 8001746:	2200      	movs	r2, #0
 8001748:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800174a:	4b1a      	ldr	r3, [pc, #104]	; (80017b4 <HAL_UART_MspInit+0x1d4>)
 800174c:	2200      	movs	r2, #0
 800174e:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8001750:	4b18      	ldr	r3, [pc, #96]	; (80017b4 <HAL_UART_MspInit+0x1d4>)
 8001752:	2200      	movs	r2, #0
 8001754:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001756:	4b17      	ldr	r3, [pc, #92]	; (80017b4 <HAL_UART_MspInit+0x1d4>)
 8001758:	2200      	movs	r2, #0
 800175a:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800175c:	4b15      	ldr	r3, [pc, #84]	; (80017b4 <HAL_UART_MspInit+0x1d4>)
 800175e:	2200      	movs	r2, #0
 8001760:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8001762:	4814      	ldr	r0, [pc, #80]	; (80017b4 <HAL_UART_MspInit+0x1d4>)
 8001764:	f000 fcd0 	bl	8002108 <HAL_DMA_Init>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <HAL_UART_MspInit+0x192>
      Error_Handler();
 800176e:	f7ff faa3 	bl	8000cb8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4a0f      	ldr	r2, [pc, #60]	; (80017b4 <HAL_UART_MspInit+0x1d4>)
 8001776:	639a      	str	r2, [r3, #56]	; 0x38
 8001778:	4a0e      	ldr	r2, [pc, #56]	; (80017b4 <HAL_UART_MspInit+0x1d4>)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 800177e:	2200      	movs	r2, #0
 8001780:	2105      	movs	r1, #5
 8001782:	2047      	movs	r0, #71	; 0x47
 8001784:	f000 fc96 	bl	80020b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001788:	2047      	movs	r0, #71	; 0x47
 800178a:	f000 fcaf 	bl	80020ec <HAL_NVIC_EnableIRQ>
}
 800178e:	bf00      	nop
 8001790:	3730      	adds	r7, #48	; 0x30
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40004800 	.word	0x40004800
 800179c:	40023800 	.word	0x40023800
 80017a0:	40020c00 	.word	0x40020c00
 80017a4:	40011400 	.word	0x40011400
 80017a8:	40021800 	.word	0x40021800
 80017ac:	20000414 	.word	0x20000414
 80017b0:	40026428 	.word	0x40026428
 80017b4:	20000474 	.word	0x20000474
 80017b8:	400264a0 	.word	0x400264a0

080017bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017f4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017c0:	f7ff fc0c 	bl	8000fdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017c4:	480c      	ldr	r0, [pc, #48]	; (80017f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017c6:	490d      	ldr	r1, [pc, #52]	; (80017fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017c8:	4a0d      	ldr	r2, [pc, #52]	; (8001800 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017cc:	e002      	b.n	80017d4 <LoopCopyDataInit>

080017ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017d2:	3304      	adds	r3, #4

080017d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017d8:	d3f9      	bcc.n	80017ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017da:	4a0a      	ldr	r2, [pc, #40]	; (8001804 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017dc:	4c0a      	ldr	r4, [pc, #40]	; (8001808 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017e0:	e001      	b.n	80017e6 <LoopFillZerobss>

080017e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017e4:	3204      	adds	r2, #4

080017e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017e8:	d3fb      	bcc.n	80017e2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80017ea:	f00e f813 	bl	800f814 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017ee:	f7ff f9c1 	bl	8000b74 <main>
  bx  lr    
 80017f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017f4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80017f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017fc:	20000150 	.word	0x20000150
  ldr r2, =_sidata
 8001800:	08010374 	.word	0x08010374
  ldr r2, =_sbss
 8001804:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 8001808:	20021ee8 	.word	0x20021ee8

0800180c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800180c:	e7fe      	b.n	800180c <ADC_IRQHandler>
	...

08001810 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001814:	4b0e      	ldr	r3, [pc, #56]	; (8001850 <HAL_Init+0x40>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a0d      	ldr	r2, [pc, #52]	; (8001850 <HAL_Init+0x40>)
 800181a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800181e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001820:	4b0b      	ldr	r3, [pc, #44]	; (8001850 <HAL_Init+0x40>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a0a      	ldr	r2, [pc, #40]	; (8001850 <HAL_Init+0x40>)
 8001826:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800182a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800182c:	4b08      	ldr	r3, [pc, #32]	; (8001850 <HAL_Init+0x40>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a07      	ldr	r2, [pc, #28]	; (8001850 <HAL_Init+0x40>)
 8001832:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001836:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001838:	2003      	movs	r0, #3
 800183a:	f000 fc30 	bl	800209e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800183e:	200f      	movs	r0, #15
 8001840:	f7ff faea 	bl	8000e18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001844:	f7ff fabc 	bl	8000dc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001848:	2300      	movs	r3, #0
}
 800184a:	4618      	mov	r0, r3
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40023c00 	.word	0x40023c00

08001854 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001858:	4b06      	ldr	r3, [pc, #24]	; (8001874 <HAL_IncTick+0x20>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	461a      	mov	r2, r3
 800185e:	4b06      	ldr	r3, [pc, #24]	; (8001878 <HAL_IncTick+0x24>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4413      	add	r3, r2
 8001864:	4a04      	ldr	r2, [pc, #16]	; (8001878 <HAL_IncTick+0x24>)
 8001866:	6013      	str	r3, [r2, #0]
}
 8001868:	bf00      	nop
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	20000008 	.word	0x20000008
 8001878:	200004d4 	.word	0x200004d4

0800187c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  return uwTick;
 8001880:	4b03      	ldr	r3, [pc, #12]	; (8001890 <HAL_GetTick+0x14>)
 8001882:	681b      	ldr	r3, [r3, #0]
}
 8001884:	4618      	mov	r0, r3
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	200004d4 	.word	0x200004d4

08001894 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800189c:	f7ff ffee 	bl	800187c <HAL_GetTick>
 80018a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80018ac:	d005      	beq.n	80018ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018ae:	4b0a      	ldr	r3, [pc, #40]	; (80018d8 <HAL_Delay+0x44>)
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	461a      	mov	r2, r3
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	4413      	add	r3, r2
 80018b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018ba:	bf00      	nop
 80018bc:	f7ff ffde 	bl	800187c <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	68fa      	ldr	r2, [r7, #12]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d8f7      	bhi.n	80018bc <HAL_Delay+0x28>
  {
  }
}
 80018cc:	bf00      	nop
 80018ce:	bf00      	nop
 80018d0:	3710      	adds	r7, #16
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	20000008 	.word	0x20000008

080018dc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d101      	bne.n	80018ee <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e0ed      	b.n	8001aca <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d102      	bne.n	8001900 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f7fe fe68 	bl	80005d0 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f042 0201 	orr.w	r2, r2, #1
 800190e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001910:	f7ff ffb4 	bl	800187c <HAL_GetTick>
 8001914:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001916:	e012      	b.n	800193e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001918:	f7ff ffb0 	bl	800187c <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b0a      	cmp	r3, #10
 8001924:	d90b      	bls.n	800193e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800192a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2205      	movs	r2, #5
 8001936:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e0c5      	b.n	8001aca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f003 0301 	and.w	r3, r3, #1
 8001948:	2b00      	cmp	r3, #0
 800194a:	d0e5      	beq.n	8001918 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f022 0202 	bic.w	r2, r2, #2
 800195a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800195c:	f7ff ff8e 	bl	800187c <HAL_GetTick>
 8001960:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001962:	e012      	b.n	800198a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001964:	f7ff ff8a 	bl	800187c <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b0a      	cmp	r3, #10
 8001970:	d90b      	bls.n	800198a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001976:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2205      	movs	r2, #5
 8001982:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e09f      	b.n	8001aca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f003 0302 	and.w	r3, r3, #2
 8001994:	2b00      	cmp	r3, #0
 8001996:	d1e5      	bne.n	8001964 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	7e1b      	ldrb	r3, [r3, #24]
 800199c:	2b01      	cmp	r3, #1
 800199e:	d108      	bne.n	80019b2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80019ae:	601a      	str	r2, [r3, #0]
 80019b0:	e007      	b.n	80019c2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	7e5b      	ldrb	r3, [r3, #25]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d108      	bne.n	80019dc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	e007      	b.n	80019ec <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80019ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	7e9b      	ldrb	r3, [r3, #26]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d108      	bne.n	8001a06 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f042 0220 	orr.w	r2, r2, #32
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	e007      	b.n	8001a16 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f022 0220 	bic.w	r2, r2, #32
 8001a14:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	7edb      	ldrb	r3, [r3, #27]
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d108      	bne.n	8001a30 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f022 0210 	bic.w	r2, r2, #16
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	e007      	b.n	8001a40 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f042 0210 	orr.w	r2, r2, #16
 8001a3e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	7f1b      	ldrb	r3, [r3, #28]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d108      	bne.n	8001a5a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f042 0208 	orr.w	r2, r2, #8
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	e007      	b.n	8001a6a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f022 0208 	bic.w	r2, r2, #8
 8001a68:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	7f5b      	ldrb	r3, [r3, #29]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d108      	bne.n	8001a84 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f042 0204 	orr.w	r2, r2, #4
 8001a80:	601a      	str	r2, [r3, #0]
 8001a82:	e007      	b.n	8001a94 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f022 0204 	bic.w	r2, r2, #4
 8001a92:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689a      	ldr	r2, [r3, #8]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	431a      	orrs	r2, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	691b      	ldr	r3, [r3, #16]
 8001aa2:	431a      	orrs	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	695b      	ldr	r3, [r3, #20]
 8001aa8:	ea42 0103 	orr.w	r1, r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	1e5a      	subs	r2, r3, #1
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	430a      	orrs	r2, r1
 8001ab8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3710      	adds	r7, #16
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b08a      	sub	sp, #40	; 0x28
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001ada:	2300      	movs	r3, #0
 8001adc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	695b      	ldr	r3, [r3, #20]
 8001ae4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	691b      	ldr	r3, [r3, #16]
 8001b04:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001b0e:	6a3b      	ldr	r3, [r7, #32]
 8001b10:	f003 0301 	and.w	r3, r3, #1
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d07c      	beq.n	8001c12 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001b18:	69bb      	ldr	r3, [r7, #24]
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d023      	beq.n	8001b6a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2201      	movs	r2, #1
 8001b28:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	f003 0302 	and.w	r3, r3, #2
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d003      	beq.n	8001b3c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f000 f983 	bl	8001e40 <HAL_CAN_TxMailbox0CompleteCallback>
 8001b3a:	e016      	b.n	8001b6a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	f003 0304 	and.w	r3, r3, #4
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d004      	beq.n	8001b50 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b48:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b4c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b4e:	e00c      	b.n	8001b6a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	f003 0308 	and.w	r3, r3, #8
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d004      	beq.n	8001b64 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b60:	627b      	str	r3, [r7, #36]	; 0x24
 8001b62:	e002      	b.n	8001b6a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f000 f989 	bl	8001e7c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d024      	beq.n	8001bbe <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b7c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d003      	beq.n	8001b90 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f000 f963 	bl	8001e54 <HAL_CAN_TxMailbox1CompleteCallback>
 8001b8e:	e016      	b.n	8001bbe <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d004      	beq.n	8001ba4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ba0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ba2:	e00c      	b.n	8001bbe <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d004      	beq.n	8001bb8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bb4:	627b      	str	r3, [r7, #36]	; 0x24
 8001bb6:	e002      	b.n	8001bbe <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f000 f969 	bl	8001e90 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d024      	beq.n	8001c12 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001bd0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d003      	beq.n	8001be4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f000 f943 	bl	8001e68 <HAL_CAN_TxMailbox2CompleteCallback>
 8001be2:	e016      	b.n	8001c12 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d004      	beq.n	8001bf8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bf4:	627b      	str	r3, [r7, #36]	; 0x24
 8001bf6:	e00c      	b.n	8001c12 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d004      	beq.n	8001c0c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c08:	627b      	str	r3, [r7, #36]	; 0x24
 8001c0a:	e002      	b.n	8001c12 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f000 f949 	bl	8001ea4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001c12:	6a3b      	ldr	r3, [r7, #32]
 8001c14:	f003 0308 	and.w	r3, r3, #8
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d00c      	beq.n	8001c36 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	f003 0310 	and.w	r3, r3, #16
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d007      	beq.n	8001c36 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c28:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c2c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2210      	movs	r2, #16
 8001c34:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001c36:	6a3b      	ldr	r3, [r7, #32]
 8001c38:	f003 0304 	and.w	r3, r3, #4
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d00b      	beq.n	8001c58 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	f003 0308 	and.w	r3, r3, #8
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d006      	beq.n	8001c58 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2208      	movs	r2, #8
 8001c50:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f000 f93a 	bl	8001ecc <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001c58:	6a3b      	ldr	r3, [r7, #32]
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d009      	beq.n	8001c76 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	f003 0303 	and.w	r3, r3, #3
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d002      	beq.n	8001c76 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f000 f921 	bl	8001eb8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001c76:	6a3b      	ldr	r3, [r7, #32]
 8001c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d00c      	beq.n	8001c9a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	f003 0310 	and.w	r3, r3, #16
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d007      	beq.n	8001c9a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c90:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2210      	movs	r2, #16
 8001c98:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001c9a:	6a3b      	ldr	r3, [r7, #32]
 8001c9c:	f003 0320 	and.w	r3, r3, #32
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d00b      	beq.n	8001cbc <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	f003 0308 	and.w	r3, r3, #8
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d006      	beq.n	8001cbc <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2208      	movs	r2, #8
 8001cb4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f000 f91c 	bl	8001ef4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001cbc:	6a3b      	ldr	r3, [r7, #32]
 8001cbe:	f003 0310 	and.w	r3, r3, #16
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d009      	beq.n	8001cda <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	691b      	ldr	r3, [r3, #16]
 8001ccc:	f003 0303 	and.w	r3, r3, #3
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d002      	beq.n	8001cda <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f000 f903 	bl	8001ee0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001cda:	6a3b      	ldr	r3, [r7, #32]
 8001cdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d00b      	beq.n	8001cfc <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	f003 0310 	and.w	r3, r3, #16
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d006      	beq.n	8001cfc <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	2210      	movs	r2, #16
 8001cf4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f000 f906 	bl	8001f08 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001cfc:	6a3b      	ldr	r3, [r7, #32]
 8001cfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d00b      	beq.n	8001d1e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	f003 0308 	and.w	r3, r3, #8
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d006      	beq.n	8001d1e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2208      	movs	r2, #8
 8001d16:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f000 f8ff 	bl	8001f1c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001d1e:	6a3b      	ldr	r3, [r7, #32]
 8001d20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d07b      	beq.n	8001e20 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	f003 0304 	and.w	r3, r3, #4
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d072      	beq.n	8001e18 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001d32:	6a3b      	ldr	r3, [r7, #32]
 8001d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d008      	beq.n	8001d4e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d003      	beq.n	8001d4e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d48:	f043 0301 	orr.w	r3, r3, #1
 8001d4c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001d4e:	6a3b      	ldr	r3, [r7, #32]
 8001d50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d008      	beq.n	8001d6a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d003      	beq.n	8001d6a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d64:	f043 0302 	orr.w	r3, r3, #2
 8001d68:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001d6a:	6a3b      	ldr	r3, [r7, #32]
 8001d6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d008      	beq.n	8001d86 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d003      	beq.n	8001d86 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d80:	f043 0304 	orr.w	r3, r3, #4
 8001d84:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001d86:	6a3b      	ldr	r3, [r7, #32]
 8001d88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d043      	beq.n	8001e18 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d03e      	beq.n	8001e18 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001da0:	2b60      	cmp	r3, #96	; 0x60
 8001da2:	d02b      	beq.n	8001dfc <HAL_CAN_IRQHandler+0x32a>
 8001da4:	2b60      	cmp	r3, #96	; 0x60
 8001da6:	d82e      	bhi.n	8001e06 <HAL_CAN_IRQHandler+0x334>
 8001da8:	2b50      	cmp	r3, #80	; 0x50
 8001daa:	d022      	beq.n	8001df2 <HAL_CAN_IRQHandler+0x320>
 8001dac:	2b50      	cmp	r3, #80	; 0x50
 8001dae:	d82a      	bhi.n	8001e06 <HAL_CAN_IRQHandler+0x334>
 8001db0:	2b40      	cmp	r3, #64	; 0x40
 8001db2:	d019      	beq.n	8001de8 <HAL_CAN_IRQHandler+0x316>
 8001db4:	2b40      	cmp	r3, #64	; 0x40
 8001db6:	d826      	bhi.n	8001e06 <HAL_CAN_IRQHandler+0x334>
 8001db8:	2b30      	cmp	r3, #48	; 0x30
 8001dba:	d010      	beq.n	8001dde <HAL_CAN_IRQHandler+0x30c>
 8001dbc:	2b30      	cmp	r3, #48	; 0x30
 8001dbe:	d822      	bhi.n	8001e06 <HAL_CAN_IRQHandler+0x334>
 8001dc0:	2b10      	cmp	r3, #16
 8001dc2:	d002      	beq.n	8001dca <HAL_CAN_IRQHandler+0x2f8>
 8001dc4:	2b20      	cmp	r3, #32
 8001dc6:	d005      	beq.n	8001dd4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001dc8:	e01d      	b.n	8001e06 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dcc:	f043 0308 	orr.w	r3, r3, #8
 8001dd0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001dd2:	e019      	b.n	8001e08 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd6:	f043 0310 	orr.w	r3, r3, #16
 8001dda:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ddc:	e014      	b.n	8001e08 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de0:	f043 0320 	orr.w	r3, r3, #32
 8001de4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001de6:	e00f      	b.n	8001e08 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001dee:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001df0:	e00a      	b.n	8001e08 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001df8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001dfa:	e005      	b.n	8001e08 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e02:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e04:	e000      	b.n	8001e08 <HAL_CAN_IRQHandler+0x336>
            break;
 8001e06:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	699a      	ldr	r2, [r3, #24]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001e16:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2204      	movs	r2, #4
 8001e1e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d008      	beq.n	8001e38 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2c:	431a      	orrs	r2, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f000 f87c 	bl	8001f30 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001e38:	bf00      	nop
 8001e3a:	3728      	adds	r7, #40	; 0x28
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001e48:	bf00      	nop
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001e70:	bf00      	nop
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001e84:	bf00      	nop
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001eac:	bf00      	nop
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001ec0:	bf00      	nop
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001ed4:	bf00      	nop
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001ee8:	bf00      	nop
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001efc:	bf00      	nop
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001f38:	bf00      	nop
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f003 0307 	and.w	r3, r3, #7
 8001f52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f54:	4b0c      	ldr	r3, [pc, #48]	; (8001f88 <__NVIC_SetPriorityGrouping+0x44>)
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f5a:	68ba      	ldr	r2, [r7, #8]
 8001f5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f60:	4013      	ands	r3, r2
 8001f62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f76:	4a04      	ldr	r2, [pc, #16]	; (8001f88 <__NVIC_SetPriorityGrouping+0x44>)
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	60d3      	str	r3, [r2, #12]
}
 8001f7c:	bf00      	nop
 8001f7e:	3714      	adds	r7, #20
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr
 8001f88:	e000ed00 	.word	0xe000ed00

08001f8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f90:	4b04      	ldr	r3, [pc, #16]	; (8001fa4 <__NVIC_GetPriorityGrouping+0x18>)
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	0a1b      	lsrs	r3, r3, #8
 8001f96:	f003 0307 	and.w	r3, r3, #7
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr
 8001fa4:	e000ed00 	.word	0xe000ed00

08001fa8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	4603      	mov	r3, r0
 8001fb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	db0b      	blt.n	8001fd2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fba:	79fb      	ldrb	r3, [r7, #7]
 8001fbc:	f003 021f 	and.w	r2, r3, #31
 8001fc0:	4907      	ldr	r1, [pc, #28]	; (8001fe0 <__NVIC_EnableIRQ+0x38>)
 8001fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc6:	095b      	lsrs	r3, r3, #5
 8001fc8:	2001      	movs	r0, #1
 8001fca:	fa00 f202 	lsl.w	r2, r0, r2
 8001fce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001fd2:	bf00      	nop
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	e000e100 	.word	0xe000e100

08001fe4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	4603      	mov	r3, r0
 8001fec:	6039      	str	r1, [r7, #0]
 8001fee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	db0a      	blt.n	800200e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	b2da      	uxtb	r2, r3
 8001ffc:	490c      	ldr	r1, [pc, #48]	; (8002030 <__NVIC_SetPriority+0x4c>)
 8001ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002002:	0112      	lsls	r2, r2, #4
 8002004:	b2d2      	uxtb	r2, r2
 8002006:	440b      	add	r3, r1
 8002008:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800200c:	e00a      	b.n	8002024 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	b2da      	uxtb	r2, r3
 8002012:	4908      	ldr	r1, [pc, #32]	; (8002034 <__NVIC_SetPriority+0x50>)
 8002014:	79fb      	ldrb	r3, [r7, #7]
 8002016:	f003 030f 	and.w	r3, r3, #15
 800201a:	3b04      	subs	r3, #4
 800201c:	0112      	lsls	r2, r2, #4
 800201e:	b2d2      	uxtb	r2, r2
 8002020:	440b      	add	r3, r1
 8002022:	761a      	strb	r2, [r3, #24]
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr
 8002030:	e000e100 	.word	0xe000e100
 8002034:	e000ed00 	.word	0xe000ed00

08002038 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002038:	b480      	push	{r7}
 800203a:	b089      	sub	sp, #36	; 0x24
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f003 0307 	and.w	r3, r3, #7
 800204a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	f1c3 0307 	rsb	r3, r3, #7
 8002052:	2b04      	cmp	r3, #4
 8002054:	bf28      	it	cs
 8002056:	2304      	movcs	r3, #4
 8002058:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	3304      	adds	r3, #4
 800205e:	2b06      	cmp	r3, #6
 8002060:	d902      	bls.n	8002068 <NVIC_EncodePriority+0x30>
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	3b03      	subs	r3, #3
 8002066:	e000      	b.n	800206a <NVIC_EncodePriority+0x32>
 8002068:	2300      	movs	r3, #0
 800206a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800206c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	fa02 f303 	lsl.w	r3, r2, r3
 8002076:	43da      	mvns	r2, r3
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	401a      	ands	r2, r3
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002080:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	fa01 f303 	lsl.w	r3, r1, r3
 800208a:	43d9      	mvns	r1, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002090:	4313      	orrs	r3, r2
         );
}
 8002092:	4618      	mov	r0, r3
 8002094:	3724      	adds	r7, #36	; 0x24
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr

0800209e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b082      	sub	sp, #8
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f7ff ff4c 	bl	8001f44 <__NVIC_SetPriorityGrouping>
}
 80020ac:	bf00      	nop
 80020ae:	3708      	adds	r7, #8
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	4603      	mov	r3, r0
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	607a      	str	r2, [r7, #4]
 80020c0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020c2:	2300      	movs	r3, #0
 80020c4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020c6:	f7ff ff61 	bl	8001f8c <__NVIC_GetPriorityGrouping>
 80020ca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	68b9      	ldr	r1, [r7, #8]
 80020d0:	6978      	ldr	r0, [r7, #20]
 80020d2:	f7ff ffb1 	bl	8002038 <NVIC_EncodePriority>
 80020d6:	4602      	mov	r2, r0
 80020d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020dc:	4611      	mov	r1, r2
 80020de:	4618      	mov	r0, r3
 80020e0:	f7ff ff80 	bl	8001fe4 <__NVIC_SetPriority>
}
 80020e4:	bf00      	nop
 80020e6:	3718      	adds	r7, #24
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	4603      	mov	r3, r0
 80020f4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7ff ff54 	bl	8001fa8 <__NVIC_EnableIRQ>
}
 8002100:	bf00      	nop
 8002102:	3708      	adds	r7, #8
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002110:	2300      	movs	r3, #0
 8002112:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002114:	f7ff fbb2 	bl	800187c <HAL_GetTick>
 8002118:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d101      	bne.n	8002124 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e099      	b.n	8002258 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2202      	movs	r2, #2
 8002128:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f022 0201 	bic.w	r2, r2, #1
 8002142:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002144:	e00f      	b.n	8002166 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002146:	f7ff fb99 	bl	800187c <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	2b05      	cmp	r3, #5
 8002152:	d908      	bls.n	8002166 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2220      	movs	r2, #32
 8002158:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2203      	movs	r2, #3
 800215e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e078      	b.n	8002258 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0301 	and.w	r3, r3, #1
 8002170:	2b00      	cmp	r3, #0
 8002172:	d1e8      	bne.n	8002146 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800217c:	697a      	ldr	r2, [r7, #20]
 800217e:	4b38      	ldr	r3, [pc, #224]	; (8002260 <HAL_DMA_Init+0x158>)
 8002180:	4013      	ands	r3, r2
 8002182:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685a      	ldr	r2, [r3, #4]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002192:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	691b      	ldr	r3, [r3, #16]
 8002198:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800219e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	699b      	ldr	r3, [r3, #24]
 80021a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a1b      	ldr	r3, [r3, #32]
 80021b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021b2:	697a      	ldr	r2, [r7, #20]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021bc:	2b04      	cmp	r3, #4
 80021be:	d107      	bne.n	80021d0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c8:	4313      	orrs	r3, r2
 80021ca:	697a      	ldr	r2, [r7, #20]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	697a      	ldr	r2, [r7, #20]
 80021d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	695b      	ldr	r3, [r3, #20]
 80021de:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	f023 0307 	bic.w	r3, r3, #7
 80021e6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ec:	697a      	ldr	r2, [r7, #20]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f6:	2b04      	cmp	r3, #4
 80021f8:	d117      	bne.n	800222a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021fe:	697a      	ldr	r2, [r7, #20]
 8002200:	4313      	orrs	r3, r2
 8002202:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002208:	2b00      	cmp	r3, #0
 800220a:	d00e      	beq.n	800222a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f000 fb01 	bl	8002814 <DMA_CheckFifoParam>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d008      	beq.n	800222a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2240      	movs	r2, #64	; 0x40
 800221c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2201      	movs	r2, #1
 8002222:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002226:	2301      	movs	r3, #1
 8002228:	e016      	b.n	8002258 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	697a      	ldr	r2, [r7, #20]
 8002230:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f000 fab8 	bl	80027a8 <DMA_CalcBaseAndBitshift>
 8002238:	4603      	mov	r3, r0
 800223a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002240:	223f      	movs	r2, #63	; 0x3f
 8002242:	409a      	lsls	r2, r3
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2201      	movs	r2, #1
 8002252:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002256:	2300      	movs	r3, #0
}
 8002258:	4618      	mov	r0, r3
 800225a:	3718      	adds	r7, #24
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	f010803f 	.word	0xf010803f

08002264 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
 8002270:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002272:	2300      	movs	r3, #0
 8002274:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800227a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002282:	2b01      	cmp	r3, #1
 8002284:	d101      	bne.n	800228a <HAL_DMA_Start_IT+0x26>
 8002286:	2302      	movs	r3, #2
 8002288:	e040      	b.n	800230c <HAL_DMA_Start_IT+0xa8>
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2201      	movs	r2, #1
 800228e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b01      	cmp	r3, #1
 800229c:	d12f      	bne.n	80022fe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2202      	movs	r2, #2
 80022a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2200      	movs	r2, #0
 80022aa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	68b9      	ldr	r1, [r7, #8]
 80022b2:	68f8      	ldr	r0, [r7, #12]
 80022b4:	f000 fa4a 	bl	800274c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022bc:	223f      	movs	r2, #63	; 0x3f
 80022be:	409a      	lsls	r2, r3
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f042 0216 	orr.w	r2, r2, #22
 80022d2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d007      	beq.n	80022ec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f042 0208 	orr.w	r2, r2, #8
 80022ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f042 0201 	orr.w	r2, r2, #1
 80022fa:	601a      	str	r2, [r3, #0]
 80022fc:	e005      	b.n	800230a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2200      	movs	r2, #0
 8002302:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002306:	2302      	movs	r3, #2
 8002308:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800230a:	7dfb      	ldrb	r3, [r7, #23]
}
 800230c:	4618      	mov	r0, r3
 800230e:	3718      	adds	r7, #24
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002320:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002322:	f7ff faab 	bl	800187c <HAL_GetTick>
 8002326:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800232e:	b2db      	uxtb	r3, r3
 8002330:	2b02      	cmp	r3, #2
 8002332:	d008      	beq.n	8002346 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2280      	movs	r2, #128	; 0x80
 8002338:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e052      	b.n	80023ec <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f022 0216 	bic.w	r2, r2, #22
 8002354:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	695a      	ldr	r2, [r3, #20]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002364:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236a:	2b00      	cmp	r3, #0
 800236c:	d103      	bne.n	8002376 <HAL_DMA_Abort+0x62>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002372:	2b00      	cmp	r3, #0
 8002374:	d007      	beq.n	8002386 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f022 0208 	bic.w	r2, r2, #8
 8002384:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f022 0201 	bic.w	r2, r2, #1
 8002394:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002396:	e013      	b.n	80023c0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002398:	f7ff fa70 	bl	800187c <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b05      	cmp	r3, #5
 80023a4:	d90c      	bls.n	80023c0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2220      	movs	r2, #32
 80023aa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2203      	movs	r2, #3
 80023b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e015      	b.n	80023ec <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d1e4      	bne.n	8002398 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023d2:	223f      	movs	r2, #63	; 0x3f
 80023d4:	409a      	lsls	r2, r3
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2201      	movs	r2, #1
 80023de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80023ea:	2300      	movs	r3, #0
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3710      	adds	r7, #16
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002402:	b2db      	uxtb	r3, r3
 8002404:	2b02      	cmp	r3, #2
 8002406:	d004      	beq.n	8002412 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2280      	movs	r2, #128	; 0x80
 800240c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e00c      	b.n	800242c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2205      	movs	r2, #5
 8002416:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f022 0201 	bic.w	r2, r2, #1
 8002428:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800242a:	2300      	movs	r3, #0
}
 800242c:	4618      	mov	r0, r3
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002440:	2300      	movs	r3, #0
 8002442:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002444:	4b8e      	ldr	r3, [pc, #568]	; (8002680 <HAL_DMA_IRQHandler+0x248>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a8e      	ldr	r2, [pc, #568]	; (8002684 <HAL_DMA_IRQHandler+0x24c>)
 800244a:	fba2 2303 	umull	r2, r3, r2, r3
 800244e:	0a9b      	lsrs	r3, r3, #10
 8002450:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002456:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002462:	2208      	movs	r2, #8
 8002464:	409a      	lsls	r2, r3
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	4013      	ands	r3, r2
 800246a:	2b00      	cmp	r3, #0
 800246c:	d01a      	beq.n	80024a4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0304 	and.w	r3, r3, #4
 8002478:	2b00      	cmp	r3, #0
 800247a:	d013      	beq.n	80024a4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f022 0204 	bic.w	r2, r2, #4
 800248a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002490:	2208      	movs	r2, #8
 8002492:	409a      	lsls	r2, r3
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800249c:	f043 0201 	orr.w	r2, r3, #1
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024a8:	2201      	movs	r2, #1
 80024aa:	409a      	lsls	r2, r3
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	4013      	ands	r3, r2
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d012      	beq.n	80024da <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	695b      	ldr	r3, [r3, #20]
 80024ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d00b      	beq.n	80024da <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c6:	2201      	movs	r2, #1
 80024c8:	409a      	lsls	r2, r3
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024d2:	f043 0202 	orr.w	r2, r3, #2
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024de:	2204      	movs	r2, #4
 80024e0:	409a      	lsls	r2, r3
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	4013      	ands	r3, r2
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d012      	beq.n	8002510 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0302 	and.w	r3, r3, #2
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d00b      	beq.n	8002510 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024fc:	2204      	movs	r2, #4
 80024fe:	409a      	lsls	r2, r3
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002508:	f043 0204 	orr.w	r2, r3, #4
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002514:	2210      	movs	r2, #16
 8002516:	409a      	lsls	r2, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	4013      	ands	r3, r2
 800251c:	2b00      	cmp	r3, #0
 800251e:	d043      	beq.n	80025a8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0308 	and.w	r3, r3, #8
 800252a:	2b00      	cmp	r3, #0
 800252c:	d03c      	beq.n	80025a8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002532:	2210      	movs	r2, #16
 8002534:	409a      	lsls	r2, r3
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d018      	beq.n	800257a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d108      	bne.n	8002568 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	2b00      	cmp	r3, #0
 800255c:	d024      	beq.n	80025a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	4798      	blx	r3
 8002566:	e01f      	b.n	80025a8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800256c:	2b00      	cmp	r3, #0
 800256e:	d01b      	beq.n	80025a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	4798      	blx	r3
 8002578:	e016      	b.n	80025a8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002584:	2b00      	cmp	r3, #0
 8002586:	d107      	bne.n	8002598 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f022 0208 	bic.w	r2, r2, #8
 8002596:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259c:	2b00      	cmp	r3, #0
 800259e:	d003      	beq.n	80025a8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ac:	2220      	movs	r2, #32
 80025ae:	409a      	lsls	r2, r3
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	4013      	ands	r3, r2
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f000 808f 	beq.w	80026d8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0310 	and.w	r3, r3, #16
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	f000 8087 	beq.w	80026d8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ce:	2220      	movs	r2, #32
 80025d0:	409a      	lsls	r2, r3
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b05      	cmp	r3, #5
 80025e0:	d136      	bne.n	8002650 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f022 0216 	bic.w	r2, r2, #22
 80025f0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	695a      	ldr	r2, [r3, #20]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002600:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002606:	2b00      	cmp	r3, #0
 8002608:	d103      	bne.n	8002612 <HAL_DMA_IRQHandler+0x1da>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800260e:	2b00      	cmp	r3, #0
 8002610:	d007      	beq.n	8002622 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f022 0208 	bic.w	r2, r2, #8
 8002620:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002626:	223f      	movs	r2, #63	; 0x3f
 8002628:	409a      	lsls	r2, r3
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2201      	movs	r2, #1
 8002632:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002642:	2b00      	cmp	r3, #0
 8002644:	d07e      	beq.n	8002744 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	4798      	blx	r3
        }
        return;
 800264e:	e079      	b.n	8002744 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d01d      	beq.n	800269a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d10d      	bne.n	8002688 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002670:	2b00      	cmp	r3, #0
 8002672:	d031      	beq.n	80026d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	4798      	blx	r3
 800267c:	e02c      	b.n	80026d8 <HAL_DMA_IRQHandler+0x2a0>
 800267e:	bf00      	nop
 8002680:	20000000 	.word	0x20000000
 8002684:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800268c:	2b00      	cmp	r3, #0
 800268e:	d023      	beq.n	80026d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	4798      	blx	r3
 8002698:	e01e      	b.n	80026d8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d10f      	bne.n	80026c8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f022 0210 	bic.w	r2, r2, #16
 80026b6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d003      	beq.n	80026d8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d032      	beq.n	8002746 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e4:	f003 0301 	and.w	r3, r3, #1
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d022      	beq.n	8002732 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2205      	movs	r2, #5
 80026f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f022 0201 	bic.w	r2, r2, #1
 8002702:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	3301      	adds	r3, #1
 8002708:	60bb      	str	r3, [r7, #8]
 800270a:	697a      	ldr	r2, [r7, #20]
 800270c:	429a      	cmp	r2, r3
 800270e:	d307      	bcc.n	8002720 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1f2      	bne.n	8002704 <HAL_DMA_IRQHandler+0x2cc>
 800271e:	e000      	b.n	8002722 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002720:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2201      	movs	r2, #1
 8002726:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002736:	2b00      	cmp	r3, #0
 8002738:	d005      	beq.n	8002746 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	4798      	blx	r3
 8002742:	e000      	b.n	8002746 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002744:	bf00      	nop
    }
  }
}
 8002746:	3718      	adds	r7, #24
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}

0800274c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800274c:	b480      	push	{r7}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	60b9      	str	r1, [r7, #8]
 8002756:	607a      	str	r2, [r7, #4]
 8002758:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002768:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	683a      	ldr	r2, [r7, #0]
 8002770:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	2b40      	cmp	r3, #64	; 0x40
 8002778:	d108      	bne.n	800278c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68ba      	ldr	r2, [r7, #8]
 8002788:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800278a:	e007      	b.n	800279c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	68ba      	ldr	r2, [r7, #8]
 8002792:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	60da      	str	r2, [r3, #12]
}
 800279c:	bf00      	nop
 800279e:	3714      	adds	r7, #20
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr

080027a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	3b10      	subs	r3, #16
 80027b8:	4a14      	ldr	r2, [pc, #80]	; (800280c <DMA_CalcBaseAndBitshift+0x64>)
 80027ba:	fba2 2303 	umull	r2, r3, r2, r3
 80027be:	091b      	lsrs	r3, r3, #4
 80027c0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80027c2:	4a13      	ldr	r2, [pc, #76]	; (8002810 <DMA_CalcBaseAndBitshift+0x68>)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	4413      	add	r3, r2
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	461a      	mov	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2b03      	cmp	r3, #3
 80027d4:	d909      	bls.n	80027ea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80027de:	f023 0303 	bic.w	r3, r3, #3
 80027e2:	1d1a      	adds	r2, r3, #4
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	659a      	str	r2, [r3, #88]	; 0x58
 80027e8:	e007      	b.n	80027fa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80027f2:	f023 0303 	bic.w	r3, r3, #3
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3714      	adds	r7, #20
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	aaaaaaab 	.word	0xaaaaaaab
 8002810:	0800fd5c 	.word	0x0800fd5c

08002814 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002814:	b480      	push	{r7}
 8002816:	b085      	sub	sp, #20
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800281c:	2300      	movs	r3, #0
 800281e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002824:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d11f      	bne.n	800286e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	2b03      	cmp	r3, #3
 8002832:	d856      	bhi.n	80028e2 <DMA_CheckFifoParam+0xce>
 8002834:	a201      	add	r2, pc, #4	; (adr r2, 800283c <DMA_CheckFifoParam+0x28>)
 8002836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800283a:	bf00      	nop
 800283c:	0800284d 	.word	0x0800284d
 8002840:	0800285f 	.word	0x0800285f
 8002844:	0800284d 	.word	0x0800284d
 8002848:	080028e3 	.word	0x080028e3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002850:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d046      	beq.n	80028e6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800285c:	e043      	b.n	80028e6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002862:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002866:	d140      	bne.n	80028ea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800286c:	e03d      	b.n	80028ea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002876:	d121      	bne.n	80028bc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	2b03      	cmp	r3, #3
 800287c:	d837      	bhi.n	80028ee <DMA_CheckFifoParam+0xda>
 800287e:	a201      	add	r2, pc, #4	; (adr r2, 8002884 <DMA_CheckFifoParam+0x70>)
 8002880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002884:	08002895 	.word	0x08002895
 8002888:	0800289b 	.word	0x0800289b
 800288c:	08002895 	.word	0x08002895
 8002890:	080028ad 	.word	0x080028ad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	73fb      	strb	r3, [r7, #15]
      break;
 8002898:	e030      	b.n	80028fc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800289e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d025      	beq.n	80028f2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028aa:	e022      	b.n	80028f2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80028b4:	d11f      	bne.n	80028f6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80028ba:	e01c      	b.n	80028f6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d903      	bls.n	80028ca <DMA_CheckFifoParam+0xb6>
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	2b03      	cmp	r3, #3
 80028c6:	d003      	beq.n	80028d0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80028c8:	e018      	b.n	80028fc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	73fb      	strb	r3, [r7, #15]
      break;
 80028ce:	e015      	b.n	80028fc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d00e      	beq.n	80028fa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	73fb      	strb	r3, [r7, #15]
      break;
 80028e0:	e00b      	b.n	80028fa <DMA_CheckFifoParam+0xe6>
      break;
 80028e2:	bf00      	nop
 80028e4:	e00a      	b.n	80028fc <DMA_CheckFifoParam+0xe8>
      break;
 80028e6:	bf00      	nop
 80028e8:	e008      	b.n	80028fc <DMA_CheckFifoParam+0xe8>
      break;
 80028ea:	bf00      	nop
 80028ec:	e006      	b.n	80028fc <DMA_CheckFifoParam+0xe8>
      break;
 80028ee:	bf00      	nop
 80028f0:	e004      	b.n	80028fc <DMA_CheckFifoParam+0xe8>
      break;
 80028f2:	bf00      	nop
 80028f4:	e002      	b.n	80028fc <DMA_CheckFifoParam+0xe8>
      break;   
 80028f6:	bf00      	nop
 80028f8:	e000      	b.n	80028fc <DMA_CheckFifoParam+0xe8>
      break;
 80028fa:	bf00      	nop
    }
  } 
  
  return status; 
 80028fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3714      	adds	r7, #20
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop

0800290c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800290c:	b480      	push	{r7}
 800290e:	b089      	sub	sp, #36	; 0x24
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002916:	2300      	movs	r3, #0
 8002918:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800291a:	2300      	movs	r3, #0
 800291c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800291e:	2300      	movs	r3, #0
 8002920:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002922:	2300      	movs	r3, #0
 8002924:	61fb      	str	r3, [r7, #28]
 8002926:	e177      	b.n	8002c18 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002928:	2201      	movs	r2, #1
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	697a      	ldr	r2, [r7, #20]
 8002938:	4013      	ands	r3, r2
 800293a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	429a      	cmp	r2, r3
 8002942:	f040 8166 	bne.w	8002c12 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f003 0303 	and.w	r3, r3, #3
 800294e:	2b01      	cmp	r3, #1
 8002950:	d005      	beq.n	800295e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800295a:	2b02      	cmp	r3, #2
 800295c:	d130      	bne.n	80029c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	2203      	movs	r2, #3
 800296a:	fa02 f303 	lsl.w	r3, r2, r3
 800296e:	43db      	mvns	r3, r3
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	4013      	ands	r3, r2
 8002974:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	68da      	ldr	r2, [r3, #12]
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	fa02 f303 	lsl.w	r3, r2, r3
 8002982:	69ba      	ldr	r2, [r7, #24]
 8002984:	4313      	orrs	r3, r2
 8002986:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	69ba      	ldr	r2, [r7, #24]
 800298c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002994:	2201      	movs	r2, #1
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	fa02 f303 	lsl.w	r3, r2, r3
 800299c:	43db      	mvns	r3, r3
 800299e:	69ba      	ldr	r2, [r7, #24]
 80029a0:	4013      	ands	r3, r2
 80029a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	091b      	lsrs	r3, r3, #4
 80029aa:	f003 0201 	and.w	r2, r3, #1
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f003 0303 	and.w	r3, r3, #3
 80029c8:	2b03      	cmp	r3, #3
 80029ca:	d017      	beq.n	80029fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	2203      	movs	r2, #3
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	43db      	mvns	r3, r3
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	4013      	ands	r3, r2
 80029e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	689a      	ldr	r2, [r3, #8]
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	fa02 f303 	lsl.w	r3, r2, r3
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f003 0303 	and.w	r3, r3, #3
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d123      	bne.n	8002a50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	08da      	lsrs	r2, r3, #3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	3208      	adds	r2, #8
 8002a10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	f003 0307 	and.w	r3, r3, #7
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	220f      	movs	r2, #15
 8002a20:	fa02 f303 	lsl.w	r3, r2, r3
 8002a24:	43db      	mvns	r3, r3
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	4013      	ands	r3, r2
 8002a2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	691a      	ldr	r2, [r3, #16]
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	f003 0307 	and.w	r3, r3, #7
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	08da      	lsrs	r2, r3, #3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	3208      	adds	r2, #8
 8002a4a:	69b9      	ldr	r1, [r7, #24]
 8002a4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	2203      	movs	r2, #3
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	43db      	mvns	r3, r3
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	4013      	ands	r3, r2
 8002a66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f003 0203 	and.w	r2, r3, #3
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	fa02 f303 	lsl.w	r3, r2, r3
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	f000 80c0 	beq.w	8002c12 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a92:	2300      	movs	r3, #0
 8002a94:	60fb      	str	r3, [r7, #12]
 8002a96:	4b66      	ldr	r3, [pc, #408]	; (8002c30 <HAL_GPIO_Init+0x324>)
 8002a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9a:	4a65      	ldr	r2, [pc, #404]	; (8002c30 <HAL_GPIO_Init+0x324>)
 8002a9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002aa0:	6453      	str	r3, [r2, #68]	; 0x44
 8002aa2:	4b63      	ldr	r3, [pc, #396]	; (8002c30 <HAL_GPIO_Init+0x324>)
 8002aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aaa:	60fb      	str	r3, [r7, #12]
 8002aac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002aae:	4a61      	ldr	r2, [pc, #388]	; (8002c34 <HAL_GPIO_Init+0x328>)
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	089b      	lsrs	r3, r3, #2
 8002ab4:	3302      	adds	r3, #2
 8002ab6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	f003 0303 	and.w	r3, r3, #3
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	220f      	movs	r2, #15
 8002ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aca:	43db      	mvns	r3, r3
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	4013      	ands	r3, r2
 8002ad0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a58      	ldr	r2, [pc, #352]	; (8002c38 <HAL_GPIO_Init+0x32c>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d037      	beq.n	8002b4a <HAL_GPIO_Init+0x23e>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a57      	ldr	r2, [pc, #348]	; (8002c3c <HAL_GPIO_Init+0x330>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d031      	beq.n	8002b46 <HAL_GPIO_Init+0x23a>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a56      	ldr	r2, [pc, #344]	; (8002c40 <HAL_GPIO_Init+0x334>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d02b      	beq.n	8002b42 <HAL_GPIO_Init+0x236>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a55      	ldr	r2, [pc, #340]	; (8002c44 <HAL_GPIO_Init+0x338>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d025      	beq.n	8002b3e <HAL_GPIO_Init+0x232>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a54      	ldr	r2, [pc, #336]	; (8002c48 <HAL_GPIO_Init+0x33c>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d01f      	beq.n	8002b3a <HAL_GPIO_Init+0x22e>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a53      	ldr	r2, [pc, #332]	; (8002c4c <HAL_GPIO_Init+0x340>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d019      	beq.n	8002b36 <HAL_GPIO_Init+0x22a>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a52      	ldr	r2, [pc, #328]	; (8002c50 <HAL_GPIO_Init+0x344>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d013      	beq.n	8002b32 <HAL_GPIO_Init+0x226>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a51      	ldr	r2, [pc, #324]	; (8002c54 <HAL_GPIO_Init+0x348>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d00d      	beq.n	8002b2e <HAL_GPIO_Init+0x222>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a50      	ldr	r2, [pc, #320]	; (8002c58 <HAL_GPIO_Init+0x34c>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d007      	beq.n	8002b2a <HAL_GPIO_Init+0x21e>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a4f      	ldr	r2, [pc, #316]	; (8002c5c <HAL_GPIO_Init+0x350>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d101      	bne.n	8002b26 <HAL_GPIO_Init+0x21a>
 8002b22:	2309      	movs	r3, #9
 8002b24:	e012      	b.n	8002b4c <HAL_GPIO_Init+0x240>
 8002b26:	230a      	movs	r3, #10
 8002b28:	e010      	b.n	8002b4c <HAL_GPIO_Init+0x240>
 8002b2a:	2308      	movs	r3, #8
 8002b2c:	e00e      	b.n	8002b4c <HAL_GPIO_Init+0x240>
 8002b2e:	2307      	movs	r3, #7
 8002b30:	e00c      	b.n	8002b4c <HAL_GPIO_Init+0x240>
 8002b32:	2306      	movs	r3, #6
 8002b34:	e00a      	b.n	8002b4c <HAL_GPIO_Init+0x240>
 8002b36:	2305      	movs	r3, #5
 8002b38:	e008      	b.n	8002b4c <HAL_GPIO_Init+0x240>
 8002b3a:	2304      	movs	r3, #4
 8002b3c:	e006      	b.n	8002b4c <HAL_GPIO_Init+0x240>
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e004      	b.n	8002b4c <HAL_GPIO_Init+0x240>
 8002b42:	2302      	movs	r3, #2
 8002b44:	e002      	b.n	8002b4c <HAL_GPIO_Init+0x240>
 8002b46:	2301      	movs	r3, #1
 8002b48:	e000      	b.n	8002b4c <HAL_GPIO_Init+0x240>
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	69fa      	ldr	r2, [r7, #28]
 8002b4e:	f002 0203 	and.w	r2, r2, #3
 8002b52:	0092      	lsls	r2, r2, #2
 8002b54:	4093      	lsls	r3, r2
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b5c:	4935      	ldr	r1, [pc, #212]	; (8002c34 <HAL_GPIO_Init+0x328>)
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	089b      	lsrs	r3, r3, #2
 8002b62:	3302      	adds	r3, #2
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b6a:	4b3d      	ldr	r3, [pc, #244]	; (8002c60 <HAL_GPIO_Init+0x354>)
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	43db      	mvns	r3, r3
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	4013      	ands	r3, r2
 8002b78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d003      	beq.n	8002b8e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002b86:	69ba      	ldr	r2, [r7, #24]
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b8e:	4a34      	ldr	r2, [pc, #208]	; (8002c60 <HAL_GPIO_Init+0x354>)
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b94:	4b32      	ldr	r3, [pc, #200]	; (8002c60 <HAL_GPIO_Init+0x354>)
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	43db      	mvns	r3, r3
 8002b9e:	69ba      	ldr	r2, [r7, #24]
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d003      	beq.n	8002bb8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bb8:	4a29      	ldr	r2, [pc, #164]	; (8002c60 <HAL_GPIO_Init+0x354>)
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002bbe:	4b28      	ldr	r3, [pc, #160]	; (8002c60 <HAL_GPIO_Init+0x354>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	43db      	mvns	r3, r3
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	4013      	ands	r3, r2
 8002bcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d003      	beq.n	8002be2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002bda:	69ba      	ldr	r2, [r7, #24]
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002be2:	4a1f      	ldr	r2, [pc, #124]	; (8002c60 <HAL_GPIO_Init+0x354>)
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002be8:	4b1d      	ldr	r3, [pc, #116]	; (8002c60 <HAL_GPIO_Init+0x354>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	43db      	mvns	r3, r3
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d003      	beq.n	8002c0c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c0c:	4a14      	ldr	r2, [pc, #80]	; (8002c60 <HAL_GPIO_Init+0x354>)
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	3301      	adds	r3, #1
 8002c16:	61fb      	str	r3, [r7, #28]
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	2b0f      	cmp	r3, #15
 8002c1c:	f67f ae84 	bls.w	8002928 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c20:	bf00      	nop
 8002c22:	bf00      	nop
 8002c24:	3724      	adds	r7, #36	; 0x24
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	40023800 	.word	0x40023800
 8002c34:	40013800 	.word	0x40013800
 8002c38:	40020000 	.word	0x40020000
 8002c3c:	40020400 	.word	0x40020400
 8002c40:	40020800 	.word	0x40020800
 8002c44:	40020c00 	.word	0x40020c00
 8002c48:	40021000 	.word	0x40021000
 8002c4c:	40021400 	.word	0x40021400
 8002c50:	40021800 	.word	0x40021800
 8002c54:	40021c00 	.word	0x40021c00
 8002c58:	40022000 	.word	0x40022000
 8002c5c:	40022400 	.word	0x40022400
 8002c60:	40013c00 	.word	0x40013c00

08002c64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	807b      	strh	r3, [r7, #2]
 8002c70:	4613      	mov	r3, r2
 8002c72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c74:	787b      	ldrb	r3, [r7, #1]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d003      	beq.n	8002c82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c7a:	887a      	ldrh	r2, [r7, #2]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c80:	e003      	b.n	8002c8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c82:	887b      	ldrh	r3, [r7, #2]
 8002c84:	041a      	lsls	r2, r3, #16
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	619a      	str	r2, [r3, #24]
}
 8002c8a:	bf00      	nop
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr

08002c96 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c96:	b480      	push	{r7}
 8002c98:	b085      	sub	sp, #20
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	695b      	ldr	r3, [r3, #20]
 8002ca6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ca8:	887a      	ldrh	r2, [r7, #2]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	4013      	ands	r3, r2
 8002cae:	041a      	lsls	r2, r3, #16
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	43d9      	mvns	r1, r3
 8002cb4:	887b      	ldrh	r3, [r7, #2]
 8002cb6:	400b      	ands	r3, r1
 8002cb8:	431a      	orrs	r2, r3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	619a      	str	r2, [r3, #24]
}
 8002cbe:	bf00      	nop
 8002cc0:	3714      	adds	r7, #20
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr

08002cca <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b086      	sub	sp, #24
 8002cce:	af02      	add	r7, sp, #8
 8002cd0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d101      	bne.n	8002cdc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e101      	b.n	8002ee0 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d106      	bne.n	8002cfc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f009 f9a2 	bl	800c040 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2203      	movs	r2, #3
 8002d00:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d0a:	d102      	bne.n	8002d12 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f004 f82b 	bl	8006d72 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6818      	ldr	r0, [r3, #0]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	7c1a      	ldrb	r2, [r3, #16]
 8002d24:	f88d 2000 	strb.w	r2, [sp]
 8002d28:	3304      	adds	r3, #4
 8002d2a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d2c:	f003 ff0a 	bl	8006b44 <USB_CoreInit>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d005      	beq.n	8002d42 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2202      	movs	r2, #2
 8002d3a:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e0ce      	b.n	8002ee0 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2100      	movs	r1, #0
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f004 f823 	bl	8006d94 <USB_SetCurrentMode>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d005      	beq.n	8002d60 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2202      	movs	r2, #2
 8002d58:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e0bf      	b.n	8002ee0 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d60:	2300      	movs	r3, #0
 8002d62:	73fb      	strb	r3, [r7, #15]
 8002d64:	e04a      	b.n	8002dfc <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002d66:	7bfa      	ldrb	r2, [r7, #15]
 8002d68:	6879      	ldr	r1, [r7, #4]
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	00db      	lsls	r3, r3, #3
 8002d6e:	4413      	add	r3, r2
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	440b      	add	r3, r1
 8002d74:	3315      	adds	r3, #21
 8002d76:	2201      	movs	r2, #1
 8002d78:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002d7a:	7bfa      	ldrb	r2, [r7, #15]
 8002d7c:	6879      	ldr	r1, [r7, #4]
 8002d7e:	4613      	mov	r3, r2
 8002d80:	00db      	lsls	r3, r3, #3
 8002d82:	4413      	add	r3, r2
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	440b      	add	r3, r1
 8002d88:	3314      	adds	r3, #20
 8002d8a:	7bfa      	ldrb	r2, [r7, #15]
 8002d8c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002d8e:	7bfa      	ldrb	r2, [r7, #15]
 8002d90:	7bfb      	ldrb	r3, [r7, #15]
 8002d92:	b298      	uxth	r0, r3
 8002d94:	6879      	ldr	r1, [r7, #4]
 8002d96:	4613      	mov	r3, r2
 8002d98:	00db      	lsls	r3, r3, #3
 8002d9a:	4413      	add	r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	440b      	add	r3, r1
 8002da0:	332e      	adds	r3, #46	; 0x2e
 8002da2:	4602      	mov	r2, r0
 8002da4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002da6:	7bfa      	ldrb	r2, [r7, #15]
 8002da8:	6879      	ldr	r1, [r7, #4]
 8002daa:	4613      	mov	r3, r2
 8002dac:	00db      	lsls	r3, r3, #3
 8002dae:	4413      	add	r3, r2
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	440b      	add	r3, r1
 8002db4:	3318      	adds	r3, #24
 8002db6:	2200      	movs	r2, #0
 8002db8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002dba:	7bfa      	ldrb	r2, [r7, #15]
 8002dbc:	6879      	ldr	r1, [r7, #4]
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	00db      	lsls	r3, r3, #3
 8002dc2:	4413      	add	r3, r2
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	440b      	add	r3, r1
 8002dc8:	331c      	adds	r3, #28
 8002dca:	2200      	movs	r2, #0
 8002dcc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002dce:	7bfa      	ldrb	r2, [r7, #15]
 8002dd0:	6879      	ldr	r1, [r7, #4]
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	00db      	lsls	r3, r3, #3
 8002dd6:	4413      	add	r3, r2
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	440b      	add	r3, r1
 8002ddc:	3320      	adds	r3, #32
 8002dde:	2200      	movs	r2, #0
 8002de0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002de2:	7bfa      	ldrb	r2, [r7, #15]
 8002de4:	6879      	ldr	r1, [r7, #4]
 8002de6:	4613      	mov	r3, r2
 8002de8:	00db      	lsls	r3, r3, #3
 8002dea:	4413      	add	r3, r2
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	440b      	add	r3, r1
 8002df0:	3324      	adds	r3, #36	; 0x24
 8002df2:	2200      	movs	r2, #0
 8002df4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002df6:	7bfb      	ldrb	r3, [r7, #15]
 8002df8:	3301      	adds	r3, #1
 8002dfa:	73fb      	strb	r3, [r7, #15]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	791b      	ldrb	r3, [r3, #4]
 8002e00:	7bfa      	ldrb	r2, [r7, #15]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d3af      	bcc.n	8002d66 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e06:	2300      	movs	r3, #0
 8002e08:	73fb      	strb	r3, [r7, #15]
 8002e0a:	e044      	b.n	8002e96 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002e0c:	7bfa      	ldrb	r2, [r7, #15]
 8002e0e:	6879      	ldr	r1, [r7, #4]
 8002e10:	4613      	mov	r3, r2
 8002e12:	00db      	lsls	r3, r3, #3
 8002e14:	4413      	add	r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	440b      	add	r3, r1
 8002e1a:	f203 2355 	addw	r3, r3, #597	; 0x255
 8002e1e:	2200      	movs	r2, #0
 8002e20:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002e22:	7bfa      	ldrb	r2, [r7, #15]
 8002e24:	6879      	ldr	r1, [r7, #4]
 8002e26:	4613      	mov	r3, r2
 8002e28:	00db      	lsls	r3, r3, #3
 8002e2a:	4413      	add	r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	440b      	add	r3, r1
 8002e30:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8002e34:	7bfa      	ldrb	r2, [r7, #15]
 8002e36:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002e38:	7bfa      	ldrb	r2, [r7, #15]
 8002e3a:	6879      	ldr	r1, [r7, #4]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	00db      	lsls	r3, r3, #3
 8002e40:	4413      	add	r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	440b      	add	r3, r1
 8002e46:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002e4e:	7bfa      	ldrb	r2, [r7, #15]
 8002e50:	6879      	ldr	r1, [r7, #4]
 8002e52:	4613      	mov	r3, r2
 8002e54:	00db      	lsls	r3, r3, #3
 8002e56:	4413      	add	r3, r2
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	440b      	add	r3, r1
 8002e5c:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8002e60:	2200      	movs	r2, #0
 8002e62:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002e64:	7bfa      	ldrb	r2, [r7, #15]
 8002e66:	6879      	ldr	r1, [r7, #4]
 8002e68:	4613      	mov	r3, r2
 8002e6a:	00db      	lsls	r3, r3, #3
 8002e6c:	4413      	add	r3, r2
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	440b      	add	r3, r1
 8002e72:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8002e76:	2200      	movs	r2, #0
 8002e78:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002e7a:	7bfa      	ldrb	r2, [r7, #15]
 8002e7c:	6879      	ldr	r1, [r7, #4]
 8002e7e:	4613      	mov	r3, r2
 8002e80:	00db      	lsls	r3, r3, #3
 8002e82:	4413      	add	r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	440b      	add	r3, r1
 8002e88:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e90:	7bfb      	ldrb	r3, [r7, #15]
 8002e92:	3301      	adds	r3, #1
 8002e94:	73fb      	strb	r3, [r7, #15]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	791b      	ldrb	r3, [r3, #4]
 8002e9a:	7bfa      	ldrb	r2, [r7, #15]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d3b5      	bcc.n	8002e0c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6818      	ldr	r0, [r3, #0]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	7c1a      	ldrb	r2, [r3, #16]
 8002ea8:	f88d 2000 	strb.w	r2, [sp]
 8002eac:	3304      	adds	r3, #4
 8002eae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002eb0:	f003 ffbc 	bl	8006e2c <USB_DevInit>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d005      	beq.n	8002ec6 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2202      	movs	r2, #2
 8002ebe:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e00c      	b.n	8002ee0 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f005 f800 	bl	8007ede <USB_DevDisconnect>

  return HAL_OK;
 8002ede:	2300      	movs	r3, #0
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3710      	adds	r7, #16
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d101      	bne.n	8002f04 <HAL_PCD_Start+0x1c>
 8002f00:	2302      	movs	r3, #2
 8002f02:	e022      	b.n	8002f4a <HAL_PCD_Start+0x62>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d009      	beq.n	8002f2c <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d105      	bne.n	8002f2c <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f24:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4618      	mov	r0, r3
 8002f32:	f003 ff0d 	bl	8006d50 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f004 ffae 	bl	8007e9c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3710      	adds	r7, #16
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002f52:	b590      	push	{r4, r7, lr}
 8002f54:	b08d      	sub	sp, #52	; 0x34
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f60:	6a3b      	ldr	r3, [r7, #32]
 8002f62:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f005 f86c 	bl	8008046 <USB_GetMode>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	f040 848c 	bne.w	800388e <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f004 ffd0 	bl	8007f20 <USB_ReadInterrupts>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	f000 8482 	beq.w	800388c <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	0a1b      	lsrs	r3, r3, #8
 8002f92:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f004 ffbd 	bl	8007f20 <USB_ReadInterrupts>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	f003 0302 	and.w	r3, r3, #2
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d107      	bne.n	8002fc0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	695a      	ldr	r2, [r3, #20]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f002 0202 	and.w	r2, r2, #2
 8002fbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f004 ffab 	bl	8007f20 <USB_ReadInterrupts>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	f003 0310 	and.w	r3, r3, #16
 8002fd0:	2b10      	cmp	r3, #16
 8002fd2:	d161      	bne.n	8003098 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	699a      	ldr	r2, [r3, #24]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f022 0210 	bic.w	r2, r2, #16
 8002fe2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002fe4:	6a3b      	ldr	r3, [r7, #32]
 8002fe6:	6a1b      	ldr	r3, [r3, #32]
 8002fe8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	f003 020f 	and.w	r2, r3, #15
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	00db      	lsls	r3, r3, #3
 8002ff4:	4413      	add	r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	4413      	add	r3, r2
 8003000:	3304      	adds	r3, #4
 8003002:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	0c5b      	lsrs	r3, r3, #17
 8003008:	f003 030f 	and.w	r3, r3, #15
 800300c:	2b02      	cmp	r3, #2
 800300e:	d124      	bne.n	800305a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003016:	4013      	ands	r3, r2
 8003018:	2b00      	cmp	r3, #0
 800301a:	d035      	beq.n	8003088 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	091b      	lsrs	r3, r3, #4
 8003024:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003026:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800302a:	b29b      	uxth	r3, r3
 800302c:	461a      	mov	r2, r3
 800302e:	6a38      	ldr	r0, [r7, #32]
 8003030:	f004 fde2 	bl	8007bf8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	68da      	ldr	r2, [r3, #12]
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	091b      	lsrs	r3, r3, #4
 800303c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003040:	441a      	add	r2, r3
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	695a      	ldr	r2, [r3, #20]
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	091b      	lsrs	r3, r3, #4
 800304e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003052:	441a      	add	r2, r3
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	615a      	str	r2, [r3, #20]
 8003058:	e016      	b.n	8003088 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	0c5b      	lsrs	r3, r3, #17
 800305e:	f003 030f 	and.w	r3, r3, #15
 8003062:	2b06      	cmp	r3, #6
 8003064:	d110      	bne.n	8003088 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800306c:	2208      	movs	r2, #8
 800306e:	4619      	mov	r1, r3
 8003070:	6a38      	ldr	r0, [r7, #32]
 8003072:	f004 fdc1 	bl	8007bf8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	695a      	ldr	r2, [r3, #20]
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	091b      	lsrs	r3, r3, #4
 800307e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003082:	441a      	add	r2, r3
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	699a      	ldr	r2, [r3, #24]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f042 0210 	orr.w	r2, r2, #16
 8003096:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4618      	mov	r0, r3
 800309e:	f004 ff3f 	bl	8007f20 <USB_ReadInterrupts>
 80030a2:	4603      	mov	r3, r0
 80030a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030a8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80030ac:	f040 80a7 	bne.w	80031fe <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80030b0:	2300      	movs	r3, #0
 80030b2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4618      	mov	r0, r3
 80030ba:	f004 ff44 	bl	8007f46 <USB_ReadDevAllOutEpInterrupt>
 80030be:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80030c0:	e099      	b.n	80031f6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80030c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c4:	f003 0301 	and.w	r3, r3, #1
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	f000 808e 	beq.w	80031ea <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030d4:	b2d2      	uxtb	r2, r2
 80030d6:	4611      	mov	r1, r2
 80030d8:	4618      	mov	r0, r3
 80030da:	f004 ff68 	bl	8007fae <USB_ReadDevOutEPInterrupt>
 80030de:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00c      	beq.n	8003104 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80030ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ec:	015a      	lsls	r2, r3, #5
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	4413      	add	r3, r2
 80030f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030f6:	461a      	mov	r2, r3
 80030f8:	2301      	movs	r3, #1
 80030fa:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80030fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 fea2 	bl	8003e48 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	f003 0308 	and.w	r3, r3, #8
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00c      	beq.n	8003128 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800310e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003110:	015a      	lsls	r2, r3, #5
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	4413      	add	r3, r2
 8003116:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800311a:	461a      	mov	r2, r3
 800311c:	2308      	movs	r3, #8
 800311e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003120:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 ff78 	bl	8004018 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	f003 0310 	and.w	r3, r3, #16
 800312e:	2b00      	cmp	r3, #0
 8003130:	d008      	beq.n	8003144 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003134:	015a      	lsls	r2, r3, #5
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	4413      	add	r3, r2
 800313a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800313e:	461a      	mov	r2, r3
 8003140:	2310      	movs	r3, #16
 8003142:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d030      	beq.n	80031b0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800314e:	6a3b      	ldr	r3, [r7, #32]
 8003150:	695b      	ldr	r3, [r3, #20]
 8003152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003156:	2b80      	cmp	r3, #128	; 0x80
 8003158:	d109      	bne.n	800316e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	69fa      	ldr	r2, [r7, #28]
 8003164:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003168:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800316c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800316e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003170:	4613      	mov	r3, r2
 8003172:	00db      	lsls	r3, r3, #3
 8003174:	4413      	add	r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	4413      	add	r3, r2
 8003180:	3304      	adds	r3, #4
 8003182:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	78db      	ldrb	r3, [r3, #3]
 8003188:	2b01      	cmp	r3, #1
 800318a:	d108      	bne.n	800319e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	2200      	movs	r2, #0
 8003190:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003194:	b2db      	uxtb	r3, r3
 8003196:	4619      	mov	r1, r3
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f009 f857 	bl	800c24c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800319e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a0:	015a      	lsls	r2, r3, #5
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	4413      	add	r3, r2
 80031a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031aa:	461a      	mov	r2, r3
 80031ac:	2302      	movs	r3, #2
 80031ae:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	f003 0320 	and.w	r3, r3, #32
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d008      	beq.n	80031cc <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80031ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031bc:	015a      	lsls	r2, r3, #5
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	4413      	add	r3, r2
 80031c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031c6:	461a      	mov	r2, r3
 80031c8:	2320      	movs	r3, #32
 80031ca:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d009      	beq.n	80031ea <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80031d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d8:	015a      	lsls	r2, r3, #5
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	4413      	add	r3, r2
 80031de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031e2:	461a      	mov	r2, r3
 80031e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80031e8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80031ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ec:	3301      	adds	r3, #1
 80031ee:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80031f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f2:	085b      	lsrs	r3, r3, #1
 80031f4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80031f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	f47f af62 	bne.w	80030c2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4618      	mov	r0, r3
 8003204:	f004 fe8c 	bl	8007f20 <USB_ReadInterrupts>
 8003208:	4603      	mov	r3, r0
 800320a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800320e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003212:	f040 80db 	bne.w	80033cc <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4618      	mov	r0, r3
 800321c:	f004 fead 	bl	8007f7a <USB_ReadDevAllInEpInterrupt>
 8003220:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003222:	2300      	movs	r3, #0
 8003224:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003226:	e0cd      	b.n	80033c4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	2b00      	cmp	r3, #0
 8003230:	f000 80c2 	beq.w	80033b8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800323a:	b2d2      	uxtb	r2, r2
 800323c:	4611      	mov	r1, r2
 800323e:	4618      	mov	r0, r3
 8003240:	f004 fed3 	bl	8007fea <USB_ReadDevInEPInterrupt>
 8003244:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	f003 0301 	and.w	r3, r3, #1
 800324c:	2b00      	cmp	r3, #0
 800324e:	d057      	beq.n	8003300 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003252:	f003 030f 	and.w	r3, r3, #15
 8003256:	2201      	movs	r2, #1
 8003258:	fa02 f303 	lsl.w	r3, r2, r3
 800325c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003264:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	43db      	mvns	r3, r3
 800326a:	69f9      	ldr	r1, [r7, #28]
 800326c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003270:	4013      	ands	r3, r2
 8003272:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003276:	015a      	lsls	r2, r3, #5
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	4413      	add	r3, r2
 800327c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003280:	461a      	mov	r2, r3
 8003282:	2301      	movs	r3, #1
 8003284:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	799b      	ldrb	r3, [r3, #6]
 800328a:	2b01      	cmp	r3, #1
 800328c:	d132      	bne.n	80032f4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800328e:	6879      	ldr	r1, [r7, #4]
 8003290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003292:	4613      	mov	r3, r2
 8003294:	00db      	lsls	r3, r3, #3
 8003296:	4413      	add	r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	440b      	add	r3, r1
 800329c:	3320      	adds	r3, #32
 800329e:	6819      	ldr	r1, [r3, #0]
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032a4:	4613      	mov	r3, r2
 80032a6:	00db      	lsls	r3, r3, #3
 80032a8:	4413      	add	r3, r2
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	4403      	add	r3, r0
 80032ae:	331c      	adds	r3, #28
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4419      	add	r1, r3
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032b8:	4613      	mov	r3, r2
 80032ba:	00db      	lsls	r3, r3, #3
 80032bc:	4413      	add	r3, r2
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	4403      	add	r3, r0
 80032c2:	3320      	adds	r3, #32
 80032c4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80032c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d113      	bne.n	80032f4 <HAL_PCD_IRQHandler+0x3a2>
 80032cc:	6879      	ldr	r1, [r7, #4]
 80032ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032d0:	4613      	mov	r3, r2
 80032d2:	00db      	lsls	r3, r3, #3
 80032d4:	4413      	add	r3, r2
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	440b      	add	r3, r1
 80032da:	3324      	adds	r3, #36	; 0x24
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d108      	bne.n	80032f4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6818      	ldr	r0, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80032ec:	461a      	mov	r2, r3
 80032ee:	2101      	movs	r1, #1
 80032f0:	f004 feda 	bl	80080a8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80032f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	4619      	mov	r1, r3
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f008 ff21 	bl	800c142 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	f003 0308 	and.w	r3, r3, #8
 8003306:	2b00      	cmp	r3, #0
 8003308:	d008      	beq.n	800331c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800330a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330c:	015a      	lsls	r2, r3, #5
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	4413      	add	r3, r2
 8003312:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003316:	461a      	mov	r2, r3
 8003318:	2308      	movs	r3, #8
 800331a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	f003 0310 	and.w	r3, r3, #16
 8003322:	2b00      	cmp	r3, #0
 8003324:	d008      	beq.n	8003338 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003328:	015a      	lsls	r2, r3, #5
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	4413      	add	r3, r2
 800332e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003332:	461a      	mov	r2, r3
 8003334:	2310      	movs	r3, #16
 8003336:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800333e:	2b00      	cmp	r3, #0
 8003340:	d008      	beq.n	8003354 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003344:	015a      	lsls	r2, r3, #5
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	4413      	add	r3, r2
 800334a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800334e:	461a      	mov	r2, r3
 8003350:	2340      	movs	r3, #64	; 0x40
 8003352:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d023      	beq.n	80033a6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800335e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003360:	6a38      	ldr	r0, [r7, #32]
 8003362:	f003 fec7 	bl	80070f4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003366:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003368:	4613      	mov	r3, r2
 800336a:	00db      	lsls	r3, r3, #3
 800336c:	4413      	add	r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	3310      	adds	r3, #16
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	4413      	add	r3, r2
 8003376:	3304      	adds	r3, #4
 8003378:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	78db      	ldrb	r3, [r3, #3]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d108      	bne.n	8003394 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	2200      	movs	r2, #0
 8003386:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338a:	b2db      	uxtb	r3, r3
 800338c:	4619      	mov	r1, r3
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f008 ff6e 	bl	800c270 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003396:	015a      	lsls	r2, r3, #5
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	4413      	add	r3, r2
 800339c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033a0:	461a      	mov	r2, r3
 80033a2:	2302      	movs	r3, #2
 80033a4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d003      	beq.n	80033b8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80033b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f000 fcbb 	bl	8003d2e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80033b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ba:	3301      	adds	r3, #1
 80033bc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80033be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c0:	085b      	lsrs	r3, r3, #1
 80033c2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80033c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	f47f af2e 	bne.w	8003228 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4618      	mov	r0, r3
 80033d2:	f004 fda5 	bl	8007f20 <USB_ReadInterrupts>
 80033d6:	4603      	mov	r3, r0
 80033d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80033dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033e0:	d122      	bne.n	8003428 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	69fa      	ldr	r2, [r7, #28]
 80033ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033f0:	f023 0301 	bic.w	r3, r3, #1
 80033f4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d108      	bne.n	8003412 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003408:	2100      	movs	r1, #0
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 fea2 	bl	8004154 <HAL_PCDEx_LPM_Callback>
 8003410:	e002      	b.n	8003418 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f008 ff0c 	bl	800c230 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	695a      	ldr	r2, [r3, #20]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003426:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4618      	mov	r0, r3
 800342e:	f004 fd77 	bl	8007f20 <USB_ReadInterrupts>
 8003432:	4603      	mov	r3, r0
 8003434:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003438:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800343c:	d112      	bne.n	8003464 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	2b01      	cmp	r3, #1
 800344c:	d102      	bne.n	8003454 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f008 fec8 	bl	800c1e4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	695a      	ldr	r2, [r3, #20]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003462:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4618      	mov	r0, r3
 800346a:	f004 fd59 	bl	8007f20 <USB_ReadInterrupts>
 800346e:	4603      	mov	r3, r0
 8003470:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003474:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003478:	f040 80b7 	bne.w	80035ea <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	69fa      	ldr	r2, [r7, #28]
 8003486:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800348a:	f023 0301 	bic.w	r3, r3, #1
 800348e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2110      	movs	r1, #16
 8003496:	4618      	mov	r0, r3
 8003498:	f003 fe2c 	bl	80070f4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800349c:	2300      	movs	r3, #0
 800349e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034a0:	e046      	b.n	8003530 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80034a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034a4:	015a      	lsls	r2, r3, #5
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	4413      	add	r3, r2
 80034aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034ae:	461a      	mov	r2, r3
 80034b0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80034b4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80034b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034b8:	015a      	lsls	r2, r3, #5
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	4413      	add	r3, r2
 80034be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034c6:	0151      	lsls	r1, r2, #5
 80034c8:	69fa      	ldr	r2, [r7, #28]
 80034ca:	440a      	add	r2, r1
 80034cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034d0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80034d4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80034d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034d8:	015a      	lsls	r2, r3, #5
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	4413      	add	r3, r2
 80034de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034e2:	461a      	mov	r2, r3
 80034e4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80034e8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80034ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ec:	015a      	lsls	r2, r3, #5
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	4413      	add	r3, r2
 80034f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034fa:	0151      	lsls	r1, r2, #5
 80034fc:	69fa      	ldr	r2, [r7, #28]
 80034fe:	440a      	add	r2, r1
 8003500:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003504:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003508:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800350a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800350c:	015a      	lsls	r2, r3, #5
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	4413      	add	r3, r2
 8003512:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800351a:	0151      	lsls	r1, r2, #5
 800351c:	69fa      	ldr	r2, [r7, #28]
 800351e:	440a      	add	r2, r1
 8003520:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003524:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003528:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800352a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800352c:	3301      	adds	r3, #1
 800352e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	791b      	ldrb	r3, [r3, #4]
 8003534:	461a      	mov	r2, r3
 8003536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003538:	4293      	cmp	r3, r2
 800353a:	d3b2      	bcc.n	80034a2 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003542:	69db      	ldr	r3, [r3, #28]
 8003544:	69fa      	ldr	r2, [r7, #28]
 8003546:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800354a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800354e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	7bdb      	ldrb	r3, [r3, #15]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d016      	beq.n	8003586 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800355e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003562:	69fa      	ldr	r2, [r7, #28]
 8003564:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003568:	f043 030b 	orr.w	r3, r3, #11
 800356c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003578:	69fa      	ldr	r2, [r7, #28]
 800357a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800357e:	f043 030b 	orr.w	r3, r3, #11
 8003582:	6453      	str	r3, [r2, #68]	; 0x44
 8003584:	e015      	b.n	80035b2 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	69fa      	ldr	r2, [r7, #28]
 8003590:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003594:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003598:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800359c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	69fa      	ldr	r2, [r7, #28]
 80035a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035ac:	f043 030b 	orr.w	r3, r3, #11
 80035b0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	69fa      	ldr	r2, [r7, #28]
 80035bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035c0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80035c4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6818      	ldr	r0, [r3, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80035d4:	461a      	mov	r2, r3
 80035d6:	f004 fd67 	bl	80080a8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	695a      	ldr	r2, [r3, #20]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80035e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4618      	mov	r0, r3
 80035f0:	f004 fc96 	bl	8007f20 <USB_ReadInterrupts>
 80035f4:	4603      	mov	r3, r0
 80035f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035fe:	d123      	bne.n	8003648 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4618      	mov	r0, r3
 8003606:	f004 fd2c 	bl	8008062 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4618      	mov	r0, r3
 8003610:	f003 fde9 	bl	80071e6 <USB_GetDevSpeed>
 8003614:	4603      	mov	r3, r0
 8003616:	461a      	mov	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681c      	ldr	r4, [r3, #0]
 8003620:	f001 f9c8 	bl	80049b4 <HAL_RCC_GetHCLKFreq>
 8003624:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800362a:	461a      	mov	r2, r3
 800362c:	4620      	mov	r0, r4
 800362e:	f003 faed 	bl	8006c0c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f008 fdad 	bl	800c192 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	695a      	ldr	r2, [r3, #20]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003646:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4618      	mov	r0, r3
 800364e:	f004 fc67 	bl	8007f20 <USB_ReadInterrupts>
 8003652:	4603      	mov	r3, r0
 8003654:	f003 0308 	and.w	r3, r3, #8
 8003658:	2b08      	cmp	r3, #8
 800365a:	d10a      	bne.n	8003672 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f008 fd8a 	bl	800c176 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	695a      	ldr	r2, [r3, #20]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f002 0208 	and.w	r2, r2, #8
 8003670:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4618      	mov	r0, r3
 8003678:	f004 fc52 	bl	8007f20 <USB_ReadInterrupts>
 800367c:	4603      	mov	r3, r0
 800367e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003682:	2b80      	cmp	r3, #128	; 0x80
 8003684:	d123      	bne.n	80036ce <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003686:	6a3b      	ldr	r3, [r7, #32]
 8003688:	699b      	ldr	r3, [r3, #24]
 800368a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800368e:	6a3b      	ldr	r3, [r7, #32]
 8003690:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003692:	2301      	movs	r3, #1
 8003694:	627b      	str	r3, [r7, #36]	; 0x24
 8003696:	e014      	b.n	80036c2 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003698:	6879      	ldr	r1, [r7, #4]
 800369a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800369c:	4613      	mov	r3, r2
 800369e:	00db      	lsls	r3, r3, #3
 80036a0:	4413      	add	r3, r2
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	440b      	add	r3, r1
 80036a6:	f203 2357 	addw	r3, r3, #599	; 0x257
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d105      	bne.n	80036bc <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80036b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	4619      	mov	r1, r3
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 fb08 	bl	8003ccc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80036bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036be:	3301      	adds	r3, #1
 80036c0:	627b      	str	r3, [r7, #36]	; 0x24
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	791b      	ldrb	r3, [r3, #4]
 80036c6:	461a      	mov	r2, r3
 80036c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d3e4      	bcc.n	8003698 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4618      	mov	r0, r3
 80036d4:	f004 fc24 	bl	8007f20 <USB_ReadInterrupts>
 80036d8:	4603      	mov	r3, r0
 80036da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036e2:	d13c      	bne.n	800375e <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80036e4:	2301      	movs	r3, #1
 80036e6:	627b      	str	r3, [r7, #36]	; 0x24
 80036e8:	e02b      	b.n	8003742 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80036ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ec:	015a      	lsls	r2, r3, #5
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	4413      	add	r3, r2
 80036f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80036fa:	6879      	ldr	r1, [r7, #4]
 80036fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036fe:	4613      	mov	r3, r2
 8003700:	00db      	lsls	r3, r3, #3
 8003702:	4413      	add	r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	440b      	add	r3, r1
 8003708:	3318      	adds	r3, #24
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	2b01      	cmp	r3, #1
 800370e:	d115      	bne.n	800373c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003710:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003712:	2b00      	cmp	r3, #0
 8003714:	da12      	bge.n	800373c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003716:	6879      	ldr	r1, [r7, #4]
 8003718:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800371a:	4613      	mov	r3, r2
 800371c:	00db      	lsls	r3, r3, #3
 800371e:	4413      	add	r3, r2
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	440b      	add	r3, r1
 8003724:	3317      	adds	r3, #23
 8003726:	2201      	movs	r2, #1
 8003728:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800372a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372c:	b2db      	uxtb	r3, r3
 800372e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003732:	b2db      	uxtb	r3, r3
 8003734:	4619      	mov	r1, r3
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 fac8 	bl	8003ccc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800373c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373e:	3301      	adds	r3, #1
 8003740:	627b      	str	r3, [r7, #36]	; 0x24
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	791b      	ldrb	r3, [r3, #4]
 8003746:	461a      	mov	r2, r3
 8003748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374a:	4293      	cmp	r3, r2
 800374c:	d3cd      	bcc.n	80036ea <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	695a      	ldr	r2, [r3, #20]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800375c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4618      	mov	r0, r3
 8003764:	f004 fbdc 	bl	8007f20 <USB_ReadInterrupts>
 8003768:	4603      	mov	r3, r0
 800376a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800376e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003772:	d156      	bne.n	8003822 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003774:	2301      	movs	r3, #1
 8003776:	627b      	str	r3, [r7, #36]	; 0x24
 8003778:	e045      	b.n	8003806 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800377a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377c:	015a      	lsls	r2, r3, #5
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	4413      	add	r3, r2
 8003782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800378a:	6879      	ldr	r1, [r7, #4]
 800378c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800378e:	4613      	mov	r3, r2
 8003790:	00db      	lsls	r3, r3, #3
 8003792:	4413      	add	r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	440b      	add	r3, r1
 8003798:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d12e      	bne.n	8003800 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80037a2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	da2b      	bge.n	8003800 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 80037b4:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d121      	bne.n	8003800 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80037bc:	6879      	ldr	r1, [r7, #4]
 80037be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037c0:	4613      	mov	r3, r2
 80037c2:	00db      	lsls	r3, r3, #3
 80037c4:	4413      	add	r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	440b      	add	r3, r1
 80037ca:	f203 2357 	addw	r3, r3, #599	; 0x257
 80037ce:	2201      	movs	r2, #1
 80037d0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80037d2:	6a3b      	ldr	r3, [r7, #32]
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80037da:	6a3b      	ldr	r3, [r7, #32]
 80037dc:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80037de:	6a3b      	ldr	r3, [r7, #32]
 80037e0:	695b      	ldr	r3, [r3, #20]
 80037e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d10a      	bne.n	8003800 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	69fa      	ldr	r2, [r7, #28]
 80037f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037fc:	6053      	str	r3, [r2, #4]
            break;
 80037fe:	e008      	b.n	8003812 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003802:	3301      	adds	r3, #1
 8003804:	627b      	str	r3, [r7, #36]	; 0x24
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	791b      	ldrb	r3, [r3, #4]
 800380a:	461a      	mov	r2, r3
 800380c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380e:	4293      	cmp	r3, r2
 8003810:	d3b3      	bcc.n	800377a <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	695a      	ldr	r2, [r3, #20]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003820:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4618      	mov	r0, r3
 8003828:	f004 fb7a 	bl	8007f20 <USB_ReadInterrupts>
 800382c:	4603      	mov	r3, r0
 800382e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003836:	d10a      	bne.n	800384e <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f008 fd2b 	bl	800c294 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	695a      	ldr	r2, [r3, #20]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800384c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4618      	mov	r0, r3
 8003854:	f004 fb64 	bl	8007f20 <USB_ReadInterrupts>
 8003858:	4603      	mov	r3, r0
 800385a:	f003 0304 	and.w	r3, r3, #4
 800385e:	2b04      	cmp	r3, #4
 8003860:	d115      	bne.n	800388e <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	f003 0304 	and.w	r3, r3, #4
 8003870:	2b00      	cmp	r3, #0
 8003872:	d002      	beq.n	800387a <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f008 fd1b 	bl	800c2b0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	6859      	ldr	r1, [r3, #4]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	69ba      	ldr	r2, [r7, #24]
 8003886:	430a      	orrs	r2, r1
 8003888:	605a      	str	r2, [r3, #4]
 800388a:	e000      	b.n	800388e <HAL_PCD_IRQHandler+0x93c>
      return;
 800388c:	bf00      	nop
    }
  }
}
 800388e:	3734      	adds	r7, #52	; 0x34
 8003890:	46bd      	mov	sp, r7
 8003892:	bd90      	pop	{r4, r7, pc}

08003894 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	460b      	mov	r3, r1
 800389e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d101      	bne.n	80038ae <HAL_PCD_SetAddress+0x1a>
 80038aa:	2302      	movs	r3, #2
 80038ac:	e012      	b.n	80038d4 <HAL_PCD_SetAddress+0x40>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2201      	movs	r2, #1
 80038b2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	78fa      	ldrb	r2, [r7, #3]
 80038ba:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	78fa      	ldrb	r2, [r7, #3]
 80038c2:	4611      	mov	r1, r2
 80038c4:	4618      	mov	r0, r3
 80038c6:	f004 fac3 	bl	8007e50 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80038d2:	2300      	movs	r3, #0
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3708      	adds	r7, #8
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	4608      	mov	r0, r1
 80038e6:	4611      	mov	r1, r2
 80038e8:	461a      	mov	r2, r3
 80038ea:	4603      	mov	r3, r0
 80038ec:	70fb      	strb	r3, [r7, #3]
 80038ee:	460b      	mov	r3, r1
 80038f0:	803b      	strh	r3, [r7, #0]
 80038f2:	4613      	mov	r3, r2
 80038f4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80038f6:	2300      	movs	r3, #0
 80038f8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80038fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	da0f      	bge.n	8003922 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003902:	78fb      	ldrb	r3, [r7, #3]
 8003904:	f003 020f 	and.w	r2, r3, #15
 8003908:	4613      	mov	r3, r2
 800390a:	00db      	lsls	r3, r3, #3
 800390c:	4413      	add	r3, r2
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	3310      	adds	r3, #16
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	4413      	add	r3, r2
 8003916:	3304      	adds	r3, #4
 8003918:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2201      	movs	r2, #1
 800391e:	705a      	strb	r2, [r3, #1]
 8003920:	e00f      	b.n	8003942 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003922:	78fb      	ldrb	r3, [r7, #3]
 8003924:	f003 020f 	and.w	r2, r3, #15
 8003928:	4613      	mov	r3, r2
 800392a:	00db      	lsls	r3, r3, #3
 800392c:	4413      	add	r3, r2
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	4413      	add	r3, r2
 8003938:	3304      	adds	r3, #4
 800393a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2200      	movs	r2, #0
 8003940:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003942:	78fb      	ldrb	r3, [r7, #3]
 8003944:	f003 030f 	and.w	r3, r3, #15
 8003948:	b2da      	uxtb	r2, r3
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800394e:	883a      	ldrh	r2, [r7, #0]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	78ba      	ldrb	r2, [r7, #2]
 8003958:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	785b      	ldrb	r3, [r3, #1]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d004      	beq.n	800396c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	b29a      	uxth	r2, r3
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800396c:	78bb      	ldrb	r3, [r7, #2]
 800396e:	2b02      	cmp	r3, #2
 8003970:	d102      	bne.n	8003978 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2200      	movs	r2, #0
 8003976:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800397e:	2b01      	cmp	r3, #1
 8003980:	d101      	bne.n	8003986 <HAL_PCD_EP_Open+0xaa>
 8003982:	2302      	movs	r3, #2
 8003984:	e00e      	b.n	80039a4 <HAL_PCD_EP_Open+0xc8>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2201      	movs	r2, #1
 800398a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	68f9      	ldr	r1, [r7, #12]
 8003994:	4618      	mov	r0, r3
 8003996:	f003 fc4b 	bl	8007230 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 80039a2:	7afb      	ldrb	r3, [r7, #11]
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3710      	adds	r7, #16
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	460b      	mov	r3, r1
 80039b6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80039b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	da0f      	bge.n	80039e0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039c0:	78fb      	ldrb	r3, [r7, #3]
 80039c2:	f003 020f 	and.w	r2, r3, #15
 80039c6:	4613      	mov	r3, r2
 80039c8:	00db      	lsls	r3, r3, #3
 80039ca:	4413      	add	r3, r2
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	3310      	adds	r3, #16
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	4413      	add	r3, r2
 80039d4:	3304      	adds	r3, #4
 80039d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2201      	movs	r2, #1
 80039dc:	705a      	strb	r2, [r3, #1]
 80039de:	e00f      	b.n	8003a00 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039e0:	78fb      	ldrb	r3, [r7, #3]
 80039e2:	f003 020f 	and.w	r2, r3, #15
 80039e6:	4613      	mov	r3, r2
 80039e8:	00db      	lsls	r3, r3, #3
 80039ea:	4413      	add	r3, r2
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	4413      	add	r3, r2
 80039f6:	3304      	adds	r3, #4
 80039f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2200      	movs	r2, #0
 80039fe:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a00:	78fb      	ldrb	r3, [r7, #3]
 8003a02:	f003 030f 	and.w	r3, r3, #15
 8003a06:	b2da      	uxtb	r2, r3
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d101      	bne.n	8003a1a <HAL_PCD_EP_Close+0x6e>
 8003a16:	2302      	movs	r3, #2
 8003a18:	e00e      	b.n	8003a38 <HAL_PCD_EP_Close+0x8c>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68f9      	ldr	r1, [r7, #12]
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f003 fc89 	bl	8007340 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 8003a36:	2300      	movs	r3, #0
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3710      	adds	r7, #16
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b086      	sub	sp, #24
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	607a      	str	r2, [r7, #4]
 8003a4a:	603b      	str	r3, [r7, #0]
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a50:	7afb      	ldrb	r3, [r7, #11]
 8003a52:	f003 020f 	and.w	r2, r3, #15
 8003a56:	4613      	mov	r3, r2
 8003a58:	00db      	lsls	r3, r3, #3
 8003a5a:	4413      	add	r3, r2
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	4413      	add	r3, r2
 8003a66:	3304      	adds	r3, #4
 8003a68:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	683a      	ldr	r2, [r7, #0]
 8003a74:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a82:	7afb      	ldrb	r3, [r7, #11]
 8003a84:	f003 030f 	and.w	r3, r3, #15
 8003a88:	b2da      	uxtb	r2, r3
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	799b      	ldrb	r3, [r3, #6]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d102      	bne.n	8003a9c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6818      	ldr	r0, [r3, #0]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	799b      	ldrb	r3, [r3, #6]
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	6979      	ldr	r1, [r7, #20]
 8003aa8:	f003 fd26 	bl	80074f8 <USB_EPStartXfer>

  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3718      	adds	r7, #24
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}

08003ab6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003ab6:	b480      	push	{r7}
 8003ab8:	b083      	sub	sp, #12
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
 8003abe:	460b      	mov	r3, r1
 8003ac0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003ac2:	78fb      	ldrb	r3, [r7, #3]
 8003ac4:	f003 020f 	and.w	r2, r3, #15
 8003ac8:	6879      	ldr	r1, [r7, #4]
 8003aca:	4613      	mov	r3, r2
 8003acc:	00db      	lsls	r3, r3, #3
 8003ace:	4413      	add	r3, r2
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	440b      	add	r3, r1
 8003ad4:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8003ad8:	681b      	ldr	r3, [r3, #0]
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	370c      	adds	r7, #12
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr

08003ae6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003ae6:	b580      	push	{r7, lr}
 8003ae8:	b086      	sub	sp, #24
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	60f8      	str	r0, [r7, #12]
 8003aee:	607a      	str	r2, [r7, #4]
 8003af0:	603b      	str	r3, [r7, #0]
 8003af2:	460b      	mov	r3, r1
 8003af4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003af6:	7afb      	ldrb	r3, [r7, #11]
 8003af8:	f003 020f 	and.w	r2, r3, #15
 8003afc:	4613      	mov	r3, r2
 8003afe:	00db      	lsls	r3, r3, #3
 8003b00:	4413      	add	r3, r2
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	3310      	adds	r3, #16
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	4413      	add	r3, r2
 8003b0a:	3304      	adds	r3, #4
 8003b0c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	683a      	ldr	r2, [r7, #0]
 8003b18:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	2201      	movs	r2, #1
 8003b24:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b26:	7afb      	ldrb	r3, [r7, #11]
 8003b28:	f003 030f 	and.w	r3, r3, #15
 8003b2c:	b2da      	uxtb	r2, r3
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	799b      	ldrb	r3, [r3, #6]
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d102      	bne.n	8003b40 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6818      	ldr	r0, [r3, #0]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	799b      	ldrb	r3, [r3, #6]
 8003b48:	461a      	mov	r2, r3
 8003b4a:	6979      	ldr	r1, [r7, #20]
 8003b4c:	f003 fcd4 	bl	80074f8 <USB_EPStartXfer>

  return HAL_OK;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3718      	adds	r7, #24
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}

08003b5a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b5a:	b580      	push	{r7, lr}
 8003b5c:	b084      	sub	sp, #16
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
 8003b62:	460b      	mov	r3, r1
 8003b64:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003b66:	78fb      	ldrb	r3, [r7, #3]
 8003b68:	f003 030f 	and.w	r3, r3, #15
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	7912      	ldrb	r2, [r2, #4]
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d901      	bls.n	8003b78 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e04f      	b.n	8003c18 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003b78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	da0f      	bge.n	8003ba0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b80:	78fb      	ldrb	r3, [r7, #3]
 8003b82:	f003 020f 	and.w	r2, r3, #15
 8003b86:	4613      	mov	r3, r2
 8003b88:	00db      	lsls	r3, r3, #3
 8003b8a:	4413      	add	r3, r2
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	3310      	adds	r3, #16
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	4413      	add	r3, r2
 8003b94:	3304      	adds	r3, #4
 8003b96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	705a      	strb	r2, [r3, #1]
 8003b9e:	e00d      	b.n	8003bbc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003ba0:	78fa      	ldrb	r2, [r7, #3]
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	00db      	lsls	r3, r3, #3
 8003ba6:	4413      	add	r3, r2
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	3304      	adds	r3, #4
 8003bb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003bc2:	78fb      	ldrb	r3, [r7, #3]
 8003bc4:	f003 030f 	and.w	r3, r3, #15
 8003bc8:	b2da      	uxtb	r2, r3
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d101      	bne.n	8003bdc <HAL_PCD_EP_SetStall+0x82>
 8003bd8:	2302      	movs	r3, #2
 8003bda:	e01d      	b.n	8003c18 <HAL_PCD_EP_SetStall+0xbe>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	68f9      	ldr	r1, [r7, #12]
 8003bea:	4618      	mov	r0, r3
 8003bec:	f004 f85c 	bl	8007ca8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003bf0:	78fb      	ldrb	r3, [r7, #3]
 8003bf2:	f003 030f 	and.w	r3, r3, #15
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d109      	bne.n	8003c0e <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6818      	ldr	r0, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	7999      	ldrb	r1, [r3, #6]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003c08:	461a      	mov	r2, r3
 8003c0a:	f004 fa4d 	bl	80080a8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003c16:	2300      	movs	r3, #0
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3710      	adds	r7, #16
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	460b      	mov	r3, r1
 8003c2a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003c2c:	78fb      	ldrb	r3, [r7, #3]
 8003c2e:	f003 030f 	and.w	r3, r3, #15
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	7912      	ldrb	r2, [r2, #4]
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d901      	bls.n	8003c3e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e042      	b.n	8003cc4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	da0f      	bge.n	8003c66 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c46:	78fb      	ldrb	r3, [r7, #3]
 8003c48:	f003 020f 	and.w	r2, r3, #15
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	00db      	lsls	r3, r3, #3
 8003c50:	4413      	add	r3, r2
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	3310      	adds	r3, #16
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	4413      	add	r3, r2
 8003c5a:	3304      	adds	r3, #4
 8003c5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2201      	movs	r2, #1
 8003c62:	705a      	strb	r2, [r3, #1]
 8003c64:	e00f      	b.n	8003c86 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c66:	78fb      	ldrb	r3, [r7, #3]
 8003c68:	f003 020f 	and.w	r2, r3, #15
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	00db      	lsls	r3, r3, #3
 8003c70:	4413      	add	r3, r2
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	4413      	add	r3, r2
 8003c7c:	3304      	adds	r3, #4
 8003c7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c8c:	78fb      	ldrb	r3, [r7, #3]
 8003c8e:	f003 030f 	and.w	r3, r3, #15
 8003c92:	b2da      	uxtb	r2, r3
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d101      	bne.n	8003ca6 <HAL_PCD_EP_ClrStall+0x86>
 8003ca2:	2302      	movs	r3, #2
 8003ca4:	e00e      	b.n	8003cc4 <HAL_PCD_EP_ClrStall+0xa4>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	68f9      	ldr	r1, [r7, #12]
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f004 f865 	bl	8007d84 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003cc2:	2300      	movs	r3, #0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3710      	adds	r7, #16
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003cd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	da0c      	bge.n	8003cfa <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ce0:	78fb      	ldrb	r3, [r7, #3]
 8003ce2:	f003 020f 	and.w	r2, r3, #15
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	00db      	lsls	r3, r3, #3
 8003cea:	4413      	add	r3, r2
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	3310      	adds	r3, #16
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	4413      	add	r3, r2
 8003cf4:	3304      	adds	r3, #4
 8003cf6:	60fb      	str	r3, [r7, #12]
 8003cf8:	e00c      	b.n	8003d14 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003cfa:	78fb      	ldrb	r3, [r7, #3]
 8003cfc:	f003 020f 	and.w	r2, r3, #15
 8003d00:	4613      	mov	r3, r2
 8003d02:	00db      	lsls	r3, r3, #3
 8003d04:	4413      	add	r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	4413      	add	r3, r2
 8003d10:	3304      	adds	r3, #4
 8003d12:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68f9      	ldr	r1, [r7, #12]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f003 fe84 	bl	8007a28 <USB_EPStopXfer>
 8003d20:	4603      	mov	r3, r0
 8003d22:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003d24:	7afb      	ldrb	r3, [r7, #11]
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3710      	adds	r7, #16
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}

08003d2e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003d2e:	b580      	push	{r7, lr}
 8003d30:	b08a      	sub	sp, #40	; 0x28
 8003d32:	af02      	add	r7, sp, #8
 8003d34:	6078      	str	r0, [r7, #4]
 8003d36:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003d42:	683a      	ldr	r2, [r7, #0]
 8003d44:	4613      	mov	r3, r2
 8003d46:	00db      	lsls	r3, r3, #3
 8003d48:	4413      	add	r3, r2
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	3310      	adds	r3, #16
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	4413      	add	r3, r2
 8003d52:	3304      	adds	r3, #4
 8003d54:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	695a      	ldr	r2, [r3, #20]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	691b      	ldr	r3, [r3, #16]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d901      	bls.n	8003d66 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e06b      	b.n	8003e3e <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	691a      	ldr	r2, [r3, #16]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	695b      	ldr	r3, [r3, #20]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	69fa      	ldr	r2, [r7, #28]
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d902      	bls.n	8003d82 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	3303      	adds	r3, #3
 8003d86:	089b      	lsrs	r3, r3, #2
 8003d88:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003d8a:	e02a      	b.n	8003de2 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	691a      	ldr	r2, [r3, #16]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	695b      	ldr	r3, [r3, #20]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	69fa      	ldr	r2, [r7, #28]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d902      	bls.n	8003da8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	3303      	adds	r3, #3
 8003dac:	089b      	lsrs	r3, r3, #2
 8003dae:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	68d9      	ldr	r1, [r3, #12]
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	b2da      	uxtb	r2, r3
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003dc0:	9300      	str	r3, [sp, #0]
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	6978      	ldr	r0, [r7, #20]
 8003dc6:	f003 fed9 	bl	8007b7c <USB_WritePacket>

    ep->xfer_buff  += len;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	68da      	ldr	r2, [r3, #12]
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	441a      	add	r2, r3
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	695a      	ldr	r2, [r3, #20]
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	441a      	add	r2, r3
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	015a      	lsls	r2, r3, #5
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	4413      	add	r3, r2
 8003dea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dee:	699b      	ldr	r3, [r3, #24]
 8003df0:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003df2:	69ba      	ldr	r2, [r7, #24]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d809      	bhi.n	8003e0c <PCD_WriteEmptyTxFifo+0xde>
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	695a      	ldr	r2, [r3, #20]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d203      	bcs.n	8003e0c <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	691b      	ldr	r3, [r3, #16]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d1bf      	bne.n	8003d8c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	691a      	ldr	r2, [r3, #16]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	695b      	ldr	r3, [r3, #20]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d811      	bhi.n	8003e3c <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	f003 030f 	and.w	r3, r3, #15
 8003e1e:	2201      	movs	r2, #1
 8003e20:	fa02 f303 	lsl.w	r3, r2, r3
 8003e24:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	43db      	mvns	r3, r3
 8003e32:	6939      	ldr	r1, [r7, #16]
 8003e34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e38:	4013      	ands	r3, r2
 8003e3a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3720      	adds	r7, #32
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
	...

08003e48 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b088      	sub	sp, #32
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	333c      	adds	r3, #60	; 0x3c
 8003e60:	3304      	adds	r3, #4
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	015a      	lsls	r2, r3, #5
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	4413      	add	r3, r2
 8003e6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	799b      	ldrb	r3, [r3, #6]
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d17b      	bne.n	8003f76 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	f003 0308 	and.w	r3, r3, #8
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d015      	beq.n	8003eb4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	4a61      	ldr	r2, [pc, #388]	; (8004010 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	f240 80b9 	bls.w	8004004 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	f000 80b3 	beq.w	8004004 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	015a      	lsls	r2, r3, #5
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	4413      	add	r3, r2
 8003ea6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eaa:	461a      	mov	r2, r3
 8003eac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003eb0:	6093      	str	r3, [r2, #8]
 8003eb2:	e0a7      	b.n	8004004 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	f003 0320 	and.w	r3, r3, #32
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d009      	beq.n	8003ed2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	015a      	lsls	r2, r3, #5
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eca:	461a      	mov	r2, r3
 8003ecc:	2320      	movs	r3, #32
 8003ece:	6093      	str	r3, [r2, #8]
 8003ed0:	e098      	b.n	8004004 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	f040 8093 	bne.w	8004004 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	4a4b      	ldr	r2, [pc, #300]	; (8004010 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d90f      	bls.n	8003f06 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d00a      	beq.n	8003f06 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	015a      	lsls	r2, r3, #5
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	4413      	add	r3, r2
 8003ef8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003efc:	461a      	mov	r2, r3
 8003efe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f02:	6093      	str	r3, [r2, #8]
 8003f04:	e07e      	b.n	8004004 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003f06:	683a      	ldr	r2, [r7, #0]
 8003f08:	4613      	mov	r3, r2
 8003f0a:	00db      	lsls	r3, r3, #3
 8003f0c:	4413      	add	r3, r2
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	4413      	add	r3, r2
 8003f18:	3304      	adds	r3, #4
 8003f1a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6a1a      	ldr	r2, [r3, #32]
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	0159      	lsls	r1, r3, #5
 8003f24:	69bb      	ldr	r3, [r7, #24]
 8003f26:	440b      	add	r3, r1
 8003f28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f32:	1ad2      	subs	r2, r2, r3
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d114      	bne.n	8003f68 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d109      	bne.n	8003f5a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6818      	ldr	r0, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003f50:	461a      	mov	r2, r3
 8003f52:	2101      	movs	r1, #1
 8003f54:	f004 f8a8 	bl	80080a8 <USB_EP0_OutStart>
 8003f58:	e006      	b.n	8003f68 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	68da      	ldr	r2, [r3, #12]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	695b      	ldr	r3, [r3, #20]
 8003f62:	441a      	add	r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f008 f8cc 	bl	800c10c <HAL_PCD_DataOutStageCallback>
 8003f74:	e046      	b.n	8004004 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	4a26      	ldr	r2, [pc, #152]	; (8004014 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d124      	bne.n	8003fc8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d00a      	beq.n	8003f9e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	015a      	lsls	r2, r3, #5
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	4413      	add	r3, r2
 8003f90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f94:	461a      	mov	r2, r3
 8003f96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f9a:	6093      	str	r3, [r2, #8]
 8003f9c:	e032      	b.n	8004004 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	f003 0320 	and.w	r3, r3, #32
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d008      	beq.n	8003fba <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	015a      	lsls	r2, r3, #5
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	4413      	add	r3, r2
 8003fb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	2320      	movs	r3, #32
 8003fb8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f008 f8a3 	bl	800c10c <HAL_PCD_DataOutStageCallback>
 8003fc6:	e01d      	b.n	8004004 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d114      	bne.n	8003ff8 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003fce:	6879      	ldr	r1, [r7, #4]
 8003fd0:	683a      	ldr	r2, [r7, #0]
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	00db      	lsls	r3, r3, #3
 8003fd6:	4413      	add	r3, r2
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	440b      	add	r3, r1
 8003fdc:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d108      	bne.n	8003ff8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6818      	ldr	r0, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	2100      	movs	r1, #0
 8003ff4:	f004 f858 	bl	80080a8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f008 f884 	bl	800c10c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3720      	adds	r7, #32
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	4f54300a 	.word	0x4f54300a
 8004014:	4f54310a 	.word	0x4f54310a

08004018 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b086      	sub	sp, #24
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	333c      	adds	r3, #60	; 0x3c
 8004030:	3304      	adds	r3, #4
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	015a      	lsls	r2, r3, #5
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	4413      	add	r3, r2
 800403e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	4a15      	ldr	r2, [pc, #84]	; (80040a0 <PCD_EP_OutSetupPacket_int+0x88>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d90e      	bls.n	800406c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004054:	2b00      	cmp	r3, #0
 8004056:	d009      	beq.n	800406c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	015a      	lsls	r2, r3, #5
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	4413      	add	r3, r2
 8004060:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004064:	461a      	mov	r2, r3
 8004066:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800406a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f008 f83b 	bl	800c0e8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	4a0a      	ldr	r2, [pc, #40]	; (80040a0 <PCD_EP_OutSetupPacket_int+0x88>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d90c      	bls.n	8004094 <PCD_EP_OutSetupPacket_int+0x7c>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	799b      	ldrb	r3, [r3, #6]
 800407e:	2b01      	cmp	r3, #1
 8004080:	d108      	bne.n	8004094 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6818      	ldr	r0, [r3, #0]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800408c:	461a      	mov	r2, r3
 800408e:	2101      	movs	r1, #1
 8004090:	f004 f80a 	bl	80080a8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	3718      	adds	r7, #24
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	4f54300a 	.word	0x4f54300a

080040a4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b085      	sub	sp, #20
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	460b      	mov	r3, r1
 80040ae:	70fb      	strb	r3, [r7, #3]
 80040b0:	4613      	mov	r3, r2
 80040b2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ba:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80040bc:	78fb      	ldrb	r3, [r7, #3]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d107      	bne.n	80040d2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80040c2:	883b      	ldrh	r3, [r7, #0]
 80040c4:	0419      	lsls	r1, r3, #16
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68ba      	ldr	r2, [r7, #8]
 80040cc:	430a      	orrs	r2, r1
 80040ce:	629a      	str	r2, [r3, #40]	; 0x28
 80040d0:	e028      	b.n	8004124 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d8:	0c1b      	lsrs	r3, r3, #16
 80040da:	68ba      	ldr	r2, [r7, #8]
 80040dc:	4413      	add	r3, r2
 80040de:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80040e0:	2300      	movs	r3, #0
 80040e2:	73fb      	strb	r3, [r7, #15]
 80040e4:	e00d      	b.n	8004102 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	7bfb      	ldrb	r3, [r7, #15]
 80040ec:	3340      	adds	r3, #64	; 0x40
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	4413      	add	r3, r2
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	0c1b      	lsrs	r3, r3, #16
 80040f6:	68ba      	ldr	r2, [r7, #8]
 80040f8:	4413      	add	r3, r2
 80040fa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80040fc:	7bfb      	ldrb	r3, [r7, #15]
 80040fe:	3301      	adds	r3, #1
 8004100:	73fb      	strb	r3, [r7, #15]
 8004102:	7bfa      	ldrb	r2, [r7, #15]
 8004104:	78fb      	ldrb	r3, [r7, #3]
 8004106:	3b01      	subs	r3, #1
 8004108:	429a      	cmp	r2, r3
 800410a:	d3ec      	bcc.n	80040e6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800410c:	883b      	ldrh	r3, [r7, #0]
 800410e:	0418      	lsls	r0, r3, #16
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6819      	ldr	r1, [r3, #0]
 8004114:	78fb      	ldrb	r3, [r7, #3]
 8004116:	3b01      	subs	r3, #1
 8004118:	68ba      	ldr	r2, [r7, #8]
 800411a:	4302      	orrs	r2, r0
 800411c:	3340      	adds	r3, #64	; 0x40
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	440b      	add	r3, r1
 8004122:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	3714      	adds	r7, #20
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr

08004132 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004132:	b480      	push	{r7}
 8004134:	b083      	sub	sp, #12
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
 800413a:	460b      	mov	r3, r1
 800413c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	887a      	ldrh	r2, [r7, #2]
 8004144:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004146:	2300      	movs	r3, #0
}
 8004148:	4618      	mov	r0, r3
 800414a:	370c      	adds	r7, #12
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	460b      	mov	r3, r1
 800415e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004160:	bf00      	nop
 8004162:	370c      	adds	r7, #12
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b086      	sub	sp, #24
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d101      	bne.n	800417e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e267      	b.n	800464e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0301 	and.w	r3, r3, #1
 8004186:	2b00      	cmp	r3, #0
 8004188:	d075      	beq.n	8004276 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800418a:	4b88      	ldr	r3, [pc, #544]	; (80043ac <HAL_RCC_OscConfig+0x240>)
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	f003 030c 	and.w	r3, r3, #12
 8004192:	2b04      	cmp	r3, #4
 8004194:	d00c      	beq.n	80041b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004196:	4b85      	ldr	r3, [pc, #532]	; (80043ac <HAL_RCC_OscConfig+0x240>)
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800419e:	2b08      	cmp	r3, #8
 80041a0:	d112      	bne.n	80041c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041a2:	4b82      	ldr	r3, [pc, #520]	; (80043ac <HAL_RCC_OscConfig+0x240>)
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041ae:	d10b      	bne.n	80041c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041b0:	4b7e      	ldr	r3, [pc, #504]	; (80043ac <HAL_RCC_OscConfig+0x240>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d05b      	beq.n	8004274 <HAL_RCC_OscConfig+0x108>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d157      	bne.n	8004274 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e242      	b.n	800464e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041d0:	d106      	bne.n	80041e0 <HAL_RCC_OscConfig+0x74>
 80041d2:	4b76      	ldr	r3, [pc, #472]	; (80043ac <HAL_RCC_OscConfig+0x240>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a75      	ldr	r2, [pc, #468]	; (80043ac <HAL_RCC_OscConfig+0x240>)
 80041d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041dc:	6013      	str	r3, [r2, #0]
 80041de:	e01d      	b.n	800421c <HAL_RCC_OscConfig+0xb0>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041e8:	d10c      	bne.n	8004204 <HAL_RCC_OscConfig+0x98>
 80041ea:	4b70      	ldr	r3, [pc, #448]	; (80043ac <HAL_RCC_OscConfig+0x240>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a6f      	ldr	r2, [pc, #444]	; (80043ac <HAL_RCC_OscConfig+0x240>)
 80041f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041f4:	6013      	str	r3, [r2, #0]
 80041f6:	4b6d      	ldr	r3, [pc, #436]	; (80043ac <HAL_RCC_OscConfig+0x240>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a6c      	ldr	r2, [pc, #432]	; (80043ac <HAL_RCC_OscConfig+0x240>)
 80041fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004200:	6013      	str	r3, [r2, #0]
 8004202:	e00b      	b.n	800421c <HAL_RCC_OscConfig+0xb0>
 8004204:	4b69      	ldr	r3, [pc, #420]	; (80043ac <HAL_RCC_OscConfig+0x240>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a68      	ldr	r2, [pc, #416]	; (80043ac <HAL_RCC_OscConfig+0x240>)
 800420a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800420e:	6013      	str	r3, [r2, #0]
 8004210:	4b66      	ldr	r3, [pc, #408]	; (80043ac <HAL_RCC_OscConfig+0x240>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a65      	ldr	r2, [pc, #404]	; (80043ac <HAL_RCC_OscConfig+0x240>)
 8004216:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800421a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d013      	beq.n	800424c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004224:	f7fd fb2a 	bl	800187c <HAL_GetTick>
 8004228:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800422a:	e008      	b.n	800423e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800422c:	f7fd fb26 	bl	800187c <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	2b64      	cmp	r3, #100	; 0x64
 8004238:	d901      	bls.n	800423e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e207      	b.n	800464e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800423e:	4b5b      	ldr	r3, [pc, #364]	; (80043ac <HAL_RCC_OscConfig+0x240>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d0f0      	beq.n	800422c <HAL_RCC_OscConfig+0xc0>
 800424a:	e014      	b.n	8004276 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800424c:	f7fd fb16 	bl	800187c <HAL_GetTick>
 8004250:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004252:	e008      	b.n	8004266 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004254:	f7fd fb12 	bl	800187c <HAL_GetTick>
 8004258:	4602      	mov	r2, r0
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	2b64      	cmp	r3, #100	; 0x64
 8004260:	d901      	bls.n	8004266 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e1f3      	b.n	800464e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004266:	4b51      	ldr	r3, [pc, #324]	; (80043ac <HAL_RCC_OscConfig+0x240>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d1f0      	bne.n	8004254 <HAL_RCC_OscConfig+0xe8>
 8004272:	e000      	b.n	8004276 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004274:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0302 	and.w	r3, r3, #2
 800427e:	2b00      	cmp	r3, #0
 8004280:	d063      	beq.n	800434a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004282:	4b4a      	ldr	r3, [pc, #296]	; (80043ac <HAL_RCC_OscConfig+0x240>)
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	f003 030c 	and.w	r3, r3, #12
 800428a:	2b00      	cmp	r3, #0
 800428c:	d00b      	beq.n	80042a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800428e:	4b47      	ldr	r3, [pc, #284]	; (80043ac <HAL_RCC_OscConfig+0x240>)
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004296:	2b08      	cmp	r3, #8
 8004298:	d11c      	bne.n	80042d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800429a:	4b44      	ldr	r3, [pc, #272]	; (80043ac <HAL_RCC_OscConfig+0x240>)
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d116      	bne.n	80042d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042a6:	4b41      	ldr	r3, [pc, #260]	; (80043ac <HAL_RCC_OscConfig+0x240>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0302 	and.w	r3, r3, #2
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d005      	beq.n	80042be <HAL_RCC_OscConfig+0x152>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d001      	beq.n	80042be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e1c7      	b.n	800464e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042be:	4b3b      	ldr	r3, [pc, #236]	; (80043ac <HAL_RCC_OscConfig+0x240>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	00db      	lsls	r3, r3, #3
 80042cc:	4937      	ldr	r1, [pc, #220]	; (80043ac <HAL_RCC_OscConfig+0x240>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042d2:	e03a      	b.n	800434a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d020      	beq.n	800431e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042dc:	4b34      	ldr	r3, [pc, #208]	; (80043b0 <HAL_RCC_OscConfig+0x244>)
 80042de:	2201      	movs	r2, #1
 80042e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042e2:	f7fd facb 	bl	800187c <HAL_GetTick>
 80042e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042e8:	e008      	b.n	80042fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042ea:	f7fd fac7 	bl	800187c <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	d901      	bls.n	80042fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e1a8      	b.n	800464e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042fc:	4b2b      	ldr	r3, [pc, #172]	; (80043ac <HAL_RCC_OscConfig+0x240>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0302 	and.w	r3, r3, #2
 8004304:	2b00      	cmp	r3, #0
 8004306:	d0f0      	beq.n	80042ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004308:	4b28      	ldr	r3, [pc, #160]	; (80043ac <HAL_RCC_OscConfig+0x240>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	00db      	lsls	r3, r3, #3
 8004316:	4925      	ldr	r1, [pc, #148]	; (80043ac <HAL_RCC_OscConfig+0x240>)
 8004318:	4313      	orrs	r3, r2
 800431a:	600b      	str	r3, [r1, #0]
 800431c:	e015      	b.n	800434a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800431e:	4b24      	ldr	r3, [pc, #144]	; (80043b0 <HAL_RCC_OscConfig+0x244>)
 8004320:	2200      	movs	r2, #0
 8004322:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004324:	f7fd faaa 	bl	800187c <HAL_GetTick>
 8004328:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800432a:	e008      	b.n	800433e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800432c:	f7fd faa6 	bl	800187c <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	2b02      	cmp	r3, #2
 8004338:	d901      	bls.n	800433e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e187      	b.n	800464e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800433e:	4b1b      	ldr	r3, [pc, #108]	; (80043ac <HAL_RCC_OscConfig+0x240>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0302 	and.w	r3, r3, #2
 8004346:	2b00      	cmp	r3, #0
 8004348:	d1f0      	bne.n	800432c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0308 	and.w	r3, r3, #8
 8004352:	2b00      	cmp	r3, #0
 8004354:	d036      	beq.n	80043c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	695b      	ldr	r3, [r3, #20]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d016      	beq.n	800438c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800435e:	4b15      	ldr	r3, [pc, #84]	; (80043b4 <HAL_RCC_OscConfig+0x248>)
 8004360:	2201      	movs	r2, #1
 8004362:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004364:	f7fd fa8a 	bl	800187c <HAL_GetTick>
 8004368:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800436a:	e008      	b.n	800437e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800436c:	f7fd fa86 	bl	800187c <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	2b02      	cmp	r3, #2
 8004378:	d901      	bls.n	800437e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e167      	b.n	800464e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800437e:	4b0b      	ldr	r3, [pc, #44]	; (80043ac <HAL_RCC_OscConfig+0x240>)
 8004380:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004382:	f003 0302 	and.w	r3, r3, #2
 8004386:	2b00      	cmp	r3, #0
 8004388:	d0f0      	beq.n	800436c <HAL_RCC_OscConfig+0x200>
 800438a:	e01b      	b.n	80043c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800438c:	4b09      	ldr	r3, [pc, #36]	; (80043b4 <HAL_RCC_OscConfig+0x248>)
 800438e:	2200      	movs	r2, #0
 8004390:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004392:	f7fd fa73 	bl	800187c <HAL_GetTick>
 8004396:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004398:	e00e      	b.n	80043b8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800439a:	f7fd fa6f 	bl	800187c <HAL_GetTick>
 800439e:	4602      	mov	r2, r0
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d907      	bls.n	80043b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	e150      	b.n	800464e <HAL_RCC_OscConfig+0x4e2>
 80043ac:	40023800 	.word	0x40023800
 80043b0:	42470000 	.word	0x42470000
 80043b4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043b8:	4b88      	ldr	r3, [pc, #544]	; (80045dc <HAL_RCC_OscConfig+0x470>)
 80043ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043bc:	f003 0302 	and.w	r3, r3, #2
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d1ea      	bne.n	800439a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0304 	and.w	r3, r3, #4
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	f000 8097 	beq.w	8004500 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043d2:	2300      	movs	r3, #0
 80043d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043d6:	4b81      	ldr	r3, [pc, #516]	; (80045dc <HAL_RCC_OscConfig+0x470>)
 80043d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d10f      	bne.n	8004402 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043e2:	2300      	movs	r3, #0
 80043e4:	60bb      	str	r3, [r7, #8]
 80043e6:	4b7d      	ldr	r3, [pc, #500]	; (80045dc <HAL_RCC_OscConfig+0x470>)
 80043e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ea:	4a7c      	ldr	r2, [pc, #496]	; (80045dc <HAL_RCC_OscConfig+0x470>)
 80043ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043f0:	6413      	str	r3, [r2, #64]	; 0x40
 80043f2:	4b7a      	ldr	r3, [pc, #488]	; (80045dc <HAL_RCC_OscConfig+0x470>)
 80043f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043fa:	60bb      	str	r3, [r7, #8]
 80043fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043fe:	2301      	movs	r3, #1
 8004400:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004402:	4b77      	ldr	r3, [pc, #476]	; (80045e0 <HAL_RCC_OscConfig+0x474>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800440a:	2b00      	cmp	r3, #0
 800440c:	d118      	bne.n	8004440 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800440e:	4b74      	ldr	r3, [pc, #464]	; (80045e0 <HAL_RCC_OscConfig+0x474>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a73      	ldr	r2, [pc, #460]	; (80045e0 <HAL_RCC_OscConfig+0x474>)
 8004414:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004418:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800441a:	f7fd fa2f 	bl	800187c <HAL_GetTick>
 800441e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004420:	e008      	b.n	8004434 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004422:	f7fd fa2b 	bl	800187c <HAL_GetTick>
 8004426:	4602      	mov	r2, r0
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	2b02      	cmp	r3, #2
 800442e:	d901      	bls.n	8004434 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004430:	2303      	movs	r3, #3
 8004432:	e10c      	b.n	800464e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004434:	4b6a      	ldr	r3, [pc, #424]	; (80045e0 <HAL_RCC_OscConfig+0x474>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800443c:	2b00      	cmp	r3, #0
 800443e:	d0f0      	beq.n	8004422 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	2b01      	cmp	r3, #1
 8004446:	d106      	bne.n	8004456 <HAL_RCC_OscConfig+0x2ea>
 8004448:	4b64      	ldr	r3, [pc, #400]	; (80045dc <HAL_RCC_OscConfig+0x470>)
 800444a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800444c:	4a63      	ldr	r2, [pc, #396]	; (80045dc <HAL_RCC_OscConfig+0x470>)
 800444e:	f043 0301 	orr.w	r3, r3, #1
 8004452:	6713      	str	r3, [r2, #112]	; 0x70
 8004454:	e01c      	b.n	8004490 <HAL_RCC_OscConfig+0x324>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	2b05      	cmp	r3, #5
 800445c:	d10c      	bne.n	8004478 <HAL_RCC_OscConfig+0x30c>
 800445e:	4b5f      	ldr	r3, [pc, #380]	; (80045dc <HAL_RCC_OscConfig+0x470>)
 8004460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004462:	4a5e      	ldr	r2, [pc, #376]	; (80045dc <HAL_RCC_OscConfig+0x470>)
 8004464:	f043 0304 	orr.w	r3, r3, #4
 8004468:	6713      	str	r3, [r2, #112]	; 0x70
 800446a:	4b5c      	ldr	r3, [pc, #368]	; (80045dc <HAL_RCC_OscConfig+0x470>)
 800446c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800446e:	4a5b      	ldr	r2, [pc, #364]	; (80045dc <HAL_RCC_OscConfig+0x470>)
 8004470:	f043 0301 	orr.w	r3, r3, #1
 8004474:	6713      	str	r3, [r2, #112]	; 0x70
 8004476:	e00b      	b.n	8004490 <HAL_RCC_OscConfig+0x324>
 8004478:	4b58      	ldr	r3, [pc, #352]	; (80045dc <HAL_RCC_OscConfig+0x470>)
 800447a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800447c:	4a57      	ldr	r2, [pc, #348]	; (80045dc <HAL_RCC_OscConfig+0x470>)
 800447e:	f023 0301 	bic.w	r3, r3, #1
 8004482:	6713      	str	r3, [r2, #112]	; 0x70
 8004484:	4b55      	ldr	r3, [pc, #340]	; (80045dc <HAL_RCC_OscConfig+0x470>)
 8004486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004488:	4a54      	ldr	r2, [pc, #336]	; (80045dc <HAL_RCC_OscConfig+0x470>)
 800448a:	f023 0304 	bic.w	r3, r3, #4
 800448e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d015      	beq.n	80044c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004498:	f7fd f9f0 	bl	800187c <HAL_GetTick>
 800449c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800449e:	e00a      	b.n	80044b6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044a0:	f7fd f9ec 	bl	800187c <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d901      	bls.n	80044b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e0cb      	b.n	800464e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044b6:	4b49      	ldr	r3, [pc, #292]	; (80045dc <HAL_RCC_OscConfig+0x470>)
 80044b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ba:	f003 0302 	and.w	r3, r3, #2
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d0ee      	beq.n	80044a0 <HAL_RCC_OscConfig+0x334>
 80044c2:	e014      	b.n	80044ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044c4:	f7fd f9da 	bl	800187c <HAL_GetTick>
 80044c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044ca:	e00a      	b.n	80044e2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044cc:	f7fd f9d6 	bl	800187c <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80044da:	4293      	cmp	r3, r2
 80044dc:	d901      	bls.n	80044e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e0b5      	b.n	800464e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044e2:	4b3e      	ldr	r3, [pc, #248]	; (80045dc <HAL_RCC_OscConfig+0x470>)
 80044e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e6:	f003 0302 	and.w	r3, r3, #2
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d1ee      	bne.n	80044cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044ee:	7dfb      	ldrb	r3, [r7, #23]
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d105      	bne.n	8004500 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044f4:	4b39      	ldr	r3, [pc, #228]	; (80045dc <HAL_RCC_OscConfig+0x470>)
 80044f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f8:	4a38      	ldr	r2, [pc, #224]	; (80045dc <HAL_RCC_OscConfig+0x470>)
 80044fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044fe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	699b      	ldr	r3, [r3, #24]
 8004504:	2b00      	cmp	r3, #0
 8004506:	f000 80a1 	beq.w	800464c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800450a:	4b34      	ldr	r3, [pc, #208]	; (80045dc <HAL_RCC_OscConfig+0x470>)
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	f003 030c 	and.w	r3, r3, #12
 8004512:	2b08      	cmp	r3, #8
 8004514:	d05c      	beq.n	80045d0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	2b02      	cmp	r3, #2
 800451c:	d141      	bne.n	80045a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800451e:	4b31      	ldr	r3, [pc, #196]	; (80045e4 <HAL_RCC_OscConfig+0x478>)
 8004520:	2200      	movs	r2, #0
 8004522:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004524:	f7fd f9aa 	bl	800187c <HAL_GetTick>
 8004528:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800452a:	e008      	b.n	800453e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800452c:	f7fd f9a6 	bl	800187c <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	2b02      	cmp	r3, #2
 8004538:	d901      	bls.n	800453e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e087      	b.n	800464e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800453e:	4b27      	ldr	r3, [pc, #156]	; (80045dc <HAL_RCC_OscConfig+0x470>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d1f0      	bne.n	800452c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	69da      	ldr	r2, [r3, #28]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a1b      	ldr	r3, [r3, #32]
 8004552:	431a      	orrs	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004558:	019b      	lsls	r3, r3, #6
 800455a:	431a      	orrs	r2, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004560:	085b      	lsrs	r3, r3, #1
 8004562:	3b01      	subs	r3, #1
 8004564:	041b      	lsls	r3, r3, #16
 8004566:	431a      	orrs	r2, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800456c:	061b      	lsls	r3, r3, #24
 800456e:	491b      	ldr	r1, [pc, #108]	; (80045dc <HAL_RCC_OscConfig+0x470>)
 8004570:	4313      	orrs	r3, r2
 8004572:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004574:	4b1b      	ldr	r3, [pc, #108]	; (80045e4 <HAL_RCC_OscConfig+0x478>)
 8004576:	2201      	movs	r2, #1
 8004578:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800457a:	f7fd f97f 	bl	800187c <HAL_GetTick>
 800457e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004580:	e008      	b.n	8004594 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004582:	f7fd f97b 	bl	800187c <HAL_GetTick>
 8004586:	4602      	mov	r2, r0
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	2b02      	cmp	r3, #2
 800458e:	d901      	bls.n	8004594 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e05c      	b.n	800464e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004594:	4b11      	ldr	r3, [pc, #68]	; (80045dc <HAL_RCC_OscConfig+0x470>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800459c:	2b00      	cmp	r3, #0
 800459e:	d0f0      	beq.n	8004582 <HAL_RCC_OscConfig+0x416>
 80045a0:	e054      	b.n	800464c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045a2:	4b10      	ldr	r3, [pc, #64]	; (80045e4 <HAL_RCC_OscConfig+0x478>)
 80045a4:	2200      	movs	r2, #0
 80045a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045a8:	f7fd f968 	bl	800187c <HAL_GetTick>
 80045ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ae:	e008      	b.n	80045c2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045b0:	f7fd f964 	bl	800187c <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d901      	bls.n	80045c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e045      	b.n	800464e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045c2:	4b06      	ldr	r3, [pc, #24]	; (80045dc <HAL_RCC_OscConfig+0x470>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d1f0      	bne.n	80045b0 <HAL_RCC_OscConfig+0x444>
 80045ce:	e03d      	b.n	800464c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	699b      	ldr	r3, [r3, #24]
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d107      	bne.n	80045e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e038      	b.n	800464e <HAL_RCC_OscConfig+0x4e2>
 80045dc:	40023800 	.word	0x40023800
 80045e0:	40007000 	.word	0x40007000
 80045e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80045e8:	4b1b      	ldr	r3, [pc, #108]	; (8004658 <HAL_RCC_OscConfig+0x4ec>)
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d028      	beq.n	8004648 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004600:	429a      	cmp	r2, r3
 8004602:	d121      	bne.n	8004648 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800460e:	429a      	cmp	r2, r3
 8004610:	d11a      	bne.n	8004648 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004612:	68fa      	ldr	r2, [r7, #12]
 8004614:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004618:	4013      	ands	r3, r2
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800461e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004620:	4293      	cmp	r3, r2
 8004622:	d111      	bne.n	8004648 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800462e:	085b      	lsrs	r3, r3, #1
 8004630:	3b01      	subs	r3, #1
 8004632:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004634:	429a      	cmp	r2, r3
 8004636:	d107      	bne.n	8004648 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004642:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004644:	429a      	cmp	r2, r3
 8004646:	d001      	beq.n	800464c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e000      	b.n	800464e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800464c:	2300      	movs	r3, #0
}
 800464e:	4618      	mov	r0, r3
 8004650:	3718      	adds	r7, #24
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	40023800 	.word	0x40023800

0800465c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d101      	bne.n	8004670 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e0cc      	b.n	800480a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004670:	4b68      	ldr	r3, [pc, #416]	; (8004814 <HAL_RCC_ClockConfig+0x1b8>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 030f 	and.w	r3, r3, #15
 8004678:	683a      	ldr	r2, [r7, #0]
 800467a:	429a      	cmp	r2, r3
 800467c:	d90c      	bls.n	8004698 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800467e:	4b65      	ldr	r3, [pc, #404]	; (8004814 <HAL_RCC_ClockConfig+0x1b8>)
 8004680:	683a      	ldr	r2, [r7, #0]
 8004682:	b2d2      	uxtb	r2, r2
 8004684:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004686:	4b63      	ldr	r3, [pc, #396]	; (8004814 <HAL_RCC_ClockConfig+0x1b8>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 030f 	and.w	r3, r3, #15
 800468e:	683a      	ldr	r2, [r7, #0]
 8004690:	429a      	cmp	r2, r3
 8004692:	d001      	beq.n	8004698 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e0b8      	b.n	800480a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 0302 	and.w	r3, r3, #2
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d020      	beq.n	80046e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0304 	and.w	r3, r3, #4
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d005      	beq.n	80046bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046b0:	4b59      	ldr	r3, [pc, #356]	; (8004818 <HAL_RCC_ClockConfig+0x1bc>)
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	4a58      	ldr	r2, [pc, #352]	; (8004818 <HAL_RCC_ClockConfig+0x1bc>)
 80046b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80046ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 0308 	and.w	r3, r3, #8
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d005      	beq.n	80046d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046c8:	4b53      	ldr	r3, [pc, #332]	; (8004818 <HAL_RCC_ClockConfig+0x1bc>)
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	4a52      	ldr	r2, [pc, #328]	; (8004818 <HAL_RCC_ClockConfig+0x1bc>)
 80046ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80046d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046d4:	4b50      	ldr	r3, [pc, #320]	; (8004818 <HAL_RCC_ClockConfig+0x1bc>)
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	494d      	ldr	r1, [pc, #308]	; (8004818 <HAL_RCC_ClockConfig+0x1bc>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0301 	and.w	r3, r3, #1
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d044      	beq.n	800477c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d107      	bne.n	800470a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046fa:	4b47      	ldr	r3, [pc, #284]	; (8004818 <HAL_RCC_ClockConfig+0x1bc>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d119      	bne.n	800473a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e07f      	b.n	800480a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	2b02      	cmp	r3, #2
 8004710:	d003      	beq.n	800471a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004716:	2b03      	cmp	r3, #3
 8004718:	d107      	bne.n	800472a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800471a:	4b3f      	ldr	r3, [pc, #252]	; (8004818 <HAL_RCC_ClockConfig+0x1bc>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d109      	bne.n	800473a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e06f      	b.n	800480a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800472a:	4b3b      	ldr	r3, [pc, #236]	; (8004818 <HAL_RCC_ClockConfig+0x1bc>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0302 	and.w	r3, r3, #2
 8004732:	2b00      	cmp	r3, #0
 8004734:	d101      	bne.n	800473a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e067      	b.n	800480a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800473a:	4b37      	ldr	r3, [pc, #220]	; (8004818 <HAL_RCC_ClockConfig+0x1bc>)
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f023 0203 	bic.w	r2, r3, #3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	4934      	ldr	r1, [pc, #208]	; (8004818 <HAL_RCC_ClockConfig+0x1bc>)
 8004748:	4313      	orrs	r3, r2
 800474a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800474c:	f7fd f896 	bl	800187c <HAL_GetTick>
 8004750:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004752:	e00a      	b.n	800476a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004754:	f7fd f892 	bl	800187c <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004762:	4293      	cmp	r3, r2
 8004764:	d901      	bls.n	800476a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e04f      	b.n	800480a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800476a:	4b2b      	ldr	r3, [pc, #172]	; (8004818 <HAL_RCC_ClockConfig+0x1bc>)
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	f003 020c 	and.w	r2, r3, #12
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	429a      	cmp	r2, r3
 800477a:	d1eb      	bne.n	8004754 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800477c:	4b25      	ldr	r3, [pc, #148]	; (8004814 <HAL_RCC_ClockConfig+0x1b8>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 030f 	and.w	r3, r3, #15
 8004784:	683a      	ldr	r2, [r7, #0]
 8004786:	429a      	cmp	r2, r3
 8004788:	d20c      	bcs.n	80047a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800478a:	4b22      	ldr	r3, [pc, #136]	; (8004814 <HAL_RCC_ClockConfig+0x1b8>)
 800478c:	683a      	ldr	r2, [r7, #0]
 800478e:	b2d2      	uxtb	r2, r2
 8004790:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004792:	4b20      	ldr	r3, [pc, #128]	; (8004814 <HAL_RCC_ClockConfig+0x1b8>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 030f 	and.w	r3, r3, #15
 800479a:	683a      	ldr	r2, [r7, #0]
 800479c:	429a      	cmp	r2, r3
 800479e:	d001      	beq.n	80047a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e032      	b.n	800480a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0304 	and.w	r3, r3, #4
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d008      	beq.n	80047c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047b0:	4b19      	ldr	r3, [pc, #100]	; (8004818 <HAL_RCC_ClockConfig+0x1bc>)
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	4916      	ldr	r1, [pc, #88]	; (8004818 <HAL_RCC_ClockConfig+0x1bc>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0308 	and.w	r3, r3, #8
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d009      	beq.n	80047e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047ce:	4b12      	ldr	r3, [pc, #72]	; (8004818 <HAL_RCC_ClockConfig+0x1bc>)
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	00db      	lsls	r3, r3, #3
 80047dc:	490e      	ldr	r1, [pc, #56]	; (8004818 <HAL_RCC_ClockConfig+0x1bc>)
 80047de:	4313      	orrs	r3, r2
 80047e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80047e2:	f000 f821 	bl	8004828 <HAL_RCC_GetSysClockFreq>
 80047e6:	4602      	mov	r2, r0
 80047e8:	4b0b      	ldr	r3, [pc, #44]	; (8004818 <HAL_RCC_ClockConfig+0x1bc>)
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	091b      	lsrs	r3, r3, #4
 80047ee:	f003 030f 	and.w	r3, r3, #15
 80047f2:	490a      	ldr	r1, [pc, #40]	; (800481c <HAL_RCC_ClockConfig+0x1c0>)
 80047f4:	5ccb      	ldrb	r3, [r1, r3]
 80047f6:	fa22 f303 	lsr.w	r3, r2, r3
 80047fa:	4a09      	ldr	r2, [pc, #36]	; (8004820 <HAL_RCC_ClockConfig+0x1c4>)
 80047fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80047fe:	4b09      	ldr	r3, [pc, #36]	; (8004824 <HAL_RCC_ClockConfig+0x1c8>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4618      	mov	r0, r3
 8004804:	f7fc fb08 	bl	8000e18 <HAL_InitTick>

  return HAL_OK;
 8004808:	2300      	movs	r3, #0
}
 800480a:	4618      	mov	r0, r3
 800480c:	3710      	adds	r7, #16
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	40023c00 	.word	0x40023c00
 8004818:	40023800 	.word	0x40023800
 800481c:	0800fd44 	.word	0x0800fd44
 8004820:	20000000 	.word	0x20000000
 8004824:	20000004 	.word	0x20000004

08004828 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004828:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800482c:	b090      	sub	sp, #64	; 0x40
 800482e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004830:	2300      	movs	r3, #0
 8004832:	637b      	str	r3, [r7, #52]	; 0x34
 8004834:	2300      	movs	r3, #0
 8004836:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004838:	2300      	movs	r3, #0
 800483a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800483c:	2300      	movs	r3, #0
 800483e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004840:	4b59      	ldr	r3, [pc, #356]	; (80049a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f003 030c 	and.w	r3, r3, #12
 8004848:	2b08      	cmp	r3, #8
 800484a:	d00d      	beq.n	8004868 <HAL_RCC_GetSysClockFreq+0x40>
 800484c:	2b08      	cmp	r3, #8
 800484e:	f200 80a1 	bhi.w	8004994 <HAL_RCC_GetSysClockFreq+0x16c>
 8004852:	2b00      	cmp	r3, #0
 8004854:	d002      	beq.n	800485c <HAL_RCC_GetSysClockFreq+0x34>
 8004856:	2b04      	cmp	r3, #4
 8004858:	d003      	beq.n	8004862 <HAL_RCC_GetSysClockFreq+0x3a>
 800485a:	e09b      	b.n	8004994 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800485c:	4b53      	ldr	r3, [pc, #332]	; (80049ac <HAL_RCC_GetSysClockFreq+0x184>)
 800485e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004860:	e09b      	b.n	800499a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004862:	4b53      	ldr	r3, [pc, #332]	; (80049b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004864:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004866:	e098      	b.n	800499a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004868:	4b4f      	ldr	r3, [pc, #316]	; (80049a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004870:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004872:	4b4d      	ldr	r3, [pc, #308]	; (80049a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d028      	beq.n	80048d0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800487e:	4b4a      	ldr	r3, [pc, #296]	; (80049a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	099b      	lsrs	r3, r3, #6
 8004884:	2200      	movs	r2, #0
 8004886:	623b      	str	r3, [r7, #32]
 8004888:	627a      	str	r2, [r7, #36]	; 0x24
 800488a:	6a3b      	ldr	r3, [r7, #32]
 800488c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004890:	2100      	movs	r1, #0
 8004892:	4b47      	ldr	r3, [pc, #284]	; (80049b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004894:	fb03 f201 	mul.w	r2, r3, r1
 8004898:	2300      	movs	r3, #0
 800489a:	fb00 f303 	mul.w	r3, r0, r3
 800489e:	4413      	add	r3, r2
 80048a0:	4a43      	ldr	r2, [pc, #268]	; (80049b0 <HAL_RCC_GetSysClockFreq+0x188>)
 80048a2:	fba0 1202 	umull	r1, r2, r0, r2
 80048a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048a8:	460a      	mov	r2, r1
 80048aa:	62ba      	str	r2, [r7, #40]	; 0x28
 80048ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048ae:	4413      	add	r3, r2
 80048b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048b4:	2200      	movs	r2, #0
 80048b6:	61bb      	str	r3, [r7, #24]
 80048b8:	61fa      	str	r2, [r7, #28]
 80048ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048be:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80048c2:	f7fb fc9d 	bl	8000200 <__aeabi_uldivmod>
 80048c6:	4602      	mov	r2, r0
 80048c8:	460b      	mov	r3, r1
 80048ca:	4613      	mov	r3, r2
 80048cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048ce:	e053      	b.n	8004978 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048d0:	4b35      	ldr	r3, [pc, #212]	; (80049a8 <HAL_RCC_GetSysClockFreq+0x180>)
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	099b      	lsrs	r3, r3, #6
 80048d6:	2200      	movs	r2, #0
 80048d8:	613b      	str	r3, [r7, #16]
 80048da:	617a      	str	r2, [r7, #20]
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80048e2:	f04f 0b00 	mov.w	fp, #0
 80048e6:	4652      	mov	r2, sl
 80048e8:	465b      	mov	r3, fp
 80048ea:	f04f 0000 	mov.w	r0, #0
 80048ee:	f04f 0100 	mov.w	r1, #0
 80048f2:	0159      	lsls	r1, r3, #5
 80048f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048f8:	0150      	lsls	r0, r2, #5
 80048fa:	4602      	mov	r2, r0
 80048fc:	460b      	mov	r3, r1
 80048fe:	ebb2 080a 	subs.w	r8, r2, sl
 8004902:	eb63 090b 	sbc.w	r9, r3, fp
 8004906:	f04f 0200 	mov.w	r2, #0
 800490a:	f04f 0300 	mov.w	r3, #0
 800490e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004912:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004916:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800491a:	ebb2 0408 	subs.w	r4, r2, r8
 800491e:	eb63 0509 	sbc.w	r5, r3, r9
 8004922:	f04f 0200 	mov.w	r2, #0
 8004926:	f04f 0300 	mov.w	r3, #0
 800492a:	00eb      	lsls	r3, r5, #3
 800492c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004930:	00e2      	lsls	r2, r4, #3
 8004932:	4614      	mov	r4, r2
 8004934:	461d      	mov	r5, r3
 8004936:	eb14 030a 	adds.w	r3, r4, sl
 800493a:	603b      	str	r3, [r7, #0]
 800493c:	eb45 030b 	adc.w	r3, r5, fp
 8004940:	607b      	str	r3, [r7, #4]
 8004942:	f04f 0200 	mov.w	r2, #0
 8004946:	f04f 0300 	mov.w	r3, #0
 800494a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800494e:	4629      	mov	r1, r5
 8004950:	028b      	lsls	r3, r1, #10
 8004952:	4621      	mov	r1, r4
 8004954:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004958:	4621      	mov	r1, r4
 800495a:	028a      	lsls	r2, r1, #10
 800495c:	4610      	mov	r0, r2
 800495e:	4619      	mov	r1, r3
 8004960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004962:	2200      	movs	r2, #0
 8004964:	60bb      	str	r3, [r7, #8]
 8004966:	60fa      	str	r2, [r7, #12]
 8004968:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800496c:	f7fb fc48 	bl	8000200 <__aeabi_uldivmod>
 8004970:	4602      	mov	r2, r0
 8004972:	460b      	mov	r3, r1
 8004974:	4613      	mov	r3, r2
 8004976:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004978:	4b0b      	ldr	r3, [pc, #44]	; (80049a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	0c1b      	lsrs	r3, r3, #16
 800497e:	f003 0303 	and.w	r3, r3, #3
 8004982:	3301      	adds	r3, #1
 8004984:	005b      	lsls	r3, r3, #1
 8004986:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004988:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800498a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800498c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004990:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004992:	e002      	b.n	800499a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004994:	4b05      	ldr	r3, [pc, #20]	; (80049ac <HAL_RCC_GetSysClockFreq+0x184>)
 8004996:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004998:	bf00      	nop
    }
  }
  return sysclockfreq;
 800499a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800499c:	4618      	mov	r0, r3
 800499e:	3740      	adds	r7, #64	; 0x40
 80049a0:	46bd      	mov	sp, r7
 80049a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049a6:	bf00      	nop
 80049a8:	40023800 	.word	0x40023800
 80049ac:	00f42400 	.word	0x00f42400
 80049b0:	00b71b00 	.word	0x00b71b00

080049b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049b4:	b480      	push	{r7}
 80049b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049b8:	4b03      	ldr	r3, [pc, #12]	; (80049c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80049ba:	681b      	ldr	r3, [r3, #0]
}
 80049bc:	4618      	mov	r0, r3
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr
 80049c6:	bf00      	nop
 80049c8:	20000000 	.word	0x20000000

080049cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80049d0:	f7ff fff0 	bl	80049b4 <HAL_RCC_GetHCLKFreq>
 80049d4:	4602      	mov	r2, r0
 80049d6:	4b05      	ldr	r3, [pc, #20]	; (80049ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	0a9b      	lsrs	r3, r3, #10
 80049dc:	f003 0307 	and.w	r3, r3, #7
 80049e0:	4903      	ldr	r1, [pc, #12]	; (80049f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049e2:	5ccb      	ldrb	r3, [r1, r3]
 80049e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	40023800 	.word	0x40023800
 80049f0:	0800fd54 	.word	0x0800fd54

080049f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80049f8:	f7ff ffdc 	bl	80049b4 <HAL_RCC_GetHCLKFreq>
 80049fc:	4602      	mov	r2, r0
 80049fe:	4b05      	ldr	r3, [pc, #20]	; (8004a14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	0b5b      	lsrs	r3, r3, #13
 8004a04:	f003 0307 	and.w	r3, r3, #7
 8004a08:	4903      	ldr	r1, [pc, #12]	; (8004a18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a0a:	5ccb      	ldrb	r3, [r1, r3]
 8004a0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	40023800 	.word	0x40023800
 8004a18:	0800fd54 	.word	0x0800fd54

08004a1c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	220f      	movs	r2, #15
 8004a2a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004a2c:	4b12      	ldr	r3, [pc, #72]	; (8004a78 <HAL_RCC_GetClockConfig+0x5c>)
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	f003 0203 	and.w	r2, r3, #3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004a38:	4b0f      	ldr	r3, [pc, #60]	; (8004a78 <HAL_RCC_GetClockConfig+0x5c>)
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004a44:	4b0c      	ldr	r3, [pc, #48]	; (8004a78 <HAL_RCC_GetClockConfig+0x5c>)
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004a50:	4b09      	ldr	r3, [pc, #36]	; (8004a78 <HAL_RCC_GetClockConfig+0x5c>)
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	08db      	lsrs	r3, r3, #3
 8004a56:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004a5e:	4b07      	ldr	r3, [pc, #28]	; (8004a7c <HAL_RCC_GetClockConfig+0x60>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 020f 	and.w	r2, r3, #15
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	601a      	str	r2, [r3, #0]
}
 8004a6a:	bf00      	nop
 8004a6c:	370c      	adds	r7, #12
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr
 8004a76:	bf00      	nop
 8004a78:	40023800 	.word	0x40023800
 8004a7c:	40023c00 	.word	0x40023c00

08004a80 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b082      	sub	sp, #8
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d101      	bne.n	8004a92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e07b      	b.n	8004b8a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d108      	bne.n	8004aac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004aa2:	d009      	beq.n	8004ab8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	61da      	str	r2, [r3, #28]
 8004aaa:	e005      	b.n	8004ab8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d106      	bne.n	8004ad8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f7fc f92c 	bl	8000d30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2202      	movs	r2, #2
 8004adc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004aee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004b00:	431a      	orrs	r2, r3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b0a:	431a      	orrs	r2, r3
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	691b      	ldr	r3, [r3, #16]
 8004b10:	f003 0302 	and.w	r3, r3, #2
 8004b14:	431a      	orrs	r2, r3
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	695b      	ldr	r3, [r3, #20]
 8004b1a:	f003 0301 	and.w	r3, r3, #1
 8004b1e:	431a      	orrs	r2, r3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	699b      	ldr	r3, [r3, #24]
 8004b24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b28:	431a      	orrs	r2, r3
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	69db      	ldr	r3, [r3, #28]
 8004b2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b32:	431a      	orrs	r2, r3
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6a1b      	ldr	r3, [r3, #32]
 8004b38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b3c:	ea42 0103 	orr.w	r1, r2, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b44:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	430a      	orrs	r2, r1
 8004b4e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	699b      	ldr	r3, [r3, #24]
 8004b54:	0c1b      	lsrs	r3, r3, #16
 8004b56:	f003 0104 	and.w	r1, r3, #4
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5e:	f003 0210 	and.w	r2, r3, #16
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	430a      	orrs	r2, r1
 8004b68:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	69da      	ldr	r2, [r3, #28]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b78:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004b88:	2300      	movs	r3, #0
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3708      	adds	r7, #8
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}

08004b92 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b92:	b580      	push	{r7, lr}
 8004b94:	b082      	sub	sp, #8
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d101      	bne.n	8004ba4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e041      	b.n	8004c28 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d106      	bne.n	8004bbe <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f7fc fbeb 	bl	8001394 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2202      	movs	r2, #2
 8004bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	3304      	adds	r3, #4
 8004bce:	4619      	mov	r1, r3
 8004bd0:	4610      	mov	r0, r2
 8004bd2:	f000 fb8f 	bl	80052f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2201      	movs	r2, #1
 8004be2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2201      	movs	r2, #1
 8004bea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2201      	movs	r2, #1
 8004c02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2201      	movs	r2, #1
 8004c0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2201      	movs	r2, #1
 8004c12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2201      	movs	r2, #1
 8004c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c26:	2300      	movs	r3, #0
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3708      	adds	r7, #8
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b085      	sub	sp, #20
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d001      	beq.n	8004c48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	e04e      	b.n	8004ce6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2202      	movs	r2, #2
 8004c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	68da      	ldr	r2, [r3, #12]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f042 0201 	orr.w	r2, r2, #1
 8004c5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a23      	ldr	r2, [pc, #140]	; (8004cf4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d022      	beq.n	8004cb0 <HAL_TIM_Base_Start_IT+0x80>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c72:	d01d      	beq.n	8004cb0 <HAL_TIM_Base_Start_IT+0x80>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a1f      	ldr	r2, [pc, #124]	; (8004cf8 <HAL_TIM_Base_Start_IT+0xc8>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d018      	beq.n	8004cb0 <HAL_TIM_Base_Start_IT+0x80>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a1e      	ldr	r2, [pc, #120]	; (8004cfc <HAL_TIM_Base_Start_IT+0xcc>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d013      	beq.n	8004cb0 <HAL_TIM_Base_Start_IT+0x80>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a1c      	ldr	r2, [pc, #112]	; (8004d00 <HAL_TIM_Base_Start_IT+0xd0>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d00e      	beq.n	8004cb0 <HAL_TIM_Base_Start_IT+0x80>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a1b      	ldr	r2, [pc, #108]	; (8004d04 <HAL_TIM_Base_Start_IT+0xd4>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d009      	beq.n	8004cb0 <HAL_TIM_Base_Start_IT+0x80>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a19      	ldr	r2, [pc, #100]	; (8004d08 <HAL_TIM_Base_Start_IT+0xd8>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d004      	beq.n	8004cb0 <HAL_TIM_Base_Start_IT+0x80>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a18      	ldr	r2, [pc, #96]	; (8004d0c <HAL_TIM_Base_Start_IT+0xdc>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d111      	bne.n	8004cd4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	f003 0307 	and.w	r3, r3, #7
 8004cba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2b06      	cmp	r3, #6
 8004cc0:	d010      	beq.n	8004ce4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f042 0201 	orr.w	r2, r2, #1
 8004cd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cd2:	e007      	b.n	8004ce4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f042 0201 	orr.w	r2, r2, #1
 8004ce2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ce4:	2300      	movs	r3, #0
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3714      	adds	r7, #20
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr
 8004cf2:	bf00      	nop
 8004cf4:	40010000 	.word	0x40010000
 8004cf8:	40000400 	.word	0x40000400
 8004cfc:	40000800 	.word	0x40000800
 8004d00:	40000c00 	.word	0x40000c00
 8004d04:	40010400 	.word	0x40010400
 8004d08:	40014000 	.word	0x40014000
 8004d0c:	40001800 	.word	0x40001800

08004d10 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b082      	sub	sp, #8
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d101      	bne.n	8004d22 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e041      	b.n	8004da6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d106      	bne.n	8004d3c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2200      	movs	r2, #0
 8004d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f7fc fade 	bl	80012f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2202      	movs	r2, #2
 8004d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	3304      	adds	r3, #4
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	4610      	mov	r0, r2
 8004d50:	f000 fad0 	bl	80052f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2201      	movs	r2, #1
 8004d78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2201      	movs	r2, #1
 8004d88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004da4:	2300      	movs	r3, #0
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3708      	adds	r7, #8
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}

08004dae <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004dae:	b580      	push	{r7, lr}
 8004db0:	b084      	sub	sp, #16
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	691b      	ldr	r3, [r3, #16]
 8004dc4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	f003 0302 	and.w	r3, r3, #2
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d020      	beq.n	8004e12 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f003 0302 	and.w	r3, r3, #2
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d01b      	beq.n	8004e12 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f06f 0202 	mvn.w	r2, #2
 8004de2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	699b      	ldr	r3, [r3, #24]
 8004df0:	f003 0303 	and.w	r3, r3, #3
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d003      	beq.n	8004e00 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f000 fa5c 	bl	80052b6 <HAL_TIM_IC_CaptureCallback>
 8004dfe:	e005      	b.n	8004e0c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f000 fa4e 	bl	80052a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f000 fa5f 	bl	80052ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	f003 0304 	and.w	r3, r3, #4
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d020      	beq.n	8004e5e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f003 0304 	and.w	r3, r3, #4
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d01b      	beq.n	8004e5e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f06f 0204 	mvn.w	r2, #4
 8004e2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2202      	movs	r2, #2
 8004e34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	699b      	ldr	r3, [r3, #24]
 8004e3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d003      	beq.n	8004e4c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f000 fa36 	bl	80052b6 <HAL_TIM_IC_CaptureCallback>
 8004e4a:	e005      	b.n	8004e58 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f000 fa28 	bl	80052a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f000 fa39 	bl	80052ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	f003 0308 	and.w	r3, r3, #8
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d020      	beq.n	8004eaa <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f003 0308 	and.w	r3, r3, #8
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d01b      	beq.n	8004eaa <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f06f 0208 	mvn.w	r2, #8
 8004e7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2204      	movs	r2, #4
 8004e80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	69db      	ldr	r3, [r3, #28]
 8004e88:	f003 0303 	and.w	r3, r3, #3
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d003      	beq.n	8004e98 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f000 fa10 	bl	80052b6 <HAL_TIM_IC_CaptureCallback>
 8004e96:	e005      	b.n	8004ea4 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f000 fa02 	bl	80052a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 fa13 	bl	80052ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	f003 0310 	and.w	r3, r3, #16
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d020      	beq.n	8004ef6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f003 0310 	and.w	r3, r3, #16
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d01b      	beq.n	8004ef6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f06f 0210 	mvn.w	r2, #16
 8004ec6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2208      	movs	r2, #8
 8004ecc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	69db      	ldr	r3, [r3, #28]
 8004ed4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d003      	beq.n	8004ee4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f000 f9ea 	bl	80052b6 <HAL_TIM_IC_CaptureCallback>
 8004ee2:	e005      	b.n	8004ef0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f000 f9dc 	bl	80052a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f000 f9ed 	bl	80052ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	f003 0301 	and.w	r3, r3, #1
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d00c      	beq.n	8004f1a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f003 0301 	and.w	r3, r3, #1
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d007      	beq.n	8004f1a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f06f 0201 	mvn.w	r2, #1
 8004f12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f7fb febd 	bl	8000c94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d00c      	beq.n	8004f3e <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d007      	beq.n	8004f3e <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f000 fda9 	bl	8005a90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d00c      	beq.n	8004f62 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d007      	beq.n	8004f62 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f000 f9be 	bl	80052de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	f003 0320 	and.w	r3, r3, #32
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d00c      	beq.n	8004f86 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f003 0320 	and.w	r3, r3, #32
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d007      	beq.n	8004f86 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f06f 0220 	mvn.w	r2, #32
 8004f7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f000 fd7b 	bl	8005a7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f86:	bf00      	nop
 8004f88:	3710      	adds	r7, #16
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
	...

08004f90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b086      	sub	sp, #24
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	60f8      	str	r0, [r7, #12]
 8004f98:	60b9      	str	r1, [r7, #8]
 8004f9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d101      	bne.n	8004fae <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004faa:	2302      	movs	r3, #2
 8004fac:	e0ae      	b.n	800510c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2b0c      	cmp	r3, #12
 8004fba:	f200 809f 	bhi.w	80050fc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004fbe:	a201      	add	r2, pc, #4	; (adr r2, 8004fc4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fc4:	08004ff9 	.word	0x08004ff9
 8004fc8:	080050fd 	.word	0x080050fd
 8004fcc:	080050fd 	.word	0x080050fd
 8004fd0:	080050fd 	.word	0x080050fd
 8004fd4:	08005039 	.word	0x08005039
 8004fd8:	080050fd 	.word	0x080050fd
 8004fdc:	080050fd 	.word	0x080050fd
 8004fe0:	080050fd 	.word	0x080050fd
 8004fe4:	0800507b 	.word	0x0800507b
 8004fe8:	080050fd 	.word	0x080050fd
 8004fec:	080050fd 	.word	0x080050fd
 8004ff0:	080050fd 	.word	0x080050fd
 8004ff4:	080050bb 	.word	0x080050bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	68b9      	ldr	r1, [r7, #8]
 8004ffe:	4618      	mov	r0, r3
 8005000:	f000 fa24 	bl	800544c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	699a      	ldr	r2, [r3, #24]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f042 0208 	orr.w	r2, r2, #8
 8005012:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	699a      	ldr	r2, [r3, #24]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f022 0204 	bic.w	r2, r2, #4
 8005022:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	6999      	ldr	r1, [r3, #24]
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	691a      	ldr	r2, [r3, #16]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	430a      	orrs	r2, r1
 8005034:	619a      	str	r2, [r3, #24]
      break;
 8005036:	e064      	b.n	8005102 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68b9      	ldr	r1, [r7, #8]
 800503e:	4618      	mov	r0, r3
 8005040:	f000 fa74 	bl	800552c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	699a      	ldr	r2, [r3, #24]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005052:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	699a      	ldr	r2, [r3, #24]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005062:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	6999      	ldr	r1, [r3, #24]
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	021a      	lsls	r2, r3, #8
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	430a      	orrs	r2, r1
 8005076:	619a      	str	r2, [r3, #24]
      break;
 8005078:	e043      	b.n	8005102 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	68b9      	ldr	r1, [r7, #8]
 8005080:	4618      	mov	r0, r3
 8005082:	f000 fac9 	bl	8005618 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	69da      	ldr	r2, [r3, #28]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f042 0208 	orr.w	r2, r2, #8
 8005094:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	69da      	ldr	r2, [r3, #28]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f022 0204 	bic.w	r2, r2, #4
 80050a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	69d9      	ldr	r1, [r3, #28]
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	691a      	ldr	r2, [r3, #16]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	430a      	orrs	r2, r1
 80050b6:	61da      	str	r2, [r3, #28]
      break;
 80050b8:	e023      	b.n	8005102 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	68b9      	ldr	r1, [r7, #8]
 80050c0:	4618      	mov	r0, r3
 80050c2:	f000 fb1d 	bl	8005700 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	69da      	ldr	r2, [r3, #28]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	69da      	ldr	r2, [r3, #28]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	69d9      	ldr	r1, [r3, #28]
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	691b      	ldr	r3, [r3, #16]
 80050f0:	021a      	lsls	r2, r3, #8
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	430a      	orrs	r2, r1
 80050f8:	61da      	str	r2, [r3, #28]
      break;
 80050fa:	e002      	b.n	8005102 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	75fb      	strb	r3, [r7, #23]
      break;
 8005100:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2200      	movs	r2, #0
 8005106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800510a:	7dfb      	ldrb	r3, [r7, #23]
}
 800510c:	4618      	mov	r0, r3
 800510e:	3718      	adds	r7, #24
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}

08005114 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800511e:	2300      	movs	r3, #0
 8005120:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005128:	2b01      	cmp	r3, #1
 800512a:	d101      	bne.n	8005130 <HAL_TIM_ConfigClockSource+0x1c>
 800512c:	2302      	movs	r3, #2
 800512e:	e0b4      	b.n	800529a <HAL_TIM_ConfigClockSource+0x186>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2202      	movs	r2, #2
 800513c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800514e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005156:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	68ba      	ldr	r2, [r7, #8]
 800515e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005168:	d03e      	beq.n	80051e8 <HAL_TIM_ConfigClockSource+0xd4>
 800516a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800516e:	f200 8087 	bhi.w	8005280 <HAL_TIM_ConfigClockSource+0x16c>
 8005172:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005176:	f000 8086 	beq.w	8005286 <HAL_TIM_ConfigClockSource+0x172>
 800517a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800517e:	d87f      	bhi.n	8005280 <HAL_TIM_ConfigClockSource+0x16c>
 8005180:	2b70      	cmp	r3, #112	; 0x70
 8005182:	d01a      	beq.n	80051ba <HAL_TIM_ConfigClockSource+0xa6>
 8005184:	2b70      	cmp	r3, #112	; 0x70
 8005186:	d87b      	bhi.n	8005280 <HAL_TIM_ConfigClockSource+0x16c>
 8005188:	2b60      	cmp	r3, #96	; 0x60
 800518a:	d050      	beq.n	800522e <HAL_TIM_ConfigClockSource+0x11a>
 800518c:	2b60      	cmp	r3, #96	; 0x60
 800518e:	d877      	bhi.n	8005280 <HAL_TIM_ConfigClockSource+0x16c>
 8005190:	2b50      	cmp	r3, #80	; 0x50
 8005192:	d03c      	beq.n	800520e <HAL_TIM_ConfigClockSource+0xfa>
 8005194:	2b50      	cmp	r3, #80	; 0x50
 8005196:	d873      	bhi.n	8005280 <HAL_TIM_ConfigClockSource+0x16c>
 8005198:	2b40      	cmp	r3, #64	; 0x40
 800519a:	d058      	beq.n	800524e <HAL_TIM_ConfigClockSource+0x13a>
 800519c:	2b40      	cmp	r3, #64	; 0x40
 800519e:	d86f      	bhi.n	8005280 <HAL_TIM_ConfigClockSource+0x16c>
 80051a0:	2b30      	cmp	r3, #48	; 0x30
 80051a2:	d064      	beq.n	800526e <HAL_TIM_ConfigClockSource+0x15a>
 80051a4:	2b30      	cmp	r3, #48	; 0x30
 80051a6:	d86b      	bhi.n	8005280 <HAL_TIM_ConfigClockSource+0x16c>
 80051a8:	2b20      	cmp	r3, #32
 80051aa:	d060      	beq.n	800526e <HAL_TIM_ConfigClockSource+0x15a>
 80051ac:	2b20      	cmp	r3, #32
 80051ae:	d867      	bhi.n	8005280 <HAL_TIM_ConfigClockSource+0x16c>
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d05c      	beq.n	800526e <HAL_TIM_ConfigClockSource+0x15a>
 80051b4:	2b10      	cmp	r3, #16
 80051b6:	d05a      	beq.n	800526e <HAL_TIM_ConfigClockSource+0x15a>
 80051b8:	e062      	b.n	8005280 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80051ca:	f000 fb69 	bl	80058a0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80051dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	68ba      	ldr	r2, [r7, #8]
 80051e4:	609a      	str	r2, [r3, #8]
      break;
 80051e6:	e04f      	b.n	8005288 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80051f8:	f000 fb52 	bl	80058a0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	689a      	ldr	r2, [r3, #8]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800520a:	609a      	str	r2, [r3, #8]
      break;
 800520c:	e03c      	b.n	8005288 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800521a:	461a      	mov	r2, r3
 800521c:	f000 fac6 	bl	80057ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	2150      	movs	r1, #80	; 0x50
 8005226:	4618      	mov	r0, r3
 8005228:	f000 fb1f 	bl	800586a <TIM_ITRx_SetConfig>
      break;
 800522c:	e02c      	b.n	8005288 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800523a:	461a      	mov	r2, r3
 800523c:	f000 fae5 	bl	800580a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2160      	movs	r1, #96	; 0x60
 8005246:	4618      	mov	r0, r3
 8005248:	f000 fb0f 	bl	800586a <TIM_ITRx_SetConfig>
      break;
 800524c:	e01c      	b.n	8005288 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800525a:	461a      	mov	r2, r3
 800525c:	f000 faa6 	bl	80057ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	2140      	movs	r1, #64	; 0x40
 8005266:	4618      	mov	r0, r3
 8005268:	f000 faff 	bl	800586a <TIM_ITRx_SetConfig>
      break;
 800526c:	e00c      	b.n	8005288 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4619      	mov	r1, r3
 8005278:	4610      	mov	r0, r2
 800527a:	f000 faf6 	bl	800586a <TIM_ITRx_SetConfig>
      break;
 800527e:	e003      	b.n	8005288 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	73fb      	strb	r3, [r7, #15]
      break;
 8005284:	e000      	b.n	8005288 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005286:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005298:	7bfb      	ldrb	r3, [r7, #15]
}
 800529a:	4618      	mov	r0, r3
 800529c:	3710      	adds	r7, #16
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}

080052a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052a2:	b480      	push	{r7}
 80052a4:	b083      	sub	sp, #12
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052aa:	bf00      	nop
 80052ac:	370c      	adds	r7, #12
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr

080052b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80052b6:	b480      	push	{r7}
 80052b8:	b083      	sub	sp, #12
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80052be:	bf00      	nop
 80052c0:	370c      	adds	r7, #12
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr

080052ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80052ca:	b480      	push	{r7}
 80052cc:	b083      	sub	sp, #12
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80052d2:	bf00      	nop
 80052d4:	370c      	adds	r7, #12
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr

080052de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80052de:	b480      	push	{r7}
 80052e0:	b083      	sub	sp, #12
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052e6:	bf00      	nop
 80052e8:	370c      	adds	r7, #12
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr
	...

080052f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b085      	sub	sp, #20
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	4a46      	ldr	r2, [pc, #280]	; (8005420 <TIM_Base_SetConfig+0x12c>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d013      	beq.n	8005334 <TIM_Base_SetConfig+0x40>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005312:	d00f      	beq.n	8005334 <TIM_Base_SetConfig+0x40>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4a43      	ldr	r2, [pc, #268]	; (8005424 <TIM_Base_SetConfig+0x130>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d00b      	beq.n	8005334 <TIM_Base_SetConfig+0x40>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4a42      	ldr	r2, [pc, #264]	; (8005428 <TIM_Base_SetConfig+0x134>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d007      	beq.n	8005334 <TIM_Base_SetConfig+0x40>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4a41      	ldr	r2, [pc, #260]	; (800542c <TIM_Base_SetConfig+0x138>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d003      	beq.n	8005334 <TIM_Base_SetConfig+0x40>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4a40      	ldr	r2, [pc, #256]	; (8005430 <TIM_Base_SetConfig+0x13c>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d108      	bne.n	8005346 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800533a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	68fa      	ldr	r2, [r7, #12]
 8005342:	4313      	orrs	r3, r2
 8005344:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a35      	ldr	r2, [pc, #212]	; (8005420 <TIM_Base_SetConfig+0x12c>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d02b      	beq.n	80053a6 <TIM_Base_SetConfig+0xb2>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005354:	d027      	beq.n	80053a6 <TIM_Base_SetConfig+0xb2>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a32      	ldr	r2, [pc, #200]	; (8005424 <TIM_Base_SetConfig+0x130>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d023      	beq.n	80053a6 <TIM_Base_SetConfig+0xb2>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a31      	ldr	r2, [pc, #196]	; (8005428 <TIM_Base_SetConfig+0x134>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d01f      	beq.n	80053a6 <TIM_Base_SetConfig+0xb2>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a30      	ldr	r2, [pc, #192]	; (800542c <TIM_Base_SetConfig+0x138>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d01b      	beq.n	80053a6 <TIM_Base_SetConfig+0xb2>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a2f      	ldr	r2, [pc, #188]	; (8005430 <TIM_Base_SetConfig+0x13c>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d017      	beq.n	80053a6 <TIM_Base_SetConfig+0xb2>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a2e      	ldr	r2, [pc, #184]	; (8005434 <TIM_Base_SetConfig+0x140>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d013      	beq.n	80053a6 <TIM_Base_SetConfig+0xb2>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a2d      	ldr	r2, [pc, #180]	; (8005438 <TIM_Base_SetConfig+0x144>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d00f      	beq.n	80053a6 <TIM_Base_SetConfig+0xb2>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4a2c      	ldr	r2, [pc, #176]	; (800543c <TIM_Base_SetConfig+0x148>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d00b      	beq.n	80053a6 <TIM_Base_SetConfig+0xb2>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4a2b      	ldr	r2, [pc, #172]	; (8005440 <TIM_Base_SetConfig+0x14c>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d007      	beq.n	80053a6 <TIM_Base_SetConfig+0xb2>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4a2a      	ldr	r2, [pc, #168]	; (8005444 <TIM_Base_SetConfig+0x150>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d003      	beq.n	80053a6 <TIM_Base_SetConfig+0xb2>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a29      	ldr	r2, [pc, #164]	; (8005448 <TIM_Base_SetConfig+0x154>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d108      	bne.n	80053b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	68fa      	ldr	r2, [r7, #12]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	695b      	ldr	r3, [r3, #20]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	68fa      	ldr	r2, [r7, #12]
 80053ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	689a      	ldr	r2, [r3, #8]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4a10      	ldr	r2, [pc, #64]	; (8005420 <TIM_Base_SetConfig+0x12c>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d003      	beq.n	80053ec <TIM_Base_SetConfig+0xf8>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4a12      	ldr	r2, [pc, #72]	; (8005430 <TIM_Base_SetConfig+0x13c>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d103      	bne.n	80053f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	691a      	ldr	r2, [r3, #16]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	f003 0301 	and.w	r3, r3, #1
 8005402:	2b01      	cmp	r3, #1
 8005404:	d105      	bne.n	8005412 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	691b      	ldr	r3, [r3, #16]
 800540a:	f023 0201 	bic.w	r2, r3, #1
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	611a      	str	r2, [r3, #16]
  }
}
 8005412:	bf00      	nop
 8005414:	3714      	adds	r7, #20
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr
 800541e:	bf00      	nop
 8005420:	40010000 	.word	0x40010000
 8005424:	40000400 	.word	0x40000400
 8005428:	40000800 	.word	0x40000800
 800542c:	40000c00 	.word	0x40000c00
 8005430:	40010400 	.word	0x40010400
 8005434:	40014000 	.word	0x40014000
 8005438:	40014400 	.word	0x40014400
 800543c:	40014800 	.word	0x40014800
 8005440:	40001800 	.word	0x40001800
 8005444:	40001c00 	.word	0x40001c00
 8005448:	40002000 	.word	0x40002000

0800544c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800544c:	b480      	push	{r7}
 800544e:	b087      	sub	sp, #28
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a1b      	ldr	r3, [r3, #32]
 800545a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6a1b      	ldr	r3, [r3, #32]
 8005460:	f023 0201 	bic.w	r2, r3, #1
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	699b      	ldr	r3, [r3, #24]
 8005472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800547a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f023 0303 	bic.w	r3, r3, #3
 8005482:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	68fa      	ldr	r2, [r7, #12]
 800548a:	4313      	orrs	r3, r2
 800548c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	f023 0302 	bic.w	r3, r3, #2
 8005494:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	697a      	ldr	r2, [r7, #20]
 800549c:	4313      	orrs	r3, r2
 800549e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a20      	ldr	r2, [pc, #128]	; (8005524 <TIM_OC1_SetConfig+0xd8>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d003      	beq.n	80054b0 <TIM_OC1_SetConfig+0x64>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4a1f      	ldr	r2, [pc, #124]	; (8005528 <TIM_OC1_SetConfig+0xdc>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d10c      	bne.n	80054ca <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	f023 0308 	bic.w	r3, r3, #8
 80054b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	697a      	ldr	r2, [r7, #20]
 80054be:	4313      	orrs	r3, r2
 80054c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	f023 0304 	bic.w	r3, r3, #4
 80054c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4a15      	ldr	r2, [pc, #84]	; (8005524 <TIM_OC1_SetConfig+0xd8>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d003      	beq.n	80054da <TIM_OC1_SetConfig+0x8e>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4a14      	ldr	r2, [pc, #80]	; (8005528 <TIM_OC1_SetConfig+0xdc>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d111      	bne.n	80054fe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80054e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	695b      	ldr	r3, [r3, #20]
 80054ee:	693a      	ldr	r2, [r7, #16]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	699b      	ldr	r3, [r3, #24]
 80054f8:	693a      	ldr	r2, [r7, #16]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	693a      	ldr	r2, [r7, #16]
 8005502:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	68fa      	ldr	r2, [r7, #12]
 8005508:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	685a      	ldr	r2, [r3, #4]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	697a      	ldr	r2, [r7, #20]
 8005516:	621a      	str	r2, [r3, #32]
}
 8005518:	bf00      	nop
 800551a:	371c      	adds	r7, #28
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr
 8005524:	40010000 	.word	0x40010000
 8005528:	40010400 	.word	0x40010400

0800552c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800552c:	b480      	push	{r7}
 800552e:	b087      	sub	sp, #28
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a1b      	ldr	r3, [r3, #32]
 800553a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6a1b      	ldr	r3, [r3, #32]
 8005540:	f023 0210 	bic.w	r2, r3, #16
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	699b      	ldr	r3, [r3, #24]
 8005552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800555a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005562:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	021b      	lsls	r3, r3, #8
 800556a:	68fa      	ldr	r2, [r7, #12]
 800556c:	4313      	orrs	r3, r2
 800556e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	f023 0320 	bic.w	r3, r3, #32
 8005576:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	011b      	lsls	r3, r3, #4
 800557e:	697a      	ldr	r2, [r7, #20]
 8005580:	4313      	orrs	r3, r2
 8005582:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	4a22      	ldr	r2, [pc, #136]	; (8005610 <TIM_OC2_SetConfig+0xe4>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d003      	beq.n	8005594 <TIM_OC2_SetConfig+0x68>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4a21      	ldr	r2, [pc, #132]	; (8005614 <TIM_OC2_SetConfig+0xe8>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d10d      	bne.n	80055b0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800559a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	011b      	lsls	r3, r3, #4
 80055a2:	697a      	ldr	r2, [r7, #20]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	4a17      	ldr	r2, [pc, #92]	; (8005610 <TIM_OC2_SetConfig+0xe4>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d003      	beq.n	80055c0 <TIM_OC2_SetConfig+0x94>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	4a16      	ldr	r2, [pc, #88]	; (8005614 <TIM_OC2_SetConfig+0xe8>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d113      	bne.n	80055e8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	695b      	ldr	r3, [r3, #20]
 80055d4:	009b      	lsls	r3, r3, #2
 80055d6:	693a      	ldr	r2, [r7, #16]
 80055d8:	4313      	orrs	r3, r2
 80055da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	699b      	ldr	r3, [r3, #24]
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	693a      	ldr	r2, [r7, #16]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	693a      	ldr	r2, [r7, #16]
 80055ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	68fa      	ldr	r2, [r7, #12]
 80055f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	685a      	ldr	r2, [r3, #4]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	697a      	ldr	r2, [r7, #20]
 8005600:	621a      	str	r2, [r3, #32]
}
 8005602:	bf00      	nop
 8005604:	371c      	adds	r7, #28
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr
 800560e:	bf00      	nop
 8005610:	40010000 	.word	0x40010000
 8005614:	40010400 	.word	0x40010400

08005618 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005618:	b480      	push	{r7}
 800561a:	b087      	sub	sp, #28
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a1b      	ldr	r3, [r3, #32]
 8005626:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6a1b      	ldr	r3, [r3, #32]
 800562c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	69db      	ldr	r3, [r3, #28]
 800563e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005646:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f023 0303 	bic.w	r3, r3, #3
 800564e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	68fa      	ldr	r2, [r7, #12]
 8005656:	4313      	orrs	r3, r2
 8005658:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005660:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	021b      	lsls	r3, r3, #8
 8005668:	697a      	ldr	r2, [r7, #20]
 800566a:	4313      	orrs	r3, r2
 800566c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	4a21      	ldr	r2, [pc, #132]	; (80056f8 <TIM_OC3_SetConfig+0xe0>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d003      	beq.n	800567e <TIM_OC3_SetConfig+0x66>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	4a20      	ldr	r2, [pc, #128]	; (80056fc <TIM_OC3_SetConfig+0xe4>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d10d      	bne.n	800569a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005684:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	68db      	ldr	r3, [r3, #12]
 800568a:	021b      	lsls	r3, r3, #8
 800568c:	697a      	ldr	r2, [r7, #20]
 800568e:	4313      	orrs	r3, r2
 8005690:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005698:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a16      	ldr	r2, [pc, #88]	; (80056f8 <TIM_OC3_SetConfig+0xe0>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d003      	beq.n	80056aa <TIM_OC3_SetConfig+0x92>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a15      	ldr	r2, [pc, #84]	; (80056fc <TIM_OC3_SetConfig+0xe4>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d113      	bne.n	80056d2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80056b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	695b      	ldr	r3, [r3, #20]
 80056be:	011b      	lsls	r3, r3, #4
 80056c0:	693a      	ldr	r2, [r7, #16]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	699b      	ldr	r3, [r3, #24]
 80056ca:	011b      	lsls	r3, r3, #4
 80056cc:	693a      	ldr	r2, [r7, #16]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	693a      	ldr	r2, [r7, #16]
 80056d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	68fa      	ldr	r2, [r7, #12]
 80056dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	685a      	ldr	r2, [r3, #4]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	697a      	ldr	r2, [r7, #20]
 80056ea:	621a      	str	r2, [r3, #32]
}
 80056ec:	bf00      	nop
 80056ee:	371c      	adds	r7, #28
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr
 80056f8:	40010000 	.word	0x40010000
 80056fc:	40010400 	.word	0x40010400

08005700 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005700:	b480      	push	{r7}
 8005702:	b087      	sub	sp, #28
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6a1b      	ldr	r3, [r3, #32]
 800570e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6a1b      	ldr	r3, [r3, #32]
 8005714:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	69db      	ldr	r3, [r3, #28]
 8005726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800572e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005736:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	021b      	lsls	r3, r3, #8
 800573e:	68fa      	ldr	r2, [r7, #12]
 8005740:	4313      	orrs	r3, r2
 8005742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800574a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	031b      	lsls	r3, r3, #12
 8005752:	693a      	ldr	r2, [r7, #16]
 8005754:	4313      	orrs	r3, r2
 8005756:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	4a12      	ldr	r2, [pc, #72]	; (80057a4 <TIM_OC4_SetConfig+0xa4>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d003      	beq.n	8005768 <TIM_OC4_SetConfig+0x68>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	4a11      	ldr	r2, [pc, #68]	; (80057a8 <TIM_OC4_SetConfig+0xa8>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d109      	bne.n	800577c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800576e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	695b      	ldr	r3, [r3, #20]
 8005774:	019b      	lsls	r3, r3, #6
 8005776:	697a      	ldr	r2, [r7, #20]
 8005778:	4313      	orrs	r3, r2
 800577a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	697a      	ldr	r2, [r7, #20]
 8005780:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	68fa      	ldr	r2, [r7, #12]
 8005786:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	685a      	ldr	r2, [r3, #4]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	693a      	ldr	r2, [r7, #16]
 8005794:	621a      	str	r2, [r3, #32]
}
 8005796:	bf00      	nop
 8005798:	371c      	adds	r7, #28
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr
 80057a2:	bf00      	nop
 80057a4:	40010000 	.word	0x40010000
 80057a8:	40010400 	.word	0x40010400

080057ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b087      	sub	sp, #28
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	60f8      	str	r0, [r7, #12]
 80057b4:	60b9      	str	r1, [r7, #8]
 80057b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6a1b      	ldr	r3, [r3, #32]
 80057bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	6a1b      	ldr	r3, [r3, #32]
 80057c2:	f023 0201 	bic.w	r2, r3, #1
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	699b      	ldr	r3, [r3, #24]
 80057ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	011b      	lsls	r3, r3, #4
 80057dc:	693a      	ldr	r2, [r7, #16]
 80057de:	4313      	orrs	r3, r2
 80057e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	f023 030a 	bic.w	r3, r3, #10
 80057e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057ea:	697a      	ldr	r2, [r7, #20]
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	693a      	ldr	r2, [r7, #16]
 80057f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	697a      	ldr	r2, [r7, #20]
 80057fc:	621a      	str	r2, [r3, #32]
}
 80057fe:	bf00      	nop
 8005800:	371c      	adds	r7, #28
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr

0800580a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800580a:	b480      	push	{r7}
 800580c:	b087      	sub	sp, #28
 800580e:	af00      	add	r7, sp, #0
 8005810:	60f8      	str	r0, [r7, #12]
 8005812:	60b9      	str	r1, [r7, #8]
 8005814:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6a1b      	ldr	r3, [r3, #32]
 800581a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6a1b      	ldr	r3, [r3, #32]
 8005820:	f023 0210 	bic.w	r2, r3, #16
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	699b      	ldr	r3, [r3, #24]
 800582c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005834:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	031b      	lsls	r3, r3, #12
 800583a:	693a      	ldr	r2, [r7, #16]
 800583c:	4313      	orrs	r3, r2
 800583e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005846:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	011b      	lsls	r3, r3, #4
 800584c:	697a      	ldr	r2, [r7, #20]
 800584e:	4313      	orrs	r3, r2
 8005850:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	693a      	ldr	r2, [r7, #16]
 8005856:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	697a      	ldr	r2, [r7, #20]
 800585c:	621a      	str	r2, [r3, #32]
}
 800585e:	bf00      	nop
 8005860:	371c      	adds	r7, #28
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr

0800586a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800586a:	b480      	push	{r7}
 800586c:	b085      	sub	sp, #20
 800586e:	af00      	add	r7, sp, #0
 8005870:	6078      	str	r0, [r7, #4]
 8005872:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005880:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005882:	683a      	ldr	r2, [r7, #0]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	4313      	orrs	r3, r2
 8005888:	f043 0307 	orr.w	r3, r3, #7
 800588c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	68fa      	ldr	r2, [r7, #12]
 8005892:	609a      	str	r2, [r3, #8]
}
 8005894:	bf00      	nop
 8005896:	3714      	adds	r7, #20
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr

080058a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b087      	sub	sp, #28
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	60f8      	str	r0, [r7, #12]
 80058a8:	60b9      	str	r1, [r7, #8]
 80058aa:	607a      	str	r2, [r7, #4]
 80058ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	021a      	lsls	r2, r3, #8
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	431a      	orrs	r2, r3
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	697a      	ldr	r2, [r7, #20]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	697a      	ldr	r2, [r7, #20]
 80058d2:	609a      	str	r2, [r3, #8]
}
 80058d4:	bf00      	nop
 80058d6:	371c      	adds	r7, #28
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr

080058e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b085      	sub	sp, #20
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d101      	bne.n	80058f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058f4:	2302      	movs	r3, #2
 80058f6:	e05a      	b.n	80059ae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2202      	movs	r2, #2
 8005904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800591e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	68fa      	ldr	r2, [r7, #12]
 8005926:	4313      	orrs	r3, r2
 8005928:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	68fa      	ldr	r2, [r7, #12]
 8005930:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a21      	ldr	r2, [pc, #132]	; (80059bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d022      	beq.n	8005982 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005944:	d01d      	beq.n	8005982 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a1d      	ldr	r2, [pc, #116]	; (80059c0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d018      	beq.n	8005982 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a1b      	ldr	r2, [pc, #108]	; (80059c4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d013      	beq.n	8005982 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a1a      	ldr	r2, [pc, #104]	; (80059c8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d00e      	beq.n	8005982 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a18      	ldr	r2, [pc, #96]	; (80059cc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d009      	beq.n	8005982 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a17      	ldr	r2, [pc, #92]	; (80059d0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d004      	beq.n	8005982 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a15      	ldr	r2, [pc, #84]	; (80059d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d10c      	bne.n	800599c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005988:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	68ba      	ldr	r2, [r7, #8]
 8005990:	4313      	orrs	r3, r2
 8005992:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	68ba      	ldr	r2, [r7, #8]
 800599a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059ac:	2300      	movs	r3, #0
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3714      	adds	r7, #20
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr
 80059ba:	bf00      	nop
 80059bc:	40010000 	.word	0x40010000
 80059c0:	40000400 	.word	0x40000400
 80059c4:	40000800 	.word	0x40000800
 80059c8:	40000c00 	.word	0x40000c00
 80059cc:	40010400 	.word	0x40010400
 80059d0:	40014000 	.word	0x40014000
 80059d4:	40001800 	.word	0x40001800

080059d8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80059d8:	b480      	push	{r7}
 80059da:	b085      	sub	sp, #20
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80059e2:	2300      	movs	r3, #0
 80059e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d101      	bne.n	80059f4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80059f0:	2302      	movs	r3, #2
 80059f2:	e03d      	b.n	8005a70 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	4313      	orrs	r3, r2
 8005a16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	695b      	ldr	r3, [r3, #20]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	69db      	ldr	r3, [r3, #28]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a6e:	2300      	movs	r3, #0
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3714      	adds	r7, #20
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a84:	bf00      	nop
 8005a86:	370c      	adds	r7, #12
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr

08005a90 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b083      	sub	sp, #12
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a98:	bf00      	nop
 8005a9a:	370c      	adds	r7, #12
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b082      	sub	sp, #8
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d101      	bne.n	8005ab6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e042      	b.n	8005b3c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d106      	bne.n	8005ad0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f7fb fd88 	bl	80015e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2224      	movs	r2, #36	; 0x24
 8005ad4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	68da      	ldr	r2, [r3, #12]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ae6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f000 fdb7 	bl	800665c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	691a      	ldr	r2, [r3, #16]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005afc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	695a      	ldr	r2, [r3, #20]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	68da      	ldr	r2, [r3, #12]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2200      	movs	r2, #0
 8005b22:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2220      	movs	r2, #32
 8005b28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2220      	movs	r2, #32
 8005b30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005b3a:	2300      	movs	r3, #0
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3708      	adds	r7, #8
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b08c      	sub	sp, #48	; 0x30
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	60b9      	str	r1, [r7, #8]
 8005b4e:	4613      	mov	r3, r2
 8005b50:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	2b20      	cmp	r3, #32
 8005b5c:	d156      	bne.n	8005c0c <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d002      	beq.n	8005b6a <HAL_UART_Transmit_DMA+0x26>
 8005b64:	88fb      	ldrh	r3, [r7, #6]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d101      	bne.n	8005b6e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e04f      	b.n	8005c0e <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8005b6e:	68ba      	ldr	r2, [r7, #8]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	88fa      	ldrh	r2, [r7, #6]
 8005b78:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	88fa      	ldrh	r2, [r7, #6]
 8005b7e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2200      	movs	r2, #0
 8005b84:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2221      	movs	r2, #33	; 0x21
 8005b8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b92:	4a21      	ldr	r2, [pc, #132]	; (8005c18 <HAL_UART_Transmit_DMA+0xd4>)
 8005b94:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b9a:	4a20      	ldr	r2, [pc, #128]	; (8005c1c <HAL_UART_Transmit_DMA+0xd8>)
 8005b9c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba2:	4a1f      	ldr	r2, [pc, #124]	; (8005c20 <HAL_UART_Transmit_DMA+0xdc>)
 8005ba4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005baa:	2200      	movs	r2, #0
 8005bac:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8005bae:	f107 0308 	add.w	r3, r7, #8
 8005bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bba:	6819      	ldr	r1, [r3, #0]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	3304      	adds	r3, #4
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	88fb      	ldrh	r3, [r7, #6]
 8005bc6:	f7fc fb4d 	bl	8002264 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005bd2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	3314      	adds	r3, #20
 8005bda:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bdc:	69bb      	ldr	r3, [r7, #24]
 8005bde:	e853 3f00 	ldrex	r3, [r3]
 8005be2:	617b      	str	r3, [r7, #20]
   return(result);
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bea:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	3314      	adds	r3, #20
 8005bf2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bf4:	627a      	str	r2, [r7, #36]	; 0x24
 8005bf6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf8:	6a39      	ldr	r1, [r7, #32]
 8005bfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bfc:	e841 2300 	strex	r3, r2, [r1]
 8005c00:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c02:	69fb      	ldr	r3, [r7, #28]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d1e5      	bne.n	8005bd4 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	e000      	b.n	8005c0e <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8005c0c:	2302      	movs	r3, #2
  }
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3730      	adds	r7, #48	; 0x30
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
 8005c16:	bf00      	nop
 8005c18:	08006189 	.word	0x08006189
 8005c1c:	08006223 	.word	0x08006223
 8005c20:	0800623f 	.word	0x0800623f

08005c24 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b0ba      	sub	sp, #232	; 0xe8
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	695b      	ldr	r3, [r3, #20]
 8005c46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005c50:	2300      	movs	r3, #0
 8005c52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005c56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c5a:	f003 030f 	and.w	r3, r3, #15
 8005c5e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005c62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d10f      	bne.n	8005c8a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c6e:	f003 0320 	and.w	r3, r3, #32
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d009      	beq.n	8005c8a <HAL_UART_IRQHandler+0x66>
 8005c76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c7a:	f003 0320 	and.w	r3, r3, #32
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d003      	beq.n	8005c8a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f000 fc2c 	bl	80064e0 <UART_Receive_IT>
      return;
 8005c88:	e25b      	b.n	8006142 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005c8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	f000 80de 	beq.w	8005e50 <HAL_UART_IRQHandler+0x22c>
 8005c94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c98:	f003 0301 	and.w	r3, r3, #1
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d106      	bne.n	8005cae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005ca0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ca4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	f000 80d1 	beq.w	8005e50 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005cae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cb2:	f003 0301 	and.w	r3, r3, #1
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d00b      	beq.n	8005cd2 <HAL_UART_IRQHandler+0xae>
 8005cba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d005      	beq.n	8005cd2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cca:	f043 0201 	orr.w	r2, r3, #1
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cd6:	f003 0304 	and.w	r3, r3, #4
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d00b      	beq.n	8005cf6 <HAL_UART_IRQHandler+0xd2>
 8005cde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ce2:	f003 0301 	and.w	r3, r3, #1
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d005      	beq.n	8005cf6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cee:	f043 0202 	orr.w	r2, r3, #2
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005cf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cfa:	f003 0302 	and.w	r3, r3, #2
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d00b      	beq.n	8005d1a <HAL_UART_IRQHandler+0xf6>
 8005d02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d06:	f003 0301 	and.w	r3, r3, #1
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d005      	beq.n	8005d1a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d12:	f043 0204 	orr.w	r2, r3, #4
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005d1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d1e:	f003 0308 	and.w	r3, r3, #8
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d011      	beq.n	8005d4a <HAL_UART_IRQHandler+0x126>
 8005d26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d2a:	f003 0320 	and.w	r3, r3, #32
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d105      	bne.n	8005d3e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005d32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d36:	f003 0301 	and.w	r3, r3, #1
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d005      	beq.n	8005d4a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d42:	f043 0208 	orr.w	r2, r3, #8
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	f000 81f2 	beq.w	8006138 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d58:	f003 0320 	and.w	r3, r3, #32
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d008      	beq.n	8005d72 <HAL_UART_IRQHandler+0x14e>
 8005d60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d64:	f003 0320 	and.w	r3, r3, #32
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d002      	beq.n	8005d72 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f000 fbb7 	bl	80064e0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	695b      	ldr	r3, [r3, #20]
 8005d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d7c:	2b40      	cmp	r3, #64	; 0x40
 8005d7e:	bf0c      	ite	eq
 8005d80:	2301      	moveq	r3, #1
 8005d82:	2300      	movne	r3, #0
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d8e:	f003 0308 	and.w	r3, r3, #8
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d103      	bne.n	8005d9e <HAL_UART_IRQHandler+0x17a>
 8005d96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d04f      	beq.n	8005e3e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 fabf 	bl	8006322 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	695b      	ldr	r3, [r3, #20]
 8005daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dae:	2b40      	cmp	r3, #64	; 0x40
 8005db0:	d141      	bne.n	8005e36 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	3314      	adds	r3, #20
 8005db8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005dc0:	e853 3f00 	ldrex	r3, [r3]
 8005dc4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005dc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005dcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dd0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	3314      	adds	r3, #20
 8005dda:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005dde:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005de2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005dea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005dee:	e841 2300 	strex	r3, r2, [r1]
 8005df2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005df6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d1d9      	bne.n	8005db2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d013      	beq.n	8005e2e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e0a:	4a7e      	ldr	r2, [pc, #504]	; (8006004 <HAL_UART_IRQHandler+0x3e0>)
 8005e0c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e12:	4618      	mov	r0, r3
 8005e14:	f7fc faee 	bl	80023f4 <HAL_DMA_Abort_IT>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d016      	beq.n	8005e4c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005e28:	4610      	mov	r0, r2
 8005e2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e2c:	e00e      	b.n	8005e4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 f994 	bl	800615c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e34:	e00a      	b.n	8005e4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f000 f990 	bl	800615c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e3c:	e006      	b.n	8005e4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f000 f98c 	bl	800615c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8005e4a:	e175      	b.n	8006138 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e4c:	bf00      	nop
    return;
 8005e4e:	e173      	b.n	8006138 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	f040 814f 	bne.w	80060f8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005e5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e5e:	f003 0310 	and.w	r3, r3, #16
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	f000 8148 	beq.w	80060f8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005e68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e6c:	f003 0310 	and.w	r3, r3, #16
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	f000 8141 	beq.w	80060f8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005e76:	2300      	movs	r3, #0
 8005e78:	60bb      	str	r3, [r7, #8]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	60bb      	str	r3, [r7, #8]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	60bb      	str	r3, [r7, #8]
 8005e8a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	695b      	ldr	r3, [r3, #20]
 8005e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e96:	2b40      	cmp	r3, #64	; 0x40
 8005e98:	f040 80b6 	bne.w	8006008 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005ea8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	f000 8145 	beq.w	800613c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005eb6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	f080 813e 	bcs.w	800613c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005ec6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ecc:	69db      	ldr	r3, [r3, #28]
 8005ece:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ed2:	f000 8088 	beq.w	8005fe6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	330c      	adds	r3, #12
 8005edc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005ee4:	e853 3f00 	ldrex	r3, [r3]
 8005ee8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005eec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005ef0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ef4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	330c      	adds	r3, #12
 8005efe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005f02:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005f06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f0a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005f0e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005f12:	e841 2300 	strex	r3, r2, [r1]
 8005f16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005f1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d1d9      	bne.n	8005ed6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	3314      	adds	r3, #20
 8005f28:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f2c:	e853 3f00 	ldrex	r3, [r3]
 8005f30:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005f32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f34:	f023 0301 	bic.w	r3, r3, #1
 8005f38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	3314      	adds	r3, #20
 8005f42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005f46:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005f4a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f4c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005f4e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005f52:	e841 2300 	strex	r3, r2, [r1]
 8005f56:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005f58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d1e1      	bne.n	8005f22 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	3314      	adds	r3, #20
 8005f64:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f68:	e853 3f00 	ldrex	r3, [r3]
 8005f6c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005f6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	3314      	adds	r3, #20
 8005f7e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005f82:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005f84:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f86:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005f88:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005f8a:	e841 2300 	strex	r3, r2, [r1]
 8005f8e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005f90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d1e3      	bne.n	8005f5e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2220      	movs	r2, #32
 8005f9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	330c      	adds	r3, #12
 8005faa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fae:	e853 3f00 	ldrex	r3, [r3]
 8005fb2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005fb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fb6:	f023 0310 	bic.w	r3, r3, #16
 8005fba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	330c      	adds	r3, #12
 8005fc4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005fc8:	65ba      	str	r2, [r7, #88]	; 0x58
 8005fca:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fcc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005fce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005fd0:	e841 2300 	strex	r3, r2, [r1]
 8005fd4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005fd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d1e3      	bne.n	8005fa4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f7fc f997 	bl	8002314 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2202      	movs	r2, #2
 8005fea:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	1ad3      	subs	r3, r2, r3
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	4619      	mov	r1, r3
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f000 f8b7 	bl	8006170 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006002:	e09b      	b.n	800613c <HAL_UART_IRQHandler+0x518>
 8006004:	080063e9 	.word	0x080063e9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006010:	b29b      	uxth	r3, r3
 8006012:	1ad3      	subs	r3, r2, r3
 8006014:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800601c:	b29b      	uxth	r3, r3
 800601e:	2b00      	cmp	r3, #0
 8006020:	f000 808e 	beq.w	8006140 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006024:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006028:	2b00      	cmp	r3, #0
 800602a:	f000 8089 	beq.w	8006140 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	330c      	adds	r3, #12
 8006034:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006038:	e853 3f00 	ldrex	r3, [r3]
 800603c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800603e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006040:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006044:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	330c      	adds	r3, #12
 800604e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006052:	647a      	str	r2, [r7, #68]	; 0x44
 8006054:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006056:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006058:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800605a:	e841 2300 	strex	r3, r2, [r1]
 800605e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006062:	2b00      	cmp	r3, #0
 8006064:	d1e3      	bne.n	800602e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	3314      	adds	r3, #20
 800606c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800606e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006070:	e853 3f00 	ldrex	r3, [r3]
 8006074:	623b      	str	r3, [r7, #32]
   return(result);
 8006076:	6a3b      	ldr	r3, [r7, #32]
 8006078:	f023 0301 	bic.w	r3, r3, #1
 800607c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	3314      	adds	r3, #20
 8006086:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800608a:	633a      	str	r2, [r7, #48]	; 0x30
 800608c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800608e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006090:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006092:	e841 2300 	strex	r3, r2, [r1]
 8006096:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800609a:	2b00      	cmp	r3, #0
 800609c:	d1e3      	bne.n	8006066 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2220      	movs	r2, #32
 80060a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	330c      	adds	r3, #12
 80060b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	e853 3f00 	ldrex	r3, [r3]
 80060ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f023 0310 	bic.w	r3, r3, #16
 80060c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	330c      	adds	r3, #12
 80060cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80060d0:	61fa      	str	r2, [r7, #28]
 80060d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d4:	69b9      	ldr	r1, [r7, #24]
 80060d6:	69fa      	ldr	r2, [r7, #28]
 80060d8:	e841 2300 	strex	r3, r2, [r1]
 80060dc:	617b      	str	r3, [r7, #20]
   return(result);
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d1e3      	bne.n	80060ac <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2202      	movs	r2, #2
 80060e8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80060ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80060ee:	4619      	mov	r1, r3
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f000 f83d 	bl	8006170 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80060f6:	e023      	b.n	8006140 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80060f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006100:	2b00      	cmp	r3, #0
 8006102:	d009      	beq.n	8006118 <HAL_UART_IRQHandler+0x4f4>
 8006104:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006108:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800610c:	2b00      	cmp	r3, #0
 800610e:	d003      	beq.n	8006118 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f000 f97d 	bl	8006410 <UART_Transmit_IT>
    return;
 8006116:	e014      	b.n	8006142 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006118:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800611c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006120:	2b00      	cmp	r3, #0
 8006122:	d00e      	beq.n	8006142 <HAL_UART_IRQHandler+0x51e>
 8006124:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800612c:	2b00      	cmp	r3, #0
 800612e:	d008      	beq.n	8006142 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f000 f9bd 	bl	80064b0 <UART_EndTransmit_IT>
    return;
 8006136:	e004      	b.n	8006142 <HAL_UART_IRQHandler+0x51e>
    return;
 8006138:	bf00      	nop
 800613a:	e002      	b.n	8006142 <HAL_UART_IRQHandler+0x51e>
      return;
 800613c:	bf00      	nop
 800613e:	e000      	b.n	8006142 <HAL_UART_IRQHandler+0x51e>
      return;
 8006140:	bf00      	nop
  }
}
 8006142:	37e8      	adds	r7, #232	; 0xe8
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}

08006148 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006150:	bf00      	nop
 8006152:	370c      	adds	r7, #12
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr

0800615c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800615c:	b480      	push	{r7}
 800615e:	b083      	sub	sp, #12
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006164:	bf00      	nop
 8006166:	370c      	adds	r7, #12
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr

08006170 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006170:	b480      	push	{r7}
 8006172:	b083      	sub	sp, #12
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	460b      	mov	r3, r1
 800617a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800617c:	bf00      	nop
 800617e:	370c      	adds	r7, #12
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr

08006188 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b090      	sub	sp, #64	; 0x40
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006194:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d137      	bne.n	8006214 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80061a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061a6:	2200      	movs	r2, #0
 80061a8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80061aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	3314      	adds	r3, #20
 80061b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b4:	e853 3f00 	ldrex	r3, [r3]
 80061b8:	623b      	str	r3, [r7, #32]
   return(result);
 80061ba:	6a3b      	ldr	r3, [r7, #32]
 80061bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80061c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	3314      	adds	r3, #20
 80061c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80061ca:	633a      	str	r2, [r7, #48]	; 0x30
 80061cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80061d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061d2:	e841 2300 	strex	r3, r2, [r1]
 80061d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80061d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d1e5      	bne.n	80061aa <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80061de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	330c      	adds	r3, #12
 80061e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	e853 3f00 	ldrex	r3, [r3]
 80061ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061f4:	637b      	str	r3, [r7, #52]	; 0x34
 80061f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	330c      	adds	r3, #12
 80061fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061fe:	61fa      	str	r2, [r7, #28]
 8006200:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006202:	69b9      	ldr	r1, [r7, #24]
 8006204:	69fa      	ldr	r2, [r7, #28]
 8006206:	e841 2300 	strex	r3, r2, [r1]
 800620a:	617b      	str	r3, [r7, #20]
   return(result);
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d1e5      	bne.n	80061de <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006212:	e002      	b.n	800621a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006214:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006216:	f008 fa03 	bl	800e620 <HAL_UART_TxCpltCallback>
}
 800621a:	bf00      	nop
 800621c:	3740      	adds	r7, #64	; 0x40
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}

08006222 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006222:	b580      	push	{r7, lr}
 8006224:	b084      	sub	sp, #16
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800622e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006230:	68f8      	ldr	r0, [r7, #12]
 8006232:	f7ff ff89 	bl	8006148 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006236:	bf00      	nop
 8006238:	3710      	adds	r7, #16
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}

0800623e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800623e:	b580      	push	{r7, lr}
 8006240:	b084      	sub	sp, #16
 8006242:	af00      	add	r7, sp, #0
 8006244:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006246:	2300      	movs	r3, #0
 8006248:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800624e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	695b      	ldr	r3, [r3, #20]
 8006256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800625a:	2b80      	cmp	r3, #128	; 0x80
 800625c:	bf0c      	ite	eq
 800625e:	2301      	moveq	r3, #1
 8006260:	2300      	movne	r3, #0
 8006262:	b2db      	uxtb	r3, r3
 8006264:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800626c:	b2db      	uxtb	r3, r3
 800626e:	2b21      	cmp	r3, #33	; 0x21
 8006270:	d108      	bne.n	8006284 <UART_DMAError+0x46>
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d005      	beq.n	8006284 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	2200      	movs	r2, #0
 800627c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800627e:	68b8      	ldr	r0, [r7, #8]
 8006280:	f000 f827 	bl	80062d2 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	695b      	ldr	r3, [r3, #20]
 800628a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800628e:	2b40      	cmp	r3, #64	; 0x40
 8006290:	bf0c      	ite	eq
 8006292:	2301      	moveq	r3, #1
 8006294:	2300      	movne	r3, #0
 8006296:	b2db      	uxtb	r3, r3
 8006298:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	2b22      	cmp	r3, #34	; 0x22
 80062a4:	d108      	bne.n	80062b8 <UART_DMAError+0x7a>
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d005      	beq.n	80062b8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	2200      	movs	r2, #0
 80062b0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80062b2:	68b8      	ldr	r0, [r7, #8]
 80062b4:	f000 f835 	bl	8006322 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062bc:	f043 0210 	orr.w	r2, r3, #16
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80062c4:	68b8      	ldr	r0, [r7, #8]
 80062c6:	f7ff ff49 	bl	800615c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062ca:	bf00      	nop
 80062cc:	3710      	adds	r7, #16
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}

080062d2 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80062d2:	b480      	push	{r7}
 80062d4:	b089      	sub	sp, #36	; 0x24
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	330c      	adds	r3, #12
 80062e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	e853 3f00 	ldrex	r3, [r3]
 80062e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80062f0:	61fb      	str	r3, [r7, #28]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	330c      	adds	r3, #12
 80062f8:	69fa      	ldr	r2, [r7, #28]
 80062fa:	61ba      	str	r2, [r7, #24]
 80062fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062fe:	6979      	ldr	r1, [r7, #20]
 8006300:	69ba      	ldr	r2, [r7, #24]
 8006302:	e841 2300 	strex	r3, r2, [r1]
 8006306:	613b      	str	r3, [r7, #16]
   return(result);
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d1e5      	bne.n	80062da <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2220      	movs	r2, #32
 8006312:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8006316:	bf00      	nop
 8006318:	3724      	adds	r7, #36	; 0x24
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr

08006322 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006322:	b480      	push	{r7}
 8006324:	b095      	sub	sp, #84	; 0x54
 8006326:	af00      	add	r7, sp, #0
 8006328:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	330c      	adds	r3, #12
 8006330:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006334:	e853 3f00 	ldrex	r3, [r3]
 8006338:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800633a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800633c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006340:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	330c      	adds	r3, #12
 8006348:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800634a:	643a      	str	r2, [r7, #64]	; 0x40
 800634c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800634e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006350:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006352:	e841 2300 	strex	r3, r2, [r1]
 8006356:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800635a:	2b00      	cmp	r3, #0
 800635c:	d1e5      	bne.n	800632a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	3314      	adds	r3, #20
 8006364:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006366:	6a3b      	ldr	r3, [r7, #32]
 8006368:	e853 3f00 	ldrex	r3, [r3]
 800636c:	61fb      	str	r3, [r7, #28]
   return(result);
 800636e:	69fb      	ldr	r3, [r7, #28]
 8006370:	f023 0301 	bic.w	r3, r3, #1
 8006374:	64bb      	str	r3, [r7, #72]	; 0x48
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	3314      	adds	r3, #20
 800637c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800637e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006380:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006382:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006384:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006386:	e841 2300 	strex	r3, r2, [r1]
 800638a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800638c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638e:	2b00      	cmp	r3, #0
 8006390:	d1e5      	bne.n	800635e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006396:	2b01      	cmp	r3, #1
 8006398:	d119      	bne.n	80063ce <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	330c      	adds	r3, #12
 80063a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	e853 3f00 	ldrex	r3, [r3]
 80063a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	f023 0310 	bic.w	r3, r3, #16
 80063b0:	647b      	str	r3, [r7, #68]	; 0x44
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	330c      	adds	r3, #12
 80063b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063ba:	61ba      	str	r2, [r7, #24]
 80063bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063be:	6979      	ldr	r1, [r7, #20]
 80063c0:	69ba      	ldr	r2, [r7, #24]
 80063c2:	e841 2300 	strex	r3, r2, [r1]
 80063c6:	613b      	str	r3, [r7, #16]
   return(result);
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d1e5      	bne.n	800639a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2220      	movs	r2, #32
 80063d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	631a      	str	r2, [r3, #48]	; 0x30
}
 80063dc:	bf00      	nop
 80063de:	3754      	adds	r7, #84	; 0x54
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr

080063e8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2200      	movs	r2, #0
 80063fa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2200      	movs	r2, #0
 8006400:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006402:	68f8      	ldr	r0, [r7, #12]
 8006404:	f7ff feaa 	bl	800615c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006408:	bf00      	nop
 800640a:	3710      	adds	r7, #16
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}

08006410 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006410:	b480      	push	{r7}
 8006412:	b085      	sub	sp, #20
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800641e:	b2db      	uxtb	r3, r3
 8006420:	2b21      	cmp	r3, #33	; 0x21
 8006422:	d13e      	bne.n	80064a2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800642c:	d114      	bne.n	8006458 <UART_Transmit_IT+0x48>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	691b      	ldr	r3, [r3, #16]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d110      	bne.n	8006458 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6a1b      	ldr	r3, [r3, #32]
 800643a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	881b      	ldrh	r3, [r3, #0]
 8006440:	461a      	mov	r2, r3
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800644a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6a1b      	ldr	r3, [r3, #32]
 8006450:	1c9a      	adds	r2, r3, #2
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	621a      	str	r2, [r3, #32]
 8006456:	e008      	b.n	800646a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6a1b      	ldr	r3, [r3, #32]
 800645c:	1c59      	adds	r1, r3, #1
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	6211      	str	r1, [r2, #32]
 8006462:	781a      	ldrb	r2, [r3, #0]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800646e:	b29b      	uxth	r3, r3
 8006470:	3b01      	subs	r3, #1
 8006472:	b29b      	uxth	r3, r3
 8006474:	687a      	ldr	r2, [r7, #4]
 8006476:	4619      	mov	r1, r3
 8006478:	84d1      	strh	r1, [r2, #38]	; 0x26
 800647a:	2b00      	cmp	r3, #0
 800647c:	d10f      	bne.n	800649e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	68da      	ldr	r2, [r3, #12]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800648c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	68da      	ldr	r2, [r3, #12]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800649c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800649e:	2300      	movs	r3, #0
 80064a0:	e000      	b.n	80064a4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80064a2:	2302      	movs	r3, #2
  }
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3714      	adds	r7, #20
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr

080064b0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b082      	sub	sp, #8
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	68da      	ldr	r2, [r3, #12]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064c6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2220      	movs	r2, #32
 80064cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f008 f8a5 	bl	800e620 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80064d6:	2300      	movs	r3, #0
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3708      	adds	r7, #8
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}

080064e0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b08c      	sub	sp, #48	; 0x30
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	2b22      	cmp	r3, #34	; 0x22
 80064f2:	f040 80ae 	bne.w	8006652 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064fe:	d117      	bne.n	8006530 <UART_Receive_IT+0x50>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	691b      	ldr	r3, [r3, #16]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d113      	bne.n	8006530 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006508:	2300      	movs	r3, #0
 800650a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006510:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	b29b      	uxth	r3, r3
 800651a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800651e:	b29a      	uxth	r2, r3
 8006520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006522:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006528:	1c9a      	adds	r2, r3, #2
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	629a      	str	r2, [r3, #40]	; 0x28
 800652e:	e026      	b.n	800657e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006534:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006536:	2300      	movs	r3, #0
 8006538:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006542:	d007      	beq.n	8006554 <UART_Receive_IT+0x74>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d10a      	bne.n	8006562 <UART_Receive_IT+0x82>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	691b      	ldr	r3, [r3, #16]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d106      	bne.n	8006562 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	b2da      	uxtb	r2, r3
 800655c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800655e:	701a      	strb	r2, [r3, #0]
 8006560:	e008      	b.n	8006574 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	b2db      	uxtb	r3, r3
 800656a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800656e:	b2da      	uxtb	r2, r3
 8006570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006572:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006578:	1c5a      	adds	r2, r3, #1
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006582:	b29b      	uxth	r3, r3
 8006584:	3b01      	subs	r3, #1
 8006586:	b29b      	uxth	r3, r3
 8006588:	687a      	ldr	r2, [r7, #4]
 800658a:	4619      	mov	r1, r3
 800658c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800658e:	2b00      	cmp	r3, #0
 8006590:	d15d      	bne.n	800664e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	68da      	ldr	r2, [r3, #12]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f022 0220 	bic.w	r2, r2, #32
 80065a0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	68da      	ldr	r2, [r3, #12]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80065b0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	695a      	ldr	r2, [r3, #20]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f022 0201 	bic.w	r2, r2, #1
 80065c0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2220      	movs	r2, #32
 80065c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2200      	movs	r2, #0
 80065ce:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d135      	bne.n	8006644 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2200      	movs	r2, #0
 80065dc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	330c      	adds	r3, #12
 80065e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	e853 3f00 	ldrex	r3, [r3]
 80065ec:	613b      	str	r3, [r7, #16]
   return(result);
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	f023 0310 	bic.w	r3, r3, #16
 80065f4:	627b      	str	r3, [r7, #36]	; 0x24
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	330c      	adds	r3, #12
 80065fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065fe:	623a      	str	r2, [r7, #32]
 8006600:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006602:	69f9      	ldr	r1, [r7, #28]
 8006604:	6a3a      	ldr	r2, [r7, #32]
 8006606:	e841 2300 	strex	r3, r2, [r1]
 800660a:	61bb      	str	r3, [r7, #24]
   return(result);
 800660c:	69bb      	ldr	r3, [r7, #24]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d1e5      	bne.n	80065de <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f003 0310 	and.w	r3, r3, #16
 800661c:	2b10      	cmp	r3, #16
 800661e:	d10a      	bne.n	8006636 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006620:	2300      	movs	r3, #0
 8006622:	60fb      	str	r3, [r7, #12]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	60fb      	str	r3, [r7, #12]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	60fb      	str	r3, [r7, #12]
 8006634:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800663a:	4619      	mov	r1, r3
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f7ff fd97 	bl	8006170 <HAL_UARTEx_RxEventCallback>
 8006642:	e002      	b.n	800664a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f007 ffc9 	bl	800e5dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800664a:	2300      	movs	r3, #0
 800664c:	e002      	b.n	8006654 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800664e:	2300      	movs	r3, #0
 8006650:	e000      	b.n	8006654 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006652:	2302      	movs	r3, #2
  }
}
 8006654:	4618      	mov	r0, r3
 8006656:	3730      	adds	r7, #48	; 0x30
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}

0800665c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800665c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006660:	b0c0      	sub	sp, #256	; 0x100
 8006662:	af00      	add	r7, sp, #0
 8006664:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	691b      	ldr	r3, [r3, #16]
 8006670:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006678:	68d9      	ldr	r1, [r3, #12]
 800667a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	ea40 0301 	orr.w	r3, r0, r1
 8006684:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006686:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800668a:	689a      	ldr	r2, [r3, #8]
 800668c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006690:	691b      	ldr	r3, [r3, #16]
 8006692:	431a      	orrs	r2, r3
 8006694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006698:	695b      	ldr	r3, [r3, #20]
 800669a:	431a      	orrs	r2, r3
 800669c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066a0:	69db      	ldr	r3, [r3, #28]
 80066a2:	4313      	orrs	r3, r2
 80066a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80066a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80066b4:	f021 010c 	bic.w	r1, r1, #12
 80066b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80066c2:	430b      	orrs	r3, r1
 80066c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80066c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	695b      	ldr	r3, [r3, #20]
 80066ce:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80066d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066d6:	6999      	ldr	r1, [r3, #24]
 80066d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	ea40 0301 	orr.w	r3, r0, r1
 80066e2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80066e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	4b8f      	ldr	r3, [pc, #572]	; (8006928 <UART_SetConfig+0x2cc>)
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d005      	beq.n	80066fc <UART_SetConfig+0xa0>
 80066f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	4b8d      	ldr	r3, [pc, #564]	; (800692c <UART_SetConfig+0x2d0>)
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d104      	bne.n	8006706 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80066fc:	f7fe f97a 	bl	80049f4 <HAL_RCC_GetPCLK2Freq>
 8006700:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006704:	e003      	b.n	800670e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006706:	f7fe f961 	bl	80049cc <HAL_RCC_GetPCLK1Freq>
 800670a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800670e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006712:	69db      	ldr	r3, [r3, #28]
 8006714:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006718:	f040 810c 	bne.w	8006934 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800671c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006720:	2200      	movs	r2, #0
 8006722:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006726:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800672a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800672e:	4622      	mov	r2, r4
 8006730:	462b      	mov	r3, r5
 8006732:	1891      	adds	r1, r2, r2
 8006734:	65b9      	str	r1, [r7, #88]	; 0x58
 8006736:	415b      	adcs	r3, r3
 8006738:	65fb      	str	r3, [r7, #92]	; 0x5c
 800673a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800673e:	4621      	mov	r1, r4
 8006740:	eb12 0801 	adds.w	r8, r2, r1
 8006744:	4629      	mov	r1, r5
 8006746:	eb43 0901 	adc.w	r9, r3, r1
 800674a:	f04f 0200 	mov.w	r2, #0
 800674e:	f04f 0300 	mov.w	r3, #0
 8006752:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006756:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800675a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800675e:	4690      	mov	r8, r2
 8006760:	4699      	mov	r9, r3
 8006762:	4623      	mov	r3, r4
 8006764:	eb18 0303 	adds.w	r3, r8, r3
 8006768:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800676c:	462b      	mov	r3, r5
 800676e:	eb49 0303 	adc.w	r3, r9, r3
 8006772:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006776:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	2200      	movs	r2, #0
 800677e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006782:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006786:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800678a:	460b      	mov	r3, r1
 800678c:	18db      	adds	r3, r3, r3
 800678e:	653b      	str	r3, [r7, #80]	; 0x50
 8006790:	4613      	mov	r3, r2
 8006792:	eb42 0303 	adc.w	r3, r2, r3
 8006796:	657b      	str	r3, [r7, #84]	; 0x54
 8006798:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800679c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80067a0:	f7f9 fd2e 	bl	8000200 <__aeabi_uldivmod>
 80067a4:	4602      	mov	r2, r0
 80067a6:	460b      	mov	r3, r1
 80067a8:	4b61      	ldr	r3, [pc, #388]	; (8006930 <UART_SetConfig+0x2d4>)
 80067aa:	fba3 2302 	umull	r2, r3, r3, r2
 80067ae:	095b      	lsrs	r3, r3, #5
 80067b0:	011c      	lsls	r4, r3, #4
 80067b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067b6:	2200      	movs	r2, #0
 80067b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80067bc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80067c0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80067c4:	4642      	mov	r2, r8
 80067c6:	464b      	mov	r3, r9
 80067c8:	1891      	adds	r1, r2, r2
 80067ca:	64b9      	str	r1, [r7, #72]	; 0x48
 80067cc:	415b      	adcs	r3, r3
 80067ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80067d4:	4641      	mov	r1, r8
 80067d6:	eb12 0a01 	adds.w	sl, r2, r1
 80067da:	4649      	mov	r1, r9
 80067dc:	eb43 0b01 	adc.w	fp, r3, r1
 80067e0:	f04f 0200 	mov.w	r2, #0
 80067e4:	f04f 0300 	mov.w	r3, #0
 80067e8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80067ec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80067f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80067f4:	4692      	mov	sl, r2
 80067f6:	469b      	mov	fp, r3
 80067f8:	4643      	mov	r3, r8
 80067fa:	eb1a 0303 	adds.w	r3, sl, r3
 80067fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006802:	464b      	mov	r3, r9
 8006804:	eb4b 0303 	adc.w	r3, fp, r3
 8006808:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800680c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006818:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800681c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006820:	460b      	mov	r3, r1
 8006822:	18db      	adds	r3, r3, r3
 8006824:	643b      	str	r3, [r7, #64]	; 0x40
 8006826:	4613      	mov	r3, r2
 8006828:	eb42 0303 	adc.w	r3, r2, r3
 800682c:	647b      	str	r3, [r7, #68]	; 0x44
 800682e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006832:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006836:	f7f9 fce3 	bl	8000200 <__aeabi_uldivmod>
 800683a:	4602      	mov	r2, r0
 800683c:	460b      	mov	r3, r1
 800683e:	4611      	mov	r1, r2
 8006840:	4b3b      	ldr	r3, [pc, #236]	; (8006930 <UART_SetConfig+0x2d4>)
 8006842:	fba3 2301 	umull	r2, r3, r3, r1
 8006846:	095b      	lsrs	r3, r3, #5
 8006848:	2264      	movs	r2, #100	; 0x64
 800684a:	fb02 f303 	mul.w	r3, r2, r3
 800684e:	1acb      	subs	r3, r1, r3
 8006850:	00db      	lsls	r3, r3, #3
 8006852:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006856:	4b36      	ldr	r3, [pc, #216]	; (8006930 <UART_SetConfig+0x2d4>)
 8006858:	fba3 2302 	umull	r2, r3, r3, r2
 800685c:	095b      	lsrs	r3, r3, #5
 800685e:	005b      	lsls	r3, r3, #1
 8006860:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006864:	441c      	add	r4, r3
 8006866:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800686a:	2200      	movs	r2, #0
 800686c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006870:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006874:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006878:	4642      	mov	r2, r8
 800687a:	464b      	mov	r3, r9
 800687c:	1891      	adds	r1, r2, r2
 800687e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006880:	415b      	adcs	r3, r3
 8006882:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006884:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006888:	4641      	mov	r1, r8
 800688a:	1851      	adds	r1, r2, r1
 800688c:	6339      	str	r1, [r7, #48]	; 0x30
 800688e:	4649      	mov	r1, r9
 8006890:	414b      	adcs	r3, r1
 8006892:	637b      	str	r3, [r7, #52]	; 0x34
 8006894:	f04f 0200 	mov.w	r2, #0
 8006898:	f04f 0300 	mov.w	r3, #0
 800689c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80068a0:	4659      	mov	r1, fp
 80068a2:	00cb      	lsls	r3, r1, #3
 80068a4:	4651      	mov	r1, sl
 80068a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068aa:	4651      	mov	r1, sl
 80068ac:	00ca      	lsls	r2, r1, #3
 80068ae:	4610      	mov	r0, r2
 80068b0:	4619      	mov	r1, r3
 80068b2:	4603      	mov	r3, r0
 80068b4:	4642      	mov	r2, r8
 80068b6:	189b      	adds	r3, r3, r2
 80068b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80068bc:	464b      	mov	r3, r9
 80068be:	460a      	mov	r2, r1
 80068c0:	eb42 0303 	adc.w	r3, r2, r3
 80068c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80068c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	2200      	movs	r2, #0
 80068d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80068d4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80068d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80068dc:	460b      	mov	r3, r1
 80068de:	18db      	adds	r3, r3, r3
 80068e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80068e2:	4613      	mov	r3, r2
 80068e4:	eb42 0303 	adc.w	r3, r2, r3
 80068e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80068ee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80068f2:	f7f9 fc85 	bl	8000200 <__aeabi_uldivmod>
 80068f6:	4602      	mov	r2, r0
 80068f8:	460b      	mov	r3, r1
 80068fa:	4b0d      	ldr	r3, [pc, #52]	; (8006930 <UART_SetConfig+0x2d4>)
 80068fc:	fba3 1302 	umull	r1, r3, r3, r2
 8006900:	095b      	lsrs	r3, r3, #5
 8006902:	2164      	movs	r1, #100	; 0x64
 8006904:	fb01 f303 	mul.w	r3, r1, r3
 8006908:	1ad3      	subs	r3, r2, r3
 800690a:	00db      	lsls	r3, r3, #3
 800690c:	3332      	adds	r3, #50	; 0x32
 800690e:	4a08      	ldr	r2, [pc, #32]	; (8006930 <UART_SetConfig+0x2d4>)
 8006910:	fba2 2303 	umull	r2, r3, r2, r3
 8006914:	095b      	lsrs	r3, r3, #5
 8006916:	f003 0207 	and.w	r2, r3, #7
 800691a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4422      	add	r2, r4
 8006922:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006924:	e106      	b.n	8006b34 <UART_SetConfig+0x4d8>
 8006926:	bf00      	nop
 8006928:	40011000 	.word	0x40011000
 800692c:	40011400 	.word	0x40011400
 8006930:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006934:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006938:	2200      	movs	r2, #0
 800693a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800693e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006942:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006946:	4642      	mov	r2, r8
 8006948:	464b      	mov	r3, r9
 800694a:	1891      	adds	r1, r2, r2
 800694c:	6239      	str	r1, [r7, #32]
 800694e:	415b      	adcs	r3, r3
 8006950:	627b      	str	r3, [r7, #36]	; 0x24
 8006952:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006956:	4641      	mov	r1, r8
 8006958:	1854      	adds	r4, r2, r1
 800695a:	4649      	mov	r1, r9
 800695c:	eb43 0501 	adc.w	r5, r3, r1
 8006960:	f04f 0200 	mov.w	r2, #0
 8006964:	f04f 0300 	mov.w	r3, #0
 8006968:	00eb      	lsls	r3, r5, #3
 800696a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800696e:	00e2      	lsls	r2, r4, #3
 8006970:	4614      	mov	r4, r2
 8006972:	461d      	mov	r5, r3
 8006974:	4643      	mov	r3, r8
 8006976:	18e3      	adds	r3, r4, r3
 8006978:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800697c:	464b      	mov	r3, r9
 800697e:	eb45 0303 	adc.w	r3, r5, r3
 8006982:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	2200      	movs	r2, #0
 800698e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006992:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006996:	f04f 0200 	mov.w	r2, #0
 800699a:	f04f 0300 	mov.w	r3, #0
 800699e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80069a2:	4629      	mov	r1, r5
 80069a4:	008b      	lsls	r3, r1, #2
 80069a6:	4621      	mov	r1, r4
 80069a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80069ac:	4621      	mov	r1, r4
 80069ae:	008a      	lsls	r2, r1, #2
 80069b0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80069b4:	f7f9 fc24 	bl	8000200 <__aeabi_uldivmod>
 80069b8:	4602      	mov	r2, r0
 80069ba:	460b      	mov	r3, r1
 80069bc:	4b60      	ldr	r3, [pc, #384]	; (8006b40 <UART_SetConfig+0x4e4>)
 80069be:	fba3 2302 	umull	r2, r3, r3, r2
 80069c2:	095b      	lsrs	r3, r3, #5
 80069c4:	011c      	lsls	r4, r3, #4
 80069c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069ca:	2200      	movs	r2, #0
 80069cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80069d0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80069d4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80069d8:	4642      	mov	r2, r8
 80069da:	464b      	mov	r3, r9
 80069dc:	1891      	adds	r1, r2, r2
 80069de:	61b9      	str	r1, [r7, #24]
 80069e0:	415b      	adcs	r3, r3
 80069e2:	61fb      	str	r3, [r7, #28]
 80069e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80069e8:	4641      	mov	r1, r8
 80069ea:	1851      	adds	r1, r2, r1
 80069ec:	6139      	str	r1, [r7, #16]
 80069ee:	4649      	mov	r1, r9
 80069f0:	414b      	adcs	r3, r1
 80069f2:	617b      	str	r3, [r7, #20]
 80069f4:	f04f 0200 	mov.w	r2, #0
 80069f8:	f04f 0300 	mov.w	r3, #0
 80069fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006a00:	4659      	mov	r1, fp
 8006a02:	00cb      	lsls	r3, r1, #3
 8006a04:	4651      	mov	r1, sl
 8006a06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a0a:	4651      	mov	r1, sl
 8006a0c:	00ca      	lsls	r2, r1, #3
 8006a0e:	4610      	mov	r0, r2
 8006a10:	4619      	mov	r1, r3
 8006a12:	4603      	mov	r3, r0
 8006a14:	4642      	mov	r2, r8
 8006a16:	189b      	adds	r3, r3, r2
 8006a18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006a1c:	464b      	mov	r3, r9
 8006a1e:	460a      	mov	r2, r1
 8006a20:	eb42 0303 	adc.w	r3, r2, r3
 8006a24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	67bb      	str	r3, [r7, #120]	; 0x78
 8006a32:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006a34:	f04f 0200 	mov.w	r2, #0
 8006a38:	f04f 0300 	mov.w	r3, #0
 8006a3c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006a40:	4649      	mov	r1, r9
 8006a42:	008b      	lsls	r3, r1, #2
 8006a44:	4641      	mov	r1, r8
 8006a46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a4a:	4641      	mov	r1, r8
 8006a4c:	008a      	lsls	r2, r1, #2
 8006a4e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006a52:	f7f9 fbd5 	bl	8000200 <__aeabi_uldivmod>
 8006a56:	4602      	mov	r2, r0
 8006a58:	460b      	mov	r3, r1
 8006a5a:	4611      	mov	r1, r2
 8006a5c:	4b38      	ldr	r3, [pc, #224]	; (8006b40 <UART_SetConfig+0x4e4>)
 8006a5e:	fba3 2301 	umull	r2, r3, r3, r1
 8006a62:	095b      	lsrs	r3, r3, #5
 8006a64:	2264      	movs	r2, #100	; 0x64
 8006a66:	fb02 f303 	mul.w	r3, r2, r3
 8006a6a:	1acb      	subs	r3, r1, r3
 8006a6c:	011b      	lsls	r3, r3, #4
 8006a6e:	3332      	adds	r3, #50	; 0x32
 8006a70:	4a33      	ldr	r2, [pc, #204]	; (8006b40 <UART_SetConfig+0x4e4>)
 8006a72:	fba2 2303 	umull	r2, r3, r2, r3
 8006a76:	095b      	lsrs	r3, r3, #5
 8006a78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a7c:	441c      	add	r4, r3
 8006a7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a82:	2200      	movs	r2, #0
 8006a84:	673b      	str	r3, [r7, #112]	; 0x70
 8006a86:	677a      	str	r2, [r7, #116]	; 0x74
 8006a88:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006a8c:	4642      	mov	r2, r8
 8006a8e:	464b      	mov	r3, r9
 8006a90:	1891      	adds	r1, r2, r2
 8006a92:	60b9      	str	r1, [r7, #8]
 8006a94:	415b      	adcs	r3, r3
 8006a96:	60fb      	str	r3, [r7, #12]
 8006a98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006a9c:	4641      	mov	r1, r8
 8006a9e:	1851      	adds	r1, r2, r1
 8006aa0:	6039      	str	r1, [r7, #0]
 8006aa2:	4649      	mov	r1, r9
 8006aa4:	414b      	adcs	r3, r1
 8006aa6:	607b      	str	r3, [r7, #4]
 8006aa8:	f04f 0200 	mov.w	r2, #0
 8006aac:	f04f 0300 	mov.w	r3, #0
 8006ab0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006ab4:	4659      	mov	r1, fp
 8006ab6:	00cb      	lsls	r3, r1, #3
 8006ab8:	4651      	mov	r1, sl
 8006aba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006abe:	4651      	mov	r1, sl
 8006ac0:	00ca      	lsls	r2, r1, #3
 8006ac2:	4610      	mov	r0, r2
 8006ac4:	4619      	mov	r1, r3
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	4642      	mov	r2, r8
 8006aca:	189b      	adds	r3, r3, r2
 8006acc:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ace:	464b      	mov	r3, r9
 8006ad0:	460a      	mov	r2, r1
 8006ad2:	eb42 0303 	adc.w	r3, r2, r3
 8006ad6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	663b      	str	r3, [r7, #96]	; 0x60
 8006ae2:	667a      	str	r2, [r7, #100]	; 0x64
 8006ae4:	f04f 0200 	mov.w	r2, #0
 8006ae8:	f04f 0300 	mov.w	r3, #0
 8006aec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006af0:	4649      	mov	r1, r9
 8006af2:	008b      	lsls	r3, r1, #2
 8006af4:	4641      	mov	r1, r8
 8006af6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006afa:	4641      	mov	r1, r8
 8006afc:	008a      	lsls	r2, r1, #2
 8006afe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006b02:	f7f9 fb7d 	bl	8000200 <__aeabi_uldivmod>
 8006b06:	4602      	mov	r2, r0
 8006b08:	460b      	mov	r3, r1
 8006b0a:	4b0d      	ldr	r3, [pc, #52]	; (8006b40 <UART_SetConfig+0x4e4>)
 8006b0c:	fba3 1302 	umull	r1, r3, r3, r2
 8006b10:	095b      	lsrs	r3, r3, #5
 8006b12:	2164      	movs	r1, #100	; 0x64
 8006b14:	fb01 f303 	mul.w	r3, r1, r3
 8006b18:	1ad3      	subs	r3, r2, r3
 8006b1a:	011b      	lsls	r3, r3, #4
 8006b1c:	3332      	adds	r3, #50	; 0x32
 8006b1e:	4a08      	ldr	r2, [pc, #32]	; (8006b40 <UART_SetConfig+0x4e4>)
 8006b20:	fba2 2303 	umull	r2, r3, r2, r3
 8006b24:	095b      	lsrs	r3, r3, #5
 8006b26:	f003 020f 	and.w	r2, r3, #15
 8006b2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4422      	add	r2, r4
 8006b32:	609a      	str	r2, [r3, #8]
}
 8006b34:	bf00      	nop
 8006b36:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b40:	51eb851f 	.word	0x51eb851f

08006b44 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006b44:	b084      	sub	sp, #16
 8006b46:	b580      	push	{r7, lr}
 8006b48:	b084      	sub	sp, #16
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
 8006b4e:	f107 001c 	add.w	r0, r7, #28
 8006b52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006b56:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d123      	bne.n	8006ba6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b62:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	68db      	ldr	r3, [r3, #12]
 8006b6e:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006b72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	68db      	ldr	r3, [r3, #12]
 8006b7e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006b86:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	d105      	bne.n	8006b9a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	68db      	ldr	r3, [r3, #12]
 8006b92:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f001 fae2 	bl	8008164 <USB_CoreReset>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	73fb      	strb	r3, [r7, #15]
 8006ba4:	e01b      	b.n	8006bde <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	68db      	ldr	r3, [r3, #12]
 8006baa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f001 fad6 	bl	8008164 <USB_CoreReset>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006bbc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d106      	bne.n	8006bd2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bc8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	639a      	str	r2, [r3, #56]	; 0x38
 8006bd0:	e005      	b.n	8006bde <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bd6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006bde:	7fbb      	ldrb	r3, [r7, #30]
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d10b      	bne.n	8006bfc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	f043 0206 	orr.w	r2, r3, #6
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	f043 0220 	orr.w	r2, r3, #32
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3710      	adds	r7, #16
 8006c02:	46bd      	mov	sp, r7
 8006c04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c08:	b004      	add	sp, #16
 8006c0a:	4770      	bx	lr

08006c0c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b087      	sub	sp, #28
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	60f8      	str	r0, [r7, #12]
 8006c14:	60b9      	str	r1, [r7, #8]
 8006c16:	4613      	mov	r3, r2
 8006c18:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006c1a:	79fb      	ldrb	r3, [r7, #7]
 8006c1c:	2b02      	cmp	r3, #2
 8006c1e:	d165      	bne.n	8006cec <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	4a41      	ldr	r2, [pc, #260]	; (8006d28 <USB_SetTurnaroundTime+0x11c>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d906      	bls.n	8006c36 <USB_SetTurnaroundTime+0x2a>
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	4a40      	ldr	r2, [pc, #256]	; (8006d2c <USB_SetTurnaroundTime+0x120>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d202      	bcs.n	8006c36 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006c30:	230f      	movs	r3, #15
 8006c32:	617b      	str	r3, [r7, #20]
 8006c34:	e062      	b.n	8006cfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	4a3c      	ldr	r2, [pc, #240]	; (8006d2c <USB_SetTurnaroundTime+0x120>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d306      	bcc.n	8006c4c <USB_SetTurnaroundTime+0x40>
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	4a3b      	ldr	r2, [pc, #236]	; (8006d30 <USB_SetTurnaroundTime+0x124>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d202      	bcs.n	8006c4c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006c46:	230e      	movs	r3, #14
 8006c48:	617b      	str	r3, [r7, #20]
 8006c4a:	e057      	b.n	8006cfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	4a38      	ldr	r2, [pc, #224]	; (8006d30 <USB_SetTurnaroundTime+0x124>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d306      	bcc.n	8006c62 <USB_SetTurnaroundTime+0x56>
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	4a37      	ldr	r2, [pc, #220]	; (8006d34 <USB_SetTurnaroundTime+0x128>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d202      	bcs.n	8006c62 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006c5c:	230d      	movs	r3, #13
 8006c5e:	617b      	str	r3, [r7, #20]
 8006c60:	e04c      	b.n	8006cfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	4a33      	ldr	r2, [pc, #204]	; (8006d34 <USB_SetTurnaroundTime+0x128>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d306      	bcc.n	8006c78 <USB_SetTurnaroundTime+0x6c>
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	4a32      	ldr	r2, [pc, #200]	; (8006d38 <USB_SetTurnaroundTime+0x12c>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d802      	bhi.n	8006c78 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006c72:	230c      	movs	r3, #12
 8006c74:	617b      	str	r3, [r7, #20]
 8006c76:	e041      	b.n	8006cfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	4a2f      	ldr	r2, [pc, #188]	; (8006d38 <USB_SetTurnaroundTime+0x12c>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d906      	bls.n	8006c8e <USB_SetTurnaroundTime+0x82>
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	4a2e      	ldr	r2, [pc, #184]	; (8006d3c <USB_SetTurnaroundTime+0x130>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d802      	bhi.n	8006c8e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006c88:	230b      	movs	r3, #11
 8006c8a:	617b      	str	r3, [r7, #20]
 8006c8c:	e036      	b.n	8006cfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	4a2a      	ldr	r2, [pc, #168]	; (8006d3c <USB_SetTurnaroundTime+0x130>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d906      	bls.n	8006ca4 <USB_SetTurnaroundTime+0x98>
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	4a29      	ldr	r2, [pc, #164]	; (8006d40 <USB_SetTurnaroundTime+0x134>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d802      	bhi.n	8006ca4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006c9e:	230a      	movs	r3, #10
 8006ca0:	617b      	str	r3, [r7, #20]
 8006ca2:	e02b      	b.n	8006cfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	4a26      	ldr	r2, [pc, #152]	; (8006d40 <USB_SetTurnaroundTime+0x134>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d906      	bls.n	8006cba <USB_SetTurnaroundTime+0xae>
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	4a25      	ldr	r2, [pc, #148]	; (8006d44 <USB_SetTurnaroundTime+0x138>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d202      	bcs.n	8006cba <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006cb4:	2309      	movs	r3, #9
 8006cb6:	617b      	str	r3, [r7, #20]
 8006cb8:	e020      	b.n	8006cfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	4a21      	ldr	r2, [pc, #132]	; (8006d44 <USB_SetTurnaroundTime+0x138>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d306      	bcc.n	8006cd0 <USB_SetTurnaroundTime+0xc4>
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	4a20      	ldr	r2, [pc, #128]	; (8006d48 <USB_SetTurnaroundTime+0x13c>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d802      	bhi.n	8006cd0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006cca:	2308      	movs	r3, #8
 8006ccc:	617b      	str	r3, [r7, #20]
 8006cce:	e015      	b.n	8006cfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	4a1d      	ldr	r2, [pc, #116]	; (8006d48 <USB_SetTurnaroundTime+0x13c>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d906      	bls.n	8006ce6 <USB_SetTurnaroundTime+0xda>
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	4a1c      	ldr	r2, [pc, #112]	; (8006d4c <USB_SetTurnaroundTime+0x140>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d202      	bcs.n	8006ce6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006ce0:	2307      	movs	r3, #7
 8006ce2:	617b      	str	r3, [r7, #20]
 8006ce4:	e00a      	b.n	8006cfc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006ce6:	2306      	movs	r3, #6
 8006ce8:	617b      	str	r3, [r7, #20]
 8006cea:	e007      	b.n	8006cfc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006cec:	79fb      	ldrb	r3, [r7, #7]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d102      	bne.n	8006cf8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006cf2:	2309      	movs	r3, #9
 8006cf4:	617b      	str	r3, [r7, #20]
 8006cf6:	e001      	b.n	8006cfc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006cf8:	2309      	movs	r3, #9
 8006cfa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	68db      	ldr	r3, [r3, #12]
 8006d00:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	68da      	ldr	r2, [r3, #12]
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	029b      	lsls	r3, r3, #10
 8006d10:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006d14:	431a      	orrs	r2, r3
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006d1a:	2300      	movs	r3, #0
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	371c      	adds	r7, #28
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr
 8006d28:	00d8acbf 	.word	0x00d8acbf
 8006d2c:	00e4e1c0 	.word	0x00e4e1c0
 8006d30:	00f42400 	.word	0x00f42400
 8006d34:	01067380 	.word	0x01067380
 8006d38:	011a499f 	.word	0x011a499f
 8006d3c:	01312cff 	.word	0x01312cff
 8006d40:	014ca43f 	.word	0x014ca43f
 8006d44:	016e3600 	.word	0x016e3600
 8006d48:	01a6ab1f 	.word	0x01a6ab1f
 8006d4c:	01e84800 	.word	0x01e84800

08006d50 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b083      	sub	sp, #12
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	f043 0201 	orr.w	r2, r3, #1
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006d64:	2300      	movs	r3, #0
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	370c      	adds	r7, #12
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d70:	4770      	bx	lr

08006d72 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d72:	b480      	push	{r7}
 8006d74:	b083      	sub	sp, #12
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	689b      	ldr	r3, [r3, #8]
 8006d7e:	f023 0201 	bic.w	r2, r3, #1
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006d86:	2300      	movs	r3, #0
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	370c      	adds	r7, #12
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr

08006d94 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b084      	sub	sp, #16
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
 8006d9c:	460b      	mov	r3, r1
 8006d9e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006da0:	2300      	movs	r3, #0
 8006da2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	68db      	ldr	r3, [r3, #12]
 8006da8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006db0:	78fb      	ldrb	r3, [r7, #3]
 8006db2:	2b01      	cmp	r3, #1
 8006db4:	d115      	bne.n	8006de2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	68db      	ldr	r3, [r3, #12]
 8006dba:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006dc2:	200a      	movs	r0, #10
 8006dc4:	f7fa fd66 	bl	8001894 <HAL_Delay>
      ms += 10U;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	330a      	adds	r3, #10
 8006dcc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f001 f939 	bl	8008046 <USB_GetMode>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	d01e      	beq.n	8006e18 <USB_SetCurrentMode+0x84>
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2bc7      	cmp	r3, #199	; 0xc7
 8006dde:	d9f0      	bls.n	8006dc2 <USB_SetCurrentMode+0x2e>
 8006de0:	e01a      	b.n	8006e18 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006de2:	78fb      	ldrb	r3, [r7, #3]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d115      	bne.n	8006e14 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	68db      	ldr	r3, [r3, #12]
 8006dec:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006df4:	200a      	movs	r0, #10
 8006df6:	f7fa fd4d 	bl	8001894 <HAL_Delay>
      ms += 10U;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	330a      	adds	r3, #10
 8006dfe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f001 f920 	bl	8008046 <USB_GetMode>
 8006e06:	4603      	mov	r3, r0
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d005      	beq.n	8006e18 <USB_SetCurrentMode+0x84>
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2bc7      	cmp	r3, #199	; 0xc7
 8006e10:	d9f0      	bls.n	8006df4 <USB_SetCurrentMode+0x60>
 8006e12:	e001      	b.n	8006e18 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006e14:	2301      	movs	r3, #1
 8006e16:	e005      	b.n	8006e24 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2bc8      	cmp	r3, #200	; 0xc8
 8006e1c:	d101      	bne.n	8006e22 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	e000      	b.n	8006e24 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006e22:	2300      	movs	r3, #0
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3710      	adds	r7, #16
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}

08006e2c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006e2c:	b084      	sub	sp, #16
 8006e2e:	b580      	push	{r7, lr}
 8006e30:	b086      	sub	sp, #24
 8006e32:	af00      	add	r7, sp, #0
 8006e34:	6078      	str	r0, [r7, #4]
 8006e36:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006e3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006e46:	2300      	movs	r3, #0
 8006e48:	613b      	str	r3, [r7, #16]
 8006e4a:	e009      	b.n	8006e60 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006e4c:	687a      	ldr	r2, [r7, #4]
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	3340      	adds	r3, #64	; 0x40
 8006e52:	009b      	lsls	r3, r3, #2
 8006e54:	4413      	add	r3, r2
 8006e56:	2200      	movs	r2, #0
 8006e58:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	3301      	adds	r3, #1
 8006e5e:	613b      	str	r3, [r7, #16]
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	2b0e      	cmp	r3, #14
 8006e64:	d9f2      	bls.n	8006e4c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006e66:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d11c      	bne.n	8006ea8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	68fa      	ldr	r2, [r7, #12]
 8006e78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e7c:	f043 0302 	orr.w	r3, r3, #2
 8006e80:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e86:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e92:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e9e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	639a      	str	r2, [r3, #56]	; 0x38
 8006ea6:	e00b      	b.n	8006ec0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eac:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eb8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006ec6:	461a      	mov	r2, r3
 8006ec8:	2300      	movs	r3, #0
 8006eca:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006ecc:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	d10d      	bne.n	8006ef0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006ed4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d104      	bne.n	8006ee6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006edc:	2100      	movs	r1, #0
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f000 f968 	bl	80071b4 <USB_SetDevSpeed>
 8006ee4:	e008      	b.n	8006ef8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006ee6:	2101      	movs	r1, #1
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f000 f963 	bl	80071b4 <USB_SetDevSpeed>
 8006eee:	e003      	b.n	8006ef8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006ef0:	2103      	movs	r1, #3
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f000 f95e 	bl	80071b4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006ef8:	2110      	movs	r1, #16
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f000 f8fa 	bl	80070f4 <USB_FlushTxFifo>
 8006f00:	4603      	mov	r3, r0
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d001      	beq.n	8006f0a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8006f06:	2301      	movs	r3, #1
 8006f08:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 f924 	bl	8007158 <USB_FlushRxFifo>
 8006f10:	4603      	mov	r3, r0
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d001      	beq.n	8006f1a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8006f16:	2301      	movs	r3, #1
 8006f18:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f20:	461a      	mov	r2, r3
 8006f22:	2300      	movs	r3, #0
 8006f24:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	2300      	movs	r3, #0
 8006f30:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f38:	461a      	mov	r2, r3
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f3e:	2300      	movs	r3, #0
 8006f40:	613b      	str	r3, [r7, #16]
 8006f42:	e043      	b.n	8006fcc <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	015a      	lsls	r2, r3, #5
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	4413      	add	r3, r2
 8006f4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f5a:	d118      	bne.n	8006f8e <USB_DevInit+0x162>
    {
      if (i == 0U)
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d10a      	bne.n	8006f78 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	015a      	lsls	r2, r3, #5
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	4413      	add	r3, r2
 8006f6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f6e:	461a      	mov	r2, r3
 8006f70:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006f74:	6013      	str	r3, [r2, #0]
 8006f76:	e013      	b.n	8006fa0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	015a      	lsls	r2, r3, #5
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	4413      	add	r3, r2
 8006f80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f84:	461a      	mov	r2, r3
 8006f86:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006f8a:	6013      	str	r3, [r2, #0]
 8006f8c:	e008      	b.n	8006fa0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	015a      	lsls	r2, r3, #5
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	4413      	add	r3, r2
 8006f96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f9a:	461a      	mov	r2, r3
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	015a      	lsls	r2, r3, #5
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	4413      	add	r3, r2
 8006fa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fac:	461a      	mov	r2, r3
 8006fae:	2300      	movs	r3, #0
 8006fb0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	015a      	lsls	r2, r3, #5
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	4413      	add	r3, r2
 8006fba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006fc4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	3301      	adds	r3, #1
 8006fca:	613b      	str	r3, [r7, #16]
 8006fcc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006fd0:	461a      	mov	r2, r3
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d3b5      	bcc.n	8006f44 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006fd8:	2300      	movs	r3, #0
 8006fda:	613b      	str	r3, [r7, #16]
 8006fdc:	e043      	b.n	8007066 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	015a      	lsls	r2, r3, #5
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	4413      	add	r3, r2
 8006fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ff0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ff4:	d118      	bne.n	8007028 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d10a      	bne.n	8007012 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	015a      	lsls	r2, r3, #5
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	4413      	add	r3, r2
 8007004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007008:	461a      	mov	r2, r3
 800700a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800700e:	6013      	str	r3, [r2, #0]
 8007010:	e013      	b.n	800703a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	015a      	lsls	r2, r3, #5
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	4413      	add	r3, r2
 800701a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800701e:	461a      	mov	r2, r3
 8007020:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007024:	6013      	str	r3, [r2, #0]
 8007026:	e008      	b.n	800703a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	015a      	lsls	r2, r3, #5
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	4413      	add	r3, r2
 8007030:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007034:	461a      	mov	r2, r3
 8007036:	2300      	movs	r3, #0
 8007038:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	015a      	lsls	r2, r3, #5
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	4413      	add	r3, r2
 8007042:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007046:	461a      	mov	r2, r3
 8007048:	2300      	movs	r3, #0
 800704a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	015a      	lsls	r2, r3, #5
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	4413      	add	r3, r2
 8007054:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007058:	461a      	mov	r2, r3
 800705a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800705e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	3301      	adds	r3, #1
 8007064:	613b      	str	r3, [r7, #16]
 8007066:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800706a:	461a      	mov	r2, r3
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	4293      	cmp	r3, r2
 8007070:	d3b5      	bcc.n	8006fde <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007078:	691b      	ldr	r3, [r3, #16]
 800707a:	68fa      	ldr	r2, [r7, #12]
 800707c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007080:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007084:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2200      	movs	r2, #0
 800708a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007092:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007094:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007098:	2b00      	cmp	r3, #0
 800709a:	d105      	bne.n	80070a8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	699b      	ldr	r3, [r3, #24]
 80070a0:	f043 0210 	orr.w	r2, r3, #16
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	699a      	ldr	r2, [r3, #24]
 80070ac:	4b10      	ldr	r3, [pc, #64]	; (80070f0 <USB_DevInit+0x2c4>)
 80070ae:	4313      	orrs	r3, r2
 80070b0:	687a      	ldr	r2, [r7, #4]
 80070b2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80070b4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d005      	beq.n	80070c8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	699b      	ldr	r3, [r3, #24]
 80070c0:	f043 0208 	orr.w	r2, r3, #8
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80070c8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d107      	bne.n	80070e0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	699b      	ldr	r3, [r3, #24]
 80070d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80070d8:	f043 0304 	orr.w	r3, r3, #4
 80070dc:	687a      	ldr	r2, [r7, #4]
 80070de:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80070e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3718      	adds	r7, #24
 80070e6:	46bd      	mov	sp, r7
 80070e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80070ec:	b004      	add	sp, #16
 80070ee:	4770      	bx	lr
 80070f0:	803c3800 	.word	0x803c3800

080070f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b085      	sub	sp, #20
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80070fe:	2300      	movs	r3, #0
 8007100:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	3301      	adds	r3, #1
 8007106:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800710e:	d901      	bls.n	8007114 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007110:	2303      	movs	r3, #3
 8007112:	e01b      	b.n	800714c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	691b      	ldr	r3, [r3, #16]
 8007118:	2b00      	cmp	r3, #0
 800711a:	daf2      	bge.n	8007102 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800711c:	2300      	movs	r3, #0
 800711e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	019b      	lsls	r3, r3, #6
 8007124:	f043 0220 	orr.w	r2, r3, #32
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	3301      	adds	r3, #1
 8007130:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007138:	d901      	bls.n	800713e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800713a:	2303      	movs	r3, #3
 800713c:	e006      	b.n	800714c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	691b      	ldr	r3, [r3, #16]
 8007142:	f003 0320 	and.w	r3, r3, #32
 8007146:	2b20      	cmp	r3, #32
 8007148:	d0f0      	beq.n	800712c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800714a:	2300      	movs	r3, #0
}
 800714c:	4618      	mov	r0, r3
 800714e:	3714      	adds	r7, #20
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr

08007158 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007158:	b480      	push	{r7}
 800715a:	b085      	sub	sp, #20
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007160:	2300      	movs	r3, #0
 8007162:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	3301      	adds	r3, #1
 8007168:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007170:	d901      	bls.n	8007176 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007172:	2303      	movs	r3, #3
 8007174:	e018      	b.n	80071a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	691b      	ldr	r3, [r3, #16]
 800717a:	2b00      	cmp	r3, #0
 800717c:	daf2      	bge.n	8007164 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800717e:	2300      	movs	r3, #0
 8007180:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2210      	movs	r2, #16
 8007186:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	3301      	adds	r3, #1
 800718c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007194:	d901      	bls.n	800719a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007196:	2303      	movs	r3, #3
 8007198:	e006      	b.n	80071a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	691b      	ldr	r3, [r3, #16]
 800719e:	f003 0310 	and.w	r3, r3, #16
 80071a2:	2b10      	cmp	r3, #16
 80071a4:	d0f0      	beq.n	8007188 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80071a6:	2300      	movs	r3, #0
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3714      	adds	r7, #20
 80071ac:	46bd      	mov	sp, r7
 80071ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b2:	4770      	bx	lr

080071b4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b085      	sub	sp, #20
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
 80071bc:	460b      	mov	r3, r1
 80071be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071ca:	681a      	ldr	r2, [r3, #0]
 80071cc:	78fb      	ldrb	r3, [r7, #3]
 80071ce:	68f9      	ldr	r1, [r7, #12]
 80071d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80071d4:	4313      	orrs	r3, r2
 80071d6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80071d8:	2300      	movs	r3, #0
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3714      	adds	r7, #20
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr

080071e6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80071e6:	b480      	push	{r7}
 80071e8:	b087      	sub	sp, #28
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	f003 0306 	and.w	r3, r3, #6
 80071fe:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d102      	bne.n	800720c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007206:	2300      	movs	r3, #0
 8007208:	75fb      	strb	r3, [r7, #23]
 800720a:	e00a      	b.n	8007222 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2b02      	cmp	r3, #2
 8007210:	d002      	beq.n	8007218 <USB_GetDevSpeed+0x32>
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2b06      	cmp	r3, #6
 8007216:	d102      	bne.n	800721e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007218:	2302      	movs	r3, #2
 800721a:	75fb      	strb	r3, [r7, #23]
 800721c:	e001      	b.n	8007222 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800721e:	230f      	movs	r3, #15
 8007220:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007222:	7dfb      	ldrb	r3, [r7, #23]
}
 8007224:	4618      	mov	r0, r3
 8007226:	371c      	adds	r7, #28
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr

08007230 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007230:	b480      	push	{r7}
 8007232:	b085      	sub	sp, #20
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	781b      	ldrb	r3, [r3, #0]
 8007242:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	785b      	ldrb	r3, [r3, #1]
 8007248:	2b01      	cmp	r3, #1
 800724a:	d13a      	bne.n	80072c2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007252:	69da      	ldr	r2, [r3, #28]
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	781b      	ldrb	r3, [r3, #0]
 8007258:	f003 030f 	and.w	r3, r3, #15
 800725c:	2101      	movs	r1, #1
 800725e:	fa01 f303 	lsl.w	r3, r1, r3
 8007262:	b29b      	uxth	r3, r3
 8007264:	68f9      	ldr	r1, [r7, #12]
 8007266:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800726a:	4313      	orrs	r3, r2
 800726c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	015a      	lsls	r2, r3, #5
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	4413      	add	r3, r2
 8007276:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007280:	2b00      	cmp	r3, #0
 8007282:	d155      	bne.n	8007330 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	015a      	lsls	r2, r3, #5
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	4413      	add	r3, r2
 800728c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	689b      	ldr	r3, [r3, #8]
 8007296:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	791b      	ldrb	r3, [r3, #4]
 800729e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80072a0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	059b      	lsls	r3, r3, #22
 80072a6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80072a8:	4313      	orrs	r3, r2
 80072aa:	68ba      	ldr	r2, [r7, #8]
 80072ac:	0151      	lsls	r1, r2, #5
 80072ae:	68fa      	ldr	r2, [r7, #12]
 80072b0:	440a      	add	r2, r1
 80072b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072be:	6013      	str	r3, [r2, #0]
 80072c0:	e036      	b.n	8007330 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072c8:	69da      	ldr	r2, [r3, #28]
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	781b      	ldrb	r3, [r3, #0]
 80072ce:	f003 030f 	and.w	r3, r3, #15
 80072d2:	2101      	movs	r1, #1
 80072d4:	fa01 f303 	lsl.w	r3, r1, r3
 80072d8:	041b      	lsls	r3, r3, #16
 80072da:	68f9      	ldr	r1, [r7, #12]
 80072dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072e0:	4313      	orrs	r3, r2
 80072e2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	015a      	lsls	r2, r3, #5
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	4413      	add	r3, r2
 80072ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d11a      	bne.n	8007330 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	015a      	lsls	r2, r3, #5
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	4413      	add	r3, r2
 8007302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007306:	681a      	ldr	r2, [r3, #0]
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	689b      	ldr	r3, [r3, #8]
 800730c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	791b      	ldrb	r3, [r3, #4]
 8007314:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007316:	430b      	orrs	r3, r1
 8007318:	4313      	orrs	r3, r2
 800731a:	68ba      	ldr	r2, [r7, #8]
 800731c:	0151      	lsls	r1, r2, #5
 800731e:	68fa      	ldr	r2, [r7, #12]
 8007320:	440a      	add	r2, r1
 8007322:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007326:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800732a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800732e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007330:	2300      	movs	r3, #0
}
 8007332:	4618      	mov	r0, r3
 8007334:	3714      	adds	r7, #20
 8007336:	46bd      	mov	sp, r7
 8007338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733c:	4770      	bx	lr
	...

08007340 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007340:	b480      	push	{r7}
 8007342:	b085      	sub	sp, #20
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
 8007348:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	781b      	ldrb	r3, [r3, #0]
 8007352:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	785b      	ldrb	r3, [r3, #1]
 8007358:	2b01      	cmp	r3, #1
 800735a:	d161      	bne.n	8007420 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	015a      	lsls	r2, r3, #5
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	4413      	add	r3, r2
 8007364:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800736e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007372:	d11f      	bne.n	80073b4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	015a      	lsls	r2, r3, #5
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	4413      	add	r3, r2
 800737c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	68ba      	ldr	r2, [r7, #8]
 8007384:	0151      	lsls	r1, r2, #5
 8007386:	68fa      	ldr	r2, [r7, #12]
 8007388:	440a      	add	r2, r1
 800738a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800738e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007392:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	015a      	lsls	r2, r3, #5
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	4413      	add	r3, r2
 800739c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	68ba      	ldr	r2, [r7, #8]
 80073a4:	0151      	lsls	r1, r2, #5
 80073a6:	68fa      	ldr	r2, [r7, #12]
 80073a8:	440a      	add	r2, r1
 80073aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80073b2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	f003 030f 	and.w	r3, r3, #15
 80073c4:	2101      	movs	r1, #1
 80073c6:	fa01 f303 	lsl.w	r3, r1, r3
 80073ca:	b29b      	uxth	r3, r3
 80073cc:	43db      	mvns	r3, r3
 80073ce:	68f9      	ldr	r1, [r7, #12]
 80073d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80073d4:	4013      	ands	r3, r2
 80073d6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073de:	69da      	ldr	r2, [r3, #28]
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	781b      	ldrb	r3, [r3, #0]
 80073e4:	f003 030f 	and.w	r3, r3, #15
 80073e8:	2101      	movs	r1, #1
 80073ea:	fa01 f303 	lsl.w	r3, r1, r3
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	43db      	mvns	r3, r3
 80073f2:	68f9      	ldr	r1, [r7, #12]
 80073f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80073f8:	4013      	ands	r3, r2
 80073fa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	015a      	lsls	r2, r3, #5
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	4413      	add	r3, r2
 8007404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	0159      	lsls	r1, r3, #5
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	440b      	add	r3, r1
 8007412:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007416:	4619      	mov	r1, r3
 8007418:	4b35      	ldr	r3, [pc, #212]	; (80074f0 <USB_DeactivateEndpoint+0x1b0>)
 800741a:	4013      	ands	r3, r2
 800741c:	600b      	str	r3, [r1, #0]
 800741e:	e060      	b.n	80074e2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	015a      	lsls	r2, r3, #5
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	4413      	add	r3, r2
 8007428:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007432:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007436:	d11f      	bne.n	8007478 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	015a      	lsls	r2, r3, #5
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	4413      	add	r3, r2
 8007440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	68ba      	ldr	r2, [r7, #8]
 8007448:	0151      	lsls	r1, r2, #5
 800744a:	68fa      	ldr	r2, [r7, #12]
 800744c:	440a      	add	r2, r1
 800744e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007452:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007456:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	015a      	lsls	r2, r3, #5
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	4413      	add	r3, r2
 8007460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	68ba      	ldr	r2, [r7, #8]
 8007468:	0151      	lsls	r1, r2, #5
 800746a:	68fa      	ldr	r2, [r7, #12]
 800746c:	440a      	add	r2, r1
 800746e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007472:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007476:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800747e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	781b      	ldrb	r3, [r3, #0]
 8007484:	f003 030f 	and.w	r3, r3, #15
 8007488:	2101      	movs	r1, #1
 800748a:	fa01 f303 	lsl.w	r3, r1, r3
 800748e:	041b      	lsls	r3, r3, #16
 8007490:	43db      	mvns	r3, r3
 8007492:	68f9      	ldr	r1, [r7, #12]
 8007494:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007498:	4013      	ands	r3, r2
 800749a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074a2:	69da      	ldr	r2, [r3, #28]
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	781b      	ldrb	r3, [r3, #0]
 80074a8:	f003 030f 	and.w	r3, r3, #15
 80074ac:	2101      	movs	r1, #1
 80074ae:	fa01 f303 	lsl.w	r3, r1, r3
 80074b2:	041b      	lsls	r3, r3, #16
 80074b4:	43db      	mvns	r3, r3
 80074b6:	68f9      	ldr	r1, [r7, #12]
 80074b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80074bc:	4013      	ands	r3, r2
 80074be:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	015a      	lsls	r2, r3, #5
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	4413      	add	r3, r2
 80074c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074cc:	681a      	ldr	r2, [r3, #0]
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	0159      	lsls	r1, r3, #5
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	440b      	add	r3, r1
 80074d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074da:	4619      	mov	r1, r3
 80074dc:	4b05      	ldr	r3, [pc, #20]	; (80074f4 <USB_DeactivateEndpoint+0x1b4>)
 80074de:	4013      	ands	r3, r2
 80074e0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80074e2:	2300      	movs	r3, #0
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3714      	adds	r7, #20
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr
 80074f0:	ec337800 	.word	0xec337800
 80074f4:	eff37800 	.word	0xeff37800

080074f8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b08a      	sub	sp, #40	; 0x28
 80074fc:	af02      	add	r7, sp, #8
 80074fe:	60f8      	str	r0, [r7, #12]
 8007500:	60b9      	str	r1, [r7, #8]
 8007502:	4613      	mov	r3, r2
 8007504:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	781b      	ldrb	r3, [r3, #0]
 800750e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	785b      	ldrb	r3, [r3, #1]
 8007514:	2b01      	cmp	r3, #1
 8007516:	f040 817a 	bne.w	800780e <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	691b      	ldr	r3, [r3, #16]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d132      	bne.n	8007588 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007522:	69bb      	ldr	r3, [r7, #24]
 8007524:	015a      	lsls	r2, r3, #5
 8007526:	69fb      	ldr	r3, [r7, #28]
 8007528:	4413      	add	r3, r2
 800752a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800752e:	691b      	ldr	r3, [r3, #16]
 8007530:	69ba      	ldr	r2, [r7, #24]
 8007532:	0151      	lsls	r1, r2, #5
 8007534:	69fa      	ldr	r2, [r7, #28]
 8007536:	440a      	add	r2, r1
 8007538:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800753c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007540:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007544:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007546:	69bb      	ldr	r3, [r7, #24]
 8007548:	015a      	lsls	r2, r3, #5
 800754a:	69fb      	ldr	r3, [r7, #28]
 800754c:	4413      	add	r3, r2
 800754e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007552:	691b      	ldr	r3, [r3, #16]
 8007554:	69ba      	ldr	r2, [r7, #24]
 8007556:	0151      	lsls	r1, r2, #5
 8007558:	69fa      	ldr	r2, [r7, #28]
 800755a:	440a      	add	r2, r1
 800755c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007560:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007564:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007566:	69bb      	ldr	r3, [r7, #24]
 8007568:	015a      	lsls	r2, r3, #5
 800756a:	69fb      	ldr	r3, [r7, #28]
 800756c:	4413      	add	r3, r2
 800756e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007572:	691b      	ldr	r3, [r3, #16]
 8007574:	69ba      	ldr	r2, [r7, #24]
 8007576:	0151      	lsls	r1, r2, #5
 8007578:	69fa      	ldr	r2, [r7, #28]
 800757a:	440a      	add	r2, r1
 800757c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007580:	0cdb      	lsrs	r3, r3, #19
 8007582:	04db      	lsls	r3, r3, #19
 8007584:	6113      	str	r3, [r2, #16]
 8007586:	e092      	b.n	80076ae <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007588:	69bb      	ldr	r3, [r7, #24]
 800758a:	015a      	lsls	r2, r3, #5
 800758c:	69fb      	ldr	r3, [r7, #28]
 800758e:	4413      	add	r3, r2
 8007590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007594:	691b      	ldr	r3, [r3, #16]
 8007596:	69ba      	ldr	r2, [r7, #24]
 8007598:	0151      	lsls	r1, r2, #5
 800759a:	69fa      	ldr	r2, [r7, #28]
 800759c:	440a      	add	r2, r1
 800759e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075a2:	0cdb      	lsrs	r3, r3, #19
 80075a4:	04db      	lsls	r3, r3, #19
 80075a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80075a8:	69bb      	ldr	r3, [r7, #24]
 80075aa:	015a      	lsls	r2, r3, #5
 80075ac:	69fb      	ldr	r3, [r7, #28]
 80075ae:	4413      	add	r3, r2
 80075b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075b4:	691b      	ldr	r3, [r3, #16]
 80075b6:	69ba      	ldr	r2, [r7, #24]
 80075b8:	0151      	lsls	r1, r2, #5
 80075ba:	69fa      	ldr	r2, [r7, #28]
 80075bc:	440a      	add	r2, r1
 80075be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075c2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80075c6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80075ca:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80075cc:	69bb      	ldr	r3, [r7, #24]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d11a      	bne.n	8007608 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	691a      	ldr	r2, [r3, #16]
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	689b      	ldr	r3, [r3, #8]
 80075da:	429a      	cmp	r2, r3
 80075dc:	d903      	bls.n	80075e6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	689a      	ldr	r2, [r3, #8]
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80075e6:	69bb      	ldr	r3, [r7, #24]
 80075e8:	015a      	lsls	r2, r3, #5
 80075ea:	69fb      	ldr	r3, [r7, #28]
 80075ec:	4413      	add	r3, r2
 80075ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075f2:	691b      	ldr	r3, [r3, #16]
 80075f4:	69ba      	ldr	r2, [r7, #24]
 80075f6:	0151      	lsls	r1, r2, #5
 80075f8:	69fa      	ldr	r2, [r7, #28]
 80075fa:	440a      	add	r2, r1
 80075fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007600:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007604:	6113      	str	r3, [r2, #16]
 8007606:	e01b      	b.n	8007640 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007608:	69bb      	ldr	r3, [r7, #24]
 800760a:	015a      	lsls	r2, r3, #5
 800760c:	69fb      	ldr	r3, [r7, #28]
 800760e:	4413      	add	r3, r2
 8007610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007614:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	6919      	ldr	r1, [r3, #16]
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	689b      	ldr	r3, [r3, #8]
 800761e:	440b      	add	r3, r1
 8007620:	1e59      	subs	r1, r3, #1
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	689b      	ldr	r3, [r3, #8]
 8007626:	fbb1 f3f3 	udiv	r3, r1, r3
 800762a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800762c:	4ba2      	ldr	r3, [pc, #648]	; (80078b8 <USB_EPStartXfer+0x3c0>)
 800762e:	400b      	ands	r3, r1
 8007630:	69b9      	ldr	r1, [r7, #24]
 8007632:	0148      	lsls	r0, r1, #5
 8007634:	69f9      	ldr	r1, [r7, #28]
 8007636:	4401      	add	r1, r0
 8007638:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800763c:	4313      	orrs	r3, r2
 800763e:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007640:	69bb      	ldr	r3, [r7, #24]
 8007642:	015a      	lsls	r2, r3, #5
 8007644:	69fb      	ldr	r3, [r7, #28]
 8007646:	4413      	add	r3, r2
 8007648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800764c:	691a      	ldr	r2, [r3, #16]
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	691b      	ldr	r3, [r3, #16]
 8007652:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007656:	69b9      	ldr	r1, [r7, #24]
 8007658:	0148      	lsls	r0, r1, #5
 800765a:	69f9      	ldr	r1, [r7, #28]
 800765c:	4401      	add	r1, r0
 800765e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007662:	4313      	orrs	r3, r2
 8007664:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	791b      	ldrb	r3, [r3, #4]
 800766a:	2b01      	cmp	r3, #1
 800766c:	d11f      	bne.n	80076ae <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800766e:	69bb      	ldr	r3, [r7, #24]
 8007670:	015a      	lsls	r2, r3, #5
 8007672:	69fb      	ldr	r3, [r7, #28]
 8007674:	4413      	add	r3, r2
 8007676:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800767a:	691b      	ldr	r3, [r3, #16]
 800767c:	69ba      	ldr	r2, [r7, #24]
 800767e:	0151      	lsls	r1, r2, #5
 8007680:	69fa      	ldr	r2, [r7, #28]
 8007682:	440a      	add	r2, r1
 8007684:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007688:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800768c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800768e:	69bb      	ldr	r3, [r7, #24]
 8007690:	015a      	lsls	r2, r3, #5
 8007692:	69fb      	ldr	r3, [r7, #28]
 8007694:	4413      	add	r3, r2
 8007696:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800769a:	691b      	ldr	r3, [r3, #16]
 800769c:	69ba      	ldr	r2, [r7, #24]
 800769e:	0151      	lsls	r1, r2, #5
 80076a0:	69fa      	ldr	r2, [r7, #28]
 80076a2:	440a      	add	r2, r1
 80076a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80076ac:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80076ae:	79fb      	ldrb	r3, [r7, #7]
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	d14b      	bne.n	800774c <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	69db      	ldr	r3, [r3, #28]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d009      	beq.n	80076d0 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80076bc:	69bb      	ldr	r3, [r7, #24]
 80076be:	015a      	lsls	r2, r3, #5
 80076c0:	69fb      	ldr	r3, [r7, #28]
 80076c2:	4413      	add	r3, r2
 80076c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076c8:	461a      	mov	r2, r3
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	69db      	ldr	r3, [r3, #28]
 80076ce:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	791b      	ldrb	r3, [r3, #4]
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d128      	bne.n	800772a <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80076d8:	69fb      	ldr	r3, [r7, #28]
 80076da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076de:	689b      	ldr	r3, [r3, #8]
 80076e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d110      	bne.n	800770a <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80076e8:	69bb      	ldr	r3, [r7, #24]
 80076ea:	015a      	lsls	r2, r3, #5
 80076ec:	69fb      	ldr	r3, [r7, #28]
 80076ee:	4413      	add	r3, r2
 80076f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	69ba      	ldr	r2, [r7, #24]
 80076f8:	0151      	lsls	r1, r2, #5
 80076fa:	69fa      	ldr	r2, [r7, #28]
 80076fc:	440a      	add	r2, r1
 80076fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007702:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007706:	6013      	str	r3, [r2, #0]
 8007708:	e00f      	b.n	800772a <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800770a:	69bb      	ldr	r3, [r7, #24]
 800770c:	015a      	lsls	r2, r3, #5
 800770e:	69fb      	ldr	r3, [r7, #28]
 8007710:	4413      	add	r3, r2
 8007712:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	69ba      	ldr	r2, [r7, #24]
 800771a:	0151      	lsls	r1, r2, #5
 800771c:	69fa      	ldr	r2, [r7, #28]
 800771e:	440a      	add	r2, r1
 8007720:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007728:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800772a:	69bb      	ldr	r3, [r7, #24]
 800772c:	015a      	lsls	r2, r3, #5
 800772e:	69fb      	ldr	r3, [r7, #28]
 8007730:	4413      	add	r3, r2
 8007732:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	69ba      	ldr	r2, [r7, #24]
 800773a:	0151      	lsls	r1, r2, #5
 800773c:	69fa      	ldr	r2, [r7, #28]
 800773e:	440a      	add	r2, r1
 8007740:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007744:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007748:	6013      	str	r3, [r2, #0]
 800774a:	e165      	b.n	8007a18 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800774c:	69bb      	ldr	r3, [r7, #24]
 800774e:	015a      	lsls	r2, r3, #5
 8007750:	69fb      	ldr	r3, [r7, #28]
 8007752:	4413      	add	r3, r2
 8007754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	69ba      	ldr	r2, [r7, #24]
 800775c:	0151      	lsls	r1, r2, #5
 800775e:	69fa      	ldr	r2, [r7, #28]
 8007760:	440a      	add	r2, r1
 8007762:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007766:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800776a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	791b      	ldrb	r3, [r3, #4]
 8007770:	2b01      	cmp	r3, #1
 8007772:	d015      	beq.n	80077a0 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	691b      	ldr	r3, [r3, #16]
 8007778:	2b00      	cmp	r3, #0
 800777a:	f000 814d 	beq.w	8007a18 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800777e:	69fb      	ldr	r3, [r7, #28]
 8007780:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007784:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	781b      	ldrb	r3, [r3, #0]
 800778a:	f003 030f 	and.w	r3, r3, #15
 800778e:	2101      	movs	r1, #1
 8007790:	fa01 f303 	lsl.w	r3, r1, r3
 8007794:	69f9      	ldr	r1, [r7, #28]
 8007796:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800779a:	4313      	orrs	r3, r2
 800779c:	634b      	str	r3, [r1, #52]	; 0x34
 800779e:	e13b      	b.n	8007a18 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80077a0:	69fb      	ldr	r3, [r7, #28]
 80077a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077a6:	689b      	ldr	r3, [r3, #8]
 80077a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d110      	bne.n	80077d2 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80077b0:	69bb      	ldr	r3, [r7, #24]
 80077b2:	015a      	lsls	r2, r3, #5
 80077b4:	69fb      	ldr	r3, [r7, #28]
 80077b6:	4413      	add	r3, r2
 80077b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	69ba      	ldr	r2, [r7, #24]
 80077c0:	0151      	lsls	r1, r2, #5
 80077c2:	69fa      	ldr	r2, [r7, #28]
 80077c4:	440a      	add	r2, r1
 80077c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80077ce:	6013      	str	r3, [r2, #0]
 80077d0:	e00f      	b.n	80077f2 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80077d2:	69bb      	ldr	r3, [r7, #24]
 80077d4:	015a      	lsls	r2, r3, #5
 80077d6:	69fb      	ldr	r3, [r7, #28]
 80077d8:	4413      	add	r3, r2
 80077da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	69ba      	ldr	r2, [r7, #24]
 80077e2:	0151      	lsls	r1, r2, #5
 80077e4:	69fa      	ldr	r2, [r7, #28]
 80077e6:	440a      	add	r2, r1
 80077e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077f0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	68d9      	ldr	r1, [r3, #12]
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	781a      	ldrb	r2, [r3, #0]
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	691b      	ldr	r3, [r3, #16]
 80077fe:	b298      	uxth	r0, r3
 8007800:	79fb      	ldrb	r3, [r7, #7]
 8007802:	9300      	str	r3, [sp, #0]
 8007804:	4603      	mov	r3, r0
 8007806:	68f8      	ldr	r0, [r7, #12]
 8007808:	f000 f9b8 	bl	8007b7c <USB_WritePacket>
 800780c:	e104      	b.n	8007a18 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800780e:	69bb      	ldr	r3, [r7, #24]
 8007810:	015a      	lsls	r2, r3, #5
 8007812:	69fb      	ldr	r3, [r7, #28]
 8007814:	4413      	add	r3, r2
 8007816:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800781a:	691b      	ldr	r3, [r3, #16]
 800781c:	69ba      	ldr	r2, [r7, #24]
 800781e:	0151      	lsls	r1, r2, #5
 8007820:	69fa      	ldr	r2, [r7, #28]
 8007822:	440a      	add	r2, r1
 8007824:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007828:	0cdb      	lsrs	r3, r3, #19
 800782a:	04db      	lsls	r3, r3, #19
 800782c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800782e:	69bb      	ldr	r3, [r7, #24]
 8007830:	015a      	lsls	r2, r3, #5
 8007832:	69fb      	ldr	r3, [r7, #28]
 8007834:	4413      	add	r3, r2
 8007836:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800783a:	691b      	ldr	r3, [r3, #16]
 800783c:	69ba      	ldr	r2, [r7, #24]
 800783e:	0151      	lsls	r1, r2, #5
 8007840:	69fa      	ldr	r2, [r7, #28]
 8007842:	440a      	add	r2, r1
 8007844:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007848:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800784c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007850:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8007852:	69bb      	ldr	r3, [r7, #24]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d131      	bne.n	80078bc <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	691b      	ldr	r3, [r3, #16]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d003      	beq.n	8007868 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	689a      	ldr	r2, [r3, #8]
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	689a      	ldr	r2, [r3, #8]
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007870:	69bb      	ldr	r3, [r7, #24]
 8007872:	015a      	lsls	r2, r3, #5
 8007874:	69fb      	ldr	r3, [r7, #28]
 8007876:	4413      	add	r3, r2
 8007878:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800787c:	691a      	ldr	r2, [r3, #16]
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	6a1b      	ldr	r3, [r3, #32]
 8007882:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007886:	69b9      	ldr	r1, [r7, #24]
 8007888:	0148      	lsls	r0, r1, #5
 800788a:	69f9      	ldr	r1, [r7, #28]
 800788c:	4401      	add	r1, r0
 800788e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007892:	4313      	orrs	r3, r2
 8007894:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007896:	69bb      	ldr	r3, [r7, #24]
 8007898:	015a      	lsls	r2, r3, #5
 800789a:	69fb      	ldr	r3, [r7, #28]
 800789c:	4413      	add	r3, r2
 800789e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078a2:	691b      	ldr	r3, [r3, #16]
 80078a4:	69ba      	ldr	r2, [r7, #24]
 80078a6:	0151      	lsls	r1, r2, #5
 80078a8:	69fa      	ldr	r2, [r7, #28]
 80078aa:	440a      	add	r2, r1
 80078ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80078b4:	6113      	str	r3, [r2, #16]
 80078b6:	e061      	b.n	800797c <USB_EPStartXfer+0x484>
 80078b8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	691b      	ldr	r3, [r3, #16]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d123      	bne.n	800790c <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80078c4:	69bb      	ldr	r3, [r7, #24]
 80078c6:	015a      	lsls	r2, r3, #5
 80078c8:	69fb      	ldr	r3, [r7, #28]
 80078ca:	4413      	add	r3, r2
 80078cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078d0:	691a      	ldr	r2, [r3, #16]
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	689b      	ldr	r3, [r3, #8]
 80078d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80078da:	69b9      	ldr	r1, [r7, #24]
 80078dc:	0148      	lsls	r0, r1, #5
 80078de:	69f9      	ldr	r1, [r7, #28]
 80078e0:	4401      	add	r1, r0
 80078e2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80078e6:	4313      	orrs	r3, r2
 80078e8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80078ea:	69bb      	ldr	r3, [r7, #24]
 80078ec:	015a      	lsls	r2, r3, #5
 80078ee:	69fb      	ldr	r3, [r7, #28]
 80078f0:	4413      	add	r3, r2
 80078f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078f6:	691b      	ldr	r3, [r3, #16]
 80078f8:	69ba      	ldr	r2, [r7, #24]
 80078fa:	0151      	lsls	r1, r2, #5
 80078fc:	69fa      	ldr	r2, [r7, #28]
 80078fe:	440a      	add	r2, r1
 8007900:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007904:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007908:	6113      	str	r3, [r2, #16]
 800790a:	e037      	b.n	800797c <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	691a      	ldr	r2, [r3, #16]
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	689b      	ldr	r3, [r3, #8]
 8007914:	4413      	add	r3, r2
 8007916:	1e5a      	subs	r2, r3, #1
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	689b      	ldr	r3, [r3, #8]
 800791c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007920:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	689b      	ldr	r3, [r3, #8]
 8007926:	8afa      	ldrh	r2, [r7, #22]
 8007928:	fb03 f202 	mul.w	r2, r3, r2
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007930:	69bb      	ldr	r3, [r7, #24]
 8007932:	015a      	lsls	r2, r3, #5
 8007934:	69fb      	ldr	r3, [r7, #28]
 8007936:	4413      	add	r3, r2
 8007938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800793c:	691a      	ldr	r2, [r3, #16]
 800793e:	8afb      	ldrh	r3, [r7, #22]
 8007940:	04d9      	lsls	r1, r3, #19
 8007942:	4b38      	ldr	r3, [pc, #224]	; (8007a24 <USB_EPStartXfer+0x52c>)
 8007944:	400b      	ands	r3, r1
 8007946:	69b9      	ldr	r1, [r7, #24]
 8007948:	0148      	lsls	r0, r1, #5
 800794a:	69f9      	ldr	r1, [r7, #28]
 800794c:	4401      	add	r1, r0
 800794e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007952:	4313      	orrs	r3, r2
 8007954:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007956:	69bb      	ldr	r3, [r7, #24]
 8007958:	015a      	lsls	r2, r3, #5
 800795a:	69fb      	ldr	r3, [r7, #28]
 800795c:	4413      	add	r3, r2
 800795e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007962:	691a      	ldr	r2, [r3, #16]
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	6a1b      	ldr	r3, [r3, #32]
 8007968:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800796c:	69b9      	ldr	r1, [r7, #24]
 800796e:	0148      	lsls	r0, r1, #5
 8007970:	69f9      	ldr	r1, [r7, #28]
 8007972:	4401      	add	r1, r0
 8007974:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007978:	4313      	orrs	r3, r2
 800797a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800797c:	79fb      	ldrb	r3, [r7, #7]
 800797e:	2b01      	cmp	r3, #1
 8007980:	d10d      	bne.n	800799e <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	68db      	ldr	r3, [r3, #12]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d009      	beq.n	800799e <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	68d9      	ldr	r1, [r3, #12]
 800798e:	69bb      	ldr	r3, [r7, #24]
 8007990:	015a      	lsls	r2, r3, #5
 8007992:	69fb      	ldr	r3, [r7, #28]
 8007994:	4413      	add	r3, r2
 8007996:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800799a:	460a      	mov	r2, r1
 800799c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	791b      	ldrb	r3, [r3, #4]
 80079a2:	2b01      	cmp	r3, #1
 80079a4:	d128      	bne.n	80079f8 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80079a6:	69fb      	ldr	r3, [r7, #28]
 80079a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079ac:	689b      	ldr	r3, [r3, #8]
 80079ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d110      	bne.n	80079d8 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80079b6:	69bb      	ldr	r3, [r7, #24]
 80079b8:	015a      	lsls	r2, r3, #5
 80079ba:	69fb      	ldr	r3, [r7, #28]
 80079bc:	4413      	add	r3, r2
 80079be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	69ba      	ldr	r2, [r7, #24]
 80079c6:	0151      	lsls	r1, r2, #5
 80079c8:	69fa      	ldr	r2, [r7, #28]
 80079ca:	440a      	add	r2, r1
 80079cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80079d4:	6013      	str	r3, [r2, #0]
 80079d6:	e00f      	b.n	80079f8 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80079d8:	69bb      	ldr	r3, [r7, #24]
 80079da:	015a      	lsls	r2, r3, #5
 80079dc:	69fb      	ldr	r3, [r7, #28]
 80079de:	4413      	add	r3, r2
 80079e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	69ba      	ldr	r2, [r7, #24]
 80079e8:	0151      	lsls	r1, r2, #5
 80079ea:	69fa      	ldr	r2, [r7, #28]
 80079ec:	440a      	add	r2, r1
 80079ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079f6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80079f8:	69bb      	ldr	r3, [r7, #24]
 80079fa:	015a      	lsls	r2, r3, #5
 80079fc:	69fb      	ldr	r3, [r7, #28]
 80079fe:	4413      	add	r3, r2
 8007a00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	69ba      	ldr	r2, [r7, #24]
 8007a08:	0151      	lsls	r1, r2, #5
 8007a0a:	69fa      	ldr	r2, [r7, #28]
 8007a0c:	440a      	add	r2, r1
 8007a0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a12:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007a16:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007a18:	2300      	movs	r3, #0
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3720      	adds	r7, #32
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}
 8007a22:	bf00      	nop
 8007a24:	1ff80000 	.word	0x1ff80000

08007a28 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b087      	sub	sp, #28
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007a32:	2300      	movs	r3, #0
 8007a34:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007a36:	2300      	movs	r3, #0
 8007a38:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	785b      	ldrb	r3, [r3, #1]
 8007a42:	2b01      	cmp	r3, #1
 8007a44:	d14a      	bne.n	8007adc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	781b      	ldrb	r3, [r3, #0]
 8007a4a:	015a      	lsls	r2, r3, #5
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	4413      	add	r3, r2
 8007a50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a5e:	f040 8086 	bne.w	8007b6e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	781b      	ldrb	r3, [r3, #0]
 8007a66:	015a      	lsls	r2, r3, #5
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	4413      	add	r3, r2
 8007a6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	683a      	ldr	r2, [r7, #0]
 8007a74:	7812      	ldrb	r2, [r2, #0]
 8007a76:	0151      	lsls	r1, r2, #5
 8007a78:	693a      	ldr	r2, [r7, #16]
 8007a7a:	440a      	add	r2, r1
 8007a7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a80:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007a84:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	781b      	ldrb	r3, [r3, #0]
 8007a8a:	015a      	lsls	r2, r3, #5
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	4413      	add	r3, r2
 8007a90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	683a      	ldr	r2, [r7, #0]
 8007a98:	7812      	ldrb	r2, [r2, #0]
 8007a9a:	0151      	lsls	r1, r2, #5
 8007a9c:	693a      	ldr	r2, [r7, #16]
 8007a9e:	440a      	add	r2, r1
 8007aa0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007aa4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007aa8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	3301      	adds	r3, #1
 8007aae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f242 7210 	movw	r2, #10000	; 0x2710
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d902      	bls.n	8007ac0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007aba:	2301      	movs	r3, #1
 8007abc:	75fb      	strb	r3, [r7, #23]
          break;
 8007abe:	e056      	b.n	8007b6e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	781b      	ldrb	r3, [r3, #0]
 8007ac4:	015a      	lsls	r2, r3, #5
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	4413      	add	r3, r2
 8007aca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ad4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ad8:	d0e7      	beq.n	8007aaa <USB_EPStopXfer+0x82>
 8007ada:	e048      	b.n	8007b6e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	781b      	ldrb	r3, [r3, #0]
 8007ae0:	015a      	lsls	r2, r3, #5
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	4413      	add	r3, r2
 8007ae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007af0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007af4:	d13b      	bne.n	8007b6e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	781b      	ldrb	r3, [r3, #0]
 8007afa:	015a      	lsls	r2, r3, #5
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	4413      	add	r3, r2
 8007b00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	683a      	ldr	r2, [r7, #0]
 8007b08:	7812      	ldrb	r2, [r2, #0]
 8007b0a:	0151      	lsls	r1, r2, #5
 8007b0c:	693a      	ldr	r2, [r7, #16]
 8007b0e:	440a      	add	r2, r1
 8007b10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b14:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007b18:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	781b      	ldrb	r3, [r3, #0]
 8007b1e:	015a      	lsls	r2, r3, #5
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	4413      	add	r3, r2
 8007b24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	683a      	ldr	r2, [r7, #0]
 8007b2c:	7812      	ldrb	r2, [r2, #0]
 8007b2e:	0151      	lsls	r1, r2, #5
 8007b30:	693a      	ldr	r2, [r7, #16]
 8007b32:	440a      	add	r2, r1
 8007b34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b38:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007b3c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	3301      	adds	r3, #1
 8007b42:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f242 7210 	movw	r2, #10000	; 0x2710
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d902      	bls.n	8007b54 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	75fb      	strb	r3, [r7, #23]
          break;
 8007b52:	e00c      	b.n	8007b6e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	781b      	ldrb	r3, [r3, #0]
 8007b58:	015a      	lsls	r2, r3, #5
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	4413      	add	r3, r2
 8007b5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b6c:	d0e7      	beq.n	8007b3e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007b6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	371c      	adds	r7, #28
 8007b74:	46bd      	mov	sp, r7
 8007b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7a:	4770      	bx	lr

08007b7c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b089      	sub	sp, #36	; 0x24
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	60f8      	str	r0, [r7, #12]
 8007b84:	60b9      	str	r1, [r7, #8]
 8007b86:	4611      	mov	r1, r2
 8007b88:	461a      	mov	r2, r3
 8007b8a:	460b      	mov	r3, r1
 8007b8c:	71fb      	strb	r3, [r7, #7]
 8007b8e:	4613      	mov	r3, r2
 8007b90:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007b9a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d123      	bne.n	8007bea <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007ba2:	88bb      	ldrh	r3, [r7, #4]
 8007ba4:	3303      	adds	r3, #3
 8007ba6:	089b      	lsrs	r3, r3, #2
 8007ba8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007baa:	2300      	movs	r3, #0
 8007bac:	61bb      	str	r3, [r7, #24]
 8007bae:	e018      	b.n	8007be2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007bb0:	79fb      	ldrb	r3, [r7, #7]
 8007bb2:	031a      	lsls	r2, r3, #12
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	4413      	add	r3, r2
 8007bb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bbc:	461a      	mov	r2, r3
 8007bbe:	69fb      	ldr	r3, [r7, #28]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007bc4:	69fb      	ldr	r3, [r7, #28]
 8007bc6:	3301      	adds	r3, #1
 8007bc8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007bca:	69fb      	ldr	r3, [r7, #28]
 8007bcc:	3301      	adds	r3, #1
 8007bce:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007bd0:	69fb      	ldr	r3, [r7, #28]
 8007bd2:	3301      	adds	r3, #1
 8007bd4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007bd6:	69fb      	ldr	r3, [r7, #28]
 8007bd8:	3301      	adds	r3, #1
 8007bda:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007bdc:	69bb      	ldr	r3, [r7, #24]
 8007bde:	3301      	adds	r3, #1
 8007be0:	61bb      	str	r3, [r7, #24]
 8007be2:	69ba      	ldr	r2, [r7, #24]
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	429a      	cmp	r2, r3
 8007be8:	d3e2      	bcc.n	8007bb0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007bea:	2300      	movs	r3, #0
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3724      	adds	r7, #36	; 0x24
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf6:	4770      	bx	lr

08007bf8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b08b      	sub	sp, #44	; 0x2c
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	60f8      	str	r0, [r7, #12]
 8007c00:	60b9      	str	r1, [r7, #8]
 8007c02:	4613      	mov	r3, r2
 8007c04:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007c0e:	88fb      	ldrh	r3, [r7, #6]
 8007c10:	089b      	lsrs	r3, r3, #2
 8007c12:	b29b      	uxth	r3, r3
 8007c14:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007c16:	88fb      	ldrh	r3, [r7, #6]
 8007c18:	f003 0303 	and.w	r3, r3, #3
 8007c1c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007c1e:	2300      	movs	r3, #0
 8007c20:	623b      	str	r3, [r7, #32]
 8007c22:	e014      	b.n	8007c4e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007c24:	69bb      	ldr	r3, [r7, #24]
 8007c26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c2a:	681a      	ldr	r2, [r3, #0]
 8007c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c2e:	601a      	str	r2, [r3, #0]
    pDest++;
 8007c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c32:	3301      	adds	r3, #1
 8007c34:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c38:	3301      	adds	r3, #1
 8007c3a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c3e:	3301      	adds	r3, #1
 8007c40:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c44:	3301      	adds	r3, #1
 8007c46:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007c48:	6a3b      	ldr	r3, [r7, #32]
 8007c4a:	3301      	adds	r3, #1
 8007c4c:	623b      	str	r3, [r7, #32]
 8007c4e:	6a3a      	ldr	r2, [r7, #32]
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	429a      	cmp	r2, r3
 8007c54:	d3e6      	bcc.n	8007c24 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007c56:	8bfb      	ldrh	r3, [r7, #30]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d01e      	beq.n	8007c9a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007c60:	69bb      	ldr	r3, [r7, #24]
 8007c62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c66:	461a      	mov	r2, r3
 8007c68:	f107 0310 	add.w	r3, r7, #16
 8007c6c:	6812      	ldr	r2, [r2, #0]
 8007c6e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007c70:	693a      	ldr	r2, [r7, #16]
 8007c72:	6a3b      	ldr	r3, [r7, #32]
 8007c74:	b2db      	uxtb	r3, r3
 8007c76:	00db      	lsls	r3, r3, #3
 8007c78:	fa22 f303 	lsr.w	r3, r2, r3
 8007c7c:	b2da      	uxtb	r2, r3
 8007c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c80:	701a      	strb	r2, [r3, #0]
      i++;
 8007c82:	6a3b      	ldr	r3, [r7, #32]
 8007c84:	3301      	adds	r3, #1
 8007c86:	623b      	str	r3, [r7, #32]
      pDest++;
 8007c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c8a:	3301      	adds	r3, #1
 8007c8c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007c8e:	8bfb      	ldrh	r3, [r7, #30]
 8007c90:	3b01      	subs	r3, #1
 8007c92:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007c94:	8bfb      	ldrh	r3, [r7, #30]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d1ea      	bne.n	8007c70 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	372c      	adds	r7, #44	; 0x2c
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr

08007ca8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b085      	sub	sp, #20
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	781b      	ldrb	r3, [r3, #0]
 8007cba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	785b      	ldrb	r3, [r3, #1]
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	d12c      	bne.n	8007d1e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	015a      	lsls	r2, r3, #5
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	4413      	add	r3, r2
 8007ccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	db12      	blt.n	8007cfc <USB_EPSetStall+0x54>
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d00f      	beq.n	8007cfc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	015a      	lsls	r2, r3, #5
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	4413      	add	r3, r2
 8007ce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	68ba      	ldr	r2, [r7, #8]
 8007cec:	0151      	lsls	r1, r2, #5
 8007cee:	68fa      	ldr	r2, [r7, #12]
 8007cf0:	440a      	add	r2, r1
 8007cf2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cf6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007cfa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	015a      	lsls	r2, r3, #5
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	4413      	add	r3, r2
 8007d04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	68ba      	ldr	r2, [r7, #8]
 8007d0c:	0151      	lsls	r1, r2, #5
 8007d0e:	68fa      	ldr	r2, [r7, #12]
 8007d10:	440a      	add	r2, r1
 8007d12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d16:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007d1a:	6013      	str	r3, [r2, #0]
 8007d1c:	e02b      	b.n	8007d76 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	015a      	lsls	r2, r3, #5
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	4413      	add	r3, r2
 8007d26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	db12      	blt.n	8007d56 <USB_EPSetStall+0xae>
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d00f      	beq.n	8007d56 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	015a      	lsls	r2, r3, #5
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	4413      	add	r3, r2
 8007d3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	68ba      	ldr	r2, [r7, #8]
 8007d46:	0151      	lsls	r1, r2, #5
 8007d48:	68fa      	ldr	r2, [r7, #12]
 8007d4a:	440a      	add	r2, r1
 8007d4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d50:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007d54:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	015a      	lsls	r2, r3, #5
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	4413      	add	r3, r2
 8007d5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	68ba      	ldr	r2, [r7, #8]
 8007d66:	0151      	lsls	r1, r2, #5
 8007d68:	68fa      	ldr	r2, [r7, #12]
 8007d6a:	440a      	add	r2, r1
 8007d6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007d74:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007d76:	2300      	movs	r3, #0
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3714      	adds	r7, #20
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d82:	4770      	bx	lr

08007d84 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b085      	sub	sp, #20
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	781b      	ldrb	r3, [r3, #0]
 8007d96:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	785b      	ldrb	r3, [r3, #1]
 8007d9c:	2b01      	cmp	r3, #1
 8007d9e:	d128      	bne.n	8007df2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	015a      	lsls	r2, r3, #5
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	4413      	add	r3, r2
 8007da8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	68ba      	ldr	r2, [r7, #8]
 8007db0:	0151      	lsls	r1, r2, #5
 8007db2:	68fa      	ldr	r2, [r7, #12]
 8007db4:	440a      	add	r2, r1
 8007db6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007dba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007dbe:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	791b      	ldrb	r3, [r3, #4]
 8007dc4:	2b03      	cmp	r3, #3
 8007dc6:	d003      	beq.n	8007dd0 <USB_EPClearStall+0x4c>
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	791b      	ldrb	r3, [r3, #4]
 8007dcc:	2b02      	cmp	r3, #2
 8007dce:	d138      	bne.n	8007e42 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	015a      	lsls	r2, r3, #5
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	4413      	add	r3, r2
 8007dd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	68ba      	ldr	r2, [r7, #8]
 8007de0:	0151      	lsls	r1, r2, #5
 8007de2:	68fa      	ldr	r2, [r7, #12]
 8007de4:	440a      	add	r2, r1
 8007de6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007dea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007dee:	6013      	str	r3, [r2, #0]
 8007df0:	e027      	b.n	8007e42 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	015a      	lsls	r2, r3, #5
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	4413      	add	r3, r2
 8007dfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	68ba      	ldr	r2, [r7, #8]
 8007e02:	0151      	lsls	r1, r2, #5
 8007e04:	68fa      	ldr	r2, [r7, #12]
 8007e06:	440a      	add	r2, r1
 8007e08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e0c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007e10:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	791b      	ldrb	r3, [r3, #4]
 8007e16:	2b03      	cmp	r3, #3
 8007e18:	d003      	beq.n	8007e22 <USB_EPClearStall+0x9e>
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	791b      	ldrb	r3, [r3, #4]
 8007e1e:	2b02      	cmp	r3, #2
 8007e20:	d10f      	bne.n	8007e42 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	015a      	lsls	r2, r3, #5
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	4413      	add	r3, r2
 8007e2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	68ba      	ldr	r2, [r7, #8]
 8007e32:	0151      	lsls	r1, r2, #5
 8007e34:	68fa      	ldr	r2, [r7, #12]
 8007e36:	440a      	add	r2, r1
 8007e38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e40:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007e42:	2300      	movs	r3, #0
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3714      	adds	r7, #20
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr

08007e50 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b085      	sub	sp, #20
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	460b      	mov	r3, r1
 8007e5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	68fa      	ldr	r2, [r7, #12]
 8007e6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e6e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007e72:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e7a:	681a      	ldr	r2, [r3, #0]
 8007e7c:	78fb      	ldrb	r3, [r7, #3]
 8007e7e:	011b      	lsls	r3, r3, #4
 8007e80:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007e84:	68f9      	ldr	r1, [r7, #12]
 8007e86:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007e8e:	2300      	movs	r3, #0
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	3714      	adds	r7, #20
 8007e94:	46bd      	mov	sp, r7
 8007e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9a:	4770      	bx	lr

08007e9c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b085      	sub	sp, #20
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	68fa      	ldr	r2, [r7, #12]
 8007eb2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007eb6:	f023 0303 	bic.w	r3, r3, #3
 8007eba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ec2:	685b      	ldr	r3, [r3, #4]
 8007ec4:	68fa      	ldr	r2, [r7, #12]
 8007ec6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007eca:	f023 0302 	bic.w	r3, r3, #2
 8007ece:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007ed0:	2300      	movs	r3, #0
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3714      	adds	r7, #20
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007edc:	4770      	bx	lr

08007ede <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007ede:	b480      	push	{r7}
 8007ee0:	b085      	sub	sp, #20
 8007ee2:	af00      	add	r7, sp, #0
 8007ee4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	68fa      	ldr	r2, [r7, #12]
 8007ef4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007ef8:	f023 0303 	bic.w	r3, r3, #3
 8007efc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f04:	685b      	ldr	r3, [r3, #4]
 8007f06:	68fa      	ldr	r2, [r7, #12]
 8007f08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f0c:	f043 0302 	orr.w	r3, r3, #2
 8007f10:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007f12:	2300      	movs	r3, #0
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	3714      	adds	r7, #20
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr

08007f20 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007f20:	b480      	push	{r7}
 8007f22:	b085      	sub	sp, #20
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	695b      	ldr	r3, [r3, #20]
 8007f2c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	699b      	ldr	r3, [r3, #24]
 8007f32:	68fa      	ldr	r2, [r7, #12]
 8007f34:	4013      	ands	r3, r2
 8007f36:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007f38:	68fb      	ldr	r3, [r7, #12]
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3714      	adds	r7, #20
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f44:	4770      	bx	lr

08007f46 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007f46:	b480      	push	{r7}
 8007f48:	b085      	sub	sp, #20
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f58:	699b      	ldr	r3, [r3, #24]
 8007f5a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f62:	69db      	ldr	r3, [r3, #28]
 8007f64:	68ba      	ldr	r2, [r7, #8]
 8007f66:	4013      	ands	r3, r2
 8007f68:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	0c1b      	lsrs	r3, r3, #16
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3714      	adds	r7, #20
 8007f72:	46bd      	mov	sp, r7
 8007f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f78:	4770      	bx	lr

08007f7a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007f7a:	b480      	push	{r7}
 8007f7c:	b085      	sub	sp, #20
 8007f7e:	af00      	add	r7, sp, #0
 8007f80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f8c:	699b      	ldr	r3, [r3, #24]
 8007f8e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f96:	69db      	ldr	r3, [r3, #28]
 8007f98:	68ba      	ldr	r2, [r7, #8]
 8007f9a:	4013      	ands	r3, r2
 8007f9c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	b29b      	uxth	r3, r3
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3714      	adds	r7, #20
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fac:	4770      	bx	lr

08007fae <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007fae:	b480      	push	{r7}
 8007fb0:	b085      	sub	sp, #20
 8007fb2:	af00      	add	r7, sp, #0
 8007fb4:	6078      	str	r0, [r7, #4]
 8007fb6:	460b      	mov	r3, r1
 8007fb8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007fbe:	78fb      	ldrb	r3, [r7, #3]
 8007fc0:	015a      	lsls	r2, r3, #5
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	4413      	add	r3, r2
 8007fc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fca:	689b      	ldr	r3, [r3, #8]
 8007fcc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fd4:	695b      	ldr	r3, [r3, #20]
 8007fd6:	68ba      	ldr	r2, [r7, #8]
 8007fd8:	4013      	ands	r3, r2
 8007fda:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007fdc:	68bb      	ldr	r3, [r7, #8]
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3714      	adds	r7, #20
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe8:	4770      	bx	lr

08007fea <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007fea:	b480      	push	{r7}
 8007fec:	b087      	sub	sp, #28
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	6078      	str	r0, [r7, #4]
 8007ff2:	460b      	mov	r3, r1
 8007ff4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008000:	691b      	ldr	r3, [r3, #16]
 8008002:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800800a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800800c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800800e:	78fb      	ldrb	r3, [r7, #3]
 8008010:	f003 030f 	and.w	r3, r3, #15
 8008014:	68fa      	ldr	r2, [r7, #12]
 8008016:	fa22 f303 	lsr.w	r3, r2, r3
 800801a:	01db      	lsls	r3, r3, #7
 800801c:	b2db      	uxtb	r3, r3
 800801e:	693a      	ldr	r2, [r7, #16]
 8008020:	4313      	orrs	r3, r2
 8008022:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008024:	78fb      	ldrb	r3, [r7, #3]
 8008026:	015a      	lsls	r2, r3, #5
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	4413      	add	r3, r2
 800802c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008030:	689b      	ldr	r3, [r3, #8]
 8008032:	693a      	ldr	r2, [r7, #16]
 8008034:	4013      	ands	r3, r2
 8008036:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008038:	68bb      	ldr	r3, [r7, #8]
}
 800803a:	4618      	mov	r0, r3
 800803c:	371c      	adds	r7, #28
 800803e:	46bd      	mov	sp, r7
 8008040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008044:	4770      	bx	lr

08008046 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008046:	b480      	push	{r7}
 8008048:	b083      	sub	sp, #12
 800804a:	af00      	add	r7, sp, #0
 800804c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	695b      	ldr	r3, [r3, #20]
 8008052:	f003 0301 	and.w	r3, r3, #1
}
 8008056:	4618      	mov	r0, r3
 8008058:	370c      	adds	r7, #12
 800805a:	46bd      	mov	sp, r7
 800805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008060:	4770      	bx	lr

08008062 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8008062:	b480      	push	{r7}
 8008064:	b085      	sub	sp, #20
 8008066:	af00      	add	r7, sp, #0
 8008068:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	68fa      	ldr	r2, [r7, #12]
 8008078:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800807c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008080:	f023 0307 	bic.w	r3, r3, #7
 8008084:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800808c:	685b      	ldr	r3, [r3, #4]
 800808e:	68fa      	ldr	r2, [r7, #12]
 8008090:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008094:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008098:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800809a:	2300      	movs	r3, #0
}
 800809c:	4618      	mov	r0, r3
 800809e:	3714      	adds	r7, #20
 80080a0:	46bd      	mov	sp, r7
 80080a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a6:	4770      	bx	lr

080080a8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b087      	sub	sp, #28
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	60f8      	str	r0, [r7, #12]
 80080b0:	460b      	mov	r3, r1
 80080b2:	607a      	str	r2, [r7, #4]
 80080b4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	333c      	adds	r3, #60	; 0x3c
 80080be:	3304      	adds	r3, #4
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	4a26      	ldr	r2, [pc, #152]	; (8008160 <USB_EP0_OutStart+0xb8>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d90a      	bls.n	80080e2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80080d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80080dc:	d101      	bne.n	80080e2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80080de:	2300      	movs	r3, #0
 80080e0:	e037      	b.n	8008152 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80080e2:	697b      	ldr	r3, [r7, #20]
 80080e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080e8:	461a      	mov	r2, r3
 80080ea:	2300      	movs	r3, #0
 80080ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080f4:	691b      	ldr	r3, [r3, #16]
 80080f6:	697a      	ldr	r2, [r7, #20]
 80080f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008100:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008108:	691b      	ldr	r3, [r3, #16]
 800810a:	697a      	ldr	r2, [r7, #20]
 800810c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008110:	f043 0318 	orr.w	r3, r3, #24
 8008114:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008116:	697b      	ldr	r3, [r7, #20]
 8008118:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800811c:	691b      	ldr	r3, [r3, #16]
 800811e:	697a      	ldr	r2, [r7, #20]
 8008120:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008124:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008128:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800812a:	7afb      	ldrb	r3, [r7, #11]
 800812c:	2b01      	cmp	r3, #1
 800812e:	d10f      	bne.n	8008150 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008130:	697b      	ldr	r3, [r7, #20]
 8008132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008136:	461a      	mov	r2, r3
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	697a      	ldr	r2, [r7, #20]
 8008146:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800814a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800814e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008150:	2300      	movs	r3, #0
}
 8008152:	4618      	mov	r0, r3
 8008154:	371c      	adds	r7, #28
 8008156:	46bd      	mov	sp, r7
 8008158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815c:	4770      	bx	lr
 800815e:	bf00      	nop
 8008160:	4f54300a 	.word	0x4f54300a

08008164 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008164:	b480      	push	{r7}
 8008166:	b085      	sub	sp, #20
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800816c:	2300      	movs	r3, #0
 800816e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	3301      	adds	r3, #1
 8008174:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800817c:	d901      	bls.n	8008182 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800817e:	2303      	movs	r3, #3
 8008180:	e01b      	b.n	80081ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	691b      	ldr	r3, [r3, #16]
 8008186:	2b00      	cmp	r3, #0
 8008188:	daf2      	bge.n	8008170 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800818a:	2300      	movs	r3, #0
 800818c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	691b      	ldr	r3, [r3, #16]
 8008192:	f043 0201 	orr.w	r2, r3, #1
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	3301      	adds	r3, #1
 800819e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80081a6:	d901      	bls.n	80081ac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80081a8:	2303      	movs	r3, #3
 80081aa:	e006      	b.n	80081ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	691b      	ldr	r3, [r3, #16]
 80081b0:	f003 0301 	and.w	r3, r3, #1
 80081b4:	2b01      	cmp	r3, #1
 80081b6:	d0f0      	beq.n	800819a <USB_CoreReset+0x36>

  return HAL_OK;
 80081b8:	2300      	movs	r3, #0
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3714      	adds	r7, #20
 80081be:	46bd      	mov	sp, r7
 80081c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c4:	4770      	bx	lr
	...

080081c8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b084      	sub	sp, #16
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	460b      	mov	r3, r1
 80081d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80081d4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80081d8:	f004 fa02 	bl	800c5e0 <USBD_static_malloc>
 80081dc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d109      	bne.n	80081f8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	32b0      	adds	r2, #176	; 0xb0
 80081ee:	2100      	movs	r1, #0
 80081f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80081f4:	2302      	movs	r3, #2
 80081f6:	e0d4      	b.n	80083a2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80081f8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80081fc:	2100      	movs	r1, #0
 80081fe:	68f8      	ldr	r0, [r7, #12]
 8008200:	f007 faa9 	bl	800f756 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	32b0      	adds	r2, #176	; 0xb0
 800820e:	68f9      	ldr	r1, [r7, #12]
 8008210:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	32b0      	adds	r2, #176	; 0xb0
 800821e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	7c1b      	ldrb	r3, [r3, #16]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d138      	bne.n	80082a2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008230:	4b5e      	ldr	r3, [pc, #376]	; (80083ac <USBD_CDC_Init+0x1e4>)
 8008232:	7819      	ldrb	r1, [r3, #0]
 8008234:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008238:	2202      	movs	r2, #2
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f004 f8ad 	bl	800c39a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008240:	4b5a      	ldr	r3, [pc, #360]	; (80083ac <USBD_CDC_Init+0x1e4>)
 8008242:	781b      	ldrb	r3, [r3, #0]
 8008244:	f003 020f 	and.w	r2, r3, #15
 8008248:	6879      	ldr	r1, [r7, #4]
 800824a:	4613      	mov	r3, r2
 800824c:	009b      	lsls	r3, r3, #2
 800824e:	4413      	add	r3, r2
 8008250:	009b      	lsls	r3, r3, #2
 8008252:	440b      	add	r3, r1
 8008254:	3324      	adds	r3, #36	; 0x24
 8008256:	2201      	movs	r2, #1
 8008258:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800825a:	4b55      	ldr	r3, [pc, #340]	; (80083b0 <USBD_CDC_Init+0x1e8>)
 800825c:	7819      	ldrb	r1, [r3, #0]
 800825e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008262:	2202      	movs	r2, #2
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f004 f898 	bl	800c39a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800826a:	4b51      	ldr	r3, [pc, #324]	; (80083b0 <USBD_CDC_Init+0x1e8>)
 800826c:	781b      	ldrb	r3, [r3, #0]
 800826e:	f003 020f 	and.w	r2, r3, #15
 8008272:	6879      	ldr	r1, [r7, #4]
 8008274:	4613      	mov	r3, r2
 8008276:	009b      	lsls	r3, r3, #2
 8008278:	4413      	add	r3, r2
 800827a:	009b      	lsls	r3, r3, #2
 800827c:	440b      	add	r3, r1
 800827e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008282:	2201      	movs	r2, #1
 8008284:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008286:	4b4b      	ldr	r3, [pc, #300]	; (80083b4 <USBD_CDC_Init+0x1ec>)
 8008288:	781b      	ldrb	r3, [r3, #0]
 800828a:	f003 020f 	and.w	r2, r3, #15
 800828e:	6879      	ldr	r1, [r7, #4]
 8008290:	4613      	mov	r3, r2
 8008292:	009b      	lsls	r3, r3, #2
 8008294:	4413      	add	r3, r2
 8008296:	009b      	lsls	r3, r3, #2
 8008298:	440b      	add	r3, r1
 800829a:	3326      	adds	r3, #38	; 0x26
 800829c:	2210      	movs	r2, #16
 800829e:	801a      	strh	r2, [r3, #0]
 80082a0:	e035      	b.n	800830e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80082a2:	4b42      	ldr	r3, [pc, #264]	; (80083ac <USBD_CDC_Init+0x1e4>)
 80082a4:	7819      	ldrb	r1, [r3, #0]
 80082a6:	2340      	movs	r3, #64	; 0x40
 80082a8:	2202      	movs	r2, #2
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f004 f875 	bl	800c39a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80082b0:	4b3e      	ldr	r3, [pc, #248]	; (80083ac <USBD_CDC_Init+0x1e4>)
 80082b2:	781b      	ldrb	r3, [r3, #0]
 80082b4:	f003 020f 	and.w	r2, r3, #15
 80082b8:	6879      	ldr	r1, [r7, #4]
 80082ba:	4613      	mov	r3, r2
 80082bc:	009b      	lsls	r3, r3, #2
 80082be:	4413      	add	r3, r2
 80082c0:	009b      	lsls	r3, r3, #2
 80082c2:	440b      	add	r3, r1
 80082c4:	3324      	adds	r3, #36	; 0x24
 80082c6:	2201      	movs	r2, #1
 80082c8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80082ca:	4b39      	ldr	r3, [pc, #228]	; (80083b0 <USBD_CDC_Init+0x1e8>)
 80082cc:	7819      	ldrb	r1, [r3, #0]
 80082ce:	2340      	movs	r3, #64	; 0x40
 80082d0:	2202      	movs	r2, #2
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f004 f861 	bl	800c39a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80082d8:	4b35      	ldr	r3, [pc, #212]	; (80083b0 <USBD_CDC_Init+0x1e8>)
 80082da:	781b      	ldrb	r3, [r3, #0]
 80082dc:	f003 020f 	and.w	r2, r3, #15
 80082e0:	6879      	ldr	r1, [r7, #4]
 80082e2:	4613      	mov	r3, r2
 80082e4:	009b      	lsls	r3, r3, #2
 80082e6:	4413      	add	r3, r2
 80082e8:	009b      	lsls	r3, r3, #2
 80082ea:	440b      	add	r3, r1
 80082ec:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80082f0:	2201      	movs	r2, #1
 80082f2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80082f4:	4b2f      	ldr	r3, [pc, #188]	; (80083b4 <USBD_CDC_Init+0x1ec>)
 80082f6:	781b      	ldrb	r3, [r3, #0]
 80082f8:	f003 020f 	and.w	r2, r3, #15
 80082fc:	6879      	ldr	r1, [r7, #4]
 80082fe:	4613      	mov	r3, r2
 8008300:	009b      	lsls	r3, r3, #2
 8008302:	4413      	add	r3, r2
 8008304:	009b      	lsls	r3, r3, #2
 8008306:	440b      	add	r3, r1
 8008308:	3326      	adds	r3, #38	; 0x26
 800830a:	2210      	movs	r2, #16
 800830c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800830e:	4b29      	ldr	r3, [pc, #164]	; (80083b4 <USBD_CDC_Init+0x1ec>)
 8008310:	7819      	ldrb	r1, [r3, #0]
 8008312:	2308      	movs	r3, #8
 8008314:	2203      	movs	r2, #3
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f004 f83f 	bl	800c39a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800831c:	4b25      	ldr	r3, [pc, #148]	; (80083b4 <USBD_CDC_Init+0x1ec>)
 800831e:	781b      	ldrb	r3, [r3, #0]
 8008320:	f003 020f 	and.w	r2, r3, #15
 8008324:	6879      	ldr	r1, [r7, #4]
 8008326:	4613      	mov	r3, r2
 8008328:	009b      	lsls	r3, r3, #2
 800832a:	4413      	add	r3, r2
 800832c:	009b      	lsls	r3, r3, #2
 800832e:	440b      	add	r3, r1
 8008330:	3324      	adds	r3, #36	; 0x24
 8008332:	2201      	movs	r2, #1
 8008334:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	2200      	movs	r2, #0
 800833a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008344:	687a      	ldr	r2, [r7, #4]
 8008346:	33b0      	adds	r3, #176	; 0xb0
 8008348:	009b      	lsls	r3, r3, #2
 800834a:	4413      	add	r3, r2
 800834c:	685b      	ldr	r3, [r3, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	2200      	movs	r2, #0
 8008356:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	2200      	movs	r2, #0
 800835e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008368:	2b00      	cmp	r3, #0
 800836a:	d101      	bne.n	8008370 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800836c:	2302      	movs	r3, #2
 800836e:	e018      	b.n	80083a2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	7c1b      	ldrb	r3, [r3, #16]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d10a      	bne.n	800838e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008378:	4b0d      	ldr	r3, [pc, #52]	; (80083b0 <USBD_CDC_Init+0x1e8>)
 800837a:	7819      	ldrb	r1, [r3, #0]
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008382:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f004 f8f6 	bl	800c578 <USBD_LL_PrepareReceive>
 800838c:	e008      	b.n	80083a0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800838e:	4b08      	ldr	r3, [pc, #32]	; (80083b0 <USBD_CDC_Init+0x1e8>)
 8008390:	7819      	ldrb	r1, [r3, #0]
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008398:	2340      	movs	r3, #64	; 0x40
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f004 f8ec 	bl	800c578 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80083a0:	2300      	movs	r3, #0
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3710      	adds	r7, #16
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}
 80083aa:	bf00      	nop
 80083ac:	20000093 	.word	0x20000093
 80083b0:	20000094 	.word	0x20000094
 80083b4:	20000095 	.word	0x20000095

080083b8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b082      	sub	sp, #8
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
 80083c0:	460b      	mov	r3, r1
 80083c2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80083c4:	4b3a      	ldr	r3, [pc, #232]	; (80084b0 <USBD_CDC_DeInit+0xf8>)
 80083c6:	781b      	ldrb	r3, [r3, #0]
 80083c8:	4619      	mov	r1, r3
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f004 f80b 	bl	800c3e6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80083d0:	4b37      	ldr	r3, [pc, #220]	; (80084b0 <USBD_CDC_DeInit+0xf8>)
 80083d2:	781b      	ldrb	r3, [r3, #0]
 80083d4:	f003 020f 	and.w	r2, r3, #15
 80083d8:	6879      	ldr	r1, [r7, #4]
 80083da:	4613      	mov	r3, r2
 80083dc:	009b      	lsls	r3, r3, #2
 80083de:	4413      	add	r3, r2
 80083e0:	009b      	lsls	r3, r3, #2
 80083e2:	440b      	add	r3, r1
 80083e4:	3324      	adds	r3, #36	; 0x24
 80083e6:	2200      	movs	r2, #0
 80083e8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80083ea:	4b32      	ldr	r3, [pc, #200]	; (80084b4 <USBD_CDC_DeInit+0xfc>)
 80083ec:	781b      	ldrb	r3, [r3, #0]
 80083ee:	4619      	mov	r1, r3
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f003 fff8 	bl	800c3e6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80083f6:	4b2f      	ldr	r3, [pc, #188]	; (80084b4 <USBD_CDC_DeInit+0xfc>)
 80083f8:	781b      	ldrb	r3, [r3, #0]
 80083fa:	f003 020f 	and.w	r2, r3, #15
 80083fe:	6879      	ldr	r1, [r7, #4]
 8008400:	4613      	mov	r3, r2
 8008402:	009b      	lsls	r3, r3, #2
 8008404:	4413      	add	r3, r2
 8008406:	009b      	lsls	r3, r3, #2
 8008408:	440b      	add	r3, r1
 800840a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800840e:	2200      	movs	r2, #0
 8008410:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008412:	4b29      	ldr	r3, [pc, #164]	; (80084b8 <USBD_CDC_DeInit+0x100>)
 8008414:	781b      	ldrb	r3, [r3, #0]
 8008416:	4619      	mov	r1, r3
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f003 ffe4 	bl	800c3e6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800841e:	4b26      	ldr	r3, [pc, #152]	; (80084b8 <USBD_CDC_DeInit+0x100>)
 8008420:	781b      	ldrb	r3, [r3, #0]
 8008422:	f003 020f 	and.w	r2, r3, #15
 8008426:	6879      	ldr	r1, [r7, #4]
 8008428:	4613      	mov	r3, r2
 800842a:	009b      	lsls	r3, r3, #2
 800842c:	4413      	add	r3, r2
 800842e:	009b      	lsls	r3, r3, #2
 8008430:	440b      	add	r3, r1
 8008432:	3324      	adds	r3, #36	; 0x24
 8008434:	2200      	movs	r2, #0
 8008436:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008438:	4b1f      	ldr	r3, [pc, #124]	; (80084b8 <USBD_CDC_DeInit+0x100>)
 800843a:	781b      	ldrb	r3, [r3, #0]
 800843c:	f003 020f 	and.w	r2, r3, #15
 8008440:	6879      	ldr	r1, [r7, #4]
 8008442:	4613      	mov	r3, r2
 8008444:	009b      	lsls	r3, r3, #2
 8008446:	4413      	add	r3, r2
 8008448:	009b      	lsls	r3, r3, #2
 800844a:	440b      	add	r3, r1
 800844c:	3326      	adds	r3, #38	; 0x26
 800844e:	2200      	movs	r2, #0
 8008450:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	32b0      	adds	r2, #176	; 0xb0
 800845c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d01f      	beq.n	80084a4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800846a:	687a      	ldr	r2, [r7, #4]
 800846c:	33b0      	adds	r3, #176	; 0xb0
 800846e:	009b      	lsls	r3, r3, #2
 8008470:	4413      	add	r3, r2
 8008472:	685b      	ldr	r3, [r3, #4]
 8008474:	685b      	ldr	r3, [r3, #4]
 8008476:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	32b0      	adds	r2, #176	; 0xb0
 8008482:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008486:	4618      	mov	r0, r3
 8008488:	f004 f8b8 	bl	800c5fc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	32b0      	adds	r2, #176	; 0xb0
 8008496:	2100      	movs	r1, #0
 8008498:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2200      	movs	r2, #0
 80084a0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80084a4:	2300      	movs	r3, #0
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	3708      	adds	r7, #8
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}
 80084ae:	bf00      	nop
 80084b0:	20000093 	.word	0x20000093
 80084b4:	20000094 	.word	0x20000094
 80084b8:	20000095 	.word	0x20000095

080084bc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b086      	sub	sp, #24
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	32b0      	adds	r2, #176	; 0xb0
 80084d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084d4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80084d6:	2300      	movs	r3, #0
 80084d8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80084da:	2300      	movs	r3, #0
 80084dc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80084de:	2300      	movs	r3, #0
 80084e0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d101      	bne.n	80084ec <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80084e8:	2303      	movs	r3, #3
 80084ea:	e0bf      	b.n	800866c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	781b      	ldrb	r3, [r3, #0]
 80084f0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d050      	beq.n	800859a <USBD_CDC_Setup+0xde>
 80084f8:	2b20      	cmp	r3, #32
 80084fa:	f040 80af 	bne.w	800865c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	88db      	ldrh	r3, [r3, #6]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d03a      	beq.n	800857c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	781b      	ldrb	r3, [r3, #0]
 800850a:	b25b      	sxtb	r3, r3
 800850c:	2b00      	cmp	r3, #0
 800850e:	da1b      	bge.n	8008548 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008516:	687a      	ldr	r2, [r7, #4]
 8008518:	33b0      	adds	r3, #176	; 0xb0
 800851a:	009b      	lsls	r3, r3, #2
 800851c:	4413      	add	r3, r2
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	689b      	ldr	r3, [r3, #8]
 8008522:	683a      	ldr	r2, [r7, #0]
 8008524:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008526:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008528:	683a      	ldr	r2, [r7, #0]
 800852a:	88d2      	ldrh	r2, [r2, #6]
 800852c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	88db      	ldrh	r3, [r3, #6]
 8008532:	2b07      	cmp	r3, #7
 8008534:	bf28      	it	cs
 8008536:	2307      	movcs	r3, #7
 8008538:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800853a:	693b      	ldr	r3, [r7, #16]
 800853c:	89fa      	ldrh	r2, [r7, #14]
 800853e:	4619      	mov	r1, r3
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f001 fd89 	bl	800a058 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008546:	e090      	b.n	800866a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	785a      	ldrb	r2, [r3, #1]
 800854c:	693b      	ldr	r3, [r7, #16]
 800854e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	88db      	ldrh	r3, [r3, #6]
 8008556:	2b3f      	cmp	r3, #63	; 0x3f
 8008558:	d803      	bhi.n	8008562 <USBD_CDC_Setup+0xa6>
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	88db      	ldrh	r3, [r3, #6]
 800855e:	b2da      	uxtb	r2, r3
 8008560:	e000      	b.n	8008564 <USBD_CDC_Setup+0xa8>
 8008562:	2240      	movs	r2, #64	; 0x40
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800856a:	6939      	ldr	r1, [r7, #16]
 800856c:	693b      	ldr	r3, [r7, #16]
 800856e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008572:	461a      	mov	r2, r3
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	f001 fd9b 	bl	800a0b0 <USBD_CtlPrepareRx>
      break;
 800857a:	e076      	b.n	800866a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008582:	687a      	ldr	r2, [r7, #4]
 8008584:	33b0      	adds	r3, #176	; 0xb0
 8008586:	009b      	lsls	r3, r3, #2
 8008588:	4413      	add	r3, r2
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	689b      	ldr	r3, [r3, #8]
 800858e:	683a      	ldr	r2, [r7, #0]
 8008590:	7850      	ldrb	r0, [r2, #1]
 8008592:	2200      	movs	r2, #0
 8008594:	6839      	ldr	r1, [r7, #0]
 8008596:	4798      	blx	r3
      break;
 8008598:	e067      	b.n	800866a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	785b      	ldrb	r3, [r3, #1]
 800859e:	2b0b      	cmp	r3, #11
 80085a0:	d851      	bhi.n	8008646 <USBD_CDC_Setup+0x18a>
 80085a2:	a201      	add	r2, pc, #4	; (adr r2, 80085a8 <USBD_CDC_Setup+0xec>)
 80085a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085a8:	080085d9 	.word	0x080085d9
 80085ac:	08008655 	.word	0x08008655
 80085b0:	08008647 	.word	0x08008647
 80085b4:	08008647 	.word	0x08008647
 80085b8:	08008647 	.word	0x08008647
 80085bc:	08008647 	.word	0x08008647
 80085c0:	08008647 	.word	0x08008647
 80085c4:	08008647 	.word	0x08008647
 80085c8:	08008647 	.word	0x08008647
 80085cc:	08008647 	.word	0x08008647
 80085d0:	08008603 	.word	0x08008603
 80085d4:	0800862d 	.word	0x0800862d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085de:	b2db      	uxtb	r3, r3
 80085e0:	2b03      	cmp	r3, #3
 80085e2:	d107      	bne.n	80085f4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80085e4:	f107 030a 	add.w	r3, r7, #10
 80085e8:	2202      	movs	r2, #2
 80085ea:	4619      	mov	r1, r3
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f001 fd33 	bl	800a058 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80085f2:	e032      	b.n	800865a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80085f4:	6839      	ldr	r1, [r7, #0]
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f001 fcbd 	bl	8009f76 <USBD_CtlError>
            ret = USBD_FAIL;
 80085fc:	2303      	movs	r3, #3
 80085fe:	75fb      	strb	r3, [r7, #23]
          break;
 8008600:	e02b      	b.n	800865a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008608:	b2db      	uxtb	r3, r3
 800860a:	2b03      	cmp	r3, #3
 800860c:	d107      	bne.n	800861e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800860e:	f107 030d 	add.w	r3, r7, #13
 8008612:	2201      	movs	r2, #1
 8008614:	4619      	mov	r1, r3
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f001 fd1e 	bl	800a058 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800861c:	e01d      	b.n	800865a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800861e:	6839      	ldr	r1, [r7, #0]
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f001 fca8 	bl	8009f76 <USBD_CtlError>
            ret = USBD_FAIL;
 8008626:	2303      	movs	r3, #3
 8008628:	75fb      	strb	r3, [r7, #23]
          break;
 800862a:	e016      	b.n	800865a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008632:	b2db      	uxtb	r3, r3
 8008634:	2b03      	cmp	r3, #3
 8008636:	d00f      	beq.n	8008658 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008638:	6839      	ldr	r1, [r7, #0]
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f001 fc9b 	bl	8009f76 <USBD_CtlError>
            ret = USBD_FAIL;
 8008640:	2303      	movs	r3, #3
 8008642:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008644:	e008      	b.n	8008658 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008646:	6839      	ldr	r1, [r7, #0]
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f001 fc94 	bl	8009f76 <USBD_CtlError>
          ret = USBD_FAIL;
 800864e:	2303      	movs	r3, #3
 8008650:	75fb      	strb	r3, [r7, #23]
          break;
 8008652:	e002      	b.n	800865a <USBD_CDC_Setup+0x19e>
          break;
 8008654:	bf00      	nop
 8008656:	e008      	b.n	800866a <USBD_CDC_Setup+0x1ae>
          break;
 8008658:	bf00      	nop
      }
      break;
 800865a:	e006      	b.n	800866a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800865c:	6839      	ldr	r1, [r7, #0]
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f001 fc89 	bl	8009f76 <USBD_CtlError>
      ret = USBD_FAIL;
 8008664:	2303      	movs	r3, #3
 8008666:	75fb      	strb	r3, [r7, #23]
      break;
 8008668:	bf00      	nop
  }

  return (uint8_t)ret;
 800866a:	7dfb      	ldrb	r3, [r7, #23]
}
 800866c:	4618      	mov	r0, r3
 800866e:	3718      	adds	r7, #24
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}

08008674 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b084      	sub	sp, #16
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
 800867c:	460b      	mov	r3, r1
 800867e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008686:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	32b0      	adds	r2, #176	; 0xb0
 8008692:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d101      	bne.n	800869e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800869a:	2303      	movs	r3, #3
 800869c:	e065      	b.n	800876a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	32b0      	adds	r2, #176	; 0xb0
 80086a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086ac:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80086ae:	78fb      	ldrb	r3, [r7, #3]
 80086b0:	f003 020f 	and.w	r2, r3, #15
 80086b4:	6879      	ldr	r1, [r7, #4]
 80086b6:	4613      	mov	r3, r2
 80086b8:	009b      	lsls	r3, r3, #2
 80086ba:	4413      	add	r3, r2
 80086bc:	009b      	lsls	r3, r3, #2
 80086be:	440b      	add	r3, r1
 80086c0:	3318      	adds	r3, #24
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d02f      	beq.n	8008728 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80086c8:	78fb      	ldrb	r3, [r7, #3]
 80086ca:	f003 020f 	and.w	r2, r3, #15
 80086ce:	6879      	ldr	r1, [r7, #4]
 80086d0:	4613      	mov	r3, r2
 80086d2:	009b      	lsls	r3, r3, #2
 80086d4:	4413      	add	r3, r2
 80086d6:	009b      	lsls	r3, r3, #2
 80086d8:	440b      	add	r3, r1
 80086da:	3318      	adds	r3, #24
 80086dc:	681a      	ldr	r2, [r3, #0]
 80086de:	78fb      	ldrb	r3, [r7, #3]
 80086e0:	f003 010f 	and.w	r1, r3, #15
 80086e4:	68f8      	ldr	r0, [r7, #12]
 80086e6:	460b      	mov	r3, r1
 80086e8:	00db      	lsls	r3, r3, #3
 80086ea:	440b      	add	r3, r1
 80086ec:	009b      	lsls	r3, r3, #2
 80086ee:	4403      	add	r3, r0
 80086f0:	331c      	adds	r3, #28
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	fbb2 f1f3 	udiv	r1, r2, r3
 80086f8:	fb01 f303 	mul.w	r3, r1, r3
 80086fc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d112      	bne.n	8008728 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008702:	78fb      	ldrb	r3, [r7, #3]
 8008704:	f003 020f 	and.w	r2, r3, #15
 8008708:	6879      	ldr	r1, [r7, #4]
 800870a:	4613      	mov	r3, r2
 800870c:	009b      	lsls	r3, r3, #2
 800870e:	4413      	add	r3, r2
 8008710:	009b      	lsls	r3, r3, #2
 8008712:	440b      	add	r3, r1
 8008714:	3318      	adds	r3, #24
 8008716:	2200      	movs	r2, #0
 8008718:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800871a:	78f9      	ldrb	r1, [r7, #3]
 800871c:	2300      	movs	r3, #0
 800871e:	2200      	movs	r2, #0
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f003 ff08 	bl	800c536 <USBD_LL_Transmit>
 8008726:	e01f      	b.n	8008768 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	2200      	movs	r2, #0
 800872c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008736:	687a      	ldr	r2, [r7, #4]
 8008738:	33b0      	adds	r3, #176	; 0xb0
 800873a:	009b      	lsls	r3, r3, #2
 800873c:	4413      	add	r3, r2
 800873e:	685b      	ldr	r3, [r3, #4]
 8008740:	691b      	ldr	r3, [r3, #16]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d010      	beq.n	8008768 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800874c:	687a      	ldr	r2, [r7, #4]
 800874e:	33b0      	adds	r3, #176	; 0xb0
 8008750:	009b      	lsls	r3, r3, #2
 8008752:	4413      	add	r3, r2
 8008754:	685b      	ldr	r3, [r3, #4]
 8008756:	691b      	ldr	r3, [r3, #16]
 8008758:	68ba      	ldr	r2, [r7, #8]
 800875a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800875e:	68ba      	ldr	r2, [r7, #8]
 8008760:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008764:	78fa      	ldrb	r2, [r7, #3]
 8008766:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008768:	2300      	movs	r3, #0
}
 800876a:	4618      	mov	r0, r3
 800876c:	3710      	adds	r7, #16
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}

08008772 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008772:	b580      	push	{r7, lr}
 8008774:	b084      	sub	sp, #16
 8008776:	af00      	add	r7, sp, #0
 8008778:	6078      	str	r0, [r7, #4]
 800877a:	460b      	mov	r3, r1
 800877c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	32b0      	adds	r2, #176	; 0xb0
 8008788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800878c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	32b0      	adds	r2, #176	; 0xb0
 8008798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d101      	bne.n	80087a4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80087a0:	2303      	movs	r3, #3
 80087a2:	e01a      	b.n	80087da <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80087a4:	78fb      	ldrb	r3, [r7, #3]
 80087a6:	4619      	mov	r1, r3
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f003 ff06 	bl	800c5ba <USBD_LL_GetRxDataSize>
 80087ae:	4602      	mov	r2, r0
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80087bc:	687a      	ldr	r2, [r7, #4]
 80087be:	33b0      	adds	r3, #176	; 0xb0
 80087c0:	009b      	lsls	r3, r3, #2
 80087c2:	4413      	add	r3, r2
 80087c4:	685b      	ldr	r3, [r3, #4]
 80087c6:	68db      	ldr	r3, [r3, #12]
 80087c8:	68fa      	ldr	r2, [r7, #12]
 80087ca:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80087ce:	68fa      	ldr	r2, [r7, #12]
 80087d0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80087d4:	4611      	mov	r1, r2
 80087d6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80087d8:	2300      	movs	r3, #0
}
 80087da:	4618      	mov	r0, r3
 80087dc:	3710      	adds	r7, #16
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}

080087e2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80087e2:	b580      	push	{r7, lr}
 80087e4:	b084      	sub	sp, #16
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	32b0      	adds	r2, #176	; 0xb0
 80087f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087f8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d101      	bne.n	8008804 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008800:	2303      	movs	r3, #3
 8008802:	e025      	b.n	8008850 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800880a:	687a      	ldr	r2, [r7, #4]
 800880c:	33b0      	adds	r3, #176	; 0xb0
 800880e:	009b      	lsls	r3, r3, #2
 8008810:	4413      	add	r3, r2
 8008812:	685b      	ldr	r3, [r3, #4]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d01a      	beq.n	800884e <USBD_CDC_EP0_RxReady+0x6c>
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800881e:	2bff      	cmp	r3, #255	; 0xff
 8008820:	d015      	beq.n	800884e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008828:	687a      	ldr	r2, [r7, #4]
 800882a:	33b0      	adds	r3, #176	; 0xb0
 800882c:	009b      	lsls	r3, r3, #2
 800882e:	4413      	add	r3, r2
 8008830:	685b      	ldr	r3, [r3, #4]
 8008832:	689b      	ldr	r3, [r3, #8]
 8008834:	68fa      	ldr	r2, [r7, #12]
 8008836:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800883a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800883c:	68fa      	ldr	r2, [r7, #12]
 800883e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008842:	b292      	uxth	r2, r2
 8008844:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	22ff      	movs	r2, #255	; 0xff
 800884a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800884e:	2300      	movs	r3, #0
}
 8008850:	4618      	mov	r0, r3
 8008852:	3710      	adds	r7, #16
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}

08008858 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b086      	sub	sp, #24
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008860:	2182      	movs	r1, #130	; 0x82
 8008862:	4818      	ldr	r0, [pc, #96]	; (80088c4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008864:	f000 fd4f 	bl	8009306 <USBD_GetEpDesc>
 8008868:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800886a:	2101      	movs	r1, #1
 800886c:	4815      	ldr	r0, [pc, #84]	; (80088c4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800886e:	f000 fd4a 	bl	8009306 <USBD_GetEpDesc>
 8008872:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008874:	2181      	movs	r1, #129	; 0x81
 8008876:	4813      	ldr	r0, [pc, #76]	; (80088c4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008878:	f000 fd45 	bl	8009306 <USBD_GetEpDesc>
 800887c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d002      	beq.n	800888a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008884:	697b      	ldr	r3, [r7, #20]
 8008886:	2210      	movs	r2, #16
 8008888:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800888a:	693b      	ldr	r3, [r7, #16]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d006      	beq.n	800889e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008890:	693b      	ldr	r3, [r7, #16]
 8008892:	2200      	movs	r2, #0
 8008894:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008898:	711a      	strb	r2, [r3, #4]
 800889a:	2200      	movs	r2, #0
 800889c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d006      	beq.n	80088b2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	2200      	movs	r2, #0
 80088a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80088ac:	711a      	strb	r2, [r3, #4]
 80088ae:	2200      	movs	r2, #0
 80088b0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2243      	movs	r2, #67	; 0x43
 80088b6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80088b8:	4b02      	ldr	r3, [pc, #8]	; (80088c4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3718      	adds	r7, #24
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}
 80088c2:	bf00      	nop
 80088c4:	20000050 	.word	0x20000050

080088c8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b086      	sub	sp, #24
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80088d0:	2182      	movs	r1, #130	; 0x82
 80088d2:	4818      	ldr	r0, [pc, #96]	; (8008934 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80088d4:	f000 fd17 	bl	8009306 <USBD_GetEpDesc>
 80088d8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80088da:	2101      	movs	r1, #1
 80088dc:	4815      	ldr	r0, [pc, #84]	; (8008934 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80088de:	f000 fd12 	bl	8009306 <USBD_GetEpDesc>
 80088e2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80088e4:	2181      	movs	r1, #129	; 0x81
 80088e6:	4813      	ldr	r0, [pc, #76]	; (8008934 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80088e8:	f000 fd0d 	bl	8009306 <USBD_GetEpDesc>
 80088ec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d002      	beq.n	80088fa <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80088f4:	697b      	ldr	r3, [r7, #20]
 80088f6:	2210      	movs	r2, #16
 80088f8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d006      	beq.n	800890e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008900:	693b      	ldr	r3, [r7, #16]
 8008902:	2200      	movs	r2, #0
 8008904:	711a      	strb	r2, [r3, #4]
 8008906:	2200      	movs	r2, #0
 8008908:	f042 0202 	orr.w	r2, r2, #2
 800890c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d006      	beq.n	8008922 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	2200      	movs	r2, #0
 8008918:	711a      	strb	r2, [r3, #4]
 800891a:	2200      	movs	r2, #0
 800891c:	f042 0202 	orr.w	r2, r2, #2
 8008920:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2243      	movs	r2, #67	; 0x43
 8008926:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008928:	4b02      	ldr	r3, [pc, #8]	; (8008934 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800892a:	4618      	mov	r0, r3
 800892c:	3718      	adds	r7, #24
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}
 8008932:	bf00      	nop
 8008934:	20000050 	.word	0x20000050

08008938 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b086      	sub	sp, #24
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008940:	2182      	movs	r1, #130	; 0x82
 8008942:	4818      	ldr	r0, [pc, #96]	; (80089a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008944:	f000 fcdf 	bl	8009306 <USBD_GetEpDesc>
 8008948:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800894a:	2101      	movs	r1, #1
 800894c:	4815      	ldr	r0, [pc, #84]	; (80089a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800894e:	f000 fcda 	bl	8009306 <USBD_GetEpDesc>
 8008952:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008954:	2181      	movs	r1, #129	; 0x81
 8008956:	4813      	ldr	r0, [pc, #76]	; (80089a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008958:	f000 fcd5 	bl	8009306 <USBD_GetEpDesc>
 800895c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d002      	beq.n	800896a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	2210      	movs	r2, #16
 8008968:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800896a:	693b      	ldr	r3, [r7, #16]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d006      	beq.n	800897e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008970:	693b      	ldr	r3, [r7, #16]
 8008972:	2200      	movs	r2, #0
 8008974:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008978:	711a      	strb	r2, [r3, #4]
 800897a:	2200      	movs	r2, #0
 800897c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d006      	beq.n	8008992 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	2200      	movs	r2, #0
 8008988:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800898c:	711a      	strb	r2, [r3, #4]
 800898e:	2200      	movs	r2, #0
 8008990:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2243      	movs	r2, #67	; 0x43
 8008996:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008998:	4b02      	ldr	r3, [pc, #8]	; (80089a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800899a:	4618      	mov	r0, r3
 800899c:	3718      	adds	r7, #24
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}
 80089a2:	bf00      	nop
 80089a4:	20000050 	.word	0x20000050

080089a8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b083      	sub	sp, #12
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	220a      	movs	r2, #10
 80089b4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80089b6:	4b03      	ldr	r3, [pc, #12]	; (80089c4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	370c      	adds	r7, #12
 80089bc:	46bd      	mov	sp, r7
 80089be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c2:	4770      	bx	lr
 80089c4:	2000000c 	.word	0x2000000c

080089c8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80089c8:	b480      	push	{r7}
 80089ca:	b083      	sub	sp, #12
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
 80089d0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d101      	bne.n	80089dc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80089d8:	2303      	movs	r3, #3
 80089da:	e009      	b.n	80089f0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80089e2:	687a      	ldr	r2, [r7, #4]
 80089e4:	33b0      	adds	r3, #176	; 0xb0
 80089e6:	009b      	lsls	r3, r3, #2
 80089e8:	4413      	add	r3, r2
 80089ea:	683a      	ldr	r2, [r7, #0]
 80089ec:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80089ee:	2300      	movs	r3, #0
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	370c      	adds	r7, #12
 80089f4:	46bd      	mov	sp, r7
 80089f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fa:	4770      	bx	lr

080089fc <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b087      	sub	sp, #28
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	60f8      	str	r0, [r7, #12]
 8008a04:	60b9      	str	r1, [r7, #8]
 8008a06:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	32b0      	adds	r2, #176	; 0xb0
 8008a12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a16:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008a18:	697b      	ldr	r3, [r7, #20]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d101      	bne.n	8008a22 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008a1e:	2303      	movs	r3, #3
 8008a20:	e008      	b.n	8008a34 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	68ba      	ldr	r2, [r7, #8]
 8008a26:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	687a      	ldr	r2, [r7, #4]
 8008a2e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008a32:	2300      	movs	r3, #0
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	371c      	adds	r7, #28
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3e:	4770      	bx	lr

08008a40 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008a40:	b480      	push	{r7}
 8008a42:	b085      	sub	sp, #20
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
 8008a48:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	32b0      	adds	r2, #176	; 0xb0
 8008a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a58:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d101      	bne.n	8008a64 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008a60:	2303      	movs	r3, #3
 8008a62:	e004      	b.n	8008a6e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	683a      	ldr	r2, [r7, #0]
 8008a68:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008a6c:	2300      	movs	r3, #0
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3714      	adds	r7, #20
 8008a72:	46bd      	mov	sp, r7
 8008a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a78:	4770      	bx	lr
	...

08008a7c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b084      	sub	sp, #16
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	32b0      	adds	r2, #176	; 0xb0
 8008a8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a92:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8008a94:	2301      	movs	r3, #1
 8008a96:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d101      	bne.n	8008aa2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008a9e:	2303      	movs	r3, #3
 8008aa0:	e025      	b.n	8008aee <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d11f      	bne.n	8008aec <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	2201      	movs	r2, #1
 8008ab0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008ab4:	4b10      	ldr	r3, [pc, #64]	; (8008af8 <USBD_CDC_TransmitPacket+0x7c>)
 8008ab6:	781b      	ldrb	r3, [r3, #0]
 8008ab8:	f003 020f 	and.w	r2, r3, #15
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	4613      	mov	r3, r2
 8008ac6:	009b      	lsls	r3, r3, #2
 8008ac8:	4413      	add	r3, r2
 8008aca:	009b      	lsls	r3, r3, #2
 8008acc:	4403      	add	r3, r0
 8008ace:	3318      	adds	r3, #24
 8008ad0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008ad2:	4b09      	ldr	r3, [pc, #36]	; (8008af8 <USBD_CDC_TransmitPacket+0x7c>)
 8008ad4:	7819      	ldrb	r1, [r3, #0]
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f003 fd27 	bl	800c536 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008ae8:	2300      	movs	r3, #0
 8008aea:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3710      	adds	r7, #16
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}
 8008af6:	bf00      	nop
 8008af8:	20000093 	.word	0x20000093

08008afc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b084      	sub	sp, #16
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	32b0      	adds	r2, #176	; 0xb0
 8008b0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b12:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	32b0      	adds	r2, #176	; 0xb0
 8008b1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d101      	bne.n	8008b2a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008b26:	2303      	movs	r3, #3
 8008b28:	e018      	b.n	8008b5c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	7c1b      	ldrb	r3, [r3, #16]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d10a      	bne.n	8008b48 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008b32:	4b0c      	ldr	r3, [pc, #48]	; (8008b64 <USBD_CDC_ReceivePacket+0x68>)
 8008b34:	7819      	ldrb	r1, [r3, #0]
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008b3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f003 fd19 	bl	800c578 <USBD_LL_PrepareReceive>
 8008b46:	e008      	b.n	8008b5a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008b48:	4b06      	ldr	r3, [pc, #24]	; (8008b64 <USBD_CDC_ReceivePacket+0x68>)
 8008b4a:	7819      	ldrb	r1, [r3, #0]
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008b52:	2340      	movs	r3, #64	; 0x40
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f003 fd0f 	bl	800c578 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008b5a:	2300      	movs	r3, #0
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	3710      	adds	r7, #16
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}
 8008b64:	20000094 	.word	0x20000094

08008b68 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b086      	sub	sp, #24
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	60f8      	str	r0, [r7, #12]
 8008b70:	60b9      	str	r1, [r7, #8]
 8008b72:	4613      	mov	r3, r2
 8008b74:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d101      	bne.n	8008b80 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008b7c:	2303      	movs	r3, #3
 8008b7e:	e01f      	b.n	8008bc0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	2200      	movs	r2, #0
 8008b84:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	2200      	movs	r2, #0
 8008b94:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d003      	beq.n	8008ba6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	68ba      	ldr	r2, [r7, #8]
 8008ba2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	2201      	movs	r2, #1
 8008baa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	79fa      	ldrb	r2, [r7, #7]
 8008bb2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008bb4:	68f8      	ldr	r0, [r7, #12]
 8008bb6:	f003 fb89 	bl	800c2cc <USBD_LL_Init>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008bbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	3718      	adds	r7, #24
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}

08008bc8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b084      	sub	sp, #16
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
 8008bd0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d101      	bne.n	8008be0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008bdc:	2303      	movs	r3, #3
 8008bde:	e025      	b.n	8008c2c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	683a      	ldr	r2, [r7, #0]
 8008be4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	32ae      	adds	r2, #174	; 0xae
 8008bf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d00f      	beq.n	8008c1c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	32ae      	adds	r2, #174	; 0xae
 8008c06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c0c:	f107 020e 	add.w	r2, r7, #14
 8008c10:	4610      	mov	r0, r2
 8008c12:	4798      	blx	r3
 8008c14:	4602      	mov	r2, r0
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008c22:	1c5a      	adds	r2, r3, #1
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8008c2a:	2300      	movs	r3, #0
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	3710      	adds	r7, #16
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}

08008c34 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b082      	sub	sp, #8
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f003 fb91 	bl	800c364 <USBD_LL_Start>
 8008c42:	4603      	mov	r3, r0
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	3708      	adds	r7, #8
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bd80      	pop	{r7, pc}

08008c4c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b083      	sub	sp, #12
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008c54:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	370c      	adds	r7, #12
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c60:	4770      	bx	lr

08008c62 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c62:	b580      	push	{r7, lr}
 8008c64:	b084      	sub	sp, #16
 8008c66:	af00      	add	r7, sp, #0
 8008c68:	6078      	str	r0, [r7, #4]
 8008c6a:	460b      	mov	r3, r1
 8008c6c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d009      	beq.n	8008c90 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	78fa      	ldrb	r2, [r7, #3]
 8008c86:	4611      	mov	r1, r2
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	4798      	blx	r3
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	3710      	adds	r7, #16
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}

08008c9a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c9a:	b580      	push	{r7, lr}
 8008c9c:	b084      	sub	sp, #16
 8008c9e:	af00      	add	r7, sp, #0
 8008ca0:	6078      	str	r0, [r7, #4]
 8008ca2:	460b      	mov	r3, r1
 8008ca4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cb0:	685b      	ldr	r3, [r3, #4]
 8008cb2:	78fa      	ldrb	r2, [r7, #3]
 8008cb4:	4611      	mov	r1, r2
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	4798      	blx	r3
 8008cba:	4603      	mov	r3, r0
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d001      	beq.n	8008cc4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008cc0:	2303      	movs	r3, #3
 8008cc2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3710      	adds	r7, #16
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}

08008cce <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008cce:	b580      	push	{r7, lr}
 8008cd0:	b084      	sub	sp, #16
 8008cd2:	af00      	add	r7, sp, #0
 8008cd4:	6078      	str	r0, [r7, #4]
 8008cd6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008cde:	6839      	ldr	r1, [r7, #0]
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f001 f90e 	bl	8009f02 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2201      	movs	r2, #1
 8008cea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008cf4:	461a      	mov	r2, r3
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008d02:	f003 031f 	and.w	r3, r3, #31
 8008d06:	2b02      	cmp	r3, #2
 8008d08:	d01a      	beq.n	8008d40 <USBD_LL_SetupStage+0x72>
 8008d0a:	2b02      	cmp	r3, #2
 8008d0c:	d822      	bhi.n	8008d54 <USBD_LL_SetupStage+0x86>
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d002      	beq.n	8008d18 <USBD_LL_SetupStage+0x4a>
 8008d12:	2b01      	cmp	r3, #1
 8008d14:	d00a      	beq.n	8008d2c <USBD_LL_SetupStage+0x5e>
 8008d16:	e01d      	b.n	8008d54 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008d1e:	4619      	mov	r1, r3
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f000 fb65 	bl	80093f0 <USBD_StdDevReq>
 8008d26:	4603      	mov	r3, r0
 8008d28:	73fb      	strb	r3, [r7, #15]
      break;
 8008d2a:	e020      	b.n	8008d6e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008d32:	4619      	mov	r1, r3
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f000 fbcd 	bl	80094d4 <USBD_StdItfReq>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	73fb      	strb	r3, [r7, #15]
      break;
 8008d3e:	e016      	b.n	8008d6e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008d46:	4619      	mov	r1, r3
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f000 fc2f 	bl	80095ac <USBD_StdEPReq>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	73fb      	strb	r3, [r7, #15]
      break;
 8008d52:	e00c      	b.n	8008d6e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008d5a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008d5e:	b2db      	uxtb	r3, r3
 8008d60:	4619      	mov	r1, r3
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f003 fb5e 	bl	800c424 <USBD_LL_StallEP>
 8008d68:	4603      	mov	r3, r0
 8008d6a:	73fb      	strb	r3, [r7, #15]
      break;
 8008d6c:	bf00      	nop
  }

  return ret;
 8008d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	3710      	adds	r7, #16
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}

08008d78 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b086      	sub	sp, #24
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	60f8      	str	r0, [r7, #12]
 8008d80:	460b      	mov	r3, r1
 8008d82:	607a      	str	r2, [r7, #4]
 8008d84:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008d86:	2300      	movs	r3, #0
 8008d88:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008d8a:	7afb      	ldrb	r3, [r7, #11]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d16e      	bne.n	8008e6e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008d96:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008d9e:	2b03      	cmp	r3, #3
 8008da0:	f040 8098 	bne.w	8008ed4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008da4:	693b      	ldr	r3, [r7, #16]
 8008da6:	689a      	ldr	r2, [r3, #8]
 8008da8:	693b      	ldr	r3, [r7, #16]
 8008daa:	68db      	ldr	r3, [r3, #12]
 8008dac:	429a      	cmp	r2, r3
 8008dae:	d913      	bls.n	8008dd8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	689a      	ldr	r2, [r3, #8]
 8008db4:	693b      	ldr	r3, [r7, #16]
 8008db6:	68db      	ldr	r3, [r3, #12]
 8008db8:	1ad2      	subs	r2, r2, r3
 8008dba:	693b      	ldr	r3, [r7, #16]
 8008dbc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008dbe:	693b      	ldr	r3, [r7, #16]
 8008dc0:	68da      	ldr	r2, [r3, #12]
 8008dc2:	693b      	ldr	r3, [r7, #16]
 8008dc4:	689b      	ldr	r3, [r3, #8]
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	bf28      	it	cs
 8008dca:	4613      	movcs	r3, r2
 8008dcc:	461a      	mov	r2, r3
 8008dce:	6879      	ldr	r1, [r7, #4]
 8008dd0:	68f8      	ldr	r0, [r7, #12]
 8008dd2:	f001 f98a 	bl	800a0ea <USBD_CtlContinueRx>
 8008dd6:	e07d      	b.n	8008ed4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008dde:	f003 031f 	and.w	r3, r3, #31
 8008de2:	2b02      	cmp	r3, #2
 8008de4:	d014      	beq.n	8008e10 <USBD_LL_DataOutStage+0x98>
 8008de6:	2b02      	cmp	r3, #2
 8008de8:	d81d      	bhi.n	8008e26 <USBD_LL_DataOutStage+0xae>
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d002      	beq.n	8008df4 <USBD_LL_DataOutStage+0x7c>
 8008dee:	2b01      	cmp	r3, #1
 8008df0:	d003      	beq.n	8008dfa <USBD_LL_DataOutStage+0x82>
 8008df2:	e018      	b.n	8008e26 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008df4:	2300      	movs	r3, #0
 8008df6:	75bb      	strb	r3, [r7, #22]
            break;
 8008df8:	e018      	b.n	8008e2c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008e00:	b2db      	uxtb	r3, r3
 8008e02:	4619      	mov	r1, r3
 8008e04:	68f8      	ldr	r0, [r7, #12]
 8008e06:	f000 fa64 	bl	80092d2 <USBD_CoreFindIF>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	75bb      	strb	r3, [r7, #22]
            break;
 8008e0e:	e00d      	b.n	8008e2c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008e16:	b2db      	uxtb	r3, r3
 8008e18:	4619      	mov	r1, r3
 8008e1a:	68f8      	ldr	r0, [r7, #12]
 8008e1c:	f000 fa66 	bl	80092ec <USBD_CoreFindEP>
 8008e20:	4603      	mov	r3, r0
 8008e22:	75bb      	strb	r3, [r7, #22]
            break;
 8008e24:	e002      	b.n	8008e2c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008e26:	2300      	movs	r3, #0
 8008e28:	75bb      	strb	r3, [r7, #22]
            break;
 8008e2a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008e2c:	7dbb      	ldrb	r3, [r7, #22]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d119      	bne.n	8008e66 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e38:	b2db      	uxtb	r3, r3
 8008e3a:	2b03      	cmp	r3, #3
 8008e3c:	d113      	bne.n	8008e66 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008e3e:	7dba      	ldrb	r2, [r7, #22]
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	32ae      	adds	r2, #174	; 0xae
 8008e44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e48:	691b      	ldr	r3, [r3, #16]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d00b      	beq.n	8008e66 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008e4e:	7dba      	ldrb	r2, [r7, #22]
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008e56:	7dba      	ldrb	r2, [r7, #22]
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	32ae      	adds	r2, #174	; 0xae
 8008e5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e60:	691b      	ldr	r3, [r3, #16]
 8008e62:	68f8      	ldr	r0, [r7, #12]
 8008e64:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008e66:	68f8      	ldr	r0, [r7, #12]
 8008e68:	f001 f950 	bl	800a10c <USBD_CtlSendStatus>
 8008e6c:	e032      	b.n	8008ed4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008e6e:	7afb      	ldrb	r3, [r7, #11]
 8008e70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e74:	b2db      	uxtb	r3, r3
 8008e76:	4619      	mov	r1, r3
 8008e78:	68f8      	ldr	r0, [r7, #12]
 8008e7a:	f000 fa37 	bl	80092ec <USBD_CoreFindEP>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008e82:	7dbb      	ldrb	r3, [r7, #22]
 8008e84:	2bff      	cmp	r3, #255	; 0xff
 8008e86:	d025      	beq.n	8008ed4 <USBD_LL_DataOutStage+0x15c>
 8008e88:	7dbb      	ldrb	r3, [r7, #22]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d122      	bne.n	8008ed4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e94:	b2db      	uxtb	r3, r3
 8008e96:	2b03      	cmp	r3, #3
 8008e98:	d117      	bne.n	8008eca <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008e9a:	7dba      	ldrb	r2, [r7, #22]
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	32ae      	adds	r2, #174	; 0xae
 8008ea0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ea4:	699b      	ldr	r3, [r3, #24]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d00f      	beq.n	8008eca <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008eaa:	7dba      	ldrb	r2, [r7, #22]
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008eb2:	7dba      	ldrb	r2, [r7, #22]
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	32ae      	adds	r2, #174	; 0xae
 8008eb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ebc:	699b      	ldr	r3, [r3, #24]
 8008ebe:	7afa      	ldrb	r2, [r7, #11]
 8008ec0:	4611      	mov	r1, r2
 8008ec2:	68f8      	ldr	r0, [r7, #12]
 8008ec4:	4798      	blx	r3
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008eca:	7dfb      	ldrb	r3, [r7, #23]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d001      	beq.n	8008ed4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008ed0:	7dfb      	ldrb	r3, [r7, #23]
 8008ed2:	e000      	b.n	8008ed6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008ed4:	2300      	movs	r3, #0
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	3718      	adds	r7, #24
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}

08008ede <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008ede:	b580      	push	{r7, lr}
 8008ee0:	b086      	sub	sp, #24
 8008ee2:	af00      	add	r7, sp, #0
 8008ee4:	60f8      	str	r0, [r7, #12]
 8008ee6:	460b      	mov	r3, r1
 8008ee8:	607a      	str	r2, [r7, #4]
 8008eea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008eec:	7afb      	ldrb	r3, [r7, #11]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d16f      	bne.n	8008fd2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	3314      	adds	r3, #20
 8008ef6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008efe:	2b02      	cmp	r3, #2
 8008f00:	d15a      	bne.n	8008fb8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008f02:	693b      	ldr	r3, [r7, #16]
 8008f04:	689a      	ldr	r2, [r3, #8]
 8008f06:	693b      	ldr	r3, [r7, #16]
 8008f08:	68db      	ldr	r3, [r3, #12]
 8008f0a:	429a      	cmp	r2, r3
 8008f0c:	d914      	bls.n	8008f38 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008f0e:	693b      	ldr	r3, [r7, #16]
 8008f10:	689a      	ldr	r2, [r3, #8]
 8008f12:	693b      	ldr	r3, [r7, #16]
 8008f14:	68db      	ldr	r3, [r3, #12]
 8008f16:	1ad2      	subs	r2, r2, r3
 8008f18:	693b      	ldr	r3, [r7, #16]
 8008f1a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008f1c:	693b      	ldr	r3, [r7, #16]
 8008f1e:	689b      	ldr	r3, [r3, #8]
 8008f20:	461a      	mov	r2, r3
 8008f22:	6879      	ldr	r1, [r7, #4]
 8008f24:	68f8      	ldr	r0, [r7, #12]
 8008f26:	f001 f8b2 	bl	800a08e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	2100      	movs	r1, #0
 8008f30:	68f8      	ldr	r0, [r7, #12]
 8008f32:	f003 fb21 	bl	800c578 <USBD_LL_PrepareReceive>
 8008f36:	e03f      	b.n	8008fb8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008f38:	693b      	ldr	r3, [r7, #16]
 8008f3a:	68da      	ldr	r2, [r3, #12]
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	689b      	ldr	r3, [r3, #8]
 8008f40:	429a      	cmp	r2, r3
 8008f42:	d11c      	bne.n	8008f7e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008f44:	693b      	ldr	r3, [r7, #16]
 8008f46:	685a      	ldr	r2, [r3, #4]
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008f4c:	429a      	cmp	r2, r3
 8008f4e:	d316      	bcc.n	8008f7e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008f50:	693b      	ldr	r3, [r7, #16]
 8008f52:	685a      	ldr	r2, [r3, #4]
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008f5a:	429a      	cmp	r2, r3
 8008f5c:	d20f      	bcs.n	8008f7e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008f5e:	2200      	movs	r2, #0
 8008f60:	2100      	movs	r1, #0
 8008f62:	68f8      	ldr	r0, [r7, #12]
 8008f64:	f001 f893 	bl	800a08e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008f70:	2300      	movs	r3, #0
 8008f72:	2200      	movs	r2, #0
 8008f74:	2100      	movs	r1, #0
 8008f76:	68f8      	ldr	r0, [r7, #12]
 8008f78:	f003 fafe 	bl	800c578 <USBD_LL_PrepareReceive>
 8008f7c:	e01c      	b.n	8008fb8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f84:	b2db      	uxtb	r3, r3
 8008f86:	2b03      	cmp	r3, #3
 8008f88:	d10f      	bne.n	8008faa <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f90:	68db      	ldr	r3, [r3, #12]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d009      	beq.n	8008faa <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fa4:	68db      	ldr	r3, [r3, #12]
 8008fa6:	68f8      	ldr	r0, [r7, #12]
 8008fa8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008faa:	2180      	movs	r1, #128	; 0x80
 8008fac:	68f8      	ldr	r0, [r7, #12]
 8008fae:	f003 fa39 	bl	800c424 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008fb2:	68f8      	ldr	r0, [r7, #12]
 8008fb4:	f001 f8bd 	bl	800a132 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d03a      	beq.n	8009038 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008fc2:	68f8      	ldr	r0, [r7, #12]
 8008fc4:	f7ff fe42 	bl	8008c4c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008fd0:	e032      	b.n	8009038 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008fd2:	7afb      	ldrb	r3, [r7, #11]
 8008fd4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008fd8:	b2db      	uxtb	r3, r3
 8008fda:	4619      	mov	r1, r3
 8008fdc:	68f8      	ldr	r0, [r7, #12]
 8008fde:	f000 f985 	bl	80092ec <USBD_CoreFindEP>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008fe6:	7dfb      	ldrb	r3, [r7, #23]
 8008fe8:	2bff      	cmp	r3, #255	; 0xff
 8008fea:	d025      	beq.n	8009038 <USBD_LL_DataInStage+0x15a>
 8008fec:	7dfb      	ldrb	r3, [r7, #23]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d122      	bne.n	8009038 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ff8:	b2db      	uxtb	r3, r3
 8008ffa:	2b03      	cmp	r3, #3
 8008ffc:	d11c      	bne.n	8009038 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008ffe:	7dfa      	ldrb	r2, [r7, #23]
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	32ae      	adds	r2, #174	; 0xae
 8009004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009008:	695b      	ldr	r3, [r3, #20]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d014      	beq.n	8009038 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800900e:	7dfa      	ldrb	r2, [r7, #23]
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009016:	7dfa      	ldrb	r2, [r7, #23]
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	32ae      	adds	r2, #174	; 0xae
 800901c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009020:	695b      	ldr	r3, [r3, #20]
 8009022:	7afa      	ldrb	r2, [r7, #11]
 8009024:	4611      	mov	r1, r2
 8009026:	68f8      	ldr	r0, [r7, #12]
 8009028:	4798      	blx	r3
 800902a:	4603      	mov	r3, r0
 800902c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800902e:	7dbb      	ldrb	r3, [r7, #22]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d001      	beq.n	8009038 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009034:	7dbb      	ldrb	r3, [r7, #22]
 8009036:	e000      	b.n	800903a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009038:	2300      	movs	r3, #0
}
 800903a:	4618      	mov	r0, r3
 800903c:	3718      	adds	r7, #24
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}

08009042 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009042:	b580      	push	{r7, lr}
 8009044:	b084      	sub	sp, #16
 8009046:	af00      	add	r7, sp, #0
 8009048:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800904a:	2300      	movs	r3, #0
 800904c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2201      	movs	r2, #1
 8009052:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2200      	movs	r2, #0
 800905a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2200      	movs	r2, #0
 8009062:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2200      	movs	r2, #0
 8009068:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2200      	movs	r2, #0
 8009070:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800907a:	2b00      	cmp	r3, #0
 800907c:	d014      	beq.n	80090a8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009084:	685b      	ldr	r3, [r3, #4]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d00e      	beq.n	80090a8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009090:	685b      	ldr	r3, [r3, #4]
 8009092:	687a      	ldr	r2, [r7, #4]
 8009094:	6852      	ldr	r2, [r2, #4]
 8009096:	b2d2      	uxtb	r2, r2
 8009098:	4611      	mov	r1, r2
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	4798      	blx	r3
 800909e:	4603      	mov	r3, r0
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d001      	beq.n	80090a8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80090a4:	2303      	movs	r3, #3
 80090a6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80090a8:	2340      	movs	r3, #64	; 0x40
 80090aa:	2200      	movs	r2, #0
 80090ac:	2100      	movs	r1, #0
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f003 f973 	bl	800c39a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2201      	movs	r2, #1
 80090b8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2240      	movs	r2, #64	; 0x40
 80090c0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80090c4:	2340      	movs	r3, #64	; 0x40
 80090c6:	2200      	movs	r2, #0
 80090c8:	2180      	movs	r1, #128	; 0x80
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f003 f965 	bl	800c39a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2201      	movs	r2, #1
 80090d4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2240      	movs	r2, #64	; 0x40
 80090da:	621a      	str	r2, [r3, #32]

  return ret;
 80090dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80090de:	4618      	mov	r0, r3
 80090e0:	3710      	adds	r7, #16
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}

080090e6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80090e6:	b480      	push	{r7}
 80090e8:	b083      	sub	sp, #12
 80090ea:	af00      	add	r7, sp, #0
 80090ec:	6078      	str	r0, [r7, #4]
 80090ee:	460b      	mov	r3, r1
 80090f0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	78fa      	ldrb	r2, [r7, #3]
 80090f6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80090f8:	2300      	movs	r3, #0
}
 80090fa:	4618      	mov	r0, r3
 80090fc:	370c      	adds	r7, #12
 80090fe:	46bd      	mov	sp, r7
 8009100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009104:	4770      	bx	lr

08009106 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009106:	b480      	push	{r7}
 8009108:	b083      	sub	sp, #12
 800910a:	af00      	add	r7, sp, #0
 800910c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009114:	b2db      	uxtb	r3, r3
 8009116:	2b04      	cmp	r3, #4
 8009118:	d006      	beq.n	8009128 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009120:	b2da      	uxtb	r2, r3
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2204      	movs	r2, #4
 800912c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009130:	2300      	movs	r3, #0
}
 8009132:	4618      	mov	r0, r3
 8009134:	370c      	adds	r7, #12
 8009136:	46bd      	mov	sp, r7
 8009138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913c:	4770      	bx	lr

0800913e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800913e:	b480      	push	{r7}
 8009140:	b083      	sub	sp, #12
 8009142:	af00      	add	r7, sp, #0
 8009144:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800914c:	b2db      	uxtb	r3, r3
 800914e:	2b04      	cmp	r3, #4
 8009150:	d106      	bne.n	8009160 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009158:	b2da      	uxtb	r2, r3
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009160:	2300      	movs	r3, #0
}
 8009162:	4618      	mov	r0, r3
 8009164:	370c      	adds	r7, #12
 8009166:	46bd      	mov	sp, r7
 8009168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916c:	4770      	bx	lr

0800916e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800916e:	b580      	push	{r7, lr}
 8009170:	b082      	sub	sp, #8
 8009172:	af00      	add	r7, sp, #0
 8009174:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800917c:	b2db      	uxtb	r3, r3
 800917e:	2b03      	cmp	r3, #3
 8009180:	d110      	bne.n	80091a4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009188:	2b00      	cmp	r3, #0
 800918a:	d00b      	beq.n	80091a4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009192:	69db      	ldr	r3, [r3, #28]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d005      	beq.n	80091a4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800919e:	69db      	ldr	r3, [r3, #28]
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80091a4:	2300      	movs	r3, #0
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3708      	adds	r7, #8
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}

080091ae <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80091ae:	b580      	push	{r7, lr}
 80091b0:	b082      	sub	sp, #8
 80091b2:	af00      	add	r7, sp, #0
 80091b4:	6078      	str	r0, [r7, #4]
 80091b6:	460b      	mov	r3, r1
 80091b8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	32ae      	adds	r2, #174	; 0xae
 80091c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d101      	bne.n	80091d0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80091cc:	2303      	movs	r3, #3
 80091ce:	e01c      	b.n	800920a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091d6:	b2db      	uxtb	r3, r3
 80091d8:	2b03      	cmp	r3, #3
 80091da:	d115      	bne.n	8009208 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	32ae      	adds	r2, #174	; 0xae
 80091e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091ea:	6a1b      	ldr	r3, [r3, #32]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d00b      	beq.n	8009208 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	32ae      	adds	r2, #174	; 0xae
 80091fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091fe:	6a1b      	ldr	r3, [r3, #32]
 8009200:	78fa      	ldrb	r2, [r7, #3]
 8009202:	4611      	mov	r1, r2
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009208:	2300      	movs	r3, #0
}
 800920a:	4618      	mov	r0, r3
 800920c:	3708      	adds	r7, #8
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}

08009212 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009212:	b580      	push	{r7, lr}
 8009214:	b082      	sub	sp, #8
 8009216:	af00      	add	r7, sp, #0
 8009218:	6078      	str	r0, [r7, #4]
 800921a:	460b      	mov	r3, r1
 800921c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	32ae      	adds	r2, #174	; 0xae
 8009228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d101      	bne.n	8009234 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009230:	2303      	movs	r3, #3
 8009232:	e01c      	b.n	800926e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800923a:	b2db      	uxtb	r3, r3
 800923c:	2b03      	cmp	r3, #3
 800923e:	d115      	bne.n	800926c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	32ae      	adds	r2, #174	; 0xae
 800924a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800924e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009250:	2b00      	cmp	r3, #0
 8009252:	d00b      	beq.n	800926c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	32ae      	adds	r2, #174	; 0xae
 800925e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009264:	78fa      	ldrb	r2, [r7, #3]
 8009266:	4611      	mov	r1, r2
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800926c:	2300      	movs	r3, #0
}
 800926e:	4618      	mov	r0, r3
 8009270:	3708      	adds	r7, #8
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}

08009276 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009276:	b480      	push	{r7}
 8009278:	b083      	sub	sp, #12
 800927a:	af00      	add	r7, sp, #0
 800927c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800927e:	2300      	movs	r3, #0
}
 8009280:	4618      	mov	r0, r3
 8009282:	370c      	adds	r7, #12
 8009284:	46bd      	mov	sp, r7
 8009286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928a:	4770      	bx	lr

0800928c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b084      	sub	sp, #16
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009294:	2300      	movs	r3, #0
 8009296:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2201      	movs	r2, #1
 800929c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d00e      	beq.n	80092c8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092b0:	685b      	ldr	r3, [r3, #4]
 80092b2:	687a      	ldr	r2, [r7, #4]
 80092b4:	6852      	ldr	r2, [r2, #4]
 80092b6:	b2d2      	uxtb	r2, r2
 80092b8:	4611      	mov	r1, r2
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	4798      	blx	r3
 80092be:	4603      	mov	r3, r0
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d001      	beq.n	80092c8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80092c4:	2303      	movs	r3, #3
 80092c6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80092c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	3710      	adds	r7, #16
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}

080092d2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80092d2:	b480      	push	{r7}
 80092d4:	b083      	sub	sp, #12
 80092d6:	af00      	add	r7, sp, #0
 80092d8:	6078      	str	r0, [r7, #4]
 80092da:	460b      	mov	r3, r1
 80092dc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80092de:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	370c      	adds	r7, #12
 80092e4:	46bd      	mov	sp, r7
 80092e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ea:	4770      	bx	lr

080092ec <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80092ec:	b480      	push	{r7}
 80092ee:	b083      	sub	sp, #12
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
 80092f4:	460b      	mov	r3, r1
 80092f6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80092f8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	370c      	adds	r7, #12
 80092fe:	46bd      	mov	sp, r7
 8009300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009304:	4770      	bx	lr

08009306 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009306:	b580      	push	{r7, lr}
 8009308:	b086      	sub	sp, #24
 800930a:	af00      	add	r7, sp, #0
 800930c:	6078      	str	r0, [r7, #4]
 800930e:	460b      	mov	r3, r1
 8009310:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800931a:	2300      	movs	r3, #0
 800931c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	885b      	ldrh	r3, [r3, #2]
 8009322:	b29a      	uxth	r2, r3
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	781b      	ldrb	r3, [r3, #0]
 8009328:	b29b      	uxth	r3, r3
 800932a:	429a      	cmp	r2, r3
 800932c:	d920      	bls.n	8009370 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	781b      	ldrb	r3, [r3, #0]
 8009332:	b29b      	uxth	r3, r3
 8009334:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009336:	e013      	b.n	8009360 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009338:	f107 030a 	add.w	r3, r7, #10
 800933c:	4619      	mov	r1, r3
 800933e:	6978      	ldr	r0, [r7, #20]
 8009340:	f000 f81b 	bl	800937a <USBD_GetNextDesc>
 8009344:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	785b      	ldrb	r3, [r3, #1]
 800934a:	2b05      	cmp	r3, #5
 800934c:	d108      	bne.n	8009360 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800934e:	697b      	ldr	r3, [r7, #20]
 8009350:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	789b      	ldrb	r3, [r3, #2]
 8009356:	78fa      	ldrb	r2, [r7, #3]
 8009358:	429a      	cmp	r2, r3
 800935a:	d008      	beq.n	800936e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800935c:	2300      	movs	r3, #0
 800935e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	885b      	ldrh	r3, [r3, #2]
 8009364:	b29a      	uxth	r2, r3
 8009366:	897b      	ldrh	r3, [r7, #10]
 8009368:	429a      	cmp	r2, r3
 800936a:	d8e5      	bhi.n	8009338 <USBD_GetEpDesc+0x32>
 800936c:	e000      	b.n	8009370 <USBD_GetEpDesc+0x6a>
          break;
 800936e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009370:	693b      	ldr	r3, [r7, #16]
}
 8009372:	4618      	mov	r0, r3
 8009374:	3718      	adds	r7, #24
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}

0800937a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800937a:	b480      	push	{r7}
 800937c:	b085      	sub	sp, #20
 800937e:	af00      	add	r7, sp, #0
 8009380:	6078      	str	r0, [r7, #4]
 8009382:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	881a      	ldrh	r2, [r3, #0]
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	781b      	ldrb	r3, [r3, #0]
 8009390:	b29b      	uxth	r3, r3
 8009392:	4413      	add	r3, r2
 8009394:	b29a      	uxth	r2, r3
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	781b      	ldrb	r3, [r3, #0]
 800939e:	461a      	mov	r2, r3
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	4413      	add	r3, r2
 80093a4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80093a6:	68fb      	ldr	r3, [r7, #12]
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	3714      	adds	r7, #20
 80093ac:	46bd      	mov	sp, r7
 80093ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b2:	4770      	bx	lr

080093b4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80093b4:	b480      	push	{r7}
 80093b6:	b087      	sub	sp, #28
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80093c0:	697b      	ldr	r3, [r7, #20]
 80093c2:	781b      	ldrb	r3, [r3, #0]
 80093c4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80093c6:	697b      	ldr	r3, [r7, #20]
 80093c8:	3301      	adds	r3, #1
 80093ca:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80093cc:	697b      	ldr	r3, [r7, #20]
 80093ce:	781b      	ldrb	r3, [r3, #0]
 80093d0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80093d2:	8a3b      	ldrh	r3, [r7, #16]
 80093d4:	021b      	lsls	r3, r3, #8
 80093d6:	b21a      	sxth	r2, r3
 80093d8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80093dc:	4313      	orrs	r3, r2
 80093de:	b21b      	sxth	r3, r3
 80093e0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80093e2:	89fb      	ldrh	r3, [r7, #14]
}
 80093e4:	4618      	mov	r0, r3
 80093e6:	371c      	adds	r7, #28
 80093e8:	46bd      	mov	sp, r7
 80093ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ee:	4770      	bx	lr

080093f0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b084      	sub	sp, #16
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
 80093f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80093fa:	2300      	movs	r3, #0
 80093fc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	781b      	ldrb	r3, [r3, #0]
 8009402:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009406:	2b40      	cmp	r3, #64	; 0x40
 8009408:	d005      	beq.n	8009416 <USBD_StdDevReq+0x26>
 800940a:	2b40      	cmp	r3, #64	; 0x40
 800940c:	d857      	bhi.n	80094be <USBD_StdDevReq+0xce>
 800940e:	2b00      	cmp	r3, #0
 8009410:	d00f      	beq.n	8009432 <USBD_StdDevReq+0x42>
 8009412:	2b20      	cmp	r3, #32
 8009414:	d153      	bne.n	80094be <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	32ae      	adds	r2, #174	; 0xae
 8009420:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009424:	689b      	ldr	r3, [r3, #8]
 8009426:	6839      	ldr	r1, [r7, #0]
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	4798      	blx	r3
 800942c:	4603      	mov	r3, r0
 800942e:	73fb      	strb	r3, [r7, #15]
      break;
 8009430:	e04a      	b.n	80094c8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	785b      	ldrb	r3, [r3, #1]
 8009436:	2b09      	cmp	r3, #9
 8009438:	d83b      	bhi.n	80094b2 <USBD_StdDevReq+0xc2>
 800943a:	a201      	add	r2, pc, #4	; (adr r2, 8009440 <USBD_StdDevReq+0x50>)
 800943c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009440:	08009495 	.word	0x08009495
 8009444:	080094a9 	.word	0x080094a9
 8009448:	080094b3 	.word	0x080094b3
 800944c:	0800949f 	.word	0x0800949f
 8009450:	080094b3 	.word	0x080094b3
 8009454:	08009473 	.word	0x08009473
 8009458:	08009469 	.word	0x08009469
 800945c:	080094b3 	.word	0x080094b3
 8009460:	0800948b 	.word	0x0800948b
 8009464:	0800947d 	.word	0x0800947d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009468:	6839      	ldr	r1, [r7, #0]
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f000 fa3c 	bl	80098e8 <USBD_GetDescriptor>
          break;
 8009470:	e024      	b.n	80094bc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009472:	6839      	ldr	r1, [r7, #0]
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f000 fba1 	bl	8009bbc <USBD_SetAddress>
          break;
 800947a:	e01f      	b.n	80094bc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800947c:	6839      	ldr	r1, [r7, #0]
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f000 fbe0 	bl	8009c44 <USBD_SetConfig>
 8009484:	4603      	mov	r3, r0
 8009486:	73fb      	strb	r3, [r7, #15]
          break;
 8009488:	e018      	b.n	80094bc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800948a:	6839      	ldr	r1, [r7, #0]
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	f000 fc83 	bl	8009d98 <USBD_GetConfig>
          break;
 8009492:	e013      	b.n	80094bc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009494:	6839      	ldr	r1, [r7, #0]
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f000 fcb4 	bl	8009e04 <USBD_GetStatus>
          break;
 800949c:	e00e      	b.n	80094bc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800949e:	6839      	ldr	r1, [r7, #0]
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f000 fce3 	bl	8009e6c <USBD_SetFeature>
          break;
 80094a6:	e009      	b.n	80094bc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80094a8:	6839      	ldr	r1, [r7, #0]
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f000 fd07 	bl	8009ebe <USBD_ClrFeature>
          break;
 80094b0:	e004      	b.n	80094bc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80094b2:	6839      	ldr	r1, [r7, #0]
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f000 fd5e 	bl	8009f76 <USBD_CtlError>
          break;
 80094ba:	bf00      	nop
      }
      break;
 80094bc:	e004      	b.n	80094c8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80094be:	6839      	ldr	r1, [r7, #0]
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	f000 fd58 	bl	8009f76 <USBD_CtlError>
      break;
 80094c6:	bf00      	nop
  }

  return ret;
 80094c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	3710      	adds	r7, #16
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd80      	pop	{r7, pc}
 80094d2:	bf00      	nop

080094d4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b084      	sub	sp, #16
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
 80094dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80094de:	2300      	movs	r3, #0
 80094e0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	781b      	ldrb	r3, [r3, #0]
 80094e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80094ea:	2b40      	cmp	r3, #64	; 0x40
 80094ec:	d005      	beq.n	80094fa <USBD_StdItfReq+0x26>
 80094ee:	2b40      	cmp	r3, #64	; 0x40
 80094f0:	d852      	bhi.n	8009598 <USBD_StdItfReq+0xc4>
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d001      	beq.n	80094fa <USBD_StdItfReq+0x26>
 80094f6:	2b20      	cmp	r3, #32
 80094f8:	d14e      	bne.n	8009598 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009500:	b2db      	uxtb	r3, r3
 8009502:	3b01      	subs	r3, #1
 8009504:	2b02      	cmp	r3, #2
 8009506:	d840      	bhi.n	800958a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	889b      	ldrh	r3, [r3, #4]
 800950c:	b2db      	uxtb	r3, r3
 800950e:	2b01      	cmp	r3, #1
 8009510:	d836      	bhi.n	8009580 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	889b      	ldrh	r3, [r3, #4]
 8009516:	b2db      	uxtb	r3, r3
 8009518:	4619      	mov	r1, r3
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f7ff fed9 	bl	80092d2 <USBD_CoreFindIF>
 8009520:	4603      	mov	r3, r0
 8009522:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009524:	7bbb      	ldrb	r3, [r7, #14]
 8009526:	2bff      	cmp	r3, #255	; 0xff
 8009528:	d01d      	beq.n	8009566 <USBD_StdItfReq+0x92>
 800952a:	7bbb      	ldrb	r3, [r7, #14]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d11a      	bne.n	8009566 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009530:	7bba      	ldrb	r2, [r7, #14]
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	32ae      	adds	r2, #174	; 0xae
 8009536:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800953a:	689b      	ldr	r3, [r3, #8]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d00f      	beq.n	8009560 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009540:	7bba      	ldrb	r2, [r7, #14]
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009548:	7bba      	ldrb	r2, [r7, #14]
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	32ae      	adds	r2, #174	; 0xae
 800954e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009552:	689b      	ldr	r3, [r3, #8]
 8009554:	6839      	ldr	r1, [r7, #0]
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	4798      	blx	r3
 800955a:	4603      	mov	r3, r0
 800955c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800955e:	e004      	b.n	800956a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009560:	2303      	movs	r3, #3
 8009562:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009564:	e001      	b.n	800956a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009566:	2303      	movs	r3, #3
 8009568:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	88db      	ldrh	r3, [r3, #6]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d110      	bne.n	8009594 <USBD_StdItfReq+0xc0>
 8009572:	7bfb      	ldrb	r3, [r7, #15]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d10d      	bne.n	8009594 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f000 fdc7 	bl	800a10c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800957e:	e009      	b.n	8009594 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009580:	6839      	ldr	r1, [r7, #0]
 8009582:	6878      	ldr	r0, [r7, #4]
 8009584:	f000 fcf7 	bl	8009f76 <USBD_CtlError>
          break;
 8009588:	e004      	b.n	8009594 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800958a:	6839      	ldr	r1, [r7, #0]
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f000 fcf2 	bl	8009f76 <USBD_CtlError>
          break;
 8009592:	e000      	b.n	8009596 <USBD_StdItfReq+0xc2>
          break;
 8009594:	bf00      	nop
      }
      break;
 8009596:	e004      	b.n	80095a2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009598:	6839      	ldr	r1, [r7, #0]
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f000 fceb 	bl	8009f76 <USBD_CtlError>
      break;
 80095a0:	bf00      	nop
  }

  return ret;
 80095a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80095a4:	4618      	mov	r0, r3
 80095a6:	3710      	adds	r7, #16
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bd80      	pop	{r7, pc}

080095ac <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b084      	sub	sp, #16
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
 80095b4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80095b6:	2300      	movs	r3, #0
 80095b8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	889b      	ldrh	r3, [r3, #4]
 80095be:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	781b      	ldrb	r3, [r3, #0]
 80095c4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80095c8:	2b40      	cmp	r3, #64	; 0x40
 80095ca:	d007      	beq.n	80095dc <USBD_StdEPReq+0x30>
 80095cc:	2b40      	cmp	r3, #64	; 0x40
 80095ce:	f200 817f 	bhi.w	80098d0 <USBD_StdEPReq+0x324>
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d02a      	beq.n	800962c <USBD_StdEPReq+0x80>
 80095d6:	2b20      	cmp	r3, #32
 80095d8:	f040 817a 	bne.w	80098d0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80095dc:	7bbb      	ldrb	r3, [r7, #14]
 80095de:	4619      	mov	r1, r3
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f7ff fe83 	bl	80092ec <USBD_CoreFindEP>
 80095e6:	4603      	mov	r3, r0
 80095e8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80095ea:	7b7b      	ldrb	r3, [r7, #13]
 80095ec:	2bff      	cmp	r3, #255	; 0xff
 80095ee:	f000 8174 	beq.w	80098da <USBD_StdEPReq+0x32e>
 80095f2:	7b7b      	ldrb	r3, [r7, #13]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	f040 8170 	bne.w	80098da <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80095fa:	7b7a      	ldrb	r2, [r7, #13]
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009602:	7b7a      	ldrb	r2, [r7, #13]
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	32ae      	adds	r2, #174	; 0xae
 8009608:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800960c:	689b      	ldr	r3, [r3, #8]
 800960e:	2b00      	cmp	r3, #0
 8009610:	f000 8163 	beq.w	80098da <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009614:	7b7a      	ldrb	r2, [r7, #13]
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	32ae      	adds	r2, #174	; 0xae
 800961a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800961e:	689b      	ldr	r3, [r3, #8]
 8009620:	6839      	ldr	r1, [r7, #0]
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	4798      	blx	r3
 8009626:	4603      	mov	r3, r0
 8009628:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800962a:	e156      	b.n	80098da <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	785b      	ldrb	r3, [r3, #1]
 8009630:	2b03      	cmp	r3, #3
 8009632:	d008      	beq.n	8009646 <USBD_StdEPReq+0x9a>
 8009634:	2b03      	cmp	r3, #3
 8009636:	f300 8145 	bgt.w	80098c4 <USBD_StdEPReq+0x318>
 800963a:	2b00      	cmp	r3, #0
 800963c:	f000 809b 	beq.w	8009776 <USBD_StdEPReq+0x1ca>
 8009640:	2b01      	cmp	r3, #1
 8009642:	d03c      	beq.n	80096be <USBD_StdEPReq+0x112>
 8009644:	e13e      	b.n	80098c4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800964c:	b2db      	uxtb	r3, r3
 800964e:	2b02      	cmp	r3, #2
 8009650:	d002      	beq.n	8009658 <USBD_StdEPReq+0xac>
 8009652:	2b03      	cmp	r3, #3
 8009654:	d016      	beq.n	8009684 <USBD_StdEPReq+0xd8>
 8009656:	e02c      	b.n	80096b2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009658:	7bbb      	ldrb	r3, [r7, #14]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d00d      	beq.n	800967a <USBD_StdEPReq+0xce>
 800965e:	7bbb      	ldrb	r3, [r7, #14]
 8009660:	2b80      	cmp	r3, #128	; 0x80
 8009662:	d00a      	beq.n	800967a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009664:	7bbb      	ldrb	r3, [r7, #14]
 8009666:	4619      	mov	r1, r3
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	f002 fedb 	bl	800c424 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800966e:	2180      	movs	r1, #128	; 0x80
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f002 fed7 	bl	800c424 <USBD_LL_StallEP>
 8009676:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009678:	e020      	b.n	80096bc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800967a:	6839      	ldr	r1, [r7, #0]
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	f000 fc7a 	bl	8009f76 <USBD_CtlError>
              break;
 8009682:	e01b      	b.n	80096bc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	885b      	ldrh	r3, [r3, #2]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d10e      	bne.n	80096aa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800968c:	7bbb      	ldrb	r3, [r7, #14]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d00b      	beq.n	80096aa <USBD_StdEPReq+0xfe>
 8009692:	7bbb      	ldrb	r3, [r7, #14]
 8009694:	2b80      	cmp	r3, #128	; 0x80
 8009696:	d008      	beq.n	80096aa <USBD_StdEPReq+0xfe>
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	88db      	ldrh	r3, [r3, #6]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d104      	bne.n	80096aa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80096a0:	7bbb      	ldrb	r3, [r7, #14]
 80096a2:	4619      	mov	r1, r3
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	f002 febd 	bl	800c424 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	f000 fd2e 	bl	800a10c <USBD_CtlSendStatus>

              break;
 80096b0:	e004      	b.n	80096bc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80096b2:	6839      	ldr	r1, [r7, #0]
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f000 fc5e 	bl	8009f76 <USBD_CtlError>
              break;
 80096ba:	bf00      	nop
          }
          break;
 80096bc:	e107      	b.n	80098ce <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096c4:	b2db      	uxtb	r3, r3
 80096c6:	2b02      	cmp	r3, #2
 80096c8:	d002      	beq.n	80096d0 <USBD_StdEPReq+0x124>
 80096ca:	2b03      	cmp	r3, #3
 80096cc:	d016      	beq.n	80096fc <USBD_StdEPReq+0x150>
 80096ce:	e04b      	b.n	8009768 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80096d0:	7bbb      	ldrb	r3, [r7, #14]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d00d      	beq.n	80096f2 <USBD_StdEPReq+0x146>
 80096d6:	7bbb      	ldrb	r3, [r7, #14]
 80096d8:	2b80      	cmp	r3, #128	; 0x80
 80096da:	d00a      	beq.n	80096f2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80096dc:	7bbb      	ldrb	r3, [r7, #14]
 80096de:	4619      	mov	r1, r3
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f002 fe9f 	bl	800c424 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80096e6:	2180      	movs	r1, #128	; 0x80
 80096e8:	6878      	ldr	r0, [r7, #4]
 80096ea:	f002 fe9b 	bl	800c424 <USBD_LL_StallEP>
 80096ee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80096f0:	e040      	b.n	8009774 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80096f2:	6839      	ldr	r1, [r7, #0]
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	f000 fc3e 	bl	8009f76 <USBD_CtlError>
              break;
 80096fa:	e03b      	b.n	8009774 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	885b      	ldrh	r3, [r3, #2]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d136      	bne.n	8009772 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009704:	7bbb      	ldrb	r3, [r7, #14]
 8009706:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800970a:	2b00      	cmp	r3, #0
 800970c:	d004      	beq.n	8009718 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800970e:	7bbb      	ldrb	r3, [r7, #14]
 8009710:	4619      	mov	r1, r3
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f002 fea5 	bl	800c462 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f000 fcf7 	bl	800a10c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800971e:	7bbb      	ldrb	r3, [r7, #14]
 8009720:	4619      	mov	r1, r3
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	f7ff fde2 	bl	80092ec <USBD_CoreFindEP>
 8009728:	4603      	mov	r3, r0
 800972a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800972c:	7b7b      	ldrb	r3, [r7, #13]
 800972e:	2bff      	cmp	r3, #255	; 0xff
 8009730:	d01f      	beq.n	8009772 <USBD_StdEPReq+0x1c6>
 8009732:	7b7b      	ldrb	r3, [r7, #13]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d11c      	bne.n	8009772 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009738:	7b7a      	ldrb	r2, [r7, #13]
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009740:	7b7a      	ldrb	r2, [r7, #13]
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	32ae      	adds	r2, #174	; 0xae
 8009746:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800974a:	689b      	ldr	r3, [r3, #8]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d010      	beq.n	8009772 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009750:	7b7a      	ldrb	r2, [r7, #13]
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	32ae      	adds	r2, #174	; 0xae
 8009756:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800975a:	689b      	ldr	r3, [r3, #8]
 800975c:	6839      	ldr	r1, [r7, #0]
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	4798      	blx	r3
 8009762:	4603      	mov	r3, r0
 8009764:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009766:	e004      	b.n	8009772 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009768:	6839      	ldr	r1, [r7, #0]
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f000 fc03 	bl	8009f76 <USBD_CtlError>
              break;
 8009770:	e000      	b.n	8009774 <USBD_StdEPReq+0x1c8>
              break;
 8009772:	bf00      	nop
          }
          break;
 8009774:	e0ab      	b.n	80098ce <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800977c:	b2db      	uxtb	r3, r3
 800977e:	2b02      	cmp	r3, #2
 8009780:	d002      	beq.n	8009788 <USBD_StdEPReq+0x1dc>
 8009782:	2b03      	cmp	r3, #3
 8009784:	d032      	beq.n	80097ec <USBD_StdEPReq+0x240>
 8009786:	e097      	b.n	80098b8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009788:	7bbb      	ldrb	r3, [r7, #14]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d007      	beq.n	800979e <USBD_StdEPReq+0x1f2>
 800978e:	7bbb      	ldrb	r3, [r7, #14]
 8009790:	2b80      	cmp	r3, #128	; 0x80
 8009792:	d004      	beq.n	800979e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009794:	6839      	ldr	r1, [r7, #0]
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f000 fbed 	bl	8009f76 <USBD_CtlError>
                break;
 800979c:	e091      	b.n	80098c2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800979e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	da0b      	bge.n	80097be <USBD_StdEPReq+0x212>
 80097a6:	7bbb      	ldrb	r3, [r7, #14]
 80097a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80097ac:	4613      	mov	r3, r2
 80097ae:	009b      	lsls	r3, r3, #2
 80097b0:	4413      	add	r3, r2
 80097b2:	009b      	lsls	r3, r3, #2
 80097b4:	3310      	adds	r3, #16
 80097b6:	687a      	ldr	r2, [r7, #4]
 80097b8:	4413      	add	r3, r2
 80097ba:	3304      	adds	r3, #4
 80097bc:	e00b      	b.n	80097d6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80097be:	7bbb      	ldrb	r3, [r7, #14]
 80097c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80097c4:	4613      	mov	r3, r2
 80097c6:	009b      	lsls	r3, r3, #2
 80097c8:	4413      	add	r3, r2
 80097ca:	009b      	lsls	r3, r3, #2
 80097cc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80097d0:	687a      	ldr	r2, [r7, #4]
 80097d2:	4413      	add	r3, r2
 80097d4:	3304      	adds	r3, #4
 80097d6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80097d8:	68bb      	ldr	r3, [r7, #8]
 80097da:	2200      	movs	r2, #0
 80097dc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	2202      	movs	r2, #2
 80097e2:	4619      	mov	r1, r3
 80097e4:	6878      	ldr	r0, [r7, #4]
 80097e6:	f000 fc37 	bl	800a058 <USBD_CtlSendData>
              break;
 80097ea:	e06a      	b.n	80098c2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80097ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	da11      	bge.n	8009818 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80097f4:	7bbb      	ldrb	r3, [r7, #14]
 80097f6:	f003 020f 	and.w	r2, r3, #15
 80097fa:	6879      	ldr	r1, [r7, #4]
 80097fc:	4613      	mov	r3, r2
 80097fe:	009b      	lsls	r3, r3, #2
 8009800:	4413      	add	r3, r2
 8009802:	009b      	lsls	r3, r3, #2
 8009804:	440b      	add	r3, r1
 8009806:	3324      	adds	r3, #36	; 0x24
 8009808:	881b      	ldrh	r3, [r3, #0]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d117      	bne.n	800983e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800980e:	6839      	ldr	r1, [r7, #0]
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	f000 fbb0 	bl	8009f76 <USBD_CtlError>
                  break;
 8009816:	e054      	b.n	80098c2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009818:	7bbb      	ldrb	r3, [r7, #14]
 800981a:	f003 020f 	and.w	r2, r3, #15
 800981e:	6879      	ldr	r1, [r7, #4]
 8009820:	4613      	mov	r3, r2
 8009822:	009b      	lsls	r3, r3, #2
 8009824:	4413      	add	r3, r2
 8009826:	009b      	lsls	r3, r3, #2
 8009828:	440b      	add	r3, r1
 800982a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800982e:	881b      	ldrh	r3, [r3, #0]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d104      	bne.n	800983e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009834:	6839      	ldr	r1, [r7, #0]
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f000 fb9d 	bl	8009f76 <USBD_CtlError>
                  break;
 800983c:	e041      	b.n	80098c2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800983e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009842:	2b00      	cmp	r3, #0
 8009844:	da0b      	bge.n	800985e <USBD_StdEPReq+0x2b2>
 8009846:	7bbb      	ldrb	r3, [r7, #14]
 8009848:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800984c:	4613      	mov	r3, r2
 800984e:	009b      	lsls	r3, r3, #2
 8009850:	4413      	add	r3, r2
 8009852:	009b      	lsls	r3, r3, #2
 8009854:	3310      	adds	r3, #16
 8009856:	687a      	ldr	r2, [r7, #4]
 8009858:	4413      	add	r3, r2
 800985a:	3304      	adds	r3, #4
 800985c:	e00b      	b.n	8009876 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800985e:	7bbb      	ldrb	r3, [r7, #14]
 8009860:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009864:	4613      	mov	r3, r2
 8009866:	009b      	lsls	r3, r3, #2
 8009868:	4413      	add	r3, r2
 800986a:	009b      	lsls	r3, r3, #2
 800986c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009870:	687a      	ldr	r2, [r7, #4]
 8009872:	4413      	add	r3, r2
 8009874:	3304      	adds	r3, #4
 8009876:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009878:	7bbb      	ldrb	r3, [r7, #14]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d002      	beq.n	8009884 <USBD_StdEPReq+0x2d8>
 800987e:	7bbb      	ldrb	r3, [r7, #14]
 8009880:	2b80      	cmp	r3, #128	; 0x80
 8009882:	d103      	bne.n	800988c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009884:	68bb      	ldr	r3, [r7, #8]
 8009886:	2200      	movs	r2, #0
 8009888:	601a      	str	r2, [r3, #0]
 800988a:	e00e      	b.n	80098aa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800988c:	7bbb      	ldrb	r3, [r7, #14]
 800988e:	4619      	mov	r1, r3
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	f002 fe05 	bl	800c4a0 <USBD_LL_IsStallEP>
 8009896:	4603      	mov	r3, r0
 8009898:	2b00      	cmp	r3, #0
 800989a:	d003      	beq.n	80098a4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800989c:	68bb      	ldr	r3, [r7, #8]
 800989e:	2201      	movs	r2, #1
 80098a0:	601a      	str	r2, [r3, #0]
 80098a2:	e002      	b.n	80098aa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	2200      	movs	r2, #0
 80098a8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80098aa:	68bb      	ldr	r3, [r7, #8]
 80098ac:	2202      	movs	r2, #2
 80098ae:	4619      	mov	r1, r3
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	f000 fbd1 	bl	800a058 <USBD_CtlSendData>
              break;
 80098b6:	e004      	b.n	80098c2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80098b8:	6839      	ldr	r1, [r7, #0]
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f000 fb5b 	bl	8009f76 <USBD_CtlError>
              break;
 80098c0:	bf00      	nop
          }
          break;
 80098c2:	e004      	b.n	80098ce <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80098c4:	6839      	ldr	r1, [r7, #0]
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f000 fb55 	bl	8009f76 <USBD_CtlError>
          break;
 80098cc:	bf00      	nop
      }
      break;
 80098ce:	e005      	b.n	80098dc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80098d0:	6839      	ldr	r1, [r7, #0]
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f000 fb4f 	bl	8009f76 <USBD_CtlError>
      break;
 80098d8:	e000      	b.n	80098dc <USBD_StdEPReq+0x330>
      break;
 80098da:	bf00      	nop
  }

  return ret;
 80098dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80098de:	4618      	mov	r0, r3
 80098e0:	3710      	adds	r7, #16
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}
	...

080098e8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b084      	sub	sp, #16
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
 80098f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80098f2:	2300      	movs	r3, #0
 80098f4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80098f6:	2300      	movs	r3, #0
 80098f8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80098fa:	2300      	movs	r3, #0
 80098fc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	885b      	ldrh	r3, [r3, #2]
 8009902:	0a1b      	lsrs	r3, r3, #8
 8009904:	b29b      	uxth	r3, r3
 8009906:	3b01      	subs	r3, #1
 8009908:	2b06      	cmp	r3, #6
 800990a:	f200 8128 	bhi.w	8009b5e <USBD_GetDescriptor+0x276>
 800990e:	a201      	add	r2, pc, #4	; (adr r2, 8009914 <USBD_GetDescriptor+0x2c>)
 8009910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009914:	08009931 	.word	0x08009931
 8009918:	08009949 	.word	0x08009949
 800991c:	08009989 	.word	0x08009989
 8009920:	08009b5f 	.word	0x08009b5f
 8009924:	08009b5f 	.word	0x08009b5f
 8009928:	08009aff 	.word	0x08009aff
 800992c:	08009b2b 	.word	0x08009b2b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	687a      	ldr	r2, [r7, #4]
 800993a:	7c12      	ldrb	r2, [r2, #16]
 800993c:	f107 0108 	add.w	r1, r7, #8
 8009940:	4610      	mov	r0, r2
 8009942:	4798      	blx	r3
 8009944:	60f8      	str	r0, [r7, #12]
      break;
 8009946:	e112      	b.n	8009b6e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	7c1b      	ldrb	r3, [r3, #16]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d10d      	bne.n	800996c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009958:	f107 0208 	add.w	r2, r7, #8
 800995c:	4610      	mov	r0, r2
 800995e:	4798      	blx	r3
 8009960:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	3301      	adds	r3, #1
 8009966:	2202      	movs	r2, #2
 8009968:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800996a:	e100      	b.n	8009b6e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009974:	f107 0208 	add.w	r2, r7, #8
 8009978:	4610      	mov	r0, r2
 800997a:	4798      	blx	r3
 800997c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	3301      	adds	r3, #1
 8009982:	2202      	movs	r2, #2
 8009984:	701a      	strb	r2, [r3, #0]
      break;
 8009986:	e0f2      	b.n	8009b6e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	885b      	ldrh	r3, [r3, #2]
 800998c:	b2db      	uxtb	r3, r3
 800998e:	2b05      	cmp	r3, #5
 8009990:	f200 80ac 	bhi.w	8009aec <USBD_GetDescriptor+0x204>
 8009994:	a201      	add	r2, pc, #4	; (adr r2, 800999c <USBD_GetDescriptor+0xb4>)
 8009996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800999a:	bf00      	nop
 800999c:	080099b5 	.word	0x080099b5
 80099a0:	080099e9 	.word	0x080099e9
 80099a4:	08009a1d 	.word	0x08009a1d
 80099a8:	08009a51 	.word	0x08009a51
 80099ac:	08009a85 	.word	0x08009a85
 80099b0:	08009ab9 	.word	0x08009ab9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099ba:	685b      	ldr	r3, [r3, #4]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d00b      	beq.n	80099d8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099c6:	685b      	ldr	r3, [r3, #4]
 80099c8:	687a      	ldr	r2, [r7, #4]
 80099ca:	7c12      	ldrb	r2, [r2, #16]
 80099cc:	f107 0108 	add.w	r1, r7, #8
 80099d0:	4610      	mov	r0, r2
 80099d2:	4798      	blx	r3
 80099d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80099d6:	e091      	b.n	8009afc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80099d8:	6839      	ldr	r1, [r7, #0]
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	f000 facb 	bl	8009f76 <USBD_CtlError>
            err++;
 80099e0:	7afb      	ldrb	r3, [r7, #11]
 80099e2:	3301      	adds	r3, #1
 80099e4:	72fb      	strb	r3, [r7, #11]
          break;
 80099e6:	e089      	b.n	8009afc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099ee:	689b      	ldr	r3, [r3, #8]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d00b      	beq.n	8009a0c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099fa:	689b      	ldr	r3, [r3, #8]
 80099fc:	687a      	ldr	r2, [r7, #4]
 80099fe:	7c12      	ldrb	r2, [r2, #16]
 8009a00:	f107 0108 	add.w	r1, r7, #8
 8009a04:	4610      	mov	r0, r2
 8009a06:	4798      	blx	r3
 8009a08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a0a:	e077      	b.n	8009afc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a0c:	6839      	ldr	r1, [r7, #0]
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f000 fab1 	bl	8009f76 <USBD_CtlError>
            err++;
 8009a14:	7afb      	ldrb	r3, [r7, #11]
 8009a16:	3301      	adds	r3, #1
 8009a18:	72fb      	strb	r3, [r7, #11]
          break;
 8009a1a:	e06f      	b.n	8009afc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a22:	68db      	ldr	r3, [r3, #12]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d00b      	beq.n	8009a40 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a2e:	68db      	ldr	r3, [r3, #12]
 8009a30:	687a      	ldr	r2, [r7, #4]
 8009a32:	7c12      	ldrb	r2, [r2, #16]
 8009a34:	f107 0108 	add.w	r1, r7, #8
 8009a38:	4610      	mov	r0, r2
 8009a3a:	4798      	blx	r3
 8009a3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a3e:	e05d      	b.n	8009afc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a40:	6839      	ldr	r1, [r7, #0]
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f000 fa97 	bl	8009f76 <USBD_CtlError>
            err++;
 8009a48:	7afb      	ldrb	r3, [r7, #11]
 8009a4a:	3301      	adds	r3, #1
 8009a4c:	72fb      	strb	r3, [r7, #11]
          break;
 8009a4e:	e055      	b.n	8009afc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a56:	691b      	ldr	r3, [r3, #16]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d00b      	beq.n	8009a74 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a62:	691b      	ldr	r3, [r3, #16]
 8009a64:	687a      	ldr	r2, [r7, #4]
 8009a66:	7c12      	ldrb	r2, [r2, #16]
 8009a68:	f107 0108 	add.w	r1, r7, #8
 8009a6c:	4610      	mov	r0, r2
 8009a6e:	4798      	blx	r3
 8009a70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a72:	e043      	b.n	8009afc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a74:	6839      	ldr	r1, [r7, #0]
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	f000 fa7d 	bl	8009f76 <USBD_CtlError>
            err++;
 8009a7c:	7afb      	ldrb	r3, [r7, #11]
 8009a7e:	3301      	adds	r3, #1
 8009a80:	72fb      	strb	r3, [r7, #11]
          break;
 8009a82:	e03b      	b.n	8009afc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a8a:	695b      	ldr	r3, [r3, #20]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d00b      	beq.n	8009aa8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a96:	695b      	ldr	r3, [r3, #20]
 8009a98:	687a      	ldr	r2, [r7, #4]
 8009a9a:	7c12      	ldrb	r2, [r2, #16]
 8009a9c:	f107 0108 	add.w	r1, r7, #8
 8009aa0:	4610      	mov	r0, r2
 8009aa2:	4798      	blx	r3
 8009aa4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009aa6:	e029      	b.n	8009afc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009aa8:	6839      	ldr	r1, [r7, #0]
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	f000 fa63 	bl	8009f76 <USBD_CtlError>
            err++;
 8009ab0:	7afb      	ldrb	r3, [r7, #11]
 8009ab2:	3301      	adds	r3, #1
 8009ab4:	72fb      	strb	r3, [r7, #11]
          break;
 8009ab6:	e021      	b.n	8009afc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009abe:	699b      	ldr	r3, [r3, #24]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d00b      	beq.n	8009adc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009aca:	699b      	ldr	r3, [r3, #24]
 8009acc:	687a      	ldr	r2, [r7, #4]
 8009ace:	7c12      	ldrb	r2, [r2, #16]
 8009ad0:	f107 0108 	add.w	r1, r7, #8
 8009ad4:	4610      	mov	r0, r2
 8009ad6:	4798      	blx	r3
 8009ad8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ada:	e00f      	b.n	8009afc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009adc:	6839      	ldr	r1, [r7, #0]
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f000 fa49 	bl	8009f76 <USBD_CtlError>
            err++;
 8009ae4:	7afb      	ldrb	r3, [r7, #11]
 8009ae6:	3301      	adds	r3, #1
 8009ae8:	72fb      	strb	r3, [r7, #11]
          break;
 8009aea:	e007      	b.n	8009afc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009aec:	6839      	ldr	r1, [r7, #0]
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	f000 fa41 	bl	8009f76 <USBD_CtlError>
          err++;
 8009af4:	7afb      	ldrb	r3, [r7, #11]
 8009af6:	3301      	adds	r3, #1
 8009af8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009afa:	bf00      	nop
      }
      break;
 8009afc:	e037      	b.n	8009b6e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	7c1b      	ldrb	r3, [r3, #16]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d109      	bne.n	8009b1a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b0e:	f107 0208 	add.w	r2, r7, #8
 8009b12:	4610      	mov	r0, r2
 8009b14:	4798      	blx	r3
 8009b16:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009b18:	e029      	b.n	8009b6e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009b1a:	6839      	ldr	r1, [r7, #0]
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f000 fa2a 	bl	8009f76 <USBD_CtlError>
        err++;
 8009b22:	7afb      	ldrb	r3, [r7, #11]
 8009b24:	3301      	adds	r3, #1
 8009b26:	72fb      	strb	r3, [r7, #11]
      break;
 8009b28:	e021      	b.n	8009b6e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	7c1b      	ldrb	r3, [r3, #16]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d10d      	bne.n	8009b4e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b3a:	f107 0208 	add.w	r2, r7, #8
 8009b3e:	4610      	mov	r0, r2
 8009b40:	4798      	blx	r3
 8009b42:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	3301      	adds	r3, #1
 8009b48:	2207      	movs	r2, #7
 8009b4a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009b4c:	e00f      	b.n	8009b6e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009b4e:	6839      	ldr	r1, [r7, #0]
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f000 fa10 	bl	8009f76 <USBD_CtlError>
        err++;
 8009b56:	7afb      	ldrb	r3, [r7, #11]
 8009b58:	3301      	adds	r3, #1
 8009b5a:	72fb      	strb	r3, [r7, #11]
      break;
 8009b5c:	e007      	b.n	8009b6e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009b5e:	6839      	ldr	r1, [r7, #0]
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	f000 fa08 	bl	8009f76 <USBD_CtlError>
      err++;
 8009b66:	7afb      	ldrb	r3, [r7, #11]
 8009b68:	3301      	adds	r3, #1
 8009b6a:	72fb      	strb	r3, [r7, #11]
      break;
 8009b6c:	bf00      	nop
  }

  if (err != 0U)
 8009b6e:	7afb      	ldrb	r3, [r7, #11]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d11e      	bne.n	8009bb2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	88db      	ldrh	r3, [r3, #6]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d016      	beq.n	8009baa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009b7c:	893b      	ldrh	r3, [r7, #8]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d00e      	beq.n	8009ba0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	88da      	ldrh	r2, [r3, #6]
 8009b86:	893b      	ldrh	r3, [r7, #8]
 8009b88:	4293      	cmp	r3, r2
 8009b8a:	bf28      	it	cs
 8009b8c:	4613      	movcs	r3, r2
 8009b8e:	b29b      	uxth	r3, r3
 8009b90:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009b92:	893b      	ldrh	r3, [r7, #8]
 8009b94:	461a      	mov	r2, r3
 8009b96:	68f9      	ldr	r1, [r7, #12]
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	f000 fa5d 	bl	800a058 <USBD_CtlSendData>
 8009b9e:	e009      	b.n	8009bb4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009ba0:	6839      	ldr	r1, [r7, #0]
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f000 f9e7 	bl	8009f76 <USBD_CtlError>
 8009ba8:	e004      	b.n	8009bb4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f000 faae 	bl	800a10c <USBD_CtlSendStatus>
 8009bb0:	e000      	b.n	8009bb4 <USBD_GetDescriptor+0x2cc>
    return;
 8009bb2:	bf00      	nop
  }
}
 8009bb4:	3710      	adds	r7, #16
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}
 8009bba:	bf00      	nop

08009bbc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b084      	sub	sp, #16
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
 8009bc4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	889b      	ldrh	r3, [r3, #4]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d131      	bne.n	8009c32 <USBD_SetAddress+0x76>
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	88db      	ldrh	r3, [r3, #6]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d12d      	bne.n	8009c32 <USBD_SetAddress+0x76>
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	885b      	ldrh	r3, [r3, #2]
 8009bda:	2b7f      	cmp	r3, #127	; 0x7f
 8009bdc:	d829      	bhi.n	8009c32 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	885b      	ldrh	r3, [r3, #2]
 8009be2:	b2db      	uxtb	r3, r3
 8009be4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009be8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bf0:	b2db      	uxtb	r3, r3
 8009bf2:	2b03      	cmp	r3, #3
 8009bf4:	d104      	bne.n	8009c00 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009bf6:	6839      	ldr	r1, [r7, #0]
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	f000 f9bc 	bl	8009f76 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bfe:	e01d      	b.n	8009c3c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	7bfa      	ldrb	r2, [r7, #15]
 8009c04:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009c08:	7bfb      	ldrb	r3, [r7, #15]
 8009c0a:	4619      	mov	r1, r3
 8009c0c:	6878      	ldr	r0, [r7, #4]
 8009c0e:	f002 fc73 	bl	800c4f8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009c12:	6878      	ldr	r0, [r7, #4]
 8009c14:	f000 fa7a 	bl	800a10c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009c18:	7bfb      	ldrb	r3, [r7, #15]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d004      	beq.n	8009c28 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2202      	movs	r2, #2
 8009c22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c26:	e009      	b.n	8009c3c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2201      	movs	r2, #1
 8009c2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c30:	e004      	b.n	8009c3c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009c32:	6839      	ldr	r1, [r7, #0]
 8009c34:	6878      	ldr	r0, [r7, #4]
 8009c36:	f000 f99e 	bl	8009f76 <USBD_CtlError>
  }
}
 8009c3a:	bf00      	nop
 8009c3c:	bf00      	nop
 8009c3e:	3710      	adds	r7, #16
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bd80      	pop	{r7, pc}

08009c44 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b084      	sub	sp, #16
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
 8009c4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	885b      	ldrh	r3, [r3, #2]
 8009c56:	b2da      	uxtb	r2, r3
 8009c58:	4b4e      	ldr	r3, [pc, #312]	; (8009d94 <USBD_SetConfig+0x150>)
 8009c5a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009c5c:	4b4d      	ldr	r3, [pc, #308]	; (8009d94 <USBD_SetConfig+0x150>)
 8009c5e:	781b      	ldrb	r3, [r3, #0]
 8009c60:	2b01      	cmp	r3, #1
 8009c62:	d905      	bls.n	8009c70 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009c64:	6839      	ldr	r1, [r7, #0]
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f000 f985 	bl	8009f76 <USBD_CtlError>
    return USBD_FAIL;
 8009c6c:	2303      	movs	r3, #3
 8009c6e:	e08c      	b.n	8009d8a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c76:	b2db      	uxtb	r3, r3
 8009c78:	2b02      	cmp	r3, #2
 8009c7a:	d002      	beq.n	8009c82 <USBD_SetConfig+0x3e>
 8009c7c:	2b03      	cmp	r3, #3
 8009c7e:	d029      	beq.n	8009cd4 <USBD_SetConfig+0x90>
 8009c80:	e075      	b.n	8009d6e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009c82:	4b44      	ldr	r3, [pc, #272]	; (8009d94 <USBD_SetConfig+0x150>)
 8009c84:	781b      	ldrb	r3, [r3, #0]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d020      	beq.n	8009ccc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009c8a:	4b42      	ldr	r3, [pc, #264]	; (8009d94 <USBD_SetConfig+0x150>)
 8009c8c:	781b      	ldrb	r3, [r3, #0]
 8009c8e:	461a      	mov	r2, r3
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009c94:	4b3f      	ldr	r3, [pc, #252]	; (8009d94 <USBD_SetConfig+0x150>)
 8009c96:	781b      	ldrb	r3, [r3, #0]
 8009c98:	4619      	mov	r1, r3
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	f7fe ffe1 	bl	8008c62 <USBD_SetClassConfig>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009ca4:	7bfb      	ldrb	r3, [r7, #15]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d008      	beq.n	8009cbc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009caa:	6839      	ldr	r1, [r7, #0]
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	f000 f962 	bl	8009f76 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2202      	movs	r2, #2
 8009cb6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009cba:	e065      	b.n	8009d88 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f000 fa25 	bl	800a10c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2203      	movs	r2, #3
 8009cc6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009cca:	e05d      	b.n	8009d88 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f000 fa1d 	bl	800a10c <USBD_CtlSendStatus>
      break;
 8009cd2:	e059      	b.n	8009d88 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009cd4:	4b2f      	ldr	r3, [pc, #188]	; (8009d94 <USBD_SetConfig+0x150>)
 8009cd6:	781b      	ldrb	r3, [r3, #0]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d112      	bne.n	8009d02 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2202      	movs	r2, #2
 8009ce0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009ce4:	4b2b      	ldr	r3, [pc, #172]	; (8009d94 <USBD_SetConfig+0x150>)
 8009ce6:	781b      	ldrb	r3, [r3, #0]
 8009ce8:	461a      	mov	r2, r3
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009cee:	4b29      	ldr	r3, [pc, #164]	; (8009d94 <USBD_SetConfig+0x150>)
 8009cf0:	781b      	ldrb	r3, [r3, #0]
 8009cf2:	4619      	mov	r1, r3
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f7fe ffd0 	bl	8008c9a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	f000 fa06 	bl	800a10c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009d00:	e042      	b.n	8009d88 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009d02:	4b24      	ldr	r3, [pc, #144]	; (8009d94 <USBD_SetConfig+0x150>)
 8009d04:	781b      	ldrb	r3, [r3, #0]
 8009d06:	461a      	mov	r2, r3
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	685b      	ldr	r3, [r3, #4]
 8009d0c:	429a      	cmp	r2, r3
 8009d0e:	d02a      	beq.n	8009d66 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	685b      	ldr	r3, [r3, #4]
 8009d14:	b2db      	uxtb	r3, r3
 8009d16:	4619      	mov	r1, r3
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f7fe ffbe 	bl	8008c9a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009d1e:	4b1d      	ldr	r3, [pc, #116]	; (8009d94 <USBD_SetConfig+0x150>)
 8009d20:	781b      	ldrb	r3, [r3, #0]
 8009d22:	461a      	mov	r2, r3
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009d28:	4b1a      	ldr	r3, [pc, #104]	; (8009d94 <USBD_SetConfig+0x150>)
 8009d2a:	781b      	ldrb	r3, [r3, #0]
 8009d2c:	4619      	mov	r1, r3
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f7fe ff97 	bl	8008c62 <USBD_SetClassConfig>
 8009d34:	4603      	mov	r3, r0
 8009d36:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009d38:	7bfb      	ldrb	r3, [r7, #15]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d00f      	beq.n	8009d5e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009d3e:	6839      	ldr	r1, [r7, #0]
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	f000 f918 	bl	8009f76 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	685b      	ldr	r3, [r3, #4]
 8009d4a:	b2db      	uxtb	r3, r3
 8009d4c:	4619      	mov	r1, r3
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	f7fe ffa3 	bl	8008c9a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2202      	movs	r2, #2
 8009d58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009d5c:	e014      	b.n	8009d88 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	f000 f9d4 	bl	800a10c <USBD_CtlSendStatus>
      break;
 8009d64:	e010      	b.n	8009d88 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009d66:	6878      	ldr	r0, [r7, #4]
 8009d68:	f000 f9d0 	bl	800a10c <USBD_CtlSendStatus>
      break;
 8009d6c:	e00c      	b.n	8009d88 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009d6e:	6839      	ldr	r1, [r7, #0]
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f000 f900 	bl	8009f76 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009d76:	4b07      	ldr	r3, [pc, #28]	; (8009d94 <USBD_SetConfig+0x150>)
 8009d78:	781b      	ldrb	r3, [r3, #0]
 8009d7a:	4619      	mov	r1, r3
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f7fe ff8c 	bl	8008c9a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009d82:	2303      	movs	r3, #3
 8009d84:	73fb      	strb	r3, [r7, #15]
      break;
 8009d86:	bf00      	nop
  }

  return ret;
 8009d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3710      	adds	r7, #16
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}
 8009d92:	bf00      	nop
 8009d94:	200004d8 	.word	0x200004d8

08009d98 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b082      	sub	sp, #8
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
 8009da0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	88db      	ldrh	r3, [r3, #6]
 8009da6:	2b01      	cmp	r3, #1
 8009da8:	d004      	beq.n	8009db4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009daa:	6839      	ldr	r1, [r7, #0]
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	f000 f8e2 	bl	8009f76 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009db2:	e023      	b.n	8009dfc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009dba:	b2db      	uxtb	r3, r3
 8009dbc:	2b02      	cmp	r3, #2
 8009dbe:	dc02      	bgt.n	8009dc6 <USBD_GetConfig+0x2e>
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	dc03      	bgt.n	8009dcc <USBD_GetConfig+0x34>
 8009dc4:	e015      	b.n	8009df2 <USBD_GetConfig+0x5a>
 8009dc6:	2b03      	cmp	r3, #3
 8009dc8:	d00b      	beq.n	8009de2 <USBD_GetConfig+0x4a>
 8009dca:	e012      	b.n	8009df2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2200      	movs	r2, #0
 8009dd0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	3308      	adds	r3, #8
 8009dd6:	2201      	movs	r2, #1
 8009dd8:	4619      	mov	r1, r3
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f000 f93c 	bl	800a058 <USBD_CtlSendData>
        break;
 8009de0:	e00c      	b.n	8009dfc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	3304      	adds	r3, #4
 8009de6:	2201      	movs	r2, #1
 8009de8:	4619      	mov	r1, r3
 8009dea:	6878      	ldr	r0, [r7, #4]
 8009dec:	f000 f934 	bl	800a058 <USBD_CtlSendData>
        break;
 8009df0:	e004      	b.n	8009dfc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009df2:	6839      	ldr	r1, [r7, #0]
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f000 f8be 	bl	8009f76 <USBD_CtlError>
        break;
 8009dfa:	bf00      	nop
}
 8009dfc:	bf00      	nop
 8009dfe:	3708      	adds	r7, #8
 8009e00:	46bd      	mov	sp, r7
 8009e02:	bd80      	pop	{r7, pc}

08009e04 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b082      	sub	sp, #8
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
 8009e0c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e14:	b2db      	uxtb	r3, r3
 8009e16:	3b01      	subs	r3, #1
 8009e18:	2b02      	cmp	r3, #2
 8009e1a:	d81e      	bhi.n	8009e5a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	88db      	ldrh	r3, [r3, #6]
 8009e20:	2b02      	cmp	r3, #2
 8009e22:	d004      	beq.n	8009e2e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009e24:	6839      	ldr	r1, [r7, #0]
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	f000 f8a5 	bl	8009f76 <USBD_CtlError>
        break;
 8009e2c:	e01a      	b.n	8009e64 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2201      	movs	r2, #1
 8009e32:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d005      	beq.n	8009e4a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	68db      	ldr	r3, [r3, #12]
 8009e42:	f043 0202 	orr.w	r2, r3, #2
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	330c      	adds	r3, #12
 8009e4e:	2202      	movs	r2, #2
 8009e50:	4619      	mov	r1, r3
 8009e52:	6878      	ldr	r0, [r7, #4]
 8009e54:	f000 f900 	bl	800a058 <USBD_CtlSendData>
      break;
 8009e58:	e004      	b.n	8009e64 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009e5a:	6839      	ldr	r1, [r7, #0]
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	f000 f88a 	bl	8009f76 <USBD_CtlError>
      break;
 8009e62:	bf00      	nop
  }
}
 8009e64:	bf00      	nop
 8009e66:	3708      	adds	r7, #8
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	bd80      	pop	{r7, pc}

08009e6c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b082      	sub	sp, #8
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
 8009e74:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	885b      	ldrh	r3, [r3, #2]
 8009e7a:	2b01      	cmp	r3, #1
 8009e7c:	d107      	bne.n	8009e8e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2201      	movs	r2, #1
 8009e82:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f000 f940 	bl	800a10c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009e8c:	e013      	b.n	8009eb6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	885b      	ldrh	r3, [r3, #2]
 8009e92:	2b02      	cmp	r3, #2
 8009e94:	d10b      	bne.n	8009eae <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	889b      	ldrh	r3, [r3, #4]
 8009e9a:	0a1b      	lsrs	r3, r3, #8
 8009e9c:	b29b      	uxth	r3, r3
 8009e9e:	b2da      	uxtb	r2, r3
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f000 f930 	bl	800a10c <USBD_CtlSendStatus>
}
 8009eac:	e003      	b.n	8009eb6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009eae:	6839      	ldr	r1, [r7, #0]
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	f000 f860 	bl	8009f76 <USBD_CtlError>
}
 8009eb6:	bf00      	nop
 8009eb8:	3708      	adds	r7, #8
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}

08009ebe <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ebe:	b580      	push	{r7, lr}
 8009ec0:	b082      	sub	sp, #8
 8009ec2:	af00      	add	r7, sp, #0
 8009ec4:	6078      	str	r0, [r7, #4]
 8009ec6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ece:	b2db      	uxtb	r3, r3
 8009ed0:	3b01      	subs	r3, #1
 8009ed2:	2b02      	cmp	r3, #2
 8009ed4:	d80b      	bhi.n	8009eee <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	885b      	ldrh	r3, [r3, #2]
 8009eda:	2b01      	cmp	r3, #1
 8009edc:	d10c      	bne.n	8009ef8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009ee6:	6878      	ldr	r0, [r7, #4]
 8009ee8:	f000 f910 	bl	800a10c <USBD_CtlSendStatus>
      }
      break;
 8009eec:	e004      	b.n	8009ef8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009eee:	6839      	ldr	r1, [r7, #0]
 8009ef0:	6878      	ldr	r0, [r7, #4]
 8009ef2:	f000 f840 	bl	8009f76 <USBD_CtlError>
      break;
 8009ef6:	e000      	b.n	8009efa <USBD_ClrFeature+0x3c>
      break;
 8009ef8:	bf00      	nop
  }
}
 8009efa:	bf00      	nop
 8009efc:	3708      	adds	r7, #8
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd80      	pop	{r7, pc}

08009f02 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009f02:	b580      	push	{r7, lr}
 8009f04:	b084      	sub	sp, #16
 8009f06:	af00      	add	r7, sp, #0
 8009f08:	6078      	str	r0, [r7, #4]
 8009f0a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	781a      	ldrb	r2, [r3, #0]
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	3301      	adds	r3, #1
 8009f1c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	781a      	ldrb	r2, [r3, #0]
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	3301      	adds	r3, #1
 8009f2a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009f2c:	68f8      	ldr	r0, [r7, #12]
 8009f2e:	f7ff fa41 	bl	80093b4 <SWAPBYTE>
 8009f32:	4603      	mov	r3, r0
 8009f34:	461a      	mov	r2, r3
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	3301      	adds	r3, #1
 8009f3e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	3301      	adds	r3, #1
 8009f44:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009f46:	68f8      	ldr	r0, [r7, #12]
 8009f48:	f7ff fa34 	bl	80093b4 <SWAPBYTE>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	461a      	mov	r2, r3
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	3301      	adds	r3, #1
 8009f58:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	3301      	adds	r3, #1
 8009f5e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009f60:	68f8      	ldr	r0, [r7, #12]
 8009f62:	f7ff fa27 	bl	80093b4 <SWAPBYTE>
 8009f66:	4603      	mov	r3, r0
 8009f68:	461a      	mov	r2, r3
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	80da      	strh	r2, [r3, #6]
}
 8009f6e:	bf00      	nop
 8009f70:	3710      	adds	r7, #16
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bd80      	pop	{r7, pc}

08009f76 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f76:	b580      	push	{r7, lr}
 8009f78:	b082      	sub	sp, #8
 8009f7a:	af00      	add	r7, sp, #0
 8009f7c:	6078      	str	r0, [r7, #4]
 8009f7e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009f80:	2180      	movs	r1, #128	; 0x80
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f002 fa4e 	bl	800c424 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009f88:	2100      	movs	r1, #0
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	f002 fa4a 	bl	800c424 <USBD_LL_StallEP>
}
 8009f90:	bf00      	nop
 8009f92:	3708      	adds	r7, #8
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd80      	pop	{r7, pc}

08009f98 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b086      	sub	sp, #24
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	60f8      	str	r0, [r7, #12]
 8009fa0:	60b9      	str	r1, [r7, #8]
 8009fa2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d036      	beq.n	800a01c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009fb2:	6938      	ldr	r0, [r7, #16]
 8009fb4:	f000 f836 	bl	800a024 <USBD_GetLen>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	3301      	adds	r3, #1
 8009fbc:	b29b      	uxth	r3, r3
 8009fbe:	005b      	lsls	r3, r3, #1
 8009fc0:	b29a      	uxth	r2, r3
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009fc6:	7dfb      	ldrb	r3, [r7, #23]
 8009fc8:	68ba      	ldr	r2, [r7, #8]
 8009fca:	4413      	add	r3, r2
 8009fcc:	687a      	ldr	r2, [r7, #4]
 8009fce:	7812      	ldrb	r2, [r2, #0]
 8009fd0:	701a      	strb	r2, [r3, #0]
  idx++;
 8009fd2:	7dfb      	ldrb	r3, [r7, #23]
 8009fd4:	3301      	adds	r3, #1
 8009fd6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009fd8:	7dfb      	ldrb	r3, [r7, #23]
 8009fda:	68ba      	ldr	r2, [r7, #8]
 8009fdc:	4413      	add	r3, r2
 8009fde:	2203      	movs	r2, #3
 8009fe0:	701a      	strb	r2, [r3, #0]
  idx++;
 8009fe2:	7dfb      	ldrb	r3, [r7, #23]
 8009fe4:	3301      	adds	r3, #1
 8009fe6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009fe8:	e013      	b.n	800a012 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009fea:	7dfb      	ldrb	r3, [r7, #23]
 8009fec:	68ba      	ldr	r2, [r7, #8]
 8009fee:	4413      	add	r3, r2
 8009ff0:	693a      	ldr	r2, [r7, #16]
 8009ff2:	7812      	ldrb	r2, [r2, #0]
 8009ff4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009ff6:	693b      	ldr	r3, [r7, #16]
 8009ff8:	3301      	adds	r3, #1
 8009ffa:	613b      	str	r3, [r7, #16]
    idx++;
 8009ffc:	7dfb      	ldrb	r3, [r7, #23]
 8009ffe:	3301      	adds	r3, #1
 800a000:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a002:	7dfb      	ldrb	r3, [r7, #23]
 800a004:	68ba      	ldr	r2, [r7, #8]
 800a006:	4413      	add	r3, r2
 800a008:	2200      	movs	r2, #0
 800a00a:	701a      	strb	r2, [r3, #0]
    idx++;
 800a00c:	7dfb      	ldrb	r3, [r7, #23]
 800a00e:	3301      	adds	r3, #1
 800a010:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a012:	693b      	ldr	r3, [r7, #16]
 800a014:	781b      	ldrb	r3, [r3, #0]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d1e7      	bne.n	8009fea <USBD_GetString+0x52>
 800a01a:	e000      	b.n	800a01e <USBD_GetString+0x86>
    return;
 800a01c:	bf00      	nop
  }
}
 800a01e:	3718      	adds	r7, #24
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}

0800a024 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a024:	b480      	push	{r7}
 800a026:	b085      	sub	sp, #20
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a02c:	2300      	movs	r3, #0
 800a02e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a034:	e005      	b.n	800a042 <USBD_GetLen+0x1e>
  {
    len++;
 800a036:	7bfb      	ldrb	r3, [r7, #15]
 800a038:	3301      	adds	r3, #1
 800a03a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a03c:	68bb      	ldr	r3, [r7, #8]
 800a03e:	3301      	adds	r3, #1
 800a040:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a042:	68bb      	ldr	r3, [r7, #8]
 800a044:	781b      	ldrb	r3, [r3, #0]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d1f5      	bne.n	800a036 <USBD_GetLen+0x12>
  }

  return len;
 800a04a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	3714      	adds	r7, #20
 800a050:	46bd      	mov	sp, r7
 800a052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a056:	4770      	bx	lr

0800a058 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b084      	sub	sp, #16
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	60f8      	str	r0, [r7, #12]
 800a060:	60b9      	str	r1, [r7, #8]
 800a062:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	2202      	movs	r2, #2
 800a068:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	687a      	ldr	r2, [r7, #4]
 800a070:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	687a      	ldr	r2, [r7, #4]
 800a076:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	68ba      	ldr	r2, [r7, #8]
 800a07c:	2100      	movs	r1, #0
 800a07e:	68f8      	ldr	r0, [r7, #12]
 800a080:	f002 fa59 	bl	800c536 <USBD_LL_Transmit>

  return USBD_OK;
 800a084:	2300      	movs	r3, #0
}
 800a086:	4618      	mov	r0, r3
 800a088:	3710      	adds	r7, #16
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}

0800a08e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a08e:	b580      	push	{r7, lr}
 800a090:	b084      	sub	sp, #16
 800a092:	af00      	add	r7, sp, #0
 800a094:	60f8      	str	r0, [r7, #12]
 800a096:	60b9      	str	r1, [r7, #8]
 800a098:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	68ba      	ldr	r2, [r7, #8]
 800a09e:	2100      	movs	r1, #0
 800a0a0:	68f8      	ldr	r0, [r7, #12]
 800a0a2:	f002 fa48 	bl	800c536 <USBD_LL_Transmit>

  return USBD_OK;
 800a0a6:	2300      	movs	r3, #0
}
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	3710      	adds	r7, #16
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bd80      	pop	{r7, pc}

0800a0b0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b084      	sub	sp, #16
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	60f8      	str	r0, [r7, #12]
 800a0b8:	60b9      	str	r1, [r7, #8]
 800a0ba:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	2203      	movs	r2, #3
 800a0c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	687a      	ldr	r2, [r7, #4]
 800a0c8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	687a      	ldr	r2, [r7, #4]
 800a0d0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	68ba      	ldr	r2, [r7, #8]
 800a0d8:	2100      	movs	r1, #0
 800a0da:	68f8      	ldr	r0, [r7, #12]
 800a0dc:	f002 fa4c 	bl	800c578 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a0e0:	2300      	movs	r3, #0
}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	3710      	adds	r7, #16
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd80      	pop	{r7, pc}

0800a0ea <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a0ea:	b580      	push	{r7, lr}
 800a0ec:	b084      	sub	sp, #16
 800a0ee:	af00      	add	r7, sp, #0
 800a0f0:	60f8      	str	r0, [r7, #12]
 800a0f2:	60b9      	str	r1, [r7, #8]
 800a0f4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	68ba      	ldr	r2, [r7, #8]
 800a0fa:	2100      	movs	r1, #0
 800a0fc:	68f8      	ldr	r0, [r7, #12]
 800a0fe:	f002 fa3b 	bl	800c578 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a102:	2300      	movs	r3, #0
}
 800a104:	4618      	mov	r0, r3
 800a106:	3710      	adds	r7, #16
 800a108:	46bd      	mov	sp, r7
 800a10a:	bd80      	pop	{r7, pc}

0800a10c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b082      	sub	sp, #8
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2204      	movs	r2, #4
 800a118:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a11c:	2300      	movs	r3, #0
 800a11e:	2200      	movs	r2, #0
 800a120:	2100      	movs	r1, #0
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	f002 fa07 	bl	800c536 <USBD_LL_Transmit>

  return USBD_OK;
 800a128:	2300      	movs	r3, #0
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	3708      	adds	r7, #8
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}

0800a132 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a132:	b580      	push	{r7, lr}
 800a134:	b082      	sub	sp, #8
 800a136:	af00      	add	r7, sp, #0
 800a138:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2205      	movs	r2, #5
 800a13e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a142:	2300      	movs	r3, #0
 800a144:	2200      	movs	r2, #0
 800a146:	2100      	movs	r1, #0
 800a148:	6878      	ldr	r0, [r7, #4]
 800a14a:	f002 fa15 	bl	800c578 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a14e:	2300      	movs	r3, #0
}
 800a150:	4618      	mov	r0, r3
 800a152:	3708      	adds	r7, #8
 800a154:	46bd      	mov	sp, r7
 800a156:	bd80      	pop	{r7, pc}

0800a158 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a158:	b480      	push	{r7}
 800a15a:	b085      	sub	sp, #20
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	4603      	mov	r3, r0
 800a160:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a162:	2300      	movs	r3, #0
 800a164:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a166:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a16a:	2b84      	cmp	r3, #132	; 0x84
 800a16c:	d005      	beq.n	800a17a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a16e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	4413      	add	r3, r2
 800a176:	3303      	adds	r3, #3
 800a178:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a17a:	68fb      	ldr	r3, [r7, #12]
}
 800a17c:	4618      	mov	r0, r3
 800a17e:	3714      	adds	r7, #20
 800a180:	46bd      	mov	sp, r7
 800a182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a186:	4770      	bx	lr

0800a188 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800a188:	b480      	push	{r7}
 800a18a:	b083      	sub	sp, #12
 800a18c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a18e:	f3ef 8305 	mrs	r3, IPSR
 800a192:	607b      	str	r3, [r7, #4]
  return(result);
 800a194:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800a196:	2b00      	cmp	r3, #0
 800a198:	bf14      	ite	ne
 800a19a:	2301      	movne	r3, #1
 800a19c:	2300      	moveq	r3, #0
 800a19e:	b2db      	uxtb	r3, r3
}
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	370c      	adds	r7, #12
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1aa:	4770      	bx	lr

0800a1ac <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a1b0:	f000 fba8 	bl	800a904 <vTaskStartScheduler>
  
  return osOK;
 800a1b4:	2300      	movs	r3, #0
}
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	bd80      	pop	{r7, pc}

0800a1ba <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800a1ba:	b580      	push	{r7, lr}
 800a1bc:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800a1be:	f7ff ffe3 	bl	800a188 <inHandlerMode>
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d003      	beq.n	800a1d0 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800a1c8:	f000 fca6 	bl	800ab18 <xTaskGetTickCountFromISR>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	e002      	b.n	800a1d6 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800a1d0:	f000 fc92 	bl	800aaf8 <xTaskGetTickCount>
 800a1d4:	4603      	mov	r3, r0
  }
}
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	bd80      	pop	{r7, pc}

0800a1da <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a1da:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a1dc:	b087      	sub	sp, #28
 800a1de:	af02      	add	r7, sp, #8
 800a1e0:	6078      	str	r0, [r7, #4]
 800a1e2:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	685c      	ldr	r4, [r3, #4]
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a1f0:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	f7ff ffad 	bl	800a158 <makeFreeRtosPriority>
 800a1fe:	4602      	mov	r2, r0
 800a200:	f107 030c 	add.w	r3, r7, #12
 800a204:	9301      	str	r3, [sp, #4]
 800a206:	9200      	str	r2, [sp, #0]
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	4632      	mov	r2, r6
 800a20c:	4629      	mov	r1, r5
 800a20e:	4620      	mov	r0, r4
 800a210:	f000 f974 	bl	800a4fc <xTaskCreate>
 800a214:	4603      	mov	r3, r0
 800a216:	2b01      	cmp	r3, #1
 800a218:	d001      	beq.n	800a21e <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800a21a:	2300      	movs	r3, #0
 800a21c:	e000      	b.n	800a220 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800a21e:	68fb      	ldr	r3, [r7, #12]
}
 800a220:	4618      	mov	r0, r3
 800a222:	3714      	adds	r7, #20
 800a224:	46bd      	mov	sp, r7
 800a226:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a228 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b084      	sub	sp, #16
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d001      	beq.n	800a23e <osDelay+0x16>
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	e000      	b.n	800a240 <osDelay+0x18>
 800a23e:	2301      	movs	r3, #1
 800a240:	4618      	mov	r0, r3
 800a242:	f000 fb2b 	bl	800a89c <vTaskDelay>
  
  return osOK;
 800a246:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a248:	4618      	mov	r0, r3
 800a24a:	3710      	adds	r7, #16
 800a24c:	46bd      	mov	sp, r7
 800a24e:	bd80      	pop	{r7, pc}

0800a250 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b086      	sub	sp, #24
 800a254:	af02      	add	r7, sp, #8
 800a256:	6078      	str	r0, [r7, #4]
 800a258:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800a25a:	2300      	movs	r3, #0
 800a25c:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 800a25e:	2300      	movs	r3, #0
 800a260:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 800a262:	f7ff ff91 	bl	800a188 <inHandlerMode>
 800a266:	4603      	mov	r3, r0
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d01c      	beq.n	800a2a6 <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 800a26c:	6839      	ldr	r1, [r7, #0]
 800a26e:	f107 0208 	add.w	r2, r7, #8
 800a272:	f107 030c 	add.w	r3, r7, #12
 800a276:	9300      	str	r3, [sp, #0]
 800a278:	4613      	mov	r3, r2
 800a27a:	2201      	movs	r2, #1
 800a27c:	6878      	ldr	r0, [r7, #4]
 800a27e:	f000 ff77 	bl	800b170 <xTaskGenericNotifyFromISR>
 800a282:	4603      	mov	r3, r0
 800a284:	2b01      	cmp	r3, #1
 800a286:	d002      	beq.n	800a28e <osSignalSet+0x3e>
      return 0x80000000;
 800a288:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a28c:	e019      	b.n	800a2c2 <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d015      	beq.n	800a2c0 <osSignalSet+0x70>
 800a294:	4b0d      	ldr	r3, [pc, #52]	; (800a2cc <osSignalSet+0x7c>)
 800a296:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a29a:	601a      	str	r2, [r3, #0]
 800a29c:	f3bf 8f4f 	dsb	sy
 800a2a0:	f3bf 8f6f 	isb	sy
 800a2a4:	e00c      	b.n	800a2c0 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 800a2a6:	6839      	ldr	r1, [r7, #0]
 800a2a8:	f107 0308 	add.w	r3, r7, #8
 800a2ac:	2201      	movs	r2, #1
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	f000 fea0 	bl	800aff4 <xTaskGenericNotify>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	2b01      	cmp	r3, #1
 800a2b8:	d002      	beq.n	800a2c0 <osSignalSet+0x70>
    return 0x80000000;
 800a2ba:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a2be:	e000      	b.n	800a2c2 <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 800a2c0:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	3710      	adds	r7, #16
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd80      	pop	{r7, pc}
 800a2ca:	bf00      	nop
 800a2cc:	e000ed04 	.word	0xe000ed04

0800a2d0 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 800a2d0:	b590      	push	{r4, r7, lr}
 800a2d2:	b089      	sub	sp, #36	; 0x24
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	60f8      	str	r0, [r7, #12]
 800a2d8:	60b9      	str	r1, [r7, #8]
 800a2da:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 800a2dc:	2300      	movs	r3, #0
 800a2de:	617b      	str	r3, [r7, #20]
  ticks = 0;
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a2ea:	d103      	bne.n	800a2f4 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 800a2ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a2f0:	61fb      	str	r3, [r7, #28]
 800a2f2:	e009      	b.n	800a308 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d006      	beq.n	800a308 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 800a2fe:	69fb      	ldr	r3, [r7, #28]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d101      	bne.n	800a308 <osSignalWait+0x38>
      ticks = 1;
 800a304:	2301      	movs	r3, #1
 800a306:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 800a308:	f7ff ff3e 	bl	800a188 <inHandlerMode>
 800a30c:	4603      	mov	r3, r0
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d002      	beq.n	800a318 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 800a312:	2382      	movs	r3, #130	; 0x82
 800a314:	613b      	str	r3, [r7, #16]
 800a316:	e01b      	b.n	800a350 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 800a318:	68b9      	ldr	r1, [r7, #8]
 800a31a:	f107 0310 	add.w	r3, r7, #16
 800a31e:	1d1a      	adds	r2, r3, #4
 800a320:	69fb      	ldr	r3, [r7, #28]
 800a322:	2000      	movs	r0, #0
 800a324:	f000 fe06 	bl	800af34 <xTaskNotifyWait>
 800a328:	4603      	mov	r3, r0
 800a32a:	2b01      	cmp	r3, #1
 800a32c:	d008      	beq.n	800a340 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 800a32e:	69fb      	ldr	r3, [r7, #28]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d102      	bne.n	800a33a <osSignalWait+0x6a>
 800a334:	2300      	movs	r3, #0
 800a336:	613b      	str	r3, [r7, #16]
 800a338:	e00a      	b.n	800a350 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 800a33a:	2340      	movs	r3, #64	; 0x40
 800a33c:	613b      	str	r3, [r7, #16]
 800a33e:	e007      	b.n	800a350 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 800a340:	697b      	ldr	r3, [r7, #20]
 800a342:	2b00      	cmp	r3, #0
 800a344:	da02      	bge.n	800a34c <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 800a346:	2386      	movs	r3, #134	; 0x86
 800a348:	613b      	str	r3, [r7, #16]
 800a34a:	e001      	b.n	800a350 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 800a34c:	2308      	movs	r3, #8
 800a34e:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	461c      	mov	r4, r3
 800a354:	f107 0310 	add.w	r3, r7, #16
 800a358:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a35c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800a360:	68f8      	ldr	r0, [r7, #12]
 800a362:	3724      	adds	r7, #36	; 0x24
 800a364:	46bd      	mov	sp, r7
 800a366:	bd90      	pop	{r4, r7, pc}

0800a368 <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b084      	sub	sp, #16
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
 800a370:	6039      	str	r1, [r7, #0]
#if INCLUDE_vTaskDelayUntil
  TickType_t ticks = (millisec / portTICK_PERIOD_MS);
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	60fb      	str	r3, [r7, #12]
  vTaskDelayUntil((TickType_t *) PreviousWakeTime, ticks ? ticks : 1);
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d001      	beq.n	800a380 <osDelayUntil+0x18>
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	e000      	b.n	800a382 <osDelayUntil+0x1a>
 800a380:	2301      	movs	r3, #1
 800a382:	4619      	mov	r1, r3
 800a384:	6878      	ldr	r0, [r7, #4]
 800a386:	f000 fa0b 	bl	800a7a0 <vTaskDelayUntil>
  
  return osOK;
 800a38a:	2300      	movs	r3, #0
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
#endif
}
 800a38c:	4618      	mov	r0, r3
 800a38e:	3710      	adds	r7, #16
 800a390:	46bd      	mov	sp, r7
 800a392:	bd80      	pop	{r7, pc}

0800a394 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a394:	b480      	push	{r7}
 800a396:	b083      	sub	sp, #12
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	f103 0208 	add.w	r2, r3, #8
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a3ac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	f103 0208 	add.w	r2, r3, #8
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	f103 0208 	add.w	r2, r3, #8
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a3c8:	bf00      	nop
 800a3ca:	370c      	adds	r7, #12
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d2:	4770      	bx	lr

0800a3d4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a3d4:	b480      	push	{r7}
 800a3d6:	b083      	sub	sp, #12
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2200      	movs	r2, #0
 800a3e0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a3e2:	bf00      	nop
 800a3e4:	370c      	adds	r7, #12
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ec:	4770      	bx	lr

0800a3ee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a3ee:	b480      	push	{r7}
 800a3f0:	b085      	sub	sp, #20
 800a3f2:	af00      	add	r7, sp, #0
 800a3f4:	6078      	str	r0, [r7, #4]
 800a3f6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	685b      	ldr	r3, [r3, #4]
 800a3fc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	68fa      	ldr	r2, [r7, #12]
 800a402:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	689a      	ldr	r2, [r3, #8]
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	689b      	ldr	r3, [r3, #8]
 800a410:	683a      	ldr	r2, [r7, #0]
 800a412:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	683a      	ldr	r2, [r7, #0]
 800a418:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	687a      	ldr	r2, [r7, #4]
 800a41e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	1c5a      	adds	r2, r3, #1
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	601a      	str	r2, [r3, #0]
}
 800a42a:	bf00      	nop
 800a42c:	3714      	adds	r7, #20
 800a42e:	46bd      	mov	sp, r7
 800a430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a434:	4770      	bx	lr

0800a436 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a436:	b480      	push	{r7}
 800a438:	b085      	sub	sp, #20
 800a43a:	af00      	add	r7, sp, #0
 800a43c:	6078      	str	r0, [r7, #4]
 800a43e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a446:	68bb      	ldr	r3, [r7, #8]
 800a448:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a44c:	d103      	bne.n	800a456 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	691b      	ldr	r3, [r3, #16]
 800a452:	60fb      	str	r3, [r7, #12]
 800a454:	e00c      	b.n	800a470 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	3308      	adds	r3, #8
 800a45a:	60fb      	str	r3, [r7, #12]
 800a45c:	e002      	b.n	800a464 <vListInsert+0x2e>
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	685b      	ldr	r3, [r3, #4]
 800a462:	60fb      	str	r3, [r7, #12]
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	685b      	ldr	r3, [r3, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	68ba      	ldr	r2, [r7, #8]
 800a46c:	429a      	cmp	r2, r3
 800a46e:	d2f6      	bcs.n	800a45e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	685a      	ldr	r2, [r3, #4]
 800a474:	683b      	ldr	r3, [r7, #0]
 800a476:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	685b      	ldr	r3, [r3, #4]
 800a47c:	683a      	ldr	r2, [r7, #0]
 800a47e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a480:	683b      	ldr	r3, [r7, #0]
 800a482:	68fa      	ldr	r2, [r7, #12]
 800a484:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	683a      	ldr	r2, [r7, #0]
 800a48a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	687a      	ldr	r2, [r7, #4]
 800a490:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	1c5a      	adds	r2, r3, #1
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	601a      	str	r2, [r3, #0]
}
 800a49c:	bf00      	nop
 800a49e:	3714      	adds	r7, #20
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a6:	4770      	bx	lr

0800a4a8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a4a8:	b480      	push	{r7}
 800a4aa:	b085      	sub	sp, #20
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	691b      	ldr	r3, [r3, #16]
 800a4b4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	685b      	ldr	r3, [r3, #4]
 800a4ba:	687a      	ldr	r2, [r7, #4]
 800a4bc:	6892      	ldr	r2, [r2, #8]
 800a4be:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	689b      	ldr	r3, [r3, #8]
 800a4c4:	687a      	ldr	r2, [r7, #4]
 800a4c6:	6852      	ldr	r2, [r2, #4]
 800a4c8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	685b      	ldr	r3, [r3, #4]
 800a4ce:	687a      	ldr	r2, [r7, #4]
 800a4d0:	429a      	cmp	r2, r3
 800a4d2:	d103      	bne.n	800a4dc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	689a      	ldr	r2, [r3, #8]
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2200      	movs	r2, #0
 800a4e0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	1e5a      	subs	r2, r3, #1
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	681b      	ldr	r3, [r3, #0]
}
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	3714      	adds	r7, #20
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fa:	4770      	bx	lr

0800a4fc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b08c      	sub	sp, #48	; 0x30
 800a500:	af04      	add	r7, sp, #16
 800a502:	60f8      	str	r0, [r7, #12]
 800a504:	60b9      	str	r1, [r7, #8]
 800a506:	603b      	str	r3, [r7, #0]
 800a508:	4613      	mov	r3, r2
 800a50a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a50c:	88fb      	ldrh	r3, [r7, #6]
 800a50e:	009b      	lsls	r3, r3, #2
 800a510:	4618      	mov	r0, r3
 800a512:	f001 f9c9 	bl	800b8a8 <pvPortMalloc>
 800a516:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a518:	697b      	ldr	r3, [r7, #20]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d00e      	beq.n	800a53c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a51e:	20a0      	movs	r0, #160	; 0xa0
 800a520:	f001 f9c2 	bl	800b8a8 <pvPortMalloc>
 800a524:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a526:	69fb      	ldr	r3, [r7, #28]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d003      	beq.n	800a534 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a52c:	69fb      	ldr	r3, [r7, #28]
 800a52e:	697a      	ldr	r2, [r7, #20]
 800a530:	631a      	str	r2, [r3, #48]	; 0x30
 800a532:	e005      	b.n	800a540 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a534:	6978      	ldr	r0, [r7, #20]
 800a536:	f001 fa87 	bl	800ba48 <vPortFree>
 800a53a:	e001      	b.n	800a540 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a53c:	2300      	movs	r3, #0
 800a53e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a540:	69fb      	ldr	r3, [r7, #28]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d013      	beq.n	800a56e <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a546:	88fa      	ldrh	r2, [r7, #6]
 800a548:	2300      	movs	r3, #0
 800a54a:	9303      	str	r3, [sp, #12]
 800a54c:	69fb      	ldr	r3, [r7, #28]
 800a54e:	9302      	str	r3, [sp, #8]
 800a550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a552:	9301      	str	r3, [sp, #4]
 800a554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a556:	9300      	str	r3, [sp, #0]
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	68b9      	ldr	r1, [r7, #8]
 800a55c:	68f8      	ldr	r0, [r7, #12]
 800a55e:	f000 f80f 	bl	800a580 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a562:	69f8      	ldr	r0, [r7, #28]
 800a564:	f000 f8b2 	bl	800a6cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a568:	2301      	movs	r3, #1
 800a56a:	61bb      	str	r3, [r7, #24]
 800a56c:	e002      	b.n	800a574 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a56e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a572:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a574:	69bb      	ldr	r3, [r7, #24]
	}
 800a576:	4618      	mov	r0, r3
 800a578:	3720      	adds	r7, #32
 800a57a:	46bd      	mov	sp, r7
 800a57c:	bd80      	pop	{r7, pc}
	...

0800a580 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b088      	sub	sp, #32
 800a584:	af00      	add	r7, sp, #0
 800a586:	60f8      	str	r0, [r7, #12]
 800a588:	60b9      	str	r1, [r7, #8]
 800a58a:	607a      	str	r2, [r7, #4]
 800a58c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a58e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a590:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	009b      	lsls	r3, r3, #2
 800a596:	461a      	mov	r2, r3
 800a598:	21a5      	movs	r1, #165	; 0xa5
 800a59a:	f005 f8dc 	bl	800f756 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a59e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a5a8:	3b01      	subs	r3, #1
 800a5aa:	009b      	lsls	r3, r3, #2
 800a5ac:	4413      	add	r3, r2
 800a5ae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a5b0:	69bb      	ldr	r3, [r7, #24]
 800a5b2:	f023 0307 	bic.w	r3, r3, #7
 800a5b6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a5b8:	69bb      	ldr	r3, [r7, #24]
 800a5ba:	f003 0307 	and.w	r3, r3, #7
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d00a      	beq.n	800a5d8 <prvInitialiseNewTask+0x58>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a5c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5c6:	f383 8811 	msr	BASEPRI, r3
 800a5ca:	f3bf 8f6f 	isb	sy
 800a5ce:	f3bf 8f4f 	dsb	sy
 800a5d2:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a5d4:	bf00      	nop
 800a5d6:	e7fe      	b.n	800a5d6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a5d8:	68bb      	ldr	r3, [r7, #8]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d01f      	beq.n	800a61e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a5de:	2300      	movs	r3, #0
 800a5e0:	61fb      	str	r3, [r7, #28]
 800a5e2:	e012      	b.n	800a60a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a5e4:	68ba      	ldr	r2, [r7, #8]
 800a5e6:	69fb      	ldr	r3, [r7, #28]
 800a5e8:	4413      	add	r3, r2
 800a5ea:	7819      	ldrb	r1, [r3, #0]
 800a5ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5ee:	69fb      	ldr	r3, [r7, #28]
 800a5f0:	4413      	add	r3, r2
 800a5f2:	3334      	adds	r3, #52	; 0x34
 800a5f4:	460a      	mov	r2, r1
 800a5f6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a5f8:	68ba      	ldr	r2, [r7, #8]
 800a5fa:	69fb      	ldr	r3, [r7, #28]
 800a5fc:	4413      	add	r3, r2
 800a5fe:	781b      	ldrb	r3, [r3, #0]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d006      	beq.n	800a612 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a604:	69fb      	ldr	r3, [r7, #28]
 800a606:	3301      	adds	r3, #1
 800a608:	61fb      	str	r3, [r7, #28]
 800a60a:	69fb      	ldr	r3, [r7, #28]
 800a60c:	2b0f      	cmp	r3, #15
 800a60e:	d9e9      	bls.n	800a5e4 <prvInitialiseNewTask+0x64>
 800a610:	e000      	b.n	800a614 <prvInitialiseNewTask+0x94>
			{
				break;
 800a612:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a616:	2200      	movs	r2, #0
 800a618:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a61c:	e003      	b.n	800a626 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a61e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a620:	2200      	movs	r2, #0
 800a622:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a628:	2b06      	cmp	r3, #6
 800a62a:	d901      	bls.n	800a630 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a62c:	2306      	movs	r3, #6
 800a62e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a632:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a634:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a638:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a63a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a63c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a63e:	2200      	movs	r2, #0
 800a640:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a644:	3304      	adds	r3, #4
 800a646:	4618      	mov	r0, r3
 800a648:	f7ff fec4 	bl	800a3d4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a64c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a64e:	3318      	adds	r3, #24
 800a650:	4618      	mov	r0, r3
 800a652:	f7ff febf 	bl	800a3d4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a658:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a65a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a65c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a65e:	f1c3 0207 	rsb	r2, r3, #7
 800a662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a664:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a668:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a66a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a66c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a66e:	2200      	movs	r2, #0
 800a670:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a676:	2200      	movs	r2, #0
 800a678:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a67c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a67e:	334c      	adds	r3, #76	; 0x4c
 800a680:	224c      	movs	r2, #76	; 0x4c
 800a682:	2100      	movs	r1, #0
 800a684:	4618      	mov	r0, r3
 800a686:	f005 f866 	bl	800f756 <memset>
 800a68a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a68c:	4a0c      	ldr	r2, [pc, #48]	; (800a6c0 <prvInitialiseNewTask+0x140>)
 800a68e:	651a      	str	r2, [r3, #80]	; 0x50
 800a690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a692:	4a0c      	ldr	r2, [pc, #48]	; (800a6c4 <prvInitialiseNewTask+0x144>)
 800a694:	655a      	str	r2, [r3, #84]	; 0x54
 800a696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a698:	4a0b      	ldr	r2, [pc, #44]	; (800a6c8 <prvInitialiseNewTask+0x148>)
 800a69a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a69c:	683a      	ldr	r2, [r7, #0]
 800a69e:	68f9      	ldr	r1, [r7, #12]
 800a6a0:	69b8      	ldr	r0, [r7, #24]
 800a6a2:	f000 feaf 	bl	800b404 <pxPortInitialiseStack>
 800a6a6:	4602      	mov	r2, r0
 800a6a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6aa:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a6ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d002      	beq.n	800a6b8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a6b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6b6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a6b8:	bf00      	nop
 800a6ba:	3720      	adds	r7, #32
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}
 800a6c0:	20021dac 	.word	0x20021dac
 800a6c4:	20021e14 	.word	0x20021e14
 800a6c8:	20021e7c 	.word	0x20021e7c

0800a6cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b082      	sub	sp, #8
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a6d4:	f000 ffc6 	bl	800b664 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a6d8:	4b2a      	ldr	r3, [pc, #168]	; (800a784 <prvAddNewTaskToReadyList+0xb8>)
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	3301      	adds	r3, #1
 800a6de:	4a29      	ldr	r2, [pc, #164]	; (800a784 <prvAddNewTaskToReadyList+0xb8>)
 800a6e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a6e2:	4b29      	ldr	r3, [pc, #164]	; (800a788 <prvAddNewTaskToReadyList+0xbc>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d109      	bne.n	800a6fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a6ea:	4a27      	ldr	r2, [pc, #156]	; (800a788 <prvAddNewTaskToReadyList+0xbc>)
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a6f0:	4b24      	ldr	r3, [pc, #144]	; (800a784 <prvAddNewTaskToReadyList+0xb8>)
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	2b01      	cmp	r3, #1
 800a6f6:	d110      	bne.n	800a71a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a6f8:	f000 fb78 	bl	800adec <prvInitialiseTaskLists>
 800a6fc:	e00d      	b.n	800a71a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a6fe:	4b23      	ldr	r3, [pc, #140]	; (800a78c <prvAddNewTaskToReadyList+0xc0>)
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d109      	bne.n	800a71a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a706:	4b20      	ldr	r3, [pc, #128]	; (800a788 <prvAddNewTaskToReadyList+0xbc>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a710:	429a      	cmp	r2, r3
 800a712:	d802      	bhi.n	800a71a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a714:	4a1c      	ldr	r2, [pc, #112]	; (800a788 <prvAddNewTaskToReadyList+0xbc>)
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a71a:	4b1d      	ldr	r3, [pc, #116]	; (800a790 <prvAddNewTaskToReadyList+0xc4>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	3301      	adds	r3, #1
 800a720:	4a1b      	ldr	r2, [pc, #108]	; (800a790 <prvAddNewTaskToReadyList+0xc4>)
 800a722:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a728:	2201      	movs	r2, #1
 800a72a:	409a      	lsls	r2, r3
 800a72c:	4b19      	ldr	r3, [pc, #100]	; (800a794 <prvAddNewTaskToReadyList+0xc8>)
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	4313      	orrs	r3, r2
 800a732:	4a18      	ldr	r2, [pc, #96]	; (800a794 <prvAddNewTaskToReadyList+0xc8>)
 800a734:	6013      	str	r3, [r2, #0]
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a73a:	4613      	mov	r3, r2
 800a73c:	009b      	lsls	r3, r3, #2
 800a73e:	4413      	add	r3, r2
 800a740:	009b      	lsls	r3, r3, #2
 800a742:	4a15      	ldr	r2, [pc, #84]	; (800a798 <prvAddNewTaskToReadyList+0xcc>)
 800a744:	441a      	add	r2, r3
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	3304      	adds	r3, #4
 800a74a:	4619      	mov	r1, r3
 800a74c:	4610      	mov	r0, r2
 800a74e:	f7ff fe4e 	bl	800a3ee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a752:	f000 ffb7 	bl	800b6c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a756:	4b0d      	ldr	r3, [pc, #52]	; (800a78c <prvAddNewTaskToReadyList+0xc0>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d00e      	beq.n	800a77c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a75e:	4b0a      	ldr	r3, [pc, #40]	; (800a788 <prvAddNewTaskToReadyList+0xbc>)
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a768:	429a      	cmp	r2, r3
 800a76a:	d207      	bcs.n	800a77c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a76c:	4b0b      	ldr	r3, [pc, #44]	; (800a79c <prvAddNewTaskToReadyList+0xd0>)
 800a76e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a772:	601a      	str	r2, [r3, #0]
 800a774:	f3bf 8f4f 	dsb	sy
 800a778:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a77c:	bf00      	nop
 800a77e:	3708      	adds	r7, #8
 800a780:	46bd      	mov	sp, r7
 800a782:	bd80      	pop	{r7, pc}
 800a784:	200005dc 	.word	0x200005dc
 800a788:	200004dc 	.word	0x200004dc
 800a78c:	200005e8 	.word	0x200005e8
 800a790:	200005f8 	.word	0x200005f8
 800a794:	200005e4 	.word	0x200005e4
 800a798:	200004e0 	.word	0x200004e0
 800a79c:	e000ed04 	.word	0xe000ed04

0800a7a0 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b08a      	sub	sp, #40	; 0x28
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
 800a7a8:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d10a      	bne.n	800a7ca <vTaskDelayUntil+0x2a>
	__asm volatile
 800a7b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7b8:	f383 8811 	msr	BASEPRI, r3
 800a7bc:	f3bf 8f6f 	isb	sy
 800a7c0:	f3bf 8f4f 	dsb	sy
 800a7c4:	617b      	str	r3, [r7, #20]
}
 800a7c6:	bf00      	nop
 800a7c8:	e7fe      	b.n	800a7c8 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d10a      	bne.n	800a7e6 <vTaskDelayUntil+0x46>
	__asm volatile
 800a7d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7d4:	f383 8811 	msr	BASEPRI, r3
 800a7d8:	f3bf 8f6f 	isb	sy
 800a7dc:	f3bf 8f4f 	dsb	sy
 800a7e0:	613b      	str	r3, [r7, #16]
}
 800a7e2:	bf00      	nop
 800a7e4:	e7fe      	b.n	800a7e4 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800a7e6:	4b2a      	ldr	r3, [pc, #168]	; (800a890 <vTaskDelayUntil+0xf0>)
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d00a      	beq.n	800a804 <vTaskDelayUntil+0x64>
	__asm volatile
 800a7ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7f2:	f383 8811 	msr	BASEPRI, r3
 800a7f6:	f3bf 8f6f 	isb	sy
 800a7fa:	f3bf 8f4f 	dsb	sy
 800a7fe:	60fb      	str	r3, [r7, #12]
}
 800a800:	bf00      	nop
 800a802:	e7fe      	b.n	800a802 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800a804:	f000 f8ce 	bl	800a9a4 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800a808:	4b22      	ldr	r3, [pc, #136]	; (800a894 <vTaskDelayUntil+0xf4>)
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	683a      	ldr	r2, [r7, #0]
 800a814:	4413      	add	r3, r2
 800a816:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	6a3a      	ldr	r2, [r7, #32]
 800a81e:	429a      	cmp	r2, r3
 800a820:	d20b      	bcs.n	800a83a <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	69fa      	ldr	r2, [r7, #28]
 800a828:	429a      	cmp	r2, r3
 800a82a:	d211      	bcs.n	800a850 <vTaskDelayUntil+0xb0>
 800a82c:	69fa      	ldr	r2, [r7, #28]
 800a82e:	6a3b      	ldr	r3, [r7, #32]
 800a830:	429a      	cmp	r2, r3
 800a832:	d90d      	bls.n	800a850 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800a834:	2301      	movs	r3, #1
 800a836:	627b      	str	r3, [r7, #36]	; 0x24
 800a838:	e00a      	b.n	800a850 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	69fa      	ldr	r2, [r7, #28]
 800a840:	429a      	cmp	r2, r3
 800a842:	d303      	bcc.n	800a84c <vTaskDelayUntil+0xac>
 800a844:	69fa      	ldr	r2, [r7, #28]
 800a846:	6a3b      	ldr	r3, [r7, #32]
 800a848:	429a      	cmp	r2, r3
 800a84a:	d901      	bls.n	800a850 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800a84c:	2301      	movs	r3, #1
 800a84e:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	69fa      	ldr	r2, [r7, #28]
 800a854:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800a856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d006      	beq.n	800a86a <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800a85c:	69fa      	ldr	r2, [r7, #28]
 800a85e:	6a3b      	ldr	r3, [r7, #32]
 800a860:	1ad3      	subs	r3, r2, r3
 800a862:	2100      	movs	r1, #0
 800a864:	4618      	mov	r0, r3
 800a866:	f000 fd67 	bl	800b338 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800a86a:	f000 f8a9 	bl	800a9c0 <xTaskResumeAll>
 800a86e:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a870:	69bb      	ldr	r3, [r7, #24]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d107      	bne.n	800a886 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800a876:	4b08      	ldr	r3, [pc, #32]	; (800a898 <vTaskDelayUntil+0xf8>)
 800a878:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a87c:	601a      	str	r2, [r3, #0]
 800a87e:	f3bf 8f4f 	dsb	sy
 800a882:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a886:	bf00      	nop
 800a888:	3728      	adds	r7, #40	; 0x28
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}
 800a88e:	bf00      	nop
 800a890:	20000604 	.word	0x20000604
 800a894:	200005e0 	.word	0x200005e0
 800a898:	e000ed04 	.word	0xe000ed04

0800a89c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b084      	sub	sp, #16
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d017      	beq.n	800a8de <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a8ae:	4b13      	ldr	r3, [pc, #76]	; (800a8fc <vTaskDelay+0x60>)
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d00a      	beq.n	800a8cc <vTaskDelay+0x30>
	__asm volatile
 800a8b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ba:	f383 8811 	msr	BASEPRI, r3
 800a8be:	f3bf 8f6f 	isb	sy
 800a8c2:	f3bf 8f4f 	dsb	sy
 800a8c6:	60bb      	str	r3, [r7, #8]
}
 800a8c8:	bf00      	nop
 800a8ca:	e7fe      	b.n	800a8ca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a8cc:	f000 f86a 	bl	800a9a4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a8d0:	2100      	movs	r1, #0
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	f000 fd30 	bl	800b338 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a8d8:	f000 f872 	bl	800a9c0 <xTaskResumeAll>
 800a8dc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d107      	bne.n	800a8f4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a8e4:	4b06      	ldr	r3, [pc, #24]	; (800a900 <vTaskDelay+0x64>)
 800a8e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8ea:	601a      	str	r2, [r3, #0]
 800a8ec:	f3bf 8f4f 	dsb	sy
 800a8f0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a8f4:	bf00      	nop
 800a8f6:	3710      	adds	r7, #16
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	bd80      	pop	{r7, pc}
 800a8fc:	20000604 	.word	0x20000604
 800a900:	e000ed04 	.word	0xe000ed04

0800a904 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b086      	sub	sp, #24
 800a908:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800a90a:	4b1e      	ldr	r3, [pc, #120]	; (800a984 <vTaskStartScheduler+0x80>)
 800a90c:	9301      	str	r3, [sp, #4]
 800a90e:	2300      	movs	r3, #0
 800a910:	9300      	str	r3, [sp, #0]
 800a912:	2300      	movs	r3, #0
 800a914:	2280      	movs	r2, #128	; 0x80
 800a916:	491c      	ldr	r1, [pc, #112]	; (800a988 <vTaskStartScheduler+0x84>)
 800a918:	481c      	ldr	r0, [pc, #112]	; (800a98c <vTaskStartScheduler+0x88>)
 800a91a:	f7ff fdef 	bl	800a4fc <xTaskCreate>
 800a91e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	2b01      	cmp	r3, #1
 800a924:	d11b      	bne.n	800a95e <vTaskStartScheduler+0x5a>
	__asm volatile
 800a926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a92a:	f383 8811 	msr	BASEPRI, r3
 800a92e:	f3bf 8f6f 	isb	sy
 800a932:	f3bf 8f4f 	dsb	sy
 800a936:	60bb      	str	r3, [r7, #8]
}
 800a938:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a93a:	4b15      	ldr	r3, [pc, #84]	; (800a990 <vTaskStartScheduler+0x8c>)
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	334c      	adds	r3, #76	; 0x4c
 800a940:	4a14      	ldr	r2, [pc, #80]	; (800a994 <vTaskStartScheduler+0x90>)
 800a942:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a944:	4b14      	ldr	r3, [pc, #80]	; (800a998 <vTaskStartScheduler+0x94>)
 800a946:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a94a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a94c:	4b13      	ldr	r3, [pc, #76]	; (800a99c <vTaskStartScheduler+0x98>)
 800a94e:	2201      	movs	r2, #1
 800a950:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a952:	4b13      	ldr	r3, [pc, #76]	; (800a9a0 <vTaskStartScheduler+0x9c>)
 800a954:	2200      	movs	r2, #0
 800a956:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a958:	f000 fde2 	bl	800b520 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a95c:	e00e      	b.n	800a97c <vTaskStartScheduler+0x78>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a964:	d10a      	bne.n	800a97c <vTaskStartScheduler+0x78>
	__asm volatile
 800a966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a96a:	f383 8811 	msr	BASEPRI, r3
 800a96e:	f3bf 8f6f 	isb	sy
 800a972:	f3bf 8f4f 	dsb	sy
 800a976:	607b      	str	r3, [r7, #4]
}
 800a978:	bf00      	nop
 800a97a:	e7fe      	b.n	800a97a <vTaskStartScheduler+0x76>
}
 800a97c:	bf00      	nop
 800a97e:	3710      	adds	r7, #16
 800a980:	46bd      	mov	sp, r7
 800a982:	bd80      	pop	{r7, pc}
 800a984:	20000600 	.word	0x20000600
 800a988:	0800f94c 	.word	0x0800f94c
 800a98c:	0800adbd 	.word	0x0800adbd
 800a990:	200004dc 	.word	0x200004dc
 800a994:	2000014c 	.word	0x2000014c
 800a998:	200005fc 	.word	0x200005fc
 800a99c:	200005e8 	.word	0x200005e8
 800a9a0:	200005e0 	.word	0x200005e0

0800a9a4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a9a4:	b480      	push	{r7}
 800a9a6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a9a8:	4b04      	ldr	r3, [pc, #16]	; (800a9bc <vTaskSuspendAll+0x18>)
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	3301      	adds	r3, #1
 800a9ae:	4a03      	ldr	r2, [pc, #12]	; (800a9bc <vTaskSuspendAll+0x18>)
 800a9b0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a9b2:	bf00      	nop
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ba:	4770      	bx	lr
 800a9bc:	20000604 	.word	0x20000604

0800a9c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b084      	sub	sp, #16
 800a9c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a9ce:	4b41      	ldr	r3, [pc, #260]	; (800aad4 <xTaskResumeAll+0x114>)
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d10a      	bne.n	800a9ec <xTaskResumeAll+0x2c>
	__asm volatile
 800a9d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9da:	f383 8811 	msr	BASEPRI, r3
 800a9de:	f3bf 8f6f 	isb	sy
 800a9e2:	f3bf 8f4f 	dsb	sy
 800a9e6:	603b      	str	r3, [r7, #0]
}
 800a9e8:	bf00      	nop
 800a9ea:	e7fe      	b.n	800a9ea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a9ec:	f000 fe3a 	bl	800b664 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a9f0:	4b38      	ldr	r3, [pc, #224]	; (800aad4 <xTaskResumeAll+0x114>)
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	3b01      	subs	r3, #1
 800a9f6:	4a37      	ldr	r2, [pc, #220]	; (800aad4 <xTaskResumeAll+0x114>)
 800a9f8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a9fa:	4b36      	ldr	r3, [pc, #216]	; (800aad4 <xTaskResumeAll+0x114>)
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d161      	bne.n	800aac6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800aa02:	4b35      	ldr	r3, [pc, #212]	; (800aad8 <xTaskResumeAll+0x118>)
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d05d      	beq.n	800aac6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aa0a:	e02e      	b.n	800aa6a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa0c:	4b33      	ldr	r3, [pc, #204]	; (800aadc <xTaskResumeAll+0x11c>)
 800aa0e:	68db      	ldr	r3, [r3, #12]
 800aa10:	68db      	ldr	r3, [r3, #12]
 800aa12:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	3318      	adds	r3, #24
 800aa18:	4618      	mov	r0, r3
 800aa1a:	f7ff fd45 	bl	800a4a8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	3304      	adds	r3, #4
 800aa22:	4618      	mov	r0, r3
 800aa24:	f7ff fd40 	bl	800a4a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa2c:	2201      	movs	r2, #1
 800aa2e:	409a      	lsls	r2, r3
 800aa30:	4b2b      	ldr	r3, [pc, #172]	; (800aae0 <xTaskResumeAll+0x120>)
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	4313      	orrs	r3, r2
 800aa36:	4a2a      	ldr	r2, [pc, #168]	; (800aae0 <xTaskResumeAll+0x120>)
 800aa38:	6013      	str	r3, [r2, #0]
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa3e:	4613      	mov	r3, r2
 800aa40:	009b      	lsls	r3, r3, #2
 800aa42:	4413      	add	r3, r2
 800aa44:	009b      	lsls	r3, r3, #2
 800aa46:	4a27      	ldr	r2, [pc, #156]	; (800aae4 <xTaskResumeAll+0x124>)
 800aa48:	441a      	add	r2, r3
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	3304      	adds	r3, #4
 800aa4e:	4619      	mov	r1, r3
 800aa50:	4610      	mov	r0, r2
 800aa52:	f7ff fccc 	bl	800a3ee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa5a:	4b23      	ldr	r3, [pc, #140]	; (800aae8 <xTaskResumeAll+0x128>)
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa60:	429a      	cmp	r2, r3
 800aa62:	d302      	bcc.n	800aa6a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800aa64:	4b21      	ldr	r3, [pc, #132]	; (800aaec <xTaskResumeAll+0x12c>)
 800aa66:	2201      	movs	r2, #1
 800aa68:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aa6a:	4b1c      	ldr	r3, [pc, #112]	; (800aadc <xTaskResumeAll+0x11c>)
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d1cc      	bne.n	800aa0c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d001      	beq.n	800aa7c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800aa78:	f000 fa3c 	bl	800aef4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800aa7c:	4b1c      	ldr	r3, [pc, #112]	; (800aaf0 <xTaskResumeAll+0x130>)
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d010      	beq.n	800aaaa <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800aa88:	f000 f858 	bl	800ab3c <xTaskIncrementTick>
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d002      	beq.n	800aa98 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800aa92:	4b16      	ldr	r3, [pc, #88]	; (800aaec <xTaskResumeAll+0x12c>)
 800aa94:	2201      	movs	r2, #1
 800aa96:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	3b01      	subs	r3, #1
 800aa9c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d1f1      	bne.n	800aa88 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800aaa4:	4b12      	ldr	r3, [pc, #72]	; (800aaf0 <xTaskResumeAll+0x130>)
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800aaaa:	4b10      	ldr	r3, [pc, #64]	; (800aaec <xTaskResumeAll+0x12c>)
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d009      	beq.n	800aac6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800aab2:	2301      	movs	r3, #1
 800aab4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800aab6:	4b0f      	ldr	r3, [pc, #60]	; (800aaf4 <xTaskResumeAll+0x134>)
 800aab8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aabc:	601a      	str	r2, [r3, #0]
 800aabe:	f3bf 8f4f 	dsb	sy
 800aac2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aac6:	f000 fdfd 	bl	800b6c4 <vPortExitCritical>

	return xAlreadyYielded;
 800aaca:	68bb      	ldr	r3, [r7, #8]
}
 800aacc:	4618      	mov	r0, r3
 800aace:	3710      	adds	r7, #16
 800aad0:	46bd      	mov	sp, r7
 800aad2:	bd80      	pop	{r7, pc}
 800aad4:	20000604 	.word	0x20000604
 800aad8:	200005dc 	.word	0x200005dc
 800aadc:	2000059c 	.word	0x2000059c
 800aae0:	200005e4 	.word	0x200005e4
 800aae4:	200004e0 	.word	0x200004e0
 800aae8:	200004dc 	.word	0x200004dc
 800aaec:	200005f0 	.word	0x200005f0
 800aaf0:	200005ec 	.word	0x200005ec
 800aaf4:	e000ed04 	.word	0xe000ed04

0800aaf8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800aaf8:	b480      	push	{r7}
 800aafa:	b083      	sub	sp, #12
 800aafc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800aafe:	4b05      	ldr	r3, [pc, #20]	; (800ab14 <xTaskGetTickCount+0x1c>)
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ab04:	687b      	ldr	r3, [r7, #4]
}
 800ab06:	4618      	mov	r0, r3
 800ab08:	370c      	adds	r7, #12
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab10:	4770      	bx	lr
 800ab12:	bf00      	nop
 800ab14:	200005e0 	.word	0x200005e0

0800ab18 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b082      	sub	sp, #8
 800ab1c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ab1e:	f000 fe83 	bl	800b828 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800ab22:	2300      	movs	r3, #0
 800ab24:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800ab26:	4b04      	ldr	r3, [pc, #16]	; (800ab38 <xTaskGetTickCountFromISR+0x20>)
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ab2c:	683b      	ldr	r3, [r7, #0]
}
 800ab2e:	4618      	mov	r0, r3
 800ab30:	3708      	adds	r7, #8
 800ab32:	46bd      	mov	sp, r7
 800ab34:	bd80      	pop	{r7, pc}
 800ab36:	bf00      	nop
 800ab38:	200005e0 	.word	0x200005e0

0800ab3c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b086      	sub	sp, #24
 800ab40:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ab42:	2300      	movs	r3, #0
 800ab44:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ab46:	4b4e      	ldr	r3, [pc, #312]	; (800ac80 <xTaskIncrementTick+0x144>)
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	f040 808e 	bne.w	800ac6c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ab50:	4b4c      	ldr	r3, [pc, #304]	; (800ac84 <xTaskIncrementTick+0x148>)
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	3301      	adds	r3, #1
 800ab56:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ab58:	4a4a      	ldr	r2, [pc, #296]	; (800ac84 <xTaskIncrementTick+0x148>)
 800ab5a:	693b      	ldr	r3, [r7, #16]
 800ab5c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ab5e:	693b      	ldr	r3, [r7, #16]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d120      	bne.n	800aba6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ab64:	4b48      	ldr	r3, [pc, #288]	; (800ac88 <xTaskIncrementTick+0x14c>)
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d00a      	beq.n	800ab84 <xTaskIncrementTick+0x48>
	__asm volatile
 800ab6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab72:	f383 8811 	msr	BASEPRI, r3
 800ab76:	f3bf 8f6f 	isb	sy
 800ab7a:	f3bf 8f4f 	dsb	sy
 800ab7e:	603b      	str	r3, [r7, #0]
}
 800ab80:	bf00      	nop
 800ab82:	e7fe      	b.n	800ab82 <xTaskIncrementTick+0x46>
 800ab84:	4b40      	ldr	r3, [pc, #256]	; (800ac88 <xTaskIncrementTick+0x14c>)
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	60fb      	str	r3, [r7, #12]
 800ab8a:	4b40      	ldr	r3, [pc, #256]	; (800ac8c <xTaskIncrementTick+0x150>)
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	4a3e      	ldr	r2, [pc, #248]	; (800ac88 <xTaskIncrementTick+0x14c>)
 800ab90:	6013      	str	r3, [r2, #0]
 800ab92:	4a3e      	ldr	r2, [pc, #248]	; (800ac8c <xTaskIncrementTick+0x150>)
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	6013      	str	r3, [r2, #0]
 800ab98:	4b3d      	ldr	r3, [pc, #244]	; (800ac90 <xTaskIncrementTick+0x154>)
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	3301      	adds	r3, #1
 800ab9e:	4a3c      	ldr	r2, [pc, #240]	; (800ac90 <xTaskIncrementTick+0x154>)
 800aba0:	6013      	str	r3, [r2, #0]
 800aba2:	f000 f9a7 	bl	800aef4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800aba6:	4b3b      	ldr	r3, [pc, #236]	; (800ac94 <xTaskIncrementTick+0x158>)
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	693a      	ldr	r2, [r7, #16]
 800abac:	429a      	cmp	r2, r3
 800abae:	d348      	bcc.n	800ac42 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800abb0:	4b35      	ldr	r3, [pc, #212]	; (800ac88 <xTaskIncrementTick+0x14c>)
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d104      	bne.n	800abc4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800abba:	4b36      	ldr	r3, [pc, #216]	; (800ac94 <xTaskIncrementTick+0x158>)
 800abbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800abc0:	601a      	str	r2, [r3, #0]
					break;
 800abc2:	e03e      	b.n	800ac42 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800abc4:	4b30      	ldr	r3, [pc, #192]	; (800ac88 <xTaskIncrementTick+0x14c>)
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	68db      	ldr	r3, [r3, #12]
 800abca:	68db      	ldr	r3, [r3, #12]
 800abcc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800abce:	68bb      	ldr	r3, [r7, #8]
 800abd0:	685b      	ldr	r3, [r3, #4]
 800abd2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800abd4:	693a      	ldr	r2, [r7, #16]
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	429a      	cmp	r2, r3
 800abda:	d203      	bcs.n	800abe4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800abdc:	4a2d      	ldr	r2, [pc, #180]	; (800ac94 <xTaskIncrementTick+0x158>)
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800abe2:	e02e      	b.n	800ac42 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800abe4:	68bb      	ldr	r3, [r7, #8]
 800abe6:	3304      	adds	r3, #4
 800abe8:	4618      	mov	r0, r3
 800abea:	f7ff fc5d 	bl	800a4a8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800abee:	68bb      	ldr	r3, [r7, #8]
 800abf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d004      	beq.n	800ac00 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800abf6:	68bb      	ldr	r3, [r7, #8]
 800abf8:	3318      	adds	r3, #24
 800abfa:	4618      	mov	r0, r3
 800abfc:	f7ff fc54 	bl	800a4a8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ac00:	68bb      	ldr	r3, [r7, #8]
 800ac02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac04:	2201      	movs	r2, #1
 800ac06:	409a      	lsls	r2, r3
 800ac08:	4b23      	ldr	r3, [pc, #140]	; (800ac98 <xTaskIncrementTick+0x15c>)
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	4313      	orrs	r3, r2
 800ac0e:	4a22      	ldr	r2, [pc, #136]	; (800ac98 <xTaskIncrementTick+0x15c>)
 800ac10:	6013      	str	r3, [r2, #0]
 800ac12:	68bb      	ldr	r3, [r7, #8]
 800ac14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac16:	4613      	mov	r3, r2
 800ac18:	009b      	lsls	r3, r3, #2
 800ac1a:	4413      	add	r3, r2
 800ac1c:	009b      	lsls	r3, r3, #2
 800ac1e:	4a1f      	ldr	r2, [pc, #124]	; (800ac9c <xTaskIncrementTick+0x160>)
 800ac20:	441a      	add	r2, r3
 800ac22:	68bb      	ldr	r3, [r7, #8]
 800ac24:	3304      	adds	r3, #4
 800ac26:	4619      	mov	r1, r3
 800ac28:	4610      	mov	r0, r2
 800ac2a:	f7ff fbe0 	bl	800a3ee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ac2e:	68bb      	ldr	r3, [r7, #8]
 800ac30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac32:	4b1b      	ldr	r3, [pc, #108]	; (800aca0 <xTaskIncrementTick+0x164>)
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac38:	429a      	cmp	r2, r3
 800ac3a:	d3b9      	bcc.n	800abb0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ac3c:	2301      	movs	r3, #1
 800ac3e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ac40:	e7b6      	b.n	800abb0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ac42:	4b17      	ldr	r3, [pc, #92]	; (800aca0 <xTaskIncrementTick+0x164>)
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac48:	4914      	ldr	r1, [pc, #80]	; (800ac9c <xTaskIncrementTick+0x160>)
 800ac4a:	4613      	mov	r3, r2
 800ac4c:	009b      	lsls	r3, r3, #2
 800ac4e:	4413      	add	r3, r2
 800ac50:	009b      	lsls	r3, r3, #2
 800ac52:	440b      	add	r3, r1
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	2b01      	cmp	r3, #1
 800ac58:	d901      	bls.n	800ac5e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800ac5a:	2301      	movs	r3, #1
 800ac5c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ac5e:	4b11      	ldr	r3, [pc, #68]	; (800aca4 <xTaskIncrementTick+0x168>)
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d007      	beq.n	800ac76 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800ac66:	2301      	movs	r3, #1
 800ac68:	617b      	str	r3, [r7, #20]
 800ac6a:	e004      	b.n	800ac76 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ac6c:	4b0e      	ldr	r3, [pc, #56]	; (800aca8 <xTaskIncrementTick+0x16c>)
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	3301      	adds	r3, #1
 800ac72:	4a0d      	ldr	r2, [pc, #52]	; (800aca8 <xTaskIncrementTick+0x16c>)
 800ac74:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ac76:	697b      	ldr	r3, [r7, #20]
}
 800ac78:	4618      	mov	r0, r3
 800ac7a:	3718      	adds	r7, #24
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	bd80      	pop	{r7, pc}
 800ac80:	20000604 	.word	0x20000604
 800ac84:	200005e0 	.word	0x200005e0
 800ac88:	20000594 	.word	0x20000594
 800ac8c:	20000598 	.word	0x20000598
 800ac90:	200005f4 	.word	0x200005f4
 800ac94:	200005fc 	.word	0x200005fc
 800ac98:	200005e4 	.word	0x200005e4
 800ac9c:	200004e0 	.word	0x200004e0
 800aca0:	200004dc 	.word	0x200004dc
 800aca4:	200005f0 	.word	0x200005f0
 800aca8:	200005ec 	.word	0x200005ec

0800acac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b088      	sub	sp, #32
 800acb0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800acb2:	4b3c      	ldr	r3, [pc, #240]	; (800ada4 <vTaskSwitchContext+0xf8>)
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d003      	beq.n	800acc2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800acba:	4b3b      	ldr	r3, [pc, #236]	; (800ada8 <vTaskSwitchContext+0xfc>)
 800acbc:	2201      	movs	r2, #1
 800acbe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800acc0:	e06b      	b.n	800ad9a <vTaskSwitchContext+0xee>
		xYieldPending = pdFALSE;
 800acc2:	4b39      	ldr	r3, [pc, #228]	; (800ada8 <vTaskSwitchContext+0xfc>)
 800acc4:	2200      	movs	r2, #0
 800acc6:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800acc8:	4b38      	ldr	r3, [pc, #224]	; (800adac <vTaskSwitchContext+0x100>)
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acce:	61fb      	str	r3, [r7, #28]
 800acd0:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800acd4:	61bb      	str	r3, [r7, #24]
 800acd6:	69fb      	ldr	r3, [r7, #28]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	69ba      	ldr	r2, [r7, #24]
 800acdc:	429a      	cmp	r2, r3
 800acde:	d111      	bne.n	800ad04 <vTaskSwitchContext+0x58>
 800ace0:	69fb      	ldr	r3, [r7, #28]
 800ace2:	3304      	adds	r3, #4
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	69ba      	ldr	r2, [r7, #24]
 800ace8:	429a      	cmp	r2, r3
 800acea:	d10b      	bne.n	800ad04 <vTaskSwitchContext+0x58>
 800acec:	69fb      	ldr	r3, [r7, #28]
 800acee:	3308      	adds	r3, #8
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	69ba      	ldr	r2, [r7, #24]
 800acf4:	429a      	cmp	r2, r3
 800acf6:	d105      	bne.n	800ad04 <vTaskSwitchContext+0x58>
 800acf8:	69fb      	ldr	r3, [r7, #28]
 800acfa:	330c      	adds	r3, #12
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	69ba      	ldr	r2, [r7, #24]
 800ad00:	429a      	cmp	r2, r3
 800ad02:	d008      	beq.n	800ad16 <vTaskSwitchContext+0x6a>
 800ad04:	4b29      	ldr	r3, [pc, #164]	; (800adac <vTaskSwitchContext+0x100>)
 800ad06:	681a      	ldr	r2, [r3, #0]
 800ad08:	4b28      	ldr	r3, [pc, #160]	; (800adac <vTaskSwitchContext+0x100>)
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	3334      	adds	r3, #52	; 0x34
 800ad0e:	4619      	mov	r1, r3
 800ad10:	4610      	mov	r0, r2
 800ad12:	f7f5 fd35 	bl	8000780 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad16:	4b26      	ldr	r3, [pc, #152]	; (800adb0 <vTaskSwitchContext+0x104>)
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	fab3 f383 	clz	r3, r3
 800ad22:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800ad24:	7afb      	ldrb	r3, [r7, #11]
 800ad26:	f1c3 031f 	rsb	r3, r3, #31
 800ad2a:	617b      	str	r3, [r7, #20]
 800ad2c:	4921      	ldr	r1, [pc, #132]	; (800adb4 <vTaskSwitchContext+0x108>)
 800ad2e:	697a      	ldr	r2, [r7, #20]
 800ad30:	4613      	mov	r3, r2
 800ad32:	009b      	lsls	r3, r3, #2
 800ad34:	4413      	add	r3, r2
 800ad36:	009b      	lsls	r3, r3, #2
 800ad38:	440b      	add	r3, r1
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d10a      	bne.n	800ad56 <vTaskSwitchContext+0xaa>
	__asm volatile
 800ad40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad44:	f383 8811 	msr	BASEPRI, r3
 800ad48:	f3bf 8f6f 	isb	sy
 800ad4c:	f3bf 8f4f 	dsb	sy
 800ad50:	607b      	str	r3, [r7, #4]
}
 800ad52:	bf00      	nop
 800ad54:	e7fe      	b.n	800ad54 <vTaskSwitchContext+0xa8>
 800ad56:	697a      	ldr	r2, [r7, #20]
 800ad58:	4613      	mov	r3, r2
 800ad5a:	009b      	lsls	r3, r3, #2
 800ad5c:	4413      	add	r3, r2
 800ad5e:	009b      	lsls	r3, r3, #2
 800ad60:	4a14      	ldr	r2, [pc, #80]	; (800adb4 <vTaskSwitchContext+0x108>)
 800ad62:	4413      	add	r3, r2
 800ad64:	613b      	str	r3, [r7, #16]
 800ad66:	693b      	ldr	r3, [r7, #16]
 800ad68:	685b      	ldr	r3, [r3, #4]
 800ad6a:	685a      	ldr	r2, [r3, #4]
 800ad6c:	693b      	ldr	r3, [r7, #16]
 800ad6e:	605a      	str	r2, [r3, #4]
 800ad70:	693b      	ldr	r3, [r7, #16]
 800ad72:	685a      	ldr	r2, [r3, #4]
 800ad74:	693b      	ldr	r3, [r7, #16]
 800ad76:	3308      	adds	r3, #8
 800ad78:	429a      	cmp	r2, r3
 800ad7a:	d104      	bne.n	800ad86 <vTaskSwitchContext+0xda>
 800ad7c:	693b      	ldr	r3, [r7, #16]
 800ad7e:	685b      	ldr	r3, [r3, #4]
 800ad80:	685a      	ldr	r2, [r3, #4]
 800ad82:	693b      	ldr	r3, [r7, #16]
 800ad84:	605a      	str	r2, [r3, #4]
 800ad86:	693b      	ldr	r3, [r7, #16]
 800ad88:	685b      	ldr	r3, [r3, #4]
 800ad8a:	68db      	ldr	r3, [r3, #12]
 800ad8c:	4a07      	ldr	r2, [pc, #28]	; (800adac <vTaskSwitchContext+0x100>)
 800ad8e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ad90:	4b06      	ldr	r3, [pc, #24]	; (800adac <vTaskSwitchContext+0x100>)
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	334c      	adds	r3, #76	; 0x4c
 800ad96:	4a08      	ldr	r2, [pc, #32]	; (800adb8 <vTaskSwitchContext+0x10c>)
 800ad98:	6013      	str	r3, [r2, #0]
}
 800ad9a:	bf00      	nop
 800ad9c:	3720      	adds	r7, #32
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bd80      	pop	{r7, pc}
 800ada2:	bf00      	nop
 800ada4:	20000604 	.word	0x20000604
 800ada8:	200005f0 	.word	0x200005f0
 800adac:	200004dc 	.word	0x200004dc
 800adb0:	200005e4 	.word	0x200005e4
 800adb4:	200004e0 	.word	0x200004e0
 800adb8:	2000014c 	.word	0x2000014c

0800adbc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b082      	sub	sp, #8
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800adc4:	f000 f852 	bl	800ae6c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800adc8:	4b06      	ldr	r3, [pc, #24]	; (800ade4 <prvIdleTask+0x28>)
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	2b01      	cmp	r3, #1
 800adce:	d9f9      	bls.n	800adc4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800add0:	4b05      	ldr	r3, [pc, #20]	; (800ade8 <prvIdleTask+0x2c>)
 800add2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800add6:	601a      	str	r2, [r3, #0]
 800add8:	f3bf 8f4f 	dsb	sy
 800addc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ade0:	e7f0      	b.n	800adc4 <prvIdleTask+0x8>
 800ade2:	bf00      	nop
 800ade4:	200004e0 	.word	0x200004e0
 800ade8:	e000ed04 	.word	0xe000ed04

0800adec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b082      	sub	sp, #8
 800adf0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800adf2:	2300      	movs	r3, #0
 800adf4:	607b      	str	r3, [r7, #4]
 800adf6:	e00c      	b.n	800ae12 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800adf8:	687a      	ldr	r2, [r7, #4]
 800adfa:	4613      	mov	r3, r2
 800adfc:	009b      	lsls	r3, r3, #2
 800adfe:	4413      	add	r3, r2
 800ae00:	009b      	lsls	r3, r3, #2
 800ae02:	4a12      	ldr	r2, [pc, #72]	; (800ae4c <prvInitialiseTaskLists+0x60>)
 800ae04:	4413      	add	r3, r2
 800ae06:	4618      	mov	r0, r3
 800ae08:	f7ff fac4 	bl	800a394 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	3301      	adds	r3, #1
 800ae10:	607b      	str	r3, [r7, #4]
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	2b06      	cmp	r3, #6
 800ae16:	d9ef      	bls.n	800adf8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ae18:	480d      	ldr	r0, [pc, #52]	; (800ae50 <prvInitialiseTaskLists+0x64>)
 800ae1a:	f7ff fabb 	bl	800a394 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ae1e:	480d      	ldr	r0, [pc, #52]	; (800ae54 <prvInitialiseTaskLists+0x68>)
 800ae20:	f7ff fab8 	bl	800a394 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ae24:	480c      	ldr	r0, [pc, #48]	; (800ae58 <prvInitialiseTaskLists+0x6c>)
 800ae26:	f7ff fab5 	bl	800a394 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ae2a:	480c      	ldr	r0, [pc, #48]	; (800ae5c <prvInitialiseTaskLists+0x70>)
 800ae2c:	f7ff fab2 	bl	800a394 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ae30:	480b      	ldr	r0, [pc, #44]	; (800ae60 <prvInitialiseTaskLists+0x74>)
 800ae32:	f7ff faaf 	bl	800a394 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ae36:	4b0b      	ldr	r3, [pc, #44]	; (800ae64 <prvInitialiseTaskLists+0x78>)
 800ae38:	4a05      	ldr	r2, [pc, #20]	; (800ae50 <prvInitialiseTaskLists+0x64>)
 800ae3a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ae3c:	4b0a      	ldr	r3, [pc, #40]	; (800ae68 <prvInitialiseTaskLists+0x7c>)
 800ae3e:	4a05      	ldr	r2, [pc, #20]	; (800ae54 <prvInitialiseTaskLists+0x68>)
 800ae40:	601a      	str	r2, [r3, #0]
}
 800ae42:	bf00      	nop
 800ae44:	3708      	adds	r7, #8
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bd80      	pop	{r7, pc}
 800ae4a:	bf00      	nop
 800ae4c:	200004e0 	.word	0x200004e0
 800ae50:	2000056c 	.word	0x2000056c
 800ae54:	20000580 	.word	0x20000580
 800ae58:	2000059c 	.word	0x2000059c
 800ae5c:	200005b0 	.word	0x200005b0
 800ae60:	200005c8 	.word	0x200005c8
 800ae64:	20000594 	.word	0x20000594
 800ae68:	20000598 	.word	0x20000598

0800ae6c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b082      	sub	sp, #8
 800ae70:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ae72:	e019      	b.n	800aea8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ae74:	f000 fbf6 	bl	800b664 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae78:	4b10      	ldr	r3, [pc, #64]	; (800aebc <prvCheckTasksWaitingTermination+0x50>)
 800ae7a:	68db      	ldr	r3, [r3, #12]
 800ae7c:	68db      	ldr	r3, [r3, #12]
 800ae7e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	3304      	adds	r3, #4
 800ae84:	4618      	mov	r0, r3
 800ae86:	f7ff fb0f 	bl	800a4a8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ae8a:	4b0d      	ldr	r3, [pc, #52]	; (800aec0 <prvCheckTasksWaitingTermination+0x54>)
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	3b01      	subs	r3, #1
 800ae90:	4a0b      	ldr	r2, [pc, #44]	; (800aec0 <prvCheckTasksWaitingTermination+0x54>)
 800ae92:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ae94:	4b0b      	ldr	r3, [pc, #44]	; (800aec4 <prvCheckTasksWaitingTermination+0x58>)
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	3b01      	subs	r3, #1
 800ae9a:	4a0a      	ldr	r2, [pc, #40]	; (800aec4 <prvCheckTasksWaitingTermination+0x58>)
 800ae9c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ae9e:	f000 fc11 	bl	800b6c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800aea2:	6878      	ldr	r0, [r7, #4]
 800aea4:	f000 f810 	bl	800aec8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aea8:	4b06      	ldr	r3, [pc, #24]	; (800aec4 <prvCheckTasksWaitingTermination+0x58>)
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d1e1      	bne.n	800ae74 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800aeb0:	bf00      	nop
 800aeb2:	bf00      	nop
 800aeb4:	3708      	adds	r7, #8
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	bd80      	pop	{r7, pc}
 800aeba:	bf00      	nop
 800aebc:	200005b0 	.word	0x200005b0
 800aec0:	200005dc 	.word	0x200005dc
 800aec4:	200005c4 	.word	0x200005c4

0800aec8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b082      	sub	sp, #8
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	334c      	adds	r3, #76	; 0x4c
 800aed4:	4618      	mov	r0, r3
 800aed6:	f004 fc47 	bl	800f768 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aede:	4618      	mov	r0, r3
 800aee0:	f000 fdb2 	bl	800ba48 <vPortFree>
			vPortFree( pxTCB );
 800aee4:	6878      	ldr	r0, [r7, #4]
 800aee6:	f000 fdaf 	bl	800ba48 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800aeea:	bf00      	nop
 800aeec:	3708      	adds	r7, #8
 800aeee:	46bd      	mov	sp, r7
 800aef0:	bd80      	pop	{r7, pc}
	...

0800aef4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800aef4:	b480      	push	{r7}
 800aef6:	b083      	sub	sp, #12
 800aef8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aefa:	4b0c      	ldr	r3, [pc, #48]	; (800af2c <prvResetNextTaskUnblockTime+0x38>)
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d104      	bne.n	800af0e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800af04:	4b0a      	ldr	r3, [pc, #40]	; (800af30 <prvResetNextTaskUnblockTime+0x3c>)
 800af06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800af0a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800af0c:	e008      	b.n	800af20 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af0e:	4b07      	ldr	r3, [pc, #28]	; (800af2c <prvResetNextTaskUnblockTime+0x38>)
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	68db      	ldr	r3, [r3, #12]
 800af14:	68db      	ldr	r3, [r3, #12]
 800af16:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	685b      	ldr	r3, [r3, #4]
 800af1c:	4a04      	ldr	r2, [pc, #16]	; (800af30 <prvResetNextTaskUnblockTime+0x3c>)
 800af1e:	6013      	str	r3, [r2, #0]
}
 800af20:	bf00      	nop
 800af22:	370c      	adds	r7, #12
 800af24:	46bd      	mov	sp, r7
 800af26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2a:	4770      	bx	lr
 800af2c:	20000594 	.word	0x20000594
 800af30:	200005fc 	.word	0x200005fc

0800af34 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800af34:	b580      	push	{r7, lr}
 800af36:	b086      	sub	sp, #24
 800af38:	af00      	add	r7, sp, #0
 800af3a:	60f8      	str	r0, [r7, #12]
 800af3c:	60b9      	str	r1, [r7, #8]
 800af3e:	607a      	str	r2, [r7, #4]
 800af40:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800af42:	f000 fb8f 	bl	800b664 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800af46:	4b29      	ldr	r3, [pc, #164]	; (800afec <xTaskNotifyWait+0xb8>)
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800af4e:	b2db      	uxtb	r3, r3
 800af50:	2b02      	cmp	r3, #2
 800af52:	d01c      	beq.n	800af8e <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800af54:	4b25      	ldr	r3, [pc, #148]	; (800afec <xTaskNotifyWait+0xb8>)
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 800af5c:	68fa      	ldr	r2, [r7, #12]
 800af5e:	43d2      	mvns	r2, r2
 800af60:	400a      	ands	r2, r1
 800af62:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800af66:	4b21      	ldr	r3, [pc, #132]	; (800afec <xTaskNotifyWait+0xb8>)
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	2201      	movs	r2, #1
 800af6c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

				if( xTicksToWait > ( TickType_t ) 0 )
 800af70:	683b      	ldr	r3, [r7, #0]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d00b      	beq.n	800af8e <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800af76:	2101      	movs	r1, #1
 800af78:	6838      	ldr	r0, [r7, #0]
 800af7a:	f000 f9dd 	bl	800b338 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800af7e:	4b1c      	ldr	r3, [pc, #112]	; (800aff0 <xTaskNotifyWait+0xbc>)
 800af80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af84:	601a      	str	r2, [r3, #0]
 800af86:	f3bf 8f4f 	dsb	sy
 800af8a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800af8e:	f000 fb99 	bl	800b6c4 <vPortExitCritical>

		taskENTER_CRITICAL();
 800af92:	f000 fb67 	bl	800b664 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d005      	beq.n	800afa8 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800af9c:	4b13      	ldr	r3, [pc, #76]	; (800afec <xTaskNotifyWait+0xb8>)
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800afa8:	4b10      	ldr	r3, [pc, #64]	; (800afec <xTaskNotifyWait+0xb8>)
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800afb0:	b2db      	uxtb	r3, r3
 800afb2:	2b02      	cmp	r3, #2
 800afb4:	d002      	beq.n	800afbc <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800afb6:	2300      	movs	r3, #0
 800afb8:	617b      	str	r3, [r7, #20]
 800afba:	e00a      	b.n	800afd2 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800afbc:	4b0b      	ldr	r3, [pc, #44]	; (800afec <xTaskNotifyWait+0xb8>)
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 800afc4:	68ba      	ldr	r2, [r7, #8]
 800afc6:	43d2      	mvns	r2, r2
 800afc8:	400a      	ands	r2, r1
 800afca:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
				xReturn = pdTRUE;
 800afce:	2301      	movs	r3, #1
 800afd0:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800afd2:	4b06      	ldr	r3, [pc, #24]	; (800afec <xTaskNotifyWait+0xb8>)
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	2200      	movs	r2, #0
 800afd8:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
		}
		taskEXIT_CRITICAL();
 800afdc:	f000 fb72 	bl	800b6c4 <vPortExitCritical>

		return xReturn;
 800afe0:	697b      	ldr	r3, [r7, #20]
	}
 800afe2:	4618      	mov	r0, r3
 800afe4:	3718      	adds	r7, #24
 800afe6:	46bd      	mov	sp, r7
 800afe8:	bd80      	pop	{r7, pc}
 800afea:	bf00      	nop
 800afec:	200004dc 	.word	0x200004dc
 800aff0:	e000ed04 	.word	0xe000ed04

0800aff4 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b08a      	sub	sp, #40	; 0x28
 800aff8:	af00      	add	r7, sp, #0
 800affa:	60f8      	str	r0, [r7, #12]
 800affc:	60b9      	str	r1, [r7, #8]
 800affe:	603b      	str	r3, [r7, #0]
 800b000:	4613      	mov	r3, r2
 800b002:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800b004:	2301      	movs	r3, #1
 800b006:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d10a      	bne.n	800b024 <xTaskGenericNotify+0x30>
	__asm volatile
 800b00e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b012:	f383 8811 	msr	BASEPRI, r3
 800b016:	f3bf 8f6f 	isb	sy
 800b01a:	f3bf 8f4f 	dsb	sy
 800b01e:	61bb      	str	r3, [r7, #24]
}
 800b020:	bf00      	nop
 800b022:	e7fe      	b.n	800b022 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800b028:	f000 fb1c 	bl	800b664 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800b02c:	683b      	ldr	r3, [r7, #0]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d004      	beq.n	800b03c <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800b032:	6a3b      	ldr	r3, [r7, #32]
 800b034:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800b03c:	6a3b      	ldr	r3, [r7, #32]
 800b03e:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800b042:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800b044:	6a3b      	ldr	r3, [r7, #32]
 800b046:	2202      	movs	r2, #2
 800b048:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

			switch( eAction )
 800b04c:	79fb      	ldrb	r3, [r7, #7]
 800b04e:	2b04      	cmp	r3, #4
 800b050:	d82d      	bhi.n	800b0ae <xTaskGenericNotify+0xba>
 800b052:	a201      	add	r2, pc, #4	; (adr r2, 800b058 <xTaskGenericNotify+0x64>)
 800b054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b058:	0800b0d1 	.word	0x0800b0d1
 800b05c:	0800b06d 	.word	0x0800b06d
 800b060:	0800b07f 	.word	0x0800b07f
 800b064:	0800b08f 	.word	0x0800b08f
 800b068:	0800b099 	.word	0x0800b099
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800b06c:	6a3b      	ldr	r3, [r7, #32]
 800b06e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800b072:	68bb      	ldr	r3, [r7, #8]
 800b074:	431a      	orrs	r2, r3
 800b076:	6a3b      	ldr	r3, [r7, #32]
 800b078:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800b07c:	e02b      	b.n	800b0d6 <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800b07e:	6a3b      	ldr	r3, [r7, #32]
 800b080:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b084:	1c5a      	adds	r2, r3, #1
 800b086:	6a3b      	ldr	r3, [r7, #32]
 800b088:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800b08c:	e023      	b.n	800b0d6 <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800b08e:	6a3b      	ldr	r3, [r7, #32]
 800b090:	68ba      	ldr	r2, [r7, #8]
 800b092:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800b096:	e01e      	b.n	800b0d6 <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800b098:	7ffb      	ldrb	r3, [r7, #31]
 800b09a:	2b02      	cmp	r3, #2
 800b09c:	d004      	beq.n	800b0a8 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800b09e:	6a3b      	ldr	r3, [r7, #32]
 800b0a0:	68ba      	ldr	r2, [r7, #8]
 800b0a2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800b0a6:	e016      	b.n	800b0d6 <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800b0ac:	e013      	b.n	800b0d6 <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800b0ae:	6a3b      	ldr	r3, [r7, #32]
 800b0b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b0b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b0b8:	d00c      	beq.n	800b0d4 <xTaskGenericNotify+0xe0>
	__asm volatile
 800b0ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0be:	f383 8811 	msr	BASEPRI, r3
 800b0c2:	f3bf 8f6f 	isb	sy
 800b0c6:	f3bf 8f4f 	dsb	sy
 800b0ca:	617b      	str	r3, [r7, #20]
}
 800b0cc:	bf00      	nop
 800b0ce:	e7fe      	b.n	800b0ce <xTaskGenericNotify+0xda>
					break;
 800b0d0:	bf00      	nop
 800b0d2:	e000      	b.n	800b0d6 <xTaskGenericNotify+0xe2>

					break;
 800b0d4:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800b0d6:	7ffb      	ldrb	r3, [r7, #31]
 800b0d8:	2b01      	cmp	r3, #1
 800b0da:	d139      	bne.n	800b150 <xTaskGenericNotify+0x15c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b0dc:	6a3b      	ldr	r3, [r7, #32]
 800b0de:	3304      	adds	r3, #4
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	f7ff f9e1 	bl	800a4a8 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800b0e6:	6a3b      	ldr	r3, [r7, #32]
 800b0e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0ea:	2201      	movs	r2, #1
 800b0ec:	409a      	lsls	r2, r3
 800b0ee:	4b1c      	ldr	r3, [pc, #112]	; (800b160 <xTaskGenericNotify+0x16c>)
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	4313      	orrs	r3, r2
 800b0f4:	4a1a      	ldr	r2, [pc, #104]	; (800b160 <xTaskGenericNotify+0x16c>)
 800b0f6:	6013      	str	r3, [r2, #0]
 800b0f8:	6a3b      	ldr	r3, [r7, #32]
 800b0fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0fc:	4613      	mov	r3, r2
 800b0fe:	009b      	lsls	r3, r3, #2
 800b100:	4413      	add	r3, r2
 800b102:	009b      	lsls	r3, r3, #2
 800b104:	4a17      	ldr	r2, [pc, #92]	; (800b164 <xTaskGenericNotify+0x170>)
 800b106:	441a      	add	r2, r3
 800b108:	6a3b      	ldr	r3, [r7, #32]
 800b10a:	3304      	adds	r3, #4
 800b10c:	4619      	mov	r1, r3
 800b10e:	4610      	mov	r0, r2
 800b110:	f7ff f96d 	bl	800a3ee <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800b114:	6a3b      	ldr	r3, [r7, #32]
 800b116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d00a      	beq.n	800b132 <xTaskGenericNotify+0x13e>
	__asm volatile
 800b11c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b120:	f383 8811 	msr	BASEPRI, r3
 800b124:	f3bf 8f6f 	isb	sy
 800b128:	f3bf 8f4f 	dsb	sy
 800b12c:	613b      	str	r3, [r7, #16]
}
 800b12e:	bf00      	nop
 800b130:	e7fe      	b.n	800b130 <xTaskGenericNotify+0x13c>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b132:	6a3b      	ldr	r3, [r7, #32]
 800b134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b136:	4b0c      	ldr	r3, [pc, #48]	; (800b168 <xTaskGenericNotify+0x174>)
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b13c:	429a      	cmp	r2, r3
 800b13e:	d907      	bls.n	800b150 <xTaskGenericNotify+0x15c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800b140:	4b0a      	ldr	r3, [pc, #40]	; (800b16c <xTaskGenericNotify+0x178>)
 800b142:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b146:	601a      	str	r2, [r3, #0]
 800b148:	f3bf 8f4f 	dsb	sy
 800b14c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b150:	f000 fab8 	bl	800b6c4 <vPortExitCritical>

		return xReturn;
 800b154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800b156:	4618      	mov	r0, r3
 800b158:	3728      	adds	r7, #40	; 0x28
 800b15a:	46bd      	mov	sp, r7
 800b15c:	bd80      	pop	{r7, pc}
 800b15e:	bf00      	nop
 800b160:	200005e4 	.word	0x200005e4
 800b164:	200004e0 	.word	0x200004e0
 800b168:	200004dc 	.word	0x200004dc
 800b16c:	e000ed04 	.word	0xe000ed04

0800b170 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800b170:	b580      	push	{r7, lr}
 800b172:	b08e      	sub	sp, #56	; 0x38
 800b174:	af00      	add	r7, sp, #0
 800b176:	60f8      	str	r0, [r7, #12]
 800b178:	60b9      	str	r1, [r7, #8]
 800b17a:	603b      	str	r3, [r7, #0]
 800b17c:	4613      	mov	r3, r2
 800b17e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800b180:	2301      	movs	r3, #1
 800b182:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d10a      	bne.n	800b1a0 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800b18a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b18e:	f383 8811 	msr	BASEPRI, r3
 800b192:	f3bf 8f6f 	isb	sy
 800b196:	f3bf 8f4f 	dsb	sy
 800b19a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b19c:	bf00      	nop
 800b19e:	e7fe      	b.n	800b19e <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b1a0:	f000 fb42 	bl	800b828 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	633b      	str	r3, [r7, #48]	; 0x30

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b1a8:	f3ef 8211 	mrs	r2, BASEPRI
 800b1ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1b0:	f383 8811 	msr	BASEPRI, r3
 800b1b4:	f3bf 8f6f 	isb	sy
 800b1b8:	f3bf 8f4f 	dsb	sy
 800b1bc:	623a      	str	r2, [r7, #32]
 800b1be:	61fb      	str	r3, [r7, #28]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b1c0:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b1c2:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800b1c4:	683b      	ldr	r3, [r7, #0]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d004      	beq.n	800b1d4 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800b1ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1cc:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800b1d0:	683b      	ldr	r3, [r7, #0]
 800b1d2:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800b1d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1d6:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800b1da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800b1de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1e0:	2202      	movs	r2, #2
 800b1e2:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

			switch( eAction )
 800b1e6:	79fb      	ldrb	r3, [r7, #7]
 800b1e8:	2b04      	cmp	r3, #4
 800b1ea:	d82f      	bhi.n	800b24c <xTaskGenericNotifyFromISR+0xdc>
 800b1ec:	a201      	add	r2, pc, #4	; (adr r2, 800b1f4 <xTaskGenericNotifyFromISR+0x84>)
 800b1ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1f2:	bf00      	nop
 800b1f4:	0800b26f 	.word	0x0800b26f
 800b1f8:	0800b209 	.word	0x0800b209
 800b1fc:	0800b21b 	.word	0x0800b21b
 800b200:	0800b22b 	.word	0x0800b22b
 800b204:	0800b235 	.word	0x0800b235
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800b208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b20a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800b20e:	68bb      	ldr	r3, [r7, #8]
 800b210:	431a      	orrs	r2, r3
 800b212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b214:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800b218:	e02c      	b.n	800b274 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800b21a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b21c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b220:	1c5a      	adds	r2, r3, #1
 800b222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b224:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800b228:	e024      	b.n	800b274 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800b22a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b22c:	68ba      	ldr	r2, [r7, #8]
 800b22e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800b232:	e01f      	b.n	800b274 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800b234:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b238:	2b02      	cmp	r3, #2
 800b23a:	d004      	beq.n	800b246 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800b23c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b23e:	68ba      	ldr	r2, [r7, #8]
 800b240:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800b244:	e016      	b.n	800b274 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 800b246:	2300      	movs	r3, #0
 800b248:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800b24a:	e013      	b.n	800b274 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800b24c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b24e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b252:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b256:	d00c      	beq.n	800b272 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 800b258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b25c:	f383 8811 	msr	BASEPRI, r3
 800b260:	f3bf 8f6f 	isb	sy
 800b264:	f3bf 8f4f 	dsb	sy
 800b268:	61bb      	str	r3, [r7, #24]
}
 800b26a:	bf00      	nop
 800b26c:	e7fe      	b.n	800b26c <xTaskGenericNotifyFromISR+0xfc>
					break;
 800b26e:	bf00      	nop
 800b270:	e000      	b.n	800b274 <xTaskGenericNotifyFromISR+0x104>
					break;
 800b272:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800b274:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b278:	2b01      	cmp	r3, #1
 800b27a:	d145      	bne.n	800b308 <xTaskGenericNotifyFromISR+0x198>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800b27c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b27e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b280:	2b00      	cmp	r3, #0
 800b282:	d00a      	beq.n	800b29a <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 800b284:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b288:	f383 8811 	msr	BASEPRI, r3
 800b28c:	f3bf 8f6f 	isb	sy
 800b290:	f3bf 8f4f 	dsb	sy
 800b294:	617b      	str	r3, [r7, #20]
}
 800b296:	bf00      	nop
 800b298:	e7fe      	b.n	800b298 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b29a:	4b21      	ldr	r3, [pc, #132]	; (800b320 <xTaskGenericNotifyFromISR+0x1b0>)
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d11c      	bne.n	800b2dc <xTaskGenericNotifyFromISR+0x16c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b2a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2a4:	3304      	adds	r3, #4
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	f7ff f8fe 	bl	800a4a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b2ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2b0:	2201      	movs	r2, #1
 800b2b2:	409a      	lsls	r2, r3
 800b2b4:	4b1b      	ldr	r3, [pc, #108]	; (800b324 <xTaskGenericNotifyFromISR+0x1b4>)
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	4313      	orrs	r3, r2
 800b2ba:	4a1a      	ldr	r2, [pc, #104]	; (800b324 <xTaskGenericNotifyFromISR+0x1b4>)
 800b2bc:	6013      	str	r3, [r2, #0]
 800b2be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2c2:	4613      	mov	r3, r2
 800b2c4:	009b      	lsls	r3, r3, #2
 800b2c6:	4413      	add	r3, r2
 800b2c8:	009b      	lsls	r3, r3, #2
 800b2ca:	4a17      	ldr	r2, [pc, #92]	; (800b328 <xTaskGenericNotifyFromISR+0x1b8>)
 800b2cc:	441a      	add	r2, r3
 800b2ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2d0:	3304      	adds	r3, #4
 800b2d2:	4619      	mov	r1, r3
 800b2d4:	4610      	mov	r0, r2
 800b2d6:	f7ff f88a 	bl	800a3ee <vListInsertEnd>
 800b2da:	e005      	b.n	800b2e8 <xTaskGenericNotifyFromISR+0x178>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800b2dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2de:	3318      	adds	r3, #24
 800b2e0:	4619      	mov	r1, r3
 800b2e2:	4812      	ldr	r0, [pc, #72]	; (800b32c <xTaskGenericNotifyFromISR+0x1bc>)
 800b2e4:	f7ff f883 	bl	800a3ee <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b2e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2ec:	4b10      	ldr	r3, [pc, #64]	; (800b330 <xTaskGenericNotifyFromISR+0x1c0>)
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2f2:	429a      	cmp	r2, r3
 800b2f4:	d908      	bls.n	800b308 <xTaskGenericNotifyFromISR+0x198>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800b2f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d002      	beq.n	800b302 <xTaskGenericNotifyFromISR+0x192>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800b2fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2fe:	2201      	movs	r2, #1
 800b300:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800b302:	4b0c      	ldr	r3, [pc, #48]	; (800b334 <xTaskGenericNotifyFromISR+0x1c4>)
 800b304:	2201      	movs	r2, #1
 800b306:	601a      	str	r2, [r3, #0]
 800b308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b30a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b30c:	693b      	ldr	r3, [r7, #16]
 800b30e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b312:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800b314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800b316:	4618      	mov	r0, r3
 800b318:	3738      	adds	r7, #56	; 0x38
 800b31a:	46bd      	mov	sp, r7
 800b31c:	bd80      	pop	{r7, pc}
 800b31e:	bf00      	nop
 800b320:	20000604 	.word	0x20000604
 800b324:	200005e4 	.word	0x200005e4
 800b328:	200004e0 	.word	0x200004e0
 800b32c:	2000059c 	.word	0x2000059c
 800b330:	200004dc 	.word	0x200004dc
 800b334:	200005f0 	.word	0x200005f0

0800b338 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b084      	sub	sp, #16
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
 800b340:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b342:	4b29      	ldr	r3, [pc, #164]	; (800b3e8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b348:	4b28      	ldr	r3, [pc, #160]	; (800b3ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	3304      	adds	r3, #4
 800b34e:	4618      	mov	r0, r3
 800b350:	f7ff f8aa 	bl	800a4a8 <uxListRemove>
 800b354:	4603      	mov	r3, r0
 800b356:	2b00      	cmp	r3, #0
 800b358:	d10b      	bne.n	800b372 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800b35a:	4b24      	ldr	r3, [pc, #144]	; (800b3ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b360:	2201      	movs	r2, #1
 800b362:	fa02 f303 	lsl.w	r3, r2, r3
 800b366:	43da      	mvns	r2, r3
 800b368:	4b21      	ldr	r3, [pc, #132]	; (800b3f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	4013      	ands	r3, r2
 800b36e:	4a20      	ldr	r2, [pc, #128]	; (800b3f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b370:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b378:	d10a      	bne.n	800b390 <prvAddCurrentTaskToDelayedList+0x58>
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d007      	beq.n	800b390 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b380:	4b1a      	ldr	r3, [pc, #104]	; (800b3ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	3304      	adds	r3, #4
 800b386:	4619      	mov	r1, r3
 800b388:	481a      	ldr	r0, [pc, #104]	; (800b3f4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800b38a:	f7ff f830 	bl	800a3ee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b38e:	e026      	b.n	800b3de <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b390:	68fa      	ldr	r2, [r7, #12]
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	4413      	add	r3, r2
 800b396:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b398:	4b14      	ldr	r3, [pc, #80]	; (800b3ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	68ba      	ldr	r2, [r7, #8]
 800b39e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b3a0:	68ba      	ldr	r2, [r7, #8]
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	429a      	cmp	r2, r3
 800b3a6:	d209      	bcs.n	800b3bc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b3a8:	4b13      	ldr	r3, [pc, #76]	; (800b3f8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800b3aa:	681a      	ldr	r2, [r3, #0]
 800b3ac:	4b0f      	ldr	r3, [pc, #60]	; (800b3ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	3304      	adds	r3, #4
 800b3b2:	4619      	mov	r1, r3
 800b3b4:	4610      	mov	r0, r2
 800b3b6:	f7ff f83e 	bl	800a436 <vListInsert>
}
 800b3ba:	e010      	b.n	800b3de <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b3bc:	4b0f      	ldr	r3, [pc, #60]	; (800b3fc <prvAddCurrentTaskToDelayedList+0xc4>)
 800b3be:	681a      	ldr	r2, [r3, #0]
 800b3c0:	4b0a      	ldr	r3, [pc, #40]	; (800b3ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	3304      	adds	r3, #4
 800b3c6:	4619      	mov	r1, r3
 800b3c8:	4610      	mov	r0, r2
 800b3ca:	f7ff f834 	bl	800a436 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b3ce:	4b0c      	ldr	r3, [pc, #48]	; (800b400 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	68ba      	ldr	r2, [r7, #8]
 800b3d4:	429a      	cmp	r2, r3
 800b3d6:	d202      	bcs.n	800b3de <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b3d8:	4a09      	ldr	r2, [pc, #36]	; (800b400 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b3da:	68bb      	ldr	r3, [r7, #8]
 800b3dc:	6013      	str	r3, [r2, #0]
}
 800b3de:	bf00      	nop
 800b3e0:	3710      	adds	r7, #16
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	bd80      	pop	{r7, pc}
 800b3e6:	bf00      	nop
 800b3e8:	200005e0 	.word	0x200005e0
 800b3ec:	200004dc 	.word	0x200004dc
 800b3f0:	200005e4 	.word	0x200005e4
 800b3f4:	200005c8 	.word	0x200005c8
 800b3f8:	20000598 	.word	0x20000598
 800b3fc:	20000594 	.word	0x20000594
 800b400:	200005fc 	.word	0x200005fc

0800b404 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b404:	b480      	push	{r7}
 800b406:	b085      	sub	sp, #20
 800b408:	af00      	add	r7, sp, #0
 800b40a:	60f8      	str	r0, [r7, #12]
 800b40c:	60b9      	str	r1, [r7, #8]
 800b40e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	3b04      	subs	r3, #4
 800b414:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b41c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	3b04      	subs	r3, #4
 800b422:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b424:	68bb      	ldr	r3, [r7, #8]
 800b426:	f023 0201 	bic.w	r2, r3, #1
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	3b04      	subs	r3, #4
 800b432:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b434:	4a0c      	ldr	r2, [pc, #48]	; (800b468 <pxPortInitialiseStack+0x64>)
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	3b14      	subs	r3, #20
 800b43e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b440:	687a      	ldr	r2, [r7, #4]
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	3b04      	subs	r3, #4
 800b44a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	f06f 0202 	mvn.w	r2, #2
 800b452:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	3b20      	subs	r3, #32
 800b458:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b45a:	68fb      	ldr	r3, [r7, #12]
}
 800b45c:	4618      	mov	r0, r3
 800b45e:	3714      	adds	r7, #20
 800b460:	46bd      	mov	sp, r7
 800b462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b466:	4770      	bx	lr
 800b468:	0800b46d 	.word	0x0800b46d

0800b46c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b46c:	b480      	push	{r7}
 800b46e:	b085      	sub	sp, #20
 800b470:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b472:	2300      	movs	r3, #0
 800b474:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b476:	4b12      	ldr	r3, [pc, #72]	; (800b4c0 <prvTaskExitError+0x54>)
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b47e:	d00a      	beq.n	800b496 <prvTaskExitError+0x2a>
	__asm volatile
 800b480:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b484:	f383 8811 	msr	BASEPRI, r3
 800b488:	f3bf 8f6f 	isb	sy
 800b48c:	f3bf 8f4f 	dsb	sy
 800b490:	60fb      	str	r3, [r7, #12]
}
 800b492:	bf00      	nop
 800b494:	e7fe      	b.n	800b494 <prvTaskExitError+0x28>
	__asm volatile
 800b496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b49a:	f383 8811 	msr	BASEPRI, r3
 800b49e:	f3bf 8f6f 	isb	sy
 800b4a2:	f3bf 8f4f 	dsb	sy
 800b4a6:	60bb      	str	r3, [r7, #8]
}
 800b4a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b4aa:	bf00      	nop
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d0fc      	beq.n	800b4ac <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b4b2:	bf00      	nop
 800b4b4:	bf00      	nop
 800b4b6:	3714      	adds	r7, #20
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4be:	4770      	bx	lr
 800b4c0:	20000098 	.word	0x20000098
	...

0800b4d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b4d0:	4b07      	ldr	r3, [pc, #28]	; (800b4f0 <pxCurrentTCBConst2>)
 800b4d2:	6819      	ldr	r1, [r3, #0]
 800b4d4:	6808      	ldr	r0, [r1, #0]
 800b4d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4da:	f380 8809 	msr	PSP, r0
 800b4de:	f3bf 8f6f 	isb	sy
 800b4e2:	f04f 0000 	mov.w	r0, #0
 800b4e6:	f380 8811 	msr	BASEPRI, r0
 800b4ea:	4770      	bx	lr
 800b4ec:	f3af 8000 	nop.w

0800b4f0 <pxCurrentTCBConst2>:
 800b4f0:	200004dc 	.word	0x200004dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b4f4:	bf00      	nop
 800b4f6:	bf00      	nop

0800b4f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b4f8:	4808      	ldr	r0, [pc, #32]	; (800b51c <prvPortStartFirstTask+0x24>)
 800b4fa:	6800      	ldr	r0, [r0, #0]
 800b4fc:	6800      	ldr	r0, [r0, #0]
 800b4fe:	f380 8808 	msr	MSP, r0
 800b502:	f04f 0000 	mov.w	r0, #0
 800b506:	f380 8814 	msr	CONTROL, r0
 800b50a:	b662      	cpsie	i
 800b50c:	b661      	cpsie	f
 800b50e:	f3bf 8f4f 	dsb	sy
 800b512:	f3bf 8f6f 	isb	sy
 800b516:	df00      	svc	0
 800b518:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b51a:	bf00      	nop
 800b51c:	e000ed08 	.word	0xe000ed08

0800b520 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b086      	sub	sp, #24
 800b524:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b526:	4b46      	ldr	r3, [pc, #280]	; (800b640 <xPortStartScheduler+0x120>)
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	4a46      	ldr	r2, [pc, #280]	; (800b644 <xPortStartScheduler+0x124>)
 800b52c:	4293      	cmp	r3, r2
 800b52e:	d10a      	bne.n	800b546 <xPortStartScheduler+0x26>
	__asm volatile
 800b530:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b534:	f383 8811 	msr	BASEPRI, r3
 800b538:	f3bf 8f6f 	isb	sy
 800b53c:	f3bf 8f4f 	dsb	sy
 800b540:	613b      	str	r3, [r7, #16]
}
 800b542:	bf00      	nop
 800b544:	e7fe      	b.n	800b544 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b546:	4b3e      	ldr	r3, [pc, #248]	; (800b640 <xPortStartScheduler+0x120>)
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	4a3f      	ldr	r2, [pc, #252]	; (800b648 <xPortStartScheduler+0x128>)
 800b54c:	4293      	cmp	r3, r2
 800b54e:	d10a      	bne.n	800b566 <xPortStartScheduler+0x46>
	__asm volatile
 800b550:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b554:	f383 8811 	msr	BASEPRI, r3
 800b558:	f3bf 8f6f 	isb	sy
 800b55c:	f3bf 8f4f 	dsb	sy
 800b560:	60fb      	str	r3, [r7, #12]
}
 800b562:	bf00      	nop
 800b564:	e7fe      	b.n	800b564 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b566:	4b39      	ldr	r3, [pc, #228]	; (800b64c <xPortStartScheduler+0x12c>)
 800b568:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b56a:	697b      	ldr	r3, [r7, #20]
 800b56c:	781b      	ldrb	r3, [r3, #0]
 800b56e:	b2db      	uxtb	r3, r3
 800b570:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b572:	697b      	ldr	r3, [r7, #20]
 800b574:	22ff      	movs	r2, #255	; 0xff
 800b576:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b578:	697b      	ldr	r3, [r7, #20]
 800b57a:	781b      	ldrb	r3, [r3, #0]
 800b57c:	b2db      	uxtb	r3, r3
 800b57e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b580:	78fb      	ldrb	r3, [r7, #3]
 800b582:	b2db      	uxtb	r3, r3
 800b584:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b588:	b2da      	uxtb	r2, r3
 800b58a:	4b31      	ldr	r3, [pc, #196]	; (800b650 <xPortStartScheduler+0x130>)
 800b58c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b58e:	4b31      	ldr	r3, [pc, #196]	; (800b654 <xPortStartScheduler+0x134>)
 800b590:	2207      	movs	r2, #7
 800b592:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b594:	e009      	b.n	800b5aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b596:	4b2f      	ldr	r3, [pc, #188]	; (800b654 <xPortStartScheduler+0x134>)
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	3b01      	subs	r3, #1
 800b59c:	4a2d      	ldr	r2, [pc, #180]	; (800b654 <xPortStartScheduler+0x134>)
 800b59e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b5a0:	78fb      	ldrb	r3, [r7, #3]
 800b5a2:	b2db      	uxtb	r3, r3
 800b5a4:	005b      	lsls	r3, r3, #1
 800b5a6:	b2db      	uxtb	r3, r3
 800b5a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b5aa:	78fb      	ldrb	r3, [r7, #3]
 800b5ac:	b2db      	uxtb	r3, r3
 800b5ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5b2:	2b80      	cmp	r3, #128	; 0x80
 800b5b4:	d0ef      	beq.n	800b596 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b5b6:	4b27      	ldr	r3, [pc, #156]	; (800b654 <xPortStartScheduler+0x134>)
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	f1c3 0307 	rsb	r3, r3, #7
 800b5be:	2b04      	cmp	r3, #4
 800b5c0:	d00a      	beq.n	800b5d8 <xPortStartScheduler+0xb8>
	__asm volatile
 800b5c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5c6:	f383 8811 	msr	BASEPRI, r3
 800b5ca:	f3bf 8f6f 	isb	sy
 800b5ce:	f3bf 8f4f 	dsb	sy
 800b5d2:	60bb      	str	r3, [r7, #8]
}
 800b5d4:	bf00      	nop
 800b5d6:	e7fe      	b.n	800b5d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b5d8:	4b1e      	ldr	r3, [pc, #120]	; (800b654 <xPortStartScheduler+0x134>)
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	021b      	lsls	r3, r3, #8
 800b5de:	4a1d      	ldr	r2, [pc, #116]	; (800b654 <xPortStartScheduler+0x134>)
 800b5e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b5e2:	4b1c      	ldr	r3, [pc, #112]	; (800b654 <xPortStartScheduler+0x134>)
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b5ea:	4a1a      	ldr	r2, [pc, #104]	; (800b654 <xPortStartScheduler+0x134>)
 800b5ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	b2da      	uxtb	r2, r3
 800b5f2:	697b      	ldr	r3, [r7, #20]
 800b5f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b5f6:	4b18      	ldr	r3, [pc, #96]	; (800b658 <xPortStartScheduler+0x138>)
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	4a17      	ldr	r2, [pc, #92]	; (800b658 <xPortStartScheduler+0x138>)
 800b5fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b600:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b602:	4b15      	ldr	r3, [pc, #84]	; (800b658 <xPortStartScheduler+0x138>)
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	4a14      	ldr	r2, [pc, #80]	; (800b658 <xPortStartScheduler+0x138>)
 800b608:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b60c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b60e:	f000 f8dd 	bl	800b7cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b612:	4b12      	ldr	r3, [pc, #72]	; (800b65c <xPortStartScheduler+0x13c>)
 800b614:	2200      	movs	r2, #0
 800b616:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b618:	f000 f8fc 	bl	800b814 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b61c:	4b10      	ldr	r3, [pc, #64]	; (800b660 <xPortStartScheduler+0x140>)
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	4a0f      	ldr	r2, [pc, #60]	; (800b660 <xPortStartScheduler+0x140>)
 800b622:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b626:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b628:	f7ff ff66 	bl	800b4f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b62c:	f7ff fb3e 	bl	800acac <vTaskSwitchContext>
	prvTaskExitError();
 800b630:	f7ff ff1c 	bl	800b46c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b634:	2300      	movs	r3, #0
}
 800b636:	4618      	mov	r0, r3
 800b638:	3718      	adds	r7, #24
 800b63a:	46bd      	mov	sp, r7
 800b63c:	bd80      	pop	{r7, pc}
 800b63e:	bf00      	nop
 800b640:	e000ed00 	.word	0xe000ed00
 800b644:	410fc271 	.word	0x410fc271
 800b648:	410fc270 	.word	0x410fc270
 800b64c:	e000e400 	.word	0xe000e400
 800b650:	20000608 	.word	0x20000608
 800b654:	2000060c 	.word	0x2000060c
 800b658:	e000ed20 	.word	0xe000ed20
 800b65c:	20000098 	.word	0x20000098
 800b660:	e000ef34 	.word	0xe000ef34

0800b664 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b664:	b480      	push	{r7}
 800b666:	b083      	sub	sp, #12
 800b668:	af00      	add	r7, sp, #0
	__asm volatile
 800b66a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b66e:	f383 8811 	msr	BASEPRI, r3
 800b672:	f3bf 8f6f 	isb	sy
 800b676:	f3bf 8f4f 	dsb	sy
 800b67a:	607b      	str	r3, [r7, #4]
}
 800b67c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b67e:	4b0f      	ldr	r3, [pc, #60]	; (800b6bc <vPortEnterCritical+0x58>)
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	3301      	adds	r3, #1
 800b684:	4a0d      	ldr	r2, [pc, #52]	; (800b6bc <vPortEnterCritical+0x58>)
 800b686:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b688:	4b0c      	ldr	r3, [pc, #48]	; (800b6bc <vPortEnterCritical+0x58>)
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	2b01      	cmp	r3, #1
 800b68e:	d10f      	bne.n	800b6b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b690:	4b0b      	ldr	r3, [pc, #44]	; (800b6c0 <vPortEnterCritical+0x5c>)
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	b2db      	uxtb	r3, r3
 800b696:	2b00      	cmp	r3, #0
 800b698:	d00a      	beq.n	800b6b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800b69a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b69e:	f383 8811 	msr	BASEPRI, r3
 800b6a2:	f3bf 8f6f 	isb	sy
 800b6a6:	f3bf 8f4f 	dsb	sy
 800b6aa:	603b      	str	r3, [r7, #0]
}
 800b6ac:	bf00      	nop
 800b6ae:	e7fe      	b.n	800b6ae <vPortEnterCritical+0x4a>
	}
}
 800b6b0:	bf00      	nop
 800b6b2:	370c      	adds	r7, #12
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ba:	4770      	bx	lr
 800b6bc:	20000098 	.word	0x20000098
 800b6c0:	e000ed04 	.word	0xe000ed04

0800b6c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b6c4:	b480      	push	{r7}
 800b6c6:	b083      	sub	sp, #12
 800b6c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b6ca:	4b12      	ldr	r3, [pc, #72]	; (800b714 <vPortExitCritical+0x50>)
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d10a      	bne.n	800b6e8 <vPortExitCritical+0x24>
	__asm volatile
 800b6d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6d6:	f383 8811 	msr	BASEPRI, r3
 800b6da:	f3bf 8f6f 	isb	sy
 800b6de:	f3bf 8f4f 	dsb	sy
 800b6e2:	607b      	str	r3, [r7, #4]
}
 800b6e4:	bf00      	nop
 800b6e6:	e7fe      	b.n	800b6e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b6e8:	4b0a      	ldr	r3, [pc, #40]	; (800b714 <vPortExitCritical+0x50>)
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	3b01      	subs	r3, #1
 800b6ee:	4a09      	ldr	r2, [pc, #36]	; (800b714 <vPortExitCritical+0x50>)
 800b6f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b6f2:	4b08      	ldr	r3, [pc, #32]	; (800b714 <vPortExitCritical+0x50>)
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d105      	bne.n	800b706 <vPortExitCritical+0x42>
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	f383 8811 	msr	BASEPRI, r3
}
 800b704:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b706:	bf00      	nop
 800b708:	370c      	adds	r7, #12
 800b70a:	46bd      	mov	sp, r7
 800b70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b710:	4770      	bx	lr
 800b712:	bf00      	nop
 800b714:	20000098 	.word	0x20000098
	...

0800b720 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b720:	f3ef 8009 	mrs	r0, PSP
 800b724:	f3bf 8f6f 	isb	sy
 800b728:	4b15      	ldr	r3, [pc, #84]	; (800b780 <pxCurrentTCBConst>)
 800b72a:	681a      	ldr	r2, [r3, #0]
 800b72c:	f01e 0f10 	tst.w	lr, #16
 800b730:	bf08      	it	eq
 800b732:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b736:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b73a:	6010      	str	r0, [r2, #0]
 800b73c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b740:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b744:	f380 8811 	msr	BASEPRI, r0
 800b748:	f3bf 8f4f 	dsb	sy
 800b74c:	f3bf 8f6f 	isb	sy
 800b750:	f7ff faac 	bl	800acac <vTaskSwitchContext>
 800b754:	f04f 0000 	mov.w	r0, #0
 800b758:	f380 8811 	msr	BASEPRI, r0
 800b75c:	bc09      	pop	{r0, r3}
 800b75e:	6819      	ldr	r1, [r3, #0]
 800b760:	6808      	ldr	r0, [r1, #0]
 800b762:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b766:	f01e 0f10 	tst.w	lr, #16
 800b76a:	bf08      	it	eq
 800b76c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b770:	f380 8809 	msr	PSP, r0
 800b774:	f3bf 8f6f 	isb	sy
 800b778:	4770      	bx	lr
 800b77a:	bf00      	nop
 800b77c:	f3af 8000 	nop.w

0800b780 <pxCurrentTCBConst>:
 800b780:	200004dc 	.word	0x200004dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b784:	bf00      	nop
 800b786:	bf00      	nop

0800b788 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b082      	sub	sp, #8
 800b78c:	af00      	add	r7, sp, #0
	__asm volatile
 800b78e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b792:	f383 8811 	msr	BASEPRI, r3
 800b796:	f3bf 8f6f 	isb	sy
 800b79a:	f3bf 8f4f 	dsb	sy
 800b79e:	607b      	str	r3, [r7, #4]
}
 800b7a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b7a2:	f7ff f9cb 	bl	800ab3c <xTaskIncrementTick>
 800b7a6:	4603      	mov	r3, r0
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d003      	beq.n	800b7b4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b7ac:	4b06      	ldr	r3, [pc, #24]	; (800b7c8 <SysTick_Handler+0x40>)
 800b7ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7b2:	601a      	str	r2, [r3, #0]
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b7b8:	683b      	ldr	r3, [r7, #0]
 800b7ba:	f383 8811 	msr	BASEPRI, r3
}
 800b7be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b7c0:	bf00      	nop
 800b7c2:	3708      	adds	r7, #8
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	bd80      	pop	{r7, pc}
 800b7c8:	e000ed04 	.word	0xe000ed04

0800b7cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b7cc:	b480      	push	{r7}
 800b7ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b7d0:	4b0b      	ldr	r3, [pc, #44]	; (800b800 <vPortSetupTimerInterrupt+0x34>)
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b7d6:	4b0b      	ldr	r3, [pc, #44]	; (800b804 <vPortSetupTimerInterrupt+0x38>)
 800b7d8:	2200      	movs	r2, #0
 800b7da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b7dc:	4b0a      	ldr	r3, [pc, #40]	; (800b808 <vPortSetupTimerInterrupt+0x3c>)
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	4a0a      	ldr	r2, [pc, #40]	; (800b80c <vPortSetupTimerInterrupt+0x40>)
 800b7e2:	fba2 2303 	umull	r2, r3, r2, r3
 800b7e6:	099b      	lsrs	r3, r3, #6
 800b7e8:	4a09      	ldr	r2, [pc, #36]	; (800b810 <vPortSetupTimerInterrupt+0x44>)
 800b7ea:	3b01      	subs	r3, #1
 800b7ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b7ee:	4b04      	ldr	r3, [pc, #16]	; (800b800 <vPortSetupTimerInterrupt+0x34>)
 800b7f0:	2207      	movs	r2, #7
 800b7f2:	601a      	str	r2, [r3, #0]
}
 800b7f4:	bf00      	nop
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fc:	4770      	bx	lr
 800b7fe:	bf00      	nop
 800b800:	e000e010 	.word	0xe000e010
 800b804:	e000e018 	.word	0xe000e018
 800b808:	20000000 	.word	0x20000000
 800b80c:	10624dd3 	.word	0x10624dd3
 800b810:	e000e014 	.word	0xe000e014

0800b814 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b814:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b824 <vPortEnableVFP+0x10>
 800b818:	6801      	ldr	r1, [r0, #0]
 800b81a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b81e:	6001      	str	r1, [r0, #0]
 800b820:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b822:	bf00      	nop
 800b824:	e000ed88 	.word	0xe000ed88

0800b828 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b828:	b480      	push	{r7}
 800b82a:	b085      	sub	sp, #20
 800b82c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b82e:	f3ef 8305 	mrs	r3, IPSR
 800b832:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	2b0f      	cmp	r3, #15
 800b838:	d914      	bls.n	800b864 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b83a:	4a17      	ldr	r2, [pc, #92]	; (800b898 <vPortValidateInterruptPriority+0x70>)
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	4413      	add	r3, r2
 800b840:	781b      	ldrb	r3, [r3, #0]
 800b842:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b844:	4b15      	ldr	r3, [pc, #84]	; (800b89c <vPortValidateInterruptPriority+0x74>)
 800b846:	781b      	ldrb	r3, [r3, #0]
 800b848:	7afa      	ldrb	r2, [r7, #11]
 800b84a:	429a      	cmp	r2, r3
 800b84c:	d20a      	bcs.n	800b864 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b84e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b852:	f383 8811 	msr	BASEPRI, r3
 800b856:	f3bf 8f6f 	isb	sy
 800b85a:	f3bf 8f4f 	dsb	sy
 800b85e:	607b      	str	r3, [r7, #4]
}
 800b860:	bf00      	nop
 800b862:	e7fe      	b.n	800b862 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b864:	4b0e      	ldr	r3, [pc, #56]	; (800b8a0 <vPortValidateInterruptPriority+0x78>)
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b86c:	4b0d      	ldr	r3, [pc, #52]	; (800b8a4 <vPortValidateInterruptPriority+0x7c>)
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	429a      	cmp	r2, r3
 800b872:	d90a      	bls.n	800b88a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b874:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b878:	f383 8811 	msr	BASEPRI, r3
 800b87c:	f3bf 8f6f 	isb	sy
 800b880:	f3bf 8f4f 	dsb	sy
 800b884:	603b      	str	r3, [r7, #0]
}
 800b886:	bf00      	nop
 800b888:	e7fe      	b.n	800b888 <vPortValidateInterruptPriority+0x60>
	}
 800b88a:	bf00      	nop
 800b88c:	3714      	adds	r7, #20
 800b88e:	46bd      	mov	sp, r7
 800b890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b894:	4770      	bx	lr
 800b896:	bf00      	nop
 800b898:	e000e3f0 	.word	0xe000e3f0
 800b89c:	20000608 	.word	0x20000608
 800b8a0:	e000ed0c 	.word	0xe000ed0c
 800b8a4:	2000060c 	.word	0x2000060c

0800b8a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b08a      	sub	sp, #40	; 0x28
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b8b4:	f7ff f876 	bl	800a9a4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b8b8:	4b5d      	ldr	r3, [pc, #372]	; (800ba30 <pvPortMalloc+0x188>)
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d101      	bne.n	800b8c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b8c0:	f000 f924 	bl	800bb0c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b8c4:	4b5b      	ldr	r3, [pc, #364]	; (800ba34 <pvPortMalloc+0x18c>)
 800b8c6:	681a      	ldr	r2, [r3, #0]
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	4013      	ands	r3, r2
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	f040 8093 	bne.w	800b9f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d01d      	beq.n	800b914 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b8d8:	2208      	movs	r2, #8
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	4413      	add	r3, r2
 800b8de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	f003 0307 	and.w	r3, r3, #7
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d014      	beq.n	800b914 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	f023 0307 	bic.w	r3, r3, #7
 800b8f0:	3308      	adds	r3, #8
 800b8f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	f003 0307 	and.w	r3, r3, #7
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d00a      	beq.n	800b914 <pvPortMalloc+0x6c>
	__asm volatile
 800b8fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b902:	f383 8811 	msr	BASEPRI, r3
 800b906:	f3bf 8f6f 	isb	sy
 800b90a:	f3bf 8f4f 	dsb	sy
 800b90e:	617b      	str	r3, [r7, #20]
}
 800b910:	bf00      	nop
 800b912:	e7fe      	b.n	800b912 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d06e      	beq.n	800b9f8 <pvPortMalloc+0x150>
 800b91a:	4b47      	ldr	r3, [pc, #284]	; (800ba38 <pvPortMalloc+0x190>)
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	687a      	ldr	r2, [r7, #4]
 800b920:	429a      	cmp	r2, r3
 800b922:	d869      	bhi.n	800b9f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b924:	4b45      	ldr	r3, [pc, #276]	; (800ba3c <pvPortMalloc+0x194>)
 800b926:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b928:	4b44      	ldr	r3, [pc, #272]	; (800ba3c <pvPortMalloc+0x194>)
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b92e:	e004      	b.n	800b93a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b932:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b93a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b93c:	685b      	ldr	r3, [r3, #4]
 800b93e:	687a      	ldr	r2, [r7, #4]
 800b940:	429a      	cmp	r2, r3
 800b942:	d903      	bls.n	800b94c <pvPortMalloc+0xa4>
 800b944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d1f1      	bne.n	800b930 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b94c:	4b38      	ldr	r3, [pc, #224]	; (800ba30 <pvPortMalloc+0x188>)
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b952:	429a      	cmp	r2, r3
 800b954:	d050      	beq.n	800b9f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b956:	6a3b      	ldr	r3, [r7, #32]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	2208      	movs	r2, #8
 800b95c:	4413      	add	r3, r2
 800b95e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b962:	681a      	ldr	r2, [r3, #0]
 800b964:	6a3b      	ldr	r3, [r7, #32]
 800b966:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b96a:	685a      	ldr	r2, [r3, #4]
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	1ad2      	subs	r2, r2, r3
 800b970:	2308      	movs	r3, #8
 800b972:	005b      	lsls	r3, r3, #1
 800b974:	429a      	cmp	r2, r3
 800b976:	d91f      	bls.n	800b9b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b978:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	4413      	add	r3, r2
 800b97e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b980:	69bb      	ldr	r3, [r7, #24]
 800b982:	f003 0307 	and.w	r3, r3, #7
 800b986:	2b00      	cmp	r3, #0
 800b988:	d00a      	beq.n	800b9a0 <pvPortMalloc+0xf8>
	__asm volatile
 800b98a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b98e:	f383 8811 	msr	BASEPRI, r3
 800b992:	f3bf 8f6f 	isb	sy
 800b996:	f3bf 8f4f 	dsb	sy
 800b99a:	613b      	str	r3, [r7, #16]
}
 800b99c:	bf00      	nop
 800b99e:	e7fe      	b.n	800b99e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a2:	685a      	ldr	r2, [r3, #4]
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	1ad2      	subs	r2, r2, r3
 800b9a8:	69bb      	ldr	r3, [r7, #24]
 800b9aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b9ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ae:	687a      	ldr	r2, [r7, #4]
 800b9b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b9b2:	69b8      	ldr	r0, [r7, #24]
 800b9b4:	f000 f90c 	bl	800bbd0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b9b8:	4b1f      	ldr	r3, [pc, #124]	; (800ba38 <pvPortMalloc+0x190>)
 800b9ba:	681a      	ldr	r2, [r3, #0]
 800b9bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9be:	685b      	ldr	r3, [r3, #4]
 800b9c0:	1ad3      	subs	r3, r2, r3
 800b9c2:	4a1d      	ldr	r2, [pc, #116]	; (800ba38 <pvPortMalloc+0x190>)
 800b9c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b9c6:	4b1c      	ldr	r3, [pc, #112]	; (800ba38 <pvPortMalloc+0x190>)
 800b9c8:	681a      	ldr	r2, [r3, #0]
 800b9ca:	4b1d      	ldr	r3, [pc, #116]	; (800ba40 <pvPortMalloc+0x198>)
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	429a      	cmp	r2, r3
 800b9d0:	d203      	bcs.n	800b9da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b9d2:	4b19      	ldr	r3, [pc, #100]	; (800ba38 <pvPortMalloc+0x190>)
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	4a1a      	ldr	r2, [pc, #104]	; (800ba40 <pvPortMalloc+0x198>)
 800b9d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b9da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9dc:	685a      	ldr	r2, [r3, #4]
 800b9de:	4b15      	ldr	r3, [pc, #84]	; (800ba34 <pvPortMalloc+0x18c>)
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	431a      	orrs	r2, r3
 800b9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b9e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b9ee:	4b15      	ldr	r3, [pc, #84]	; (800ba44 <pvPortMalloc+0x19c>)
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	3301      	adds	r3, #1
 800b9f4:	4a13      	ldr	r2, [pc, #76]	; (800ba44 <pvPortMalloc+0x19c>)
 800b9f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b9f8:	f7fe ffe2 	bl	800a9c0 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800b9fc:	69fb      	ldr	r3, [r7, #28]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d101      	bne.n	800ba06 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800ba02:	f7f4 fec8 	bl	8000796 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ba06:	69fb      	ldr	r3, [r7, #28]
 800ba08:	f003 0307 	and.w	r3, r3, #7
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d00a      	beq.n	800ba26 <pvPortMalloc+0x17e>
	__asm volatile
 800ba10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba14:	f383 8811 	msr	BASEPRI, r3
 800ba18:	f3bf 8f6f 	isb	sy
 800ba1c:	f3bf 8f4f 	dsb	sy
 800ba20:	60fb      	str	r3, [r7, #12]
}
 800ba22:	bf00      	nop
 800ba24:	e7fe      	b.n	800ba24 <pvPortMalloc+0x17c>
	return pvReturn;
 800ba26:	69fb      	ldr	r3, [r7, #28]
}
 800ba28:	4618      	mov	r0, r3
 800ba2a:	3728      	adds	r7, #40	; 0x28
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	bd80      	pop	{r7, pc}
 800ba30:	2000f618 	.word	0x2000f618
 800ba34:	2000f62c 	.word	0x2000f62c
 800ba38:	2000f61c 	.word	0x2000f61c
 800ba3c:	2000f610 	.word	0x2000f610
 800ba40:	2000f620 	.word	0x2000f620
 800ba44:	2000f624 	.word	0x2000f624

0800ba48 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b086      	sub	sp, #24
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d04d      	beq.n	800baf6 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ba5a:	2308      	movs	r3, #8
 800ba5c:	425b      	negs	r3, r3
 800ba5e:	697a      	ldr	r2, [r7, #20]
 800ba60:	4413      	add	r3, r2
 800ba62:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ba64:	697b      	ldr	r3, [r7, #20]
 800ba66:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ba68:	693b      	ldr	r3, [r7, #16]
 800ba6a:	685a      	ldr	r2, [r3, #4]
 800ba6c:	4b24      	ldr	r3, [pc, #144]	; (800bb00 <vPortFree+0xb8>)
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	4013      	ands	r3, r2
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d10a      	bne.n	800ba8c <vPortFree+0x44>
	__asm volatile
 800ba76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba7a:	f383 8811 	msr	BASEPRI, r3
 800ba7e:	f3bf 8f6f 	isb	sy
 800ba82:	f3bf 8f4f 	dsb	sy
 800ba86:	60fb      	str	r3, [r7, #12]
}
 800ba88:	bf00      	nop
 800ba8a:	e7fe      	b.n	800ba8a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ba8c:	693b      	ldr	r3, [r7, #16]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d00a      	beq.n	800baaa <vPortFree+0x62>
	__asm volatile
 800ba94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba98:	f383 8811 	msr	BASEPRI, r3
 800ba9c:	f3bf 8f6f 	isb	sy
 800baa0:	f3bf 8f4f 	dsb	sy
 800baa4:	60bb      	str	r3, [r7, #8]
}
 800baa6:	bf00      	nop
 800baa8:	e7fe      	b.n	800baa8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800baaa:	693b      	ldr	r3, [r7, #16]
 800baac:	685a      	ldr	r2, [r3, #4]
 800baae:	4b14      	ldr	r3, [pc, #80]	; (800bb00 <vPortFree+0xb8>)
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	4013      	ands	r3, r2
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d01e      	beq.n	800baf6 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bab8:	693b      	ldr	r3, [r7, #16]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d11a      	bne.n	800baf6 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bac0:	693b      	ldr	r3, [r7, #16]
 800bac2:	685a      	ldr	r2, [r3, #4]
 800bac4:	4b0e      	ldr	r3, [pc, #56]	; (800bb00 <vPortFree+0xb8>)
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	43db      	mvns	r3, r3
 800baca:	401a      	ands	r2, r3
 800bacc:	693b      	ldr	r3, [r7, #16]
 800bace:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bad0:	f7fe ff68 	bl	800a9a4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bad4:	693b      	ldr	r3, [r7, #16]
 800bad6:	685a      	ldr	r2, [r3, #4]
 800bad8:	4b0a      	ldr	r3, [pc, #40]	; (800bb04 <vPortFree+0xbc>)
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	4413      	add	r3, r2
 800bade:	4a09      	ldr	r2, [pc, #36]	; (800bb04 <vPortFree+0xbc>)
 800bae0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bae2:	6938      	ldr	r0, [r7, #16]
 800bae4:	f000 f874 	bl	800bbd0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bae8:	4b07      	ldr	r3, [pc, #28]	; (800bb08 <vPortFree+0xc0>)
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	3301      	adds	r3, #1
 800baee:	4a06      	ldr	r2, [pc, #24]	; (800bb08 <vPortFree+0xc0>)
 800baf0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800baf2:	f7fe ff65 	bl	800a9c0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800baf6:	bf00      	nop
 800baf8:	3718      	adds	r7, #24
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bd80      	pop	{r7, pc}
 800bafe:	bf00      	nop
 800bb00:	2000f62c 	.word	0x2000f62c
 800bb04:	2000f61c 	.word	0x2000f61c
 800bb08:	2000f628 	.word	0x2000f628

0800bb0c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bb0c:	b480      	push	{r7}
 800bb0e:	b085      	sub	sp, #20
 800bb10:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bb12:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800bb16:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bb18:	4b27      	ldr	r3, [pc, #156]	; (800bbb8 <prvHeapInit+0xac>)
 800bb1a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	f003 0307 	and.w	r3, r3, #7
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d00c      	beq.n	800bb40 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	3307      	adds	r3, #7
 800bb2a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	f023 0307 	bic.w	r3, r3, #7
 800bb32:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bb34:	68ba      	ldr	r2, [r7, #8]
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	1ad3      	subs	r3, r2, r3
 800bb3a:	4a1f      	ldr	r2, [pc, #124]	; (800bbb8 <prvHeapInit+0xac>)
 800bb3c:	4413      	add	r3, r2
 800bb3e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bb44:	4a1d      	ldr	r2, [pc, #116]	; (800bbbc <prvHeapInit+0xb0>)
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bb4a:	4b1c      	ldr	r3, [pc, #112]	; (800bbbc <prvHeapInit+0xb0>)
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	68ba      	ldr	r2, [r7, #8]
 800bb54:	4413      	add	r3, r2
 800bb56:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bb58:	2208      	movs	r2, #8
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	1a9b      	subs	r3, r3, r2
 800bb5e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	f023 0307 	bic.w	r3, r3, #7
 800bb66:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	4a15      	ldr	r2, [pc, #84]	; (800bbc0 <prvHeapInit+0xb4>)
 800bb6c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bb6e:	4b14      	ldr	r3, [pc, #80]	; (800bbc0 <prvHeapInit+0xb4>)
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	2200      	movs	r2, #0
 800bb74:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bb76:	4b12      	ldr	r3, [pc, #72]	; (800bbc0 <prvHeapInit+0xb4>)
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bb82:	683b      	ldr	r3, [r7, #0]
 800bb84:	68fa      	ldr	r2, [r7, #12]
 800bb86:	1ad2      	subs	r2, r2, r3
 800bb88:	683b      	ldr	r3, [r7, #0]
 800bb8a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bb8c:	4b0c      	ldr	r3, [pc, #48]	; (800bbc0 <prvHeapInit+0xb4>)
 800bb8e:	681a      	ldr	r2, [r3, #0]
 800bb90:	683b      	ldr	r3, [r7, #0]
 800bb92:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bb94:	683b      	ldr	r3, [r7, #0]
 800bb96:	685b      	ldr	r3, [r3, #4]
 800bb98:	4a0a      	ldr	r2, [pc, #40]	; (800bbc4 <prvHeapInit+0xb8>)
 800bb9a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	685b      	ldr	r3, [r3, #4]
 800bba0:	4a09      	ldr	r2, [pc, #36]	; (800bbc8 <prvHeapInit+0xbc>)
 800bba2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bba4:	4b09      	ldr	r3, [pc, #36]	; (800bbcc <prvHeapInit+0xc0>)
 800bba6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bbaa:	601a      	str	r2, [r3, #0]
}
 800bbac:	bf00      	nop
 800bbae:	3714      	adds	r7, #20
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb6:	4770      	bx	lr
 800bbb8:	20000610 	.word	0x20000610
 800bbbc:	2000f610 	.word	0x2000f610
 800bbc0:	2000f618 	.word	0x2000f618
 800bbc4:	2000f620 	.word	0x2000f620
 800bbc8:	2000f61c 	.word	0x2000f61c
 800bbcc:	2000f62c 	.word	0x2000f62c

0800bbd0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bbd0:	b480      	push	{r7}
 800bbd2:	b085      	sub	sp, #20
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bbd8:	4b28      	ldr	r3, [pc, #160]	; (800bc7c <prvInsertBlockIntoFreeList+0xac>)
 800bbda:	60fb      	str	r3, [r7, #12]
 800bbdc:	e002      	b.n	800bbe4 <prvInsertBlockIntoFreeList+0x14>
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	60fb      	str	r3, [r7, #12]
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	687a      	ldr	r2, [r7, #4]
 800bbea:	429a      	cmp	r2, r3
 800bbec:	d8f7      	bhi.n	800bbde <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	685b      	ldr	r3, [r3, #4]
 800bbf6:	68ba      	ldr	r2, [r7, #8]
 800bbf8:	4413      	add	r3, r2
 800bbfa:	687a      	ldr	r2, [r7, #4]
 800bbfc:	429a      	cmp	r2, r3
 800bbfe:	d108      	bne.n	800bc12 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	685a      	ldr	r2, [r3, #4]
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	685b      	ldr	r3, [r3, #4]
 800bc08:	441a      	add	r2, r3
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	685b      	ldr	r3, [r3, #4]
 800bc1a:	68ba      	ldr	r2, [r7, #8]
 800bc1c:	441a      	add	r2, r3
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	429a      	cmp	r2, r3
 800bc24:	d118      	bne.n	800bc58 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	681a      	ldr	r2, [r3, #0]
 800bc2a:	4b15      	ldr	r3, [pc, #84]	; (800bc80 <prvInsertBlockIntoFreeList+0xb0>)
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	429a      	cmp	r2, r3
 800bc30:	d00d      	beq.n	800bc4e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	685a      	ldr	r2, [r3, #4]
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	685b      	ldr	r3, [r3, #4]
 800bc3c:	441a      	add	r2, r3
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	681a      	ldr	r2, [r3, #0]
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	601a      	str	r2, [r3, #0]
 800bc4c:	e008      	b.n	800bc60 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bc4e:	4b0c      	ldr	r3, [pc, #48]	; (800bc80 <prvInsertBlockIntoFreeList+0xb0>)
 800bc50:	681a      	ldr	r2, [r3, #0]
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	601a      	str	r2, [r3, #0]
 800bc56:	e003      	b.n	800bc60 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	681a      	ldr	r2, [r3, #0]
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bc60:	68fa      	ldr	r2, [r7, #12]
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	429a      	cmp	r2, r3
 800bc66:	d002      	beq.n	800bc6e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	687a      	ldr	r2, [r7, #4]
 800bc6c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bc6e:	bf00      	nop
 800bc70:	3714      	adds	r7, #20
 800bc72:	46bd      	mov	sp, r7
 800bc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc78:	4770      	bx	lr
 800bc7a:	bf00      	nop
 800bc7c:	2000f610 	.word	0x2000f610
 800bc80:	2000f618 	.word	0x2000f618

0800bc84 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bc84:	b580      	push	{r7, lr}
 800bc86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bc88:	2200      	movs	r2, #0
 800bc8a:	4912      	ldr	r1, [pc, #72]	; (800bcd4 <MX_USB_DEVICE_Init+0x50>)
 800bc8c:	4812      	ldr	r0, [pc, #72]	; (800bcd8 <MX_USB_DEVICE_Init+0x54>)
 800bc8e:	f7fc ff6b 	bl	8008b68 <USBD_Init>
 800bc92:	4603      	mov	r3, r0
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d001      	beq.n	800bc9c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bc98:	f7f5 f80e 	bl	8000cb8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800bc9c:	490f      	ldr	r1, [pc, #60]	; (800bcdc <MX_USB_DEVICE_Init+0x58>)
 800bc9e:	480e      	ldr	r0, [pc, #56]	; (800bcd8 <MX_USB_DEVICE_Init+0x54>)
 800bca0:	f7fc ff92 	bl	8008bc8 <USBD_RegisterClass>
 800bca4:	4603      	mov	r3, r0
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d001      	beq.n	800bcae <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bcaa:	f7f5 f805 	bl	8000cb8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bcae:	490c      	ldr	r1, [pc, #48]	; (800bce0 <MX_USB_DEVICE_Init+0x5c>)
 800bcb0:	4809      	ldr	r0, [pc, #36]	; (800bcd8 <MX_USB_DEVICE_Init+0x54>)
 800bcb2:	f7fc fe89 	bl	80089c8 <USBD_CDC_RegisterInterface>
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d001      	beq.n	800bcc0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bcbc:	f7f4 fffc 	bl	8000cb8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bcc0:	4805      	ldr	r0, [pc, #20]	; (800bcd8 <MX_USB_DEVICE_Init+0x54>)
 800bcc2:	f7fc ffb7 	bl	8008c34 <USBD_Start>
 800bcc6:	4603      	mov	r3, r0
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d001      	beq.n	800bcd0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bccc:	f7f4 fff4 	bl	8000cb8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bcd0:	bf00      	nop
 800bcd2:	bd80      	pop	{r7, pc}
 800bcd4:	200000b0 	.word	0x200000b0
 800bcd8:	2000f630 	.word	0x2000f630
 800bcdc:	20000018 	.word	0x20000018
 800bce0:	2000009c 	.word	0x2000009c

0800bce4 <CDC_Init_FS>:
/* Private functions ---------------------------------------------------------*/
/**
 * @brief  Initializes the CDC media low layer over the FS USB IP
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Init_FS(void) {
 800bce4:	b580      	push	{r7, lr}
 800bce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bce8:	2200      	movs	r2, #0
 800bcea:	4905      	ldr	r1, [pc, #20]	; (800bd00 <CDC_Init_FS+0x1c>)
 800bcec:	4805      	ldr	r0, [pc, #20]	; (800bd04 <CDC_Init_FS+0x20>)
 800bcee:	f7fc fe85 	bl	80089fc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bcf2:	4905      	ldr	r1, [pc, #20]	; (800bd08 <CDC_Init_FS+0x24>)
 800bcf4:	4803      	ldr	r0, [pc, #12]	; (800bd04 <CDC_Init_FS+0x20>)
 800bcf6:	f7fc fea3 	bl	8008a40 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bcfa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	bd80      	pop	{r7, pc}
 800bd00:	2001010c 	.word	0x2001010c
 800bd04:	2000f630 	.word	0x2000f630
 800bd08:	2000f90c 	.word	0x2000f90c

0800bd0c <CDC_DeInit_FS>:

/**
 * @brief  DeInitializes the CDC media low layer
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_DeInit_FS(void) {
 800bd0c:	b480      	push	{r7}
 800bd0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bd10:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bd12:	4618      	mov	r0, r3
 800bd14:	46bd      	mov	sp, r7
 800bd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1a:	4770      	bx	lr

0800bd1c <CDC_Control_FS>:
 * @param  pbuf: Buffer containing command data (request parameters)
 * @param  length: Number of data to be sent (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else
 * USBD_FAIL
 */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t *pbuf, uint16_t length) {
 800bd1c:	b480      	push	{r7}
 800bd1e:	b083      	sub	sp, #12
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	4603      	mov	r3, r0
 800bd24:	6039      	str	r1, [r7, #0]
 800bd26:	71fb      	strb	r3, [r7, #7]
 800bd28:	4613      	mov	r3, r2
 800bd2a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch (cmd) {
 800bd2c:	79fb      	ldrb	r3, [r7, #7]
 800bd2e:	2b23      	cmp	r3, #35	; 0x23
 800bd30:	d84a      	bhi.n	800bdc8 <CDC_Control_FS+0xac>
 800bd32:	a201      	add	r2, pc, #4	; (adr r2, 800bd38 <CDC_Control_FS+0x1c>)
 800bd34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd38:	0800bdc9 	.word	0x0800bdc9
 800bd3c:	0800bdc9 	.word	0x0800bdc9
 800bd40:	0800bdc9 	.word	0x0800bdc9
 800bd44:	0800bdc9 	.word	0x0800bdc9
 800bd48:	0800bdc9 	.word	0x0800bdc9
 800bd4c:	0800bdc9 	.word	0x0800bdc9
 800bd50:	0800bdc9 	.word	0x0800bdc9
 800bd54:	0800bdc9 	.word	0x0800bdc9
 800bd58:	0800bdc9 	.word	0x0800bdc9
 800bd5c:	0800bdc9 	.word	0x0800bdc9
 800bd60:	0800bdc9 	.word	0x0800bdc9
 800bd64:	0800bdc9 	.word	0x0800bdc9
 800bd68:	0800bdc9 	.word	0x0800bdc9
 800bd6c:	0800bdc9 	.word	0x0800bdc9
 800bd70:	0800bdc9 	.word	0x0800bdc9
 800bd74:	0800bdc9 	.word	0x0800bdc9
 800bd78:	0800bdc9 	.word	0x0800bdc9
 800bd7c:	0800bdc9 	.word	0x0800bdc9
 800bd80:	0800bdc9 	.word	0x0800bdc9
 800bd84:	0800bdc9 	.word	0x0800bdc9
 800bd88:	0800bdc9 	.word	0x0800bdc9
 800bd8c:	0800bdc9 	.word	0x0800bdc9
 800bd90:	0800bdc9 	.word	0x0800bdc9
 800bd94:	0800bdc9 	.word	0x0800bdc9
 800bd98:	0800bdc9 	.word	0x0800bdc9
 800bd9c:	0800bdc9 	.word	0x0800bdc9
 800bda0:	0800bdc9 	.word	0x0800bdc9
 800bda4:	0800bdc9 	.word	0x0800bdc9
 800bda8:	0800bdc9 	.word	0x0800bdc9
 800bdac:	0800bdc9 	.word	0x0800bdc9
 800bdb0:	0800bdc9 	.word	0x0800bdc9
 800bdb4:	0800bdc9 	.word	0x0800bdc9
 800bdb8:	0800bdc9 	.word	0x0800bdc9
 800bdbc:	0800bdc9 	.word	0x0800bdc9
 800bdc0:	0800bdc9 	.word	0x0800bdc9
 800bdc4:	0800bdc9 	.word	0x0800bdc9
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bdc8:	bf00      	nop
  }

  return (USBD_OK);
 800bdca:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bdcc:	4618      	mov	r0, r3
 800bdce:	370c      	adds	r7, #12
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd6:	4770      	bx	lr

0800bdd8 <CDC_Receive_FS>:
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else
 * USBD_FAIL
 */
static int8_t CDC_Receive_FS(uint8_t *Buf, uint32_t *Len) {
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	b082      	sub	sp, #8
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
 800bde0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  usb_vcp_receive_processing(Buf, Len);
 800bde2:	6839      	ldr	r1, [r7, #0]
 800bde4:	6878      	ldr	r0, [r7, #4]
 800bde6:	f003 fb9f 	bl	800f528 <usb_vcp_receive_processing>
  return (USBD_OK);
 800bdea:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bdec:	4618      	mov	r0, r3
 800bdee:	3708      	adds	r7, #8
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	bd80      	pop	{r7, pc}

0800bdf4 <CDC_TransmitCplt_FS>:
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else
 * USBD_FAIL
 */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum) {
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b086      	sub	sp, #24
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	60f8      	str	r0, [r7, #12]
 800bdfc:	60b9      	str	r1, [r7, #8]
 800bdfe:	4613      	mov	r3, r2
 800be00:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800be02:	2300      	movs	r3, #0
 800be04:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  result = usb_vcp_transmit_callback_processing(Buf, Len);
 800be06:	68b9      	ldr	r1, [r7, #8]
 800be08:	68f8      	ldr	r0, [r7, #12]
 800be0a:	f003 fbb9 	bl	800f580 <usb_vcp_transmit_callback_processing>
 800be0e:	4603      	mov	r3, r0
 800be10:	75fb      	strb	r3, [r7, #23]

  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800be12:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800be16:	4618      	mov	r0, r3
 800be18:	3718      	adds	r7, #24
 800be1a:	46bd      	mov	sp, r7
 800be1c:	bd80      	pop	{r7, pc}
	...

0800be20 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be20:	b480      	push	{r7}
 800be22:	b083      	sub	sp, #12
 800be24:	af00      	add	r7, sp, #0
 800be26:	4603      	mov	r3, r0
 800be28:	6039      	str	r1, [r7, #0]
 800be2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800be2c:	683b      	ldr	r3, [r7, #0]
 800be2e:	2212      	movs	r2, #18
 800be30:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800be32:	4b03      	ldr	r3, [pc, #12]	; (800be40 <USBD_FS_DeviceDescriptor+0x20>)
}
 800be34:	4618      	mov	r0, r3
 800be36:	370c      	adds	r7, #12
 800be38:	46bd      	mov	sp, r7
 800be3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3e:	4770      	bx	lr
 800be40:	200000cc 	.word	0x200000cc

0800be44 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be44:	b480      	push	{r7}
 800be46:	b083      	sub	sp, #12
 800be48:	af00      	add	r7, sp, #0
 800be4a:	4603      	mov	r3, r0
 800be4c:	6039      	str	r1, [r7, #0]
 800be4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800be50:	683b      	ldr	r3, [r7, #0]
 800be52:	2204      	movs	r2, #4
 800be54:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800be56:	4b03      	ldr	r3, [pc, #12]	; (800be64 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800be58:	4618      	mov	r0, r3
 800be5a:	370c      	adds	r7, #12
 800be5c:	46bd      	mov	sp, r7
 800be5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be62:	4770      	bx	lr
 800be64:	200000e0 	.word	0x200000e0

0800be68 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b082      	sub	sp, #8
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	4603      	mov	r3, r0
 800be70:	6039      	str	r1, [r7, #0]
 800be72:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800be74:	79fb      	ldrb	r3, [r7, #7]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d105      	bne.n	800be86 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800be7a:	683a      	ldr	r2, [r7, #0]
 800be7c:	4907      	ldr	r1, [pc, #28]	; (800be9c <USBD_FS_ProductStrDescriptor+0x34>)
 800be7e:	4808      	ldr	r0, [pc, #32]	; (800bea0 <USBD_FS_ProductStrDescriptor+0x38>)
 800be80:	f7fe f88a 	bl	8009f98 <USBD_GetString>
 800be84:	e004      	b.n	800be90 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800be86:	683a      	ldr	r2, [r7, #0]
 800be88:	4904      	ldr	r1, [pc, #16]	; (800be9c <USBD_FS_ProductStrDescriptor+0x34>)
 800be8a:	4805      	ldr	r0, [pc, #20]	; (800bea0 <USBD_FS_ProductStrDescriptor+0x38>)
 800be8c:	f7fe f884 	bl	8009f98 <USBD_GetString>
  }
  return USBD_StrDesc;
 800be90:	4b02      	ldr	r3, [pc, #8]	; (800be9c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800be92:	4618      	mov	r0, r3
 800be94:	3708      	adds	r7, #8
 800be96:	46bd      	mov	sp, r7
 800be98:	bd80      	pop	{r7, pc}
 800be9a:	bf00      	nop
 800be9c:	2001090c 	.word	0x2001090c
 800bea0:	0800f954 	.word	0x0800f954

0800bea4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b082      	sub	sp, #8
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	4603      	mov	r3, r0
 800beac:	6039      	str	r1, [r7, #0]
 800beae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800beb0:	683a      	ldr	r2, [r7, #0]
 800beb2:	4904      	ldr	r1, [pc, #16]	; (800bec4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800beb4:	4804      	ldr	r0, [pc, #16]	; (800bec8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800beb6:	f7fe f86f 	bl	8009f98 <USBD_GetString>
  return USBD_StrDesc;
 800beba:	4b02      	ldr	r3, [pc, #8]	; (800bec4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bebc:	4618      	mov	r0, r3
 800bebe:	3708      	adds	r7, #8
 800bec0:	46bd      	mov	sp, r7
 800bec2:	bd80      	pop	{r7, pc}
 800bec4:	2001090c 	.word	0x2001090c
 800bec8:	0800f96c 	.word	0x0800f96c

0800becc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b082      	sub	sp, #8
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	4603      	mov	r3, r0
 800bed4:	6039      	str	r1, [r7, #0]
 800bed6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bed8:	683b      	ldr	r3, [r7, #0]
 800beda:	221a      	movs	r2, #26
 800bedc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bede:	f000 f843 	bl	800bf68 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bee2:	4b02      	ldr	r3, [pc, #8]	; (800beec <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bee4:	4618      	mov	r0, r3
 800bee6:	3708      	adds	r7, #8
 800bee8:	46bd      	mov	sp, r7
 800beea:	bd80      	pop	{r7, pc}
 800beec:	200000e4 	.word	0x200000e4

0800bef0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b082      	sub	sp, #8
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	4603      	mov	r3, r0
 800bef8:	6039      	str	r1, [r7, #0]
 800befa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800befc:	79fb      	ldrb	r3, [r7, #7]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d105      	bne.n	800bf0e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bf02:	683a      	ldr	r2, [r7, #0]
 800bf04:	4907      	ldr	r1, [pc, #28]	; (800bf24 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bf06:	4808      	ldr	r0, [pc, #32]	; (800bf28 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bf08:	f7fe f846 	bl	8009f98 <USBD_GetString>
 800bf0c:	e004      	b.n	800bf18 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bf0e:	683a      	ldr	r2, [r7, #0]
 800bf10:	4904      	ldr	r1, [pc, #16]	; (800bf24 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bf12:	4805      	ldr	r0, [pc, #20]	; (800bf28 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bf14:	f7fe f840 	bl	8009f98 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bf18:	4b02      	ldr	r3, [pc, #8]	; (800bf24 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	3708      	adds	r7, #8
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	bd80      	pop	{r7, pc}
 800bf22:	bf00      	nop
 800bf24:	2001090c 	.word	0x2001090c
 800bf28:	0800f980 	.word	0x0800f980

0800bf2c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b082      	sub	sp, #8
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	4603      	mov	r3, r0
 800bf34:	6039      	str	r1, [r7, #0]
 800bf36:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bf38:	79fb      	ldrb	r3, [r7, #7]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d105      	bne.n	800bf4a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bf3e:	683a      	ldr	r2, [r7, #0]
 800bf40:	4907      	ldr	r1, [pc, #28]	; (800bf60 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bf42:	4808      	ldr	r0, [pc, #32]	; (800bf64 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bf44:	f7fe f828 	bl	8009f98 <USBD_GetString>
 800bf48:	e004      	b.n	800bf54 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bf4a:	683a      	ldr	r2, [r7, #0]
 800bf4c:	4904      	ldr	r1, [pc, #16]	; (800bf60 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bf4e:	4805      	ldr	r0, [pc, #20]	; (800bf64 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bf50:	f7fe f822 	bl	8009f98 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bf54:	4b02      	ldr	r3, [pc, #8]	; (800bf60 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bf56:	4618      	mov	r0, r3
 800bf58:	3708      	adds	r7, #8
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	bd80      	pop	{r7, pc}
 800bf5e:	bf00      	nop
 800bf60:	2001090c 	.word	0x2001090c
 800bf64:	0800f98c 	.word	0x0800f98c

0800bf68 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b084      	sub	sp, #16
 800bf6c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bf6e:	4b0f      	ldr	r3, [pc, #60]	; (800bfac <Get_SerialNum+0x44>)
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bf74:	4b0e      	ldr	r3, [pc, #56]	; (800bfb0 <Get_SerialNum+0x48>)
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bf7a:	4b0e      	ldr	r3, [pc, #56]	; (800bfb4 <Get_SerialNum+0x4c>)
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bf80:	68fa      	ldr	r2, [r7, #12]
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	4413      	add	r3, r2
 800bf86:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d009      	beq.n	800bfa2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bf8e:	2208      	movs	r2, #8
 800bf90:	4909      	ldr	r1, [pc, #36]	; (800bfb8 <Get_SerialNum+0x50>)
 800bf92:	68f8      	ldr	r0, [r7, #12]
 800bf94:	f000 f814 	bl	800bfc0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bf98:	2204      	movs	r2, #4
 800bf9a:	4908      	ldr	r1, [pc, #32]	; (800bfbc <Get_SerialNum+0x54>)
 800bf9c:	68b8      	ldr	r0, [r7, #8]
 800bf9e:	f000 f80f 	bl	800bfc0 <IntToUnicode>
  }
}
 800bfa2:	bf00      	nop
 800bfa4:	3710      	adds	r7, #16
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	bd80      	pop	{r7, pc}
 800bfaa:	bf00      	nop
 800bfac:	1fff7a10 	.word	0x1fff7a10
 800bfb0:	1fff7a14 	.word	0x1fff7a14
 800bfb4:	1fff7a18 	.word	0x1fff7a18
 800bfb8:	200000e6 	.word	0x200000e6
 800bfbc:	200000f6 	.word	0x200000f6

0800bfc0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bfc0:	b480      	push	{r7}
 800bfc2:	b087      	sub	sp, #28
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	60f8      	str	r0, [r7, #12]
 800bfc8:	60b9      	str	r1, [r7, #8]
 800bfca:	4613      	mov	r3, r2
 800bfcc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bfce:	2300      	movs	r3, #0
 800bfd0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	75fb      	strb	r3, [r7, #23]
 800bfd6:	e027      	b.n	800c028 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	0f1b      	lsrs	r3, r3, #28
 800bfdc:	2b09      	cmp	r3, #9
 800bfde:	d80b      	bhi.n	800bff8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	0f1b      	lsrs	r3, r3, #28
 800bfe4:	b2da      	uxtb	r2, r3
 800bfe6:	7dfb      	ldrb	r3, [r7, #23]
 800bfe8:	005b      	lsls	r3, r3, #1
 800bfea:	4619      	mov	r1, r3
 800bfec:	68bb      	ldr	r3, [r7, #8]
 800bfee:	440b      	add	r3, r1
 800bff0:	3230      	adds	r2, #48	; 0x30
 800bff2:	b2d2      	uxtb	r2, r2
 800bff4:	701a      	strb	r2, [r3, #0]
 800bff6:	e00a      	b.n	800c00e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	0f1b      	lsrs	r3, r3, #28
 800bffc:	b2da      	uxtb	r2, r3
 800bffe:	7dfb      	ldrb	r3, [r7, #23]
 800c000:	005b      	lsls	r3, r3, #1
 800c002:	4619      	mov	r1, r3
 800c004:	68bb      	ldr	r3, [r7, #8]
 800c006:	440b      	add	r3, r1
 800c008:	3237      	adds	r2, #55	; 0x37
 800c00a:	b2d2      	uxtb	r2, r2
 800c00c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	011b      	lsls	r3, r3, #4
 800c012:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c014:	7dfb      	ldrb	r3, [r7, #23]
 800c016:	005b      	lsls	r3, r3, #1
 800c018:	3301      	adds	r3, #1
 800c01a:	68ba      	ldr	r2, [r7, #8]
 800c01c:	4413      	add	r3, r2
 800c01e:	2200      	movs	r2, #0
 800c020:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c022:	7dfb      	ldrb	r3, [r7, #23]
 800c024:	3301      	adds	r3, #1
 800c026:	75fb      	strb	r3, [r7, #23]
 800c028:	7dfa      	ldrb	r2, [r7, #23]
 800c02a:	79fb      	ldrb	r3, [r7, #7]
 800c02c:	429a      	cmp	r2, r3
 800c02e:	d3d3      	bcc.n	800bfd8 <IntToUnicode+0x18>
  }
}
 800c030:	bf00      	nop
 800c032:	bf00      	nop
 800c034:	371c      	adds	r7, #28
 800c036:	46bd      	mov	sp, r7
 800c038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03c:	4770      	bx	lr
	...

0800c040 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c040:	b580      	push	{r7, lr}
 800c042:	b08a      	sub	sp, #40	; 0x28
 800c044:	af00      	add	r7, sp, #0
 800c046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c048:	f107 0314 	add.w	r3, r7, #20
 800c04c:	2200      	movs	r2, #0
 800c04e:	601a      	str	r2, [r3, #0]
 800c050:	605a      	str	r2, [r3, #4]
 800c052:	609a      	str	r2, [r3, #8]
 800c054:	60da      	str	r2, [r3, #12]
 800c056:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c060:	d13a      	bne.n	800c0d8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c062:	2300      	movs	r3, #0
 800c064:	613b      	str	r3, [r7, #16]
 800c066:	4b1e      	ldr	r3, [pc, #120]	; (800c0e0 <HAL_PCD_MspInit+0xa0>)
 800c068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c06a:	4a1d      	ldr	r2, [pc, #116]	; (800c0e0 <HAL_PCD_MspInit+0xa0>)
 800c06c:	f043 0301 	orr.w	r3, r3, #1
 800c070:	6313      	str	r3, [r2, #48]	; 0x30
 800c072:	4b1b      	ldr	r3, [pc, #108]	; (800c0e0 <HAL_PCD_MspInit+0xa0>)
 800c074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c076:	f003 0301 	and.w	r3, r3, #1
 800c07a:	613b      	str	r3, [r7, #16]
 800c07c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 800c07e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c082:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c084:	2302      	movs	r3, #2
 800c086:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c088:	2300      	movs	r3, #0
 800c08a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c08c:	2303      	movs	r3, #3
 800c08e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c090:	230a      	movs	r3, #10
 800c092:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c094:	f107 0314 	add.w	r3, r7, #20
 800c098:	4619      	mov	r1, r3
 800c09a:	4812      	ldr	r0, [pc, #72]	; (800c0e4 <HAL_PCD_MspInit+0xa4>)
 800c09c:	f7f6 fc36 	bl	800290c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c0a0:	4b0f      	ldr	r3, [pc, #60]	; (800c0e0 <HAL_PCD_MspInit+0xa0>)
 800c0a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0a4:	4a0e      	ldr	r2, [pc, #56]	; (800c0e0 <HAL_PCD_MspInit+0xa0>)
 800c0a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c0aa:	6353      	str	r3, [r2, #52]	; 0x34
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	60fb      	str	r3, [r7, #12]
 800c0b0:	4b0b      	ldr	r3, [pc, #44]	; (800c0e0 <HAL_PCD_MspInit+0xa0>)
 800c0b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0b4:	4a0a      	ldr	r2, [pc, #40]	; (800c0e0 <HAL_PCD_MspInit+0xa0>)
 800c0b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c0ba:	6453      	str	r3, [r2, #68]	; 0x44
 800c0bc:	4b08      	ldr	r3, [pc, #32]	; (800c0e0 <HAL_PCD_MspInit+0xa0>)
 800c0be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c0c4:	60fb      	str	r3, [r7, #12]
 800c0c6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800c0c8:	2200      	movs	r2, #0
 800c0ca:	2105      	movs	r1, #5
 800c0cc:	2043      	movs	r0, #67	; 0x43
 800c0ce:	f7f5 fff1 	bl	80020b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c0d2:	2043      	movs	r0, #67	; 0x43
 800c0d4:	f7f6 f80a 	bl	80020ec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c0d8:	bf00      	nop
 800c0da:	3728      	adds	r7, #40	; 0x28
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	bd80      	pop	{r7, pc}
 800c0e0:	40023800 	.word	0x40023800
 800c0e4:	40020000 	.word	0x40020000

0800c0e8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b082      	sub	sp, #8
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800c0fc:	4619      	mov	r1, r3
 800c0fe:	4610      	mov	r0, r2
 800c100:	f7fc fde5 	bl	8008cce <USBD_LL_SetupStage>
}
 800c104:	bf00      	nop
 800c106:	3708      	adds	r7, #8
 800c108:	46bd      	mov	sp, r7
 800c10a:	bd80      	pop	{r7, pc}

0800c10c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b082      	sub	sp, #8
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
 800c114:	460b      	mov	r3, r1
 800c116:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800c11e:	78fa      	ldrb	r2, [r7, #3]
 800c120:	6879      	ldr	r1, [r7, #4]
 800c122:	4613      	mov	r3, r2
 800c124:	00db      	lsls	r3, r3, #3
 800c126:	4413      	add	r3, r2
 800c128:	009b      	lsls	r3, r3, #2
 800c12a:	440b      	add	r3, r1
 800c12c:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800c130:	681a      	ldr	r2, [r3, #0]
 800c132:	78fb      	ldrb	r3, [r7, #3]
 800c134:	4619      	mov	r1, r3
 800c136:	f7fc fe1f 	bl	8008d78 <USBD_LL_DataOutStage>
}
 800c13a:	bf00      	nop
 800c13c:	3708      	adds	r7, #8
 800c13e:	46bd      	mov	sp, r7
 800c140:	bd80      	pop	{r7, pc}

0800c142 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c142:	b580      	push	{r7, lr}
 800c144:	b082      	sub	sp, #8
 800c146:	af00      	add	r7, sp, #0
 800c148:	6078      	str	r0, [r7, #4]
 800c14a:	460b      	mov	r3, r1
 800c14c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800c154:	78fa      	ldrb	r2, [r7, #3]
 800c156:	6879      	ldr	r1, [r7, #4]
 800c158:	4613      	mov	r3, r2
 800c15a:	00db      	lsls	r3, r3, #3
 800c15c:	4413      	add	r3, r2
 800c15e:	009b      	lsls	r3, r3, #2
 800c160:	440b      	add	r3, r1
 800c162:	3320      	adds	r3, #32
 800c164:	681a      	ldr	r2, [r3, #0]
 800c166:	78fb      	ldrb	r3, [r7, #3]
 800c168:	4619      	mov	r1, r3
 800c16a:	f7fc feb8 	bl	8008ede <USBD_LL_DataInStage>
}
 800c16e:	bf00      	nop
 800c170:	3708      	adds	r7, #8
 800c172:	46bd      	mov	sp, r7
 800c174:	bd80      	pop	{r7, pc}

0800c176 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c176:	b580      	push	{r7, lr}
 800c178:	b082      	sub	sp, #8
 800c17a:	af00      	add	r7, sp, #0
 800c17c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800c184:	4618      	mov	r0, r3
 800c186:	f7fc fff2 	bl	800916e <USBD_LL_SOF>
}
 800c18a:	bf00      	nop
 800c18c:	3708      	adds	r7, #8
 800c18e:	46bd      	mov	sp, r7
 800c190:	bd80      	pop	{r7, pc}

0800c192 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c192:	b580      	push	{r7, lr}
 800c194:	b084      	sub	sp, #16
 800c196:	af00      	add	r7, sp, #0
 800c198:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c19a:	2301      	movs	r3, #1
 800c19c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	79db      	ldrb	r3, [r3, #7]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d102      	bne.n	800c1ac <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	73fb      	strb	r3, [r7, #15]
 800c1aa:	e008      	b.n	800c1be <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	79db      	ldrb	r3, [r3, #7]
 800c1b0:	2b02      	cmp	r3, #2
 800c1b2:	d102      	bne.n	800c1ba <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800c1b4:	2301      	movs	r3, #1
 800c1b6:	73fb      	strb	r3, [r7, #15]
 800c1b8:	e001      	b.n	800c1be <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800c1ba:	f7f4 fd7d 	bl	8000cb8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800c1c4:	7bfa      	ldrb	r2, [r7, #15]
 800c1c6:	4611      	mov	r1, r2
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	f7fc ff8c 	bl	80090e6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	f7fc ff34 	bl	8009042 <USBD_LL_Reset>
}
 800c1da:	bf00      	nop
 800c1dc:	3710      	adds	r7, #16
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	bd80      	pop	{r7, pc}
	...

0800c1e4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b082      	sub	sp, #8
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	f7fc ff87 	bl	8009106 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	687a      	ldr	r2, [r7, #4]
 800c204:	6812      	ldr	r2, [r2, #0]
 800c206:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c20a:	f043 0301 	orr.w	r3, r3, #1
 800c20e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	7adb      	ldrb	r3, [r3, #11]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d005      	beq.n	800c224 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c218:	4b04      	ldr	r3, [pc, #16]	; (800c22c <HAL_PCD_SuspendCallback+0x48>)
 800c21a:	691b      	ldr	r3, [r3, #16]
 800c21c:	4a03      	ldr	r2, [pc, #12]	; (800c22c <HAL_PCD_SuspendCallback+0x48>)
 800c21e:	f043 0306 	orr.w	r3, r3, #6
 800c222:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c224:	bf00      	nop
 800c226:	3708      	adds	r7, #8
 800c228:	46bd      	mov	sp, r7
 800c22a:	bd80      	pop	{r7, pc}
 800c22c:	e000ed00 	.word	0xe000ed00

0800c230 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c230:	b580      	push	{r7, lr}
 800c232:	b082      	sub	sp, #8
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800c23e:	4618      	mov	r0, r3
 800c240:	f7fc ff7d 	bl	800913e <USBD_LL_Resume>
}
 800c244:	bf00      	nop
 800c246:	3708      	adds	r7, #8
 800c248:	46bd      	mov	sp, r7
 800c24a:	bd80      	pop	{r7, pc}

0800c24c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b082      	sub	sp, #8
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
 800c254:	460b      	mov	r3, r1
 800c256:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800c25e:	78fa      	ldrb	r2, [r7, #3]
 800c260:	4611      	mov	r1, r2
 800c262:	4618      	mov	r0, r3
 800c264:	f7fc ffd5 	bl	8009212 <USBD_LL_IsoOUTIncomplete>
}
 800c268:	bf00      	nop
 800c26a:	3708      	adds	r7, #8
 800c26c:	46bd      	mov	sp, r7
 800c26e:	bd80      	pop	{r7, pc}

0800c270 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b082      	sub	sp, #8
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
 800c278:	460b      	mov	r3, r1
 800c27a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800c282:	78fa      	ldrb	r2, [r7, #3]
 800c284:	4611      	mov	r1, r2
 800c286:	4618      	mov	r0, r3
 800c288:	f7fc ff91 	bl	80091ae <USBD_LL_IsoINIncomplete>
}
 800c28c:	bf00      	nop
 800c28e:	3708      	adds	r7, #8
 800c290:	46bd      	mov	sp, r7
 800c292:	bd80      	pop	{r7, pc}

0800c294 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c294:	b580      	push	{r7, lr}
 800c296:	b082      	sub	sp, #8
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	f7fc ffe7 	bl	8009276 <USBD_LL_DevConnected>
}
 800c2a8:	bf00      	nop
 800c2aa:	3708      	adds	r7, #8
 800c2ac:	46bd      	mov	sp, r7
 800c2ae:	bd80      	pop	{r7, pc}

0800c2b0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b082      	sub	sp, #8
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800c2be:	4618      	mov	r0, r3
 800c2c0:	f7fc ffe4 	bl	800928c <USBD_LL_DevDisconnected>
}
 800c2c4:	bf00      	nop
 800c2c6:	3708      	adds	r7, #8
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	bd80      	pop	{r7, pc}

0800c2cc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b082      	sub	sp, #8
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	781b      	ldrb	r3, [r3, #0]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d13c      	bne.n	800c356 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c2dc:	4a20      	ldr	r2, [pc, #128]	; (800c360 <USBD_LL_Init+0x94>)
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	4a1e      	ldr	r2, [pc, #120]	; (800c360 <USBD_LL_Init+0x94>)
 800c2e8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c2ec:	4b1c      	ldr	r3, [pc, #112]	; (800c360 <USBD_LL_Init+0x94>)
 800c2ee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c2f2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c2f4:	4b1a      	ldr	r3, [pc, #104]	; (800c360 <USBD_LL_Init+0x94>)
 800c2f6:	2204      	movs	r2, #4
 800c2f8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c2fa:	4b19      	ldr	r3, [pc, #100]	; (800c360 <USBD_LL_Init+0x94>)
 800c2fc:	2202      	movs	r2, #2
 800c2fe:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c300:	4b17      	ldr	r3, [pc, #92]	; (800c360 <USBD_LL_Init+0x94>)
 800c302:	2200      	movs	r2, #0
 800c304:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c306:	4b16      	ldr	r3, [pc, #88]	; (800c360 <USBD_LL_Init+0x94>)
 800c308:	2202      	movs	r2, #2
 800c30a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c30c:	4b14      	ldr	r3, [pc, #80]	; (800c360 <USBD_LL_Init+0x94>)
 800c30e:	2200      	movs	r2, #0
 800c310:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c312:	4b13      	ldr	r3, [pc, #76]	; (800c360 <USBD_LL_Init+0x94>)
 800c314:	2200      	movs	r2, #0
 800c316:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c318:	4b11      	ldr	r3, [pc, #68]	; (800c360 <USBD_LL_Init+0x94>)
 800c31a:	2200      	movs	r2, #0
 800c31c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c31e:	4b10      	ldr	r3, [pc, #64]	; (800c360 <USBD_LL_Init+0x94>)
 800c320:	2200      	movs	r2, #0
 800c322:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c324:	4b0e      	ldr	r3, [pc, #56]	; (800c360 <USBD_LL_Init+0x94>)
 800c326:	2200      	movs	r2, #0
 800c328:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c32a:	480d      	ldr	r0, [pc, #52]	; (800c360 <USBD_LL_Init+0x94>)
 800c32c:	f7f6 fccd 	bl	8002cca <HAL_PCD_Init>
 800c330:	4603      	mov	r3, r0
 800c332:	2b00      	cmp	r3, #0
 800c334:	d001      	beq.n	800c33a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c336:	f7f4 fcbf 	bl	8000cb8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c33a:	2180      	movs	r1, #128	; 0x80
 800c33c:	4808      	ldr	r0, [pc, #32]	; (800c360 <USBD_LL_Init+0x94>)
 800c33e:	f7f7 fef8 	bl	8004132 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c342:	2240      	movs	r2, #64	; 0x40
 800c344:	2100      	movs	r1, #0
 800c346:	4806      	ldr	r0, [pc, #24]	; (800c360 <USBD_LL_Init+0x94>)
 800c348:	f7f7 feac 	bl	80040a4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c34c:	2280      	movs	r2, #128	; 0x80
 800c34e:	2101      	movs	r1, #1
 800c350:	4803      	ldr	r0, [pc, #12]	; (800c360 <USBD_LL_Init+0x94>)
 800c352:	f7f7 fea7 	bl	80040a4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c356:	2300      	movs	r3, #0
}
 800c358:	4618      	mov	r0, r3
 800c35a:	3708      	adds	r7, #8
 800c35c:	46bd      	mov	sp, r7
 800c35e:	bd80      	pop	{r7, pc}
 800c360:	20010b0c 	.word	0x20010b0c

0800c364 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c364:	b580      	push	{r7, lr}
 800c366:	b084      	sub	sp, #16
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c36c:	2300      	movs	r3, #0
 800c36e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c370:	2300      	movs	r3, #0
 800c372:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c37a:	4618      	mov	r0, r3
 800c37c:	f7f6 fdb4 	bl	8002ee8 <HAL_PCD_Start>
 800c380:	4603      	mov	r3, r0
 800c382:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c384:	7bfb      	ldrb	r3, [r7, #15]
 800c386:	4618      	mov	r0, r3
 800c388:	f000 f942 	bl	800c610 <USBD_Get_USB_Status>
 800c38c:	4603      	mov	r3, r0
 800c38e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c390:	7bbb      	ldrb	r3, [r7, #14]
}
 800c392:	4618      	mov	r0, r3
 800c394:	3710      	adds	r7, #16
 800c396:	46bd      	mov	sp, r7
 800c398:	bd80      	pop	{r7, pc}

0800c39a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c39a:	b580      	push	{r7, lr}
 800c39c:	b084      	sub	sp, #16
 800c39e:	af00      	add	r7, sp, #0
 800c3a0:	6078      	str	r0, [r7, #4]
 800c3a2:	4608      	mov	r0, r1
 800c3a4:	4611      	mov	r1, r2
 800c3a6:	461a      	mov	r2, r3
 800c3a8:	4603      	mov	r3, r0
 800c3aa:	70fb      	strb	r3, [r7, #3]
 800c3ac:	460b      	mov	r3, r1
 800c3ae:	70bb      	strb	r3, [r7, #2]
 800c3b0:	4613      	mov	r3, r2
 800c3b2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c3c2:	78bb      	ldrb	r3, [r7, #2]
 800c3c4:	883a      	ldrh	r2, [r7, #0]
 800c3c6:	78f9      	ldrb	r1, [r7, #3]
 800c3c8:	f7f7 fa88 	bl	80038dc <HAL_PCD_EP_Open>
 800c3cc:	4603      	mov	r3, r0
 800c3ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c3d0:	7bfb      	ldrb	r3, [r7, #15]
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	f000 f91c 	bl	800c610 <USBD_Get_USB_Status>
 800c3d8:	4603      	mov	r3, r0
 800c3da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c3dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800c3de:	4618      	mov	r0, r3
 800c3e0:	3710      	adds	r7, #16
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	bd80      	pop	{r7, pc}

0800c3e6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c3e6:	b580      	push	{r7, lr}
 800c3e8:	b084      	sub	sp, #16
 800c3ea:	af00      	add	r7, sp, #0
 800c3ec:	6078      	str	r0, [r7, #4]
 800c3ee:	460b      	mov	r3, r1
 800c3f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c400:	78fa      	ldrb	r2, [r7, #3]
 800c402:	4611      	mov	r1, r2
 800c404:	4618      	mov	r0, r3
 800c406:	f7f7 fad1 	bl	80039ac <HAL_PCD_EP_Close>
 800c40a:	4603      	mov	r3, r0
 800c40c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c40e:	7bfb      	ldrb	r3, [r7, #15]
 800c410:	4618      	mov	r0, r3
 800c412:	f000 f8fd 	bl	800c610 <USBD_Get_USB_Status>
 800c416:	4603      	mov	r3, r0
 800c418:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c41a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c41c:	4618      	mov	r0, r3
 800c41e:	3710      	adds	r7, #16
 800c420:	46bd      	mov	sp, r7
 800c422:	bd80      	pop	{r7, pc}

0800c424 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c424:	b580      	push	{r7, lr}
 800c426:	b084      	sub	sp, #16
 800c428:	af00      	add	r7, sp, #0
 800c42a:	6078      	str	r0, [r7, #4]
 800c42c:	460b      	mov	r3, r1
 800c42e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c430:	2300      	movs	r3, #0
 800c432:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c434:	2300      	movs	r3, #0
 800c436:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c43e:	78fa      	ldrb	r2, [r7, #3]
 800c440:	4611      	mov	r1, r2
 800c442:	4618      	mov	r0, r3
 800c444:	f7f7 fb89 	bl	8003b5a <HAL_PCD_EP_SetStall>
 800c448:	4603      	mov	r3, r0
 800c44a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c44c:	7bfb      	ldrb	r3, [r7, #15]
 800c44e:	4618      	mov	r0, r3
 800c450:	f000 f8de 	bl	800c610 <USBD_Get_USB_Status>
 800c454:	4603      	mov	r3, r0
 800c456:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c458:	7bbb      	ldrb	r3, [r7, #14]
}
 800c45a:	4618      	mov	r0, r3
 800c45c:	3710      	adds	r7, #16
 800c45e:	46bd      	mov	sp, r7
 800c460:	bd80      	pop	{r7, pc}

0800c462 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c462:	b580      	push	{r7, lr}
 800c464:	b084      	sub	sp, #16
 800c466:	af00      	add	r7, sp, #0
 800c468:	6078      	str	r0, [r7, #4]
 800c46a:	460b      	mov	r3, r1
 800c46c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c46e:	2300      	movs	r3, #0
 800c470:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c472:	2300      	movs	r3, #0
 800c474:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c47c:	78fa      	ldrb	r2, [r7, #3]
 800c47e:	4611      	mov	r1, r2
 800c480:	4618      	mov	r0, r3
 800c482:	f7f7 fbcd 	bl	8003c20 <HAL_PCD_EP_ClrStall>
 800c486:	4603      	mov	r3, r0
 800c488:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c48a:	7bfb      	ldrb	r3, [r7, #15]
 800c48c:	4618      	mov	r0, r3
 800c48e:	f000 f8bf 	bl	800c610 <USBD_Get_USB_Status>
 800c492:	4603      	mov	r3, r0
 800c494:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c496:	7bbb      	ldrb	r3, [r7, #14]
}
 800c498:	4618      	mov	r0, r3
 800c49a:	3710      	adds	r7, #16
 800c49c:	46bd      	mov	sp, r7
 800c49e:	bd80      	pop	{r7, pc}

0800c4a0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c4a0:	b480      	push	{r7}
 800c4a2:	b085      	sub	sp, #20
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
 800c4a8:	460b      	mov	r3, r1
 800c4aa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c4b2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c4b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	da0b      	bge.n	800c4d4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c4bc:	78fb      	ldrb	r3, [r7, #3]
 800c4be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c4c2:	68f9      	ldr	r1, [r7, #12]
 800c4c4:	4613      	mov	r3, r2
 800c4c6:	00db      	lsls	r3, r3, #3
 800c4c8:	4413      	add	r3, r2
 800c4ca:	009b      	lsls	r3, r3, #2
 800c4cc:	440b      	add	r3, r1
 800c4ce:	3316      	adds	r3, #22
 800c4d0:	781b      	ldrb	r3, [r3, #0]
 800c4d2:	e00b      	b.n	800c4ec <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c4d4:	78fb      	ldrb	r3, [r7, #3]
 800c4d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c4da:	68f9      	ldr	r1, [r7, #12]
 800c4dc:	4613      	mov	r3, r2
 800c4de:	00db      	lsls	r3, r3, #3
 800c4e0:	4413      	add	r3, r2
 800c4e2:	009b      	lsls	r3, r3, #2
 800c4e4:	440b      	add	r3, r1
 800c4e6:	f203 2356 	addw	r3, r3, #598	; 0x256
 800c4ea:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	3714      	adds	r7, #20
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f6:	4770      	bx	lr

0800c4f8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b084      	sub	sp, #16
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
 800c500:	460b      	mov	r3, r1
 800c502:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c504:	2300      	movs	r3, #0
 800c506:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c508:	2300      	movs	r3, #0
 800c50a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c512:	78fa      	ldrb	r2, [r7, #3]
 800c514:	4611      	mov	r1, r2
 800c516:	4618      	mov	r0, r3
 800c518:	f7f7 f9bc 	bl	8003894 <HAL_PCD_SetAddress>
 800c51c:	4603      	mov	r3, r0
 800c51e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c520:	7bfb      	ldrb	r3, [r7, #15]
 800c522:	4618      	mov	r0, r3
 800c524:	f000 f874 	bl	800c610 <USBD_Get_USB_Status>
 800c528:	4603      	mov	r3, r0
 800c52a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c52c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c52e:	4618      	mov	r0, r3
 800c530:	3710      	adds	r7, #16
 800c532:	46bd      	mov	sp, r7
 800c534:	bd80      	pop	{r7, pc}

0800c536 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c536:	b580      	push	{r7, lr}
 800c538:	b086      	sub	sp, #24
 800c53a:	af00      	add	r7, sp, #0
 800c53c:	60f8      	str	r0, [r7, #12]
 800c53e:	607a      	str	r2, [r7, #4]
 800c540:	603b      	str	r3, [r7, #0]
 800c542:	460b      	mov	r3, r1
 800c544:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c546:	2300      	movs	r3, #0
 800c548:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c54a:	2300      	movs	r3, #0
 800c54c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c554:	7af9      	ldrb	r1, [r7, #11]
 800c556:	683b      	ldr	r3, [r7, #0]
 800c558:	687a      	ldr	r2, [r7, #4]
 800c55a:	f7f7 fac4 	bl	8003ae6 <HAL_PCD_EP_Transmit>
 800c55e:	4603      	mov	r3, r0
 800c560:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c562:	7dfb      	ldrb	r3, [r7, #23]
 800c564:	4618      	mov	r0, r3
 800c566:	f000 f853 	bl	800c610 <USBD_Get_USB_Status>
 800c56a:	4603      	mov	r3, r0
 800c56c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c56e:	7dbb      	ldrb	r3, [r7, #22]
}
 800c570:	4618      	mov	r0, r3
 800c572:	3718      	adds	r7, #24
 800c574:	46bd      	mov	sp, r7
 800c576:	bd80      	pop	{r7, pc}

0800c578 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b086      	sub	sp, #24
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	60f8      	str	r0, [r7, #12]
 800c580:	607a      	str	r2, [r7, #4]
 800c582:	603b      	str	r3, [r7, #0]
 800c584:	460b      	mov	r3, r1
 800c586:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c588:	2300      	movs	r3, #0
 800c58a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c58c:	2300      	movs	r3, #0
 800c58e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c596:	7af9      	ldrb	r1, [r7, #11]
 800c598:	683b      	ldr	r3, [r7, #0]
 800c59a:	687a      	ldr	r2, [r7, #4]
 800c59c:	f7f7 fa50 	bl	8003a40 <HAL_PCD_EP_Receive>
 800c5a0:	4603      	mov	r3, r0
 800c5a2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c5a4:	7dfb      	ldrb	r3, [r7, #23]
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	f000 f832 	bl	800c610 <USBD_Get_USB_Status>
 800c5ac:	4603      	mov	r3, r0
 800c5ae:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c5b0:	7dbb      	ldrb	r3, [r7, #22]
}
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	3718      	adds	r7, #24
 800c5b6:	46bd      	mov	sp, r7
 800c5b8:	bd80      	pop	{r7, pc}

0800c5ba <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c5ba:	b580      	push	{r7, lr}
 800c5bc:	b082      	sub	sp, #8
 800c5be:	af00      	add	r7, sp, #0
 800c5c0:	6078      	str	r0, [r7, #4]
 800c5c2:	460b      	mov	r3, r1
 800c5c4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c5cc:	78fa      	ldrb	r2, [r7, #3]
 800c5ce:	4611      	mov	r1, r2
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	f7f7 fa70 	bl	8003ab6 <HAL_PCD_EP_GetRxCount>
 800c5d6:	4603      	mov	r3, r0
}
 800c5d8:	4618      	mov	r0, r3
 800c5da:	3708      	adds	r7, #8
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	bd80      	pop	{r7, pc}

0800c5e0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c5e0:	b480      	push	{r7}
 800c5e2:	b083      	sub	sp, #12
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c5e8:	4b03      	ldr	r3, [pc, #12]	; (800c5f8 <USBD_static_malloc+0x18>)
}
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	370c      	adds	r7, #12
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f4:	4770      	bx	lr
 800c5f6:	bf00      	nop
 800c5f8:	20010ff0 	.word	0x20010ff0

0800c5fc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c5fc:	b480      	push	{r7}
 800c5fe:	b083      	sub	sp, #12
 800c600:	af00      	add	r7, sp, #0
 800c602:	6078      	str	r0, [r7, #4]

}
 800c604:	bf00      	nop
 800c606:	370c      	adds	r7, #12
 800c608:	46bd      	mov	sp, r7
 800c60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60e:	4770      	bx	lr

0800c610 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c610:	b480      	push	{r7}
 800c612:	b085      	sub	sp, #20
 800c614:	af00      	add	r7, sp, #0
 800c616:	4603      	mov	r3, r0
 800c618:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c61a:	2300      	movs	r3, #0
 800c61c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c61e:	79fb      	ldrb	r3, [r7, #7]
 800c620:	2b03      	cmp	r3, #3
 800c622:	d817      	bhi.n	800c654 <USBD_Get_USB_Status+0x44>
 800c624:	a201      	add	r2, pc, #4	; (adr r2, 800c62c <USBD_Get_USB_Status+0x1c>)
 800c626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c62a:	bf00      	nop
 800c62c:	0800c63d 	.word	0x0800c63d
 800c630:	0800c643 	.word	0x0800c643
 800c634:	0800c649 	.word	0x0800c649
 800c638:	0800c64f 	.word	0x0800c64f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c63c:	2300      	movs	r3, #0
 800c63e:	73fb      	strb	r3, [r7, #15]
    break;
 800c640:	e00b      	b.n	800c65a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c642:	2303      	movs	r3, #3
 800c644:	73fb      	strb	r3, [r7, #15]
    break;
 800c646:	e008      	b.n	800c65a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c648:	2301      	movs	r3, #1
 800c64a:	73fb      	strb	r3, [r7, #15]
    break;
 800c64c:	e005      	b.n	800c65a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c64e:	2303      	movs	r3, #3
 800c650:	73fb      	strb	r3, [r7, #15]
    break;
 800c652:	e002      	b.n	800c65a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c654:	2303      	movs	r3, #3
 800c656:	73fb      	strb	r3, [r7, #15]
    break;
 800c658:	bf00      	nop
  }
  return usb_status;
 800c65a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c65c:	4618      	mov	r0, r3
 800c65e:	3714      	adds	r7, #20
 800c660:	46bd      	mov	sp, r7
 800c662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c666:	4770      	bx	lr

0800c668 <toggle_led_green>:
#include "blinky_task.h"

#include "main.h"
#include "timer_task.h"

int32_t toggle_led_green(void *argc){
 800c668:	b580      	push	{r7, lr}
 800c66a:	b082      	sub	sp, #8
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 800c670:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800c674:	4803      	ldr	r0, [pc, #12]	; (800c684 <toggle_led_green+0x1c>)
 800c676:	f7f6 fb0e 	bl	8002c96 <HAL_GPIO_TogglePin>
	return 0;
 800c67a:	2300      	movs	r3, #0
}
 800c67c:	4618      	mov	r0, r3
 800c67e:	3708      	adds	r7, #8
 800c680:	46bd      	mov	sp, r7
 800c682:	bd80      	pop	{r7, pc}
 800c684:	40021400 	.word	0x40021400

0800c688 <blinky_task>:

void blinky_task (void const *argument){
 800c688:	b580      	push	{r7, lr}
 800c68a:	b084      	sub	sp, #16
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
	uint32_t t = osKernelSysTick();
 800c690:	f7fd fd93 	bl	800a1ba <osKernelSysTick>
 800c694:	4603      	mov	r3, r0
 800c696:	60bb      	str	r3, [r7, #8]
	uint32_t period = 100;
 800c698:	2364      	movs	r3, #100	; 0x64
 800c69a:	60fb      	str	r3, [r7, #12]

	soft_timer_register(toggle_led_green, NULL, 1000);
 800c69c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c6a0:	2100      	movs	r1, #0
 800c6a2:	482a      	ldr	r0, [pc, #168]	; (800c74c <blinky_task+0xc4>)
 800c6a4:	f000 fa24 	bl	800caf0 <soft_timer_register>

	 for(;;){
		HAL_GPIO_TogglePin(LED_A_GPIO_Port, LED_A_Pin);
 800c6a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c6ac:	4828      	ldr	r0, [pc, #160]	; (800c750 <blinky_task+0xc8>)
 800c6ae:	f7f6 faf2 	bl	8002c96 <HAL_GPIO_TogglePin>
		osDelayUntil(&t, period);
 800c6b2:	f107 0308 	add.w	r3, r7, #8
 800c6b6:	68f9      	ldr	r1, [r7, #12]
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	f7fd fe55 	bl	800a368 <osDelayUntil>

		HAL_GPIO_TogglePin(LED_B_GPIO_Port, LED_B_Pin);
 800c6be:	2180      	movs	r1, #128	; 0x80
 800c6c0:	4823      	ldr	r0, [pc, #140]	; (800c750 <blinky_task+0xc8>)
 800c6c2:	f7f6 fae8 	bl	8002c96 <HAL_GPIO_TogglePin>
		osDelayUntil(&t, period);
 800c6c6:	f107 0308 	add.w	r3, r7, #8
 800c6ca:	68f9      	ldr	r1, [r7, #12]
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	f7fd fe4b 	bl	800a368 <osDelayUntil>

		HAL_GPIO_TogglePin(LED_C_GPIO_Port, LED_C_Pin);
 800c6d2:	2140      	movs	r1, #64	; 0x40
 800c6d4:	481e      	ldr	r0, [pc, #120]	; (800c750 <blinky_task+0xc8>)
 800c6d6:	f7f6 fade 	bl	8002c96 <HAL_GPIO_TogglePin>
		osDelayUntil(&t, period);
 800c6da:	f107 0308 	add.w	r3, r7, #8
 800c6de:	68f9      	ldr	r1, [r7, #12]
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	f7fd fe41 	bl	800a368 <osDelayUntil>

		HAL_GPIO_TogglePin(LED_D_GPIO_Port, LED_D_Pin);
 800c6e6:	2120      	movs	r1, #32
 800c6e8:	4819      	ldr	r0, [pc, #100]	; (800c750 <blinky_task+0xc8>)
 800c6ea:	f7f6 fad4 	bl	8002c96 <HAL_GPIO_TogglePin>
		osDelayUntil(&t, period);
 800c6ee:	f107 0308 	add.w	r3, r7, #8
 800c6f2:	68f9      	ldr	r1, [r7, #12]
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	f7fd fe37 	bl	800a368 <osDelayUntil>

		HAL_GPIO_TogglePin(LED_E_GPIO_Port, LED_E_Pin);
 800c6fa:	2110      	movs	r1, #16
 800c6fc:	4814      	ldr	r0, [pc, #80]	; (800c750 <blinky_task+0xc8>)
 800c6fe:	f7f6 faca 	bl	8002c96 <HAL_GPIO_TogglePin>
		osDelayUntil(&t, period);
 800c702:	f107 0308 	add.w	r3, r7, #8
 800c706:	68f9      	ldr	r1, [r7, #12]
 800c708:	4618      	mov	r0, r3
 800c70a:	f7fd fe2d 	bl	800a368 <osDelayUntil>

		HAL_GPIO_TogglePin(LED_F_GPIO_Port, LED_F_Pin);
 800c70e:	2108      	movs	r1, #8
 800c710:	480f      	ldr	r0, [pc, #60]	; (800c750 <blinky_task+0xc8>)
 800c712:	f7f6 fac0 	bl	8002c96 <HAL_GPIO_TogglePin>
		osDelayUntil(&t, period);
 800c716:	f107 0308 	add.w	r3, r7, #8
 800c71a:	68f9      	ldr	r1, [r7, #12]
 800c71c:	4618      	mov	r0, r3
 800c71e:	f7fd fe23 	bl	800a368 <osDelayUntil>

		HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
 800c722:	2104      	movs	r1, #4
 800c724:	480a      	ldr	r0, [pc, #40]	; (800c750 <blinky_task+0xc8>)
 800c726:	f7f6 fab6 	bl	8002c96 <HAL_GPIO_TogglePin>
		osDelayUntil(&t, period);
 800c72a:	f107 0308 	add.w	r3, r7, #8
 800c72e:	68f9      	ldr	r1, [r7, #12]
 800c730:	4618      	mov	r0, r3
 800c732:	f7fd fe19 	bl	800a368 <osDelayUntil>

		HAL_GPIO_TogglePin(LED_H_GPIO_Port, LED_H_Pin);
 800c736:	2102      	movs	r1, #2
 800c738:	4805      	ldr	r0, [pc, #20]	; (800c750 <blinky_task+0xc8>)
 800c73a:	f7f6 faac 	bl	8002c96 <HAL_GPIO_TogglePin>
		osDelayUntil(&t, period);
 800c73e:	f107 0308 	add.w	r3, r7, #8
 800c742:	68f9      	ldr	r1, [r7, #12]
 800c744:	4618      	mov	r0, r3
 800c746:	f7fd fe0f 	bl	800a368 <osDelayUntil>
		HAL_GPIO_TogglePin(LED_A_GPIO_Port, LED_A_Pin);
 800c74a:	e7ad      	b.n	800c6a8 <blinky_task+0x20>
 800c74c:	0800c669 	.word	0x0800c669
 800c750:	40021800 	.word	0x40021800

0800c754 <hw_init>:
osThreadId timer_task_t;
osThreadId blinky_task_t;
osThreadId protocol_task_t;
osThreadId protocol_test_task_t;

void hw_init() { soft_timer_init(); }
 800c754:	b580      	push	{r7, lr}
 800c756:	af00      	add	r7, sp, #0
 800c758:	f002 fdf6 	bl	800f348 <soft_timer_init>
 800c75c:	bf00      	nop
 800c75e:	bd80      	pop	{r7, pc}

0800c760 <init_task>:

void init_task() {
 800c760:	b5b0      	push	{r4, r5, r7, lr}
 800c762:	b094      	sub	sp, #80	; 0x50
 800c764:	af00      	add	r7, sp, #0
  osThreadDef(TIMER_1MS, timer_task, osPriorityRealtime, 0, 512);
 800c766:	4b23      	ldr	r3, [pc, #140]	; (800c7f4 <init_task+0x94>)
 800c768:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800c76c:	461d      	mov	r5, r3
 800c76e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c770:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c772:	682b      	ldr	r3, [r5, #0]
 800c774:	6023      	str	r3, [r4, #0]
  timer_task_t = osThreadCreate(osThread(TIMER_1MS), NULL);
 800c776:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c77a:	2100      	movs	r1, #0
 800c77c:	4618      	mov	r0, r3
 800c77e:	f7fd fd2c 	bl	800a1da <osThreadCreate>
 800c782:	4603      	mov	r3, r0
 800c784:	4a1c      	ldr	r2, [pc, #112]	; (800c7f8 <init_task+0x98>)
 800c786:	6013      	str	r3, [r2, #0]

  osThreadDef(BLINKY_TASK, blinky_task, osPriorityIdle, 0, 128);
 800c788:	4b1c      	ldr	r3, [pc, #112]	; (800c7fc <init_task+0x9c>)
 800c78a:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800c78e:	461d      	mov	r5, r3
 800c790:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c792:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c794:	682b      	ldr	r3, [r5, #0]
 800c796:	6023      	str	r3, [r4, #0]
  blinky_task_t = osThreadCreate(osThread(BLINKY_TASK), NULL);
 800c798:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c79c:	2100      	movs	r1, #0
 800c79e:	4618      	mov	r0, r3
 800c7a0:	f7fd fd1b 	bl	800a1da <osThreadCreate>
 800c7a4:	4603      	mov	r3, r0
 800c7a6:	4a16      	ldr	r2, [pc, #88]	; (800c800 <init_task+0xa0>)
 800c7a8:	6013      	str	r3, [r2, #0]

  osThreadDef(PROTOCOL_TASK, protocol_task, osPriorityHigh, 0, 4096);
 800c7aa:	4b16      	ldr	r3, [pc, #88]	; (800c804 <init_task+0xa4>)
 800c7ac:	f107 0414 	add.w	r4, r7, #20
 800c7b0:	461d      	mov	r5, r3
 800c7b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c7b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c7b6:	682b      	ldr	r3, [r5, #0]
 800c7b8:	6023      	str	r3, [r4, #0]
  protocol_task_t = osThreadCreate(osThread(PROTOCOL_TASK), NULL);
 800c7ba:	f107 0314 	add.w	r3, r7, #20
 800c7be:	2100      	movs	r1, #0
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	f7fd fd0a 	bl	800a1da <osThreadCreate>
 800c7c6:	4603      	mov	r3, r0
 800c7c8:	4a0f      	ldr	r2, [pc, #60]	; (800c808 <init_task+0xa8>)
 800c7ca:	6013      	str	r3, [r2, #0]

  osThreadDef(PROTOCOL_TEST_TASK, protocol_test_task, osPriorityNormal, 0,
 800c7cc:	4b0f      	ldr	r3, [pc, #60]	; (800c80c <init_task+0xac>)
 800c7ce:	463c      	mov	r4, r7
 800c7d0:	461d      	mov	r5, r3
 800c7d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c7d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c7d6:	682b      	ldr	r3, [r5, #0]
 800c7d8:	6023      	str	r3, [r4, #0]
              4096);
  protocol_test_task_t = osThreadCreate(osThread(PROTOCOL_TEST_TASK), NULL);
 800c7da:	463b      	mov	r3, r7
 800c7dc:	2100      	movs	r1, #0
 800c7de:	4618      	mov	r0, r3
 800c7e0:	f7fd fcfb 	bl	800a1da <osThreadCreate>
 800c7e4:	4603      	mov	r3, r0
 800c7e6:	4a0a      	ldr	r2, [pc, #40]	; (800c810 <init_task+0xb0>)
 800c7e8:	6013      	str	r3, [r2, #0]
}
 800c7ea:	bf00      	nop
 800c7ec:	3750      	adds	r7, #80	; 0x50
 800c7ee:	46bd      	mov	sp, r7
 800c7f0:	bdb0      	pop	{r4, r5, r7, pc}
 800c7f2:	bf00      	nop
 800c7f4:	0800f9a8 	.word	0x0800f9a8
 800c7f8:	20011210 	.word	0x20011210
 800c7fc:	0800f9c8 	.word	0x0800f9c8
 800c800:	20011214 	.word	0x20011214
 800c804:	0800f9ec 	.word	0x0800f9ec
 800c808:	20011218 	.word	0x20011218
 800c80c:	0800fa14 	.word	0x0800fa14
 800c810:	2001121c 	.word	0x2001121c

0800c814 <protocol_test_task_init>:
static int32_t report_firmware_version(uint8_t *buff, uint16_t len);
static int32_t chassis_speed_ctrl(uint8_t *buff, uint16_t len);
static int32_t chassis_spd_acc_ctrl(uint8_t *buff, uint16_t len);
static int32_t chassis_push_info(void *argc);

void protocol_test_task_init(void) {
 800c814:	b580      	push	{r7, lr}
 800c816:	af00      	add	r7, sp, #0
  protocol_rcv_cmd_register(CMD_MANIFOLD2_HEART, manifold2_heart_package);
 800c818:	490a      	ldr	r1, [pc, #40]	; (800c844 <protocol_test_task_init+0x30>)
 800c81a:	2001      	movs	r0, #1
 800c81c:	f000 fa4a 	bl	800ccb4 <protocol_rcv_cmd_register>
  protocol_rcv_cmd_register(CMD_REPORT_VERSION, report_firmware_version);
 800c820:	4909      	ldr	r1, [pc, #36]	; (800c848 <protocol_test_task_init+0x34>)
 800c822:	2002      	movs	r0, #2
 800c824:	f000 fa46 	bl	800ccb4 <protocol_rcv_cmd_register>
  protocol_rcv_cmd_register(CMD_SET_CHASSIS_SPEED, chassis_speed_ctrl);
 800c828:	4908      	ldr	r1, [pc, #32]	; (800c84c <protocol_test_task_init+0x38>)
 800c82a:	f240 2003 	movw	r0, #515	; 0x203
 800c82e:	f000 fa41 	bl	800ccb4 <protocol_rcv_cmd_register>
  //  protocol_rcv_cmd_register(CMD_SET_CHASSIS_SPD_ACC, chassis_spd_acc_ctrl);
  soft_timer_register(chassis_push_info, NULL, 1000);
 800c832:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c836:	2100      	movs	r1, #0
 800c838:	4805      	ldr	r0, [pc, #20]	; (800c850 <protocol_test_task_init+0x3c>)
 800c83a:	f000 f959 	bl	800caf0 <soft_timer_register>
}
 800c83e:	bf00      	nop
 800c840:	bd80      	pop	{r7, pc}
 800c842:	bf00      	nop
 800c844:	0800c925 	.word	0x0800c925
 800c848:	0800c905 	.word	0x0800c905
 800c84c:	0800c889 	.word	0x0800c889
 800c850:	0800c8b5 	.word	0x0800c8b5

0800c854 <protocol_test_task>:

void protocol_test_task(void) {
 800c854:	b580      	push	{r7, lr}
 800c856:	b084      	sub	sp, #16
 800c858:	af00      	add	r7, sp, #0
  protocol_test_task_init();
 800c85a:	f7ff ffdb 	bl	800c814 <protocol_test_task_init>
  osEvent event;
  while (1) {
    event = osSignalWait(
 800c85e:	463b      	mov	r3, r7
 800c860:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800c864:	2111      	movs	r1, #17
 800c866:	4618      	mov	r0, r3
 800c868:	f7fd fd32 	bl	800a2d0 <osSignalWait>
        MANIFOLD2_CHASSIS_SIGNAL | MANIFOLD2_CHASSIS_ACC_SIGNAL, 500);

    if (event.status == osEventSignal) {
 800c86c:	683b      	ldr	r3, [r7, #0]
 800c86e:	2b08      	cmp	r3, #8
 800c870:	d1f5      	bne.n	800c85e <protocol_test_task+0xa>
      if (event.value.signals & MANIFOLD2_CHASSIS_SIGNAL) {
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	f003 0301 	and.w	r3, r3, #1
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d0f0      	beq.n	800c85e <protocol_test_task+0xa>
        struct cmd_chassis_speed *pspeed;
        pspeed = &manifold_cmd.chassis_speed;
 800c87c:	4b01      	ldr	r3, [pc, #4]	; (800c884 <protocol_test_task+0x30>)
 800c87e:	60fb      	str	r3, [r7, #12]
    event = osSignalWait(
 800c880:	e7ed      	b.n	800c85e <protocol_test_task+0xa>
 800c882:	bf00      	nop
 800c884:	20011234 	.word	0x20011234

0800c888 <chassis_speed_ctrl>:
      //      }
    }
  }
}

int32_t chassis_speed_ctrl(uint8_t *buff, uint16_t len) {
 800c888:	b580      	push	{r7, lr}
 800c88a:	b082      	sub	sp, #8
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	6078      	str	r0, [r7, #4]
 800c890:	460b      	mov	r3, r1
 800c892:	807b      	strh	r3, [r7, #2]
  if (len == sizeof(struct cmd_chassis_speed)) {
 800c894:	887b      	ldrh	r3, [r7, #2]
 800c896:	2b0a      	cmp	r3, #10
 800c898:	d105      	bne.n	800c8a6 <chassis_speed_ctrl+0x1e>
    // memcpy(&manifold_cmd.chassis_speed, buff, len);
    osSignalSet(protocol_test_task_t, MANIFOLD2_CHASSIS_SIGNAL);
 800c89a:	4b05      	ldr	r3, [pc, #20]	; (800c8b0 <chassis_speed_ctrl+0x28>)
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	2101      	movs	r1, #1
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	f7fd fcd5 	bl	800a250 <osSignalSet>
  }
  return 0;
 800c8a6:	2300      	movs	r3, #0
}
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	3708      	adds	r7, #8
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	bd80      	pop	{r7, pc}
 800c8b0:	2001121c 	.word	0x2001121c

0800c8b4 <chassis_push_info>:
//     osSignalSet(protocol_test_task_t, MANIFOLD2_CHASSIS_ACC_SIGNAL);
//   }
//   return 0;
// }

int32_t chassis_push_info(void *argc) {
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b082      	sub	sp, #8
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]
  cmd_chassis_info.gyro_angle = 0;
 800c8bc:	4b10      	ldr	r3, [pc, #64]	; (800c900 <chassis_push_info+0x4c>)
 800c8be:	2200      	movs	r2, #0
 800c8c0:	801a      	strh	r2, [r3, #0]
  cmd_chassis_info.gyro_palstance = 0;
 800c8c2:	4b0f      	ldr	r3, [pc, #60]	; (800c900 <chassis_push_info+0x4c>)
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	805a      	strh	r2, [r3, #2]
  cmd_chassis_info.position_x_mm = 0;
 800c8c8:	4b0d      	ldr	r3, [pc, #52]	; (800c900 <chassis_push_info+0x4c>)
 800c8ca:	2200      	movs	r2, #0
 800c8cc:	605a      	str	r2, [r3, #4]
  cmd_chassis_info.position_y_mm = 0;
 800c8ce:	4b0c      	ldr	r3, [pc, #48]	; (800c900 <chassis_push_info+0x4c>)
 800c8d0:	2200      	movs	r2, #0
 800c8d2:	609a      	str	r2, [r3, #8]
  cmd_chassis_info.angle_deg = 0;
 800c8d4:	4b0a      	ldr	r3, [pc, #40]	; (800c900 <chassis_push_info+0x4c>)
 800c8d6:	2200      	movs	r2, #0
 800c8d8:	819a      	strh	r2, [r3, #12]
  cmd_chassis_info.v_x_mm = 0;
 800c8da:	4b09      	ldr	r3, [pc, #36]	; (800c900 <chassis_push_info+0x4c>)
 800c8dc:	2200      	movs	r2, #0
 800c8de:	81da      	strh	r2, [r3, #14]
  cmd_chassis_info.v_y_mm = 0;
 800c8e0:	4b07      	ldr	r3, [pc, #28]	; (800c900 <chassis_push_info+0x4c>)
 800c8e2:	2200      	movs	r2, #0
 800c8e4:	821a      	strh	r2, [r3, #16]

  protocol_send(MANIFOLD2_ADDRESS, CMD_PUSH_CHASSIS_INFO, &cmd_chassis_info,
 800c8e6:	2314      	movs	r3, #20
 800c8e8:	4a05      	ldr	r2, [pc, #20]	; (800c900 <chassis_push_info+0x4c>)
 800c8ea:	f240 2101 	movw	r1, #513	; 0x201
 800c8ee:	2000      	movs	r0, #0
 800c8f0:	f000 fa90 	bl	800ce14 <protocol_send>
                sizeof(cmd_chassis_info));

  return 0;
 800c8f4:	2300      	movs	r3, #0
}
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	3708      	adds	r7, #8
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	bd80      	pop	{r7, pc}
 800c8fe:	bf00      	nop
 800c900:	20011220 	.word	0x20011220

0800c904 <report_firmware_version>:

int32_t report_firmware_version(uint8_t *buff, uint16_t len) {
 800c904:	b480      	push	{r7}
 800c906:	b083      	sub	sp, #12
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]
 800c90c:	460b      	mov	r3, r1
 800c90e:	807b      	strh	r3, [r7, #2]
  return FIRMWARE_VERSION;
 800c910:	4b03      	ldr	r3, [pc, #12]	; (800c920 <report_firmware_version+0x1c>)
}
 800c912:	4618      	mov	r0, r3
 800c914:	370c      	adds	r7, #12
 800c916:	46bd      	mov	sp, r7
 800c918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91c:	4770      	bx	lr
 800c91e:	bf00      	nop
 800c920:	01000106 	.word	0x01000106

0800c924 <manifold2_heart_package>:

int32_t manifold2_heart_package(uint8_t *buff, uint16_t len) {
 800c924:	b580      	push	{r7, lr}
 800c926:	b082      	sub	sp, #8
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
 800c92c:	460b      	mov	r3, r1
 800c92e:	807b      	strh	r3, [r7, #2]
  HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 800c930:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800c934:	4803      	ldr	r0, [pc, #12]	; (800c944 <manifold2_heart_package+0x20>)
 800c936:	f7f6 f9ae 	bl	8002c96 <HAL_GPIO_TogglePin>
  return 0;
 800c93a:	2300      	movs	r3, #0
}
 800c93c:	4618      	mov	r0, r3
 800c93e:	3708      	adds	r7, #8
 800c940:	46bd      	mov	sp, r7
 800c942:	bd80      	pop	{r7, pc}
 800c944:	40021400 	.word	0x40021400

0800c948 <protocol_task_init>:

static void protocol_send_success_callback(void);
static int32_t usb_interface_send(uint8_t *p_data, uint32_t len);
static int32_t usb_rcv_callback(uint8_t *buf, uint32_t len);

void protocol_task_init(void) {
 800c948:	b580      	push	{r7, lr}
 800c94a:	b082      	sub	sp, #8
 800c94c:	af02      	add	r7, sp, #8
  usb_vcp_init(true);
 800c94e:	2001      	movs	r0, #1
 800c950:	f002 fdba 	bl	800f4c8 <usb_vcp_init>
  protocol_local_init(CHASSIS_ADDRESS);
 800c954:	2001      	movs	r0, #1
 800c956:	f000 f9e9 	bl	800cd2c <protocol_local_init>
  protocol_uart_interface_register("manifold2", 4096, 1, PROTOCOL_USB_PORT,
 800c95a:	4b0d      	ldr	r3, [pc, #52]	; (800c990 <protocol_task_init+0x48>)
 800c95c:	9300      	str	r3, [sp, #0]
 800c95e:	2300      	movs	r3, #0
 800c960:	2201      	movs	r2, #1
 800c962:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c966:	480b      	ldr	r0, [pc, #44]	; (800c994 <protocol_task_init+0x4c>)
 800c968:	f000 fc76 	bl	800d258 <protocol_uart_interface_register>
                                   usb_interface_send);
  protocol_set_route(MANIFOLD2_ADDRESS, "manifold2");
 800c96c:	4909      	ldr	r1, [pc, #36]	; (800c994 <protocol_task_init+0x4c>)
 800c96e:	2000      	movs	r0, #0
 800c970:	f000 fd34 	bl	800d3dc <protocol_set_route>

  usb_vcp_rx_callback_register(usb_rcv_callback);
 800c974:	4808      	ldr	r0, [pc, #32]	; (800c998 <protocol_task_init+0x50>)
 800c976:	f002 fe29 	bl	800f5cc <usb_vcp_rx_callback_register>
  soft_timer_register(usb_tx_flush_run, NULL, 1);
 800c97a:	2201      	movs	r2, #1
 800c97c:	2100      	movs	r1, #0
 800c97e:	4807      	ldr	r0, [pc, #28]	; (800c99c <protocol_task_init+0x54>)
 800c980:	f000 f8b6 	bl	800caf0 <soft_timer_register>
  protocol_send_list_add_callback_reg(protocol_send_success_callback);
 800c984:	4806      	ldr	r0, [pc, #24]	; (800c9a0 <protocol_task_init+0x58>)
 800c986:	f000 fb93 	bl	800d0b0 <protocol_send_list_add_callback_reg>
}
 800c98a:	bf00      	nop
 800c98c:	46bd      	mov	sp, r7
 800c98e:	bd80      	pop	{r7, pc}
 800c990:	0800c9e1 	.word	0x0800c9e1
 800c994:	0800fa28 	.word	0x0800fa28
 800c998:	0800ca19 	.word	0x0800ca19
 800c99c:	0800f6d1 	.word	0x0800f6d1
 800c9a0:	0800ca01 	.word	0x0800ca01

0800c9a4 <protocol_task>:

void protocol_task(void) {
 800c9a4:	b580      	push	{r7, lr}
 800c9a6:	b084      	sub	sp, #16
 800c9a8:	af00      	add	r7, sp, #0
  protocol_task_init();
 800c9aa:	f7ff ffcd 	bl	800c948 <protocol_task_init>
  while (1) {
    osEvent event;

    event = osSignalWait(SEND_PROTOCOL_SIGNAL | RECV_PROTOCOL_SIGNAL,
 800c9ae:	1d3b      	adds	r3, r7, #4
 800c9b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c9b4:	2103      	movs	r1, #3
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	f7fd fc8a 	bl	800a2d0 <osSignalWait>
                         osWaitForever);

    if (event.status == osEventSignal) {
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	2b08      	cmp	r3, #8
 800c9c0:	d1f5      	bne.n	800c9ae <protocol_task+0xa>
      if (event.value.signals & SEND_PROTOCOL_SIGNAL) {
 800c9c2:	68bb      	ldr	r3, [r7, #8]
 800c9c4:	f003 0302 	and.w	r3, r3, #2
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d001      	beq.n	800c9d0 <protocol_task+0x2c>
        protocol_send_flush();
 800c9cc:	f000 faa6 	bl	800cf1c <protocol_send_flush>
      }

      if (event.value.signals & RECV_PROTOCOL_SIGNAL) {
 800c9d0:	68bb      	ldr	r3, [r7, #8]
 800c9d2:	f003 0301 	and.w	r3, r3, #1
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d0e9      	beq.n	800c9ae <protocol_task+0xa>
        protocol_unpack_flush();
 800c9da:	f000 faf3 	bl	800cfc4 <protocol_unpack_flush>
  while (1) {
 800c9de:	e7e6      	b.n	800c9ae <protocol_task+0xa>

0800c9e0 <usb_interface_send>:
      }
    }
  }
}

static int32_t usb_interface_send(uint8_t *p_data, uint32_t len) {
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b082      	sub	sp, #8
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	6078      	str	r0, [r7, #4]
 800c9e8:	6039      	str	r1, [r7, #0]
  usb_vcp_tx_write_fifo(p_data, len);
 800c9ea:	683b      	ldr	r3, [r7, #0]
 800c9ec:	b29b      	uxth	r3, r3
 800c9ee:	4619      	mov	r1, r3
 800c9f0:	6878      	ldr	r0, [r7, #4]
 800c9f2:	f002 fdd1 	bl	800f598 <usb_vcp_tx_write_fifo>
  return 0;
 800c9f6:	2300      	movs	r3, #0
}
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	3708      	adds	r7, #8
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	bd80      	pop	{r7, pc}

0800ca00 <protocol_send_success_callback>:

static void protocol_send_success_callback(void) {
 800ca00:	b580      	push	{r7, lr}
 800ca02:	af00      	add	r7, sp, #0
  osSignalSet(protocol_task_t, SEND_PROTOCOL_SIGNAL);
 800ca04:	4b03      	ldr	r3, [pc, #12]	; (800ca14 <protocol_send_success_callback+0x14>)
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	2102      	movs	r1, #2
 800ca0a:	4618      	mov	r0, r3
 800ca0c:	f7fd fc20 	bl	800a250 <osSignalSet>
}
 800ca10:	bf00      	nop
 800ca12:	bd80      	pop	{r7, pc}
 800ca14:	20011218 	.word	0x20011218

0800ca18 <usb_rcv_callback>:

static int32_t usb_rcv_callback(uint8_t *buf, uint32_t len) {
 800ca18:	b580      	push	{r7, lr}
 800ca1a:	b082      	sub	sp, #8
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	6078      	str	r0, [r7, #4]
 800ca20:	6039      	str	r1, [r7, #0]
  protocol_uart_rcv_data(PROTOCOL_USB_PORT, buf, len);
 800ca22:	683a      	ldr	r2, [r7, #0]
 800ca24:	6879      	ldr	r1, [r7, #4]
 800ca26:	2000      	movs	r0, #0
 800ca28:	f000 fc9a 	bl	800d360 <protocol_uart_rcv_data>
  osSignalSet(protocol_task_t, RECV_PROTOCOL_SIGNAL);
 800ca2c:	4b05      	ldr	r3, [pc, #20]	; (800ca44 <usb_rcv_callback+0x2c>)
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	2101      	movs	r1, #1
 800ca32:	4618      	mov	r0, r3
 800ca34:	f7fd fc0c 	bl	800a250 <osSignalSet>
  return len;
 800ca38:	683b      	ldr	r3, [r7, #0]
}
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	3708      	adds	r7, #8
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	bd80      	pop	{r7, pc}
 800ca42:	bf00      	nop
 800ca44:	20011218 	.word	0x20011218

0800ca48 <timer_task>:
 * The function runs in an infinite loop and delays for a specified period.
 * 
 * @param argument Pointer to the task argument (not used in this function).
 */
void timer_task(void const *argument)
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b084      	sub	sp, #16
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	6078      	str	r0, [r7, #4]
  uint32_t period = osKernelSysTick();
 800ca50:	f7fd fbb3 	bl	800a1ba <osKernelSysTick>
 800ca54:	4603      	mov	r3, r0
 800ca56:	60bb      	str	r3, [r7, #8]

  while (1)
  {
    TimerISR_Hook();
 800ca58:	f002 fc4a 	bl	800f2f0 <TimerISR_Hook>

    for (int i = 0; i < TIMER_ELEMENT_NUM_MAX - 1; i++)
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	60fb      	str	r3, [r7, #12]
 800ca60:	e03a      	b.n	800cad8 <timer_task+0x90>
    {
      if ((soft_timer[i].id != 0) && (soft_timer[i].soft_timer_callback != NULL))
 800ca62:	4a22      	ldr	r2, [pc, #136]	; (800caec <timer_task+0xa4>)
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	011b      	lsls	r3, r3, #4
 800ca68:	4413      	add	r3, r2
 800ca6a:	781b      	ldrb	r3, [r3, #0]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d030      	beq.n	800cad2 <timer_task+0x8a>
 800ca70:	4a1e      	ldr	r2, [pc, #120]	; (800caec <timer_task+0xa4>)
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	011b      	lsls	r3, r3, #4
 800ca76:	4413      	add	r3, r2
 800ca78:	330c      	adds	r3, #12
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d028      	beq.n	800cad2 <timer_task+0x8a>
      {
        if (soft_timer_check(soft_timer[i].id) == SOFT_TIMER_TIMEOUT)
 800ca80:	4a1a      	ldr	r2, [pc, #104]	; (800caec <timer_task+0xa4>)
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	011b      	lsls	r3, r3, #4
 800ca86:	4413      	add	r3, r2
 800ca88:	781b      	ldrb	r3, [r3, #0]
 800ca8a:	b29b      	uxth	r3, r3
 800ca8c:	4618      	mov	r0, r3
 800ca8e:	f002 fceb 	bl	800f468 <soft_timer_check>
 800ca92:	4603      	mov	r3, r0
 800ca94:	2b02      	cmp	r3, #2
 800ca96:	d11c      	bne.n	800cad2 <timer_task+0x8a>
        {
          soft_timer[i].soft_timer_callback(soft_timer[i].argc);
 800ca98:	4a14      	ldr	r2, [pc, #80]	; (800caec <timer_task+0xa4>)
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	011b      	lsls	r3, r3, #4
 800ca9e:	4413      	add	r3, r2
 800caa0:	330c      	adds	r3, #12
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	4911      	ldr	r1, [pc, #68]	; (800caec <timer_task+0xa4>)
 800caa6:	68fa      	ldr	r2, [r7, #12]
 800caa8:	0112      	lsls	r2, r2, #4
 800caaa:	440a      	add	r2, r1
 800caac:	3208      	adds	r2, #8
 800caae:	6812      	ldr	r2, [r2, #0]
 800cab0:	4610      	mov	r0, r2
 800cab2:	4798      	blx	r3

          soft_timer_update(soft_timer[i].id, soft_timer[i].ticks);
 800cab4:	4a0d      	ldr	r2, [pc, #52]	; (800caec <timer_task+0xa4>)
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	011b      	lsls	r3, r3, #4
 800caba:	4413      	add	r3, r2
 800cabc:	781b      	ldrb	r3, [r3, #0]
 800cabe:	4618      	mov	r0, r3
 800cac0:	4a0a      	ldr	r2, [pc, #40]	; (800caec <timer_task+0xa4>)
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	011b      	lsls	r3, r3, #4
 800cac6:	4413      	add	r3, r2
 800cac8:	3304      	adds	r3, #4
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	4619      	mov	r1, r3
 800cace:	f002 fc97 	bl	800f400 <soft_timer_update>
    for (int i = 0; i < TIMER_ELEMENT_NUM_MAX - 1; i++)
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	3301      	adds	r3, #1
 800cad6:	60fb      	str	r3, [r7, #12]
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	2b12      	cmp	r3, #18
 800cadc:	ddc1      	ble.n	800ca62 <timer_task+0x1a>
        }
      }
    }

    osDelayUntil(&period, 1);
 800cade:	f107 0308 	add.w	r3, r7, #8
 800cae2:	2101      	movs	r1, #1
 800cae4:	4618      	mov	r0, r3
 800cae6:	f7fd fc3f 	bl	800a368 <osDelayUntil>
    TimerISR_Hook();
 800caea:	e7b5      	b.n	800ca58 <timer_task+0x10>
 800caec:	20011250 	.word	0x20011250

0800caf0 <soft_timer_register>:
 *
 * @return                    The index of the registered timer element if successful,
 *                            or -1 if the registration fails (e.g., no available timer element).
 */
int32_t soft_timer_register(int32_t (*soft_timer_callback)(void *argc), void *argc, uint32_t ticks)
{
 800caf0:	b580      	push	{r7, lr}
 800caf2:	b086      	sub	sp, #24
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	60f8      	str	r0, [r7, #12]
 800caf8:	60b9      	str	r1, [r7, #8]
 800cafa:	607a      	str	r2, [r7, #4]
  for (int i = 0; i < TIMER_ELEMENT_NUM_MAX - 1; i++)
 800cafc:	2300      	movs	r3, #0
 800cafe:	617b      	str	r3, [r7, #20]
 800cb00:	e02b      	b.n	800cb5a <soft_timer_register+0x6a>
  {
    if (soft_timer[i].id == 0)
 800cb02:	4a1a      	ldr	r2, [pc, #104]	; (800cb6c <soft_timer_register+0x7c>)
 800cb04:	697b      	ldr	r3, [r7, #20]
 800cb06:	011b      	lsls	r3, r3, #4
 800cb08:	4413      	add	r3, r2
 800cb0a:	781b      	ldrb	r3, [r3, #0]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d121      	bne.n	800cb54 <soft_timer_register+0x64>
    {
      soft_timer[i].id = soft_timer_req(ticks);
 800cb10:	6878      	ldr	r0, [r7, #4]
 800cb12:	f002 fc3b 	bl	800f38c <soft_timer_req>
 800cb16:	4603      	mov	r3, r0
 800cb18:	b2d9      	uxtb	r1, r3
 800cb1a:	4a14      	ldr	r2, [pc, #80]	; (800cb6c <soft_timer_register+0x7c>)
 800cb1c:	697b      	ldr	r3, [r7, #20]
 800cb1e:	011b      	lsls	r3, r3, #4
 800cb20:	4413      	add	r3, r2
 800cb22:	460a      	mov	r2, r1
 800cb24:	701a      	strb	r2, [r3, #0]
      soft_timer[i].ticks = ticks;
 800cb26:	4a11      	ldr	r2, [pc, #68]	; (800cb6c <soft_timer_register+0x7c>)
 800cb28:	697b      	ldr	r3, [r7, #20]
 800cb2a:	011b      	lsls	r3, r3, #4
 800cb2c:	4413      	add	r3, r2
 800cb2e:	3304      	adds	r3, #4
 800cb30:	687a      	ldr	r2, [r7, #4]
 800cb32:	601a      	str	r2, [r3, #0]
      soft_timer[i].argc = argc;
 800cb34:	4a0d      	ldr	r2, [pc, #52]	; (800cb6c <soft_timer_register+0x7c>)
 800cb36:	697b      	ldr	r3, [r7, #20]
 800cb38:	011b      	lsls	r3, r3, #4
 800cb3a:	4413      	add	r3, r2
 800cb3c:	3308      	adds	r3, #8
 800cb3e:	68ba      	ldr	r2, [r7, #8]
 800cb40:	601a      	str	r2, [r3, #0]
      soft_timer[i].soft_timer_callback = soft_timer_callback;
 800cb42:	4a0a      	ldr	r2, [pc, #40]	; (800cb6c <soft_timer_register+0x7c>)
 800cb44:	697b      	ldr	r3, [r7, #20]
 800cb46:	011b      	lsls	r3, r3, #4
 800cb48:	4413      	add	r3, r2
 800cb4a:	330c      	adds	r3, #12
 800cb4c:	68fa      	ldr	r2, [r7, #12]
 800cb4e:	601a      	str	r2, [r3, #0]
      return i;
 800cb50:	697b      	ldr	r3, [r7, #20]
 800cb52:	e007      	b.n	800cb64 <soft_timer_register+0x74>
  for (int i = 0; i < TIMER_ELEMENT_NUM_MAX - 1; i++)
 800cb54:	697b      	ldr	r3, [r7, #20]
 800cb56:	3301      	adds	r3, #1
 800cb58:	617b      	str	r3, [r7, #20]
 800cb5a:	697b      	ldr	r3, [r7, #20]
 800cb5c:	2b12      	cmp	r3, #18
 800cb5e:	ddd0      	ble.n	800cb02 <soft_timer_register+0x12>
    }
  }
  return -1;
 800cb60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800cb64:	4618      	mov	r0, r3
 800cb66:	3718      	adds	r7, #24
 800cb68:	46bd      	mov	sp, r7
 800cb6a:	bd80      	pop	{r7, pc}
 800cb6c:	20011250 	.word	0x20011250

0800cb70 <INIT_LIST_HEAD>:

#define LIST_HEAD(name) \
  list_t name = LIST_HEAD_INIT(name)

static __inline void INIT_LIST_HEAD(list_t *list)
{
 800cb70:	b480      	push	{r7}
 800cb72:	b083      	sub	sp, #12
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
  list->next = list;
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	687a      	ldr	r2, [r7, #4]
 800cb7c:	601a      	str	r2, [r3, #0]
  list->prev = list;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	687a      	ldr	r2, [r7, #4]
 800cb82:	605a      	str	r2, [r3, #4]
}
 800cb84:	bf00      	nop
 800cb86:	370c      	adds	r7, #12
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8e:	4770      	bx	lr

0800cb90 <protocol_get_send_cmd_info>:
/* Exported functions --------------------------------------------------------*/

struct send_cmd_info *protocol_get_send_cmd_info(uint16_t cmd) {
  for (int i = 0; i < PROTOCOL_CMD_MAX_NUM; i++) {
    if ((protocol_local_info.send_cmd_info[i].cmd == cmd) &&
        (protocol_local_info.send_cmd_info[i].used == 1)) {
 800cb90:	b480      	push	{r7}
 800cb92:	b085      	sub	sp, #20
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	4603      	mov	r3, r0
 800cb98:	80fb      	strh	r3, [r7, #6]
      return &protocol_local_info.send_cmd_info[i];
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	60fb      	str	r3, [r7, #12]
 800cb9e:	e01c      	b.n	800cbda <protocol_get_send_cmd_info+0x4a>
    }
  }
 800cba0:	4a13      	ldr	r2, [pc, #76]	; (800cbf0 <protocol_get_send_cmd_info+0x60>)
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	011b      	lsls	r3, r3, #4
 800cba6:	4413      	add	r3, r2
 800cba8:	f203 239a 	addw	r3, r3, #666	; 0x29a
 800cbac:	881b      	ldrh	r3, [r3, #0]
 800cbae:	88fa      	ldrh	r2, [r7, #6]
 800cbb0:	429a      	cmp	r2, r3
 800cbb2:	d10f      	bne.n	800cbd4 <protocol_get_send_cmd_info+0x44>
 800cbb4:	4a0e      	ldr	r2, [pc, #56]	; (800cbf0 <protocol_get_send_cmd_info+0x60>)
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	011b      	lsls	r3, r3, #4
 800cbba:	4413      	add	r3, r2
 800cbbc:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800cbc0:	781b      	ldrb	r3, [r3, #0]
 800cbc2:	2b01      	cmp	r3, #1
 800cbc4:	d106      	bne.n	800cbd4 <protocol_get_send_cmd_info+0x44>
  return NULL;
}
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	011b      	lsls	r3, r3, #4
 800cbca:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800cbce:	4a08      	ldr	r2, [pc, #32]	; (800cbf0 <protocol_get_send_cmd_info+0x60>)
 800cbd0:	4413      	add	r3, r2
 800cbd2:	e006      	b.n	800cbe2 <protocol_get_send_cmd_info+0x52>
      return &protocol_local_info.send_cmd_info[i];
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	3301      	adds	r3, #1
 800cbd8:	60fb      	str	r3, [r7, #12]
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	2b31      	cmp	r3, #49	; 0x31
 800cbde:	dddf      	ble.n	800cba0 <protocol_get_send_cmd_info+0x10>

static void protocol_rcv_pack_handle(uint8_t *pack_data, uint16_t cmd,
                                     uint8_t session, uint8_t source_add) {
 800cbe0:	2300      	movs	r3, #0
  protocol_pack_desc_t *pack;
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	3714      	adds	r7, #20
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbec:	4770      	bx	lr
 800cbee:	bf00      	nop
 800cbf0:	20011390 	.word	0x20011390

0800cbf4 <protocol_rcv_pack_handle>:
  uint16_t rcv_seq;
  int32_t err;
  rcv_seq = pack->seq_num;
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	b088      	sub	sp, #32
 800cbf8:	af02      	add	r7, sp, #8
 800cbfa:	6078      	str	r0, [r7, #4]
 800cbfc:	4608      	mov	r0, r1
 800cbfe:	4611      	mov	r1, r2
 800cc00:	461a      	mov	r2, r3
 800cc02:	4603      	mov	r3, r0
 800cc04:	807b      	strh	r3, [r7, #2]
 800cc06:	460b      	mov	r3, r1
 800cc08:	707b      	strb	r3, [r7, #1]
 800cc0a:	4613      	mov	r3, r2
 800cc0c:	703b      	strb	r3, [r7, #0]
  pack = (protocol_pack_desc_t *)(pack_data);

  for (int i = 0; i < PROTOCOL_CMD_MAX_NUM; i++) {
    if ((protocol_local_info.rcv_cmd_info[i].cmd == cmd) &&
 800cc0e:	693b      	ldr	r3, [r7, #16]
 800cc10:	7a1a      	ldrb	r2, [r3, #8]
 800cc12:	7a5b      	ldrb	r3, [r3, #9]
 800cc14:	021b      	lsls	r3, r3, #8
 800cc16:	4313      	orrs	r3, r2
 800cc18:	81fb      	strh	r3, [r7, #14]
        (protocol_local_info.rcv_cmd_info[i].rcv_callback != NULL) &&
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	613b      	str	r3, [r7, #16]
        (protocol_local_info.rcv_cmd_info[i].used == 1)) {
      err = protocol_local_info.rcv_cmd_info[i].rcv_callback(
 800cc1e:	2300      	movs	r3, #0
 800cc20:	617b      	str	r3, [r7, #20]
 800cc22:	e03d      	b.n	800cca0 <protocol_rcv_pack_handle+0xac>
          pack->pdata + 2, pack->data_len - PACK_HEADER_TAIL_LEN);
      if (session != 0) {
 800cc24:	4a22      	ldr	r2, [pc, #136]	; (800ccb0 <protocol_rcv_pack_handle+0xbc>)
 800cc26:	697b      	ldr	r3, [r7, #20]
 800cc28:	3321      	adds	r3, #33	; 0x21
 800cc2a:	00db      	lsls	r3, r3, #3
 800cc2c:	4413      	add	r3, r2
 800cc2e:	885b      	ldrh	r3, [r3, #2]
 800cc30:	887a      	ldrh	r2, [r7, #2]
 800cc32:	429a      	cmp	r2, r3
 800cc34:	d131      	bne.n	800cc9a <protocol_rcv_pack_handle+0xa6>
 800cc36:	4a1e      	ldr	r2, [pc, #120]	; (800ccb0 <protocol_rcv_pack_handle+0xbc>)
 800cc38:	697b      	ldr	r3, [r7, #20]
 800cc3a:	3321      	adds	r3, #33	; 0x21
 800cc3c:	00db      	lsls	r3, r3, #3
 800cc3e:	4413      	add	r3, r2
 800cc40:	685b      	ldr	r3, [r3, #4]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d029      	beq.n	800cc9a <protocol_rcv_pack_handle+0xa6>
 800cc46:	4a1a      	ldr	r2, [pc, #104]	; (800ccb0 <protocol_rcv_pack_handle+0xbc>)
 800cc48:	697b      	ldr	r3, [r7, #20]
 800cc4a:	3321      	adds	r3, #33	; 0x21
 800cc4c:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800cc50:	2b01      	cmp	r3, #1
 800cc52:	d122      	bne.n	800cc9a <protocol_rcv_pack_handle+0xa6>
        protocol_ack(source_add, session, &err, sizeof(err), rcv_seq);
      }
 800cc54:	4a16      	ldr	r2, [pc, #88]	; (800ccb0 <protocol_rcv_pack_handle+0xbc>)
 800cc56:	697b      	ldr	r3, [r7, #20]
 800cc58:	3321      	adds	r3, #33	; 0x21
 800cc5a:	00db      	lsls	r3, r3, #3
 800cc5c:	4413      	add	r3, r2
 800cc5e:	685a      	ldr	r2, [r3, #4]
 800cc60:	693b      	ldr	r3, [r7, #16]
 800cc62:	330c      	adds	r3, #12
 800cc64:	1c98      	adds	r0, r3, #2
 800cc66:	693b      	ldr	r3, [r7, #16]
 800cc68:	7859      	ldrb	r1, [r3, #1]
 800cc6a:	789b      	ldrb	r3, [r3, #2]
 800cc6c:	f003 0303 	and.w	r3, r3, #3
 800cc70:	021b      	lsls	r3, r3, #8
 800cc72:	430b      	orrs	r3, r1
 800cc74:	b29b      	uxth	r3, r3
 800cc76:	3b12      	subs	r3, #18
 800cc78:	b29b      	uxth	r3, r3
 800cc7a:	4619      	mov	r1, r3
 800cc7c:	4790      	blx	r2
 800cc7e:	4603      	mov	r3, r0
 800cc80:	60bb      	str	r3, [r7, #8]
    }
 800cc82:	787b      	ldrb	r3, [r7, #1]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d008      	beq.n	800cc9a <protocol_rcv_pack_handle+0xa6>
  }

 800cc88:	f107 0208 	add.w	r2, r7, #8
 800cc8c:	7879      	ldrb	r1, [r7, #1]
 800cc8e:	7838      	ldrb	r0, [r7, #0]
 800cc90:	89fb      	ldrh	r3, [r7, #14]
 800cc92:	9300      	str	r3, [sp, #0]
 800cc94:	2304      	movs	r3, #4
 800cc96:	f000 f917 	bl	800cec8 <protocol_ack>
      err = protocol_local_info.rcv_cmd_info[i].rcv_callback(
 800cc9a:	697b      	ldr	r3, [r7, #20]
 800cc9c:	3301      	adds	r3, #1
 800cc9e:	617b      	str	r3, [r7, #20]
 800cca0:	697b      	ldr	r3, [r7, #20]
 800cca2:	2b31      	cmp	r3, #49	; 0x31
 800cca4:	ddbe      	ble.n	800cc24 <protocol_rcv_pack_handle+0x30>
  return;
}

int32_t protocol_rcv_cmd_register(uint16_t cmd, rcv_handle_fn_t rcv_callback) {
  for (int i = 0; i < PROTOCOL_CMD_MAX_NUM; i++) {
 800cca6:	bf00      	nop
    if (protocol_local_info.rcv_cmd_info[i].used == 0) {
 800cca8:	3718      	adds	r7, #24
 800ccaa:	46bd      	mov	sp, r7
 800ccac:	bd80      	pop	{r7, pc}
 800ccae:	bf00      	nop
 800ccb0:	20011390 	.word	0x20011390

0800ccb4 <protocol_rcv_cmd_register>:
      protocol_local_info.rcv_cmd_info[i].used = 1;
      protocol_local_info.rcv_cmd_info[i].cmd = cmd;
      protocol_local_info.rcv_cmd_info[i].rcv_callback = rcv_callback;
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b084      	sub	sp, #16
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	4603      	mov	r3, r0
 800ccbc:	6039      	str	r1, [r7, #0]
 800ccbe:	80fb      	strh	r3, [r7, #6]
      return 0;
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	60fb      	str	r3, [r7, #12]
 800ccc4:	e01f      	b.n	800cd06 <protocol_rcv_cmd_register+0x52>
    }
  }
 800ccc6:	4a17      	ldr	r2, [pc, #92]	; (800cd24 <protocol_rcv_cmd_register+0x70>)
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	3321      	adds	r3, #33	; 0x21
 800cccc:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d115      	bne.n	800cd00 <protocol_rcv_cmd_register+0x4c>
  PROTOCOL_ERR_INFO_PRINTF(PROTOCOL_ERR_REGISTER_FAILED, __FILE__, __LINE__);
  return -1;
 800ccd4:	4a13      	ldr	r2, [pc, #76]	; (800cd24 <protocol_rcv_cmd_register+0x70>)
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	3321      	adds	r3, #33	; 0x21
 800ccda:	2101      	movs	r1, #1
 800ccdc:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
}
 800cce0:	4a10      	ldr	r2, [pc, #64]	; (800cd24 <protocol_rcv_cmd_register+0x70>)
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	3321      	adds	r3, #33	; 0x21
 800cce6:	00db      	lsls	r3, r3, #3
 800cce8:	4413      	add	r3, r2
 800ccea:	88fa      	ldrh	r2, [r7, #6]
 800ccec:	805a      	strh	r2, [r3, #2]

 800ccee:	4a0d      	ldr	r2, [pc, #52]	; (800cd24 <protocol_rcv_cmd_register+0x70>)
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	3321      	adds	r3, #33	; 0x21
 800ccf4:	00db      	lsls	r3, r3, #3
 800ccf6:	4413      	add	r3, r2
 800ccf8:	683a      	ldr	r2, [r7, #0]
 800ccfa:	605a      	str	r2, [r3, #4]
int32_t protocol_send_cmd_config(uint16_t cmd, uint8_t resend_times,
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	e00c      	b.n	800cd1a <protocol_rcv_cmd_register+0x66>
      return 0;
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	3301      	adds	r3, #1
 800cd04:	60fb      	str	r3, [r7, #12]
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	2b31      	cmp	r3, #49	; 0x31
 800cd0a:	dddc      	ble.n	800ccc6 <protocol_rcv_cmd_register+0x12>
                                 uint16_t resend_timeout, uint8_t ack_enable,
                                 ack_handle_fn_t ack_callback,
                                 no_ack_handle_fn_t no_ack_callback) {
 800cd0c:	2254      	movs	r2, #84	; 0x54
 800cd0e:	4906      	ldr	r1, [pc, #24]	; (800cd28 <protocol_rcv_cmd_register+0x74>)
 800cd10:	2012      	movs	r0, #18
 800cd12:	f001 fbc7 	bl	800e4a4 <protocol_s_error_info_printf>
  for (int i = 0; i < PROTOCOL_CMD_MAX_NUM; i++) {
 800cd16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    if (protocol_local_info.send_cmd_info[i].used == 0) {
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	3710      	adds	r7, #16
 800cd1e:	46bd      	mov	sp, r7
 800cd20:	bd80      	pop	{r7, pc}
 800cd22:	bf00      	nop
 800cd24:	20011390 	.word	0x20011390
 800cd28:	0800fa34 	.word	0x0800fa34

0800cd2c <protocol_local_init>:
    PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);

    while (1) {
    }
  }

 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b086      	sub	sp, #24
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	4603      	mov	r3, r0
 800cd34:	71fb      	strb	r3, [r7, #7]
  MUTEX_INIT(protocol_local_info.mutex_lock);

  memset(protocol_local_info.route_table, 0xFF, PROTOCOL_ROUTE_TABLE_MAX_NUM);

 800cd36:	2300      	movs	r3, #0
 800cd38:	613b      	str	r3, [r7, #16]
  for (uint8_t i = 0; i < PROTOCOL_INTERFACE_MAX; i++) {
    /* initalization user data is 0xFF */
    // PROBLEM: Triggers HardFault_interupt from memory overflow. THe loop
 800cd3a:	f64a 23bb 	movw	r3, #43707	; 0xaabb
 800cd3e:	81fb      	strh	r3, [r7, #14]
    // doesnt stop at 5 FIXED: i = 0
 800cd40:	f107 030e 	add.w	r3, r7, #14
 800cd44:	781b      	ldrb	r3, [r3, #0]
 800cd46:	2baa      	cmp	r3, #170	; 0xaa
 800cd48:	d107      	bne.n	800cd5a <protocol_local_init+0x2e>
    memset(&protocol_local_info.interface[i].user_data, 0xFF,
           sizeof(union interface_user_data));
  }
 800cd4a:	230d      	movs	r3, #13
 800cd4c:	613b      	str	r3, [r7, #16]

 800cd4e:	229d      	movs	r2, #157	; 0x9d
 800cd50:	492b      	ldr	r1, [pc, #172]	; (800ce00 <protocol_local_init+0xd4>)
 800cd52:	6938      	ldr	r0, [r7, #16]
 800cd54:	f001 fba6 	bl	800e4a4 <protocol_s_error_info_printf>
  for (uint8_t i = 0; i < PROTOCOL_CMD_MAX_NUM; i++) {
    // PROBLEM: Triggers HardFault_interupt
 800cd58:	e7fe      	b.n	800cd58 <protocol_local_init+0x2c>
    // FIXED: i = 0
    /* initalization cmd is 0xFF */
    memset(&protocol_local_info.send_cmd_info[i].cmd, 0xFFFF, sizeof(uint16_t));
    memset(&protocol_local_info.rcv_cmd_info[i].cmd, 0xFFFF, sizeof(uint16_t));
  }

 800cd5a:	22fe      	movs	r2, #254	; 0xfe
 800cd5c:	21ff      	movs	r1, #255	; 0xff
 800cd5e:	4829      	ldr	r0, [pc, #164]	; (800ce04 <protocol_local_init+0xd8>)
 800cd60:	f002 fcf9 	bl	800f756 <memset>
  protocol_local_info.address = address;
  protocol_local_info.rcv_nor_callBack = protocol_rcv_pack_handle;
 800cd64:	2300      	movs	r3, #0
 800cd66:	75fb      	strb	r3, [r7, #23]
 800cd68:	e00f      	b.n	800cd8a <protocol_local_init+0x5e>

  MUTEX_INIT(boardcast_object.mutex_lock);
  INIT_LIST_HEAD(&boardcast_object.send_list_header);
 800cd6a:	7dfb      	ldrb	r3, [r7, #23]
 800cd6c:	2294      	movs	r2, #148	; 0x94
 800cd6e:	fb02 f303 	mul.w	r3, r2, r3
 800cd72:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 800cd76:	4a24      	ldr	r2, [pc, #144]	; (800ce08 <protocol_local_init+0xdc>)
 800cd78:	4413      	add	r3, r2
 800cd7a:	220c      	movs	r2, #12
 800cd7c:	21ff      	movs	r1, #255	; 0xff
 800cd7e:	4618      	mov	r0, r3
 800cd80:	f002 fce9 	bl	800f756 <memset>
  protocol_local_info.rcv_nor_callBack = protocol_rcv_pack_handle;
 800cd84:	7dfb      	ldrb	r3, [r7, #23]
 800cd86:	3301      	adds	r3, #1
 800cd88:	75fb      	strb	r3, [r7, #23]
 800cd8a:	7dfb      	ldrb	r3, [r7, #23]
 800cd8c:	2b04      	cmp	r3, #4
 800cd8e:	d9ec      	bls.n	800cd6a <protocol_local_init+0x3e>
  boardcast_object.is_valid = 1;
  protocol_local_info.is_valid =
      1; // Set the protocol to be valid after initialization
 800cd90:	2300      	movs	r3, #0
 800cd92:	75bb      	strb	r3, [r7, #22]
 800cd94:	e01b      	b.n	800cdce <protocol_local_init+0xa2>
  PROTOCOL_OTHER_INFO_PRINTF("Local info has been initialized.");

  return status;
 800cd96:	7dbb      	ldrb	r3, [r7, #22]
 800cd98:	011b      	lsls	r3, r3, #4
 800cd9a:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800cd9e:	4a1a      	ldr	r2, [pc, #104]	; (800ce08 <protocol_local_init+0xdc>)
 800cda0:	4413      	add	r3, r2
 800cda2:	3302      	adds	r3, #2
 800cda4:	2202      	movs	r2, #2
 800cda6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800cdaa:	4618      	mov	r0, r3
 800cdac:	f002 fcd3 	bl	800f756 <memset>
}
 800cdb0:	7dbb      	ldrb	r3, [r7, #22]
 800cdb2:	3321      	adds	r3, #33	; 0x21
 800cdb4:	00db      	lsls	r3, r3, #3
 800cdb6:	4a14      	ldr	r2, [pc, #80]	; (800ce08 <protocol_local_init+0xdc>)
 800cdb8:	4413      	add	r3, r2
 800cdba:	3302      	adds	r3, #2
 800cdbc:	2202      	movs	r2, #2
 800cdbe:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800cdc2:	4618      	mov	r0, r3
 800cdc4:	f002 fcc7 	bl	800f756 <memset>
      1; // Set the protocol to be valid after initialization
 800cdc8:	7dbb      	ldrb	r3, [r7, #22]
 800cdca:	3301      	adds	r3, #1
 800cdcc:	75bb      	strb	r3, [r7, #22]
 800cdce:	7dbb      	ldrb	r3, [r7, #22]
 800cdd0:	2b31      	cmp	r3, #49	; 0x31
 800cdd2:	d9e0      	bls.n	800cd96 <protocol_local_init+0x6a>

/**
 * @brief  Protocol sends a normal frame.
 800cdd4:	4a0c      	ldr	r2, [pc, #48]	; (800ce08 <protocol_local_init+0xdc>)
 800cdd6:	79fb      	ldrb	r3, [r7, #7]
 800cdd8:	7013      	strb	r3, [r2, #0]
 * @param  reciver Receiver device address
 800cdda:	4b0b      	ldr	r3, [pc, #44]	; (800ce08 <protocol_local_init+0xdc>)
 800cddc:	4a0b      	ldr	r2, [pc, #44]	; (800ce0c <protocol_local_init+0xe0>)
 800cdde:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 * @param  session Session number, ranging from 0 to 63. When session is 0, no
 * Ack is required from the receiver, otherwise Ack is required. The same
 * receiver device cannot have two identical session numbers at the same time.
 800cde2:	480b      	ldr	r0, [pc, #44]	; (800ce10 <protocol_local_init+0xe4>)
 800cde4:	f7ff fec4 	bl	800cb70 <INIT_LIST_HEAD>
 * @param  cmd Command value
 800cde8:	4b09      	ldr	r3, [pc, #36]	; (800ce10 <protocol_local_init+0xe4>)
 800cdea:	2201      	movs	r2, #1
 800cdec:	725a      	strb	r2, [r3, #9]
 * @param  p_data Pointer to the data to be sent
 800cdee:	4b06      	ldr	r3, [pc, #24]	; (800ce08 <protocol_local_init+0xdc>)
 800cdf0:	2201      	movs	r2, #1
 800cdf2:	f883 289c 	strb.w	r2, [r3, #2204]	; 0x89c
 * @param  data_len Length of the data to be sent
 * @retval Protocol return status
 */
 800cdf6:	693b      	ldr	r3, [r7, #16]
uint32_t protocol_send(uint8_t reciver, uint16_t cmd, void *p_data,
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	3718      	adds	r7, #24
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	bd80      	pop	{r7, pc}
 800ce00:	0800fa34 	.word	0x0800fa34
 800ce04:	20011391 	.word	0x20011391
 800ce08:	20011390 	.word	0x20011390
 800ce0c:	0800cbf5 	.word	0x0800cbf5
 800ce10:	20011380 	.word	0x20011380

0800ce14 <protocol_send>:

  struct perph_interface *int_obj;
  int_obj = protocol_s_get_route(reciver);

  if (cmd_info != NULL) {
    ack = cmd_info->ack_enable;
 800ce14:	b580      	push	{r7, lr}
 800ce16:	b08c      	sub	sp, #48	; 0x30
 800ce18:	af04      	add	r7, sp, #16
 800ce1a:	60ba      	str	r2, [r7, #8]
 800ce1c:	607b      	str	r3, [r7, #4]
 800ce1e:	4603      	mov	r3, r0
 800ce20:	73fb      	strb	r3, [r7, #15]
 800ce22:	460b      	mov	r3, r1
 800ce24:	81bb      	strh	r3, [r7, #12]
  }

 800ce26:	2300      	movs	r3, #0
 800ce28:	76fb      	strb	r3, [r7, #27]
  if (reciver == PROTOCOL_BROADCAST_ADDR) {
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	76bb      	strb	r3, [r7, #26]
    status = protocol_s_broadcast_add_node(p_data, data_len, cmd);
  } else {
    if (ack == 1) {
 800ce2e:	89bb      	ldrh	r3, [r7, #12]
 800ce30:	4618      	mov	r0, r3
 800ce32:	f7ff fead 	bl	800cb90 <protocol_get_send_cmd_info>
 800ce36:	6178      	str	r0, [r7, #20]
      session = protocol_get_session(int_obj);
    }
    status = protocol_s_add_sendnode(reciver, session, PROTOCOL_PACK_NOR,
 800ce38:	7bfb      	ldrb	r3, [r7, #15]
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	f001 f80c 	bl	800de58 <protocol_s_get_route>
 800ce40:	6138      	str	r0, [r7, #16]
                                     p_data, data_len, cmd, 0);
  }
 800ce42:	697b      	ldr	r3, [r7, #20]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d002      	beq.n	800ce4e <protocol_send+0x3a>
  if (status == PROTOCOL_SUCCESS) {
    if (protocol_local_info.send_list_add_callBack != NULL) {
 800ce48:	697b      	ldr	r3, [r7, #20]
 800ce4a:	791b      	ldrb	r3, [r3, #4]
 800ce4c:	76bb      	strb	r3, [r7, #26]
      protocol_local_info.send_list_add_callBack();
    }
  } else {
 800ce4e:	7bfb      	ldrb	r3, [r7, #15]
 800ce50:	2bff      	cmp	r3, #255	; 0xff
 800ce52:	d107      	bne.n	800ce64 <protocol_send+0x50>
    if (ack == 1) {
      protocol_release_session(int_obj, session);
 800ce54:	89bb      	ldrh	r3, [r7, #12]
 800ce56:	461a      	mov	r2, r3
 800ce58:	6879      	ldr	r1, [r7, #4]
 800ce5a:	68b8      	ldr	r0, [r7, #8]
 800ce5c:	f000 fd20 	bl	800d8a0 <protocol_s_broadcast_add_node>
 800ce60:	61f8      	str	r0, [r7, #28]
 800ce62:	e014      	b.n	800ce8e <protocol_send+0x7a>
    }
  }
  return status;
}
 800ce64:	7ebb      	ldrb	r3, [r7, #26]
 800ce66:	2b01      	cmp	r3, #1
 800ce68:	d104      	bne.n	800ce74 <protocol_send+0x60>

/**
 800ce6a:	6938      	ldr	r0, [r7, #16]
 800ce6c:	f000 fb81 	bl	800d572 <protocol_get_session>
 800ce70:	4603      	mov	r3, r0
 800ce72:	76fb      	strb	r3, [r7, #27]
 * @brief  Protocol sends an Ack frame. This function is called to reply with an
 * Ack after receiving a normal frame with a non-zero session.
 800ce74:	7ef9      	ldrb	r1, [r7, #27]
 800ce76:	7bf8      	ldrb	r0, [r7, #15]
 800ce78:	2300      	movs	r3, #0
 800ce7a:	9302      	str	r3, [sp, #8]
 800ce7c:	89bb      	ldrh	r3, [r7, #12]
 800ce7e:	9301      	str	r3, [sp, #4]
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	9300      	str	r3, [sp, #0]
 800ce84:	68bb      	ldr	r3, [r7, #8]
 800ce86:	2200      	movs	r2, #0
 800ce88:	f000 fbb6 	bl	800d5f8 <protocol_s_add_sendnode>
 800ce8c:	61f8      	str	r0, [r7, #28]
 * @param  reciver Receiver device address
 * @param  session Session number, ranging from 0 to 63. When session is 0, no
 * Ack is required from the receiver, otherwise Ack is required. The same
 800ce8e:	69fb      	ldr	r3, [r7, #28]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d109      	bne.n	800cea8 <protocol_send+0x94>
 * receiver device cannot have two identical session numbers at the same time.
 * @param  p_data Pointer to the data to be sent
 800ce94:	4b0b      	ldr	r3, [pc, #44]	; (800cec4 <protocol_send+0xb0>)
 800ce96:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d00c      	beq.n	800ceb8 <protocol_send+0xa4>
 * @param  data_len Length of the data to be sent
 * @param  ack_seq Sequence number of the Ack packet to be sent
 800ce9e:	4b09      	ldr	r3, [pc, #36]	; (800cec4 <protocol_send+0xb0>)
 800cea0:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800cea4:	4798      	blx	r3
 800cea6:	e007      	b.n	800ceb8 <protocol_send+0xa4>
 * @retval Protocol return status
 */
uint32_t protocol_ack(uint8_t reciver, uint8_t session, void *p_data,
                      uint32_t data_len, uint16_t ack_seq) {
  uint32_t status;
 800cea8:	7ebb      	ldrb	r3, [r7, #26]
 800ceaa:	2b01      	cmp	r3, #1
 800ceac:	d104      	bne.n	800ceb8 <protocol_send+0xa4>
  status = protocol_s_add_sendnode(reciver, session, PROTOCOL_PACK_ACK, p_data,
                                   data_len, 0, ack_seq);
 800ceae:	7efb      	ldrb	r3, [r7, #27]
 800ceb0:	4619      	mov	r1, r3
 800ceb2:	6938      	ldr	r0, [r7, #16]
 800ceb4:	f000 fb83 	bl	800d5be <protocol_release_session>
  if (status == PROTOCOL_SUCCESS) {
    if (protocol_local_info.send_list_add_callBack != NULL) {
      protocol_local_info.send_list_add_callBack();
 800ceb8:	69fb      	ldr	r3, [r7, #28]
    }
 800ceba:	4618      	mov	r0, r3
 800cebc:	3720      	adds	r7, #32
 800cebe:	46bd      	mov	sp, r7
 800cec0:	bd80      	pop	{r7, pc}
 800cec2:	bf00      	nop
 800cec4:	20011390 	.word	0x20011390

0800cec8 <protocol_ack>:
 * periodically.
 * @param void
 * @retval Protocol return status
 */
uint32_t protocol_send_flush(void) {
  for (uint8_t i = 0; i < PROTOCOL_INTERFACE_MAX; i++) {
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b08a      	sub	sp, #40	; 0x28
 800cecc:	af04      	add	r7, sp, #16
 800cece:	60ba      	str	r2, [r7, #8]
 800ced0:	607b      	str	r3, [r7, #4]
 800ced2:	4603      	mov	r3, r0
 800ced4:	73fb      	strb	r3, [r7, #15]
 800ced6:	460b      	mov	r3, r1
 800ced8:	73bb      	strb	r3, [r7, #14]
    if (protocol_local_info.interface[i].is_valid) {
      if (protocol_local_info.interface[i].send.normal_node_num > 0) {
 800ceda:	7bb9      	ldrb	r1, [r7, #14]
 800cedc:	7bf8      	ldrb	r0, [r7, #15]
 800cede:	8c3b      	ldrh	r3, [r7, #32]
 800cee0:	9302      	str	r3, [sp, #8]
 800cee2:	2300      	movs	r3, #0
 800cee4:	9301      	str	r3, [sp, #4]
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	9300      	str	r3, [sp, #0]
 800ceea:	68bb      	ldr	r3, [r7, #8]
 800ceec:	2201      	movs	r2, #1
 800ceee:	f000 fb83 	bl	800d5f8 <protocol_s_add_sendnode>
 800cef2:	6178      	str	r0, [r7, #20]
        protocol_s_interface_normal_send_flush(protocol_local_info.interface +
                                               i);
 800cef4:	697b      	ldr	r3, [r7, #20]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d108      	bne.n	800cf0c <protocol_ack+0x44>
      }
      if (protocol_local_info.interface[i].send.ack_node_num > 0) {
 800cefa:	4b07      	ldr	r3, [pc, #28]	; (800cf18 <protocol_ack+0x50>)
 800cefc:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d003      	beq.n	800cf0c <protocol_ack+0x44>
        protocol_s_interface_ack_send_flush(protocol_local_info.interface + i);
      }
 800cf04:	4b04      	ldr	r3, [pc, #16]	; (800cf18 <protocol_ack+0x50>)
 800cf06:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800cf0a:	4798      	blx	r3
    }
  }

 800cf0c:	697b      	ldr	r3, [r7, #20]
  if (boardcast_object.is_valid) {
 800cf0e:	4618      	mov	r0, r3
 800cf10:	3718      	adds	r7, #24
 800cf12:	46bd      	mov	sp, r7
 800cf14:	bd80      	pop	{r7, pc}
 800cf16:	bf00      	nop
 800cf18:	20011390 	.word	0x20011390

0800cf1c <protocol_send_flush>:
    }
  }
  return 0;
}

/**
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b082      	sub	sp, #8
 800cf20:	af00      	add	r7, sp, #0
 * @brief  Protocol flushes the receive buffer, calling this function will
 800cf22:	2300      	movs	r3, #0
 800cf24:	71fb      	strb	r3, [r7, #7]
 800cf26:	e035      	b.n	800cf94 <protocol_send_flush+0x78>
 * unpack the data in the receive buffer. Call after receiving data or
 * periodically.
 800cf28:	79fb      	ldrb	r3, [r7, #7]
 800cf2a:	4a23      	ldr	r2, [pc, #140]	; (800cfb8 <protocol_send_flush+0x9c>)
 800cf2c:	2194      	movs	r1, #148	; 0x94
 800cf2e:	fb01 f303 	mul.w	r3, r1, r3
 800cf32:	4413      	add	r3, r2
 800cf34:	f203 6319 	addw	r3, r3, #1561	; 0x619
 800cf38:	781b      	ldrb	r3, [r3, #0]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d027      	beq.n	800cf8e <protocol_send_flush+0x72>
 * @param  void
 * @retval Protocol return status
 800cf3e:	79fb      	ldrb	r3, [r7, #7]
 800cf40:	4a1d      	ldr	r2, [pc, #116]	; (800cfb8 <protocol_send_flush+0x9c>)
 800cf42:	2194      	movs	r1, #148	; 0x94
 800cf44:	fb01 f303 	mul.w	r3, r1, r3
 800cf48:	4413      	add	r3, r2
 800cf4a:	f203 6312 	addw	r3, r3, #1554	; 0x612
 800cf4e:	781b      	ldrb	r3, [r3, #0]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d008      	beq.n	800cf66 <protocol_send_flush+0x4a>
 */
uint32_t protocol_unpack_flush(void) {
 800cf54:	79fb      	ldrb	r3, [r7, #7]
 800cf56:	2294      	movs	r2, #148	; 0x94
 800cf58:	fb02 f303 	mul.w	r3, r2, r3
 800cf5c:	4a17      	ldr	r2, [pc, #92]	; (800cfbc <protocol_send_flush+0xa0>)
 800cf5e:	4413      	add	r3, r2
 800cf60:	4618      	mov	r0, r3
 800cf62:	f000 fdfd 	bl	800db60 <protocol_s_interface_normal_send_flush>
  for (uint8_t i = 0; i < PROTOCOL_INTERFACE_MAX; i++) {
    if (protocol_local_info.interface[i].is_valid) {
 800cf66:	79fb      	ldrb	r3, [r7, #7]
 800cf68:	4a13      	ldr	r2, [pc, #76]	; (800cfb8 <protocol_send_flush+0x9c>)
 800cf6a:	2194      	movs	r1, #148	; 0x94
 800cf6c:	fb01 f303 	mul.w	r3, r1, r3
 800cf70:	4413      	add	r3, r2
 800cf72:	f203 6313 	addw	r3, r3, #1555	; 0x613
 800cf76:	781b      	ldrb	r3, [r3, #0]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d008      	beq.n	800cf8e <protocol_send_flush+0x72>
      protocol_s_extract(&(protocol_local_info.interface[i]));
    }
 800cf7c:	79fb      	ldrb	r3, [r7, #7]
 800cf7e:	2294      	movs	r2, #148	; 0x94
 800cf80:	fb02 f303 	mul.w	r3, r2, r3
 800cf84:	4a0d      	ldr	r2, [pc, #52]	; (800cfbc <protocol_send_flush+0xa0>)
 800cf86:	4413      	add	r3, r2
 800cf88:	4618      	mov	r0, r3
 800cf8a:	f000 feb4 	bl	800dcf6 <protocol_s_interface_ack_send_flush>
 * @brief  Protocol flushes the receive buffer, calling this function will
 800cf8e:	79fb      	ldrb	r3, [r7, #7]
 800cf90:	3301      	adds	r3, #1
 800cf92:	71fb      	strb	r3, [r7, #7]
 800cf94:	79fb      	ldrb	r3, [r7, #7]
 800cf96:	2b04      	cmp	r3, #4
 800cf98:	d9c6      	bls.n	800cf28 <protocol_send_flush+0xc>
  }
  return 0;
}

/**
 800cf9a:	4b09      	ldr	r3, [pc, #36]	; (800cfc0 <protocol_send_flush+0xa4>)
 800cf9c:	7a5b      	ldrb	r3, [r3, #9]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d005      	beq.n	800cfae <protocol_send_flush+0x92>
 * @brief  Protocol receives data, used when receiving data, such as in
 * interrupt functions for serial communication.
 800cfa2:	4b07      	ldr	r3, [pc, #28]	; (800cfc0 <protocol_send_flush+0xa4>)
 800cfa4:	7a1b      	ldrb	r3, [r3, #8]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d001      	beq.n	800cfae <protocol_send_flush+0x92>
 * @param  p_data Pointer to the received data
 * @param  data_len Length of the data
 800cfaa:	f000 fee3 	bl	800dd74 <protocol_s_broadcast_send_flush>
 * @param  perph Interface index, specify the index of the interface where the
 * data is received
 * @retval Protocol return status
 800cfae:	2300      	movs	r3, #0
 */
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	3708      	adds	r7, #8
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	bd80      	pop	{r7, pc}
 800cfb8:	20011390 	.word	0x20011390
 800cfbc:	20011948 	.word	0x20011948
 800cfc0:	20011380 	.word	0x20011380

0800cfc4 <protocol_unpack_flush>:
  FIFO_CPU_SR_TYPE cpu_sr;
  struct perph_interface *obj;
  uint32_t rcv_length;
  uint32_t status;

  // Interrupt Off;
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	b082      	sub	sp, #8
 800cfc8:	af00      	add	r7, sp, #0
  cpu_sr = FIFO_GET_CPU_SR();
 800cfca:	2300      	movs	r3, #0
 800cfcc:	71fb      	strb	r3, [r7, #7]
 800cfce:	e018      	b.n	800d002 <protocol_unpack_flush+0x3e>
  FIFO_ENTER_CRITICAL();

 800cfd0:	79fb      	ldrb	r3, [r7, #7]
 800cfd2:	4a10      	ldr	r2, [pc, #64]	; (800d014 <protocol_unpack_flush+0x50>)
 800cfd4:	2194      	movs	r1, #148	; 0x94
 800cfd6:	fb01 f303 	mul.w	r3, r1, r3
 800cfda:	4413      	add	r3, r2
 800cfdc:	f203 6319 	addw	r3, r3, #1561	; 0x619
 800cfe0:	781b      	ldrb	r3, [r3, #0]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d00a      	beq.n	800cffc <protocol_unpack_flush+0x38>
  status = PROTOCOL_SUCCESS;

 800cfe6:	79fb      	ldrb	r3, [r7, #7]
 800cfe8:	2294      	movs	r2, #148	; 0x94
 800cfea:	fb02 f303 	mul.w	r3, r2, r3
 800cfee:	f503 63b7 	add.w	r3, r3, #1464	; 0x5b8
 800cff2:	4a08      	ldr	r2, [pc, #32]	; (800d014 <protocol_unpack_flush+0x50>)
 800cff4:	4413      	add	r3, r2
 800cff6:	4618      	mov	r0, r3
 800cff8:	f001 f8cc 	bl	800e194 <protocol_s_extract>
  cpu_sr = FIFO_GET_CPU_SR();
 800cffc:	79fb      	ldrb	r3, [r7, #7]
 800cffe:	3301      	adds	r3, #1
 800d000:	71fb      	strb	r3, [r7, #7]
 800d002:	79fb      	ldrb	r3, [r7, #7]
 800d004:	2b04      	cmp	r3, #4
 800d006:	d9e3      	bls.n	800cfd0 <protocol_unpack_flush+0xc>
  if (protocol_local_info.is_valid == 0) {
    status = PROTOCOL_ERR_PROTOCOL_NOT_INIT;
    // Interrupt On
 800d008:	2300      	movs	r3, #0
    FIFO_RESTORE_CPU_SR(cpu_sr);
 800d00a:	4618      	mov	r0, r3
 800d00c:	3708      	adds	r7, #8
 800d00e:	46bd      	mov	sp, r7
 800d010:	bd80      	pop	{r7, pc}
 800d012:	bf00      	nop
 800d014:	20011390 	.word	0x20011390

0800d018 <protocol_rcv_data>:

  // TODO: Removed the protection here because considering that this function is
  // not reentrant for the same protocol interface, careful consideration is
  // needed. Adding protection, high-speed transmission may still have nested
  // reentry.
  rcv_length = fifo_s_puts_noprotect(&(obj->rcvd.fifo), p_data, data_len);
 800d018:	b590      	push	{r4, r7, lr}
 800d01a:	b08b      	sub	sp, #44	; 0x2c
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	60f8      	str	r0, [r7, #12]
 800d020:	60b9      	str	r1, [r7, #8]
 800d022:	607a      	str	r2, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800d024:	f3ef 8310 	mrs	r3, PRIMASK
 800d028:	61bb      	str	r3, [r7, #24]
  return(result);
 800d02a:	69bb      	ldr	r3, [r7, #24]
  if (rcv_length < data_len) {
    status = PROTOCOL_ERR_FIFO_FULL;
    PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
  }
  // Interrupt On
  FIFO_RESTORE_CPU_SR(cpu_sr);
 800d02c:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 800d02e:	b672      	cpsid	i
}
 800d030:	bf00      	nop
  return status;
}

 800d032:	2300      	movs	r3, #0
 800d034:	627b      	str	r3, [r7, #36]	; 0x24
/**
 * @brief  Protocol registers the callback function for adding the send packet
 800d036:	4b1c      	ldr	r3, [pc, #112]	; (800d0a8 <protocol_rcv_data+0x90>)
 800d038:	f893 389c 	ldrb.w	r3, [r3, #2204]	; 0x89c
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d108      	bne.n	800d052 <protocol_rcv_data+0x3a>
 * to the send list. This function is called after the protocol data packet is
 * packed and added to the send list.
 800d040:	2310      	movs	r3, #16
 800d042:	627b      	str	r3, [r7, #36]	; 0x24
 800d044:	617c      	str	r4, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d046:	697b      	ldr	r3, [r7, #20]
 800d048:	f383 8810 	msr	PRIMASK, r3
}
 800d04c:	bf00      	nop
 * @param  fn Callback function pointer, format refers to pack_handle_fn_t
 * @retval 0
 */
 800d04e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d050:	e026      	b.n	800d0a0 <protocol_rcv_data+0x88>
uint32_t protocol_send_list_add_callback_reg(void_fn_t fn) {
  protocol_local_info.send_list_add_callBack = fn;
  return 0;
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800d058:	461a      	mov	r2, r3
 800d05a:	2394      	movs	r3, #148	; 0x94
 800d05c:	fb02 f303 	mul.w	r3, r2, r3
 800d060:	f503 63b7 	add.w	r3, r3, #1464	; 0x5b8
 800d064:	4a10      	ldr	r2, [pc, #64]	; (800d0a8 <protocol_rcv_data+0x90>)
 800d066:	4413      	add	r3, r2
 800d068:	623b      	str	r3, [r7, #32]
}
 800d06a:	6a3b      	ldr	r3, [r7, #32]
 800d06c:	3320      	adds	r3, #32
 800d06e:	68ba      	ldr	r2, [r7, #8]
 800d070:	68f9      	ldr	r1, [r7, #12]
 800d072:	4618      	mov	r0, r3
 800d074:	f001 fc1e 	bl	800e8b4 <fifo_s_puts_noprotect>
 800d078:	4603      	mov	r3, r0
 800d07a:	61fb      	str	r3, [r7, #28]
 800d07c:	69fa      	ldr	r2, [r7, #28]
 800d07e:	68bb      	ldr	r3, [r7, #8]
 800d080:	429a      	cmp	r2, r3
 800d082:	d207      	bcs.n	800d094 <protocol_rcv_data+0x7c>
 800d084:	230b      	movs	r3, #11
 800d086:	627b      	str	r3, [r7, #36]	; 0x24
 800d088:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800d08c:	4907      	ldr	r1, [pc, #28]	; (800d0ac <protocol_rcv_data+0x94>)
 800d08e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d090:	f001 fa08 	bl	800e4a4 <protocol_s_error_info_printf>
 800d094:	613c      	str	r4, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d096:	693b      	ldr	r3, [r7, #16]
 800d098:	f383 8810 	msr	PRIMASK, r3
}
 800d09c:	bf00      	nop
 800d09e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	372c      	adds	r7, #44	; 0x2c
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	bd90      	pop	{r4, r7, pc}
 800d0a8:	20011390 	.word	0x20011390
 800d0ac:	0800fa34 	.word	0x0800fa34

0800d0b0 <protocol_send_list_add_callback_reg>:
 800d0b0:	b480      	push	{r7}
 800d0b2:	b083      	sub	sp, #12
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	6078      	str	r0, [r7, #4]
 800d0b8:	4a05      	ldr	r2, [pc, #20]	; (800d0d0 <protocol_send_list_add_callback_reg+0x20>)
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	370c      	adds	r7, #12
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0cc:	4770      	bx	lr
 800d0ce:	bf00      	nop
 800d0d0:	20011390 	.word	0x20011390

0800d0d4 <protocol_p_malloc>:
    * @brief  Protocol memory allocation interface function, users can modify this function according to actual needs
    * @param  size Size of memory to allocate in bytes
    * @retval If allocation is successful, returns the pointer to the allocated memory, otherwise returns NULL
    */
void *protocol_p_malloc(uint32_t size)
{
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	b082      	sub	sp, #8
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	6078      	str	r0, [r7, #4]
  return heap_malloc(size);
 800d0dc:	6878      	ldr	r0, [r7, #4]
 800d0de:	f001 fe1f 	bl	800ed20 <heap_malloc>
 800d0e2:	4603      	mov	r3, r0
}
 800d0e4:	4618      	mov	r0, r3
 800d0e6:	3708      	adds	r7, #8
 800d0e8:	46bd      	mov	sp, r7
 800d0ea:	bd80      	pop	{r7, pc}

0800d0ec <protocol_p_free>:
    * @brief  Protocol memory deallocation interface function, users can modify this function according to actual needs
    * @param  ptr Pointer to the starting address of the memory to be freed
    * @retval void
    */
  void protocol_p_free(void *ptr)
  {
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b082      	sub	sp, #8
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	6078      	str	r0, [r7, #4]
    heap_free(ptr);
 800d0f4:	6878      	ldr	r0, [r7, #4]
 800d0f6:	f001 febd 	bl	800ee74 <heap_free>
  }
 800d0fa:	bf00      	nop
 800d0fc:	3708      	adds	r7, #8
 800d0fe:	46bd      	mov	sp, r7
 800d100:	bd80      	pop	{r7, pc}

0800d102 <protocol_p_get_time>:
    * @brief  Protocol function to get system time in milliseconds, users can modify this function according to actual needs
    * @param  void
    * @retval Current system time in milliseconds
  */
uint32_t protocol_p_get_time(void)
{
 800d102:	b580      	push	{r7, lr}
 800d104:	af00      	add	r7, sp, #0
  return osKernelSysTick() / portTICK_PERIOD_MS;
 800d106:	f7fd f858 	bl	800a1ba <osKernelSysTick>
 800d10a:	4603      	mov	r3, r0
}
 800d10c:	4618      	mov	r0, r3
 800d10e:	bd80      	pop	{r7, pc}

0800d110 <INIT_LIST_HEAD>:
{
 800d110:	b480      	push	{r7}
 800d112:	b083      	sub	sp, #12
 800d114:	af00      	add	r7, sp, #0
 800d116:	6078      	str	r0, [r7, #4]
  list->next = list;
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	687a      	ldr	r2, [r7, #4]
 800d11c:	601a      	str	r2, [r3, #0]
  list->prev = list;
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	687a      	ldr	r2, [r7, #4]
 800d122:	605a      	str	r2, [r3, #4]
}
 800d124:	bf00      	nop
 800d126:	370c      	adds	r7, #12
 800d128:	46bd      	mov	sp, r7
 800d12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12e:	4770      	bx	lr

0800d130 <protocol_interface_init>:
  *         send_fn	 Pointer to the interface's send function, refer to send_fn_t for details.
  * @retval The return value indicates the status of the protocol operation.
  */
int32_t protocol_interface_init(struct perph_interface *perph,
                                char *interface_name,
                                uint8_t boardcast_output_enable,
 800d130:	b580      	push	{r7, lr}
 800d132:	b08a      	sub	sp, #40	; 0x28
 800d134:	af00      	add	r7, sp, #0
 800d136:	60f8      	str	r0, [r7, #12]
 800d138:	60b9      	str	r1, [r7, #8]
 800d13a:	4611      	mov	r1, r2
 800d13c:	461a      	mov	r2, r3
 800d13e:	460b      	mov	r3, r1
 800d140:	71fb      	strb	r3, [r7, #7]
 800d142:	4613      	mov	r3, r2
 800d144:	80bb      	strh	r3, [r7, #4]
                                uint16_t rcv_buf_size)
{
  struct perph_interface *interface;

 800d146:	2305      	movs	r3, #5
 800d148:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t status;
  int32_t idx = PROTOCOL_INTERFACE_MAX;
 800d14a:	2300      	movs	r3, #0
 800d14c:	61fb      	str	r3, [r7, #28]

  status = PROTOCOL_SUCCESS;
 800d14e:	2300      	movs	r3, #0
 800d150:	623b      	str	r3, [r7, #32]
 800d152:	e010      	b.n	800d176 <protocol_interface_init+0x46>

  for (int i = 0; i < PROTOCOL_INTERFACE_MAX; i++)
 800d154:	4a3d      	ldr	r2, [pc, #244]	; (800d24c <protocol_interface_init+0x11c>)
 800d156:	6a3b      	ldr	r3, [r7, #32]
 800d158:	2194      	movs	r1, #148	; 0x94
 800d15a:	fb01 f303 	mul.w	r3, r1, r3
 800d15e:	4413      	add	r3, r2
 800d160:	f203 6319 	addw	r3, r3, #1561	; 0x619
 800d164:	781b      	ldrb	r3, [r3, #0]
 800d166:	2b00      	cmp	r3, #0
 800d168:	d102      	bne.n	800d170 <protocol_interface_init+0x40>
  {
    if (protocol_local_info.interface[i].is_valid == 0)
 800d16a:	6a3b      	ldr	r3, [r7, #32]
 800d16c:	627b      	str	r3, [r7, #36]	; 0x24
    {
 800d16e:	e005      	b.n	800d17c <protocol_interface_init+0x4c>
  status = PROTOCOL_SUCCESS;
 800d170:	6a3b      	ldr	r3, [r7, #32]
 800d172:	3301      	adds	r3, #1
 800d174:	623b      	str	r3, [r7, #32]
 800d176:	6a3b      	ldr	r3, [r7, #32]
 800d178:	2b04      	cmp	r3, #4
 800d17a:	ddeb      	ble.n	800d154 <protocol_interface_init+0x24>
      idx = i;
      break;
    }
  }
 800d17c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d17e:	2b05      	cmp	r3, #5
 800d180:	d108      	bne.n	800d194 <protocol_interface_init+0x64>

  if (idx == PROTOCOL_INTERFACE_MAX)
  {
 800d182:	230c      	movs	r3, #12
 800d184:	61fb      	str	r3, [r7, #28]
    //TODO: Index length exceeded
 800d186:	223b      	movs	r2, #59	; 0x3b
 800d188:	4931      	ldr	r1, [pc, #196]	; (800d250 <protocol_interface_init+0x120>)
 800d18a:	69f8      	ldr	r0, [r7, #28]
 800d18c:	f001 f98a 	bl	800e4a4 <protocol_s_error_info_printf>
    status = PROTOCOL_ERR_OBJECT_NOT_FOUND;
 800d190:	69fb      	ldr	r3, [r7, #28]
 800d192:	e056      	b.n	800d242 <protocol_interface_init+0x112>
    PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
    return status;
  }
 800d194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d196:	2294      	movs	r2, #148	; 0x94
 800d198:	fb02 f303 	mul.w	r3, r2, r3
 800d19c:	f503 63b7 	add.w	r3, r3, #1464	; 0x5b8
 800d1a0:	4a2a      	ldr	r2, [pc, #168]	; (800d24c <protocol_interface_init+0x11c>)
 800d1a2:	4413      	add	r3, r2
 800d1a4:	61bb      	str	r3, [r7, #24]

  interface = &protocol_local_info.interface[idx];
 800d1a6:	2294      	movs	r2, #148	; 0x94
 800d1a8:	68f9      	ldr	r1, [r7, #12]
 800d1aa:	69b8      	ldr	r0, [r7, #24]
 800d1ac:	f002 fb58 	bl	800f860 <memcpy>
  
  memcpy(interface, perph, sizeof(struct perph_interface));

 800d1b0:	68bb      	ldr	r3, [r7, #8]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d00f      	beq.n	800d1d6 <protocol_interface_init+0xa6>
 800d1b6:	68b8      	ldr	r0, [r7, #8]
 800d1b8:	f7f3 f81a 	bl	80001f0 <strlen>
 800d1bc:	4603      	mov	r3, r0
 800d1be:	2b1f      	cmp	r3, #31
 800d1c0:	d809      	bhi.n	800d1d6 <protocol_interface_init+0xa6>
  // initialization name
  if ((interface_name != NULL) && (strlen(interface_name) < PROTOCOL_OBJ_NAME_MAX_LEN))
 800d1c2:	69bb      	ldr	r3, [r7, #24]
 800d1c4:	2220      	movs	r2, #32
 800d1c6:	68b9      	ldr	r1, [r7, #8]
 800d1c8:	4618      	mov	r0, r3
 800d1ca:	f002 fab1 	bl	800f730 <strncpy>
  {
 800d1ce:	69bb      	ldr	r3, [r7, #24]
 800d1d0:	2200      	movs	r2, #0
 800d1d2:	77da      	strb	r2, [r3, #31]
 800d1d4:	e005      	b.n	800d1e2 <protocol_interface_init+0xb2>
    strncpy(interface->object_name, (const char *)interface_name, sizeof(interface->object_name));
    interface->object_name[PROTOCOL_OBJ_NAME_MAX_LEN - 1] = '\0';
  }
  else
 800d1d6:	69bb      	ldr	r3, [r7, #24]
 800d1d8:	4a1e      	ldr	r2, [pc, #120]	; (800d254 <protocol_interface_init+0x124>)
 800d1da:	6810      	ldr	r0, [r2, #0]
 800d1dc:	6018      	str	r0, [r3, #0]
 800d1de:	7912      	ldrb	r2, [r2, #4]
 800d1e0:	711a      	strb	r2, [r3, #4]
  {
    strcpy(interface->object_name, "NULL");
  }

 800d1e2:	88bb      	ldrh	r3, [r7, #4]
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	f7ff ff75 	bl	800d0d4 <protocol_p_malloc>
 800d1ea:	6178      	str	r0, [r7, #20]
  // Initialize the receive buffer area
 800d1ec:	697b      	ldr	r3, [r7, #20]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d108      	bne.n	800d204 <protocol_interface_init+0xd4>
  uint8_t *rcv_buf = protocol_p_malloc(rcv_buf_size);
  if (rcv_buf == NULL)
 800d1f2:	2302      	movs	r3, #2
 800d1f4:	61fb      	str	r3, [r7, #28]
  {
 800d1f6:	2253      	movs	r2, #83	; 0x53
 800d1f8:	4915      	ldr	r1, [pc, #84]	; (800d250 <protocol_interface_init+0x120>)
 800d1fa:	69f8      	ldr	r0, [r7, #28]
 800d1fc:	f001 f952 	bl	800e4a4 <protocol_s_error_info_printf>
    status = PROTOCOL_ERR_NOT_ENOUGH_MEM;
 800d200:	69fb      	ldr	r3, [r7, #28]
 800d202:	e01e      	b.n	800d242 <protocol_interface_init+0x112>
    PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
    return status;
 800d204:	69bb      	ldr	r3, [r7, #24]
 800d206:	3320      	adds	r3, #32
 800d208:	88ba      	ldrh	r2, [r7, #4]
 800d20a:	6979      	ldr	r1, [r7, #20]
 800d20c:	4618      	mov	r0, r3
 800d20e:	f001 fab2 	bl	800e776 <fifo_s_init>
  }
  fifo_s_init(&interface->rcvd.fifo, rcv_buf, rcv_buf_size);

 800d212:	69bb      	ldr	r3, [r7, #24]
 800d214:	3348      	adds	r3, #72	; 0x48
 800d216:	4618      	mov	r0, r3
 800d218:	f7ff ff7a 	bl	800d110 <INIT_LIST_HEAD>
  // Initialize the sending structure
 800d21c:	69bb      	ldr	r3, [r7, #24]
 800d21e:	3350      	adds	r3, #80	; 0x50
 800d220:	4618      	mov	r0, r3
 800d222:	f7ff ff75 	bl	800d110 <INIT_LIST_HEAD>
  INIT_LIST_HEAD(&interface->send.normal_list_header);
  INIT_LIST_HEAD(&interface->send.ack_list_header);
  MUTEX_INIT(interface->send.mutex_lock);
 800d226:	69bb      	ldr	r3, [r7, #24]
 800d228:	79fa      	ldrb	r2, [r7, #7]
 800d22a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62

 800d22e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d230:	b2da      	uxtb	r2, r3
 800d232:	69bb      	ldr	r3, [r7, #24]
 800d234:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  interface->broadcast_output_enable = boardcast_output_enable;
 800d238:	69bb      	ldr	r3, [r7, #24]
 800d23a:	2201      	movs	r2, #1
 800d23c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  interface->idx = idx;
  interface->is_valid = 1;

  PROTOCOL_OTHER_INFO_PRINTF("Interface %s[%d] has been initialized.",
                             interface->object_name, interface->idx);
 800d240:	69fb      	ldr	r3, [r7, #28]

 800d242:	4618      	mov	r0, r3
 800d244:	3728      	adds	r7, #40	; 0x28
 800d246:	46bd      	mov	sp, r7
 800d248:	bd80      	pop	{r7, pc}
 800d24a:	bf00      	nop
 800d24c:	20011390 	.word	0x20011390
 800d250:	0800fa64 	.word	0x0800fa64
 800d254:	0800faa0 	.word	0x0800faa0

0800d258 <protocol_uart_interface_register>:
}

int32_t protocol_uart_interface_register(char *interface_name,
                                        uint16_t rcv_buf_size,
                                        uint8_t boardcast_output_enable,
                                        uint8_t com_port,
 800d258:	b580      	push	{r7, lr}
 800d25a:	b0a8      	sub	sp, #160	; 0xa0
 800d25c:	af00      	add	r7, sp, #0
 800d25e:	6078      	str	r0, [r7, #4]
 800d260:	4608      	mov	r0, r1
 800d262:	4611      	mov	r1, r2
 800d264:	461a      	mov	r2, r3
 800d266:	4603      	mov	r3, r0
 800d268:	807b      	strh	r3, [r7, #2]
 800d26a:	460b      	mov	r3, r1
 800d26c:	707b      	strb	r3, [r7, #1]
 800d26e:	4613      	mov	r3, r2
 800d270:	703b      	strb	r3, [r7, #0]
                                        int32_t (*com_send_fn)(uint8_t *p_data, uint32_t len))
 800d272:	f107 0308 	add.w	r3, r7, #8
 800d276:	2294      	movs	r2, #148	; 0x94
 800d278:	2100      	movs	r1, #0
 800d27a:	4618      	mov	r0, r3
 800d27c:	f002 fa6b 	bl	800f756 <memset>
{
  struct perph_interface interface = {0};
 800d280:	2300      	movs	r3, #0
 800d282:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t status;
  status = PROTOCOL_SUCCESS;
 800d286:	2300      	movs	r3, #0
 800d288:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a

 800d28c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d290:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  interface.type = COM_PORT;
 800d294:	783b      	ldrb	r3, [r7, #0]
 800d296:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  interface.send_callback.com_send_fn = com_send_fn;
  interface.user_data.com.port = com_port;
 800d29a:	887b      	ldrh	r3, [r7, #2]
 800d29c:	787a      	ldrb	r2, [r7, #1]
 800d29e:	f107 0008 	add.w	r0, r7, #8
 800d2a2:	6879      	ldr	r1, [r7, #4]
 800d2a4:	f7ff ff44 	bl	800d130 <protocol_interface_init>
 800d2a8:	4603      	mov	r3, r0
 800d2aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

 800d2ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
  status = protocol_interface_init(&interface, interface_name, boardcast_output_enable, rcv_buf_size);
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	37a0      	adds	r7, #160	; 0xa0
 800d2b6:	46bd      	mov	sp, r7
 800d2b8:	bd80      	pop	{r7, pc}
	...

0800d2bc <protocol_interface_send_data>:
  return status;
}

 800d2bc:	b580      	push	{r7, lr}
 800d2be:	b086      	sub	sp, #24
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	60f8      	str	r0, [r7, #12]
 800d2c4:	60b9      	str	r1, [r7, #8]
 800d2c6:	4613      	mov	r3, r2
 800d2c8:	80fb      	strh	r3, [r7, #6]
int32_t protocol_interface_send_data(struct perph_interface *perph, uint8_t *buff, uint16_t len)
{
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	617b      	str	r3, [r7, #20]
  uint32_t status;
  status = PROTOCOL_SUCCESS;
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d108      	bne.n	800d2e6 <protocol_interface_send_data+0x2a>

  if (perph == NULL)
 800d2d4:	230f      	movs	r3, #15
 800d2d6:	617b      	str	r3, [r7, #20]
  {
 800d2d8:	2297      	movs	r2, #151	; 0x97
 800d2da:	4920      	ldr	r1, [pc, #128]	; (800d35c <protocol_interface_send_data+0xa0>)
 800d2dc:	6978      	ldr	r0, [r7, #20]
 800d2de:	f001 f8e1 	bl	800e4a4 <protocol_s_error_info_printf>
    status = PROTOCOL_ERR_INTER_NOT_FOUND;
 800d2e2:	697b      	ldr	r3, [r7, #20]
 800d2e4:	e035      	b.n	800d352 <protocol_interface_send_data+0x96>
    PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
    return status;
  }
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800d2ec:	2b01      	cmp	r3, #1
 800d2ee:	d116      	bne.n	800d31e <protocol_interface_send_data+0x62>

  if (perph->type == CAN_PORT)
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d009      	beq.n	800d30e <protocol_interface_send_data+0x52>
  {
    if (perph->send_callback.can_send_fn != NULL)
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d300:	68fa      	ldr	r2, [r7, #12]
 800d302:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
 800d306:	88fa      	ldrh	r2, [r7, #6]
 800d308:	68b9      	ldr	r1, [r7, #8]
 800d30a:	4798      	blx	r3
 800d30c:	e020      	b.n	800d350 <protocol_interface_send_data+0x94>
    {
      perph->send_callback.can_send_fn(perph->user_data.can.send_id, buff, len);
    }
    else
 800d30e:	230f      	movs	r3, #15
 800d310:	617b      	str	r3, [r7, #20]
    {
 800d312:	22a4      	movs	r2, #164	; 0xa4
 800d314:	4911      	ldr	r1, [pc, #68]	; (800d35c <protocol_interface_send_data+0xa0>)
 800d316:	6978      	ldr	r0, [r7, #20]
 800d318:	f001 f8c4 	bl	800e4a4 <protocol_s_error_info_printf>
 800d31c:	e018      	b.n	800d350 <protocol_interface_send_data+0x94>
      status = PROTOCOL_ERR_INTER_NOT_FOUND;
      PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
    }
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800d324:	2b00      	cmp	r3, #0
 800d326:	d113      	bne.n	800d350 <protocol_interface_send_data+0x94>
  }
  else if (perph->type == COM_PORT)
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d007      	beq.n	800d342 <protocol_interface_send_data+0x86>
  {
    if (perph->send_callback.com_send_fn != NULL)
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d338:	88fa      	ldrh	r2, [r7, #6]
 800d33a:	4611      	mov	r1, r2
 800d33c:	68b8      	ldr	r0, [r7, #8]
 800d33e:	4798      	blx	r3
 800d340:	e006      	b.n	800d350 <protocol_interface_send_data+0x94>
    {
      perph->send_callback.com_send_fn(buff, len);
    }
    else
 800d342:	230f      	movs	r3, #15
 800d344:	617b      	str	r3, [r7, #20]
    {
 800d346:	22b0      	movs	r2, #176	; 0xb0
 800d348:	4904      	ldr	r1, [pc, #16]	; (800d35c <protocol_interface_send_data+0xa0>)
 800d34a:	6978      	ldr	r0, [r7, #20]
 800d34c:	f001 f8aa 	bl	800e4a4 <protocol_s_error_info_printf>
      status = PROTOCOL_ERR_INTER_NOT_FOUND;
      PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
    }
 800d350:	697b      	ldr	r3, [r7, #20]
  }
 800d352:	4618      	mov	r0, r3
 800d354:	3718      	adds	r7, #24
 800d356:	46bd      	mov	sp, r7
 800d358:	bd80      	pop	{r7, pc}
 800d35a:	bf00      	nop
 800d35c:	0800fa64 	.word	0x0800fa64

0800d360 <protocol_uart_rcv_data>:
      protocol_rcv_data(p_data, data_len, &protocol_local_info.interface[i]);
    }
  } 
  return status;
}

 800d360:	b580      	push	{r7, lr}
 800d362:	b086      	sub	sp, #24
 800d364:	af00      	add	r7, sp, #0
 800d366:	4603      	mov	r3, r0
 800d368:	60b9      	str	r1, [r7, #8]
 800d36a:	607a      	str	r2, [r7, #4]
 800d36c:	73fb      	strb	r3, [r7, #15]
uint32_t protocol_uart_rcv_data(uint8_t com_port, void *p_data, uint32_t data_len)
 800d36e:	2300      	movs	r3, #0
 800d370:	613b      	str	r3, [r7, #16]
{
  uint32_t status =PROTOCOL_SUCCESS;
 800d372:	2300      	movs	r3, #0
 800d374:	617b      	str	r3, [r7, #20]
 800d376:	e026      	b.n	800d3c6 <protocol_uart_rcv_data+0x66>

  for (int i = 0; i< PROTOCOL_INTERFACE_MAX; i++)
 800d378:	4a17      	ldr	r2, [pc, #92]	; (800d3d8 <protocol_uart_rcv_data+0x78>)
 800d37a:	697b      	ldr	r3, [r7, #20]
 800d37c:	2194      	movs	r1, #148	; 0x94
 800d37e:	fb01 f303 	mul.w	r3, r1, r3
 800d382:	4413      	add	r3, r2
 800d384:	f203 633a 	addw	r3, r3, #1594	; 0x63a
 800d388:	781b      	ldrb	r3, [r3, #0]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d118      	bne.n	800d3c0 <protocol_uart_rcv_data+0x60>
  {
 800d38e:	4a12      	ldr	r2, [pc, #72]	; (800d3d8 <protocol_uart_rcv_data+0x78>)
 800d390:	697b      	ldr	r3, [r7, #20]
 800d392:	2194      	movs	r1, #148	; 0x94
 800d394:	fb01 f303 	mul.w	r3, r1, r3
 800d398:	4413      	add	r3, r2
 800d39a:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 800d39e:	681a      	ldr	r2, [r3, #0]
 800d3a0:	7bfb      	ldrb	r3, [r7, #15]
 800d3a2:	429a      	cmp	r2, r3
 800d3a4:	d10c      	bne.n	800d3c0 <protocol_uart_rcv_data+0x60>
    if((protocol_local_info.interface[i].type == COM_PORT)
     &&(protocol_local_info.interface[i].user_data.com.port == com_port))
 800d3a6:	697b      	ldr	r3, [r7, #20]
 800d3a8:	2294      	movs	r2, #148	; 0x94
 800d3aa:	fb02 f303 	mul.w	r3, r2, r3
 800d3ae:	f503 63b7 	add.w	r3, r3, #1464	; 0x5b8
 800d3b2:	4a09      	ldr	r2, [pc, #36]	; (800d3d8 <protocol_uart_rcv_data+0x78>)
 800d3b4:	4413      	add	r3, r2
 800d3b6:	461a      	mov	r2, r3
 800d3b8:	6879      	ldr	r1, [r7, #4]
 800d3ba:	68b8      	ldr	r0, [r7, #8]
 800d3bc:	f7ff fe2c 	bl	800d018 <protocol_rcv_data>
  uint32_t status =PROTOCOL_SUCCESS;
 800d3c0:	697b      	ldr	r3, [r7, #20]
 800d3c2:	3301      	adds	r3, #1
 800d3c4:	617b      	str	r3, [r7, #20]
 800d3c6:	697b      	ldr	r3, [r7, #20]
 800d3c8:	2b04      	cmp	r3, #4
 800d3ca:	ddd5      	ble.n	800d378 <protocol_uart_rcv_data+0x18>
    {
      protocol_rcv_data(p_data, data_len, &protocol_local_info.interface[i]);
    }
 800d3cc:	693b      	ldr	r3, [r7, #16]
  }
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	3718      	adds	r7, #24
 800d3d2:	46bd      	mov	sp, r7
 800d3d4:	bd80      	pop	{r7, pc}
 800d3d6:	bf00      	nop
 800d3d8:	20011390 	.word	0x20011390

0800d3dc <protocol_set_route>:
/**
    * @brief  Protocol set route, set the next hop interface for the specified address
    * @param  tar_add Target address
    *         interface Next hop interface serial number corresponding to the target address
    * @retval Protocol return status
    */
 800d3dc:	b580      	push	{r7, lr}
 800d3de:	b084      	sub	sp, #16
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	4603      	mov	r3, r0
 800d3e4:	6039      	str	r1, [r7, #0]
 800d3e6:	71fb      	strb	r3, [r7, #7]
int32_t protocol_set_route(uint8_t tar_add, const char *name)
{
  uint32_t status;
 800d3e8:	6838      	ldr	r0, [r7, #0]
 800d3ea:	f000 f83b 	bl	800d464 <protocol_get_interface>
 800d3ee:	60f8      	str	r0, [r7, #12]
  struct perph_interface *perph;
  perph = protocol_get_interface(name);
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	60bb      	str	r3, [r7, #8]

 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d108      	bne.n	800d40c <protocol_set_route+0x30>
  status = PROTOCOL_SUCCESS;
  if (perph == NULL)
 800d3fa:	230f      	movs	r3, #15
 800d3fc:	60bb      	str	r3, [r7, #8]
  {
 800d3fe:	22e5      	movs	r2, #229	; 0xe5
 800d400:	4916      	ldr	r1, [pc, #88]	; (800d45c <protocol_set_route+0x80>)
 800d402:	68b8      	ldr	r0, [r7, #8]
 800d404:	f001 f84e 	bl	800e4a4 <protocol_s_error_info_printf>
    status = PROTOCOL_ERR_INTER_NOT_FOUND;
 800d408:	68bb      	ldr	r3, [r7, #8]
 800d40a:	e022      	b.n	800d452 <protocol_set_route+0x76>
    PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
    return status;
 800d40c:	79fb      	ldrb	r3, [r7, #7]
 800d40e:	2bfd      	cmp	r3, #253	; 0xfd
 800d410:	d908      	bls.n	800d424 <protocol_set_route+0x48>
  }
  if (tar_add >= PROTOCOL_ROUTE_TABLE_MAX_NUM)
 800d412:	230e      	movs	r3, #14
 800d414:	60bb      	str	r3, [r7, #8]
  {
 800d416:	22eb      	movs	r2, #235	; 0xeb
 800d418:	4910      	ldr	r1, [pc, #64]	; (800d45c <protocol_set_route+0x80>)
 800d41a:	68b8      	ldr	r0, [r7, #8]
 800d41c:	f001 f842 	bl	800e4a4 <protocol_s_error_info_printf>
    status = PROTOCOL_ERR_ROUTEU_SET_BEYOND;
 800d420:	68bb      	ldr	r3, [r7, #8]
 800d422:	e016      	b.n	800d452 <protocol_set_route+0x76>
    PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
    return status;
  }
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d108      	bne.n	800d440 <protocol_set_route+0x64>

  if (perph->is_valid == 0)
 800d42e:	230f      	movs	r3, #15
 800d430:	60bb      	str	r3, [r7, #8]
  {
 800d432:	22f2      	movs	r2, #242	; 0xf2
 800d434:	4909      	ldr	r1, [pc, #36]	; (800d45c <protocol_set_route+0x80>)
 800d436:	68b8      	ldr	r0, [r7, #8]
 800d438:	f001 f834 	bl	800e4a4 <protocol_s_error_info_printf>
    status = PROTOCOL_ERR_INTER_NOT_FOUND;
 800d43c:	68bb      	ldr	r3, [r7, #8]
 800d43e:	e008      	b.n	800d452 <protocol_set_route+0x76>
    PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
    return status;
  }
 800d440:	79fb      	ldrb	r3, [r7, #7]
 800d442:	68fa      	ldr	r2, [r7, #12]
 800d444:	f892 1060 	ldrb.w	r1, [r2, #96]	; 0x60
 800d448:	4a05      	ldr	r2, [pc, #20]	; (800d460 <protocol_set_route+0x84>)
 800d44a:	4413      	add	r3, r2
 800d44c:	460a      	mov	r2, r1
 800d44e:	705a      	strb	r2, [r3, #1]

  protocol_local_info.route_table[tar_add] = perph->idx;

  PROTOCOL_OTHER_INFO_PRINTF("Route has been set, Address 0x%02X next jump is %s[%d].",
                             tar_add, perph->object_name, perph->idx);
 800d450:	68bb      	ldr	r3, [r7, #8]

 800d452:	4618      	mov	r0, r3
 800d454:	3710      	adds	r7, #16
 800d456:	46bd      	mov	sp, r7
 800d458:	bd80      	pop	{r7, pc}
 800d45a:	bf00      	nop
 800d45c:	0800fa64 	.word	0x0800fa64
 800d460:	20011390 	.word	0x20011390

0800d464 <protocol_get_interface>:
  return status;
}

 800d464:	b590      	push	{r4, r7, lr}
 800d466:	b087      	sub	sp, #28
 800d468:	af00      	add	r7, sp, #0
 800d46a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800d46c:	f3ef 8310 	mrs	r3, PRIMASK
 800d470:	613b      	str	r3, [r7, #16]
  return(result);
 800d472:	693b      	ldr	r3, [r7, #16]
struct perph_interface *protocol_get_interface(const char *name)
{
 800d474:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 800d476:	b672      	cpsid	i
}
 800d478:	bf00      	nop
  var_cpu_sr();
 800d47a:	2300      	movs	r3, #0
 800d47c:	617b      	str	r3, [r7, #20]
 800d47e:	e020      	b.n	800d4c2 <protocol_get_interface+0x5e>
  enter_critical();
  for (int i = 0; i < PROTOCOL_INTERFACE_MAX; i++)
 800d480:	697b      	ldr	r3, [r7, #20]
 800d482:	2294      	movs	r2, #148	; 0x94
 800d484:	fb02 f303 	mul.w	r3, r2, r3
 800d488:	f503 63b7 	add.w	r3, r3, #1464	; 0x5b8
 800d48c:	4a13      	ldr	r2, [pc, #76]	; (800d4dc <protocol_get_interface+0x78>)
 800d48e:	4413      	add	r3, r2
 800d490:	2220      	movs	r2, #32
 800d492:	6879      	ldr	r1, [r7, #4]
 800d494:	4618      	mov	r0, r3
 800d496:	f002 f939 	bl	800f70c <strncmp>
 800d49a:	4603      	mov	r3, r0
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d10d      	bne.n	800d4bc <protocol_get_interface+0x58>
 800d4a0:	60fc      	str	r4, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	f383 8810 	msr	PRIMASK, r3
}
 800d4a8:	bf00      	nop
  {
    if (strncmp(protocol_local_info.interface[i].object_name, name, PROTOCOL_OBJ_NAME_MAX_LEN) == 0)
    {
 800d4aa:	697b      	ldr	r3, [r7, #20]
 800d4ac:	2294      	movs	r2, #148	; 0x94
 800d4ae:	fb02 f303 	mul.w	r3, r2, r3
 800d4b2:	f503 63b7 	add.w	r3, r3, #1464	; 0x5b8
 800d4b6:	4a09      	ldr	r2, [pc, #36]	; (800d4dc <protocol_get_interface+0x78>)
 800d4b8:	4413      	add	r3, r2
 800d4ba:	e00b      	b.n	800d4d4 <protocol_get_interface+0x70>
  var_cpu_sr();
 800d4bc:	697b      	ldr	r3, [r7, #20]
 800d4be:	3301      	adds	r3, #1
 800d4c0:	617b      	str	r3, [r7, #20]
 800d4c2:	697b      	ldr	r3, [r7, #20]
 800d4c4:	2b04      	cmp	r3, #4
 800d4c6:	dddb      	ble.n	800d480 <protocol_get_interface+0x1c>
 800d4c8:	60bc      	str	r4, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d4ca:	68bb      	ldr	r3, [r7, #8]
 800d4cc:	f383 8810 	msr	PRIMASK, r3
}
 800d4d0:	bf00      	nop
      exit_critical();
      return &protocol_local_info.interface[i];
    }
  }
 800d4d2:	2300      	movs	r3, #0
  exit_critical();
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	371c      	adds	r7, #28
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	bd90      	pop	{r4, r7, pc}
 800d4dc:	20011390 	.word	0x20011390

0800d4e0 <__list_add>:
 * the prev/next entries already!
 */
static __inline void __list_add(list_t *new,
                                list_t *prev,
                                list_t *next)
{
 800d4e0:	b480      	push	{r7}
 800d4e2:	b085      	sub	sp, #20
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	60f8      	str	r0, [r7, #12]
 800d4e8:	60b9      	str	r1, [r7, #8]
 800d4ea:	607a      	str	r2, [r7, #4]
  next->prev = new;
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	68fa      	ldr	r2, [r7, #12]
 800d4f0:	605a      	str	r2, [r3, #4]
  new->next = next;
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	687a      	ldr	r2, [r7, #4]
 800d4f6:	601a      	str	r2, [r3, #0]
  new->prev = prev;
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	68ba      	ldr	r2, [r7, #8]
 800d4fc:	605a      	str	r2, [r3, #4]
  prev->next = new;
 800d4fe:	68bb      	ldr	r3, [r7, #8]
 800d500:	68fa      	ldr	r2, [r7, #12]
 800d502:	601a      	str	r2, [r3, #0]
}
 800d504:	bf00      	nop
 800d506:	3714      	adds	r7, #20
 800d508:	46bd      	mov	sp, r7
 800d50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d50e:	4770      	bx	lr

0800d510 <list_add>:
 *
 * Insert a new entry after the specified head.
 * This is good for implementing stacks.
 */
static __inline void list_add(list_t *new, list_t *head)
{
 800d510:	b580      	push	{r7, lr}
 800d512:	b082      	sub	sp, #8
 800d514:	af00      	add	r7, sp, #0
 800d516:	6078      	str	r0, [r7, #4]
 800d518:	6039      	str	r1, [r7, #0]
  __list_add(new, head, head->next);
 800d51a:	683b      	ldr	r3, [r7, #0]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	461a      	mov	r2, r3
 800d520:	6839      	ldr	r1, [r7, #0]
 800d522:	6878      	ldr	r0, [r7, #4]
 800d524:	f7ff ffdc 	bl	800d4e0 <__list_add>
}
 800d528:	bf00      	nop
 800d52a:	3708      	adds	r7, #8
 800d52c:	46bd      	mov	sp, r7
 800d52e:	bd80      	pop	{r7, pc}

0800d530 <__list_del>:
 *
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 */
static __inline void __list_del(list_t *prev, list_t *next)
{
 800d530:	b480      	push	{r7}
 800d532:	b083      	sub	sp, #12
 800d534:	af00      	add	r7, sp, #0
 800d536:	6078      	str	r0, [r7, #4]
 800d538:	6039      	str	r1, [r7, #0]
  next->prev = prev;
 800d53a:	683b      	ldr	r3, [r7, #0]
 800d53c:	687a      	ldr	r2, [r7, #4]
 800d53e:	605a      	str	r2, [r3, #4]
  prev->next = next;
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	683a      	ldr	r2, [r7, #0]
 800d544:	601a      	str	r2, [r3, #0]
}
 800d546:	bf00      	nop
 800d548:	370c      	adds	r7, #12
 800d54a:	46bd      	mov	sp, r7
 800d54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d550:	4770      	bx	lr

0800d552 <list_del>:
 * @entry: the element to delete from the list.
 * Note: list_empty() on entry does not return true after this, the entry is
 * in an undefined state.
 */
static __inline void list_del(list_t *entry)
{
 800d552:	b580      	push	{r7, lr}
 800d554:	b082      	sub	sp, #8
 800d556:	af00      	add	r7, sp, #0
 800d558:	6078      	str	r0, [r7, #4]
  __list_del(entry->prev, entry->next);
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	685a      	ldr	r2, [r3, #4]
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	4619      	mov	r1, r3
 800d564:	4610      	mov	r0, r2
 800d566:	f7ff ffe3 	bl	800d530 <__list_del>
}
 800d56a:	bf00      	nop
 800d56c:	3708      	adds	r7, #8
 800d56e:	46bd      	mov	sp, r7
 800d570:	bd80      	pop	{r7, pc}

0800d572 <protocol_get_session>:
extern local_info_t protocol_local_info;
extern boardcast_object_t boardcast_object;

/* Private function prototypes -----------------------------------------------*/
/* Exported functions --------------------------------------------------------*/

 800d572:	b480      	push	{r7}
 800d574:	b085      	sub	sp, #20
 800d576:	af00      	add	r7, sp, #0
 800d578:	6078      	str	r0, [r7, #4]
uint8_t protocol_get_session(struct perph_interface * interface)
 800d57a:	2300      	movs	r3, #0
 800d57c:	60fb      	str	r3, [r7, #12]
 800d57e:	e014      	b.n	800d5aa <protocol_get_session+0x38>
{
  for (int i = 0; i < 31; i++)
 800d580:	687a      	ldr	r2, [r7, #4]
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	4413      	add	r3, r2
 800d586:	3363      	adds	r3, #99	; 0x63
 800d588:	781b      	ldrb	r3, [r3, #0]
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d10a      	bne.n	800d5a4 <protocol_get_session+0x32>
  {
    if (interface->session[i] == 0)
 800d58e:	687a      	ldr	r2, [r7, #4]
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	4413      	add	r3, r2
 800d594:	3363      	adds	r3, #99	; 0x63
 800d596:	2201      	movs	r2, #1
 800d598:	701a      	strb	r2, [r3, #0]
    {
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	b2db      	uxtb	r3, r3
 800d59e:	3301      	adds	r3, #1
 800d5a0:	b2db      	uxtb	r3, r3
 800d5a2:	e006      	b.n	800d5b2 <protocol_get_session+0x40>
uint8_t protocol_get_session(struct perph_interface * interface)
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	3301      	adds	r3, #1
 800d5a8:	60fb      	str	r3, [r7, #12]
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	2b1e      	cmp	r3, #30
 800d5ae:	dde7      	ble.n	800d580 <protocol_get_session+0xe>
      interface->session[i] = 1;
      return i + 1;
    }
 800d5b0:	2300      	movs	r3, #0
  }
 800d5b2:	4618      	mov	r0, r3
 800d5b4:	3714      	adds	r7, #20
 800d5b6:	46bd      	mov	sp, r7
 800d5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5bc:	4770      	bx	lr

0800d5be <protocol_release_session>:
  return 0;
}

 800d5be:	b480      	push	{r7}
 800d5c0:	b083      	sub	sp, #12
 800d5c2:	af00      	add	r7, sp, #0
 800d5c4:	6078      	str	r0, [r7, #4]
 800d5c6:	460b      	mov	r3, r1
 800d5c8:	70fb      	strb	r3, [r7, #3]
int32_t protocol_release_session(struct perph_interface * interface, uint8_t id)
 800d5ca:	78fb      	ldrb	r3, [r7, #3]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d00b      	beq.n	800d5e8 <protocol_release_session+0x2a>
 800d5d0:	78fb      	ldrb	r3, [r7, #3]
 800d5d2:	2b1f      	cmp	r3, #31
 800d5d4:	d808      	bhi.n	800d5e8 <protocol_release_session+0x2a>
{
  if ((id > 0) && (id < 32))
 800d5d6:	78fb      	ldrb	r3, [r7, #3]
 800d5d8:	3b01      	subs	r3, #1
 800d5da:	687a      	ldr	r2, [r7, #4]
 800d5dc:	4413      	add	r3, r2
 800d5de:	2200      	movs	r2, #0
 800d5e0:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
  {
 800d5e4:	2300      	movs	r3, #0
 800d5e6:	e001      	b.n	800d5ec <protocol_release_session+0x2e>
    interface->session[id - 1] = 0;
    return 0;
 800d5e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	370c      	adds	r7, #12
 800d5f0:	46bd      	mov	sp, r7
 800d5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f6:	4770      	bx	lr

0800d5f8 <protocol_s_add_sendnode>:
  return -1;
}

// Add protocol frame
uint32_t protocol_s_add_sendnode(uint8_t reciver, uint8_t session, uint8_t pack_type,
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b094      	sub	sp, #80	; 0x50
 800d5fc:	af02      	add	r7, sp, #8
 800d5fe:	603b      	str	r3, [r7, #0]
 800d600:	4603      	mov	r3, r0
 800d602:	71fb      	strb	r3, [r7, #7]
 800d604:	460b      	mov	r3, r1
 800d606:	71bb      	strb	r3, [r7, #6]
 800d608:	4613      	mov	r3, r2
 800d60a:	717b      	strb	r3, [r7, #5]
                                 void *p_data, uint32_t data_len, uint16_t cmd, uint16_t ack_seq)
 800d60c:	2300      	movs	r3, #0
 800d60e:	60fb      	str	r3, [r7, #12]
  uint32_t malloc_size;
  uint8_t *malloc_zone;
  uint32_t pack_head_offset;
  protocol_pack_desc_t *pack_head;
  send_list_node_t *send_node;
  uint16_t seq;
 800d610:	2300      	movs	r3, #0
 800d612:	63fb      	str	r3, [r7, #60]	; 0x3c

  status = PROTOCOL_SUCCESS;
 800d614:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d616:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d61a:	d908      	bls.n	800d62e <protocol_s_add_sendnode+0x36>

  if (data_len > PROTOCOL_MAX_DATA_LEN)
 800d61c:	2301      	movs	r3, #1
 800d61e:	63fb      	str	r3, [r7, #60]	; 0x3c
  {
 800d620:	224b      	movs	r2, #75	; 0x4b
 800d622:	499e      	ldr	r1, [pc, #632]	; (800d89c <protocol_s_add_sendnode+0x2a4>)
 800d624:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d626:	f000 ff3d 	bl	800e4a4 <protocol_s_error_info_printf>
    status = PROTOCOL_ERR_DATA_TOO_LONG;
 800d62a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d62c:	e132      	b.n	800d894 <protocol_s_add_sendnode+0x29c>
    PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
    return status;
  }

 800d62e:	797b      	ldrb	r3, [r7, #5]
 800d630:	f003 0301 	and.w	r3, r3, #1
 800d634:	b2da      	uxtb	r2, r3
 800d636:	7bfb      	ldrb	r3, [r7, #15]
 800d638:	f362 1345 	bfi	r3, r2, #5, #1
 800d63c:	73fb      	strb	r3, [r7, #15]
  // Configure sending parameters
 800d63e:	79bb      	ldrb	r3, [r7, #6]
 800d640:	f003 031f 	and.w	r3, r3, #31
 800d644:	b2da      	uxtb	r2, r3
 800d646:	7bfb      	ldrb	r3, [r7, #15]
 800d648:	f362 0304 	bfi	r3, r2, #0, #5
 800d64c:	73fb      	strb	r3, [r7, #15]
  ctx.s_a_r.pack_type = pack_type;
 800d64e:	7bfb      	ldrb	r3, [r7, #15]
 800d650:	f36f 1387 	bfc	r3, #6, #2
 800d654:	73fb      	strb	r3, [r7, #15]
  ctx.s_a_r.session = session;
 800d656:	79fb      	ldrb	r3, [r7, #7]
 800d658:	73bb      	strb	r3, [r7, #14]
  ctx.s_a_r.res = 0;
 800d65a:	2300      	movs	r3, #0
 800d65c:	81bb      	strh	r3, [r7, #12]
  ctx.reciver = reciver;
  ctx.version = PROTOCOL_VERSION;

 800d65e:	79fb      	ldrb	r3, [r7, #7]
 800d660:	4618      	mov	r0, r3
 800d662:	f000 fbf9 	bl	800de58 <protocol_s_get_route>
 800d666:	63b8      	str	r0, [r7, #56]	; 0x38
  // Get routing interface
  int_obj = protocol_s_get_route(reciver);
 800d668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d108      	bne.n	800d680 <protocol_s_add_sendnode+0x88>

  if (int_obj == NULL)
 800d66e:	2306      	movs	r3, #6
 800d670:	63fb      	str	r3, [r7, #60]	; 0x3c
  {
 800d672:	225c      	movs	r2, #92	; 0x5c
 800d674:	4989      	ldr	r1, [pc, #548]	; (800d89c <protocol_s_add_sendnode+0x2a4>)
 800d676:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d678:	f000 ff14 	bl	800e4a4 <protocol_s_error_info_printf>
    status = PROTOCOL_ERR_ROUTE_NOT_FOUND;
    PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 800d67c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d67e:	e109      	b.n	800d894 <protocol_s_add_sendnode+0x29c>

    return status;
  }
 800d680:	797b      	ldrb	r3, [r7, #5]
 800d682:	2b00      	cmp	r3, #0
 800d684:	d114      	bne.n	800d6b0 <protocol_s_add_sendnode+0xb8>
 800d686:	79bb      	ldrb	r3, [r7, #6]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d011      	beq.n	800d6b0 <protocol_s_add_sendnode+0xb8>

  if ((pack_type == PROTOCOL_PACK_NOR) && (session != 0))
 800d68c:	79ba      	ldrb	r2, [r7, #6]
 800d68e:	79fb      	ldrb	r3, [r7, #7]
 800d690:	4619      	mov	r1, r3
 800d692:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d694:	f000 fc0c 	bl	800deb0 <protocol_s_session_get_node>
 800d698:	4603      	mov	r3, r0
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d008      	beq.n	800d6b0 <protocol_s_add_sendnode+0xb8>
  {
    if (protocol_s_session_get_node(int_obj, reciver, session) != NULL)
 800d69e:	2305      	movs	r3, #5
 800d6a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    {
 800d6a2:	2266      	movs	r2, #102	; 0x66
 800d6a4:	497d      	ldr	r1, [pc, #500]	; (800d89c <protocol_s_add_sendnode+0x2a4>)
 800d6a6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d6a8:	f000 fefc 	bl	800e4a4 <protocol_s_error_info_printf>
      status = PROTOCOL_ERR_SESSION_IS_USE;
 800d6ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6ae:	e0f1      	b.n	800d894 <protocol_s_add_sendnode+0x29c>
      PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
      return status;
    }
  }

 800d6b0:	797b      	ldrb	r3, [r7, #5]
 800d6b2:	2b01      	cmp	r3, #1
 800d6b4:	d103      	bne.n	800d6be <protocol_s_add_sendnode+0xc6>
  // Allocate memory required for data frame
  if (pack_type == PROTOCOL_PACK_ACK)
 800d6b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d6b8:	3340      	adds	r3, #64	; 0x40
 800d6ba:	647b      	str	r3, [r7, #68]	; 0x44
 800d6bc:	e002      	b.n	800d6c4 <protocol_s_add_sendnode+0xcc>
  {
    malloc_size = PROTOCOL_PACK_HEAD_TAIL_SIZE + PROTOCOL_SEND_NODE_SIZE +
                  data_len;
  }
  else
 800d6be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d6c0:	3342      	adds	r3, #66	; 0x42
 800d6c2:	647b      	str	r3, [r7, #68]	; 0x44
  {
    malloc_size = PROTOCOL_PACK_HEAD_TAIL_SIZE + PROTOCOL_SEND_NODE_SIZE +
                  data_len + PROTOCOL_PACK_CMD_SIZE;
 800d6c4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d6c6:	f7ff fd05 	bl	800d0d4 <protocol_p_malloc>
 800d6ca:	6378      	str	r0, [r7, #52]	; 0x34
  }
 800d6cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d108      	bne.n	800d6e4 <protocol_s_add_sendnode+0xec>
  malloc_zone = protocol_p_malloc(malloc_size);
  if (malloc_zone == NULL)
 800d6d2:	2302      	movs	r3, #2
 800d6d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  {
 800d6d6:	227a      	movs	r2, #122	; 0x7a
 800d6d8:	4970      	ldr	r1, [pc, #448]	; (800d89c <protocol_s_add_sendnode+0x2a4>)
 800d6da:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d6dc:	f000 fee2 	bl	800e4a4 <protocol_s_error_info_printf>
    status = PROTOCOL_ERR_NOT_ENOUGH_MEM;
 800d6e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6e2:	e0d7      	b.n	800d894 <protocol_s_add_sendnode+0x29c>
    PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
    return status;
  }
 800d6e4:	797b      	ldrb	r3, [r7, #5]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d118      	bne.n	800d71c <protocol_s_add_sendnode+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800d6ea:	f3ef 8310 	mrs	r3, PRIMASK
 800d6ee:	61fb      	str	r3, [r7, #28]
  return(result);
 800d6f0:	69fa      	ldr	r2, [r7, #28]

  if (pack_type == PROTOCOL_PACK_NOR)
 800d6f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6f4:	65da      	str	r2, [r3, #92]	; 0x5c
  __ASM volatile ("cpsid i" : : : "memory");
 800d6f6:	b672      	cpsid	i
}
 800d6f8:	bf00      	nop
  {
 800d6fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6fc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800d700:	1c5a      	adds	r2, r3, #1
 800d702:	b291      	uxth	r1, r2
 800d704:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d706:	f8a2 1058 	strh.w	r1, [r2, #88]	; 0x58
 800d70a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    MUTEX_LOCK(int_obj->send.mutex_lock);
 800d70e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d712:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d714:	6a3b      	ldr	r3, [r7, #32]
 800d716:	f383 8810 	msr	PRIMASK, r3
}
 800d71a:	e003      	b.n	800d724 <protocol_s_add_sendnode+0x12c>
    seq = int_obj->send.send_seq++;
    MUTEX_UNLOCK(int_obj->send.mutex_lock);
  }
  else
 800d71c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800d720:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  {
    seq = ack_seq;
  }
 800d724:	2330      	movs	r3, #48	; 0x30
 800d726:	633b      	str	r3, [r7, #48]	; 0x30

 800d728:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d72a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d72c:	4413      	add	r3, r2
 800d72e:	62fb      	str	r3, [r7, #44]	; 0x2c
  pack_head_offset = PROTOCOL_SEND_NODE_SIZE;
 800d730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d732:	62bb      	str	r3, [r7, #40]	; 0x28
  pack_head = (protocol_pack_desc_t *)&malloc_zone[pack_head_offset];
  send_node = (send_list_node_t *)&malloc_zone[0];

 800d734:	f107 000c 	add.w	r0, r7, #12
 800d738:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800d73c:	9301      	str	r3, [sp, #4]
 800d73e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d742:	9300      	str	r3, [sp, #0]
 800d744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d746:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d748:	6839      	ldr	r1, [r7, #0]
 800d74a:	f000 f945 	bl	800d9d8 <protocol_s_fill_pack>
  // Fill in the frame data section
  protocol_s_fill_pack(&ctx, p_data, data_len, (uint8_t *)(pack_head), seq, cmd);

 800d74e:	7bfb      	ldrb	r3, [r7, #15]
 800d750:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800d754:	b2db      	uxtb	r3, r3
 800d756:	461a      	mov	r2, r3
 800d758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d75a:	745a      	strb	r2, [r3, #17]
  // Populate send_node
 800d75c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d75e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d760:	441a      	add	r2, r3
 800d762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d764:	609a      	str	r2, [r3, #8]
  send_node->session = ctx.s_a_r.session;
 800d766:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d768:	b29b      	uxth	r3, r3
 800d76a:	3b30      	subs	r3, #48	; 0x30
 800d76c:	b29a      	uxth	r2, r3
 800d76e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d770:	819a      	strh	r2, [r3, #12]
  send_node->p_data = &malloc_zone[pack_head_offset];
 800d772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d774:	2200      	movs	r2, #0
 800d776:	61da      	str	r2, [r3, #28]
  send_node->len = malloc_size - PROTOCOL_SEND_NODE_SIZE;
 800d778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d77a:	2200      	movs	r2, #0
 800d77c:	73da      	strb	r2, [r3, #15]
  send_node->pre_timestamp = 0;
 800d77e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d780:	2201      	movs	r2, #1
 800d782:	f883 2020 	strb.w	r2, [r3, #32]
  send_node->is_got_ack = 0;
 800d786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d788:	79fa      	ldrb	r2, [r7, #7]
 800d78a:	749a      	strb	r2, [r3, #18]
  send_node->is_first_send = 1;
 800d78c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d78e:	797a      	ldrb	r2, [r7, #5]
 800d790:	759a      	strb	r2, [r3, #22]
  send_node->address = reciver;
 800d792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d794:	2200      	movs	r2, #0
 800d796:	741a      	strb	r2, [r3, #16]
  send_node->pack_type = pack_type;
 800d798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d79a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800d79e:	829a      	strh	r2, [r3, #20]
  send_node->is_ready_realse = 0;
 800d7a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7a2:	2200      	movs	r2, #0
 800d7a4:	625a      	str	r2, [r3, #36]	; 0x24
  send_node->cmd = cmd;
  send_node->forward_src_obj = NULL;

 800d7a6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	f7ff f9f0 	bl	800cb90 <protocol_get_send_cmd_info>
 800d7b0:	6278      	str	r0, [r7, #36]	; 0x24
  struct send_cmd_info *cmd_info;
 800d7b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d010      	beq.n	800d7da <protocol_s_add_sendnode+0x1e2>
  cmd_info = protocol_get_send_cmd_info(cmd);
  if (cmd_info != NULL)
 800d7b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ba:	795a      	ldrb	r2, [r3, #5]
 800d7bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7be:	75da      	strb	r2, [r3, #23]
  {
 800d7c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7c2:	88da      	ldrh	r2, [r3, #6]
 800d7c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7c6:	831a      	strh	r2, [r3, #24]
    send_node->rest_cnt = cmd_info->resend_times;
 800d7c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ca:	689a      	ldr	r2, [r3, #8]
 800d7cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7ce:	629a      	str	r2, [r3, #40]	; 0x28
    send_node->timeout = cmd_info->resend_timeout;
 800d7d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7d2:	68da      	ldr	r2, [r3, #12]
 800d7d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7d6:	62da      	str	r2, [r3, #44]	; 0x2c
 800d7d8:	e00b      	b.n	800d7f2 <protocol_s_add_sendnode+0x1fa>
    send_node->ack_callback = cmd_info->ack_callback;
    send_node->no_ack_callback = cmd_info->no_ack_callback;
  }
  else
 800d7da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7dc:	2201      	movs	r2, #1
 800d7de:	75da      	strb	r2, [r3, #23]
  {
 800d7e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7e2:	2200      	movs	r2, #0
 800d7e4:	831a      	strh	r2, [r3, #24]
    send_node->rest_cnt = 1;
 800d7e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7e8:	2200      	movs	r2, #0
 800d7ea:	629a      	str	r2, [r3, #40]	; 0x28
    send_node->timeout = 0;
 800d7ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7ee:	2200      	movs	r2, #0
 800d7f0:	62da      	str	r2, [r3, #44]	; 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800d7f2:	f3ef 8310 	mrs	r3, PRIMASK
 800d7f6:	61bb      	str	r3, [r7, #24]
  return(result);
 800d7f8:	69ba      	ldr	r2, [r7, #24]
    send_node->ack_callback = NULL;
    send_node->no_ack_callback = NULL;
  }

 800d7fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7fc:	65da      	str	r2, [r3, #92]	; 0x5c
  __ASM volatile ("cpsid i" : : : "memory");
 800d7fe:	b672      	cpsid	i
}
 800d800:	bf00      	nop
  //Add to sending list
  MUTEX_LOCK(int_obj->send.mutex_lock);
 800d802:	797b      	ldrb	r3, [r7, #5]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d11b      	bne.n	800d840 <protocol_s_add_sendnode+0x248>
 800d808:	79bb      	ldrb	r3, [r7, #6]
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d018      	beq.n	800d840 <protocol_s_add_sendnode+0x248>

  if ((pack_type == PROTOCOL_PACK_NOR) && (session != 0))
 800d80e:	79ba      	ldrb	r2, [r7, #6]
 800d810:	79fb      	ldrb	r3, [r7, #7]
 800d812:	4619      	mov	r1, r3
 800d814:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d816:	f000 fb4b 	bl	800deb0 <protocol_s_session_get_node>
 800d81a:	4603      	mov	r3, r0
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d00f      	beq.n	800d840 <protocol_s_add_sendnode+0x248>
  {
    if (protocol_s_session_get_node(int_obj, reciver, session) != NULL)
 800d820:	2305      	movs	r3, #5
 800d822:	63fb      	str	r3, [r7, #60]	; 0x3c
    {
 800d824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d828:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d82a:	697b      	ldr	r3, [r7, #20]
 800d82c:	f383 8810 	msr	PRIMASK, r3
}
 800d830:	bf00      	nop
      status = PROTOCOL_ERR_SESSION_IS_USE;
 800d832:	22b7      	movs	r2, #183	; 0xb7
 800d834:	4919      	ldr	r1, [pc, #100]	; (800d89c <protocol_s_add_sendnode+0x2a4>)
 800d836:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d838:	f000 fe34 	bl	800e4a4 <protocol_s_error_info_printf>
      MUTEX_UNLOCK(int_obj->send.mutex_lock);
 800d83c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d83e:	e029      	b.n	800d894 <protocol_s_add_sendnode+0x29c>
      PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
      return status;
    }
  }
 800d840:	797b      	ldrb	r3, [r7, #5]
 800d842:	2b00      	cmp	r3, #0
 800d844:	d10f      	bne.n	800d866 <protocol_s_add_sendnode+0x26e>

  if (pack_type == PROTOCOL_PACK_NOR)
 800d846:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d84a:	3348      	adds	r3, #72	; 0x48
 800d84c:	4619      	mov	r1, r3
 800d84e:	4610      	mov	r0, r2
 800d850:	f7ff fe5e 	bl	800d510 <list_add>
  {
 800d854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d856:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 800d85a:	3301      	adds	r3, #1
 800d85c:	b2da      	uxtb	r2, r3
 800d85e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d860:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
 800d864:	e00e      	b.n	800d884 <protocol_s_add_sendnode+0x28c>
    list_add(&(send_node->send_list), &(int_obj->send.normal_list_header));
    int_obj->send.normal_node_num++;
  }
  else
 800d866:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d86a:	3350      	adds	r3, #80	; 0x50
 800d86c:	4619      	mov	r1, r3
 800d86e:	4610      	mov	r0, r2
 800d870:	f7ff fe4e 	bl	800d510 <list_add>
  {
 800d874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d876:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 800d87a:	3301      	adds	r3, #1
 800d87c:	b2da      	uxtb	r2, r3
 800d87e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d880:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
    list_add(&(send_node->send_list), &(int_obj->send.ack_list_header));
    int_obj->send.ack_node_num++;
  }
 800d884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d888:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d88a:	693b      	ldr	r3, [r7, #16]
 800d88c:	f383 8810 	msr	PRIMASK, r3
}
 800d890:	bf00      	nop
  }
  else
  {
    PROTOCOL_SEND_DBG_PRINTF("Send pack, Address:0x%02X, Session: %d Ack pack.",
                              reciver, session);
  }
 800d892:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

 800d894:	4618      	mov	r0, r3
 800d896:	3748      	adds	r7, #72	; 0x48
 800d898:	46bd      	mov	sp, r7
 800d89a:	bd80      	pop	{r7, pc}
 800d89c:	0800faa8 	.word	0x0800faa8

0800d8a0 <protocol_s_broadcast_add_node>:
  return status;
}

// Add processing function to broadcast package
 800d8a0:	b580      	push	{r7, lr}
 800d8a2:	b090      	sub	sp, #64	; 0x40
 800d8a4:	af02      	add	r7, sp, #8
 800d8a6:	60f8      	str	r0, [r7, #12]
 800d8a8:	60b9      	str	r1, [r7, #8]
 800d8aa:	4613      	mov	r3, r2
 800d8ac:	80fb      	strh	r3, [r7, #6]
  uint32_t status;
  uint32_t malloc_size;
  uint8_t *malloc_zone;
  uint32_t pack_head_offset;
  protocol_pack_desc_t *pack_head;
  send_list_node_t *send_node;
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	637b      	str	r3, [r7, #52]	; 0x34

  status = PROTOCOL_SUCCESS;
 800d8b2:	68bb      	ldr	r3, [r7, #8]
 800d8b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d8b8:	d908      	bls.n	800d8cc <protocol_s_broadcast_add_node+0x2c>

  if (data_len > PROTOCOL_MAX_DATA_LEN)
 800d8ba:	2301      	movs	r3, #1
 800d8bc:	637b      	str	r3, [r7, #52]	; 0x34
  {
 800d8be:	22e7      	movs	r2, #231	; 0xe7
 800d8c0:	4943      	ldr	r1, [pc, #268]	; (800d9d0 <protocol_s_broadcast_add_node+0x130>)
 800d8c2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d8c4:	f000 fdee 	bl	800e4a4 <protocol_s_error_info_printf>
    status = PROTOCOL_ERR_DATA_TOO_LONG;
 800d8c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8ca:	e07d      	b.n	800d9c8 <protocol_s_broadcast_add_node+0x128>
    PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
    return status;
  }

 800d8cc:	7dfb      	ldrb	r3, [r7, #23]
 800d8ce:	f36f 1345 	bfc	r3, #5, #1
 800d8d2:	75fb      	strb	r3, [r7, #23]
  // Configure sending parameters
 800d8d4:	7dfb      	ldrb	r3, [r7, #23]
 800d8d6:	f36f 0304 	bfc	r3, #0, #5
 800d8da:	75fb      	strb	r3, [r7, #23]
  ctx.s_a_r.pack_type = PROTOCOL_PACK_NOR;
 800d8dc:	7dfb      	ldrb	r3, [r7, #23]
 800d8de:	f36f 1387 	bfc	r3, #6, #2
 800d8e2:	75fb      	strb	r3, [r7, #23]
  ctx.s_a_r.session = 0;
 800d8e4:	23ff      	movs	r3, #255	; 0xff
 800d8e6:	75bb      	strb	r3, [r7, #22]
  ctx.s_a_r.res = 0;
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	82bb      	strh	r3, [r7, #20]
  ctx.reciver = PROTOCOL_BROADCAST_ADDR;
  ctx.version = PROTOCOL_VERSION;
 800d8ec:	68bb      	ldr	r3, [r7, #8]
 800d8ee:	3342      	adds	r3, #66	; 0x42
 800d8f0:	633b      	str	r3, [r7, #48]	; 0x30

  malloc_size = PROTOCOL_PACK_HEAD_TAIL_SIZE + PROTOCOL_SEND_NODE_SIZE +
                data_len + PROTOCOL_PACK_CMD_SIZE;
 800d8f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d8f4:	f7ff fbee 	bl	800d0d4 <protocol_p_malloc>
 800d8f8:	62f8      	str	r0, [r7, #44]	; 0x2c

 800d8fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d108      	bne.n	800d912 <protocol_s_broadcast_add_node+0x72>
  malloc_zone = protocol_p_malloc(malloc_size);
  if (malloc_zone == NULL)
 800d900:	2302      	movs	r3, #2
 800d902:	637b      	str	r3, [r7, #52]	; 0x34
  {
 800d904:	22f9      	movs	r2, #249	; 0xf9
 800d906:	4932      	ldr	r1, [pc, #200]	; (800d9d0 <protocol_s_broadcast_add_node+0x130>)
 800d908:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d90a:	f000 fdcb 	bl	800e4a4 <protocol_s_error_info_printf>
    status = PROTOCOL_ERR_NOT_ENOUGH_MEM;
 800d90e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d910:	e05a      	b.n	800d9c8 <protocol_s_broadcast_add_node+0x128>
    PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
    return status;
  }
 800d912:	2330      	movs	r3, #48	; 0x30
 800d914:	62bb      	str	r3, [r7, #40]	; 0x28

 800d916:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d91a:	4413      	add	r3, r2
 800d91c:	627b      	str	r3, [r7, #36]	; 0x24
  pack_head_offset = PROTOCOL_SEND_NODE_SIZE;
 800d91e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d920:	623b      	str	r3, [r7, #32]
  pack_head = (protocol_pack_desc_t *)&malloc_zone[pack_head_offset];
  send_node = (send_list_node_t *)&malloc_zone[0];

 800d922:	f107 0014 	add.w	r0, r7, #20
 800d926:	88fb      	ldrh	r3, [r7, #6]
 800d928:	9301      	str	r3, [sp, #4]
 800d92a:	2300      	movs	r3, #0
 800d92c:	9300      	str	r3, [sp, #0]
 800d92e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d930:	68ba      	ldr	r2, [r7, #8]
 800d932:	68f9      	ldr	r1, [r7, #12]
 800d934:	f000 f850 	bl	800d9d8 <protocol_s_fill_pack>
  // Fill in the frame data section
  protocol_s_fill_pack(&ctx, p_data, data_len, (uint8_t *)(pack_head), 0, cmd);

 800d938:	6a3b      	ldr	r3, [r7, #32]
 800d93a:	2200      	movs	r2, #0
 800d93c:	745a      	strb	r2, [r3, #17]
  // Populate send_node
 800d93e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d942:	441a      	add	r2, r3
 800d944:	6a3b      	ldr	r3, [r7, #32]
 800d946:	609a      	str	r2, [r3, #8]
  send_node->session = 0;
 800d948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d94a:	b29b      	uxth	r3, r3
 800d94c:	3b30      	subs	r3, #48	; 0x30
 800d94e:	b29a      	uxth	r2, r3
 800d950:	6a3b      	ldr	r3, [r7, #32]
 800d952:	819a      	strh	r2, [r3, #12]
  send_node->p_data = &malloc_zone[pack_head_offset];
 800d954:	6a3b      	ldr	r3, [r7, #32]
 800d956:	2201      	movs	r2, #1
 800d958:	75da      	strb	r2, [r3, #23]
  send_node->len = malloc_size - PROTOCOL_SEND_NODE_SIZE;
 800d95a:	6a3b      	ldr	r3, [r7, #32]
 800d95c:	2200      	movs	r2, #0
 800d95e:	61da      	str	r2, [r3, #28]
  send_node->rest_cnt = 1;
 800d960:	6a3b      	ldr	r3, [r7, #32]
 800d962:	2200      	movs	r2, #0
 800d964:	831a      	strh	r2, [r3, #24]
  send_node->pre_timestamp = 0;
 800d966:	6a3b      	ldr	r3, [r7, #32]
 800d968:	2200      	movs	r2, #0
 800d96a:	73da      	strb	r2, [r3, #15]
  send_node->timeout = 0;
 800d96c:	6a3b      	ldr	r3, [r7, #32]
 800d96e:	2201      	movs	r2, #1
 800d970:	f883 2020 	strb.w	r2, [r3, #32]
  send_node->is_got_ack = 0;
 800d974:	6a3b      	ldr	r3, [r7, #32]
 800d976:	22ff      	movs	r2, #255	; 0xff
 800d978:	749a      	strb	r2, [r3, #18]
  send_node->is_first_send = 1;
 800d97a:	6a3b      	ldr	r3, [r7, #32]
 800d97c:	2200      	movs	r2, #0
 800d97e:	759a      	strb	r2, [r3, #22]
  send_node->address = PROTOCOL_BROADCAST_ADDR;
 800d980:	6a3b      	ldr	r3, [r7, #32]
 800d982:	2200      	movs	r2, #0
 800d984:	741a      	strb	r2, [r3, #16]
  send_node->pack_type = PROTOCOL_PACK_NOR;
 800d986:	6a3b      	ldr	r3, [r7, #32]
 800d988:	88fa      	ldrh	r2, [r7, #6]
 800d98a:	829a      	strh	r2, [r3, #20]
  send_node->is_ready_realse = 0;
 800d98c:	6a3b      	ldr	r3, [r7, #32]
 800d98e:	2200      	movs	r2, #0
 800d990:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800d992:	f3ef 8310 	mrs	r3, PRIMASK
 800d996:	61bb      	str	r3, [r7, #24]
  return(result);
 800d998:	69bb      	ldr	r3, [r7, #24]
  send_node->cmd = cmd;
  send_node->forward_src_obj = NULL;

 800d99a:	4a0e      	ldr	r2, [pc, #56]	; (800d9d4 <protocol_s_broadcast_add_node+0x134>)
 800d99c:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800d99e:	b672      	cpsid	i
}
 800d9a0:	bf00      	nop
  // Add to sending list
  MUTEX_LOCK(boardcast_object.mutex_lock);
 800d9a2:	6a3b      	ldr	r3, [r7, #32]
 800d9a4:	490b      	ldr	r1, [pc, #44]	; (800d9d4 <protocol_s_broadcast_add_node+0x134>)
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	f7ff fdb2 	bl	800d510 <list_add>

 800d9ac:	4b09      	ldr	r3, [pc, #36]	; (800d9d4 <protocol_s_broadcast_add_node+0x134>)
 800d9ae:	7a1b      	ldrb	r3, [r3, #8]
 800d9b0:	3301      	adds	r3, #1
 800d9b2:	b2da      	uxtb	r2, r3
 800d9b4:	4b07      	ldr	r3, [pc, #28]	; (800d9d4 <protocol_s_broadcast_add_node+0x134>)
 800d9b6:	721a      	strb	r2, [r3, #8]
  list_add(&(send_node->send_list), &(boardcast_object.send_list_header));
  boardcast_object.send_node_num++;
 800d9b8:	4b06      	ldr	r3, [pc, #24]	; (800d9d4 <protocol_s_broadcast_add_node+0x134>)
 800d9ba:	68db      	ldr	r3, [r3, #12]
 800d9bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d9be:	69fb      	ldr	r3, [r7, #28]
 800d9c0:	f383 8810 	msr	PRIMASK, r3
}
 800d9c4:	bf00      	nop

  MUTEX_UNLOCK(boardcast_object.mutex_lock);

  PROTOCOL_SEND_DBG_PRINTF("Send broadcast pack, Cmd:0x%04X, Normal pack.", cmd);
 800d9c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34

 800d9c8:	4618      	mov	r0, r3
 800d9ca:	3738      	adds	r7, #56	; 0x38
 800d9cc:	46bd      	mov	sp, r7
 800d9ce:	bd80      	pop	{r7, pc}
 800d9d0:	0800faa8 	.word	0x0800faa8
 800d9d4:	20011380 	.word	0x20011380

0800d9d8 <protocol_s_fill_pack>:
  return status;
}

// frame padding
uint32_t protocol_s_fill_pack(send_ctx_t *ctx, uint8_t *p_data,
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	b086      	sub	sp, #24
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	60f8      	str	r0, [r7, #12]
 800d9e0:	60b9      	str	r1, [r7, #8]
 800d9e2:	607a      	str	r2, [r7, #4]
 800d9e4:	603b      	str	r3, [r7, #0]
                              uint32_t data_len, uint8_t *pack_zone, uint16_t seq, uint16_t cmd)
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	617b      	str	r3, [r7, #20]
{
  uint32_t status = 0;
  protocol_pack_desc_t *p_pack_head;
 800d9ea:	683b      	ldr	r3, [r7, #0]
 800d9ec:	613b      	str	r3, [r7, #16]

  p_pack_head = (protocol_pack_desc_t *)pack_zone;

  /* get local module */
 800d9ee:	693b      	ldr	r3, [r7, #16]
 800d9f0:	22aa      	movs	r2, #170	; 0xaa
 800d9f2:	701a      	strb	r2, [r3, #0]

 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	881b      	ldrh	r3, [r3, #0]
 800d9f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d9fc:	b2d9      	uxtb	r1, r3
 800d9fe:	693a      	ldr	r2, [r7, #16]
 800da00:	7893      	ldrb	r3, [r2, #2]
 800da02:	f361 0387 	bfi	r3, r1, #2, #6
 800da06:	7093      	strb	r3, [r2, #2]
  p_pack_head->sof = PROTOCOL_HEADER;
 800da08:	4b41      	ldr	r3, [pc, #260]	; (800db10 <protocol_s_fill_pack+0x138>)
 800da0a:	781a      	ldrb	r2, [r3, #0]
 800da0c:	693b      	ldr	r3, [r7, #16]
 800da0e:	711a      	strb	r2, [r3, #4]
  p_pack_head->version = ctx->version;
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	789a      	ldrb	r2, [r3, #2]
 800da14:	693b      	ldr	r3, [r7, #16]
 800da16:	715a      	strb	r2, [r3, #5]
  p_pack_head->sender = protocol_local_info.address;
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	78da      	ldrb	r2, [r3, #3]
 800da1c:	693b      	ldr	r3, [r7, #16]
 800da1e:	70da      	strb	r2, [r3, #3]
  p_pack_head->reciver = ctx->reciver;
 800da20:	693b      	ldr	r3, [r7, #16]
 800da22:	8c3a      	ldrh	r2, [r7, #32]
 800da24:	811a      	strh	r2, [r3, #8]
  p_pack_head->S_A_R_c = ctx->S_A_R_c;
 800da26:	693b      	ldr	r3, [r7, #16]
 800da28:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800da2c:	b29a      	uxth	r2, r3
 800da2e:	693b      	ldr	r3, [r7, #16]
 800da30:	f8a3 2001 	strh.w	r2, [r3, #1]
  p_pack_head->seq_num = seq;
 800da34:	693b      	ldr	r3, [r7, #16]
 800da36:	2200      	movs	r2, #0
 800da38:	719a      	strb	r2, [r3, #6]
 800da3a:	2200      	movs	r2, #0
 800da3c:	71da      	strb	r2, [r3, #7]
  p_pack_head->ver_data_len = p_pack_head->ver_data_len;
  p_pack_head->res1 = 0;

 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	78db      	ldrb	r3, [r3, #3]
 800da42:	f003 0320 	and.w	r3, r3, #32
 800da46:	b2db      	uxtb	r3, r3
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d020      	beq.n	800da8e <protocol_s_fill_pack+0xb6>
  /* cpy data */
  if (ctx->s_a_r.pack_type == PROTOCOL_PACK_ACK)
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	b29b      	uxth	r3, r3
 800da50:	3310      	adds	r3, #16
 800da52:	b29b      	uxth	r3, r3
 800da54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800da58:	b29a      	uxth	r2, r3
 800da5a:	693b      	ldr	r3, [r7, #16]
 800da5c:	b2d1      	uxtb	r1, r2
 800da5e:	2000      	movs	r0, #0
 800da60:	4301      	orrs	r1, r0
 800da62:	7059      	strb	r1, [r3, #1]
 800da64:	0a12      	lsrs	r2, r2, #8
 800da66:	b292      	uxth	r2, r2
 800da68:	f002 0203 	and.w	r2, r2, #3
 800da6c:	f002 0003 	and.w	r0, r2, #3
 800da70:	789a      	ldrb	r2, [r3, #2]
 800da72:	f022 0203 	bic.w	r2, r2, #3
 800da76:	4611      	mov	r1, r2
 800da78:	4602      	mov	r2, r0
 800da7a:	430a      	orrs	r2, r1
 800da7c:	709a      	strb	r2, [r3, #2]
  {
 800da7e:	683b      	ldr	r3, [r7, #0]
 800da80:	330c      	adds	r3, #12
 800da82:	687a      	ldr	r2, [r7, #4]
 800da84:	68b9      	ldr	r1, [r7, #8]
 800da86:	4618      	mov	r0, r3
 800da88:	f001 feea 	bl	800f860 <memcpy>
 800da8c:	e023      	b.n	800dad6 <protocol_s_fill_pack+0xfe>
    p_pack_head->data_len = data_len + PROTOCOL_PACK_HEAD_TAIL_SIZE;
    memcpy(pack_zone + PROTOCOL_PACK_HEAD_SIZE, p_data, data_len);
  }
  else
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	b29b      	uxth	r3, r3
 800da92:	3312      	adds	r3, #18
 800da94:	b29b      	uxth	r3, r3
 800da96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800da9a:	b29a      	uxth	r2, r3
 800da9c:	693b      	ldr	r3, [r7, #16]
 800da9e:	b2d1      	uxtb	r1, r2
 800daa0:	2000      	movs	r0, #0
 800daa2:	4301      	orrs	r1, r0
 800daa4:	7059      	strb	r1, [r3, #1]
 800daa6:	0a12      	lsrs	r2, r2, #8
 800daa8:	b292      	uxth	r2, r2
 800daaa:	f002 0203 	and.w	r2, r2, #3
 800daae:	f002 0003 	and.w	r0, r2, #3
 800dab2:	789a      	ldrb	r2, [r3, #2]
 800dab4:	f022 0203 	bic.w	r2, r2, #3
 800dab8:	4611      	mov	r1, r2
 800daba:	4602      	mov	r2, r0
 800dabc:	430a      	orrs	r2, r1
 800dabe:	709a      	strb	r2, [r3, #2]
  {
 800dac0:	683b      	ldr	r3, [r7, #0]
 800dac2:	330c      	adds	r3, #12
 800dac4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800dac6:	801a      	strh	r2, [r3, #0]
    p_pack_head->data_len = data_len + PROTOCOL_PACK_HEAD_TAIL_SIZE + PROTOCOL_PACK_CMD_SIZE;
 800dac8:	683b      	ldr	r3, [r7, #0]
 800daca:	330e      	adds	r3, #14
 800dacc:	687a      	ldr	r2, [r7, #4]
 800dace:	68b9      	ldr	r1, [r7, #8]
 800dad0:	4618      	mov	r0, r3
 800dad2:	f001 fec5 	bl	800f860 <memcpy>
    *((uint16_t *)(pack_zone + PROTOCOL_PACK_HEAD_SIZE)) = cmd;
    memcpy(pack_zone + PROTOCOL_PACK_HEAD_SIZE + PROTOCOL_PACK_CMD_SIZE, p_data, data_len);
  }

 800dad6:	210c      	movs	r1, #12
 800dad8:	6838      	ldr	r0, [r7, #0]
 800dada:	f001 fb2d 	bl	800f138 <append_crc16>
  /* crc */
  append_crc16(pack_zone, 12);
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	78db      	ldrb	r3, [r3, #3]
 800dae2:	f003 0320 	and.w	r3, r3, #32
 800dae6:	b2db      	uxtb	r3, r3
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d006      	beq.n	800dafa <protocol_s_fill_pack+0x122>

  if (ctx->s_a_r.pack_type == PROTOCOL_PACK_ACK)
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	3310      	adds	r3, #16
 800daf0:	4619      	mov	r1, r3
 800daf2:	6838      	ldr	r0, [r7, #0]
 800daf4:	f001 fbc2 	bl	800f27c <append_crc32>
 800daf8:	e005      	b.n	800db06 <protocol_s_fill_pack+0x12e>
  {
    append_crc32(pack_zone, data_len + PROTOCOL_PACK_HEAD_TAIL_SIZE);
  }
  else
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	3312      	adds	r3, #18
 800dafe:	4619      	mov	r1, r3
 800db00:	6838      	ldr	r0, [r7, #0]
 800db02:	f001 fbbb 	bl	800f27c <append_crc32>
  {
    append_crc32(pack_zone, data_len + PROTOCOL_PACK_HEAD_TAIL_SIZE + PROTOCOL_PACK_CMD_SIZE);
  }
 800db06:	697b      	ldr	r3, [r7, #20]

 800db08:	4618      	mov	r0, r3
 800db0a:	3718      	adds	r7, #24
 800db0c:	46bd      	mov	sp, r7
 800db0e:	bd80      	pop	{r7, pc}
 800db10:	20011390 	.word	0x20011390

0800db14 <protocol_s_interface_send_data>:
  return status;
}

// Send data through interface
 800db14:	b580      	push	{r7, lr}
 800db16:	b082      	sub	sp, #8
 800db18:	af00      	add	r7, sp, #0
 800db1a:	6078      	str	r0, [r7, #4]
 800db1c:	6039      	str	r1, [r7, #0]
uint32_t protocol_s_interface_send_data(send_list_node_t *cur_send_node, struct perph_interface *obj)
{

#if (PROTOCOL_AUTO_LOOKBACK == PROTOCOL_ENABLE)
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	7c9a      	ldrb	r2, [r3, #18]
 800db22:	4b0d      	ldr	r3, [pc, #52]	; (800db58 <protocol_s_interface_send_data+0x44>)
 800db24:	781b      	ldrb	r3, [r3, #0]
 800db26:	429a      	cmp	r2, r3
 800db28:	d008      	beq.n	800db3c <protocol_s_interface_send_data+0x28>

  if (cur_send_node->address != protocol_local_info.address)
  {
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	6899      	ldr	r1, [r3, #8]
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	899b      	ldrh	r3, [r3, #12]
 800db32:	461a      	mov	r2, r3
 800db34:	6838      	ldr	r0, [r7, #0]
 800db36:	f7ff fbc1 	bl	800d2bc <protocol_interface_send_data>
 800db3a:	e007      	b.n	800db4c <protocol_s_interface_send_data+0x38>
    // The sending address is different from the local address. Outgoing
    protocol_interface_send_data(obj, cur_send_node->p_data, cur_send_node->len);
  }
  else
  {
    // The sending address is the same as the local address and loops back directly internally.
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	6898      	ldr	r0, [r3, #8]
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	899b      	ldrh	r3, [r3, #12]
 800db44:	4a05      	ldr	r2, [pc, #20]	; (800db5c <protocol_s_interface_send_data+0x48>)
 800db46:	4619      	mov	r1, r3
 800db48:	f7ff fa66 	bl	800d018 <protocol_rcv_data>
  {
    (*(obj->send.send_fn))(cur_send_node->p_data,
                           cur_send_node->len,
                           obj->interface);
  }
#endif
 800db4c:	2300      	movs	r3, #0

 800db4e:	4618      	mov	r0, r3
 800db50:	3708      	adds	r7, #8
 800db52:	46bd      	mov	sp, r7
 800db54:	bd80      	pop	{r7, pc}
 800db56:	bf00      	nop
 800db58:	20011390 	.word	0x20011390
 800db5c:	20011948 	.word	0x20011948

0800db60 <protocol_s_interface_normal_send_flush>:
  return PROTOCOL_SUCCESS;
}

// Clear sending list
 800db60:	b580      	push	{r7, lr}
 800db62:	b08e      	sub	sp, #56	; 0x38
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]
{
  list_t *head_node;
  list_t *cur_node;
  list_t *store_list;
  send_list_node_t *cur_send_node;
  uint32_t timeout;
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	3348      	adds	r3, #72	; 0x48
 800db6c:	62fb      	str	r3, [r7, #44]	; 0x2c

 800db6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db70:	685b      	ldr	r3, [r3, #4]
 800db72:	637b      	str	r3, [r7, #52]	; 0x34
 800db74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db76:	685b      	ldr	r3, [r3, #4]
 800db78:	633b      	str	r3, [r7, #48]	; 0x30
 800db7a:	e0b2      	b.n	800dce2 <protocol_s_interface_normal_send_flush+0x182>
  head_node = &(obj->send.normal_list_header);
  list_for_each_prev_safe(cur_node, store_list, head_node)
  {
 800db7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db7e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800db80:	f3ef 8310 	mrs	r3, PRIMASK
 800db84:	623b      	str	r3, [r7, #32]
  return(result);
 800db86:	6a3a      	ldr	r2, [r7, #32]

    cur_send_node = (send_list_node_t *)cur_node;
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	65da      	str	r2, [r3, #92]	; 0x5c
  __ASM volatile ("cpsid i" : : : "memory");
 800db8c:	b672      	cpsid	i
}
 800db8e:	bf00      	nop

    MUTEX_LOCK(obj->send.mutex_lock);
 800db90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db92:	7bdb      	ldrb	r3, [r3, #15]
 800db94:	2b00      	cmp	r3, #0
 800db96:	d01b      	beq.n	800dbd0 <protocol_s_interface_normal_send_flush+0x70>
    // Get ACK, delete
    if (cur_send_node->is_got_ack)
 800db98:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800db9a:	f7ff fcda 	bl	800d552 <list_del>
    {
 800db9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dba0:	f7ff faa4 	bl	800d0ec <protocol_p_free>
      list_del(cur_node);
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 800dbaa:	3b01      	subs	r3, #1
 800dbac:	b2da      	uxtb	r2, r3
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
      protocol_p_free(cur_send_node);
      obj->send.normal_node_num--;
 800dbb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbb6:	7c5b      	ldrb	r3, [r3, #17]
 800dbb8:	4619      	mov	r1, r3
 800dbba:	6878      	ldr	r0, [r7, #4]
 800dbbc:	f7ff fcff 	bl	800d5be <protocol_release_session>

      protocol_release_session(obj, cur_send_node->session);
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dbc4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dbc6:	69fb      	ldr	r3, [r7, #28]
 800dbc8:	f383 8810 	msr	PRIMASK, r3
}
 800dbcc:	bf00      	nop

 800dbce:	e083      	b.n	800dcd8 <protocol_s_interface_normal_send_flush+0x178>
      MUTEX_UNLOCK(obj->send.mutex_lock);
      continue;
    }

 800dbd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbd2:	7c1b      	ldrb	r3, [r3, #16]
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d025      	beq.n	800dc24 <protocol_s_interface_normal_send_flush+0xc4>
    // Released after exceeding the number of retransmissions
    if (cur_send_node->is_ready_realse)
 800dbd8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800dbda:	f7ff fcba 	bl	800d552 <list_del>
    {
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 800dbe4:	3b01      	subs	r3, #1
 800dbe6:	b2da      	uxtb	r2, r3
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
      list_del(cur_node);
      obj->send.normal_node_num--;
 800dbee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d005      	beq.n	800dc02 <protocol_s_interface_normal_send_flush+0xa2>

      if (cur_send_node->no_ack_callback != NULL)
 800dbf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dbfc:	8a92      	ldrh	r2, [r2, #20]
 800dbfe:	4610      	mov	r0, r2
 800dc00:	4798      	blx	r3
      {
        cur_send_node->no_ack_callback(cur_send_node->cmd);
      }
 800dc02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc04:	7c5b      	ldrb	r3, [r3, #17]
 800dc06:	4619      	mov	r1, r3
 800dc08:	6878      	ldr	r0, [r7, #4]
 800dc0a:	f7ff fcd8 	bl	800d5be <protocol_release_session>

      protocol_release_session(obj, cur_send_node->session);
 800dc0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dc10:	f7ff fa6c 	bl	800d0ec <protocol_p_free>

      protocol_p_free(cur_send_node);
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dc18:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dc1a:	69bb      	ldr	r3, [r7, #24]
 800dc1c:	f383 8810 	msr	PRIMASK, r3
}
 800dc20:	bf00      	nop

 800dc22:	e059      	b.n	800dcd8 <protocol_s_interface_normal_send_flush+0x178>
      MUTEX_UNLOCK(obj->send.mutex_lock);
      continue;
    }
    else
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dc28:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dc2a:	697b      	ldr	r3, [r7, #20]
 800dc2c:	f383 8810 	msr	PRIMASK, r3
}
 800dc30:	bf00      	nop
    {
      MUTEX_UNLOCK(obj->send.mutex_lock);
    }
 800dc32:	f7ff fa66 	bl	800d102 <protocol_p_get_time>
 800dc36:	4602      	mov	r2, r0
 800dc38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc3a:	69db      	ldr	r3, [r3, #28]
 800dc3c:	1ad3      	subs	r3, r2, r3
 800dc3e:	627b      	str	r3, [r7, #36]	; 0x24

    timeout = protocol_p_get_time() - cur_send_node->pre_timestamp;

 800dc40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc42:	8b1b      	ldrh	r3, [r3, #24]
 800dc44:	461a      	mov	r2, r3
 800dc46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc48:	4293      	cmp	r3, r2
 800dc4a:	d804      	bhi.n	800dc56 <protocol_s_interface_normal_send_flush+0xf6>
 800dc4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d040      	beq.n	800dcd8 <protocol_s_interface_normal_send_flush+0x178>
    // Retransmit after timeout or send for the first time
 800dc56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc58:	7ddb      	ldrb	r3, [r3, #23]

 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d03c      	beq.n	800dcd8 <protocol_s_interface_normal_send_flush+0x178>
    if ((timeout > cur_send_node->timeout || cur_send_node->is_first_send) &&
        cur_send_node->rest_cnt >= 1)
 800dc5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc60:	2200      	movs	r2, #0
 800dc62:	f883 2020 	strb.w	r2, [r3, #32]
    {
      cur_send_node->is_first_send = 0;
 800dc66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc68:	7ddb      	ldrb	r3, [r3, #23]
 800dc6a:	3b01      	subs	r3, #1
 800dc6c:	b2da      	uxtb	r2, r3
 800dc6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc70:	75da      	strb	r2, [r3, #23]

      cur_send_node->rest_cnt--;

 800dc72:	6879      	ldr	r1, [r7, #4]
 800dc74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dc76:	f7ff ff4d 	bl	800db14 <protocol_s_interface_send_data>
      // send data
      protocol_s_interface_send_data(cur_send_node, obj);
 800dc7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc7c:	7c5b      	ldrb	r3, [r3, #17]
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d11d      	bne.n	800dcbe <protocol_s_interface_normal_send_flush+0x15e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800dc82:	f3ef 8310 	mrs	r3, PRIMASK
 800dc86:	60fb      	str	r3, [r7, #12]
  return(result);
 800dc88:	68fa      	ldr	r2, [r7, #12]

      if (cur_send_node->session == 0)
      {
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	65da      	str	r2, [r3, #92]	; 0x5c
  __ASM volatile ("cpsid i" : : : "memory");
 800dc8e:	b672      	cpsid	i
}
 800dc90:	bf00      	nop
        // session is 0, no retransmission or ACK reply is required
 800dc92:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800dc94:	f7ff fc5d 	bl	800d552 <list_del>
        MUTEX_LOCK(obj->send.mutex_lock);
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 800dc9e:	3b01      	subs	r3, #1
 800dca0:	b2da      	uxtb	r2, r3
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
        list_del(cur_node);
 800dca8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dcaa:	f7ff fa1f 	bl	800d0ec <protocol_p_free>
        obj->send.normal_node_num--;
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dcb2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dcb4:	693b      	ldr	r3, [r7, #16]
 800dcb6:	f383 8810 	msr	PRIMASK, r3
}
 800dcba:	bf00      	nop
        protocol_p_free(cur_send_node);
 800dcbc:	e00c      	b.n	800dcd8 <protocol_s_interface_normal_send_flush+0x178>
        MUTEX_UNLOCK(obj->send.mutex_lock);
        continue;
      }
      else
      {
 800dcbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcc0:	7ddb      	ldrb	r3, [r3, #23]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d103      	bne.n	800dcce <protocol_s_interface_normal_send_flush+0x16e>
        // The session is not 0 and requires retransmission and ACK confirmation.
        if (cur_send_node->rest_cnt == 0)
        {
 800dcc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcc8:	2201      	movs	r2, #1
 800dcca:	741a      	strb	r2, [r3, #16]
 800dccc:	e004      	b.n	800dcd8 <protocol_s_interface_normal_send_flush+0x178>
          // The number of sending times has been exhausted
          cur_send_node->is_ready_realse = 1;
        }
        else
 800dcce:	f7ff fa18 	bl	800d102 <protocol_p_get_time>
 800dcd2:	4602      	mov	r2, r0
 800dcd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcd6:	61da      	str	r2, [r3, #28]

 800dcd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcda:	637b      	str	r3, [r7, #52]	; 0x34
 800dcdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcde:	685b      	ldr	r3, [r3, #4]
 800dce0:	633b      	str	r3, [r7, #48]	; 0x30
 800dce2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dce6:	429a      	cmp	r2, r3
 800dce8:	f47f af48 	bne.w	800db7c <protocol_s_interface_normal_send_flush+0x1c>
        {
          cur_send_node->pre_timestamp = protocol_p_get_time();
        }
      }
    }
  }
 800dcec:	2300      	movs	r3, #0

 800dcee:	4618      	mov	r0, r3
 800dcf0:	3738      	adds	r7, #56	; 0x38
 800dcf2:	46bd      	mov	sp, r7
 800dcf4:	bd80      	pop	{r7, pc}

0800dcf6 <protocol_s_interface_ack_send_flush>:
  return 0;
}

// Clear the ACK frame sending list
 800dcf6:	b580      	push	{r7, lr}
 800dcf8:	b088      	sub	sp, #32
 800dcfa:	af00      	add	r7, sp, #0
 800dcfc:	6078      	str	r0, [r7, #4]
uint32_t protocol_s_interface_ack_send_flush(struct perph_interface *obj)
{
  list_t *head_node;
  list_t *cur_node;
  list_t *store_list;
  send_list_node_t *cur_send_node;
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	3350      	adds	r3, #80	; 0x50
 800dd02:	617b      	str	r3, [r7, #20]

 800dd04:	697b      	ldr	r3, [r7, #20]
 800dd06:	685b      	ldr	r3, [r3, #4]
 800dd08:	61fb      	str	r3, [r7, #28]
 800dd0a:	69fb      	ldr	r3, [r7, #28]
 800dd0c:	685b      	ldr	r3, [r3, #4]
 800dd0e:	61bb      	str	r3, [r7, #24]
 800dd10:	e027      	b.n	800dd62 <protocol_s_interface_ack_send_flush+0x6c>
  head_node = &(obj->send.ack_list_header);
  list_for_each_prev_safe(cur_node, store_list, head_node)
  {
 800dd12:	69fb      	ldr	r3, [r7, #28]
 800dd14:	613b      	str	r3, [r7, #16]

    cur_send_node = (send_list_node_t *)cur_node;
 800dd16:	6879      	ldr	r1, [r7, #4]
 800dd18:	6938      	ldr	r0, [r7, #16]
 800dd1a:	f7ff fefb 	bl	800db14 <protocol_s_interface_send_data>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800dd1e:	f3ef 8310 	mrs	r3, PRIMASK
 800dd22:	60bb      	str	r3, [r7, #8]
  return(result);
 800dd24:	68ba      	ldr	r2, [r7, #8]

    protocol_s_interface_send_data(cur_send_node, obj);

 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	65da      	str	r2, [r3, #92]	; 0x5c
  __ASM volatile ("cpsid i" : : : "memory");
 800dd2a:	b672      	cpsid	i
}
 800dd2c:	bf00      	nop
    //The packet is of ACK type and does not require retransmission or confirmation.
 800dd2e:	69f8      	ldr	r0, [r7, #28]
 800dd30:	f7ff fc0f 	bl	800d552 <list_del>
    MUTEX_LOCK(obj->send.mutex_lock);
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 800dd3a:	3b01      	subs	r3, #1
 800dd3c:	b2da      	uxtb	r2, r3
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
    list_del(cur_node);
 800dd44:	6938      	ldr	r0, [r7, #16]
 800dd46:	f7ff f9d1 	bl	800d0ec <protocol_p_free>
    obj->send.ack_node_num--;
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dd4e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	f383 8810 	msr	PRIMASK, r3
}
 800dd56:	bf00      	nop

 800dd58:	69bb      	ldr	r3, [r7, #24]
 800dd5a:	61fb      	str	r3, [r7, #28]
 800dd5c:	69fb      	ldr	r3, [r7, #28]
 800dd5e:	685b      	ldr	r3, [r3, #4]
 800dd60:	61bb      	str	r3, [r7, #24]
 800dd62:	69fa      	ldr	r2, [r7, #28]
 800dd64:	697b      	ldr	r3, [r7, #20]
 800dd66:	429a      	cmp	r2, r3
 800dd68:	d1d3      	bne.n	800dd12 <protocol_s_interface_ack_send_flush+0x1c>
    protocol_p_free(cur_send_node);
    MUTEX_UNLOCK(obj->send.mutex_lock);
  }
 800dd6a:	2300      	movs	r3, #0

 800dd6c:	4618      	mov	r0, r3
 800dd6e:	3720      	adds	r7, #32
 800dd70:	46bd      	mov	sp, r7
 800dd72:	bd80      	pop	{r7, pc}

0800dd74 <protocol_s_broadcast_send_flush>:
  return 0;
}

//Clear the broadcast packet sending list
 800dd74:	b580      	push	{r7, lr}
 800dd76:	b088      	sub	sp, #32
 800dd78:	af00      	add	r7, sp, #0
uint32_t protocol_s_broadcast_send_flush(void)
{
  list_t *head_node;
  list_t *cur_node;
  list_t *store_list;
  send_list_node_t *cur_send_node;
 800dd7a:	4b34      	ldr	r3, [pc, #208]	; (800de4c <protocol_s_broadcast_send_flush+0xd8>)
 800dd7c:	613b      	str	r3, [r7, #16]

 800dd7e:	693b      	ldr	r3, [r7, #16]
 800dd80:	685b      	ldr	r3, [r3, #4]
 800dd82:	61fb      	str	r3, [r7, #28]
 800dd84:	69fb      	ldr	r3, [r7, #28]
 800dd86:	685b      	ldr	r3, [r3, #4]
 800dd88:	61bb      	str	r3, [r7, #24]
 800dd8a:	e055      	b.n	800de38 <protocol_s_broadcast_send_flush+0xc4>
  head_node = &(boardcast_object.send_list_header);
  list_for_each_prev_safe(cur_node, store_list, head_node)
 800dd8c:	69fb      	ldr	r3, [r7, #28]
 800dd8e:	60fb      	str	r3, [r7, #12]
  {
    cur_send_node = (send_list_node_t *)cur_node;
 800dd90:	2300      	movs	r3, #0
 800dd92:	75fb      	strb	r3, [r7, #23]
 800dd94:	e02d      	b.n	800ddf2 <protocol_s_broadcast_send_flush+0x7e>

    for (uint8_t i = 0; i < PROTOCOL_INTERFACE_MAX; i++)
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dd9a:	7dfb      	ldrb	r3, [r7, #23]
 800dd9c:	2194      	movs	r1, #148	; 0x94
 800dd9e:	fb01 f303 	mul.w	r3, r1, r3
 800dda2:	492b      	ldr	r1, [pc, #172]	; (800de50 <protocol_s_broadcast_send_flush+0xdc>)
 800dda4:	440b      	add	r3, r1
 800dda6:	429a      	cmp	r2, r3
 800dda8:	d01b      	beq.n	800dde2 <protocol_s_broadcast_send_flush+0x6e>
    {
      if (cur_send_node->forward_src_obj == protocol_local_info.interface + i)
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddae:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d017      	beq.n	800dde6 <protocol_s_broadcast_send_flush+0x72>
        continue;
      if (!cur_send_node->forward_src_obj->is_valid)
 800ddb6:	7dfb      	ldrb	r3, [r7, #23]
 800ddb8:	4a26      	ldr	r2, [pc, #152]	; (800de54 <protocol_s_broadcast_send_flush+0xe0>)
 800ddba:	2194      	movs	r1, #148	; 0x94
 800ddbc:	fb01 f303 	mul.w	r3, r1, r3
 800ddc0:	4413      	add	r3, r2
 800ddc2:	f203 631a 	addw	r3, r3, #1562	; 0x61a
 800ddc6:	781b      	ldrb	r3, [r3, #0]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d00e      	beq.n	800ddea <protocol_s_broadcast_send_flush+0x76>
        continue;
      if (!protocol_local_info.interface[i].broadcast_output_enable)
        continue;
 800ddcc:	7dfb      	ldrb	r3, [r7, #23]
 800ddce:	2294      	movs	r2, #148	; 0x94
 800ddd0:	fb02 f303 	mul.w	r3, r2, r3
 800ddd4:	4a1e      	ldr	r2, [pc, #120]	; (800de50 <protocol_s_broadcast_send_flush+0xdc>)
 800ddd6:	4413      	add	r3, r2
 800ddd8:	4619      	mov	r1, r3
 800ddda:	68f8      	ldr	r0, [r7, #12]
 800dddc:	f7ff fe9a 	bl	800db14 <protocol_s_interface_send_data>
 800dde0:	e004      	b.n	800ddec <protocol_s_broadcast_send_flush+0x78>
    {
 800dde2:	bf00      	nop
 800dde4:	e002      	b.n	800ddec <protocol_s_broadcast_send_flush+0x78>
        continue;
 800dde6:	bf00      	nop
 800dde8:	e000      	b.n	800ddec <protocol_s_broadcast_send_flush+0x78>
        continue;
 800ddea:	bf00      	nop
    cur_send_node = (send_list_node_t *)cur_node;
 800ddec:	7dfb      	ldrb	r3, [r7, #23]
 800ddee:	3301      	adds	r3, #1
 800ddf0:	75fb      	strb	r3, [r7, #23]
 800ddf2:	7dfb      	ldrb	r3, [r7, #23]
 800ddf4:	2b04      	cmp	r3, #4
 800ddf6:	d9ce      	bls.n	800dd96 <protocol_s_broadcast_send_flush+0x22>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800ddf8:	f3ef 8310 	mrs	r3, PRIMASK
 800ddfc:	607b      	str	r3, [r7, #4]
  return(result);
 800ddfe:	687b      	ldr	r3, [r7, #4]

      protocol_s_interface_send_data(cur_send_node, protocol_local_info.interface + i);
    }
 800de00:	4a12      	ldr	r2, [pc, #72]	; (800de4c <protocol_s_broadcast_send_flush+0xd8>)
 800de02:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800de04:	b672      	cpsid	i
}
 800de06:	bf00      	nop

 800de08:	69f8      	ldr	r0, [r7, #28]
 800de0a:	f7ff fba2 	bl	800d552 <list_del>
    MUTEX_LOCK(boardcast_object.mutex_lock);
 800de0e:	4b0f      	ldr	r3, [pc, #60]	; (800de4c <protocol_s_broadcast_send_flush+0xd8>)
 800de10:	7a1b      	ldrb	r3, [r3, #8]
 800de12:	3b01      	subs	r3, #1
 800de14:	b2da      	uxtb	r2, r3
 800de16:	4b0d      	ldr	r3, [pc, #52]	; (800de4c <protocol_s_broadcast_send_flush+0xd8>)
 800de18:	721a      	strb	r2, [r3, #8]
    list_del(cur_node);
 800de1a:	68f8      	ldr	r0, [r7, #12]
 800de1c:	f7ff f966 	bl	800d0ec <protocol_p_free>
    boardcast_object.send_node_num--;
 800de20:	4b0a      	ldr	r3, [pc, #40]	; (800de4c <protocol_s_broadcast_send_flush+0xd8>)
 800de22:	68db      	ldr	r3, [r3, #12]
 800de24:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800de26:	68bb      	ldr	r3, [r7, #8]
 800de28:	f383 8810 	msr	PRIMASK, r3
}
 800de2c:	bf00      	nop

 800de2e:	69bb      	ldr	r3, [r7, #24]
 800de30:	61fb      	str	r3, [r7, #28]
 800de32:	69fb      	ldr	r3, [r7, #28]
 800de34:	685b      	ldr	r3, [r3, #4]
 800de36:	61bb      	str	r3, [r7, #24]
 800de38:	69fa      	ldr	r2, [r7, #28]
 800de3a:	693b      	ldr	r3, [r7, #16]
 800de3c:	429a      	cmp	r2, r3
 800de3e:	d1a5      	bne.n	800dd8c <protocol_s_broadcast_send_flush+0x18>
    protocol_p_free(cur_send_node);
    MUTEX_UNLOCK(boardcast_object.mutex_lock);
  }
 800de40:	2300      	movs	r3, #0

 800de42:	4618      	mov	r0, r3
 800de44:	3720      	adds	r7, #32
 800de46:	46bd      	mov	sp, r7
 800de48:	bd80      	pop	{r7, pc}
 800de4a:	bf00      	nop
 800de4c:	20011380 	.word	0x20011380
 800de50:	20011948 	.word	0x20011948
 800de54:	20011390 	.word	0x20011390

0800de58 <protocol_s_get_route>:
  return 0;
}

//Get route
 800de58:	b480      	push	{r7}
 800de5a:	b085      	sub	sp, #20
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	4603      	mov	r3, r0
 800de60:	71fb      	strb	r3, [r7, #7]
struct perph_interface *protocol_s_get_route(uint8_t tar_add)
{
  uint8_t int_obj_idx;
 800de62:	79fb      	ldrb	r3, [r7, #7]
 800de64:	4a11      	ldr	r2, [pc, #68]	; (800deac <protocol_s_get_route+0x54>)
 800de66:	4413      	add	r3, r2
 800de68:	785b      	ldrb	r3, [r3, #1]
 800de6a:	73fb      	strb	r3, [r7, #15]

 800de6c:	7bfb      	ldrb	r3, [r7, #15]
 800de6e:	2b05      	cmp	r3, #5
 800de70:	d901      	bls.n	800de76 <protocol_s_get_route+0x1e>
  int_obj_idx = protocol_local_info.route_table[tar_add]; 
  if (int_obj_idx > PROTOCOL_INTERFACE_MAX)
 800de72:	2300      	movs	r3, #0
 800de74:	e014      	b.n	800dea0 <protocol_s_get_route+0x48>
  {
    return NULL;
  }
 800de76:	7bfb      	ldrb	r3, [r7, #15]
 800de78:	4a0c      	ldr	r2, [pc, #48]	; (800deac <protocol_s_get_route+0x54>)
 800de7a:	2194      	movs	r1, #148	; 0x94
 800de7c:	fb01 f303 	mul.w	r3, r1, r3
 800de80:	4413      	add	r3, r2
 800de82:	f203 6319 	addw	r3, r3, #1561	; 0x619
 800de86:	781b      	ldrb	r3, [r3, #0]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d008      	beq.n	800de9e <protocol_s_get_route+0x46>

  if (protocol_local_info.interface[int_obj_idx].is_valid) 
 800de8c:	7bfb      	ldrb	r3, [r7, #15]
 800de8e:	2294      	movs	r2, #148	; 0x94
 800de90:	fb02 f303 	mul.w	r3, r2, r3
 800de94:	f503 63b7 	add.w	r3, r3, #1464	; 0x5b8
 800de98:	4a04      	ldr	r2, [pc, #16]	; (800deac <protocol_s_get_route+0x54>)
 800de9a:	4413      	add	r3, r2
 800de9c:	e000      	b.n	800dea0 <protocol_s_get_route+0x48>
  {
    return &(protocol_local_info.interface[int_obj_idx]);
  }
  else
 800de9e:	2300      	movs	r3, #0
  {
    return NULL;
 800dea0:	4618      	mov	r0, r3
 800dea2:	3714      	adds	r7, #20
 800dea4:	46bd      	mov	sp, r7
 800dea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deaa:	4770      	bx	lr
 800deac:	20011390 	.word	0x20011390

0800deb0 <protocol_s_session_get_node>:
  }
}

//Get the node with the specified address and session
send_list_node_t *protocol_s_session_get_node(struct perph_interface *obj,
 800deb0:	b480      	push	{r7}
 800deb2:	b08b      	sub	sp, #44	; 0x2c
 800deb4:	af00      	add	r7, sp, #0
 800deb6:	6078      	str	r0, [r7, #4]
 800deb8:	460b      	mov	r3, r1
 800deba:	70fb      	strb	r3, [r7, #3]
 800debc:	4613      	mov	r3, r2
 800debe:	70bb      	strb	r3, [r7, #2]
                                              uint8_t address, uint8_t session)
{
  list_t *head_node;
  list_t *cur_node;
  list_t *store_list;
  send_list_node_t *cur_send_node;
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	3348      	adds	r3, #72	; 0x48
 800dec4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800dec6:	f3ef 8310 	mrs	r3, PRIMASK
 800deca:	617b      	str	r3, [r7, #20]
  return(result);
 800decc:	697b      	ldr	r3, [r7, #20]

  head_node = &(obj->send.normal_list_header);
 800dece:	4a1d      	ldr	r2, [pc, #116]	; (800df44 <protocol_s_session_get_node+0x94>)
 800ded0:	f8c2 38a0 	str.w	r3, [r2, #2208]	; 0x8a0
  __ASM volatile ("cpsid i" : : : "memory");
 800ded4:	b672      	cpsid	i
}
 800ded6:	bf00      	nop

 800ded8:	69fb      	ldr	r3, [r7, #28]
 800deda:	685b      	ldr	r3, [r3, #4]
 800dedc:	627b      	str	r3, [r7, #36]	; 0x24
 800dede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dee0:	685b      	ldr	r3, [r3, #4]
 800dee2:	623b      	str	r3, [r7, #32]
 800dee4:	e01a      	b.n	800df1c <protocol_s_session_get_node+0x6c>
  MUTEX_LOCK(protocol_local_info.mutex_lock);
  list_for_each_prev_safe(cur_node, store_list, head_node)
 800dee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dee8:	61bb      	str	r3, [r7, #24]
  {
    cur_send_node = (send_list_node_t *)cur_node;
 800deea:	69bb      	ldr	r3, [r7, #24]
 800deec:	7c5b      	ldrb	r3, [r3, #17]
 800deee:	78ba      	ldrb	r2, [r7, #2]
 800def0:	429a      	cmp	r2, r3
 800def2:	d10e      	bne.n	800df12 <protocol_s_session_get_node+0x62>

 800def4:	69bb      	ldr	r3, [r7, #24]
 800def6:	7c9b      	ldrb	r3, [r3, #18]
    cur_send_node = (send_list_node_t *)cur_node;
 800def8:	78fa      	ldrb	r2, [r7, #3]
 800defa:	429a      	cmp	r2, r3
 800defc:	d109      	bne.n	800df12 <protocol_s_session_get_node+0x62>
    if ((cur_send_node->session == session) &&
        (cur_send_node->address == address))
 800defe:	4b11      	ldr	r3, [pc, #68]	; (800df44 <protocol_s_session_get_node+0x94>)
 800df00:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
 800df04:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800df06:	693b      	ldr	r3, [r7, #16]
 800df08:	f383 8810 	msr	PRIMASK, r3
}
 800df0c:	bf00      	nop
    {
 800df0e:	69bb      	ldr	r3, [r7, #24]
 800df10:	e011      	b.n	800df36 <protocol_s_session_get_node+0x86>

 800df12:	6a3b      	ldr	r3, [r7, #32]
 800df14:	627b      	str	r3, [r7, #36]	; 0x24
 800df16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df18:	685b      	ldr	r3, [r3, #4]
 800df1a:	623b      	str	r3, [r7, #32]
 800df1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df1e:	69fb      	ldr	r3, [r7, #28]
 800df20:	429a      	cmp	r2, r3
 800df22:	d1e0      	bne.n	800dee6 <protocol_s_session_get_node+0x36>
      MUTEX_UNLOCK(protocol_local_info.mutex_lock);
      return cur_send_node;
    }
 800df24:	4b07      	ldr	r3, [pc, #28]	; (800df44 <protocol_s_session_get_node+0x94>)
 800df26:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
 800df2a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	f383 8810 	msr	PRIMASK, r3
}
 800df32:	bf00      	nop
  }
 800df34:	2300      	movs	r3, #0
  MUTEX_UNLOCK(protocol_local_info.mutex_lock);
 800df36:	4618      	mov	r0, r3
 800df38:	372c      	adds	r7, #44	; 0x2c
 800df3a:	46bd      	mov	sp, r7
 800df3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df40:	4770      	bx	lr
 800df42:	bf00      	nop
 800df44:	20011390 	.word	0x20011390

0800df48 <protocol_s_pack_forward>:
  return NULL;
}

//Packet forwarding function
 800df48:	b580      	push	{r7, lr}
 800df4a:	b08c      	sub	sp, #48	; 0x30
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
 800df50:	6039      	str	r1, [r7, #0]

  struct perph_interface *tar_inter;
  uint8_t *malloc_zone;
  uint32_t status;
  uint32_t pack_head_offset;
  send_list_node_t *send_node;
 800df52:	2300      	movs	r3, #0
 800df54:	62bb      	str	r3, [r7, #40]	; 0x28

  status = PROTOCOL_SUCCESS;

 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	795b      	ldrb	r3, [r3, #5]
 800df5a:	2bff      	cmp	r3, #255	; 0xff
 800df5c:	d00a      	beq.n	800df74 <protocol_s_pack_forward+0x2c>
  //Find the destination of the package
  if (p_pack->reciver != PROTOCOL_BROADCAST_ADDR)
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	795b      	ldrb	r3, [r3, #5]
 800df62:	4618      	mov	r0, r3
 800df64:	f7ff ff78 	bl	800de58 <protocol_s_get_route>
 800df68:	62f8      	str	r0, [r7, #44]	; 0x2c
  {
    tar_inter = protocol_s_get_route(p_pack->reciver);
 800df6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d101      	bne.n	800df74 <protocol_s_pack_forward+0x2c>

    if (tar_inter == NULL)
    {
      PROTOCOL_RCV_ERR_PRINTF("Pack forward error, Route to address 0x%02x does not exist.", p_pack->reciver);
 800df70:	2306      	movs	r3, #6
 800df72:	e09b      	b.n	800e0ac <protocol_s_pack_forward+0x164>

      return PROTOCOL_ERR_ROUTE_NOT_FOUND;
    }
  }

 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	785a      	ldrb	r2, [r3, #1]
 800df78:	789b      	ldrb	r3, [r3, #2]
 800df7a:	f003 0303 	and.w	r3, r3, #3
 800df7e:	021b      	lsls	r3, r3, #8
 800df80:	4313      	orrs	r3, r2
 800df82:	b29b      	uxth	r3, r3
 800df84:	3330      	adds	r3, #48	; 0x30
 800df86:	4618      	mov	r0, r3
 800df88:	f7ff f8a4 	bl	800d0d4 <protocol_p_malloc>
 800df8c:	6278      	str	r0, [r7, #36]	; 0x24
  // Allocate memory required to forward packets
 800df8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df90:	2b00      	cmp	r3, #0
 800df92:	d109      	bne.n	800dfa8 <protocol_s_pack_forward+0x60>
  malloc_zone = protocol_p_malloc(p_pack->data_len + PROTOCOL_SEND_NODE_SIZE);
  if (malloc_zone == NULL)
 800df94:	2302      	movs	r3, #2
 800df96:	62bb      	str	r3, [r7, #40]	; 0x28
  {
 800df98:	f240 225a 	movw	r2, #602	; 0x25a
 800df9c:	4945      	ldr	r1, [pc, #276]	; (800e0b4 <protocol_s_pack_forward+0x16c>)
 800df9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dfa0:	f000 fa80 	bl	800e4a4 <protocol_s_error_info_printf>
    status = PROTOCOL_ERR_NOT_ENOUGH_MEM;
 800dfa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfa6:	e081      	b.n	800e0ac <protocol_s_pack_forward+0x164>
    PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
    return status;
  }
 800dfa8:	2330      	movs	r3, #48	; 0x30
 800dfaa:	623b      	str	r3, [r7, #32]

 800dfac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfae:	61fb      	str	r3, [r7, #28]
  pack_head_offset = PROTOCOL_SEND_NODE_SIZE;
  send_node = (send_list_node_t *)&malloc_zone[0];
 800dfb0:	69fb      	ldr	r3, [r7, #28]
 800dfb2:	2200      	movs	r2, #0
 800dfb4:	745a      	strb	r2, [r3, #17]

 800dfb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dfb8:	6a3b      	ldr	r3, [r7, #32]
 800dfba:	441a      	add	r2, r3
 800dfbc:	69fb      	ldr	r3, [r7, #28]
 800dfbe:	609a      	str	r2, [r3, #8]
  send_node->session = 0;
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	785a      	ldrb	r2, [r3, #1]
 800dfc4:	789b      	ldrb	r3, [r3, #2]
 800dfc6:	f003 0303 	and.w	r3, r3, #3
 800dfca:	021b      	lsls	r3, r3, #8
 800dfcc:	4313      	orrs	r3, r2
 800dfce:	b29b      	uxth	r3, r3
 800dfd0:	461a      	mov	r2, r3
 800dfd2:	69fb      	ldr	r3, [r7, #28]
 800dfd4:	819a      	strh	r2, [r3, #12]
  send_node->p_data = &malloc_zone[pack_head_offset];
 800dfd6:	69fb      	ldr	r3, [r7, #28]
 800dfd8:	2201      	movs	r2, #1
 800dfda:	75da      	strb	r2, [r3, #23]
  send_node->len = p_pack->data_len;
 800dfdc:	69fb      	ldr	r3, [r7, #28]
 800dfde:	2200      	movs	r2, #0
 800dfe0:	61da      	str	r2, [r3, #28]
  send_node->rest_cnt = 1;
 800dfe2:	69fb      	ldr	r3, [r7, #28]
 800dfe4:	2200      	movs	r2, #0
 800dfe6:	831a      	strh	r2, [r3, #24]
  send_node->pre_timestamp = 0;
 800dfe8:	69fb      	ldr	r3, [r7, #28]
 800dfea:	2200      	movs	r2, #0
 800dfec:	73da      	strb	r2, [r3, #15]
  send_node->timeout = 0;
 800dfee:	69fb      	ldr	r3, [r7, #28]
 800dff0:	2201      	movs	r2, #1
 800dff2:	f883 2020 	strb.w	r2, [r3, #32]
  send_node->is_got_ack = 0;
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	795a      	ldrb	r2, [r3, #5]
 800dffa:	69fb      	ldr	r3, [r7, #28]
 800dffc:	749a      	strb	r2, [r3, #18]
  send_node->is_first_send = 1;
 800dffe:	69fb      	ldr	r3, [r7, #28]
 800e000:	2201      	movs	r2, #1
 800e002:	759a      	strb	r2, [r3, #22]
  send_node->address = p_pack->reciver;
 800e004:	69fb      	ldr	r3, [r7, #28]
 800e006:	2200      	movs	r2, #0
 800e008:	741a      	strb	r2, [r3, #16]
  send_node->pack_type = PROTOCOL_PACK_ACK; //It is faster to send forwarded packets as ACK packets
 800e00a:	69fb      	ldr	r3, [r7, #28]
 800e00c:	2200      	movs	r2, #0
 800e00e:	829a      	strh	r2, [r3, #20]
  send_node->is_ready_realse = 0;
 800e010:	69fb      	ldr	r3, [r7, #28]
 800e012:	683a      	ldr	r2, [r7, #0]
 800e014:	625a      	str	r2, [r3, #36]	; 0x24
  send_node->cmd = 0;
  send_node->forward_src_obj = src_obj;
 800e016:	69fb      	ldr	r3, [r7, #28]
 800e018:	6898      	ldr	r0, [r3, #8]
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	785a      	ldrb	r2, [r3, #1]
 800e01e:	789b      	ldrb	r3, [r3, #2]
 800e020:	f003 0303 	and.w	r3, r3, #3
 800e024:	021b      	lsls	r3, r3, #8
 800e026:	4313      	orrs	r3, r2
 800e028:	b29b      	uxth	r3, r3
 800e02a:	461a      	mov	r2, r3
 800e02c:	6879      	ldr	r1, [r7, #4]
 800e02e:	f001 fc17 	bl	800f860 <memcpy>

 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	795b      	ldrb	r3, [r3, #5]
 800e036:	2bff      	cmp	r3, #255	; 0xff
 800e038:	d01d      	beq.n	800e076 <protocol_s_pack_forward+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800e03a:	f3ef 8310 	mrs	r3, PRIMASK
 800e03e:	617b      	str	r3, [r7, #20]
  return(result);
 800e040:	697a      	ldr	r2, [r7, #20]
  memcpy(send_node->p_data, p_pack, p_pack->data_len);
  if (p_pack->reciver != PROTOCOL_BROADCAST_ADDR)
  {
 800e042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e044:	65da      	str	r2, [r3, #92]	; 0x5c
  __ASM volatile ("cpsid i" : : : "memory");
 800e046:	b672      	cpsid	i
}
 800e048:	bf00      	nop
    // Non-broadcast packet handling
 800e04a:	69fa      	ldr	r2, [r7, #28]
 800e04c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e04e:	3350      	adds	r3, #80	; 0x50
 800e050:	4619      	mov	r1, r3
 800e052:	4610      	mov	r0, r2
 800e054:	f7ff fa5c 	bl	800d510 <list_add>
    MUTEX_LOCK(tar_inter->send.mutex_lock);
 800e058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e05a:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 800e05e:	3301      	adds	r3, #1
 800e060:	b2da      	uxtb	r2, r3
 800e062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e064:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
    list_add(&(send_node->send_list), &(tar_inter->send.ack_list_header)); //It is faster to send forwarded packets as ACK packets
 800e068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e06a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e06c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e06e:	69bb      	ldr	r3, [r7, #24]
 800e070:	f383 8810 	msr	PRIMASK, r3
}
 800e074:	e019      	b.n	800e0aa <protocol_s_pack_forward+0x162>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800e076:	f3ef 8310 	mrs	r3, PRIMASK
 800e07a:	60fb      	str	r3, [r7, #12]
  return(result);
 800e07c:	68fb      	ldr	r3, [r7, #12]

    PROTOCOL_RCV_DBG_PRINTF("Pack forward to address 0x%02x, Next jump is %s.",
                             p_pack->reciver, tar_inter->object_name);
  }
  else
  {
 800e07e:	4a0e      	ldr	r2, [pc, #56]	; (800e0b8 <protocol_s_pack_forward+0x170>)
 800e080:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800e082:	b672      	cpsid	i
}
 800e084:	bf00      	nop
    //Broadcast packet processing
    MUTEX_LOCK(boardcast_object.mutex_lock);
 800e086:	69fb      	ldr	r3, [r7, #28]
 800e088:	490b      	ldr	r1, [pc, #44]	; (800e0b8 <protocol_s_pack_forward+0x170>)
 800e08a:	4618      	mov	r0, r3
 800e08c:	f7ff fa40 	bl	800d510 <list_add>

 800e090:	4b09      	ldr	r3, [pc, #36]	; (800e0b8 <protocol_s_pack_forward+0x170>)
 800e092:	7a1b      	ldrb	r3, [r3, #8]
 800e094:	3301      	adds	r3, #1
 800e096:	b2da      	uxtb	r2, r3
 800e098:	4b07      	ldr	r3, [pc, #28]	; (800e0b8 <protocol_s_pack_forward+0x170>)
 800e09a:	721a      	strb	r2, [r3, #8]
    list_add(&(send_node->send_list), &(boardcast_object.send_list_header));
    boardcast_object.send_node_num++;
 800e09c:	4b06      	ldr	r3, [pc, #24]	; (800e0b8 <protocol_s_pack_forward+0x170>)
 800e09e:	68db      	ldr	r3, [r3, #12]
 800e0a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e0a2:	693b      	ldr	r3, [r7, #16]
 800e0a4:	f383 8810 	msr	PRIMASK, r3
}
 800e0a8:	bf00      	nop

    MUTEX_UNLOCK(boardcast_object.mutex_lock);

    PROTOCOL_RCV_DBG_PRINTF("Broadcast pack forward.");
  }
 800e0aa:	6abb      	ldr	r3, [r7, #40]	; 0x28

 800e0ac:	4618      	mov	r0, r3
 800e0ae:	3730      	adds	r7, #48	; 0x30
 800e0b0:	46bd      	mov	sp, r7
 800e0b2:	bd80      	pop	{r7, pc}
 800e0b4:	0800faa8 	.word	0x0800faa8
 800e0b8:	20011380 	.word	0x20011380

0800e0bc <protocol_s_unpack_data_handle>:
  return status;
}

//Unpack processing function
 800e0bc:	b590      	push	{r4, r7, lr}
 800e0be:	b087      	sub	sp, #28
 800e0c0:	af00      	add	r7, sp, #0
 800e0c2:	6078      	str	r0, [r7, #4]
uint32_t protocol_s_unpack_data_handle(struct perph_interface *obj)
{
  uint32_t status;
  uint16_t cmd;
  protocol_pack_desc_t *p_pack;
  send_list_node_t *session_node;
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	617b      	str	r3, [r7, #20]

 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0cc:	613b      	str	r3, [r7, #16]
  status = PROTOCOL_SUCCESS;
  p_pack = (protocol_pack_desc_t *)(obj->rcvd.p_data);

#if PROTOCOL_ROUTE_FOWARD == PROTOCOL_ENABLE

 800e0ce:	693b      	ldr	r3, [r7, #16]
 800e0d0:	795a      	ldrb	r2, [r3, #5]
 800e0d2:	4b2e      	ldr	r3, [pc, #184]	; (800e18c <protocol_s_unpack_data_handle+0xd0>)
 800e0d4:	781b      	ldrb	r3, [r3, #0]
 800e0d6:	429a      	cmp	r2, r3
 800e0d8:	d00a      	beq.n	800e0f0 <protocol_s_unpack_data_handle+0x34>
  //If the receiving address does not match the local address, forward it
  if (p_pack->reciver != protocol_local_info.address)
 800e0da:	6879      	ldr	r1, [r7, #4]
 800e0dc:	6938      	ldr	r0, [r7, #16]
 800e0de:	f7ff ff33 	bl	800df48 <protocol_s_pack_forward>
 800e0e2:	6178      	str	r0, [r7, #20]
  {
 800e0e4:	693b      	ldr	r3, [r7, #16]
 800e0e6:	795b      	ldrb	r3, [r3, #5]
 800e0e8:	2bff      	cmp	r3, #255	; 0xff
 800e0ea:	d001      	beq.n	800e0f0 <protocol_s_unpack_data_handle+0x34>
    status = protocol_s_pack_forward(p_pack, obj);
    if (p_pack->reciver != PROTOCOL_BROADCAST_ADDR)
 800e0ec:	697b      	ldr	r3, [r7, #20]
 800e0ee:	e049      	b.n	800e184 <protocol_s_unpack_data_handle+0xc8>
    {
      return status;
    }
  }

#endif
 800e0f0:	693b      	ldr	r3, [r7, #16]
 800e0f2:	78db      	ldrb	r3, [r3, #3]
 800e0f4:	f003 0320 	and.w	r3, r3, #32
 800e0f8:	b2db      	uxtb	r3, r3
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d02a      	beq.n	800e154 <protocol_s_unpack_data_handle+0x98>

  if (p_pack->pack_type == PROTOCOL_PACK_ACK)
 800e0fe:	693b      	ldr	r3, [r7, #16]
 800e100:	7919      	ldrb	r1, [r3, #4]
  {
    session_node = protocol_s_session_get_node(obj,
 800e102:	693b      	ldr	r3, [r7, #16]
 800e104:	78db      	ldrb	r3, [r3, #3]
 800e106:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800e10a:	b2db      	uxtb	r3, r3
  if (p_pack->pack_type == PROTOCOL_PACK_ACK)
 800e10c:	461a      	mov	r2, r3
 800e10e:	6878      	ldr	r0, [r7, #4]
 800e110:	f7ff fece 	bl	800deb0 <protocol_s_session_get_node>
 800e114:	60b8      	str	r0, [r7, #8]
                                               p_pack->sender,
                                               p_pack->session);
 800e116:	68bb      	ldr	r3, [r7, #8]
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d109      	bne.n	800e130 <protocol_s_unpack_data_handle+0x74>

    if (session_node == NULL)
 800e11c:	2303      	movs	r3, #3
 800e11e:	617b      	str	r3, [r7, #20]
    {
 800e120:	f240 22ad 	movw	r2, #685	; 0x2ad
 800e124:	491a      	ldr	r1, [pc, #104]	; (800e190 <protocol_s_unpack_data_handle+0xd4>)
 800e126:	6978      	ldr	r0, [r7, #20]
 800e128:	f000 f9bc 	bl	800e4a4 <protocol_s_error_info_printf>
      status = PROTOCOL_ERR_SESSION_NOT_FOUND;
      PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 800e12c:	697b      	ldr	r3, [r7, #20]
 800e12e:	e029      	b.n	800e184 <protocol_s_unpack_data_handle+0xc8>

      return status;
 800e130:	68bb      	ldr	r3, [r7, #8]
 800e132:	2201      	movs	r2, #1
 800e134:	73da      	strb	r2, [r3, #15]
    }
    session_node->is_got_ack = 1;
 800e136:	68bb      	ldr	r3, [r7, #8]
 800e138:	8a9b      	ldrh	r3, [r3, #20]
 800e13a:	81fb      	strh	r3, [r7, #14]

    cmd = session_node->cmd;

    PROTOCOL_RCV_DBG_PRINTF("Rcv pack, Address:0x%02X, Cmd:0x%04X, Session:%d Ack pack.",
                             p_pack->sender, cmd, p_pack->session);
 800e13c:	68bb      	ldr	r3, [r7, #8]
 800e13e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e140:	2b00      	cmp	r3, #0
 800e142:	d01e      	beq.n	800e182 <protocol_s_unpack_data_handle+0xc6>

    if (session_node->ack_callback != NULL)
 800e144:	68bb      	ldr	r3, [r7, #8]
 800e146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e148:	693a      	ldr	r2, [r7, #16]
 800e14a:	320c      	adds	r2, #12
 800e14c:	6812      	ldr	r2, [r2, #0]
 800e14e:	4610      	mov	r0, r2
 800e150:	4798      	blx	r3
 800e152:	e016      	b.n	800e182 <protocol_s_unpack_data_handle+0xc6>
    {
      session_node->ack_callback(*(int32_t *)(p_pack->pdata));
    }
  }
  else
 800e154:	693b      	ldr	r3, [r7, #16]
 800e156:	330c      	adds	r3, #12
 800e158:	881b      	ldrh	r3, [r3, #0]
 800e15a:	81fb      	strh	r3, [r7, #14]
  {
    cmd = *((uint16_t *)(p_pack->pdata));
    PROTOCOL_RCV_DBG_PRINTF("Rcv pack, Address:0x%02X, Cmd:0x%04X, Normal pack.",
 800e15c:	4b0b      	ldr	r3, [pc, #44]	; (800e18c <protocol_s_unpack_data_handle+0xd0>)
 800e15e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800e162:	2b00      	cmp	r3, #0
 800e164:	d00d      	beq.n	800e182 <protocol_s_unpack_data_handle+0xc6>
                             p_pack->sender, cmd);
    if (protocol_local_info.rcv_nor_callBack != NULL)
 800e166:	4b09      	ldr	r3, [pc, #36]	; (800e18c <protocol_s_unpack_data_handle+0xd0>)
 800e168:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
    {
      protocol_local_info.rcv_nor_callBack((uint8_t *)p_pack,
 800e16c:	693b      	ldr	r3, [r7, #16]
 800e16e:	78db      	ldrb	r3, [r3, #3]
 800e170:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800e174:	b2db      	uxtb	r3, r3
    if (protocol_local_info.rcv_nor_callBack != NULL)
 800e176:	461a      	mov	r2, r3
 800e178:	693b      	ldr	r3, [r7, #16]
 800e17a:	791b      	ldrb	r3, [r3, #4]
 800e17c:	89f9      	ldrh	r1, [r7, #14]
 800e17e:	6938      	ldr	r0, [r7, #16]
 800e180:	47a0      	blx	r4
                                           cmd,
                                           p_pack->session,
                                           p_pack->sender);
    }
  }
 800e182:	697b      	ldr	r3, [r7, #20]

 800e184:	4618      	mov	r0, r3
 800e186:	371c      	adds	r7, #28
 800e188:	46bd      	mov	sp, r7
 800e18a:	bd90      	pop	{r4, r7, pc}
 800e18c:	20011390 	.word	0x20011390
 800e190:	0800faa8 	.word	0x0800faa8

0800e194 <protocol_s_extract>:
  return status;
}

//Unpack
 800e194:	b580      	push	{r7, lr}
 800e196:	b084      	sub	sp, #16
 800e198:	af00      	add	r7, sp, #0
 800e19a:	6078      	str	r0, [r7, #4]
uint32_t protocol_s_extract(struct perph_interface *obj)
 800e19c:	2300      	movs	r3, #0
 800e19e:	60fb      	str	r3, [r7, #12]
{
  uint32_t status = 0;
  rcvd_desc_t *rcvd;
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	3320      	adds	r3, #32
 800e1a4:	60bb      	str	r3, [r7, #8]

 800e1a6:	68bb      	ldr	r3, [r7, #8]
 800e1a8:	4618      	mov	r0, r3
 800e1aa:	f000 fda7 	bl	800ecfc <fifo_s_isempty>
 800e1ae:	4603      	mov	r3, r0
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d003      	beq.n	800e1bc <protocol_s_extract+0x28>
  rcvd = &obj->rcvd;
  if (fifo_s_isempty(&rcvd->fifo))
 800e1b4:	2307      	movs	r3, #7
 800e1b6:	60fb      	str	r3, [r7, #12]
  {
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	e0af      	b.n	800e31c <protocol_s_extract+0x188>
    status = PROTOCOL_ERR_FIFO_EMPTY;
    return status;
  }

  while (1)
 800e1bc:	68bb      	ldr	r3, [r7, #8]
 800e1be:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e1c2:	2b04      	cmp	r3, #4
 800e1c4:	f200 8098 	bhi.w	800e2f8 <protocol_s_extract+0x164>
 800e1c8:	a201      	add	r2, pc, #4	; (adr r2, 800e1d0 <protocol_s_extract+0x3c>)
 800e1ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1ce:	bf00      	nop
 800e1d0:	0800e1e5 	.word	0x0800e1e5
 800e1d4:	0800e1ff 	.word	0x0800e1ff
 800e1d8:	0800e26b 	.word	0x0800e26b
 800e1dc:	0800e29d 	.word	0x0800e29d
 800e1e0:	0800e2dd 	.word	0x0800e2dd
  {
    switch (rcvd->state)
    {
    case UNPACK_PACK_STAGE_FIND_SOF:
 800e1e4:	68b8      	ldr	r0, [r7, #8]
 800e1e6:	f000 f89f 	bl	800e328 <protocol_s_find_pack_header>
 800e1ea:	60f8      	str	r0, [r7, #12]

 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	f040 8084 	bne.w	800e2fc <protocol_s_extract+0x168>
      status = protocol_s_find_pack_header(rcvd);
      if (status == PROTOCOL_SUCCESS)
 800e1f4:	68bb      	ldr	r3, [r7, #8]
 800e1f6:	2201      	movs	r2, #1
 800e1f8:	f883 2020 	strb.w	r2, [r3, #32]
      {
        rcvd->state = UNPACK_PACK_STAGE_AUTH_HEADER;
 800e1fc:	e07e      	b.n	800e2fc <protocol_s_extract+0x168>
      }
      break;

    case UNPACK_PACK_STAGE_AUTH_HEADER:
 800e1fe:	68b8      	ldr	r0, [r7, #8]
 800e200:	f000 f8b4 	bl	800e36c <protocol_s_auth_pack_header>
 800e204:	60f8      	str	r0, [r7, #12]

      status = protocol_s_auth_pack_header(rcvd);
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d122      	bne.n	800e252 <protocol_s_extract+0xbe>

      if (status == PROTOCOL_SUCCESS)
 800e20c:	68bb      	ldr	r3, [r7, #8]
 800e20e:	2202      	movs	r2, #2
 800e210:	f883 2020 	strb.w	r2, [r3, #32]
      { /* malloc memory size equal to header size adding data size */
 800e214:	68bb      	ldr	r3, [r7, #8]
 800e216:	8bdb      	ldrh	r3, [r3, #30]
 800e218:	4618      	mov	r0, r3
 800e21a:	f7fe ff5b 	bl	800d0d4 <protocol_p_malloc>
 800e21e:	4602      	mov	r2, r0
 800e220:	68bb      	ldr	r3, [r7, #8]
 800e222:	619a      	str	r2, [r3, #24]
        rcvd->state = UNPACK_PACK_STAGE_RECV_DATA;
 800e224:	68bb      	ldr	r3, [r7, #8]
 800e226:	699b      	ldr	r3, [r3, #24]
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d109      	bne.n	800e240 <protocol_s_extract+0xac>
        rcvd->p_data = protocol_p_malloc(rcvd->total_num);
        if (rcvd->p_data == NULL)
 800e22c:	2302      	movs	r3, #2
 800e22e:	60fb      	str	r3, [r7, #12]
        {
 800e230:	f240 22f3 	movw	r2, #755	; 0x2f3
 800e234:	493b      	ldr	r1, [pc, #236]	; (800e324 <protocol_s_extract+0x190>)
 800e236:	68f8      	ldr	r0, [r7, #12]
 800e238:	f000 f934 	bl	800e4a4 <protocol_s_error_info_printf>
          status = PROTOCOL_ERR_NOT_ENOUGH_MEM;
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	e06d      	b.n	800e31c <protocol_s_extract+0x188>
          PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
          return status;
 800e240:	68bb      	ldr	r3, [r7, #8]
 800e242:	6998      	ldr	r0, [r3, #24]
 800e244:	68bb      	ldr	r3, [r7, #8]
 800e246:	8b9b      	ldrh	r3, [r3, #28]
 800e248:	461a      	mov	r2, r3
 800e24a:	2100      	movs	r1, #0
 800e24c:	f001 fa83 	bl	800f756 <memset>

        fifo_s_get(&rcvd->fifo);
        /* this is a pseudo header, remove this from fifo */
        rcvd->state = UNPACK_PACK_STAGE_FIND_SOF;

        PROTOCOL_RCV_ERR_PRINTF("Pack header auth failure.");
 800e250:	e056      	b.n	800e300 <protocol_s_extract+0x16c>
        memset(rcvd->p_data, 0, rcvd->rcvd_num);
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	2b08      	cmp	r3, #8
 800e256:	d153      	bne.n	800e300 <protocol_s_extract+0x16c>
      {
 800e258:	68bb      	ldr	r3, [r7, #8]
 800e25a:	4618      	mov	r0, r3
 800e25c:	f000 fb95 	bl	800e98a <fifo_s_get>
        fifo_s_get(&rcvd->fifo);
 800e260:	68bb      	ldr	r3, [r7, #8]
 800e262:	2200      	movs	r2, #0
 800e264:	f883 2020 	strb.w	r2, [r3, #32]
        PROTOCOL_RCV_ERR_PRINTF("Pack header auth failure.");
 800e268:	e04a      	b.n	800e300 <protocol_s_extract+0x16c>
      }
      break;

    case UNPACK_PACK_STAGE_RECV_DATA:
 800e26a:	68bb      	ldr	r3, [r7, #8]
 800e26c:	699b      	ldr	r3, [r3, #24]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d004      	beq.n	800e27c <protocol_s_extract+0xe8>

      if (rcvd->p_data)
 800e272:	68b8      	ldr	r0, [r7, #8]
 800e274:	f000 f8c0 	bl	800e3f8 <protocol_s_fetch_pack_data>
 800e278:	60f8      	str	r0, [r7, #12]
 800e27a:	e007      	b.n	800e28c <protocol_s_extract+0xf8>
      {
        status = protocol_s_fetch_pack_data(rcvd);
      }
      else
 800e27c:	2302      	movs	r3, #2
 800e27e:	60fb      	str	r3, [r7, #12]
      {
 800e280:	f44f 7243 	mov.w	r2, #780	; 0x30c
 800e284:	4927      	ldr	r1, [pc, #156]	; (800e324 <protocol_s_extract+0x190>)
 800e286:	68f8      	ldr	r0, [r7, #12]
 800e288:	f000 f90c 	bl	800e4a4 <protocol_s_error_info_printf>
        status = PROTOCOL_ERR_NOT_ENOUGH_MEM;
        PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
      }
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d138      	bne.n	800e304 <protocol_s_extract+0x170>

      if (status == PROTOCOL_SUCCESS)
 800e292:	68bb      	ldr	r3, [r7, #8]
 800e294:	2203      	movs	r2, #3
 800e296:	f883 2020 	strb.w	r2, [r3, #32]
      {
        rcvd->state = UNPACK_PACK_STAGE_AUTH_PACK;
      }
 800e29a:	e033      	b.n	800e304 <protocol_s_extract+0x170>

      break;

    case UNPACK_PACK_STAGE_AUTH_PACK:
 800e29c:	68bb      	ldr	r3, [r7, #8]
 800e29e:	699a      	ldr	r2, [r3, #24]
 800e2a0:	68bb      	ldr	r3, [r7, #8]
 800e2a2:	8bdb      	ldrh	r3, [r3, #30]
 800e2a4:	4619      	mov	r1, r3
 800e2a6:	4610      	mov	r0, r2
 800e2a8:	f000 ff9c 	bl	800f1e4 <verify_crc32>
 800e2ac:	4603      	mov	r3, r0
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d004      	beq.n	800e2bc <protocol_s_extract+0x128>

      if (verify_crc32(rcvd->p_data, rcvd->total_num))
 800e2b2:	68bb      	ldr	r3, [r7, #8]
 800e2b4:	2204      	movs	r2, #4
 800e2b6:	f883 2020 	strb.w	r2, [r3, #32]
        rcvd->rcvd_num = 0;
        rcvd->total_num = 0;
        protocol_p_free(rcvd->p_data);
        rcvd->state = UNPACK_PACK_STAGE_FIND_SOF;

        PROTOCOL_RCV_ERR_PRINTF("Pack data auth failure.");
 800e2ba:	e024      	b.n	800e306 <protocol_s_extract+0x172>
      else
 800e2bc:	68bb      	ldr	r3, [r7, #8]
 800e2be:	2200      	movs	r2, #0
 800e2c0:	839a      	strh	r2, [r3, #28]
      {
 800e2c2:	68bb      	ldr	r3, [r7, #8]
 800e2c4:	2200      	movs	r2, #0
 800e2c6:	83da      	strh	r2, [r3, #30]
        rcvd->rcvd_num = 0;
 800e2c8:	68bb      	ldr	r3, [r7, #8]
 800e2ca:	699b      	ldr	r3, [r3, #24]
 800e2cc:	4618      	mov	r0, r3
 800e2ce:	f7fe ff0d 	bl	800d0ec <protocol_p_free>
        rcvd->total_num = 0;
 800e2d2:	68bb      	ldr	r3, [r7, #8]
 800e2d4:	2200      	movs	r2, #0
 800e2d6:	f883 2020 	strb.w	r2, [r3, #32]
        PROTOCOL_RCV_ERR_PRINTF("Pack data auth failure.");
 800e2da:	e014      	b.n	800e306 <protocol_s_extract+0x172>
      }
      break;

    case UNPACK_PACK_STAGE_DATA_HANDLE:
 800e2dc:	6878      	ldr	r0, [r7, #4]
 800e2de:	f7ff feed 	bl	800e0bc <protocol_s_unpack_data_handle>
 800e2e2:	60f8      	str	r0, [r7, #12]

      status = protocol_s_unpack_data_handle(obj);
 800e2e4:	68bb      	ldr	r3, [r7, #8]
 800e2e6:	699b      	ldr	r3, [r3, #24]
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	f7fe feff 	bl	800d0ec <protocol_p_free>

 800e2ee:	68bb      	ldr	r3, [r7, #8]
 800e2f0:	2200      	movs	r2, #0
 800e2f2:	f883 2020 	strb.w	r2, [r3, #32]
      protocol_p_free(rcvd->p_data);
 800e2f6:	e006      	b.n	800e306 <protocol_s_extract+0x172>
      rcvd->state = UNPACK_PACK_STAGE_FIND_SOF;
      break;

 800e2f8:	bf00      	nop
 800e2fa:	e004      	b.n	800e306 <protocol_s_extract+0x172>
        rcvd->state = UNPACK_PACK_STAGE_AUTH_HEADER;
 800e2fc:	bf00      	nop
 800e2fe:	e002      	b.n	800e306 <protocol_s_extract+0x172>
        PROTOCOL_RCV_ERR_PRINTF("Pack header auth failure.");
 800e300:	bf00      	nop
 800e302:	e000      	b.n	800e306 <protocol_s_extract+0x172>
      }
 800e304:	bf00      	nop
    default:
      break;
    }
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	2b0a      	cmp	r3, #10
 800e30a:	d006      	beq.n	800e31a <protocol_s_extract+0x186>
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	2b02      	cmp	r3, #2
 800e310:	d003      	beq.n	800e31a <protocol_s_extract+0x186>

 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	2b09      	cmp	r3, #9
 800e316:	d000      	beq.n	800e31a <protocol_s_extract+0x186>
  while (1)
 800e318:	e750      	b.n	800e1bc <protocol_s_extract+0x28>
        status == PROTOCOL_ERR_NOT_ENOUGH_MEM ||
        status == PROTOCOL_ERR_NOT_FIND_HEADER)
    {
      break; /* break from while */
    }
  }
 800e31a:	68fb      	ldr	r3, [r7, #12]

 800e31c:	4618      	mov	r0, r3
 800e31e:	3710      	adds	r7, #16
 800e320:	46bd      	mov	sp, r7
 800e322:	bd80      	pop	{r7, pc}
 800e324:	0800faa8 	.word	0x0800faa8

0800e328 <protocol_s_find_pack_header>:
  return status;
}

//Find frame header
 800e328:	b580      	push	{r7, lr}
 800e32a:	b084      	sub	sp, #16
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	6078      	str	r0, [r7, #4]
uint32_t protocol_s_find_pack_header(rcvd_desc_t *rcvd)
{
  uint32_t status;
 800e330:	e00e      	b.n	800e350 <protocol_s_find_pack_header+0x28>

  while (fifo_s_isempty(&rcvd->fifo) == 0)
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	2100      	movs	r1, #0
 800e336:	4618      	mov	r0, r3
 800e338:	f000 fc44 	bl	800ebc4 <fifo_s_preread>
 800e33c:	4603      	mov	r3, r0
 800e33e:	2baa      	cmp	r3, #170	; 0xaa
 800e340:	d102      	bne.n	800e348 <protocol_s_find_pack_header+0x20>
  { // if fifo not empty, loop
    if ((uint8_t)(fifo_s_preread(&rcvd->fifo, 0)) == PROTOCOL_HEADER)
 800e342:	2300      	movs	r3, #0
 800e344:	60fb      	str	r3, [r7, #12]
    {
 800e346:	e00c      	b.n	800e362 <protocol_s_find_pack_header+0x3a>
      status = PROTOCOL_SUCCESS;
      goto END;
    }
    else
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	4618      	mov	r0, r3
 800e34c:	f000 fb1d 	bl	800e98a <fifo_s_get>
  uint32_t status;
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	4618      	mov	r0, r3
 800e354:	f000 fcd2 	bl	800ecfc <fifo_s_isempty>
 800e358:	4603      	mov	r3, r0
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d0e9      	beq.n	800e332 <protocol_s_find_pack_header+0xa>
    {
      fifo_s_get(&rcvd->fifo); //remove one byte from fifo
    }
  }
  //if fifo not empty, loop
 800e35e:	2309      	movs	r3, #9
 800e360:	60fb      	str	r3, [r7, #12]

  status = PROTOCOL_ERR_NOT_FIND_HEADER;

 800e362:	68fb      	ldr	r3, [r7, #12]
END:
 800e364:	4618      	mov	r0, r3
 800e366:	3710      	adds	r7, #16
 800e368:	46bd      	mov	sp, r7
 800e36a:	bd80      	pop	{r7, pc}

0800e36c <protocol_s_auth_pack_header>:
  return status;
}

//Verification header
 800e36c:	b580      	push	{r7, lr}
 800e36e:	b088      	sub	sp, #32
 800e370:	af00      	add	r7, sp, #0
 800e372:	6078      	str	r0, [r7, #4]
uint32_t protocol_s_auth_pack_header(rcvd_desc_t *rcvd)
{
  uint32_t status;
  uint8_t auth_array[12];
  ver_data_len_t ver_len;
 800e374:	6878      	ldr	r0, [r7, #4]
 800e376:	f107 0110 	add.w	r1, r7, #16
 800e37a:	230c      	movs	r3, #12
 800e37c:	2200      	movs	r2, #0
 800e37e:	f000 fc48 	bl	800ec12 <fifo_s_prereads>
 800e382:	4603      	mov	r3, r0
 800e384:	2b0c      	cmp	r3, #12
 800e386:	d130      	bne.n	800e3ea <protocol_s_auth_pack_header+0x7e>

  if (fifo_s_prereads(&rcvd->fifo, (char *)auth_array, 0, 12) == 12)
 800e388:	f107 0310 	add.w	r3, r7, #16
 800e38c:	4618      	mov	r0, r3
 800e38e:	f000 f862 	bl	800e456 <protocol_s_get_ver_datalen>
 800e392:	4603      	mov	r3, r0
 800e394:	81bb      	strh	r3, [r7, #12]
  {
 800e396:	89bb      	ldrh	r3, [r7, #12]
 800e398:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e39c:	b29b      	uxth	r3, r3
 800e39e:	3b10      	subs	r3, #16
 800e3a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e3a4:	d902      	bls.n	800e3ac <protocol_s_auth_pack_header+0x40>
    ver_len = protocol_s_get_ver_datalen(auth_array);
    if (ver_len.data_len - PROTOCOL_PACK_HEAD_TAIL_SIZE > PROTOCOL_MAX_DATA_LEN)
 800e3a6:	2308      	movs	r3, #8
 800e3a8:	61fb      	str	r3, [r7, #28]
 800e3aa:	e020      	b.n	800e3ee <protocol_s_auth_pack_header+0x82>
    {
      status = PROTOCOL_ERR_AUTH_FAILURE;
    }
    else
 800e3ac:	7b7b      	ldrb	r3, [r7, #13]
 800e3ae:	f023 0303 	bic.w	r3, r3, #3
 800e3b2:	b2db      	uxtb	r3, r3
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d115      	bne.n	800e3e4 <protocol_s_auth_pack_header+0x78>
 800e3b8:	f107 0310 	add.w	r3, r7, #16
 800e3bc:	210c      	movs	r1, #12
 800e3be:	4618      	mov	r0, r3
 800e3c0:	f000 fe86 	bl	800f0d0 <verify_crc16>
 800e3c4:	4603      	mov	r3, r0
 800e3c6:	2b01      	cmp	r3, #1
 800e3c8:	d10c      	bne.n	800e3e4 <protocol_s_auth_pack_header+0x78>
    {
      if ((ver_len.version == 0) && (verify_crc16(auth_array, 12) == 1))
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	61fb      	str	r3, [r7, #28]
      {
 800e3ce:	89bb      	ldrh	r3, [r7, #12]
 800e3d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e3d4:	b29b      	uxth	r3, r3
 800e3d6:	461a      	mov	r2, r3
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	83da      	strh	r2, [r3, #30]
        status = PROTOCOL_SUCCESS;
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	2200      	movs	r2, #0
 800e3e0:	839a      	strh	r2, [r3, #28]
 800e3e2:	e004      	b.n	800e3ee <protocol_s_auth_pack_header+0x82>
        rcvd->total_num = ver_len.data_len;
        rcvd->rcvd_num = 0;
      }
      else
 800e3e4:	2308      	movs	r3, #8
 800e3e6:	61fb      	str	r3, [r7, #28]
 800e3e8:	e001      	b.n	800e3ee <protocol_s_auth_pack_header+0x82>
      {
        status = PROTOCOL_ERR_AUTH_FAILURE;
      }
    }
  }
  else
 800e3ea:	230a      	movs	r3, #10
 800e3ec:	61fb      	str	r3, [r7, #28]
  {
    status = PROTOCOL_ERR_DATA_NOT_ENOUGH;
  }
 800e3ee:	69fb      	ldr	r3, [r7, #28]

 800e3f0:	4618      	mov	r0, r3
 800e3f2:	3720      	adds	r7, #32
 800e3f4:	46bd      	mov	sp, r7
 800e3f6:	bd80      	pop	{r7, pc}

0800e3f8 <protocol_s_fetch_pack_data>:
  return status;
}

//Get package data
 800e3f8:	b580      	push	{r7, lr}
 800e3fa:	b086      	sub	sp, #24
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	6078      	str	r0, [r7, #4]
uint32_t protocol_s_fetch_pack_data(rcvd_desc_t *rcvd)
{
  uint32_t status;
  uint32_t length;
  uint32_t want_len;
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	8bdb      	ldrh	r3, [r3, #30]
 800e404:	461a      	mov	r2, r3
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	8b9b      	ldrh	r3, [r3, #28]
 800e40a:	1ad3      	subs	r3, r2, r3
 800e40c:	613b      	str	r3, [r7, #16]

 800e40e:	6878      	ldr	r0, [r7, #4]
  want_len = rcvd->total_num - rcvd->rcvd_num;
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	699b      	ldr	r3, [r3, #24]
 800e414:	687a      	ldr	r2, [r7, #4]
 800e416:	8b92      	ldrh	r2, [r2, #28]

 800e418:	4413      	add	r3, r2
 800e41a:	693a      	ldr	r2, [r7, #16]
 800e41c:	4619      	mov	r1, r3
 800e41e:	f000 fae9 	bl	800e9f4 <fifo_s_gets>
 800e422:	4603      	mov	r3, r0
 800e424:	60fb      	str	r3, [r7, #12]
  length = fifo_s_gets(&rcvd->fifo,
                       (char *)rcvd->p_data + rcvd->rcvd_num,
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	8b9a      	ldrh	r2, [r3, #28]
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	b29b      	uxth	r3, r3
 800e42e:	4413      	add	r3, r2
 800e430:	b29a      	uxth	r2, r3
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	839a      	strh	r2, [r3, #28]
                       want_len);
  rcvd->rcvd_num += length;
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	8b9a      	ldrh	r2, [r3, #28]
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	8bdb      	ldrh	r3, [r3, #30]
 800e43e:	429a      	cmp	r2, r3
 800e440:	d202      	bcs.n	800e448 <protocol_s_fetch_pack_data+0x50>

  if (rcvd->rcvd_num < rcvd->total_num)
 800e442:	230a      	movs	r3, #10
 800e444:	617b      	str	r3, [r7, #20]
 800e446:	e001      	b.n	800e44c <protocol_s_fetch_pack_data+0x54>
  {
    status = PROTOCOL_ERR_DATA_NOT_ENOUGH;
  }
  else
 800e448:	2300      	movs	r3, #0
 800e44a:	617b      	str	r3, [r7, #20]
  {
    status = PROTOCOL_SUCCESS;
 800e44c:	697b      	ldr	r3, [r7, #20]
  }
 800e44e:	4618      	mov	r0, r3
 800e450:	3718      	adds	r7, #24
 800e452:	46bd      	mov	sp, r7
 800e454:	bd80      	pop	{r7, pc}

0800e456 <protocol_s_get_ver_datalen>:
  return status;
}

//Get version number and data length
ver_data_len_t protocol_s_get_ver_datalen(void *pack)
 800e456:	b480      	push	{r7}
 800e458:	b087      	sub	sp, #28
 800e45a:	af00      	add	r7, sp, #0
 800e45c:	6078      	str	r0, [r7, #4]

{
 800e45e:	f107 0308 	add.w	r3, r7, #8
 800e462:	617b      	str	r3, [r7, #20]
  ver_data_len_t ver_len;
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	613b      	str	r3, [r7, #16]
  uint16_t *tmp = (uint16_t *)&ver_len;
  uint8_t *ptr = (uint8_t *)pack;
 800e468:	693b      	ldr	r3, [r7, #16]
 800e46a:	3302      	adds	r3, #2
 800e46c:	781b      	ldrb	r3, [r3, #0]
 800e46e:	021b      	lsls	r3, r3, #8
 800e470:	b21a      	sxth	r2, r3
 800e472:	693b      	ldr	r3, [r7, #16]
 800e474:	3301      	adds	r3, #1
 800e476:	781b      	ldrb	r3, [r3, #0]
 800e478:	b21b      	sxth	r3, r3
 800e47a:	4313      	orrs	r3, r2
 800e47c:	b21b      	sxth	r3, r3
 800e47e:	b29a      	uxth	r2, r3
 800e480:	697b      	ldr	r3, [r7, #20]
 800e482:	801a      	strh	r2, [r3, #0]

  *tmp = ptr[2] << 8 | ptr[1];
 800e484:	893b      	ldrh	r3, [r7, #8]
 800e486:	81bb      	strh	r3, [r7, #12]
 800e488:	2300      	movs	r3, #0
 800e48a:	7b3a      	ldrb	r2, [r7, #12]
 800e48c:	f362 0307 	bfi	r3, r2, #0, #8
 800e490:	7b7a      	ldrb	r2, [r7, #13]
 800e492:	f362 230f 	bfi	r3, r2, #8, #8

 800e496:	4618      	mov	r0, r3
 800e498:	371c      	adds	r7, #28
 800e49a:	46bd      	mov	sp, r7
 800e49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a0:	4770      	bx	lr
	...

0800e4a4 <protocol_s_error_info_printf>:
  return ver_len;
}

//Accept error message
 800e4a4:	b480      	push	{r7}
 800e4a6:	b087      	sub	sp, #28
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	60f8      	str	r0, [r7, #12]
 800e4ac:	60b9      	str	r1, [r7, #8]
 800e4ae:	607a      	str	r2, [r7, #4]
void protocol_s_error_info_printf(uint32_t status, char *file, int line)
{
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	2b12      	cmp	r3, #18
 800e4b4:	d861      	bhi.n	800e57a <protocol_s_error_info_printf+0xd6>
 800e4b6:	a201      	add	r2, pc, #4	; (adr r2, 800e4bc <protocol_s_error_info_printf+0x18>)
 800e4b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4bc:	0800e509 	.word	0x0800e509
 800e4c0:	0800e50f 	.word	0x0800e50f
 800e4c4:	0800e515 	.word	0x0800e515
 800e4c8:	0800e51b 	.word	0x0800e51b
 800e4cc:	0800e521 	.word	0x0800e521
 800e4d0:	0800e527 	.word	0x0800e527
 800e4d4:	0800e52d 	.word	0x0800e52d
 800e4d8:	0800e533 	.word	0x0800e533
 800e4dc:	0800e539 	.word	0x0800e539
 800e4e0:	0800e53f 	.word	0x0800e53f
 800e4e4:	0800e545 	.word	0x0800e545
 800e4e8:	0800e54b 	.word	0x0800e54b
 800e4ec:	0800e551 	.word	0x0800e551
 800e4f0:	0800e557 	.word	0x0800e557
 800e4f4:	0800e55d 	.word	0x0800e55d
 800e4f8:	0800e563 	.word	0x0800e563
 800e4fc:	0800e569 	.word	0x0800e569
 800e500:	0800e56f 	.word	0x0800e56f
 800e504:	0800e575 	.word	0x0800e575
  char *err_info;
  switch (status)
  {
 800e508:	4b20      	ldr	r3, [pc, #128]	; (800e58c <protocol_s_error_info_printf+0xe8>)
 800e50a:	617b      	str	r3, [r7, #20]
  case PROTOCOL_SUCCESS:
 800e50c:	e037      	b.n	800e57e <protocol_s_error_info_printf+0xda>
    err_info = "PROTOCOL_SUCCESS";
    break;
 800e50e:	4b20      	ldr	r3, [pc, #128]	; (800e590 <protocol_s_error_info_printf+0xec>)
 800e510:	617b      	str	r3, [r7, #20]
  case PROTOCOL_ERR_DATA_TOO_LONG:
 800e512:	e034      	b.n	800e57e <protocol_s_error_info_printf+0xda>
    err_info = "PROTOCOL_ERR_DATA_TOO_LONG";
    break;
 800e514:	4b1f      	ldr	r3, [pc, #124]	; (800e594 <protocol_s_error_info_printf+0xf0>)
 800e516:	617b      	str	r3, [r7, #20]
  case PROTOCOL_ERR_NOT_ENOUGH_MEM:
 800e518:	e031      	b.n	800e57e <protocol_s_error_info_printf+0xda>
    err_info = "PROTOCOL_ERR_NOT_ENOUGH_MEM";
    break;
 800e51a:	4b1f      	ldr	r3, [pc, #124]	; (800e598 <protocol_s_error_info_printf+0xf4>)
 800e51c:	617b      	str	r3, [r7, #20]
  case PROTOCOL_ERR_SESSION_NOT_FOUND:
 800e51e:	e02e      	b.n	800e57e <protocol_s_error_info_printf+0xda>
    err_info = "PROTOCOL_ERR_SESSION_NOT_FOUND";
    break;
 800e520:	4b1e      	ldr	r3, [pc, #120]	; (800e59c <protocol_s_error_info_printf+0xf8>)
 800e522:	617b      	str	r3, [r7, #20]
  case PROTOCOL_ERR_SESSION_FULL:
 800e524:	e02b      	b.n	800e57e <protocol_s_error_info_printf+0xda>
    err_info = "PROTOCOL_ERR_SESSION_FULL";
    break;
 800e526:	4b1e      	ldr	r3, [pc, #120]	; (800e5a0 <protocol_s_error_info_printf+0xfc>)
 800e528:	617b      	str	r3, [r7, #20]
  case PROTOCOL_ERR_SESSION_IS_USE:
 800e52a:	e028      	b.n	800e57e <protocol_s_error_info_printf+0xda>
    err_info = "PROTOCOL_ERR_SESSION_IS_USE";
    break;
 800e52c:	4b1d      	ldr	r3, [pc, #116]	; (800e5a4 <protocol_s_error_info_printf+0x100>)
 800e52e:	617b      	str	r3, [r7, #20]
  case PROTOCOL_ERR_ROUTE_NOT_FOUND:
 800e530:	e025      	b.n	800e57e <protocol_s_error_info_printf+0xda>
    err_info = "PROTOCOL_ERR_ROUTE_NOT_FOUND";
    break;
 800e532:	4b1d      	ldr	r3, [pc, #116]	; (800e5a8 <protocol_s_error_info_printf+0x104>)
 800e534:	617b      	str	r3, [r7, #20]
  case PROTOCOL_ERR_FIFO_EMPTY:
 800e536:	e022      	b.n	800e57e <protocol_s_error_info_printf+0xda>
    err_info = "PROTOCOL_ERR_FIFO_EMPTY";
    break;
 800e538:	4b1c      	ldr	r3, [pc, #112]	; (800e5ac <protocol_s_error_info_printf+0x108>)
 800e53a:	617b      	str	r3, [r7, #20]
  case PROTOCOL_ERR_AUTH_FAILURE:
 800e53c:	e01f      	b.n	800e57e <protocol_s_error_info_printf+0xda>
    err_info = "PROTOCOL_ERR_AUTH_FAILURE";
    break;
 800e53e:	4b1c      	ldr	r3, [pc, #112]	; (800e5b0 <protocol_s_error_info_printf+0x10c>)
 800e540:	617b      	str	r3, [r7, #20]
  case PROTOCOL_ERR_NOT_FIND_HEADER:
 800e542:	e01c      	b.n	800e57e <protocol_s_error_info_printf+0xda>
    err_info = "PROTOCOL_ERR_NOT_FIND_HEADER";
    break;
 800e544:	4b1b      	ldr	r3, [pc, #108]	; (800e5b4 <protocol_s_error_info_printf+0x110>)
 800e546:	617b      	str	r3, [r7, #20]
  case PROTOCOL_ERR_DATA_NOT_ENOUGH:
 800e548:	e019      	b.n	800e57e <protocol_s_error_info_printf+0xda>
    err_info = "PROTOCOL_ERR_DATA_NOT_ENOUGH";
    break;
 800e54a:	4b1b      	ldr	r3, [pc, #108]	; (800e5b8 <protocol_s_error_info_printf+0x114>)
 800e54c:	617b      	str	r3, [r7, #20]
  case PROTOCOL_ERR_FIFO_FULL:
 800e54e:	e016      	b.n	800e57e <protocol_s_error_info_printf+0xda>
    err_info = "PROTOCOL_ERR_FIFO_FULL";
    break;
 800e550:	4b1a      	ldr	r3, [pc, #104]	; (800e5bc <protocol_s_error_info_printf+0x118>)
 800e552:	617b      	str	r3, [r7, #20]
  case PROTOCOL_ERR_OBJECT_NOT_FOUND:
 800e554:	e013      	b.n	800e57e <protocol_s_error_info_printf+0xda>
    err_info = "PROTOCOL_ERR_OBJECT_NOT_FOUND";
    break;
 800e556:	4b1a      	ldr	r3, [pc, #104]	; (800e5c0 <protocol_s_error_info_printf+0x11c>)
 800e558:	617b      	str	r3, [r7, #20]
  case PROTOCOL_ERR_UNSUPPORT_CPU:
 800e55a:	e010      	b.n	800e57e <protocol_s_error_info_printf+0xda>
    err_info = "PROTOCOL_ERR_UNSUPPORT_CPU";
    break;
 800e55c:	4b19      	ldr	r3, [pc, #100]	; (800e5c4 <protocol_s_error_info_printf+0x120>)
 800e55e:	617b      	str	r3, [r7, #20]
  case PROTOCOL_ERR_ROUTEU_SET_BEYOND:
 800e560:	e00d      	b.n	800e57e <protocol_s_error_info_printf+0xda>
    err_info = "PROTOCOL_ERR_ROUTEU_SET_BEYOND";
    break;
 800e562:	4b19      	ldr	r3, [pc, #100]	; (800e5c8 <protocol_s_error_info_printf+0x124>)
 800e564:	617b      	str	r3, [r7, #20]
  case PROTOCOL_ERR_INTER_NOT_FOUND:
 800e566:	e00a      	b.n	800e57e <protocol_s_error_info_printf+0xda>
    err_info = "PROTOCOL_ERR_INTER_NOT_FOUND";
    break;
 800e568:	4b18      	ldr	r3, [pc, #96]	; (800e5cc <protocol_s_error_info_printf+0x128>)
 800e56a:	617b      	str	r3, [r7, #20]
  case PROTOCOL_ERR_PROTOCOL_NOT_INIT:
 800e56c:	e007      	b.n	800e57e <protocol_s_error_info_printf+0xda>
    err_info = "PROTOCOL_ERR_PROTOCOL_NOT_INIT";
    break;
 800e56e:	4b18      	ldr	r3, [pc, #96]	; (800e5d0 <protocol_s_error_info_printf+0x12c>)
 800e570:	617b      	str	r3, [r7, #20]
  case PROTOCOL_ERR_SESSION_ERROR:
 800e572:	e004      	b.n	800e57e <protocol_s_error_info_printf+0xda>
    err_info = "PROTOCOL_ERR_SESSION_ERROR(Boardcast session can only be 0)";
    break;
 800e574:	4b17      	ldr	r3, [pc, #92]	; (800e5d4 <protocol_s_error_info_printf+0x130>)
 800e576:	617b      	str	r3, [r7, #20]
  case PROTOCOL_ERR_REGISTER_FAILED:
 800e578:	e001      	b.n	800e57e <protocol_s_error_info_printf+0xda>
    err_info = "PROTOCOL_ERR_REGISTER_FAILED";
    break;
 800e57a:	4b17      	ldr	r3, [pc, #92]	; (800e5d8 <protocol_s_error_info_printf+0x134>)
 800e57c:	617b      	str	r3, [r7, #20]
  default:
    err_info = "PROTOCOL_ERR_NOT_FOUND";
  }
  protocol_log_e("%s[%u].(File:%s,Line:%d)",
                 err_info, status, file, line);
 800e57e:	bf00      	nop

 800e580:	371c      	adds	r7, #28
 800e582:	46bd      	mov	sp, r7
 800e584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e588:	4770      	bx	lr
 800e58a:	bf00      	nop
 800e58c:	0800fae4 	.word	0x0800fae4
 800e590:	0800faf8 	.word	0x0800faf8
 800e594:	0800fb14 	.word	0x0800fb14
 800e598:	0800fb30 	.word	0x0800fb30
 800e59c:	0800fb50 	.word	0x0800fb50
 800e5a0:	0800fb6c 	.word	0x0800fb6c
 800e5a4:	0800fb88 	.word	0x0800fb88
 800e5a8:	0800fba8 	.word	0x0800fba8
 800e5ac:	0800fbc0 	.word	0x0800fbc0
 800e5b0:	0800fbdc 	.word	0x0800fbdc
 800e5b4:	0800fbfc 	.word	0x0800fbfc
 800e5b8:	0800fc1c 	.word	0x0800fc1c
 800e5bc:	0800fc34 	.word	0x0800fc34
 800e5c0:	0800fc54 	.word	0x0800fc54
 800e5c4:	0800fc70 	.word	0x0800fc70
 800e5c8:	0800fc90 	.word	0x0800fc90
 800e5cc:	0800fcb0 	.word	0x0800fcb0
 800e5d0:	0800fcd0 	.word	0x0800fcd0
 800e5d4:	0800fd0c 	.word	0x0800fd0c
 800e5d8:	0800fd2c 	.word	0x0800fd2c

0800e5dc <HAL_UART_RxCpltCallback>:

  return;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800e5dc:	b580      	push	{r7, lr}
 800e5de:	b082      	sub	sp, #8
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	6078      	str	r0, [r7, #4]
  if (huart == &huart3)
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	4a0a      	ldr	r2, [pc, #40]	; (800e610 <HAL_UART_RxCpltCallback+0x34>)
 800e5e8:	4293      	cmp	r3, r2
 800e5ea:	d104      	bne.n	800e5f6 <HAL_UART_RxCpltCallback+0x1a>
  {
    usart_rec_to_buff(&usart3_manage_obj, INTERRUPT_TYPE_DMA_ALL);
 800e5ec:	2102      	movs	r1, #2
 800e5ee:	4809      	ldr	r0, [pc, #36]	; (800e614 <HAL_UART_RxCpltCallback+0x38>)
 800e5f0:	f000 f86d 	bl	800e6ce <usart_rec_to_buff>
  else if (huart == &huart6)
  {
    usart_rec_to_buff(&usart6_manage_obj, INTERRUPT_TYPE_DMA_ALL);
  }

  return;
 800e5f4:	e008      	b.n	800e608 <HAL_UART_RxCpltCallback+0x2c>
  else if (huart == &huart6)
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	4a07      	ldr	r2, [pc, #28]	; (800e618 <HAL_UART_RxCpltCallback+0x3c>)
 800e5fa:	4293      	cmp	r3, r2
 800e5fc:	d104      	bne.n	800e608 <HAL_UART_RxCpltCallback+0x2c>
    usart_rec_to_buff(&usart6_manage_obj, INTERRUPT_TYPE_DMA_ALL);
 800e5fe:	2102      	movs	r1, #2
 800e600:	4806      	ldr	r0, [pc, #24]	; (800e61c <HAL_UART_RxCpltCallback+0x40>)
 800e602:	f000 f864 	bl	800e6ce <usart_rec_to_buff>
  return;
 800e606:	bf00      	nop
 800e608:	bf00      	nop
}
 800e60a:	3708      	adds	r7, #8
 800e60c:	46bd      	mov	sp, r7
 800e60e:	bd80      	pop	{r7, pc}
 800e610:	20000384 	.word	0x20000384
 800e614:	20011c34 	.word	0x20011c34
 800e618:	200003cc 	.word	0x200003cc
 800e61c:	20011c74 	.word	0x20011c74

0800e620 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e620:	b580      	push	{r7, lr}
 800e622:	b082      	sub	sp, #8
 800e624:	af00      	add	r7, sp, #0
 800e626:	6078      	str	r0, [r7, #4]
  if (huart == &huart3)
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	4a09      	ldr	r2, [pc, #36]	; (800e650 <HAL_UART_TxCpltCallback+0x30>)
 800e62c:	4293      	cmp	r3, r2
 800e62e:	d103      	bne.n	800e638 <HAL_UART_TxCpltCallback+0x18>
  {
    usart_transmit_hook(&usart3_manage_obj);
 800e630:	4808      	ldr	r0, [pc, #32]	; (800e654 <HAL_UART_TxCpltCallback+0x34>)
 800e632:	f000 f815 	bl	800e660 <usart_transmit_hook>
  else if (huart == &huart6)
  {
    usart_transmit_hook(&usart6_manage_obj);
  }

  return;
 800e636:	e007      	b.n	800e648 <HAL_UART_TxCpltCallback+0x28>
  else if (huart == &huart6)
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	4a07      	ldr	r2, [pc, #28]	; (800e658 <HAL_UART_TxCpltCallback+0x38>)
 800e63c:	4293      	cmp	r3, r2
 800e63e:	d103      	bne.n	800e648 <HAL_UART_TxCpltCallback+0x28>
    usart_transmit_hook(&usart6_manage_obj);
 800e640:	4806      	ldr	r0, [pc, #24]	; (800e65c <HAL_UART_TxCpltCallback+0x3c>)
 800e642:	f000 f80d 	bl	800e660 <usart_transmit_hook>
  return;
 800e646:	bf00      	nop
 800e648:	bf00      	nop
}
 800e64a:	3708      	adds	r7, #8
 800e64c:	46bd      	mov	sp, r7
 800e64e:	bd80      	pop	{r7, pc}
 800e650:	20000384 	.word	0x20000384
 800e654:	20011c34 	.word	0x20011c34
 800e658:	200003cc 	.word	0x200003cc
 800e65c:	20011c74 	.word	0x20011c74

0800e660 <usart_transmit_hook>:

  return ERR_NORAML;
}

static void usart_transmit_hook(usart_manage_obj_t *m_obj)
{
 800e660:	b580      	push	{r7, lr}
 800e662:	b084      	sub	sp, #16
 800e664:	af00      	add	r7, sp, #0
 800e666:	6078      	str	r0, [r7, #4]
  uint16_t fifo_data_num = 0;
 800e668:	2300      	movs	r3, #0
 800e66a:	81bb      	strh	r3, [r7, #12]
  uint16_t send_num = 0;
 800e66c:	2300      	movs	r3, #0
 800e66e:	81fb      	strh	r3, [r7, #14]

  fifo_data_num = m_obj->tx_fifo.used_num;
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e674:	81bb      	strh	r3, [r7, #12]

  if (fifo_data_num != 0)
 800e676:	89bb      	ldrh	r3, [r7, #12]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d020      	beq.n	800e6be <usart_transmit_hook+0x5e>
  {
    if (fifo_data_num < m_obj->tx_buffer_size)
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	8b9b      	ldrh	r3, [r3, #28]
 800e680:	89ba      	ldrh	r2, [r7, #12]
 800e682:	429a      	cmp	r2, r3
 800e684:	d202      	bcs.n	800e68c <usart_transmit_hook+0x2c>
    {
      send_num = fifo_data_num;
 800e686:	89bb      	ldrh	r3, [r7, #12]
 800e688:	81fb      	strh	r3, [r7, #14]
 800e68a:	e002      	b.n	800e692 <usart_transmit_hook+0x32>
    }
    else
    {
      send_num = m_obj->tx_buffer_size;
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	8b9b      	ldrh	r3, [r3, #28]
 800e690:	81fb      	strh	r3, [r7, #14]
    }
    fifo_s_gets(&(m_obj->tx_fifo), (char *)(m_obj->tx_buffer), send_num);
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	f103 0020 	add.w	r0, r3, #32
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	699b      	ldr	r3, [r3, #24]
 800e69c:	89fa      	ldrh	r2, [r7, #14]
 800e69e:	4619      	mov	r1, r3
 800e6a0:	f000 f9a8 	bl	800e9f4 <fifo_s_gets>
    m_obj->is_sending = 1;
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	2201      	movs	r2, #1
 800e6a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_UART_Transmit_DMA(m_obj->uart_h, m_obj->tx_buffer, send_num);
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	6818      	ldr	r0, [r3, #0]
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	699b      	ldr	r3, [r3, #24]
 800e6b4:	89fa      	ldrh	r2, [r7, #14]
 800e6b6:	4619      	mov	r1, r3
 800e6b8:	f7f7 fa44 	bl	8005b44 <HAL_UART_Transmit_DMA>
  }
  else
  {
    m_obj->is_sending = 0;
  }
  return;
 800e6bc:	e004      	b.n	800e6c8 <usart_transmit_hook+0x68>
    m_obj->is_sending = 0;
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	2200      	movs	r2, #0
 800e6c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  return;
 800e6c6:	bf00      	nop
}
 800e6c8:	3710      	adds	r7, #16
 800e6ca:	46bd      	mov	sp, r7
 800e6cc:	bd80      	pop	{r7, pc}

0800e6ce <usart_rec_to_buff>:

static void usart_rec_to_buff(usart_manage_obj_t *m_obj, interrput_type int_type)
{
 800e6ce:	b580      	push	{r7, lr}
 800e6d0:	b088      	sub	sp, #32
 800e6d2:	af00      	add	r7, sp, #0
 800e6d4:	6078      	str	r0, [r7, #4]
 800e6d6:	460b      	mov	r3, r1
 800e6d8:	70fb      	strb	r3, [r7, #3]
  uint16_t read_end_ptr = 0;
 800e6da:	2300      	movs	r3, #0
 800e6dc:	83fb      	strh	r3, [r7, #30]
  uint16_t read_length = 0;
 800e6de:	2300      	movs	r3, #0
 800e6e0:	83bb      	strh	r3, [r7, #28]
  uint16_t read_success_length = 0;
 800e6e2:	2300      	movs	r3, #0
 800e6e4:	837b      	strh	r3, [r7, #26]
  uint16_t read_start_ptr = m_obj->read_start_index;
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	8a1b      	ldrh	r3, [r3, #16]
 800e6ea:	833b      	strh	r3, [r7, #24]
  uint8_t *pdata = m_obj->rx_buffer;
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	68db      	ldr	r3, [r3, #12]
 800e6f0:	617b      	str	r3, [r7, #20]

  UNUSED(read_success_length);

  uint16_t buff_left = m_obj->dma_h->Instance->NDTR;
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	685b      	ldr	r3, [r3, #4]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	685b      	ldr	r3, [r3, #4]
 800e6fa:	827b      	strh	r3, [r7, #18]

  if (int_type == INTERRUPT_TYPE_UART)
 800e6fc:	78fb      	ldrb	r3, [r7, #3]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d104      	bne.n	800e70c <usart_rec_to_buff+0x3e>
  {
    read_end_ptr = m_obj->rx_buffer_size - buff_left;
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	891a      	ldrh	r2, [r3, #8]
 800e706:	8a7b      	ldrh	r3, [r7, #18]
 800e708:	1ad3      	subs	r3, r2, r3
 800e70a:	83fb      	strh	r3, [r7, #30]
  }

  if (int_type == INTERRUPT_TYPE_DMA_HALF)
 800e70c:	78fb      	ldrb	r3, [r7, #3]
 800e70e:	2b01      	cmp	r3, #1
 800e710:	d103      	bne.n	800e71a <usart_rec_to_buff+0x4c>
  {
    read_end_ptr = m_obj->rx_buffer_size / 2;
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	891b      	ldrh	r3, [r3, #8]
 800e716:	085b      	lsrs	r3, r3, #1
 800e718:	83fb      	strh	r3, [r7, #30]
  }

  if (int_type == INTERRUPT_TYPE_DMA_ALL)
 800e71a:	78fb      	ldrb	r3, [r7, #3]
 800e71c:	2b02      	cmp	r3, #2
 800e71e:	d102      	bne.n	800e726 <usart_rec_to_buff+0x58>
  {
    read_end_ptr = m_obj->rx_buffer_size;
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	891b      	ldrh	r3, [r3, #8]
 800e724:	83fb      	strh	r3, [r7, #30]
  }

  read_length = read_end_ptr - m_obj->read_start_index;
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	8a1b      	ldrh	r3, [r3, #16]
 800e72a:	8bfa      	ldrh	r2, [r7, #30]
 800e72c:	1ad3      	subs	r3, r2, r3
 800e72e:	83bb      	strh	r3, [r7, #28]

  if (m_obj->call_back_f != NULL)
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	695b      	ldr	r3, [r3, #20]
 800e734:	2b00      	cmp	r3, #0
 800e736:	d00b      	beq.n	800e750 <usart_rec_to_buff+0x82>
  {
    uint8_t *read_ptr = pdata + read_start_ptr;
 800e738:	8b3b      	ldrh	r3, [r7, #24]
 800e73a:	697a      	ldr	r2, [r7, #20]
 800e73c:	4413      	add	r3, r2
 800e73e:	60fb      	str	r3, [r7, #12]
    read_success_length = m_obj->call_back_f(read_ptr, read_length);
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	695b      	ldr	r3, [r3, #20]
 800e744:	8bba      	ldrh	r2, [r7, #28]
 800e746:	4611      	mov	r1, r2
 800e748:	68f8      	ldr	r0, [r7, #12]
 800e74a:	4798      	blx	r3
 800e74c:	4603      	mov	r3, r0
 800e74e:	837b      	strh	r3, [r7, #26]
  }

  m_obj->read_start_index = (m_obj->read_start_index + read_length) % (m_obj->rx_buffer_size);
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	8a1b      	ldrh	r3, [r3, #16]
 800e754:	461a      	mov	r2, r3
 800e756:	8bbb      	ldrh	r3, [r7, #28]
 800e758:	4413      	add	r3, r2
 800e75a:	687a      	ldr	r2, [r7, #4]
 800e75c:	8912      	ldrh	r2, [r2, #8]
 800e75e:	fb93 f1f2 	sdiv	r1, r3, r2
 800e762:	fb01 f202 	mul.w	r2, r1, r2
 800e766:	1a9b      	subs	r3, r3, r2
 800e768:	b29a      	uxth	r2, r3
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	821a      	strh	r2, [r3, #16]

  return;
 800e76e:	bf00      	nop
}
 800e770:	3720      	adds	r7, #32
 800e772:	46bd      	mov	sp, r7
 800e774:	bd80      	pop	{r7, pc}

0800e776 <fifo_s_init>:
//! \param  [in] uint_cnt is count of fifo elements.
//! \retval 0 if initialize successfully, otherwise return -1.
//
//******************************************************************************************
int fifo_s_init(fifo_s_t *p_fifo, void *p_base_addr, int uint_cnt)
{
 800e776:	b480      	push	{r7}
 800e778:	b085      	sub	sp, #20
 800e77a:	af00      	add	r7, sp, #0
 800e77c:	60f8      	str	r0, [r7, #12]
 800e77e:	60b9      	str	r1, [r7, #8]
 800e780:	607a      	str	r2, [r7, #4]
  ASSERT(p_fifo);
  ASSERT(p_base_addr);
  ASSERT(uint_cnt);

  //! Initialize FIFO Control Block.
  p_fifo->p_start_addr = (char *)p_base_addr;
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	68ba      	ldr	r2, [r7, #8]
 800e786:	601a      	str	r2, [r3, #0]
  p_fifo->p_end_addr = (char *)p_base_addr + uint_cnt - 1;
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	3b01      	subs	r3, #1
 800e78c:	68ba      	ldr	r2, [r7, #8]
 800e78e:	441a      	add	r2, r3
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	605a      	str	r2, [r3, #4]
  p_fifo->free_num = uint_cnt;
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	687a      	ldr	r2, [r7, #4]
 800e798:	609a      	str	r2, [r3, #8]
  p_fifo->used_num = 0;
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	2200      	movs	r2, #0
 800e79e:	60da      	str	r2, [r3, #12]
  p_fifo->p_read_addr = (char *)p_base_addr;
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	68ba      	ldr	r2, [r7, #8]
 800e7a4:	611a      	str	r2, [r3, #16]
  p_fifo->p_write_addr = (char *)p_base_addr;
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	68ba      	ldr	r2, [r7, #8]
 800e7aa:	615a      	str	r2, [r3, #20]

  return (0);
 800e7ac:	2300      	movs	r3, #0
}
 800e7ae:	4618      	mov	r0, r3
 800e7b0:	3714      	adds	r7, #20
 800e7b2:	46bd      	mov	sp, r7
 800e7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b8:	4770      	bx	lr

0800e7ba <fifo_s_puts>:
//! \param  [in]  the number of elements
//! \retval the number of really write data, otherwise return -1.
//
//******************************************************************************************
int fifo_s_puts(fifo_s_t *p_fifo, char *p_source, int len)
{
 800e7ba:	b590      	push	{r4, r7, lr}
 800e7bc:	b08b      	sub	sp, #44	; 0x2c
 800e7be:	af00      	add	r7, sp, #0
 800e7c0:	60f8      	str	r0, [r7, #12]
 800e7c2:	60b9      	str	r1, [r7, #8]
 800e7c4:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800e7c6:	f3ef 8310 	mrs	r3, PRIMASK
 800e7ca:	61bb      	str	r3, [r7, #24]
  return(result);
 800e7cc:	69bb      	ldr	r3, [r7, #24]
  int len_from_start;

  ASSERT(p_fifo);
  
  //Interrupt Off;
  cpu_sr = FIFO_GET_CPU_SR();
 800e7ce:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 800e7d0:	b672      	cpsid	i
}
 800e7d2:	bf00      	nop
  FIFO_ENTER_CRITICAL();

  if (NULL == p_source)
 800e7d4:	68bb      	ldr	r3, [r7, #8]
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d05e      	beq.n	800e898 <fifo_s_puts+0xde>
  {
      goto end;
  }

  if (0 == p_fifo->free_num)
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	689b      	ldr	r3, [r3, #8]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d05c      	beq.n	800e89c <fifo_s_puts+0xe2>
  {
      goto end;
  }

  if (p_fifo->p_write_addr > p_fifo->p_end_addr)
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	695a      	ldr	r2, [r3, #20]
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	685b      	ldr	r3, [r3, #4]
 800e7ea:	429a      	cmp	r2, r3
 800e7ec:	d903      	bls.n	800e7f6 <fifo_s_puts+0x3c>
    p_fifo->p_write_addr = p_fifo->p_start_addr;
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	681a      	ldr	r2, [r3, #0]
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	615a      	str	r2, [r3, #20]

  len = (len < p_fifo->free_num) ? len : p_fifo->free_num;
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	689b      	ldr	r3, [r3, #8]
 800e7fa:	687a      	ldr	r2, [r7, #4]
 800e7fc:	4293      	cmp	r3, r2
 800e7fe:	bfa8      	it	ge
 800e800:	4613      	movge	r3, r2
 800e802:	607b      	str	r3, [r7, #4]
  len_to_end = p_fifo->p_end_addr - p_fifo->p_write_addr + 1;
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	685a      	ldr	r2, [r3, #4]
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	695b      	ldr	r3, [r3, #20]
 800e80c:	1ad3      	subs	r3, r2, r3
 800e80e:	3301      	adds	r3, #1
 800e810:	627b      	str	r3, [r7, #36]	; 0x24

  if (len_to_end >= len) //no rollback
 800e812:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	429a      	cmp	r2, r3
 800e818:	db0f      	blt.n	800e83a <fifo_s_puts+0x80>
  {
    len_to_end = len;
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	627b      	str	r3, [r7, #36]	; 0x24
    memcpy(p_fifo->p_write_addr, p_source, len_to_end);
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	695b      	ldr	r3, [r3, #20]
 800e822:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e824:	68b9      	ldr	r1, [r7, #8]
 800e826:	4618      	mov	r0, r3
 800e828:	f001 f81a 	bl	800f860 <memcpy>
    p_fifo->p_write_addr += len_to_end;
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	695a      	ldr	r2, [r3, #20]
 800e830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e832:	441a      	add	r2, r3
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	615a      	str	r2, [r3, #20]
 800e838:	e019      	b.n	800e86e <fifo_s_puts+0xb4>
  }
  else //rollback
  {
    len_from_start = len - len_to_end;
 800e83a:	687a      	ldr	r2, [r7, #4]
 800e83c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e83e:	1ad3      	subs	r3, r2, r3
 800e840:	623b      	str	r3, [r7, #32]
    memcpy(p_fifo->p_write_addr, p_source, len_to_end);
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	695b      	ldr	r3, [r3, #20]
 800e846:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e848:	68b9      	ldr	r1, [r7, #8]
 800e84a:	4618      	mov	r0, r3
 800e84c:	f001 f808 	bl	800f860 <memcpy>
    memcpy(p_fifo->p_start_addr, p_source + len_to_end, len_from_start);
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	6818      	ldr	r0, [r3, #0]
 800e854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e856:	68ba      	ldr	r2, [r7, #8]
 800e858:	4413      	add	r3, r2
 800e85a:	6a3a      	ldr	r2, [r7, #32]
 800e85c:	4619      	mov	r1, r3
 800e85e:	f000 ffff 	bl	800f860 <memcpy>
    p_fifo->p_write_addr = p_fifo->p_start_addr + len_from_start;
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	681a      	ldr	r2, [r3, #0]
 800e866:	6a3b      	ldr	r3, [r7, #32]
 800e868:	441a      	add	r2, r3
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	615a      	str	r2, [r3, #20]
  }

  p_fifo->free_num -= len;
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	689a      	ldr	r2, [r3, #8]
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	1ad2      	subs	r2, r2, r3
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	609a      	str	r2, [r3, #8]
  p_fifo->used_num += len;
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	68da      	ldr	r2, [r3, #12]
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	441a      	add	r2, r3
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	60da      	str	r2, [r3, #12]
  retval = len;
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	61fb      	str	r3, [r7, #28]
 800e88a:	617c      	str	r4, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e88c:	697b      	ldr	r3, [r7, #20]
 800e88e:	f383 8810 	msr	PRIMASK, r3
}
 800e892:	bf00      	nop

  //Interrupt On
  FIFO_RESTORE_CPU_SR(cpu_sr);

  return retval;
 800e894:	69fb      	ldr	r3, [r7, #28]
 800e896:	e009      	b.n	800e8ac <fifo_s_puts+0xf2>
      goto end;
 800e898:	bf00      	nop
 800e89a:	e000      	b.n	800e89e <fifo_s_puts+0xe4>
      goto end;
 800e89c:	bf00      	nop
 800e89e:	613c      	str	r4, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e8a0:	693b      	ldr	r3, [r7, #16]
 800e8a2:	f383 8810 	msr	PRIMASK, r3
}
 800e8a6:	bf00      	nop
end:
  //Interrupt On
  FIFO_RESTORE_CPU_SR(cpu_sr);
  return (-1);
 800e8a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800e8ac:	4618      	mov	r0, r3
 800e8ae:	372c      	adds	r7, #44	; 0x2c
 800e8b0:	46bd      	mov	sp, r7
 800e8b2:	bd90      	pop	{r4, r7, pc}

0800e8b4 <fifo_s_puts_noprotect>:
//! \param  [in]  the number of elements
//! \retval the number of really write data, otherwise return -1.
//
//******************************************************************************************
int fifo_s_puts_noprotect(fifo_s_t *p_fifo, char *p_source, int len)
{
 800e8b4:	b580      	push	{r7, lr}
 800e8b6:	b088      	sub	sp, #32
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	60f8      	str	r0, [r7, #12]
 800e8bc:	60b9      	str	r1, [r7, #8]
 800e8be:	607a      	str	r2, [r7, #4]
  int len_to_end;
  int len_from_start;

  ASSERT(p_fifo);

  if (NULL == p_source)
 800e8c0:	68bb      	ldr	r3, [r7, #8]
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d102      	bne.n	800e8cc <fifo_s_puts_noprotect+0x18>
    return -1;
 800e8c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e8ca:	e05a      	b.n	800e982 <fifo_s_puts_noprotect+0xce>

  if (0 == p_fifo->free_num)
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	689b      	ldr	r3, [r3, #8]
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d101      	bne.n	800e8d8 <fifo_s_puts_noprotect+0x24>
    return 0;
 800e8d4:	2300      	movs	r3, #0
 800e8d6:	e054      	b.n	800e982 <fifo_s_puts_noprotect+0xce>

  if (p_fifo->p_write_addr > p_fifo->p_end_addr)
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	695a      	ldr	r2, [r3, #20]
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	685b      	ldr	r3, [r3, #4]
 800e8e0:	429a      	cmp	r2, r3
 800e8e2:	d903      	bls.n	800e8ec <fifo_s_puts_noprotect+0x38>
    p_fifo->p_write_addr = p_fifo->p_start_addr;
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	681a      	ldr	r2, [r3, #0]
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	615a      	str	r2, [r3, #20]

  len = (len < p_fifo->free_num) ? len : p_fifo->free_num;
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	689b      	ldr	r3, [r3, #8]
 800e8f0:	687a      	ldr	r2, [r7, #4]
 800e8f2:	4293      	cmp	r3, r2
 800e8f4:	bfa8      	it	ge
 800e8f6:	4613      	movge	r3, r2
 800e8f8:	607b      	str	r3, [r7, #4]
  len_to_end = p_fifo->p_end_addr - p_fifo->p_write_addr + 1;
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	685a      	ldr	r2, [r3, #4]
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	695b      	ldr	r3, [r3, #20]
 800e902:	1ad3      	subs	r3, r2, r3
 800e904:	3301      	adds	r3, #1
 800e906:	61fb      	str	r3, [r7, #28]

  if (len_to_end >= len) //no rollback
 800e908:	69fa      	ldr	r2, [r7, #28]
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	429a      	cmp	r2, r3
 800e90e:	db0f      	blt.n	800e930 <fifo_s_puts_noprotect+0x7c>
  {
    len_to_end = len;
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	61fb      	str	r3, [r7, #28]
    memcpy(p_fifo->p_write_addr, p_source, len_to_end);
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	695b      	ldr	r3, [r3, #20]
 800e918:	69fa      	ldr	r2, [r7, #28]
 800e91a:	68b9      	ldr	r1, [r7, #8]
 800e91c:	4618      	mov	r0, r3
 800e91e:	f000 ff9f 	bl	800f860 <memcpy>
    p_fifo->p_write_addr += len_to_end;
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	695a      	ldr	r2, [r3, #20]
 800e926:	69fb      	ldr	r3, [r7, #28]
 800e928:	441a      	add	r2, r3
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	615a      	str	r2, [r3, #20]
 800e92e:	e019      	b.n	800e964 <fifo_s_puts_noprotect+0xb0>
  }
  else //rollback
  {
    len_from_start = len - len_to_end;
 800e930:	687a      	ldr	r2, [r7, #4]
 800e932:	69fb      	ldr	r3, [r7, #28]
 800e934:	1ad3      	subs	r3, r2, r3
 800e936:	61bb      	str	r3, [r7, #24]
    memcpy(p_fifo->p_write_addr, p_source, len_to_end);
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	695b      	ldr	r3, [r3, #20]
 800e93c:	69fa      	ldr	r2, [r7, #28]
 800e93e:	68b9      	ldr	r1, [r7, #8]
 800e940:	4618      	mov	r0, r3
 800e942:	f000 ff8d 	bl	800f860 <memcpy>
    memcpy(p_fifo->p_start_addr, p_source + len_to_end, len_from_start);
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	6818      	ldr	r0, [r3, #0]
 800e94a:	69fb      	ldr	r3, [r7, #28]
 800e94c:	68ba      	ldr	r2, [r7, #8]
 800e94e:	4413      	add	r3, r2
 800e950:	69ba      	ldr	r2, [r7, #24]
 800e952:	4619      	mov	r1, r3
 800e954:	f000 ff84 	bl	800f860 <memcpy>
    p_fifo->p_write_addr = p_fifo->p_start_addr + len_from_start;
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	681a      	ldr	r2, [r3, #0]
 800e95c:	69bb      	ldr	r3, [r7, #24]
 800e95e:	441a      	add	r2, r3
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	615a      	str	r2, [r3, #20]
  }

  p_fifo->free_num -= len;
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	689a      	ldr	r2, [r3, #8]
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	1ad2      	subs	r2, r2, r3
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	609a      	str	r2, [r3, #8]
  p_fifo->used_num += len;
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	68da      	ldr	r2, [r3, #12]
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	441a      	add	r2, r3
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	60da      	str	r2, [r3, #12]
  retval = len;
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	617b      	str	r3, [r7, #20]

  return retval;
 800e980:	697b      	ldr	r3, [r7, #20]
}
 800e982:	4618      	mov	r0, r3
 800e984:	3720      	adds	r7, #32
 800e986:	46bd      	mov	sp, r7
 800e988:	bd80      	pop	{r7, pc}

0800e98a <fifo_s_get>:
//!
//! \retval the data element of FIFO.
//
//******************************************************************************************
char fifo_s_get(fifo_s_t *p_fifo)
{
 800e98a:	b490      	push	{r4, r7}
 800e98c:	b086      	sub	sp, #24
 800e98e:	af00      	add	r7, sp, #0
 800e990:	6078      	str	r0, [r7, #4]
  FIFO_CPU_SR_TYPE cpu_sr;
  char retval = 0;
 800e992:	2300      	movs	r3, #0
 800e994:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800e996:	f3ef 8310 	mrs	r3, PRIMASK
 800e99a:	613b      	str	r3, [r7, #16]
  return(result);
 800e99c:	693b      	ldr	r3, [r7, #16]

  //! Check input parameters.
  ASSERT(p_fifo);

  //Interrupt Off;
  cpu_sr = FIFO_GET_CPU_SR();
 800e99e:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 800e9a0:	b672      	cpsid	i
}
 800e9a2:	bf00      	nop
  FIFO_ENTER_CRITICAL();

  if (p_fifo->p_read_addr > p_fifo->p_end_addr)
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	691a      	ldr	r2, [r3, #16]
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	685b      	ldr	r3, [r3, #4]
 800e9ac:	429a      	cmp	r2, r3
 800e9ae:	d903      	bls.n	800e9b8 <fifo_s_get+0x2e>
    p_fifo->p_read_addr = p_fifo->p_start_addr;
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	681a      	ldr	r2, [r3, #0]
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	611a      	str	r2, [r3, #16]

  retval = *p_fifo->p_read_addr;
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	691b      	ldr	r3, [r3, #16]
 800e9bc:	781b      	ldrb	r3, [r3, #0]
 800e9be:	75fb      	strb	r3, [r7, #23]
  // Update information
  p_fifo->p_read_addr++;
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	691b      	ldr	r3, [r3, #16]
 800e9c4:	1c5a      	adds	r2, r3, #1
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	611a      	str	r2, [r3, #16]
  p_fifo->free_num++;
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	689b      	ldr	r3, [r3, #8]
 800e9ce:	1c5a      	adds	r2, r3, #1
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	609a      	str	r2, [r3, #8]
  p_fifo->used_num--;
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	68db      	ldr	r3, [r3, #12]
 800e9d8:	1e5a      	subs	r2, r3, #1
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	60da      	str	r2, [r3, #12]
 800e9de:	60fc      	str	r4, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	f383 8810 	msr	PRIMASK, r3
}
 800e9e6:	bf00      	nop
  //Interrupt On
  FIFO_RESTORE_CPU_SR(cpu_sr);
  return (retval);
 800e9e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800e9ea:	4618      	mov	r0, r3
 800e9ec:	3718      	adds	r7, #24
 800e9ee:	46bd      	mov	sp, r7
 800e9f0:	bc90      	pop	{r4, r7}
 800e9f2:	4770      	bx	lr

0800e9f4 <fifo_s_gets>:
//!
//! \retval the number of really read data.
//
//******************************************************************************************
int fifo_s_gets(fifo_s_t *p_fifo, char *p_dest, int len)
{
 800e9f4:	b590      	push	{r4, r7, lr}
 800e9f6:	b08b      	sub	sp, #44	; 0x2c
 800e9f8:	af00      	add	r7, sp, #0
 800e9fa:	60f8      	str	r0, [r7, #12]
 800e9fc:	60b9      	str	r1, [r7, #8]
 800e9fe:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800ea00:	f3ef 8310 	mrs	r3, PRIMASK
 800ea04:	61bb      	str	r3, [r7, #24]
  return(result);
 800ea06:	69bb      	ldr	r3, [r7, #24]
  int len_from_start;

  ASSERT(p_fifo);

  //Interrupt Off;
  cpu_sr = FIFO_GET_CPU_SR();
 800ea08:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 800ea0a:	b672      	cpsid	i
}
 800ea0c:	bf00      	nop
  FIFO_ENTER_CRITICAL();

  if (NULL == p_dest)
 800ea0e:	68bb      	ldr	r3, [r7, #8]
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d05e      	beq.n	800ead2 <fifo_s_gets+0xde>
  {
    goto end;
  }

  if (0 == p_fifo->used_num)
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	68db      	ldr	r3, [r3, #12]
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d05c      	beq.n	800ead6 <fifo_s_gets+0xe2>
  {
    goto end;
  }

  if (p_fifo->p_read_addr > p_fifo->p_end_addr)
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	691a      	ldr	r2, [r3, #16]
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	685b      	ldr	r3, [r3, #4]
 800ea24:	429a      	cmp	r2, r3
 800ea26:	d903      	bls.n	800ea30 <fifo_s_gets+0x3c>
    p_fifo->p_read_addr = p_fifo->p_start_addr;
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	681a      	ldr	r2, [r3, #0]
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	611a      	str	r2, [r3, #16]

  len = (len < p_fifo->used_num) ? len : p_fifo->used_num;
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	68db      	ldr	r3, [r3, #12]
 800ea34:	687a      	ldr	r2, [r7, #4]
 800ea36:	4293      	cmp	r3, r2
 800ea38:	bfa8      	it	ge
 800ea3a:	4613      	movge	r3, r2
 800ea3c:	607b      	str	r3, [r7, #4]
  len_to_end = p_fifo->p_end_addr - p_fifo->p_read_addr + 1;
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	685a      	ldr	r2, [r3, #4]
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	691b      	ldr	r3, [r3, #16]
 800ea46:	1ad3      	subs	r3, r2, r3
 800ea48:	3301      	adds	r3, #1
 800ea4a:	627b      	str	r3, [r7, #36]	; 0x24

  if (len_to_end >= len) //no rollback
 800ea4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	429a      	cmp	r2, r3
 800ea52:	db0f      	blt.n	800ea74 <fifo_s_gets+0x80>
  {
    len_to_end = len;
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	627b      	str	r3, [r7, #36]	; 0x24
    memcpy(p_dest, p_fifo->p_read_addr, len_to_end);
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	691b      	ldr	r3, [r3, #16]
 800ea5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea5e:	4619      	mov	r1, r3
 800ea60:	68b8      	ldr	r0, [r7, #8]
 800ea62:	f000 fefd 	bl	800f860 <memcpy>
    p_fifo->p_read_addr += len_to_end;
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	691a      	ldr	r2, [r3, #16]
 800ea6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea6c:	441a      	add	r2, r3
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	611a      	str	r2, [r3, #16]
 800ea72:	e019      	b.n	800eaa8 <fifo_s_gets+0xb4>
  }
  else //rollback
  {
    len_from_start = len - len_to_end;
 800ea74:	687a      	ldr	r2, [r7, #4]
 800ea76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea78:	1ad3      	subs	r3, r2, r3
 800ea7a:	623b      	str	r3, [r7, #32]
    memcpy(p_dest, p_fifo->p_read_addr, len_to_end);
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	691b      	ldr	r3, [r3, #16]
 800ea80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea82:	4619      	mov	r1, r3
 800ea84:	68b8      	ldr	r0, [r7, #8]
 800ea86:	f000 feeb 	bl	800f860 <memcpy>
    memcpy(p_dest + len_to_end, p_fifo->p_start_addr, len_from_start);
 800ea8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea8c:	68ba      	ldr	r2, [r7, #8]
 800ea8e:	18d0      	adds	r0, r2, r3
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	6a3a      	ldr	r2, [r7, #32]
 800ea96:	4619      	mov	r1, r3
 800ea98:	f000 fee2 	bl	800f860 <memcpy>
    p_fifo->p_read_addr = p_fifo->p_start_addr + len_from_start;
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	681a      	ldr	r2, [r3, #0]
 800eaa0:	6a3b      	ldr	r3, [r7, #32]
 800eaa2:	441a      	add	r2, r3
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	611a      	str	r2, [r3, #16]
  }

  p_fifo->free_num += len;
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	689a      	ldr	r2, [r3, #8]
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	441a      	add	r2, r3
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	609a      	str	r2, [r3, #8]
  p_fifo->used_num -= len;
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	68da      	ldr	r2, [r3, #12]
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	1ad2      	subs	r2, r2, r3
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	60da      	str	r2, [r3, #12]
  retval = len;
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	61fb      	str	r3, [r7, #28]
 800eac4:	617c      	str	r4, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eac6:	697b      	ldr	r3, [r7, #20]
 800eac8:	f383 8810 	msr	PRIMASK, r3
}
 800eacc:	bf00      	nop
  //Interrupt On
  FIFO_RESTORE_CPU_SR(cpu_sr);

  return retval;
 800eace:	69fb      	ldr	r3, [r7, #28]
 800ead0:	e009      	b.n	800eae6 <fifo_s_gets+0xf2>
    goto end;
 800ead2:	bf00      	nop
 800ead4:	e000      	b.n	800ead8 <fifo_s_gets+0xe4>
    goto end;
 800ead6:	bf00      	nop
 800ead8:	613c      	str	r4, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eada:	693b      	ldr	r3, [r7, #16]
 800eadc:	f383 8810 	msr	PRIMASK, r3
}
 800eae0:	bf00      	nop
end:
  //Interrupt On
  FIFO_RESTORE_CPU_SR(cpu_sr);
  return (-1);
 800eae2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800eae6:	4618      	mov	r0, r3
 800eae8:	372c      	adds	r7, #44	; 0x2c
 800eaea:	46bd      	mov	sp, r7
 800eaec:	bd90      	pop	{r4, r7, pc}

0800eaee <fifo_s_gets_noprotect>:
//!
//! \retval the number of really read data.
//
//******************************************************************************************
int fifo_s_gets_noprotect(fifo_s_t *p_fifo, char *p_dest, int len)
{
 800eaee:	b580      	push	{r7, lr}
 800eaf0:	b088      	sub	sp, #32
 800eaf2:	af00      	add	r7, sp, #0
 800eaf4:	60f8      	str	r0, [r7, #12]
 800eaf6:	60b9      	str	r1, [r7, #8]
 800eaf8:	607a      	str	r2, [r7, #4]
  int len_to_end;
  int len_from_start;

  ASSERT(p_fifo);

  if (NULL == p_dest)
 800eafa:	68bb      	ldr	r3, [r7, #8]
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d102      	bne.n	800eb06 <fifo_s_gets_noprotect+0x18>
    return -1;
 800eb00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eb04:	e05a      	b.n	800ebbc <fifo_s_gets_noprotect+0xce>

  if (0 == p_fifo->used_num)
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	68db      	ldr	r3, [r3, #12]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d101      	bne.n	800eb12 <fifo_s_gets_noprotect+0x24>
    return 0;
 800eb0e:	2300      	movs	r3, #0
 800eb10:	e054      	b.n	800ebbc <fifo_s_gets_noprotect+0xce>

  if (p_fifo->p_read_addr > p_fifo->p_end_addr)
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	691a      	ldr	r2, [r3, #16]
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	685b      	ldr	r3, [r3, #4]
 800eb1a:	429a      	cmp	r2, r3
 800eb1c:	d903      	bls.n	800eb26 <fifo_s_gets_noprotect+0x38>
    p_fifo->p_read_addr = p_fifo->p_start_addr;
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	681a      	ldr	r2, [r3, #0]
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	611a      	str	r2, [r3, #16]

  len = (len < p_fifo->used_num) ? len : p_fifo->used_num;
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	68db      	ldr	r3, [r3, #12]
 800eb2a:	687a      	ldr	r2, [r7, #4]
 800eb2c:	4293      	cmp	r3, r2
 800eb2e:	bfa8      	it	ge
 800eb30:	4613      	movge	r3, r2
 800eb32:	607b      	str	r3, [r7, #4]
  len_to_end = p_fifo->p_end_addr - p_fifo->p_read_addr + 1;
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	685a      	ldr	r2, [r3, #4]
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	691b      	ldr	r3, [r3, #16]
 800eb3c:	1ad3      	subs	r3, r2, r3
 800eb3e:	3301      	adds	r3, #1
 800eb40:	61fb      	str	r3, [r7, #28]

  if (len_to_end >= len) //no rollback
 800eb42:	69fa      	ldr	r2, [r7, #28]
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	429a      	cmp	r2, r3
 800eb48:	db0f      	blt.n	800eb6a <fifo_s_gets_noprotect+0x7c>
  {
    len_to_end = len;
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	61fb      	str	r3, [r7, #28]
    memcpy(p_dest, p_fifo->p_read_addr, len_to_end);
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	691b      	ldr	r3, [r3, #16]
 800eb52:	69fa      	ldr	r2, [r7, #28]
 800eb54:	4619      	mov	r1, r3
 800eb56:	68b8      	ldr	r0, [r7, #8]
 800eb58:	f000 fe82 	bl	800f860 <memcpy>
    p_fifo->p_read_addr += len_to_end;
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	691a      	ldr	r2, [r3, #16]
 800eb60:	69fb      	ldr	r3, [r7, #28]
 800eb62:	441a      	add	r2, r3
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	611a      	str	r2, [r3, #16]
 800eb68:	e019      	b.n	800eb9e <fifo_s_gets_noprotect+0xb0>
  }
  else //rollback
  {
    len_from_start = len - len_to_end;
 800eb6a:	687a      	ldr	r2, [r7, #4]
 800eb6c:	69fb      	ldr	r3, [r7, #28]
 800eb6e:	1ad3      	subs	r3, r2, r3
 800eb70:	61bb      	str	r3, [r7, #24]
    memcpy(p_dest, p_fifo->p_read_addr, len_to_end);
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	691b      	ldr	r3, [r3, #16]
 800eb76:	69fa      	ldr	r2, [r7, #28]
 800eb78:	4619      	mov	r1, r3
 800eb7a:	68b8      	ldr	r0, [r7, #8]
 800eb7c:	f000 fe70 	bl	800f860 <memcpy>
    memcpy(p_dest + len_to_end, p_fifo->p_start_addr, len_from_start);
 800eb80:	69fb      	ldr	r3, [r7, #28]
 800eb82:	68ba      	ldr	r2, [r7, #8]
 800eb84:	18d0      	adds	r0, r2, r3
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	69ba      	ldr	r2, [r7, #24]
 800eb8c:	4619      	mov	r1, r3
 800eb8e:	f000 fe67 	bl	800f860 <memcpy>
    p_fifo->p_read_addr = p_fifo->p_start_addr + len_from_start;
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	681a      	ldr	r2, [r3, #0]
 800eb96:	69bb      	ldr	r3, [r7, #24]
 800eb98:	441a      	add	r2, r3
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	611a      	str	r2, [r3, #16]
  }

  p_fifo->free_num += len;
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	689a      	ldr	r2, [r3, #8]
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	441a      	add	r2, r3
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	609a      	str	r2, [r3, #8]
  p_fifo->used_num -= len;
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	68da      	ldr	r2, [r3, #12]
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	1ad2      	subs	r2, r2, r3
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	60da      	str	r2, [r3, #12]
  retval = len;
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	617b      	str	r3, [r7, #20]

  return retval;
 800ebba:	697b      	ldr	r3, [r7, #20]
}
 800ebbc:	4618      	mov	r0, r3
 800ebbe:	3720      	adds	r7, #32
 800ebc0:	46bd      	mov	sp, r7
 800ebc2:	bd80      	pop	{r7, pc}

0800ebc4 <fifo_s_preread>:
//!
//! \retval the data element of FIFO.
//
//******************************************************************************************
char fifo_s_preread(fifo_s_t *p_fifo, int offset)
{
 800ebc4:	b480      	push	{r7}
 800ebc6:	b085      	sub	sp, #20
 800ebc8:	af00      	add	r7, sp, #0
 800ebca:	6078      	str	r0, [r7, #4]
 800ebcc:	6039      	str	r1, [r7, #0]
  char *tmp_read_addr;

  //! Check input parameters.
  ASSERT(p_fifo);

  if (offset > p_fifo->used_num)
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	68db      	ldr	r3, [r3, #12]
 800ebd2:	683a      	ldr	r2, [r7, #0]
 800ebd4:	429a      	cmp	r2, r3
 800ebd6:	dd01      	ble.n	800ebdc <fifo_s_preread+0x18>
  {
    return 0;
 800ebd8:	2300      	movs	r3, #0
 800ebda:	e014      	b.n	800ec06 <fifo_s_preread+0x42>
  }
  else
  {
    // Move Read Pointer to right position
    tmp_read_addr = p_fifo->p_read_addr + offset;
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	691a      	ldr	r2, [r3, #16]
 800ebe0:	683b      	ldr	r3, [r7, #0]
 800ebe2:	4413      	add	r3, r2
 800ebe4:	60fb      	str	r3, [r7, #12]
    if (tmp_read_addr > p_fifo->p_end_addr)
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	685b      	ldr	r3, [r3, #4]
 800ebea:	68fa      	ldr	r2, [r7, #12]
 800ebec:	429a      	cmp	r2, r3
 800ebee:	d908      	bls.n	800ec02 <fifo_s_preread+0x3e>
      tmp_read_addr = tmp_read_addr - p_fifo->p_end_addr + p_fifo->p_start_addr - 1;
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	681a      	ldr	r2, [r3, #0]
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	685b      	ldr	r3, [r3, #4]
 800ebf8:	68f9      	ldr	r1, [r7, #12]
 800ebfa:	1acb      	subs	r3, r1, r3
 800ebfc:	3b01      	subs	r3, #1
 800ebfe:	4413      	add	r3, r2
 800ec00:	60fb      	str	r3, [r7, #12]

    return *tmp_read_addr;
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ec06:	4618      	mov	r0, r3
 800ec08:	3714      	adds	r7, #20
 800ec0a:	46bd      	mov	sp, r7
 800ec0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec10:	4770      	bx	lr

0800ec12 <fifo_s_prereads>:
 *
 *
 *
 */
int fifo_s_prereads(fifo_s_t *p_fifo, char *p_dest, int offset, int len)
{
 800ec12:	b590      	push	{r4, r7, lr}
 800ec14:	b08d      	sub	sp, #52	; 0x34
 800ec16:	af00      	add	r7, sp, #0
 800ec18:	60f8      	str	r0, [r7, #12]
 800ec1a:	60b9      	str	r1, [r7, #8]
 800ec1c:	607a      	str	r2, [r7, #4]
 800ec1e:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800ec20:	f3ef 8310 	mrs	r3, PRIMASK
 800ec24:	61fb      	str	r3, [r7, #28]
  return(result);
 800ec26:	69fb      	ldr	r3, [r7, #28]
  int len_from_start;

  ASSERT(p_fifo);

  //Interrupt Off;
  cpu_sr = FIFO_GET_CPU_SR();
 800ec28:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 800ec2a:	b672      	cpsid	i
}
 800ec2c:	bf00      	nop
  FIFO_ENTER_CRITICAL();

  if (NULL == p_dest)
 800ec2e:	68bb      	ldr	r3, [r7, #8]
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d053      	beq.n	800ecdc <fifo_s_prereads+0xca>
    goto end;

  if (0 == p_fifo->used_num)
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	68db      	ldr	r3, [r3, #12]
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d051      	beq.n	800ece0 <fifo_s_prereads+0xce>
    goto end;

  if (offset >= p_fifo->used_num)
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	68db      	ldr	r3, [r3, #12]
 800ec40:	687a      	ldr	r2, [r7, #4]
 800ec42:	429a      	cmp	r2, r3
 800ec44:	da4e      	bge.n	800ece4 <fifo_s_prereads+0xd2>
    goto end;

  tmp_read_addr = p_fifo->p_read_addr + offset;
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	691a      	ldr	r2, [r3, #16]
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	4413      	add	r3, r2
 800ec4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (tmp_read_addr > p_fifo->p_end_addr)
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	685b      	ldr	r3, [r3, #4]
 800ec54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ec56:	429a      	cmp	r2, r3
 800ec58:	d908      	bls.n	800ec6c <fifo_s_prereads+0x5a>
    tmp_read_addr = tmp_read_addr - p_fifo->p_end_addr + p_fifo->p_start_addr - 1;
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	681a      	ldr	r2, [r3, #0]
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	685b      	ldr	r3, [r3, #4]
 800ec62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ec64:	1acb      	subs	r3, r1, r3
 800ec66:	3b01      	subs	r3, #1
 800ec68:	4413      	add	r3, r2
 800ec6a:	62fb      	str	r3, [r7, #44]	; 0x2c

  len = (len < (p_fifo->used_num - offset)) ? len : (p_fifo->used_num - offset);
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	68da      	ldr	r2, [r3, #12]
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	1ad3      	subs	r3, r2, r3
 800ec74:	683a      	ldr	r2, [r7, #0]
 800ec76:	4293      	cmp	r3, r2
 800ec78:	bfa8      	it	ge
 800ec7a:	4613      	movge	r3, r2
 800ec7c:	603b      	str	r3, [r7, #0]
  len_to_end = p_fifo->p_end_addr - tmp_read_addr + 1;
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	685a      	ldr	r2, [r3, #4]
 800ec82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec84:	1ad3      	subs	r3, r2, r3
 800ec86:	3301      	adds	r3, #1
 800ec88:	62bb      	str	r3, [r7, #40]	; 0x28

  if (len_to_end >= len) //no rollback
 800ec8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ec8c:	683b      	ldr	r3, [r7, #0]
 800ec8e:	429a      	cmp	r2, r3
 800ec90:	db08      	blt.n	800eca4 <fifo_s_prereads+0x92>
  {
    len_to_end = len;
 800ec92:	683b      	ldr	r3, [r7, #0]
 800ec94:	62bb      	str	r3, [r7, #40]	; 0x28
    memcpy(p_dest, tmp_read_addr, len_to_end);
 800ec96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec98:	461a      	mov	r2, r3
 800ec9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ec9c:	68b8      	ldr	r0, [r7, #8]
 800ec9e:	f000 fddf 	bl	800f860 <memcpy>
 800eca2:	e012      	b.n	800ecca <fifo_s_prereads+0xb8>
  }
  else //rollback
  {
    len_from_start = len - len_to_end;
 800eca4:	683a      	ldr	r2, [r7, #0]
 800eca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eca8:	1ad3      	subs	r3, r2, r3
 800ecaa:	627b      	str	r3, [r7, #36]	; 0x24
    memcpy(p_dest, tmp_read_addr, len_to_end);
 800ecac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecae:	461a      	mov	r2, r3
 800ecb0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ecb2:	68b8      	ldr	r0, [r7, #8]
 800ecb4:	f000 fdd4 	bl	800f860 <memcpy>
    memcpy(p_dest + len_to_end, p_fifo->p_start_addr, len_from_start);
 800ecb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecba:	68ba      	ldr	r2, [r7, #8]
 800ecbc:	18d0      	adds	r0, r2, r3
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ecc4:	4619      	mov	r1, r3
 800ecc6:	f000 fdcb 	bl	800f860 <memcpy>
  }

  retval = len;
 800ecca:	683b      	ldr	r3, [r7, #0]
 800eccc:	623b      	str	r3, [r7, #32]
 800ecce:	61bc      	str	r4, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ecd0:	69bb      	ldr	r3, [r7, #24]
 800ecd2:	f383 8810 	msr	PRIMASK, r3
}
 800ecd6:	bf00      	nop
  //Interrupt On
  FIFO_RESTORE_CPU_SR(cpu_sr);

  return retval;
 800ecd8:	6a3b      	ldr	r3, [r7, #32]
 800ecda:	e00b      	b.n	800ecf4 <fifo_s_prereads+0xe2>
    goto end;
 800ecdc:	bf00      	nop
 800ecde:	e002      	b.n	800ece6 <fifo_s_prereads+0xd4>
    goto end;
 800ece0:	bf00      	nop
 800ece2:	e000      	b.n	800ece6 <fifo_s_prereads+0xd4>
    goto end;
 800ece4:	bf00      	nop
 800ece6:	617c      	str	r4, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ece8:	697b      	ldr	r3, [r7, #20]
 800ecea:	f383 8810 	msr	PRIMASK, r3
}
 800ecee:	bf00      	nop
end:
  //Interrupt On
  FIFO_RESTORE_CPU_SR(cpu_sr);
  return (-1);
 800ecf0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800ecf4:	4618      	mov	r0, r3
 800ecf6:	3734      	adds	r7, #52	; 0x34
 800ecf8:	46bd      	mov	sp, r7
 800ecfa:	bd90      	pop	{r4, r7, pc}

0800ecfc <fifo_s_isempty>:
//! \retval - None-zero(true) if empty.
//!         - Zero(false) if not empty.
//
//******************************************************************************************
char fifo_s_isempty(fifo_s_t *p_fifo)
{
 800ecfc:	b480      	push	{r7}
 800ecfe:	b083      	sub	sp, #12
 800ed00:	af00      	add	r7, sp, #0
 800ed02:	6078      	str	r0, [r7, #4]
  //! Check input parameter.
  ASSERT(p_fifo);
  return (p_fifo->used_num ? 0 : 1);
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	68db      	ldr	r3, [r3, #12]
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	bf0c      	ite	eq
 800ed0c:	2301      	moveq	r3, #1
 800ed0e:	2300      	movne	r3, #0
 800ed10:	b2db      	uxtb	r3, r3
}
 800ed12:	4618      	mov	r0, r3
 800ed14:	370c      	adds	r7, #12
 800ed16:	46bd      	mov	sp, r7
 800ed18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed1c:	4770      	bx	lr
	...

0800ed20 <heap_malloc>:
static uint32_t block_allocated_bit = 0;

/*-----------------------------------------------------------*/

void *heap_malloc(uint32_t wanted_size)
{
 800ed20:	b580      	push	{r7, lr}
 800ed22:	b088      	sub	sp, #32
 800ed24:	af00      	add	r7, sp, #0
 800ed26:	6078      	str	r0, [r7, #4]
  block_link_t *block, *prev_block, *new_block;
  void *reval = NULL;
 800ed28:	2300      	movs	r3, #0
 800ed2a:	617b      	str	r3, [r7, #20]

  if (mutex_init == 0)
 800ed2c:	4b4a      	ldr	r3, [pc, #296]	; (800ee58 <heap_malloc+0x138>)
 800ed2e:	781b      	ldrb	r3, [r3, #0]
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d102      	bne.n	800ed3a <heap_malloc+0x1a>
  {
    mutex_init = 1;
 800ed34:	4b48      	ldr	r3, [pc, #288]	; (800ee58 <heap_malloc+0x138>)
 800ed36:	2201      	movs	r2, #1
 800ed38:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800ed3a:	f3ef 8310 	mrs	r3, PRIMASK
 800ed3e:	60fb      	str	r3, [r7, #12]
  return(result);
 800ed40:	68fb      	ldr	r3, [r7, #12]
    MUTEX_INIT(mem_mutex);
  }

  MUTEX_LOCK(mem_mutex);
 800ed42:	4a46      	ldr	r2, [pc, #280]	; (800ee5c <heap_malloc+0x13c>)
 800ed44:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800ed46:	b672      	cpsid	i
}
 800ed48:	bf00      	nop
  {
    /* If this is the first call to malloc then the heap will require
        initialisation to setup the list of free blocks. */
    if (end == NULL)
 800ed4a:	4b45      	ldr	r3, [pc, #276]	; (800ee60 <heap_malloc+0x140>)
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d101      	bne.n	800ed56 <heap_malloc+0x36>
    {
      heap_init();
 800ed52:	f000 f8d5 	bl	800ef00 <heap_init>

    /* Check the requested block size is not so large that the top bit is
        set.  The top bit of the block size member of the block_link_t structure
        is used to determine who owns the block - the application or the
        kernel, so it must be free. */
    if ((wanted_size & block_allocated_bit) == 0)
 800ed56:	4b43      	ldr	r3, [pc, #268]	; (800ee64 <heap_malloc+0x144>)
 800ed58:	681a      	ldr	r2, [r3, #0]
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	4013      	ands	r3, r2
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d16d      	bne.n	800ee3e <heap_malloc+0x11e>
    {
      /* The wanted size is increased so it can contain a block_link_t
            structure in addition to the requested amount of bytes. */
      if (wanted_size > 0)
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d00d      	beq.n	800ed84 <heap_malloc+0x64>
      {
        wanted_size += STRUCT_SIZE;
 800ed68:	2208      	movs	r2, #8
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	4413      	add	r3, r2
 800ed6e:	607b      	str	r3, [r7, #4]

        /* Ensure that blocks are always aligned to the required number
                of bytes. */
        if ((wanted_size & BYTE_ALIGNMENT_MASK) != 0x00)
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	f003 0307 	and.w	r3, r3, #7
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d004      	beq.n	800ed84 <heap_malloc+0x64>
        {
          /* Byte alignment required. */
          wanted_size += (BYTE_ALIGNMENT - (wanted_size & BYTE_ALIGNMENT_MASK));
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	f023 0307 	bic.w	r3, r3, #7
 800ed80:	3308      	adds	r3, #8
 800ed82:	607b      	str	r3, [r7, #4]
          HEAP_ASSERT((wanted_size & BYTE_ALIGNMENT_MASK) == 0);
        }
      }

      if ((wanted_size > 0) && (wanted_size <= free_bytes_remain))
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d059      	beq.n	800ee3e <heap_malloc+0x11e>
 800ed8a:	4b37      	ldr	r3, [pc, #220]	; (800ee68 <heap_malloc+0x148>)
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	687a      	ldr	r2, [r7, #4]
 800ed90:	429a      	cmp	r2, r3
 800ed92:	d854      	bhi.n	800ee3e <heap_malloc+0x11e>
      {
        /* Traverse the list from the start    (lowest address) block until
                one    of adequate size is found. */
        prev_block = &start;
 800ed94:	4b35      	ldr	r3, [pc, #212]	; (800ee6c <heap_malloc+0x14c>)
 800ed96:	61bb      	str	r3, [r7, #24]
        block = start.next_free;
 800ed98:	4b34      	ldr	r3, [pc, #208]	; (800ee6c <heap_malloc+0x14c>)
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	61fb      	str	r3, [r7, #28]
        while ((block->block_size < wanted_size) && (block->next_free != NULL))
 800ed9e:	e004      	b.n	800edaa <heap_malloc+0x8a>
        {
          prev_block = block;
 800eda0:	69fb      	ldr	r3, [r7, #28]
 800eda2:	61bb      	str	r3, [r7, #24]
          block = block->next_free;
 800eda4:	69fb      	ldr	r3, [r7, #28]
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	61fb      	str	r3, [r7, #28]
        while ((block->block_size < wanted_size) && (block->next_free != NULL))
 800edaa:	69fb      	ldr	r3, [r7, #28]
 800edac:	685b      	ldr	r3, [r3, #4]
 800edae:	687a      	ldr	r2, [r7, #4]
 800edb0:	429a      	cmp	r2, r3
 800edb2:	d903      	bls.n	800edbc <heap_malloc+0x9c>
 800edb4:	69fb      	ldr	r3, [r7, #28]
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d1f1      	bne.n	800eda0 <heap_malloc+0x80>
        }

        /* If the end marker was reached then a block of adequate size
                was    not found. */
        if (block != end)
 800edbc:	4b28      	ldr	r3, [pc, #160]	; (800ee60 <heap_malloc+0x140>)
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	69fa      	ldr	r2, [r7, #28]
 800edc2:	429a      	cmp	r2, r3
 800edc4:	d03b      	beq.n	800ee3e <heap_malloc+0x11e>
        {
          /* Return the memory space pointed to - jumping over the
                    block_link_t structure at its start. */
          reval = (void *)(((uint8_t *)prev_block->next_free) + STRUCT_SIZE);
 800edc6:	69bb      	ldr	r3, [r7, #24]
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	2208      	movs	r2, #8
 800edcc:	4413      	add	r3, r2
 800edce:	617b      	str	r3, [r7, #20]

          /* This block is being returned for use so must be taken out
                    of the list of free blocks. */
          prev_block->next_free = block->next_free;
 800edd0:	69fb      	ldr	r3, [r7, #28]
 800edd2:	681a      	ldr	r2, [r3, #0]
 800edd4:	69bb      	ldr	r3, [r7, #24]
 800edd6:	601a      	str	r2, [r3, #0]

          /* If the block is larger than required it can be split into
                    two. */
          if ((block->block_size - wanted_size) > MINIMUM_BLOCK_SIZE)
 800edd8:	69fb      	ldr	r3, [r7, #28]
 800edda:	685a      	ldr	r2, [r3, #4]
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	1ad2      	subs	r2, r2, r3
 800ede0:	2308      	movs	r3, #8
 800ede2:	005b      	lsls	r3, r3, #1
 800ede4:	429a      	cmp	r2, r3
 800ede6:	d90f      	bls.n	800ee08 <heap_malloc+0xe8>
          {
            /* This block is to be split into two.  Create a new
                        block following the number of bytes requested. The void
                        cast is used to prevent byte alignment warnings from the
                        compiler. */
            new_block = (void *)(((uint8_t *)block) + wanted_size);
 800ede8:	69fa      	ldr	r2, [r7, #28]
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	4413      	add	r3, r2
 800edee:	613b      	str	r3, [r7, #16]
            HEAP_ASSERT((((uint32_t)new_block) & BYTE_ALIGNMENT_MASK) == 0);

            /* Calculate the sizes of two blocks split from the
                        single block. */
            new_block->block_size = block->block_size - wanted_size;
 800edf0:	69fb      	ldr	r3, [r7, #28]
 800edf2:	685a      	ldr	r2, [r3, #4]
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	1ad2      	subs	r2, r2, r3
 800edf8:	693b      	ldr	r3, [r7, #16]
 800edfa:	605a      	str	r2, [r3, #4]
            block->block_size = wanted_size;
 800edfc:	69fb      	ldr	r3, [r7, #28]
 800edfe:	687a      	ldr	r2, [r7, #4]
 800ee00:	605a      	str	r2, [r3, #4]

            /* Insert the new block into the list of free blocks. */
            insert_into_free_list(new_block);
 800ee02:	6938      	ldr	r0, [r7, #16]
 800ee04:	f000 f8de 	bl	800efc4 <insert_into_free_list>
          }

          free_bytes_remain -= block->block_size;
 800ee08:	4b17      	ldr	r3, [pc, #92]	; (800ee68 <heap_malloc+0x148>)
 800ee0a:	681a      	ldr	r2, [r3, #0]
 800ee0c:	69fb      	ldr	r3, [r7, #28]
 800ee0e:	685b      	ldr	r3, [r3, #4]
 800ee10:	1ad3      	subs	r3, r2, r3
 800ee12:	4a15      	ldr	r2, [pc, #84]	; (800ee68 <heap_malloc+0x148>)
 800ee14:	6013      	str	r3, [r2, #0]

          if (free_bytes_remain < ever_free_bytes_remain)
 800ee16:	4b14      	ldr	r3, [pc, #80]	; (800ee68 <heap_malloc+0x148>)
 800ee18:	681a      	ldr	r2, [r3, #0]
 800ee1a:	4b15      	ldr	r3, [pc, #84]	; (800ee70 <heap_malloc+0x150>)
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	429a      	cmp	r2, r3
 800ee20:	d203      	bcs.n	800ee2a <heap_malloc+0x10a>
          {
            ever_free_bytes_remain = free_bytes_remain;
 800ee22:	4b11      	ldr	r3, [pc, #68]	; (800ee68 <heap_malloc+0x148>)
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	4a12      	ldr	r2, [pc, #72]	; (800ee70 <heap_malloc+0x150>)
 800ee28:	6013      	str	r3, [r2, #0]
          }

          /* The block is being returned - it is allocated and owned
                    by the application and has no "next" block. */
          block->block_size |= block_allocated_bit;
 800ee2a:	69fb      	ldr	r3, [r7, #28]
 800ee2c:	685a      	ldr	r2, [r3, #4]
 800ee2e:	4b0d      	ldr	r3, [pc, #52]	; (800ee64 <heap_malloc+0x144>)
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	431a      	orrs	r2, r3
 800ee34:	69fb      	ldr	r3, [r7, #28]
 800ee36:	605a      	str	r2, [r3, #4]
          block->next_free = NULL;
 800ee38:	69fb      	ldr	r3, [r7, #28]
 800ee3a:	2200      	movs	r2, #0
 800ee3c:	601a      	str	r2, [r3, #0]
        }
      }
    }
  }
  MUTEX_UNLOCK(mem_mutex);
 800ee3e:	4b07      	ldr	r3, [pc, #28]	; (800ee5c <heap_malloc+0x13c>)
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ee44:	68bb      	ldr	r3, [r7, #8]
 800ee46:	f383 8810 	msr	PRIMASK, r3
}
 800ee4a:	bf00      	nop

  HEAP_ASSERT((((uint32_t)reval) & (uint32_t)BYTE_ALIGNMENT_MASK) == 0);
  return reval;
 800ee4c:	697b      	ldr	r3, [r7, #20]
}
 800ee4e:	4618      	mov	r0, r3
 800ee50:	3720      	adds	r7, #32
 800ee52:	46bd      	mov	sp, r7
 800ee54:	bd80      	pop	{r7, pc}
 800ee56:	bf00      	nop
 800ee58:	20020cb8 	.word	0x20020cb8
 800ee5c:	20011cb4 	.word	0x20011cb4
 800ee60:	20020cc4 	.word	0x20020cc4
 800ee64:	20020cd0 	.word	0x20020cd0
 800ee68:	20020cc8 	.word	0x20020cc8
 800ee6c:	20020cbc 	.word	0x20020cbc
 800ee70:	20020ccc 	.word	0x20020ccc

0800ee74 <heap_free>:
/*-----------------------------------------------------------*/

void heap_free(void *pv)
{
 800ee74:	b580      	push	{r7, lr}
 800ee76:	b086      	sub	sp, #24
 800ee78:	af00      	add	r7, sp, #0
 800ee7a:	6078      	str	r0, [r7, #4]
  uint8_t *puc = (uint8_t *)pv;
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800ee80:	f3ef 8310 	mrs	r3, PRIMASK
 800ee84:	60fb      	str	r3, [r7, #12]
  return(result);
 800ee86:	68fb      	ldr	r3, [r7, #12]
  block_link_t *block;

  MUTEX_LOCK(mem_mutex);
 800ee88:	4a1a      	ldr	r2, [pc, #104]	; (800eef4 <heap_free+0x80>)
 800ee8a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800ee8c:	b672      	cpsid	i
}
 800ee8e:	bf00      	nop

  if (pv != NULL)
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d023      	beq.n	800eede <heap_free+0x6a>
  {
    /* The memory being freed will have an block_link_t structure immediately
        before it. */
    puc -= STRUCT_SIZE;
 800ee96:	2308      	movs	r3, #8
 800ee98:	425b      	negs	r3, r3
 800ee9a:	697a      	ldr	r2, [r7, #20]
 800ee9c:	4413      	add	r3, r2
 800ee9e:	617b      	str	r3, [r7, #20]

    /* This casting is to keep the compiler from issuing warnings. */
    block = (void *)puc;
 800eea0:	697b      	ldr	r3, [r7, #20]
 800eea2:	613b      	str	r3, [r7, #16]

    /* Check the block is actually allocated. */
    HEAP_ASSERT((block->block_size & block_allocated_bit) != 0);
    HEAP_ASSERT(block->next_free == NULL);

    if ((block->block_size & block_allocated_bit) != 0)
 800eea4:	693b      	ldr	r3, [r7, #16]
 800eea6:	685a      	ldr	r2, [r3, #4]
 800eea8:	4b13      	ldr	r3, [pc, #76]	; (800eef8 <heap_free+0x84>)
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	4013      	ands	r3, r2
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d015      	beq.n	800eede <heap_free+0x6a>
    {
      if (block->next_free == NULL)
 800eeb2:	693b      	ldr	r3, [r7, #16]
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d111      	bne.n	800eede <heap_free+0x6a>
      {
        /* The block is being returned to the heap - it is no longer
                allocated. */
        block->block_size &= ~block_allocated_bit;
 800eeba:	693b      	ldr	r3, [r7, #16]
 800eebc:	685a      	ldr	r2, [r3, #4]
 800eebe:	4b0e      	ldr	r3, [pc, #56]	; (800eef8 <heap_free+0x84>)
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	43db      	mvns	r3, r3
 800eec4:	401a      	ands	r2, r3
 800eec6:	693b      	ldr	r3, [r7, #16]
 800eec8:	605a      	str	r2, [r3, #4]

        {
          /* Add this block to the list of free blocks. */
          free_bytes_remain += block->block_size;
 800eeca:	693b      	ldr	r3, [r7, #16]
 800eecc:	685a      	ldr	r2, [r3, #4]
 800eece:	4b0b      	ldr	r3, [pc, #44]	; (800eefc <heap_free+0x88>)
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	4413      	add	r3, r2
 800eed4:	4a09      	ldr	r2, [pc, #36]	; (800eefc <heap_free+0x88>)
 800eed6:	6013      	str	r3, [r2, #0]
          insert_into_free_list(((block_link_t *)block));
 800eed8:	6938      	ldr	r0, [r7, #16]
 800eeda:	f000 f873 	bl	800efc4 <insert_into_free_list>
        }
      }
    }
  }
  MUTEX_UNLOCK(mem_mutex);
 800eede:	4b05      	ldr	r3, [pc, #20]	; (800eef4 <heap_free+0x80>)
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eee4:	68bb      	ldr	r3, [r7, #8]
 800eee6:	f383 8810 	msr	PRIMASK, r3
}
 800eeea:	bf00      	nop
}
 800eeec:	bf00      	nop
 800eeee:	3718      	adds	r7, #24
 800eef0:	46bd      	mov	sp, r7
 800eef2:	bd80      	pop	{r7, pc}
 800eef4:	20011cb4 	.word	0x20011cb4
 800eef8:	20020cd0 	.word	0x20020cd0
 800eefc:	20020cc8 	.word	0x20020cc8

0800ef00 <heap_init>:
  return ever_free_bytes_remain;
}
/*-----------------------------------------------------------*/

static void heap_init(void)
{
 800ef00:	b480      	push	{r7}
 800ef02:	b085      	sub	sp, #20
 800ef04:	af00      	add	r7, sp, #0
  block_link_t *first_free_block;
  uint8_t *aligned_heap;
  uint32_t address;
  uint32_t total_heap_size = TOTAL_HEAP_SIZE;
 800ef06:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800ef0a:	60bb      	str	r3, [r7, #8]

  /* Ensure the heap starts on a correctly aligned boundary. */
  address = (uint32_t)heap;
 800ef0c:	4b27      	ldr	r3, [pc, #156]	; (800efac <heap_init+0xac>)
 800ef0e:	60fb      	str	r3, [r7, #12]

  if ((address & BYTE_ALIGNMENT_MASK) != 0)
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	f003 0307 	and.w	r3, r3, #7
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d00c      	beq.n	800ef34 <heap_init+0x34>
  {
    address += (BYTE_ALIGNMENT - 1);
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	3307      	adds	r3, #7
 800ef1e:	60fb      	str	r3, [r7, #12]
    address &= ~((uint32_t)BYTE_ALIGNMENT_MASK);
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	f023 0307 	bic.w	r3, r3, #7
 800ef26:	60fb      	str	r3, [r7, #12]
    total_heap_size -= address - (uint32_t)heap;
 800ef28:	68ba      	ldr	r2, [r7, #8]
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	1ad3      	subs	r3, r2, r3
 800ef2e:	4a1f      	ldr	r2, [pc, #124]	; (800efac <heap_init+0xac>)
 800ef30:	4413      	add	r3, r2
 800ef32:	60bb      	str	r3, [r7, #8]
  }

  aligned_heap = (uint8_t *)address;
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	607b      	str	r3, [r7, #4]

  /* start is used to hold a pointer to the first item in the list of free
    blocks.  The void cast is used to prevent compiler warnings. */
  start.next_free = (void *)aligned_heap;
 800ef38:	4a1d      	ldr	r2, [pc, #116]	; (800efb0 <heap_init+0xb0>)
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	6013      	str	r3, [r2, #0]
  start.block_size = (uint32_t)0;
 800ef3e:	4b1c      	ldr	r3, [pc, #112]	; (800efb0 <heap_init+0xb0>)
 800ef40:	2200      	movs	r2, #0
 800ef42:	605a      	str	r2, [r3, #4]

  /* end is used to mark the end of the list of free blocks and is inserted
    at the end of the heap space. */
  address = ((uint32_t)aligned_heap) + total_heap_size;
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	68ba      	ldr	r2, [r7, #8]
 800ef48:	4413      	add	r3, r2
 800ef4a:	60fb      	str	r3, [r7, #12]
  address -= STRUCT_SIZE;
 800ef4c:	2208      	movs	r2, #8
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	1a9b      	subs	r3, r3, r2
 800ef52:	60fb      	str	r3, [r7, #12]
  address &= ~((uint32_t)BYTE_ALIGNMENT_MASK);
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	f023 0307 	bic.w	r3, r3, #7
 800ef5a:	60fb      	str	r3, [r7, #12]
  end = (void *)address;
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	4a15      	ldr	r2, [pc, #84]	; (800efb4 <heap_init+0xb4>)
 800ef60:	6013      	str	r3, [r2, #0]
  end->block_size = 0;
 800ef62:	4b14      	ldr	r3, [pc, #80]	; (800efb4 <heap_init+0xb4>)
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	2200      	movs	r2, #0
 800ef68:	605a      	str	r2, [r3, #4]
  end->next_free = NULL;
 800ef6a:	4b12      	ldr	r3, [pc, #72]	; (800efb4 <heap_init+0xb4>)
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	2200      	movs	r2, #0
 800ef70:	601a      	str	r2, [r3, #0]

  /* To start with there is a single free block that is sized to take up the
    entire heap space, minus the space taken by end. */
  first_free_block = (void *)aligned_heap;
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	603b      	str	r3, [r7, #0]
  first_free_block->block_size = address - (uint32_t)first_free_block;
 800ef76:	683b      	ldr	r3, [r7, #0]
 800ef78:	68fa      	ldr	r2, [r7, #12]
 800ef7a:	1ad2      	subs	r2, r2, r3
 800ef7c:	683b      	ldr	r3, [r7, #0]
 800ef7e:	605a      	str	r2, [r3, #4]
  first_free_block->next_free = end;
 800ef80:	4b0c      	ldr	r3, [pc, #48]	; (800efb4 <heap_init+0xb4>)
 800ef82:	681a      	ldr	r2, [r3, #0]
 800ef84:	683b      	ldr	r3, [r7, #0]
 800ef86:	601a      	str	r2, [r3, #0]

  /* Only one block exists - and it covers the entire usable heap space. */
  ever_free_bytes_remain = first_free_block->block_size;
 800ef88:	683b      	ldr	r3, [r7, #0]
 800ef8a:	685b      	ldr	r3, [r3, #4]
 800ef8c:	4a0a      	ldr	r2, [pc, #40]	; (800efb8 <heap_init+0xb8>)
 800ef8e:	6013      	str	r3, [r2, #0]
  free_bytes_remain = first_free_block->block_size;
 800ef90:	683b      	ldr	r3, [r7, #0]
 800ef92:	685b      	ldr	r3, [r3, #4]
 800ef94:	4a09      	ldr	r2, [pc, #36]	; (800efbc <heap_init+0xbc>)
 800ef96:	6013      	str	r3, [r2, #0]

  /* Work out the position of the top bit in a uint32_t variable. */
  block_allocated_bit = ((uint32_t)1) << ((sizeof(uint32_t) * BITS_PER_BYTE) - 1);
 800ef98:	4b09      	ldr	r3, [pc, #36]	; (800efc0 <heap_init+0xc0>)
 800ef9a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ef9e:	601a      	str	r2, [r3, #0]
}
 800efa0:	bf00      	nop
 800efa2:	3714      	adds	r7, #20
 800efa4:	46bd      	mov	sp, r7
 800efa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efaa:	4770      	bx	lr
 800efac:	20011cb8 	.word	0x20011cb8
 800efb0:	20020cbc 	.word	0x20020cbc
 800efb4:	20020cc4 	.word	0x20020cc4
 800efb8:	20020ccc 	.word	0x20020ccc
 800efbc:	20020cc8 	.word	0x20020cc8
 800efc0:	20020cd0 	.word	0x20020cd0

0800efc4 <insert_into_free_list>:
/*-----------------------------------------------------------*/

static void insert_into_free_list(block_link_t *block_to_insert)
{
 800efc4:	b480      	push	{r7}
 800efc6:	b085      	sub	sp, #20
 800efc8:	af00      	add	r7, sp, #0
 800efca:	6078      	str	r0, [r7, #4]
  block_link_t *iterator;
  uint8_t *puc;

  /* Iterate through the list until a block is found that has a higher address
    than the block being inserted. */
  for (iterator = &start; iterator->next_free < block_to_insert; iterator = iterator->next_free)
 800efcc:	4b28      	ldr	r3, [pc, #160]	; (800f070 <insert_into_free_list+0xac>)
 800efce:	60fb      	str	r3, [r7, #12]
 800efd0:	e002      	b.n	800efd8 <insert_into_free_list+0x14>
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	60fb      	str	r3, [r7, #12]
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	687a      	ldr	r2, [r7, #4]
 800efde:	429a      	cmp	r2, r3
 800efe0:	d8f7      	bhi.n	800efd2 <insert_into_free_list+0xe>
    /* Nothing to do here, just iterate to the right position. */
  }

  /* Do the block being inserted, and the block it is being inserted after
    make a contiguous block of memory? */
  puc = (uint8_t *)iterator;
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	60bb      	str	r3, [r7, #8]
  if ((puc + iterator->block_size) == (uint8_t *)block_to_insert)
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	685b      	ldr	r3, [r3, #4]
 800efea:	68ba      	ldr	r2, [r7, #8]
 800efec:	4413      	add	r3, r2
 800efee:	687a      	ldr	r2, [r7, #4]
 800eff0:	429a      	cmp	r2, r3
 800eff2:	d108      	bne.n	800f006 <insert_into_free_list+0x42>
  {
    iterator->block_size += block_to_insert->block_size;
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	685a      	ldr	r2, [r3, #4]
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	685b      	ldr	r3, [r3, #4]
 800effc:	441a      	add	r2, r3
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	605a      	str	r2, [r3, #4]
    block_to_insert = iterator;
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	607b      	str	r3, [r7, #4]
  }

  /* Do the block being inserted, and the block it is being inserted before
    make a contiguous block of memory? */
  puc = (uint8_t *)block_to_insert;
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	60bb      	str	r3, [r7, #8]
  if ((puc + block_to_insert->block_size) == (uint8_t *)iterator->next_free)
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	685b      	ldr	r3, [r3, #4]
 800f00e:	68ba      	ldr	r2, [r7, #8]
 800f010:	441a      	add	r2, r3
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	429a      	cmp	r2, r3
 800f018:	d118      	bne.n	800f04c <insert_into_free_list+0x88>
  {
    if (iterator->next_free != end)
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	681a      	ldr	r2, [r3, #0]
 800f01e:	4b15      	ldr	r3, [pc, #84]	; (800f074 <insert_into_free_list+0xb0>)
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	429a      	cmp	r2, r3
 800f024:	d00d      	beq.n	800f042 <insert_into_free_list+0x7e>
    {
      /* Form one big block from the two blocks. */
      block_to_insert->block_size += iterator->next_free->block_size;
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	685a      	ldr	r2, [r3, #4]
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	685b      	ldr	r3, [r3, #4]
 800f030:	441a      	add	r2, r3
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	605a      	str	r2, [r3, #4]
      block_to_insert->next_free = iterator->next_free->next_free;
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	681a      	ldr	r2, [r3, #0]
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	601a      	str	r2, [r3, #0]
 800f040:	e008      	b.n	800f054 <insert_into_free_list+0x90>
    }
    else
    {
      block_to_insert->next_free = end;
 800f042:	4b0c      	ldr	r3, [pc, #48]	; (800f074 <insert_into_free_list+0xb0>)
 800f044:	681a      	ldr	r2, [r3, #0]
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	601a      	str	r2, [r3, #0]
 800f04a:	e003      	b.n	800f054 <insert_into_free_list+0x90>
    }
  }
  else
  {
    block_to_insert->next_free = iterator->next_free;
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	681a      	ldr	r2, [r3, #0]
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	601a      	str	r2, [r3, #0]

  /* If the block being inserted plugged a gab, so was merged with the block
    before and the block after, then it's next_free pointer will have
    already been set, and should not be set here as that would make it point
    to itself. */
  if (iterator != block_to_insert)
 800f054:	68fa      	ldr	r2, [r7, #12]
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	429a      	cmp	r2, r3
 800f05a:	d002      	beq.n	800f062 <insert_into_free_list+0x9e>
  {
    iterator->next_free = block_to_insert;
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	687a      	ldr	r2, [r7, #4]
 800f060:	601a      	str	r2, [r3, #0]
  }
}
 800f062:	bf00      	nop
 800f064:	3714      	adds	r7, #20
 800f066:	46bd      	mov	sp, r7
 800f068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f06c:	4770      	bx	lr
 800f06e:	bf00      	nop
 800f070:	20020cbc 	.word	0x20020cbc
 800f074:	20020cc4 	.word	0x20020cc4

0800f078 <get_crc16>:
**  Descriptions: CRC16 checksum function
**  Input:        Data to check,Stream length, initialized checksum
**  Output:       CRC checksum
*/
uint16_t get_crc16(uint8_t *pchMessage,uint32_t dwLength,uint16_t wCRC)
{
 800f078:	b480      	push	{r7}
 800f07a:	b087      	sub	sp, #28
 800f07c:	af00      	add	r7, sp, #0
 800f07e:	60f8      	str	r0, [r7, #12]
 800f080:	60b9      	str	r1, [r7, #8]
 800f082:	4613      	mov	r3, r2
 800f084:	80fb      	strh	r3, [r7, #6]
    uint8_t chData;
    if (pchMessage == NULL)
 800f086:	68fb      	ldr	r3, [r7, #12]
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d113      	bne.n	800f0b4 <get_crc16+0x3c>
    {
        return 0xFFFF;
 800f08c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f090:	e016      	b.n	800f0c0 <get_crc16+0x48>
    }

    while(dwLength--)
    {
        chData = *pchMessage++;
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	1c5a      	adds	r2, r3, #1
 800f096:	60fa      	str	r2, [r7, #12]
 800f098:	781b      	ldrb	r3, [r3, #0]
 800f09a:	75fb      	strb	r3, [r7, #23]
        (wCRC) = ((uint16_t)(wCRC) >> 8)  ^ wCRC_Table[((uint16_t)(wCRC) ^ (uint16_t)(chData)) & 0x00ff];
 800f09c:	88fb      	ldrh	r3, [r7, #6]
 800f09e:	0a1b      	lsrs	r3, r3, #8
 800f0a0:	b29a      	uxth	r2, r3
 800f0a2:	88f9      	ldrh	r1, [r7, #6]
 800f0a4:	7dfb      	ldrb	r3, [r7, #23]
 800f0a6:	404b      	eors	r3, r1
 800f0a8:	b2db      	uxtb	r3, r3
 800f0aa:	4908      	ldr	r1, [pc, #32]	; (800f0cc <get_crc16+0x54>)
 800f0ac:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800f0b0:	4053      	eors	r3, r2
 800f0b2:	80fb      	strh	r3, [r7, #6]
    while(dwLength--)
 800f0b4:	68bb      	ldr	r3, [r7, #8]
 800f0b6:	1e5a      	subs	r2, r3, #1
 800f0b8:	60ba      	str	r2, [r7, #8]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d1e9      	bne.n	800f092 <get_crc16+0x1a>
    }

    return wCRC;
 800f0be:	88fb      	ldrh	r3, [r7, #6]
}
 800f0c0:	4618      	mov	r0, r3
 800f0c2:	371c      	adds	r7, #28
 800f0c4:	46bd      	mov	sp, r7
 800f0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ca:	4770      	bx	lr
 800f0cc:	0800fd64 	.word	0x0800fd64

0800f0d0 <verify_crc16>:
**  Input:        Data to Verify,Stream length = Data + checksum
**  Output:       True or False (CRC Verify Result)
*/
//CRC 的验证方法也可以是看append后的字节流经过CRC运算后结果是否为零来判断
uint32_t verify_crc16(uint8_t *pchMessage, uint32_t dwLength)
{
 800f0d0:	b580      	push	{r7, lr}
 800f0d2:	b084      	sub	sp, #16
 800f0d4:	af00      	add	r7, sp, #0
 800f0d6:	6078      	str	r0, [r7, #4]
 800f0d8:	6039      	str	r1, [r7, #0]
    uint16_t wExpected = 0;
 800f0da:	2300      	movs	r3, #0
 800f0dc:	81fb      	strh	r3, [r7, #14]

    if ((pchMessage == NULL) || (dwLength <= 2))
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d002      	beq.n	800f0ea <verify_crc16+0x1a>
 800f0e4:	683b      	ldr	r3, [r7, #0]
 800f0e6:	2b02      	cmp	r3, #2
 800f0e8:	d801      	bhi.n	800f0ee <verify_crc16+0x1e>
    {
        return __FALSE;
 800f0ea:	2300      	movs	r3, #0
 800f0ec:	e020      	b.n	800f130 <verify_crc16+0x60>
    }
    wExpected = get_crc16(pchMessage, dwLength - 2, CRC16_INIT);
 800f0ee:	683b      	ldr	r3, [r7, #0]
 800f0f0:	3b02      	subs	r3, #2
 800f0f2:	f643 22a3 	movw	r2, #15011	; 0x3aa3
 800f0f6:	4619      	mov	r1, r3
 800f0f8:	6878      	ldr	r0, [r7, #4]
 800f0fa:	f7ff ffbd 	bl	800f078 <get_crc16>
 800f0fe:	4603      	mov	r3, r0
 800f100:	81fb      	strh	r3, [r7, #14]

    return ((wExpected & 0xff) == pchMessage[dwLength - 2] && ((wExpected >> 8) & 0xff) == pchMessage[dwLength - 1]);
 800f102:	89fb      	ldrh	r3, [r7, #14]
 800f104:	b2db      	uxtb	r3, r3
 800f106:	683a      	ldr	r2, [r7, #0]
 800f108:	3a02      	subs	r2, #2
 800f10a:	6879      	ldr	r1, [r7, #4]
 800f10c:	440a      	add	r2, r1
 800f10e:	7812      	ldrb	r2, [r2, #0]
 800f110:	4293      	cmp	r3, r2
 800f112:	d10c      	bne.n	800f12e <verify_crc16+0x5e>
 800f114:	89fb      	ldrh	r3, [r7, #14]
 800f116:	0a1b      	lsrs	r3, r3, #8
 800f118:	b29b      	uxth	r3, r3
 800f11a:	b2db      	uxtb	r3, r3
 800f11c:	683a      	ldr	r2, [r7, #0]
 800f11e:	3a01      	subs	r2, #1
 800f120:	6879      	ldr	r1, [r7, #4]
 800f122:	440a      	add	r2, r1
 800f124:	7812      	ldrb	r2, [r2, #0]
 800f126:	4293      	cmp	r3, r2
 800f128:	d101      	bne.n	800f12e <verify_crc16+0x5e>
 800f12a:	2301      	movs	r3, #1
 800f12c:	e000      	b.n	800f130 <verify_crc16+0x60>
 800f12e:	2300      	movs	r3, #0
}
 800f130:	4618      	mov	r0, r3
 800f132:	3710      	adds	r7, #16
 800f134:	46bd      	mov	sp, r7
 800f136:	bd80      	pop	{r7, pc}

0800f138 <append_crc16>:
**  Descriptions: append CRC16 to the end of data
**  Input:        Data to CRC and append,Stream length = Data + checksum
**  Output:       True or False (CRC Verify Result)
*/
void append_crc16(uint8_t* pchMessage,uint32_t dwLength)
{
 800f138:	b580      	push	{r7, lr}
 800f13a:	b084      	sub	sp, #16
 800f13c:	af00      	add	r7, sp, #0
 800f13e:	6078      	str	r0, [r7, #4]
 800f140:	6039      	str	r1, [r7, #0]
    uint16_t wCRC = 0;
 800f142:	2300      	movs	r3, #0
 800f144:	81fb      	strh	r3, [r7, #14]

    if ((pchMessage == NULL) || (dwLength <= 2))
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d01d      	beq.n	800f188 <append_crc16+0x50>
 800f14c:	683b      	ldr	r3, [r7, #0]
 800f14e:	2b02      	cmp	r3, #2
 800f150:	d91a      	bls.n	800f188 <append_crc16+0x50>
    {
        return;
    }
    wCRC = get_crc16 ( (uint8_t *)pchMessage, dwLength-2, CRC16_INIT );
 800f152:	683b      	ldr	r3, [r7, #0]
 800f154:	3b02      	subs	r3, #2
 800f156:	f643 22a3 	movw	r2, #15011	; 0x3aa3
 800f15a:	4619      	mov	r1, r3
 800f15c:	6878      	ldr	r0, [r7, #4]
 800f15e:	f7ff ff8b 	bl	800f078 <get_crc16>
 800f162:	4603      	mov	r3, r0
 800f164:	81fb      	strh	r3, [r7, #14]

    pchMessage[dwLength-2] = (uint8_t)(wCRC & 0x00ff);
 800f166:	683b      	ldr	r3, [r7, #0]
 800f168:	3b02      	subs	r3, #2
 800f16a:	687a      	ldr	r2, [r7, #4]
 800f16c:	4413      	add	r3, r2
 800f16e:	89fa      	ldrh	r2, [r7, #14]
 800f170:	b2d2      	uxtb	r2, r2
 800f172:	701a      	strb	r2, [r3, #0]
    pchMessage[dwLength-1] = (uint8_t)((wCRC >> 8)& 0x00ff);
 800f174:	89fb      	ldrh	r3, [r7, #14]
 800f176:	0a1b      	lsrs	r3, r3, #8
 800f178:	b299      	uxth	r1, r3
 800f17a:	683b      	ldr	r3, [r7, #0]
 800f17c:	3b01      	subs	r3, #1
 800f17e:	687a      	ldr	r2, [r7, #4]
 800f180:	4413      	add	r3, r2
 800f182:	b2ca      	uxtb	r2, r1
 800f184:	701a      	strb	r2, [r3, #0]
 800f186:	e000      	b.n	800f18a <append_crc16+0x52>
        return;
 800f188:	bf00      	nop
}
 800f18a:	3710      	adds	r7, #16
 800f18c:	46bd      	mov	sp, r7
 800f18e:	bd80      	pop	{r7, pc}

0800f190 <get_crc32>:
**  Descriptions: CRC16 checksum function
**  Input:        Data to check,Stream length, initialized checksum
**  Output:       CRC checksum
*/
uint32_t get_crc32(uint8_t *pchMessage,uint32_t dwLength,uint32_t wCRC)
{
 800f190:	b480      	push	{r7}
 800f192:	b087      	sub	sp, #28
 800f194:	af00      	add	r7, sp, #0
 800f196:	60f8      	str	r0, [r7, #12]
 800f198:	60b9      	str	r1, [r7, #8]
 800f19a:	607a      	str	r2, [r7, #4]
    uint8_t chData;
    if (pchMessage == NULL)
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d112      	bne.n	800f1c8 <get_crc32+0x38>
    {
        return 0xFFFF;
 800f1a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f1a6:	e015      	b.n	800f1d4 <get_crc32+0x44>
    }

    while(dwLength--)
    {
        chData = *pchMessage++;
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	1c5a      	adds	r2, r3, #1
 800f1ac:	60fa      	str	r2, [r7, #12]
 800f1ae:	781b      	ldrb	r3, [r3, #0]
 800f1b0:	75fb      	strb	r3, [r7, #23]
        (wCRC) = ((uint32_t)(wCRC) >> 8)  ^ CRC32_Table[((uint32_t)(wCRC) ^ (uint32_t)(chData)) & 0x000000ff];
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	0a1a      	lsrs	r2, r3, #8
 800f1b6:	7df9      	ldrb	r1, [r7, #23]
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	404b      	eors	r3, r1
 800f1bc:	b2db      	uxtb	r3, r3
 800f1be:	4908      	ldr	r1, [pc, #32]	; (800f1e0 <get_crc32+0x50>)
 800f1c0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800f1c4:	4053      	eors	r3, r2
 800f1c6:	607b      	str	r3, [r7, #4]
    while(dwLength--)
 800f1c8:	68bb      	ldr	r3, [r7, #8]
 800f1ca:	1e5a      	subs	r2, r3, #1
 800f1cc:	60ba      	str	r2, [r7, #8]
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d1ea      	bne.n	800f1a8 <get_crc32+0x18>
    }

    return wCRC;
 800f1d2:	687b      	ldr	r3, [r7, #4]
}
 800f1d4:	4618      	mov	r0, r3
 800f1d6:	371c      	adds	r7, #28
 800f1d8:	46bd      	mov	sp, r7
 800f1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1de:	4770      	bx	lr
 800f1e0:	0800ff64 	.word	0x0800ff64

0800f1e4 <verify_crc32>:
**  Input:        Data to Verify,Stream length = Data + checksum
**  Output:       True or False (CRC Verify Result)
*/
//CRC 的验证方法也可以是看append后的字节流经过CRC运算后结果是否为零来判断
uint32_t verify_crc32(uint8_t *pchMessage, uint32_t dwLength)
{
 800f1e4:	b580      	push	{r7, lr}
 800f1e6:	b084      	sub	sp, #16
 800f1e8:	af00      	add	r7, sp, #0
 800f1ea:	6078      	str	r0, [r7, #4]
 800f1ec:	6039      	str	r1, [r7, #0]
    uint32_t wExpected = 0;
 800f1ee:	2300      	movs	r3, #0
 800f1f0:	60fb      	str	r3, [r7, #12]
    uint32_t input_crc = 0;
 800f1f2:	2300      	movs	r3, #0
 800f1f4:	60bb      	str	r3, [r7, #8]
    if ((pchMessage == NULL) || (dwLength <= 4))
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d002      	beq.n	800f202 <verify_crc32+0x1e>
 800f1fc:	683b      	ldr	r3, [r7, #0]
 800f1fe:	2b04      	cmp	r3, #4
 800f200:	d801      	bhi.n	800f206 <verify_crc32+0x22>
    {
        return __FALSE;
 800f202:	2300      	movs	r3, #0
 800f204:	e036      	b.n	800f274 <verify_crc32+0x90>
    }
    wExpected = get_crc32(pchMessage, dwLength - 4, CRC32_INIT);
 800f206:	683b      	ldr	r3, [r7, #0]
 800f208:	3b04      	subs	r3, #4
 800f20a:	f643 22a3 	movw	r2, #15011	; 0x3aa3
 800f20e:	4619      	mov	r1, r3
 800f210:	6878      	ldr	r0, [r7, #4]
 800f212:	f7ff ffbd 	bl	800f190 <get_crc32>
 800f216:	60f8      	str	r0, [r7, #12]

    input_crc |= pchMessage[dwLength - 4];
 800f218:	683b      	ldr	r3, [r7, #0]
 800f21a:	3b04      	subs	r3, #4
 800f21c:	687a      	ldr	r2, [r7, #4]
 800f21e:	4413      	add	r3, r2
 800f220:	781b      	ldrb	r3, [r3, #0]
 800f222:	461a      	mov	r2, r3
 800f224:	68bb      	ldr	r3, [r7, #8]
 800f226:	4313      	orrs	r3, r2
 800f228:	60bb      	str	r3, [r7, #8]
    input_crc |= ((uint32_t)(pchMessage[dwLength - 3]) << 8)  & 0xff00;
 800f22a:	683b      	ldr	r3, [r7, #0]
 800f22c:	3b03      	subs	r3, #3
 800f22e:	687a      	ldr	r2, [r7, #4]
 800f230:	4413      	add	r3, r2
 800f232:	781b      	ldrb	r3, [r3, #0]
 800f234:	021b      	lsls	r3, r3, #8
 800f236:	b29b      	uxth	r3, r3
 800f238:	68ba      	ldr	r2, [r7, #8]
 800f23a:	4313      	orrs	r3, r2
 800f23c:	60bb      	str	r3, [r7, #8]
    input_crc |= ((uint32_t)(pchMessage[dwLength - 2]) << 16) & 0xff0000;
 800f23e:	683b      	ldr	r3, [r7, #0]
 800f240:	3b02      	subs	r3, #2
 800f242:	687a      	ldr	r2, [r7, #4]
 800f244:	4413      	add	r3, r2
 800f246:	781b      	ldrb	r3, [r3, #0]
 800f248:	041b      	lsls	r3, r3, #16
 800f24a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f24e:	68ba      	ldr	r2, [r7, #8]
 800f250:	4313      	orrs	r3, r2
 800f252:	60bb      	str	r3, [r7, #8]
    input_crc |= ((uint32_t)(pchMessage[dwLength - 1]) << 24) & 0xff000000;
 800f254:	683b      	ldr	r3, [r7, #0]
 800f256:	3b01      	subs	r3, #1
 800f258:	687a      	ldr	r2, [r7, #4]
 800f25a:	4413      	add	r3, r2
 800f25c:	781b      	ldrb	r3, [r3, #0]
 800f25e:	061b      	lsls	r3, r3, #24
 800f260:	68ba      	ldr	r2, [r7, #8]
 800f262:	4313      	orrs	r3, r2
 800f264:	60bb      	str	r3, [r7, #8]

    return (input_crc == wExpected);
 800f266:	68ba      	ldr	r2, [r7, #8]
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	429a      	cmp	r2, r3
 800f26c:	bf0c      	ite	eq
 800f26e:	2301      	moveq	r3, #1
 800f270:	2300      	movne	r3, #0
 800f272:	b2db      	uxtb	r3, r3
}
 800f274:	4618      	mov	r0, r3
 800f276:	3710      	adds	r7, #16
 800f278:	46bd      	mov	sp, r7
 800f27a:	bd80      	pop	{r7, pc}

0800f27c <append_crc32>:
**  Descriptions: append CRC16 to the end of data
**  Input:        Data to CRC and append,Stream length = Data + checksum
**  Output:       True or False (CRC Verify Result)
*/
void append_crc32(uint8_t* pchMessage,uint32_t dwLength)
{
 800f27c:	b580      	push	{r7, lr}
 800f27e:	b084      	sub	sp, #16
 800f280:	af00      	add	r7, sp, #0
 800f282:	6078      	str	r0, [r7, #4]
 800f284:	6039      	str	r1, [r7, #0]
    uint32_t wCRC = 0;
 800f286:	2300      	movs	r3, #0
 800f288:	60fb      	str	r3, [r7, #12]

    if ((pchMessage == NULL) || (dwLength <= 4))
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d02b      	beq.n	800f2e8 <append_crc32+0x6c>
 800f290:	683b      	ldr	r3, [r7, #0]
 800f292:	2b04      	cmp	r3, #4
 800f294:	d928      	bls.n	800f2e8 <append_crc32+0x6c>
    {
        return;
    }
    wCRC = get_crc32 ( (uint8_t *)pchMessage, dwLength-4, CRC32_INIT);
 800f296:	683b      	ldr	r3, [r7, #0]
 800f298:	3b04      	subs	r3, #4
 800f29a:	f643 22a3 	movw	r2, #15011	; 0x3aa3
 800f29e:	4619      	mov	r1, r3
 800f2a0:	6878      	ldr	r0, [r7, #4]
 800f2a2:	f7ff ff75 	bl	800f190 <get_crc32>
 800f2a6:	60f8      	str	r0, [r7, #12]

    pchMessage[dwLength-4] = (uint8_t)(wCRC & 0xff);
 800f2a8:	683b      	ldr	r3, [r7, #0]
 800f2aa:	3b04      	subs	r3, #4
 800f2ac:	687a      	ldr	r2, [r7, #4]
 800f2ae:	4413      	add	r3, r2
 800f2b0:	68fa      	ldr	r2, [r7, #12]
 800f2b2:	b2d2      	uxtb	r2, r2
 800f2b4:	701a      	strb	r2, [r3, #0]
    pchMessage[dwLength-3] = (uint8_t)((wCRC >> 8)& 0xff);
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	0a19      	lsrs	r1, r3, #8
 800f2ba:	683b      	ldr	r3, [r7, #0]
 800f2bc:	3b03      	subs	r3, #3
 800f2be:	687a      	ldr	r2, [r7, #4]
 800f2c0:	4413      	add	r3, r2
 800f2c2:	b2ca      	uxtb	r2, r1
 800f2c4:	701a      	strb	r2, [r3, #0]
    pchMessage[dwLength-2] = (uint8_t)((wCRC >> 16)& 0xff);
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	0c19      	lsrs	r1, r3, #16
 800f2ca:	683b      	ldr	r3, [r7, #0]
 800f2cc:	3b02      	subs	r3, #2
 800f2ce:	687a      	ldr	r2, [r7, #4]
 800f2d0:	4413      	add	r3, r2
 800f2d2:	b2ca      	uxtb	r2, r1
 800f2d4:	701a      	strb	r2, [r3, #0]
    pchMessage[dwLength-1] = (uint8_t)((wCRC >> 24)& 0xff);
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	0e19      	lsrs	r1, r3, #24
 800f2da:	683b      	ldr	r3, [r7, #0]
 800f2dc:	3b01      	subs	r3, #1
 800f2de:	687a      	ldr	r2, [r7, #4]
 800f2e0:	4413      	add	r3, r2
 800f2e2:	b2ca      	uxtb	r2, r1
 800f2e4:	701a      	strb	r2, [r3, #0]
 800f2e6:	e000      	b.n	800f2ea <append_crc32+0x6e>
        return;
 800f2e8:	bf00      	nop
}
 800f2ea:	3710      	adds	r7, #16
 800f2ec:	46bd      	mov	sp, r7
 800f2ee:	bd80      	pop	{r7, pc}

0800f2f0 <TimerISR_Hook>:
//!
//! \note   Typical 1ms interval
//
//******************************************************************************************
void TimerISR_Hook(void)
{    
 800f2f0:	b480      	push	{r7}
 800f2f2:	b083      	sub	sp, #12
 800f2f4:	af00      	add	r7, sp, #0
    for(uint8_t i = 1; i < TIMER_ELEMENT_NUM_MAX; i++)
 800f2f6:	2301      	movs	r3, #1
 800f2f8:	71fb      	strb	r3, [r7, #7]
 800f2fa:	e019      	b.n	800f330 <TimerISR_Hook+0x40>
    {
        if(SoftTimer[i].handle !=  0)
 800f2fc:	79fb      	ldrb	r3, [r7, #7]
 800f2fe:	4a11      	ldr	r2, [pc, #68]	; (800f344 <TimerISR_Hook+0x54>)
 800f300:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 800f304:	2b00      	cmp	r3, #0
 800f306:	d010      	beq.n	800f32a <TimerISR_Hook+0x3a>
        {
            if(SoftTimer[i].delay)
 800f308:	79fb      	ldrb	r3, [r7, #7]
 800f30a:	4a0e      	ldr	r2, [pc, #56]	; (800f344 <TimerISR_Hook+0x54>)
 800f30c:	00db      	lsls	r3, r3, #3
 800f30e:	4413      	add	r3, r2
 800f310:	685b      	ldr	r3, [r3, #4]
 800f312:	2b00      	cmp	r3, #0
 800f314:	d009      	beq.n	800f32a <TimerISR_Hook+0x3a>
            {
                SoftTimer[i].delay--;
 800f316:	79fa      	ldrb	r2, [r7, #7]
 800f318:	490a      	ldr	r1, [pc, #40]	; (800f344 <TimerISR_Hook+0x54>)
 800f31a:	00d3      	lsls	r3, r2, #3
 800f31c:	440b      	add	r3, r1
 800f31e:	685b      	ldr	r3, [r3, #4]
 800f320:	1e59      	subs	r1, r3, #1
 800f322:	4808      	ldr	r0, [pc, #32]	; (800f344 <TimerISR_Hook+0x54>)
 800f324:	00d3      	lsls	r3, r2, #3
 800f326:	4403      	add	r3, r0
 800f328:	6059      	str	r1, [r3, #4]
    for(uint8_t i = 1; i < TIMER_ELEMENT_NUM_MAX; i++)
 800f32a:	79fb      	ldrb	r3, [r7, #7]
 800f32c:	3301      	adds	r3, #1
 800f32e:	71fb      	strb	r3, [r7, #7]
 800f330:	79fb      	ldrb	r3, [r7, #7]
 800f332:	2b13      	cmp	r3, #19
 800f334:	d9e2      	bls.n	800f2fc <TimerISR_Hook+0xc>
            }
        }
    }
}
 800f336:	bf00      	nop
 800f338:	bf00      	nop
 800f33a:	370c      	adds	r7, #12
 800f33c:	46bd      	mov	sp, r7
 800f33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f342:	4770      	bx	lr
 800f344:	20020cd4 	.word	0x20020cd4

0800f348 <soft_timer_init>:
//!         - This function must be called first !.
//!         
//
//******************************************************************************************
uint16_t soft_timer_init(void)
{
 800f348:	b480      	push	{r7}
 800f34a:	b083      	sub	sp, #12
 800f34c:	af00      	add	r7, sp, #0
    uint8_t i = 0;
 800f34e:	2300      	movs	r3, #0
 800f350:	71fb      	strb	r3, [r7, #7]

    // Clear All Elements
    for(i = 1; i < TIMER_ELEMENT_NUM_MAX; i++)
 800f352:	2301      	movs	r3, #1
 800f354:	71fb      	strb	r3, [r7, #7]
 800f356:	e00d      	b.n	800f374 <soft_timer_init+0x2c>
    {
        SoftTimer[i].handle    = 0;
 800f358:	79fb      	ldrb	r3, [r7, #7]
 800f35a:	4a0b      	ldr	r2, [pc, #44]	; (800f388 <soft_timer_init+0x40>)
 800f35c:	2100      	movs	r1, #0
 800f35e:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
        SoftTimer[i].delay     = 0;        
 800f362:	79fb      	ldrb	r3, [r7, #7]
 800f364:	4a08      	ldr	r2, [pc, #32]	; (800f388 <soft_timer_init+0x40>)
 800f366:	00db      	lsls	r3, r3, #3
 800f368:	4413      	add	r3, r2
 800f36a:	2200      	movs	r2, #0
 800f36c:	605a      	str	r2, [r3, #4]
    for(i = 1; i < TIMER_ELEMENT_NUM_MAX; i++)
 800f36e:	79fb      	ldrb	r3, [r7, #7]
 800f370:	3301      	adds	r3, #1
 800f372:	71fb      	strb	r3, [r7, #7]
 800f374:	79fb      	ldrb	r3, [r7, #7]
 800f376:	2b13      	cmp	r3, #19
 800f378:	d9ee      	bls.n	800f358 <soft_timer_init+0x10>
    }

    return (SOFT_TIMER_SUCCESS);
 800f37a:	2300      	movs	r3, #0
}
 800f37c:	4618      	mov	r0, r3
 800f37e:	370c      	adds	r7, #12
 800f380:	46bd      	mov	sp, r7
 800f382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f386:	4770      	bx	lr
 800f388:	20020cd4 	.word	0x20020cd4

0800f38c <soft_timer_req>:
//!         - Timer handle only can be used once.
//!         
//
//******************************************************************************************
uint16_t soft_timer_req(uint32_t Tick)
{
 800f38c:	b480      	push	{r7}
 800f38e:	b087      	sub	sp, #28
 800f390:	af00      	add	r7, sp, #0
 800f392:	6078      	str	r0, [r7, #4]
    uint8_t i = 0;
 800f394:	2300      	movs	r3, #0
 800f396:	75fb      	strb	r3, [r7, #23]

    for (i = 1; i < TIMER_ELEMENT_NUM_MAX; i++)
 800f398:	2301      	movs	r3, #1
 800f39a:	75fb      	strb	r3, [r7, #23]
 800f39c:	e024      	b.n	800f3e8 <soft_timer_req+0x5c>
    {
        if (SoftTimer[i].handle == 0)
 800f39e:	7dfb      	ldrb	r3, [r7, #23]
 800f3a0:	4a16      	ldr	r2, [pc, #88]	; (800f3fc <soft_timer_req+0x70>)
 800f3a2:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d11b      	bne.n	800f3e2 <soft_timer_req+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800f3aa:	f3ef 8310 	mrs	r3, PRIMASK
 800f3ae:	60bb      	str	r3, [r7, #8]
  return(result);
 800f3b0:	68bb      	ldr	r3, [r7, #8]
        {
            CRITICAL_SETCION_ENTER();
 800f3b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800f3b4:	b672      	cpsid	i
}
 800f3b6:	bf00      	nop

            SoftTimer[i].handle    = i;
 800f3b8:	7dfb      	ldrb	r3, [r7, #23]
 800f3ba:	7dfa      	ldrb	r2, [r7, #23]
 800f3bc:	b291      	uxth	r1, r2
 800f3be:	4a0f      	ldr	r2, [pc, #60]	; (800f3fc <soft_timer_req+0x70>)
 800f3c0:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
            SoftTimer[i].delay     = Tick;            
 800f3c4:	7dfb      	ldrb	r3, [r7, #23]
 800f3c6:	4a0d      	ldr	r2, [pc, #52]	; (800f3fc <soft_timer_req+0x70>)
 800f3c8:	00db      	lsls	r3, r3, #3
 800f3ca:	4413      	add	r3, r2
 800f3cc:	687a      	ldr	r2, [r7, #4]
 800f3ce:	605a      	str	r2, [r3, #4]
 800f3d0:	693b      	ldr	r3, [r7, #16]
 800f3d2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	f383 8810 	msr	PRIMASK, r3
}
 800f3da:	bf00      	nop

            CRITICAL_SETCION_EXIT();

            return (i);
 800f3dc:	7dfb      	ldrb	r3, [r7, #23]
 800f3de:	b29b      	uxth	r3, r3
 800f3e0:	e006      	b.n	800f3f0 <soft_timer_req+0x64>
    for (i = 1; i < TIMER_ELEMENT_NUM_MAX; i++)
 800f3e2:	7dfb      	ldrb	r3, [r7, #23]
 800f3e4:	3301      	adds	r3, #1
 800f3e6:	75fb      	strb	r3, [r7, #23]
 800f3e8:	7dfb      	ldrb	r3, [r7, #23]
 800f3ea:	2b13      	cmp	r3, #19
 800f3ec:	d9d7      	bls.n	800f39e <soft_timer_req+0x12>
        }
    }

    return (0);
 800f3ee:	2300      	movs	r3, #0
}
 800f3f0:	4618      	mov	r0, r3
 800f3f2:	371c      	adds	r7, #28
 800f3f4:	46bd      	mov	sp, r7
 800f3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3fa:	4770      	bx	lr
 800f3fc:	20020cd4 	.word	0x20020cd4

0800f400 <soft_timer_update>:
//!         - Non-Zero                 failure
//!         
//
//******************************************************************************************
uint16_t soft_timer_update(uint32_t Id, uint32_t Tick)
{
 800f400:	b480      	push	{r7}
 800f402:	b087      	sub	sp, #28
 800f404:	af00      	add	r7, sp, #0
 800f406:	6078      	str	r0, [r7, #4]
 800f408:	6039      	str	r1, [r7, #0]
    for (uint8_t i = 1; i < TIMER_ELEMENT_NUM_MAX; i++)
 800f40a:	2301      	movs	r3, #1
 800f40c:	75fb      	strb	r3, [r7, #23]
 800f40e:	e01f      	b.n	800f450 <soft_timer_update+0x50>
    {
        if (SoftTimer[i].handle == Id)
 800f410:	7dfb      	ldrb	r3, [r7, #23]
 800f412:	4a14      	ldr	r2, [pc, #80]	; (800f464 <soft_timer_update+0x64>)
 800f414:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 800f418:	461a      	mov	r2, r3
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	4293      	cmp	r3, r2
 800f41e:	d114      	bne.n	800f44a <soft_timer_update+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800f420:	f3ef 8310 	mrs	r3, PRIMASK
 800f424:	60bb      	str	r3, [r7, #8]
  return(result);
 800f426:	68bb      	ldr	r3, [r7, #8]
        {
            CRITICAL_SETCION_ENTER();
 800f428:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800f42a:	b672      	cpsid	i
}
 800f42c:	bf00      	nop

            SoftTimer[i].delay = Tick;
 800f42e:	7dfb      	ldrb	r3, [r7, #23]
 800f430:	4a0c      	ldr	r2, [pc, #48]	; (800f464 <soft_timer_update+0x64>)
 800f432:	00db      	lsls	r3, r3, #3
 800f434:	4413      	add	r3, r2
 800f436:	683a      	ldr	r2, [r7, #0]
 800f438:	605a      	str	r2, [r3, #4]
 800f43a:	693b      	ldr	r3, [r7, #16]
 800f43c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	f383 8810 	msr	PRIMASK, r3
}
 800f444:	bf00      	nop

            CRITICAL_SETCION_EXIT();

            // Success
            return (0);
 800f446:	2300      	movs	r3, #0
 800f448:	e006      	b.n	800f458 <soft_timer_update+0x58>
    for (uint8_t i = 1; i < TIMER_ELEMENT_NUM_MAX; i++)
 800f44a:	7dfb      	ldrb	r3, [r7, #23]
 800f44c:	3301      	adds	r3, #1
 800f44e:	75fb      	strb	r3, [r7, #23]
 800f450:	7dfb      	ldrb	r3, [r7, #23]
 800f452:	2b13      	cmp	r3, #19
 800f454:	d9dc      	bls.n	800f410 <soft_timer_update+0x10>
        }
    }

    // Failure
    return (1);
 800f456:	2301      	movs	r3, #1
}
 800f458:	4618      	mov	r0, r3
 800f45a:	371c      	adds	r7, #28
 800f45c:	46bd      	mov	sp, r7
 800f45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f462:	4770      	bx	lr
 800f464:	20020cd4 	.word	0x20020cd4

0800f468 <soft_timer_check>:
//!         - Timer handle only can be used once.
//!         
//
//******************************************************************************************
uint16_t soft_timer_check(uint16_t Handle)
{    
 800f468:	b480      	push	{r7}
 800f46a:	b087      	sub	sp, #28
 800f46c:	af00      	add	r7, sp, #0
 800f46e:	4603      	mov	r3, r0
 800f470:	80fb      	strh	r3, [r7, #6]
    uint16_t retval = SOFT_TIMER_ERR;
 800f472:	2303      	movs	r3, #3
 800f474:	82fb      	strh	r3, [r7, #22]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800f476:	f3ef 8310 	mrs	r3, PRIMASK
 800f47a:	60fb      	str	r3, [r7, #12]
  return(result);
 800f47c:	68fb      	ldr	r3, [r7, #12]

    CRITICAL_SETCION_ENTER();    
 800f47e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800f480:	b672      	cpsid	i
}
 800f482:	bf00      	nop
    if(SoftTimer[Handle].handle ==  Handle)
 800f484:	88fb      	ldrh	r3, [r7, #6]
 800f486:	4a0f      	ldr	r2, [pc, #60]	; (800f4c4 <soft_timer_check+0x5c>)
 800f488:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 800f48c:	88fa      	ldrh	r2, [r7, #6]
 800f48e:	429a      	cmp	r2, r3
 800f490:	d10b      	bne.n	800f4aa <soft_timer_check+0x42>
    {
        if(SoftTimer[Handle].delay)
 800f492:	88fb      	ldrh	r3, [r7, #6]
 800f494:	4a0b      	ldr	r2, [pc, #44]	; (800f4c4 <soft_timer_check+0x5c>)
 800f496:	00db      	lsls	r3, r3, #3
 800f498:	4413      	add	r3, r2
 800f49a:	685b      	ldr	r3, [r3, #4]
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d002      	beq.n	800f4a6 <soft_timer_check+0x3e>
        {
            retval = SOFT_TIMER_ING;
 800f4a0:	2301      	movs	r3, #1
 800f4a2:	82fb      	strh	r3, [r7, #22]
 800f4a4:	e001      	b.n	800f4aa <soft_timer_check+0x42>
        }
        else
        {
            retval = SOFT_TIMER_TIMEOUT;
 800f4a6:	2302      	movs	r3, #2
 800f4a8:	82fb      	strh	r3, [r7, #22]
 800f4aa:	693b      	ldr	r3, [r7, #16]
 800f4ac:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f4ae:	68bb      	ldr	r3, [r7, #8]
 800f4b0:	f383 8810 	msr	PRIMASK, r3
}
 800f4b4:	bf00      	nop
        }
    }
    CRITICAL_SETCION_EXIT();

    return (retval);
 800f4b6:	8afb      	ldrh	r3, [r7, #22]
}
 800f4b8:	4618      	mov	r0, r3
 800f4ba:	371c      	adds	r7, #28
 800f4bc:	46bd      	mov	sp, r7
 800f4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c2:	4770      	bx	lr
 800f4c4:	20020cd4 	.word	0x20020cd4

0800f4c8 <usb_vcp_init>:
uint8_t usb_tx_fifo_buff[APP_TX_DATA_SIZE];
static usb_vcp_call_back_f usb_vcp_call_back[USB_REC_MAX_NUM];

static bool _fifo_flush_running = false;

void usb_vcp_init(bool use_fifo) {
 800f4c8:	b580      	push	{r7, lr}
 800f4ca:	b082      	sub	sp, #8
 800f4cc:	af00      	add	r7, sp, #0
 800f4ce:	4603      	mov	r3, r0
 800f4d0:	71fb      	strb	r3, [r7, #7]
  if (use_fifo) {
 800f4d2:	79fb      	ldrb	r3, [r7, #7]
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d003      	beq.n	800f4e0 <usb_vcp_init+0x18>
    _usb_vcp_use_fifo = true;
 800f4d8:	4b0f      	ldr	r3, [pc, #60]	; (800f518 <usb_vcp_init+0x50>)
 800f4da:	2201      	movs	r2, #1
 800f4dc:	701a      	strb	r2, [r3, #0]
 800f4de:	e002      	b.n	800f4e6 <usb_vcp_init+0x1e>
  } else {
    _usb_vcp_use_fifo = false;
 800f4e0:	4b0d      	ldr	r3, [pc, #52]	; (800f518 <usb_vcp_init+0x50>)
 800f4e2:	2200      	movs	r2, #0
 800f4e4:	701a      	strb	r2, [r3, #0]
  }
  if (_usb_vcp_use_fifo) {
 800f4e6:	4b0c      	ldr	r3, [pc, #48]	; (800f518 <usb_vcp_init+0x50>)
 800f4e8:	781b      	ldrb	r3, [r3, #0]
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d00f      	beq.n	800f50e <usb_vcp_init+0x46>
    fifo_s_init(&usb_tx_fifo, usb_tx_fifo_buff, 4096);
 800f4ee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f4f2:	490a      	ldr	r1, [pc, #40]	; (800f51c <usb_vcp_init+0x54>)
 800f4f4:	480a      	ldr	r0, [pc, #40]	; (800f520 <usb_vcp_init+0x58>)
 800f4f6:	f7ff f93e 	bl	800e776 <fifo_s_init>
    if (!_fifo_flush_running) {
 800f4fa:	4b0a      	ldr	r3, [pc, #40]	; (800f524 <usb_vcp_init+0x5c>)
 800f4fc:	781b      	ldrb	r3, [r3, #0]
 800f4fe:	f083 0301 	eor.w	r3, r3, #1
 800f502:	b2db      	uxtb	r3, r3
 800f504:	2b00      	cmp	r3, #0
 800f506:	d002      	beq.n	800f50e <usb_vcp_init+0x46>
      // tx_flush_init(); // Run Fifo thread here.
      _fifo_flush_running = true;
 800f508:	4b06      	ldr	r3, [pc, #24]	; (800f524 <usb_vcp_init+0x5c>)
 800f50a:	2201      	movs	r2, #1
 800f50c:	701a      	strb	r2, [r3, #0]
    }
  }
}
 800f50e:	bf00      	nop
 800f510:	3708      	adds	r7, #8
 800f512:	46bd      	mov	sp, r7
 800f514:	bd80      	pop	{r7, pc}
 800f516:	bf00      	nop
 800f518:	200000fe 	.word	0x200000fe
 800f51c:	20020d90 	.word	0x20020d90
 800f520:	20020d78 	.word	0x20020d78
 800f524:	20021da4 	.word	0x20021da4

0800f528 <usb_vcp_receive_processing>:

void usb_vcp_receive_processing(uint8_t *Buf, uint32_t *Len) {
 800f528:	b580      	push	{r7, lr}
 800f52a:	b084      	sub	sp, #16
 800f52c:	af00      	add	r7, sp, #0
 800f52e:	6078      	str	r0, [r7, #4]
 800f530:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < USB_REC_MAX_NUM; i++) {
 800f532:	2300      	movs	r3, #0
 800f534:	60fb      	str	r3, [r7, #12]
 800f536:	e011      	b.n	800f55c <usb_vcp_receive_processing+0x34>
    if (usb_vcp_call_back[i] != NULL) {
 800f538:	4a0f      	ldr	r2, [pc, #60]	; (800f578 <usb_vcp_receive_processing+0x50>)
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f540:	2b00      	cmp	r3, #0
 800f542:	d008      	beq.n	800f556 <usb_vcp_receive_processing+0x2e>
      (*usb_vcp_call_back[i])(Buf, *Len);
 800f544:	4a0c      	ldr	r2, [pc, #48]	; (800f578 <usb_vcp_receive_processing+0x50>)
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f54c:	683a      	ldr	r2, [r7, #0]
 800f54e:	6812      	ldr	r2, [r2, #0]
 800f550:	4611      	mov	r1, r2
 800f552:	6878      	ldr	r0, [r7, #4]
 800f554:	4798      	blx	r3
  for (int i = 0; i < USB_REC_MAX_NUM; i++) {
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	3301      	adds	r3, #1
 800f55a:	60fb      	str	r3, [r7, #12]
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	2b04      	cmp	r3, #4
 800f560:	ddea      	ble.n	800f538 <usb_vcp_receive_processing+0x10>
    }
  }
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f562:	6879      	ldr	r1, [r7, #4]
 800f564:	4805      	ldr	r0, [pc, #20]	; (800f57c <usb_vcp_receive_processing+0x54>)
 800f566:	f7f9 fa6b 	bl	8008a40 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f56a:	4804      	ldr	r0, [pc, #16]	; (800f57c <usb_vcp_receive_processing+0x54>)
 800f56c:	f7f9 fac6 	bl	8008afc <USBD_CDC_ReceivePacket>
  return;
 800f570:	bf00      	nop
}
 800f572:	3710      	adds	r7, #16
 800f574:	46bd      	mov	sp, r7
 800f576:	bd80      	pop	{r7, pc}
 800f578:	20021d90 	.word	0x20021d90
 800f57c:	2000f630 	.word	0x2000f630

0800f580 <usb_vcp_transmit_callback_processing>:

int8_t usb_vcp_transmit_callback_processing(
    uint8_t *Buf, uint32_t *Len) { // This function may not really work
 800f580:	b480      	push	{r7}
 800f582:	b083      	sub	sp, #12
 800f584:	af00      	add	r7, sp, #0
 800f586:	6078      	str	r0, [r7, #4]
 800f588:	6039      	str	r1, [r7, #0]
  //  //Untested so commented out to prevent issue.
  //  if (_usb_tx_need_flushing) {
  //	usb_tx_flush(NULL);
  //  }
  return USBD_OK;
 800f58a:	2300      	movs	r3, #0
}
 800f58c:	4618      	mov	r0, r3
 800f58e:	370c      	adds	r7, #12
 800f590:	46bd      	mov	sp, r7
 800f592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f596:	4770      	bx	lr

0800f598 <usb_vcp_tx_write_fifo>:
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
  return result;
}

void usb_vcp_tx_write_fifo(uint8_t *Buf, uint16_t Len) {
 800f598:	b580      	push	{r7, lr}
 800f59a:	b082      	sub	sp, #8
 800f59c:	af00      	add	r7, sp, #0
 800f59e:	6078      	str	r0, [r7, #4]
 800f5a0:	460b      	mov	r3, r1
 800f5a2:	807b      	strh	r3, [r7, #2]
  if (Len > 0) {
 800f5a4:	887b      	ldrh	r3, [r7, #2]
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d009      	beq.n	800f5be <usb_vcp_tx_write_fifo+0x26>
    fifo_s_puts(&usb_tx_fifo, (char *)Buf, Len);
 800f5aa:	887b      	ldrh	r3, [r7, #2]
 800f5ac:	461a      	mov	r2, r3
 800f5ae:	6879      	ldr	r1, [r7, #4]
 800f5b0:	4805      	ldr	r0, [pc, #20]	; (800f5c8 <usb_vcp_tx_write_fifo+0x30>)
 800f5b2:	f7ff f902 	bl	800e7ba <fifo_s_puts>
    set_usb_tx_need_flushing(true);
 800f5b6:	2001      	movs	r0, #1
 800f5b8:	f000 f82c 	bl	800f614 <set_usb_tx_need_flushing>
  }
  return;
 800f5bc:	bf00      	nop
 800f5be:	bf00      	nop
}
 800f5c0:	3708      	adds	r7, #8
 800f5c2:	46bd      	mov	sp, r7
 800f5c4:	bd80      	pop	{r7, pc}
 800f5c6:	bf00      	nop
 800f5c8:	20020d78 	.word	0x20020d78

0800f5cc <usb_vcp_rx_callback_register>:
  fifo_s_puts(&usb_tx_fifo, (char *)Buf, Len);
  usb_tx_flush(NULL);
  return USBD_OK;
}

int32_t usb_vcp_rx_callback_register(usb_vcp_call_back_f fun) {
 800f5cc:	b480      	push	{r7}
 800f5ce:	b085      	sub	sp, #20
 800f5d0:	af00      	add	r7, sp, #0
 800f5d2:	6078      	str	r0, [r7, #4]
  for (int i = 0; i < USB_REC_MAX_NUM; i++) {
 800f5d4:	2300      	movs	r3, #0
 800f5d6:	60fb      	str	r3, [r7, #12]
 800f5d8:	e00f      	b.n	800f5fa <usb_vcp_rx_callback_register+0x2e>
    if (usb_vcp_call_back[i] == NULL) {
 800f5da:	4a0d      	ldr	r2, [pc, #52]	; (800f610 <usb_vcp_rx_callback_register+0x44>)
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d106      	bne.n	800f5f4 <usb_vcp_rx_callback_register+0x28>
      usb_vcp_call_back[i] = fun;
 800f5e6:	490a      	ldr	r1, [pc, #40]	; (800f610 <usb_vcp_rx_callback_register+0x44>)
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	687a      	ldr	r2, [r7, #4]
 800f5ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      return USBD_OK;
 800f5f0:	2300      	movs	r3, #0
 800f5f2:	e006      	b.n	800f602 <usb_vcp_rx_callback_register+0x36>
  for (int i = 0; i < USB_REC_MAX_NUM; i++) {
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	3301      	adds	r3, #1
 800f5f8:	60fb      	str	r3, [r7, #12]
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	2b04      	cmp	r3, #4
 800f5fe:	ddec      	ble.n	800f5da <usb_vcp_rx_callback_register+0xe>
    }
  }
  return USBD_FAIL;
 800f600:	2303      	movs	r3, #3
}
 800f602:	4618      	mov	r0, r3
 800f604:	3714      	adds	r7, #20
 800f606:	46bd      	mov	sp, r7
 800f608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f60c:	4770      	bx	lr
 800f60e:	bf00      	nop
 800f610:	20021d90 	.word	0x20021d90

0800f614 <set_usb_tx_need_flushing>:

void set_usb_tx_need_flushing(bool value) {
 800f614:	b490      	push	{r4, r7}
 800f616:	b084      	sub	sp, #16
 800f618:	af00      	add	r7, sp, #0
 800f61a:	4603      	mov	r3, r0
 800f61c:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800f61e:	f3ef 8310 	mrs	r3, PRIMASK
 800f622:	60bb      	str	r3, [r7, #8]
  return(result);
 800f624:	68bb      	ldr	r3, [r7, #8]
  FIFO_CPU_SR_TYPE cpu_sr =
      FIFO_GET_CPU_SR(); // todo Change to your own mutex here
 800f626:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 800f628:	b672      	cpsid	i
}
 800f62a:	bf00      	nop
  FIFO_ENTER_CRITICAL();
  _usb_tx_need_flushing = value;
 800f62c:	4a06      	ldr	r2, [pc, #24]	; (800f648 <set_usb_tx_need_flushing+0x34>)
 800f62e:	79fb      	ldrb	r3, [r7, #7]
 800f630:	7013      	strb	r3, [r2, #0]
 800f632:	60fc      	str	r4, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	f383 8810 	msr	PRIMASK, r3
}
 800f63a:	bf00      	nop
  FIFO_RESTORE_CPU_SR(cpu_sr);
}
 800f63c:	bf00      	nop
 800f63e:	3710      	adds	r7, #16
 800f640:	46bd      	mov	sp, r7
 800f642:	bc90      	pop	{r4, r7}
 800f644:	4770      	bx	lr
 800f646:	bf00      	nop
 800f648:	20020d74 	.word	0x20020d74

0800f64c <usb_tx_flush>:

int32_t usb_tx_flush(void *argc) {
 800f64c:	b590      	push	{r4, r7, lr}
 800f64e:	b089      	sub	sp, #36	; 0x24
 800f650:	af00      	add	r7, sp, #0
 800f652:	6078      	str	r0, [r7, #4]
  uint8_t result = USBD_OK;
 800f654:	2300      	movs	r3, #0
 800f656:	77fb      	strb	r3, [r7, #31]
  USBD_CDC_HandleTypeDef *hcdc =
 800f658:	4b1a      	ldr	r3, [pc, #104]	; (800f6c4 <usb_tx_flush+0x78>)
 800f65a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f65e:	61bb      	str	r3, [r7, #24]
      (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassData;

  if (hcdc->TxState != 0) {
 800f660:	69bb      	ldr	r3, [r7, #24]
 800f662:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f666:	2b00      	cmp	r3, #0
 800f668:	d004      	beq.n	800f674 <usb_tx_flush+0x28>
    set_usb_tx_need_flushing(true);
 800f66a:	2001      	movs	r0, #1
 800f66c:	f7ff ffd2 	bl	800f614 <set_usb_tx_need_flushing>
    return USBD_BUSY;
 800f670:	2301      	movs	r3, #1
 800f672:	e022      	b.n	800f6ba <usb_tx_flush+0x6e>
  } else {
    set_usb_tx_need_flushing(false);
 800f674:	2000      	movs	r0, #0
 800f676:	f7ff ffcd 	bl	800f614 <set_usb_tx_need_flushing>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800f67a:	f3ef 8310 	mrs	r3, PRIMASK
 800f67e:	60fb      	str	r3, [r7, #12]
  return(result);
 800f680:	68fb      	ldr	r3, [r7, #12]
    uint32_t send_num;

    FIFO_CPU_SR_TYPE cpu_sr = FIFO_GET_CPU_SR();
 800f682:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 800f684:	b672      	cpsid	i
}
 800f686:	bf00      	nop
    FIFO_ENTER_CRITICAL();
    send_num = usb_tx_fifo.used_num;
 800f688:	4b0f      	ldr	r3, [pc, #60]	; (800f6c8 <usb_tx_flush+0x7c>)
 800f68a:	68db      	ldr	r3, [r3, #12]
 800f68c:	617b      	str	r3, [r7, #20]
    fifo_s_gets_noprotect(&usb_tx_fifo, (char *)UserTxBufferFS, send_num);
 800f68e:	697b      	ldr	r3, [r7, #20]
 800f690:	461a      	mov	r2, r3
 800f692:	490e      	ldr	r1, [pc, #56]	; (800f6cc <usb_tx_flush+0x80>)
 800f694:	480c      	ldr	r0, [pc, #48]	; (800f6c8 <usb_tx_flush+0x7c>)
 800f696:	f7ff fa2a 	bl	800eaee <fifo_s_gets_noprotect>
 800f69a:	613c      	str	r4, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f69c:	693b      	ldr	r3, [r7, #16]
 800f69e:	f383 8810 	msr	PRIMASK, r3
}
 800f6a2:	bf00      	nop
    FIFO_RESTORE_CPU_SR(cpu_sr);

    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, send_num);
 800f6a4:	697a      	ldr	r2, [r7, #20]
 800f6a6:	4909      	ldr	r1, [pc, #36]	; (800f6cc <usb_tx_flush+0x80>)
 800f6a8:	4806      	ldr	r0, [pc, #24]	; (800f6c4 <usb_tx_flush+0x78>)
 800f6aa:	f7f9 f9a7 	bl	80089fc <USBD_CDC_SetTxBuffer>
    result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800f6ae:	4805      	ldr	r0, [pc, #20]	; (800f6c4 <usb_tx_flush+0x78>)
 800f6b0:	f7f9 f9e4 	bl	8008a7c <USBD_CDC_TransmitPacket>
 800f6b4:	4603      	mov	r3, r0
 800f6b6:	77fb      	strb	r3, [r7, #31]
    return result;
 800f6b8:	7ffb      	ldrb	r3, [r7, #31]
  }
}
 800f6ba:	4618      	mov	r0, r3
 800f6bc:	3724      	adds	r7, #36	; 0x24
 800f6be:	46bd      	mov	sp, r7
 800f6c0:	bd90      	pop	{r4, r7, pc}
 800f6c2:	bf00      	nop
 800f6c4:	2000f630 	.word	0x2000f630
 800f6c8:	20020d78 	.word	0x20020d78
 800f6cc:	2001010c 	.word	0x2001010c

0800f6d0 <usb_tx_flush_run>:

int32_t usb_tx_flush_run(void *argc) {
 800f6d0:	b580      	push	{r7, lr}
 800f6d2:	b082      	sub	sp, #8
 800f6d4:	af00      	add	r7, sp, #0
 800f6d6:	6078      	str	r0, [r7, #4]
  if (_usb_tx_need_flushing) {
 800f6d8:	4b05      	ldr	r3, [pc, #20]	; (800f6f0 <usb_tx_flush_run+0x20>)
 800f6da:	781b      	ldrb	r3, [r3, #0]
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d002      	beq.n	800f6e6 <usb_tx_flush_run+0x16>
    usb_tx_flush(NULL);
 800f6e0:	2000      	movs	r0, #0
 800f6e2:	f7ff ffb3 	bl	800f64c <usb_tx_flush>
  }
  return 0;
 800f6e6:	2300      	movs	r3, #0
}
 800f6e8:	4618      	mov	r0, r3
 800f6ea:	3708      	adds	r7, #8
 800f6ec:	46bd      	mov	sp, r7
 800f6ee:	bd80      	pop	{r7, pc}
 800f6f0:	20020d74 	.word	0x20020d74

0800f6f4 <__malloc_lock>:
 800f6f4:	4801      	ldr	r0, [pc, #4]	; (800f6fc <__malloc_lock+0x8>)
 800f6f6:	f000 b8b1 	b.w	800f85c <__retarget_lock_acquire_recursive>
 800f6fa:	bf00      	nop
 800f6fc:	20021ee4 	.word	0x20021ee4

0800f700 <__malloc_unlock>:
 800f700:	4801      	ldr	r0, [pc, #4]	; (800f708 <__malloc_unlock+0x8>)
 800f702:	f000 b8ac 	b.w	800f85e <__retarget_lock_release_recursive>
 800f706:	bf00      	nop
 800f708:	20021ee4 	.word	0x20021ee4

0800f70c <strncmp>:
 800f70c:	b510      	push	{r4, lr}
 800f70e:	b16a      	cbz	r2, 800f72c <strncmp+0x20>
 800f710:	3901      	subs	r1, #1
 800f712:	1884      	adds	r4, r0, r2
 800f714:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f718:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f71c:	429a      	cmp	r2, r3
 800f71e:	d103      	bne.n	800f728 <strncmp+0x1c>
 800f720:	42a0      	cmp	r0, r4
 800f722:	d001      	beq.n	800f728 <strncmp+0x1c>
 800f724:	2a00      	cmp	r2, #0
 800f726:	d1f5      	bne.n	800f714 <strncmp+0x8>
 800f728:	1ad0      	subs	r0, r2, r3
 800f72a:	bd10      	pop	{r4, pc}
 800f72c:	4610      	mov	r0, r2
 800f72e:	e7fc      	b.n	800f72a <strncmp+0x1e>

0800f730 <strncpy>:
 800f730:	b510      	push	{r4, lr}
 800f732:	3901      	subs	r1, #1
 800f734:	4603      	mov	r3, r0
 800f736:	b132      	cbz	r2, 800f746 <strncpy+0x16>
 800f738:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f73c:	f803 4b01 	strb.w	r4, [r3], #1
 800f740:	3a01      	subs	r2, #1
 800f742:	2c00      	cmp	r4, #0
 800f744:	d1f7      	bne.n	800f736 <strncpy+0x6>
 800f746:	441a      	add	r2, r3
 800f748:	2100      	movs	r1, #0
 800f74a:	4293      	cmp	r3, r2
 800f74c:	d100      	bne.n	800f750 <strncpy+0x20>
 800f74e:	bd10      	pop	{r4, pc}
 800f750:	f803 1b01 	strb.w	r1, [r3], #1
 800f754:	e7f9      	b.n	800f74a <strncpy+0x1a>

0800f756 <memset>:
 800f756:	4402      	add	r2, r0
 800f758:	4603      	mov	r3, r0
 800f75a:	4293      	cmp	r3, r2
 800f75c:	d100      	bne.n	800f760 <memset+0xa>
 800f75e:	4770      	bx	lr
 800f760:	f803 1b01 	strb.w	r1, [r3], #1
 800f764:	e7f9      	b.n	800f75a <memset+0x4>
	...

0800f768 <_reclaim_reent>:
 800f768:	4b29      	ldr	r3, [pc, #164]	; (800f810 <_reclaim_reent+0xa8>)
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	4283      	cmp	r3, r0
 800f76e:	b570      	push	{r4, r5, r6, lr}
 800f770:	4604      	mov	r4, r0
 800f772:	d04b      	beq.n	800f80c <_reclaim_reent+0xa4>
 800f774:	69c3      	ldr	r3, [r0, #28]
 800f776:	b143      	cbz	r3, 800f78a <_reclaim_reent+0x22>
 800f778:	68db      	ldr	r3, [r3, #12]
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d144      	bne.n	800f808 <_reclaim_reent+0xa0>
 800f77e:	69e3      	ldr	r3, [r4, #28]
 800f780:	6819      	ldr	r1, [r3, #0]
 800f782:	b111      	cbz	r1, 800f78a <_reclaim_reent+0x22>
 800f784:	4620      	mov	r0, r4
 800f786:	f000 f879 	bl	800f87c <_free_r>
 800f78a:	6961      	ldr	r1, [r4, #20]
 800f78c:	b111      	cbz	r1, 800f794 <_reclaim_reent+0x2c>
 800f78e:	4620      	mov	r0, r4
 800f790:	f000 f874 	bl	800f87c <_free_r>
 800f794:	69e1      	ldr	r1, [r4, #28]
 800f796:	b111      	cbz	r1, 800f79e <_reclaim_reent+0x36>
 800f798:	4620      	mov	r0, r4
 800f79a:	f000 f86f 	bl	800f87c <_free_r>
 800f79e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800f7a0:	b111      	cbz	r1, 800f7a8 <_reclaim_reent+0x40>
 800f7a2:	4620      	mov	r0, r4
 800f7a4:	f000 f86a 	bl	800f87c <_free_r>
 800f7a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f7aa:	b111      	cbz	r1, 800f7b2 <_reclaim_reent+0x4a>
 800f7ac:	4620      	mov	r0, r4
 800f7ae:	f000 f865 	bl	800f87c <_free_r>
 800f7b2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f7b4:	b111      	cbz	r1, 800f7bc <_reclaim_reent+0x54>
 800f7b6:	4620      	mov	r0, r4
 800f7b8:	f000 f860 	bl	800f87c <_free_r>
 800f7bc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f7be:	b111      	cbz	r1, 800f7c6 <_reclaim_reent+0x5e>
 800f7c0:	4620      	mov	r0, r4
 800f7c2:	f000 f85b 	bl	800f87c <_free_r>
 800f7c6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800f7c8:	b111      	cbz	r1, 800f7d0 <_reclaim_reent+0x68>
 800f7ca:	4620      	mov	r0, r4
 800f7cc:	f000 f856 	bl	800f87c <_free_r>
 800f7d0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800f7d2:	b111      	cbz	r1, 800f7da <_reclaim_reent+0x72>
 800f7d4:	4620      	mov	r0, r4
 800f7d6:	f000 f851 	bl	800f87c <_free_r>
 800f7da:	6a23      	ldr	r3, [r4, #32]
 800f7dc:	b1b3      	cbz	r3, 800f80c <_reclaim_reent+0xa4>
 800f7de:	4620      	mov	r0, r4
 800f7e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f7e4:	4718      	bx	r3
 800f7e6:	5949      	ldr	r1, [r1, r5]
 800f7e8:	b941      	cbnz	r1, 800f7fc <_reclaim_reent+0x94>
 800f7ea:	3504      	adds	r5, #4
 800f7ec:	69e3      	ldr	r3, [r4, #28]
 800f7ee:	2d80      	cmp	r5, #128	; 0x80
 800f7f0:	68d9      	ldr	r1, [r3, #12]
 800f7f2:	d1f8      	bne.n	800f7e6 <_reclaim_reent+0x7e>
 800f7f4:	4620      	mov	r0, r4
 800f7f6:	f000 f841 	bl	800f87c <_free_r>
 800f7fa:	e7c0      	b.n	800f77e <_reclaim_reent+0x16>
 800f7fc:	680e      	ldr	r6, [r1, #0]
 800f7fe:	4620      	mov	r0, r4
 800f800:	f000 f83c 	bl	800f87c <_free_r>
 800f804:	4631      	mov	r1, r6
 800f806:	e7ef      	b.n	800f7e8 <_reclaim_reent+0x80>
 800f808:	2500      	movs	r5, #0
 800f80a:	e7ef      	b.n	800f7ec <_reclaim_reent+0x84>
 800f80c:	bd70      	pop	{r4, r5, r6, pc}
 800f80e:	bf00      	nop
 800f810:	2000014c 	.word	0x2000014c

0800f814 <__libc_init_array>:
 800f814:	b570      	push	{r4, r5, r6, lr}
 800f816:	4d0d      	ldr	r5, [pc, #52]	; (800f84c <__libc_init_array+0x38>)
 800f818:	4c0d      	ldr	r4, [pc, #52]	; (800f850 <__libc_init_array+0x3c>)
 800f81a:	1b64      	subs	r4, r4, r5
 800f81c:	10a4      	asrs	r4, r4, #2
 800f81e:	2600      	movs	r6, #0
 800f820:	42a6      	cmp	r6, r4
 800f822:	d109      	bne.n	800f838 <__libc_init_array+0x24>
 800f824:	4d0b      	ldr	r5, [pc, #44]	; (800f854 <__libc_init_array+0x40>)
 800f826:	4c0c      	ldr	r4, [pc, #48]	; (800f858 <__libc_init_array+0x44>)
 800f828:	f000 f874 	bl	800f914 <_init>
 800f82c:	1b64      	subs	r4, r4, r5
 800f82e:	10a4      	asrs	r4, r4, #2
 800f830:	2600      	movs	r6, #0
 800f832:	42a6      	cmp	r6, r4
 800f834:	d105      	bne.n	800f842 <__libc_init_array+0x2e>
 800f836:	bd70      	pop	{r4, r5, r6, pc}
 800f838:	f855 3b04 	ldr.w	r3, [r5], #4
 800f83c:	4798      	blx	r3
 800f83e:	3601      	adds	r6, #1
 800f840:	e7ee      	b.n	800f820 <__libc_init_array+0xc>
 800f842:	f855 3b04 	ldr.w	r3, [r5], #4
 800f846:	4798      	blx	r3
 800f848:	3601      	adds	r6, #1
 800f84a:	e7f2      	b.n	800f832 <__libc_init_array+0x1e>
 800f84c:	0801036c 	.word	0x0801036c
 800f850:	0801036c 	.word	0x0801036c
 800f854:	0801036c 	.word	0x0801036c
 800f858:	08010370 	.word	0x08010370

0800f85c <__retarget_lock_acquire_recursive>:
 800f85c:	4770      	bx	lr

0800f85e <__retarget_lock_release_recursive>:
 800f85e:	4770      	bx	lr

0800f860 <memcpy>:
 800f860:	440a      	add	r2, r1
 800f862:	4291      	cmp	r1, r2
 800f864:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800f868:	d100      	bne.n	800f86c <memcpy+0xc>
 800f86a:	4770      	bx	lr
 800f86c:	b510      	push	{r4, lr}
 800f86e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f872:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f876:	4291      	cmp	r1, r2
 800f878:	d1f9      	bne.n	800f86e <memcpy+0xe>
 800f87a:	bd10      	pop	{r4, pc}

0800f87c <_free_r>:
 800f87c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f87e:	2900      	cmp	r1, #0
 800f880:	d044      	beq.n	800f90c <_free_r+0x90>
 800f882:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f886:	9001      	str	r0, [sp, #4]
 800f888:	2b00      	cmp	r3, #0
 800f88a:	f1a1 0404 	sub.w	r4, r1, #4
 800f88e:	bfb8      	it	lt
 800f890:	18e4      	addlt	r4, r4, r3
 800f892:	f7ff ff2f 	bl	800f6f4 <__malloc_lock>
 800f896:	4a1e      	ldr	r2, [pc, #120]	; (800f910 <_free_r+0x94>)
 800f898:	9801      	ldr	r0, [sp, #4]
 800f89a:	6813      	ldr	r3, [r2, #0]
 800f89c:	b933      	cbnz	r3, 800f8ac <_free_r+0x30>
 800f89e:	6063      	str	r3, [r4, #4]
 800f8a0:	6014      	str	r4, [r2, #0]
 800f8a2:	b003      	add	sp, #12
 800f8a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f8a8:	f7ff bf2a 	b.w	800f700 <__malloc_unlock>
 800f8ac:	42a3      	cmp	r3, r4
 800f8ae:	d908      	bls.n	800f8c2 <_free_r+0x46>
 800f8b0:	6825      	ldr	r5, [r4, #0]
 800f8b2:	1961      	adds	r1, r4, r5
 800f8b4:	428b      	cmp	r3, r1
 800f8b6:	bf01      	itttt	eq
 800f8b8:	6819      	ldreq	r1, [r3, #0]
 800f8ba:	685b      	ldreq	r3, [r3, #4]
 800f8bc:	1949      	addeq	r1, r1, r5
 800f8be:	6021      	streq	r1, [r4, #0]
 800f8c0:	e7ed      	b.n	800f89e <_free_r+0x22>
 800f8c2:	461a      	mov	r2, r3
 800f8c4:	685b      	ldr	r3, [r3, #4]
 800f8c6:	b10b      	cbz	r3, 800f8cc <_free_r+0x50>
 800f8c8:	42a3      	cmp	r3, r4
 800f8ca:	d9fa      	bls.n	800f8c2 <_free_r+0x46>
 800f8cc:	6811      	ldr	r1, [r2, #0]
 800f8ce:	1855      	adds	r5, r2, r1
 800f8d0:	42a5      	cmp	r5, r4
 800f8d2:	d10b      	bne.n	800f8ec <_free_r+0x70>
 800f8d4:	6824      	ldr	r4, [r4, #0]
 800f8d6:	4421      	add	r1, r4
 800f8d8:	1854      	adds	r4, r2, r1
 800f8da:	42a3      	cmp	r3, r4
 800f8dc:	6011      	str	r1, [r2, #0]
 800f8de:	d1e0      	bne.n	800f8a2 <_free_r+0x26>
 800f8e0:	681c      	ldr	r4, [r3, #0]
 800f8e2:	685b      	ldr	r3, [r3, #4]
 800f8e4:	6053      	str	r3, [r2, #4]
 800f8e6:	440c      	add	r4, r1
 800f8e8:	6014      	str	r4, [r2, #0]
 800f8ea:	e7da      	b.n	800f8a2 <_free_r+0x26>
 800f8ec:	d902      	bls.n	800f8f4 <_free_r+0x78>
 800f8ee:	230c      	movs	r3, #12
 800f8f0:	6003      	str	r3, [r0, #0]
 800f8f2:	e7d6      	b.n	800f8a2 <_free_r+0x26>
 800f8f4:	6825      	ldr	r5, [r4, #0]
 800f8f6:	1961      	adds	r1, r4, r5
 800f8f8:	428b      	cmp	r3, r1
 800f8fa:	bf04      	itt	eq
 800f8fc:	6819      	ldreq	r1, [r3, #0]
 800f8fe:	685b      	ldreq	r3, [r3, #4]
 800f900:	6063      	str	r3, [r4, #4]
 800f902:	bf04      	itt	eq
 800f904:	1949      	addeq	r1, r1, r5
 800f906:	6021      	streq	r1, [r4, #0]
 800f908:	6054      	str	r4, [r2, #4]
 800f90a:	e7ca      	b.n	800f8a2 <_free_r+0x26>
 800f90c:	b003      	add	sp, #12
 800f90e:	bd30      	pop	{r4, r5, pc}
 800f910:	20021da8 	.word	0x20021da8

0800f914 <_init>:
 800f914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f916:	bf00      	nop
 800f918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f91a:	bc08      	pop	{r3}
 800f91c:	469e      	mov	lr, r3
 800f91e:	4770      	bx	lr

0800f920 <_fini>:
 800f920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f922:	bf00      	nop
 800f924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f926:	bc08      	pop	{r3}
 800f928:	469e      	mov	lr, r3
 800f92a:	4770      	bx	lr
