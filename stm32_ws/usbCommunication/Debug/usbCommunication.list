
usbCommunication.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000157b0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c88  08015960  08015960  00025960  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080165e8  080165e8  0003019c  2**0
                  CONTENTS
  4 .ARM          00000008  080165e8  080165e8  000265e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080165f0  080165f0  0003019c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080165f0  080165f0  000265f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080165f4  080165f4  000265f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000019c  20000000  080165f8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003019c  2**0
                  CONTENTS
 10 .bss          00016ec4  200001a0  200001a0  000301a0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20017064  20017064  000301a0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003019c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000301cc  2**0
                  CONTENTS, READONLY
 14 .debug_info   000337c3  00000000  00000000  0003020f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00009b37  00000000  00000000  000639d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002790  00000000  00000000  0006d510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001df8  00000000  00000000  0006fca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00033a06  00000000  00000000  00071a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003deaf  00000000  00000000  000a549e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f0cca  00000000  00000000  000e334d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000a56c  00000000  00000000  001d4018  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000089  00000000  00000000  001de584  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001a0 	.word	0x200001a0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08015948 	.word	0x08015948

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001a4 	.word	0x200001a4
 80001ec:	08015948 	.word	0x08015948

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <__aeabi_drsub>:
 8000200:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000204:	e002      	b.n	800020c <__adddf3>
 8000206:	bf00      	nop

08000208 <__aeabi_dsub>:
 8000208:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800020c <__adddf3>:
 800020c:	b530      	push	{r4, r5, lr}
 800020e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000212:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000216:	ea94 0f05 	teq	r4, r5
 800021a:	bf08      	it	eq
 800021c:	ea90 0f02 	teqeq	r0, r2
 8000220:	bf1f      	itttt	ne
 8000222:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000226:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000232:	f000 80e2 	beq.w	80003fa <__adddf3+0x1ee>
 8000236:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023e:	bfb8      	it	lt
 8000240:	426d      	neglt	r5, r5
 8000242:	dd0c      	ble.n	800025e <__adddf3+0x52>
 8000244:	442c      	add	r4, r5
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	ea82 0000 	eor.w	r0, r2, r0
 8000252:	ea83 0101 	eor.w	r1, r3, r1
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	2d36      	cmp	r5, #54	; 0x36
 8000260:	bf88      	it	hi
 8000262:	bd30      	pophi	{r4, r5, pc}
 8000264:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000268:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800026c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000270:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x70>
 8000276:	4240      	negs	r0, r0
 8000278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800027c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000280:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000284:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x84>
 800028a:	4252      	negs	r2, r2
 800028c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000290:	ea94 0f05 	teq	r4, r5
 8000294:	f000 80a7 	beq.w	80003e6 <__adddf3+0x1da>
 8000298:	f1a4 0401 	sub.w	r4, r4, #1
 800029c:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a0:	db0d      	blt.n	80002be <__adddf3+0xb2>
 80002a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a6:	fa22 f205 	lsr.w	r2, r2, r5
 80002aa:	1880      	adds	r0, r0, r2
 80002ac:	f141 0100 	adc.w	r1, r1, #0
 80002b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b4:	1880      	adds	r0, r0, r2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	4159      	adcs	r1, r3
 80002bc:	e00e      	b.n	80002dc <__adddf3+0xd0>
 80002be:	f1a5 0520 	sub.w	r5, r5, #32
 80002c2:	f10e 0e20 	add.w	lr, lr, #32
 80002c6:	2a01      	cmp	r2, #1
 80002c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002cc:	bf28      	it	cs
 80002ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d2:	fa43 f305 	asr.w	r3, r3, r5
 80002d6:	18c0      	adds	r0, r0, r3
 80002d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e0:	d507      	bpl.n	80002f2 <__adddf3+0xe6>
 80002e2:	f04f 0e00 	mov.w	lr, #0
 80002e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f6:	d31b      	bcc.n	8000330 <__adddf3+0x124>
 80002f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002fc:	d30c      	bcc.n	8000318 <__adddf3+0x10c>
 80002fe:	0849      	lsrs	r1, r1, #1
 8000300:	ea5f 0030 	movs.w	r0, r0, rrx
 8000304:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000308:	f104 0401 	add.w	r4, r4, #1
 800030c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000310:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000314:	f080 809a 	bcs.w	800044c <__adddf3+0x240>
 8000318:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800031c:	bf08      	it	eq
 800031e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000322:	f150 0000 	adcs.w	r0, r0, #0
 8000326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032a:	ea41 0105 	orr.w	r1, r1, r5
 800032e:	bd30      	pop	{r4, r5, pc}
 8000330:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000334:	4140      	adcs	r0, r0
 8000336:	eb41 0101 	adc.w	r1, r1, r1
 800033a:	3c01      	subs	r4, #1
 800033c:	bf28      	it	cs
 800033e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000342:	d2e9      	bcs.n	8000318 <__adddf3+0x10c>
 8000344:	f091 0f00 	teq	r1, #0
 8000348:	bf04      	itt	eq
 800034a:	4601      	moveq	r1, r0
 800034c:	2000      	moveq	r0, #0
 800034e:	fab1 f381 	clz	r3, r1
 8000352:	bf08      	it	eq
 8000354:	3320      	addeq	r3, #32
 8000356:	f1a3 030b 	sub.w	r3, r3, #11
 800035a:	f1b3 0220 	subs.w	r2, r3, #32
 800035e:	da0c      	bge.n	800037a <__adddf3+0x16e>
 8000360:	320c      	adds	r2, #12
 8000362:	dd08      	ble.n	8000376 <__adddf3+0x16a>
 8000364:	f102 0c14 	add.w	ip, r2, #20
 8000368:	f1c2 020c 	rsb	r2, r2, #12
 800036c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000370:	fa21 f102 	lsr.w	r1, r1, r2
 8000374:	e00c      	b.n	8000390 <__adddf3+0x184>
 8000376:	f102 0214 	add.w	r2, r2, #20
 800037a:	bfd8      	it	le
 800037c:	f1c2 0c20 	rsble	ip, r2, #32
 8000380:	fa01 f102 	lsl.w	r1, r1, r2
 8000384:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000388:	bfdc      	itt	le
 800038a:	ea41 010c 	orrle.w	r1, r1, ip
 800038e:	4090      	lslle	r0, r2
 8000390:	1ae4      	subs	r4, r4, r3
 8000392:	bfa2      	ittt	ge
 8000394:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000398:	4329      	orrge	r1, r5
 800039a:	bd30      	popge	{r4, r5, pc}
 800039c:	ea6f 0404 	mvn.w	r4, r4
 80003a0:	3c1f      	subs	r4, #31
 80003a2:	da1c      	bge.n	80003de <__adddf3+0x1d2>
 80003a4:	340c      	adds	r4, #12
 80003a6:	dc0e      	bgt.n	80003c6 <__adddf3+0x1ba>
 80003a8:	f104 0414 	add.w	r4, r4, #20
 80003ac:	f1c4 0220 	rsb	r2, r4, #32
 80003b0:	fa20 f004 	lsr.w	r0, r0, r4
 80003b4:	fa01 f302 	lsl.w	r3, r1, r2
 80003b8:	ea40 0003 	orr.w	r0, r0, r3
 80003bc:	fa21 f304 	lsr.w	r3, r1, r4
 80003c0:	ea45 0103 	orr.w	r1, r5, r3
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f1c4 040c 	rsb	r4, r4, #12
 80003ca:	f1c4 0220 	rsb	r2, r4, #32
 80003ce:	fa20 f002 	lsr.w	r0, r0, r2
 80003d2:	fa01 f304 	lsl.w	r3, r1, r4
 80003d6:	ea40 0003 	orr.w	r0, r0, r3
 80003da:	4629      	mov	r1, r5
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	fa21 f004 	lsr.w	r0, r1, r4
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f094 0f00 	teq	r4, #0
 80003ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ee:	bf06      	itte	eq
 80003f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f4:	3401      	addeq	r4, #1
 80003f6:	3d01      	subne	r5, #1
 80003f8:	e74e      	b.n	8000298 <__adddf3+0x8c>
 80003fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fe:	bf18      	it	ne
 8000400:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000404:	d029      	beq.n	800045a <__adddf3+0x24e>
 8000406:	ea94 0f05 	teq	r4, r5
 800040a:	bf08      	it	eq
 800040c:	ea90 0f02 	teqeq	r0, r2
 8000410:	d005      	beq.n	800041e <__adddf3+0x212>
 8000412:	ea54 0c00 	orrs.w	ip, r4, r0
 8000416:	bf04      	itt	eq
 8000418:	4619      	moveq	r1, r3
 800041a:	4610      	moveq	r0, r2
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	ea91 0f03 	teq	r1, r3
 8000422:	bf1e      	ittt	ne
 8000424:	2100      	movne	r1, #0
 8000426:	2000      	movne	r0, #0
 8000428:	bd30      	popne	{r4, r5, pc}
 800042a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042e:	d105      	bne.n	800043c <__adddf3+0x230>
 8000430:	0040      	lsls	r0, r0, #1
 8000432:	4149      	adcs	r1, r1
 8000434:	bf28      	it	cs
 8000436:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043a:	bd30      	pop	{r4, r5, pc}
 800043c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000440:	bf3c      	itt	cc
 8000442:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000446:	bd30      	popcc	{r4, r5, pc}
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000450:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000454:	f04f 0000 	mov.w	r0, #0
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045e:	bf1a      	itte	ne
 8000460:	4619      	movne	r1, r3
 8000462:	4610      	movne	r0, r2
 8000464:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000468:	bf1c      	itt	ne
 800046a:	460b      	movne	r3, r1
 800046c:	4602      	movne	r2, r0
 800046e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000472:	bf06      	itte	eq
 8000474:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000478:	ea91 0f03 	teqeq	r1, r3
 800047c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	bf00      	nop

08000484 <__aeabi_ui2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f04f 0500 	mov.w	r5, #0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e750      	b.n	8000344 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_i2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004bc:	bf48      	it	mi
 80004be:	4240      	negmi	r0, r0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e73e      	b.n	8000344 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_f2d>:
 80004c8:	0042      	lsls	r2, r0, #1
 80004ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d6:	bf1f      	itttt	ne
 80004d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e4:	4770      	bxne	lr
 80004e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ea:	bf08      	it	eq
 80004ec:	4770      	bxeq	lr
 80004ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004f2:	bf04      	itt	eq
 80004f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e71c      	b.n	8000344 <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_ul2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	e00a      	b.n	8000532 <__aeabi_l2d+0x16>

0800051c <__aeabi_l2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052a:	d502      	bpl.n	8000532 <__aeabi_l2d+0x16>
 800052c:	4240      	negs	r0, r0
 800052e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000532:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000536:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053e:	f43f aed8 	beq.w	80002f2 <__adddf3+0xe6>
 8000542:	f04f 0203 	mov.w	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000562:	fa20 f002 	lsr.w	r0, r0, r2
 8000566:	fa01 fe03 	lsl.w	lr, r1, r3
 800056a:	ea40 000e 	orr.w	r0, r0, lr
 800056e:	fa21 f102 	lsr.w	r1, r1, r2
 8000572:	4414      	add	r4, r2
 8000574:	e6bd      	b.n	80002f2 <__adddf3+0xe6>
 8000576:	bf00      	nop

08000578 <__aeabi_dmul>:
 8000578:	b570      	push	{r4, r5, r6, lr}
 800057a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800057e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000582:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000586:	bf1d      	ittte	ne
 8000588:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800058c:	ea94 0f0c 	teqne	r4, ip
 8000590:	ea95 0f0c 	teqne	r5, ip
 8000594:	f000 f8de 	bleq	8000754 <__aeabi_dmul+0x1dc>
 8000598:	442c      	add	r4, r5
 800059a:	ea81 0603 	eor.w	r6, r1, r3
 800059e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005aa:	bf18      	it	ne
 80005ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b8:	d038      	beq.n	800062c <__aeabi_dmul+0xb4>
 80005ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ce:	f04f 0600 	mov.w	r6, #0
 80005d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d6:	f09c 0f00 	teq	ip, #0
 80005da:	bf18      	it	ne
 80005dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ec:	d204      	bcs.n	80005f8 <__aeabi_dmul+0x80>
 80005ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f2:	416d      	adcs	r5, r5
 80005f4:	eb46 0606 	adc.w	r6, r6, r6
 80005f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000600:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000604:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000608:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800060c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000610:	bf88      	it	hi
 8000612:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000616:	d81e      	bhi.n	8000656 <__aeabi_dmul+0xde>
 8000618:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800061c:	bf08      	it	eq
 800061e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000622:	f150 0000 	adcs.w	r0, r0, #0
 8000626:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000630:	ea46 0101 	orr.w	r1, r6, r1
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	ea81 0103 	eor.w	r1, r1, r3
 800063c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000640:	bfc2      	ittt	gt
 8000642:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000646:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064a:	bd70      	popgt	{r4, r5, r6, pc}
 800064c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000650:	f04f 0e00 	mov.w	lr, #0
 8000654:	3c01      	subs	r4, #1
 8000656:	f300 80ab 	bgt.w	80007b0 <__aeabi_dmul+0x238>
 800065a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800065e:	bfde      	ittt	le
 8000660:	2000      	movle	r0, #0
 8000662:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd70      	pople	{r4, r5, r6, pc}
 8000668:	f1c4 0400 	rsb	r4, r4, #0
 800066c:	3c20      	subs	r4, #32
 800066e:	da35      	bge.n	80006dc <__aeabi_dmul+0x164>
 8000670:	340c      	adds	r4, #12
 8000672:	dc1b      	bgt.n	80006ac <__aeabi_dmul+0x134>
 8000674:	f104 0414 	add.w	r4, r4, #20
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f305 	lsl.w	r3, r0, r5
 8000680:	fa20 f004 	lsr.w	r0, r0, r4
 8000684:	fa01 f205 	lsl.w	r2, r1, r5
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000690:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	fa21 f604 	lsr.w	r6, r1, r4
 800069c:	eb42 0106 	adc.w	r1, r2, r6
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 040c 	rsb	r4, r4, #12
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f304 	lsl.w	r3, r0, r4
 80006b8:	fa20 f005 	lsr.w	r0, r0, r5
 80006bc:	fa01 f204 	lsl.w	r2, r1, r4
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006cc:	f141 0100 	adc.w	r1, r1, #0
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f205 	lsl.w	r2, r0, r5
 80006e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea43 0302 	orr.w	r3, r3, r2
 80006f4:	fa21 f004 	lsr.w	r0, r1, r4
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000700:	ea20 0002 	bic.w	r0, r0, r2
 8000704:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f094 0f00 	teq	r4, #0
 8000718:	d10f      	bne.n	800073a <__aeabi_dmul+0x1c2>
 800071a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800071e:	0040      	lsls	r0, r0, #1
 8000720:	eb41 0101 	adc.w	r1, r1, r1
 8000724:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3c01      	subeq	r4, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1a6>
 800072e:	ea41 0106 	orr.w	r1, r1, r6
 8000732:	f095 0f00 	teq	r5, #0
 8000736:	bf18      	it	ne
 8000738:	4770      	bxne	lr
 800073a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800073e:	0052      	lsls	r2, r2, #1
 8000740:	eb43 0303 	adc.w	r3, r3, r3
 8000744:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3d01      	subeq	r5, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1c6>
 800074e:	ea43 0306 	orr.w	r3, r3, r6
 8000752:	4770      	bx	lr
 8000754:	ea94 0f0c 	teq	r4, ip
 8000758:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800075c:	bf18      	it	ne
 800075e:	ea95 0f0c 	teqne	r5, ip
 8000762:	d00c      	beq.n	800077e <__aeabi_dmul+0x206>
 8000764:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000768:	bf18      	it	ne
 800076a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076e:	d1d1      	bne.n	8000714 <__aeabi_dmul+0x19c>
 8000770:	ea81 0103 	eor.w	r1, r1, r3
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd70      	pop	{r4, r5, r6, pc}
 800077e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000782:	bf06      	itte	eq
 8000784:	4610      	moveq	r0, r2
 8000786:	4619      	moveq	r1, r3
 8000788:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078c:	d019      	beq.n	80007c2 <__aeabi_dmul+0x24a>
 800078e:	ea94 0f0c 	teq	r4, ip
 8000792:	d102      	bne.n	800079a <__aeabi_dmul+0x222>
 8000794:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000798:	d113      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 800079a:	ea95 0f0c 	teq	r5, ip
 800079e:	d105      	bne.n	80007ac <__aeabi_dmul+0x234>
 80007a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a4:	bf1c      	itt	ne
 80007a6:	4610      	movne	r0, r2
 80007a8:	4619      	movne	r1, r3
 80007aa:	d10a      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 80007ac:	ea81 0103 	eor.w	r1, r1, r3
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ca:	bd70      	pop	{r4, r5, r6, pc}

080007cc <__aeabi_ddiv>:
 80007cc:	b570      	push	{r4, r5, r6, lr}
 80007ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007da:	bf1d      	ittte	ne
 80007dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e0:	ea94 0f0c 	teqne	r4, ip
 80007e4:	ea95 0f0c 	teqne	r5, ip
 80007e8:	f000 f8a7 	bleq	800093a <__aeabi_ddiv+0x16e>
 80007ec:	eba4 0405 	sub.w	r4, r4, r5
 80007f0:	ea81 0e03 	eor.w	lr, r1, r3
 80007f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007fc:	f000 8088 	beq.w	8000910 <__aeabi_ddiv+0x144>
 8000800:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000804:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000808:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800080c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000810:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000814:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000818:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800081c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000820:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000824:	429d      	cmp	r5, r3
 8000826:	bf08      	it	eq
 8000828:	4296      	cmpeq	r6, r2
 800082a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800082e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000832:	d202      	bcs.n	800083a <__aeabi_ddiv+0x6e>
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	1ab6      	subs	r6, r6, r2
 800083c:	eb65 0503 	sbc.w	r5, r5, r3
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800084a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ac:	d018      	beq.n	80008e0 <__aeabi_ddiv+0x114>
 80008ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ca:	d1c0      	bne.n	800084e <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	d10b      	bne.n	80008ea <__aeabi_ddiv+0x11e>
 80008d2:	ea41 0100 	orr.w	r1, r1, r0
 80008d6:	f04f 0000 	mov.w	r0, #0
 80008da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008de:	e7b6      	b.n	800084e <__aeabi_ddiv+0x82>
 80008e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e4:	bf04      	itt	eq
 80008e6:	4301      	orreq	r1, r0
 80008e8:	2000      	moveq	r0, #0
 80008ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ee:	bf88      	it	hi
 80008f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f4:	f63f aeaf 	bhi.w	8000656 <__aeabi_dmul+0xde>
 80008f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008fc:	bf04      	itt	eq
 80008fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000902:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000906:	f150 0000 	adcs.w	r0, r0, #0
 800090a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090e:	bd70      	pop	{r4, r5, r6, pc}
 8000910:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000914:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000918:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800091c:	bfc2      	ittt	gt
 800091e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000922:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000926:	bd70      	popgt	{r4, r5, r6, pc}
 8000928:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092c:	f04f 0e00 	mov.w	lr, #0
 8000930:	3c01      	subs	r4, #1
 8000932:	e690      	b.n	8000656 <__aeabi_dmul+0xde>
 8000934:	ea45 0e06 	orr.w	lr, r5, r6
 8000938:	e68d      	b.n	8000656 <__aeabi_dmul+0xde>
 800093a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093e:	ea94 0f0c 	teq	r4, ip
 8000942:	bf08      	it	eq
 8000944:	ea95 0f0c 	teqeq	r5, ip
 8000948:	f43f af3b 	beq.w	80007c2 <__aeabi_dmul+0x24a>
 800094c:	ea94 0f0c 	teq	r4, ip
 8000950:	d10a      	bne.n	8000968 <__aeabi_ddiv+0x19c>
 8000952:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000956:	f47f af34 	bne.w	80007c2 <__aeabi_dmul+0x24a>
 800095a:	ea95 0f0c 	teq	r5, ip
 800095e:	f47f af25 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e72c      	b.n	80007c2 <__aeabi_dmul+0x24a>
 8000968:	ea95 0f0c 	teq	r5, ip
 800096c:	d106      	bne.n	800097c <__aeabi_ddiv+0x1b0>
 800096e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000972:	f43f aefd 	beq.w	8000770 <__aeabi_dmul+0x1f8>
 8000976:	4610      	mov	r0, r2
 8000978:	4619      	mov	r1, r3
 800097a:	e722      	b.n	80007c2 <__aeabi_dmul+0x24a>
 800097c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000986:	f47f aec5 	bne.w	8000714 <__aeabi_dmul+0x19c>
 800098a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098e:	f47f af0d 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000992:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000996:	f47f aeeb 	bne.w	8000770 <__aeabi_dmul+0x1f8>
 800099a:	e712      	b.n	80007c2 <__aeabi_dmul+0x24a>

0800099c <__gedf2>:
 800099c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009a0:	e006      	b.n	80009b0 <__cmpdf2+0x4>
 80009a2:	bf00      	nop

080009a4 <__ledf2>:
 80009a4:	f04f 0c01 	mov.w	ip, #1
 80009a8:	e002      	b.n	80009b0 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__cmpdf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009c6:	d01b      	beq.n	8000a00 <__cmpdf2+0x54>
 80009c8:	b001      	add	sp, #4
 80009ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ce:	bf0c      	ite	eq
 80009d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009d4:	ea91 0f03 	teqne	r1, r3
 80009d8:	bf02      	ittt	eq
 80009da:	ea90 0f02 	teqeq	r0, r2
 80009de:	2000      	moveq	r0, #0
 80009e0:	4770      	bxeq	lr
 80009e2:	f110 0f00 	cmn.w	r0, #0
 80009e6:	ea91 0f03 	teq	r1, r3
 80009ea:	bf58      	it	pl
 80009ec:	4299      	cmppl	r1, r3
 80009ee:	bf08      	it	eq
 80009f0:	4290      	cmpeq	r0, r2
 80009f2:	bf2c      	ite	cs
 80009f4:	17d8      	asrcs	r0, r3, #31
 80009f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009fa:	f040 0001 	orr.w	r0, r0, #1
 80009fe:	4770      	bx	lr
 8000a00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d102      	bne.n	8000a10 <__cmpdf2+0x64>
 8000a0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0e:	d107      	bne.n	8000a20 <__cmpdf2+0x74>
 8000a10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	d1d6      	bne.n	80009c8 <__cmpdf2+0x1c>
 8000a1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1e:	d0d3      	beq.n	80009c8 <__cmpdf2+0x1c>
 8000a20:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdrcmple>:
 8000a28:	4684      	mov	ip, r0
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4662      	mov	r2, ip
 8000a2e:	468c      	mov	ip, r1
 8000a30:	4619      	mov	r1, r3
 8000a32:	4663      	mov	r3, ip
 8000a34:	e000      	b.n	8000a38 <__aeabi_cdcmpeq>
 8000a36:	bf00      	nop

08000a38 <__aeabi_cdcmpeq>:
 8000a38:	b501      	push	{r0, lr}
 8000a3a:	f7ff ffb7 	bl	80009ac <__cmpdf2>
 8000a3e:	2800      	cmp	r0, #0
 8000a40:	bf48      	it	mi
 8000a42:	f110 0f00 	cmnmi.w	r0, #0
 8000a46:	bd01      	pop	{r0, pc}

08000a48 <__aeabi_dcmpeq>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff fff4 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a50:	bf0c      	ite	eq
 8000a52:	2001      	moveq	r0, #1
 8000a54:	2000      	movne	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmplt>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffea 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a64:	bf34      	ite	cc
 8000a66:	2001      	movcc	r0, #1
 8000a68:	2000      	movcs	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmple>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffe0 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a78:	bf94      	ite	ls
 8000a7a:	2001      	movls	r0, #1
 8000a7c:	2000      	movhi	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpge>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffce 	bl	8000a28 <__aeabi_cdrcmple>
 8000a8c:	bf94      	ite	ls
 8000a8e:	2001      	movls	r0, #1
 8000a90:	2000      	movhi	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmpgt>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffc4 	bl	8000a28 <__aeabi_cdrcmple>
 8000aa0:	bf34      	ite	cc
 8000aa2:	2001      	movcc	r0, #1
 8000aa4:	2000      	movcs	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_d2iz>:
 8000aac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab4:	d215      	bcs.n	8000ae2 <__aeabi_d2iz+0x36>
 8000ab6:	d511      	bpl.n	8000adc <__aeabi_d2iz+0x30>
 8000ab8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000abc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac0:	d912      	bls.n	8000ae8 <__aeabi_d2iz+0x3c>
 8000ac2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ace:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad6:	bf18      	it	ne
 8000ad8:	4240      	negne	r0, r0
 8000ada:	4770      	bx	lr
 8000adc:	f04f 0000 	mov.w	r0, #0
 8000ae0:	4770      	bx	lr
 8000ae2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae6:	d105      	bne.n	8000af4 <__aeabi_d2iz+0x48>
 8000ae8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aec:	bf08      	it	eq
 8000aee:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_d2f>:
 8000afc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b04:	bf24      	itt	cs
 8000b06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b0e:	d90d      	bls.n	8000b2c <__aeabi_d2f+0x30>
 8000b10:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b1c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b24:	bf08      	it	eq
 8000b26:	f020 0001 	biceq.w	r0, r0, #1
 8000b2a:	4770      	bx	lr
 8000b2c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b30:	d121      	bne.n	8000b76 <__aeabi_d2f+0x7a>
 8000b32:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b36:	bfbc      	itt	lt
 8000b38:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b3c:	4770      	bxlt	lr
 8000b3e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b46:	f1c2 0218 	rsb	r2, r2, #24
 8000b4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b52:	fa20 f002 	lsr.w	r0, r0, r2
 8000b56:	bf18      	it	ne
 8000b58:	f040 0001 	orrne.w	r0, r0, #1
 8000b5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b68:	ea40 000c 	orr.w	r0, r0, ip
 8000b6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b74:	e7cc      	b.n	8000b10 <__aeabi_d2f+0x14>
 8000b76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7a:	d107      	bne.n	8000b8c <__aeabi_d2f+0x90>
 8000b7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b80:	bf1e      	ittt	ne
 8000b82:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b86:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b8a:	4770      	bxne	lr
 8000b8c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <__aeabi_uldivmod>:
 8000b9c:	b953      	cbnz	r3, 8000bb4 <__aeabi_uldivmod+0x18>
 8000b9e:	b94a      	cbnz	r2, 8000bb4 <__aeabi_uldivmod+0x18>
 8000ba0:	2900      	cmp	r1, #0
 8000ba2:	bf08      	it	eq
 8000ba4:	2800      	cmpeq	r0, #0
 8000ba6:	bf1c      	itt	ne
 8000ba8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bac:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bb0:	f000 b970 	b.w	8000e94 <__aeabi_idiv0>
 8000bb4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bbc:	f000 f806 	bl	8000bcc <__udivmoddi4>
 8000bc0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc8:	b004      	add	sp, #16
 8000bca:	4770      	bx	lr

08000bcc <__udivmoddi4>:
 8000bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd0:	9e08      	ldr	r6, [sp, #32]
 8000bd2:	460d      	mov	r5, r1
 8000bd4:	4604      	mov	r4, r0
 8000bd6:	460f      	mov	r7, r1
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d14a      	bne.n	8000c72 <__udivmoddi4+0xa6>
 8000bdc:	428a      	cmp	r2, r1
 8000bde:	4694      	mov	ip, r2
 8000be0:	d965      	bls.n	8000cae <__udivmoddi4+0xe2>
 8000be2:	fab2 f382 	clz	r3, r2
 8000be6:	b143      	cbz	r3, 8000bfa <__udivmoddi4+0x2e>
 8000be8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bec:	f1c3 0220 	rsb	r2, r3, #32
 8000bf0:	409f      	lsls	r7, r3
 8000bf2:	fa20 f202 	lsr.w	r2, r0, r2
 8000bf6:	4317      	orrs	r7, r2
 8000bf8:	409c      	lsls	r4, r3
 8000bfa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bfe:	fa1f f58c 	uxth.w	r5, ip
 8000c02:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c06:	0c22      	lsrs	r2, r4, #16
 8000c08:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c0c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c10:	fb01 f005 	mul.w	r0, r1, r5
 8000c14:	4290      	cmp	r0, r2
 8000c16:	d90a      	bls.n	8000c2e <__udivmoddi4+0x62>
 8000c18:	eb1c 0202 	adds.w	r2, ip, r2
 8000c1c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c20:	f080 811c 	bcs.w	8000e5c <__udivmoddi4+0x290>
 8000c24:	4290      	cmp	r0, r2
 8000c26:	f240 8119 	bls.w	8000e5c <__udivmoddi4+0x290>
 8000c2a:	3902      	subs	r1, #2
 8000c2c:	4462      	add	r2, ip
 8000c2e:	1a12      	subs	r2, r2, r0
 8000c30:	b2a4      	uxth	r4, r4
 8000c32:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c36:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c3a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c3e:	fb00 f505 	mul.w	r5, r0, r5
 8000c42:	42a5      	cmp	r5, r4
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x90>
 8000c46:	eb1c 0404 	adds.w	r4, ip, r4
 8000c4a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c4e:	f080 8107 	bcs.w	8000e60 <__udivmoddi4+0x294>
 8000c52:	42a5      	cmp	r5, r4
 8000c54:	f240 8104 	bls.w	8000e60 <__udivmoddi4+0x294>
 8000c58:	4464      	add	r4, ip
 8000c5a:	3802      	subs	r0, #2
 8000c5c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c60:	1b64      	subs	r4, r4, r5
 8000c62:	2100      	movs	r1, #0
 8000c64:	b11e      	cbz	r6, 8000c6e <__udivmoddi4+0xa2>
 8000c66:	40dc      	lsrs	r4, r3
 8000c68:	2300      	movs	r3, #0
 8000c6a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c72:	428b      	cmp	r3, r1
 8000c74:	d908      	bls.n	8000c88 <__udivmoddi4+0xbc>
 8000c76:	2e00      	cmp	r6, #0
 8000c78:	f000 80ed 	beq.w	8000e56 <__udivmoddi4+0x28a>
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	e9c6 0500 	strd	r0, r5, [r6]
 8000c82:	4608      	mov	r0, r1
 8000c84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c88:	fab3 f183 	clz	r1, r3
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	d149      	bne.n	8000d24 <__udivmoddi4+0x158>
 8000c90:	42ab      	cmp	r3, r5
 8000c92:	d302      	bcc.n	8000c9a <__udivmoddi4+0xce>
 8000c94:	4282      	cmp	r2, r0
 8000c96:	f200 80f8 	bhi.w	8000e8a <__udivmoddi4+0x2be>
 8000c9a:	1a84      	subs	r4, r0, r2
 8000c9c:	eb65 0203 	sbc.w	r2, r5, r3
 8000ca0:	2001      	movs	r0, #1
 8000ca2:	4617      	mov	r7, r2
 8000ca4:	2e00      	cmp	r6, #0
 8000ca6:	d0e2      	beq.n	8000c6e <__udivmoddi4+0xa2>
 8000ca8:	e9c6 4700 	strd	r4, r7, [r6]
 8000cac:	e7df      	b.n	8000c6e <__udivmoddi4+0xa2>
 8000cae:	b902      	cbnz	r2, 8000cb2 <__udivmoddi4+0xe6>
 8000cb0:	deff      	udf	#255	; 0xff
 8000cb2:	fab2 f382 	clz	r3, r2
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x210>
 8000cbc:	1a8a      	subs	r2, r1, r2
 8000cbe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cc2:	fa1f fe8c 	uxth.w	lr, ip
 8000cc6:	2101      	movs	r1, #1
 8000cc8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ccc:	fb07 2015 	mls	r0, r7, r5, r2
 8000cd0:	0c22      	lsrs	r2, r4, #16
 8000cd2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cd6:	fb0e f005 	mul.w	r0, lr, r5
 8000cda:	4290      	cmp	r0, r2
 8000cdc:	d908      	bls.n	8000cf0 <__udivmoddi4+0x124>
 8000cde:	eb1c 0202 	adds.w	r2, ip, r2
 8000ce2:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000ce6:	d202      	bcs.n	8000cee <__udivmoddi4+0x122>
 8000ce8:	4290      	cmp	r0, r2
 8000cea:	f200 80cb 	bhi.w	8000e84 <__udivmoddi4+0x2b8>
 8000cee:	4645      	mov	r5, r8
 8000cf0:	1a12      	subs	r2, r2, r0
 8000cf2:	b2a4      	uxth	r4, r4
 8000cf4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cf8:	fb07 2210 	mls	r2, r7, r0, r2
 8000cfc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d00:	fb0e fe00 	mul.w	lr, lr, r0
 8000d04:	45a6      	cmp	lr, r4
 8000d06:	d908      	bls.n	8000d1a <__udivmoddi4+0x14e>
 8000d08:	eb1c 0404 	adds.w	r4, ip, r4
 8000d0c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d10:	d202      	bcs.n	8000d18 <__udivmoddi4+0x14c>
 8000d12:	45a6      	cmp	lr, r4
 8000d14:	f200 80bb 	bhi.w	8000e8e <__udivmoddi4+0x2c2>
 8000d18:	4610      	mov	r0, r2
 8000d1a:	eba4 040e 	sub.w	r4, r4, lr
 8000d1e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d22:	e79f      	b.n	8000c64 <__udivmoddi4+0x98>
 8000d24:	f1c1 0720 	rsb	r7, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d2e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d32:	fa05 f401 	lsl.w	r4, r5, r1
 8000d36:	fa20 f307 	lsr.w	r3, r0, r7
 8000d3a:	40fd      	lsrs	r5, r7
 8000d3c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d46:	fa1f fe8c 	uxth.w	lr, ip
 8000d4a:	fb09 5518 	mls	r5, r9, r8, r5
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d54:	fb08 f50e 	mul.w	r5, r8, lr
 8000d58:	42a5      	cmp	r5, r4
 8000d5a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d5e:	fa00 f001 	lsl.w	r0, r0, r1
 8000d62:	d90b      	bls.n	8000d7c <__udivmoddi4+0x1b0>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d6c:	f080 8088 	bcs.w	8000e80 <__udivmoddi4+0x2b4>
 8000d70:	42a5      	cmp	r5, r4
 8000d72:	f240 8085 	bls.w	8000e80 <__udivmoddi4+0x2b4>
 8000d76:	f1a8 0802 	sub.w	r8, r8, #2
 8000d7a:	4464      	add	r4, ip
 8000d7c:	1b64      	subs	r4, r4, r5
 8000d7e:	b29d      	uxth	r5, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d8c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d90:	45a6      	cmp	lr, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1da>
 8000d94:	eb1c 0404 	adds.w	r4, ip, r4
 8000d98:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000d9c:	d26c      	bcs.n	8000e78 <__udivmoddi4+0x2ac>
 8000d9e:	45a6      	cmp	lr, r4
 8000da0:	d96a      	bls.n	8000e78 <__udivmoddi4+0x2ac>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	4464      	add	r4, ip
 8000da6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000daa:	fba3 9502 	umull	r9, r5, r3, r2
 8000dae:	eba4 040e 	sub.w	r4, r4, lr
 8000db2:	42ac      	cmp	r4, r5
 8000db4:	46c8      	mov	r8, r9
 8000db6:	46ae      	mov	lr, r5
 8000db8:	d356      	bcc.n	8000e68 <__udivmoddi4+0x29c>
 8000dba:	d053      	beq.n	8000e64 <__udivmoddi4+0x298>
 8000dbc:	b156      	cbz	r6, 8000dd4 <__udivmoddi4+0x208>
 8000dbe:	ebb0 0208 	subs.w	r2, r0, r8
 8000dc2:	eb64 040e 	sbc.w	r4, r4, lr
 8000dc6:	fa04 f707 	lsl.w	r7, r4, r7
 8000dca:	40ca      	lsrs	r2, r1
 8000dcc:	40cc      	lsrs	r4, r1
 8000dce:	4317      	orrs	r7, r2
 8000dd0:	e9c6 7400 	strd	r7, r4, [r6]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ddc:	f1c3 0120 	rsb	r1, r3, #32
 8000de0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000de4:	fa20 f201 	lsr.w	r2, r0, r1
 8000de8:	fa25 f101 	lsr.w	r1, r5, r1
 8000dec:	409d      	lsls	r5, r3
 8000dee:	432a      	orrs	r2, r5
 8000df0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df4:	fa1f fe8c 	uxth.w	lr, ip
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1510 	mls	r5, r7, r0, r1
 8000e00:	0c11      	lsrs	r1, r2, #16
 8000e02:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e06:	fb00 f50e 	mul.w	r5, r0, lr
 8000e0a:	428d      	cmp	r5, r1
 8000e0c:	fa04 f403 	lsl.w	r4, r4, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x258>
 8000e12:	eb1c 0101 	adds.w	r1, ip, r1
 8000e16:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e1a:	d22f      	bcs.n	8000e7c <__udivmoddi4+0x2b0>
 8000e1c:	428d      	cmp	r5, r1
 8000e1e:	d92d      	bls.n	8000e7c <__udivmoddi4+0x2b0>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4461      	add	r1, ip
 8000e24:	1b49      	subs	r1, r1, r5
 8000e26:	b292      	uxth	r2, r2
 8000e28:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e2c:	fb07 1115 	mls	r1, r7, r5, r1
 8000e30:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e34:	fb05 f10e 	mul.w	r1, r5, lr
 8000e38:	4291      	cmp	r1, r2
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x282>
 8000e3c:	eb1c 0202 	adds.w	r2, ip, r2
 8000e40:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e44:	d216      	bcs.n	8000e74 <__udivmoddi4+0x2a8>
 8000e46:	4291      	cmp	r1, r2
 8000e48:	d914      	bls.n	8000e74 <__udivmoddi4+0x2a8>
 8000e4a:	3d02      	subs	r5, #2
 8000e4c:	4462      	add	r2, ip
 8000e4e:	1a52      	subs	r2, r2, r1
 8000e50:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e54:	e738      	b.n	8000cc8 <__udivmoddi4+0xfc>
 8000e56:	4631      	mov	r1, r6
 8000e58:	4630      	mov	r0, r6
 8000e5a:	e708      	b.n	8000c6e <__udivmoddi4+0xa2>
 8000e5c:	4639      	mov	r1, r7
 8000e5e:	e6e6      	b.n	8000c2e <__udivmoddi4+0x62>
 8000e60:	4610      	mov	r0, r2
 8000e62:	e6fb      	b.n	8000c5c <__udivmoddi4+0x90>
 8000e64:	4548      	cmp	r0, r9
 8000e66:	d2a9      	bcs.n	8000dbc <__udivmoddi4+0x1f0>
 8000e68:	ebb9 0802 	subs.w	r8, r9, r2
 8000e6c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e70:	3b01      	subs	r3, #1
 8000e72:	e7a3      	b.n	8000dbc <__udivmoddi4+0x1f0>
 8000e74:	4645      	mov	r5, r8
 8000e76:	e7ea      	b.n	8000e4e <__udivmoddi4+0x282>
 8000e78:	462b      	mov	r3, r5
 8000e7a:	e794      	b.n	8000da6 <__udivmoddi4+0x1da>
 8000e7c:	4640      	mov	r0, r8
 8000e7e:	e7d1      	b.n	8000e24 <__udivmoddi4+0x258>
 8000e80:	46d0      	mov	r8, sl
 8000e82:	e77b      	b.n	8000d7c <__udivmoddi4+0x1b0>
 8000e84:	3d02      	subs	r5, #2
 8000e86:	4462      	add	r2, ip
 8000e88:	e732      	b.n	8000cf0 <__udivmoddi4+0x124>
 8000e8a:	4608      	mov	r0, r1
 8000e8c:	e70a      	b.n	8000ca4 <__udivmoddi4+0xd8>
 8000e8e:	4464      	add	r4, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e742      	b.n	8000d1a <__udivmoddi4+0x14e>

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000e9c:	4b17      	ldr	r3, [pc, #92]	; (8000efc <MX_CAN1_Init+0x64>)
 8000e9e:	4a18      	ldr	r2, [pc, #96]	; (8000f00 <MX_CAN1_Init+0x68>)
 8000ea0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 7;
 8000ea2:	4b16      	ldr	r3, [pc, #88]	; (8000efc <MX_CAN1_Init+0x64>)
 8000ea4:	2207      	movs	r2, #7
 8000ea6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000ea8:	4b14      	ldr	r3, [pc, #80]	; (8000efc <MX_CAN1_Init+0x64>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000eae:	4b13      	ldr	r3, [pc, #76]	; (8000efc <MX_CAN1_Init+0x64>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000eb4:	4b11      	ldr	r3, [pc, #68]	; (8000efc <MX_CAN1_Init+0x64>)
 8000eb6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000eba:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000ebc:	4b0f      	ldr	r3, [pc, #60]	; (8000efc <MX_CAN1_Init+0x64>)
 8000ebe:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000ec2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000ec4:	4b0d      	ldr	r3, [pc, #52]	; (8000efc <MX_CAN1_Init+0x64>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000eca:	4b0c      	ldr	r3, [pc, #48]	; (8000efc <MX_CAN1_Init+0x64>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000ed0:	4b0a      	ldr	r3, [pc, #40]	; (8000efc <MX_CAN1_Init+0x64>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000ed6:	4b09      	ldr	r3, [pc, #36]	; (8000efc <MX_CAN1_Init+0x64>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000edc:	4b07      	ldr	r3, [pc, #28]	; (8000efc <MX_CAN1_Init+0x64>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 8000ee2:	4b06      	ldr	r3, [pc, #24]	; (8000efc <MX_CAN1_Init+0x64>)
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000ee8:	4804      	ldr	r0, [pc, #16]	; (8000efc <MX_CAN1_Init+0x64>)
 8000eea:	f001 f9c7 	bl	800227c <HAL_CAN_Init>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000ef4:	f000 fbb0 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000ef8:	bf00      	nop
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	200001bc 	.word	0x200001bc
 8000f00:	40006400 	.word	0x40006400

08000f04 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000f08:	4b16      	ldr	r3, [pc, #88]	; (8000f64 <MX_CAN2_Init+0x60>)
 8000f0a:	4a17      	ldr	r2, [pc, #92]	; (8000f68 <MX_CAN2_Init+0x64>)
 8000f0c:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 8000f0e:	4b15      	ldr	r3, [pc, #84]	; (8000f64 <MX_CAN2_Init+0x60>)
 8000f10:	2210      	movs	r2, #16
 8000f12:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000f14:	4b13      	ldr	r3, [pc, #76]	; (8000f64 <MX_CAN2_Init+0x60>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000f1a:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <MX_CAN2_Init+0x60>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000f20:	4b10      	ldr	r3, [pc, #64]	; (8000f64 <MX_CAN2_Init+0x60>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000f26:	4b0f      	ldr	r3, [pc, #60]	; (8000f64 <MX_CAN2_Init+0x60>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000f2c:	4b0d      	ldr	r3, [pc, #52]	; (8000f64 <MX_CAN2_Init+0x60>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000f32:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <MX_CAN2_Init+0x60>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000f38:	4b0a      	ldr	r3, [pc, #40]	; (8000f64 <MX_CAN2_Init+0x60>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000f3e:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <MX_CAN2_Init+0x60>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000f44:	4b07      	ldr	r3, [pc, #28]	; (8000f64 <MX_CAN2_Init+0x60>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000f4a:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <MX_CAN2_Init+0x60>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000f50:	4804      	ldr	r0, [pc, #16]	; (8000f64 <MX_CAN2_Init+0x60>)
 8000f52:	f001 f993 	bl	800227c <HAL_CAN_Init>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 8000f5c:	f000 fb7c 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	200001e4 	.word	0x200001e4
 8000f68:	40006800 	.word	0x40006800

08000f6c <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b08c      	sub	sp, #48	; 0x30
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f74:	f107 031c 	add.w	r3, r7, #28
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	60da      	str	r2, [r3, #12]
 8000f82:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a4a      	ldr	r2, [pc, #296]	; (80010b4 <HAL_CAN_MspInit+0x148>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d145      	bne.n	800101a <HAL_CAN_MspInit+0xae>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000f8e:	4b4a      	ldr	r3, [pc, #296]	; (80010b8 <HAL_CAN_MspInit+0x14c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	3301      	adds	r3, #1
 8000f94:	4a48      	ldr	r2, [pc, #288]	; (80010b8 <HAL_CAN_MspInit+0x14c>)
 8000f96:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000f98:	4b47      	ldr	r3, [pc, #284]	; (80010b8 <HAL_CAN_MspInit+0x14c>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d10d      	bne.n	8000fbc <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	61bb      	str	r3, [r7, #24]
 8000fa4:	4b45      	ldr	r3, [pc, #276]	; (80010bc <HAL_CAN_MspInit+0x150>)
 8000fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa8:	4a44      	ldr	r2, [pc, #272]	; (80010bc <HAL_CAN_MspInit+0x150>)
 8000faa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fae:	6413      	str	r3, [r2, #64]	; 0x40
 8000fb0:	4b42      	ldr	r3, [pc, #264]	; (80010bc <HAL_CAN_MspInit+0x150>)
 8000fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fb8:	61bb      	str	r3, [r7, #24]
 8000fba:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	617b      	str	r3, [r7, #20]
 8000fc0:	4b3e      	ldr	r3, [pc, #248]	; (80010bc <HAL_CAN_MspInit+0x150>)
 8000fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc4:	4a3d      	ldr	r2, [pc, #244]	; (80010bc <HAL_CAN_MspInit+0x150>)
 8000fc6:	f043 0308 	orr.w	r3, r3, #8
 8000fca:	6313      	str	r3, [r2, #48]	; 0x30
 8000fcc:	4b3b      	ldr	r3, [pc, #236]	; (80010bc <HAL_CAN_MspInit+0x150>)
 8000fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd0:	f003 0308 	and.w	r3, r3, #8
 8000fd4:	617b      	str	r3, [r7, #20]
 8000fd6:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000fd8:	2303      	movs	r3, #3
 8000fda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000fe8:	2309      	movs	r3, #9
 8000fea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fec:	f107 031c 	add.w	r3, r7, #28
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4833      	ldr	r0, [pc, #204]	; (80010c0 <HAL_CAN_MspInit+0x154>)
 8000ff4:	f002 fcbe 	bl	8003974 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	2105      	movs	r1, #5
 8000ffc:	2013      	movs	r0, #19
 8000ffe:	f002 f88d 	bl	800311c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001002:	2013      	movs	r0, #19
 8001004:	f002 f8a6 	bl	8003154 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001008:	2200      	movs	r2, #0
 800100a:	2105      	movs	r1, #5
 800100c:	2014      	movs	r0, #20
 800100e:	f002 f885 	bl	800311c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001012:	2014      	movs	r0, #20
 8001014:	f002 f89e 	bl	8003154 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8001018:	e048      	b.n	80010ac <HAL_CAN_MspInit+0x140>
  else if(canHandle->Instance==CAN2)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a29      	ldr	r2, [pc, #164]	; (80010c4 <HAL_CAN_MspInit+0x158>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d143      	bne.n	80010ac <HAL_CAN_MspInit+0x140>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001024:	2300      	movs	r3, #0
 8001026:	613b      	str	r3, [r7, #16]
 8001028:	4b24      	ldr	r3, [pc, #144]	; (80010bc <HAL_CAN_MspInit+0x150>)
 800102a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102c:	4a23      	ldr	r2, [pc, #140]	; (80010bc <HAL_CAN_MspInit+0x150>)
 800102e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001032:	6413      	str	r3, [r2, #64]	; 0x40
 8001034:	4b21      	ldr	r3, [pc, #132]	; (80010bc <HAL_CAN_MspInit+0x150>)
 8001036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001038:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800103c:	613b      	str	r3, [r7, #16]
 800103e:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001040:	4b1d      	ldr	r3, [pc, #116]	; (80010b8 <HAL_CAN_MspInit+0x14c>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	3301      	adds	r3, #1
 8001046:	4a1c      	ldr	r2, [pc, #112]	; (80010b8 <HAL_CAN_MspInit+0x14c>)
 8001048:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800104a:	4b1b      	ldr	r3, [pc, #108]	; (80010b8 <HAL_CAN_MspInit+0x14c>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	2b01      	cmp	r3, #1
 8001050:	d10d      	bne.n	800106e <HAL_CAN_MspInit+0x102>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	4b19      	ldr	r3, [pc, #100]	; (80010bc <HAL_CAN_MspInit+0x150>)
 8001058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105a:	4a18      	ldr	r2, [pc, #96]	; (80010bc <HAL_CAN_MspInit+0x150>)
 800105c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001060:	6413      	str	r3, [r2, #64]	; 0x40
 8001062:	4b16      	ldr	r3, [pc, #88]	; (80010bc <HAL_CAN_MspInit+0x150>)
 8001064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	60bb      	str	r3, [r7, #8]
 8001072:	4b12      	ldr	r3, [pc, #72]	; (80010bc <HAL_CAN_MspInit+0x150>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	4a11      	ldr	r2, [pc, #68]	; (80010bc <HAL_CAN_MspInit+0x150>)
 8001078:	f043 0302 	orr.w	r3, r3, #2
 800107c:	6313      	str	r3, [r2, #48]	; 0x30
 800107e:	4b0f      	ldr	r3, [pc, #60]	; (80010bc <HAL_CAN_MspInit+0x150>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	f003 0302 	and.w	r3, r3, #2
 8001086:	60bb      	str	r3, [r7, #8]
 8001088:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800108a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800108e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001090:	2302      	movs	r3, #2
 8001092:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001094:	2300      	movs	r3, #0
 8001096:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001098:	2303      	movs	r3, #3
 800109a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800109c:	2309      	movs	r3, #9
 800109e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a0:	f107 031c 	add.w	r3, r7, #28
 80010a4:	4619      	mov	r1, r3
 80010a6:	4808      	ldr	r0, [pc, #32]	; (80010c8 <HAL_CAN_MspInit+0x15c>)
 80010a8:	f002 fc64 	bl	8003974 <HAL_GPIO_Init>
}
 80010ac:	bf00      	nop
 80010ae:	3730      	adds	r7, #48	; 0x30
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40006400 	.word	0x40006400
 80010b8:	2000020c 	.word	0x2000020c
 80010bc:	40023800 	.word	0x40023800
 80010c0:	40020c00 	.word	0x40020c00
 80010c4:	40006800 	.word	0x40006800
 80010c8:	40020400 	.word	0x40020400

080010cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	607b      	str	r3, [r7, #4]
 80010d6:	4b10      	ldr	r3, [pc, #64]	; (8001118 <MX_DMA_Init+0x4c>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	4a0f      	ldr	r2, [pc, #60]	; (8001118 <MX_DMA_Init+0x4c>)
 80010dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010e0:	6313      	str	r3, [r2, #48]	; 0x30
 80010e2:	4b0d      	ldr	r3, [pc, #52]	; (8001118 <MX_DMA_Init+0x4c>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010ea:	607b      	str	r3, [r7, #4]
 80010ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80010ee:	2200      	movs	r2, #0
 80010f0:	2105      	movs	r1, #5
 80010f2:	2039      	movs	r0, #57	; 0x39
 80010f4:	f002 f812 	bl	800311c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80010f8:	2039      	movs	r0, #57	; 0x39
 80010fa:	f002 f82b 	bl	8003154 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 80010fe:	2200      	movs	r2, #0
 8001100:	2105      	movs	r1, #5
 8001102:	2045      	movs	r0, #69	; 0x45
 8001104:	f002 f80a 	bl	800311c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001108:	2045      	movs	r0, #69	; 0x45
 800110a:	f002 f823 	bl	8003154 <HAL_NVIC_EnableIRQ>

}
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40023800 	.word	0x40023800

0800111c <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8001126:	bf00      	nop
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr

08001132 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8001132:	b480      	push	{r7}
 8001134:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8001136:	bf00      	nop
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001140:	b5b0      	push	{r4, r5, r7, lr}
 8001142:	b086      	sub	sp, #24
 8001144:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001146:	4b09      	ldr	r3, [pc, #36]	; (800116c <MX_FREERTOS_Init+0x2c>)
 8001148:	1d3c      	adds	r4, r7, #4
 800114a:	461d      	mov	r5, r3
 800114c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800114e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001150:	682b      	ldr	r3, [r5, #0]
 8001152:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001154:	1d3b      	adds	r3, r7, #4
 8001156:	2100      	movs	r1, #0
 8001158:	4618      	mov	r0, r3
 800115a:	f00a fd7c 	bl	800bc56 <osThreadCreate>
 800115e:	4603      	mov	r3, r0
 8001160:	4a03      	ldr	r2, [pc, #12]	; (8001170 <MX_FREERTOS_Init+0x30>)
 8001162:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001164:	bf00      	nop
 8001166:	3718      	adds	r7, #24
 8001168:	46bd      	mov	sp, r7
 800116a:	bdb0      	pop	{r4, r5, r7, pc}
 800116c:	0801596c 	.word	0x0801596c
 8001170:	20000210 	.word	0x20000210

08001174 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800117c:	f00c faba 	bl	800d6f4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    extern int32_t test_module_execute(void);
    test_module_execute();
 8001180:	f013 f928 	bl	80143d4 <test_module_execute>
    osDelay(2);
 8001184:	2002      	movs	r0, #2
 8001186:	f00a fd8d 	bl	800bca4 <osDelay>
  {
 800118a:	e7f9      	b.n	8001180 <StartDefaultTask+0xc>

0800118c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b08e      	sub	sp, #56	; 0x38
 8001190:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001192:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	605a      	str	r2, [r3, #4]
 800119c:	609a      	str	r2, [r3, #8]
 800119e:	60da      	str	r2, [r3, #12]
 80011a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	623b      	str	r3, [r7, #32]
 80011a6:	4bb3      	ldr	r3, [pc, #716]	; (8001474 <MX_GPIO_Init+0x2e8>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	4ab2      	ldr	r2, [pc, #712]	; (8001474 <MX_GPIO_Init+0x2e8>)
 80011ac:	f043 0310 	orr.w	r3, r3, #16
 80011b0:	6313      	str	r3, [r2, #48]	; 0x30
 80011b2:	4bb0      	ldr	r3, [pc, #704]	; (8001474 <MX_GPIO_Init+0x2e8>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	f003 0310 	and.w	r3, r3, #16
 80011ba:	623b      	str	r3, [r7, #32]
 80011bc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	61fb      	str	r3, [r7, #28]
 80011c2:	4bac      	ldr	r3, [pc, #688]	; (8001474 <MX_GPIO_Init+0x2e8>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	4aab      	ldr	r2, [pc, #684]	; (8001474 <MX_GPIO_Init+0x2e8>)
 80011c8:	f043 0302 	orr.w	r3, r3, #2
 80011cc:	6313      	str	r3, [r2, #48]	; 0x30
 80011ce:	4ba9      	ldr	r3, [pc, #676]	; (8001474 <MX_GPIO_Init+0x2e8>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	61fb      	str	r3, [r7, #28]
 80011d8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	61bb      	str	r3, [r7, #24]
 80011de:	4ba5      	ldr	r3, [pc, #660]	; (8001474 <MX_GPIO_Init+0x2e8>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	4aa4      	ldr	r2, [pc, #656]	; (8001474 <MX_GPIO_Init+0x2e8>)
 80011e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011e8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ea:	4ba2      	ldr	r3, [pc, #648]	; (8001474 <MX_GPIO_Init+0x2e8>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011f2:	61bb      	str	r3, [r7, #24]
 80011f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	617b      	str	r3, [r7, #20]
 80011fa:	4b9e      	ldr	r3, [pc, #632]	; (8001474 <MX_GPIO_Init+0x2e8>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	4a9d      	ldr	r2, [pc, #628]	; (8001474 <MX_GPIO_Init+0x2e8>)
 8001200:	f043 0308 	orr.w	r3, r3, #8
 8001204:	6313      	str	r3, [r2, #48]	; 0x30
 8001206:	4b9b      	ldr	r3, [pc, #620]	; (8001474 <MX_GPIO_Init+0x2e8>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	f003 0308 	and.w	r3, r3, #8
 800120e:	617b      	str	r3, [r7, #20]
 8001210:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	613b      	str	r3, [r7, #16]
 8001216:	4b97      	ldr	r3, [pc, #604]	; (8001474 <MX_GPIO_Init+0x2e8>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	4a96      	ldr	r2, [pc, #600]	; (8001474 <MX_GPIO_Init+0x2e8>)
 800121c:	f043 0304 	orr.w	r3, r3, #4
 8001220:	6313      	str	r3, [r2, #48]	; 0x30
 8001222:	4b94      	ldr	r3, [pc, #592]	; (8001474 <MX_GPIO_Init+0x2e8>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	f003 0304 	and.w	r3, r3, #4
 800122a:	613b      	str	r3, [r7, #16]
 800122c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]
 8001232:	4b90      	ldr	r3, [pc, #576]	; (8001474 <MX_GPIO_Init+0x2e8>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	4a8f      	ldr	r2, [pc, #572]	; (8001474 <MX_GPIO_Init+0x2e8>)
 8001238:	f043 0301 	orr.w	r3, r3, #1
 800123c:	6313      	str	r3, [r2, #48]	; 0x30
 800123e:	4b8d      	ldr	r3, [pc, #564]	; (8001474 <MX_GPIO_Init+0x2e8>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	60bb      	str	r3, [r7, #8]
 800124e:	4b89      	ldr	r3, [pc, #548]	; (8001474 <MX_GPIO_Init+0x2e8>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	4a88      	ldr	r2, [pc, #544]	; (8001474 <MX_GPIO_Init+0x2e8>)
 8001254:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001258:	6313      	str	r3, [r2, #48]	; 0x30
 800125a:	4b86      	ldr	r3, [pc, #536]	; (8001474 <MX_GPIO_Init+0x2e8>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001262:	60bb      	str	r3, [r7, #8]
 8001264:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	607b      	str	r3, [r7, #4]
 800126a:	4b82      	ldr	r3, [pc, #520]	; (8001474 <MX_GPIO_Init+0x2e8>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	4a81      	ldr	r2, [pc, #516]	; (8001474 <MX_GPIO_Init+0x2e8>)
 8001270:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001274:	6313      	str	r3, [r2, #48]	; 0x30
 8001276:	4b7f      	ldr	r3, [pc, #508]	; (8001474 <MX_GPIO_Init+0x2e8>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800127e:	607b      	str	r3, [r7, #4]
 8001280:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	603b      	str	r3, [r7, #0]
 8001286:	4b7b      	ldr	r3, [pc, #492]	; (8001474 <MX_GPIO_Init+0x2e8>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	4a7a      	ldr	r2, [pc, #488]	; (8001474 <MX_GPIO_Init+0x2e8>)
 800128c:	f043 0320 	orr.w	r3, r3, #32
 8001290:	6313      	str	r3, [r2, #48]	; 0x30
 8001292:	4b78      	ldr	r3, [pc, #480]	; (8001474 <MX_GPIO_Init+0x2e8>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	f003 0320 	and.w	r3, r3, #32
 800129a:	603b      	str	r3, [r7, #0]
 800129c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, IST_RESET_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 800129e:	2200      	movs	r2, #0
 80012a0:	f640 0104 	movw	r1, #2052	; 0x804
 80012a4:	4874      	ldr	r0, [pc, #464]	; (8001478 <MX_GPIO_Init+0x2ec>)
 80012a6:	f002 fd29 	bl	8003cfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, POWER1_CTRL_Pin|POWER2_CTRL_Pin|POWER3_CTRL_Pin|POWER4_CTRL_Pin, GPIO_PIN_RESET);
 80012aa:	2200      	movs	r2, #0
 80012ac:	213c      	movs	r1, #60	; 0x3c
 80012ae:	4873      	ldr	r0, [pc, #460]	; (800147c <MX_GPIO_Init+0x2f0>)
 80012b0:	f002 fd24 	bl	8003cfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED_A_Pin|LED_B_Pin|LED_C_Pin|LED_D_Pin
 80012b4:	2200      	movs	r2, #0
 80012b6:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 80012ba:	4871      	ldr	r0, [pc, #452]	; (8001480 <MX_GPIO_Init+0x2f4>)
 80012bc:	f002 fd1e 	bl	8003cfc <HAL_GPIO_WritePin>
                          |LED_E_Pin|LED_F_Pin|LED_G_Pin|LED_H_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SPI5_NSS_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 80012c0:	2200      	movs	r2, #0
 80012c2:	f244 0140 	movw	r1, #16448	; 0x4040
 80012c6:	486f      	ldr	r0, [pc, #444]	; (8001484 <MX_GPIO_Init+0x2f8>)
 80012c8:	f002 fd18 	bl	8003cfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IO_PROBE_GPIO_Port, IO_PROBE_Pin, GPIO_PIN_RESET);
 80012cc:	2200      	movs	r2, #0
 80012ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012d2:	486d      	ldr	r0, [pc, #436]	; (8001488 <MX_GPIO_Init+0x2fc>)
 80012d4:	f002 fd12 	bl	8003cfc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE1 PE0 PE4
                           PE5 PE6 PE13 PE8
                           PE9 PE7 PE10 PE12
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_4
 80012d8:	f24b 73fb 	movw	r3, #47099	; 0xb7fb
 80012dc:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_13|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012de:	2303      	movs	r3, #3
 80012e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ea:	4619      	mov	r1, r3
 80012ec:	4862      	ldr	r0, [pc, #392]	; (8001478 <MX_GPIO_Init+0x2ec>)
 80012ee:	f002 fb41 	bl	8003974 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = IST_RESET_Pin|LED_RED_Pin;
 80012f2:	f640 0304 	movw	r3, #2052	; 0x804
 80012f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f8:	2301      	movs	r3, #1
 80012fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001300:	2300      	movs	r3, #0
 8001302:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001304:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001308:	4619      	mov	r1, r3
 800130a:	485b      	ldr	r0, [pc, #364]	; (8001478 <MX_GPIO_Init+0x2ec>)
 800130c:	f002 fb32 	bl	8003974 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB4 PB3 PB9
                           PB7 PB6 PB1 PB0
                           PB10 PB11 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_9
 8001310:	f64c 73db 	movw	r3, #53211	; 0xcfdb
 8001314:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1|GPIO_PIN_0
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001316:	2303      	movs	r3, #3
 8001318:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800131e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001322:	4619      	mov	r1, r3
 8001324:	4859      	ldr	r0, [pc, #356]	; (800148c <MX_GPIO_Init+0x300>)
 8001326:	f002 fb25 	bl	8003974 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG13 PG15 PG12 PG11
                           PG10 PG0 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_12|GPIO_PIN_11
 800132a:	f64b 4301 	movw	r3, #48129	; 0xbc01
 800132e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_10|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001330:	2303      	movs	r3, #3
 8001332:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001338:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800133c:	4619      	mov	r1, r3
 800133e:	4850      	ldr	r0, [pc, #320]	; (8001480 <MX_GPIO_Init+0x2f4>)
 8001340:	f002 fb18 	bl	8003974 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD7 PD5 PD4 PD3
                           PD2 PD15 PD14 PD13
                           PD11 PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3
 8001344:	f64e 43bc 	movw	r3, #60604	; 0xecbc
 8001348:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_2|GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13
                          |GPIO_PIN_11|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800134a:	2303      	movs	r3, #3
 800134c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001352:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001356:	4619      	mov	r1, r3
 8001358:	484b      	ldr	r0, [pc, #300]	; (8001488 <MX_GPIO_Init+0x2fc>)
 800135a:	f002 fb0b 	bl	8003974 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC12 PC11 PC10 PC13
                           PC14 PC15 PC9 PC8
                           PC7 PC6 PC0 PC1
                           PC2 PC3 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_13
 800135e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001362:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001364:	2303      	movs	r3, #3
 8001366:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800136c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001370:	4619      	mov	r1, r3
 8001372:	4847      	ldr	r0, [pc, #284]	; (8001490 <MX_GPIO_Init+0x304>)
 8001374:	f002 fafe 	bl	8003974 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA15 PA10 PA9 PA4
                           PA6 PA5 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_4
 8001378:	f248 63f0 	movw	r3, #34544	; 0x86f0
 800137c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800137e:	2303      	movs	r3, #3
 8001380:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001382:	2300      	movs	r3, #0
 8001384:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001386:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800138a:	4619      	mov	r1, r3
 800138c:	4841      	ldr	r0, [pc, #260]	; (8001494 <MX_GPIO_Init+0x308>)
 800138e:	f002 faf1 	bl	8003974 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SYS_CFG_Pin;
 8001392:	2340      	movs	r3, #64	; 0x40
 8001394:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001396:	2300      	movs	r3, #0
 8001398:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SYS_CFG_GPIO_Port, &GPIO_InitStruct);
 800139e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013a2:	4619      	mov	r1, r3
 80013a4:	4838      	ldr	r0, [pc, #224]	; (8001488 <MX_GPIO_Init+0x2fc>)
 80013a6:	f002 fae5 	bl	8003974 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = PIN_Y_Pin|PIN_X_Pin|PIN_V_Pin|PIN_Z_Pin;
 80013aa:	23e4      	movs	r3, #228	; 0xe4
 80013ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ae:	2300      	movs	r3, #0
 80013b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80013b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ba:	4619      	mov	r1, r3
 80013bc:	4836      	ldr	r0, [pc, #216]	; (8001498 <MX_GPIO_Init+0x30c>)
 80013be:	f002 fad9 	bl	8003974 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI3 PI8 PI9 PI4
                           PI1 PI10 PI11 PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_4
 80013c2:	f640 731b 	movw	r3, #3867	; 0xf1b
 80013c6:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013c8:	2303      	movs	r3, #3
 80013ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80013d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013d4:	4619      	mov	r1, r3
 80013d6:	4830      	ldr	r0, [pc, #192]	; (8001498 <MX_GPIO_Init+0x30c>)
 80013d8:	f002 facc 	bl	8003974 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH15 PH13 PH14 PH12
                           PH11 PH10 PH8 PH9
                           PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_12
 80013dc:	f64f 7380 	movw	r3, #65408	; 0xff80
 80013e0:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013e2:	2303      	movs	r3, #3
 80013e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80013ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ee:	4619      	mov	r1, r3
 80013f0:	4822      	ldr	r0, [pc, #136]	; (800147c <MX_GPIO_Init+0x2f0>)
 80013f2:	f002 fabf 	bl	8003974 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF2 PF1 PF3
                           PF4 PF5 PF13 PF12
                           PF15 PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_3
 80013f6:	f64b 033f 	movw	r3, #47167	; 0xb83f
 80013fa:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_13|GPIO_PIN_12
                          |GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013fc:	2303      	movs	r3, #3
 80013fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001404:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001408:	4619      	mov	r1, r3
 800140a:	481e      	ldr	r0, [pc, #120]	; (8001484 <MX_GPIO_Init+0x2f8>)
 800140c:	f002 fab2 	bl	8003974 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = POWER1_CTRL_Pin|POWER2_CTRL_Pin|POWER3_CTRL_Pin|POWER4_CTRL_Pin;
 8001410:	233c      	movs	r3, #60	; 0x3c
 8001412:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001414:	2301      	movs	r3, #1
 8001416:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141c:	2300      	movs	r3, #0
 800141e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001420:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001424:	4619      	mov	r1, r3
 8001426:	4815      	ldr	r0, [pc, #84]	; (800147c <MX_GPIO_Init+0x2f0>)
 8001428:	f002 faa4 	bl	8003974 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LED_A_Pin|LED_B_Pin|LED_C_Pin|LED_D_Pin
 800142c:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 8001430:	627b      	str	r3, [r7, #36]	; 0x24
                          |LED_E_Pin|LED_F_Pin|LED_G_Pin|LED_H_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001432:	2301      	movs	r3, #1
 8001434:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001436:	2300      	movs	r3, #0
 8001438:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143a:	2300      	movs	r3, #0
 800143c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800143e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001442:	4619      	mov	r1, r3
 8001444:	480e      	ldr	r0, [pc, #56]	; (8001480 <MX_GPIO_Init+0x2f4>)
 8001446:	f002 fa95 	bl	8003974 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = SPI5_NSS_Pin|LED_GREEN_Pin;
 800144a:	f244 0340 	movw	r3, #16448	; 0x4040
 800144e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001450:	2301      	movs	r3, #1
 8001452:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001458:	2300      	movs	r3, #0
 800145a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800145c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001460:	4619      	mov	r1, r3
 8001462:	4808      	ldr	r0, [pc, #32]	; (8001484 <MX_GPIO_Init+0x2f8>)
 8001464:	f002 fa86 	bl	8003974 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 8001468:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800146c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800146e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001472:	e013      	b.n	800149c <MX_GPIO_Init+0x310>
 8001474:	40023800 	.word	0x40023800
 8001478:	40021000 	.word	0x40021000
 800147c:	40021c00 	.word	0x40021c00
 8001480:	40021800 	.word	0x40021800
 8001484:	40021400 	.word	0x40021400
 8001488:	40020c00 	.word	0x40020c00
 800148c:	40020400 	.word	0x40020400
 8001490:	40020800 	.word	0x40020800
 8001494:	40020000 	.word	0x40020000
 8001498:	40022000 	.word	0x40022000
 800149c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800149e:	2301      	movs	r3, #1
 80014a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 80014a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a6:	4619      	mov	r1, r3
 80014a8:	4816      	ldr	r0, [pc, #88]	; (8001504 <MX_GPIO_Init+0x378>)
 80014aa:	f002 fa63 	bl	8003974 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_Pin;
 80014ae:	2304      	movs	r3, #4
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014b2:	2300      	movs	r3, #0
 80014b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b6:	2300      	movs	r3, #0
 80014b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 80014ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014be:	4619      	mov	r1, r3
 80014c0:	4811      	ldr	r0, [pc, #68]	; (8001508 <MX_GPIO_Init+0x37c>)
 80014c2:	f002 fa57 	bl	8003974 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = PIN_YA1_Pin|PIN_ZA0_Pin|PIN_XA2_Pin|PIN_W_Pin;
 80014c6:	230f      	movs	r3, #15
 80014c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ca:	2300      	movs	r3, #0
 80014cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ce:	2300      	movs	r3, #0
 80014d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014d6:	4619      	mov	r1, r3
 80014d8:	480c      	ldr	r0, [pc, #48]	; (800150c <MX_GPIO_Init+0x380>)
 80014da:	f002 fa4b 	bl	8003974 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IO_PROBE_Pin;
 80014de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e4:	2301      	movs	r3, #1
 80014e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ec:	2300      	movs	r3, #0
 80014ee:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(IO_PROBE_GPIO_Port, &GPIO_InitStruct);
 80014f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014f4:	4619      	mov	r1, r3
 80014f6:	4806      	ldr	r0, [pc, #24]	; (8001510 <MX_GPIO_Init+0x384>)
 80014f8:	f002 fa3c 	bl	8003974 <HAL_GPIO_Init>

}
 80014fc:	bf00      	nop
 80014fe:	3738      	adds	r7, #56	; 0x38
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40021400 	.word	0x40021400
 8001508:	40020400 	.word	0x40020400
 800150c:	40020000 	.word	0x40020000
 8001510:	40020c00 	.word	0x40020c00

08001514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001518:	f000 fe4a 	bl	80021b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800151c:	f000 f820 	bl	8001560 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001520:	f7ff fe34 	bl	800118c <MX_GPIO_Init>
  MX_DMA_Init();
 8001524:	f7ff fdd2 	bl	80010cc <MX_DMA_Init>
  MX_SPI5_Init();
 8001528:	f000 f89c 	bl	8001664 <MX_SPI5_Init>
  MX_CAN1_Init();
 800152c:	f7ff fcb4 	bl	8000e98 <MX_CAN1_Init>
  MX_USART6_UART_Init();
 8001530:	f000 fcfc 	bl	8001f2c <MX_USART6_UART_Init>
  MX_TIM1_Init();
 8001534:	f000 fa34 	bl	80019a0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001538:	f000 fac2 	bl	8001ac0 <MX_TIM2_Init>
  MX_TIM3_Init();
 800153c:	f000 fb0c 	bl	8001b58 <MX_TIM3_Init>
  MX_TIM12_Init();
 8001540:	f000 fb64 	bl	8001c0c <MX_TIM12_Init>
  MX_CAN2_Init();
 8001544:	f7ff fcde 	bl	8000f04 <MX_CAN2_Init>
  MX_USART3_UART_Init();
 8001548:	f000 fcc6 	bl	8001ed8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  hw_init();
 800154c:	f00d fec8 	bl	800f2e0 <hw_init>
  task_init();
 8001550:	f00d fede 	bl	800f310 <task_init>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001554:	f7ff fdf4 	bl	8001140 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001558:	f00a fb66 	bl	800bc28 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800155c:	e7fe      	b.n	800155c <main+0x48>
	...

08001560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b094      	sub	sp, #80	; 0x50
 8001564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001566:	f107 0320 	add.w	r3, r7, #32
 800156a:	2230      	movs	r2, #48	; 0x30
 800156c:	2100      	movs	r1, #0
 800156e:	4618      	mov	r0, r3
 8001570:	f013 f873 	bl	801465a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001574:	f107 030c 	add.w	r3, r7, #12
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	60da      	str	r2, [r3, #12]
 8001582:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001584:	2300      	movs	r3, #0
 8001586:	60bb      	str	r3, [r7, #8]
 8001588:	4b28      	ldr	r3, [pc, #160]	; (800162c <SystemClock_Config+0xcc>)
 800158a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158c:	4a27      	ldr	r2, [pc, #156]	; (800162c <SystemClock_Config+0xcc>)
 800158e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001592:	6413      	str	r3, [r2, #64]	; 0x40
 8001594:	4b25      	ldr	r3, [pc, #148]	; (800162c <SystemClock_Config+0xcc>)
 8001596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800159c:	60bb      	str	r3, [r7, #8]
 800159e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015a0:	2300      	movs	r3, #0
 80015a2:	607b      	str	r3, [r7, #4]
 80015a4:	4b22      	ldr	r3, [pc, #136]	; (8001630 <SystemClock_Config+0xd0>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a21      	ldr	r2, [pc, #132]	; (8001630 <SystemClock_Config+0xd0>)
 80015aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80015ae:	6013      	str	r3, [r2, #0]
 80015b0:	4b1f      	ldr	r3, [pc, #124]	; (8001630 <SystemClock_Config+0xd0>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015b8:	607b      	str	r3, [r7, #4]
 80015ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015bc:	2301      	movs	r3, #1
 80015be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015c4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015c6:	2302      	movs	r3, #2
 80015c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 80015d0:	2306      	movs	r3, #6
 80015d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80015d4:	23a8      	movs	r3, #168	; 0xa8
 80015d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015d8:	2302      	movs	r3, #2
 80015da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80015dc:	2307      	movs	r3, #7
 80015de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015e0:	f107 0320 	add.w	r3, r7, #32
 80015e4:	4618      	mov	r0, r3
 80015e6:	f003 fe0d 	bl	8005204 <HAL_RCC_OscConfig>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80015f0:	f000 f832 	bl	8001658 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015f4:	230f      	movs	r3, #15
 80015f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015f8:	2302      	movs	r3, #2
 80015fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015fc:	2300      	movs	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001600:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001604:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001606:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800160a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800160c:	f107 030c 	add.w	r3, r7, #12
 8001610:	2105      	movs	r1, #5
 8001612:	4618      	mov	r0, r3
 8001614:	f004 f86e 	bl	80056f4 <HAL_RCC_ClockConfig>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800161e:	f000 f81b 	bl	8001658 <Error_Handler>
  }
}
 8001622:	bf00      	nop
 8001624:	3750      	adds	r7, #80	; 0x50
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40023800 	.word	0x40023800
 8001630:	40007000 	.word	0x40007000

08001634 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a04      	ldr	r2, [pc, #16]	; (8001654 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d101      	bne.n	800164a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001646:	f000 fdd5 	bl	80021f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM2) {
  }
  /* USER CODE END Callback 1 */
}
 800164a:	bf00      	nop
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40000c00 	.word	0x40000c00

08001658 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800165c:	b672      	cpsid	i
}
 800165e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001660:	e7fe      	b.n	8001660 <Error_Handler+0x8>
	...

08001664 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8001668:	4b17      	ldr	r3, [pc, #92]	; (80016c8 <MX_SPI5_Init+0x64>)
 800166a:	4a18      	ldr	r2, [pc, #96]	; (80016cc <MX_SPI5_Init+0x68>)
 800166c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800166e:	4b16      	ldr	r3, [pc, #88]	; (80016c8 <MX_SPI5_Init+0x64>)
 8001670:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001674:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001676:	4b14      	ldr	r3, [pc, #80]	; (80016c8 <MX_SPI5_Init+0x64>)
 8001678:	2200      	movs	r2, #0
 800167a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800167c:	4b12      	ldr	r3, [pc, #72]	; (80016c8 <MX_SPI5_Init+0x64>)
 800167e:	2200      	movs	r2, #0
 8001680:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001682:	4b11      	ldr	r3, [pc, #68]	; (80016c8 <MX_SPI5_Init+0x64>)
 8001684:	2200      	movs	r2, #0
 8001686:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001688:	4b0f      	ldr	r3, [pc, #60]	; (80016c8 <MX_SPI5_Init+0x64>)
 800168a:	2200      	movs	r2, #0
 800168c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800168e:	4b0e      	ldr	r3, [pc, #56]	; (80016c8 <MX_SPI5_Init+0x64>)
 8001690:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001694:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001696:	4b0c      	ldr	r3, [pc, #48]	; (80016c8 <MX_SPI5_Init+0x64>)
 8001698:	2230      	movs	r2, #48	; 0x30
 800169a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800169c:	4b0a      	ldr	r3, [pc, #40]	; (80016c8 <MX_SPI5_Init+0x64>)
 800169e:	2200      	movs	r2, #0
 80016a0:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80016a2:	4b09      	ldr	r3, [pc, #36]	; (80016c8 <MX_SPI5_Init+0x64>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016a8:	4b07      	ldr	r3, [pc, #28]	; (80016c8 <MX_SPI5_Init+0x64>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80016ae:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <MX_SPI5_Init+0x64>)
 80016b0:	220a      	movs	r2, #10
 80016b2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80016b4:	4804      	ldr	r0, [pc, #16]	; (80016c8 <MX_SPI5_Init+0x64>)
 80016b6:	f004 fa2f 	bl	8005b18 <HAL_SPI_Init>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80016c0:	f7ff ffca 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80016c4:	bf00      	nop
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	20000214 	.word	0x20000214
 80016cc:	40015000 	.word	0x40015000

080016d0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b08a      	sub	sp, #40	; 0x28
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d8:	f107 0314 	add.w	r3, r7, #20
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
 80016e6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a19      	ldr	r2, [pc, #100]	; (8001754 <HAL_SPI_MspInit+0x84>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d12c      	bne.n	800174c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	613b      	str	r3, [r7, #16]
 80016f6:	4b18      	ldr	r3, [pc, #96]	; (8001758 <HAL_SPI_MspInit+0x88>)
 80016f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fa:	4a17      	ldr	r2, [pc, #92]	; (8001758 <HAL_SPI_MspInit+0x88>)
 80016fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001700:	6453      	str	r3, [r2, #68]	; 0x44
 8001702:	4b15      	ldr	r3, [pc, #84]	; (8001758 <HAL_SPI_MspInit+0x88>)
 8001704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001706:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800170a:	613b      	str	r3, [r7, #16]
 800170c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	60fb      	str	r3, [r7, #12]
 8001712:	4b11      	ldr	r3, [pc, #68]	; (8001758 <HAL_SPI_MspInit+0x88>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	4a10      	ldr	r2, [pc, #64]	; (8001758 <HAL_SPI_MspInit+0x88>)
 8001718:	f043 0320 	orr.w	r3, r3, #32
 800171c:	6313      	str	r3, [r2, #48]	; 0x30
 800171e:	4b0e      	ldr	r3, [pc, #56]	; (8001758 <HAL_SPI_MspInit+0x88>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	f003 0320 	and.w	r3, r3, #32
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF9     ------> SPI5_MOSI
    PF8     ------> SPI5_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_8;
 800172a:	f44f 7360 	mov.w	r3, #896	; 0x380
 800172e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001730:	2302      	movs	r3, #2
 8001732:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	2300      	movs	r3, #0
 8001736:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001738:	2303      	movs	r3, #3
 800173a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800173c:	2305      	movs	r3, #5
 800173e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001740:	f107 0314 	add.w	r3, r7, #20
 8001744:	4619      	mov	r1, r3
 8001746:	4805      	ldr	r0, [pc, #20]	; (800175c <HAL_SPI_MspInit+0x8c>)
 8001748:	f002 f914 	bl	8003974 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 800174c:	bf00      	nop
 800174e:	3728      	adds	r7, #40	; 0x28
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40015000 	.word	0x40015000
 8001758:	40023800 	.word	0x40023800
 800175c:	40021400 	.word	0x40021400

08001760 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	607b      	str	r3, [r7, #4]
 800176a:	4b12      	ldr	r3, [pc, #72]	; (80017b4 <HAL_MspInit+0x54>)
 800176c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176e:	4a11      	ldr	r2, [pc, #68]	; (80017b4 <HAL_MspInit+0x54>)
 8001770:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001774:	6453      	str	r3, [r2, #68]	; 0x44
 8001776:	4b0f      	ldr	r3, [pc, #60]	; (80017b4 <HAL_MspInit+0x54>)
 8001778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800177e:	607b      	str	r3, [r7, #4]
 8001780:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	603b      	str	r3, [r7, #0]
 8001786:	4b0b      	ldr	r3, [pc, #44]	; (80017b4 <HAL_MspInit+0x54>)
 8001788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178a:	4a0a      	ldr	r2, [pc, #40]	; (80017b4 <HAL_MspInit+0x54>)
 800178c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001790:	6413      	str	r3, [r2, #64]	; 0x40
 8001792:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <HAL_MspInit+0x54>)
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800179a:	603b      	str	r3, [r7, #0]
 800179c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800179e:	2200      	movs	r2, #0
 80017a0:	210f      	movs	r1, #15
 80017a2:	f06f 0001 	mvn.w	r0, #1
 80017a6:	f001 fcb9 	bl	800311c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017aa:	bf00      	nop
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40023800 	.word	0x40023800

080017b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b08e      	sub	sp, #56	; 0x38
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80017c0:	2300      	movs	r3, #0
 80017c2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80017c4:	2300      	movs	r3, #0
 80017c6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 80017c8:	2300      	movs	r3, #0
 80017ca:	60fb      	str	r3, [r7, #12]
 80017cc:	4b33      	ldr	r3, [pc, #204]	; (800189c <HAL_InitTick+0xe4>)
 80017ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d0:	4a32      	ldr	r2, [pc, #200]	; (800189c <HAL_InitTick+0xe4>)
 80017d2:	f043 0308 	orr.w	r3, r3, #8
 80017d6:	6413      	str	r3, [r2, #64]	; 0x40
 80017d8:	4b30      	ldr	r3, [pc, #192]	; (800189c <HAL_InitTick+0xe4>)
 80017da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017dc:	f003 0308 	and.w	r3, r3, #8
 80017e0:	60fb      	str	r3, [r7, #12]
 80017e2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017e4:	f107 0210 	add.w	r2, r7, #16
 80017e8:	f107 0314 	add.w	r3, r7, #20
 80017ec:	4611      	mov	r1, r2
 80017ee:	4618      	mov	r0, r3
 80017f0:	f004 f960 	bl	8005ab4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80017f4:	6a3b      	ldr	r3, [r7, #32]
 80017f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80017f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d103      	bne.n	8001806 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80017fe:	f004 f931 	bl	8005a64 <HAL_RCC_GetPCLK1Freq>
 8001802:	6378      	str	r0, [r7, #52]	; 0x34
 8001804:	e004      	b.n	8001810 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001806:	f004 f92d 	bl	8005a64 <HAL_RCC_GetPCLK1Freq>
 800180a:	4603      	mov	r3, r0
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001812:	4a23      	ldr	r2, [pc, #140]	; (80018a0 <HAL_InitTick+0xe8>)
 8001814:	fba2 2303 	umull	r2, r3, r2, r3
 8001818:	0c9b      	lsrs	r3, r3, #18
 800181a:	3b01      	subs	r3, #1
 800181c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 800181e:	4b21      	ldr	r3, [pc, #132]	; (80018a4 <HAL_InitTick+0xec>)
 8001820:	4a21      	ldr	r2, [pc, #132]	; (80018a8 <HAL_InitTick+0xf0>)
 8001822:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8001824:	4b1f      	ldr	r3, [pc, #124]	; (80018a4 <HAL_InitTick+0xec>)
 8001826:	f240 32e7 	movw	r2, #999	; 0x3e7
 800182a:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 800182c:	4a1d      	ldr	r2, [pc, #116]	; (80018a4 <HAL_InitTick+0xec>)
 800182e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001830:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8001832:	4b1c      	ldr	r3, [pc, #112]	; (80018a4 <HAL_InitTick+0xec>)
 8001834:	2200      	movs	r2, #0
 8001836:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001838:	4b1a      	ldr	r3, [pc, #104]	; (80018a4 <HAL_InitTick+0xec>)
 800183a:	2200      	movs	r2, #0
 800183c:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800183e:	4b19      	ldr	r3, [pc, #100]	; (80018a4 <HAL_InitTick+0xec>)
 8001840:	2200      	movs	r2, #0
 8001842:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8001844:	4817      	ldr	r0, [pc, #92]	; (80018a4 <HAL_InitTick+0xec>)
 8001846:	f004 fc7d 	bl	8006144 <HAL_TIM_Base_Init>
 800184a:	4603      	mov	r3, r0
 800184c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001850:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001854:	2b00      	cmp	r3, #0
 8001856:	d11b      	bne.n	8001890 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8001858:	4812      	ldr	r0, [pc, #72]	; (80018a4 <HAL_InitTick+0xec>)
 800185a:	f004 fcc3 	bl	80061e4 <HAL_TIM_Base_Start_IT>
 800185e:	4603      	mov	r3, r0
 8001860:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001864:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001868:	2b00      	cmp	r3, #0
 800186a:	d111      	bne.n	8001890 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800186c:	2032      	movs	r0, #50	; 0x32
 800186e:	f001 fc71 	bl	8003154 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2b0f      	cmp	r3, #15
 8001876:	d808      	bhi.n	800188a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8001878:	2200      	movs	r2, #0
 800187a:	6879      	ldr	r1, [r7, #4]
 800187c:	2032      	movs	r0, #50	; 0x32
 800187e:	f001 fc4d 	bl	800311c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001882:	4a0a      	ldr	r2, [pc, #40]	; (80018ac <HAL_InitTick+0xf4>)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6013      	str	r3, [r2, #0]
 8001888:	e002      	b.n	8001890 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001890:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001894:	4618      	mov	r0, r3
 8001896:	3738      	adds	r7, #56	; 0x38
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	40023800 	.word	0x40023800
 80018a0:	431bde83 	.word	0x431bde83
 80018a4:	2000026c 	.word	0x2000026c
 80018a8:	40000c00 	.word	0x40000c00
 80018ac:	20000004 	.word	0x20000004

080018b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018b4:	e7fe      	b.n	80018b4 <NMI_Handler+0x4>

080018b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018b6:	b480      	push	{r7}
 80018b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ba:	e7fe      	b.n	80018ba <HardFault_Handler+0x4>

080018bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018c0:	e7fe      	b.n	80018c0 <MemManage_Handler+0x4>

080018c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018c2:	b480      	push	{r7}
 80018c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018c6:	e7fe      	b.n	80018c6 <BusFault_Handler+0x4>

080018c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018cc:	e7fe      	b.n	80018cc <UsageFault_Handler+0x4>

080018ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018ce:	b480      	push	{r7}
 80018d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80018e0:	4802      	ldr	r0, [pc, #8]	; (80018ec <CAN1_TX_IRQHandler+0x10>)
 80018e2:	f001 f938 	bl	8002b56 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	200001bc 	.word	0x200001bc

080018f0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80018f4:	4802      	ldr	r0, [pc, #8]	; (8001900 <CAN1_RX0_IRQHandler+0x10>)
 80018f6:	f001 f92e 	bl	8002b56 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	200001bc 	.word	0x200001bc

08001904 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001908:	4802      	ldr	r0, [pc, #8]	; (8001914 <TIM2_IRQHandler+0x10>)
 800190a:	f004 fdf3 	bl	80064f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	200002fc 	.word	0x200002fc

08001918 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800191c:	4802      	ldr	r0, [pc, #8]	; (8001928 <TIM5_IRQHandler+0x10>)
 800191e:	f004 fde9 	bl	80064f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001922:	bf00      	nop
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	2000026c 	.word	0x2000026c

0800192c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001930:	4802      	ldr	r0, [pc, #8]	; (800193c <DMA2_Stream1_IRQHandler+0x10>)
 8001932:	f001 fdb5 	bl	80034a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001936:	bf00      	nop
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	20000464 	.word	0x20000464

08001940 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001944:	4802      	ldr	r0, [pc, #8]	; (8001950 <OTG_FS_IRQHandler+0x10>)
 8001946:	f002 fb50 	bl	8003fea <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800194a:	bf00      	nop
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	20005788 	.word	0x20005788

08001954 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8001958:	4802      	ldr	r0, [pc, #8]	; (8001964 <DMA2_Stream6_IRQHandler+0x10>)
 800195a:	f001 fda1 	bl	80034a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	200004c4 	.word	0x200004c4

08001968 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
//  usart3_idle_callback();
  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800196c:	4802      	ldr	r0, [pc, #8]	; (8001978 <USART6_IRQHandler+0x10>)
 800196e:	f005 fd47 	bl	8007400 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	2000041c 	.word	0x2000041c

0800197c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001980:	4b06      	ldr	r3, [pc, #24]	; (800199c <SystemInit+0x20>)
 8001982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001986:	4a05      	ldr	r2, [pc, #20]	; (800199c <SystemInit+0x20>)
 8001988:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800198c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001990:	bf00      	nop
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b092      	sub	sp, #72	; 0x48
 80019a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019a6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]
 80019ae:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	605a      	str	r2, [r3, #4]
 80019ba:	609a      	str	r2, [r3, #8]
 80019bc:	60da      	str	r2, [r3, #12]
 80019be:	611a      	str	r2, [r3, #16]
 80019c0:	615a      	str	r2, [r3, #20]
 80019c2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80019c4:	1d3b      	adds	r3, r7, #4
 80019c6:	2220      	movs	r2, #32
 80019c8:	2100      	movs	r1, #0
 80019ca:	4618      	mov	r0, r3
 80019cc:	f012 fe45 	bl	801465a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80019d0:	4b39      	ldr	r3, [pc, #228]	; (8001ab8 <MX_TIM1_Init+0x118>)
 80019d2:	4a3a      	ldr	r2, [pc, #232]	; (8001abc <MX_TIM1_Init+0x11c>)
 80019d4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16;
 80019d6:	4b38      	ldr	r3, [pc, #224]	; (8001ab8 <MX_TIM1_Init+0x118>)
 80019d8:	2210      	movs	r2, #16
 80019da:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019dc:	4b36      	ldr	r3, [pc, #216]	; (8001ab8 <MX_TIM1_Init+0x118>)
 80019de:	2200      	movs	r2, #0
 80019e0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 80019e2:	4b35      	ldr	r3, [pc, #212]	; (8001ab8 <MX_TIM1_Init+0x118>)
 80019e4:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80019e8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ea:	4b33      	ldr	r3, [pc, #204]	; (8001ab8 <MX_TIM1_Init+0x118>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80019f0:	4b31      	ldr	r3, [pc, #196]	; (8001ab8 <MX_TIM1_Init+0x118>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019f6:	4b30      	ldr	r3, [pc, #192]	; (8001ab8 <MX_TIM1_Init+0x118>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80019fc:	482e      	ldr	r0, [pc, #184]	; (8001ab8 <MX_TIM1_Init+0x118>)
 80019fe:	f004 fc61 	bl	80062c4 <HAL_TIM_PWM_Init>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001a08:	f7ff fe26 	bl	8001658 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a10:	2300      	movs	r3, #0
 8001a12:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a14:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4827      	ldr	r0, [pc, #156]	; (8001ab8 <MX_TIM1_Init+0x118>)
 8001a1c:	f005 fb28 	bl	8007070 <HAL_TIMEx_MasterConfigSynchronization>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001a26:	f7ff fe17 	bl	8001658 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a2a:	2360      	movs	r3, #96	; 0x60
 8001a2c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1000;
 8001a2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a32:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a34:	2300      	movs	r3, #0
 8001a36:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a40:	2300      	movs	r3, #0
 8001a42:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a44:	2300      	movs	r3, #0
 8001a46:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4819      	ldr	r0, [pc, #100]	; (8001ab8 <MX_TIM1_Init+0x118>)
 8001a52:	f004 fe3f 	bl	80066d4 <HAL_TIM_PWM_ConfigChannel>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8001a5c:	f7ff fdfc 	bl	8001658 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a64:	220c      	movs	r2, #12
 8001a66:	4619      	mov	r1, r3
 8001a68:	4813      	ldr	r0, [pc, #76]	; (8001ab8 <MX_TIM1_Init+0x118>)
 8001a6a:	f004 fe33 	bl	80066d4 <HAL_TIM_PWM_ConfigChannel>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8001a74:	f7ff fdf0 	bl	8001658 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a80:	2300      	movs	r3, #0
 8001a82:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a84:	2300      	movs	r3, #0
 8001a86:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a90:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a92:	2300      	movs	r3, #0
 8001a94:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a96:	1d3b      	adds	r3, r7, #4
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4807      	ldr	r0, [pc, #28]	; (8001ab8 <MX_TIM1_Init+0x118>)
 8001a9c:	f005 fb64 	bl	8007168 <HAL_TIMEx_ConfigBreakDeadTime>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8001aa6:	f7ff fdd7 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001aaa:	4803      	ldr	r0, [pc, #12]	; (8001ab8 <MX_TIM1_Init+0x118>)
 8001aac:	f000 f968 	bl	8001d80 <HAL_TIM_MspPostInit>

}
 8001ab0:	bf00      	nop
 8001ab2:	3748      	adds	r7, #72	; 0x48
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	200002b4 	.word	0x200002b4
 8001abc:	40010000 	.word	0x40010000

08001ac0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b086      	sub	sp, #24
 8001ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ac6:	f107 0308 	add.w	r3, r7, #8
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	605a      	str	r2, [r3, #4]
 8001ad0:	609a      	str	r2, [r3, #8]
 8001ad2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ad4:	463b      	mov	r3, r7
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001adc:	4b1d      	ldr	r3, [pc, #116]	; (8001b54 <MX_TIM2_Init+0x94>)
 8001ade:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ae2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8001ae4:	4b1b      	ldr	r3, [pc, #108]	; (8001b54 <MX_TIM2_Init+0x94>)
 8001ae6:	2253      	movs	r2, #83	; 0x53
 8001ae8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aea:	4b1a      	ldr	r3, [pc, #104]	; (8001b54 <MX_TIM2_Init+0x94>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001af0:	4b18      	ldr	r3, [pc, #96]	; (8001b54 <MX_TIM2_Init+0x94>)
 8001af2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001af6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001af8:	4b16      	ldr	r3, [pc, #88]	; (8001b54 <MX_TIM2_Init+0x94>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001afe:	4b15      	ldr	r3, [pc, #84]	; (8001b54 <MX_TIM2_Init+0x94>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b04:	4813      	ldr	r0, [pc, #76]	; (8001b54 <MX_TIM2_Init+0x94>)
 8001b06:	f004 fb1d 	bl	8006144 <HAL_TIM_Base_Init>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001b10:	f7ff fda2 	bl	8001658 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b18:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b1a:	f107 0308 	add.w	r3, r7, #8
 8001b1e:	4619      	mov	r1, r3
 8001b20:	480c      	ldr	r0, [pc, #48]	; (8001b54 <MX_TIM2_Init+0x94>)
 8001b22:	f004 fe99 	bl	8006858 <HAL_TIM_ConfigClockSource>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001b2c:	f7ff fd94 	bl	8001658 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b30:	2300      	movs	r3, #0
 8001b32:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b34:	2300      	movs	r3, #0
 8001b36:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b38:	463b      	mov	r3, r7
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4805      	ldr	r0, [pc, #20]	; (8001b54 <MX_TIM2_Init+0x94>)
 8001b3e:	f005 fa97 	bl	8007070 <HAL_TIMEx_MasterConfigSynchronization>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001b48:	f7ff fd86 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b4c:	bf00      	nop
 8001b4e:	3718      	adds	r7, #24
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	200002fc 	.word	0x200002fc

08001b58 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b08a      	sub	sp, #40	; 0x28
 8001b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b5e:	f107 0320 	add.w	r3, r7, #32
 8001b62:	2200      	movs	r2, #0
 8001b64:	601a      	str	r2, [r3, #0]
 8001b66:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b68:	1d3b      	adds	r3, r7, #4
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	605a      	str	r2, [r3, #4]
 8001b70:	609a      	str	r2, [r3, #8]
 8001b72:	60da      	str	r2, [r3, #12]
 8001b74:	611a      	str	r2, [r3, #16]
 8001b76:	615a      	str	r2, [r3, #20]
 8001b78:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b7a:	4b22      	ldr	r3, [pc, #136]	; (8001c04 <MX_TIM3_Init+0xac>)
 8001b7c:	4a22      	ldr	r2, [pc, #136]	; (8001c08 <MX_TIM3_Init+0xb0>)
 8001b7e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8001b80:	4b20      	ldr	r3, [pc, #128]	; (8001c04 <MX_TIM3_Init+0xac>)
 8001b82:	2253      	movs	r2, #83	; 0x53
 8001b84:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b86:	4b1f      	ldr	r3, [pc, #124]	; (8001c04 <MX_TIM3_Init+0xac>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000-1;
 8001b8c:	4b1d      	ldr	r3, [pc, #116]	; (8001c04 <MX_TIM3_Init+0xac>)
 8001b8e:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001b92:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b94:	4b1b      	ldr	r3, [pc, #108]	; (8001c04 <MX_TIM3_Init+0xac>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b9a:	4b1a      	ldr	r3, [pc, #104]	; (8001c04 <MX_TIM3_Init+0xac>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001ba0:	4818      	ldr	r0, [pc, #96]	; (8001c04 <MX_TIM3_Init+0xac>)
 8001ba2:	f004 fb8f 	bl	80062c4 <HAL_TIM_PWM_Init>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001bac:	f7ff fd54 	bl	8001658 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001bb8:	f107 0320 	add.w	r3, r7, #32
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4811      	ldr	r0, [pc, #68]	; (8001c04 <MX_TIM3_Init+0xac>)
 8001bc0:	f005 fa56 	bl	8007070 <HAL_TIMEx_MasterConfigSynchronization>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001bca:	f7ff fd45 	bl	8001658 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bce:	2360      	movs	r3, #96	; 0x60
 8001bd0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001bde:	1d3b      	adds	r3, r7, #4
 8001be0:	2204      	movs	r2, #4
 8001be2:	4619      	mov	r1, r3
 8001be4:	4807      	ldr	r0, [pc, #28]	; (8001c04 <MX_TIM3_Init+0xac>)
 8001be6:	f004 fd75 	bl	80066d4 <HAL_TIM_PWM_ConfigChannel>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001bf0:	f7ff fd32 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001bf4:	4803      	ldr	r0, [pc, #12]	; (8001c04 <MX_TIM3_Init+0xac>)
 8001bf6:	f000 f8c3 	bl	8001d80 <HAL_TIM_MspPostInit>

}
 8001bfa:	bf00      	nop
 8001bfc:	3728      	adds	r7, #40	; 0x28
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	20000344 	.word	0x20000344
 8001c08:	40000400 	.word	0x40000400

08001c0c <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b088      	sub	sp, #32
 8001c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c12:	1d3b      	adds	r3, r7, #4
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	605a      	str	r2, [r3, #4]
 8001c1a:	609a      	str	r2, [r3, #8]
 8001c1c:	60da      	str	r2, [r3, #12]
 8001c1e:	611a      	str	r2, [r3, #16]
 8001c20:	615a      	str	r2, [r3, #20]
 8001c22:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001c24:	4b1a      	ldr	r3, [pc, #104]	; (8001c90 <MX_TIM12_Init+0x84>)
 8001c26:	4a1b      	ldr	r2, [pc, #108]	; (8001c94 <MX_TIM12_Init+0x88>)
 8001c28:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 83;
 8001c2a:	4b19      	ldr	r3, [pc, #100]	; (8001c90 <MX_TIM12_Init+0x84>)
 8001c2c:	2253      	movs	r2, #83	; 0x53
 8001c2e:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c30:	4b17      	ldr	r3, [pc, #92]	; (8001c90 <MX_TIM12_Init+0x84>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 20000-1;
 8001c36:	4b16      	ldr	r3, [pc, #88]	; (8001c90 <MX_TIM12_Init+0x84>)
 8001c38:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001c3c:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c3e:	4b14      	ldr	r3, [pc, #80]	; (8001c90 <MX_TIM12_Init+0x84>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c44:	4b12      	ldr	r3, [pc, #72]	; (8001c90 <MX_TIM12_Init+0x84>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001c4a:	4811      	ldr	r0, [pc, #68]	; (8001c90 <MX_TIM12_Init+0x84>)
 8001c4c:	f004 fb3a 	bl	80062c4 <HAL_TIM_PWM_Init>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8001c56:	f7ff fcff 	bl	8001658 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c5a:	2360      	movs	r3, #96	; 0x60
 8001c5c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c62:	2300      	movs	r3, #0
 8001c64:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c66:	2300      	movs	r3, #0
 8001c68:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c6a:	1d3b      	adds	r3, r7, #4
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4807      	ldr	r0, [pc, #28]	; (8001c90 <MX_TIM12_Init+0x84>)
 8001c72:	f004 fd2f 	bl	80066d4 <HAL_TIM_PWM_ConfigChannel>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8001c7c:	f7ff fcec 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001c80:	4803      	ldr	r0, [pc, #12]	; (8001c90 <MX_TIM12_Init+0x84>)
 8001c82:	f000 f87d 	bl	8001d80 <HAL_TIM_MspPostInit>

}
 8001c86:	bf00      	nop
 8001c88:	3720      	adds	r7, #32
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	2000038c 	.word	0x2000038c
 8001c94:	40001800 	.word	0x40001800

08001c98 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b087      	sub	sp, #28
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a1f      	ldr	r2, [pc, #124]	; (8001d24 <HAL_TIM_PWM_MspInit+0x8c>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d10e      	bne.n	8001cc8 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	617b      	str	r3, [r7, #20]
 8001cae:	4b1e      	ldr	r3, [pc, #120]	; (8001d28 <HAL_TIM_PWM_MspInit+0x90>)
 8001cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb2:	4a1d      	ldr	r2, [pc, #116]	; (8001d28 <HAL_TIM_PWM_MspInit+0x90>)
 8001cb4:	f043 0301 	orr.w	r3, r3, #1
 8001cb8:	6453      	str	r3, [r2, #68]	; 0x44
 8001cba:	4b1b      	ldr	r3, [pc, #108]	; (8001d28 <HAL_TIM_PWM_MspInit+0x90>)
 8001cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	617b      	str	r3, [r7, #20]
 8001cc4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8001cc6:	e026      	b.n	8001d16 <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM3)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a17      	ldr	r2, [pc, #92]	; (8001d2c <HAL_TIM_PWM_MspInit+0x94>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d10e      	bne.n	8001cf0 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	613b      	str	r3, [r7, #16]
 8001cd6:	4b14      	ldr	r3, [pc, #80]	; (8001d28 <HAL_TIM_PWM_MspInit+0x90>)
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cda:	4a13      	ldr	r2, [pc, #76]	; (8001d28 <HAL_TIM_PWM_MspInit+0x90>)
 8001cdc:	f043 0302 	orr.w	r3, r3, #2
 8001ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ce2:	4b11      	ldr	r3, [pc, #68]	; (8001d28 <HAL_TIM_PWM_MspInit+0x90>)
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	613b      	str	r3, [r7, #16]
 8001cec:	693b      	ldr	r3, [r7, #16]
}
 8001cee:	e012      	b.n	8001d16 <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM12)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a0e      	ldr	r2, [pc, #56]	; (8001d30 <HAL_TIM_PWM_MspInit+0x98>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d10d      	bne.n	8001d16 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60fb      	str	r3, [r7, #12]
 8001cfe:	4b0a      	ldr	r3, [pc, #40]	; (8001d28 <HAL_TIM_PWM_MspInit+0x90>)
 8001d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d02:	4a09      	ldr	r2, [pc, #36]	; (8001d28 <HAL_TIM_PWM_MspInit+0x90>)
 8001d04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d08:	6413      	str	r3, [r2, #64]	; 0x40
 8001d0a:	4b07      	ldr	r3, [pc, #28]	; (8001d28 <HAL_TIM_PWM_MspInit+0x90>)
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	68fb      	ldr	r3, [r7, #12]
}
 8001d16:	bf00      	nop
 8001d18:	371c      	adds	r7, #28
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	40010000 	.word	0x40010000
 8001d28:	40023800 	.word	0x40023800
 8001d2c:	40000400 	.word	0x40000400
 8001d30:	40001800 	.word	0x40001800

08001d34 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d44:	d115      	bne.n	8001d72 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d46:	2300      	movs	r3, #0
 8001d48:	60fb      	str	r3, [r7, #12]
 8001d4a:	4b0c      	ldr	r3, [pc, #48]	; (8001d7c <HAL_TIM_Base_MspInit+0x48>)
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4e:	4a0b      	ldr	r2, [pc, #44]	; (8001d7c <HAL_TIM_Base_MspInit+0x48>)
 8001d50:	f043 0301 	orr.w	r3, r3, #1
 8001d54:	6413      	str	r3, [r2, #64]	; 0x40
 8001d56:	4b09      	ldr	r3, [pc, #36]	; (8001d7c <HAL_TIM_Base_MspInit+0x48>)
 8001d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	60fb      	str	r3, [r7, #12]
 8001d60:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001d62:	2200      	movs	r2, #0
 8001d64:	2105      	movs	r1, #5
 8001d66:	201c      	movs	r0, #28
 8001d68:	f001 f9d8 	bl	800311c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d6c:	201c      	movs	r0, #28
 8001d6e:	f001 f9f1 	bl	8003154 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001d72:	bf00      	nop
 8001d74:	3710      	adds	r7, #16
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40023800 	.word	0x40023800

08001d80 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b08c      	sub	sp, #48	; 0x30
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d88:	f107 031c 	add.w	r3, r7, #28
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	605a      	str	r2, [r3, #4]
 8001d92:	609a      	str	r2, [r3, #8]
 8001d94:	60da      	str	r2, [r3, #12]
 8001d96:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a46      	ldr	r2, [pc, #280]	; (8001eb8 <HAL_TIM_MspPostInit+0x138>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d13e      	bne.n	8001e20 <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	61bb      	str	r3, [r7, #24]
 8001da6:	4b45      	ldr	r3, [pc, #276]	; (8001ebc <HAL_TIM_MspPostInit+0x13c>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001daa:	4a44      	ldr	r2, [pc, #272]	; (8001ebc <HAL_TIM_MspPostInit+0x13c>)
 8001dac:	f043 0301 	orr.w	r3, r3, #1
 8001db0:	6313      	str	r3, [r2, #48]	; 0x30
 8001db2:	4b42      	ldr	r3, [pc, #264]	; (8001ebc <HAL_TIM_MspPostInit+0x13c>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	61bb      	str	r3, [r7, #24]
 8001dbc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	617b      	str	r3, [r7, #20]
 8001dc2:	4b3e      	ldr	r3, [pc, #248]	; (8001ebc <HAL_TIM_MspPostInit+0x13c>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc6:	4a3d      	ldr	r2, [pc, #244]	; (8001ebc <HAL_TIM_MspPostInit+0x13c>)
 8001dc8:	f043 0310 	orr.w	r3, r3, #16
 8001dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dce:	4b3b      	ldr	r3, [pc, #236]	; (8001ebc <HAL_TIM_MspPostInit+0x13c>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	f003 0310 	and.w	r3, r3, #16
 8001dd6:	617b      	str	r3, [r7, #20]
 8001dd8:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001dda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de0:	2302      	movs	r3, #2
 8001de2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de4:	2300      	movs	r3, #0
 8001de6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de8:	2300      	movs	r3, #0
 8001dea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001dec:	2301      	movs	r3, #1
 8001dee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df0:	f107 031c 	add.w	r3, r7, #28
 8001df4:	4619      	mov	r1, r3
 8001df6:	4832      	ldr	r0, [pc, #200]	; (8001ec0 <HAL_TIM_MspPostInit+0x140>)
 8001df8:	f001 fdbc 	bl	8003974 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001dfc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e02:	2302      	movs	r3, #2
 8001e04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e06:	2300      	movs	r3, #0
 8001e08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e12:	f107 031c 	add.w	r3, r7, #28
 8001e16:	4619      	mov	r1, r3
 8001e18:	482a      	ldr	r0, [pc, #168]	; (8001ec4 <HAL_TIM_MspPostInit+0x144>)
 8001e1a:	f001 fdab 	bl	8003974 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8001e1e:	e046      	b.n	8001eae <HAL_TIM_MspPostInit+0x12e>
  else if(timHandle->Instance==TIM3)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a28      	ldr	r2, [pc, #160]	; (8001ec8 <HAL_TIM_MspPostInit+0x148>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d11e      	bne.n	8001e68 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	613b      	str	r3, [r7, #16]
 8001e2e:	4b23      	ldr	r3, [pc, #140]	; (8001ebc <HAL_TIM_MspPostInit+0x13c>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	4a22      	ldr	r2, [pc, #136]	; (8001ebc <HAL_TIM_MspPostInit+0x13c>)
 8001e34:	f043 0302 	orr.w	r3, r3, #2
 8001e38:	6313      	str	r3, [r2, #48]	; 0x30
 8001e3a:	4b20      	ldr	r3, [pc, #128]	; (8001ebc <HAL_TIM_MspPostInit+0x13c>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	613b      	str	r3, [r7, #16]
 8001e44:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001e46:	2320      	movs	r3, #32
 8001e48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e52:	2300      	movs	r3, #0
 8001e54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e56:	2302      	movs	r3, #2
 8001e58:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e5a:	f107 031c 	add.w	r3, r7, #28
 8001e5e:	4619      	mov	r1, r3
 8001e60:	481a      	ldr	r0, [pc, #104]	; (8001ecc <HAL_TIM_MspPostInit+0x14c>)
 8001e62:	f001 fd87 	bl	8003974 <HAL_GPIO_Init>
}
 8001e66:	e022      	b.n	8001eae <HAL_TIM_MspPostInit+0x12e>
  else if(timHandle->Instance==TIM12)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a18      	ldr	r2, [pc, #96]	; (8001ed0 <HAL_TIM_MspPostInit+0x150>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d11d      	bne.n	8001eae <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e72:	2300      	movs	r3, #0
 8001e74:	60fb      	str	r3, [r7, #12]
 8001e76:	4b11      	ldr	r3, [pc, #68]	; (8001ebc <HAL_TIM_MspPostInit+0x13c>)
 8001e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7a:	4a10      	ldr	r2, [pc, #64]	; (8001ebc <HAL_TIM_MspPostInit+0x13c>)
 8001e7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e80:	6313      	str	r3, [r2, #48]	; 0x30
 8001e82:	4b0e      	ldr	r3, [pc, #56]	; (8001ebc <HAL_TIM_MspPostInit+0x13c>)
 8001e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e8a:	60fb      	str	r3, [r7, #12]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e8e:	2340      	movs	r3, #64	; 0x40
 8001e90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e92:	2302      	movs	r3, #2
 8001e94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e96:	2300      	movs	r3, #0
 8001e98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001e9e:	2309      	movs	r3, #9
 8001ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001ea2:	f107 031c 	add.w	r3, r7, #28
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	480a      	ldr	r0, [pc, #40]	; (8001ed4 <HAL_TIM_MspPostInit+0x154>)
 8001eaa:	f001 fd63 	bl	8003974 <HAL_GPIO_Init>
}
 8001eae:	bf00      	nop
 8001eb0:	3730      	adds	r7, #48	; 0x30
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	40010000 	.word	0x40010000
 8001ebc:	40023800 	.word	0x40023800
 8001ec0:	40020000 	.word	0x40020000
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	40000400 	.word	0x40000400
 8001ecc:	40020400 	.word	0x40020400
 8001ed0:	40001800 	.word	0x40001800
 8001ed4:	40021c00 	.word	0x40021c00

08001ed8 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001edc:	4b11      	ldr	r3, [pc, #68]	; (8001f24 <MX_USART3_UART_Init+0x4c>)
 8001ede:	4a12      	ldr	r2, [pc, #72]	; (8001f28 <MX_USART3_UART_Init+0x50>)
 8001ee0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 8001ee2:	4b10      	ldr	r3, [pc, #64]	; (8001f24 <MX_USART3_UART_Init+0x4c>)
 8001ee4:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8001ee8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001eea:	4b0e      	ldr	r3, [pc, #56]	; (8001f24 <MX_USART3_UART_Init+0x4c>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ef0:	4b0c      	ldr	r3, [pc, #48]	; (8001f24 <MX_USART3_UART_Init+0x4c>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001ef6:	4b0b      	ldr	r3, [pc, #44]	; (8001f24 <MX_USART3_UART_Init+0x4c>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001efc:	4b09      	ldr	r3, [pc, #36]	; (8001f24 <MX_USART3_UART_Init+0x4c>)
 8001efe:	220c      	movs	r2, #12
 8001f00:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f02:	4b08      	ldr	r3, [pc, #32]	; (8001f24 <MX_USART3_UART_Init+0x4c>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f08:	4b06      	ldr	r3, [pc, #24]	; (8001f24 <MX_USART3_UART_Init+0x4c>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f0e:	4805      	ldr	r0, [pc, #20]	; (8001f24 <MX_USART3_UART_Init+0x4c>)
 8001f10:	f005 f990 	bl	8007234 <HAL_UART_Init>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001f1a:	f7ff fb9d 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f1e:	bf00      	nop
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	200003d4 	.word	0x200003d4
 8001f28:	40004800 	.word	0x40004800

08001f2c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001f30:	4b11      	ldr	r3, [pc, #68]	; (8001f78 <MX_USART6_UART_Init+0x4c>)
 8001f32:	4a12      	ldr	r2, [pc, #72]	; (8001f7c <MX_USART6_UART_Init+0x50>)
 8001f34:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 921600;
 8001f36:	4b10      	ldr	r3, [pc, #64]	; (8001f78 <MX_USART6_UART_Init+0x4c>)
 8001f38:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8001f3c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001f3e:	4b0e      	ldr	r3, [pc, #56]	; (8001f78 <MX_USART6_UART_Init+0x4c>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001f44:	4b0c      	ldr	r3, [pc, #48]	; (8001f78 <MX_USART6_UART_Init+0x4c>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001f4a:	4b0b      	ldr	r3, [pc, #44]	; (8001f78 <MX_USART6_UART_Init+0x4c>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001f50:	4b09      	ldr	r3, [pc, #36]	; (8001f78 <MX_USART6_UART_Init+0x4c>)
 8001f52:	220c      	movs	r2, #12
 8001f54:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f56:	4b08      	ldr	r3, [pc, #32]	; (8001f78 <MX_USART6_UART_Init+0x4c>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f5c:	4b06      	ldr	r3, [pc, #24]	; (8001f78 <MX_USART6_UART_Init+0x4c>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001f62:	4805      	ldr	r0, [pc, #20]	; (8001f78 <MX_USART6_UART_Init+0x4c>)
 8001f64:	f005 f966 	bl	8007234 <HAL_UART_Init>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001f6e:	f7ff fb73 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001f72:	bf00      	nop
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	2000041c 	.word	0x2000041c
 8001f7c:	40011400 	.word	0x40011400

08001f80 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b08c      	sub	sp, #48	; 0x30
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f88:	f107 031c 	add.w	r3, r7, #28
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	605a      	str	r2, [r3, #4]
 8001f92:	609a      	str	r2, [r3, #8]
 8001f94:	60da      	str	r2, [r3, #12]
 8001f96:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a66      	ldr	r2, [pc, #408]	; (8002138 <HAL_UART_MspInit+0x1b8>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d12d      	bne.n	8001ffe <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	61bb      	str	r3, [r7, #24]
 8001fa6:	4b65      	ldr	r3, [pc, #404]	; (800213c <HAL_UART_MspInit+0x1bc>)
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001faa:	4a64      	ldr	r2, [pc, #400]	; (800213c <HAL_UART_MspInit+0x1bc>)
 8001fac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fb0:	6413      	str	r3, [r2, #64]	; 0x40
 8001fb2:	4b62      	ldr	r3, [pc, #392]	; (800213c <HAL_UART_MspInit+0x1bc>)
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fba:	61bb      	str	r3, [r7, #24]
 8001fbc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	617b      	str	r3, [r7, #20]
 8001fc2:	4b5e      	ldr	r3, [pc, #376]	; (800213c <HAL_UART_MspInit+0x1bc>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	4a5d      	ldr	r2, [pc, #372]	; (800213c <HAL_UART_MspInit+0x1bc>)
 8001fc8:	f043 0308 	orr.w	r3, r3, #8
 8001fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001fce:	4b5b      	ldr	r3, [pc, #364]	; (800213c <HAL_UART_MspInit+0x1bc>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd2:	f003 0308 	and.w	r3, r3, #8
 8001fd6:	617b      	str	r3, [r7, #20]
 8001fd8:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD9     ------> USART3_RX
    PD8     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8001fda:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001fde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001fec:	2307      	movs	r3, #7
 8001fee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ff0:	f107 031c 	add.w	r3, r7, #28
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	4852      	ldr	r0, [pc, #328]	; (8002140 <HAL_UART_MspInit+0x1c0>)
 8001ff8:	f001 fcbc 	bl	8003974 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001ffc:	e097      	b.n	800212e <HAL_UART_MspInit+0x1ae>
  else if(uartHandle->Instance==USART6)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a50      	ldr	r2, [pc, #320]	; (8002144 <HAL_UART_MspInit+0x1c4>)
 8002004:	4293      	cmp	r3, r2
 8002006:	f040 8092 	bne.w	800212e <HAL_UART_MspInit+0x1ae>
    __HAL_RCC_USART6_CLK_ENABLE();
 800200a:	2300      	movs	r3, #0
 800200c:	613b      	str	r3, [r7, #16]
 800200e:	4b4b      	ldr	r3, [pc, #300]	; (800213c <HAL_UART_MspInit+0x1bc>)
 8002010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002012:	4a4a      	ldr	r2, [pc, #296]	; (800213c <HAL_UART_MspInit+0x1bc>)
 8002014:	f043 0320 	orr.w	r3, r3, #32
 8002018:	6453      	str	r3, [r2, #68]	; 0x44
 800201a:	4b48      	ldr	r3, [pc, #288]	; (800213c <HAL_UART_MspInit+0x1bc>)
 800201c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201e:	f003 0320 	and.w	r3, r3, #32
 8002022:	613b      	str	r3, [r7, #16]
 8002024:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002026:	2300      	movs	r3, #0
 8002028:	60fb      	str	r3, [r7, #12]
 800202a:	4b44      	ldr	r3, [pc, #272]	; (800213c <HAL_UART_MspInit+0x1bc>)
 800202c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202e:	4a43      	ldr	r2, [pc, #268]	; (800213c <HAL_UART_MspInit+0x1bc>)
 8002030:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002034:	6313      	str	r3, [r2, #48]	; 0x30
 8002036:	4b41      	ldr	r3, [pc, #260]	; (800213c <HAL_UART_MspInit+0x1bc>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800203e:	60fb      	str	r3, [r7, #12]
 8002040:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 8002042:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8002046:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002048:	2302      	movs	r3, #2
 800204a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800204c:	2301      	movs	r3, #1
 800204e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002050:	2303      	movs	r3, #3
 8002052:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002054:	2308      	movs	r3, #8
 8002056:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002058:	f107 031c 	add.w	r3, r7, #28
 800205c:	4619      	mov	r1, r3
 800205e:	483a      	ldr	r0, [pc, #232]	; (8002148 <HAL_UART_MspInit+0x1c8>)
 8002060:	f001 fc88 	bl	8003974 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8002064:	4b39      	ldr	r3, [pc, #228]	; (800214c <HAL_UART_MspInit+0x1cc>)
 8002066:	4a3a      	ldr	r2, [pc, #232]	; (8002150 <HAL_UART_MspInit+0x1d0>)
 8002068:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 800206a:	4b38      	ldr	r3, [pc, #224]	; (800214c <HAL_UART_MspInit+0x1cc>)
 800206c:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002070:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002072:	4b36      	ldr	r3, [pc, #216]	; (800214c <HAL_UART_MspInit+0x1cc>)
 8002074:	2200      	movs	r2, #0
 8002076:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002078:	4b34      	ldr	r3, [pc, #208]	; (800214c <HAL_UART_MspInit+0x1cc>)
 800207a:	2200      	movs	r2, #0
 800207c:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800207e:	4b33      	ldr	r3, [pc, #204]	; (800214c <HAL_UART_MspInit+0x1cc>)
 8002080:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002084:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002086:	4b31      	ldr	r3, [pc, #196]	; (800214c <HAL_UART_MspInit+0x1cc>)
 8002088:	2200      	movs	r2, #0
 800208a:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800208c:	4b2f      	ldr	r3, [pc, #188]	; (800214c <HAL_UART_MspInit+0x1cc>)
 800208e:	2200      	movs	r2, #0
 8002090:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8002092:	4b2e      	ldr	r3, [pc, #184]	; (800214c <HAL_UART_MspInit+0x1cc>)
 8002094:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002098:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 800209a:	4b2c      	ldr	r3, [pc, #176]	; (800214c <HAL_UART_MspInit+0x1cc>)
 800209c:	2200      	movs	r2, #0
 800209e:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020a0:	4b2a      	ldr	r3, [pc, #168]	; (800214c <HAL_UART_MspInit+0x1cc>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80020a6:	4829      	ldr	r0, [pc, #164]	; (800214c <HAL_UART_MspInit+0x1cc>)
 80020a8:	f001 f862 	bl	8003170 <HAL_DMA_Init>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <HAL_UART_MspInit+0x136>
      Error_Handler();
 80020b2:	f7ff fad1 	bl	8001658 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a24      	ldr	r2, [pc, #144]	; (800214c <HAL_UART_MspInit+0x1cc>)
 80020ba:	63da      	str	r2, [r3, #60]	; 0x3c
 80020bc:	4a23      	ldr	r2, [pc, #140]	; (800214c <HAL_UART_MspInit+0x1cc>)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 80020c2:	4b24      	ldr	r3, [pc, #144]	; (8002154 <HAL_UART_MspInit+0x1d4>)
 80020c4:	4a24      	ldr	r2, [pc, #144]	; (8002158 <HAL_UART_MspInit+0x1d8>)
 80020c6:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 80020c8:	4b22      	ldr	r3, [pc, #136]	; (8002154 <HAL_UART_MspInit+0x1d4>)
 80020ca:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80020ce:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020d0:	4b20      	ldr	r3, [pc, #128]	; (8002154 <HAL_UART_MspInit+0x1d4>)
 80020d2:	2240      	movs	r2, #64	; 0x40
 80020d4:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020d6:	4b1f      	ldr	r3, [pc, #124]	; (8002154 <HAL_UART_MspInit+0x1d4>)
 80020d8:	2200      	movs	r2, #0
 80020da:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 80020dc:	4b1d      	ldr	r3, [pc, #116]	; (8002154 <HAL_UART_MspInit+0x1d4>)
 80020de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020e2:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020e4:	4b1b      	ldr	r3, [pc, #108]	; (8002154 <HAL_UART_MspInit+0x1d4>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020ea:	4b1a      	ldr	r3, [pc, #104]	; (8002154 <HAL_UART_MspInit+0x1d4>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 80020f0:	4b18      	ldr	r3, [pc, #96]	; (8002154 <HAL_UART_MspInit+0x1d4>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 80020f6:	4b17      	ldr	r3, [pc, #92]	; (8002154 <HAL_UART_MspInit+0x1d4>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020fc:	4b15      	ldr	r3, [pc, #84]	; (8002154 <HAL_UART_MspInit+0x1d4>)
 80020fe:	2200      	movs	r2, #0
 8002100:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8002102:	4814      	ldr	r0, [pc, #80]	; (8002154 <HAL_UART_MspInit+0x1d4>)
 8002104:	f001 f834 	bl	8003170 <HAL_DMA_Init>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <HAL_UART_MspInit+0x192>
      Error_Handler();
 800210e:	f7ff faa3 	bl	8001658 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a0f      	ldr	r2, [pc, #60]	; (8002154 <HAL_UART_MspInit+0x1d4>)
 8002116:	639a      	str	r2, [r3, #56]	; 0x38
 8002118:	4a0e      	ldr	r2, [pc, #56]	; (8002154 <HAL_UART_MspInit+0x1d4>)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 800211e:	2200      	movs	r2, #0
 8002120:	2105      	movs	r1, #5
 8002122:	2047      	movs	r0, #71	; 0x47
 8002124:	f000 fffa 	bl	800311c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002128:	2047      	movs	r0, #71	; 0x47
 800212a:	f001 f813 	bl	8003154 <HAL_NVIC_EnableIRQ>
}
 800212e:	bf00      	nop
 8002130:	3730      	adds	r7, #48	; 0x30
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	40004800 	.word	0x40004800
 800213c:	40023800 	.word	0x40023800
 8002140:	40020c00 	.word	0x40020c00
 8002144:	40011400 	.word	0x40011400
 8002148:	40021800 	.word	0x40021800
 800214c:	20000464 	.word	0x20000464
 8002150:	40026428 	.word	0x40026428
 8002154:	200004c4 	.word	0x200004c4
 8002158:	400264a0 	.word	0x400264a0

0800215c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800215c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002194 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002160:	f7ff fc0c 	bl	800197c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002164:	480c      	ldr	r0, [pc, #48]	; (8002198 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002166:	490d      	ldr	r1, [pc, #52]	; (800219c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002168:	4a0d      	ldr	r2, [pc, #52]	; (80021a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800216a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800216c:	e002      	b.n	8002174 <LoopCopyDataInit>

0800216e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800216e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002170:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002172:	3304      	adds	r3, #4

08002174 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002174:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002176:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002178:	d3f9      	bcc.n	800216e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800217a:	4a0a      	ldr	r2, [pc, #40]	; (80021a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800217c:	4c0a      	ldr	r4, [pc, #40]	; (80021a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800217e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002180:	e001      	b.n	8002186 <LoopFillZerobss>

08002182 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002182:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002184:	3204      	adds	r2, #4

08002186 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002186:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002188:	d3fb      	bcc.n	8002182 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800218a:	f012 fac5 	bl	8014718 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800218e:	f7ff f9c1 	bl	8001514 <main>
  bx  lr    
 8002192:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002194:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002198:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800219c:	2000019c 	.word	0x2000019c
  ldr r2, =_sidata
 80021a0:	080165f8 	.word	0x080165f8
  ldr r2, =_sbss
 80021a4:	200001a0 	.word	0x200001a0
  ldr r4, =_ebss
 80021a8:	20017064 	.word	0x20017064

080021ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021ac:	e7fe      	b.n	80021ac <ADC_IRQHandler>
	...

080021b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021b4:	4b0e      	ldr	r3, [pc, #56]	; (80021f0 <HAL_Init+0x40>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a0d      	ldr	r2, [pc, #52]	; (80021f0 <HAL_Init+0x40>)
 80021ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021c0:	4b0b      	ldr	r3, [pc, #44]	; (80021f0 <HAL_Init+0x40>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a0a      	ldr	r2, [pc, #40]	; (80021f0 <HAL_Init+0x40>)
 80021c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021cc:	4b08      	ldr	r3, [pc, #32]	; (80021f0 <HAL_Init+0x40>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a07      	ldr	r2, [pc, #28]	; (80021f0 <HAL_Init+0x40>)
 80021d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021d8:	2003      	movs	r0, #3
 80021da:	f000 ff94 	bl	8003106 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021de:	200f      	movs	r0, #15
 80021e0:	f7ff faea 	bl	80017b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021e4:	f7ff fabc 	bl	8001760 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	40023c00 	.word	0x40023c00

080021f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021f8:	4b06      	ldr	r3, [pc, #24]	; (8002214 <HAL_IncTick+0x20>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	461a      	mov	r2, r3
 80021fe:	4b06      	ldr	r3, [pc, #24]	; (8002218 <HAL_IncTick+0x24>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4413      	add	r3, r2
 8002204:	4a04      	ldr	r2, [pc, #16]	; (8002218 <HAL_IncTick+0x24>)
 8002206:	6013      	str	r3, [r2, #0]
}
 8002208:	bf00      	nop
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	20000008 	.word	0x20000008
 8002218:	20000524 	.word	0x20000524

0800221c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  return uwTick;
 8002220:	4b03      	ldr	r3, [pc, #12]	; (8002230 <HAL_GetTick+0x14>)
 8002222:	681b      	ldr	r3, [r3, #0]
}
 8002224:	4618      	mov	r0, r3
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	20000524 	.word	0x20000524

08002234 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800223c:	f7ff ffee 	bl	800221c <HAL_GetTick>
 8002240:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800224c:	d005      	beq.n	800225a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800224e:	4b0a      	ldr	r3, [pc, #40]	; (8002278 <HAL_Delay+0x44>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	461a      	mov	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	4413      	add	r3, r2
 8002258:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800225a:	bf00      	nop
 800225c:	f7ff ffde 	bl	800221c <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	68fa      	ldr	r2, [r7, #12]
 8002268:	429a      	cmp	r2, r3
 800226a:	d8f7      	bhi.n	800225c <HAL_Delay+0x28>
  {
  }
}
 800226c:	bf00      	nop
 800226e:	bf00      	nop
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	20000008 	.word	0x20000008

0800227c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d101      	bne.n	800228e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e0ed      	b.n	800246a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2b00      	cmp	r3, #0
 8002298:	d102      	bne.n	80022a0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f7fe fe66 	bl	8000f6c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f042 0201 	orr.w	r2, r2, #1
 80022ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022b0:	f7ff ffb4 	bl	800221c <HAL_GetTick>
 80022b4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80022b6:	e012      	b.n	80022de <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80022b8:	f7ff ffb0 	bl	800221c <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b0a      	cmp	r3, #10
 80022c4:	d90b      	bls.n	80022de <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2205      	movs	r2, #5
 80022d6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e0c5      	b.n	800246a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f003 0301 	and.w	r3, r3, #1
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d0e5      	beq.n	80022b8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f022 0202 	bic.w	r2, r2, #2
 80022fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022fc:	f7ff ff8e 	bl	800221c <HAL_GetTick>
 8002300:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002302:	e012      	b.n	800232a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002304:	f7ff ff8a 	bl	800221c <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b0a      	cmp	r3, #10
 8002310:	d90b      	bls.n	800232a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002316:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2205      	movs	r2, #5
 8002322:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e09f      	b.n	800246a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d1e5      	bne.n	8002304 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	7e1b      	ldrb	r3, [r3, #24]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d108      	bne.n	8002352 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800234e:	601a      	str	r2, [r3, #0]
 8002350:	e007      	b.n	8002362 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002360:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	7e5b      	ldrb	r3, [r3, #25]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d108      	bne.n	800237c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002378:	601a      	str	r2, [r3, #0]
 800237a:	e007      	b.n	800238c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800238a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	7e9b      	ldrb	r3, [r3, #26]
 8002390:	2b01      	cmp	r3, #1
 8002392:	d108      	bne.n	80023a6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f042 0220 	orr.w	r2, r2, #32
 80023a2:	601a      	str	r2, [r3, #0]
 80023a4:	e007      	b.n	80023b6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f022 0220 	bic.w	r2, r2, #32
 80023b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	7edb      	ldrb	r3, [r3, #27]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d108      	bne.n	80023d0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f022 0210 	bic.w	r2, r2, #16
 80023cc:	601a      	str	r2, [r3, #0]
 80023ce:	e007      	b.n	80023e0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f042 0210 	orr.w	r2, r2, #16
 80023de:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	7f1b      	ldrb	r3, [r3, #28]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d108      	bne.n	80023fa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f042 0208 	orr.w	r2, r2, #8
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	e007      	b.n	800240a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f022 0208 	bic.w	r2, r2, #8
 8002408:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	7f5b      	ldrb	r3, [r3, #29]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d108      	bne.n	8002424 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f042 0204 	orr.w	r2, r2, #4
 8002420:	601a      	str	r2, [r3, #0]
 8002422:	e007      	b.n	8002434 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f022 0204 	bic.w	r2, r2, #4
 8002432:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	689a      	ldr	r2, [r3, #8]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	431a      	orrs	r2, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	431a      	orrs	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	695b      	ldr	r3, [r3, #20]
 8002448:	ea42 0103 	orr.w	r1, r2, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	1e5a      	subs	r2, r3, #1
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	430a      	orrs	r2, r1
 8002458:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	3710      	adds	r7, #16
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
	...

08002474 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002474:	b480      	push	{r7}
 8002476:	b087      	sub	sp, #28
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f893 3020 	ldrb.w	r3, [r3, #32]
 800248a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800248c:	7cfb      	ldrb	r3, [r7, #19]
 800248e:	2b01      	cmp	r3, #1
 8002490:	d003      	beq.n	800249a <HAL_CAN_ConfigFilter+0x26>
 8002492:	7cfb      	ldrb	r3, [r7, #19]
 8002494:	2b02      	cmp	r3, #2
 8002496:	f040 80be 	bne.w	8002616 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800249a:	4b65      	ldr	r3, [pc, #404]	; (8002630 <HAL_CAN_ConfigFilter+0x1bc>)
 800249c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80024a4:	f043 0201 	orr.w	r2, r3, #1
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80024b4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c8:	021b      	lsls	r3, r3, #8
 80024ca:	431a      	orrs	r2, r3
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	695b      	ldr	r3, [r3, #20]
 80024d6:	f003 031f 	and.w	r3, r3, #31
 80024da:	2201      	movs	r2, #1
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	43db      	mvns	r3, r3
 80024ec:	401a      	ands	r2, r3
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	69db      	ldr	r3, [r3, #28]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d123      	bne.n	8002544 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	43db      	mvns	r3, r3
 8002506:	401a      	ands	r2, r3
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800251a:	683a      	ldr	r2, [r7, #0]
 800251c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800251e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	3248      	adds	r2, #72	; 0x48
 8002524:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002538:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800253a:	6979      	ldr	r1, [r7, #20]
 800253c:	3348      	adds	r3, #72	; 0x48
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	440b      	add	r3, r1
 8002542:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	69db      	ldr	r3, [r3, #28]
 8002548:	2b01      	cmp	r3, #1
 800254a:	d122      	bne.n	8002592 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	431a      	orrs	r2, r3
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002568:	683a      	ldr	r2, [r7, #0]
 800256a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800256c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	3248      	adds	r2, #72	; 0x48
 8002572:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002586:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002588:	6979      	ldr	r1, [r7, #20]
 800258a:	3348      	adds	r3, #72	; 0x48
 800258c:	00db      	lsls	r3, r3, #3
 800258e:	440b      	add	r3, r1
 8002590:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	699b      	ldr	r3, [r3, #24]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d109      	bne.n	80025ae <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	43db      	mvns	r3, r3
 80025a4:	401a      	ands	r2, r3
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80025ac:	e007      	b.n	80025be <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	431a      	orrs	r2, r3
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d109      	bne.n	80025da <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	43db      	mvns	r3, r3
 80025d0:	401a      	ands	r2, r3
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80025d8:	e007      	b.n	80025ea <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	431a      	orrs	r2, r3
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	6a1b      	ldr	r3, [r3, #32]
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d107      	bne.n	8002602 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	431a      	orrs	r2, r3
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002608:	f023 0201 	bic.w	r2, r3, #1
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002612:	2300      	movs	r3, #0
 8002614:	e006      	b.n	8002624 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
  }
}
 8002624:	4618      	mov	r0, r3
 8002626:	371c      	adds	r7, #28
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	40006400 	.word	0x40006400

08002634 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002642:	b2db      	uxtb	r3, r3
 8002644:	2b01      	cmp	r3, #1
 8002646:	d12e      	bne.n	80026a6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2202      	movs	r2, #2
 800264c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f022 0201 	bic.w	r2, r2, #1
 800265e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002660:	f7ff fddc 	bl	800221c <HAL_GetTick>
 8002664:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002666:	e012      	b.n	800268e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002668:	f7ff fdd8 	bl	800221c <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b0a      	cmp	r3, #10
 8002674:	d90b      	bls.n	800268e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2205      	movs	r2, #5
 8002686:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e012      	b.n	80026b4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f003 0301 	and.w	r3, r3, #1
 8002698:	2b00      	cmp	r3, #0
 800269a:	d1e5      	bne.n	8002668 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80026a2:	2300      	movs	r3, #0
 80026a4:	e006      	b.n	80026b4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026aa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
  }
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3710      	adds	r7, #16
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80026bc:	b480      	push	{r7}
 80026be:	b089      	sub	sp, #36	; 0x24
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	607a      	str	r2, [r7, #4]
 80026c8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026d0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80026da:	7ffb      	ldrb	r3, [r7, #31]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d003      	beq.n	80026e8 <HAL_CAN_AddTxMessage+0x2c>
 80026e0:	7ffb      	ldrb	r3, [r7, #31]
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	f040 80ad 	bne.w	8002842 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d10a      	bne.n	8002708 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d105      	bne.n	8002708 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002702:	2b00      	cmp	r3, #0
 8002704:	f000 8095 	beq.w	8002832 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	0e1b      	lsrs	r3, r3, #24
 800270c:	f003 0303 	and.w	r3, r3, #3
 8002710:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002712:	2201      	movs	r2, #1
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	409a      	lsls	r2, r3
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d10d      	bne.n	8002740 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800272e:	68f9      	ldr	r1, [r7, #12]
 8002730:	6809      	ldr	r1, [r1, #0]
 8002732:	431a      	orrs	r2, r3
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	3318      	adds	r3, #24
 8002738:	011b      	lsls	r3, r3, #4
 800273a:	440b      	add	r3, r1
 800273c:	601a      	str	r2, [r3, #0]
 800273e:	e00f      	b.n	8002760 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800274a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002750:	68f9      	ldr	r1, [r7, #12]
 8002752:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002754:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	3318      	adds	r3, #24
 800275a:	011b      	lsls	r3, r3, #4
 800275c:	440b      	add	r3, r1
 800275e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6819      	ldr	r1, [r3, #0]
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	691a      	ldr	r2, [r3, #16]
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	3318      	adds	r3, #24
 800276c:	011b      	lsls	r3, r3, #4
 800276e:	440b      	add	r3, r1
 8002770:	3304      	adds	r3, #4
 8002772:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	7d1b      	ldrb	r3, [r3, #20]
 8002778:	2b01      	cmp	r3, #1
 800277a:	d111      	bne.n	80027a0 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	3318      	adds	r3, #24
 8002784:	011b      	lsls	r3, r3, #4
 8002786:	4413      	add	r3, r2
 8002788:	3304      	adds	r3, #4
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68fa      	ldr	r2, [r7, #12]
 800278e:	6811      	ldr	r1, [r2, #0]
 8002790:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	3318      	adds	r3, #24
 8002798:	011b      	lsls	r3, r3, #4
 800279a:	440b      	add	r3, r1
 800279c:	3304      	adds	r3, #4
 800279e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	3307      	adds	r3, #7
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	061a      	lsls	r2, r3, #24
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	3306      	adds	r3, #6
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	041b      	lsls	r3, r3, #16
 80027b0:	431a      	orrs	r2, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	3305      	adds	r3, #5
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	021b      	lsls	r3, r3, #8
 80027ba:	4313      	orrs	r3, r2
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	3204      	adds	r2, #4
 80027c0:	7812      	ldrb	r2, [r2, #0]
 80027c2:	4610      	mov	r0, r2
 80027c4:	68fa      	ldr	r2, [r7, #12]
 80027c6:	6811      	ldr	r1, [r2, #0]
 80027c8:	ea43 0200 	orr.w	r2, r3, r0
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	011b      	lsls	r3, r3, #4
 80027d0:	440b      	add	r3, r1
 80027d2:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80027d6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	3303      	adds	r3, #3
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	061a      	lsls	r2, r3, #24
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	3302      	adds	r3, #2
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	041b      	lsls	r3, r3, #16
 80027e8:	431a      	orrs	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	3301      	adds	r3, #1
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	021b      	lsls	r3, r3, #8
 80027f2:	4313      	orrs	r3, r2
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	7812      	ldrb	r2, [r2, #0]
 80027f8:	4610      	mov	r0, r2
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	6811      	ldr	r1, [r2, #0]
 80027fe:	ea43 0200 	orr.w	r2, r3, r0
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	011b      	lsls	r3, r3, #4
 8002806:	440b      	add	r3, r1
 8002808:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800280c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	3318      	adds	r3, #24
 8002816:	011b      	lsls	r3, r3, #4
 8002818:	4413      	add	r3, r2
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	68fa      	ldr	r2, [r7, #12]
 800281e:	6811      	ldr	r1, [r2, #0]
 8002820:	f043 0201 	orr.w	r2, r3, #1
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	3318      	adds	r3, #24
 8002828:	011b      	lsls	r3, r3, #4
 800282a:	440b      	add	r3, r1
 800282c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800282e:	2300      	movs	r3, #0
 8002830:	e00e      	b.n	8002850 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002836:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e006      	b.n	8002850 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002846:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
  }
}
 8002850:	4618      	mov	r0, r3
 8002852:	3724      	adds	r7, #36	; 0x24
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr

0800285c <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 800285c:	b480      	push	{r7}
 800285e:	b085      	sub	sp, #20
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002864:	2300      	movs	r3, #0
 8002866:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800286e:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8002870:	7afb      	ldrb	r3, [r7, #11]
 8002872:	2b01      	cmp	r3, #1
 8002874:	d002      	beq.n	800287c <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8002876:	7afb      	ldrb	r3, [r7, #11]
 8002878:	2b02      	cmp	r3, #2
 800287a:	d11d      	bne.n	80028b8 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d002      	beq.n	8002890 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	3301      	adds	r3, #1
 800288e:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d002      	beq.n	80028a4 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	3301      	adds	r3, #1
 80028a2:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d002      	beq.n	80028b8 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	3301      	adds	r3, #1
 80028b6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80028b8:	68fb      	ldr	r3, [r7, #12]
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3714      	adds	r7, #20
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr

080028c6 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80028c6:	b480      	push	{r7}
 80028c8:	b087      	sub	sp, #28
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	60f8      	str	r0, [r7, #12]
 80028ce:	60b9      	str	r1, [r7, #8]
 80028d0:	607a      	str	r2, [r7, #4]
 80028d2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028da:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80028dc:	7dfb      	ldrb	r3, [r7, #23]
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d003      	beq.n	80028ea <HAL_CAN_GetRxMessage+0x24>
 80028e2:	7dfb      	ldrb	r3, [r7, #23]
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	f040 8103 	bne.w	8002af0 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d10e      	bne.n	800290e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	f003 0303 	and.w	r3, r3, #3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d116      	bne.n	800292c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002902:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e0f7      	b.n	8002afe <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	691b      	ldr	r3, [r3, #16]
 8002914:	f003 0303 	and.w	r3, r3, #3
 8002918:	2b00      	cmp	r3, #0
 800291a:	d107      	bne.n	800292c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002920:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e0e8      	b.n	8002afe <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	331b      	adds	r3, #27
 8002934:	011b      	lsls	r3, r3, #4
 8002936:	4413      	add	r3, r2
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0204 	and.w	r2, r3, #4
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d10c      	bne.n	8002964 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	331b      	adds	r3, #27
 8002952:	011b      	lsls	r3, r3, #4
 8002954:	4413      	add	r3, r2
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	0d5b      	lsrs	r3, r3, #21
 800295a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	601a      	str	r2, [r3, #0]
 8002962:	e00b      	b.n	800297c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	331b      	adds	r3, #27
 800296c:	011b      	lsls	r3, r3, #4
 800296e:	4413      	add	r3, r2
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	08db      	lsrs	r3, r3, #3
 8002974:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	331b      	adds	r3, #27
 8002984:	011b      	lsls	r3, r3, #4
 8002986:	4413      	add	r3, r2
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0202 	and.w	r2, r3, #2
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	331b      	adds	r3, #27
 800299a:	011b      	lsls	r3, r3, #4
 800299c:	4413      	add	r3, r2
 800299e:	3304      	adds	r3, #4
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0308 	and.w	r3, r3, #8
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d003      	beq.n	80029b2 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2208      	movs	r2, #8
 80029ae:	611a      	str	r2, [r3, #16]
 80029b0:	e00b      	b.n	80029ca <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	331b      	adds	r3, #27
 80029ba:	011b      	lsls	r3, r3, #4
 80029bc:	4413      	add	r3, r2
 80029be:	3304      	adds	r3, #4
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 020f 	and.w	r2, r3, #15
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	331b      	adds	r3, #27
 80029d2:	011b      	lsls	r3, r3, #4
 80029d4:	4413      	add	r3, r2
 80029d6:	3304      	adds	r3, #4
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	0a1b      	lsrs	r3, r3, #8
 80029dc:	b2da      	uxtb	r2, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	331b      	adds	r3, #27
 80029ea:	011b      	lsls	r3, r3, #4
 80029ec:	4413      	add	r3, r2
 80029ee:	3304      	adds	r3, #4
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	0c1b      	lsrs	r3, r3, #16
 80029f4:	b29a      	uxth	r2, r3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	011b      	lsls	r3, r3, #4
 8002a02:	4413      	add	r3, r2
 8002a04:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	b2da      	uxtb	r2, r3
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	011b      	lsls	r3, r3, #4
 8002a18:	4413      	add	r3, r2
 8002a1a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	0a1a      	lsrs	r2, r3, #8
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	3301      	adds	r3, #1
 8002a26:	b2d2      	uxtb	r2, r2
 8002a28:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	011b      	lsls	r3, r3, #4
 8002a32:	4413      	add	r3, r2
 8002a34:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	0c1a      	lsrs	r2, r3, #16
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	3302      	adds	r3, #2
 8002a40:	b2d2      	uxtb	r2, r2
 8002a42:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	011b      	lsls	r3, r3, #4
 8002a4c:	4413      	add	r3, r2
 8002a4e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	0e1a      	lsrs	r2, r3, #24
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	3303      	adds	r3, #3
 8002a5a:	b2d2      	uxtb	r2, r2
 8002a5c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	011b      	lsls	r3, r3, #4
 8002a66:	4413      	add	r3, r2
 8002a68:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	3304      	adds	r3, #4
 8002a72:	b2d2      	uxtb	r2, r2
 8002a74:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	011b      	lsls	r3, r3, #4
 8002a7e:	4413      	add	r3, r2
 8002a80:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	0a1a      	lsrs	r2, r3, #8
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	3305      	adds	r3, #5
 8002a8c:	b2d2      	uxtb	r2, r2
 8002a8e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	011b      	lsls	r3, r3, #4
 8002a98:	4413      	add	r3, r2
 8002a9a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	0c1a      	lsrs	r2, r3, #16
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	3306      	adds	r3, #6
 8002aa6:	b2d2      	uxtb	r2, r2
 8002aa8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	011b      	lsls	r3, r3, #4
 8002ab2:	4413      	add	r3, r2
 8002ab4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	0e1a      	lsrs	r2, r3, #24
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	3307      	adds	r3, #7
 8002ac0:	b2d2      	uxtb	r2, r2
 8002ac2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d108      	bne.n	8002adc <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68da      	ldr	r2, [r3, #12]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f042 0220 	orr.w	r2, r2, #32
 8002ad8:	60da      	str	r2, [r3, #12]
 8002ada:	e007      	b.n	8002aec <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	691a      	ldr	r2, [r3, #16]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f042 0220 	orr.w	r2, r2, #32
 8002aea:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002aec:	2300      	movs	r3, #0
 8002aee:	e006      	b.n	8002afe <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
  }
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	371c      	adds	r7, #28
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr

08002b0a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	b085      	sub	sp, #20
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
 8002b12:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b1a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002b1c:	7bfb      	ldrb	r3, [r7, #15]
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d002      	beq.n	8002b28 <HAL_CAN_ActivateNotification+0x1e>
 8002b22:	7bfb      	ldrb	r3, [r7, #15]
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d109      	bne.n	8002b3c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	6959      	ldr	r1, [r3, #20]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	683a      	ldr	r2, [r7, #0]
 8002b34:	430a      	orrs	r2, r1
 8002b36:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	e006      	b.n	8002b4a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b40:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
  }
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3714      	adds	r7, #20
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr

08002b56 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b08a      	sub	sp, #40	; 0x28
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	695b      	ldr	r3, [r3, #20]
 8002b68:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	691b      	ldr	r3, [r3, #16]
 8002b88:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	699b      	ldr	r3, [r3, #24]
 8002b90:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002b92:	6a3b      	ldr	r3, [r7, #32]
 8002b94:	f003 0301 	and.w	r3, r3, #1
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d07c      	beq.n	8002c96 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d023      	beq.n	8002bee <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2201      	movs	r2, #1
 8002bac:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	f003 0302 	and.w	r3, r3, #2
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d003      	beq.n	8002bc0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f00c ffb7 	bl	800fb2c <HAL_CAN_TxMailbox0CompleteCallback>
 8002bbe:	e016      	b.n	8002bee <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	f003 0304 	and.w	r3, r3, #4
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d004      	beq.n	8002bd4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bcc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002bd0:	627b      	str	r3, [r7, #36]	; 0x24
 8002bd2:	e00c      	b.n	8002bee <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	f003 0308 	and.w	r3, r3, #8
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d004      	beq.n	8002be8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002be4:	627b      	str	r3, [r7, #36]	; 0x24
 8002be6:	e002      	b.n	8002bee <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f000 f96b 	bl	8002ec4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d024      	beq.n	8002c42 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c00:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d003      	beq.n	8002c14 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f00c ffa1 	bl	800fb54 <HAL_CAN_TxMailbox1CompleteCallback>
 8002c12:	e016      	b.n	8002c42 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d004      	beq.n	8002c28 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c20:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002c24:	627b      	str	r3, [r7, #36]	; 0x24
 8002c26:	e00c      	b.n	8002c42 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d004      	beq.n	8002c3c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c38:	627b      	str	r3, [r7, #36]	; 0x24
 8002c3a:	e002      	b.n	8002c42 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f000 f94b 	bl	8002ed8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d024      	beq.n	8002c96 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002c54:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d003      	beq.n	8002c68 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f00c ff8b 	bl	800fb7c <HAL_CAN_TxMailbox2CompleteCallback>
 8002c66:	e016      	b.n	8002c96 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d004      	beq.n	8002c7c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c78:	627b      	str	r3, [r7, #36]	; 0x24
 8002c7a:	e00c      	b.n	8002c96 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d004      	beq.n	8002c90 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c8c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c8e:	e002      	b.n	8002c96 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f000 f92b 	bl	8002eec <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002c96:	6a3b      	ldr	r3, [r7, #32]
 8002c98:	f003 0308 	and.w	r3, r3, #8
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d00c      	beq.n	8002cba <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	f003 0310 	and.w	r3, r3, #16
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d007      	beq.n	8002cba <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cb0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2210      	movs	r2, #16
 8002cb8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002cba:	6a3b      	ldr	r3, [r7, #32]
 8002cbc:	f003 0304 	and.w	r3, r3, #4
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d00b      	beq.n	8002cdc <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	f003 0308 	and.w	r3, r3, #8
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d006      	beq.n	8002cdc <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2208      	movs	r2, #8
 8002cd4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f000 f912 	bl	8002f00 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002cdc:	6a3b      	ldr	r3, [r7, #32]
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d009      	beq.n	8002cfa <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	f003 0303 	and.w	r3, r3, #3
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d002      	beq.n	8002cfa <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f00c ff6b 	bl	800fbd0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002cfa:	6a3b      	ldr	r3, [r7, #32]
 8002cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d00c      	beq.n	8002d1e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	f003 0310 	and.w	r3, r3, #16
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d007      	beq.n	8002d1e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d10:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d14:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2210      	movs	r2, #16
 8002d1c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002d1e:	6a3b      	ldr	r3, [r7, #32]
 8002d20:	f003 0320 	and.w	r3, r3, #32
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d00b      	beq.n	8002d40 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	f003 0308 	and.w	r3, r3, #8
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d006      	beq.n	8002d40 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	2208      	movs	r2, #8
 8002d38:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 f8f4 	bl	8002f28 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002d40:	6a3b      	ldr	r3, [r7, #32]
 8002d42:	f003 0310 	and.w	r3, r3, #16
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d009      	beq.n	8002d5e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	691b      	ldr	r3, [r3, #16]
 8002d50:	f003 0303 	and.w	r3, r3, #3
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d002      	beq.n	8002d5e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f000 f8db 	bl	8002f14 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002d5e:	6a3b      	ldr	r3, [r7, #32]
 8002d60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d00b      	beq.n	8002d80 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	f003 0310 	and.w	r3, r3, #16
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d006      	beq.n	8002d80 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2210      	movs	r2, #16
 8002d78:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 f8de 	bl	8002f3c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002d80:	6a3b      	ldr	r3, [r7, #32]
 8002d82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d00b      	beq.n	8002da2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	f003 0308 	and.w	r3, r3, #8
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d006      	beq.n	8002da2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2208      	movs	r2, #8
 8002d9a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f000 f8d7 	bl	8002f50 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002da2:	6a3b      	ldr	r3, [r7, #32]
 8002da4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d07b      	beq.n	8002ea4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	f003 0304 	and.w	r3, r3, #4
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d072      	beq.n	8002e9c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002db6:	6a3b      	ldr	r3, [r7, #32]
 8002db8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d008      	beq.n	8002dd2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d003      	beq.n	8002dd2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dcc:	f043 0301 	orr.w	r3, r3, #1
 8002dd0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002dd2:	6a3b      	ldr	r3, [r7, #32]
 8002dd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d008      	beq.n	8002dee <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d003      	beq.n	8002dee <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de8:	f043 0302 	orr.w	r3, r3, #2
 8002dec:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002dee:	6a3b      	ldr	r3, [r7, #32]
 8002df0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d008      	beq.n	8002e0a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d003      	beq.n	8002e0a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e04:	f043 0304 	orr.w	r3, r3, #4
 8002e08:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002e0a:	6a3b      	ldr	r3, [r7, #32]
 8002e0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d043      	beq.n	8002e9c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d03e      	beq.n	8002e9c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e24:	2b60      	cmp	r3, #96	; 0x60
 8002e26:	d02b      	beq.n	8002e80 <HAL_CAN_IRQHandler+0x32a>
 8002e28:	2b60      	cmp	r3, #96	; 0x60
 8002e2a:	d82e      	bhi.n	8002e8a <HAL_CAN_IRQHandler+0x334>
 8002e2c:	2b50      	cmp	r3, #80	; 0x50
 8002e2e:	d022      	beq.n	8002e76 <HAL_CAN_IRQHandler+0x320>
 8002e30:	2b50      	cmp	r3, #80	; 0x50
 8002e32:	d82a      	bhi.n	8002e8a <HAL_CAN_IRQHandler+0x334>
 8002e34:	2b40      	cmp	r3, #64	; 0x40
 8002e36:	d019      	beq.n	8002e6c <HAL_CAN_IRQHandler+0x316>
 8002e38:	2b40      	cmp	r3, #64	; 0x40
 8002e3a:	d826      	bhi.n	8002e8a <HAL_CAN_IRQHandler+0x334>
 8002e3c:	2b30      	cmp	r3, #48	; 0x30
 8002e3e:	d010      	beq.n	8002e62 <HAL_CAN_IRQHandler+0x30c>
 8002e40:	2b30      	cmp	r3, #48	; 0x30
 8002e42:	d822      	bhi.n	8002e8a <HAL_CAN_IRQHandler+0x334>
 8002e44:	2b10      	cmp	r3, #16
 8002e46:	d002      	beq.n	8002e4e <HAL_CAN_IRQHandler+0x2f8>
 8002e48:	2b20      	cmp	r3, #32
 8002e4a:	d005      	beq.n	8002e58 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002e4c:	e01d      	b.n	8002e8a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e50:	f043 0308 	orr.w	r3, r3, #8
 8002e54:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e56:	e019      	b.n	8002e8c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5a:	f043 0310 	orr.w	r3, r3, #16
 8002e5e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e60:	e014      	b.n	8002e8c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e64:	f043 0320 	orr.w	r3, r3, #32
 8002e68:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e6a:	e00f      	b.n	8002e8c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e72:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e74:	e00a      	b.n	8002e8c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e7c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e7e:	e005      	b.n	8002e8c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e86:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e88:	e000      	b.n	8002e8c <HAL_CAN_IRQHandler+0x336>
            break;
 8002e8a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	699a      	ldr	r2, [r3, #24]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002e9a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2204      	movs	r2, #4
 8002ea2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d008      	beq.n	8002ebc <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb0:	431a      	orrs	r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f00c fe74 	bl	800fba4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002ebc:	bf00      	nop
 8002ebe:	3728      	adds	r7, #40	; 0x28
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002ecc:	bf00      	nop
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002ee0:	bf00      	nop
 8002ee2:	370c      	adds	r7, #12
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr

08002eec <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002ef4:	bf00      	nop
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002f08:	bf00      	nop
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002f1c:	bf00      	nop
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002f30:	bf00      	nop
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr

08002f3c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002f44:	bf00      	nop
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002f58:	bf00      	nop
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <HAL_CAN_ResetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ResetError(CAN_HandleTypeDef *hcan)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b085      	sub	sp, #20
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	73fb      	strb	r3, [r7, #15]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f76:	73bb      	strb	r3, [r7, #14]

  if ((state == HAL_CAN_STATE_READY) ||
 8002f78:	7bbb      	ldrb	r3, [r7, #14]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d002      	beq.n	8002f84 <HAL_CAN_ResetError+0x20>
 8002f7e:	7bbb      	ldrb	r3, [r7, #14]
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d103      	bne.n	8002f8c <HAL_CAN_ResetError+0x28>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Reset CAN error code */
    hcan->ErrorCode = 0U;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	625a      	str	r2, [r3, #36]	; 0x24
 8002f8a:	e007      	b.n	8002f9c <HAL_CAN_ResetError+0x38>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f90:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	625a      	str	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the status */
  return status;
 8002f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3714      	adds	r7, #20
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
	...

08002fac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b085      	sub	sp, #20
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f003 0307 	and.w	r3, r3, #7
 8002fba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fbc:	4b0c      	ldr	r3, [pc, #48]	; (8002ff0 <__NVIC_SetPriorityGrouping+0x44>)
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fc2:	68ba      	ldr	r2, [r7, #8]
 8002fc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fc8:	4013      	ands	r3, r2
 8002fca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fde:	4a04      	ldr	r2, [pc, #16]	; (8002ff0 <__NVIC_SetPriorityGrouping+0x44>)
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	60d3      	str	r3, [r2, #12]
}
 8002fe4:	bf00      	nop
 8002fe6:	3714      	adds	r7, #20
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr
 8002ff0:	e000ed00 	.word	0xe000ed00

08002ff4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ff8:	4b04      	ldr	r3, [pc, #16]	; (800300c <__NVIC_GetPriorityGrouping+0x18>)
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	0a1b      	lsrs	r3, r3, #8
 8002ffe:	f003 0307 	and.w	r3, r3, #7
}
 8003002:	4618      	mov	r0, r3
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr
 800300c:	e000ed00 	.word	0xe000ed00

08003010 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	4603      	mov	r3, r0
 8003018:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800301a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800301e:	2b00      	cmp	r3, #0
 8003020:	db0b      	blt.n	800303a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003022:	79fb      	ldrb	r3, [r7, #7]
 8003024:	f003 021f 	and.w	r2, r3, #31
 8003028:	4907      	ldr	r1, [pc, #28]	; (8003048 <__NVIC_EnableIRQ+0x38>)
 800302a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800302e:	095b      	lsrs	r3, r3, #5
 8003030:	2001      	movs	r0, #1
 8003032:	fa00 f202 	lsl.w	r2, r0, r2
 8003036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800303a:	bf00      	nop
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	e000e100 	.word	0xe000e100

0800304c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	4603      	mov	r3, r0
 8003054:	6039      	str	r1, [r7, #0]
 8003056:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800305c:	2b00      	cmp	r3, #0
 800305e:	db0a      	blt.n	8003076 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	b2da      	uxtb	r2, r3
 8003064:	490c      	ldr	r1, [pc, #48]	; (8003098 <__NVIC_SetPriority+0x4c>)
 8003066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800306a:	0112      	lsls	r2, r2, #4
 800306c:	b2d2      	uxtb	r2, r2
 800306e:	440b      	add	r3, r1
 8003070:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003074:	e00a      	b.n	800308c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	b2da      	uxtb	r2, r3
 800307a:	4908      	ldr	r1, [pc, #32]	; (800309c <__NVIC_SetPriority+0x50>)
 800307c:	79fb      	ldrb	r3, [r7, #7]
 800307e:	f003 030f 	and.w	r3, r3, #15
 8003082:	3b04      	subs	r3, #4
 8003084:	0112      	lsls	r2, r2, #4
 8003086:	b2d2      	uxtb	r2, r2
 8003088:	440b      	add	r3, r1
 800308a:	761a      	strb	r2, [r3, #24]
}
 800308c:	bf00      	nop
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr
 8003098:	e000e100 	.word	0xe000e100
 800309c:	e000ed00 	.word	0xe000ed00

080030a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b089      	sub	sp, #36	; 0x24
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f003 0307 	and.w	r3, r3, #7
 80030b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	f1c3 0307 	rsb	r3, r3, #7
 80030ba:	2b04      	cmp	r3, #4
 80030bc:	bf28      	it	cs
 80030be:	2304      	movcs	r3, #4
 80030c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	3304      	adds	r3, #4
 80030c6:	2b06      	cmp	r3, #6
 80030c8:	d902      	bls.n	80030d0 <NVIC_EncodePriority+0x30>
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	3b03      	subs	r3, #3
 80030ce:	e000      	b.n	80030d2 <NVIC_EncodePriority+0x32>
 80030d0:	2300      	movs	r3, #0
 80030d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	fa02 f303 	lsl.w	r3, r2, r3
 80030de:	43da      	mvns	r2, r3
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	401a      	ands	r2, r3
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	fa01 f303 	lsl.w	r3, r1, r3
 80030f2:	43d9      	mvns	r1, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030f8:	4313      	orrs	r3, r2
         );
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3724      	adds	r7, #36	; 0x24
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr

08003106 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003106:	b580      	push	{r7, lr}
 8003108:	b082      	sub	sp, #8
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f7ff ff4c 	bl	8002fac <__NVIC_SetPriorityGrouping>
}
 8003114:	bf00      	nop
 8003116:	3708      	adds	r7, #8
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800311c:	b580      	push	{r7, lr}
 800311e:	b086      	sub	sp, #24
 8003120:	af00      	add	r7, sp, #0
 8003122:	4603      	mov	r3, r0
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	607a      	str	r2, [r7, #4]
 8003128:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800312a:	2300      	movs	r3, #0
 800312c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800312e:	f7ff ff61 	bl	8002ff4 <__NVIC_GetPriorityGrouping>
 8003132:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	68b9      	ldr	r1, [r7, #8]
 8003138:	6978      	ldr	r0, [r7, #20]
 800313a:	f7ff ffb1 	bl	80030a0 <NVIC_EncodePriority>
 800313e:	4602      	mov	r2, r0
 8003140:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003144:	4611      	mov	r1, r2
 8003146:	4618      	mov	r0, r3
 8003148:	f7ff ff80 	bl	800304c <__NVIC_SetPriority>
}
 800314c:	bf00      	nop
 800314e:	3718      	adds	r7, #24
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	4603      	mov	r3, r0
 800315c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800315e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003162:	4618      	mov	r0, r3
 8003164:	f7ff ff54 	bl	8003010 <__NVIC_EnableIRQ>
}
 8003168:	bf00      	nop
 800316a:	3708      	adds	r7, #8
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}

08003170 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b086      	sub	sp, #24
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003178:	2300      	movs	r3, #0
 800317a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800317c:	f7ff f84e 	bl	800221c <HAL_GetTick>
 8003180:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d101      	bne.n	800318c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e099      	b.n	80032c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2202      	movs	r2, #2
 8003190:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f022 0201 	bic.w	r2, r2, #1
 80031aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031ac:	e00f      	b.n	80031ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031ae:	f7ff f835 	bl	800221c <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	2b05      	cmp	r3, #5
 80031ba:	d908      	bls.n	80031ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2220      	movs	r2, #32
 80031c0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2203      	movs	r2, #3
 80031c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e078      	b.n	80032c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0301 	and.w	r3, r3, #1
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d1e8      	bne.n	80031ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80031e4:	697a      	ldr	r2, [r7, #20]
 80031e6:	4b38      	ldr	r3, [pc, #224]	; (80032c8 <HAL_DMA_Init+0x158>)
 80031e8:	4013      	ands	r3, r2
 80031ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	685a      	ldr	r2, [r3, #4]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	691b      	ldr	r3, [r3, #16]
 8003200:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003206:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	699b      	ldr	r3, [r3, #24]
 800320c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003212:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a1b      	ldr	r3, [r3, #32]
 8003218:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800321a:	697a      	ldr	r2, [r7, #20]
 800321c:	4313      	orrs	r3, r2
 800321e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003224:	2b04      	cmp	r3, #4
 8003226:	d107      	bne.n	8003238 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003230:	4313      	orrs	r3, r2
 8003232:	697a      	ldr	r2, [r7, #20]
 8003234:	4313      	orrs	r3, r2
 8003236:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	697a      	ldr	r2, [r7, #20]
 800323e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	f023 0307 	bic.w	r3, r3, #7
 800324e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003254:	697a      	ldr	r2, [r7, #20]
 8003256:	4313      	orrs	r3, r2
 8003258:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325e:	2b04      	cmp	r3, #4
 8003260:	d117      	bne.n	8003292 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003266:	697a      	ldr	r2, [r7, #20]
 8003268:	4313      	orrs	r3, r2
 800326a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003270:	2b00      	cmp	r3, #0
 8003272:	d00e      	beq.n	8003292 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f000 fb01 	bl	800387c <DMA_CheckFifoParam>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d008      	beq.n	8003292 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2240      	movs	r2, #64	; 0x40
 8003284:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2201      	movs	r2, #1
 800328a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800328e:	2301      	movs	r3, #1
 8003290:	e016      	b.n	80032c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	697a      	ldr	r2, [r7, #20]
 8003298:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f000 fab8 	bl	8003810 <DMA_CalcBaseAndBitshift>
 80032a0:	4603      	mov	r3, r0
 80032a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032a8:	223f      	movs	r2, #63	; 0x3f
 80032aa:	409a      	lsls	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2201      	movs	r2, #1
 80032ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80032be:	2300      	movs	r3, #0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3718      	adds	r7, #24
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	f010803f 	.word	0xf010803f

080032cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b086      	sub	sp, #24
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	607a      	str	r2, [r7, #4]
 80032d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032da:	2300      	movs	r3, #0
 80032dc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032e2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d101      	bne.n	80032f2 <HAL_DMA_Start_IT+0x26>
 80032ee:	2302      	movs	r3, #2
 80032f0:	e040      	b.n	8003374 <HAL_DMA_Start_IT+0xa8>
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2201      	movs	r2, #1
 80032f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003300:	b2db      	uxtb	r3, r3
 8003302:	2b01      	cmp	r3, #1
 8003304:	d12f      	bne.n	8003366 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2202      	movs	r2, #2
 800330a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2200      	movs	r2, #0
 8003312:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	68b9      	ldr	r1, [r7, #8]
 800331a:	68f8      	ldr	r0, [r7, #12]
 800331c:	f000 fa4a 	bl	80037b4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003324:	223f      	movs	r2, #63	; 0x3f
 8003326:	409a      	lsls	r2, r3
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f042 0216 	orr.w	r2, r2, #22
 800333a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003340:	2b00      	cmp	r3, #0
 8003342:	d007      	beq.n	8003354 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f042 0208 	orr.w	r2, r2, #8
 8003352:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f042 0201 	orr.w	r2, r2, #1
 8003362:	601a      	str	r2, [r3, #0]
 8003364:	e005      	b.n	8003372 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800336e:	2302      	movs	r3, #2
 8003370:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003372:	7dfb      	ldrb	r3, [r7, #23]
}
 8003374:	4618      	mov	r0, r3
 8003376:	3718      	adds	r7, #24
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003388:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800338a:	f7fe ff47 	bl	800221c <HAL_GetTick>
 800338e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003396:	b2db      	uxtb	r3, r3
 8003398:	2b02      	cmp	r3, #2
 800339a:	d008      	beq.n	80033ae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2280      	movs	r2, #128	; 0x80
 80033a0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e052      	b.n	8003454 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f022 0216 	bic.w	r2, r2, #22
 80033bc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	695a      	ldr	r2, [r3, #20]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033cc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d103      	bne.n	80033de <HAL_DMA_Abort+0x62>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d007      	beq.n	80033ee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f022 0208 	bic.w	r2, r2, #8
 80033ec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f022 0201 	bic.w	r2, r2, #1
 80033fc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033fe:	e013      	b.n	8003428 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003400:	f7fe ff0c 	bl	800221c <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b05      	cmp	r3, #5
 800340c:	d90c      	bls.n	8003428 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2220      	movs	r2, #32
 8003412:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2203      	movs	r2, #3
 8003418:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	e015      	b.n	8003454 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0301 	and.w	r3, r3, #1
 8003432:	2b00      	cmp	r3, #0
 8003434:	d1e4      	bne.n	8003400 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800343a:	223f      	movs	r2, #63	; 0x3f
 800343c:	409a      	lsls	r2, r3
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2201      	movs	r2, #1
 8003446:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003452:	2300      	movs	r3, #0
}
 8003454:	4618      	mov	r0, r3
 8003456:	3710      	adds	r7, #16
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800346a:	b2db      	uxtb	r3, r3
 800346c:	2b02      	cmp	r3, #2
 800346e:	d004      	beq.n	800347a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2280      	movs	r2, #128	; 0x80
 8003474:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e00c      	b.n	8003494 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2205      	movs	r2, #5
 800347e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f022 0201 	bic.w	r2, r2, #1
 8003490:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003492:	2300      	movs	r3, #0
}
 8003494:	4618      	mov	r0, r3
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b086      	sub	sp, #24
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80034a8:	2300      	movs	r3, #0
 80034aa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80034ac:	4b8e      	ldr	r3, [pc, #568]	; (80036e8 <HAL_DMA_IRQHandler+0x248>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a8e      	ldr	r2, [pc, #568]	; (80036ec <HAL_DMA_IRQHandler+0x24c>)
 80034b2:	fba2 2303 	umull	r2, r3, r2, r3
 80034b6:	0a9b      	lsrs	r3, r3, #10
 80034b8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034be:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ca:	2208      	movs	r2, #8
 80034cc:	409a      	lsls	r2, r3
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	4013      	ands	r3, r2
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d01a      	beq.n	800350c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0304 	and.w	r3, r3, #4
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d013      	beq.n	800350c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f022 0204 	bic.w	r2, r2, #4
 80034f2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034f8:	2208      	movs	r2, #8
 80034fa:	409a      	lsls	r2, r3
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003504:	f043 0201 	orr.w	r2, r3, #1
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003510:	2201      	movs	r2, #1
 8003512:	409a      	lsls	r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	4013      	ands	r3, r2
 8003518:	2b00      	cmp	r3, #0
 800351a:	d012      	beq.n	8003542 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00b      	beq.n	8003542 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800352e:	2201      	movs	r2, #1
 8003530:	409a      	lsls	r2, r3
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800353a:	f043 0202 	orr.w	r2, r3, #2
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003546:	2204      	movs	r2, #4
 8003548:	409a      	lsls	r2, r3
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	4013      	ands	r3, r2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d012      	beq.n	8003578 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0302 	and.w	r3, r3, #2
 800355c:	2b00      	cmp	r3, #0
 800355e:	d00b      	beq.n	8003578 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003564:	2204      	movs	r2, #4
 8003566:	409a      	lsls	r2, r3
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003570:	f043 0204 	orr.w	r2, r3, #4
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800357c:	2210      	movs	r2, #16
 800357e:	409a      	lsls	r2, r3
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	4013      	ands	r3, r2
 8003584:	2b00      	cmp	r3, #0
 8003586:	d043      	beq.n	8003610 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0308 	and.w	r3, r3, #8
 8003592:	2b00      	cmp	r3, #0
 8003594:	d03c      	beq.n	8003610 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800359a:	2210      	movs	r2, #16
 800359c:	409a      	lsls	r2, r3
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d018      	beq.n	80035e2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d108      	bne.n	80035d0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d024      	beq.n	8003610 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	4798      	blx	r3
 80035ce:	e01f      	b.n	8003610 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d01b      	beq.n	8003610 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	4798      	blx	r3
 80035e0:	e016      	b.n	8003610 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d107      	bne.n	8003600 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f022 0208 	bic.w	r2, r2, #8
 80035fe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003604:	2b00      	cmp	r3, #0
 8003606:	d003      	beq.n	8003610 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003614:	2220      	movs	r2, #32
 8003616:	409a      	lsls	r2, r3
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	4013      	ands	r3, r2
 800361c:	2b00      	cmp	r3, #0
 800361e:	f000 808f 	beq.w	8003740 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0310 	and.w	r3, r3, #16
 800362c:	2b00      	cmp	r3, #0
 800362e:	f000 8087 	beq.w	8003740 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003636:	2220      	movs	r2, #32
 8003638:	409a      	lsls	r2, r3
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b05      	cmp	r3, #5
 8003648:	d136      	bne.n	80036b8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f022 0216 	bic.w	r2, r2, #22
 8003658:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	695a      	ldr	r2, [r3, #20]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003668:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366e:	2b00      	cmp	r3, #0
 8003670:	d103      	bne.n	800367a <HAL_DMA_IRQHandler+0x1da>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003676:	2b00      	cmp	r3, #0
 8003678:	d007      	beq.n	800368a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f022 0208 	bic.w	r2, r2, #8
 8003688:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800368e:	223f      	movs	r2, #63	; 0x3f
 8003690:	409a      	lsls	r2, r3
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2201      	movs	r2, #1
 800369a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d07e      	beq.n	80037ac <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	4798      	blx	r3
        }
        return;
 80036b6:	e079      	b.n	80037ac <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d01d      	beq.n	8003702 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d10d      	bne.n	80036f0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d031      	beq.n	8003740 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	4798      	blx	r3
 80036e4:	e02c      	b.n	8003740 <HAL_DMA_IRQHandler+0x2a0>
 80036e6:	bf00      	nop
 80036e8:	20000000 	.word	0x20000000
 80036ec:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d023      	beq.n	8003740 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	4798      	blx	r3
 8003700:	e01e      	b.n	8003740 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800370c:	2b00      	cmp	r3, #0
 800370e:	d10f      	bne.n	8003730 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f022 0210 	bic.w	r2, r2, #16
 800371e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003734:	2b00      	cmp	r3, #0
 8003736:	d003      	beq.n	8003740 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003744:	2b00      	cmp	r3, #0
 8003746:	d032      	beq.n	80037ae <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800374c:	f003 0301 	and.w	r3, r3, #1
 8003750:	2b00      	cmp	r3, #0
 8003752:	d022      	beq.n	800379a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2205      	movs	r2, #5
 8003758:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f022 0201 	bic.w	r2, r2, #1
 800376a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	3301      	adds	r3, #1
 8003770:	60bb      	str	r3, [r7, #8]
 8003772:	697a      	ldr	r2, [r7, #20]
 8003774:	429a      	cmp	r2, r3
 8003776:	d307      	bcc.n	8003788 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0301 	and.w	r3, r3, #1
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1f2      	bne.n	800376c <HAL_DMA_IRQHandler+0x2cc>
 8003786:	e000      	b.n	800378a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003788:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2201      	movs	r2, #1
 800378e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d005      	beq.n	80037ae <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	4798      	blx	r3
 80037aa:	e000      	b.n	80037ae <HAL_DMA_IRQHandler+0x30e>
        return;
 80037ac:	bf00      	nop
    }
  }
}
 80037ae:	3718      	adds	r7, #24
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b085      	sub	sp, #20
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	607a      	str	r2, [r7, #4]
 80037c0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80037d0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	683a      	ldr	r2, [r7, #0]
 80037d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	2b40      	cmp	r3, #64	; 0x40
 80037e0:	d108      	bne.n	80037f4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68ba      	ldr	r2, [r7, #8]
 80037f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80037f2:	e007      	b.n	8003804 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68ba      	ldr	r2, [r7, #8]
 80037fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	60da      	str	r2, [r3, #12]
}
 8003804:	bf00      	nop
 8003806:	3714      	adds	r7, #20
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr

08003810 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003810:	b480      	push	{r7}
 8003812:	b085      	sub	sp, #20
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	b2db      	uxtb	r3, r3
 800381e:	3b10      	subs	r3, #16
 8003820:	4a14      	ldr	r2, [pc, #80]	; (8003874 <DMA_CalcBaseAndBitshift+0x64>)
 8003822:	fba2 2303 	umull	r2, r3, r2, r3
 8003826:	091b      	lsrs	r3, r3, #4
 8003828:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800382a:	4a13      	ldr	r2, [pc, #76]	; (8003878 <DMA_CalcBaseAndBitshift+0x68>)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	4413      	add	r3, r2
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	461a      	mov	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2b03      	cmp	r3, #3
 800383c:	d909      	bls.n	8003852 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003846:	f023 0303 	bic.w	r3, r3, #3
 800384a:	1d1a      	adds	r2, r3, #4
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	659a      	str	r2, [r3, #88]	; 0x58
 8003850:	e007      	b.n	8003862 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800385a:	f023 0303 	bic.w	r3, r3, #3
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003866:	4618      	mov	r0, r3
 8003868:	3714      	adds	r7, #20
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	aaaaaaab 	.word	0xaaaaaaab
 8003878:	08015e04 	.word	0x08015e04

0800387c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800387c:	b480      	push	{r7}
 800387e:	b085      	sub	sp, #20
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003884:	2300      	movs	r3, #0
 8003886:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800388c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	699b      	ldr	r3, [r3, #24]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d11f      	bne.n	80038d6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	2b03      	cmp	r3, #3
 800389a:	d856      	bhi.n	800394a <DMA_CheckFifoParam+0xce>
 800389c:	a201      	add	r2, pc, #4	; (adr r2, 80038a4 <DMA_CheckFifoParam+0x28>)
 800389e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038a2:	bf00      	nop
 80038a4:	080038b5 	.word	0x080038b5
 80038a8:	080038c7 	.word	0x080038c7
 80038ac:	080038b5 	.word	0x080038b5
 80038b0:	0800394b 	.word	0x0800394b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d046      	beq.n	800394e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038c4:	e043      	b.n	800394e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80038ce:	d140      	bne.n	8003952 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038d4:	e03d      	b.n	8003952 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	699b      	ldr	r3, [r3, #24]
 80038da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038de:	d121      	bne.n	8003924 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	2b03      	cmp	r3, #3
 80038e4:	d837      	bhi.n	8003956 <DMA_CheckFifoParam+0xda>
 80038e6:	a201      	add	r2, pc, #4	; (adr r2, 80038ec <DMA_CheckFifoParam+0x70>)
 80038e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ec:	080038fd 	.word	0x080038fd
 80038f0:	08003903 	.word	0x08003903
 80038f4:	080038fd 	.word	0x080038fd
 80038f8:	08003915 	.word	0x08003915
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	73fb      	strb	r3, [r7, #15]
      break;
 8003900:	e030      	b.n	8003964 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003906:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d025      	beq.n	800395a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003912:	e022      	b.n	800395a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003918:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800391c:	d11f      	bne.n	800395e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003922:	e01c      	b.n	800395e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	2b02      	cmp	r3, #2
 8003928:	d903      	bls.n	8003932 <DMA_CheckFifoParam+0xb6>
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	2b03      	cmp	r3, #3
 800392e:	d003      	beq.n	8003938 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003930:	e018      	b.n	8003964 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	73fb      	strb	r3, [r7, #15]
      break;
 8003936:	e015      	b.n	8003964 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d00e      	beq.n	8003962 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	73fb      	strb	r3, [r7, #15]
      break;
 8003948:	e00b      	b.n	8003962 <DMA_CheckFifoParam+0xe6>
      break;
 800394a:	bf00      	nop
 800394c:	e00a      	b.n	8003964 <DMA_CheckFifoParam+0xe8>
      break;
 800394e:	bf00      	nop
 8003950:	e008      	b.n	8003964 <DMA_CheckFifoParam+0xe8>
      break;
 8003952:	bf00      	nop
 8003954:	e006      	b.n	8003964 <DMA_CheckFifoParam+0xe8>
      break;
 8003956:	bf00      	nop
 8003958:	e004      	b.n	8003964 <DMA_CheckFifoParam+0xe8>
      break;
 800395a:	bf00      	nop
 800395c:	e002      	b.n	8003964 <DMA_CheckFifoParam+0xe8>
      break;   
 800395e:	bf00      	nop
 8003960:	e000      	b.n	8003964 <DMA_CheckFifoParam+0xe8>
      break;
 8003962:	bf00      	nop
    }
  } 
  
  return status; 
 8003964:	7bfb      	ldrb	r3, [r7, #15]
}
 8003966:	4618      	mov	r0, r3
 8003968:	3714      	adds	r7, #20
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop

08003974 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003974:	b480      	push	{r7}
 8003976:	b089      	sub	sp, #36	; 0x24
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800397e:	2300      	movs	r3, #0
 8003980:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003982:	2300      	movs	r3, #0
 8003984:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003986:	2300      	movs	r3, #0
 8003988:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800398a:	2300      	movs	r3, #0
 800398c:	61fb      	str	r3, [r7, #28]
 800398e:	e177      	b.n	8003c80 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003990:	2201      	movs	r2, #1
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	fa02 f303 	lsl.w	r3, r2, r3
 8003998:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	697a      	ldr	r2, [r7, #20]
 80039a0:	4013      	ands	r3, r2
 80039a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80039a4:	693a      	ldr	r2, [r7, #16]
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	f040 8166 	bne.w	8003c7a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f003 0303 	and.w	r3, r3, #3
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d005      	beq.n	80039c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d130      	bne.n	8003a28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	005b      	lsls	r3, r3, #1
 80039d0:	2203      	movs	r2, #3
 80039d2:	fa02 f303 	lsl.w	r3, r2, r3
 80039d6:	43db      	mvns	r3, r3
 80039d8:	69ba      	ldr	r2, [r7, #24]
 80039da:	4013      	ands	r3, r2
 80039dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	68da      	ldr	r2, [r3, #12]
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	005b      	lsls	r3, r3, #1
 80039e6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ea:	69ba      	ldr	r2, [r7, #24]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	69ba      	ldr	r2, [r7, #24]
 80039f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80039fc:	2201      	movs	r2, #1
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	fa02 f303 	lsl.w	r3, r2, r3
 8003a04:	43db      	mvns	r3, r3
 8003a06:	69ba      	ldr	r2, [r7, #24]
 8003a08:	4013      	ands	r3, r2
 8003a0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	091b      	lsrs	r3, r3, #4
 8003a12:	f003 0201 	and.w	r2, r3, #1
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1c:	69ba      	ldr	r2, [r7, #24]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	69ba      	ldr	r2, [r7, #24]
 8003a26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f003 0303 	and.w	r3, r3, #3
 8003a30:	2b03      	cmp	r3, #3
 8003a32:	d017      	beq.n	8003a64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	005b      	lsls	r3, r3, #1
 8003a3e:	2203      	movs	r2, #3
 8003a40:	fa02 f303 	lsl.w	r3, r2, r3
 8003a44:	43db      	mvns	r3, r3
 8003a46:	69ba      	ldr	r2, [r7, #24]
 8003a48:	4013      	ands	r3, r2
 8003a4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	689a      	ldr	r2, [r3, #8]
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	005b      	lsls	r3, r3, #1
 8003a54:	fa02 f303 	lsl.w	r3, r2, r3
 8003a58:	69ba      	ldr	r2, [r7, #24]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	69ba      	ldr	r2, [r7, #24]
 8003a62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	f003 0303 	and.w	r3, r3, #3
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d123      	bne.n	8003ab8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	08da      	lsrs	r2, r3, #3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	3208      	adds	r2, #8
 8003a78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	f003 0307 	and.w	r3, r3, #7
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	220f      	movs	r2, #15
 8003a88:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8c:	43db      	mvns	r3, r3
 8003a8e:	69ba      	ldr	r2, [r7, #24]
 8003a90:	4013      	ands	r3, r2
 8003a92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	691a      	ldr	r2, [r3, #16]
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	f003 0307 	and.w	r3, r3, #7
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa4:	69ba      	ldr	r2, [r7, #24]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	08da      	lsrs	r2, r3, #3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	3208      	adds	r2, #8
 8003ab2:	69b9      	ldr	r1, [r7, #24]
 8003ab4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	005b      	lsls	r3, r3, #1
 8003ac2:	2203      	movs	r2, #3
 8003ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac8:	43db      	mvns	r3, r3
 8003aca:	69ba      	ldr	r2, [r7, #24]
 8003acc:	4013      	ands	r3, r2
 8003ace:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f003 0203 	and.w	r2, r3, #3
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	005b      	lsls	r3, r3, #1
 8003adc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae0:	69ba      	ldr	r2, [r7, #24]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	69ba      	ldr	r2, [r7, #24]
 8003aea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	f000 80c0 	beq.w	8003c7a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003afa:	2300      	movs	r3, #0
 8003afc:	60fb      	str	r3, [r7, #12]
 8003afe:	4b66      	ldr	r3, [pc, #408]	; (8003c98 <HAL_GPIO_Init+0x324>)
 8003b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b02:	4a65      	ldr	r2, [pc, #404]	; (8003c98 <HAL_GPIO_Init+0x324>)
 8003b04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b08:	6453      	str	r3, [r2, #68]	; 0x44
 8003b0a:	4b63      	ldr	r3, [pc, #396]	; (8003c98 <HAL_GPIO_Init+0x324>)
 8003b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b12:	60fb      	str	r3, [r7, #12]
 8003b14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b16:	4a61      	ldr	r2, [pc, #388]	; (8003c9c <HAL_GPIO_Init+0x328>)
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	089b      	lsrs	r3, r3, #2
 8003b1c:	3302      	adds	r3, #2
 8003b1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	f003 0303 	and.w	r3, r3, #3
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	220f      	movs	r2, #15
 8003b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b32:	43db      	mvns	r3, r3
 8003b34:	69ba      	ldr	r2, [r7, #24]
 8003b36:	4013      	ands	r3, r2
 8003b38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a58      	ldr	r2, [pc, #352]	; (8003ca0 <HAL_GPIO_Init+0x32c>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d037      	beq.n	8003bb2 <HAL_GPIO_Init+0x23e>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a57      	ldr	r2, [pc, #348]	; (8003ca4 <HAL_GPIO_Init+0x330>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d031      	beq.n	8003bae <HAL_GPIO_Init+0x23a>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a56      	ldr	r2, [pc, #344]	; (8003ca8 <HAL_GPIO_Init+0x334>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d02b      	beq.n	8003baa <HAL_GPIO_Init+0x236>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a55      	ldr	r2, [pc, #340]	; (8003cac <HAL_GPIO_Init+0x338>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d025      	beq.n	8003ba6 <HAL_GPIO_Init+0x232>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a54      	ldr	r2, [pc, #336]	; (8003cb0 <HAL_GPIO_Init+0x33c>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d01f      	beq.n	8003ba2 <HAL_GPIO_Init+0x22e>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a53      	ldr	r2, [pc, #332]	; (8003cb4 <HAL_GPIO_Init+0x340>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d019      	beq.n	8003b9e <HAL_GPIO_Init+0x22a>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a52      	ldr	r2, [pc, #328]	; (8003cb8 <HAL_GPIO_Init+0x344>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d013      	beq.n	8003b9a <HAL_GPIO_Init+0x226>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a51      	ldr	r2, [pc, #324]	; (8003cbc <HAL_GPIO_Init+0x348>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d00d      	beq.n	8003b96 <HAL_GPIO_Init+0x222>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a50      	ldr	r2, [pc, #320]	; (8003cc0 <HAL_GPIO_Init+0x34c>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d007      	beq.n	8003b92 <HAL_GPIO_Init+0x21e>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a4f      	ldr	r2, [pc, #316]	; (8003cc4 <HAL_GPIO_Init+0x350>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d101      	bne.n	8003b8e <HAL_GPIO_Init+0x21a>
 8003b8a:	2309      	movs	r3, #9
 8003b8c:	e012      	b.n	8003bb4 <HAL_GPIO_Init+0x240>
 8003b8e:	230a      	movs	r3, #10
 8003b90:	e010      	b.n	8003bb4 <HAL_GPIO_Init+0x240>
 8003b92:	2308      	movs	r3, #8
 8003b94:	e00e      	b.n	8003bb4 <HAL_GPIO_Init+0x240>
 8003b96:	2307      	movs	r3, #7
 8003b98:	e00c      	b.n	8003bb4 <HAL_GPIO_Init+0x240>
 8003b9a:	2306      	movs	r3, #6
 8003b9c:	e00a      	b.n	8003bb4 <HAL_GPIO_Init+0x240>
 8003b9e:	2305      	movs	r3, #5
 8003ba0:	e008      	b.n	8003bb4 <HAL_GPIO_Init+0x240>
 8003ba2:	2304      	movs	r3, #4
 8003ba4:	e006      	b.n	8003bb4 <HAL_GPIO_Init+0x240>
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e004      	b.n	8003bb4 <HAL_GPIO_Init+0x240>
 8003baa:	2302      	movs	r3, #2
 8003bac:	e002      	b.n	8003bb4 <HAL_GPIO_Init+0x240>
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e000      	b.n	8003bb4 <HAL_GPIO_Init+0x240>
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	69fa      	ldr	r2, [r7, #28]
 8003bb6:	f002 0203 	and.w	r2, r2, #3
 8003bba:	0092      	lsls	r2, r2, #2
 8003bbc:	4093      	lsls	r3, r2
 8003bbe:	69ba      	ldr	r2, [r7, #24]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003bc4:	4935      	ldr	r1, [pc, #212]	; (8003c9c <HAL_GPIO_Init+0x328>)
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	089b      	lsrs	r3, r3, #2
 8003bca:	3302      	adds	r3, #2
 8003bcc:	69ba      	ldr	r2, [r7, #24]
 8003bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003bd2:	4b3d      	ldr	r3, [pc, #244]	; (8003cc8 <HAL_GPIO_Init+0x354>)
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	43db      	mvns	r3, r3
 8003bdc:	69ba      	ldr	r2, [r7, #24]
 8003bde:	4013      	ands	r3, r2
 8003be0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d003      	beq.n	8003bf6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003bee:	69ba      	ldr	r2, [r7, #24]
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003bf6:	4a34      	ldr	r2, [pc, #208]	; (8003cc8 <HAL_GPIO_Init+0x354>)
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003bfc:	4b32      	ldr	r3, [pc, #200]	; (8003cc8 <HAL_GPIO_Init+0x354>)
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	43db      	mvns	r3, r3
 8003c06:	69ba      	ldr	r2, [r7, #24]
 8003c08:	4013      	ands	r3, r2
 8003c0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d003      	beq.n	8003c20 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003c18:	69ba      	ldr	r2, [r7, #24]
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c20:	4a29      	ldr	r2, [pc, #164]	; (8003cc8 <HAL_GPIO_Init+0x354>)
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c26:	4b28      	ldr	r3, [pc, #160]	; (8003cc8 <HAL_GPIO_Init+0x354>)
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	43db      	mvns	r3, r3
 8003c30:	69ba      	ldr	r2, [r7, #24]
 8003c32:	4013      	ands	r3, r2
 8003c34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d003      	beq.n	8003c4a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003c42:	69ba      	ldr	r2, [r7, #24]
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c4a:	4a1f      	ldr	r2, [pc, #124]	; (8003cc8 <HAL_GPIO_Init+0x354>)
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c50:	4b1d      	ldr	r3, [pc, #116]	; (8003cc8 <HAL_GPIO_Init+0x354>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	43db      	mvns	r3, r3
 8003c5a:	69ba      	ldr	r2, [r7, #24]
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d003      	beq.n	8003c74 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003c6c:	69ba      	ldr	r2, [r7, #24]
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c74:	4a14      	ldr	r2, [pc, #80]	; (8003cc8 <HAL_GPIO_Init+0x354>)
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	61fb      	str	r3, [r7, #28]
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	2b0f      	cmp	r3, #15
 8003c84:	f67f ae84 	bls.w	8003990 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c88:	bf00      	nop
 8003c8a:	bf00      	nop
 8003c8c:	3724      	adds	r7, #36	; 0x24
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	40023800 	.word	0x40023800
 8003c9c:	40013800 	.word	0x40013800
 8003ca0:	40020000 	.word	0x40020000
 8003ca4:	40020400 	.word	0x40020400
 8003ca8:	40020800 	.word	0x40020800
 8003cac:	40020c00 	.word	0x40020c00
 8003cb0:	40021000 	.word	0x40021000
 8003cb4:	40021400 	.word	0x40021400
 8003cb8:	40021800 	.word	0x40021800
 8003cbc:	40021c00 	.word	0x40021c00
 8003cc0:	40022000 	.word	0x40022000
 8003cc4:	40022400 	.word	0x40022400
 8003cc8:	40013c00 	.word	0x40013c00

08003ccc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b085      	sub	sp, #20
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	691a      	ldr	r2, [r3, #16]
 8003cdc:	887b      	ldrh	r3, [r7, #2]
 8003cde:	4013      	ands	r3, r2
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d002      	beq.n	8003cea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	73fb      	strb	r3, [r7, #15]
 8003ce8:	e001      	b.n	8003cee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003cea:	2300      	movs	r3, #0
 8003cec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3714      	adds	r7, #20
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	460b      	mov	r3, r1
 8003d06:	807b      	strh	r3, [r7, #2]
 8003d08:	4613      	mov	r3, r2
 8003d0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d0c:	787b      	ldrb	r3, [r7, #1]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d003      	beq.n	8003d1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d12:	887a      	ldrh	r2, [r7, #2]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d18:	e003      	b.n	8003d22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d1a:	887b      	ldrh	r3, [r7, #2]
 8003d1c:	041a      	lsls	r2, r3, #16
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	619a      	str	r2, [r3, #24]
}
 8003d22:	bf00      	nop
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr

08003d2e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d2e:	b480      	push	{r7}
 8003d30:	b085      	sub	sp, #20
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
 8003d36:	460b      	mov	r3, r1
 8003d38:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	695b      	ldr	r3, [r3, #20]
 8003d3e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003d40:	887a      	ldrh	r2, [r7, #2]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	4013      	ands	r3, r2
 8003d46:	041a      	lsls	r2, r3, #16
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	43d9      	mvns	r1, r3
 8003d4c:	887b      	ldrh	r3, [r7, #2]
 8003d4e:	400b      	ands	r3, r1
 8003d50:	431a      	orrs	r2, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	619a      	str	r2, [r3, #24]
}
 8003d56:	bf00      	nop
 8003d58:	3714      	adds	r7, #20
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr

08003d62 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b086      	sub	sp, #24
 8003d66:	af02      	add	r7, sp, #8
 8003d68:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d101      	bne.n	8003d74 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e101      	b.n	8003f78 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d106      	bne.n	8003d94 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f009 ff20 	bl	800dbd4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2203      	movs	r2, #3
 8003d98:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003da2:	d102      	bne.n	8003daa <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4618      	mov	r0, r3
 8003db0:	f004 fd1d 	bl	80087ee <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6818      	ldr	r0, [r3, #0]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	7c1a      	ldrb	r2, [r3, #16]
 8003dbc:	f88d 2000 	strb.w	r2, [sp]
 8003dc0:	3304      	adds	r3, #4
 8003dc2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003dc4:	f004 fbfc 	bl	80085c0 <USB_CoreInit>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d005      	beq.n	8003dda <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2202      	movs	r2, #2
 8003dd2:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e0ce      	b.n	8003f78 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2100      	movs	r1, #0
 8003de0:	4618      	mov	r0, r3
 8003de2:	f004 fd15 	bl	8008810 <USB_SetCurrentMode>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d005      	beq.n	8003df8 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2202      	movs	r2, #2
 8003df0:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e0bf      	b.n	8003f78 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003df8:	2300      	movs	r3, #0
 8003dfa:	73fb      	strb	r3, [r7, #15]
 8003dfc:	e04a      	b.n	8003e94 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003dfe:	7bfa      	ldrb	r2, [r7, #15]
 8003e00:	6879      	ldr	r1, [r7, #4]
 8003e02:	4613      	mov	r3, r2
 8003e04:	00db      	lsls	r3, r3, #3
 8003e06:	4413      	add	r3, r2
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	440b      	add	r3, r1
 8003e0c:	3315      	adds	r3, #21
 8003e0e:	2201      	movs	r2, #1
 8003e10:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003e12:	7bfa      	ldrb	r2, [r7, #15]
 8003e14:	6879      	ldr	r1, [r7, #4]
 8003e16:	4613      	mov	r3, r2
 8003e18:	00db      	lsls	r3, r3, #3
 8003e1a:	4413      	add	r3, r2
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	440b      	add	r3, r1
 8003e20:	3314      	adds	r3, #20
 8003e22:	7bfa      	ldrb	r2, [r7, #15]
 8003e24:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003e26:	7bfa      	ldrb	r2, [r7, #15]
 8003e28:	7bfb      	ldrb	r3, [r7, #15]
 8003e2a:	b298      	uxth	r0, r3
 8003e2c:	6879      	ldr	r1, [r7, #4]
 8003e2e:	4613      	mov	r3, r2
 8003e30:	00db      	lsls	r3, r3, #3
 8003e32:	4413      	add	r3, r2
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	440b      	add	r3, r1
 8003e38:	332e      	adds	r3, #46	; 0x2e
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003e3e:	7bfa      	ldrb	r2, [r7, #15]
 8003e40:	6879      	ldr	r1, [r7, #4]
 8003e42:	4613      	mov	r3, r2
 8003e44:	00db      	lsls	r3, r3, #3
 8003e46:	4413      	add	r3, r2
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	440b      	add	r3, r1
 8003e4c:	3318      	adds	r3, #24
 8003e4e:	2200      	movs	r2, #0
 8003e50:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003e52:	7bfa      	ldrb	r2, [r7, #15]
 8003e54:	6879      	ldr	r1, [r7, #4]
 8003e56:	4613      	mov	r3, r2
 8003e58:	00db      	lsls	r3, r3, #3
 8003e5a:	4413      	add	r3, r2
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	440b      	add	r3, r1
 8003e60:	331c      	adds	r3, #28
 8003e62:	2200      	movs	r2, #0
 8003e64:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003e66:	7bfa      	ldrb	r2, [r7, #15]
 8003e68:	6879      	ldr	r1, [r7, #4]
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	00db      	lsls	r3, r3, #3
 8003e6e:	4413      	add	r3, r2
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	440b      	add	r3, r1
 8003e74:	3320      	adds	r3, #32
 8003e76:	2200      	movs	r2, #0
 8003e78:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003e7a:	7bfa      	ldrb	r2, [r7, #15]
 8003e7c:	6879      	ldr	r1, [r7, #4]
 8003e7e:	4613      	mov	r3, r2
 8003e80:	00db      	lsls	r3, r3, #3
 8003e82:	4413      	add	r3, r2
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	440b      	add	r3, r1
 8003e88:	3324      	adds	r3, #36	; 0x24
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e8e:	7bfb      	ldrb	r3, [r7, #15]
 8003e90:	3301      	adds	r3, #1
 8003e92:	73fb      	strb	r3, [r7, #15]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	791b      	ldrb	r3, [r3, #4]
 8003e98:	7bfa      	ldrb	r2, [r7, #15]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d3af      	bcc.n	8003dfe <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	73fb      	strb	r3, [r7, #15]
 8003ea2:	e044      	b.n	8003f2e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003ea4:	7bfa      	ldrb	r2, [r7, #15]
 8003ea6:	6879      	ldr	r1, [r7, #4]
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	00db      	lsls	r3, r3, #3
 8003eac:	4413      	add	r3, r2
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	440b      	add	r3, r1
 8003eb2:	f203 2355 	addw	r3, r3, #597	; 0x255
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003eba:	7bfa      	ldrb	r2, [r7, #15]
 8003ebc:	6879      	ldr	r1, [r7, #4]
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	00db      	lsls	r3, r3, #3
 8003ec2:	4413      	add	r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	440b      	add	r3, r1
 8003ec8:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8003ecc:	7bfa      	ldrb	r2, [r7, #15]
 8003ece:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003ed0:	7bfa      	ldrb	r2, [r7, #15]
 8003ed2:	6879      	ldr	r1, [r7, #4]
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	00db      	lsls	r3, r3, #3
 8003ed8:	4413      	add	r3, r2
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	440b      	add	r3, r1
 8003ede:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003ee6:	7bfa      	ldrb	r2, [r7, #15]
 8003ee8:	6879      	ldr	r1, [r7, #4]
 8003eea:	4613      	mov	r3, r2
 8003eec:	00db      	lsls	r3, r3, #3
 8003eee:	4413      	add	r3, r2
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	440b      	add	r3, r1
 8003ef4:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8003ef8:	2200      	movs	r2, #0
 8003efa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003efc:	7bfa      	ldrb	r2, [r7, #15]
 8003efe:	6879      	ldr	r1, [r7, #4]
 8003f00:	4613      	mov	r3, r2
 8003f02:	00db      	lsls	r3, r3, #3
 8003f04:	4413      	add	r3, r2
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	440b      	add	r3, r1
 8003f0a:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8003f0e:	2200      	movs	r2, #0
 8003f10:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003f12:	7bfa      	ldrb	r2, [r7, #15]
 8003f14:	6879      	ldr	r1, [r7, #4]
 8003f16:	4613      	mov	r3, r2
 8003f18:	00db      	lsls	r3, r3, #3
 8003f1a:	4413      	add	r3, r2
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	440b      	add	r3, r1
 8003f20:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8003f24:	2200      	movs	r2, #0
 8003f26:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f28:	7bfb      	ldrb	r3, [r7, #15]
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	73fb      	strb	r3, [r7, #15]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	791b      	ldrb	r3, [r3, #4]
 8003f32:	7bfa      	ldrb	r2, [r7, #15]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d3b5      	bcc.n	8003ea4 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6818      	ldr	r0, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	7c1a      	ldrb	r2, [r3, #16]
 8003f40:	f88d 2000 	strb.w	r2, [sp]
 8003f44:	3304      	adds	r3, #4
 8003f46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f48:	f004 fcae 	bl	80088a8 <USB_DevInit>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d005      	beq.n	8003f5e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2202      	movs	r2, #2
 8003f56:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e00c      	b.n	8003f78 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4618      	mov	r0, r3
 8003f72:	f005 fcf2 	bl	800995a <USB_DevDisconnect>

  return HAL_OK;
 8003f76:	2300      	movs	r3, #0
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3710      	adds	r7, #16
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d101      	bne.n	8003f9c <HAL_PCD_Start+0x1c>
 8003f98:	2302      	movs	r3, #2
 8003f9a:	e022      	b.n	8003fe2 <HAL_PCD_Start+0x62>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d009      	beq.n	8003fc4 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d105      	bne.n	8003fc4 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fbc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f004 fbff 	bl	80087cc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f005 fca0 	bl	8009918 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003fe0:	2300      	movs	r3, #0
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3710      	adds	r7, #16
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}

08003fea <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003fea:	b590      	push	{r4, r7, lr}
 8003fec:	b08d      	sub	sp, #52	; 0x34
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ff8:	6a3b      	ldr	r3, [r7, #32]
 8003ffa:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4618      	mov	r0, r3
 8004002:	f005 fd5e 	bl	8009ac2 <USB_GetMode>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	f040 848c 	bne.w	8004926 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4618      	mov	r0, r3
 8004014:	f005 fcc2 	bl	800999c <USB_ReadInterrupts>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	f000 8482 	beq.w	8004924 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	0a1b      	lsrs	r3, r3, #8
 800402a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4618      	mov	r0, r3
 800403a:	f005 fcaf 	bl	800999c <USB_ReadInterrupts>
 800403e:	4603      	mov	r3, r0
 8004040:	f003 0302 	and.w	r3, r3, #2
 8004044:	2b02      	cmp	r3, #2
 8004046:	d107      	bne.n	8004058 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	695a      	ldr	r2, [r3, #20]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f002 0202 	and.w	r2, r2, #2
 8004056:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4618      	mov	r0, r3
 800405e:	f005 fc9d 	bl	800999c <USB_ReadInterrupts>
 8004062:	4603      	mov	r3, r0
 8004064:	f003 0310 	and.w	r3, r3, #16
 8004068:	2b10      	cmp	r3, #16
 800406a:	d161      	bne.n	8004130 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	699a      	ldr	r2, [r3, #24]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f022 0210 	bic.w	r2, r2, #16
 800407a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800407c:	6a3b      	ldr	r3, [r7, #32]
 800407e:	6a1b      	ldr	r3, [r3, #32]
 8004080:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	f003 020f 	and.w	r2, r3, #15
 8004088:	4613      	mov	r3, r2
 800408a:	00db      	lsls	r3, r3, #3
 800408c:	4413      	add	r3, r2
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	4413      	add	r3, r2
 8004098:	3304      	adds	r3, #4
 800409a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800409c:	69bb      	ldr	r3, [r7, #24]
 800409e:	0c5b      	lsrs	r3, r3, #17
 80040a0:	f003 030f 	and.w	r3, r3, #15
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d124      	bne.n	80040f2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80040a8:	69ba      	ldr	r2, [r7, #24]
 80040aa:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80040ae:	4013      	ands	r3, r2
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d035      	beq.n	8004120 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	091b      	lsrs	r3, r3, #4
 80040bc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80040be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	461a      	mov	r2, r3
 80040c6:	6a38      	ldr	r0, [r7, #32]
 80040c8:	f005 fad4 	bl	8009674 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	68da      	ldr	r2, [r3, #12]
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	091b      	lsrs	r3, r3, #4
 80040d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80040d8:	441a      	add	r2, r3
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	695a      	ldr	r2, [r3, #20]
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	091b      	lsrs	r3, r3, #4
 80040e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80040ea:	441a      	add	r2, r3
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	615a      	str	r2, [r3, #20]
 80040f0:	e016      	b.n	8004120 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	0c5b      	lsrs	r3, r3, #17
 80040f6:	f003 030f 	and.w	r3, r3, #15
 80040fa:	2b06      	cmp	r3, #6
 80040fc:	d110      	bne.n	8004120 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004104:	2208      	movs	r2, #8
 8004106:	4619      	mov	r1, r3
 8004108:	6a38      	ldr	r0, [r7, #32]
 800410a:	f005 fab3 	bl	8009674 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	695a      	ldr	r2, [r3, #20]
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	091b      	lsrs	r3, r3, #4
 8004116:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800411a:	441a      	add	r2, r3
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	699a      	ldr	r2, [r3, #24]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f042 0210 	orr.w	r2, r2, #16
 800412e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4618      	mov	r0, r3
 8004136:	f005 fc31 	bl	800999c <USB_ReadInterrupts>
 800413a:	4603      	mov	r3, r0
 800413c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004140:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004144:	f040 80a7 	bne.w	8004296 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004148:	2300      	movs	r3, #0
 800414a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4618      	mov	r0, r3
 8004152:	f005 fc36 	bl	80099c2 <USB_ReadDevAllOutEpInterrupt>
 8004156:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004158:	e099      	b.n	800428e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800415a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800415c:	f003 0301 	and.w	r3, r3, #1
 8004160:	2b00      	cmp	r3, #0
 8004162:	f000 808e 	beq.w	8004282 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800416c:	b2d2      	uxtb	r2, r2
 800416e:	4611      	mov	r1, r2
 8004170:	4618      	mov	r0, r3
 8004172:	f005 fc5a 	bl	8009a2a <USB_ReadDevOutEPInterrupt>
 8004176:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	f003 0301 	and.w	r3, r3, #1
 800417e:	2b00      	cmp	r3, #0
 8004180:	d00c      	beq.n	800419c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004184:	015a      	lsls	r2, r3, #5
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	4413      	add	r3, r2
 800418a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800418e:	461a      	mov	r2, r3
 8004190:	2301      	movs	r3, #1
 8004192:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004194:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f000 fea2 	bl	8004ee0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	f003 0308 	and.w	r3, r3, #8
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d00c      	beq.n	80041c0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80041a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a8:	015a      	lsls	r2, r3, #5
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	4413      	add	r3, r2
 80041ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041b2:	461a      	mov	r2, r3
 80041b4:	2308      	movs	r3, #8
 80041b6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80041b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 ff78 	bl	80050b0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	f003 0310 	and.w	r3, r3, #16
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d008      	beq.n	80041dc <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80041ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041cc:	015a      	lsls	r2, r3, #5
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	4413      	add	r3, r2
 80041d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041d6:	461a      	mov	r2, r3
 80041d8:	2310      	movs	r3, #16
 80041da:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	f003 0302 	and.w	r3, r3, #2
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d030      	beq.n	8004248 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80041e6:	6a3b      	ldr	r3, [r7, #32]
 80041e8:	695b      	ldr	r3, [r3, #20]
 80041ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ee:	2b80      	cmp	r3, #128	; 0x80
 80041f0:	d109      	bne.n	8004206 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	69fa      	ldr	r2, [r7, #28]
 80041fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004200:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004204:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004206:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004208:	4613      	mov	r3, r2
 800420a:	00db      	lsls	r3, r3, #3
 800420c:	4413      	add	r3, r2
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	4413      	add	r3, r2
 8004218:	3304      	adds	r3, #4
 800421a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	78db      	ldrb	r3, [r3, #3]
 8004220:	2b01      	cmp	r3, #1
 8004222:	d108      	bne.n	8004236 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	2200      	movs	r2, #0
 8004228:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800422a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422c:	b2db      	uxtb	r3, r3
 800422e:	4619      	mov	r1, r3
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f009 fdd5 	bl	800dde0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004238:	015a      	lsls	r2, r3, #5
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	4413      	add	r3, r2
 800423e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004242:	461a      	mov	r2, r3
 8004244:	2302      	movs	r3, #2
 8004246:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	f003 0320 	and.w	r3, r3, #32
 800424e:	2b00      	cmp	r3, #0
 8004250:	d008      	beq.n	8004264 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004254:	015a      	lsls	r2, r3, #5
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	4413      	add	r3, r2
 800425a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800425e:	461a      	mov	r2, r3
 8004260:	2320      	movs	r3, #32
 8004262:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d009      	beq.n	8004282 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800426e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004270:	015a      	lsls	r2, r3, #5
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	4413      	add	r3, r2
 8004276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800427a:	461a      	mov	r2, r3
 800427c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004280:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004284:	3301      	adds	r3, #1
 8004286:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800428a:	085b      	lsrs	r3, r3, #1
 800428c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800428e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004290:	2b00      	cmp	r3, #0
 8004292:	f47f af62 	bne.w	800415a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4618      	mov	r0, r3
 800429c:	f005 fb7e 	bl	800999c <USB_ReadInterrupts>
 80042a0:	4603      	mov	r3, r0
 80042a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80042aa:	f040 80db 	bne.w	8004464 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4618      	mov	r0, r3
 80042b4:	f005 fb9f 	bl	80099f6 <USB_ReadDevAllInEpInterrupt>
 80042b8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80042ba:	2300      	movs	r3, #0
 80042bc:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80042be:	e0cd      	b.n	800445c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80042c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c2:	f003 0301 	and.w	r3, r3, #1
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	f000 80c2 	beq.w	8004450 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042d2:	b2d2      	uxtb	r2, r2
 80042d4:	4611      	mov	r1, r2
 80042d6:	4618      	mov	r0, r3
 80042d8:	f005 fbc5 	bl	8009a66 <USB_ReadDevInEPInterrupt>
 80042dc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	f003 0301 	and.w	r3, r3, #1
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d057      	beq.n	8004398 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80042e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ea:	f003 030f 	and.w	r3, r3, #15
 80042ee:	2201      	movs	r2, #1
 80042f0:	fa02 f303 	lsl.w	r3, r2, r3
 80042f4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	43db      	mvns	r3, r3
 8004302:	69f9      	ldr	r1, [r7, #28]
 8004304:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004308:	4013      	ands	r3, r2
 800430a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800430c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430e:	015a      	lsls	r2, r3, #5
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	4413      	add	r3, r2
 8004314:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004318:	461a      	mov	r2, r3
 800431a:	2301      	movs	r3, #1
 800431c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	799b      	ldrb	r3, [r3, #6]
 8004322:	2b01      	cmp	r3, #1
 8004324:	d132      	bne.n	800438c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004326:	6879      	ldr	r1, [r7, #4]
 8004328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800432a:	4613      	mov	r3, r2
 800432c:	00db      	lsls	r3, r3, #3
 800432e:	4413      	add	r3, r2
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	440b      	add	r3, r1
 8004334:	3320      	adds	r3, #32
 8004336:	6819      	ldr	r1, [r3, #0]
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800433c:	4613      	mov	r3, r2
 800433e:	00db      	lsls	r3, r3, #3
 8004340:	4413      	add	r3, r2
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	4403      	add	r3, r0
 8004346:	331c      	adds	r3, #28
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4419      	add	r1, r3
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004350:	4613      	mov	r3, r2
 8004352:	00db      	lsls	r3, r3, #3
 8004354:	4413      	add	r3, r2
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	4403      	add	r3, r0
 800435a:	3320      	adds	r3, #32
 800435c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800435e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004360:	2b00      	cmp	r3, #0
 8004362:	d113      	bne.n	800438c <HAL_PCD_IRQHandler+0x3a2>
 8004364:	6879      	ldr	r1, [r7, #4]
 8004366:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004368:	4613      	mov	r3, r2
 800436a:	00db      	lsls	r3, r3, #3
 800436c:	4413      	add	r3, r2
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	440b      	add	r3, r1
 8004372:	3324      	adds	r3, #36	; 0x24
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d108      	bne.n	800438c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6818      	ldr	r0, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004384:	461a      	mov	r2, r3
 8004386:	2101      	movs	r1, #1
 8004388:	f005 fbcc 	bl	8009b24 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800438c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438e:	b2db      	uxtb	r3, r3
 8004390:	4619      	mov	r1, r3
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f009 fc9f 	bl	800dcd6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	f003 0308 	and.w	r3, r3, #8
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d008      	beq.n	80043b4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80043a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a4:	015a      	lsls	r2, r3, #5
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	4413      	add	r3, r2
 80043aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043ae:	461a      	mov	r2, r3
 80043b0:	2308      	movs	r3, #8
 80043b2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	f003 0310 	and.w	r3, r3, #16
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d008      	beq.n	80043d0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80043be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c0:	015a      	lsls	r2, r3, #5
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	4413      	add	r3, r2
 80043c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043ca:	461a      	mov	r2, r3
 80043cc:	2310      	movs	r3, #16
 80043ce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d008      	beq.n	80043ec <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80043da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043dc:	015a      	lsls	r2, r3, #5
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	4413      	add	r3, r2
 80043e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043e6:	461a      	mov	r2, r3
 80043e8:	2340      	movs	r3, #64	; 0x40
 80043ea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	f003 0302 	and.w	r3, r3, #2
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d023      	beq.n	800443e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80043f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80043f8:	6a38      	ldr	r0, [r7, #32]
 80043fa:	f004 fbb9 	bl	8008b70 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80043fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004400:	4613      	mov	r3, r2
 8004402:	00db      	lsls	r3, r3, #3
 8004404:	4413      	add	r3, r2
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	3310      	adds	r3, #16
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	4413      	add	r3, r2
 800440e:	3304      	adds	r3, #4
 8004410:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	78db      	ldrb	r3, [r3, #3]
 8004416:	2b01      	cmp	r3, #1
 8004418:	d108      	bne.n	800442c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	2200      	movs	r2, #0
 800441e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004422:	b2db      	uxtb	r3, r3
 8004424:	4619      	mov	r1, r3
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f009 fcec 	bl	800de04 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800442c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442e:	015a      	lsls	r2, r3, #5
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	4413      	add	r3, r2
 8004434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004438:	461a      	mov	r2, r3
 800443a:	2302      	movs	r3, #2
 800443c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004444:	2b00      	cmp	r3, #0
 8004446:	d003      	beq.n	8004450 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004448:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 fcbb 	bl	8004dc6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004452:	3301      	adds	r3, #1
 8004454:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004458:	085b      	lsrs	r3, r3, #1
 800445a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800445c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800445e:	2b00      	cmp	r3, #0
 8004460:	f47f af2e 	bne.w	80042c0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4618      	mov	r0, r3
 800446a:	f005 fa97 	bl	800999c <USB_ReadInterrupts>
 800446e:	4603      	mov	r3, r0
 8004470:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004474:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004478:	d122      	bne.n	80044c0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	69fa      	ldr	r2, [r7, #28]
 8004484:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004488:	f023 0301 	bic.w	r3, r3, #1
 800448c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8004494:	2b01      	cmp	r3, #1
 8004496:	d108      	bne.n	80044aa <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80044a0:	2100      	movs	r1, #0
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 fea2 	bl	80051ec <HAL_PCDEx_LPM_Callback>
 80044a8:	e002      	b.n	80044b0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f009 fc8a 	bl	800ddc4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	695a      	ldr	r2, [r3, #20]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80044be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4618      	mov	r0, r3
 80044c6:	f005 fa69 	bl	800999c <USB_ReadInterrupts>
 80044ca:	4603      	mov	r3, r0
 80044cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044d4:	d112      	bne.n	80044fc <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	f003 0301 	and.w	r3, r3, #1
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d102      	bne.n	80044ec <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f009 fc46 	bl	800dd78 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	695a      	ldr	r2, [r3, #20]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80044fa:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4618      	mov	r0, r3
 8004502:	f005 fa4b 	bl	800999c <USB_ReadInterrupts>
 8004506:	4603      	mov	r3, r0
 8004508:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800450c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004510:	f040 80b7 	bne.w	8004682 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	69fa      	ldr	r2, [r7, #28]
 800451e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004522:	f023 0301 	bic.w	r3, r3, #1
 8004526:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2110      	movs	r1, #16
 800452e:	4618      	mov	r0, r3
 8004530:	f004 fb1e 	bl	8008b70 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004534:	2300      	movs	r3, #0
 8004536:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004538:	e046      	b.n	80045c8 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800453a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800453c:	015a      	lsls	r2, r3, #5
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	4413      	add	r3, r2
 8004542:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004546:	461a      	mov	r2, r3
 8004548:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800454c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800454e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004550:	015a      	lsls	r2, r3, #5
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	4413      	add	r3, r2
 8004556:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800455e:	0151      	lsls	r1, r2, #5
 8004560:	69fa      	ldr	r2, [r7, #28]
 8004562:	440a      	add	r2, r1
 8004564:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004568:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800456c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800456e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004570:	015a      	lsls	r2, r3, #5
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	4413      	add	r3, r2
 8004576:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800457a:	461a      	mov	r2, r3
 800457c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004580:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004584:	015a      	lsls	r2, r3, #5
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	4413      	add	r3, r2
 800458a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004592:	0151      	lsls	r1, r2, #5
 8004594:	69fa      	ldr	r2, [r7, #28]
 8004596:	440a      	add	r2, r1
 8004598:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800459c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80045a0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80045a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045a4:	015a      	lsls	r2, r3, #5
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	4413      	add	r3, r2
 80045aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045b2:	0151      	lsls	r1, r2, #5
 80045b4:	69fa      	ldr	r2, [r7, #28]
 80045b6:	440a      	add	r2, r1
 80045b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045bc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80045c0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045c4:	3301      	adds	r3, #1
 80045c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	791b      	ldrb	r3, [r3, #4]
 80045cc:	461a      	mov	r2, r3
 80045ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d3b2      	bcc.n	800453a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045da:	69db      	ldr	r3, [r3, #28]
 80045dc:	69fa      	ldr	r2, [r7, #28]
 80045de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80045e2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80045e6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	7bdb      	ldrb	r3, [r3, #15]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d016      	beq.n	800461e <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045fa:	69fa      	ldr	r2, [r7, #28]
 80045fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004600:	f043 030b 	orr.w	r3, r3, #11
 8004604:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800460e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004610:	69fa      	ldr	r2, [r7, #28]
 8004612:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004616:	f043 030b 	orr.w	r3, r3, #11
 800461a:	6453      	str	r3, [r2, #68]	; 0x44
 800461c:	e015      	b.n	800464a <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004624:	695b      	ldr	r3, [r3, #20]
 8004626:	69fa      	ldr	r2, [r7, #28]
 8004628:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800462c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004630:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004634:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	69fa      	ldr	r2, [r7, #28]
 8004640:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004644:	f043 030b 	orr.w	r3, r3, #11
 8004648:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	69fa      	ldr	r2, [r7, #28]
 8004654:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004658:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800465c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6818      	ldr	r0, [r3, #0]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800466c:	461a      	mov	r2, r3
 800466e:	f005 fa59 	bl	8009b24 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	695a      	ldr	r2, [r3, #20]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004680:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4618      	mov	r0, r3
 8004688:	f005 f988 	bl	800999c <USB_ReadInterrupts>
 800468c:	4603      	mov	r3, r0
 800468e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004692:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004696:	d123      	bne.n	80046e0 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4618      	mov	r0, r3
 800469e:	f005 fa1e 	bl	8009ade <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4618      	mov	r0, r3
 80046a8:	f004 fadb 	bl	8008c62 <USB_GetDevSpeed>
 80046ac:	4603      	mov	r3, r0
 80046ae:	461a      	mov	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681c      	ldr	r4, [r3, #0]
 80046b8:	f001 f9c8 	bl	8005a4c <HAL_RCC_GetHCLKFreq>
 80046bc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80046c2:	461a      	mov	r2, r3
 80046c4:	4620      	mov	r0, r4
 80046c6:	f003 ffdf 	bl	8008688 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f009 fb2b 	bl	800dd26 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	695a      	ldr	r2, [r3, #20]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80046de:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4618      	mov	r0, r3
 80046e6:	f005 f959 	bl	800999c <USB_ReadInterrupts>
 80046ea:	4603      	mov	r3, r0
 80046ec:	f003 0308 	and.w	r3, r3, #8
 80046f0:	2b08      	cmp	r3, #8
 80046f2:	d10a      	bne.n	800470a <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f009 fb08 	bl	800dd0a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	695a      	ldr	r2, [r3, #20]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f002 0208 	and.w	r2, r2, #8
 8004708:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4618      	mov	r0, r3
 8004710:	f005 f944 	bl	800999c <USB_ReadInterrupts>
 8004714:	4603      	mov	r3, r0
 8004716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800471a:	2b80      	cmp	r3, #128	; 0x80
 800471c:	d123      	bne.n	8004766 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800471e:	6a3b      	ldr	r3, [r7, #32]
 8004720:	699b      	ldr	r3, [r3, #24]
 8004722:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004726:	6a3b      	ldr	r3, [r7, #32]
 8004728:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800472a:	2301      	movs	r3, #1
 800472c:	627b      	str	r3, [r7, #36]	; 0x24
 800472e:	e014      	b.n	800475a <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004730:	6879      	ldr	r1, [r7, #4]
 8004732:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004734:	4613      	mov	r3, r2
 8004736:	00db      	lsls	r3, r3, #3
 8004738:	4413      	add	r3, r2
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	440b      	add	r3, r1
 800473e:	f203 2357 	addw	r3, r3, #599	; 0x257
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	2b01      	cmp	r3, #1
 8004746:	d105      	bne.n	8004754 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474a:	b2db      	uxtb	r3, r3
 800474c:	4619      	mov	r1, r3
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 fb08 	bl	8004d64 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004756:	3301      	adds	r3, #1
 8004758:	627b      	str	r3, [r7, #36]	; 0x24
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	791b      	ldrb	r3, [r3, #4]
 800475e:	461a      	mov	r2, r3
 8004760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004762:	4293      	cmp	r3, r2
 8004764:	d3e4      	bcc.n	8004730 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4618      	mov	r0, r3
 800476c:	f005 f916 	bl	800999c <USB_ReadInterrupts>
 8004770:	4603      	mov	r3, r0
 8004772:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004776:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800477a:	d13c      	bne.n	80047f6 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800477c:	2301      	movs	r3, #1
 800477e:	627b      	str	r3, [r7, #36]	; 0x24
 8004780:	e02b      	b.n	80047da <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004784:	015a      	lsls	r2, r3, #5
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	4413      	add	r3, r2
 800478a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004792:	6879      	ldr	r1, [r7, #4]
 8004794:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004796:	4613      	mov	r3, r2
 8004798:	00db      	lsls	r3, r3, #3
 800479a:	4413      	add	r3, r2
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	440b      	add	r3, r1
 80047a0:	3318      	adds	r3, #24
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d115      	bne.n	80047d4 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80047a8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	da12      	bge.n	80047d4 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80047ae:	6879      	ldr	r1, [r7, #4]
 80047b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047b2:	4613      	mov	r3, r2
 80047b4:	00db      	lsls	r3, r3, #3
 80047b6:	4413      	add	r3, r2
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	440b      	add	r3, r1
 80047bc:	3317      	adds	r3, #23
 80047be:	2201      	movs	r2, #1
 80047c0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80047c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	4619      	mov	r1, r3
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 fac8 	bl	8004d64 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80047d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d6:	3301      	adds	r3, #1
 80047d8:	627b      	str	r3, [r7, #36]	; 0x24
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	791b      	ldrb	r3, [r3, #4]
 80047de:	461a      	mov	r2, r3
 80047e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d3cd      	bcc.n	8004782 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	695a      	ldr	r2, [r3, #20]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80047f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4618      	mov	r0, r3
 80047fc:	f005 f8ce 	bl	800999c <USB_ReadInterrupts>
 8004800:	4603      	mov	r3, r0
 8004802:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004806:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800480a:	d156      	bne.n	80048ba <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800480c:	2301      	movs	r3, #1
 800480e:	627b      	str	r3, [r7, #36]	; 0x24
 8004810:	e045      	b.n	800489e <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004814:	015a      	lsls	r2, r3, #5
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	4413      	add	r3, r2
 800481a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004822:	6879      	ldr	r1, [r7, #4]
 8004824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004826:	4613      	mov	r3, r2
 8004828:	00db      	lsls	r3, r3, #3
 800482a:	4413      	add	r3, r2
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	440b      	add	r3, r1
 8004830:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	2b01      	cmp	r3, #1
 8004838:	d12e      	bne.n	8004898 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800483a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800483c:	2b00      	cmp	r3, #0
 800483e:	da2b      	bge.n	8004898 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 800484c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004850:	429a      	cmp	r2, r3
 8004852:	d121      	bne.n	8004898 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004854:	6879      	ldr	r1, [r7, #4]
 8004856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004858:	4613      	mov	r3, r2
 800485a:	00db      	lsls	r3, r3, #3
 800485c:	4413      	add	r3, r2
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	440b      	add	r3, r1
 8004862:	f203 2357 	addw	r3, r3, #599	; 0x257
 8004866:	2201      	movs	r2, #1
 8004868:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800486a:	6a3b      	ldr	r3, [r7, #32]
 800486c:	699b      	ldr	r3, [r3, #24]
 800486e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004872:	6a3b      	ldr	r3, [r7, #32]
 8004874:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004876:	6a3b      	ldr	r3, [r7, #32]
 8004878:	695b      	ldr	r3, [r3, #20]
 800487a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800487e:	2b00      	cmp	r3, #0
 8004880:	d10a      	bne.n	8004898 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	69fa      	ldr	r2, [r7, #28]
 800488c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004890:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004894:	6053      	str	r3, [r2, #4]
            break;
 8004896:	e008      	b.n	80048aa <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489a:	3301      	adds	r3, #1
 800489c:	627b      	str	r3, [r7, #36]	; 0x24
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	791b      	ldrb	r3, [r3, #4]
 80048a2:	461a      	mov	r2, r3
 80048a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d3b3      	bcc.n	8004812 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	695a      	ldr	r2, [r3, #20]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80048b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4618      	mov	r0, r3
 80048c0:	f005 f86c 	bl	800999c <USB_ReadInterrupts>
 80048c4:	4603      	mov	r3, r0
 80048c6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80048ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ce:	d10a      	bne.n	80048e6 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f009 faa9 	bl	800de28 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	695a      	ldr	r2, [r3, #20]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80048e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4618      	mov	r0, r3
 80048ec:	f005 f856 	bl	800999c <USB_ReadInterrupts>
 80048f0:	4603      	mov	r3, r0
 80048f2:	f003 0304 	and.w	r3, r3, #4
 80048f6:	2b04      	cmp	r3, #4
 80048f8:	d115      	bne.n	8004926 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	f003 0304 	and.w	r3, r3, #4
 8004908:	2b00      	cmp	r3, #0
 800490a:	d002      	beq.n	8004912 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f009 fa99 	bl	800de44 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	6859      	ldr	r1, [r3, #4]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	69ba      	ldr	r2, [r7, #24]
 800491e:	430a      	orrs	r2, r1
 8004920:	605a      	str	r2, [r3, #4]
 8004922:	e000      	b.n	8004926 <HAL_PCD_IRQHandler+0x93c>
      return;
 8004924:	bf00      	nop
    }
  }
}
 8004926:	3734      	adds	r7, #52	; 0x34
 8004928:	46bd      	mov	sp, r7
 800492a:	bd90      	pop	{r4, r7, pc}

0800492c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b082      	sub	sp, #8
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	460b      	mov	r3, r1
 8004936:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800493e:	2b01      	cmp	r3, #1
 8004940:	d101      	bne.n	8004946 <HAL_PCD_SetAddress+0x1a>
 8004942:	2302      	movs	r3, #2
 8004944:	e012      	b.n	800496c <HAL_PCD_SetAddress+0x40>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2201      	movs	r2, #1
 800494a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	78fa      	ldrb	r2, [r7, #3]
 8004952:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	78fa      	ldrb	r2, [r7, #3]
 800495a:	4611      	mov	r1, r2
 800495c:	4618      	mov	r0, r3
 800495e:	f004 ffb5 	bl	80098cc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800496a:	2300      	movs	r3, #0
}
 800496c:	4618      	mov	r0, r3
 800496e:	3708      	adds	r7, #8
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	4608      	mov	r0, r1
 800497e:	4611      	mov	r1, r2
 8004980:	461a      	mov	r2, r3
 8004982:	4603      	mov	r3, r0
 8004984:	70fb      	strb	r3, [r7, #3]
 8004986:	460b      	mov	r3, r1
 8004988:	803b      	strh	r3, [r7, #0]
 800498a:	4613      	mov	r3, r2
 800498c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800498e:	2300      	movs	r3, #0
 8004990:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004992:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004996:	2b00      	cmp	r3, #0
 8004998:	da0f      	bge.n	80049ba <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800499a:	78fb      	ldrb	r3, [r7, #3]
 800499c:	f003 020f 	and.w	r2, r3, #15
 80049a0:	4613      	mov	r3, r2
 80049a2:	00db      	lsls	r3, r3, #3
 80049a4:	4413      	add	r3, r2
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	3310      	adds	r3, #16
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	4413      	add	r3, r2
 80049ae:	3304      	adds	r3, #4
 80049b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2201      	movs	r2, #1
 80049b6:	705a      	strb	r2, [r3, #1]
 80049b8:	e00f      	b.n	80049da <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049ba:	78fb      	ldrb	r3, [r7, #3]
 80049bc:	f003 020f 	and.w	r2, r3, #15
 80049c0:	4613      	mov	r3, r2
 80049c2:	00db      	lsls	r3, r3, #3
 80049c4:	4413      	add	r3, r2
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	4413      	add	r3, r2
 80049d0:	3304      	adds	r3, #4
 80049d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2200      	movs	r2, #0
 80049d8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80049da:	78fb      	ldrb	r3, [r7, #3]
 80049dc:	f003 030f 	and.w	r3, r3, #15
 80049e0:	b2da      	uxtb	r2, r3
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80049e6:	883a      	ldrh	r2, [r7, #0]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	78ba      	ldrb	r2, [r7, #2]
 80049f0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	785b      	ldrb	r3, [r3, #1]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d004      	beq.n	8004a04 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	b29a      	uxth	r2, r3
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004a04:	78bb      	ldrb	r3, [r7, #2]
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d102      	bne.n	8004a10 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d101      	bne.n	8004a1e <HAL_PCD_EP_Open+0xaa>
 8004a1a:	2302      	movs	r3, #2
 8004a1c:	e00e      	b.n	8004a3c <HAL_PCD_EP_Open+0xc8>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2201      	movs	r2, #1
 8004a22:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	68f9      	ldr	r1, [r7, #12]
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f004 f93d 	bl	8008cac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8004a3a:	7afb      	ldrb	r3, [r7, #11]
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3710      	adds	r7, #16
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b084      	sub	sp, #16
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	460b      	mov	r3, r1
 8004a4e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004a50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	da0f      	bge.n	8004a78 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a58:	78fb      	ldrb	r3, [r7, #3]
 8004a5a:	f003 020f 	and.w	r2, r3, #15
 8004a5e:	4613      	mov	r3, r2
 8004a60:	00db      	lsls	r3, r3, #3
 8004a62:	4413      	add	r3, r2
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	3310      	adds	r3, #16
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	4413      	add	r3, r2
 8004a6c:	3304      	adds	r3, #4
 8004a6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2201      	movs	r2, #1
 8004a74:	705a      	strb	r2, [r3, #1]
 8004a76:	e00f      	b.n	8004a98 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a78:	78fb      	ldrb	r3, [r7, #3]
 8004a7a:	f003 020f 	and.w	r2, r3, #15
 8004a7e:	4613      	mov	r3, r2
 8004a80:	00db      	lsls	r3, r3, #3
 8004a82:	4413      	add	r3, r2
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	3304      	adds	r3, #4
 8004a90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2200      	movs	r2, #0
 8004a96:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a98:	78fb      	ldrb	r3, [r7, #3]
 8004a9a:	f003 030f 	and.w	r3, r3, #15
 8004a9e:	b2da      	uxtb	r2, r3
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d101      	bne.n	8004ab2 <HAL_PCD_EP_Close+0x6e>
 8004aae:	2302      	movs	r3, #2
 8004ab0:	e00e      	b.n	8004ad0 <HAL_PCD_EP_Close+0x8c>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	68f9      	ldr	r1, [r7, #12]
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f004 f97b 	bl	8008dbc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 8004ace:	2300      	movs	r3, #0
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3710      	adds	r7, #16
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b086      	sub	sp, #24
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	607a      	str	r2, [r7, #4]
 8004ae2:	603b      	str	r3, [r7, #0]
 8004ae4:	460b      	mov	r3, r1
 8004ae6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ae8:	7afb      	ldrb	r3, [r7, #11]
 8004aea:	f003 020f 	and.w	r2, r3, #15
 8004aee:	4613      	mov	r3, r2
 8004af0:	00db      	lsls	r3, r3, #3
 8004af2:	4413      	add	r3, r2
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004afa:	68fa      	ldr	r2, [r7, #12]
 8004afc:	4413      	add	r3, r2
 8004afe:	3304      	adds	r3, #4
 8004b00:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	683a      	ldr	r2, [r7, #0]
 8004b0c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	2200      	movs	r2, #0
 8004b12:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	2200      	movs	r2, #0
 8004b18:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b1a:	7afb      	ldrb	r3, [r7, #11]
 8004b1c:	f003 030f 	and.w	r3, r3, #15
 8004b20:	b2da      	uxtb	r2, r3
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	799b      	ldrb	r3, [r3, #6]
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d102      	bne.n	8004b34 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6818      	ldr	r0, [r3, #0]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	799b      	ldrb	r3, [r3, #6]
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	6979      	ldr	r1, [r7, #20]
 8004b40:	f004 fa18 	bl	8008f74 <USB_EPStartXfer>

  return HAL_OK;
 8004b44:	2300      	movs	r3, #0
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3718      	adds	r7, #24
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}

08004b4e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004b4e:	b480      	push	{r7}
 8004b50:	b083      	sub	sp, #12
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	6078      	str	r0, [r7, #4]
 8004b56:	460b      	mov	r3, r1
 8004b58:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004b5a:	78fb      	ldrb	r3, [r7, #3]
 8004b5c:	f003 020f 	and.w	r2, r3, #15
 8004b60:	6879      	ldr	r1, [r7, #4]
 8004b62:	4613      	mov	r3, r2
 8004b64:	00db      	lsls	r3, r3, #3
 8004b66:	4413      	add	r3, r2
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	440b      	add	r3, r1
 8004b6c:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8004b70:	681b      	ldr	r3, [r3, #0]
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	370c      	adds	r7, #12
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr

08004b7e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004b7e:	b580      	push	{r7, lr}
 8004b80:	b086      	sub	sp, #24
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	60f8      	str	r0, [r7, #12]
 8004b86:	607a      	str	r2, [r7, #4]
 8004b88:	603b      	str	r3, [r7, #0]
 8004b8a:	460b      	mov	r3, r1
 8004b8c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b8e:	7afb      	ldrb	r3, [r7, #11]
 8004b90:	f003 020f 	and.w	r2, r3, #15
 8004b94:	4613      	mov	r3, r2
 8004b96:	00db      	lsls	r3, r3, #3
 8004b98:	4413      	add	r3, r2
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	3310      	adds	r3, #16
 8004b9e:	68fa      	ldr	r2, [r7, #12]
 8004ba0:	4413      	add	r3, r2
 8004ba2:	3304      	adds	r3, #4
 8004ba4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	683a      	ldr	r2, [r7, #0]
 8004bb0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004bbe:	7afb      	ldrb	r3, [r7, #11]
 8004bc0:	f003 030f 	and.w	r3, r3, #15
 8004bc4:	b2da      	uxtb	r2, r3
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	799b      	ldrb	r3, [r3, #6]
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d102      	bne.n	8004bd8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6818      	ldr	r0, [r3, #0]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	799b      	ldrb	r3, [r3, #6]
 8004be0:	461a      	mov	r2, r3
 8004be2:	6979      	ldr	r1, [r7, #20]
 8004be4:	f004 f9c6 	bl	8008f74 <USB_EPStartXfer>

  return HAL_OK;
 8004be8:	2300      	movs	r3, #0
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3718      	adds	r7, #24
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}

08004bf2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004bf2:	b580      	push	{r7, lr}
 8004bf4:	b084      	sub	sp, #16
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]
 8004bfa:	460b      	mov	r3, r1
 8004bfc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004bfe:	78fb      	ldrb	r3, [r7, #3]
 8004c00:	f003 030f 	and.w	r3, r3, #15
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	7912      	ldrb	r2, [r2, #4]
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d901      	bls.n	8004c10 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e04f      	b.n	8004cb0 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004c10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	da0f      	bge.n	8004c38 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c18:	78fb      	ldrb	r3, [r7, #3]
 8004c1a:	f003 020f 	and.w	r2, r3, #15
 8004c1e:	4613      	mov	r3, r2
 8004c20:	00db      	lsls	r3, r3, #3
 8004c22:	4413      	add	r3, r2
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	3310      	adds	r3, #16
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	4413      	add	r3, r2
 8004c2c:	3304      	adds	r3, #4
 8004c2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2201      	movs	r2, #1
 8004c34:	705a      	strb	r2, [r3, #1]
 8004c36:	e00d      	b.n	8004c54 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004c38:	78fa      	ldrb	r2, [r7, #3]
 8004c3a:	4613      	mov	r3, r2
 8004c3c:	00db      	lsls	r3, r3, #3
 8004c3e:	4413      	add	r3, r2
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	4413      	add	r3, r2
 8004c4a:	3304      	adds	r3, #4
 8004c4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2200      	movs	r2, #0
 8004c52:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2201      	movs	r2, #1
 8004c58:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c5a:	78fb      	ldrb	r3, [r7, #3]
 8004c5c:	f003 030f 	and.w	r3, r3, #15
 8004c60:	b2da      	uxtb	r2, r3
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d101      	bne.n	8004c74 <HAL_PCD_EP_SetStall+0x82>
 8004c70:	2302      	movs	r3, #2
 8004c72:	e01d      	b.n	8004cb0 <HAL_PCD_EP_SetStall+0xbe>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68f9      	ldr	r1, [r7, #12]
 8004c82:	4618      	mov	r0, r3
 8004c84:	f004 fd4e 	bl	8009724 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004c88:	78fb      	ldrb	r3, [r7, #3]
 8004c8a:	f003 030f 	and.w	r3, r3, #15
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d109      	bne.n	8004ca6 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6818      	ldr	r0, [r3, #0]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	7999      	ldrb	r1, [r3, #6]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	f004 ff3f 	bl	8009b24 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8004cae:	2300      	movs	r3, #0
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3710      	adds	r7, #16
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	460b      	mov	r3, r1
 8004cc2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004cc4:	78fb      	ldrb	r3, [r7, #3]
 8004cc6:	f003 030f 	and.w	r3, r3, #15
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	7912      	ldrb	r2, [r2, #4]
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d901      	bls.n	8004cd6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e042      	b.n	8004d5c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004cd6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	da0f      	bge.n	8004cfe <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004cde:	78fb      	ldrb	r3, [r7, #3]
 8004ce0:	f003 020f 	and.w	r2, r3, #15
 8004ce4:	4613      	mov	r3, r2
 8004ce6:	00db      	lsls	r3, r3, #3
 8004ce8:	4413      	add	r3, r2
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	3310      	adds	r3, #16
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	4413      	add	r3, r2
 8004cf2:	3304      	adds	r3, #4
 8004cf4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	705a      	strb	r2, [r3, #1]
 8004cfc:	e00f      	b.n	8004d1e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004cfe:	78fb      	ldrb	r3, [r7, #3]
 8004d00:	f003 020f 	and.w	r2, r3, #15
 8004d04:	4613      	mov	r3, r2
 8004d06:	00db      	lsls	r3, r3, #3
 8004d08:	4413      	add	r3, r2
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	4413      	add	r3, r2
 8004d14:	3304      	adds	r3, #4
 8004d16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2200      	movs	r2, #0
 8004d22:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d24:	78fb      	ldrb	r3, [r7, #3]
 8004d26:	f003 030f 	and.w	r3, r3, #15
 8004d2a:	b2da      	uxtb	r2, r3
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d101      	bne.n	8004d3e <HAL_PCD_EP_ClrStall+0x86>
 8004d3a:	2302      	movs	r3, #2
 8004d3c:	e00e      	b.n	8004d5c <HAL_PCD_EP_ClrStall+0xa4>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2201      	movs	r2, #1
 8004d42:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68f9      	ldr	r1, [r7, #12]
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f004 fd57 	bl	8009800 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8004d5a:	2300      	movs	r3, #0
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3710      	adds	r7, #16
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	460b      	mov	r3, r1
 8004d6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004d70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	da0c      	bge.n	8004d92 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d78:	78fb      	ldrb	r3, [r7, #3]
 8004d7a:	f003 020f 	and.w	r2, r3, #15
 8004d7e:	4613      	mov	r3, r2
 8004d80:	00db      	lsls	r3, r3, #3
 8004d82:	4413      	add	r3, r2
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	3310      	adds	r3, #16
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	4413      	add	r3, r2
 8004d8c:	3304      	adds	r3, #4
 8004d8e:	60fb      	str	r3, [r7, #12]
 8004d90:	e00c      	b.n	8004dac <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d92:	78fb      	ldrb	r3, [r7, #3]
 8004d94:	f003 020f 	and.w	r2, r3, #15
 8004d98:	4613      	mov	r3, r2
 8004d9a:	00db      	lsls	r3, r3, #3
 8004d9c:	4413      	add	r3, r2
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	4413      	add	r3, r2
 8004da8:	3304      	adds	r3, #4
 8004daa:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68f9      	ldr	r1, [r7, #12]
 8004db2:	4618      	mov	r0, r3
 8004db4:	f004 fb76 	bl	80094a4 <USB_EPStopXfer>
 8004db8:	4603      	mov	r3, r0
 8004dba:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004dbc:	7afb      	ldrb	r3, [r7, #11]
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3710      	adds	r7, #16
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}

08004dc6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004dc6:	b580      	push	{r7, lr}
 8004dc8:	b08a      	sub	sp, #40	; 0x28
 8004dca:	af02      	add	r7, sp, #8
 8004dcc:	6078      	str	r0, [r7, #4]
 8004dce:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004dda:	683a      	ldr	r2, [r7, #0]
 8004ddc:	4613      	mov	r3, r2
 8004dde:	00db      	lsls	r3, r3, #3
 8004de0:	4413      	add	r3, r2
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	3310      	adds	r3, #16
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	4413      	add	r3, r2
 8004dea:	3304      	adds	r3, #4
 8004dec:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	695a      	ldr	r2, [r3, #20]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d901      	bls.n	8004dfe <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e06b      	b.n	8004ed6 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	691a      	ldr	r2, [r3, #16]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	695b      	ldr	r3, [r3, #20]
 8004e06:	1ad3      	subs	r3, r2, r3
 8004e08:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	69fa      	ldr	r2, [r7, #28]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d902      	bls.n	8004e1a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	3303      	adds	r3, #3
 8004e1e:	089b      	lsrs	r3, r3, #2
 8004e20:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004e22:	e02a      	b.n	8004e7a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	691a      	ldr	r2, [r3, #16]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	695b      	ldr	r3, [r3, #20]
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	69fa      	ldr	r2, [r7, #28]
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d902      	bls.n	8004e40 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	3303      	adds	r3, #3
 8004e44:	089b      	lsrs	r3, r3, #2
 8004e46:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	68d9      	ldr	r1, [r3, #12]
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	b2da      	uxtb	r2, r3
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004e58:	9300      	str	r3, [sp, #0]
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	6978      	ldr	r0, [r7, #20]
 8004e5e:	f004 fbcb 	bl	80095f8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	68da      	ldr	r2, [r3, #12]
 8004e66:	69fb      	ldr	r3, [r7, #28]
 8004e68:	441a      	add	r2, r3
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	695a      	ldr	r2, [r3, #20]
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	441a      	add	r2, r3
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	015a      	lsls	r2, r3, #5
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	4413      	add	r3, r2
 8004e82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e86:	699b      	ldr	r3, [r3, #24]
 8004e88:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004e8a:	69ba      	ldr	r2, [r7, #24]
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d809      	bhi.n	8004ea4 <PCD_WriteEmptyTxFifo+0xde>
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	695a      	ldr	r2, [r3, #20]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d203      	bcs.n	8004ea4 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	691b      	ldr	r3, [r3, #16]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d1bf      	bne.n	8004e24 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	691a      	ldr	r2, [r3, #16]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	695b      	ldr	r3, [r3, #20]
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d811      	bhi.n	8004ed4 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	f003 030f 	and.w	r3, r3, #15
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ebc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ec4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	43db      	mvns	r3, r3
 8004eca:	6939      	ldr	r1, [r7, #16]
 8004ecc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004ed4:	2300      	movs	r3, #0
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3720      	adds	r7, #32
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
	...

08004ee0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b088      	sub	sp, #32
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	333c      	adds	r3, #60	; 0x3c
 8004ef8:	3304      	adds	r3, #4
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	015a      	lsls	r2, r3, #5
 8004f02:	69bb      	ldr	r3, [r7, #24]
 8004f04:	4413      	add	r3, r2
 8004f06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	799b      	ldrb	r3, [r3, #6]
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d17b      	bne.n	800500e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	f003 0308 	and.w	r3, r3, #8
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d015      	beq.n	8004f4c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	4a61      	ldr	r2, [pc, #388]	; (80050a8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	f240 80b9 	bls.w	800509c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	f000 80b3 	beq.w	800509c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	015a      	lsls	r2, r3, #5
 8004f3a:	69bb      	ldr	r3, [r7, #24]
 8004f3c:	4413      	add	r3, r2
 8004f3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f42:	461a      	mov	r2, r3
 8004f44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f48:	6093      	str	r3, [r2, #8]
 8004f4a:	e0a7      	b.n	800509c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	f003 0320 	and.w	r3, r3, #32
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d009      	beq.n	8004f6a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	015a      	lsls	r2, r3, #5
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	4413      	add	r3, r2
 8004f5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f62:	461a      	mov	r2, r3
 8004f64:	2320      	movs	r3, #32
 8004f66:	6093      	str	r3, [r2, #8]
 8004f68:	e098      	b.n	800509c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	f040 8093 	bne.w	800509c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	4a4b      	ldr	r2, [pc, #300]	; (80050a8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d90f      	bls.n	8004f9e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d00a      	beq.n	8004f9e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	015a      	lsls	r2, r3, #5
 8004f8c:	69bb      	ldr	r3, [r7, #24]
 8004f8e:	4413      	add	r3, r2
 8004f90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f94:	461a      	mov	r2, r3
 8004f96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f9a:	6093      	str	r3, [r2, #8]
 8004f9c:	e07e      	b.n	800509c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004f9e:	683a      	ldr	r2, [r7, #0]
 8004fa0:	4613      	mov	r3, r2
 8004fa2:	00db      	lsls	r3, r3, #3
 8004fa4:	4413      	add	r3, r2
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	4413      	add	r3, r2
 8004fb0:	3304      	adds	r3, #4
 8004fb2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6a1a      	ldr	r2, [r3, #32]
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	0159      	lsls	r1, r3, #5
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	440b      	add	r3, r1
 8004fc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fca:	1ad2      	subs	r2, r2, r3
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d114      	bne.n	8005000 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d109      	bne.n	8004ff2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6818      	ldr	r0, [r3, #0]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004fe8:	461a      	mov	r2, r3
 8004fea:	2101      	movs	r1, #1
 8004fec:	f004 fd9a 	bl	8009b24 <USB_EP0_OutStart>
 8004ff0:	e006      	b.n	8005000 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	68da      	ldr	r2, [r3, #12]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	695b      	ldr	r3, [r3, #20]
 8004ffa:	441a      	add	r2, r3
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	b2db      	uxtb	r3, r3
 8005004:	4619      	mov	r1, r3
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f008 fe4a 	bl	800dca0 <HAL_PCD_DataOutStageCallback>
 800500c:	e046      	b.n	800509c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	4a26      	ldr	r2, [pc, #152]	; (80050ac <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d124      	bne.n	8005060 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800501c:	2b00      	cmp	r3, #0
 800501e:	d00a      	beq.n	8005036 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	015a      	lsls	r2, r3, #5
 8005024:	69bb      	ldr	r3, [r7, #24]
 8005026:	4413      	add	r3, r2
 8005028:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800502c:	461a      	mov	r2, r3
 800502e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005032:	6093      	str	r3, [r2, #8]
 8005034:	e032      	b.n	800509c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	f003 0320 	and.w	r3, r3, #32
 800503c:	2b00      	cmp	r3, #0
 800503e:	d008      	beq.n	8005052 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	015a      	lsls	r2, r3, #5
 8005044:	69bb      	ldr	r3, [r7, #24]
 8005046:	4413      	add	r3, r2
 8005048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800504c:	461a      	mov	r2, r3
 800504e:	2320      	movs	r3, #32
 8005050:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	b2db      	uxtb	r3, r3
 8005056:	4619      	mov	r1, r3
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f008 fe21 	bl	800dca0 <HAL_PCD_DataOutStageCallback>
 800505e:	e01d      	b.n	800509c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d114      	bne.n	8005090 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005066:	6879      	ldr	r1, [r7, #4]
 8005068:	683a      	ldr	r2, [r7, #0]
 800506a:	4613      	mov	r3, r2
 800506c:	00db      	lsls	r3, r3, #3
 800506e:	4413      	add	r3, r2
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	440b      	add	r3, r1
 8005074:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d108      	bne.n	8005090 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6818      	ldr	r0, [r3, #0]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8005088:	461a      	mov	r2, r3
 800508a:	2100      	movs	r1, #0
 800508c:	f004 fd4a 	bl	8009b24 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	b2db      	uxtb	r3, r3
 8005094:	4619      	mov	r1, r3
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f008 fe02 	bl	800dca0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3720      	adds	r7, #32
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	4f54300a 	.word	0x4f54300a
 80050ac:	4f54310a 	.word	0x4f54310a

080050b0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b086      	sub	sp, #24
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	333c      	adds	r3, #60	; 0x3c
 80050c8:	3304      	adds	r3, #4
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	015a      	lsls	r2, r3, #5
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	4413      	add	r3, r2
 80050d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	4a15      	ldr	r2, [pc, #84]	; (8005138 <PCD_EP_OutSetupPacket_int+0x88>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d90e      	bls.n	8005104 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d009      	beq.n	8005104 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	015a      	lsls	r2, r3, #5
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	4413      	add	r3, r2
 80050f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050fc:	461a      	mov	r2, r3
 80050fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005102:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f008 fdb9 	bl	800dc7c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	4a0a      	ldr	r2, [pc, #40]	; (8005138 <PCD_EP_OutSetupPacket_int+0x88>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d90c      	bls.n	800512c <PCD_EP_OutSetupPacket_int+0x7c>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	799b      	ldrb	r3, [r3, #6]
 8005116:	2b01      	cmp	r3, #1
 8005118:	d108      	bne.n	800512c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6818      	ldr	r0, [r3, #0]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8005124:	461a      	mov	r2, r3
 8005126:	2101      	movs	r1, #1
 8005128:	f004 fcfc 	bl	8009b24 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800512c:	2300      	movs	r3, #0
}
 800512e:	4618      	mov	r0, r3
 8005130:	3718      	adds	r7, #24
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
 8005136:	bf00      	nop
 8005138:	4f54300a 	.word	0x4f54300a

0800513c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800513c:	b480      	push	{r7}
 800513e:	b085      	sub	sp, #20
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	460b      	mov	r3, r1
 8005146:	70fb      	strb	r3, [r7, #3]
 8005148:	4613      	mov	r3, r2
 800514a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005152:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005154:	78fb      	ldrb	r3, [r7, #3]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d107      	bne.n	800516a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800515a:	883b      	ldrh	r3, [r7, #0]
 800515c:	0419      	lsls	r1, r3, #16
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	68ba      	ldr	r2, [r7, #8]
 8005164:	430a      	orrs	r2, r1
 8005166:	629a      	str	r2, [r3, #40]	; 0x28
 8005168:	e028      	b.n	80051bc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005170:	0c1b      	lsrs	r3, r3, #16
 8005172:	68ba      	ldr	r2, [r7, #8]
 8005174:	4413      	add	r3, r2
 8005176:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005178:	2300      	movs	r3, #0
 800517a:	73fb      	strb	r3, [r7, #15]
 800517c:	e00d      	b.n	800519a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	7bfb      	ldrb	r3, [r7, #15]
 8005184:	3340      	adds	r3, #64	; 0x40
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	4413      	add	r3, r2
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	0c1b      	lsrs	r3, r3, #16
 800518e:	68ba      	ldr	r2, [r7, #8]
 8005190:	4413      	add	r3, r2
 8005192:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005194:	7bfb      	ldrb	r3, [r7, #15]
 8005196:	3301      	adds	r3, #1
 8005198:	73fb      	strb	r3, [r7, #15]
 800519a:	7bfa      	ldrb	r2, [r7, #15]
 800519c:	78fb      	ldrb	r3, [r7, #3]
 800519e:	3b01      	subs	r3, #1
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d3ec      	bcc.n	800517e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80051a4:	883b      	ldrh	r3, [r7, #0]
 80051a6:	0418      	lsls	r0, r3, #16
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6819      	ldr	r1, [r3, #0]
 80051ac:	78fb      	ldrb	r3, [r7, #3]
 80051ae:	3b01      	subs	r3, #1
 80051b0:	68ba      	ldr	r2, [r7, #8]
 80051b2:	4302      	orrs	r2, r0
 80051b4:	3340      	adds	r3, #64	; 0x40
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	440b      	add	r3, r1
 80051ba:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80051bc:	2300      	movs	r3, #0
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3714      	adds	r7, #20
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr

080051ca <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80051ca:	b480      	push	{r7}
 80051cc:	b083      	sub	sp, #12
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
 80051d2:	460b      	mov	r3, r1
 80051d4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	887a      	ldrh	r2, [r7, #2]
 80051dc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80051de:	2300      	movs	r3, #0
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	370c      	adds	r7, #12
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b083      	sub	sp, #12
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	460b      	mov	r3, r1
 80051f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80051f8:	bf00      	nop
 80051fa:	370c      	adds	r7, #12
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr

08005204 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b086      	sub	sp, #24
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d101      	bne.n	8005216 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e267      	b.n	80056e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 0301 	and.w	r3, r3, #1
 800521e:	2b00      	cmp	r3, #0
 8005220:	d075      	beq.n	800530e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005222:	4b88      	ldr	r3, [pc, #544]	; (8005444 <HAL_RCC_OscConfig+0x240>)
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	f003 030c 	and.w	r3, r3, #12
 800522a:	2b04      	cmp	r3, #4
 800522c:	d00c      	beq.n	8005248 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800522e:	4b85      	ldr	r3, [pc, #532]	; (8005444 <HAL_RCC_OscConfig+0x240>)
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005236:	2b08      	cmp	r3, #8
 8005238:	d112      	bne.n	8005260 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800523a:	4b82      	ldr	r3, [pc, #520]	; (8005444 <HAL_RCC_OscConfig+0x240>)
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005242:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005246:	d10b      	bne.n	8005260 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005248:	4b7e      	ldr	r3, [pc, #504]	; (8005444 <HAL_RCC_OscConfig+0x240>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005250:	2b00      	cmp	r3, #0
 8005252:	d05b      	beq.n	800530c <HAL_RCC_OscConfig+0x108>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d157      	bne.n	800530c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e242      	b.n	80056e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005268:	d106      	bne.n	8005278 <HAL_RCC_OscConfig+0x74>
 800526a:	4b76      	ldr	r3, [pc, #472]	; (8005444 <HAL_RCC_OscConfig+0x240>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a75      	ldr	r2, [pc, #468]	; (8005444 <HAL_RCC_OscConfig+0x240>)
 8005270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005274:	6013      	str	r3, [r2, #0]
 8005276:	e01d      	b.n	80052b4 <HAL_RCC_OscConfig+0xb0>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005280:	d10c      	bne.n	800529c <HAL_RCC_OscConfig+0x98>
 8005282:	4b70      	ldr	r3, [pc, #448]	; (8005444 <HAL_RCC_OscConfig+0x240>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a6f      	ldr	r2, [pc, #444]	; (8005444 <HAL_RCC_OscConfig+0x240>)
 8005288:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800528c:	6013      	str	r3, [r2, #0]
 800528e:	4b6d      	ldr	r3, [pc, #436]	; (8005444 <HAL_RCC_OscConfig+0x240>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a6c      	ldr	r2, [pc, #432]	; (8005444 <HAL_RCC_OscConfig+0x240>)
 8005294:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005298:	6013      	str	r3, [r2, #0]
 800529a:	e00b      	b.n	80052b4 <HAL_RCC_OscConfig+0xb0>
 800529c:	4b69      	ldr	r3, [pc, #420]	; (8005444 <HAL_RCC_OscConfig+0x240>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a68      	ldr	r2, [pc, #416]	; (8005444 <HAL_RCC_OscConfig+0x240>)
 80052a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052a6:	6013      	str	r3, [r2, #0]
 80052a8:	4b66      	ldr	r3, [pc, #408]	; (8005444 <HAL_RCC_OscConfig+0x240>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a65      	ldr	r2, [pc, #404]	; (8005444 <HAL_RCC_OscConfig+0x240>)
 80052ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d013      	beq.n	80052e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052bc:	f7fc ffae 	bl	800221c <HAL_GetTick>
 80052c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052c2:	e008      	b.n	80052d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052c4:	f7fc ffaa 	bl	800221c <HAL_GetTick>
 80052c8:	4602      	mov	r2, r0
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	2b64      	cmp	r3, #100	; 0x64
 80052d0:	d901      	bls.n	80052d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80052d2:	2303      	movs	r3, #3
 80052d4:	e207      	b.n	80056e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052d6:	4b5b      	ldr	r3, [pc, #364]	; (8005444 <HAL_RCC_OscConfig+0x240>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d0f0      	beq.n	80052c4 <HAL_RCC_OscConfig+0xc0>
 80052e2:	e014      	b.n	800530e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052e4:	f7fc ff9a 	bl	800221c <HAL_GetTick>
 80052e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052ea:	e008      	b.n	80052fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052ec:	f7fc ff96 	bl	800221c <HAL_GetTick>
 80052f0:	4602      	mov	r2, r0
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	2b64      	cmp	r3, #100	; 0x64
 80052f8:	d901      	bls.n	80052fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e1f3      	b.n	80056e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052fe:	4b51      	ldr	r3, [pc, #324]	; (8005444 <HAL_RCC_OscConfig+0x240>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005306:	2b00      	cmp	r3, #0
 8005308:	d1f0      	bne.n	80052ec <HAL_RCC_OscConfig+0xe8>
 800530a:	e000      	b.n	800530e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800530c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 0302 	and.w	r3, r3, #2
 8005316:	2b00      	cmp	r3, #0
 8005318:	d063      	beq.n	80053e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800531a:	4b4a      	ldr	r3, [pc, #296]	; (8005444 <HAL_RCC_OscConfig+0x240>)
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	f003 030c 	and.w	r3, r3, #12
 8005322:	2b00      	cmp	r3, #0
 8005324:	d00b      	beq.n	800533e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005326:	4b47      	ldr	r3, [pc, #284]	; (8005444 <HAL_RCC_OscConfig+0x240>)
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800532e:	2b08      	cmp	r3, #8
 8005330:	d11c      	bne.n	800536c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005332:	4b44      	ldr	r3, [pc, #272]	; (8005444 <HAL_RCC_OscConfig+0x240>)
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800533a:	2b00      	cmp	r3, #0
 800533c:	d116      	bne.n	800536c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800533e:	4b41      	ldr	r3, [pc, #260]	; (8005444 <HAL_RCC_OscConfig+0x240>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 0302 	and.w	r3, r3, #2
 8005346:	2b00      	cmp	r3, #0
 8005348:	d005      	beq.n	8005356 <HAL_RCC_OscConfig+0x152>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	2b01      	cmp	r3, #1
 8005350:	d001      	beq.n	8005356 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e1c7      	b.n	80056e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005356:	4b3b      	ldr	r3, [pc, #236]	; (8005444 <HAL_RCC_OscConfig+0x240>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	00db      	lsls	r3, r3, #3
 8005364:	4937      	ldr	r1, [pc, #220]	; (8005444 <HAL_RCC_OscConfig+0x240>)
 8005366:	4313      	orrs	r3, r2
 8005368:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800536a:	e03a      	b.n	80053e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d020      	beq.n	80053b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005374:	4b34      	ldr	r3, [pc, #208]	; (8005448 <HAL_RCC_OscConfig+0x244>)
 8005376:	2201      	movs	r2, #1
 8005378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800537a:	f7fc ff4f 	bl	800221c <HAL_GetTick>
 800537e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005380:	e008      	b.n	8005394 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005382:	f7fc ff4b 	bl	800221c <HAL_GetTick>
 8005386:	4602      	mov	r2, r0
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	1ad3      	subs	r3, r2, r3
 800538c:	2b02      	cmp	r3, #2
 800538e:	d901      	bls.n	8005394 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005390:	2303      	movs	r3, #3
 8005392:	e1a8      	b.n	80056e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005394:	4b2b      	ldr	r3, [pc, #172]	; (8005444 <HAL_RCC_OscConfig+0x240>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0302 	and.w	r3, r3, #2
 800539c:	2b00      	cmp	r3, #0
 800539e:	d0f0      	beq.n	8005382 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053a0:	4b28      	ldr	r3, [pc, #160]	; (8005444 <HAL_RCC_OscConfig+0x240>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	691b      	ldr	r3, [r3, #16]
 80053ac:	00db      	lsls	r3, r3, #3
 80053ae:	4925      	ldr	r1, [pc, #148]	; (8005444 <HAL_RCC_OscConfig+0x240>)
 80053b0:	4313      	orrs	r3, r2
 80053b2:	600b      	str	r3, [r1, #0]
 80053b4:	e015      	b.n	80053e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053b6:	4b24      	ldr	r3, [pc, #144]	; (8005448 <HAL_RCC_OscConfig+0x244>)
 80053b8:	2200      	movs	r2, #0
 80053ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053bc:	f7fc ff2e 	bl	800221c <HAL_GetTick>
 80053c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053c2:	e008      	b.n	80053d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053c4:	f7fc ff2a 	bl	800221c <HAL_GetTick>
 80053c8:	4602      	mov	r2, r0
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	2b02      	cmp	r3, #2
 80053d0:	d901      	bls.n	80053d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e187      	b.n	80056e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053d6:	4b1b      	ldr	r3, [pc, #108]	; (8005444 <HAL_RCC_OscConfig+0x240>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 0302 	and.w	r3, r3, #2
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d1f0      	bne.n	80053c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 0308 	and.w	r3, r3, #8
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d036      	beq.n	800545c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	695b      	ldr	r3, [r3, #20]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d016      	beq.n	8005424 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053f6:	4b15      	ldr	r3, [pc, #84]	; (800544c <HAL_RCC_OscConfig+0x248>)
 80053f8:	2201      	movs	r2, #1
 80053fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053fc:	f7fc ff0e 	bl	800221c <HAL_GetTick>
 8005400:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005402:	e008      	b.n	8005416 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005404:	f7fc ff0a 	bl	800221c <HAL_GetTick>
 8005408:	4602      	mov	r2, r0
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	2b02      	cmp	r3, #2
 8005410:	d901      	bls.n	8005416 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	e167      	b.n	80056e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005416:	4b0b      	ldr	r3, [pc, #44]	; (8005444 <HAL_RCC_OscConfig+0x240>)
 8005418:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800541a:	f003 0302 	and.w	r3, r3, #2
 800541e:	2b00      	cmp	r3, #0
 8005420:	d0f0      	beq.n	8005404 <HAL_RCC_OscConfig+0x200>
 8005422:	e01b      	b.n	800545c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005424:	4b09      	ldr	r3, [pc, #36]	; (800544c <HAL_RCC_OscConfig+0x248>)
 8005426:	2200      	movs	r2, #0
 8005428:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800542a:	f7fc fef7 	bl	800221c <HAL_GetTick>
 800542e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005430:	e00e      	b.n	8005450 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005432:	f7fc fef3 	bl	800221c <HAL_GetTick>
 8005436:	4602      	mov	r2, r0
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	1ad3      	subs	r3, r2, r3
 800543c:	2b02      	cmp	r3, #2
 800543e:	d907      	bls.n	8005450 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005440:	2303      	movs	r3, #3
 8005442:	e150      	b.n	80056e6 <HAL_RCC_OscConfig+0x4e2>
 8005444:	40023800 	.word	0x40023800
 8005448:	42470000 	.word	0x42470000
 800544c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005450:	4b88      	ldr	r3, [pc, #544]	; (8005674 <HAL_RCC_OscConfig+0x470>)
 8005452:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005454:	f003 0302 	and.w	r3, r3, #2
 8005458:	2b00      	cmp	r3, #0
 800545a:	d1ea      	bne.n	8005432 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 0304 	and.w	r3, r3, #4
 8005464:	2b00      	cmp	r3, #0
 8005466:	f000 8097 	beq.w	8005598 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800546a:	2300      	movs	r3, #0
 800546c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800546e:	4b81      	ldr	r3, [pc, #516]	; (8005674 <HAL_RCC_OscConfig+0x470>)
 8005470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005476:	2b00      	cmp	r3, #0
 8005478:	d10f      	bne.n	800549a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800547a:	2300      	movs	r3, #0
 800547c:	60bb      	str	r3, [r7, #8]
 800547e:	4b7d      	ldr	r3, [pc, #500]	; (8005674 <HAL_RCC_OscConfig+0x470>)
 8005480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005482:	4a7c      	ldr	r2, [pc, #496]	; (8005674 <HAL_RCC_OscConfig+0x470>)
 8005484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005488:	6413      	str	r3, [r2, #64]	; 0x40
 800548a:	4b7a      	ldr	r3, [pc, #488]	; (8005674 <HAL_RCC_OscConfig+0x470>)
 800548c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005492:	60bb      	str	r3, [r7, #8]
 8005494:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005496:	2301      	movs	r3, #1
 8005498:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800549a:	4b77      	ldr	r3, [pc, #476]	; (8005678 <HAL_RCC_OscConfig+0x474>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d118      	bne.n	80054d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054a6:	4b74      	ldr	r3, [pc, #464]	; (8005678 <HAL_RCC_OscConfig+0x474>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a73      	ldr	r2, [pc, #460]	; (8005678 <HAL_RCC_OscConfig+0x474>)
 80054ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054b2:	f7fc feb3 	bl	800221c <HAL_GetTick>
 80054b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054b8:	e008      	b.n	80054cc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054ba:	f7fc feaf 	bl	800221c <HAL_GetTick>
 80054be:	4602      	mov	r2, r0
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	1ad3      	subs	r3, r2, r3
 80054c4:	2b02      	cmp	r3, #2
 80054c6:	d901      	bls.n	80054cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80054c8:	2303      	movs	r3, #3
 80054ca:	e10c      	b.n	80056e6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054cc:	4b6a      	ldr	r3, [pc, #424]	; (8005678 <HAL_RCC_OscConfig+0x474>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d0f0      	beq.n	80054ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d106      	bne.n	80054ee <HAL_RCC_OscConfig+0x2ea>
 80054e0:	4b64      	ldr	r3, [pc, #400]	; (8005674 <HAL_RCC_OscConfig+0x470>)
 80054e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054e4:	4a63      	ldr	r2, [pc, #396]	; (8005674 <HAL_RCC_OscConfig+0x470>)
 80054e6:	f043 0301 	orr.w	r3, r3, #1
 80054ea:	6713      	str	r3, [r2, #112]	; 0x70
 80054ec:	e01c      	b.n	8005528 <HAL_RCC_OscConfig+0x324>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	2b05      	cmp	r3, #5
 80054f4:	d10c      	bne.n	8005510 <HAL_RCC_OscConfig+0x30c>
 80054f6:	4b5f      	ldr	r3, [pc, #380]	; (8005674 <HAL_RCC_OscConfig+0x470>)
 80054f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054fa:	4a5e      	ldr	r2, [pc, #376]	; (8005674 <HAL_RCC_OscConfig+0x470>)
 80054fc:	f043 0304 	orr.w	r3, r3, #4
 8005500:	6713      	str	r3, [r2, #112]	; 0x70
 8005502:	4b5c      	ldr	r3, [pc, #368]	; (8005674 <HAL_RCC_OscConfig+0x470>)
 8005504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005506:	4a5b      	ldr	r2, [pc, #364]	; (8005674 <HAL_RCC_OscConfig+0x470>)
 8005508:	f043 0301 	orr.w	r3, r3, #1
 800550c:	6713      	str	r3, [r2, #112]	; 0x70
 800550e:	e00b      	b.n	8005528 <HAL_RCC_OscConfig+0x324>
 8005510:	4b58      	ldr	r3, [pc, #352]	; (8005674 <HAL_RCC_OscConfig+0x470>)
 8005512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005514:	4a57      	ldr	r2, [pc, #348]	; (8005674 <HAL_RCC_OscConfig+0x470>)
 8005516:	f023 0301 	bic.w	r3, r3, #1
 800551a:	6713      	str	r3, [r2, #112]	; 0x70
 800551c:	4b55      	ldr	r3, [pc, #340]	; (8005674 <HAL_RCC_OscConfig+0x470>)
 800551e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005520:	4a54      	ldr	r2, [pc, #336]	; (8005674 <HAL_RCC_OscConfig+0x470>)
 8005522:	f023 0304 	bic.w	r3, r3, #4
 8005526:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d015      	beq.n	800555c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005530:	f7fc fe74 	bl	800221c <HAL_GetTick>
 8005534:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005536:	e00a      	b.n	800554e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005538:	f7fc fe70 	bl	800221c <HAL_GetTick>
 800553c:	4602      	mov	r2, r0
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	f241 3288 	movw	r2, #5000	; 0x1388
 8005546:	4293      	cmp	r3, r2
 8005548:	d901      	bls.n	800554e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800554a:	2303      	movs	r3, #3
 800554c:	e0cb      	b.n	80056e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800554e:	4b49      	ldr	r3, [pc, #292]	; (8005674 <HAL_RCC_OscConfig+0x470>)
 8005550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005552:	f003 0302 	and.w	r3, r3, #2
 8005556:	2b00      	cmp	r3, #0
 8005558:	d0ee      	beq.n	8005538 <HAL_RCC_OscConfig+0x334>
 800555a:	e014      	b.n	8005586 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800555c:	f7fc fe5e 	bl	800221c <HAL_GetTick>
 8005560:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005562:	e00a      	b.n	800557a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005564:	f7fc fe5a 	bl	800221c <HAL_GetTick>
 8005568:	4602      	mov	r2, r0
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005572:	4293      	cmp	r3, r2
 8005574:	d901      	bls.n	800557a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005576:	2303      	movs	r3, #3
 8005578:	e0b5      	b.n	80056e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800557a:	4b3e      	ldr	r3, [pc, #248]	; (8005674 <HAL_RCC_OscConfig+0x470>)
 800557c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800557e:	f003 0302 	and.w	r3, r3, #2
 8005582:	2b00      	cmp	r3, #0
 8005584:	d1ee      	bne.n	8005564 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005586:	7dfb      	ldrb	r3, [r7, #23]
 8005588:	2b01      	cmp	r3, #1
 800558a:	d105      	bne.n	8005598 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800558c:	4b39      	ldr	r3, [pc, #228]	; (8005674 <HAL_RCC_OscConfig+0x470>)
 800558e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005590:	4a38      	ldr	r2, [pc, #224]	; (8005674 <HAL_RCC_OscConfig+0x470>)
 8005592:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005596:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	699b      	ldr	r3, [r3, #24]
 800559c:	2b00      	cmp	r3, #0
 800559e:	f000 80a1 	beq.w	80056e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80055a2:	4b34      	ldr	r3, [pc, #208]	; (8005674 <HAL_RCC_OscConfig+0x470>)
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	f003 030c 	and.w	r3, r3, #12
 80055aa:	2b08      	cmp	r3, #8
 80055ac:	d05c      	beq.n	8005668 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	699b      	ldr	r3, [r3, #24]
 80055b2:	2b02      	cmp	r3, #2
 80055b4:	d141      	bne.n	800563a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055b6:	4b31      	ldr	r3, [pc, #196]	; (800567c <HAL_RCC_OscConfig+0x478>)
 80055b8:	2200      	movs	r2, #0
 80055ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055bc:	f7fc fe2e 	bl	800221c <HAL_GetTick>
 80055c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055c2:	e008      	b.n	80055d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055c4:	f7fc fe2a 	bl	800221c <HAL_GetTick>
 80055c8:	4602      	mov	r2, r0
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	2b02      	cmp	r3, #2
 80055d0:	d901      	bls.n	80055d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e087      	b.n	80056e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055d6:	4b27      	ldr	r3, [pc, #156]	; (8005674 <HAL_RCC_OscConfig+0x470>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d1f0      	bne.n	80055c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	69da      	ldr	r2, [r3, #28]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a1b      	ldr	r3, [r3, #32]
 80055ea:	431a      	orrs	r2, r3
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f0:	019b      	lsls	r3, r3, #6
 80055f2:	431a      	orrs	r2, r3
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f8:	085b      	lsrs	r3, r3, #1
 80055fa:	3b01      	subs	r3, #1
 80055fc:	041b      	lsls	r3, r3, #16
 80055fe:	431a      	orrs	r2, r3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005604:	061b      	lsls	r3, r3, #24
 8005606:	491b      	ldr	r1, [pc, #108]	; (8005674 <HAL_RCC_OscConfig+0x470>)
 8005608:	4313      	orrs	r3, r2
 800560a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800560c:	4b1b      	ldr	r3, [pc, #108]	; (800567c <HAL_RCC_OscConfig+0x478>)
 800560e:	2201      	movs	r2, #1
 8005610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005612:	f7fc fe03 	bl	800221c <HAL_GetTick>
 8005616:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005618:	e008      	b.n	800562c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800561a:	f7fc fdff 	bl	800221c <HAL_GetTick>
 800561e:	4602      	mov	r2, r0
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	1ad3      	subs	r3, r2, r3
 8005624:	2b02      	cmp	r3, #2
 8005626:	d901      	bls.n	800562c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005628:	2303      	movs	r3, #3
 800562a:	e05c      	b.n	80056e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800562c:	4b11      	ldr	r3, [pc, #68]	; (8005674 <HAL_RCC_OscConfig+0x470>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005634:	2b00      	cmp	r3, #0
 8005636:	d0f0      	beq.n	800561a <HAL_RCC_OscConfig+0x416>
 8005638:	e054      	b.n	80056e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800563a:	4b10      	ldr	r3, [pc, #64]	; (800567c <HAL_RCC_OscConfig+0x478>)
 800563c:	2200      	movs	r2, #0
 800563e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005640:	f7fc fdec 	bl	800221c <HAL_GetTick>
 8005644:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005646:	e008      	b.n	800565a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005648:	f7fc fde8 	bl	800221c <HAL_GetTick>
 800564c:	4602      	mov	r2, r0
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	1ad3      	subs	r3, r2, r3
 8005652:	2b02      	cmp	r3, #2
 8005654:	d901      	bls.n	800565a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005656:	2303      	movs	r3, #3
 8005658:	e045      	b.n	80056e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800565a:	4b06      	ldr	r3, [pc, #24]	; (8005674 <HAL_RCC_OscConfig+0x470>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005662:	2b00      	cmp	r3, #0
 8005664:	d1f0      	bne.n	8005648 <HAL_RCC_OscConfig+0x444>
 8005666:	e03d      	b.n	80056e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	699b      	ldr	r3, [r3, #24]
 800566c:	2b01      	cmp	r3, #1
 800566e:	d107      	bne.n	8005680 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	e038      	b.n	80056e6 <HAL_RCC_OscConfig+0x4e2>
 8005674:	40023800 	.word	0x40023800
 8005678:	40007000 	.word	0x40007000
 800567c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005680:	4b1b      	ldr	r3, [pc, #108]	; (80056f0 <HAL_RCC_OscConfig+0x4ec>)
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	699b      	ldr	r3, [r3, #24]
 800568a:	2b01      	cmp	r3, #1
 800568c:	d028      	beq.n	80056e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005698:	429a      	cmp	r2, r3
 800569a:	d121      	bne.n	80056e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d11a      	bne.n	80056e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80056aa:	68fa      	ldr	r2, [r7, #12]
 80056ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80056b0:	4013      	ands	r3, r2
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80056b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d111      	bne.n	80056e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c6:	085b      	lsrs	r3, r3, #1
 80056c8:	3b01      	subs	r3, #1
 80056ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d107      	bne.n	80056e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80056dc:	429a      	cmp	r2, r3
 80056de:	d001      	beq.n	80056e4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	e000      	b.n	80056e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80056e4:	2300      	movs	r3, #0
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3718      	adds	r7, #24
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	bf00      	nop
 80056f0:	40023800 	.word	0x40023800

080056f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b084      	sub	sp, #16
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d101      	bne.n	8005708 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	e0cc      	b.n	80058a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005708:	4b68      	ldr	r3, [pc, #416]	; (80058ac <HAL_RCC_ClockConfig+0x1b8>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 030f 	and.w	r3, r3, #15
 8005710:	683a      	ldr	r2, [r7, #0]
 8005712:	429a      	cmp	r2, r3
 8005714:	d90c      	bls.n	8005730 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005716:	4b65      	ldr	r3, [pc, #404]	; (80058ac <HAL_RCC_ClockConfig+0x1b8>)
 8005718:	683a      	ldr	r2, [r7, #0]
 800571a:	b2d2      	uxtb	r2, r2
 800571c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800571e:	4b63      	ldr	r3, [pc, #396]	; (80058ac <HAL_RCC_ClockConfig+0x1b8>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 030f 	and.w	r3, r3, #15
 8005726:	683a      	ldr	r2, [r7, #0]
 8005728:	429a      	cmp	r2, r3
 800572a:	d001      	beq.n	8005730 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	e0b8      	b.n	80058a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f003 0302 	and.w	r3, r3, #2
 8005738:	2b00      	cmp	r3, #0
 800573a:	d020      	beq.n	800577e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 0304 	and.w	r3, r3, #4
 8005744:	2b00      	cmp	r3, #0
 8005746:	d005      	beq.n	8005754 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005748:	4b59      	ldr	r3, [pc, #356]	; (80058b0 <HAL_RCC_ClockConfig+0x1bc>)
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	4a58      	ldr	r2, [pc, #352]	; (80058b0 <HAL_RCC_ClockConfig+0x1bc>)
 800574e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005752:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f003 0308 	and.w	r3, r3, #8
 800575c:	2b00      	cmp	r3, #0
 800575e:	d005      	beq.n	800576c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005760:	4b53      	ldr	r3, [pc, #332]	; (80058b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	4a52      	ldr	r2, [pc, #328]	; (80058b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005766:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800576a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800576c:	4b50      	ldr	r3, [pc, #320]	; (80058b0 <HAL_RCC_ClockConfig+0x1bc>)
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	494d      	ldr	r1, [pc, #308]	; (80058b0 <HAL_RCC_ClockConfig+0x1bc>)
 800577a:	4313      	orrs	r3, r2
 800577c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 0301 	and.w	r3, r3, #1
 8005786:	2b00      	cmp	r3, #0
 8005788:	d044      	beq.n	8005814 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	2b01      	cmp	r3, #1
 8005790:	d107      	bne.n	80057a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005792:	4b47      	ldr	r3, [pc, #284]	; (80058b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800579a:	2b00      	cmp	r3, #0
 800579c:	d119      	bne.n	80057d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	e07f      	b.n	80058a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	2b02      	cmp	r3, #2
 80057a8:	d003      	beq.n	80057b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80057ae:	2b03      	cmp	r3, #3
 80057b0:	d107      	bne.n	80057c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057b2:	4b3f      	ldr	r3, [pc, #252]	; (80058b0 <HAL_RCC_ClockConfig+0x1bc>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d109      	bne.n	80057d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e06f      	b.n	80058a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057c2:	4b3b      	ldr	r3, [pc, #236]	; (80058b0 <HAL_RCC_ClockConfig+0x1bc>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 0302 	and.w	r3, r3, #2
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d101      	bne.n	80057d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	e067      	b.n	80058a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80057d2:	4b37      	ldr	r3, [pc, #220]	; (80058b0 <HAL_RCC_ClockConfig+0x1bc>)
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	f023 0203 	bic.w	r2, r3, #3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	4934      	ldr	r1, [pc, #208]	; (80058b0 <HAL_RCC_ClockConfig+0x1bc>)
 80057e0:	4313      	orrs	r3, r2
 80057e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80057e4:	f7fc fd1a 	bl	800221c <HAL_GetTick>
 80057e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057ea:	e00a      	b.n	8005802 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057ec:	f7fc fd16 	bl	800221c <HAL_GetTick>
 80057f0:	4602      	mov	r2, r0
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d901      	bls.n	8005802 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	e04f      	b.n	80058a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005802:	4b2b      	ldr	r3, [pc, #172]	; (80058b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	f003 020c 	and.w	r2, r3, #12
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	429a      	cmp	r2, r3
 8005812:	d1eb      	bne.n	80057ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005814:	4b25      	ldr	r3, [pc, #148]	; (80058ac <HAL_RCC_ClockConfig+0x1b8>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 030f 	and.w	r3, r3, #15
 800581c:	683a      	ldr	r2, [r7, #0]
 800581e:	429a      	cmp	r2, r3
 8005820:	d20c      	bcs.n	800583c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005822:	4b22      	ldr	r3, [pc, #136]	; (80058ac <HAL_RCC_ClockConfig+0x1b8>)
 8005824:	683a      	ldr	r2, [r7, #0]
 8005826:	b2d2      	uxtb	r2, r2
 8005828:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800582a:	4b20      	ldr	r3, [pc, #128]	; (80058ac <HAL_RCC_ClockConfig+0x1b8>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 030f 	and.w	r3, r3, #15
 8005832:	683a      	ldr	r2, [r7, #0]
 8005834:	429a      	cmp	r2, r3
 8005836:	d001      	beq.n	800583c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	e032      	b.n	80058a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 0304 	and.w	r3, r3, #4
 8005844:	2b00      	cmp	r3, #0
 8005846:	d008      	beq.n	800585a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005848:	4b19      	ldr	r3, [pc, #100]	; (80058b0 <HAL_RCC_ClockConfig+0x1bc>)
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	68db      	ldr	r3, [r3, #12]
 8005854:	4916      	ldr	r1, [pc, #88]	; (80058b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005856:	4313      	orrs	r3, r2
 8005858:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f003 0308 	and.w	r3, r3, #8
 8005862:	2b00      	cmp	r3, #0
 8005864:	d009      	beq.n	800587a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005866:	4b12      	ldr	r3, [pc, #72]	; (80058b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	00db      	lsls	r3, r3, #3
 8005874:	490e      	ldr	r1, [pc, #56]	; (80058b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005876:	4313      	orrs	r3, r2
 8005878:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800587a:	f000 f821 	bl	80058c0 <HAL_RCC_GetSysClockFreq>
 800587e:	4602      	mov	r2, r0
 8005880:	4b0b      	ldr	r3, [pc, #44]	; (80058b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	091b      	lsrs	r3, r3, #4
 8005886:	f003 030f 	and.w	r3, r3, #15
 800588a:	490a      	ldr	r1, [pc, #40]	; (80058b4 <HAL_RCC_ClockConfig+0x1c0>)
 800588c:	5ccb      	ldrb	r3, [r1, r3]
 800588e:	fa22 f303 	lsr.w	r3, r2, r3
 8005892:	4a09      	ldr	r2, [pc, #36]	; (80058b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005894:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005896:	4b09      	ldr	r3, [pc, #36]	; (80058bc <HAL_RCC_ClockConfig+0x1c8>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4618      	mov	r0, r3
 800589c:	f7fb ff8c 	bl	80017b8 <HAL_InitTick>

  return HAL_OK;
 80058a0:	2300      	movs	r3, #0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3710      	adds	r7, #16
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
 80058aa:	bf00      	nop
 80058ac:	40023c00 	.word	0x40023c00
 80058b0:	40023800 	.word	0x40023800
 80058b4:	08015dec 	.word	0x08015dec
 80058b8:	20000000 	.word	0x20000000
 80058bc:	20000004 	.word	0x20000004

080058c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058c4:	b090      	sub	sp, #64	; 0x40
 80058c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80058c8:	2300      	movs	r3, #0
 80058ca:	637b      	str	r3, [r7, #52]	; 0x34
 80058cc:	2300      	movs	r3, #0
 80058ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058d0:	2300      	movs	r3, #0
 80058d2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80058d4:	2300      	movs	r3, #0
 80058d6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80058d8:	4b59      	ldr	r3, [pc, #356]	; (8005a40 <HAL_RCC_GetSysClockFreq+0x180>)
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	f003 030c 	and.w	r3, r3, #12
 80058e0:	2b08      	cmp	r3, #8
 80058e2:	d00d      	beq.n	8005900 <HAL_RCC_GetSysClockFreq+0x40>
 80058e4:	2b08      	cmp	r3, #8
 80058e6:	f200 80a1 	bhi.w	8005a2c <HAL_RCC_GetSysClockFreq+0x16c>
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d002      	beq.n	80058f4 <HAL_RCC_GetSysClockFreq+0x34>
 80058ee:	2b04      	cmp	r3, #4
 80058f0:	d003      	beq.n	80058fa <HAL_RCC_GetSysClockFreq+0x3a>
 80058f2:	e09b      	b.n	8005a2c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80058f4:	4b53      	ldr	r3, [pc, #332]	; (8005a44 <HAL_RCC_GetSysClockFreq+0x184>)
 80058f6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80058f8:	e09b      	b.n	8005a32 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80058fa:	4b53      	ldr	r3, [pc, #332]	; (8005a48 <HAL_RCC_GetSysClockFreq+0x188>)
 80058fc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80058fe:	e098      	b.n	8005a32 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005900:	4b4f      	ldr	r3, [pc, #316]	; (8005a40 <HAL_RCC_GetSysClockFreq+0x180>)
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005908:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800590a:	4b4d      	ldr	r3, [pc, #308]	; (8005a40 <HAL_RCC_GetSysClockFreq+0x180>)
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005912:	2b00      	cmp	r3, #0
 8005914:	d028      	beq.n	8005968 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005916:	4b4a      	ldr	r3, [pc, #296]	; (8005a40 <HAL_RCC_GetSysClockFreq+0x180>)
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	099b      	lsrs	r3, r3, #6
 800591c:	2200      	movs	r2, #0
 800591e:	623b      	str	r3, [r7, #32]
 8005920:	627a      	str	r2, [r7, #36]	; 0x24
 8005922:	6a3b      	ldr	r3, [r7, #32]
 8005924:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005928:	2100      	movs	r1, #0
 800592a:	4b47      	ldr	r3, [pc, #284]	; (8005a48 <HAL_RCC_GetSysClockFreq+0x188>)
 800592c:	fb03 f201 	mul.w	r2, r3, r1
 8005930:	2300      	movs	r3, #0
 8005932:	fb00 f303 	mul.w	r3, r0, r3
 8005936:	4413      	add	r3, r2
 8005938:	4a43      	ldr	r2, [pc, #268]	; (8005a48 <HAL_RCC_GetSysClockFreq+0x188>)
 800593a:	fba0 1202 	umull	r1, r2, r0, r2
 800593e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005940:	460a      	mov	r2, r1
 8005942:	62ba      	str	r2, [r7, #40]	; 0x28
 8005944:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005946:	4413      	add	r3, r2
 8005948:	62fb      	str	r3, [r7, #44]	; 0x2c
 800594a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800594c:	2200      	movs	r2, #0
 800594e:	61bb      	str	r3, [r7, #24]
 8005950:	61fa      	str	r2, [r7, #28]
 8005952:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005956:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800595a:	f7fb f91f 	bl	8000b9c <__aeabi_uldivmod>
 800595e:	4602      	mov	r2, r0
 8005960:	460b      	mov	r3, r1
 8005962:	4613      	mov	r3, r2
 8005964:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005966:	e053      	b.n	8005a10 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005968:	4b35      	ldr	r3, [pc, #212]	; (8005a40 <HAL_RCC_GetSysClockFreq+0x180>)
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	099b      	lsrs	r3, r3, #6
 800596e:	2200      	movs	r2, #0
 8005970:	613b      	str	r3, [r7, #16]
 8005972:	617a      	str	r2, [r7, #20]
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800597a:	f04f 0b00 	mov.w	fp, #0
 800597e:	4652      	mov	r2, sl
 8005980:	465b      	mov	r3, fp
 8005982:	f04f 0000 	mov.w	r0, #0
 8005986:	f04f 0100 	mov.w	r1, #0
 800598a:	0159      	lsls	r1, r3, #5
 800598c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005990:	0150      	lsls	r0, r2, #5
 8005992:	4602      	mov	r2, r0
 8005994:	460b      	mov	r3, r1
 8005996:	ebb2 080a 	subs.w	r8, r2, sl
 800599a:	eb63 090b 	sbc.w	r9, r3, fp
 800599e:	f04f 0200 	mov.w	r2, #0
 80059a2:	f04f 0300 	mov.w	r3, #0
 80059a6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80059aa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80059ae:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80059b2:	ebb2 0408 	subs.w	r4, r2, r8
 80059b6:	eb63 0509 	sbc.w	r5, r3, r9
 80059ba:	f04f 0200 	mov.w	r2, #0
 80059be:	f04f 0300 	mov.w	r3, #0
 80059c2:	00eb      	lsls	r3, r5, #3
 80059c4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80059c8:	00e2      	lsls	r2, r4, #3
 80059ca:	4614      	mov	r4, r2
 80059cc:	461d      	mov	r5, r3
 80059ce:	eb14 030a 	adds.w	r3, r4, sl
 80059d2:	603b      	str	r3, [r7, #0]
 80059d4:	eb45 030b 	adc.w	r3, r5, fp
 80059d8:	607b      	str	r3, [r7, #4]
 80059da:	f04f 0200 	mov.w	r2, #0
 80059de:	f04f 0300 	mov.w	r3, #0
 80059e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80059e6:	4629      	mov	r1, r5
 80059e8:	028b      	lsls	r3, r1, #10
 80059ea:	4621      	mov	r1, r4
 80059ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80059f0:	4621      	mov	r1, r4
 80059f2:	028a      	lsls	r2, r1, #10
 80059f4:	4610      	mov	r0, r2
 80059f6:	4619      	mov	r1, r3
 80059f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059fa:	2200      	movs	r2, #0
 80059fc:	60bb      	str	r3, [r7, #8]
 80059fe:	60fa      	str	r2, [r7, #12]
 8005a00:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a04:	f7fb f8ca 	bl	8000b9c <__aeabi_uldivmod>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	460b      	mov	r3, r1
 8005a0c:	4613      	mov	r3, r2
 8005a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005a10:	4b0b      	ldr	r3, [pc, #44]	; (8005a40 <HAL_RCC_GetSysClockFreq+0x180>)
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	0c1b      	lsrs	r3, r3, #16
 8005a16:	f003 0303 	and.w	r3, r3, #3
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	005b      	lsls	r3, r3, #1
 8005a1e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005a20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a28:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005a2a:	e002      	b.n	8005a32 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005a2c:	4b05      	ldr	r3, [pc, #20]	; (8005a44 <HAL_RCC_GetSysClockFreq+0x184>)
 8005a2e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005a30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3740      	adds	r7, #64	; 0x40
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a3e:	bf00      	nop
 8005a40:	40023800 	.word	0x40023800
 8005a44:	00f42400 	.word	0x00f42400
 8005a48:	00b71b00 	.word	0x00b71b00

08005a4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a50:	4b03      	ldr	r3, [pc, #12]	; (8005a60 <HAL_RCC_GetHCLKFreq+0x14>)
 8005a52:	681b      	ldr	r3, [r3, #0]
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr
 8005a5e:	bf00      	nop
 8005a60:	20000000 	.word	0x20000000

08005a64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005a68:	f7ff fff0 	bl	8005a4c <HAL_RCC_GetHCLKFreq>
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	4b05      	ldr	r3, [pc, #20]	; (8005a84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	0a9b      	lsrs	r3, r3, #10
 8005a74:	f003 0307 	and.w	r3, r3, #7
 8005a78:	4903      	ldr	r1, [pc, #12]	; (8005a88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a7a:	5ccb      	ldrb	r3, [r1, r3]
 8005a7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	bd80      	pop	{r7, pc}
 8005a84:	40023800 	.word	0x40023800
 8005a88:	08015dfc 	.word	0x08015dfc

08005a8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005a90:	f7ff ffdc 	bl	8005a4c <HAL_RCC_GetHCLKFreq>
 8005a94:	4602      	mov	r2, r0
 8005a96:	4b05      	ldr	r3, [pc, #20]	; (8005aac <HAL_RCC_GetPCLK2Freq+0x20>)
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	0b5b      	lsrs	r3, r3, #13
 8005a9c:	f003 0307 	and.w	r3, r3, #7
 8005aa0:	4903      	ldr	r1, [pc, #12]	; (8005ab0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005aa2:	5ccb      	ldrb	r3, [r1, r3]
 8005aa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	bd80      	pop	{r7, pc}
 8005aac:	40023800 	.word	0x40023800
 8005ab0:	08015dfc 	.word	0x08015dfc

08005ab4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b083      	sub	sp, #12
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	220f      	movs	r2, #15
 8005ac2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005ac4:	4b12      	ldr	r3, [pc, #72]	; (8005b10 <HAL_RCC_GetClockConfig+0x5c>)
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	f003 0203 	and.w	r2, r3, #3
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005ad0:	4b0f      	ldr	r3, [pc, #60]	; (8005b10 <HAL_RCC_GetClockConfig+0x5c>)
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005adc:	4b0c      	ldr	r3, [pc, #48]	; (8005b10 <HAL_RCC_GetClockConfig+0x5c>)
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005ae8:	4b09      	ldr	r3, [pc, #36]	; (8005b10 <HAL_RCC_GetClockConfig+0x5c>)
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	08db      	lsrs	r3, r3, #3
 8005aee:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005af6:	4b07      	ldr	r3, [pc, #28]	; (8005b14 <HAL_RCC_GetClockConfig+0x60>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f003 020f 	and.w	r2, r3, #15
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	601a      	str	r2, [r3, #0]
}
 8005b02:	bf00      	nop
 8005b04:	370c      	adds	r7, #12
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr
 8005b0e:	bf00      	nop
 8005b10:	40023800 	.word	0x40023800
 8005b14:	40023c00 	.word	0x40023c00

08005b18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b082      	sub	sp, #8
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d101      	bne.n	8005b2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e07b      	b.n	8005c22 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d108      	bne.n	8005b44 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b3a:	d009      	beq.n	8005b50 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	61da      	str	r2, [r3, #28]
 8005b42:	e005      	b.n	8005b50 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2200      	movs	r2, #0
 8005b48:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d106      	bne.n	8005b70 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f7fb fdb0 	bl	80016d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2202      	movs	r2, #2
 8005b74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b86:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005b98:	431a      	orrs	r2, r3
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ba2:	431a      	orrs	r2, r3
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	691b      	ldr	r3, [r3, #16]
 8005ba8:	f003 0302 	and.w	r3, r3, #2
 8005bac:	431a      	orrs	r2, r3
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	695b      	ldr	r3, [r3, #20]
 8005bb2:	f003 0301 	and.w	r3, r3, #1
 8005bb6:	431a      	orrs	r2, r3
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	699b      	ldr	r3, [r3, #24]
 8005bbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005bc0:	431a      	orrs	r2, r3
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	69db      	ldr	r3, [r3, #28]
 8005bc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005bca:	431a      	orrs	r2, r3
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6a1b      	ldr	r3, [r3, #32]
 8005bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bd4:	ea42 0103 	orr.w	r1, r2, r3
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bdc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	430a      	orrs	r2, r1
 8005be6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	699b      	ldr	r3, [r3, #24]
 8005bec:	0c1b      	lsrs	r3, r3, #16
 8005bee:	f003 0104 	and.w	r1, r3, #4
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf6:	f003 0210 	and.w	r2, r3, #16
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	430a      	orrs	r2, r1
 8005c00:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	69da      	ldr	r2, [r3, #28]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c10:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005c20:	2300      	movs	r3, #0
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3708      	adds	r7, #8
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}

08005c2a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005c2a:	b580      	push	{r7, lr}
 8005c2c:	b08c      	sub	sp, #48	; 0x30
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	60f8      	str	r0, [r7, #12]
 8005c32:	60b9      	str	r1, [r7, #8]
 8005c34:	607a      	str	r2, [r7, #4]
 8005c36:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d101      	bne.n	8005c50 <HAL_SPI_TransmitReceive+0x26>
 8005c4c:	2302      	movs	r3, #2
 8005c4e:	e198      	b.n	8005f82 <HAL_SPI_TransmitReceive+0x358>
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2201      	movs	r2, #1
 8005c54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c58:	f7fc fae0 	bl	800221c <HAL_GetTick>
 8005c5c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005c6e:	887b      	ldrh	r3, [r7, #2]
 8005c70:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005c72:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d00f      	beq.n	8005c9a <HAL_SPI_TransmitReceive+0x70>
 8005c7a:	69fb      	ldr	r3, [r7, #28]
 8005c7c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c80:	d107      	bne.n	8005c92 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d103      	bne.n	8005c92 <HAL_SPI_TransmitReceive+0x68>
 8005c8a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005c8e:	2b04      	cmp	r3, #4
 8005c90:	d003      	beq.n	8005c9a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005c92:	2302      	movs	r3, #2
 8005c94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005c98:	e16d      	b.n	8005f76 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d005      	beq.n	8005cac <HAL_SPI_TransmitReceive+0x82>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d002      	beq.n	8005cac <HAL_SPI_TransmitReceive+0x82>
 8005ca6:	887b      	ldrh	r3, [r7, #2]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d103      	bne.n	8005cb4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005cb2:	e160      	b.n	8005f76 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	2b04      	cmp	r3, #4
 8005cbe:	d003      	beq.n	8005cc8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2205      	movs	r2, #5
 8005cc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	887a      	ldrh	r2, [r7, #2]
 8005cd8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	887a      	ldrh	r2, [r7, #2]
 8005cde:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	68ba      	ldr	r2, [r7, #8]
 8005ce4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	887a      	ldrh	r2, [r7, #2]
 8005cea:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	887a      	ldrh	r2, [r7, #2]
 8005cf0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d08:	2b40      	cmp	r3, #64	; 0x40
 8005d0a:	d007      	beq.n	8005d1c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d1a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d24:	d17c      	bne.n	8005e20 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d002      	beq.n	8005d34 <HAL_SPI_TransmitReceive+0x10a>
 8005d2e:	8b7b      	ldrh	r3, [r7, #26]
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d16a      	bne.n	8005e0a <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d38:	881a      	ldrh	r2, [r3, #0]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d44:	1c9a      	adds	r2, r3, #2
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	3b01      	subs	r3, #1
 8005d52:	b29a      	uxth	r2, r3
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d58:	e057      	b.n	8005e0a <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	f003 0302 	and.w	r3, r3, #2
 8005d64:	2b02      	cmp	r3, #2
 8005d66:	d11b      	bne.n	8005da0 <HAL_SPI_TransmitReceive+0x176>
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d016      	beq.n	8005da0 <HAL_SPI_TransmitReceive+0x176>
 8005d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d113      	bne.n	8005da0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d7c:	881a      	ldrh	r2, [r3, #0]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d88:	1c9a      	adds	r2, r3, #2
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	3b01      	subs	r3, #1
 8005d96:	b29a      	uxth	r2, r3
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	f003 0301 	and.w	r3, r3, #1
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d119      	bne.n	8005de2 <HAL_SPI_TransmitReceive+0x1b8>
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d014      	beq.n	8005de2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	68da      	ldr	r2, [r3, #12]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc2:	b292      	uxth	r2, r2
 8005dc4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dca:	1c9a      	adds	r2, r3, #2
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	3b01      	subs	r3, #1
 8005dd8:	b29a      	uxth	r2, r3
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005dde:	2301      	movs	r3, #1
 8005de0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005de2:	f7fc fa1b 	bl	800221c <HAL_GetTick>
 8005de6:	4602      	mov	r2, r0
 8005de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dea:	1ad3      	subs	r3, r2, r3
 8005dec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d80b      	bhi.n	8005e0a <HAL_SPI_TransmitReceive+0x1e0>
 8005df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005df4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005df8:	d007      	beq.n	8005e0a <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8005dfa:	2303      	movs	r3, #3
 8005dfc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8005e08:	e0b5      	b.n	8005f76 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d1a2      	bne.n	8005d5a <HAL_SPI_TransmitReceive+0x130>
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d19d      	bne.n	8005d5a <HAL_SPI_TransmitReceive+0x130>
 8005e1e:	e080      	b.n	8005f22 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d002      	beq.n	8005e2e <HAL_SPI_TransmitReceive+0x204>
 8005e28:	8b7b      	ldrh	r3, [r7, #26]
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d16f      	bne.n	8005f0e <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	330c      	adds	r3, #12
 8005e38:	7812      	ldrb	r2, [r2, #0]
 8005e3a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e40:	1c5a      	adds	r2, r3, #1
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	3b01      	subs	r3, #1
 8005e4e:	b29a      	uxth	r2, r3
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e54:	e05b      	b.n	8005f0e <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	f003 0302 	and.w	r3, r3, #2
 8005e60:	2b02      	cmp	r3, #2
 8005e62:	d11c      	bne.n	8005e9e <HAL_SPI_TransmitReceive+0x274>
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d017      	beq.n	8005e9e <HAL_SPI_TransmitReceive+0x274>
 8005e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d114      	bne.n	8005e9e <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	330c      	adds	r3, #12
 8005e7e:	7812      	ldrb	r2, [r2, #0]
 8005e80:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e86:	1c5a      	adds	r2, r3, #1
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	3b01      	subs	r3, #1
 8005e94:	b29a      	uxth	r2, r3
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	f003 0301 	and.w	r3, r3, #1
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d119      	bne.n	8005ee0 <HAL_SPI_TransmitReceive+0x2b6>
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d014      	beq.n	8005ee0 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	68da      	ldr	r2, [r3, #12]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec0:	b2d2      	uxtb	r2, r2
 8005ec2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec8:	1c5a      	adds	r2, r3, #1
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	3b01      	subs	r3, #1
 8005ed6:	b29a      	uxth	r2, r3
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005edc:	2301      	movs	r3, #1
 8005ede:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005ee0:	f7fc f99c 	bl	800221c <HAL_GetTick>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee8:	1ad3      	subs	r3, r2, r3
 8005eea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d803      	bhi.n	8005ef8 <HAL_SPI_TransmitReceive+0x2ce>
 8005ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ef2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ef6:	d102      	bne.n	8005efe <HAL_SPI_TransmitReceive+0x2d4>
 8005ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d107      	bne.n	8005f0e <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8005efe:	2303      	movs	r3, #3
 8005f00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8005f0c:	e033      	b.n	8005f76 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d19e      	bne.n	8005e56 <HAL_SPI_TransmitReceive+0x22c>
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d199      	bne.n	8005e56 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f24:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005f26:	68f8      	ldr	r0, [r7, #12]
 8005f28:	f000 f8b8 	bl	800609c <SPI_EndRxTxTransaction>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d006      	beq.n	8005f40 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2220      	movs	r2, #32
 8005f3c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005f3e:	e01a      	b.n	8005f76 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d10a      	bne.n	8005f5e <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f48:	2300      	movs	r3, #0
 8005f4a:	617b      	str	r3, [r7, #20]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	68db      	ldr	r3, [r3, #12]
 8005f52:	617b      	str	r3, [r7, #20]
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	617b      	str	r3, [r7, #20]
 8005f5c:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d003      	beq.n	8005f6e <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f6c:	e003      	b.n	8005f76 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2201      	movs	r2, #1
 8005f72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005f7e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3730      	adds	r7, #48	; 0x30
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}
	...

08005f8c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b088      	sub	sp, #32
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	603b      	str	r3, [r7, #0]
 8005f98:	4613      	mov	r3, r2
 8005f9a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005f9c:	f7fc f93e 	bl	800221c <HAL_GetTick>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa4:	1a9b      	subs	r3, r3, r2
 8005fa6:	683a      	ldr	r2, [r7, #0]
 8005fa8:	4413      	add	r3, r2
 8005faa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005fac:	f7fc f936 	bl	800221c <HAL_GetTick>
 8005fb0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005fb2:	4b39      	ldr	r3, [pc, #228]	; (8006098 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	015b      	lsls	r3, r3, #5
 8005fb8:	0d1b      	lsrs	r3, r3, #20
 8005fba:	69fa      	ldr	r2, [r7, #28]
 8005fbc:	fb02 f303 	mul.w	r3, r2, r3
 8005fc0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005fc2:	e054      	b.n	800606e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fca:	d050      	beq.n	800606e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005fcc:	f7fc f926 	bl	800221c <HAL_GetTick>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	69bb      	ldr	r3, [r7, #24]
 8005fd4:	1ad3      	subs	r3, r2, r3
 8005fd6:	69fa      	ldr	r2, [r7, #28]
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d902      	bls.n	8005fe2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005fdc:	69fb      	ldr	r3, [r7, #28]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d13d      	bne.n	800605e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	685a      	ldr	r2, [r3, #4]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005ff0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ffa:	d111      	bne.n	8006020 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006004:	d004      	beq.n	8006010 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800600e:	d107      	bne.n	8006020 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800601e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006024:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006028:	d10f      	bne.n	800604a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006038:	601a      	str	r2, [r3, #0]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006048:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2201      	movs	r2, #1
 800604e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2200      	movs	r2, #0
 8006056:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800605a:	2303      	movs	r3, #3
 800605c:	e017      	b.n	800608e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d101      	bne.n	8006068 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006064:	2300      	movs	r3, #0
 8006066:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	3b01      	subs	r3, #1
 800606c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	689a      	ldr	r2, [r3, #8]
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	4013      	ands	r3, r2
 8006078:	68ba      	ldr	r2, [r7, #8]
 800607a:	429a      	cmp	r2, r3
 800607c:	bf0c      	ite	eq
 800607e:	2301      	moveq	r3, #1
 8006080:	2300      	movne	r3, #0
 8006082:	b2db      	uxtb	r3, r3
 8006084:	461a      	mov	r2, r3
 8006086:	79fb      	ldrb	r3, [r7, #7]
 8006088:	429a      	cmp	r2, r3
 800608a:	d19b      	bne.n	8005fc4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800608c:	2300      	movs	r3, #0
}
 800608e:	4618      	mov	r0, r3
 8006090:	3720      	adds	r7, #32
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
 8006096:	bf00      	nop
 8006098:	20000000 	.word	0x20000000

0800609c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b088      	sub	sp, #32
 80060a0:	af02      	add	r7, sp, #8
 80060a2:	60f8      	str	r0, [r7, #12]
 80060a4:	60b9      	str	r1, [r7, #8]
 80060a6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	9300      	str	r3, [sp, #0]
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	2201      	movs	r2, #1
 80060b0:	2102      	movs	r1, #2
 80060b2:	68f8      	ldr	r0, [r7, #12]
 80060b4:	f7ff ff6a 	bl	8005f8c <SPI_WaitFlagStateUntilTimeout>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d007      	beq.n	80060ce <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060c2:	f043 0220 	orr.w	r2, r3, #32
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80060ca:	2303      	movs	r3, #3
 80060cc:	e032      	b.n	8006134 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80060ce:	4b1b      	ldr	r3, [pc, #108]	; (800613c <SPI_EndRxTxTransaction+0xa0>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a1b      	ldr	r2, [pc, #108]	; (8006140 <SPI_EndRxTxTransaction+0xa4>)
 80060d4:	fba2 2303 	umull	r2, r3, r2, r3
 80060d8:	0d5b      	lsrs	r3, r3, #21
 80060da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80060de:	fb02 f303 	mul.w	r3, r2, r3
 80060e2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060ec:	d112      	bne.n	8006114 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	9300      	str	r3, [sp, #0]
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	2200      	movs	r2, #0
 80060f6:	2180      	movs	r1, #128	; 0x80
 80060f8:	68f8      	ldr	r0, [r7, #12]
 80060fa:	f7ff ff47 	bl	8005f8c <SPI_WaitFlagStateUntilTimeout>
 80060fe:	4603      	mov	r3, r0
 8006100:	2b00      	cmp	r3, #0
 8006102:	d016      	beq.n	8006132 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006108:	f043 0220 	orr.w	r2, r3, #32
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006110:	2303      	movs	r3, #3
 8006112:	e00f      	b.n	8006134 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d00a      	beq.n	8006130 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	3b01      	subs	r3, #1
 800611e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	689b      	ldr	r3, [r3, #8]
 8006126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800612a:	2b80      	cmp	r3, #128	; 0x80
 800612c:	d0f2      	beq.n	8006114 <SPI_EndRxTxTransaction+0x78>
 800612e:	e000      	b.n	8006132 <SPI_EndRxTxTransaction+0x96>
        break;
 8006130:	bf00      	nop
  }

  return HAL_OK;
 8006132:	2300      	movs	r3, #0
}
 8006134:	4618      	mov	r0, r3
 8006136:	3718      	adds	r7, #24
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}
 800613c:	20000000 	.word	0x20000000
 8006140:	165e9f81 	.word	0x165e9f81

08006144 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b082      	sub	sp, #8
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d101      	bne.n	8006156 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	e041      	b.n	80061da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800615c:	b2db      	uxtb	r3, r3
 800615e:	2b00      	cmp	r3, #0
 8006160:	d106      	bne.n	8006170 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f7fb fde2 	bl	8001d34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2202      	movs	r2, #2
 8006174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	3304      	adds	r3, #4
 8006180:	4619      	mov	r1, r3
 8006182:	4610      	mov	r0, r2
 8006184:	f000 fc58 	bl	8006a38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2201      	movs	r2, #1
 80061cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2201      	movs	r2, #1
 80061d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061d8:	2300      	movs	r3, #0
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3708      	adds	r7, #8
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
	...

080061e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b085      	sub	sp, #20
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061f2:	b2db      	uxtb	r3, r3
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	d001      	beq.n	80061fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80061f8:	2301      	movs	r3, #1
 80061fa:	e04e      	b.n	800629a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2202      	movs	r2, #2
 8006200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	68da      	ldr	r2, [r3, #12]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f042 0201 	orr.w	r2, r2, #1
 8006212:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a23      	ldr	r2, [pc, #140]	; (80062a8 <HAL_TIM_Base_Start_IT+0xc4>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d022      	beq.n	8006264 <HAL_TIM_Base_Start_IT+0x80>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006226:	d01d      	beq.n	8006264 <HAL_TIM_Base_Start_IT+0x80>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a1f      	ldr	r2, [pc, #124]	; (80062ac <HAL_TIM_Base_Start_IT+0xc8>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d018      	beq.n	8006264 <HAL_TIM_Base_Start_IT+0x80>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a1e      	ldr	r2, [pc, #120]	; (80062b0 <HAL_TIM_Base_Start_IT+0xcc>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d013      	beq.n	8006264 <HAL_TIM_Base_Start_IT+0x80>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a1c      	ldr	r2, [pc, #112]	; (80062b4 <HAL_TIM_Base_Start_IT+0xd0>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d00e      	beq.n	8006264 <HAL_TIM_Base_Start_IT+0x80>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a1b      	ldr	r2, [pc, #108]	; (80062b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d009      	beq.n	8006264 <HAL_TIM_Base_Start_IT+0x80>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a19      	ldr	r2, [pc, #100]	; (80062bc <HAL_TIM_Base_Start_IT+0xd8>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d004      	beq.n	8006264 <HAL_TIM_Base_Start_IT+0x80>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a18      	ldr	r2, [pc, #96]	; (80062c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d111      	bne.n	8006288 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	f003 0307 	and.w	r3, r3, #7
 800626e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2b06      	cmp	r3, #6
 8006274:	d010      	beq.n	8006298 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f042 0201 	orr.w	r2, r2, #1
 8006284:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006286:	e007      	b.n	8006298 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f042 0201 	orr.w	r2, r2, #1
 8006296:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006298:	2300      	movs	r3, #0
}
 800629a:	4618      	mov	r0, r3
 800629c:	3714      	adds	r7, #20
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr
 80062a6:	bf00      	nop
 80062a8:	40010000 	.word	0x40010000
 80062ac:	40000400 	.word	0x40000400
 80062b0:	40000800 	.word	0x40000800
 80062b4:	40000c00 	.word	0x40000c00
 80062b8:	40010400 	.word	0x40010400
 80062bc:	40014000 	.word	0x40014000
 80062c0:	40001800 	.word	0x40001800

080062c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b082      	sub	sp, #8
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d101      	bne.n	80062d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	e041      	b.n	800635a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d106      	bne.n	80062f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2200      	movs	r2, #0
 80062e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f7fb fcd4 	bl	8001c98 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2202      	movs	r2, #2
 80062f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	3304      	adds	r3, #4
 8006300:	4619      	mov	r1, r3
 8006302:	4610      	mov	r0, r2
 8006304:	f000 fb98 	bl	8006a38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2201      	movs	r2, #1
 800630c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2201      	movs	r2, #1
 8006314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2201      	movs	r2, #1
 800631c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2201      	movs	r2, #1
 8006324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2201      	movs	r2, #1
 800632c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2201      	movs	r2, #1
 8006334:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2201      	movs	r2, #1
 800633c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2201      	movs	r2, #1
 8006344:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2201      	movs	r2, #1
 800634c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006358:	2300      	movs	r3, #0
}
 800635a:	4618      	mov	r0, r3
 800635c:	3708      	adds	r7, #8
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
	...

08006364 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b084      	sub	sp, #16
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d109      	bne.n	8006388 <HAL_TIM_PWM_Start+0x24>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800637a:	b2db      	uxtb	r3, r3
 800637c:	2b01      	cmp	r3, #1
 800637e:	bf14      	ite	ne
 8006380:	2301      	movne	r3, #1
 8006382:	2300      	moveq	r3, #0
 8006384:	b2db      	uxtb	r3, r3
 8006386:	e022      	b.n	80063ce <HAL_TIM_PWM_Start+0x6a>
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	2b04      	cmp	r3, #4
 800638c:	d109      	bne.n	80063a2 <HAL_TIM_PWM_Start+0x3e>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006394:	b2db      	uxtb	r3, r3
 8006396:	2b01      	cmp	r3, #1
 8006398:	bf14      	ite	ne
 800639a:	2301      	movne	r3, #1
 800639c:	2300      	moveq	r3, #0
 800639e:	b2db      	uxtb	r3, r3
 80063a0:	e015      	b.n	80063ce <HAL_TIM_PWM_Start+0x6a>
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	2b08      	cmp	r3, #8
 80063a6:	d109      	bne.n	80063bc <HAL_TIM_PWM_Start+0x58>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80063ae:	b2db      	uxtb	r3, r3
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	bf14      	ite	ne
 80063b4:	2301      	movne	r3, #1
 80063b6:	2300      	moveq	r3, #0
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	e008      	b.n	80063ce <HAL_TIM_PWM_Start+0x6a>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	bf14      	ite	ne
 80063c8:	2301      	movne	r3, #1
 80063ca:	2300      	moveq	r3, #0
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d001      	beq.n	80063d6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	e07c      	b.n	80064d0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d104      	bne.n	80063e6 <HAL_TIM_PWM_Start+0x82>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2202      	movs	r2, #2
 80063e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063e4:	e013      	b.n	800640e <HAL_TIM_PWM_Start+0xaa>
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	2b04      	cmp	r3, #4
 80063ea:	d104      	bne.n	80063f6 <HAL_TIM_PWM_Start+0x92>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2202      	movs	r2, #2
 80063f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063f4:	e00b      	b.n	800640e <HAL_TIM_PWM_Start+0xaa>
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	2b08      	cmp	r3, #8
 80063fa:	d104      	bne.n	8006406 <HAL_TIM_PWM_Start+0xa2>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2202      	movs	r2, #2
 8006400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006404:	e003      	b.n	800640e <HAL_TIM_PWM_Start+0xaa>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2202      	movs	r2, #2
 800640a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	2201      	movs	r2, #1
 8006414:	6839      	ldr	r1, [r7, #0]
 8006416:	4618      	mov	r0, r3
 8006418:	f000 fe04 	bl	8007024 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a2d      	ldr	r2, [pc, #180]	; (80064d8 <HAL_TIM_PWM_Start+0x174>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d004      	beq.n	8006430 <HAL_TIM_PWM_Start+0xcc>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a2c      	ldr	r2, [pc, #176]	; (80064dc <HAL_TIM_PWM_Start+0x178>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d101      	bne.n	8006434 <HAL_TIM_PWM_Start+0xd0>
 8006430:	2301      	movs	r3, #1
 8006432:	e000      	b.n	8006436 <HAL_TIM_PWM_Start+0xd2>
 8006434:	2300      	movs	r3, #0
 8006436:	2b00      	cmp	r3, #0
 8006438:	d007      	beq.n	800644a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006448:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a22      	ldr	r2, [pc, #136]	; (80064d8 <HAL_TIM_PWM_Start+0x174>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d022      	beq.n	800649a <HAL_TIM_PWM_Start+0x136>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800645c:	d01d      	beq.n	800649a <HAL_TIM_PWM_Start+0x136>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a1f      	ldr	r2, [pc, #124]	; (80064e0 <HAL_TIM_PWM_Start+0x17c>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d018      	beq.n	800649a <HAL_TIM_PWM_Start+0x136>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a1d      	ldr	r2, [pc, #116]	; (80064e4 <HAL_TIM_PWM_Start+0x180>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d013      	beq.n	800649a <HAL_TIM_PWM_Start+0x136>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a1c      	ldr	r2, [pc, #112]	; (80064e8 <HAL_TIM_PWM_Start+0x184>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d00e      	beq.n	800649a <HAL_TIM_PWM_Start+0x136>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a16      	ldr	r2, [pc, #88]	; (80064dc <HAL_TIM_PWM_Start+0x178>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d009      	beq.n	800649a <HAL_TIM_PWM_Start+0x136>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a18      	ldr	r2, [pc, #96]	; (80064ec <HAL_TIM_PWM_Start+0x188>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d004      	beq.n	800649a <HAL_TIM_PWM_Start+0x136>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a16      	ldr	r2, [pc, #88]	; (80064f0 <HAL_TIM_PWM_Start+0x18c>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d111      	bne.n	80064be <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	f003 0307 	and.w	r3, r3, #7
 80064a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2b06      	cmp	r3, #6
 80064aa:	d010      	beq.n	80064ce <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f042 0201 	orr.w	r2, r2, #1
 80064ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064bc:	e007      	b.n	80064ce <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f042 0201 	orr.w	r2, r2, #1
 80064cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80064ce:	2300      	movs	r3, #0
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3710      	adds	r7, #16
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}
 80064d8:	40010000 	.word	0x40010000
 80064dc:	40010400 	.word	0x40010400
 80064e0:	40000400 	.word	0x40000400
 80064e4:	40000800 	.word	0x40000800
 80064e8:	40000c00 	.word	0x40000c00
 80064ec:	40014000 	.word	0x40014000
 80064f0:	40001800 	.word	0x40001800

080064f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b084      	sub	sp, #16
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	68db      	ldr	r3, [r3, #12]
 8006502:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	691b      	ldr	r3, [r3, #16]
 800650a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	f003 0302 	and.w	r3, r3, #2
 8006512:	2b00      	cmp	r3, #0
 8006514:	d020      	beq.n	8006558 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f003 0302 	and.w	r3, r3, #2
 800651c:	2b00      	cmp	r3, #0
 800651e:	d01b      	beq.n	8006558 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f06f 0202 	mvn.w	r2, #2
 8006528:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2201      	movs	r2, #1
 800652e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	699b      	ldr	r3, [r3, #24]
 8006536:	f003 0303 	and.w	r3, r3, #3
 800653a:	2b00      	cmp	r3, #0
 800653c:	d003      	beq.n	8006546 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f000 fa5b 	bl	80069fa <HAL_TIM_IC_CaptureCallback>
 8006544:	e005      	b.n	8006552 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f000 fa4d 	bl	80069e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f000 fa5e 	bl	8006a0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2200      	movs	r2, #0
 8006556:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	f003 0304 	and.w	r3, r3, #4
 800655e:	2b00      	cmp	r3, #0
 8006560:	d020      	beq.n	80065a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	f003 0304 	and.w	r3, r3, #4
 8006568:	2b00      	cmp	r3, #0
 800656a:	d01b      	beq.n	80065a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f06f 0204 	mvn.w	r2, #4
 8006574:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2202      	movs	r2, #2
 800657a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	699b      	ldr	r3, [r3, #24]
 8006582:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006586:	2b00      	cmp	r3, #0
 8006588:	d003      	beq.n	8006592 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f000 fa35 	bl	80069fa <HAL_TIM_IC_CaptureCallback>
 8006590:	e005      	b.n	800659e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 fa27 	bl	80069e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f000 fa38 	bl	8006a0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2200      	movs	r2, #0
 80065a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	f003 0308 	and.w	r3, r3, #8
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d020      	beq.n	80065f0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f003 0308 	and.w	r3, r3, #8
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d01b      	beq.n	80065f0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f06f 0208 	mvn.w	r2, #8
 80065c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2204      	movs	r2, #4
 80065c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	69db      	ldr	r3, [r3, #28]
 80065ce:	f003 0303 	and.w	r3, r3, #3
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d003      	beq.n	80065de <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 fa0f 	bl	80069fa <HAL_TIM_IC_CaptureCallback>
 80065dc:	e005      	b.n	80065ea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f000 fa01 	bl	80069e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f000 fa12 	bl	8006a0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2200      	movs	r2, #0
 80065ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	f003 0310 	and.w	r3, r3, #16
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d020      	beq.n	800663c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	f003 0310 	and.w	r3, r3, #16
 8006600:	2b00      	cmp	r3, #0
 8006602:	d01b      	beq.n	800663c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f06f 0210 	mvn.w	r2, #16
 800660c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2208      	movs	r2, #8
 8006612:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	69db      	ldr	r3, [r3, #28]
 800661a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800661e:	2b00      	cmp	r3, #0
 8006620:	d003      	beq.n	800662a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f000 f9e9 	bl	80069fa <HAL_TIM_IC_CaptureCallback>
 8006628:	e005      	b.n	8006636 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f000 f9db 	bl	80069e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f000 f9ec 	bl	8006a0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2200      	movs	r2, #0
 800663a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	f003 0301 	and.w	r3, r3, #1
 8006642:	2b00      	cmp	r3, #0
 8006644:	d00c      	beq.n	8006660 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	f003 0301 	and.w	r3, r3, #1
 800664c:	2b00      	cmp	r3, #0
 800664e:	d007      	beq.n	8006660 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f06f 0201 	mvn.w	r2, #1
 8006658:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f7fa ffea 	bl	8001634 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006666:	2b00      	cmp	r3, #0
 8006668:	d00c      	beq.n	8006684 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006670:	2b00      	cmp	r3, #0
 8006672:	d007      	beq.n	8006684 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800667c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 fdce 	bl	8007220 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800668a:	2b00      	cmp	r3, #0
 800668c:	d00c      	beq.n	80066a8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006694:	2b00      	cmp	r3, #0
 8006696:	d007      	beq.n	80066a8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80066a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 f9bd 	bl	8006a22 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	f003 0320 	and.w	r3, r3, #32
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d00c      	beq.n	80066cc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	f003 0320 	and.w	r3, r3, #32
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d007      	beq.n	80066cc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f06f 0220 	mvn.w	r2, #32
 80066c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f000 fda0 	bl	800720c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80066cc:	bf00      	nop
 80066ce:	3710      	adds	r7, #16
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}

080066d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b086      	sub	sp, #24
 80066d8:	af00      	add	r7, sp, #0
 80066da:	60f8      	str	r0, [r7, #12]
 80066dc:	60b9      	str	r1, [r7, #8]
 80066de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066e0:	2300      	movs	r3, #0
 80066e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d101      	bne.n	80066f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80066ee:	2302      	movs	r3, #2
 80066f0:	e0ae      	b.n	8006850 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2201      	movs	r2, #1
 80066f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2b0c      	cmp	r3, #12
 80066fe:	f200 809f 	bhi.w	8006840 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006702:	a201      	add	r2, pc, #4	; (adr r2, 8006708 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006708:	0800673d 	.word	0x0800673d
 800670c:	08006841 	.word	0x08006841
 8006710:	08006841 	.word	0x08006841
 8006714:	08006841 	.word	0x08006841
 8006718:	0800677d 	.word	0x0800677d
 800671c:	08006841 	.word	0x08006841
 8006720:	08006841 	.word	0x08006841
 8006724:	08006841 	.word	0x08006841
 8006728:	080067bf 	.word	0x080067bf
 800672c:	08006841 	.word	0x08006841
 8006730:	08006841 	.word	0x08006841
 8006734:	08006841 	.word	0x08006841
 8006738:	080067ff 	.word	0x080067ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	68b9      	ldr	r1, [r7, #8]
 8006742:	4618      	mov	r0, r3
 8006744:	f000 fa24 	bl	8006b90 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	699a      	ldr	r2, [r3, #24]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f042 0208 	orr.w	r2, r2, #8
 8006756:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	699a      	ldr	r2, [r3, #24]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f022 0204 	bic.w	r2, r2, #4
 8006766:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	6999      	ldr	r1, [r3, #24]
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	691a      	ldr	r2, [r3, #16]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	430a      	orrs	r2, r1
 8006778:	619a      	str	r2, [r3, #24]
      break;
 800677a:	e064      	b.n	8006846 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	68b9      	ldr	r1, [r7, #8]
 8006782:	4618      	mov	r0, r3
 8006784:	f000 fa74 	bl	8006c70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	699a      	ldr	r2, [r3, #24]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006796:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	699a      	ldr	r2, [r3, #24]
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	6999      	ldr	r1, [r3, #24]
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	691b      	ldr	r3, [r3, #16]
 80067b2:	021a      	lsls	r2, r3, #8
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	430a      	orrs	r2, r1
 80067ba:	619a      	str	r2, [r3, #24]
      break;
 80067bc:	e043      	b.n	8006846 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	68b9      	ldr	r1, [r7, #8]
 80067c4:	4618      	mov	r0, r3
 80067c6:	f000 fac9 	bl	8006d5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	69da      	ldr	r2, [r3, #28]
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f042 0208 	orr.w	r2, r2, #8
 80067d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	69da      	ldr	r2, [r3, #28]
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f022 0204 	bic.w	r2, r2, #4
 80067e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	69d9      	ldr	r1, [r3, #28]
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	691a      	ldr	r2, [r3, #16]
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	430a      	orrs	r2, r1
 80067fa:	61da      	str	r2, [r3, #28]
      break;
 80067fc:	e023      	b.n	8006846 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	68b9      	ldr	r1, [r7, #8]
 8006804:	4618      	mov	r0, r3
 8006806:	f000 fb1d 	bl	8006e44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	69da      	ldr	r2, [r3, #28]
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006818:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	69da      	ldr	r2, [r3, #28]
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006828:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	69d9      	ldr	r1, [r3, #28]
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	691b      	ldr	r3, [r3, #16]
 8006834:	021a      	lsls	r2, r3, #8
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	430a      	orrs	r2, r1
 800683c:	61da      	str	r2, [r3, #28]
      break;
 800683e:	e002      	b.n	8006846 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006840:	2301      	movs	r3, #1
 8006842:	75fb      	strb	r3, [r7, #23]
      break;
 8006844:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2200      	movs	r2, #0
 800684a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800684e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006850:	4618      	mov	r0, r3
 8006852:	3718      	adds	r7, #24
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}

08006858 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b084      	sub	sp, #16
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006862:	2300      	movs	r3, #0
 8006864:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800686c:	2b01      	cmp	r3, #1
 800686e:	d101      	bne.n	8006874 <HAL_TIM_ConfigClockSource+0x1c>
 8006870:	2302      	movs	r3, #2
 8006872:	e0b4      	b.n	80069de <HAL_TIM_ConfigClockSource+0x186>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2201      	movs	r2, #1
 8006878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2202      	movs	r2, #2
 8006880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006892:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800689a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	68ba      	ldr	r2, [r7, #8]
 80068a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068ac:	d03e      	beq.n	800692c <HAL_TIM_ConfigClockSource+0xd4>
 80068ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068b2:	f200 8087 	bhi.w	80069c4 <HAL_TIM_ConfigClockSource+0x16c>
 80068b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068ba:	f000 8086 	beq.w	80069ca <HAL_TIM_ConfigClockSource+0x172>
 80068be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068c2:	d87f      	bhi.n	80069c4 <HAL_TIM_ConfigClockSource+0x16c>
 80068c4:	2b70      	cmp	r3, #112	; 0x70
 80068c6:	d01a      	beq.n	80068fe <HAL_TIM_ConfigClockSource+0xa6>
 80068c8:	2b70      	cmp	r3, #112	; 0x70
 80068ca:	d87b      	bhi.n	80069c4 <HAL_TIM_ConfigClockSource+0x16c>
 80068cc:	2b60      	cmp	r3, #96	; 0x60
 80068ce:	d050      	beq.n	8006972 <HAL_TIM_ConfigClockSource+0x11a>
 80068d0:	2b60      	cmp	r3, #96	; 0x60
 80068d2:	d877      	bhi.n	80069c4 <HAL_TIM_ConfigClockSource+0x16c>
 80068d4:	2b50      	cmp	r3, #80	; 0x50
 80068d6:	d03c      	beq.n	8006952 <HAL_TIM_ConfigClockSource+0xfa>
 80068d8:	2b50      	cmp	r3, #80	; 0x50
 80068da:	d873      	bhi.n	80069c4 <HAL_TIM_ConfigClockSource+0x16c>
 80068dc:	2b40      	cmp	r3, #64	; 0x40
 80068de:	d058      	beq.n	8006992 <HAL_TIM_ConfigClockSource+0x13a>
 80068e0:	2b40      	cmp	r3, #64	; 0x40
 80068e2:	d86f      	bhi.n	80069c4 <HAL_TIM_ConfigClockSource+0x16c>
 80068e4:	2b30      	cmp	r3, #48	; 0x30
 80068e6:	d064      	beq.n	80069b2 <HAL_TIM_ConfigClockSource+0x15a>
 80068e8:	2b30      	cmp	r3, #48	; 0x30
 80068ea:	d86b      	bhi.n	80069c4 <HAL_TIM_ConfigClockSource+0x16c>
 80068ec:	2b20      	cmp	r3, #32
 80068ee:	d060      	beq.n	80069b2 <HAL_TIM_ConfigClockSource+0x15a>
 80068f0:	2b20      	cmp	r3, #32
 80068f2:	d867      	bhi.n	80069c4 <HAL_TIM_ConfigClockSource+0x16c>
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d05c      	beq.n	80069b2 <HAL_TIM_ConfigClockSource+0x15a>
 80068f8:	2b10      	cmp	r3, #16
 80068fa:	d05a      	beq.n	80069b2 <HAL_TIM_ConfigClockSource+0x15a>
 80068fc:	e062      	b.n	80069c4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800690e:	f000 fb69 	bl	8006fe4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006920:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	68ba      	ldr	r2, [r7, #8]
 8006928:	609a      	str	r2, [r3, #8]
      break;
 800692a:	e04f      	b.n	80069cc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800693c:	f000 fb52 	bl	8006fe4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	689a      	ldr	r2, [r3, #8]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800694e:	609a      	str	r2, [r3, #8]
      break;
 8006950:	e03c      	b.n	80069cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800695e:	461a      	mov	r2, r3
 8006960:	f000 fac6 	bl	8006ef0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	2150      	movs	r1, #80	; 0x50
 800696a:	4618      	mov	r0, r3
 800696c:	f000 fb1f 	bl	8006fae <TIM_ITRx_SetConfig>
      break;
 8006970:	e02c      	b.n	80069cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800697e:	461a      	mov	r2, r3
 8006980:	f000 fae5 	bl	8006f4e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	2160      	movs	r1, #96	; 0x60
 800698a:	4618      	mov	r0, r3
 800698c:	f000 fb0f 	bl	8006fae <TIM_ITRx_SetConfig>
      break;
 8006990:	e01c      	b.n	80069cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800699e:	461a      	mov	r2, r3
 80069a0:	f000 faa6 	bl	8006ef0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	2140      	movs	r1, #64	; 0x40
 80069aa:	4618      	mov	r0, r3
 80069ac:	f000 faff 	bl	8006fae <TIM_ITRx_SetConfig>
      break;
 80069b0:	e00c      	b.n	80069cc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681a      	ldr	r2, [r3, #0]
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4619      	mov	r1, r3
 80069bc:	4610      	mov	r0, r2
 80069be:	f000 faf6 	bl	8006fae <TIM_ITRx_SetConfig>
      break;
 80069c2:	e003      	b.n	80069cc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80069c4:	2301      	movs	r3, #1
 80069c6:	73fb      	strb	r3, [r7, #15]
      break;
 80069c8:	e000      	b.n	80069cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80069ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2201      	movs	r2, #1
 80069d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2200      	movs	r2, #0
 80069d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80069dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3710      	adds	r7, #16
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}

080069e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80069e6:	b480      	push	{r7}
 80069e8:	b083      	sub	sp, #12
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80069ee:	bf00      	nop
 80069f0:	370c      	adds	r7, #12
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr

080069fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80069fa:	b480      	push	{r7}
 80069fc:	b083      	sub	sp, #12
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006a02:	bf00      	nop
 8006a04:	370c      	adds	r7, #12
 8006a06:	46bd      	mov	sp, r7
 8006a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0c:	4770      	bx	lr

08006a0e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a0e:	b480      	push	{r7}
 8006a10:	b083      	sub	sp, #12
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a16:	bf00      	nop
 8006a18:	370c      	adds	r7, #12
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr

08006a22 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a22:	b480      	push	{r7}
 8006a24:	b083      	sub	sp, #12
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a2a:	bf00      	nop
 8006a2c:	370c      	adds	r7, #12
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a34:	4770      	bx	lr
	...

08006a38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b085      	sub	sp, #20
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	4a46      	ldr	r2, [pc, #280]	; (8006b64 <TIM_Base_SetConfig+0x12c>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d013      	beq.n	8006a78 <TIM_Base_SetConfig+0x40>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a56:	d00f      	beq.n	8006a78 <TIM_Base_SetConfig+0x40>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	4a43      	ldr	r2, [pc, #268]	; (8006b68 <TIM_Base_SetConfig+0x130>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d00b      	beq.n	8006a78 <TIM_Base_SetConfig+0x40>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	4a42      	ldr	r2, [pc, #264]	; (8006b6c <TIM_Base_SetConfig+0x134>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d007      	beq.n	8006a78 <TIM_Base_SetConfig+0x40>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	4a41      	ldr	r2, [pc, #260]	; (8006b70 <TIM_Base_SetConfig+0x138>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d003      	beq.n	8006a78 <TIM_Base_SetConfig+0x40>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	4a40      	ldr	r2, [pc, #256]	; (8006b74 <TIM_Base_SetConfig+0x13c>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d108      	bne.n	8006a8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	68fa      	ldr	r2, [r7, #12]
 8006a86:	4313      	orrs	r3, r2
 8006a88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	4a35      	ldr	r2, [pc, #212]	; (8006b64 <TIM_Base_SetConfig+0x12c>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d02b      	beq.n	8006aea <TIM_Base_SetConfig+0xb2>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a98:	d027      	beq.n	8006aea <TIM_Base_SetConfig+0xb2>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	4a32      	ldr	r2, [pc, #200]	; (8006b68 <TIM_Base_SetConfig+0x130>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d023      	beq.n	8006aea <TIM_Base_SetConfig+0xb2>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	4a31      	ldr	r2, [pc, #196]	; (8006b6c <TIM_Base_SetConfig+0x134>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d01f      	beq.n	8006aea <TIM_Base_SetConfig+0xb2>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	4a30      	ldr	r2, [pc, #192]	; (8006b70 <TIM_Base_SetConfig+0x138>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d01b      	beq.n	8006aea <TIM_Base_SetConfig+0xb2>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	4a2f      	ldr	r2, [pc, #188]	; (8006b74 <TIM_Base_SetConfig+0x13c>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d017      	beq.n	8006aea <TIM_Base_SetConfig+0xb2>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	4a2e      	ldr	r2, [pc, #184]	; (8006b78 <TIM_Base_SetConfig+0x140>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d013      	beq.n	8006aea <TIM_Base_SetConfig+0xb2>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	4a2d      	ldr	r2, [pc, #180]	; (8006b7c <TIM_Base_SetConfig+0x144>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d00f      	beq.n	8006aea <TIM_Base_SetConfig+0xb2>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	4a2c      	ldr	r2, [pc, #176]	; (8006b80 <TIM_Base_SetConfig+0x148>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d00b      	beq.n	8006aea <TIM_Base_SetConfig+0xb2>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	4a2b      	ldr	r2, [pc, #172]	; (8006b84 <TIM_Base_SetConfig+0x14c>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d007      	beq.n	8006aea <TIM_Base_SetConfig+0xb2>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	4a2a      	ldr	r2, [pc, #168]	; (8006b88 <TIM_Base_SetConfig+0x150>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d003      	beq.n	8006aea <TIM_Base_SetConfig+0xb2>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	4a29      	ldr	r2, [pc, #164]	; (8006b8c <TIM_Base_SetConfig+0x154>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d108      	bne.n	8006afc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006af0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	68db      	ldr	r3, [r3, #12]
 8006af6:	68fa      	ldr	r2, [r7, #12]
 8006af8:	4313      	orrs	r3, r2
 8006afa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	695b      	ldr	r3, [r3, #20]
 8006b06:	4313      	orrs	r3, r2
 8006b08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	68fa      	ldr	r2, [r7, #12]
 8006b0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	689a      	ldr	r2, [r3, #8]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	681a      	ldr	r2, [r3, #0]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	4a10      	ldr	r2, [pc, #64]	; (8006b64 <TIM_Base_SetConfig+0x12c>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d003      	beq.n	8006b30 <TIM_Base_SetConfig+0xf8>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	4a12      	ldr	r2, [pc, #72]	; (8006b74 <TIM_Base_SetConfig+0x13c>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d103      	bne.n	8006b38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	691a      	ldr	r2, [r3, #16]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	691b      	ldr	r3, [r3, #16]
 8006b42:	f003 0301 	and.w	r3, r3, #1
 8006b46:	2b01      	cmp	r3, #1
 8006b48:	d105      	bne.n	8006b56 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	691b      	ldr	r3, [r3, #16]
 8006b4e:	f023 0201 	bic.w	r2, r3, #1
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	611a      	str	r2, [r3, #16]
  }
}
 8006b56:	bf00      	nop
 8006b58:	3714      	adds	r7, #20
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr
 8006b62:	bf00      	nop
 8006b64:	40010000 	.word	0x40010000
 8006b68:	40000400 	.word	0x40000400
 8006b6c:	40000800 	.word	0x40000800
 8006b70:	40000c00 	.word	0x40000c00
 8006b74:	40010400 	.word	0x40010400
 8006b78:	40014000 	.word	0x40014000
 8006b7c:	40014400 	.word	0x40014400
 8006b80:	40014800 	.word	0x40014800
 8006b84:	40001800 	.word	0x40001800
 8006b88:	40001c00 	.word	0x40001c00
 8006b8c:	40002000 	.word	0x40002000

08006b90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b087      	sub	sp, #28
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6a1b      	ldr	r3, [r3, #32]
 8006b9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6a1b      	ldr	r3, [r3, #32]
 8006ba4:	f023 0201 	bic.w	r2, r3, #1
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	699b      	ldr	r3, [r3, #24]
 8006bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f023 0303 	bic.w	r3, r3, #3
 8006bc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	68fa      	ldr	r2, [r7, #12]
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	f023 0302 	bic.w	r3, r3, #2
 8006bd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	697a      	ldr	r2, [r7, #20]
 8006be0:	4313      	orrs	r3, r2
 8006be2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	4a20      	ldr	r2, [pc, #128]	; (8006c68 <TIM_OC1_SetConfig+0xd8>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d003      	beq.n	8006bf4 <TIM_OC1_SetConfig+0x64>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	4a1f      	ldr	r2, [pc, #124]	; (8006c6c <TIM_OC1_SetConfig+0xdc>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d10c      	bne.n	8006c0e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	f023 0308 	bic.w	r3, r3, #8
 8006bfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	68db      	ldr	r3, [r3, #12]
 8006c00:	697a      	ldr	r2, [r7, #20]
 8006c02:	4313      	orrs	r3, r2
 8006c04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	f023 0304 	bic.w	r3, r3, #4
 8006c0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	4a15      	ldr	r2, [pc, #84]	; (8006c68 <TIM_OC1_SetConfig+0xd8>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d003      	beq.n	8006c1e <TIM_OC1_SetConfig+0x8e>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	4a14      	ldr	r2, [pc, #80]	; (8006c6c <TIM_OC1_SetConfig+0xdc>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d111      	bne.n	8006c42 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	695b      	ldr	r3, [r3, #20]
 8006c32:	693a      	ldr	r2, [r7, #16]
 8006c34:	4313      	orrs	r3, r2
 8006c36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	699b      	ldr	r3, [r3, #24]
 8006c3c:	693a      	ldr	r2, [r7, #16]
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	693a      	ldr	r2, [r7, #16]
 8006c46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	68fa      	ldr	r2, [r7, #12]
 8006c4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	685a      	ldr	r2, [r3, #4]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	697a      	ldr	r2, [r7, #20]
 8006c5a:	621a      	str	r2, [r3, #32]
}
 8006c5c:	bf00      	nop
 8006c5e:	371c      	adds	r7, #28
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr
 8006c68:	40010000 	.word	0x40010000
 8006c6c:	40010400 	.word	0x40010400

08006c70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b087      	sub	sp, #28
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6a1b      	ldr	r3, [r3, #32]
 8006c7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6a1b      	ldr	r3, [r3, #32]
 8006c84:	f023 0210 	bic.w	r2, r3, #16
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	699b      	ldr	r3, [r3, #24]
 8006c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ca6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	021b      	lsls	r3, r3, #8
 8006cae:	68fa      	ldr	r2, [r7, #12]
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	f023 0320 	bic.w	r3, r3, #32
 8006cba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	011b      	lsls	r3, r3, #4
 8006cc2:	697a      	ldr	r2, [r7, #20]
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	4a22      	ldr	r2, [pc, #136]	; (8006d54 <TIM_OC2_SetConfig+0xe4>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d003      	beq.n	8006cd8 <TIM_OC2_SetConfig+0x68>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	4a21      	ldr	r2, [pc, #132]	; (8006d58 <TIM_OC2_SetConfig+0xe8>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d10d      	bne.n	8006cf4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006cde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	011b      	lsls	r3, r3, #4
 8006ce6:	697a      	ldr	r2, [r7, #20]
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cf2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	4a17      	ldr	r2, [pc, #92]	; (8006d54 <TIM_OC2_SetConfig+0xe4>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d003      	beq.n	8006d04 <TIM_OC2_SetConfig+0x94>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	4a16      	ldr	r2, [pc, #88]	; (8006d58 <TIM_OC2_SetConfig+0xe8>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d113      	bne.n	8006d2c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	695b      	ldr	r3, [r3, #20]
 8006d18:	009b      	lsls	r3, r3, #2
 8006d1a:	693a      	ldr	r2, [r7, #16]
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	699b      	ldr	r3, [r3, #24]
 8006d24:	009b      	lsls	r3, r3, #2
 8006d26:	693a      	ldr	r2, [r7, #16]
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	693a      	ldr	r2, [r7, #16]
 8006d30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	68fa      	ldr	r2, [r7, #12]
 8006d36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	685a      	ldr	r2, [r3, #4]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	697a      	ldr	r2, [r7, #20]
 8006d44:	621a      	str	r2, [r3, #32]
}
 8006d46:	bf00      	nop
 8006d48:	371c      	adds	r7, #28
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d50:	4770      	bx	lr
 8006d52:	bf00      	nop
 8006d54:	40010000 	.word	0x40010000
 8006d58:	40010400 	.word	0x40010400

08006d5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b087      	sub	sp, #28
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6a1b      	ldr	r3, [r3, #32]
 8006d6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6a1b      	ldr	r3, [r3, #32]
 8006d70:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	69db      	ldr	r3, [r3, #28]
 8006d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f023 0303 	bic.w	r3, r3, #3
 8006d92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	68fa      	ldr	r2, [r7, #12]
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006da4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	021b      	lsls	r3, r3, #8
 8006dac:	697a      	ldr	r2, [r7, #20]
 8006dae:	4313      	orrs	r3, r2
 8006db0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	4a21      	ldr	r2, [pc, #132]	; (8006e3c <TIM_OC3_SetConfig+0xe0>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d003      	beq.n	8006dc2 <TIM_OC3_SetConfig+0x66>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	4a20      	ldr	r2, [pc, #128]	; (8006e40 <TIM_OC3_SetConfig+0xe4>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d10d      	bne.n	8006dde <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006dc8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	68db      	ldr	r3, [r3, #12]
 8006dce:	021b      	lsls	r3, r3, #8
 8006dd0:	697a      	ldr	r2, [r7, #20]
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ddc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	4a16      	ldr	r2, [pc, #88]	; (8006e3c <TIM_OC3_SetConfig+0xe0>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d003      	beq.n	8006dee <TIM_OC3_SetConfig+0x92>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	4a15      	ldr	r2, [pc, #84]	; (8006e40 <TIM_OC3_SetConfig+0xe4>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d113      	bne.n	8006e16 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006df4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006dfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	695b      	ldr	r3, [r3, #20]
 8006e02:	011b      	lsls	r3, r3, #4
 8006e04:	693a      	ldr	r2, [r7, #16]
 8006e06:	4313      	orrs	r3, r2
 8006e08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	699b      	ldr	r3, [r3, #24]
 8006e0e:	011b      	lsls	r3, r3, #4
 8006e10:	693a      	ldr	r2, [r7, #16]
 8006e12:	4313      	orrs	r3, r2
 8006e14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	693a      	ldr	r2, [r7, #16]
 8006e1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	68fa      	ldr	r2, [r7, #12]
 8006e20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	685a      	ldr	r2, [r3, #4]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	697a      	ldr	r2, [r7, #20]
 8006e2e:	621a      	str	r2, [r3, #32]
}
 8006e30:	bf00      	nop
 8006e32:	371c      	adds	r7, #28
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr
 8006e3c:	40010000 	.word	0x40010000
 8006e40:	40010400 	.word	0x40010400

08006e44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b087      	sub	sp, #28
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6a1b      	ldr	r3, [r3, #32]
 8006e52:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6a1b      	ldr	r3, [r3, #32]
 8006e58:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	69db      	ldr	r3, [r3, #28]
 8006e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	021b      	lsls	r3, r3, #8
 8006e82:	68fa      	ldr	r2, [r7, #12]
 8006e84:	4313      	orrs	r3, r2
 8006e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	031b      	lsls	r3, r3, #12
 8006e96:	693a      	ldr	r2, [r7, #16]
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	4a12      	ldr	r2, [pc, #72]	; (8006ee8 <TIM_OC4_SetConfig+0xa4>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d003      	beq.n	8006eac <TIM_OC4_SetConfig+0x68>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	4a11      	ldr	r2, [pc, #68]	; (8006eec <TIM_OC4_SetConfig+0xa8>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d109      	bne.n	8006ec0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006eb2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	695b      	ldr	r3, [r3, #20]
 8006eb8:	019b      	lsls	r3, r3, #6
 8006eba:	697a      	ldr	r2, [r7, #20]
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	697a      	ldr	r2, [r7, #20]
 8006ec4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	68fa      	ldr	r2, [r7, #12]
 8006eca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	685a      	ldr	r2, [r3, #4]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	693a      	ldr	r2, [r7, #16]
 8006ed8:	621a      	str	r2, [r3, #32]
}
 8006eda:	bf00      	nop
 8006edc:	371c      	adds	r7, #28
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee4:	4770      	bx	lr
 8006ee6:	bf00      	nop
 8006ee8:	40010000 	.word	0x40010000
 8006eec:	40010400 	.word	0x40010400

08006ef0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b087      	sub	sp, #28
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	60f8      	str	r0, [r7, #12]
 8006ef8:	60b9      	str	r1, [r7, #8]
 8006efa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	6a1b      	ldr	r3, [r3, #32]
 8006f00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	6a1b      	ldr	r3, [r3, #32]
 8006f06:	f023 0201 	bic.w	r2, r3, #1
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	699b      	ldr	r3, [r3, #24]
 8006f12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	011b      	lsls	r3, r3, #4
 8006f20:	693a      	ldr	r2, [r7, #16]
 8006f22:	4313      	orrs	r3, r2
 8006f24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	f023 030a 	bic.w	r3, r3, #10
 8006f2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006f2e:	697a      	ldr	r2, [r7, #20]
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	4313      	orrs	r3, r2
 8006f34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	693a      	ldr	r2, [r7, #16]
 8006f3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	697a      	ldr	r2, [r7, #20]
 8006f40:	621a      	str	r2, [r3, #32]
}
 8006f42:	bf00      	nop
 8006f44:	371c      	adds	r7, #28
 8006f46:	46bd      	mov	sp, r7
 8006f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4c:	4770      	bx	lr

08006f4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f4e:	b480      	push	{r7}
 8006f50:	b087      	sub	sp, #28
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	60f8      	str	r0, [r7, #12]
 8006f56:	60b9      	str	r1, [r7, #8]
 8006f58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	6a1b      	ldr	r3, [r3, #32]
 8006f5e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	6a1b      	ldr	r3, [r3, #32]
 8006f64:	f023 0210 	bic.w	r2, r3, #16
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	699b      	ldr	r3, [r3, #24]
 8006f70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f78:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	031b      	lsls	r3, r3, #12
 8006f7e:	693a      	ldr	r2, [r7, #16]
 8006f80:	4313      	orrs	r3, r2
 8006f82:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006f8a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	011b      	lsls	r3, r3, #4
 8006f90:	697a      	ldr	r2, [r7, #20]
 8006f92:	4313      	orrs	r3, r2
 8006f94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	693a      	ldr	r2, [r7, #16]
 8006f9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	697a      	ldr	r2, [r7, #20]
 8006fa0:	621a      	str	r2, [r3, #32]
}
 8006fa2:	bf00      	nop
 8006fa4:	371c      	adds	r7, #28
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr

08006fae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006fae:	b480      	push	{r7}
 8006fb0:	b085      	sub	sp, #20
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	6078      	str	r0, [r7, #4]
 8006fb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	689b      	ldr	r3, [r3, #8]
 8006fbc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fc4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006fc6:	683a      	ldr	r2, [r7, #0]
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	f043 0307 	orr.w	r3, r3, #7
 8006fd0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	68fa      	ldr	r2, [r7, #12]
 8006fd6:	609a      	str	r2, [r3, #8]
}
 8006fd8:	bf00      	nop
 8006fda:	3714      	adds	r7, #20
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe2:	4770      	bx	lr

08006fe4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b087      	sub	sp, #28
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	60f8      	str	r0, [r7, #12]
 8006fec:	60b9      	str	r1, [r7, #8]
 8006fee:	607a      	str	r2, [r7, #4]
 8006ff0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ffe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	021a      	lsls	r2, r3, #8
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	431a      	orrs	r2, r3
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	4313      	orrs	r3, r2
 800700c:	697a      	ldr	r2, [r7, #20]
 800700e:	4313      	orrs	r3, r2
 8007010:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	697a      	ldr	r2, [r7, #20]
 8007016:	609a      	str	r2, [r3, #8]
}
 8007018:	bf00      	nop
 800701a:	371c      	adds	r7, #28
 800701c:	46bd      	mov	sp, r7
 800701e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007022:	4770      	bx	lr

08007024 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007024:	b480      	push	{r7}
 8007026:	b087      	sub	sp, #28
 8007028:	af00      	add	r7, sp, #0
 800702a:	60f8      	str	r0, [r7, #12]
 800702c:	60b9      	str	r1, [r7, #8]
 800702e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	f003 031f 	and.w	r3, r3, #31
 8007036:	2201      	movs	r2, #1
 8007038:	fa02 f303 	lsl.w	r3, r2, r3
 800703c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	6a1a      	ldr	r2, [r3, #32]
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	43db      	mvns	r3, r3
 8007046:	401a      	ands	r2, r3
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	6a1a      	ldr	r2, [r3, #32]
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	f003 031f 	and.w	r3, r3, #31
 8007056:	6879      	ldr	r1, [r7, #4]
 8007058:	fa01 f303 	lsl.w	r3, r1, r3
 800705c:	431a      	orrs	r2, r3
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	621a      	str	r2, [r3, #32]
}
 8007062:	bf00      	nop
 8007064:	371c      	adds	r7, #28
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr
	...

08007070 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007070:	b480      	push	{r7}
 8007072:	b085      	sub	sp, #20
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
 8007078:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007080:	2b01      	cmp	r3, #1
 8007082:	d101      	bne.n	8007088 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007084:	2302      	movs	r3, #2
 8007086:	e05a      	b.n	800713e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2201      	movs	r2, #1
 800708c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2202      	movs	r2, #2
 8007094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	689b      	ldr	r3, [r3, #8]
 80070a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	68fa      	ldr	r2, [r7, #12]
 80070b6:	4313      	orrs	r3, r2
 80070b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	68fa      	ldr	r2, [r7, #12]
 80070c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a21      	ldr	r2, [pc, #132]	; (800714c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d022      	beq.n	8007112 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070d4:	d01d      	beq.n	8007112 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a1d      	ldr	r2, [pc, #116]	; (8007150 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d018      	beq.n	8007112 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a1b      	ldr	r2, [pc, #108]	; (8007154 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d013      	beq.n	8007112 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a1a      	ldr	r2, [pc, #104]	; (8007158 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d00e      	beq.n	8007112 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a18      	ldr	r2, [pc, #96]	; (800715c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d009      	beq.n	8007112 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a17      	ldr	r2, [pc, #92]	; (8007160 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d004      	beq.n	8007112 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a15      	ldr	r2, [pc, #84]	; (8007164 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d10c      	bne.n	800712c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007118:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	68ba      	ldr	r2, [r7, #8]
 8007120:	4313      	orrs	r3, r2
 8007122:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	68ba      	ldr	r2, [r7, #8]
 800712a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2201      	movs	r2, #1
 8007130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2200      	movs	r2, #0
 8007138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800713c:	2300      	movs	r3, #0
}
 800713e:	4618      	mov	r0, r3
 8007140:	3714      	adds	r7, #20
 8007142:	46bd      	mov	sp, r7
 8007144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007148:	4770      	bx	lr
 800714a:	bf00      	nop
 800714c:	40010000 	.word	0x40010000
 8007150:	40000400 	.word	0x40000400
 8007154:	40000800 	.word	0x40000800
 8007158:	40000c00 	.word	0x40000c00
 800715c:	40010400 	.word	0x40010400
 8007160:	40014000 	.word	0x40014000
 8007164:	40001800 	.word	0x40001800

08007168 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007168:	b480      	push	{r7}
 800716a:	b085      	sub	sp, #20
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007172:	2300      	movs	r3, #0
 8007174:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800717c:	2b01      	cmp	r3, #1
 800717e:	d101      	bne.n	8007184 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007180:	2302      	movs	r3, #2
 8007182:	e03d      	b.n	8007200 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2201      	movs	r2, #1
 8007188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	68db      	ldr	r3, [r3, #12]
 8007196:	4313      	orrs	r3, r2
 8007198:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	689b      	ldr	r3, [r3, #8]
 80071a4:	4313      	orrs	r3, r2
 80071a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	4313      	orrs	r3, r2
 80071b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4313      	orrs	r3, r2
 80071c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	691b      	ldr	r3, [r3, #16]
 80071ce:	4313      	orrs	r3, r2
 80071d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	695b      	ldr	r3, [r3, #20]
 80071dc:	4313      	orrs	r3, r2
 80071de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	69db      	ldr	r3, [r3, #28]
 80071ea:	4313      	orrs	r3, r2
 80071ec:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	68fa      	ldr	r2, [r7, #12]
 80071f4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2200      	movs	r2, #0
 80071fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80071fe:	2300      	movs	r3, #0
}
 8007200:	4618      	mov	r0, r3
 8007202:	3714      	adds	r7, #20
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr

0800720c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800720c:	b480      	push	{r7}
 800720e:	b083      	sub	sp, #12
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007214:	bf00      	nop
 8007216:	370c      	adds	r7, #12
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr

08007220 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007220:	b480      	push	{r7}
 8007222:	b083      	sub	sp, #12
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007228:	bf00      	nop
 800722a:	370c      	adds	r7, #12
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr

08007234 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b082      	sub	sp, #8
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d101      	bne.n	8007246 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007242:	2301      	movs	r3, #1
 8007244:	e042      	b.n	80072cc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800724c:	b2db      	uxtb	r3, r3
 800724e:	2b00      	cmp	r3, #0
 8007250:	d106      	bne.n	8007260 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2200      	movs	r2, #0
 8007256:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f7fa fe90 	bl	8001f80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2224      	movs	r2, #36	; 0x24
 8007264:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	68da      	ldr	r2, [r3, #12]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007276:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f000 ff2d 	bl	80080d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	691a      	ldr	r2, [r3, #16]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800728c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	695a      	ldr	r2, [r3, #20]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800729c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	68da      	ldr	r2, [r3, #12]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80072ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2200      	movs	r2, #0
 80072b2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2220      	movs	r2, #32
 80072b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2220      	movs	r2, #32
 80072c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2200      	movs	r2, #0
 80072c8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80072ca:	2300      	movs	r3, #0
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3708      	adds	r7, #8
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}

080072d4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b08c      	sub	sp, #48	; 0x30
 80072d8:	af00      	add	r7, sp, #0
 80072da:	60f8      	str	r0, [r7, #12]
 80072dc:	60b9      	str	r1, [r7, #8]
 80072de:	4613      	mov	r3, r2
 80072e0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80072e8:	b2db      	uxtb	r3, r3
 80072ea:	2b20      	cmp	r3, #32
 80072ec:	d156      	bne.n	800739c <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d002      	beq.n	80072fa <HAL_UART_Transmit_DMA+0x26>
 80072f4:	88fb      	ldrh	r3, [r7, #6]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d101      	bne.n	80072fe <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80072fa:	2301      	movs	r3, #1
 80072fc:	e04f      	b.n	800739e <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80072fe:	68ba      	ldr	r2, [r7, #8]
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	88fa      	ldrh	r2, [r7, #6]
 8007308:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	88fa      	ldrh	r2, [r7, #6]
 800730e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2200      	movs	r2, #0
 8007314:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	2221      	movs	r2, #33	; 0x21
 800731a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007322:	4a21      	ldr	r2, [pc, #132]	; (80073a8 <HAL_UART_Transmit_DMA+0xd4>)
 8007324:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800732a:	4a20      	ldr	r2, [pc, #128]	; (80073ac <HAL_UART_Transmit_DMA+0xd8>)
 800732c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007332:	4a1f      	ldr	r2, [pc, #124]	; (80073b0 <HAL_UART_Transmit_DMA+0xdc>)
 8007334:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800733a:	2200      	movs	r2, #0
 800733c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800733e:	f107 0308 	add.w	r3, r7, #8
 8007342:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800734a:	6819      	ldr	r1, [r3, #0]
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	3304      	adds	r3, #4
 8007352:	461a      	mov	r2, r3
 8007354:	88fb      	ldrh	r3, [r7, #6]
 8007356:	f7fb ffb9 	bl	80032cc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007362:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	3314      	adds	r3, #20
 800736a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800736c:	69bb      	ldr	r3, [r7, #24]
 800736e:	e853 3f00 	ldrex	r3, [r3]
 8007372:	617b      	str	r3, [r7, #20]
   return(result);
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800737a:	62bb      	str	r3, [r7, #40]	; 0x28
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	3314      	adds	r3, #20
 8007382:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007384:	627a      	str	r2, [r7, #36]	; 0x24
 8007386:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007388:	6a39      	ldr	r1, [r7, #32]
 800738a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800738c:	e841 2300 	strex	r3, r2, [r1]
 8007390:	61fb      	str	r3, [r7, #28]
   return(result);
 8007392:	69fb      	ldr	r3, [r7, #28]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d1e5      	bne.n	8007364 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8007398:	2300      	movs	r3, #0
 800739a:	e000      	b.n	800739e <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800739c:	2302      	movs	r3, #2
  }
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3730      	adds	r7, #48	; 0x30
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}
 80073a6:	bf00      	nop
 80073a8:	08007965 	.word	0x08007965
 80073ac:	080079ff 	.word	0x080079ff
 80073b0:	08007b83 	.word	0x08007b83

080073b4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b084      	sub	sp, #16
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	60f8      	str	r0, [r7, #12]
 80073bc:	60b9      	str	r1, [r7, #8]
 80073be:	4613      	mov	r3, r2
 80073c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80073c8:	b2db      	uxtb	r3, r3
 80073ca:	2b20      	cmp	r3, #32
 80073cc:	d112      	bne.n	80073f4 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d002      	beq.n	80073da <HAL_UART_Receive_DMA+0x26>
 80073d4:	88fb      	ldrh	r3, [r7, #6]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d101      	bne.n	80073de <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80073da:	2301      	movs	r3, #1
 80073dc:	e00b      	b.n	80073f6 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2200      	movs	r2, #0
 80073e2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80073e4:	88fb      	ldrh	r3, [r7, #6]
 80073e6:	461a      	mov	r2, r3
 80073e8:	68b9      	ldr	r1, [r7, #8]
 80073ea:	68f8      	ldr	r0, [r7, #12]
 80073ec:	f000 fc14 	bl	8007c18 <UART_Start_Receive_DMA>
 80073f0:	4603      	mov	r3, r0
 80073f2:	e000      	b.n	80073f6 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80073f4:	2302      	movs	r3, #2
  }
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3710      	adds	r7, #16
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}
	...

08007400 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b0ba      	sub	sp, #232	; 0xe8
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	68db      	ldr	r3, [r3, #12]
 8007418:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	695b      	ldr	r3, [r3, #20]
 8007422:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007426:	2300      	movs	r3, #0
 8007428:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800742c:	2300      	movs	r3, #0
 800742e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007436:	f003 030f 	and.w	r3, r3, #15
 800743a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800743e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007442:	2b00      	cmp	r3, #0
 8007444:	d10f      	bne.n	8007466 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007446:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800744a:	f003 0320 	and.w	r3, r3, #32
 800744e:	2b00      	cmp	r3, #0
 8007450:	d009      	beq.n	8007466 <HAL_UART_IRQHandler+0x66>
 8007452:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007456:	f003 0320 	and.w	r3, r3, #32
 800745a:	2b00      	cmp	r3, #0
 800745c:	d003      	beq.n	8007466 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 fd7b 	bl	8007f5a <UART_Receive_IT>
      return;
 8007464:	e25b      	b.n	800791e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007466:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800746a:	2b00      	cmp	r3, #0
 800746c:	f000 80de 	beq.w	800762c <HAL_UART_IRQHandler+0x22c>
 8007470:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007474:	f003 0301 	and.w	r3, r3, #1
 8007478:	2b00      	cmp	r3, #0
 800747a:	d106      	bne.n	800748a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800747c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007480:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007484:	2b00      	cmp	r3, #0
 8007486:	f000 80d1 	beq.w	800762c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800748a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800748e:	f003 0301 	and.w	r3, r3, #1
 8007492:	2b00      	cmp	r3, #0
 8007494:	d00b      	beq.n	80074ae <HAL_UART_IRQHandler+0xae>
 8007496:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800749a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d005      	beq.n	80074ae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074a6:	f043 0201 	orr.w	r2, r3, #1
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80074ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074b2:	f003 0304 	and.w	r3, r3, #4
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d00b      	beq.n	80074d2 <HAL_UART_IRQHandler+0xd2>
 80074ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074be:	f003 0301 	and.w	r3, r3, #1
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d005      	beq.n	80074d2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074ca:	f043 0202 	orr.w	r2, r3, #2
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80074d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074d6:	f003 0302 	and.w	r3, r3, #2
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d00b      	beq.n	80074f6 <HAL_UART_IRQHandler+0xf6>
 80074de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074e2:	f003 0301 	and.w	r3, r3, #1
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d005      	beq.n	80074f6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074ee:	f043 0204 	orr.w	r2, r3, #4
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80074f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074fa:	f003 0308 	and.w	r3, r3, #8
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d011      	beq.n	8007526 <HAL_UART_IRQHandler+0x126>
 8007502:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007506:	f003 0320 	and.w	r3, r3, #32
 800750a:	2b00      	cmp	r3, #0
 800750c:	d105      	bne.n	800751a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800750e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007512:	f003 0301 	and.w	r3, r3, #1
 8007516:	2b00      	cmp	r3, #0
 8007518:	d005      	beq.n	8007526 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800751e:	f043 0208 	orr.w	r2, r3, #8
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800752a:	2b00      	cmp	r3, #0
 800752c:	f000 81f2 	beq.w	8007914 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007530:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007534:	f003 0320 	and.w	r3, r3, #32
 8007538:	2b00      	cmp	r3, #0
 800753a:	d008      	beq.n	800754e <HAL_UART_IRQHandler+0x14e>
 800753c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007540:	f003 0320 	and.w	r3, r3, #32
 8007544:	2b00      	cmp	r3, #0
 8007546:	d002      	beq.n	800754e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f000 fd06 	bl	8007f5a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	695b      	ldr	r3, [r3, #20]
 8007554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007558:	2b40      	cmp	r3, #64	; 0x40
 800755a:	bf0c      	ite	eq
 800755c:	2301      	moveq	r3, #1
 800755e:	2300      	movne	r3, #0
 8007560:	b2db      	uxtb	r3, r3
 8007562:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800756a:	f003 0308 	and.w	r3, r3, #8
 800756e:	2b00      	cmp	r3, #0
 8007570:	d103      	bne.n	800757a <HAL_UART_IRQHandler+0x17a>
 8007572:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007576:	2b00      	cmp	r3, #0
 8007578:	d04f      	beq.n	800761a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f000 fc0e 	bl	8007d9c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	695b      	ldr	r3, [r3, #20]
 8007586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800758a:	2b40      	cmp	r3, #64	; 0x40
 800758c:	d141      	bne.n	8007612 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	3314      	adds	r3, #20
 8007594:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007598:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800759c:	e853 3f00 	ldrex	r3, [r3]
 80075a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80075a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80075a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	3314      	adds	r3, #20
 80075b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80075ba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80075be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80075c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80075ca:	e841 2300 	strex	r3, r2, [r1]
 80075ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80075d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d1d9      	bne.n	800758e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d013      	beq.n	800760a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075e6:	4a7e      	ldr	r2, [pc, #504]	; (80077e0 <HAL_UART_IRQHandler+0x3e0>)
 80075e8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075ee:	4618      	mov	r0, r3
 80075f0:	f7fb ff34 	bl	800345c <HAL_DMA_Abort_IT>
 80075f4:	4603      	mov	r3, r0
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d016      	beq.n	8007628 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007600:	687a      	ldr	r2, [r7, #4]
 8007602:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007604:	4610      	mov	r0, r2
 8007606:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007608:	e00e      	b.n	8007628 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f000 f994 	bl	8007938 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007610:	e00a      	b.n	8007628 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f000 f990 	bl	8007938 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007618:	e006      	b.n	8007628 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f000 f98c 	bl	8007938 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2200      	movs	r2, #0
 8007624:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8007626:	e175      	b.n	8007914 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007628:	bf00      	nop
    return;
 800762a:	e173      	b.n	8007914 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007630:	2b01      	cmp	r3, #1
 8007632:	f040 814f 	bne.w	80078d4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007636:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800763a:	f003 0310 	and.w	r3, r3, #16
 800763e:	2b00      	cmp	r3, #0
 8007640:	f000 8148 	beq.w	80078d4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007644:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007648:	f003 0310 	and.w	r3, r3, #16
 800764c:	2b00      	cmp	r3, #0
 800764e:	f000 8141 	beq.w	80078d4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007652:	2300      	movs	r3, #0
 8007654:	60bb      	str	r3, [r7, #8]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	60bb      	str	r3, [r7, #8]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	60bb      	str	r3, [r7, #8]
 8007666:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	695b      	ldr	r3, [r3, #20]
 800766e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007672:	2b40      	cmp	r3, #64	; 0x40
 8007674:	f040 80b6 	bne.w	80077e4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007684:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007688:	2b00      	cmp	r3, #0
 800768a:	f000 8145 	beq.w	8007918 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007692:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007696:	429a      	cmp	r2, r3
 8007698:	f080 813e 	bcs.w	8007918 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80076a2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076a8:	69db      	ldr	r3, [r3, #28]
 80076aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076ae:	f000 8088 	beq.w	80077c2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	330c      	adds	r3, #12
 80076b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80076c0:	e853 3f00 	ldrex	r3, [r3]
 80076c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80076c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80076cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	330c      	adds	r3, #12
 80076da:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80076de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80076e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80076ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80076ee:	e841 2300 	strex	r3, r2, [r1]
 80076f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80076f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d1d9      	bne.n	80076b2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	3314      	adds	r3, #20
 8007704:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007706:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007708:	e853 3f00 	ldrex	r3, [r3]
 800770c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800770e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007710:	f023 0301 	bic.w	r3, r3, #1
 8007714:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	3314      	adds	r3, #20
 800771e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007722:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007726:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007728:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800772a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800772e:	e841 2300 	strex	r3, r2, [r1]
 8007732:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007734:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007736:	2b00      	cmp	r3, #0
 8007738:	d1e1      	bne.n	80076fe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	3314      	adds	r3, #20
 8007740:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007742:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007744:	e853 3f00 	ldrex	r3, [r3]
 8007748:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800774a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800774c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007750:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	3314      	adds	r3, #20
 800775a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800775e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007760:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007762:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007764:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007766:	e841 2300 	strex	r3, r2, [r1]
 800776a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800776c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800776e:	2b00      	cmp	r3, #0
 8007770:	d1e3      	bne.n	800773a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2220      	movs	r2, #32
 8007776:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2200      	movs	r2, #0
 800777e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	330c      	adds	r3, #12
 8007786:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007788:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800778a:	e853 3f00 	ldrex	r3, [r3]
 800778e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007790:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007792:	f023 0310 	bic.w	r3, r3, #16
 8007796:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	330c      	adds	r3, #12
 80077a0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80077a4:	65ba      	str	r2, [r7, #88]	; 0x58
 80077a6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80077aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80077ac:	e841 2300 	strex	r3, r2, [r1]
 80077b0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80077b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d1e3      	bne.n	8007780 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077bc:	4618      	mov	r0, r3
 80077be:	f7fb fddd 	bl	800337c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2202      	movs	r2, #2
 80077c6:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80077d0:	b29b      	uxth	r3, r3
 80077d2:	1ad3      	subs	r3, r2, r3
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	4619      	mov	r1, r3
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f000 f8b7 	bl	800794c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80077de:	e09b      	b.n	8007918 <HAL_UART_IRQHandler+0x518>
 80077e0:	08007e63 	.word	0x08007e63
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80077ec:	b29b      	uxth	r3, r3
 80077ee:	1ad3      	subs	r3, r2, r3
 80077f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80077f8:	b29b      	uxth	r3, r3
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	f000 808e 	beq.w	800791c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007800:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007804:	2b00      	cmp	r3, #0
 8007806:	f000 8089 	beq.w	800791c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	330c      	adds	r3, #12
 8007810:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007814:	e853 3f00 	ldrex	r3, [r3]
 8007818:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800781a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800781c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007820:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	330c      	adds	r3, #12
 800782a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800782e:	647a      	str	r2, [r7, #68]	; 0x44
 8007830:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007832:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007834:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007836:	e841 2300 	strex	r3, r2, [r1]
 800783a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800783c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800783e:	2b00      	cmp	r3, #0
 8007840:	d1e3      	bne.n	800780a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	3314      	adds	r3, #20
 8007848:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800784a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800784c:	e853 3f00 	ldrex	r3, [r3]
 8007850:	623b      	str	r3, [r7, #32]
   return(result);
 8007852:	6a3b      	ldr	r3, [r7, #32]
 8007854:	f023 0301 	bic.w	r3, r3, #1
 8007858:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	3314      	adds	r3, #20
 8007862:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007866:	633a      	str	r2, [r7, #48]	; 0x30
 8007868:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800786a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800786c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800786e:	e841 2300 	strex	r3, r2, [r1]
 8007872:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007876:	2b00      	cmp	r3, #0
 8007878:	d1e3      	bne.n	8007842 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2220      	movs	r2, #32
 800787e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2200      	movs	r2, #0
 8007886:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	330c      	adds	r3, #12
 800788e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	e853 3f00 	ldrex	r3, [r3]
 8007896:	60fb      	str	r3, [r7, #12]
   return(result);
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	f023 0310 	bic.w	r3, r3, #16
 800789e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	330c      	adds	r3, #12
 80078a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80078ac:	61fa      	str	r2, [r7, #28]
 80078ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078b0:	69b9      	ldr	r1, [r7, #24]
 80078b2:	69fa      	ldr	r2, [r7, #28]
 80078b4:	e841 2300 	strex	r3, r2, [r1]
 80078b8:	617b      	str	r3, [r7, #20]
   return(result);
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d1e3      	bne.n	8007888 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2202      	movs	r2, #2
 80078c4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80078c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80078ca:	4619      	mov	r1, r3
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f000 f83d 	bl	800794c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80078d2:	e023      	b.n	800791c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80078d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d009      	beq.n	80078f4 <HAL_UART_IRQHandler+0x4f4>
 80078e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d003      	beq.n	80078f4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f000 facc 	bl	8007e8a <UART_Transmit_IT>
    return;
 80078f2:	e014      	b.n	800791e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80078f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d00e      	beq.n	800791e <HAL_UART_IRQHandler+0x51e>
 8007900:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007908:	2b00      	cmp	r3, #0
 800790a:	d008      	beq.n	800791e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f000 fb0c 	bl	8007f2a <UART_EndTransmit_IT>
    return;
 8007912:	e004      	b.n	800791e <HAL_UART_IRQHandler+0x51e>
    return;
 8007914:	bf00      	nop
 8007916:	e002      	b.n	800791e <HAL_UART_IRQHandler+0x51e>
      return;
 8007918:	bf00      	nop
 800791a:	e000      	b.n	800791e <HAL_UART_IRQHandler+0x51e>
      return;
 800791c:	bf00      	nop
  }
}
 800791e:	37e8      	adds	r7, #232	; 0xe8
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}

08007924 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007924:	b480      	push	{r7}
 8007926:	b083      	sub	sp, #12
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800792c:	bf00      	nop
 800792e:	370c      	adds	r7, #12
 8007930:	46bd      	mov	sp, r7
 8007932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007936:	4770      	bx	lr

08007938 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007938:	b480      	push	{r7}
 800793a:	b083      	sub	sp, #12
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007940:	bf00      	nop
 8007942:	370c      	adds	r7, #12
 8007944:	46bd      	mov	sp, r7
 8007946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794a:	4770      	bx	lr

0800794c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800794c:	b480      	push	{r7}
 800794e:	b083      	sub	sp, #12
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	460b      	mov	r3, r1
 8007956:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007958:	bf00      	nop
 800795a:	370c      	adds	r7, #12
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr

08007964 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b090      	sub	sp, #64	; 0x40
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007970:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800797c:	2b00      	cmp	r3, #0
 800797e:	d137      	bne.n	80079f0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007980:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007982:	2200      	movs	r2, #0
 8007984:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007986:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	3314      	adds	r3, #20
 800798c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800798e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007990:	e853 3f00 	ldrex	r3, [r3]
 8007994:	623b      	str	r3, [r7, #32]
   return(result);
 8007996:	6a3b      	ldr	r3, [r7, #32]
 8007998:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800799c:	63bb      	str	r3, [r7, #56]	; 0x38
 800799e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	3314      	adds	r3, #20
 80079a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80079a6:	633a      	str	r2, [r7, #48]	; 0x30
 80079a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80079ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079ae:	e841 2300 	strex	r3, r2, [r1]
 80079b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80079b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d1e5      	bne.n	8007986 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80079ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	330c      	adds	r3, #12
 80079c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	e853 3f00 	ldrex	r3, [r3]
 80079c8:	60fb      	str	r3, [r7, #12]
   return(result);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079d0:	637b      	str	r3, [r7, #52]	; 0x34
 80079d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	330c      	adds	r3, #12
 80079d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80079da:	61fa      	str	r2, [r7, #28]
 80079dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079de:	69b9      	ldr	r1, [r7, #24]
 80079e0:	69fa      	ldr	r2, [r7, #28]
 80079e2:	e841 2300 	strex	r3, r2, [r1]
 80079e6:	617b      	str	r3, [r7, #20]
   return(result);
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d1e5      	bne.n	80079ba <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80079ee:	e002      	b.n	80079f6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80079f0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80079f2:	f008 fd9d 	bl	8010530 <HAL_UART_TxCpltCallback>
}
 80079f6:	bf00      	nop
 80079f8:	3740      	adds	r7, #64	; 0x40
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}

080079fe <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80079fe:	b580      	push	{r7, lr}
 8007a00:	b084      	sub	sp, #16
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a0a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007a0c:	68f8      	ldr	r0, [r7, #12]
 8007a0e:	f7ff ff89 	bl	8007924 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a12:	bf00      	nop
 8007a14:	3710      	adds	r7, #16
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}

08007a1a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007a1a:	b580      	push	{r7, lr}
 8007a1c:	b09c      	sub	sp, #112	; 0x70
 8007a1e:	af00      	add	r7, sp, #0
 8007a20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a26:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d172      	bne.n	8007b1c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007a36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a38:	2200      	movs	r2, #0
 8007a3a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	330c      	adds	r3, #12
 8007a42:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a46:	e853 3f00 	ldrex	r3, [r3]
 8007a4a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007a4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a52:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	330c      	adds	r3, #12
 8007a5a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007a5c:	65ba      	str	r2, [r7, #88]	; 0x58
 8007a5e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a60:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007a62:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007a64:	e841 2300 	strex	r3, r2, [r1]
 8007a68:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007a6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d1e5      	bne.n	8007a3c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	3314      	adds	r3, #20
 8007a76:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a7a:	e853 3f00 	ldrex	r3, [r3]
 8007a7e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a82:	f023 0301 	bic.w	r3, r3, #1
 8007a86:	667b      	str	r3, [r7, #100]	; 0x64
 8007a88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	3314      	adds	r3, #20
 8007a8e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007a90:	647a      	str	r2, [r7, #68]	; 0x44
 8007a92:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a94:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007a96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a98:	e841 2300 	strex	r3, r2, [r1]
 8007a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007a9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d1e5      	bne.n	8007a70 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007aa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	3314      	adds	r3, #20
 8007aaa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aae:	e853 3f00 	ldrex	r3, [r3]
 8007ab2:	623b      	str	r3, [r7, #32]
   return(result);
 8007ab4:	6a3b      	ldr	r3, [r7, #32]
 8007ab6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007aba:	663b      	str	r3, [r7, #96]	; 0x60
 8007abc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	3314      	adds	r3, #20
 8007ac2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007ac4:	633a      	str	r2, [r7, #48]	; 0x30
 8007ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ac8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007aca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007acc:	e841 2300 	strex	r3, r2, [r1]
 8007ad0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d1e5      	bne.n	8007aa4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007ad8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ada:	2220      	movs	r2, #32
 8007adc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ae0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d119      	bne.n	8007b1c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ae8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	330c      	adds	r3, #12
 8007aee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	e853 3f00 	ldrex	r3, [r3]
 8007af6:	60fb      	str	r3, [r7, #12]
   return(result);
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	f023 0310 	bic.w	r3, r3, #16
 8007afe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	330c      	adds	r3, #12
 8007b06:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007b08:	61fa      	str	r2, [r7, #28]
 8007b0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b0c:	69b9      	ldr	r1, [r7, #24]
 8007b0e:	69fa      	ldr	r2, [r7, #28]
 8007b10:	e841 2300 	strex	r3, r2, [r1]
 8007b14:	617b      	str	r3, [r7, #20]
   return(result);
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d1e5      	bne.n	8007ae8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b1e:	2200      	movs	r2, #0
 8007b20:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b26:	2b01      	cmp	r3, #1
 8007b28:	d106      	bne.n	8007b38 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b2c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007b2e:	4619      	mov	r1, r3
 8007b30:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007b32:	f7ff ff0b 	bl	800794c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007b36:	e002      	b.n	8007b3e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007b38:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007b3a:	f008 fce3 	bl	8010504 <HAL_UART_RxCpltCallback>
}
 8007b3e:	bf00      	nop
 8007b40:	3770      	adds	r7, #112	; 0x70
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}

08007b46 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007b46:	b580      	push	{r7, lr}
 8007b48:	b084      	sub	sp, #16
 8007b4a:	af00      	add	r7, sp, #0
 8007b4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b52:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2201      	movs	r2, #1
 8007b58:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b5e:	2b01      	cmp	r3, #1
 8007b60:	d108      	bne.n	8007b74 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007b66:	085b      	lsrs	r3, r3, #1
 8007b68:	b29b      	uxth	r3, r3
 8007b6a:	4619      	mov	r1, r3
 8007b6c:	68f8      	ldr	r0, [r7, #12]
 8007b6e:	f7ff feed 	bl	800794c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007b72:	e002      	b.n	8007b7a <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8007b74:	68f8      	ldr	r0, [r7, #12]
 8007b76:	f008 fcaf 	bl	80104d8 <HAL_UART_RxHalfCpltCallback>
}
 8007b7a:	bf00      	nop
 8007b7c:	3710      	adds	r7, #16
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}

08007b82 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007b82:	b580      	push	{r7, lr}
 8007b84:	b084      	sub	sp, #16
 8007b86:	af00      	add	r7, sp, #0
 8007b88:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b92:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	695b      	ldr	r3, [r3, #20]
 8007b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b9e:	2b80      	cmp	r3, #128	; 0x80
 8007ba0:	bf0c      	ite	eq
 8007ba2:	2301      	moveq	r3, #1
 8007ba4:	2300      	movne	r3, #0
 8007ba6:	b2db      	uxtb	r3, r3
 8007ba8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007bb0:	b2db      	uxtb	r3, r3
 8007bb2:	2b21      	cmp	r3, #33	; 0x21
 8007bb4:	d108      	bne.n	8007bc8 <UART_DMAError+0x46>
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d005      	beq.n	8007bc8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007bc2:	68b8      	ldr	r0, [r7, #8]
 8007bc4:	f000 f8c2 	bl	8007d4c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	695b      	ldr	r3, [r3, #20]
 8007bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bd2:	2b40      	cmp	r3, #64	; 0x40
 8007bd4:	bf0c      	ite	eq
 8007bd6:	2301      	moveq	r3, #1
 8007bd8:	2300      	movne	r3, #0
 8007bda:	b2db      	uxtb	r3, r3
 8007bdc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007be4:	b2db      	uxtb	r3, r3
 8007be6:	2b22      	cmp	r3, #34	; 0x22
 8007be8:	d108      	bne.n	8007bfc <UART_DMAError+0x7a>
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d005      	beq.n	8007bfc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007bf6:	68b8      	ldr	r0, [r7, #8]
 8007bf8:	f000 f8d0 	bl	8007d9c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c00:	f043 0210 	orr.w	r2, r3, #16
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007c08:	68b8      	ldr	r0, [r7, #8]
 8007c0a:	f7ff fe95 	bl	8007938 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c0e:	bf00      	nop
 8007c10:	3710      	adds	r7, #16
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}
	...

08007c18 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b098      	sub	sp, #96	; 0x60
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	60f8      	str	r0, [r7, #12]
 8007c20:	60b9      	str	r1, [r7, #8]
 8007c22:	4613      	mov	r3, r2
 8007c24:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007c26:	68ba      	ldr	r2, [r7, #8]
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	88fa      	ldrh	r2, [r7, #6]
 8007c30:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	2200      	movs	r2, #0
 8007c36:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2222      	movs	r2, #34	; 0x22
 8007c3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c44:	4a3e      	ldr	r2, [pc, #248]	; (8007d40 <UART_Start_Receive_DMA+0x128>)
 8007c46:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c4c:	4a3d      	ldr	r2, [pc, #244]	; (8007d44 <UART_Start_Receive_DMA+0x12c>)
 8007c4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c54:	4a3c      	ldr	r2, [pc, #240]	; (8007d48 <UART_Start_Receive_DMA+0x130>)
 8007c56:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007c60:	f107 0308 	add.w	r3, r7, #8
 8007c64:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	3304      	adds	r3, #4
 8007c70:	4619      	mov	r1, r3
 8007c72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c74:	681a      	ldr	r2, [r3, #0]
 8007c76:	88fb      	ldrh	r3, [r7, #6]
 8007c78:	f7fb fb28 	bl	80032cc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	613b      	str	r3, [r7, #16]
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	613b      	str	r3, [r7, #16]
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	613b      	str	r3, [r7, #16]
 8007c90:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	691b      	ldr	r3, [r3, #16]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d019      	beq.n	8007cce <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	330c      	adds	r3, #12
 8007ca0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ca4:	e853 3f00 	ldrex	r3, [r3]
 8007ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007caa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007cb0:	65bb      	str	r3, [r7, #88]	; 0x58
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	330c      	adds	r3, #12
 8007cb8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007cba:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007cbc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cbe:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007cc0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007cc2:	e841 2300 	strex	r3, r2, [r1]
 8007cc6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007cc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d1e5      	bne.n	8007c9a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	3314      	adds	r3, #20
 8007cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cd8:	e853 3f00 	ldrex	r3, [r3]
 8007cdc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ce0:	f043 0301 	orr.w	r3, r3, #1
 8007ce4:	657b      	str	r3, [r7, #84]	; 0x54
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	3314      	adds	r3, #20
 8007cec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007cee:	63ba      	str	r2, [r7, #56]	; 0x38
 8007cf0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007cf4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007cf6:	e841 2300 	strex	r3, r2, [r1]
 8007cfa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d1e5      	bne.n	8007cce <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	3314      	adds	r3, #20
 8007d08:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d0a:	69bb      	ldr	r3, [r7, #24]
 8007d0c:	e853 3f00 	ldrex	r3, [r3]
 8007d10:	617b      	str	r3, [r7, #20]
   return(result);
 8007d12:	697b      	ldr	r3, [r7, #20]
 8007d14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d18:	653b      	str	r3, [r7, #80]	; 0x50
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	3314      	adds	r3, #20
 8007d20:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007d22:	627a      	str	r2, [r7, #36]	; 0x24
 8007d24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d26:	6a39      	ldr	r1, [r7, #32]
 8007d28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d2a:	e841 2300 	strex	r3, r2, [r1]
 8007d2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d30:	69fb      	ldr	r3, [r7, #28]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d1e5      	bne.n	8007d02 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8007d36:	2300      	movs	r3, #0
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3760      	adds	r7, #96	; 0x60
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}
 8007d40:	08007a1b 	.word	0x08007a1b
 8007d44:	08007b47 	.word	0x08007b47
 8007d48:	08007b83 	.word	0x08007b83

08007d4c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b089      	sub	sp, #36	; 0x24
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	330c      	adds	r3, #12
 8007d5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	e853 3f00 	ldrex	r3, [r3]
 8007d62:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007d6a:	61fb      	str	r3, [r7, #28]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	330c      	adds	r3, #12
 8007d72:	69fa      	ldr	r2, [r7, #28]
 8007d74:	61ba      	str	r2, [r7, #24]
 8007d76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d78:	6979      	ldr	r1, [r7, #20]
 8007d7a:	69ba      	ldr	r2, [r7, #24]
 8007d7c:	e841 2300 	strex	r3, r2, [r1]
 8007d80:	613b      	str	r3, [r7, #16]
   return(result);
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d1e5      	bne.n	8007d54 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2220      	movs	r2, #32
 8007d8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8007d90:	bf00      	nop
 8007d92:	3724      	adds	r7, #36	; 0x24
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr

08007d9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b095      	sub	sp, #84	; 0x54
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	330c      	adds	r3, #12
 8007daa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dae:	e853 3f00 	ldrex	r3, [r3]
 8007db2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007dba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	330c      	adds	r3, #12
 8007dc2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007dc4:	643a      	str	r2, [r7, #64]	; 0x40
 8007dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007dca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007dcc:	e841 2300 	strex	r3, r2, [r1]
 8007dd0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d1e5      	bne.n	8007da4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	3314      	adds	r3, #20
 8007dde:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007de0:	6a3b      	ldr	r3, [r7, #32]
 8007de2:	e853 3f00 	ldrex	r3, [r3]
 8007de6:	61fb      	str	r3, [r7, #28]
   return(result);
 8007de8:	69fb      	ldr	r3, [r7, #28]
 8007dea:	f023 0301 	bic.w	r3, r3, #1
 8007dee:	64bb      	str	r3, [r7, #72]	; 0x48
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	3314      	adds	r3, #20
 8007df6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007df8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007dfa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dfc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007dfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e00:	e841 2300 	strex	r3, r2, [r1]
 8007e04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d1e5      	bne.n	8007dd8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e10:	2b01      	cmp	r3, #1
 8007e12:	d119      	bne.n	8007e48 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	330c      	adds	r3, #12
 8007e1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	e853 3f00 	ldrex	r3, [r3]
 8007e22:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	f023 0310 	bic.w	r3, r3, #16
 8007e2a:	647b      	str	r3, [r7, #68]	; 0x44
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	330c      	adds	r3, #12
 8007e32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e34:	61ba      	str	r2, [r7, #24]
 8007e36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e38:	6979      	ldr	r1, [r7, #20]
 8007e3a:	69ba      	ldr	r2, [r7, #24]
 8007e3c:	e841 2300 	strex	r3, r2, [r1]
 8007e40:	613b      	str	r3, [r7, #16]
   return(result);
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d1e5      	bne.n	8007e14 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2220      	movs	r2, #32
 8007e4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2200      	movs	r2, #0
 8007e54:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007e56:	bf00      	nop
 8007e58:	3754      	adds	r7, #84	; 0x54
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e60:	4770      	bx	lr

08007e62 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e62:	b580      	push	{r7, lr}
 8007e64:	b084      	sub	sp, #16
 8007e66:	af00      	add	r7, sp, #0
 8007e68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e6e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	2200      	movs	r2, #0
 8007e74:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e7c:	68f8      	ldr	r0, [r7, #12]
 8007e7e:	f7ff fd5b 	bl	8007938 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e82:	bf00      	nop
 8007e84:	3710      	adds	r7, #16
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}

08007e8a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007e8a:	b480      	push	{r7}
 8007e8c:	b085      	sub	sp, #20
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e98:	b2db      	uxtb	r3, r3
 8007e9a:	2b21      	cmp	r3, #33	; 0x21
 8007e9c:	d13e      	bne.n	8007f1c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	689b      	ldr	r3, [r3, #8]
 8007ea2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ea6:	d114      	bne.n	8007ed2 <UART_Transmit_IT+0x48>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	691b      	ldr	r3, [r3, #16]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d110      	bne.n	8007ed2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6a1b      	ldr	r3, [r3, #32]
 8007eb4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	881b      	ldrh	r3, [r3, #0]
 8007eba:	461a      	mov	r2, r3
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ec4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6a1b      	ldr	r3, [r3, #32]
 8007eca:	1c9a      	adds	r2, r3, #2
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	621a      	str	r2, [r3, #32]
 8007ed0:	e008      	b.n	8007ee4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6a1b      	ldr	r3, [r3, #32]
 8007ed6:	1c59      	adds	r1, r3, #1
 8007ed8:	687a      	ldr	r2, [r7, #4]
 8007eda:	6211      	str	r1, [r2, #32]
 8007edc:	781a      	ldrb	r2, [r3, #0]
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007ee8:	b29b      	uxth	r3, r3
 8007eea:	3b01      	subs	r3, #1
 8007eec:	b29b      	uxth	r3, r3
 8007eee:	687a      	ldr	r2, [r7, #4]
 8007ef0:	4619      	mov	r1, r3
 8007ef2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d10f      	bne.n	8007f18 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	68da      	ldr	r2, [r3, #12]
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007f06:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	68da      	ldr	r2, [r3, #12]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f16:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	e000      	b.n	8007f1e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007f1c:	2302      	movs	r3, #2
  }
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3714      	adds	r7, #20
 8007f22:	46bd      	mov	sp, r7
 8007f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f28:	4770      	bx	lr

08007f2a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007f2a:	b580      	push	{r7, lr}
 8007f2c:	b082      	sub	sp, #8
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	68da      	ldr	r2, [r3, #12]
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f40:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2220      	movs	r2, #32
 8007f46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f008 faf0 	bl	8010530 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007f50:	2300      	movs	r3, #0
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	3708      	adds	r7, #8
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}

08007f5a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007f5a:	b580      	push	{r7, lr}
 8007f5c:	b08c      	sub	sp, #48	; 0x30
 8007f5e:	af00      	add	r7, sp, #0
 8007f60:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007f68:	b2db      	uxtb	r3, r3
 8007f6a:	2b22      	cmp	r3, #34	; 0x22
 8007f6c:	f040 80ae 	bne.w	80080cc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	689b      	ldr	r3, [r3, #8]
 8007f74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f78:	d117      	bne.n	8007faa <UART_Receive_IT+0x50>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	691b      	ldr	r3, [r3, #16]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d113      	bne.n	8007faa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007f82:	2300      	movs	r3, #0
 8007f84:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f8a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	685b      	ldr	r3, [r3, #4]
 8007f92:	b29b      	uxth	r3, r3
 8007f94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f98:	b29a      	uxth	r2, r3
 8007f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f9c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fa2:	1c9a      	adds	r2, r3, #2
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	629a      	str	r2, [r3, #40]	; 0x28
 8007fa8:	e026      	b.n	8007ff8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fae:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	689b      	ldr	r3, [r3, #8]
 8007fb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fbc:	d007      	beq.n	8007fce <UART_Receive_IT+0x74>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	689b      	ldr	r3, [r3, #8]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d10a      	bne.n	8007fdc <UART_Receive_IT+0x82>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	691b      	ldr	r3, [r3, #16]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d106      	bne.n	8007fdc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	685b      	ldr	r3, [r3, #4]
 8007fd4:	b2da      	uxtb	r2, r3
 8007fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fd8:	701a      	strb	r2, [r3, #0]
 8007fda:	e008      	b.n	8007fee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	b2db      	uxtb	r3, r3
 8007fe4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fe8:	b2da      	uxtb	r2, r3
 8007fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ff2:	1c5a      	adds	r2, r3, #1
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ffc:	b29b      	uxth	r3, r3
 8007ffe:	3b01      	subs	r3, #1
 8008000:	b29b      	uxth	r3, r3
 8008002:	687a      	ldr	r2, [r7, #4]
 8008004:	4619      	mov	r1, r3
 8008006:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008008:	2b00      	cmp	r3, #0
 800800a:	d15d      	bne.n	80080c8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	68da      	ldr	r2, [r3, #12]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f022 0220 	bic.w	r2, r2, #32
 800801a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	68da      	ldr	r2, [r3, #12]
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800802a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	695a      	ldr	r2, [r3, #20]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f022 0201 	bic.w	r2, r2, #1
 800803a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2220      	movs	r2, #32
 8008040:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2200      	movs	r2, #0
 8008048:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800804e:	2b01      	cmp	r3, #1
 8008050:	d135      	bne.n	80080be <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2200      	movs	r2, #0
 8008056:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	330c      	adds	r3, #12
 800805e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	e853 3f00 	ldrex	r3, [r3]
 8008066:	613b      	str	r3, [r7, #16]
   return(result);
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	f023 0310 	bic.w	r3, r3, #16
 800806e:	627b      	str	r3, [r7, #36]	; 0x24
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	330c      	adds	r3, #12
 8008076:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008078:	623a      	str	r2, [r7, #32]
 800807a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800807c:	69f9      	ldr	r1, [r7, #28]
 800807e:	6a3a      	ldr	r2, [r7, #32]
 8008080:	e841 2300 	strex	r3, r2, [r1]
 8008084:	61bb      	str	r3, [r7, #24]
   return(result);
 8008086:	69bb      	ldr	r3, [r7, #24]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d1e5      	bne.n	8008058 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f003 0310 	and.w	r3, r3, #16
 8008096:	2b10      	cmp	r3, #16
 8008098:	d10a      	bne.n	80080b0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800809a:	2300      	movs	r3, #0
 800809c:	60fb      	str	r3, [r7, #12]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	60fb      	str	r3, [r7, #12]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	685b      	ldr	r3, [r3, #4]
 80080ac:	60fb      	str	r3, [r7, #12]
 80080ae:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80080b4:	4619      	mov	r1, r3
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f7ff fc48 	bl	800794c <HAL_UARTEx_RxEventCallback>
 80080bc:	e002      	b.n	80080c4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f008 fa20 	bl	8010504 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80080c4:	2300      	movs	r3, #0
 80080c6:	e002      	b.n	80080ce <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80080c8:	2300      	movs	r3, #0
 80080ca:	e000      	b.n	80080ce <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80080cc:	2302      	movs	r3, #2
  }
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	3730      	adds	r7, #48	; 0x30
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}
	...

080080d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80080d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80080dc:	b0c0      	sub	sp, #256	; 0x100
 80080de:	af00      	add	r7, sp, #0
 80080e0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80080e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	691b      	ldr	r3, [r3, #16]
 80080ec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80080f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080f4:	68d9      	ldr	r1, [r3, #12]
 80080f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080fa:	681a      	ldr	r2, [r3, #0]
 80080fc:	ea40 0301 	orr.w	r3, r0, r1
 8008100:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008106:	689a      	ldr	r2, [r3, #8]
 8008108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800810c:	691b      	ldr	r3, [r3, #16]
 800810e:	431a      	orrs	r2, r3
 8008110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008114:	695b      	ldr	r3, [r3, #20]
 8008116:	431a      	orrs	r2, r3
 8008118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800811c:	69db      	ldr	r3, [r3, #28]
 800811e:	4313      	orrs	r3, r2
 8008120:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	68db      	ldr	r3, [r3, #12]
 800812c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008130:	f021 010c 	bic.w	r1, r1, #12
 8008134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008138:	681a      	ldr	r2, [r3, #0]
 800813a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800813e:	430b      	orrs	r3, r1
 8008140:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	695b      	ldr	r3, [r3, #20]
 800814a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800814e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008152:	6999      	ldr	r1, [r3, #24]
 8008154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008158:	681a      	ldr	r2, [r3, #0]
 800815a:	ea40 0301 	orr.w	r3, r0, r1
 800815e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008164:	681a      	ldr	r2, [r3, #0]
 8008166:	4b8f      	ldr	r3, [pc, #572]	; (80083a4 <UART_SetConfig+0x2cc>)
 8008168:	429a      	cmp	r2, r3
 800816a:	d005      	beq.n	8008178 <UART_SetConfig+0xa0>
 800816c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008170:	681a      	ldr	r2, [r3, #0]
 8008172:	4b8d      	ldr	r3, [pc, #564]	; (80083a8 <UART_SetConfig+0x2d0>)
 8008174:	429a      	cmp	r2, r3
 8008176:	d104      	bne.n	8008182 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008178:	f7fd fc88 	bl	8005a8c <HAL_RCC_GetPCLK2Freq>
 800817c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008180:	e003      	b.n	800818a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008182:	f7fd fc6f 	bl	8005a64 <HAL_RCC_GetPCLK1Freq>
 8008186:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800818a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800818e:	69db      	ldr	r3, [r3, #28]
 8008190:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008194:	f040 810c 	bne.w	80083b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008198:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800819c:	2200      	movs	r2, #0
 800819e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80081a2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80081a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80081aa:	4622      	mov	r2, r4
 80081ac:	462b      	mov	r3, r5
 80081ae:	1891      	adds	r1, r2, r2
 80081b0:	65b9      	str	r1, [r7, #88]	; 0x58
 80081b2:	415b      	adcs	r3, r3
 80081b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80081b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80081ba:	4621      	mov	r1, r4
 80081bc:	eb12 0801 	adds.w	r8, r2, r1
 80081c0:	4629      	mov	r1, r5
 80081c2:	eb43 0901 	adc.w	r9, r3, r1
 80081c6:	f04f 0200 	mov.w	r2, #0
 80081ca:	f04f 0300 	mov.w	r3, #0
 80081ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80081d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80081d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80081da:	4690      	mov	r8, r2
 80081dc:	4699      	mov	r9, r3
 80081de:	4623      	mov	r3, r4
 80081e0:	eb18 0303 	adds.w	r3, r8, r3
 80081e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80081e8:	462b      	mov	r3, r5
 80081ea:	eb49 0303 	adc.w	r3, r9, r3
 80081ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80081f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	2200      	movs	r2, #0
 80081fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80081fe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008202:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008206:	460b      	mov	r3, r1
 8008208:	18db      	adds	r3, r3, r3
 800820a:	653b      	str	r3, [r7, #80]	; 0x50
 800820c:	4613      	mov	r3, r2
 800820e:	eb42 0303 	adc.w	r3, r2, r3
 8008212:	657b      	str	r3, [r7, #84]	; 0x54
 8008214:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008218:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800821c:	f7f8 fcbe 	bl	8000b9c <__aeabi_uldivmod>
 8008220:	4602      	mov	r2, r0
 8008222:	460b      	mov	r3, r1
 8008224:	4b61      	ldr	r3, [pc, #388]	; (80083ac <UART_SetConfig+0x2d4>)
 8008226:	fba3 2302 	umull	r2, r3, r3, r2
 800822a:	095b      	lsrs	r3, r3, #5
 800822c:	011c      	lsls	r4, r3, #4
 800822e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008232:	2200      	movs	r2, #0
 8008234:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008238:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800823c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008240:	4642      	mov	r2, r8
 8008242:	464b      	mov	r3, r9
 8008244:	1891      	adds	r1, r2, r2
 8008246:	64b9      	str	r1, [r7, #72]	; 0x48
 8008248:	415b      	adcs	r3, r3
 800824a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800824c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008250:	4641      	mov	r1, r8
 8008252:	eb12 0a01 	adds.w	sl, r2, r1
 8008256:	4649      	mov	r1, r9
 8008258:	eb43 0b01 	adc.w	fp, r3, r1
 800825c:	f04f 0200 	mov.w	r2, #0
 8008260:	f04f 0300 	mov.w	r3, #0
 8008264:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008268:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800826c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008270:	4692      	mov	sl, r2
 8008272:	469b      	mov	fp, r3
 8008274:	4643      	mov	r3, r8
 8008276:	eb1a 0303 	adds.w	r3, sl, r3
 800827a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800827e:	464b      	mov	r3, r9
 8008280:	eb4b 0303 	adc.w	r3, fp, r3
 8008284:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800828c:	685b      	ldr	r3, [r3, #4]
 800828e:	2200      	movs	r2, #0
 8008290:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008294:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008298:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800829c:	460b      	mov	r3, r1
 800829e:	18db      	adds	r3, r3, r3
 80082a0:	643b      	str	r3, [r7, #64]	; 0x40
 80082a2:	4613      	mov	r3, r2
 80082a4:	eb42 0303 	adc.w	r3, r2, r3
 80082a8:	647b      	str	r3, [r7, #68]	; 0x44
 80082aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80082ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80082b2:	f7f8 fc73 	bl	8000b9c <__aeabi_uldivmod>
 80082b6:	4602      	mov	r2, r0
 80082b8:	460b      	mov	r3, r1
 80082ba:	4611      	mov	r1, r2
 80082bc:	4b3b      	ldr	r3, [pc, #236]	; (80083ac <UART_SetConfig+0x2d4>)
 80082be:	fba3 2301 	umull	r2, r3, r3, r1
 80082c2:	095b      	lsrs	r3, r3, #5
 80082c4:	2264      	movs	r2, #100	; 0x64
 80082c6:	fb02 f303 	mul.w	r3, r2, r3
 80082ca:	1acb      	subs	r3, r1, r3
 80082cc:	00db      	lsls	r3, r3, #3
 80082ce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80082d2:	4b36      	ldr	r3, [pc, #216]	; (80083ac <UART_SetConfig+0x2d4>)
 80082d4:	fba3 2302 	umull	r2, r3, r3, r2
 80082d8:	095b      	lsrs	r3, r3, #5
 80082da:	005b      	lsls	r3, r3, #1
 80082dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80082e0:	441c      	add	r4, r3
 80082e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80082e6:	2200      	movs	r2, #0
 80082e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80082ec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80082f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80082f4:	4642      	mov	r2, r8
 80082f6:	464b      	mov	r3, r9
 80082f8:	1891      	adds	r1, r2, r2
 80082fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80082fc:	415b      	adcs	r3, r3
 80082fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008300:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008304:	4641      	mov	r1, r8
 8008306:	1851      	adds	r1, r2, r1
 8008308:	6339      	str	r1, [r7, #48]	; 0x30
 800830a:	4649      	mov	r1, r9
 800830c:	414b      	adcs	r3, r1
 800830e:	637b      	str	r3, [r7, #52]	; 0x34
 8008310:	f04f 0200 	mov.w	r2, #0
 8008314:	f04f 0300 	mov.w	r3, #0
 8008318:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800831c:	4659      	mov	r1, fp
 800831e:	00cb      	lsls	r3, r1, #3
 8008320:	4651      	mov	r1, sl
 8008322:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008326:	4651      	mov	r1, sl
 8008328:	00ca      	lsls	r2, r1, #3
 800832a:	4610      	mov	r0, r2
 800832c:	4619      	mov	r1, r3
 800832e:	4603      	mov	r3, r0
 8008330:	4642      	mov	r2, r8
 8008332:	189b      	adds	r3, r3, r2
 8008334:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008338:	464b      	mov	r3, r9
 800833a:	460a      	mov	r2, r1
 800833c:	eb42 0303 	adc.w	r3, r2, r3
 8008340:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008348:	685b      	ldr	r3, [r3, #4]
 800834a:	2200      	movs	r2, #0
 800834c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008350:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008354:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008358:	460b      	mov	r3, r1
 800835a:	18db      	adds	r3, r3, r3
 800835c:	62bb      	str	r3, [r7, #40]	; 0x28
 800835e:	4613      	mov	r3, r2
 8008360:	eb42 0303 	adc.w	r3, r2, r3
 8008364:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008366:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800836a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800836e:	f7f8 fc15 	bl	8000b9c <__aeabi_uldivmod>
 8008372:	4602      	mov	r2, r0
 8008374:	460b      	mov	r3, r1
 8008376:	4b0d      	ldr	r3, [pc, #52]	; (80083ac <UART_SetConfig+0x2d4>)
 8008378:	fba3 1302 	umull	r1, r3, r3, r2
 800837c:	095b      	lsrs	r3, r3, #5
 800837e:	2164      	movs	r1, #100	; 0x64
 8008380:	fb01 f303 	mul.w	r3, r1, r3
 8008384:	1ad3      	subs	r3, r2, r3
 8008386:	00db      	lsls	r3, r3, #3
 8008388:	3332      	adds	r3, #50	; 0x32
 800838a:	4a08      	ldr	r2, [pc, #32]	; (80083ac <UART_SetConfig+0x2d4>)
 800838c:	fba2 2303 	umull	r2, r3, r2, r3
 8008390:	095b      	lsrs	r3, r3, #5
 8008392:	f003 0207 	and.w	r2, r3, #7
 8008396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4422      	add	r2, r4
 800839e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80083a0:	e106      	b.n	80085b0 <UART_SetConfig+0x4d8>
 80083a2:	bf00      	nop
 80083a4:	40011000 	.word	0x40011000
 80083a8:	40011400 	.word	0x40011400
 80083ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80083b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80083b4:	2200      	movs	r2, #0
 80083b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80083ba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80083be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80083c2:	4642      	mov	r2, r8
 80083c4:	464b      	mov	r3, r9
 80083c6:	1891      	adds	r1, r2, r2
 80083c8:	6239      	str	r1, [r7, #32]
 80083ca:	415b      	adcs	r3, r3
 80083cc:	627b      	str	r3, [r7, #36]	; 0x24
 80083ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80083d2:	4641      	mov	r1, r8
 80083d4:	1854      	adds	r4, r2, r1
 80083d6:	4649      	mov	r1, r9
 80083d8:	eb43 0501 	adc.w	r5, r3, r1
 80083dc:	f04f 0200 	mov.w	r2, #0
 80083e0:	f04f 0300 	mov.w	r3, #0
 80083e4:	00eb      	lsls	r3, r5, #3
 80083e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80083ea:	00e2      	lsls	r2, r4, #3
 80083ec:	4614      	mov	r4, r2
 80083ee:	461d      	mov	r5, r3
 80083f0:	4643      	mov	r3, r8
 80083f2:	18e3      	adds	r3, r4, r3
 80083f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80083f8:	464b      	mov	r3, r9
 80083fa:	eb45 0303 	adc.w	r3, r5, r3
 80083fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008406:	685b      	ldr	r3, [r3, #4]
 8008408:	2200      	movs	r2, #0
 800840a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800840e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008412:	f04f 0200 	mov.w	r2, #0
 8008416:	f04f 0300 	mov.w	r3, #0
 800841a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800841e:	4629      	mov	r1, r5
 8008420:	008b      	lsls	r3, r1, #2
 8008422:	4621      	mov	r1, r4
 8008424:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008428:	4621      	mov	r1, r4
 800842a:	008a      	lsls	r2, r1, #2
 800842c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008430:	f7f8 fbb4 	bl	8000b9c <__aeabi_uldivmod>
 8008434:	4602      	mov	r2, r0
 8008436:	460b      	mov	r3, r1
 8008438:	4b60      	ldr	r3, [pc, #384]	; (80085bc <UART_SetConfig+0x4e4>)
 800843a:	fba3 2302 	umull	r2, r3, r3, r2
 800843e:	095b      	lsrs	r3, r3, #5
 8008440:	011c      	lsls	r4, r3, #4
 8008442:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008446:	2200      	movs	r2, #0
 8008448:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800844c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008450:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008454:	4642      	mov	r2, r8
 8008456:	464b      	mov	r3, r9
 8008458:	1891      	adds	r1, r2, r2
 800845a:	61b9      	str	r1, [r7, #24]
 800845c:	415b      	adcs	r3, r3
 800845e:	61fb      	str	r3, [r7, #28]
 8008460:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008464:	4641      	mov	r1, r8
 8008466:	1851      	adds	r1, r2, r1
 8008468:	6139      	str	r1, [r7, #16]
 800846a:	4649      	mov	r1, r9
 800846c:	414b      	adcs	r3, r1
 800846e:	617b      	str	r3, [r7, #20]
 8008470:	f04f 0200 	mov.w	r2, #0
 8008474:	f04f 0300 	mov.w	r3, #0
 8008478:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800847c:	4659      	mov	r1, fp
 800847e:	00cb      	lsls	r3, r1, #3
 8008480:	4651      	mov	r1, sl
 8008482:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008486:	4651      	mov	r1, sl
 8008488:	00ca      	lsls	r2, r1, #3
 800848a:	4610      	mov	r0, r2
 800848c:	4619      	mov	r1, r3
 800848e:	4603      	mov	r3, r0
 8008490:	4642      	mov	r2, r8
 8008492:	189b      	adds	r3, r3, r2
 8008494:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008498:	464b      	mov	r3, r9
 800849a:	460a      	mov	r2, r1
 800849c:	eb42 0303 	adc.w	r3, r2, r3
 80084a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80084a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084a8:	685b      	ldr	r3, [r3, #4]
 80084aa:	2200      	movs	r2, #0
 80084ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80084ae:	67fa      	str	r2, [r7, #124]	; 0x7c
 80084b0:	f04f 0200 	mov.w	r2, #0
 80084b4:	f04f 0300 	mov.w	r3, #0
 80084b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80084bc:	4649      	mov	r1, r9
 80084be:	008b      	lsls	r3, r1, #2
 80084c0:	4641      	mov	r1, r8
 80084c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80084c6:	4641      	mov	r1, r8
 80084c8:	008a      	lsls	r2, r1, #2
 80084ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80084ce:	f7f8 fb65 	bl	8000b9c <__aeabi_uldivmod>
 80084d2:	4602      	mov	r2, r0
 80084d4:	460b      	mov	r3, r1
 80084d6:	4611      	mov	r1, r2
 80084d8:	4b38      	ldr	r3, [pc, #224]	; (80085bc <UART_SetConfig+0x4e4>)
 80084da:	fba3 2301 	umull	r2, r3, r3, r1
 80084de:	095b      	lsrs	r3, r3, #5
 80084e0:	2264      	movs	r2, #100	; 0x64
 80084e2:	fb02 f303 	mul.w	r3, r2, r3
 80084e6:	1acb      	subs	r3, r1, r3
 80084e8:	011b      	lsls	r3, r3, #4
 80084ea:	3332      	adds	r3, #50	; 0x32
 80084ec:	4a33      	ldr	r2, [pc, #204]	; (80085bc <UART_SetConfig+0x4e4>)
 80084ee:	fba2 2303 	umull	r2, r3, r2, r3
 80084f2:	095b      	lsrs	r3, r3, #5
 80084f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80084f8:	441c      	add	r4, r3
 80084fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084fe:	2200      	movs	r2, #0
 8008500:	673b      	str	r3, [r7, #112]	; 0x70
 8008502:	677a      	str	r2, [r7, #116]	; 0x74
 8008504:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008508:	4642      	mov	r2, r8
 800850a:	464b      	mov	r3, r9
 800850c:	1891      	adds	r1, r2, r2
 800850e:	60b9      	str	r1, [r7, #8]
 8008510:	415b      	adcs	r3, r3
 8008512:	60fb      	str	r3, [r7, #12]
 8008514:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008518:	4641      	mov	r1, r8
 800851a:	1851      	adds	r1, r2, r1
 800851c:	6039      	str	r1, [r7, #0]
 800851e:	4649      	mov	r1, r9
 8008520:	414b      	adcs	r3, r1
 8008522:	607b      	str	r3, [r7, #4]
 8008524:	f04f 0200 	mov.w	r2, #0
 8008528:	f04f 0300 	mov.w	r3, #0
 800852c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008530:	4659      	mov	r1, fp
 8008532:	00cb      	lsls	r3, r1, #3
 8008534:	4651      	mov	r1, sl
 8008536:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800853a:	4651      	mov	r1, sl
 800853c:	00ca      	lsls	r2, r1, #3
 800853e:	4610      	mov	r0, r2
 8008540:	4619      	mov	r1, r3
 8008542:	4603      	mov	r3, r0
 8008544:	4642      	mov	r2, r8
 8008546:	189b      	adds	r3, r3, r2
 8008548:	66bb      	str	r3, [r7, #104]	; 0x68
 800854a:	464b      	mov	r3, r9
 800854c:	460a      	mov	r2, r1
 800854e:	eb42 0303 	adc.w	r3, r2, r3
 8008552:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008558:	685b      	ldr	r3, [r3, #4]
 800855a:	2200      	movs	r2, #0
 800855c:	663b      	str	r3, [r7, #96]	; 0x60
 800855e:	667a      	str	r2, [r7, #100]	; 0x64
 8008560:	f04f 0200 	mov.w	r2, #0
 8008564:	f04f 0300 	mov.w	r3, #0
 8008568:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800856c:	4649      	mov	r1, r9
 800856e:	008b      	lsls	r3, r1, #2
 8008570:	4641      	mov	r1, r8
 8008572:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008576:	4641      	mov	r1, r8
 8008578:	008a      	lsls	r2, r1, #2
 800857a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800857e:	f7f8 fb0d 	bl	8000b9c <__aeabi_uldivmod>
 8008582:	4602      	mov	r2, r0
 8008584:	460b      	mov	r3, r1
 8008586:	4b0d      	ldr	r3, [pc, #52]	; (80085bc <UART_SetConfig+0x4e4>)
 8008588:	fba3 1302 	umull	r1, r3, r3, r2
 800858c:	095b      	lsrs	r3, r3, #5
 800858e:	2164      	movs	r1, #100	; 0x64
 8008590:	fb01 f303 	mul.w	r3, r1, r3
 8008594:	1ad3      	subs	r3, r2, r3
 8008596:	011b      	lsls	r3, r3, #4
 8008598:	3332      	adds	r3, #50	; 0x32
 800859a:	4a08      	ldr	r2, [pc, #32]	; (80085bc <UART_SetConfig+0x4e4>)
 800859c:	fba2 2303 	umull	r2, r3, r2, r3
 80085a0:	095b      	lsrs	r3, r3, #5
 80085a2:	f003 020f 	and.w	r2, r3, #15
 80085a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	4422      	add	r2, r4
 80085ae:	609a      	str	r2, [r3, #8]
}
 80085b0:	bf00      	nop
 80085b2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80085b6:	46bd      	mov	sp, r7
 80085b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80085bc:	51eb851f 	.word	0x51eb851f

080085c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80085c0:	b084      	sub	sp, #16
 80085c2:	b580      	push	{r7, lr}
 80085c4:	b084      	sub	sp, #16
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	6078      	str	r0, [r7, #4]
 80085ca:	f107 001c 	add.w	r0, r7, #28
 80085ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80085d2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80085d6:	2b01      	cmp	r3, #1
 80085d8:	d123      	bne.n	8008622 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085de:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	68db      	ldr	r3, [r3, #12]
 80085ea:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80085ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085f2:	687a      	ldr	r2, [r7, #4]
 80085f4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	68db      	ldr	r3, [r3, #12]
 80085fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008602:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008606:	2b01      	cmp	r3, #1
 8008608:	d105      	bne.n	8008616 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	68db      	ldr	r3, [r3, #12]
 800860e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f001 fae2 	bl	8009be0 <USB_CoreReset>
 800861c:	4603      	mov	r3, r0
 800861e:	73fb      	strb	r3, [r7, #15]
 8008620:	e01b      	b.n	800865a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	68db      	ldr	r3, [r3, #12]
 8008626:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f001 fad6 	bl	8009be0 <USB_CoreReset>
 8008634:	4603      	mov	r3, r0
 8008636:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008638:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800863c:	2b00      	cmp	r3, #0
 800863e:	d106      	bne.n	800864e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008644:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	639a      	str	r2, [r3, #56]	; 0x38
 800864c:	e005      	b.n	800865a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008652:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800865a:	7fbb      	ldrb	r3, [r7, #30]
 800865c:	2b01      	cmp	r3, #1
 800865e:	d10b      	bne.n	8008678 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	689b      	ldr	r3, [r3, #8]
 8008664:	f043 0206 	orr.w	r2, r3, #6
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	689b      	ldr	r3, [r3, #8]
 8008670:	f043 0220 	orr.w	r2, r3, #32
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008678:	7bfb      	ldrb	r3, [r7, #15]
}
 800867a:	4618      	mov	r0, r3
 800867c:	3710      	adds	r7, #16
 800867e:	46bd      	mov	sp, r7
 8008680:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008684:	b004      	add	sp, #16
 8008686:	4770      	bx	lr

08008688 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008688:	b480      	push	{r7}
 800868a:	b087      	sub	sp, #28
 800868c:	af00      	add	r7, sp, #0
 800868e:	60f8      	str	r0, [r7, #12]
 8008690:	60b9      	str	r1, [r7, #8]
 8008692:	4613      	mov	r3, r2
 8008694:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008696:	79fb      	ldrb	r3, [r7, #7]
 8008698:	2b02      	cmp	r3, #2
 800869a:	d165      	bne.n	8008768 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	4a41      	ldr	r2, [pc, #260]	; (80087a4 <USB_SetTurnaroundTime+0x11c>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d906      	bls.n	80086b2 <USB_SetTurnaroundTime+0x2a>
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	4a40      	ldr	r2, [pc, #256]	; (80087a8 <USB_SetTurnaroundTime+0x120>)
 80086a8:	4293      	cmp	r3, r2
 80086aa:	d202      	bcs.n	80086b2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80086ac:	230f      	movs	r3, #15
 80086ae:	617b      	str	r3, [r7, #20]
 80086b0:	e062      	b.n	8008778 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	4a3c      	ldr	r2, [pc, #240]	; (80087a8 <USB_SetTurnaroundTime+0x120>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d306      	bcc.n	80086c8 <USB_SetTurnaroundTime+0x40>
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	4a3b      	ldr	r2, [pc, #236]	; (80087ac <USB_SetTurnaroundTime+0x124>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d202      	bcs.n	80086c8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80086c2:	230e      	movs	r3, #14
 80086c4:	617b      	str	r3, [r7, #20]
 80086c6:	e057      	b.n	8008778 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	4a38      	ldr	r2, [pc, #224]	; (80087ac <USB_SetTurnaroundTime+0x124>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d306      	bcc.n	80086de <USB_SetTurnaroundTime+0x56>
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	4a37      	ldr	r2, [pc, #220]	; (80087b0 <USB_SetTurnaroundTime+0x128>)
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d202      	bcs.n	80086de <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80086d8:	230d      	movs	r3, #13
 80086da:	617b      	str	r3, [r7, #20]
 80086dc:	e04c      	b.n	8008778 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	4a33      	ldr	r2, [pc, #204]	; (80087b0 <USB_SetTurnaroundTime+0x128>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d306      	bcc.n	80086f4 <USB_SetTurnaroundTime+0x6c>
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	4a32      	ldr	r2, [pc, #200]	; (80087b4 <USB_SetTurnaroundTime+0x12c>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d802      	bhi.n	80086f4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80086ee:	230c      	movs	r3, #12
 80086f0:	617b      	str	r3, [r7, #20]
 80086f2:	e041      	b.n	8008778 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	4a2f      	ldr	r2, [pc, #188]	; (80087b4 <USB_SetTurnaroundTime+0x12c>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d906      	bls.n	800870a <USB_SetTurnaroundTime+0x82>
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	4a2e      	ldr	r2, [pc, #184]	; (80087b8 <USB_SetTurnaroundTime+0x130>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d802      	bhi.n	800870a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008704:	230b      	movs	r3, #11
 8008706:	617b      	str	r3, [r7, #20]
 8008708:	e036      	b.n	8008778 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	4a2a      	ldr	r2, [pc, #168]	; (80087b8 <USB_SetTurnaroundTime+0x130>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d906      	bls.n	8008720 <USB_SetTurnaroundTime+0x98>
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	4a29      	ldr	r2, [pc, #164]	; (80087bc <USB_SetTurnaroundTime+0x134>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d802      	bhi.n	8008720 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800871a:	230a      	movs	r3, #10
 800871c:	617b      	str	r3, [r7, #20]
 800871e:	e02b      	b.n	8008778 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	4a26      	ldr	r2, [pc, #152]	; (80087bc <USB_SetTurnaroundTime+0x134>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d906      	bls.n	8008736 <USB_SetTurnaroundTime+0xae>
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	4a25      	ldr	r2, [pc, #148]	; (80087c0 <USB_SetTurnaroundTime+0x138>)
 800872c:	4293      	cmp	r3, r2
 800872e:	d202      	bcs.n	8008736 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008730:	2309      	movs	r3, #9
 8008732:	617b      	str	r3, [r7, #20]
 8008734:	e020      	b.n	8008778 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	4a21      	ldr	r2, [pc, #132]	; (80087c0 <USB_SetTurnaroundTime+0x138>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d306      	bcc.n	800874c <USB_SetTurnaroundTime+0xc4>
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	4a20      	ldr	r2, [pc, #128]	; (80087c4 <USB_SetTurnaroundTime+0x13c>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d802      	bhi.n	800874c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008746:	2308      	movs	r3, #8
 8008748:	617b      	str	r3, [r7, #20]
 800874a:	e015      	b.n	8008778 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	4a1d      	ldr	r2, [pc, #116]	; (80087c4 <USB_SetTurnaroundTime+0x13c>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d906      	bls.n	8008762 <USB_SetTurnaroundTime+0xda>
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	4a1c      	ldr	r2, [pc, #112]	; (80087c8 <USB_SetTurnaroundTime+0x140>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d202      	bcs.n	8008762 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800875c:	2307      	movs	r3, #7
 800875e:	617b      	str	r3, [r7, #20]
 8008760:	e00a      	b.n	8008778 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008762:	2306      	movs	r3, #6
 8008764:	617b      	str	r3, [r7, #20]
 8008766:	e007      	b.n	8008778 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008768:	79fb      	ldrb	r3, [r7, #7]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d102      	bne.n	8008774 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800876e:	2309      	movs	r3, #9
 8008770:	617b      	str	r3, [r7, #20]
 8008772:	e001      	b.n	8008778 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008774:	2309      	movs	r3, #9
 8008776:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	68db      	ldr	r3, [r3, #12]
 800877c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	68da      	ldr	r2, [r3, #12]
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	029b      	lsls	r3, r3, #10
 800878c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008790:	431a      	orrs	r2, r3
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008796:	2300      	movs	r3, #0
}
 8008798:	4618      	mov	r0, r3
 800879a:	371c      	adds	r7, #28
 800879c:	46bd      	mov	sp, r7
 800879e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a2:	4770      	bx	lr
 80087a4:	00d8acbf 	.word	0x00d8acbf
 80087a8:	00e4e1c0 	.word	0x00e4e1c0
 80087ac:	00f42400 	.word	0x00f42400
 80087b0:	01067380 	.word	0x01067380
 80087b4:	011a499f 	.word	0x011a499f
 80087b8:	01312cff 	.word	0x01312cff
 80087bc:	014ca43f 	.word	0x014ca43f
 80087c0:	016e3600 	.word	0x016e3600
 80087c4:	01a6ab1f 	.word	0x01a6ab1f
 80087c8:	01e84800 	.word	0x01e84800

080087cc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80087cc:	b480      	push	{r7}
 80087ce:	b083      	sub	sp, #12
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	689b      	ldr	r3, [r3, #8]
 80087d8:	f043 0201 	orr.w	r2, r3, #1
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80087e0:	2300      	movs	r3, #0
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	370c      	adds	r7, #12
 80087e6:	46bd      	mov	sp, r7
 80087e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ec:	4770      	bx	lr

080087ee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80087ee:	b480      	push	{r7}
 80087f0:	b083      	sub	sp, #12
 80087f2:	af00      	add	r7, sp, #0
 80087f4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	689b      	ldr	r3, [r3, #8]
 80087fa:	f023 0201 	bic.w	r2, r3, #1
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008802:	2300      	movs	r3, #0
}
 8008804:	4618      	mov	r0, r3
 8008806:	370c      	adds	r7, #12
 8008808:	46bd      	mov	sp, r7
 800880a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880e:	4770      	bx	lr

08008810 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b084      	sub	sp, #16
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
 8008818:	460b      	mov	r3, r1
 800881a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800881c:	2300      	movs	r3, #0
 800881e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	68db      	ldr	r3, [r3, #12]
 8008824:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800882c:	78fb      	ldrb	r3, [r7, #3]
 800882e:	2b01      	cmp	r3, #1
 8008830:	d115      	bne.n	800885e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	68db      	ldr	r3, [r3, #12]
 8008836:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800883e:	200a      	movs	r0, #10
 8008840:	f7f9 fcf8 	bl	8002234 <HAL_Delay>
      ms += 10U;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	330a      	adds	r3, #10
 8008848:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f001 f939 	bl	8009ac2 <USB_GetMode>
 8008850:	4603      	mov	r3, r0
 8008852:	2b01      	cmp	r3, #1
 8008854:	d01e      	beq.n	8008894 <USB_SetCurrentMode+0x84>
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	2bc7      	cmp	r3, #199	; 0xc7
 800885a:	d9f0      	bls.n	800883e <USB_SetCurrentMode+0x2e>
 800885c:	e01a      	b.n	8008894 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800885e:	78fb      	ldrb	r3, [r7, #3]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d115      	bne.n	8008890 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	68db      	ldr	r3, [r3, #12]
 8008868:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008870:	200a      	movs	r0, #10
 8008872:	f7f9 fcdf 	bl	8002234 <HAL_Delay>
      ms += 10U;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	330a      	adds	r3, #10
 800887a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f001 f920 	bl	8009ac2 <USB_GetMode>
 8008882:	4603      	mov	r3, r0
 8008884:	2b00      	cmp	r3, #0
 8008886:	d005      	beq.n	8008894 <USB_SetCurrentMode+0x84>
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2bc7      	cmp	r3, #199	; 0xc7
 800888c:	d9f0      	bls.n	8008870 <USB_SetCurrentMode+0x60>
 800888e:	e001      	b.n	8008894 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008890:	2301      	movs	r3, #1
 8008892:	e005      	b.n	80088a0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	2bc8      	cmp	r3, #200	; 0xc8
 8008898:	d101      	bne.n	800889e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800889a:	2301      	movs	r3, #1
 800889c:	e000      	b.n	80088a0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800889e:	2300      	movs	r3, #0
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3710      	adds	r7, #16
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}

080088a8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80088a8:	b084      	sub	sp, #16
 80088aa:	b580      	push	{r7, lr}
 80088ac:	b086      	sub	sp, #24
 80088ae:	af00      	add	r7, sp, #0
 80088b0:	6078      	str	r0, [r7, #4]
 80088b2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80088b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80088ba:	2300      	movs	r3, #0
 80088bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80088c2:	2300      	movs	r3, #0
 80088c4:	613b      	str	r3, [r7, #16]
 80088c6:	e009      	b.n	80088dc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80088c8:	687a      	ldr	r2, [r7, #4]
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	3340      	adds	r3, #64	; 0x40
 80088ce:	009b      	lsls	r3, r3, #2
 80088d0:	4413      	add	r3, r2
 80088d2:	2200      	movs	r2, #0
 80088d4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	3301      	adds	r3, #1
 80088da:	613b      	str	r3, [r7, #16]
 80088dc:	693b      	ldr	r3, [r7, #16]
 80088de:	2b0e      	cmp	r3, #14
 80088e0:	d9f2      	bls.n	80088c8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80088e2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d11c      	bne.n	8008924 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088f0:	685b      	ldr	r3, [r3, #4]
 80088f2:	68fa      	ldr	r2, [r7, #12]
 80088f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80088f8:	f043 0302 	orr.w	r3, r3, #2
 80088fc:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008902:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800890e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800891a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	639a      	str	r2, [r3, #56]	; 0x38
 8008922:	e00b      	b.n	800893c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008928:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008934:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008942:	461a      	mov	r2, r3
 8008944:	2300      	movs	r3, #0
 8008946:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008948:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800894c:	2b01      	cmp	r3, #1
 800894e:	d10d      	bne.n	800896c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008950:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008954:	2b00      	cmp	r3, #0
 8008956:	d104      	bne.n	8008962 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008958:	2100      	movs	r1, #0
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f000 f968 	bl	8008c30 <USB_SetDevSpeed>
 8008960:	e008      	b.n	8008974 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008962:	2101      	movs	r1, #1
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f000 f963 	bl	8008c30 <USB_SetDevSpeed>
 800896a:	e003      	b.n	8008974 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800896c:	2103      	movs	r1, #3
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f000 f95e 	bl	8008c30 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008974:	2110      	movs	r1, #16
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f000 f8fa 	bl	8008b70 <USB_FlushTxFifo>
 800897c:	4603      	mov	r3, r0
 800897e:	2b00      	cmp	r3, #0
 8008980:	d001      	beq.n	8008986 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8008982:	2301      	movs	r3, #1
 8008984:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f000 f924 	bl	8008bd4 <USB_FlushRxFifo>
 800898c:	4603      	mov	r3, r0
 800898e:	2b00      	cmp	r3, #0
 8008990:	d001      	beq.n	8008996 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8008992:	2301      	movs	r3, #1
 8008994:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800899c:	461a      	mov	r2, r3
 800899e:	2300      	movs	r3, #0
 80089a0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089a8:	461a      	mov	r2, r3
 80089aa:	2300      	movs	r3, #0
 80089ac:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089b4:	461a      	mov	r2, r3
 80089b6:	2300      	movs	r3, #0
 80089b8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80089ba:	2300      	movs	r3, #0
 80089bc:	613b      	str	r3, [r7, #16]
 80089be:	e043      	b.n	8008a48 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80089c0:	693b      	ldr	r3, [r7, #16]
 80089c2:	015a      	lsls	r2, r3, #5
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	4413      	add	r3, r2
 80089c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80089d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80089d6:	d118      	bne.n	8008a0a <USB_DevInit+0x162>
    {
      if (i == 0U)
 80089d8:	693b      	ldr	r3, [r7, #16]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d10a      	bne.n	80089f4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	015a      	lsls	r2, r3, #5
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	4413      	add	r3, r2
 80089e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089ea:	461a      	mov	r2, r3
 80089ec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80089f0:	6013      	str	r3, [r2, #0]
 80089f2:	e013      	b.n	8008a1c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80089f4:	693b      	ldr	r3, [r7, #16]
 80089f6:	015a      	lsls	r2, r3, #5
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	4413      	add	r3, r2
 80089fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a00:	461a      	mov	r2, r3
 8008a02:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008a06:	6013      	str	r3, [r2, #0]
 8008a08:	e008      	b.n	8008a1c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008a0a:	693b      	ldr	r3, [r7, #16]
 8008a0c:	015a      	lsls	r2, r3, #5
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	4413      	add	r3, r2
 8008a12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a16:	461a      	mov	r2, r3
 8008a18:	2300      	movs	r3, #0
 8008a1a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	015a      	lsls	r2, r3, #5
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	4413      	add	r3, r2
 8008a24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a28:	461a      	mov	r2, r3
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	015a      	lsls	r2, r3, #5
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	4413      	add	r3, r2
 8008a36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a3a:	461a      	mov	r2, r3
 8008a3c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008a40:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008a42:	693b      	ldr	r3, [r7, #16]
 8008a44:	3301      	adds	r3, #1
 8008a46:	613b      	str	r3, [r7, #16]
 8008a48:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008a4c:	461a      	mov	r2, r3
 8008a4e:	693b      	ldr	r3, [r7, #16]
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d3b5      	bcc.n	80089c0 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008a54:	2300      	movs	r3, #0
 8008a56:	613b      	str	r3, [r7, #16]
 8008a58:	e043      	b.n	8008ae2 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	015a      	lsls	r2, r3, #5
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	4413      	add	r3, r2
 8008a62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a70:	d118      	bne.n	8008aa4 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8008a72:	693b      	ldr	r3, [r7, #16]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d10a      	bne.n	8008a8e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008a78:	693b      	ldr	r3, [r7, #16]
 8008a7a:	015a      	lsls	r2, r3, #5
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	4413      	add	r3, r2
 8008a80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a84:	461a      	mov	r2, r3
 8008a86:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008a8a:	6013      	str	r3, [r2, #0]
 8008a8c:	e013      	b.n	8008ab6 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008a8e:	693b      	ldr	r3, [r7, #16]
 8008a90:	015a      	lsls	r2, r3, #5
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	4413      	add	r3, r2
 8008a96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a9a:	461a      	mov	r2, r3
 8008a9c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008aa0:	6013      	str	r3, [r2, #0]
 8008aa2:	e008      	b.n	8008ab6 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008aa4:	693b      	ldr	r3, [r7, #16]
 8008aa6:	015a      	lsls	r2, r3, #5
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	4413      	add	r3, r2
 8008aac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ab0:	461a      	mov	r2, r3
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008ab6:	693b      	ldr	r3, [r7, #16]
 8008ab8:	015a      	lsls	r2, r3, #5
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	4413      	add	r3, r2
 8008abe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ac2:	461a      	mov	r2, r3
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008ac8:	693b      	ldr	r3, [r7, #16]
 8008aca:	015a      	lsls	r2, r3, #5
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	4413      	add	r3, r2
 8008ad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ad4:	461a      	mov	r2, r3
 8008ad6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008ada:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	3301      	adds	r3, #1
 8008ae0:	613b      	str	r3, [r7, #16]
 8008ae2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008ae6:	461a      	mov	r2, r3
 8008ae8:	693b      	ldr	r3, [r7, #16]
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d3b5      	bcc.n	8008a5a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008af4:	691b      	ldr	r3, [r3, #16]
 8008af6:	68fa      	ldr	r2, [r7, #12]
 8008af8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008afc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b00:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2200      	movs	r2, #0
 8008b06:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008b0e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008b10:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d105      	bne.n	8008b24 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	699b      	ldr	r3, [r3, #24]
 8008b1c:	f043 0210 	orr.w	r2, r3, #16
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	699a      	ldr	r2, [r3, #24]
 8008b28:	4b10      	ldr	r3, [pc, #64]	; (8008b6c <USB_DevInit+0x2c4>)
 8008b2a:	4313      	orrs	r3, r2
 8008b2c:	687a      	ldr	r2, [r7, #4]
 8008b2e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008b30:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d005      	beq.n	8008b44 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	699b      	ldr	r3, [r3, #24]
 8008b3c:	f043 0208 	orr.w	r2, r3, #8
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008b44:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008b48:	2b01      	cmp	r3, #1
 8008b4a:	d107      	bne.n	8008b5c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	699b      	ldr	r3, [r3, #24]
 8008b50:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008b54:	f043 0304 	orr.w	r3, r3, #4
 8008b58:	687a      	ldr	r2, [r7, #4]
 8008b5a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008b5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3718      	adds	r7, #24
 8008b62:	46bd      	mov	sp, r7
 8008b64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008b68:	b004      	add	sp, #16
 8008b6a:	4770      	bx	lr
 8008b6c:	803c3800 	.word	0x803c3800

08008b70 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008b70:	b480      	push	{r7}
 8008b72:	b085      	sub	sp, #20
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
 8008b78:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	3301      	adds	r3, #1
 8008b82:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008b8a:	d901      	bls.n	8008b90 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008b8c:	2303      	movs	r3, #3
 8008b8e:	e01b      	b.n	8008bc8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	691b      	ldr	r3, [r3, #16]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	daf2      	bge.n	8008b7e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	019b      	lsls	r3, r3, #6
 8008ba0:	f043 0220 	orr.w	r2, r3, #32
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	3301      	adds	r3, #1
 8008bac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008bb4:	d901      	bls.n	8008bba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008bb6:	2303      	movs	r3, #3
 8008bb8:	e006      	b.n	8008bc8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	691b      	ldr	r3, [r3, #16]
 8008bbe:	f003 0320 	and.w	r3, r3, #32
 8008bc2:	2b20      	cmp	r3, #32
 8008bc4:	d0f0      	beq.n	8008ba8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008bc6:	2300      	movs	r3, #0
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3714      	adds	r7, #20
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd2:	4770      	bx	lr

08008bd4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b085      	sub	sp, #20
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	3301      	adds	r3, #1
 8008be4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008bec:	d901      	bls.n	8008bf2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008bee:	2303      	movs	r3, #3
 8008bf0:	e018      	b.n	8008c24 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	691b      	ldr	r3, [r3, #16]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	daf2      	bge.n	8008be0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2210      	movs	r2, #16
 8008c02:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	3301      	adds	r3, #1
 8008c08:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008c10:	d901      	bls.n	8008c16 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008c12:	2303      	movs	r3, #3
 8008c14:	e006      	b.n	8008c24 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	691b      	ldr	r3, [r3, #16]
 8008c1a:	f003 0310 	and.w	r3, r3, #16
 8008c1e:	2b10      	cmp	r3, #16
 8008c20:	d0f0      	beq.n	8008c04 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008c22:	2300      	movs	r3, #0
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	3714      	adds	r7, #20
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2e:	4770      	bx	lr

08008c30 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008c30:	b480      	push	{r7}
 8008c32:	b085      	sub	sp, #20
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
 8008c38:	460b      	mov	r3, r1
 8008c3a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c46:	681a      	ldr	r2, [r3, #0]
 8008c48:	78fb      	ldrb	r3, [r7, #3]
 8008c4a:	68f9      	ldr	r1, [r7, #12]
 8008c4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c50:	4313      	orrs	r3, r2
 8008c52:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008c54:	2300      	movs	r3, #0
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	3714      	adds	r7, #20
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c60:	4770      	bx	lr

08008c62 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8008c62:	b480      	push	{r7}
 8008c64:	b087      	sub	sp, #28
 8008c66:	af00      	add	r7, sp, #0
 8008c68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c74:	689b      	ldr	r3, [r3, #8]
 8008c76:	f003 0306 	and.w	r3, r3, #6
 8008c7a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d102      	bne.n	8008c88 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008c82:	2300      	movs	r3, #0
 8008c84:	75fb      	strb	r3, [r7, #23]
 8008c86:	e00a      	b.n	8008c9e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	2b02      	cmp	r3, #2
 8008c8c:	d002      	beq.n	8008c94 <USB_GetDevSpeed+0x32>
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	2b06      	cmp	r3, #6
 8008c92:	d102      	bne.n	8008c9a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008c94:	2302      	movs	r3, #2
 8008c96:	75fb      	strb	r3, [r7, #23]
 8008c98:	e001      	b.n	8008c9e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008c9a:	230f      	movs	r3, #15
 8008c9c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008c9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	371c      	adds	r7, #28
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr

08008cac <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008cac:	b480      	push	{r7}
 8008cae:	b085      	sub	sp, #20
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
 8008cb4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	781b      	ldrb	r3, [r3, #0]
 8008cbe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	785b      	ldrb	r3, [r3, #1]
 8008cc4:	2b01      	cmp	r3, #1
 8008cc6:	d13a      	bne.n	8008d3e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cce:	69da      	ldr	r2, [r3, #28]
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	781b      	ldrb	r3, [r3, #0]
 8008cd4:	f003 030f 	and.w	r3, r3, #15
 8008cd8:	2101      	movs	r1, #1
 8008cda:	fa01 f303 	lsl.w	r3, r1, r3
 8008cde:	b29b      	uxth	r3, r3
 8008ce0:	68f9      	ldr	r1, [r7, #12]
 8008ce2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008ce6:	4313      	orrs	r3, r2
 8008ce8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	015a      	lsls	r2, r3, #5
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	4413      	add	r3, r2
 8008cf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d155      	bne.n	8008dac <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	015a      	lsls	r2, r3, #5
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	4413      	add	r3, r2
 8008d08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d0c:	681a      	ldr	r2, [r3, #0]
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	689b      	ldr	r3, [r3, #8]
 8008d12:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	791b      	ldrb	r3, [r3, #4]
 8008d1a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008d1c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	059b      	lsls	r3, r3, #22
 8008d22:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008d24:	4313      	orrs	r3, r2
 8008d26:	68ba      	ldr	r2, [r7, #8]
 8008d28:	0151      	lsls	r1, r2, #5
 8008d2a:	68fa      	ldr	r2, [r7, #12]
 8008d2c:	440a      	add	r2, r1
 8008d2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d3a:	6013      	str	r3, [r2, #0]
 8008d3c:	e036      	b.n	8008dac <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d44:	69da      	ldr	r2, [r3, #28]
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	781b      	ldrb	r3, [r3, #0]
 8008d4a:	f003 030f 	and.w	r3, r3, #15
 8008d4e:	2101      	movs	r1, #1
 8008d50:	fa01 f303 	lsl.w	r3, r1, r3
 8008d54:	041b      	lsls	r3, r3, #16
 8008d56:	68f9      	ldr	r1, [r7, #12]
 8008d58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008d5c:	4313      	orrs	r3, r2
 8008d5e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	015a      	lsls	r2, r3, #5
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	4413      	add	r3, r2
 8008d68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d11a      	bne.n	8008dac <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	015a      	lsls	r2, r3, #5
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	4413      	add	r3, r2
 8008d7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d82:	681a      	ldr	r2, [r3, #0]
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	689b      	ldr	r3, [r3, #8]
 8008d88:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	791b      	ldrb	r3, [r3, #4]
 8008d90:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008d92:	430b      	orrs	r3, r1
 8008d94:	4313      	orrs	r3, r2
 8008d96:	68ba      	ldr	r2, [r7, #8]
 8008d98:	0151      	lsls	r1, r2, #5
 8008d9a:	68fa      	ldr	r2, [r7, #12]
 8008d9c:	440a      	add	r2, r1
 8008d9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008da2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008da6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008daa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008dac:	2300      	movs	r3, #0
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	3714      	adds	r7, #20
 8008db2:	46bd      	mov	sp, r7
 8008db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db8:	4770      	bx	lr
	...

08008dbc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b085      	sub	sp, #20
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
 8008dc4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	781b      	ldrb	r3, [r3, #0]
 8008dce:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	785b      	ldrb	r3, [r3, #1]
 8008dd4:	2b01      	cmp	r3, #1
 8008dd6:	d161      	bne.n	8008e9c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	015a      	lsls	r2, r3, #5
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	4413      	add	r3, r2
 8008de0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008dea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008dee:	d11f      	bne.n	8008e30 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	015a      	lsls	r2, r3, #5
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	4413      	add	r3, r2
 8008df8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	68ba      	ldr	r2, [r7, #8]
 8008e00:	0151      	lsls	r1, r2, #5
 8008e02:	68fa      	ldr	r2, [r7, #12]
 8008e04:	440a      	add	r2, r1
 8008e06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e0a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008e0e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	015a      	lsls	r2, r3, #5
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	4413      	add	r3, r2
 8008e18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	68ba      	ldr	r2, [r7, #8]
 8008e20:	0151      	lsls	r1, r2, #5
 8008e22:	68fa      	ldr	r2, [r7, #12]
 8008e24:	440a      	add	r2, r1
 8008e26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e2a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008e2e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	781b      	ldrb	r3, [r3, #0]
 8008e3c:	f003 030f 	and.w	r3, r3, #15
 8008e40:	2101      	movs	r1, #1
 8008e42:	fa01 f303 	lsl.w	r3, r1, r3
 8008e46:	b29b      	uxth	r3, r3
 8008e48:	43db      	mvns	r3, r3
 8008e4a:	68f9      	ldr	r1, [r7, #12]
 8008e4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008e50:	4013      	ands	r3, r2
 8008e52:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e5a:	69da      	ldr	r2, [r3, #28]
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	781b      	ldrb	r3, [r3, #0]
 8008e60:	f003 030f 	and.w	r3, r3, #15
 8008e64:	2101      	movs	r1, #1
 8008e66:	fa01 f303 	lsl.w	r3, r1, r3
 8008e6a:	b29b      	uxth	r3, r3
 8008e6c:	43db      	mvns	r3, r3
 8008e6e:	68f9      	ldr	r1, [r7, #12]
 8008e70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008e74:	4013      	ands	r3, r2
 8008e76:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	015a      	lsls	r2, r3, #5
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	4413      	add	r3, r2
 8008e80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e84:	681a      	ldr	r2, [r3, #0]
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	0159      	lsls	r1, r3, #5
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	440b      	add	r3, r1
 8008e8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e92:	4619      	mov	r1, r3
 8008e94:	4b35      	ldr	r3, [pc, #212]	; (8008f6c <USB_DeactivateEndpoint+0x1b0>)
 8008e96:	4013      	ands	r3, r2
 8008e98:	600b      	str	r3, [r1, #0]
 8008e9a:	e060      	b.n	8008f5e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	015a      	lsls	r2, r3, #5
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	4413      	add	r3, r2
 8008ea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008eae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008eb2:	d11f      	bne.n	8008ef4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	015a      	lsls	r2, r3, #5
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	4413      	add	r3, r2
 8008ebc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	68ba      	ldr	r2, [r7, #8]
 8008ec4:	0151      	lsls	r1, r2, #5
 8008ec6:	68fa      	ldr	r2, [r7, #12]
 8008ec8:	440a      	add	r2, r1
 8008eca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ece:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008ed2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	015a      	lsls	r2, r3, #5
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	4413      	add	r3, r2
 8008edc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	68ba      	ldr	r2, [r7, #8]
 8008ee4:	0151      	lsls	r1, r2, #5
 8008ee6:	68fa      	ldr	r2, [r7, #12]
 8008ee8:	440a      	add	r2, r1
 8008eea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008eee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008ef2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008efa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	781b      	ldrb	r3, [r3, #0]
 8008f00:	f003 030f 	and.w	r3, r3, #15
 8008f04:	2101      	movs	r1, #1
 8008f06:	fa01 f303 	lsl.w	r3, r1, r3
 8008f0a:	041b      	lsls	r3, r3, #16
 8008f0c:	43db      	mvns	r3, r3
 8008f0e:	68f9      	ldr	r1, [r7, #12]
 8008f10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008f14:	4013      	ands	r3, r2
 8008f16:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f1e:	69da      	ldr	r2, [r3, #28]
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	781b      	ldrb	r3, [r3, #0]
 8008f24:	f003 030f 	and.w	r3, r3, #15
 8008f28:	2101      	movs	r1, #1
 8008f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8008f2e:	041b      	lsls	r3, r3, #16
 8008f30:	43db      	mvns	r3, r3
 8008f32:	68f9      	ldr	r1, [r7, #12]
 8008f34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008f38:	4013      	ands	r3, r2
 8008f3a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	015a      	lsls	r2, r3, #5
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	4413      	add	r3, r2
 8008f44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f48:	681a      	ldr	r2, [r3, #0]
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	0159      	lsls	r1, r3, #5
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	440b      	add	r3, r1
 8008f52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f56:	4619      	mov	r1, r3
 8008f58:	4b05      	ldr	r3, [pc, #20]	; (8008f70 <USB_DeactivateEndpoint+0x1b4>)
 8008f5a:	4013      	ands	r3, r2
 8008f5c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008f5e:	2300      	movs	r3, #0
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	3714      	adds	r7, #20
 8008f64:	46bd      	mov	sp, r7
 8008f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6a:	4770      	bx	lr
 8008f6c:	ec337800 	.word	0xec337800
 8008f70:	eff37800 	.word	0xeff37800

08008f74 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b08a      	sub	sp, #40	; 0x28
 8008f78:	af02      	add	r7, sp, #8
 8008f7a:	60f8      	str	r0, [r7, #12]
 8008f7c:	60b9      	str	r1, [r7, #8]
 8008f7e:	4613      	mov	r3, r2
 8008f80:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	781b      	ldrb	r3, [r3, #0]
 8008f8a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	785b      	ldrb	r3, [r3, #1]
 8008f90:	2b01      	cmp	r3, #1
 8008f92:	f040 817a 	bne.w	800928a <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	691b      	ldr	r3, [r3, #16]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d132      	bne.n	8009004 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008f9e:	69bb      	ldr	r3, [r7, #24]
 8008fa0:	015a      	lsls	r2, r3, #5
 8008fa2:	69fb      	ldr	r3, [r7, #28]
 8008fa4:	4413      	add	r3, r2
 8008fa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008faa:	691b      	ldr	r3, [r3, #16]
 8008fac:	69ba      	ldr	r2, [r7, #24]
 8008fae:	0151      	lsls	r1, r2, #5
 8008fb0:	69fa      	ldr	r2, [r7, #28]
 8008fb2:	440a      	add	r2, r1
 8008fb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fb8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008fbc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008fc0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008fc2:	69bb      	ldr	r3, [r7, #24]
 8008fc4:	015a      	lsls	r2, r3, #5
 8008fc6:	69fb      	ldr	r3, [r7, #28]
 8008fc8:	4413      	add	r3, r2
 8008fca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fce:	691b      	ldr	r3, [r3, #16]
 8008fd0:	69ba      	ldr	r2, [r7, #24]
 8008fd2:	0151      	lsls	r1, r2, #5
 8008fd4:	69fa      	ldr	r2, [r7, #28]
 8008fd6:	440a      	add	r2, r1
 8008fd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fdc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008fe0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008fe2:	69bb      	ldr	r3, [r7, #24]
 8008fe4:	015a      	lsls	r2, r3, #5
 8008fe6:	69fb      	ldr	r3, [r7, #28]
 8008fe8:	4413      	add	r3, r2
 8008fea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fee:	691b      	ldr	r3, [r3, #16]
 8008ff0:	69ba      	ldr	r2, [r7, #24]
 8008ff2:	0151      	lsls	r1, r2, #5
 8008ff4:	69fa      	ldr	r2, [r7, #28]
 8008ff6:	440a      	add	r2, r1
 8008ff8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ffc:	0cdb      	lsrs	r3, r3, #19
 8008ffe:	04db      	lsls	r3, r3, #19
 8009000:	6113      	str	r3, [r2, #16]
 8009002:	e092      	b.n	800912a <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009004:	69bb      	ldr	r3, [r7, #24]
 8009006:	015a      	lsls	r2, r3, #5
 8009008:	69fb      	ldr	r3, [r7, #28]
 800900a:	4413      	add	r3, r2
 800900c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009010:	691b      	ldr	r3, [r3, #16]
 8009012:	69ba      	ldr	r2, [r7, #24]
 8009014:	0151      	lsls	r1, r2, #5
 8009016:	69fa      	ldr	r2, [r7, #28]
 8009018:	440a      	add	r2, r1
 800901a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800901e:	0cdb      	lsrs	r3, r3, #19
 8009020:	04db      	lsls	r3, r3, #19
 8009022:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009024:	69bb      	ldr	r3, [r7, #24]
 8009026:	015a      	lsls	r2, r3, #5
 8009028:	69fb      	ldr	r3, [r7, #28]
 800902a:	4413      	add	r3, r2
 800902c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009030:	691b      	ldr	r3, [r3, #16]
 8009032:	69ba      	ldr	r2, [r7, #24]
 8009034:	0151      	lsls	r1, r2, #5
 8009036:	69fa      	ldr	r2, [r7, #28]
 8009038:	440a      	add	r2, r1
 800903a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800903e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009042:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009046:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8009048:	69bb      	ldr	r3, [r7, #24]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d11a      	bne.n	8009084 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800904e:	68bb      	ldr	r3, [r7, #8]
 8009050:	691a      	ldr	r2, [r3, #16]
 8009052:	68bb      	ldr	r3, [r7, #8]
 8009054:	689b      	ldr	r3, [r3, #8]
 8009056:	429a      	cmp	r2, r3
 8009058:	d903      	bls.n	8009062 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	689a      	ldr	r2, [r3, #8]
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009062:	69bb      	ldr	r3, [r7, #24]
 8009064:	015a      	lsls	r2, r3, #5
 8009066:	69fb      	ldr	r3, [r7, #28]
 8009068:	4413      	add	r3, r2
 800906a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800906e:	691b      	ldr	r3, [r3, #16]
 8009070:	69ba      	ldr	r2, [r7, #24]
 8009072:	0151      	lsls	r1, r2, #5
 8009074:	69fa      	ldr	r2, [r7, #28]
 8009076:	440a      	add	r2, r1
 8009078:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800907c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009080:	6113      	str	r3, [r2, #16]
 8009082:	e01b      	b.n	80090bc <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009084:	69bb      	ldr	r3, [r7, #24]
 8009086:	015a      	lsls	r2, r3, #5
 8009088:	69fb      	ldr	r3, [r7, #28]
 800908a:	4413      	add	r3, r2
 800908c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009090:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009092:	68bb      	ldr	r3, [r7, #8]
 8009094:	6919      	ldr	r1, [r3, #16]
 8009096:	68bb      	ldr	r3, [r7, #8]
 8009098:	689b      	ldr	r3, [r3, #8]
 800909a:	440b      	add	r3, r1
 800909c:	1e59      	subs	r1, r3, #1
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	689b      	ldr	r3, [r3, #8]
 80090a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80090a6:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80090a8:	4ba2      	ldr	r3, [pc, #648]	; (8009334 <USB_EPStartXfer+0x3c0>)
 80090aa:	400b      	ands	r3, r1
 80090ac:	69b9      	ldr	r1, [r7, #24]
 80090ae:	0148      	lsls	r0, r1, #5
 80090b0:	69f9      	ldr	r1, [r7, #28]
 80090b2:	4401      	add	r1, r0
 80090b4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80090b8:	4313      	orrs	r3, r2
 80090ba:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80090bc:	69bb      	ldr	r3, [r7, #24]
 80090be:	015a      	lsls	r2, r3, #5
 80090c0:	69fb      	ldr	r3, [r7, #28]
 80090c2:	4413      	add	r3, r2
 80090c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090c8:	691a      	ldr	r2, [r3, #16]
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	691b      	ldr	r3, [r3, #16]
 80090ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80090d2:	69b9      	ldr	r1, [r7, #24]
 80090d4:	0148      	lsls	r0, r1, #5
 80090d6:	69f9      	ldr	r1, [r7, #28]
 80090d8:	4401      	add	r1, r0
 80090da:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80090de:	4313      	orrs	r3, r2
 80090e0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	791b      	ldrb	r3, [r3, #4]
 80090e6:	2b01      	cmp	r3, #1
 80090e8:	d11f      	bne.n	800912a <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80090ea:	69bb      	ldr	r3, [r7, #24]
 80090ec:	015a      	lsls	r2, r3, #5
 80090ee:	69fb      	ldr	r3, [r7, #28]
 80090f0:	4413      	add	r3, r2
 80090f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090f6:	691b      	ldr	r3, [r3, #16]
 80090f8:	69ba      	ldr	r2, [r7, #24]
 80090fa:	0151      	lsls	r1, r2, #5
 80090fc:	69fa      	ldr	r2, [r7, #28]
 80090fe:	440a      	add	r2, r1
 8009100:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009104:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009108:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800910a:	69bb      	ldr	r3, [r7, #24]
 800910c:	015a      	lsls	r2, r3, #5
 800910e:	69fb      	ldr	r3, [r7, #28]
 8009110:	4413      	add	r3, r2
 8009112:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009116:	691b      	ldr	r3, [r3, #16]
 8009118:	69ba      	ldr	r2, [r7, #24]
 800911a:	0151      	lsls	r1, r2, #5
 800911c:	69fa      	ldr	r2, [r7, #28]
 800911e:	440a      	add	r2, r1
 8009120:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009124:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009128:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800912a:	79fb      	ldrb	r3, [r7, #7]
 800912c:	2b01      	cmp	r3, #1
 800912e:	d14b      	bne.n	80091c8 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	69db      	ldr	r3, [r3, #28]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d009      	beq.n	800914c <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009138:	69bb      	ldr	r3, [r7, #24]
 800913a:	015a      	lsls	r2, r3, #5
 800913c:	69fb      	ldr	r3, [r7, #28]
 800913e:	4413      	add	r3, r2
 8009140:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009144:	461a      	mov	r2, r3
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	69db      	ldr	r3, [r3, #28]
 800914a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	791b      	ldrb	r3, [r3, #4]
 8009150:	2b01      	cmp	r3, #1
 8009152:	d128      	bne.n	80091a6 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009154:	69fb      	ldr	r3, [r7, #28]
 8009156:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800915a:	689b      	ldr	r3, [r3, #8]
 800915c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009160:	2b00      	cmp	r3, #0
 8009162:	d110      	bne.n	8009186 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009164:	69bb      	ldr	r3, [r7, #24]
 8009166:	015a      	lsls	r2, r3, #5
 8009168:	69fb      	ldr	r3, [r7, #28]
 800916a:	4413      	add	r3, r2
 800916c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	69ba      	ldr	r2, [r7, #24]
 8009174:	0151      	lsls	r1, r2, #5
 8009176:	69fa      	ldr	r2, [r7, #28]
 8009178:	440a      	add	r2, r1
 800917a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800917e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009182:	6013      	str	r3, [r2, #0]
 8009184:	e00f      	b.n	80091a6 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009186:	69bb      	ldr	r3, [r7, #24]
 8009188:	015a      	lsls	r2, r3, #5
 800918a:	69fb      	ldr	r3, [r7, #28]
 800918c:	4413      	add	r3, r2
 800918e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	69ba      	ldr	r2, [r7, #24]
 8009196:	0151      	lsls	r1, r2, #5
 8009198:	69fa      	ldr	r2, [r7, #28]
 800919a:	440a      	add	r2, r1
 800919c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80091a4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80091a6:	69bb      	ldr	r3, [r7, #24]
 80091a8:	015a      	lsls	r2, r3, #5
 80091aa:	69fb      	ldr	r3, [r7, #28]
 80091ac:	4413      	add	r3, r2
 80091ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	69ba      	ldr	r2, [r7, #24]
 80091b6:	0151      	lsls	r1, r2, #5
 80091b8:	69fa      	ldr	r2, [r7, #28]
 80091ba:	440a      	add	r2, r1
 80091bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091c0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80091c4:	6013      	str	r3, [r2, #0]
 80091c6:	e165      	b.n	8009494 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80091c8:	69bb      	ldr	r3, [r7, #24]
 80091ca:	015a      	lsls	r2, r3, #5
 80091cc:	69fb      	ldr	r3, [r7, #28]
 80091ce:	4413      	add	r3, r2
 80091d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	69ba      	ldr	r2, [r7, #24]
 80091d8:	0151      	lsls	r1, r2, #5
 80091da:	69fa      	ldr	r2, [r7, #28]
 80091dc:	440a      	add	r2, r1
 80091de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091e2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80091e6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	791b      	ldrb	r3, [r3, #4]
 80091ec:	2b01      	cmp	r3, #1
 80091ee:	d015      	beq.n	800921c <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	691b      	ldr	r3, [r3, #16]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	f000 814d 	beq.w	8009494 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80091fa:	69fb      	ldr	r3, [r7, #28]
 80091fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009200:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	781b      	ldrb	r3, [r3, #0]
 8009206:	f003 030f 	and.w	r3, r3, #15
 800920a:	2101      	movs	r1, #1
 800920c:	fa01 f303 	lsl.w	r3, r1, r3
 8009210:	69f9      	ldr	r1, [r7, #28]
 8009212:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009216:	4313      	orrs	r3, r2
 8009218:	634b      	str	r3, [r1, #52]	; 0x34
 800921a:	e13b      	b.n	8009494 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800921c:	69fb      	ldr	r3, [r7, #28]
 800921e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009222:	689b      	ldr	r3, [r3, #8]
 8009224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009228:	2b00      	cmp	r3, #0
 800922a:	d110      	bne.n	800924e <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800922c:	69bb      	ldr	r3, [r7, #24]
 800922e:	015a      	lsls	r2, r3, #5
 8009230:	69fb      	ldr	r3, [r7, #28]
 8009232:	4413      	add	r3, r2
 8009234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	69ba      	ldr	r2, [r7, #24]
 800923c:	0151      	lsls	r1, r2, #5
 800923e:	69fa      	ldr	r2, [r7, #28]
 8009240:	440a      	add	r2, r1
 8009242:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009246:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800924a:	6013      	str	r3, [r2, #0]
 800924c:	e00f      	b.n	800926e <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800924e:	69bb      	ldr	r3, [r7, #24]
 8009250:	015a      	lsls	r2, r3, #5
 8009252:	69fb      	ldr	r3, [r7, #28]
 8009254:	4413      	add	r3, r2
 8009256:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	69ba      	ldr	r2, [r7, #24]
 800925e:	0151      	lsls	r1, r2, #5
 8009260:	69fa      	ldr	r2, [r7, #28]
 8009262:	440a      	add	r2, r1
 8009264:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009268:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800926c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	68d9      	ldr	r1, [r3, #12]
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	781a      	ldrb	r2, [r3, #0]
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	691b      	ldr	r3, [r3, #16]
 800927a:	b298      	uxth	r0, r3
 800927c:	79fb      	ldrb	r3, [r7, #7]
 800927e:	9300      	str	r3, [sp, #0]
 8009280:	4603      	mov	r3, r0
 8009282:	68f8      	ldr	r0, [r7, #12]
 8009284:	f000 f9b8 	bl	80095f8 <USB_WritePacket>
 8009288:	e104      	b.n	8009494 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800928a:	69bb      	ldr	r3, [r7, #24]
 800928c:	015a      	lsls	r2, r3, #5
 800928e:	69fb      	ldr	r3, [r7, #28]
 8009290:	4413      	add	r3, r2
 8009292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009296:	691b      	ldr	r3, [r3, #16]
 8009298:	69ba      	ldr	r2, [r7, #24]
 800929a:	0151      	lsls	r1, r2, #5
 800929c:	69fa      	ldr	r2, [r7, #28]
 800929e:	440a      	add	r2, r1
 80092a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092a4:	0cdb      	lsrs	r3, r3, #19
 80092a6:	04db      	lsls	r3, r3, #19
 80092a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80092aa:	69bb      	ldr	r3, [r7, #24]
 80092ac:	015a      	lsls	r2, r3, #5
 80092ae:	69fb      	ldr	r3, [r7, #28]
 80092b0:	4413      	add	r3, r2
 80092b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092b6:	691b      	ldr	r3, [r3, #16]
 80092b8:	69ba      	ldr	r2, [r7, #24]
 80092ba:	0151      	lsls	r1, r2, #5
 80092bc:	69fa      	ldr	r2, [r7, #28]
 80092be:	440a      	add	r2, r1
 80092c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092c4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80092c8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80092cc:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80092ce:	69bb      	ldr	r3, [r7, #24]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d131      	bne.n	8009338 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	691b      	ldr	r3, [r3, #16]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d003      	beq.n	80092e4 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	689a      	ldr	r2, [r3, #8]
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	689a      	ldr	r2, [r3, #8]
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80092ec:	69bb      	ldr	r3, [r7, #24]
 80092ee:	015a      	lsls	r2, r3, #5
 80092f0:	69fb      	ldr	r3, [r7, #28]
 80092f2:	4413      	add	r3, r2
 80092f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092f8:	691a      	ldr	r2, [r3, #16]
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	6a1b      	ldr	r3, [r3, #32]
 80092fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009302:	69b9      	ldr	r1, [r7, #24]
 8009304:	0148      	lsls	r0, r1, #5
 8009306:	69f9      	ldr	r1, [r7, #28]
 8009308:	4401      	add	r1, r0
 800930a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800930e:	4313      	orrs	r3, r2
 8009310:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009312:	69bb      	ldr	r3, [r7, #24]
 8009314:	015a      	lsls	r2, r3, #5
 8009316:	69fb      	ldr	r3, [r7, #28]
 8009318:	4413      	add	r3, r2
 800931a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800931e:	691b      	ldr	r3, [r3, #16]
 8009320:	69ba      	ldr	r2, [r7, #24]
 8009322:	0151      	lsls	r1, r2, #5
 8009324:	69fa      	ldr	r2, [r7, #28]
 8009326:	440a      	add	r2, r1
 8009328:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800932c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009330:	6113      	str	r3, [r2, #16]
 8009332:	e061      	b.n	80093f8 <USB_EPStartXfer+0x484>
 8009334:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	691b      	ldr	r3, [r3, #16]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d123      	bne.n	8009388 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009340:	69bb      	ldr	r3, [r7, #24]
 8009342:	015a      	lsls	r2, r3, #5
 8009344:	69fb      	ldr	r3, [r7, #28]
 8009346:	4413      	add	r3, r2
 8009348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800934c:	691a      	ldr	r2, [r3, #16]
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	689b      	ldr	r3, [r3, #8]
 8009352:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009356:	69b9      	ldr	r1, [r7, #24]
 8009358:	0148      	lsls	r0, r1, #5
 800935a:	69f9      	ldr	r1, [r7, #28]
 800935c:	4401      	add	r1, r0
 800935e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009362:	4313      	orrs	r3, r2
 8009364:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009366:	69bb      	ldr	r3, [r7, #24]
 8009368:	015a      	lsls	r2, r3, #5
 800936a:	69fb      	ldr	r3, [r7, #28]
 800936c:	4413      	add	r3, r2
 800936e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009372:	691b      	ldr	r3, [r3, #16]
 8009374:	69ba      	ldr	r2, [r7, #24]
 8009376:	0151      	lsls	r1, r2, #5
 8009378:	69fa      	ldr	r2, [r7, #28]
 800937a:	440a      	add	r2, r1
 800937c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009380:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009384:	6113      	str	r3, [r2, #16]
 8009386:	e037      	b.n	80093f8 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	691a      	ldr	r2, [r3, #16]
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	689b      	ldr	r3, [r3, #8]
 8009390:	4413      	add	r3, r2
 8009392:	1e5a      	subs	r2, r3, #1
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	689b      	ldr	r3, [r3, #8]
 8009398:	fbb2 f3f3 	udiv	r3, r2, r3
 800939c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	689b      	ldr	r3, [r3, #8]
 80093a2:	8afa      	ldrh	r2, [r7, #22]
 80093a4:	fb03 f202 	mul.w	r2, r3, r2
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80093ac:	69bb      	ldr	r3, [r7, #24]
 80093ae:	015a      	lsls	r2, r3, #5
 80093b0:	69fb      	ldr	r3, [r7, #28]
 80093b2:	4413      	add	r3, r2
 80093b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093b8:	691a      	ldr	r2, [r3, #16]
 80093ba:	8afb      	ldrh	r3, [r7, #22]
 80093bc:	04d9      	lsls	r1, r3, #19
 80093be:	4b38      	ldr	r3, [pc, #224]	; (80094a0 <USB_EPStartXfer+0x52c>)
 80093c0:	400b      	ands	r3, r1
 80093c2:	69b9      	ldr	r1, [r7, #24]
 80093c4:	0148      	lsls	r0, r1, #5
 80093c6:	69f9      	ldr	r1, [r7, #28]
 80093c8:	4401      	add	r1, r0
 80093ca:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80093ce:	4313      	orrs	r3, r2
 80093d0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80093d2:	69bb      	ldr	r3, [r7, #24]
 80093d4:	015a      	lsls	r2, r3, #5
 80093d6:	69fb      	ldr	r3, [r7, #28]
 80093d8:	4413      	add	r3, r2
 80093da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093de:	691a      	ldr	r2, [r3, #16]
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	6a1b      	ldr	r3, [r3, #32]
 80093e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80093e8:	69b9      	ldr	r1, [r7, #24]
 80093ea:	0148      	lsls	r0, r1, #5
 80093ec:	69f9      	ldr	r1, [r7, #28]
 80093ee:	4401      	add	r1, r0
 80093f0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80093f4:	4313      	orrs	r3, r2
 80093f6:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80093f8:	79fb      	ldrb	r3, [r7, #7]
 80093fa:	2b01      	cmp	r3, #1
 80093fc:	d10d      	bne.n	800941a <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80093fe:	68bb      	ldr	r3, [r7, #8]
 8009400:	68db      	ldr	r3, [r3, #12]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d009      	beq.n	800941a <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	68d9      	ldr	r1, [r3, #12]
 800940a:	69bb      	ldr	r3, [r7, #24]
 800940c:	015a      	lsls	r2, r3, #5
 800940e:	69fb      	ldr	r3, [r7, #28]
 8009410:	4413      	add	r3, r2
 8009412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009416:	460a      	mov	r2, r1
 8009418:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	791b      	ldrb	r3, [r3, #4]
 800941e:	2b01      	cmp	r3, #1
 8009420:	d128      	bne.n	8009474 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009422:	69fb      	ldr	r3, [r7, #28]
 8009424:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009428:	689b      	ldr	r3, [r3, #8]
 800942a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800942e:	2b00      	cmp	r3, #0
 8009430:	d110      	bne.n	8009454 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009432:	69bb      	ldr	r3, [r7, #24]
 8009434:	015a      	lsls	r2, r3, #5
 8009436:	69fb      	ldr	r3, [r7, #28]
 8009438:	4413      	add	r3, r2
 800943a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	69ba      	ldr	r2, [r7, #24]
 8009442:	0151      	lsls	r1, r2, #5
 8009444:	69fa      	ldr	r2, [r7, #28]
 8009446:	440a      	add	r2, r1
 8009448:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800944c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009450:	6013      	str	r3, [r2, #0]
 8009452:	e00f      	b.n	8009474 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009454:	69bb      	ldr	r3, [r7, #24]
 8009456:	015a      	lsls	r2, r3, #5
 8009458:	69fb      	ldr	r3, [r7, #28]
 800945a:	4413      	add	r3, r2
 800945c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	69ba      	ldr	r2, [r7, #24]
 8009464:	0151      	lsls	r1, r2, #5
 8009466:	69fa      	ldr	r2, [r7, #28]
 8009468:	440a      	add	r2, r1
 800946a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800946e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009472:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009474:	69bb      	ldr	r3, [r7, #24]
 8009476:	015a      	lsls	r2, r3, #5
 8009478:	69fb      	ldr	r3, [r7, #28]
 800947a:	4413      	add	r3, r2
 800947c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	69ba      	ldr	r2, [r7, #24]
 8009484:	0151      	lsls	r1, r2, #5
 8009486:	69fa      	ldr	r2, [r7, #28]
 8009488:	440a      	add	r2, r1
 800948a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800948e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009492:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009494:	2300      	movs	r3, #0
}
 8009496:	4618      	mov	r0, r3
 8009498:	3720      	adds	r7, #32
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}
 800949e:	bf00      	nop
 80094a0:	1ff80000 	.word	0x1ff80000

080094a4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80094a4:	b480      	push	{r7}
 80094a6:	b087      	sub	sp, #28
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
 80094ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80094ae:	2300      	movs	r3, #0
 80094b0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80094b2:	2300      	movs	r3, #0
 80094b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	785b      	ldrb	r3, [r3, #1]
 80094be:	2b01      	cmp	r3, #1
 80094c0:	d14a      	bne.n	8009558 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	781b      	ldrb	r3, [r3, #0]
 80094c6:	015a      	lsls	r2, r3, #5
 80094c8:	693b      	ldr	r3, [r7, #16]
 80094ca:	4413      	add	r3, r2
 80094cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80094d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80094da:	f040 8086 	bne.w	80095ea <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	781b      	ldrb	r3, [r3, #0]
 80094e2:	015a      	lsls	r2, r3, #5
 80094e4:	693b      	ldr	r3, [r7, #16]
 80094e6:	4413      	add	r3, r2
 80094e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	683a      	ldr	r2, [r7, #0]
 80094f0:	7812      	ldrb	r2, [r2, #0]
 80094f2:	0151      	lsls	r1, r2, #5
 80094f4:	693a      	ldr	r2, [r7, #16]
 80094f6:	440a      	add	r2, r1
 80094f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094fc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009500:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	781b      	ldrb	r3, [r3, #0]
 8009506:	015a      	lsls	r2, r3, #5
 8009508:	693b      	ldr	r3, [r7, #16]
 800950a:	4413      	add	r3, r2
 800950c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	683a      	ldr	r2, [r7, #0]
 8009514:	7812      	ldrb	r2, [r2, #0]
 8009516:	0151      	lsls	r1, r2, #5
 8009518:	693a      	ldr	r2, [r7, #16]
 800951a:	440a      	add	r2, r1
 800951c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009520:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009524:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	3301      	adds	r3, #1
 800952a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	f242 7210 	movw	r2, #10000	; 0x2710
 8009532:	4293      	cmp	r3, r2
 8009534:	d902      	bls.n	800953c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009536:	2301      	movs	r3, #1
 8009538:	75fb      	strb	r3, [r7, #23]
          break;
 800953a:	e056      	b.n	80095ea <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	781b      	ldrb	r3, [r3, #0]
 8009540:	015a      	lsls	r2, r3, #5
 8009542:	693b      	ldr	r3, [r7, #16]
 8009544:	4413      	add	r3, r2
 8009546:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009550:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009554:	d0e7      	beq.n	8009526 <USB_EPStopXfer+0x82>
 8009556:	e048      	b.n	80095ea <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	781b      	ldrb	r3, [r3, #0]
 800955c:	015a      	lsls	r2, r3, #5
 800955e:	693b      	ldr	r3, [r7, #16]
 8009560:	4413      	add	r3, r2
 8009562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800956c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009570:	d13b      	bne.n	80095ea <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	781b      	ldrb	r3, [r3, #0]
 8009576:	015a      	lsls	r2, r3, #5
 8009578:	693b      	ldr	r3, [r7, #16]
 800957a:	4413      	add	r3, r2
 800957c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	683a      	ldr	r2, [r7, #0]
 8009584:	7812      	ldrb	r2, [r2, #0]
 8009586:	0151      	lsls	r1, r2, #5
 8009588:	693a      	ldr	r2, [r7, #16]
 800958a:	440a      	add	r2, r1
 800958c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009590:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009594:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	781b      	ldrb	r3, [r3, #0]
 800959a:	015a      	lsls	r2, r3, #5
 800959c:	693b      	ldr	r3, [r7, #16]
 800959e:	4413      	add	r3, r2
 80095a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	683a      	ldr	r2, [r7, #0]
 80095a8:	7812      	ldrb	r2, [r2, #0]
 80095aa:	0151      	lsls	r1, r2, #5
 80095ac:	693a      	ldr	r2, [r7, #16]
 80095ae:	440a      	add	r2, r1
 80095b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80095b8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	3301      	adds	r3, #1
 80095be:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	f242 7210 	movw	r2, #10000	; 0x2710
 80095c6:	4293      	cmp	r3, r2
 80095c8:	d902      	bls.n	80095d0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80095ca:	2301      	movs	r3, #1
 80095cc:	75fb      	strb	r3, [r7, #23]
          break;
 80095ce:	e00c      	b.n	80095ea <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	781b      	ldrb	r3, [r3, #0]
 80095d4:	015a      	lsls	r2, r3, #5
 80095d6:	693b      	ldr	r3, [r7, #16]
 80095d8:	4413      	add	r3, r2
 80095da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80095e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80095e8:	d0e7      	beq.n	80095ba <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80095ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80095ec:	4618      	mov	r0, r3
 80095ee:	371c      	adds	r7, #28
 80095f0:	46bd      	mov	sp, r7
 80095f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f6:	4770      	bx	lr

080095f8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80095f8:	b480      	push	{r7}
 80095fa:	b089      	sub	sp, #36	; 0x24
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	60f8      	str	r0, [r7, #12]
 8009600:	60b9      	str	r1, [r7, #8]
 8009602:	4611      	mov	r1, r2
 8009604:	461a      	mov	r2, r3
 8009606:	460b      	mov	r3, r1
 8009608:	71fb      	strb	r3, [r7, #7]
 800960a:	4613      	mov	r3, r2
 800960c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009616:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800961a:	2b00      	cmp	r3, #0
 800961c:	d123      	bne.n	8009666 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800961e:	88bb      	ldrh	r3, [r7, #4]
 8009620:	3303      	adds	r3, #3
 8009622:	089b      	lsrs	r3, r3, #2
 8009624:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009626:	2300      	movs	r3, #0
 8009628:	61bb      	str	r3, [r7, #24]
 800962a:	e018      	b.n	800965e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800962c:	79fb      	ldrb	r3, [r7, #7]
 800962e:	031a      	lsls	r2, r3, #12
 8009630:	697b      	ldr	r3, [r7, #20]
 8009632:	4413      	add	r3, r2
 8009634:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009638:	461a      	mov	r2, r3
 800963a:	69fb      	ldr	r3, [r7, #28]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009640:	69fb      	ldr	r3, [r7, #28]
 8009642:	3301      	adds	r3, #1
 8009644:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009646:	69fb      	ldr	r3, [r7, #28]
 8009648:	3301      	adds	r3, #1
 800964a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800964c:	69fb      	ldr	r3, [r7, #28]
 800964e:	3301      	adds	r3, #1
 8009650:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009652:	69fb      	ldr	r3, [r7, #28]
 8009654:	3301      	adds	r3, #1
 8009656:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009658:	69bb      	ldr	r3, [r7, #24]
 800965a:	3301      	adds	r3, #1
 800965c:	61bb      	str	r3, [r7, #24]
 800965e:	69ba      	ldr	r2, [r7, #24]
 8009660:	693b      	ldr	r3, [r7, #16]
 8009662:	429a      	cmp	r2, r3
 8009664:	d3e2      	bcc.n	800962c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009666:	2300      	movs	r3, #0
}
 8009668:	4618      	mov	r0, r3
 800966a:	3724      	adds	r7, #36	; 0x24
 800966c:	46bd      	mov	sp, r7
 800966e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009672:	4770      	bx	lr

08009674 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009674:	b480      	push	{r7}
 8009676:	b08b      	sub	sp, #44	; 0x2c
 8009678:	af00      	add	r7, sp, #0
 800967a:	60f8      	str	r0, [r7, #12]
 800967c:	60b9      	str	r1, [r7, #8]
 800967e:	4613      	mov	r3, r2
 8009680:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800968a:	88fb      	ldrh	r3, [r7, #6]
 800968c:	089b      	lsrs	r3, r3, #2
 800968e:	b29b      	uxth	r3, r3
 8009690:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009692:	88fb      	ldrh	r3, [r7, #6]
 8009694:	f003 0303 	and.w	r3, r3, #3
 8009698:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800969a:	2300      	movs	r3, #0
 800969c:	623b      	str	r3, [r7, #32]
 800969e:	e014      	b.n	80096ca <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80096a0:	69bb      	ldr	r3, [r7, #24]
 80096a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096a6:	681a      	ldr	r2, [r3, #0]
 80096a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096aa:	601a      	str	r2, [r3, #0]
    pDest++;
 80096ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ae:	3301      	adds	r3, #1
 80096b0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80096b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096b4:	3301      	adds	r3, #1
 80096b6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80096b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ba:	3301      	adds	r3, #1
 80096bc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80096be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096c0:	3301      	adds	r3, #1
 80096c2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80096c4:	6a3b      	ldr	r3, [r7, #32]
 80096c6:	3301      	adds	r3, #1
 80096c8:	623b      	str	r3, [r7, #32]
 80096ca:	6a3a      	ldr	r2, [r7, #32]
 80096cc:	697b      	ldr	r3, [r7, #20]
 80096ce:	429a      	cmp	r2, r3
 80096d0:	d3e6      	bcc.n	80096a0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80096d2:	8bfb      	ldrh	r3, [r7, #30]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d01e      	beq.n	8009716 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80096d8:	2300      	movs	r3, #0
 80096da:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80096dc:	69bb      	ldr	r3, [r7, #24]
 80096de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096e2:	461a      	mov	r2, r3
 80096e4:	f107 0310 	add.w	r3, r7, #16
 80096e8:	6812      	ldr	r2, [r2, #0]
 80096ea:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80096ec:	693a      	ldr	r2, [r7, #16]
 80096ee:	6a3b      	ldr	r3, [r7, #32]
 80096f0:	b2db      	uxtb	r3, r3
 80096f2:	00db      	lsls	r3, r3, #3
 80096f4:	fa22 f303 	lsr.w	r3, r2, r3
 80096f8:	b2da      	uxtb	r2, r3
 80096fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096fc:	701a      	strb	r2, [r3, #0]
      i++;
 80096fe:	6a3b      	ldr	r3, [r7, #32]
 8009700:	3301      	adds	r3, #1
 8009702:	623b      	str	r3, [r7, #32]
      pDest++;
 8009704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009706:	3301      	adds	r3, #1
 8009708:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800970a:	8bfb      	ldrh	r3, [r7, #30]
 800970c:	3b01      	subs	r3, #1
 800970e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009710:	8bfb      	ldrh	r3, [r7, #30]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d1ea      	bne.n	80096ec <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009718:	4618      	mov	r0, r3
 800971a:	372c      	adds	r7, #44	; 0x2c
 800971c:	46bd      	mov	sp, r7
 800971e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009722:	4770      	bx	lr

08009724 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009724:	b480      	push	{r7}
 8009726:	b085      	sub	sp, #20
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
 800972c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	781b      	ldrb	r3, [r3, #0]
 8009736:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	785b      	ldrb	r3, [r3, #1]
 800973c:	2b01      	cmp	r3, #1
 800973e:	d12c      	bne.n	800979a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	015a      	lsls	r2, r3, #5
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	4413      	add	r3, r2
 8009748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	2b00      	cmp	r3, #0
 8009750:	db12      	blt.n	8009778 <USB_EPSetStall+0x54>
 8009752:	68bb      	ldr	r3, [r7, #8]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d00f      	beq.n	8009778 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009758:	68bb      	ldr	r3, [r7, #8]
 800975a:	015a      	lsls	r2, r3, #5
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	4413      	add	r3, r2
 8009760:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	68ba      	ldr	r2, [r7, #8]
 8009768:	0151      	lsls	r1, r2, #5
 800976a:	68fa      	ldr	r2, [r7, #12]
 800976c:	440a      	add	r2, r1
 800976e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009772:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009776:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	015a      	lsls	r2, r3, #5
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	4413      	add	r3, r2
 8009780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	68ba      	ldr	r2, [r7, #8]
 8009788:	0151      	lsls	r1, r2, #5
 800978a:	68fa      	ldr	r2, [r7, #12]
 800978c:	440a      	add	r2, r1
 800978e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009792:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009796:	6013      	str	r3, [r2, #0]
 8009798:	e02b      	b.n	80097f2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	015a      	lsls	r2, r3, #5
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	4413      	add	r3, r2
 80097a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	db12      	blt.n	80097d2 <USB_EPSetStall+0xae>
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d00f      	beq.n	80097d2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	015a      	lsls	r2, r3, #5
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	4413      	add	r3, r2
 80097ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	68ba      	ldr	r2, [r7, #8]
 80097c2:	0151      	lsls	r1, r2, #5
 80097c4:	68fa      	ldr	r2, [r7, #12]
 80097c6:	440a      	add	r2, r1
 80097c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097cc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80097d0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	015a      	lsls	r2, r3, #5
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	4413      	add	r3, r2
 80097da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	68ba      	ldr	r2, [r7, #8]
 80097e2:	0151      	lsls	r1, r2, #5
 80097e4:	68fa      	ldr	r2, [r7, #12]
 80097e6:	440a      	add	r2, r1
 80097e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80097f0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80097f2:	2300      	movs	r3, #0
}
 80097f4:	4618      	mov	r0, r3
 80097f6:	3714      	adds	r7, #20
 80097f8:	46bd      	mov	sp, r7
 80097fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fe:	4770      	bx	lr

08009800 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009800:	b480      	push	{r7}
 8009802:	b085      	sub	sp, #20
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
 8009808:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	781b      	ldrb	r3, [r3, #0]
 8009812:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	785b      	ldrb	r3, [r3, #1]
 8009818:	2b01      	cmp	r3, #1
 800981a:	d128      	bne.n	800986e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	015a      	lsls	r2, r3, #5
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	4413      	add	r3, r2
 8009824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	68ba      	ldr	r2, [r7, #8]
 800982c:	0151      	lsls	r1, r2, #5
 800982e:	68fa      	ldr	r2, [r7, #12]
 8009830:	440a      	add	r2, r1
 8009832:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009836:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800983a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	791b      	ldrb	r3, [r3, #4]
 8009840:	2b03      	cmp	r3, #3
 8009842:	d003      	beq.n	800984c <USB_EPClearStall+0x4c>
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	791b      	ldrb	r3, [r3, #4]
 8009848:	2b02      	cmp	r3, #2
 800984a:	d138      	bne.n	80098be <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	015a      	lsls	r2, r3, #5
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	4413      	add	r3, r2
 8009854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	68ba      	ldr	r2, [r7, #8]
 800985c:	0151      	lsls	r1, r2, #5
 800985e:	68fa      	ldr	r2, [r7, #12]
 8009860:	440a      	add	r2, r1
 8009862:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009866:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800986a:	6013      	str	r3, [r2, #0]
 800986c:	e027      	b.n	80098be <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800986e:	68bb      	ldr	r3, [r7, #8]
 8009870:	015a      	lsls	r2, r3, #5
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	4413      	add	r3, r2
 8009876:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	68ba      	ldr	r2, [r7, #8]
 800987e:	0151      	lsls	r1, r2, #5
 8009880:	68fa      	ldr	r2, [r7, #12]
 8009882:	440a      	add	r2, r1
 8009884:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009888:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800988c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	791b      	ldrb	r3, [r3, #4]
 8009892:	2b03      	cmp	r3, #3
 8009894:	d003      	beq.n	800989e <USB_EPClearStall+0x9e>
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	791b      	ldrb	r3, [r3, #4]
 800989a:	2b02      	cmp	r3, #2
 800989c:	d10f      	bne.n	80098be <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	015a      	lsls	r2, r3, #5
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	4413      	add	r3, r2
 80098a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	68ba      	ldr	r2, [r7, #8]
 80098ae:	0151      	lsls	r1, r2, #5
 80098b0:	68fa      	ldr	r2, [r7, #12]
 80098b2:	440a      	add	r2, r1
 80098b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80098b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80098bc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80098be:	2300      	movs	r3, #0
}
 80098c0:	4618      	mov	r0, r3
 80098c2:	3714      	adds	r7, #20
 80098c4:	46bd      	mov	sp, r7
 80098c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ca:	4770      	bx	lr

080098cc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80098cc:	b480      	push	{r7}
 80098ce:	b085      	sub	sp, #20
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
 80098d4:	460b      	mov	r3, r1
 80098d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	68fa      	ldr	r2, [r7, #12]
 80098e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80098ea:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80098ee:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098f6:	681a      	ldr	r2, [r3, #0]
 80098f8:	78fb      	ldrb	r3, [r7, #3]
 80098fa:	011b      	lsls	r3, r3, #4
 80098fc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009900:	68f9      	ldr	r1, [r7, #12]
 8009902:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009906:	4313      	orrs	r3, r2
 8009908:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800990a:	2300      	movs	r3, #0
}
 800990c:	4618      	mov	r0, r3
 800990e:	3714      	adds	r7, #20
 8009910:	46bd      	mov	sp, r7
 8009912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009916:	4770      	bx	lr

08009918 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009918:	b480      	push	{r7}
 800991a:	b085      	sub	sp, #20
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	68fa      	ldr	r2, [r7, #12]
 800992e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009932:	f023 0303 	bic.w	r3, r3, #3
 8009936:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800993e:	685b      	ldr	r3, [r3, #4]
 8009940:	68fa      	ldr	r2, [r7, #12]
 8009942:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009946:	f023 0302 	bic.w	r3, r3, #2
 800994a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800994c:	2300      	movs	r3, #0
}
 800994e:	4618      	mov	r0, r3
 8009950:	3714      	adds	r7, #20
 8009952:	46bd      	mov	sp, r7
 8009954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009958:	4770      	bx	lr

0800995a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800995a:	b480      	push	{r7}
 800995c:	b085      	sub	sp, #20
 800995e:	af00      	add	r7, sp, #0
 8009960:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	68fa      	ldr	r2, [r7, #12]
 8009970:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009974:	f023 0303 	bic.w	r3, r3, #3
 8009978:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009980:	685b      	ldr	r3, [r3, #4]
 8009982:	68fa      	ldr	r2, [r7, #12]
 8009984:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009988:	f043 0302 	orr.w	r3, r3, #2
 800998c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800998e:	2300      	movs	r3, #0
}
 8009990:	4618      	mov	r0, r3
 8009992:	3714      	adds	r7, #20
 8009994:	46bd      	mov	sp, r7
 8009996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999a:	4770      	bx	lr

0800999c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800999c:	b480      	push	{r7}
 800999e:	b085      	sub	sp, #20
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	695b      	ldr	r3, [r3, #20]
 80099a8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	699b      	ldr	r3, [r3, #24]
 80099ae:	68fa      	ldr	r2, [r7, #12]
 80099b0:	4013      	ands	r3, r2
 80099b2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80099b4:	68fb      	ldr	r3, [r7, #12]
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	3714      	adds	r7, #20
 80099ba:	46bd      	mov	sp, r7
 80099bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c0:	4770      	bx	lr

080099c2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80099c2:	b480      	push	{r7}
 80099c4:	b085      	sub	sp, #20
 80099c6:	af00      	add	r7, sp, #0
 80099c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099d4:	699b      	ldr	r3, [r3, #24]
 80099d6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099de:	69db      	ldr	r3, [r3, #28]
 80099e0:	68ba      	ldr	r2, [r7, #8]
 80099e2:	4013      	ands	r3, r2
 80099e4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	0c1b      	lsrs	r3, r3, #16
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	3714      	adds	r7, #20
 80099ee:	46bd      	mov	sp, r7
 80099f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f4:	4770      	bx	lr

080099f6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80099f6:	b480      	push	{r7}
 80099f8:	b085      	sub	sp, #20
 80099fa:	af00      	add	r7, sp, #0
 80099fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a08:	699b      	ldr	r3, [r3, #24]
 8009a0a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a12:	69db      	ldr	r3, [r3, #28]
 8009a14:	68ba      	ldr	r2, [r7, #8]
 8009a16:	4013      	ands	r3, r2
 8009a18:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	b29b      	uxth	r3, r3
}
 8009a1e:	4618      	mov	r0, r3
 8009a20:	3714      	adds	r7, #20
 8009a22:	46bd      	mov	sp, r7
 8009a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a28:	4770      	bx	lr

08009a2a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009a2a:	b480      	push	{r7}
 8009a2c:	b085      	sub	sp, #20
 8009a2e:	af00      	add	r7, sp, #0
 8009a30:	6078      	str	r0, [r7, #4]
 8009a32:	460b      	mov	r3, r1
 8009a34:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009a3a:	78fb      	ldrb	r3, [r7, #3]
 8009a3c:	015a      	lsls	r2, r3, #5
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	4413      	add	r3, r2
 8009a42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a46:	689b      	ldr	r3, [r3, #8]
 8009a48:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a50:	695b      	ldr	r3, [r3, #20]
 8009a52:	68ba      	ldr	r2, [r7, #8]
 8009a54:	4013      	ands	r3, r2
 8009a56:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009a58:	68bb      	ldr	r3, [r7, #8]
}
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	3714      	adds	r7, #20
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a64:	4770      	bx	lr

08009a66 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009a66:	b480      	push	{r7}
 8009a68:	b087      	sub	sp, #28
 8009a6a:	af00      	add	r7, sp, #0
 8009a6c:	6078      	str	r0, [r7, #4]
 8009a6e:	460b      	mov	r3, r1
 8009a70:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009a76:	697b      	ldr	r3, [r7, #20]
 8009a78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a7c:	691b      	ldr	r3, [r3, #16]
 8009a7e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009a80:	697b      	ldr	r3, [r7, #20]
 8009a82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a88:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009a8a:	78fb      	ldrb	r3, [r7, #3]
 8009a8c:	f003 030f 	and.w	r3, r3, #15
 8009a90:	68fa      	ldr	r2, [r7, #12]
 8009a92:	fa22 f303 	lsr.w	r3, r2, r3
 8009a96:	01db      	lsls	r3, r3, #7
 8009a98:	b2db      	uxtb	r3, r3
 8009a9a:	693a      	ldr	r2, [r7, #16]
 8009a9c:	4313      	orrs	r3, r2
 8009a9e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009aa0:	78fb      	ldrb	r3, [r7, #3]
 8009aa2:	015a      	lsls	r2, r3, #5
 8009aa4:	697b      	ldr	r3, [r7, #20]
 8009aa6:	4413      	add	r3, r2
 8009aa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009aac:	689b      	ldr	r3, [r3, #8]
 8009aae:	693a      	ldr	r2, [r7, #16]
 8009ab0:	4013      	ands	r3, r2
 8009ab2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009ab4:	68bb      	ldr	r3, [r7, #8]
}
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	371c      	adds	r7, #28
 8009aba:	46bd      	mov	sp, r7
 8009abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac0:	4770      	bx	lr

08009ac2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009ac2:	b480      	push	{r7}
 8009ac4:	b083      	sub	sp, #12
 8009ac6:	af00      	add	r7, sp, #0
 8009ac8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	695b      	ldr	r3, [r3, #20]
 8009ace:	f003 0301 	and.w	r3, r3, #1
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	370c      	adds	r7, #12
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009adc:	4770      	bx	lr

08009ade <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8009ade:	b480      	push	{r7}
 8009ae0:	b085      	sub	sp, #20
 8009ae2:	af00      	add	r7, sp, #0
 8009ae4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	68fa      	ldr	r2, [r7, #12]
 8009af4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009af8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009afc:	f023 0307 	bic.w	r3, r3, #7
 8009b00:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b08:	685b      	ldr	r3, [r3, #4]
 8009b0a:	68fa      	ldr	r2, [r7, #12]
 8009b0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009b10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b14:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009b16:	2300      	movs	r3, #0
}
 8009b18:	4618      	mov	r0, r3
 8009b1a:	3714      	adds	r7, #20
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b22:	4770      	bx	lr

08009b24 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8009b24:	b480      	push	{r7}
 8009b26:	b087      	sub	sp, #28
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	60f8      	str	r0, [r7, #12]
 8009b2c:	460b      	mov	r3, r1
 8009b2e:	607a      	str	r2, [r7, #4]
 8009b30:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	333c      	adds	r3, #60	; 0x3c
 8009b3a:	3304      	adds	r3, #4
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009b40:	693b      	ldr	r3, [r7, #16]
 8009b42:	4a26      	ldr	r2, [pc, #152]	; (8009bdc <USB_EP0_OutStart+0xb8>)
 8009b44:	4293      	cmp	r3, r2
 8009b46:	d90a      	bls.n	8009b5e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009b48:	697b      	ldr	r3, [r7, #20]
 8009b4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009b54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009b58:	d101      	bne.n	8009b5e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	e037      	b.n	8009bce <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009b5e:	697b      	ldr	r3, [r7, #20]
 8009b60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b64:	461a      	mov	r2, r3
 8009b66:	2300      	movs	r3, #0
 8009b68:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009b6a:	697b      	ldr	r3, [r7, #20]
 8009b6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b70:	691b      	ldr	r3, [r3, #16]
 8009b72:	697a      	ldr	r2, [r7, #20]
 8009b74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b78:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009b7c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009b7e:	697b      	ldr	r3, [r7, #20]
 8009b80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b84:	691b      	ldr	r3, [r3, #16]
 8009b86:	697a      	ldr	r2, [r7, #20]
 8009b88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b8c:	f043 0318 	orr.w	r3, r3, #24
 8009b90:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b98:	691b      	ldr	r3, [r3, #16]
 8009b9a:	697a      	ldr	r2, [r7, #20]
 8009b9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ba0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009ba4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009ba6:	7afb      	ldrb	r3, [r7, #11]
 8009ba8:	2b01      	cmp	r3, #1
 8009baa:	d10f      	bne.n	8009bcc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009bac:	697b      	ldr	r3, [r7, #20]
 8009bae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bb2:	461a      	mov	r2, r3
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009bb8:	697b      	ldr	r3, [r7, #20]
 8009bba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	697a      	ldr	r2, [r7, #20]
 8009bc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009bc6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009bca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009bcc:	2300      	movs	r3, #0
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	371c      	adds	r7, #28
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd8:	4770      	bx	lr
 8009bda:	bf00      	nop
 8009bdc:	4f54300a 	.word	0x4f54300a

08009be0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009be0:	b480      	push	{r7}
 8009be2:	b085      	sub	sp, #20
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009be8:	2300      	movs	r3, #0
 8009bea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	3301      	adds	r3, #1
 8009bf0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009bf8:	d901      	bls.n	8009bfe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009bfa:	2303      	movs	r3, #3
 8009bfc:	e01b      	b.n	8009c36 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	691b      	ldr	r3, [r3, #16]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	daf2      	bge.n	8009bec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009c06:	2300      	movs	r3, #0
 8009c08:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	691b      	ldr	r3, [r3, #16]
 8009c0e:	f043 0201 	orr.w	r2, r3, #1
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	3301      	adds	r3, #1
 8009c1a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009c22:	d901      	bls.n	8009c28 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009c24:	2303      	movs	r3, #3
 8009c26:	e006      	b.n	8009c36 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	691b      	ldr	r3, [r3, #16]
 8009c2c:	f003 0301 	and.w	r3, r3, #1
 8009c30:	2b01      	cmp	r3, #1
 8009c32:	d0f0      	beq.n	8009c16 <USB_CoreReset+0x36>

  return HAL_OK;
 8009c34:	2300      	movs	r3, #0
}
 8009c36:	4618      	mov	r0, r3
 8009c38:	3714      	adds	r7, #20
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c40:	4770      	bx	lr
	...

08009c44 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b084      	sub	sp, #16
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
 8009c4c:	460b      	mov	r3, r1
 8009c4e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009c50:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009c54:	f004 fa8e 	bl	800e174 <USBD_static_malloc>
 8009c58:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d109      	bne.n	8009c74 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	32b0      	adds	r2, #176	; 0xb0
 8009c6a:	2100      	movs	r1, #0
 8009c6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009c70:	2302      	movs	r3, #2
 8009c72:	e0d4      	b.n	8009e1e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009c74:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8009c78:	2100      	movs	r1, #0
 8009c7a:	68f8      	ldr	r0, [r7, #12]
 8009c7c:	f00a fced 	bl	801465a <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	32b0      	adds	r2, #176	; 0xb0
 8009c8a:	68f9      	ldr	r1, [r7, #12]
 8009c8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	32b0      	adds	r2, #176	; 0xb0
 8009c9a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	7c1b      	ldrb	r3, [r3, #16]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d138      	bne.n	8009d1e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009cac:	4b5e      	ldr	r3, [pc, #376]	; (8009e28 <USBD_CDC_Init+0x1e4>)
 8009cae:	7819      	ldrb	r1, [r3, #0]
 8009cb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009cb4:	2202      	movs	r2, #2
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f004 f939 	bl	800df2e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009cbc:	4b5a      	ldr	r3, [pc, #360]	; (8009e28 <USBD_CDC_Init+0x1e4>)
 8009cbe:	781b      	ldrb	r3, [r3, #0]
 8009cc0:	f003 020f 	and.w	r2, r3, #15
 8009cc4:	6879      	ldr	r1, [r7, #4]
 8009cc6:	4613      	mov	r3, r2
 8009cc8:	009b      	lsls	r3, r3, #2
 8009cca:	4413      	add	r3, r2
 8009ccc:	009b      	lsls	r3, r3, #2
 8009cce:	440b      	add	r3, r1
 8009cd0:	3324      	adds	r3, #36	; 0x24
 8009cd2:	2201      	movs	r2, #1
 8009cd4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009cd6:	4b55      	ldr	r3, [pc, #340]	; (8009e2c <USBD_CDC_Init+0x1e8>)
 8009cd8:	7819      	ldrb	r1, [r3, #0]
 8009cda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009cde:	2202      	movs	r2, #2
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f004 f924 	bl	800df2e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009ce6:	4b51      	ldr	r3, [pc, #324]	; (8009e2c <USBD_CDC_Init+0x1e8>)
 8009ce8:	781b      	ldrb	r3, [r3, #0]
 8009cea:	f003 020f 	and.w	r2, r3, #15
 8009cee:	6879      	ldr	r1, [r7, #4]
 8009cf0:	4613      	mov	r3, r2
 8009cf2:	009b      	lsls	r3, r3, #2
 8009cf4:	4413      	add	r3, r2
 8009cf6:	009b      	lsls	r3, r3, #2
 8009cf8:	440b      	add	r3, r1
 8009cfa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009cfe:	2201      	movs	r2, #1
 8009d00:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009d02:	4b4b      	ldr	r3, [pc, #300]	; (8009e30 <USBD_CDC_Init+0x1ec>)
 8009d04:	781b      	ldrb	r3, [r3, #0]
 8009d06:	f003 020f 	and.w	r2, r3, #15
 8009d0a:	6879      	ldr	r1, [r7, #4]
 8009d0c:	4613      	mov	r3, r2
 8009d0e:	009b      	lsls	r3, r3, #2
 8009d10:	4413      	add	r3, r2
 8009d12:	009b      	lsls	r3, r3, #2
 8009d14:	440b      	add	r3, r1
 8009d16:	3326      	adds	r3, #38	; 0x26
 8009d18:	2210      	movs	r2, #16
 8009d1a:	801a      	strh	r2, [r3, #0]
 8009d1c:	e035      	b.n	8009d8a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009d1e:	4b42      	ldr	r3, [pc, #264]	; (8009e28 <USBD_CDC_Init+0x1e4>)
 8009d20:	7819      	ldrb	r1, [r3, #0]
 8009d22:	2340      	movs	r3, #64	; 0x40
 8009d24:	2202      	movs	r2, #2
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f004 f901 	bl	800df2e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009d2c:	4b3e      	ldr	r3, [pc, #248]	; (8009e28 <USBD_CDC_Init+0x1e4>)
 8009d2e:	781b      	ldrb	r3, [r3, #0]
 8009d30:	f003 020f 	and.w	r2, r3, #15
 8009d34:	6879      	ldr	r1, [r7, #4]
 8009d36:	4613      	mov	r3, r2
 8009d38:	009b      	lsls	r3, r3, #2
 8009d3a:	4413      	add	r3, r2
 8009d3c:	009b      	lsls	r3, r3, #2
 8009d3e:	440b      	add	r3, r1
 8009d40:	3324      	adds	r3, #36	; 0x24
 8009d42:	2201      	movs	r2, #1
 8009d44:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009d46:	4b39      	ldr	r3, [pc, #228]	; (8009e2c <USBD_CDC_Init+0x1e8>)
 8009d48:	7819      	ldrb	r1, [r3, #0]
 8009d4a:	2340      	movs	r3, #64	; 0x40
 8009d4c:	2202      	movs	r2, #2
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	f004 f8ed 	bl	800df2e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009d54:	4b35      	ldr	r3, [pc, #212]	; (8009e2c <USBD_CDC_Init+0x1e8>)
 8009d56:	781b      	ldrb	r3, [r3, #0]
 8009d58:	f003 020f 	and.w	r2, r3, #15
 8009d5c:	6879      	ldr	r1, [r7, #4]
 8009d5e:	4613      	mov	r3, r2
 8009d60:	009b      	lsls	r3, r3, #2
 8009d62:	4413      	add	r3, r2
 8009d64:	009b      	lsls	r3, r3, #2
 8009d66:	440b      	add	r3, r1
 8009d68:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009d6c:	2201      	movs	r2, #1
 8009d6e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009d70:	4b2f      	ldr	r3, [pc, #188]	; (8009e30 <USBD_CDC_Init+0x1ec>)
 8009d72:	781b      	ldrb	r3, [r3, #0]
 8009d74:	f003 020f 	and.w	r2, r3, #15
 8009d78:	6879      	ldr	r1, [r7, #4]
 8009d7a:	4613      	mov	r3, r2
 8009d7c:	009b      	lsls	r3, r3, #2
 8009d7e:	4413      	add	r3, r2
 8009d80:	009b      	lsls	r3, r3, #2
 8009d82:	440b      	add	r3, r1
 8009d84:	3326      	adds	r3, #38	; 0x26
 8009d86:	2210      	movs	r2, #16
 8009d88:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009d8a:	4b29      	ldr	r3, [pc, #164]	; (8009e30 <USBD_CDC_Init+0x1ec>)
 8009d8c:	7819      	ldrb	r1, [r3, #0]
 8009d8e:	2308      	movs	r3, #8
 8009d90:	2203      	movs	r2, #3
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	f004 f8cb 	bl	800df2e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009d98:	4b25      	ldr	r3, [pc, #148]	; (8009e30 <USBD_CDC_Init+0x1ec>)
 8009d9a:	781b      	ldrb	r3, [r3, #0]
 8009d9c:	f003 020f 	and.w	r2, r3, #15
 8009da0:	6879      	ldr	r1, [r7, #4]
 8009da2:	4613      	mov	r3, r2
 8009da4:	009b      	lsls	r3, r3, #2
 8009da6:	4413      	add	r3, r2
 8009da8:	009b      	lsls	r3, r3, #2
 8009daa:	440b      	add	r3, r1
 8009dac:	3324      	adds	r3, #36	; 0x24
 8009dae:	2201      	movs	r2, #1
 8009db0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	2200      	movs	r2, #0
 8009db6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009dc0:	687a      	ldr	r2, [r7, #4]
 8009dc2:	33b0      	adds	r3, #176	; 0xb0
 8009dc4:	009b      	lsls	r3, r3, #2
 8009dc6:	4413      	add	r3, r2
 8009dc8:	685b      	ldr	r3, [r3, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	2200      	movs	r2, #0
 8009dda:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d101      	bne.n	8009dec <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009de8:	2302      	movs	r3, #2
 8009dea:	e018      	b.n	8009e1e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	7c1b      	ldrb	r3, [r3, #16]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d10a      	bne.n	8009e0a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009df4:	4b0d      	ldr	r3, [pc, #52]	; (8009e2c <USBD_CDC_Init+0x1e8>)
 8009df6:	7819      	ldrb	r1, [r3, #0]
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009dfe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f004 f982 	bl	800e10c <USBD_LL_PrepareReceive>
 8009e08:	e008      	b.n	8009e1c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009e0a:	4b08      	ldr	r3, [pc, #32]	; (8009e2c <USBD_CDC_Init+0x1e8>)
 8009e0c:	7819      	ldrb	r1, [r3, #0]
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009e14:	2340      	movs	r3, #64	; 0x40
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	f004 f978 	bl	800e10c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009e1c:	2300      	movs	r3, #0
}
 8009e1e:	4618      	mov	r0, r3
 8009e20:	3710      	adds	r7, #16
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd80      	pop	{r7, pc}
 8009e26:	bf00      	nop
 8009e28:	20000093 	.word	0x20000093
 8009e2c:	20000094 	.word	0x20000094
 8009e30:	20000095 	.word	0x20000095

08009e34 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b082      	sub	sp, #8
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
 8009e3c:	460b      	mov	r3, r1
 8009e3e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009e40:	4b3a      	ldr	r3, [pc, #232]	; (8009f2c <USBD_CDC_DeInit+0xf8>)
 8009e42:	781b      	ldrb	r3, [r3, #0]
 8009e44:	4619      	mov	r1, r3
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	f004 f897 	bl	800df7a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009e4c:	4b37      	ldr	r3, [pc, #220]	; (8009f2c <USBD_CDC_DeInit+0xf8>)
 8009e4e:	781b      	ldrb	r3, [r3, #0]
 8009e50:	f003 020f 	and.w	r2, r3, #15
 8009e54:	6879      	ldr	r1, [r7, #4]
 8009e56:	4613      	mov	r3, r2
 8009e58:	009b      	lsls	r3, r3, #2
 8009e5a:	4413      	add	r3, r2
 8009e5c:	009b      	lsls	r3, r3, #2
 8009e5e:	440b      	add	r3, r1
 8009e60:	3324      	adds	r3, #36	; 0x24
 8009e62:	2200      	movs	r2, #0
 8009e64:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009e66:	4b32      	ldr	r3, [pc, #200]	; (8009f30 <USBD_CDC_DeInit+0xfc>)
 8009e68:	781b      	ldrb	r3, [r3, #0]
 8009e6a:	4619      	mov	r1, r3
 8009e6c:	6878      	ldr	r0, [r7, #4]
 8009e6e:	f004 f884 	bl	800df7a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009e72:	4b2f      	ldr	r3, [pc, #188]	; (8009f30 <USBD_CDC_DeInit+0xfc>)
 8009e74:	781b      	ldrb	r3, [r3, #0]
 8009e76:	f003 020f 	and.w	r2, r3, #15
 8009e7a:	6879      	ldr	r1, [r7, #4]
 8009e7c:	4613      	mov	r3, r2
 8009e7e:	009b      	lsls	r3, r3, #2
 8009e80:	4413      	add	r3, r2
 8009e82:	009b      	lsls	r3, r3, #2
 8009e84:	440b      	add	r3, r1
 8009e86:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009e8e:	4b29      	ldr	r3, [pc, #164]	; (8009f34 <USBD_CDC_DeInit+0x100>)
 8009e90:	781b      	ldrb	r3, [r3, #0]
 8009e92:	4619      	mov	r1, r3
 8009e94:	6878      	ldr	r0, [r7, #4]
 8009e96:	f004 f870 	bl	800df7a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009e9a:	4b26      	ldr	r3, [pc, #152]	; (8009f34 <USBD_CDC_DeInit+0x100>)
 8009e9c:	781b      	ldrb	r3, [r3, #0]
 8009e9e:	f003 020f 	and.w	r2, r3, #15
 8009ea2:	6879      	ldr	r1, [r7, #4]
 8009ea4:	4613      	mov	r3, r2
 8009ea6:	009b      	lsls	r3, r3, #2
 8009ea8:	4413      	add	r3, r2
 8009eaa:	009b      	lsls	r3, r3, #2
 8009eac:	440b      	add	r3, r1
 8009eae:	3324      	adds	r3, #36	; 0x24
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009eb4:	4b1f      	ldr	r3, [pc, #124]	; (8009f34 <USBD_CDC_DeInit+0x100>)
 8009eb6:	781b      	ldrb	r3, [r3, #0]
 8009eb8:	f003 020f 	and.w	r2, r3, #15
 8009ebc:	6879      	ldr	r1, [r7, #4]
 8009ebe:	4613      	mov	r3, r2
 8009ec0:	009b      	lsls	r3, r3, #2
 8009ec2:	4413      	add	r3, r2
 8009ec4:	009b      	lsls	r3, r3, #2
 8009ec6:	440b      	add	r3, r1
 8009ec8:	3326      	adds	r3, #38	; 0x26
 8009eca:	2200      	movs	r2, #0
 8009ecc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	32b0      	adds	r2, #176	; 0xb0
 8009ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d01f      	beq.n	8009f20 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009ee6:	687a      	ldr	r2, [r7, #4]
 8009ee8:	33b0      	adds	r3, #176	; 0xb0
 8009eea:	009b      	lsls	r3, r3, #2
 8009eec:	4413      	add	r3, r2
 8009eee:	685b      	ldr	r3, [r3, #4]
 8009ef0:	685b      	ldr	r3, [r3, #4]
 8009ef2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	32b0      	adds	r2, #176	; 0xb0
 8009efe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f02:	4618      	mov	r0, r3
 8009f04:	f004 f944 	bl	800e190 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	32b0      	adds	r2, #176	; 0xb0
 8009f12:	2100      	movs	r1, #0
 8009f14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009f20:	2300      	movs	r3, #0
}
 8009f22:	4618      	mov	r0, r3
 8009f24:	3708      	adds	r7, #8
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd80      	pop	{r7, pc}
 8009f2a:	bf00      	nop
 8009f2c:	20000093 	.word	0x20000093
 8009f30:	20000094 	.word	0x20000094
 8009f34:	20000095 	.word	0x20000095

08009f38 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b086      	sub	sp, #24
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
 8009f40:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	32b0      	adds	r2, #176	; 0xb0
 8009f4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f50:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009f52:	2300      	movs	r3, #0
 8009f54:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009f56:	2300      	movs	r3, #0
 8009f58:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009f5e:	693b      	ldr	r3, [r7, #16]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d101      	bne.n	8009f68 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009f64:	2303      	movs	r3, #3
 8009f66:	e0bf      	b.n	800a0e8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	781b      	ldrb	r3, [r3, #0]
 8009f6c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d050      	beq.n	800a016 <USBD_CDC_Setup+0xde>
 8009f74:	2b20      	cmp	r3, #32
 8009f76:	f040 80af 	bne.w	800a0d8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	88db      	ldrh	r3, [r3, #6]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d03a      	beq.n	8009ff8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	781b      	ldrb	r3, [r3, #0]
 8009f86:	b25b      	sxtb	r3, r3
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	da1b      	bge.n	8009fc4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009f92:	687a      	ldr	r2, [r7, #4]
 8009f94:	33b0      	adds	r3, #176	; 0xb0
 8009f96:	009b      	lsls	r3, r3, #2
 8009f98:	4413      	add	r3, r2
 8009f9a:	685b      	ldr	r3, [r3, #4]
 8009f9c:	689b      	ldr	r3, [r3, #8]
 8009f9e:	683a      	ldr	r2, [r7, #0]
 8009fa0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009fa2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009fa4:	683a      	ldr	r2, [r7, #0]
 8009fa6:	88d2      	ldrh	r2, [r2, #6]
 8009fa8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	88db      	ldrh	r3, [r3, #6]
 8009fae:	2b07      	cmp	r3, #7
 8009fb0:	bf28      	it	cs
 8009fb2:	2307      	movcs	r3, #7
 8009fb4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009fb6:	693b      	ldr	r3, [r7, #16]
 8009fb8:	89fa      	ldrh	r2, [r7, #14]
 8009fba:	4619      	mov	r1, r3
 8009fbc:	6878      	ldr	r0, [r7, #4]
 8009fbe:	f001 fd89 	bl	800bad4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009fc2:	e090      	b.n	800a0e6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	785a      	ldrb	r2, [r3, #1]
 8009fc8:	693b      	ldr	r3, [r7, #16]
 8009fca:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	88db      	ldrh	r3, [r3, #6]
 8009fd2:	2b3f      	cmp	r3, #63	; 0x3f
 8009fd4:	d803      	bhi.n	8009fde <USBD_CDC_Setup+0xa6>
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	88db      	ldrh	r3, [r3, #6]
 8009fda:	b2da      	uxtb	r2, r3
 8009fdc:	e000      	b.n	8009fe0 <USBD_CDC_Setup+0xa8>
 8009fde:	2240      	movs	r2, #64	; 0x40
 8009fe0:	693b      	ldr	r3, [r7, #16]
 8009fe2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009fe6:	6939      	ldr	r1, [r7, #16]
 8009fe8:	693b      	ldr	r3, [r7, #16]
 8009fea:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8009fee:	461a      	mov	r2, r3
 8009ff0:	6878      	ldr	r0, [r7, #4]
 8009ff2:	f001 fd9b 	bl	800bb2c <USBD_CtlPrepareRx>
      break;
 8009ff6:	e076      	b.n	800a0e6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009ffe:	687a      	ldr	r2, [r7, #4]
 800a000:	33b0      	adds	r3, #176	; 0xb0
 800a002:	009b      	lsls	r3, r3, #2
 800a004:	4413      	add	r3, r2
 800a006:	685b      	ldr	r3, [r3, #4]
 800a008:	689b      	ldr	r3, [r3, #8]
 800a00a:	683a      	ldr	r2, [r7, #0]
 800a00c:	7850      	ldrb	r0, [r2, #1]
 800a00e:	2200      	movs	r2, #0
 800a010:	6839      	ldr	r1, [r7, #0]
 800a012:	4798      	blx	r3
      break;
 800a014:	e067      	b.n	800a0e6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	785b      	ldrb	r3, [r3, #1]
 800a01a:	2b0b      	cmp	r3, #11
 800a01c:	d851      	bhi.n	800a0c2 <USBD_CDC_Setup+0x18a>
 800a01e:	a201      	add	r2, pc, #4	; (adr r2, 800a024 <USBD_CDC_Setup+0xec>)
 800a020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a024:	0800a055 	.word	0x0800a055
 800a028:	0800a0d1 	.word	0x0800a0d1
 800a02c:	0800a0c3 	.word	0x0800a0c3
 800a030:	0800a0c3 	.word	0x0800a0c3
 800a034:	0800a0c3 	.word	0x0800a0c3
 800a038:	0800a0c3 	.word	0x0800a0c3
 800a03c:	0800a0c3 	.word	0x0800a0c3
 800a040:	0800a0c3 	.word	0x0800a0c3
 800a044:	0800a0c3 	.word	0x0800a0c3
 800a048:	0800a0c3 	.word	0x0800a0c3
 800a04c:	0800a07f 	.word	0x0800a07f
 800a050:	0800a0a9 	.word	0x0800a0a9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a05a:	b2db      	uxtb	r3, r3
 800a05c:	2b03      	cmp	r3, #3
 800a05e:	d107      	bne.n	800a070 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a060:	f107 030a 	add.w	r3, r7, #10
 800a064:	2202      	movs	r2, #2
 800a066:	4619      	mov	r1, r3
 800a068:	6878      	ldr	r0, [r7, #4]
 800a06a:	f001 fd33 	bl	800bad4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a06e:	e032      	b.n	800a0d6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a070:	6839      	ldr	r1, [r7, #0]
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f001 fcbd 	bl	800b9f2 <USBD_CtlError>
            ret = USBD_FAIL;
 800a078:	2303      	movs	r3, #3
 800a07a:	75fb      	strb	r3, [r7, #23]
          break;
 800a07c:	e02b      	b.n	800a0d6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a084:	b2db      	uxtb	r3, r3
 800a086:	2b03      	cmp	r3, #3
 800a088:	d107      	bne.n	800a09a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a08a:	f107 030d 	add.w	r3, r7, #13
 800a08e:	2201      	movs	r2, #1
 800a090:	4619      	mov	r1, r3
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	f001 fd1e 	bl	800bad4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a098:	e01d      	b.n	800a0d6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a09a:	6839      	ldr	r1, [r7, #0]
 800a09c:	6878      	ldr	r0, [r7, #4]
 800a09e:	f001 fca8 	bl	800b9f2 <USBD_CtlError>
            ret = USBD_FAIL;
 800a0a2:	2303      	movs	r3, #3
 800a0a4:	75fb      	strb	r3, [r7, #23]
          break;
 800a0a6:	e016      	b.n	800a0d6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0ae:	b2db      	uxtb	r3, r3
 800a0b0:	2b03      	cmp	r3, #3
 800a0b2:	d00f      	beq.n	800a0d4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800a0b4:	6839      	ldr	r1, [r7, #0]
 800a0b6:	6878      	ldr	r0, [r7, #4]
 800a0b8:	f001 fc9b 	bl	800b9f2 <USBD_CtlError>
            ret = USBD_FAIL;
 800a0bc:	2303      	movs	r3, #3
 800a0be:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a0c0:	e008      	b.n	800a0d4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a0c2:	6839      	ldr	r1, [r7, #0]
 800a0c4:	6878      	ldr	r0, [r7, #4]
 800a0c6:	f001 fc94 	bl	800b9f2 <USBD_CtlError>
          ret = USBD_FAIL;
 800a0ca:	2303      	movs	r3, #3
 800a0cc:	75fb      	strb	r3, [r7, #23]
          break;
 800a0ce:	e002      	b.n	800a0d6 <USBD_CDC_Setup+0x19e>
          break;
 800a0d0:	bf00      	nop
 800a0d2:	e008      	b.n	800a0e6 <USBD_CDC_Setup+0x1ae>
          break;
 800a0d4:	bf00      	nop
      }
      break;
 800a0d6:	e006      	b.n	800a0e6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a0d8:	6839      	ldr	r1, [r7, #0]
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	f001 fc89 	bl	800b9f2 <USBD_CtlError>
      ret = USBD_FAIL;
 800a0e0:	2303      	movs	r3, #3
 800a0e2:	75fb      	strb	r3, [r7, #23]
      break;
 800a0e4:	bf00      	nop
  }

  return (uint8_t)ret;
 800a0e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	3718      	adds	r7, #24
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	bd80      	pop	{r7, pc}

0800a0f0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b084      	sub	sp, #16
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
 800a0f8:	460b      	mov	r3, r1
 800a0fa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a102:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	32b0      	adds	r2, #176	; 0xb0
 800a10e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d101      	bne.n	800a11a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a116:	2303      	movs	r3, #3
 800a118:	e065      	b.n	800a1e6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	32b0      	adds	r2, #176	; 0xb0
 800a124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a128:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a12a:	78fb      	ldrb	r3, [r7, #3]
 800a12c:	f003 020f 	and.w	r2, r3, #15
 800a130:	6879      	ldr	r1, [r7, #4]
 800a132:	4613      	mov	r3, r2
 800a134:	009b      	lsls	r3, r3, #2
 800a136:	4413      	add	r3, r2
 800a138:	009b      	lsls	r3, r3, #2
 800a13a:	440b      	add	r3, r1
 800a13c:	3318      	adds	r3, #24
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d02f      	beq.n	800a1a4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a144:	78fb      	ldrb	r3, [r7, #3]
 800a146:	f003 020f 	and.w	r2, r3, #15
 800a14a:	6879      	ldr	r1, [r7, #4]
 800a14c:	4613      	mov	r3, r2
 800a14e:	009b      	lsls	r3, r3, #2
 800a150:	4413      	add	r3, r2
 800a152:	009b      	lsls	r3, r3, #2
 800a154:	440b      	add	r3, r1
 800a156:	3318      	adds	r3, #24
 800a158:	681a      	ldr	r2, [r3, #0]
 800a15a:	78fb      	ldrb	r3, [r7, #3]
 800a15c:	f003 010f 	and.w	r1, r3, #15
 800a160:	68f8      	ldr	r0, [r7, #12]
 800a162:	460b      	mov	r3, r1
 800a164:	00db      	lsls	r3, r3, #3
 800a166:	440b      	add	r3, r1
 800a168:	009b      	lsls	r3, r3, #2
 800a16a:	4403      	add	r3, r0
 800a16c:	331c      	adds	r3, #28
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	fbb2 f1f3 	udiv	r1, r2, r3
 800a174:	fb01 f303 	mul.w	r3, r1, r3
 800a178:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d112      	bne.n	800a1a4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a17e:	78fb      	ldrb	r3, [r7, #3]
 800a180:	f003 020f 	and.w	r2, r3, #15
 800a184:	6879      	ldr	r1, [r7, #4]
 800a186:	4613      	mov	r3, r2
 800a188:	009b      	lsls	r3, r3, #2
 800a18a:	4413      	add	r3, r2
 800a18c:	009b      	lsls	r3, r3, #2
 800a18e:	440b      	add	r3, r1
 800a190:	3318      	adds	r3, #24
 800a192:	2200      	movs	r2, #0
 800a194:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a196:	78f9      	ldrb	r1, [r7, #3]
 800a198:	2300      	movs	r3, #0
 800a19a:	2200      	movs	r2, #0
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	f003 ff94 	bl	800e0ca <USBD_LL_Transmit>
 800a1a2:	e01f      	b.n	800a1e4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a1b2:	687a      	ldr	r2, [r7, #4]
 800a1b4:	33b0      	adds	r3, #176	; 0xb0
 800a1b6:	009b      	lsls	r3, r3, #2
 800a1b8:	4413      	add	r3, r2
 800a1ba:	685b      	ldr	r3, [r3, #4]
 800a1bc:	691b      	ldr	r3, [r3, #16]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d010      	beq.n	800a1e4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a1c8:	687a      	ldr	r2, [r7, #4]
 800a1ca:	33b0      	adds	r3, #176	; 0xb0
 800a1cc:	009b      	lsls	r3, r3, #2
 800a1ce:	4413      	add	r3, r2
 800a1d0:	685b      	ldr	r3, [r3, #4]
 800a1d2:	691b      	ldr	r3, [r3, #16]
 800a1d4:	68ba      	ldr	r2, [r7, #8]
 800a1d6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a1da:	68ba      	ldr	r2, [r7, #8]
 800a1dc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a1e0:	78fa      	ldrb	r2, [r7, #3]
 800a1e2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a1e4:	2300      	movs	r3, #0
}
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	3710      	adds	r7, #16
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bd80      	pop	{r7, pc}

0800a1ee <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a1ee:	b580      	push	{r7, lr}
 800a1f0:	b084      	sub	sp, #16
 800a1f2:	af00      	add	r7, sp, #0
 800a1f4:	6078      	str	r0, [r7, #4]
 800a1f6:	460b      	mov	r3, r1
 800a1f8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	32b0      	adds	r2, #176	; 0xb0
 800a204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a208:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	32b0      	adds	r2, #176	; 0xb0
 800a214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d101      	bne.n	800a220 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a21c:	2303      	movs	r3, #3
 800a21e:	e01a      	b.n	800a256 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a220:	78fb      	ldrb	r3, [r7, #3]
 800a222:	4619      	mov	r1, r3
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	f003 ff92 	bl	800e14e <USBD_LL_GetRxDataSize>
 800a22a:	4602      	mov	r2, r0
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a238:	687a      	ldr	r2, [r7, #4]
 800a23a:	33b0      	adds	r3, #176	; 0xb0
 800a23c:	009b      	lsls	r3, r3, #2
 800a23e:	4413      	add	r3, r2
 800a240:	685b      	ldr	r3, [r3, #4]
 800a242:	68db      	ldr	r3, [r3, #12]
 800a244:	68fa      	ldr	r2, [r7, #12]
 800a246:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a24a:	68fa      	ldr	r2, [r7, #12]
 800a24c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a250:	4611      	mov	r1, r2
 800a252:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a254:	2300      	movs	r3, #0
}
 800a256:	4618      	mov	r0, r3
 800a258:	3710      	adds	r7, #16
 800a25a:	46bd      	mov	sp, r7
 800a25c:	bd80      	pop	{r7, pc}

0800a25e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a25e:	b580      	push	{r7, lr}
 800a260:	b084      	sub	sp, #16
 800a262:	af00      	add	r7, sp, #0
 800a264:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	32b0      	adds	r2, #176	; 0xb0
 800a270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a274:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d101      	bne.n	800a280 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a27c:	2303      	movs	r3, #3
 800a27e:	e025      	b.n	800a2cc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a286:	687a      	ldr	r2, [r7, #4]
 800a288:	33b0      	adds	r3, #176	; 0xb0
 800a28a:	009b      	lsls	r3, r3, #2
 800a28c:	4413      	add	r3, r2
 800a28e:	685b      	ldr	r3, [r3, #4]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d01a      	beq.n	800a2ca <USBD_CDC_EP0_RxReady+0x6c>
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a29a:	2bff      	cmp	r3, #255	; 0xff
 800a29c:	d015      	beq.n	800a2ca <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a2a4:	687a      	ldr	r2, [r7, #4]
 800a2a6:	33b0      	adds	r3, #176	; 0xb0
 800a2a8:	009b      	lsls	r3, r3, #2
 800a2aa:	4413      	add	r3, r2
 800a2ac:	685b      	ldr	r3, [r3, #4]
 800a2ae:	689b      	ldr	r3, [r3, #8]
 800a2b0:	68fa      	ldr	r2, [r7, #12]
 800a2b2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800a2b6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a2b8:	68fa      	ldr	r2, [r7, #12]
 800a2ba:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a2be:	b292      	uxth	r2, r2
 800a2c0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	22ff      	movs	r2, #255	; 0xff
 800a2c6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a2ca:	2300      	movs	r3, #0
}
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	3710      	adds	r7, #16
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	bd80      	pop	{r7, pc}

0800a2d4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b086      	sub	sp, #24
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a2dc:	2182      	movs	r1, #130	; 0x82
 800a2de:	4818      	ldr	r0, [pc, #96]	; (800a340 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a2e0:	f000 fd4f 	bl	800ad82 <USBD_GetEpDesc>
 800a2e4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a2e6:	2101      	movs	r1, #1
 800a2e8:	4815      	ldr	r0, [pc, #84]	; (800a340 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a2ea:	f000 fd4a 	bl	800ad82 <USBD_GetEpDesc>
 800a2ee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a2f0:	2181      	movs	r1, #129	; 0x81
 800a2f2:	4813      	ldr	r0, [pc, #76]	; (800a340 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a2f4:	f000 fd45 	bl	800ad82 <USBD_GetEpDesc>
 800a2f8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a2fa:	697b      	ldr	r3, [r7, #20]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d002      	beq.n	800a306 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a300:	697b      	ldr	r3, [r7, #20]
 800a302:	2210      	movs	r2, #16
 800a304:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a306:	693b      	ldr	r3, [r7, #16]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d006      	beq.n	800a31a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a30c:	693b      	ldr	r3, [r7, #16]
 800a30e:	2200      	movs	r2, #0
 800a310:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a314:	711a      	strb	r2, [r3, #4]
 800a316:	2200      	movs	r2, #0
 800a318:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d006      	beq.n	800a32e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	2200      	movs	r2, #0
 800a324:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a328:	711a      	strb	r2, [r3, #4]
 800a32a:	2200      	movs	r2, #0
 800a32c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	2243      	movs	r2, #67	; 0x43
 800a332:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a334:	4b02      	ldr	r3, [pc, #8]	; (800a340 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a336:	4618      	mov	r0, r3
 800a338:	3718      	adds	r7, #24
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}
 800a33e:	bf00      	nop
 800a340:	20000050 	.word	0x20000050

0800a344 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b086      	sub	sp, #24
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a34c:	2182      	movs	r1, #130	; 0x82
 800a34e:	4818      	ldr	r0, [pc, #96]	; (800a3b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a350:	f000 fd17 	bl	800ad82 <USBD_GetEpDesc>
 800a354:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a356:	2101      	movs	r1, #1
 800a358:	4815      	ldr	r0, [pc, #84]	; (800a3b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a35a:	f000 fd12 	bl	800ad82 <USBD_GetEpDesc>
 800a35e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a360:	2181      	movs	r1, #129	; 0x81
 800a362:	4813      	ldr	r0, [pc, #76]	; (800a3b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a364:	f000 fd0d 	bl	800ad82 <USBD_GetEpDesc>
 800a368:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a36a:	697b      	ldr	r3, [r7, #20]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d002      	beq.n	800a376 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a370:	697b      	ldr	r3, [r7, #20]
 800a372:	2210      	movs	r2, #16
 800a374:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a376:	693b      	ldr	r3, [r7, #16]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d006      	beq.n	800a38a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a37c:	693b      	ldr	r3, [r7, #16]
 800a37e:	2200      	movs	r2, #0
 800a380:	711a      	strb	r2, [r3, #4]
 800a382:	2200      	movs	r2, #0
 800a384:	f042 0202 	orr.w	r2, r2, #2
 800a388:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d006      	beq.n	800a39e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	2200      	movs	r2, #0
 800a394:	711a      	strb	r2, [r3, #4]
 800a396:	2200      	movs	r2, #0
 800a398:	f042 0202 	orr.w	r2, r2, #2
 800a39c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2243      	movs	r2, #67	; 0x43
 800a3a2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a3a4:	4b02      	ldr	r3, [pc, #8]	; (800a3b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	3718      	adds	r7, #24
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bd80      	pop	{r7, pc}
 800a3ae:	bf00      	nop
 800a3b0:	20000050 	.word	0x20000050

0800a3b4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b086      	sub	sp, #24
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a3bc:	2182      	movs	r1, #130	; 0x82
 800a3be:	4818      	ldr	r0, [pc, #96]	; (800a420 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a3c0:	f000 fcdf 	bl	800ad82 <USBD_GetEpDesc>
 800a3c4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a3c6:	2101      	movs	r1, #1
 800a3c8:	4815      	ldr	r0, [pc, #84]	; (800a420 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a3ca:	f000 fcda 	bl	800ad82 <USBD_GetEpDesc>
 800a3ce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a3d0:	2181      	movs	r1, #129	; 0x81
 800a3d2:	4813      	ldr	r0, [pc, #76]	; (800a420 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a3d4:	f000 fcd5 	bl	800ad82 <USBD_GetEpDesc>
 800a3d8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a3da:	697b      	ldr	r3, [r7, #20]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d002      	beq.n	800a3e6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a3e0:	697b      	ldr	r3, [r7, #20]
 800a3e2:	2210      	movs	r2, #16
 800a3e4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a3e6:	693b      	ldr	r3, [r7, #16]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d006      	beq.n	800a3fa <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a3ec:	693b      	ldr	r3, [r7, #16]
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a3f4:	711a      	strb	r2, [r3, #4]
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d006      	beq.n	800a40e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	2200      	movs	r2, #0
 800a404:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a408:	711a      	strb	r2, [r3, #4]
 800a40a:	2200      	movs	r2, #0
 800a40c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	2243      	movs	r2, #67	; 0x43
 800a412:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a414:	4b02      	ldr	r3, [pc, #8]	; (800a420 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a416:	4618      	mov	r0, r3
 800a418:	3718      	adds	r7, #24
 800a41a:	46bd      	mov	sp, r7
 800a41c:	bd80      	pop	{r7, pc}
 800a41e:	bf00      	nop
 800a420:	20000050 	.word	0x20000050

0800a424 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a424:	b480      	push	{r7}
 800a426:	b083      	sub	sp, #12
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	220a      	movs	r2, #10
 800a430:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a432:	4b03      	ldr	r3, [pc, #12]	; (800a440 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a434:	4618      	mov	r0, r3
 800a436:	370c      	adds	r7, #12
 800a438:	46bd      	mov	sp, r7
 800a43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43e:	4770      	bx	lr
 800a440:	2000000c 	.word	0x2000000c

0800a444 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a444:	b480      	push	{r7}
 800a446:	b083      	sub	sp, #12
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
 800a44c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d101      	bne.n	800a458 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a454:	2303      	movs	r3, #3
 800a456:	e009      	b.n	800a46c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a45e:	687a      	ldr	r2, [r7, #4]
 800a460:	33b0      	adds	r3, #176	; 0xb0
 800a462:	009b      	lsls	r3, r3, #2
 800a464:	4413      	add	r3, r2
 800a466:	683a      	ldr	r2, [r7, #0]
 800a468:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a46a:	2300      	movs	r3, #0
}
 800a46c:	4618      	mov	r0, r3
 800a46e:	370c      	adds	r7, #12
 800a470:	46bd      	mov	sp, r7
 800a472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a476:	4770      	bx	lr

0800a478 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a478:	b480      	push	{r7}
 800a47a:	b087      	sub	sp, #28
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	60f8      	str	r0, [r7, #12]
 800a480:	60b9      	str	r1, [r7, #8]
 800a482:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	32b0      	adds	r2, #176	; 0xb0
 800a48e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a492:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a494:	697b      	ldr	r3, [r7, #20]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d101      	bne.n	800a49e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a49a:	2303      	movs	r3, #3
 800a49c:	e008      	b.n	800a4b0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a49e:	697b      	ldr	r3, [r7, #20]
 800a4a0:	68ba      	ldr	r2, [r7, #8]
 800a4a2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a4a6:	697b      	ldr	r3, [r7, #20]
 800a4a8:	687a      	ldr	r2, [r7, #4]
 800a4aa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a4ae:	2300      	movs	r3, #0
}
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	371c      	adds	r7, #28
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ba:	4770      	bx	lr

0800a4bc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a4bc:	b480      	push	{r7}
 800a4be:	b085      	sub	sp, #20
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
 800a4c4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	32b0      	adds	r2, #176	; 0xb0
 800a4d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4d4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d101      	bne.n	800a4e0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a4dc:	2303      	movs	r3, #3
 800a4de:	e004      	b.n	800a4ea <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	683a      	ldr	r2, [r7, #0]
 800a4e4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a4e8:	2300      	movs	r3, #0
}
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	3714      	adds	r7, #20
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f4:	4770      	bx	lr
	...

0800a4f8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b084      	sub	sp, #16
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	32b0      	adds	r2, #176	; 0xb0
 800a50a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a50e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800a510:	2301      	movs	r3, #1
 800a512:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a514:	68bb      	ldr	r3, [r7, #8]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d101      	bne.n	800a51e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a51a:	2303      	movs	r3, #3
 800a51c:	e025      	b.n	800a56a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800a51e:	68bb      	ldr	r3, [r7, #8]
 800a520:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a524:	2b00      	cmp	r3, #0
 800a526:	d11f      	bne.n	800a568 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	2201      	movs	r2, #1
 800a52c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800a530:	4b10      	ldr	r3, [pc, #64]	; (800a574 <USBD_CDC_TransmitPacket+0x7c>)
 800a532:	781b      	ldrb	r3, [r3, #0]
 800a534:	f003 020f 	and.w	r2, r3, #15
 800a538:	68bb      	ldr	r3, [r7, #8]
 800a53a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800a53e:	6878      	ldr	r0, [r7, #4]
 800a540:	4613      	mov	r3, r2
 800a542:	009b      	lsls	r3, r3, #2
 800a544:	4413      	add	r3, r2
 800a546:	009b      	lsls	r3, r3, #2
 800a548:	4403      	add	r3, r0
 800a54a:	3318      	adds	r3, #24
 800a54c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800a54e:	4b09      	ldr	r3, [pc, #36]	; (800a574 <USBD_CDC_TransmitPacket+0x7c>)
 800a550:	7819      	ldrb	r1, [r3, #0]
 800a552:	68bb      	ldr	r3, [r7, #8]
 800a554:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a558:	68bb      	ldr	r3, [r7, #8]
 800a55a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a55e:	6878      	ldr	r0, [r7, #4]
 800a560:	f003 fdb3 	bl	800e0ca <USBD_LL_Transmit>

    ret = USBD_OK;
 800a564:	2300      	movs	r3, #0
 800a566:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a568:	7bfb      	ldrb	r3, [r7, #15]
}
 800a56a:	4618      	mov	r0, r3
 800a56c:	3710      	adds	r7, #16
 800a56e:	46bd      	mov	sp, r7
 800a570:	bd80      	pop	{r7, pc}
 800a572:	bf00      	nop
 800a574:	20000093 	.word	0x20000093

0800a578 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b084      	sub	sp, #16
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	32b0      	adds	r2, #176	; 0xb0
 800a58a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a58e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	32b0      	adds	r2, #176	; 0xb0
 800a59a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d101      	bne.n	800a5a6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a5a2:	2303      	movs	r3, #3
 800a5a4:	e018      	b.n	800a5d8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	7c1b      	ldrb	r3, [r3, #16]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d10a      	bne.n	800a5c4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a5ae:	4b0c      	ldr	r3, [pc, #48]	; (800a5e0 <USBD_CDC_ReceivePacket+0x68>)
 800a5b0:	7819      	ldrb	r1, [r3, #0]
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a5b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a5bc:	6878      	ldr	r0, [r7, #4]
 800a5be:	f003 fda5 	bl	800e10c <USBD_LL_PrepareReceive>
 800a5c2:	e008      	b.n	800a5d6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a5c4:	4b06      	ldr	r3, [pc, #24]	; (800a5e0 <USBD_CDC_ReceivePacket+0x68>)
 800a5c6:	7819      	ldrb	r1, [r3, #0]
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a5ce:	2340      	movs	r3, #64	; 0x40
 800a5d0:	6878      	ldr	r0, [r7, #4]
 800a5d2:	f003 fd9b 	bl	800e10c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a5d6:	2300      	movs	r3, #0
}
 800a5d8:	4618      	mov	r0, r3
 800a5da:	3710      	adds	r7, #16
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	bd80      	pop	{r7, pc}
 800a5e0:	20000094 	.word	0x20000094

0800a5e4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b086      	sub	sp, #24
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	60f8      	str	r0, [r7, #12]
 800a5ec:	60b9      	str	r1, [r7, #8]
 800a5ee:	4613      	mov	r3, r2
 800a5f0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d101      	bne.n	800a5fc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a5f8:	2303      	movs	r3, #3
 800a5fa:	e01f      	b.n	800a63c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	2200      	movs	r2, #0
 800a600:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	2200      	movs	r2, #0
 800a608:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	2200      	movs	r2, #0
 800a610:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d003      	beq.n	800a622 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	68ba      	ldr	r2, [r7, #8]
 800a61e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	2201      	movs	r2, #1
 800a626:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	79fa      	ldrb	r2, [r7, #7]
 800a62e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a630:	68f8      	ldr	r0, [r7, #12]
 800a632:	f003 fc15 	bl	800de60 <USBD_LL_Init>
 800a636:	4603      	mov	r3, r0
 800a638:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a63a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a63c:	4618      	mov	r0, r3
 800a63e:	3718      	adds	r7, #24
 800a640:	46bd      	mov	sp, r7
 800a642:	bd80      	pop	{r7, pc}

0800a644 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b084      	sub	sp, #16
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
 800a64c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a64e:	2300      	movs	r3, #0
 800a650:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d101      	bne.n	800a65c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a658:	2303      	movs	r3, #3
 800a65a:	e025      	b.n	800a6a8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	683a      	ldr	r2, [r7, #0]
 800a660:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	32ae      	adds	r2, #174	; 0xae
 800a66e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a674:	2b00      	cmp	r3, #0
 800a676:	d00f      	beq.n	800a698 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	32ae      	adds	r2, #174	; 0xae
 800a682:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a688:	f107 020e 	add.w	r2, r7, #14
 800a68c:	4610      	mov	r0, r2
 800a68e:	4798      	blx	r3
 800a690:	4602      	mov	r2, r0
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a69e:	1c5a      	adds	r2, r3, #1
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800a6a6:	2300      	movs	r3, #0
}
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	3710      	adds	r7, #16
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bd80      	pop	{r7, pc}

0800a6b0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b082      	sub	sp, #8
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a6b8:	6878      	ldr	r0, [r7, #4]
 800a6ba:	f003 fc1d 	bl	800def8 <USBD_LL_Start>
 800a6be:	4603      	mov	r3, r0
}
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	3708      	adds	r7, #8
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	bd80      	pop	{r7, pc}

0800a6c8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a6c8:	b480      	push	{r7}
 800a6ca:	b083      	sub	sp, #12
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a6d0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	370c      	adds	r7, #12
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6dc:	4770      	bx	lr

0800a6de <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a6de:	b580      	push	{r7, lr}
 800a6e0:	b084      	sub	sp, #16
 800a6e2:	af00      	add	r7, sp, #0
 800a6e4:	6078      	str	r0, [r7, #4]
 800a6e6:	460b      	mov	r3, r1
 800a6e8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d009      	beq.n	800a70c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	78fa      	ldrb	r2, [r7, #3]
 800a702:	4611      	mov	r1, r2
 800a704:	6878      	ldr	r0, [r7, #4]
 800a706:	4798      	blx	r3
 800a708:	4603      	mov	r3, r0
 800a70a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a70c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a70e:	4618      	mov	r0, r3
 800a710:	3710      	adds	r7, #16
 800a712:	46bd      	mov	sp, r7
 800a714:	bd80      	pop	{r7, pc}

0800a716 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a716:	b580      	push	{r7, lr}
 800a718:	b084      	sub	sp, #16
 800a71a:	af00      	add	r7, sp, #0
 800a71c:	6078      	str	r0, [r7, #4]
 800a71e:	460b      	mov	r3, r1
 800a720:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a722:	2300      	movs	r3, #0
 800a724:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a72c:	685b      	ldr	r3, [r3, #4]
 800a72e:	78fa      	ldrb	r2, [r7, #3]
 800a730:	4611      	mov	r1, r2
 800a732:	6878      	ldr	r0, [r7, #4]
 800a734:	4798      	blx	r3
 800a736:	4603      	mov	r3, r0
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d001      	beq.n	800a740 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a73c:	2303      	movs	r3, #3
 800a73e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a740:	7bfb      	ldrb	r3, [r7, #15]
}
 800a742:	4618      	mov	r0, r3
 800a744:	3710      	adds	r7, #16
 800a746:	46bd      	mov	sp, r7
 800a748:	bd80      	pop	{r7, pc}

0800a74a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a74a:	b580      	push	{r7, lr}
 800a74c:	b084      	sub	sp, #16
 800a74e:	af00      	add	r7, sp, #0
 800a750:	6078      	str	r0, [r7, #4]
 800a752:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a75a:	6839      	ldr	r1, [r7, #0]
 800a75c:	4618      	mov	r0, r3
 800a75e:	f001 f90e 	bl	800b97e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2201      	movs	r2, #1
 800a766:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a770:	461a      	mov	r2, r3
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a77e:	f003 031f 	and.w	r3, r3, #31
 800a782:	2b02      	cmp	r3, #2
 800a784:	d01a      	beq.n	800a7bc <USBD_LL_SetupStage+0x72>
 800a786:	2b02      	cmp	r3, #2
 800a788:	d822      	bhi.n	800a7d0 <USBD_LL_SetupStage+0x86>
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d002      	beq.n	800a794 <USBD_LL_SetupStage+0x4a>
 800a78e:	2b01      	cmp	r3, #1
 800a790:	d00a      	beq.n	800a7a8 <USBD_LL_SetupStage+0x5e>
 800a792:	e01d      	b.n	800a7d0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a79a:	4619      	mov	r1, r3
 800a79c:	6878      	ldr	r0, [r7, #4]
 800a79e:	f000 fb65 	bl	800ae6c <USBD_StdDevReq>
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	73fb      	strb	r3, [r7, #15]
      break;
 800a7a6:	e020      	b.n	800a7ea <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a7ae:	4619      	mov	r1, r3
 800a7b0:	6878      	ldr	r0, [r7, #4]
 800a7b2:	f000 fbcd 	bl	800af50 <USBD_StdItfReq>
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	73fb      	strb	r3, [r7, #15]
      break;
 800a7ba:	e016      	b.n	800a7ea <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a7c2:	4619      	mov	r1, r3
 800a7c4:	6878      	ldr	r0, [r7, #4]
 800a7c6:	f000 fc2f 	bl	800b028 <USBD_StdEPReq>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	73fb      	strb	r3, [r7, #15]
      break;
 800a7ce:	e00c      	b.n	800a7ea <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a7d6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a7da:	b2db      	uxtb	r3, r3
 800a7dc:	4619      	mov	r1, r3
 800a7de:	6878      	ldr	r0, [r7, #4]
 800a7e0:	f003 fbea 	bl	800dfb8 <USBD_LL_StallEP>
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	73fb      	strb	r3, [r7, #15]
      break;
 800a7e8:	bf00      	nop
  }

  return ret;
 800a7ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	3710      	adds	r7, #16
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	bd80      	pop	{r7, pc}

0800a7f4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b086      	sub	sp, #24
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	60f8      	str	r0, [r7, #12]
 800a7fc:	460b      	mov	r3, r1
 800a7fe:	607a      	str	r2, [r7, #4]
 800a800:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a802:	2300      	movs	r3, #0
 800a804:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a806:	7afb      	ldrb	r3, [r7, #11]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d16e      	bne.n	800a8ea <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a812:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a81a:	2b03      	cmp	r3, #3
 800a81c:	f040 8098 	bne.w	800a950 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a820:	693b      	ldr	r3, [r7, #16]
 800a822:	689a      	ldr	r2, [r3, #8]
 800a824:	693b      	ldr	r3, [r7, #16]
 800a826:	68db      	ldr	r3, [r3, #12]
 800a828:	429a      	cmp	r2, r3
 800a82a:	d913      	bls.n	800a854 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a82c:	693b      	ldr	r3, [r7, #16]
 800a82e:	689a      	ldr	r2, [r3, #8]
 800a830:	693b      	ldr	r3, [r7, #16]
 800a832:	68db      	ldr	r3, [r3, #12]
 800a834:	1ad2      	subs	r2, r2, r3
 800a836:	693b      	ldr	r3, [r7, #16]
 800a838:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a83a:	693b      	ldr	r3, [r7, #16]
 800a83c:	68da      	ldr	r2, [r3, #12]
 800a83e:	693b      	ldr	r3, [r7, #16]
 800a840:	689b      	ldr	r3, [r3, #8]
 800a842:	4293      	cmp	r3, r2
 800a844:	bf28      	it	cs
 800a846:	4613      	movcs	r3, r2
 800a848:	461a      	mov	r2, r3
 800a84a:	6879      	ldr	r1, [r7, #4]
 800a84c:	68f8      	ldr	r0, [r7, #12]
 800a84e:	f001 f98a 	bl	800bb66 <USBD_CtlContinueRx>
 800a852:	e07d      	b.n	800a950 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a85a:	f003 031f 	and.w	r3, r3, #31
 800a85e:	2b02      	cmp	r3, #2
 800a860:	d014      	beq.n	800a88c <USBD_LL_DataOutStage+0x98>
 800a862:	2b02      	cmp	r3, #2
 800a864:	d81d      	bhi.n	800a8a2 <USBD_LL_DataOutStage+0xae>
 800a866:	2b00      	cmp	r3, #0
 800a868:	d002      	beq.n	800a870 <USBD_LL_DataOutStage+0x7c>
 800a86a:	2b01      	cmp	r3, #1
 800a86c:	d003      	beq.n	800a876 <USBD_LL_DataOutStage+0x82>
 800a86e:	e018      	b.n	800a8a2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a870:	2300      	movs	r3, #0
 800a872:	75bb      	strb	r3, [r7, #22]
            break;
 800a874:	e018      	b.n	800a8a8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a87c:	b2db      	uxtb	r3, r3
 800a87e:	4619      	mov	r1, r3
 800a880:	68f8      	ldr	r0, [r7, #12]
 800a882:	f000 fa64 	bl	800ad4e <USBD_CoreFindIF>
 800a886:	4603      	mov	r3, r0
 800a888:	75bb      	strb	r3, [r7, #22]
            break;
 800a88a:	e00d      	b.n	800a8a8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a892:	b2db      	uxtb	r3, r3
 800a894:	4619      	mov	r1, r3
 800a896:	68f8      	ldr	r0, [r7, #12]
 800a898:	f000 fa66 	bl	800ad68 <USBD_CoreFindEP>
 800a89c:	4603      	mov	r3, r0
 800a89e:	75bb      	strb	r3, [r7, #22]
            break;
 800a8a0:	e002      	b.n	800a8a8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	75bb      	strb	r3, [r7, #22]
            break;
 800a8a6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a8a8:	7dbb      	ldrb	r3, [r7, #22]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d119      	bne.n	800a8e2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8b4:	b2db      	uxtb	r3, r3
 800a8b6:	2b03      	cmp	r3, #3
 800a8b8:	d113      	bne.n	800a8e2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a8ba:	7dba      	ldrb	r2, [r7, #22]
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	32ae      	adds	r2, #174	; 0xae
 800a8c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8c4:	691b      	ldr	r3, [r3, #16]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d00b      	beq.n	800a8e2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a8ca:	7dba      	ldrb	r2, [r7, #22]
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a8d2:	7dba      	ldrb	r2, [r7, #22]
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	32ae      	adds	r2, #174	; 0xae
 800a8d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8dc:	691b      	ldr	r3, [r3, #16]
 800a8de:	68f8      	ldr	r0, [r7, #12]
 800a8e0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a8e2:	68f8      	ldr	r0, [r7, #12]
 800a8e4:	f001 f950 	bl	800bb88 <USBD_CtlSendStatus>
 800a8e8:	e032      	b.n	800a950 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a8ea:	7afb      	ldrb	r3, [r7, #11]
 800a8ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8f0:	b2db      	uxtb	r3, r3
 800a8f2:	4619      	mov	r1, r3
 800a8f4:	68f8      	ldr	r0, [r7, #12]
 800a8f6:	f000 fa37 	bl	800ad68 <USBD_CoreFindEP>
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a8fe:	7dbb      	ldrb	r3, [r7, #22]
 800a900:	2bff      	cmp	r3, #255	; 0xff
 800a902:	d025      	beq.n	800a950 <USBD_LL_DataOutStage+0x15c>
 800a904:	7dbb      	ldrb	r3, [r7, #22]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d122      	bne.n	800a950 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a910:	b2db      	uxtb	r3, r3
 800a912:	2b03      	cmp	r3, #3
 800a914:	d117      	bne.n	800a946 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a916:	7dba      	ldrb	r2, [r7, #22]
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	32ae      	adds	r2, #174	; 0xae
 800a91c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a920:	699b      	ldr	r3, [r3, #24]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d00f      	beq.n	800a946 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a926:	7dba      	ldrb	r2, [r7, #22]
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a92e:	7dba      	ldrb	r2, [r7, #22]
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	32ae      	adds	r2, #174	; 0xae
 800a934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a938:	699b      	ldr	r3, [r3, #24]
 800a93a:	7afa      	ldrb	r2, [r7, #11]
 800a93c:	4611      	mov	r1, r2
 800a93e:	68f8      	ldr	r0, [r7, #12]
 800a940:	4798      	blx	r3
 800a942:	4603      	mov	r3, r0
 800a944:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a946:	7dfb      	ldrb	r3, [r7, #23]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d001      	beq.n	800a950 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a94c:	7dfb      	ldrb	r3, [r7, #23]
 800a94e:	e000      	b.n	800a952 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a950:	2300      	movs	r3, #0
}
 800a952:	4618      	mov	r0, r3
 800a954:	3718      	adds	r7, #24
 800a956:	46bd      	mov	sp, r7
 800a958:	bd80      	pop	{r7, pc}

0800a95a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a95a:	b580      	push	{r7, lr}
 800a95c:	b086      	sub	sp, #24
 800a95e:	af00      	add	r7, sp, #0
 800a960:	60f8      	str	r0, [r7, #12]
 800a962:	460b      	mov	r3, r1
 800a964:	607a      	str	r2, [r7, #4]
 800a966:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a968:	7afb      	ldrb	r3, [r7, #11]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d16f      	bne.n	800aa4e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	3314      	adds	r3, #20
 800a972:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a97a:	2b02      	cmp	r3, #2
 800a97c:	d15a      	bne.n	800aa34 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a97e:	693b      	ldr	r3, [r7, #16]
 800a980:	689a      	ldr	r2, [r3, #8]
 800a982:	693b      	ldr	r3, [r7, #16]
 800a984:	68db      	ldr	r3, [r3, #12]
 800a986:	429a      	cmp	r2, r3
 800a988:	d914      	bls.n	800a9b4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a98a:	693b      	ldr	r3, [r7, #16]
 800a98c:	689a      	ldr	r2, [r3, #8]
 800a98e:	693b      	ldr	r3, [r7, #16]
 800a990:	68db      	ldr	r3, [r3, #12]
 800a992:	1ad2      	subs	r2, r2, r3
 800a994:	693b      	ldr	r3, [r7, #16]
 800a996:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a998:	693b      	ldr	r3, [r7, #16]
 800a99a:	689b      	ldr	r3, [r3, #8]
 800a99c:	461a      	mov	r2, r3
 800a99e:	6879      	ldr	r1, [r7, #4]
 800a9a0:	68f8      	ldr	r0, [r7, #12]
 800a9a2:	f001 f8b2 	bl	800bb0a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	2100      	movs	r1, #0
 800a9ac:	68f8      	ldr	r0, [r7, #12]
 800a9ae:	f003 fbad 	bl	800e10c <USBD_LL_PrepareReceive>
 800a9b2:	e03f      	b.n	800aa34 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a9b4:	693b      	ldr	r3, [r7, #16]
 800a9b6:	68da      	ldr	r2, [r3, #12]
 800a9b8:	693b      	ldr	r3, [r7, #16]
 800a9ba:	689b      	ldr	r3, [r3, #8]
 800a9bc:	429a      	cmp	r2, r3
 800a9be:	d11c      	bne.n	800a9fa <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a9c0:	693b      	ldr	r3, [r7, #16]
 800a9c2:	685a      	ldr	r2, [r3, #4]
 800a9c4:	693b      	ldr	r3, [r7, #16]
 800a9c6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a9c8:	429a      	cmp	r2, r3
 800a9ca:	d316      	bcc.n	800a9fa <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a9cc:	693b      	ldr	r3, [r7, #16]
 800a9ce:	685a      	ldr	r2, [r3, #4]
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a9d6:	429a      	cmp	r2, r3
 800a9d8:	d20f      	bcs.n	800a9fa <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a9da:	2200      	movs	r2, #0
 800a9dc:	2100      	movs	r1, #0
 800a9de:	68f8      	ldr	r0, [r7, #12]
 800a9e0:	f001 f893 	bl	800bb0a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	2100      	movs	r1, #0
 800a9f2:	68f8      	ldr	r0, [r7, #12]
 800a9f4:	f003 fb8a 	bl	800e10c <USBD_LL_PrepareReceive>
 800a9f8:	e01c      	b.n	800aa34 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa00:	b2db      	uxtb	r3, r3
 800aa02:	2b03      	cmp	r3, #3
 800aa04:	d10f      	bne.n	800aa26 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa0c:	68db      	ldr	r3, [r3, #12]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d009      	beq.n	800aa26 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	2200      	movs	r2, #0
 800aa16:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa20:	68db      	ldr	r3, [r3, #12]
 800aa22:	68f8      	ldr	r0, [r7, #12]
 800aa24:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800aa26:	2180      	movs	r1, #128	; 0x80
 800aa28:	68f8      	ldr	r0, [r7, #12]
 800aa2a:	f003 fac5 	bl	800dfb8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800aa2e:	68f8      	ldr	r0, [r7, #12]
 800aa30:	f001 f8bd 	bl	800bbae <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d03a      	beq.n	800aab4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800aa3e:	68f8      	ldr	r0, [r7, #12]
 800aa40:	f7ff fe42 	bl	800a6c8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	2200      	movs	r2, #0
 800aa48:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800aa4c:	e032      	b.n	800aab4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800aa4e:	7afb      	ldrb	r3, [r7, #11]
 800aa50:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800aa54:	b2db      	uxtb	r3, r3
 800aa56:	4619      	mov	r1, r3
 800aa58:	68f8      	ldr	r0, [r7, #12]
 800aa5a:	f000 f985 	bl	800ad68 <USBD_CoreFindEP>
 800aa5e:	4603      	mov	r3, r0
 800aa60:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aa62:	7dfb      	ldrb	r3, [r7, #23]
 800aa64:	2bff      	cmp	r3, #255	; 0xff
 800aa66:	d025      	beq.n	800aab4 <USBD_LL_DataInStage+0x15a>
 800aa68:	7dfb      	ldrb	r3, [r7, #23]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d122      	bne.n	800aab4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa74:	b2db      	uxtb	r3, r3
 800aa76:	2b03      	cmp	r3, #3
 800aa78:	d11c      	bne.n	800aab4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800aa7a:	7dfa      	ldrb	r2, [r7, #23]
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	32ae      	adds	r2, #174	; 0xae
 800aa80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa84:	695b      	ldr	r3, [r3, #20]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d014      	beq.n	800aab4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800aa8a:	7dfa      	ldrb	r2, [r7, #23]
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800aa92:	7dfa      	ldrb	r2, [r7, #23]
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	32ae      	adds	r2, #174	; 0xae
 800aa98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa9c:	695b      	ldr	r3, [r3, #20]
 800aa9e:	7afa      	ldrb	r2, [r7, #11]
 800aaa0:	4611      	mov	r1, r2
 800aaa2:	68f8      	ldr	r0, [r7, #12]
 800aaa4:	4798      	blx	r3
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800aaaa:	7dbb      	ldrb	r3, [r7, #22]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d001      	beq.n	800aab4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800aab0:	7dbb      	ldrb	r3, [r7, #22]
 800aab2:	e000      	b.n	800aab6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800aab4:	2300      	movs	r3, #0
}
 800aab6:	4618      	mov	r0, r3
 800aab8:	3718      	adds	r7, #24
 800aaba:	46bd      	mov	sp, r7
 800aabc:	bd80      	pop	{r7, pc}

0800aabe <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800aabe:	b580      	push	{r7, lr}
 800aac0:	b084      	sub	sp, #16
 800aac2:	af00      	add	r7, sp, #0
 800aac4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800aac6:	2300      	movs	r3, #0
 800aac8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	2201      	movs	r2, #1
 800aace:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	2200      	movs	r2, #0
 800aad6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2200      	movs	r2, #0
 800aade:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2200      	movs	r2, #0
 800aae4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	2200      	movs	r2, #0
 800aaec:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d014      	beq.n	800ab24 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab00:	685b      	ldr	r3, [r3, #4]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d00e      	beq.n	800ab24 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab0c:	685b      	ldr	r3, [r3, #4]
 800ab0e:	687a      	ldr	r2, [r7, #4]
 800ab10:	6852      	ldr	r2, [r2, #4]
 800ab12:	b2d2      	uxtb	r2, r2
 800ab14:	4611      	mov	r1, r2
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	4798      	blx	r3
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d001      	beq.n	800ab24 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800ab20:	2303      	movs	r3, #3
 800ab22:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ab24:	2340      	movs	r3, #64	; 0x40
 800ab26:	2200      	movs	r2, #0
 800ab28:	2100      	movs	r1, #0
 800ab2a:	6878      	ldr	r0, [r7, #4]
 800ab2c:	f003 f9ff 	bl	800df2e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2201      	movs	r2, #1
 800ab34:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2240      	movs	r2, #64	; 0x40
 800ab3c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ab40:	2340      	movs	r3, #64	; 0x40
 800ab42:	2200      	movs	r2, #0
 800ab44:	2180      	movs	r1, #128	; 0x80
 800ab46:	6878      	ldr	r0, [r7, #4]
 800ab48:	f003 f9f1 	bl	800df2e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2201      	movs	r2, #1
 800ab50:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	2240      	movs	r2, #64	; 0x40
 800ab56:	621a      	str	r2, [r3, #32]

  return ret;
 800ab58:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	3710      	adds	r7, #16
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	bd80      	pop	{r7, pc}

0800ab62 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ab62:	b480      	push	{r7}
 800ab64:	b083      	sub	sp, #12
 800ab66:	af00      	add	r7, sp, #0
 800ab68:	6078      	str	r0, [r7, #4]
 800ab6a:	460b      	mov	r3, r1
 800ab6c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	78fa      	ldrb	r2, [r7, #3]
 800ab72:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ab74:	2300      	movs	r3, #0
}
 800ab76:	4618      	mov	r0, r3
 800ab78:	370c      	adds	r7, #12
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab80:	4770      	bx	lr

0800ab82 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ab82:	b480      	push	{r7}
 800ab84:	b083      	sub	sp, #12
 800ab86:	af00      	add	r7, sp, #0
 800ab88:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab90:	b2db      	uxtb	r3, r3
 800ab92:	2b04      	cmp	r3, #4
 800ab94:	d006      	beq.n	800aba4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab9c:	b2da      	uxtb	r2, r3
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2204      	movs	r2, #4
 800aba8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800abac:	2300      	movs	r3, #0
}
 800abae:	4618      	mov	r0, r3
 800abb0:	370c      	adds	r7, #12
 800abb2:	46bd      	mov	sp, r7
 800abb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb8:	4770      	bx	lr

0800abba <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800abba:	b480      	push	{r7}
 800abbc:	b083      	sub	sp, #12
 800abbe:	af00      	add	r7, sp, #0
 800abc0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abc8:	b2db      	uxtb	r3, r3
 800abca:	2b04      	cmp	r3, #4
 800abcc:	d106      	bne.n	800abdc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800abd4:	b2da      	uxtb	r2, r3
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800abdc:	2300      	movs	r3, #0
}
 800abde:	4618      	mov	r0, r3
 800abe0:	370c      	adds	r7, #12
 800abe2:	46bd      	mov	sp, r7
 800abe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe8:	4770      	bx	lr

0800abea <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800abea:	b580      	push	{r7, lr}
 800abec:	b082      	sub	sp, #8
 800abee:	af00      	add	r7, sp, #0
 800abf0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abf8:	b2db      	uxtb	r3, r3
 800abfa:	2b03      	cmp	r3, #3
 800abfc:	d110      	bne.n	800ac20 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d00b      	beq.n	800ac20 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac0e:	69db      	ldr	r3, [r3, #28]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d005      	beq.n	800ac20 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac1a:	69db      	ldr	r3, [r3, #28]
 800ac1c:	6878      	ldr	r0, [r7, #4]
 800ac1e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800ac20:	2300      	movs	r3, #0
}
 800ac22:	4618      	mov	r0, r3
 800ac24:	3708      	adds	r7, #8
 800ac26:	46bd      	mov	sp, r7
 800ac28:	bd80      	pop	{r7, pc}

0800ac2a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ac2a:	b580      	push	{r7, lr}
 800ac2c:	b082      	sub	sp, #8
 800ac2e:	af00      	add	r7, sp, #0
 800ac30:	6078      	str	r0, [r7, #4]
 800ac32:	460b      	mov	r3, r1
 800ac34:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	32ae      	adds	r2, #174	; 0xae
 800ac40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d101      	bne.n	800ac4c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800ac48:	2303      	movs	r3, #3
 800ac4a:	e01c      	b.n	800ac86 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac52:	b2db      	uxtb	r3, r3
 800ac54:	2b03      	cmp	r3, #3
 800ac56:	d115      	bne.n	800ac84 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	32ae      	adds	r2, #174	; 0xae
 800ac62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac66:	6a1b      	ldr	r3, [r3, #32]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d00b      	beq.n	800ac84 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	32ae      	adds	r2, #174	; 0xae
 800ac76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac7a:	6a1b      	ldr	r3, [r3, #32]
 800ac7c:	78fa      	ldrb	r2, [r7, #3]
 800ac7e:	4611      	mov	r1, r2
 800ac80:	6878      	ldr	r0, [r7, #4]
 800ac82:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ac84:	2300      	movs	r3, #0
}
 800ac86:	4618      	mov	r0, r3
 800ac88:	3708      	adds	r7, #8
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	bd80      	pop	{r7, pc}

0800ac8e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ac8e:	b580      	push	{r7, lr}
 800ac90:	b082      	sub	sp, #8
 800ac92:	af00      	add	r7, sp, #0
 800ac94:	6078      	str	r0, [r7, #4]
 800ac96:	460b      	mov	r3, r1
 800ac98:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	32ae      	adds	r2, #174	; 0xae
 800aca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d101      	bne.n	800acb0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800acac:	2303      	movs	r3, #3
 800acae:	e01c      	b.n	800acea <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800acb6:	b2db      	uxtb	r3, r3
 800acb8:	2b03      	cmp	r3, #3
 800acba:	d115      	bne.n	800ace8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	32ae      	adds	r2, #174	; 0xae
 800acc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800accc:	2b00      	cmp	r3, #0
 800acce:	d00b      	beq.n	800ace8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	32ae      	adds	r2, #174	; 0xae
 800acda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ace0:	78fa      	ldrb	r2, [r7, #3]
 800ace2:	4611      	mov	r1, r2
 800ace4:	6878      	ldr	r0, [r7, #4]
 800ace6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ace8:	2300      	movs	r3, #0
}
 800acea:	4618      	mov	r0, r3
 800acec:	3708      	adds	r7, #8
 800acee:	46bd      	mov	sp, r7
 800acf0:	bd80      	pop	{r7, pc}

0800acf2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800acf2:	b480      	push	{r7}
 800acf4:	b083      	sub	sp, #12
 800acf6:	af00      	add	r7, sp, #0
 800acf8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800acfa:	2300      	movs	r3, #0
}
 800acfc:	4618      	mov	r0, r3
 800acfe:	370c      	adds	r7, #12
 800ad00:	46bd      	mov	sp, r7
 800ad02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad06:	4770      	bx	lr

0800ad08 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b084      	sub	sp, #16
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800ad10:	2300      	movs	r3, #0
 800ad12:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2201      	movs	r2, #1
 800ad18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d00e      	beq.n	800ad44 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad2c:	685b      	ldr	r3, [r3, #4]
 800ad2e:	687a      	ldr	r2, [r7, #4]
 800ad30:	6852      	ldr	r2, [r2, #4]
 800ad32:	b2d2      	uxtb	r2, r2
 800ad34:	4611      	mov	r1, r2
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	4798      	blx	r3
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d001      	beq.n	800ad44 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800ad40:	2303      	movs	r3, #3
 800ad42:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ad44:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad46:	4618      	mov	r0, r3
 800ad48:	3710      	adds	r7, #16
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bd80      	pop	{r7, pc}

0800ad4e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ad4e:	b480      	push	{r7}
 800ad50:	b083      	sub	sp, #12
 800ad52:	af00      	add	r7, sp, #0
 800ad54:	6078      	str	r0, [r7, #4]
 800ad56:	460b      	mov	r3, r1
 800ad58:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ad5a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	370c      	adds	r7, #12
 800ad60:	46bd      	mov	sp, r7
 800ad62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad66:	4770      	bx	lr

0800ad68 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ad68:	b480      	push	{r7}
 800ad6a:	b083      	sub	sp, #12
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
 800ad70:	460b      	mov	r3, r1
 800ad72:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ad74:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ad76:	4618      	mov	r0, r3
 800ad78:	370c      	adds	r7, #12
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad80:	4770      	bx	lr

0800ad82 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ad82:	b580      	push	{r7, lr}
 800ad84:	b086      	sub	sp, #24
 800ad86:	af00      	add	r7, sp, #0
 800ad88:	6078      	str	r0, [r7, #4]
 800ad8a:	460b      	mov	r3, r1
 800ad8c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ad96:	2300      	movs	r3, #0
 800ad98:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	885b      	ldrh	r3, [r3, #2]
 800ad9e:	b29a      	uxth	r2, r3
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	781b      	ldrb	r3, [r3, #0]
 800ada4:	b29b      	uxth	r3, r3
 800ada6:	429a      	cmp	r2, r3
 800ada8:	d920      	bls.n	800adec <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	781b      	ldrb	r3, [r3, #0]
 800adae:	b29b      	uxth	r3, r3
 800adb0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800adb2:	e013      	b.n	800addc <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800adb4:	f107 030a 	add.w	r3, r7, #10
 800adb8:	4619      	mov	r1, r3
 800adba:	6978      	ldr	r0, [r7, #20]
 800adbc:	f000 f81b 	bl	800adf6 <USBD_GetNextDesc>
 800adc0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800adc2:	697b      	ldr	r3, [r7, #20]
 800adc4:	785b      	ldrb	r3, [r3, #1]
 800adc6:	2b05      	cmp	r3, #5
 800adc8:	d108      	bne.n	800addc <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800adca:	697b      	ldr	r3, [r7, #20]
 800adcc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800adce:	693b      	ldr	r3, [r7, #16]
 800add0:	789b      	ldrb	r3, [r3, #2]
 800add2:	78fa      	ldrb	r2, [r7, #3]
 800add4:	429a      	cmp	r2, r3
 800add6:	d008      	beq.n	800adea <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800add8:	2300      	movs	r3, #0
 800adda:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	885b      	ldrh	r3, [r3, #2]
 800ade0:	b29a      	uxth	r2, r3
 800ade2:	897b      	ldrh	r3, [r7, #10]
 800ade4:	429a      	cmp	r2, r3
 800ade6:	d8e5      	bhi.n	800adb4 <USBD_GetEpDesc+0x32>
 800ade8:	e000      	b.n	800adec <USBD_GetEpDesc+0x6a>
          break;
 800adea:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800adec:	693b      	ldr	r3, [r7, #16]
}
 800adee:	4618      	mov	r0, r3
 800adf0:	3718      	adds	r7, #24
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bd80      	pop	{r7, pc}

0800adf6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800adf6:	b480      	push	{r7}
 800adf8:	b085      	sub	sp, #20
 800adfa:	af00      	add	r7, sp, #0
 800adfc:	6078      	str	r0, [r7, #4]
 800adfe:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ae04:	683b      	ldr	r3, [r7, #0]
 800ae06:	881a      	ldrh	r2, [r3, #0]
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	781b      	ldrb	r3, [r3, #0]
 800ae0c:	b29b      	uxth	r3, r3
 800ae0e:	4413      	add	r3, r2
 800ae10:	b29a      	uxth	r2, r3
 800ae12:	683b      	ldr	r3, [r7, #0]
 800ae14:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	781b      	ldrb	r3, [r3, #0]
 800ae1a:	461a      	mov	r2, r3
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	4413      	add	r3, r2
 800ae20:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ae22:	68fb      	ldr	r3, [r7, #12]
}
 800ae24:	4618      	mov	r0, r3
 800ae26:	3714      	adds	r7, #20
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2e:	4770      	bx	lr

0800ae30 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ae30:	b480      	push	{r7}
 800ae32:	b087      	sub	sp, #28
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ae3c:	697b      	ldr	r3, [r7, #20]
 800ae3e:	781b      	ldrb	r3, [r3, #0]
 800ae40:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ae42:	697b      	ldr	r3, [r7, #20]
 800ae44:	3301      	adds	r3, #1
 800ae46:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ae48:	697b      	ldr	r3, [r7, #20]
 800ae4a:	781b      	ldrb	r3, [r3, #0]
 800ae4c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ae4e:	8a3b      	ldrh	r3, [r7, #16]
 800ae50:	021b      	lsls	r3, r3, #8
 800ae52:	b21a      	sxth	r2, r3
 800ae54:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ae58:	4313      	orrs	r3, r2
 800ae5a:	b21b      	sxth	r3, r3
 800ae5c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ae5e:	89fb      	ldrh	r3, [r7, #14]
}
 800ae60:	4618      	mov	r0, r3
 800ae62:	371c      	adds	r7, #28
 800ae64:	46bd      	mov	sp, r7
 800ae66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6a:	4770      	bx	lr

0800ae6c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b084      	sub	sp, #16
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
 800ae74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae76:	2300      	movs	r3, #0
 800ae78:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	781b      	ldrb	r3, [r3, #0]
 800ae7e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ae82:	2b40      	cmp	r3, #64	; 0x40
 800ae84:	d005      	beq.n	800ae92 <USBD_StdDevReq+0x26>
 800ae86:	2b40      	cmp	r3, #64	; 0x40
 800ae88:	d857      	bhi.n	800af3a <USBD_StdDevReq+0xce>
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d00f      	beq.n	800aeae <USBD_StdDevReq+0x42>
 800ae8e:	2b20      	cmp	r3, #32
 800ae90:	d153      	bne.n	800af3a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	32ae      	adds	r2, #174	; 0xae
 800ae9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aea0:	689b      	ldr	r3, [r3, #8]
 800aea2:	6839      	ldr	r1, [r7, #0]
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	4798      	blx	r3
 800aea8:	4603      	mov	r3, r0
 800aeaa:	73fb      	strb	r3, [r7, #15]
      break;
 800aeac:	e04a      	b.n	800af44 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aeae:	683b      	ldr	r3, [r7, #0]
 800aeb0:	785b      	ldrb	r3, [r3, #1]
 800aeb2:	2b09      	cmp	r3, #9
 800aeb4:	d83b      	bhi.n	800af2e <USBD_StdDevReq+0xc2>
 800aeb6:	a201      	add	r2, pc, #4	; (adr r2, 800aebc <USBD_StdDevReq+0x50>)
 800aeb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aebc:	0800af11 	.word	0x0800af11
 800aec0:	0800af25 	.word	0x0800af25
 800aec4:	0800af2f 	.word	0x0800af2f
 800aec8:	0800af1b 	.word	0x0800af1b
 800aecc:	0800af2f 	.word	0x0800af2f
 800aed0:	0800aeef 	.word	0x0800aeef
 800aed4:	0800aee5 	.word	0x0800aee5
 800aed8:	0800af2f 	.word	0x0800af2f
 800aedc:	0800af07 	.word	0x0800af07
 800aee0:	0800aef9 	.word	0x0800aef9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800aee4:	6839      	ldr	r1, [r7, #0]
 800aee6:	6878      	ldr	r0, [r7, #4]
 800aee8:	f000 fa3c 	bl	800b364 <USBD_GetDescriptor>
          break;
 800aeec:	e024      	b.n	800af38 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800aeee:	6839      	ldr	r1, [r7, #0]
 800aef0:	6878      	ldr	r0, [r7, #4]
 800aef2:	f000 fba1 	bl	800b638 <USBD_SetAddress>
          break;
 800aef6:	e01f      	b.n	800af38 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800aef8:	6839      	ldr	r1, [r7, #0]
 800aefa:	6878      	ldr	r0, [r7, #4]
 800aefc:	f000 fbe0 	bl	800b6c0 <USBD_SetConfig>
 800af00:	4603      	mov	r3, r0
 800af02:	73fb      	strb	r3, [r7, #15]
          break;
 800af04:	e018      	b.n	800af38 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800af06:	6839      	ldr	r1, [r7, #0]
 800af08:	6878      	ldr	r0, [r7, #4]
 800af0a:	f000 fc83 	bl	800b814 <USBD_GetConfig>
          break;
 800af0e:	e013      	b.n	800af38 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800af10:	6839      	ldr	r1, [r7, #0]
 800af12:	6878      	ldr	r0, [r7, #4]
 800af14:	f000 fcb4 	bl	800b880 <USBD_GetStatus>
          break;
 800af18:	e00e      	b.n	800af38 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800af1a:	6839      	ldr	r1, [r7, #0]
 800af1c:	6878      	ldr	r0, [r7, #4]
 800af1e:	f000 fce3 	bl	800b8e8 <USBD_SetFeature>
          break;
 800af22:	e009      	b.n	800af38 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800af24:	6839      	ldr	r1, [r7, #0]
 800af26:	6878      	ldr	r0, [r7, #4]
 800af28:	f000 fd07 	bl	800b93a <USBD_ClrFeature>
          break;
 800af2c:	e004      	b.n	800af38 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800af2e:	6839      	ldr	r1, [r7, #0]
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	f000 fd5e 	bl	800b9f2 <USBD_CtlError>
          break;
 800af36:	bf00      	nop
      }
      break;
 800af38:	e004      	b.n	800af44 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800af3a:	6839      	ldr	r1, [r7, #0]
 800af3c:	6878      	ldr	r0, [r7, #4]
 800af3e:	f000 fd58 	bl	800b9f2 <USBD_CtlError>
      break;
 800af42:	bf00      	nop
  }

  return ret;
 800af44:	7bfb      	ldrb	r3, [r7, #15]
}
 800af46:	4618      	mov	r0, r3
 800af48:	3710      	adds	r7, #16
 800af4a:	46bd      	mov	sp, r7
 800af4c:	bd80      	pop	{r7, pc}
 800af4e:	bf00      	nop

0800af50 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b084      	sub	sp, #16
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
 800af58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800af5a:	2300      	movs	r3, #0
 800af5c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	781b      	ldrb	r3, [r3, #0]
 800af62:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800af66:	2b40      	cmp	r3, #64	; 0x40
 800af68:	d005      	beq.n	800af76 <USBD_StdItfReq+0x26>
 800af6a:	2b40      	cmp	r3, #64	; 0x40
 800af6c:	d852      	bhi.n	800b014 <USBD_StdItfReq+0xc4>
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d001      	beq.n	800af76 <USBD_StdItfReq+0x26>
 800af72:	2b20      	cmp	r3, #32
 800af74:	d14e      	bne.n	800b014 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af7c:	b2db      	uxtb	r3, r3
 800af7e:	3b01      	subs	r3, #1
 800af80:	2b02      	cmp	r3, #2
 800af82:	d840      	bhi.n	800b006 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	889b      	ldrh	r3, [r3, #4]
 800af88:	b2db      	uxtb	r3, r3
 800af8a:	2b01      	cmp	r3, #1
 800af8c:	d836      	bhi.n	800affc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	889b      	ldrh	r3, [r3, #4]
 800af92:	b2db      	uxtb	r3, r3
 800af94:	4619      	mov	r1, r3
 800af96:	6878      	ldr	r0, [r7, #4]
 800af98:	f7ff fed9 	bl	800ad4e <USBD_CoreFindIF>
 800af9c:	4603      	mov	r3, r0
 800af9e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800afa0:	7bbb      	ldrb	r3, [r7, #14]
 800afa2:	2bff      	cmp	r3, #255	; 0xff
 800afa4:	d01d      	beq.n	800afe2 <USBD_StdItfReq+0x92>
 800afa6:	7bbb      	ldrb	r3, [r7, #14]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d11a      	bne.n	800afe2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800afac:	7bba      	ldrb	r2, [r7, #14]
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	32ae      	adds	r2, #174	; 0xae
 800afb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afb6:	689b      	ldr	r3, [r3, #8]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d00f      	beq.n	800afdc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800afbc:	7bba      	ldrb	r2, [r7, #14]
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800afc4:	7bba      	ldrb	r2, [r7, #14]
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	32ae      	adds	r2, #174	; 0xae
 800afca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afce:	689b      	ldr	r3, [r3, #8]
 800afd0:	6839      	ldr	r1, [r7, #0]
 800afd2:	6878      	ldr	r0, [r7, #4]
 800afd4:	4798      	blx	r3
 800afd6:	4603      	mov	r3, r0
 800afd8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800afda:	e004      	b.n	800afe6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800afdc:	2303      	movs	r3, #3
 800afde:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800afe0:	e001      	b.n	800afe6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800afe2:	2303      	movs	r3, #3
 800afe4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	88db      	ldrh	r3, [r3, #6]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d110      	bne.n	800b010 <USBD_StdItfReq+0xc0>
 800afee:	7bfb      	ldrb	r3, [r7, #15]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d10d      	bne.n	800b010 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800aff4:	6878      	ldr	r0, [r7, #4]
 800aff6:	f000 fdc7 	bl	800bb88 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800affa:	e009      	b.n	800b010 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800affc:	6839      	ldr	r1, [r7, #0]
 800affe:	6878      	ldr	r0, [r7, #4]
 800b000:	f000 fcf7 	bl	800b9f2 <USBD_CtlError>
          break;
 800b004:	e004      	b.n	800b010 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b006:	6839      	ldr	r1, [r7, #0]
 800b008:	6878      	ldr	r0, [r7, #4]
 800b00a:	f000 fcf2 	bl	800b9f2 <USBD_CtlError>
          break;
 800b00e:	e000      	b.n	800b012 <USBD_StdItfReq+0xc2>
          break;
 800b010:	bf00      	nop
      }
      break;
 800b012:	e004      	b.n	800b01e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b014:	6839      	ldr	r1, [r7, #0]
 800b016:	6878      	ldr	r0, [r7, #4]
 800b018:	f000 fceb 	bl	800b9f2 <USBD_CtlError>
      break;
 800b01c:	bf00      	nop
  }

  return ret;
 800b01e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b020:	4618      	mov	r0, r3
 800b022:	3710      	adds	r7, #16
 800b024:	46bd      	mov	sp, r7
 800b026:	bd80      	pop	{r7, pc}

0800b028 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b084      	sub	sp, #16
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
 800b030:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b032:	2300      	movs	r3, #0
 800b034:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	889b      	ldrh	r3, [r3, #4]
 800b03a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	781b      	ldrb	r3, [r3, #0]
 800b040:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b044:	2b40      	cmp	r3, #64	; 0x40
 800b046:	d007      	beq.n	800b058 <USBD_StdEPReq+0x30>
 800b048:	2b40      	cmp	r3, #64	; 0x40
 800b04a:	f200 817f 	bhi.w	800b34c <USBD_StdEPReq+0x324>
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d02a      	beq.n	800b0a8 <USBD_StdEPReq+0x80>
 800b052:	2b20      	cmp	r3, #32
 800b054:	f040 817a 	bne.w	800b34c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b058:	7bbb      	ldrb	r3, [r7, #14]
 800b05a:	4619      	mov	r1, r3
 800b05c:	6878      	ldr	r0, [r7, #4]
 800b05e:	f7ff fe83 	bl	800ad68 <USBD_CoreFindEP>
 800b062:	4603      	mov	r3, r0
 800b064:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b066:	7b7b      	ldrb	r3, [r7, #13]
 800b068:	2bff      	cmp	r3, #255	; 0xff
 800b06a:	f000 8174 	beq.w	800b356 <USBD_StdEPReq+0x32e>
 800b06e:	7b7b      	ldrb	r3, [r7, #13]
 800b070:	2b00      	cmp	r3, #0
 800b072:	f040 8170 	bne.w	800b356 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b076:	7b7a      	ldrb	r2, [r7, #13]
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b07e:	7b7a      	ldrb	r2, [r7, #13]
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	32ae      	adds	r2, #174	; 0xae
 800b084:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b088:	689b      	ldr	r3, [r3, #8]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	f000 8163 	beq.w	800b356 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b090:	7b7a      	ldrb	r2, [r7, #13]
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	32ae      	adds	r2, #174	; 0xae
 800b096:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b09a:	689b      	ldr	r3, [r3, #8]
 800b09c:	6839      	ldr	r1, [r7, #0]
 800b09e:	6878      	ldr	r0, [r7, #4]
 800b0a0:	4798      	blx	r3
 800b0a2:	4603      	mov	r3, r0
 800b0a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b0a6:	e156      	b.n	800b356 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	785b      	ldrb	r3, [r3, #1]
 800b0ac:	2b03      	cmp	r3, #3
 800b0ae:	d008      	beq.n	800b0c2 <USBD_StdEPReq+0x9a>
 800b0b0:	2b03      	cmp	r3, #3
 800b0b2:	f300 8145 	bgt.w	800b340 <USBD_StdEPReq+0x318>
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	f000 809b 	beq.w	800b1f2 <USBD_StdEPReq+0x1ca>
 800b0bc:	2b01      	cmp	r3, #1
 800b0be:	d03c      	beq.n	800b13a <USBD_StdEPReq+0x112>
 800b0c0:	e13e      	b.n	800b340 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0c8:	b2db      	uxtb	r3, r3
 800b0ca:	2b02      	cmp	r3, #2
 800b0cc:	d002      	beq.n	800b0d4 <USBD_StdEPReq+0xac>
 800b0ce:	2b03      	cmp	r3, #3
 800b0d0:	d016      	beq.n	800b100 <USBD_StdEPReq+0xd8>
 800b0d2:	e02c      	b.n	800b12e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b0d4:	7bbb      	ldrb	r3, [r7, #14]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d00d      	beq.n	800b0f6 <USBD_StdEPReq+0xce>
 800b0da:	7bbb      	ldrb	r3, [r7, #14]
 800b0dc:	2b80      	cmp	r3, #128	; 0x80
 800b0de:	d00a      	beq.n	800b0f6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b0e0:	7bbb      	ldrb	r3, [r7, #14]
 800b0e2:	4619      	mov	r1, r3
 800b0e4:	6878      	ldr	r0, [r7, #4]
 800b0e6:	f002 ff67 	bl	800dfb8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b0ea:	2180      	movs	r1, #128	; 0x80
 800b0ec:	6878      	ldr	r0, [r7, #4]
 800b0ee:	f002 ff63 	bl	800dfb8 <USBD_LL_StallEP>
 800b0f2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b0f4:	e020      	b.n	800b138 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b0f6:	6839      	ldr	r1, [r7, #0]
 800b0f8:	6878      	ldr	r0, [r7, #4]
 800b0fa:	f000 fc7a 	bl	800b9f2 <USBD_CtlError>
              break;
 800b0fe:	e01b      	b.n	800b138 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	885b      	ldrh	r3, [r3, #2]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d10e      	bne.n	800b126 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b108:	7bbb      	ldrb	r3, [r7, #14]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d00b      	beq.n	800b126 <USBD_StdEPReq+0xfe>
 800b10e:	7bbb      	ldrb	r3, [r7, #14]
 800b110:	2b80      	cmp	r3, #128	; 0x80
 800b112:	d008      	beq.n	800b126 <USBD_StdEPReq+0xfe>
 800b114:	683b      	ldr	r3, [r7, #0]
 800b116:	88db      	ldrh	r3, [r3, #6]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d104      	bne.n	800b126 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b11c:	7bbb      	ldrb	r3, [r7, #14]
 800b11e:	4619      	mov	r1, r3
 800b120:	6878      	ldr	r0, [r7, #4]
 800b122:	f002 ff49 	bl	800dfb8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b126:	6878      	ldr	r0, [r7, #4]
 800b128:	f000 fd2e 	bl	800bb88 <USBD_CtlSendStatus>

              break;
 800b12c:	e004      	b.n	800b138 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b12e:	6839      	ldr	r1, [r7, #0]
 800b130:	6878      	ldr	r0, [r7, #4]
 800b132:	f000 fc5e 	bl	800b9f2 <USBD_CtlError>
              break;
 800b136:	bf00      	nop
          }
          break;
 800b138:	e107      	b.n	800b34a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b140:	b2db      	uxtb	r3, r3
 800b142:	2b02      	cmp	r3, #2
 800b144:	d002      	beq.n	800b14c <USBD_StdEPReq+0x124>
 800b146:	2b03      	cmp	r3, #3
 800b148:	d016      	beq.n	800b178 <USBD_StdEPReq+0x150>
 800b14a:	e04b      	b.n	800b1e4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b14c:	7bbb      	ldrb	r3, [r7, #14]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d00d      	beq.n	800b16e <USBD_StdEPReq+0x146>
 800b152:	7bbb      	ldrb	r3, [r7, #14]
 800b154:	2b80      	cmp	r3, #128	; 0x80
 800b156:	d00a      	beq.n	800b16e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b158:	7bbb      	ldrb	r3, [r7, #14]
 800b15a:	4619      	mov	r1, r3
 800b15c:	6878      	ldr	r0, [r7, #4]
 800b15e:	f002 ff2b 	bl	800dfb8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b162:	2180      	movs	r1, #128	; 0x80
 800b164:	6878      	ldr	r0, [r7, #4]
 800b166:	f002 ff27 	bl	800dfb8 <USBD_LL_StallEP>
 800b16a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b16c:	e040      	b.n	800b1f0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b16e:	6839      	ldr	r1, [r7, #0]
 800b170:	6878      	ldr	r0, [r7, #4]
 800b172:	f000 fc3e 	bl	800b9f2 <USBD_CtlError>
              break;
 800b176:	e03b      	b.n	800b1f0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	885b      	ldrh	r3, [r3, #2]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d136      	bne.n	800b1ee <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b180:	7bbb      	ldrb	r3, [r7, #14]
 800b182:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b186:	2b00      	cmp	r3, #0
 800b188:	d004      	beq.n	800b194 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b18a:	7bbb      	ldrb	r3, [r7, #14]
 800b18c:	4619      	mov	r1, r3
 800b18e:	6878      	ldr	r0, [r7, #4]
 800b190:	f002 ff31 	bl	800dff6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b194:	6878      	ldr	r0, [r7, #4]
 800b196:	f000 fcf7 	bl	800bb88 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b19a:	7bbb      	ldrb	r3, [r7, #14]
 800b19c:	4619      	mov	r1, r3
 800b19e:	6878      	ldr	r0, [r7, #4]
 800b1a0:	f7ff fde2 	bl	800ad68 <USBD_CoreFindEP>
 800b1a4:	4603      	mov	r3, r0
 800b1a6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b1a8:	7b7b      	ldrb	r3, [r7, #13]
 800b1aa:	2bff      	cmp	r3, #255	; 0xff
 800b1ac:	d01f      	beq.n	800b1ee <USBD_StdEPReq+0x1c6>
 800b1ae:	7b7b      	ldrb	r3, [r7, #13]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d11c      	bne.n	800b1ee <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b1b4:	7b7a      	ldrb	r2, [r7, #13]
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b1bc:	7b7a      	ldrb	r2, [r7, #13]
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	32ae      	adds	r2, #174	; 0xae
 800b1c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1c6:	689b      	ldr	r3, [r3, #8]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d010      	beq.n	800b1ee <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b1cc:	7b7a      	ldrb	r2, [r7, #13]
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	32ae      	adds	r2, #174	; 0xae
 800b1d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1d6:	689b      	ldr	r3, [r3, #8]
 800b1d8:	6839      	ldr	r1, [r7, #0]
 800b1da:	6878      	ldr	r0, [r7, #4]
 800b1dc:	4798      	blx	r3
 800b1de:	4603      	mov	r3, r0
 800b1e0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b1e2:	e004      	b.n	800b1ee <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b1e4:	6839      	ldr	r1, [r7, #0]
 800b1e6:	6878      	ldr	r0, [r7, #4]
 800b1e8:	f000 fc03 	bl	800b9f2 <USBD_CtlError>
              break;
 800b1ec:	e000      	b.n	800b1f0 <USBD_StdEPReq+0x1c8>
              break;
 800b1ee:	bf00      	nop
          }
          break;
 800b1f0:	e0ab      	b.n	800b34a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1f8:	b2db      	uxtb	r3, r3
 800b1fa:	2b02      	cmp	r3, #2
 800b1fc:	d002      	beq.n	800b204 <USBD_StdEPReq+0x1dc>
 800b1fe:	2b03      	cmp	r3, #3
 800b200:	d032      	beq.n	800b268 <USBD_StdEPReq+0x240>
 800b202:	e097      	b.n	800b334 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b204:	7bbb      	ldrb	r3, [r7, #14]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d007      	beq.n	800b21a <USBD_StdEPReq+0x1f2>
 800b20a:	7bbb      	ldrb	r3, [r7, #14]
 800b20c:	2b80      	cmp	r3, #128	; 0x80
 800b20e:	d004      	beq.n	800b21a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b210:	6839      	ldr	r1, [r7, #0]
 800b212:	6878      	ldr	r0, [r7, #4]
 800b214:	f000 fbed 	bl	800b9f2 <USBD_CtlError>
                break;
 800b218:	e091      	b.n	800b33e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b21a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	da0b      	bge.n	800b23a <USBD_StdEPReq+0x212>
 800b222:	7bbb      	ldrb	r3, [r7, #14]
 800b224:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b228:	4613      	mov	r3, r2
 800b22a:	009b      	lsls	r3, r3, #2
 800b22c:	4413      	add	r3, r2
 800b22e:	009b      	lsls	r3, r3, #2
 800b230:	3310      	adds	r3, #16
 800b232:	687a      	ldr	r2, [r7, #4]
 800b234:	4413      	add	r3, r2
 800b236:	3304      	adds	r3, #4
 800b238:	e00b      	b.n	800b252 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b23a:	7bbb      	ldrb	r3, [r7, #14]
 800b23c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b240:	4613      	mov	r3, r2
 800b242:	009b      	lsls	r3, r3, #2
 800b244:	4413      	add	r3, r2
 800b246:	009b      	lsls	r3, r3, #2
 800b248:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b24c:	687a      	ldr	r2, [r7, #4]
 800b24e:	4413      	add	r3, r2
 800b250:	3304      	adds	r3, #4
 800b252:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b254:	68bb      	ldr	r3, [r7, #8]
 800b256:	2200      	movs	r2, #0
 800b258:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b25a:	68bb      	ldr	r3, [r7, #8]
 800b25c:	2202      	movs	r2, #2
 800b25e:	4619      	mov	r1, r3
 800b260:	6878      	ldr	r0, [r7, #4]
 800b262:	f000 fc37 	bl	800bad4 <USBD_CtlSendData>
              break;
 800b266:	e06a      	b.n	800b33e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b268:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	da11      	bge.n	800b294 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b270:	7bbb      	ldrb	r3, [r7, #14]
 800b272:	f003 020f 	and.w	r2, r3, #15
 800b276:	6879      	ldr	r1, [r7, #4]
 800b278:	4613      	mov	r3, r2
 800b27a:	009b      	lsls	r3, r3, #2
 800b27c:	4413      	add	r3, r2
 800b27e:	009b      	lsls	r3, r3, #2
 800b280:	440b      	add	r3, r1
 800b282:	3324      	adds	r3, #36	; 0x24
 800b284:	881b      	ldrh	r3, [r3, #0]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d117      	bne.n	800b2ba <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b28a:	6839      	ldr	r1, [r7, #0]
 800b28c:	6878      	ldr	r0, [r7, #4]
 800b28e:	f000 fbb0 	bl	800b9f2 <USBD_CtlError>
                  break;
 800b292:	e054      	b.n	800b33e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b294:	7bbb      	ldrb	r3, [r7, #14]
 800b296:	f003 020f 	and.w	r2, r3, #15
 800b29a:	6879      	ldr	r1, [r7, #4]
 800b29c:	4613      	mov	r3, r2
 800b29e:	009b      	lsls	r3, r3, #2
 800b2a0:	4413      	add	r3, r2
 800b2a2:	009b      	lsls	r3, r3, #2
 800b2a4:	440b      	add	r3, r1
 800b2a6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b2aa:	881b      	ldrh	r3, [r3, #0]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d104      	bne.n	800b2ba <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b2b0:	6839      	ldr	r1, [r7, #0]
 800b2b2:	6878      	ldr	r0, [r7, #4]
 800b2b4:	f000 fb9d 	bl	800b9f2 <USBD_CtlError>
                  break;
 800b2b8:	e041      	b.n	800b33e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b2ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	da0b      	bge.n	800b2da <USBD_StdEPReq+0x2b2>
 800b2c2:	7bbb      	ldrb	r3, [r7, #14]
 800b2c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b2c8:	4613      	mov	r3, r2
 800b2ca:	009b      	lsls	r3, r3, #2
 800b2cc:	4413      	add	r3, r2
 800b2ce:	009b      	lsls	r3, r3, #2
 800b2d0:	3310      	adds	r3, #16
 800b2d2:	687a      	ldr	r2, [r7, #4]
 800b2d4:	4413      	add	r3, r2
 800b2d6:	3304      	adds	r3, #4
 800b2d8:	e00b      	b.n	800b2f2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b2da:	7bbb      	ldrb	r3, [r7, #14]
 800b2dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b2e0:	4613      	mov	r3, r2
 800b2e2:	009b      	lsls	r3, r3, #2
 800b2e4:	4413      	add	r3, r2
 800b2e6:	009b      	lsls	r3, r3, #2
 800b2e8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b2ec:	687a      	ldr	r2, [r7, #4]
 800b2ee:	4413      	add	r3, r2
 800b2f0:	3304      	adds	r3, #4
 800b2f2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b2f4:	7bbb      	ldrb	r3, [r7, #14]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d002      	beq.n	800b300 <USBD_StdEPReq+0x2d8>
 800b2fa:	7bbb      	ldrb	r3, [r7, #14]
 800b2fc:	2b80      	cmp	r3, #128	; 0x80
 800b2fe:	d103      	bne.n	800b308 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b300:	68bb      	ldr	r3, [r7, #8]
 800b302:	2200      	movs	r2, #0
 800b304:	601a      	str	r2, [r3, #0]
 800b306:	e00e      	b.n	800b326 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b308:	7bbb      	ldrb	r3, [r7, #14]
 800b30a:	4619      	mov	r1, r3
 800b30c:	6878      	ldr	r0, [r7, #4]
 800b30e:	f002 fe91 	bl	800e034 <USBD_LL_IsStallEP>
 800b312:	4603      	mov	r3, r0
 800b314:	2b00      	cmp	r3, #0
 800b316:	d003      	beq.n	800b320 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b318:	68bb      	ldr	r3, [r7, #8]
 800b31a:	2201      	movs	r2, #1
 800b31c:	601a      	str	r2, [r3, #0]
 800b31e:	e002      	b.n	800b326 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b320:	68bb      	ldr	r3, [r7, #8]
 800b322:	2200      	movs	r2, #0
 800b324:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b326:	68bb      	ldr	r3, [r7, #8]
 800b328:	2202      	movs	r2, #2
 800b32a:	4619      	mov	r1, r3
 800b32c:	6878      	ldr	r0, [r7, #4]
 800b32e:	f000 fbd1 	bl	800bad4 <USBD_CtlSendData>
              break;
 800b332:	e004      	b.n	800b33e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b334:	6839      	ldr	r1, [r7, #0]
 800b336:	6878      	ldr	r0, [r7, #4]
 800b338:	f000 fb5b 	bl	800b9f2 <USBD_CtlError>
              break;
 800b33c:	bf00      	nop
          }
          break;
 800b33e:	e004      	b.n	800b34a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b340:	6839      	ldr	r1, [r7, #0]
 800b342:	6878      	ldr	r0, [r7, #4]
 800b344:	f000 fb55 	bl	800b9f2 <USBD_CtlError>
          break;
 800b348:	bf00      	nop
      }
      break;
 800b34a:	e005      	b.n	800b358 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b34c:	6839      	ldr	r1, [r7, #0]
 800b34e:	6878      	ldr	r0, [r7, #4]
 800b350:	f000 fb4f 	bl	800b9f2 <USBD_CtlError>
      break;
 800b354:	e000      	b.n	800b358 <USBD_StdEPReq+0x330>
      break;
 800b356:	bf00      	nop
  }

  return ret;
 800b358:	7bfb      	ldrb	r3, [r7, #15]
}
 800b35a:	4618      	mov	r0, r3
 800b35c:	3710      	adds	r7, #16
 800b35e:	46bd      	mov	sp, r7
 800b360:	bd80      	pop	{r7, pc}
	...

0800b364 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b084      	sub	sp, #16
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
 800b36c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b36e:	2300      	movs	r3, #0
 800b370:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b372:	2300      	movs	r3, #0
 800b374:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b376:	2300      	movs	r3, #0
 800b378:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	885b      	ldrh	r3, [r3, #2]
 800b37e:	0a1b      	lsrs	r3, r3, #8
 800b380:	b29b      	uxth	r3, r3
 800b382:	3b01      	subs	r3, #1
 800b384:	2b06      	cmp	r3, #6
 800b386:	f200 8128 	bhi.w	800b5da <USBD_GetDescriptor+0x276>
 800b38a:	a201      	add	r2, pc, #4	; (adr r2, 800b390 <USBD_GetDescriptor+0x2c>)
 800b38c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b390:	0800b3ad 	.word	0x0800b3ad
 800b394:	0800b3c5 	.word	0x0800b3c5
 800b398:	0800b405 	.word	0x0800b405
 800b39c:	0800b5db 	.word	0x0800b5db
 800b3a0:	0800b5db 	.word	0x0800b5db
 800b3a4:	0800b57b 	.word	0x0800b57b
 800b3a8:	0800b5a7 	.word	0x0800b5a7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	687a      	ldr	r2, [r7, #4]
 800b3b6:	7c12      	ldrb	r2, [r2, #16]
 800b3b8:	f107 0108 	add.w	r1, r7, #8
 800b3bc:	4610      	mov	r0, r2
 800b3be:	4798      	blx	r3
 800b3c0:	60f8      	str	r0, [r7, #12]
      break;
 800b3c2:	e112      	b.n	800b5ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	7c1b      	ldrb	r3, [r3, #16]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d10d      	bne.n	800b3e8 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3d4:	f107 0208 	add.w	r2, r7, #8
 800b3d8:	4610      	mov	r0, r2
 800b3da:	4798      	blx	r3
 800b3dc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	3301      	adds	r3, #1
 800b3e2:	2202      	movs	r2, #2
 800b3e4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b3e6:	e100      	b.n	800b5ea <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3f0:	f107 0208 	add.w	r2, r7, #8
 800b3f4:	4610      	mov	r0, r2
 800b3f6:	4798      	blx	r3
 800b3f8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	3301      	adds	r3, #1
 800b3fe:	2202      	movs	r2, #2
 800b400:	701a      	strb	r2, [r3, #0]
      break;
 800b402:	e0f2      	b.n	800b5ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	885b      	ldrh	r3, [r3, #2]
 800b408:	b2db      	uxtb	r3, r3
 800b40a:	2b05      	cmp	r3, #5
 800b40c:	f200 80ac 	bhi.w	800b568 <USBD_GetDescriptor+0x204>
 800b410:	a201      	add	r2, pc, #4	; (adr r2, 800b418 <USBD_GetDescriptor+0xb4>)
 800b412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b416:	bf00      	nop
 800b418:	0800b431 	.word	0x0800b431
 800b41c:	0800b465 	.word	0x0800b465
 800b420:	0800b499 	.word	0x0800b499
 800b424:	0800b4cd 	.word	0x0800b4cd
 800b428:	0800b501 	.word	0x0800b501
 800b42c:	0800b535 	.word	0x0800b535
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b436:	685b      	ldr	r3, [r3, #4]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d00b      	beq.n	800b454 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b442:	685b      	ldr	r3, [r3, #4]
 800b444:	687a      	ldr	r2, [r7, #4]
 800b446:	7c12      	ldrb	r2, [r2, #16]
 800b448:	f107 0108 	add.w	r1, r7, #8
 800b44c:	4610      	mov	r0, r2
 800b44e:	4798      	blx	r3
 800b450:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b452:	e091      	b.n	800b578 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b454:	6839      	ldr	r1, [r7, #0]
 800b456:	6878      	ldr	r0, [r7, #4]
 800b458:	f000 facb 	bl	800b9f2 <USBD_CtlError>
            err++;
 800b45c:	7afb      	ldrb	r3, [r7, #11]
 800b45e:	3301      	adds	r3, #1
 800b460:	72fb      	strb	r3, [r7, #11]
          break;
 800b462:	e089      	b.n	800b578 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b46a:	689b      	ldr	r3, [r3, #8]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d00b      	beq.n	800b488 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b476:	689b      	ldr	r3, [r3, #8]
 800b478:	687a      	ldr	r2, [r7, #4]
 800b47a:	7c12      	ldrb	r2, [r2, #16]
 800b47c:	f107 0108 	add.w	r1, r7, #8
 800b480:	4610      	mov	r0, r2
 800b482:	4798      	blx	r3
 800b484:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b486:	e077      	b.n	800b578 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b488:	6839      	ldr	r1, [r7, #0]
 800b48a:	6878      	ldr	r0, [r7, #4]
 800b48c:	f000 fab1 	bl	800b9f2 <USBD_CtlError>
            err++;
 800b490:	7afb      	ldrb	r3, [r7, #11]
 800b492:	3301      	adds	r3, #1
 800b494:	72fb      	strb	r3, [r7, #11]
          break;
 800b496:	e06f      	b.n	800b578 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b49e:	68db      	ldr	r3, [r3, #12]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d00b      	beq.n	800b4bc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4aa:	68db      	ldr	r3, [r3, #12]
 800b4ac:	687a      	ldr	r2, [r7, #4]
 800b4ae:	7c12      	ldrb	r2, [r2, #16]
 800b4b0:	f107 0108 	add.w	r1, r7, #8
 800b4b4:	4610      	mov	r0, r2
 800b4b6:	4798      	blx	r3
 800b4b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b4ba:	e05d      	b.n	800b578 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b4bc:	6839      	ldr	r1, [r7, #0]
 800b4be:	6878      	ldr	r0, [r7, #4]
 800b4c0:	f000 fa97 	bl	800b9f2 <USBD_CtlError>
            err++;
 800b4c4:	7afb      	ldrb	r3, [r7, #11]
 800b4c6:	3301      	adds	r3, #1
 800b4c8:	72fb      	strb	r3, [r7, #11]
          break;
 800b4ca:	e055      	b.n	800b578 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4d2:	691b      	ldr	r3, [r3, #16]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d00b      	beq.n	800b4f0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4de:	691b      	ldr	r3, [r3, #16]
 800b4e0:	687a      	ldr	r2, [r7, #4]
 800b4e2:	7c12      	ldrb	r2, [r2, #16]
 800b4e4:	f107 0108 	add.w	r1, r7, #8
 800b4e8:	4610      	mov	r0, r2
 800b4ea:	4798      	blx	r3
 800b4ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b4ee:	e043      	b.n	800b578 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b4f0:	6839      	ldr	r1, [r7, #0]
 800b4f2:	6878      	ldr	r0, [r7, #4]
 800b4f4:	f000 fa7d 	bl	800b9f2 <USBD_CtlError>
            err++;
 800b4f8:	7afb      	ldrb	r3, [r7, #11]
 800b4fa:	3301      	adds	r3, #1
 800b4fc:	72fb      	strb	r3, [r7, #11]
          break;
 800b4fe:	e03b      	b.n	800b578 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b506:	695b      	ldr	r3, [r3, #20]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d00b      	beq.n	800b524 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b512:	695b      	ldr	r3, [r3, #20]
 800b514:	687a      	ldr	r2, [r7, #4]
 800b516:	7c12      	ldrb	r2, [r2, #16]
 800b518:	f107 0108 	add.w	r1, r7, #8
 800b51c:	4610      	mov	r0, r2
 800b51e:	4798      	blx	r3
 800b520:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b522:	e029      	b.n	800b578 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b524:	6839      	ldr	r1, [r7, #0]
 800b526:	6878      	ldr	r0, [r7, #4]
 800b528:	f000 fa63 	bl	800b9f2 <USBD_CtlError>
            err++;
 800b52c:	7afb      	ldrb	r3, [r7, #11]
 800b52e:	3301      	adds	r3, #1
 800b530:	72fb      	strb	r3, [r7, #11]
          break;
 800b532:	e021      	b.n	800b578 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b53a:	699b      	ldr	r3, [r3, #24]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d00b      	beq.n	800b558 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b546:	699b      	ldr	r3, [r3, #24]
 800b548:	687a      	ldr	r2, [r7, #4]
 800b54a:	7c12      	ldrb	r2, [r2, #16]
 800b54c:	f107 0108 	add.w	r1, r7, #8
 800b550:	4610      	mov	r0, r2
 800b552:	4798      	blx	r3
 800b554:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b556:	e00f      	b.n	800b578 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b558:	6839      	ldr	r1, [r7, #0]
 800b55a:	6878      	ldr	r0, [r7, #4]
 800b55c:	f000 fa49 	bl	800b9f2 <USBD_CtlError>
            err++;
 800b560:	7afb      	ldrb	r3, [r7, #11]
 800b562:	3301      	adds	r3, #1
 800b564:	72fb      	strb	r3, [r7, #11]
          break;
 800b566:	e007      	b.n	800b578 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b568:	6839      	ldr	r1, [r7, #0]
 800b56a:	6878      	ldr	r0, [r7, #4]
 800b56c:	f000 fa41 	bl	800b9f2 <USBD_CtlError>
          err++;
 800b570:	7afb      	ldrb	r3, [r7, #11]
 800b572:	3301      	adds	r3, #1
 800b574:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b576:	bf00      	nop
      }
      break;
 800b578:	e037      	b.n	800b5ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	7c1b      	ldrb	r3, [r3, #16]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d109      	bne.n	800b596 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b58a:	f107 0208 	add.w	r2, r7, #8
 800b58e:	4610      	mov	r0, r2
 800b590:	4798      	blx	r3
 800b592:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b594:	e029      	b.n	800b5ea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b596:	6839      	ldr	r1, [r7, #0]
 800b598:	6878      	ldr	r0, [r7, #4]
 800b59a:	f000 fa2a 	bl	800b9f2 <USBD_CtlError>
        err++;
 800b59e:	7afb      	ldrb	r3, [r7, #11]
 800b5a0:	3301      	adds	r3, #1
 800b5a2:	72fb      	strb	r3, [r7, #11]
      break;
 800b5a4:	e021      	b.n	800b5ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	7c1b      	ldrb	r3, [r3, #16]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d10d      	bne.n	800b5ca <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5b6:	f107 0208 	add.w	r2, r7, #8
 800b5ba:	4610      	mov	r0, r2
 800b5bc:	4798      	blx	r3
 800b5be:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	3301      	adds	r3, #1
 800b5c4:	2207      	movs	r2, #7
 800b5c6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b5c8:	e00f      	b.n	800b5ea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b5ca:	6839      	ldr	r1, [r7, #0]
 800b5cc:	6878      	ldr	r0, [r7, #4]
 800b5ce:	f000 fa10 	bl	800b9f2 <USBD_CtlError>
        err++;
 800b5d2:	7afb      	ldrb	r3, [r7, #11]
 800b5d4:	3301      	adds	r3, #1
 800b5d6:	72fb      	strb	r3, [r7, #11]
      break;
 800b5d8:	e007      	b.n	800b5ea <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b5da:	6839      	ldr	r1, [r7, #0]
 800b5dc:	6878      	ldr	r0, [r7, #4]
 800b5de:	f000 fa08 	bl	800b9f2 <USBD_CtlError>
      err++;
 800b5e2:	7afb      	ldrb	r3, [r7, #11]
 800b5e4:	3301      	adds	r3, #1
 800b5e6:	72fb      	strb	r3, [r7, #11]
      break;
 800b5e8:	bf00      	nop
  }

  if (err != 0U)
 800b5ea:	7afb      	ldrb	r3, [r7, #11]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d11e      	bne.n	800b62e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b5f0:	683b      	ldr	r3, [r7, #0]
 800b5f2:	88db      	ldrh	r3, [r3, #6]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d016      	beq.n	800b626 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b5f8:	893b      	ldrh	r3, [r7, #8]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d00e      	beq.n	800b61c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	88da      	ldrh	r2, [r3, #6]
 800b602:	893b      	ldrh	r3, [r7, #8]
 800b604:	4293      	cmp	r3, r2
 800b606:	bf28      	it	cs
 800b608:	4613      	movcs	r3, r2
 800b60a:	b29b      	uxth	r3, r3
 800b60c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b60e:	893b      	ldrh	r3, [r7, #8]
 800b610:	461a      	mov	r2, r3
 800b612:	68f9      	ldr	r1, [r7, #12]
 800b614:	6878      	ldr	r0, [r7, #4]
 800b616:	f000 fa5d 	bl	800bad4 <USBD_CtlSendData>
 800b61a:	e009      	b.n	800b630 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b61c:	6839      	ldr	r1, [r7, #0]
 800b61e:	6878      	ldr	r0, [r7, #4]
 800b620:	f000 f9e7 	bl	800b9f2 <USBD_CtlError>
 800b624:	e004      	b.n	800b630 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b626:	6878      	ldr	r0, [r7, #4]
 800b628:	f000 faae 	bl	800bb88 <USBD_CtlSendStatus>
 800b62c:	e000      	b.n	800b630 <USBD_GetDescriptor+0x2cc>
    return;
 800b62e:	bf00      	nop
  }
}
 800b630:	3710      	adds	r7, #16
 800b632:	46bd      	mov	sp, r7
 800b634:	bd80      	pop	{r7, pc}
 800b636:	bf00      	nop

0800b638 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b084      	sub	sp, #16
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
 800b640:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b642:	683b      	ldr	r3, [r7, #0]
 800b644:	889b      	ldrh	r3, [r3, #4]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d131      	bne.n	800b6ae <USBD_SetAddress+0x76>
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	88db      	ldrh	r3, [r3, #6]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d12d      	bne.n	800b6ae <USBD_SetAddress+0x76>
 800b652:	683b      	ldr	r3, [r7, #0]
 800b654:	885b      	ldrh	r3, [r3, #2]
 800b656:	2b7f      	cmp	r3, #127	; 0x7f
 800b658:	d829      	bhi.n	800b6ae <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b65a:	683b      	ldr	r3, [r7, #0]
 800b65c:	885b      	ldrh	r3, [r3, #2]
 800b65e:	b2db      	uxtb	r3, r3
 800b660:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b664:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b66c:	b2db      	uxtb	r3, r3
 800b66e:	2b03      	cmp	r3, #3
 800b670:	d104      	bne.n	800b67c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b672:	6839      	ldr	r1, [r7, #0]
 800b674:	6878      	ldr	r0, [r7, #4]
 800b676:	f000 f9bc 	bl	800b9f2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b67a:	e01d      	b.n	800b6b8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	7bfa      	ldrb	r2, [r7, #15]
 800b680:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b684:	7bfb      	ldrb	r3, [r7, #15]
 800b686:	4619      	mov	r1, r3
 800b688:	6878      	ldr	r0, [r7, #4]
 800b68a:	f002 fcff 	bl	800e08c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b68e:	6878      	ldr	r0, [r7, #4]
 800b690:	f000 fa7a 	bl	800bb88 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b694:	7bfb      	ldrb	r3, [r7, #15]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d004      	beq.n	800b6a4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	2202      	movs	r2, #2
 800b69e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6a2:	e009      	b.n	800b6b8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2201      	movs	r2, #1
 800b6a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6ac:	e004      	b.n	800b6b8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b6ae:	6839      	ldr	r1, [r7, #0]
 800b6b0:	6878      	ldr	r0, [r7, #4]
 800b6b2:	f000 f99e 	bl	800b9f2 <USBD_CtlError>
  }
}
 800b6b6:	bf00      	nop
 800b6b8:	bf00      	nop
 800b6ba:	3710      	adds	r7, #16
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	bd80      	pop	{r7, pc}

0800b6c0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b084      	sub	sp, #16
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
 800b6c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	885b      	ldrh	r3, [r3, #2]
 800b6d2:	b2da      	uxtb	r2, r3
 800b6d4:	4b4e      	ldr	r3, [pc, #312]	; (800b810 <USBD_SetConfig+0x150>)
 800b6d6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b6d8:	4b4d      	ldr	r3, [pc, #308]	; (800b810 <USBD_SetConfig+0x150>)
 800b6da:	781b      	ldrb	r3, [r3, #0]
 800b6dc:	2b01      	cmp	r3, #1
 800b6de:	d905      	bls.n	800b6ec <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b6e0:	6839      	ldr	r1, [r7, #0]
 800b6e2:	6878      	ldr	r0, [r7, #4]
 800b6e4:	f000 f985 	bl	800b9f2 <USBD_CtlError>
    return USBD_FAIL;
 800b6e8:	2303      	movs	r3, #3
 800b6ea:	e08c      	b.n	800b806 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6f2:	b2db      	uxtb	r3, r3
 800b6f4:	2b02      	cmp	r3, #2
 800b6f6:	d002      	beq.n	800b6fe <USBD_SetConfig+0x3e>
 800b6f8:	2b03      	cmp	r3, #3
 800b6fa:	d029      	beq.n	800b750 <USBD_SetConfig+0x90>
 800b6fc:	e075      	b.n	800b7ea <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b6fe:	4b44      	ldr	r3, [pc, #272]	; (800b810 <USBD_SetConfig+0x150>)
 800b700:	781b      	ldrb	r3, [r3, #0]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d020      	beq.n	800b748 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b706:	4b42      	ldr	r3, [pc, #264]	; (800b810 <USBD_SetConfig+0x150>)
 800b708:	781b      	ldrb	r3, [r3, #0]
 800b70a:	461a      	mov	r2, r3
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b710:	4b3f      	ldr	r3, [pc, #252]	; (800b810 <USBD_SetConfig+0x150>)
 800b712:	781b      	ldrb	r3, [r3, #0]
 800b714:	4619      	mov	r1, r3
 800b716:	6878      	ldr	r0, [r7, #4]
 800b718:	f7fe ffe1 	bl	800a6de <USBD_SetClassConfig>
 800b71c:	4603      	mov	r3, r0
 800b71e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b720:	7bfb      	ldrb	r3, [r7, #15]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d008      	beq.n	800b738 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b726:	6839      	ldr	r1, [r7, #0]
 800b728:	6878      	ldr	r0, [r7, #4]
 800b72a:	f000 f962 	bl	800b9f2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	2202      	movs	r2, #2
 800b732:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b736:	e065      	b.n	800b804 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b738:	6878      	ldr	r0, [r7, #4]
 800b73a:	f000 fa25 	bl	800bb88 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	2203      	movs	r2, #3
 800b742:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b746:	e05d      	b.n	800b804 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b748:	6878      	ldr	r0, [r7, #4]
 800b74a:	f000 fa1d 	bl	800bb88 <USBD_CtlSendStatus>
      break;
 800b74e:	e059      	b.n	800b804 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b750:	4b2f      	ldr	r3, [pc, #188]	; (800b810 <USBD_SetConfig+0x150>)
 800b752:	781b      	ldrb	r3, [r3, #0]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d112      	bne.n	800b77e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	2202      	movs	r2, #2
 800b75c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b760:	4b2b      	ldr	r3, [pc, #172]	; (800b810 <USBD_SetConfig+0x150>)
 800b762:	781b      	ldrb	r3, [r3, #0]
 800b764:	461a      	mov	r2, r3
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b76a:	4b29      	ldr	r3, [pc, #164]	; (800b810 <USBD_SetConfig+0x150>)
 800b76c:	781b      	ldrb	r3, [r3, #0]
 800b76e:	4619      	mov	r1, r3
 800b770:	6878      	ldr	r0, [r7, #4]
 800b772:	f7fe ffd0 	bl	800a716 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b776:	6878      	ldr	r0, [r7, #4]
 800b778:	f000 fa06 	bl	800bb88 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b77c:	e042      	b.n	800b804 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b77e:	4b24      	ldr	r3, [pc, #144]	; (800b810 <USBD_SetConfig+0x150>)
 800b780:	781b      	ldrb	r3, [r3, #0]
 800b782:	461a      	mov	r2, r3
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	685b      	ldr	r3, [r3, #4]
 800b788:	429a      	cmp	r2, r3
 800b78a:	d02a      	beq.n	800b7e2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	685b      	ldr	r3, [r3, #4]
 800b790:	b2db      	uxtb	r3, r3
 800b792:	4619      	mov	r1, r3
 800b794:	6878      	ldr	r0, [r7, #4]
 800b796:	f7fe ffbe 	bl	800a716 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b79a:	4b1d      	ldr	r3, [pc, #116]	; (800b810 <USBD_SetConfig+0x150>)
 800b79c:	781b      	ldrb	r3, [r3, #0]
 800b79e:	461a      	mov	r2, r3
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b7a4:	4b1a      	ldr	r3, [pc, #104]	; (800b810 <USBD_SetConfig+0x150>)
 800b7a6:	781b      	ldrb	r3, [r3, #0]
 800b7a8:	4619      	mov	r1, r3
 800b7aa:	6878      	ldr	r0, [r7, #4]
 800b7ac:	f7fe ff97 	bl	800a6de <USBD_SetClassConfig>
 800b7b0:	4603      	mov	r3, r0
 800b7b2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b7b4:	7bfb      	ldrb	r3, [r7, #15]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d00f      	beq.n	800b7da <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b7ba:	6839      	ldr	r1, [r7, #0]
 800b7bc:	6878      	ldr	r0, [r7, #4]
 800b7be:	f000 f918 	bl	800b9f2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	685b      	ldr	r3, [r3, #4]
 800b7c6:	b2db      	uxtb	r3, r3
 800b7c8:	4619      	mov	r1, r3
 800b7ca:	6878      	ldr	r0, [r7, #4]
 800b7cc:	f7fe ffa3 	bl	800a716 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2202      	movs	r2, #2
 800b7d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b7d8:	e014      	b.n	800b804 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b7da:	6878      	ldr	r0, [r7, #4]
 800b7dc:	f000 f9d4 	bl	800bb88 <USBD_CtlSendStatus>
      break;
 800b7e0:	e010      	b.n	800b804 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b7e2:	6878      	ldr	r0, [r7, #4]
 800b7e4:	f000 f9d0 	bl	800bb88 <USBD_CtlSendStatus>
      break;
 800b7e8:	e00c      	b.n	800b804 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b7ea:	6839      	ldr	r1, [r7, #0]
 800b7ec:	6878      	ldr	r0, [r7, #4]
 800b7ee:	f000 f900 	bl	800b9f2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b7f2:	4b07      	ldr	r3, [pc, #28]	; (800b810 <USBD_SetConfig+0x150>)
 800b7f4:	781b      	ldrb	r3, [r3, #0]
 800b7f6:	4619      	mov	r1, r3
 800b7f8:	6878      	ldr	r0, [r7, #4]
 800b7fa:	f7fe ff8c 	bl	800a716 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b7fe:	2303      	movs	r3, #3
 800b800:	73fb      	strb	r3, [r7, #15]
      break;
 800b802:	bf00      	nop
  }

  return ret;
 800b804:	7bfb      	ldrb	r3, [r7, #15]
}
 800b806:	4618      	mov	r0, r3
 800b808:	3710      	adds	r7, #16
 800b80a:	46bd      	mov	sp, r7
 800b80c:	bd80      	pop	{r7, pc}
 800b80e:	bf00      	nop
 800b810:	20000528 	.word	0x20000528

0800b814 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b082      	sub	sp, #8
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
 800b81c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b81e:	683b      	ldr	r3, [r7, #0]
 800b820:	88db      	ldrh	r3, [r3, #6]
 800b822:	2b01      	cmp	r3, #1
 800b824:	d004      	beq.n	800b830 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b826:	6839      	ldr	r1, [r7, #0]
 800b828:	6878      	ldr	r0, [r7, #4]
 800b82a:	f000 f8e2 	bl	800b9f2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b82e:	e023      	b.n	800b878 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b836:	b2db      	uxtb	r3, r3
 800b838:	2b02      	cmp	r3, #2
 800b83a:	dc02      	bgt.n	800b842 <USBD_GetConfig+0x2e>
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	dc03      	bgt.n	800b848 <USBD_GetConfig+0x34>
 800b840:	e015      	b.n	800b86e <USBD_GetConfig+0x5a>
 800b842:	2b03      	cmp	r3, #3
 800b844:	d00b      	beq.n	800b85e <USBD_GetConfig+0x4a>
 800b846:	e012      	b.n	800b86e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	2200      	movs	r2, #0
 800b84c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	3308      	adds	r3, #8
 800b852:	2201      	movs	r2, #1
 800b854:	4619      	mov	r1, r3
 800b856:	6878      	ldr	r0, [r7, #4]
 800b858:	f000 f93c 	bl	800bad4 <USBD_CtlSendData>
        break;
 800b85c:	e00c      	b.n	800b878 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	3304      	adds	r3, #4
 800b862:	2201      	movs	r2, #1
 800b864:	4619      	mov	r1, r3
 800b866:	6878      	ldr	r0, [r7, #4]
 800b868:	f000 f934 	bl	800bad4 <USBD_CtlSendData>
        break;
 800b86c:	e004      	b.n	800b878 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b86e:	6839      	ldr	r1, [r7, #0]
 800b870:	6878      	ldr	r0, [r7, #4]
 800b872:	f000 f8be 	bl	800b9f2 <USBD_CtlError>
        break;
 800b876:	bf00      	nop
}
 800b878:	bf00      	nop
 800b87a:	3708      	adds	r7, #8
 800b87c:	46bd      	mov	sp, r7
 800b87e:	bd80      	pop	{r7, pc}

0800b880 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b082      	sub	sp, #8
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
 800b888:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b890:	b2db      	uxtb	r3, r3
 800b892:	3b01      	subs	r3, #1
 800b894:	2b02      	cmp	r3, #2
 800b896:	d81e      	bhi.n	800b8d6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b898:	683b      	ldr	r3, [r7, #0]
 800b89a:	88db      	ldrh	r3, [r3, #6]
 800b89c:	2b02      	cmp	r3, #2
 800b89e:	d004      	beq.n	800b8aa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b8a0:	6839      	ldr	r1, [r7, #0]
 800b8a2:	6878      	ldr	r0, [r7, #4]
 800b8a4:	f000 f8a5 	bl	800b9f2 <USBD_CtlError>
        break;
 800b8a8:	e01a      	b.n	800b8e0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	2201      	movs	r2, #1
 800b8ae:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d005      	beq.n	800b8c6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	68db      	ldr	r3, [r3, #12]
 800b8be:	f043 0202 	orr.w	r2, r3, #2
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	330c      	adds	r3, #12
 800b8ca:	2202      	movs	r2, #2
 800b8cc:	4619      	mov	r1, r3
 800b8ce:	6878      	ldr	r0, [r7, #4]
 800b8d0:	f000 f900 	bl	800bad4 <USBD_CtlSendData>
      break;
 800b8d4:	e004      	b.n	800b8e0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b8d6:	6839      	ldr	r1, [r7, #0]
 800b8d8:	6878      	ldr	r0, [r7, #4]
 800b8da:	f000 f88a 	bl	800b9f2 <USBD_CtlError>
      break;
 800b8de:	bf00      	nop
  }
}
 800b8e0:	bf00      	nop
 800b8e2:	3708      	adds	r7, #8
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	bd80      	pop	{r7, pc}

0800b8e8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	b082      	sub	sp, #8
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
 800b8f0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b8f2:	683b      	ldr	r3, [r7, #0]
 800b8f4:	885b      	ldrh	r3, [r3, #2]
 800b8f6:	2b01      	cmp	r3, #1
 800b8f8:	d107      	bne.n	800b90a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	2201      	movs	r2, #1
 800b8fe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b902:	6878      	ldr	r0, [r7, #4]
 800b904:	f000 f940 	bl	800bb88 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b908:	e013      	b.n	800b932 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b90a:	683b      	ldr	r3, [r7, #0]
 800b90c:	885b      	ldrh	r3, [r3, #2]
 800b90e:	2b02      	cmp	r3, #2
 800b910:	d10b      	bne.n	800b92a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b912:	683b      	ldr	r3, [r7, #0]
 800b914:	889b      	ldrh	r3, [r3, #4]
 800b916:	0a1b      	lsrs	r3, r3, #8
 800b918:	b29b      	uxth	r3, r3
 800b91a:	b2da      	uxtb	r2, r3
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b922:	6878      	ldr	r0, [r7, #4]
 800b924:	f000 f930 	bl	800bb88 <USBD_CtlSendStatus>
}
 800b928:	e003      	b.n	800b932 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b92a:	6839      	ldr	r1, [r7, #0]
 800b92c:	6878      	ldr	r0, [r7, #4]
 800b92e:	f000 f860 	bl	800b9f2 <USBD_CtlError>
}
 800b932:	bf00      	nop
 800b934:	3708      	adds	r7, #8
 800b936:	46bd      	mov	sp, r7
 800b938:	bd80      	pop	{r7, pc}

0800b93a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b93a:	b580      	push	{r7, lr}
 800b93c:	b082      	sub	sp, #8
 800b93e:	af00      	add	r7, sp, #0
 800b940:	6078      	str	r0, [r7, #4]
 800b942:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b94a:	b2db      	uxtb	r3, r3
 800b94c:	3b01      	subs	r3, #1
 800b94e:	2b02      	cmp	r3, #2
 800b950:	d80b      	bhi.n	800b96a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	885b      	ldrh	r3, [r3, #2]
 800b956:	2b01      	cmp	r3, #1
 800b958:	d10c      	bne.n	800b974 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	2200      	movs	r2, #0
 800b95e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b962:	6878      	ldr	r0, [r7, #4]
 800b964:	f000 f910 	bl	800bb88 <USBD_CtlSendStatus>
      }
      break;
 800b968:	e004      	b.n	800b974 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b96a:	6839      	ldr	r1, [r7, #0]
 800b96c:	6878      	ldr	r0, [r7, #4]
 800b96e:	f000 f840 	bl	800b9f2 <USBD_CtlError>
      break;
 800b972:	e000      	b.n	800b976 <USBD_ClrFeature+0x3c>
      break;
 800b974:	bf00      	nop
  }
}
 800b976:	bf00      	nop
 800b978:	3708      	adds	r7, #8
 800b97a:	46bd      	mov	sp, r7
 800b97c:	bd80      	pop	{r7, pc}

0800b97e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b97e:	b580      	push	{r7, lr}
 800b980:	b084      	sub	sp, #16
 800b982:	af00      	add	r7, sp, #0
 800b984:	6078      	str	r0, [r7, #4]
 800b986:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b988:	683b      	ldr	r3, [r7, #0]
 800b98a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	781a      	ldrb	r2, [r3, #0]
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	3301      	adds	r3, #1
 800b998:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	781a      	ldrb	r2, [r3, #0]
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	3301      	adds	r3, #1
 800b9a6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b9a8:	68f8      	ldr	r0, [r7, #12]
 800b9aa:	f7ff fa41 	bl	800ae30 <SWAPBYTE>
 800b9ae:	4603      	mov	r3, r0
 800b9b0:	461a      	mov	r2, r3
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	3301      	adds	r3, #1
 800b9ba:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	3301      	adds	r3, #1
 800b9c0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b9c2:	68f8      	ldr	r0, [r7, #12]
 800b9c4:	f7ff fa34 	bl	800ae30 <SWAPBYTE>
 800b9c8:	4603      	mov	r3, r0
 800b9ca:	461a      	mov	r2, r3
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	3301      	adds	r3, #1
 800b9d4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	3301      	adds	r3, #1
 800b9da:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b9dc:	68f8      	ldr	r0, [r7, #12]
 800b9de:	f7ff fa27 	bl	800ae30 <SWAPBYTE>
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	461a      	mov	r2, r3
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	80da      	strh	r2, [r3, #6]
}
 800b9ea:	bf00      	nop
 800b9ec:	3710      	adds	r7, #16
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}

0800b9f2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9f2:	b580      	push	{r7, lr}
 800b9f4:	b082      	sub	sp, #8
 800b9f6:	af00      	add	r7, sp, #0
 800b9f8:	6078      	str	r0, [r7, #4]
 800b9fa:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b9fc:	2180      	movs	r1, #128	; 0x80
 800b9fe:	6878      	ldr	r0, [r7, #4]
 800ba00:	f002 fada 	bl	800dfb8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ba04:	2100      	movs	r1, #0
 800ba06:	6878      	ldr	r0, [r7, #4]
 800ba08:	f002 fad6 	bl	800dfb8 <USBD_LL_StallEP>
}
 800ba0c:	bf00      	nop
 800ba0e:	3708      	adds	r7, #8
 800ba10:	46bd      	mov	sp, r7
 800ba12:	bd80      	pop	{r7, pc}

0800ba14 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b086      	sub	sp, #24
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	60f8      	str	r0, [r7, #12]
 800ba1c:	60b9      	str	r1, [r7, #8]
 800ba1e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ba20:	2300      	movs	r3, #0
 800ba22:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d036      	beq.n	800ba98 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ba2e:	6938      	ldr	r0, [r7, #16]
 800ba30:	f000 f836 	bl	800baa0 <USBD_GetLen>
 800ba34:	4603      	mov	r3, r0
 800ba36:	3301      	adds	r3, #1
 800ba38:	b29b      	uxth	r3, r3
 800ba3a:	005b      	lsls	r3, r3, #1
 800ba3c:	b29a      	uxth	r2, r3
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ba42:	7dfb      	ldrb	r3, [r7, #23]
 800ba44:	68ba      	ldr	r2, [r7, #8]
 800ba46:	4413      	add	r3, r2
 800ba48:	687a      	ldr	r2, [r7, #4]
 800ba4a:	7812      	ldrb	r2, [r2, #0]
 800ba4c:	701a      	strb	r2, [r3, #0]
  idx++;
 800ba4e:	7dfb      	ldrb	r3, [r7, #23]
 800ba50:	3301      	adds	r3, #1
 800ba52:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ba54:	7dfb      	ldrb	r3, [r7, #23]
 800ba56:	68ba      	ldr	r2, [r7, #8]
 800ba58:	4413      	add	r3, r2
 800ba5a:	2203      	movs	r2, #3
 800ba5c:	701a      	strb	r2, [r3, #0]
  idx++;
 800ba5e:	7dfb      	ldrb	r3, [r7, #23]
 800ba60:	3301      	adds	r3, #1
 800ba62:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ba64:	e013      	b.n	800ba8e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ba66:	7dfb      	ldrb	r3, [r7, #23]
 800ba68:	68ba      	ldr	r2, [r7, #8]
 800ba6a:	4413      	add	r3, r2
 800ba6c:	693a      	ldr	r2, [r7, #16]
 800ba6e:	7812      	ldrb	r2, [r2, #0]
 800ba70:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ba72:	693b      	ldr	r3, [r7, #16]
 800ba74:	3301      	adds	r3, #1
 800ba76:	613b      	str	r3, [r7, #16]
    idx++;
 800ba78:	7dfb      	ldrb	r3, [r7, #23]
 800ba7a:	3301      	adds	r3, #1
 800ba7c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ba7e:	7dfb      	ldrb	r3, [r7, #23]
 800ba80:	68ba      	ldr	r2, [r7, #8]
 800ba82:	4413      	add	r3, r2
 800ba84:	2200      	movs	r2, #0
 800ba86:	701a      	strb	r2, [r3, #0]
    idx++;
 800ba88:	7dfb      	ldrb	r3, [r7, #23]
 800ba8a:	3301      	adds	r3, #1
 800ba8c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ba8e:	693b      	ldr	r3, [r7, #16]
 800ba90:	781b      	ldrb	r3, [r3, #0]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d1e7      	bne.n	800ba66 <USBD_GetString+0x52>
 800ba96:	e000      	b.n	800ba9a <USBD_GetString+0x86>
    return;
 800ba98:	bf00      	nop
  }
}
 800ba9a:	3718      	adds	r7, #24
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	bd80      	pop	{r7, pc}

0800baa0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800baa0:	b480      	push	{r7}
 800baa2:	b085      	sub	sp, #20
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800baa8:	2300      	movs	r3, #0
 800baaa:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800bab0:	e005      	b.n	800babe <USBD_GetLen+0x1e>
  {
    len++;
 800bab2:	7bfb      	ldrb	r3, [r7, #15]
 800bab4:	3301      	adds	r3, #1
 800bab6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800bab8:	68bb      	ldr	r3, [r7, #8]
 800baba:	3301      	adds	r3, #1
 800babc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800babe:	68bb      	ldr	r3, [r7, #8]
 800bac0:	781b      	ldrb	r3, [r3, #0]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d1f5      	bne.n	800bab2 <USBD_GetLen+0x12>
  }

  return len;
 800bac6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bac8:	4618      	mov	r0, r3
 800baca:	3714      	adds	r7, #20
 800bacc:	46bd      	mov	sp, r7
 800bace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad2:	4770      	bx	lr

0800bad4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b084      	sub	sp, #16
 800bad8:	af00      	add	r7, sp, #0
 800bada:	60f8      	str	r0, [r7, #12]
 800badc:	60b9      	str	r1, [r7, #8]
 800bade:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	2202      	movs	r2, #2
 800bae4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	687a      	ldr	r2, [r7, #4]
 800baec:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	687a      	ldr	r2, [r7, #4]
 800baf2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	68ba      	ldr	r2, [r7, #8]
 800baf8:	2100      	movs	r1, #0
 800bafa:	68f8      	ldr	r0, [r7, #12]
 800bafc:	f002 fae5 	bl	800e0ca <USBD_LL_Transmit>

  return USBD_OK;
 800bb00:	2300      	movs	r3, #0
}
 800bb02:	4618      	mov	r0, r3
 800bb04:	3710      	adds	r7, #16
 800bb06:	46bd      	mov	sp, r7
 800bb08:	bd80      	pop	{r7, pc}

0800bb0a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800bb0a:	b580      	push	{r7, lr}
 800bb0c:	b084      	sub	sp, #16
 800bb0e:	af00      	add	r7, sp, #0
 800bb10:	60f8      	str	r0, [r7, #12]
 800bb12:	60b9      	str	r1, [r7, #8]
 800bb14:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	68ba      	ldr	r2, [r7, #8]
 800bb1a:	2100      	movs	r1, #0
 800bb1c:	68f8      	ldr	r0, [r7, #12]
 800bb1e:	f002 fad4 	bl	800e0ca <USBD_LL_Transmit>

  return USBD_OK;
 800bb22:	2300      	movs	r3, #0
}
 800bb24:	4618      	mov	r0, r3
 800bb26:	3710      	adds	r7, #16
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	bd80      	pop	{r7, pc}

0800bb2c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b084      	sub	sp, #16
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	60f8      	str	r0, [r7, #12]
 800bb34:	60b9      	str	r1, [r7, #8]
 800bb36:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	2203      	movs	r2, #3
 800bb3c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	687a      	ldr	r2, [r7, #4]
 800bb44:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	687a      	ldr	r2, [r7, #4]
 800bb4c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	68ba      	ldr	r2, [r7, #8]
 800bb54:	2100      	movs	r1, #0
 800bb56:	68f8      	ldr	r0, [r7, #12]
 800bb58:	f002 fad8 	bl	800e10c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bb5c:	2300      	movs	r3, #0
}
 800bb5e:	4618      	mov	r0, r3
 800bb60:	3710      	adds	r7, #16
 800bb62:	46bd      	mov	sp, r7
 800bb64:	bd80      	pop	{r7, pc}

0800bb66 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800bb66:	b580      	push	{r7, lr}
 800bb68:	b084      	sub	sp, #16
 800bb6a:	af00      	add	r7, sp, #0
 800bb6c:	60f8      	str	r0, [r7, #12]
 800bb6e:	60b9      	str	r1, [r7, #8]
 800bb70:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	68ba      	ldr	r2, [r7, #8]
 800bb76:	2100      	movs	r1, #0
 800bb78:	68f8      	ldr	r0, [r7, #12]
 800bb7a:	f002 fac7 	bl	800e10c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bb7e:	2300      	movs	r3, #0
}
 800bb80:	4618      	mov	r0, r3
 800bb82:	3710      	adds	r7, #16
 800bb84:	46bd      	mov	sp, r7
 800bb86:	bd80      	pop	{r7, pc}

0800bb88 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b082      	sub	sp, #8
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	2204      	movs	r2, #4
 800bb94:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bb98:	2300      	movs	r3, #0
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	2100      	movs	r1, #0
 800bb9e:	6878      	ldr	r0, [r7, #4]
 800bba0:	f002 fa93 	bl	800e0ca <USBD_LL_Transmit>

  return USBD_OK;
 800bba4:	2300      	movs	r3, #0
}
 800bba6:	4618      	mov	r0, r3
 800bba8:	3708      	adds	r7, #8
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	bd80      	pop	{r7, pc}

0800bbae <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bbae:	b580      	push	{r7, lr}
 800bbb0:	b082      	sub	sp, #8
 800bbb2:	af00      	add	r7, sp, #0
 800bbb4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	2205      	movs	r2, #5
 800bbba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	2100      	movs	r1, #0
 800bbc4:	6878      	ldr	r0, [r7, #4]
 800bbc6:	f002 faa1 	bl	800e10c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bbca:	2300      	movs	r3, #0
}
 800bbcc:	4618      	mov	r0, r3
 800bbce:	3708      	adds	r7, #8
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	bd80      	pop	{r7, pc}

0800bbd4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800bbd4:	b480      	push	{r7}
 800bbd6:	b085      	sub	sp, #20
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	4603      	mov	r3, r0
 800bbdc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800bbde:	2300      	movs	r3, #0
 800bbe0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800bbe2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bbe6:	2b84      	cmp	r3, #132	; 0x84
 800bbe8:	d005      	beq.n	800bbf6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800bbea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	4413      	add	r3, r2
 800bbf2:	3303      	adds	r3, #3
 800bbf4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800bbf6:	68fb      	ldr	r3, [r7, #12]
}
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	3714      	adds	r7, #20
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc02:	4770      	bx	lr

0800bc04 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800bc04:	b480      	push	{r7}
 800bc06:	b083      	sub	sp, #12
 800bc08:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bc0a:	f3ef 8305 	mrs	r3, IPSR
 800bc0e:	607b      	str	r3, [r7, #4]
  return(result);
 800bc10:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	bf14      	ite	ne
 800bc16:	2301      	movne	r3, #1
 800bc18:	2300      	moveq	r3, #0
 800bc1a:	b2db      	uxtb	r3, r3
}
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	370c      	adds	r7, #12
 800bc20:	46bd      	mov	sp, r7
 800bc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc26:	4770      	bx	lr

0800bc28 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800bc2c:	f000 fba8 	bl	800c380 <vTaskStartScheduler>
  
  return osOK;
 800bc30:	2300      	movs	r3, #0
}
 800bc32:	4618      	mov	r0, r3
 800bc34:	bd80      	pop	{r7, pc}

0800bc36 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800bc36:	b580      	push	{r7, lr}
 800bc38:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800bc3a:	f7ff ffe3 	bl	800bc04 <inHandlerMode>
 800bc3e:	4603      	mov	r3, r0
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d003      	beq.n	800bc4c <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800bc44:	f000 fca6 	bl	800c594 <xTaskGetTickCountFromISR>
 800bc48:	4603      	mov	r3, r0
 800bc4a:	e002      	b.n	800bc52 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800bc4c:	f000 fc92 	bl	800c574 <xTaskGetTickCount>
 800bc50:	4603      	mov	r3, r0
  }
}
 800bc52:	4618      	mov	r0, r3
 800bc54:	bd80      	pop	{r7, pc}

0800bc56 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800bc56:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc58:	b087      	sub	sp, #28
 800bc5a:	af02      	add	r7, sp, #8
 800bc5c:	6078      	str	r0, [r7, #4]
 800bc5e:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	685c      	ldr	r4, [r3, #4]
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bc6c:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bc74:	4618      	mov	r0, r3
 800bc76:	f7ff ffad 	bl	800bbd4 <makeFreeRtosPriority>
 800bc7a:	4602      	mov	r2, r0
 800bc7c:	f107 030c 	add.w	r3, r7, #12
 800bc80:	9301      	str	r3, [sp, #4]
 800bc82:	9200      	str	r2, [sp, #0]
 800bc84:	683b      	ldr	r3, [r7, #0]
 800bc86:	4632      	mov	r2, r6
 800bc88:	4629      	mov	r1, r5
 800bc8a:	4620      	mov	r0, r4
 800bc8c:	f000 f974 	bl	800bf78 <xTaskCreate>
 800bc90:	4603      	mov	r3, r0
 800bc92:	2b01      	cmp	r3, #1
 800bc94:	d001      	beq.n	800bc9a <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800bc96:	2300      	movs	r3, #0
 800bc98:	e000      	b.n	800bc9c <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800bc9a:	68fb      	ldr	r3, [r7, #12]
}
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	3714      	adds	r7, #20
 800bca0:	46bd      	mov	sp, r7
 800bca2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bca4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b084      	sub	sp, #16
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d001      	beq.n	800bcba <osDelay+0x16>
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	e000      	b.n	800bcbc <osDelay+0x18>
 800bcba:	2301      	movs	r3, #1
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	f000 fb2b 	bl	800c318 <vTaskDelay>
  
  return osOK;
 800bcc2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	3710      	adds	r7, #16
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	bd80      	pop	{r7, pc}

0800bccc <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b086      	sub	sp, #24
 800bcd0:	af02      	add	r7, sp, #8
 800bcd2:	6078      	str	r0, [r7, #4]
 800bcd4:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 800bcda:	2300      	movs	r3, #0
 800bcdc:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 800bcde:	f7ff ff91 	bl	800bc04 <inHandlerMode>
 800bce2:	4603      	mov	r3, r0
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d01c      	beq.n	800bd22 <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 800bce8:	6839      	ldr	r1, [r7, #0]
 800bcea:	f107 0208 	add.w	r2, r7, #8
 800bcee:	f107 030c 	add.w	r3, r7, #12
 800bcf2:	9300      	str	r3, [sp, #0]
 800bcf4:	4613      	mov	r3, r2
 800bcf6:	2201      	movs	r2, #1
 800bcf8:	6878      	ldr	r0, [r7, #4]
 800bcfa:	f000 ff77 	bl	800cbec <xTaskGenericNotifyFromISR>
 800bcfe:	4603      	mov	r3, r0
 800bd00:	2b01      	cmp	r3, #1
 800bd02:	d002      	beq.n	800bd0a <osSignalSet+0x3e>
      return 0x80000000;
 800bd04:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bd08:	e019      	b.n	800bd3e <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d015      	beq.n	800bd3c <osSignalSet+0x70>
 800bd10:	4b0d      	ldr	r3, [pc, #52]	; (800bd48 <osSignalSet+0x7c>)
 800bd12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd16:	601a      	str	r2, [r3, #0]
 800bd18:	f3bf 8f4f 	dsb	sy
 800bd1c:	f3bf 8f6f 	isb	sy
 800bd20:	e00c      	b.n	800bd3c <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 800bd22:	6839      	ldr	r1, [r7, #0]
 800bd24:	f107 0308 	add.w	r3, r7, #8
 800bd28:	2201      	movs	r2, #1
 800bd2a:	6878      	ldr	r0, [r7, #4]
 800bd2c:	f000 fea0 	bl	800ca70 <xTaskGenericNotify>
 800bd30:	4603      	mov	r3, r0
 800bd32:	2b01      	cmp	r3, #1
 800bd34:	d002      	beq.n	800bd3c <osSignalSet+0x70>
    return 0x80000000;
 800bd36:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bd3a:	e000      	b.n	800bd3e <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 800bd3c:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 800bd3e:	4618      	mov	r0, r3
 800bd40:	3710      	adds	r7, #16
 800bd42:	46bd      	mov	sp, r7
 800bd44:	bd80      	pop	{r7, pc}
 800bd46:	bf00      	nop
 800bd48:	e000ed04 	.word	0xe000ed04

0800bd4c <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 800bd4c:	b590      	push	{r4, r7, lr}
 800bd4e:	b089      	sub	sp, #36	; 0x24
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	60f8      	str	r0, [r7, #12]
 800bd54:	60b9      	str	r1, [r7, #8]
 800bd56:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 800bd58:	2300      	movs	r3, #0
 800bd5a:	617b      	str	r3, [r7, #20]
  ticks = 0;
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bd66:	d103      	bne.n	800bd70 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 800bd68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bd6c:	61fb      	str	r3, [r7, #28]
 800bd6e:	e009      	b.n	800bd84 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d006      	beq.n	800bd84 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 800bd7a:	69fb      	ldr	r3, [r7, #28]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d101      	bne.n	800bd84 <osSignalWait+0x38>
      ticks = 1;
 800bd80:	2301      	movs	r3, #1
 800bd82:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 800bd84:	f7ff ff3e 	bl	800bc04 <inHandlerMode>
 800bd88:	4603      	mov	r3, r0
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d002      	beq.n	800bd94 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 800bd8e:	2382      	movs	r3, #130	; 0x82
 800bd90:	613b      	str	r3, [r7, #16]
 800bd92:	e01b      	b.n	800bdcc <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 800bd94:	68b9      	ldr	r1, [r7, #8]
 800bd96:	f107 0310 	add.w	r3, r7, #16
 800bd9a:	1d1a      	adds	r2, r3, #4
 800bd9c:	69fb      	ldr	r3, [r7, #28]
 800bd9e:	2000      	movs	r0, #0
 800bda0:	f000 fe06 	bl	800c9b0 <xTaskNotifyWait>
 800bda4:	4603      	mov	r3, r0
 800bda6:	2b01      	cmp	r3, #1
 800bda8:	d008      	beq.n	800bdbc <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 800bdaa:	69fb      	ldr	r3, [r7, #28]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d102      	bne.n	800bdb6 <osSignalWait+0x6a>
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	613b      	str	r3, [r7, #16]
 800bdb4:	e00a      	b.n	800bdcc <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 800bdb6:	2340      	movs	r3, #64	; 0x40
 800bdb8:	613b      	str	r3, [r7, #16]
 800bdba:	e007      	b.n	800bdcc <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 800bdbc:	697b      	ldr	r3, [r7, #20]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	da02      	bge.n	800bdc8 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 800bdc2:	2386      	movs	r3, #134	; 0x86
 800bdc4:	613b      	str	r3, [r7, #16]
 800bdc6:	e001      	b.n	800bdcc <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 800bdc8:	2308      	movs	r3, #8
 800bdca:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	461c      	mov	r4, r3
 800bdd0:	f107 0310 	add.w	r3, r7, #16
 800bdd4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bdd8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800bddc:	68f8      	ldr	r0, [r7, #12]
 800bdde:	3724      	adds	r7, #36	; 0x24
 800bde0:	46bd      	mov	sp, r7
 800bde2:	bd90      	pop	{r4, r7, pc}

0800bde4 <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b084      	sub	sp, #16
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	6078      	str	r0, [r7, #4]
 800bdec:	6039      	str	r1, [r7, #0]
#if INCLUDE_vTaskDelayUntil
  TickType_t ticks = (millisec / portTICK_PERIOD_MS);
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	60fb      	str	r3, [r7, #12]
  vTaskDelayUntil((TickType_t *) PreviousWakeTime, ticks ? ticks : 1);
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d001      	beq.n	800bdfc <osDelayUntil+0x18>
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	e000      	b.n	800bdfe <osDelayUntil+0x1a>
 800bdfc:	2301      	movs	r3, #1
 800bdfe:	4619      	mov	r1, r3
 800be00:	6878      	ldr	r0, [r7, #4]
 800be02:	f000 fa0b 	bl	800c21c <vTaskDelayUntil>
  
  return osOK;
 800be06:	2300      	movs	r3, #0
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
#endif
}
 800be08:	4618      	mov	r0, r3
 800be0a:	3710      	adds	r7, #16
 800be0c:	46bd      	mov	sp, r7
 800be0e:	bd80      	pop	{r7, pc}

0800be10 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800be10:	b480      	push	{r7}
 800be12:	b083      	sub	sp, #12
 800be14:	af00      	add	r7, sp, #0
 800be16:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	f103 0208 	add.w	r2, r3, #8
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800be28:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	f103 0208 	add.w	r2, r3, #8
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	f103 0208 	add.w	r2, r3, #8
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	2200      	movs	r2, #0
 800be42:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800be44:	bf00      	nop
 800be46:	370c      	adds	r7, #12
 800be48:	46bd      	mov	sp, r7
 800be4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4e:	4770      	bx	lr

0800be50 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800be50:	b480      	push	{r7}
 800be52:	b083      	sub	sp, #12
 800be54:	af00      	add	r7, sp, #0
 800be56:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	2200      	movs	r2, #0
 800be5c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800be5e:	bf00      	nop
 800be60:	370c      	adds	r7, #12
 800be62:	46bd      	mov	sp, r7
 800be64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be68:	4770      	bx	lr

0800be6a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800be6a:	b480      	push	{r7}
 800be6c:	b085      	sub	sp, #20
 800be6e:	af00      	add	r7, sp, #0
 800be70:	6078      	str	r0, [r7, #4]
 800be72:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	685b      	ldr	r3, [r3, #4]
 800be78:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800be7a:	683b      	ldr	r3, [r7, #0]
 800be7c:	68fa      	ldr	r2, [r7, #12]
 800be7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	689a      	ldr	r2, [r3, #8]
 800be84:	683b      	ldr	r3, [r7, #0]
 800be86:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	689b      	ldr	r3, [r3, #8]
 800be8c:	683a      	ldr	r2, [r7, #0]
 800be8e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	683a      	ldr	r2, [r7, #0]
 800be94:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800be96:	683b      	ldr	r3, [r7, #0]
 800be98:	687a      	ldr	r2, [r7, #4]
 800be9a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	1c5a      	adds	r2, r3, #1
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	601a      	str	r2, [r3, #0]
}
 800bea6:	bf00      	nop
 800bea8:	3714      	adds	r7, #20
 800beaa:	46bd      	mov	sp, r7
 800beac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb0:	4770      	bx	lr

0800beb2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800beb2:	b480      	push	{r7}
 800beb4:	b085      	sub	sp, #20
 800beb6:	af00      	add	r7, sp, #0
 800beb8:	6078      	str	r0, [r7, #4]
 800beba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bebc:	683b      	ldr	r3, [r7, #0]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bec2:	68bb      	ldr	r3, [r7, #8]
 800bec4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bec8:	d103      	bne.n	800bed2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	691b      	ldr	r3, [r3, #16]
 800bece:	60fb      	str	r3, [r7, #12]
 800bed0:	e00c      	b.n	800beec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	3308      	adds	r3, #8
 800bed6:	60fb      	str	r3, [r7, #12]
 800bed8:	e002      	b.n	800bee0 <vListInsert+0x2e>
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	685b      	ldr	r3, [r3, #4]
 800bede:	60fb      	str	r3, [r7, #12]
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	685b      	ldr	r3, [r3, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	68ba      	ldr	r2, [r7, #8]
 800bee8:	429a      	cmp	r2, r3
 800beea:	d2f6      	bcs.n	800beda <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	685a      	ldr	r2, [r3, #4]
 800bef0:	683b      	ldr	r3, [r7, #0]
 800bef2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bef4:	683b      	ldr	r3, [r7, #0]
 800bef6:	685b      	ldr	r3, [r3, #4]
 800bef8:	683a      	ldr	r2, [r7, #0]
 800befa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800befc:	683b      	ldr	r3, [r7, #0]
 800befe:	68fa      	ldr	r2, [r7, #12]
 800bf00:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	683a      	ldr	r2, [r7, #0]
 800bf06:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	687a      	ldr	r2, [r7, #4]
 800bf0c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	1c5a      	adds	r2, r3, #1
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	601a      	str	r2, [r3, #0]
}
 800bf18:	bf00      	nop
 800bf1a:	3714      	adds	r7, #20
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf22:	4770      	bx	lr

0800bf24 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bf24:	b480      	push	{r7}
 800bf26:	b085      	sub	sp, #20
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	691b      	ldr	r3, [r3, #16]
 800bf30:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	685b      	ldr	r3, [r3, #4]
 800bf36:	687a      	ldr	r2, [r7, #4]
 800bf38:	6892      	ldr	r2, [r2, #8]
 800bf3a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	689b      	ldr	r3, [r3, #8]
 800bf40:	687a      	ldr	r2, [r7, #4]
 800bf42:	6852      	ldr	r2, [r2, #4]
 800bf44:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	685b      	ldr	r3, [r3, #4]
 800bf4a:	687a      	ldr	r2, [r7, #4]
 800bf4c:	429a      	cmp	r2, r3
 800bf4e:	d103      	bne.n	800bf58 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	689a      	ldr	r2, [r3, #8]
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	1e5a      	subs	r2, r3, #1
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	681b      	ldr	r3, [r3, #0]
}
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	3714      	adds	r7, #20
 800bf70:	46bd      	mov	sp, r7
 800bf72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf76:	4770      	bx	lr

0800bf78 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b08c      	sub	sp, #48	; 0x30
 800bf7c:	af04      	add	r7, sp, #16
 800bf7e:	60f8      	str	r0, [r7, #12]
 800bf80:	60b9      	str	r1, [r7, #8]
 800bf82:	603b      	str	r3, [r7, #0]
 800bf84:	4613      	mov	r3, r2
 800bf86:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bf88:	88fb      	ldrh	r3, [r7, #6]
 800bf8a:	009b      	lsls	r3, r3, #2
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	f001 f9c3 	bl	800d318 <pvPortMalloc>
 800bf92:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bf94:	697b      	ldr	r3, [r7, #20]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d00e      	beq.n	800bfb8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bf9a:	20a0      	movs	r0, #160	; 0xa0
 800bf9c:	f001 f9bc 	bl	800d318 <pvPortMalloc>
 800bfa0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bfa2:	69fb      	ldr	r3, [r7, #28]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d003      	beq.n	800bfb0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bfa8:	69fb      	ldr	r3, [r7, #28]
 800bfaa:	697a      	ldr	r2, [r7, #20]
 800bfac:	631a      	str	r2, [r3, #48]	; 0x30
 800bfae:	e005      	b.n	800bfbc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bfb0:	6978      	ldr	r0, [r7, #20]
 800bfb2:	f001 fa81 	bl	800d4b8 <vPortFree>
 800bfb6:	e001      	b.n	800bfbc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bfb8:	2300      	movs	r3, #0
 800bfba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bfbc:	69fb      	ldr	r3, [r7, #28]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d013      	beq.n	800bfea <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bfc2:	88fa      	ldrh	r2, [r7, #6]
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	9303      	str	r3, [sp, #12]
 800bfc8:	69fb      	ldr	r3, [r7, #28]
 800bfca:	9302      	str	r3, [sp, #8]
 800bfcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfce:	9301      	str	r3, [sp, #4]
 800bfd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfd2:	9300      	str	r3, [sp, #0]
 800bfd4:	683b      	ldr	r3, [r7, #0]
 800bfd6:	68b9      	ldr	r1, [r7, #8]
 800bfd8:	68f8      	ldr	r0, [r7, #12]
 800bfda:	f000 f80f 	bl	800bffc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bfde:	69f8      	ldr	r0, [r7, #28]
 800bfe0:	f000 f8b2 	bl	800c148 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bfe4:	2301      	movs	r3, #1
 800bfe6:	61bb      	str	r3, [r7, #24]
 800bfe8:	e002      	b.n	800bff0 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bfea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bfee:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bff0:	69bb      	ldr	r3, [r7, #24]
	}
 800bff2:	4618      	mov	r0, r3
 800bff4:	3720      	adds	r7, #32
 800bff6:	46bd      	mov	sp, r7
 800bff8:	bd80      	pop	{r7, pc}
	...

0800bffc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b088      	sub	sp, #32
 800c000:	af00      	add	r7, sp, #0
 800c002:	60f8      	str	r0, [r7, #12]
 800c004:	60b9      	str	r1, [r7, #8]
 800c006:	607a      	str	r2, [r7, #4]
 800c008:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c00a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c00c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	009b      	lsls	r3, r3, #2
 800c012:	461a      	mov	r2, r3
 800c014:	21a5      	movs	r1, #165	; 0xa5
 800c016:	f008 fb20 	bl	801465a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c01a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c01c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c024:	3b01      	subs	r3, #1
 800c026:	009b      	lsls	r3, r3, #2
 800c028:	4413      	add	r3, r2
 800c02a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c02c:	69bb      	ldr	r3, [r7, #24]
 800c02e:	f023 0307 	bic.w	r3, r3, #7
 800c032:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c034:	69bb      	ldr	r3, [r7, #24]
 800c036:	f003 0307 	and.w	r3, r3, #7
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d00a      	beq.n	800c054 <prvInitialiseNewTask+0x58>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c03e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c042:	f383 8811 	msr	BASEPRI, r3
 800c046:	f3bf 8f6f 	isb	sy
 800c04a:	f3bf 8f4f 	dsb	sy
 800c04e:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c050:	bf00      	nop
 800c052:	e7fe      	b.n	800c052 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c054:	68bb      	ldr	r3, [r7, #8]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d01f      	beq.n	800c09a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c05a:	2300      	movs	r3, #0
 800c05c:	61fb      	str	r3, [r7, #28]
 800c05e:	e012      	b.n	800c086 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c060:	68ba      	ldr	r2, [r7, #8]
 800c062:	69fb      	ldr	r3, [r7, #28]
 800c064:	4413      	add	r3, r2
 800c066:	7819      	ldrb	r1, [r3, #0]
 800c068:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c06a:	69fb      	ldr	r3, [r7, #28]
 800c06c:	4413      	add	r3, r2
 800c06e:	3334      	adds	r3, #52	; 0x34
 800c070:	460a      	mov	r2, r1
 800c072:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c074:	68ba      	ldr	r2, [r7, #8]
 800c076:	69fb      	ldr	r3, [r7, #28]
 800c078:	4413      	add	r3, r2
 800c07a:	781b      	ldrb	r3, [r3, #0]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d006      	beq.n	800c08e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c080:	69fb      	ldr	r3, [r7, #28]
 800c082:	3301      	adds	r3, #1
 800c084:	61fb      	str	r3, [r7, #28]
 800c086:	69fb      	ldr	r3, [r7, #28]
 800c088:	2b0f      	cmp	r3, #15
 800c08a:	d9e9      	bls.n	800c060 <prvInitialiseNewTask+0x64>
 800c08c:	e000      	b.n	800c090 <prvInitialiseNewTask+0x94>
			{
				break;
 800c08e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c092:	2200      	movs	r2, #0
 800c094:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c098:	e003      	b.n	800c0a2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c09a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c09c:	2200      	movs	r2, #0
 800c09e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c0a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0a4:	2b06      	cmp	r3, #6
 800c0a6:	d901      	bls.n	800c0ac <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c0a8:	2306      	movs	r3, #6
 800c0aa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c0ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c0b0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c0b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c0b6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c0b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ba:	2200      	movs	r2, #0
 800c0bc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c0be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0c0:	3304      	adds	r3, #4
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	f7ff fec4 	bl	800be50 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c0c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ca:	3318      	adds	r3, #24
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	f7ff febf 	bl	800be50 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c0d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c0d6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c0d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0da:	f1c3 0207 	rsb	r2, r3, #7
 800c0de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0e0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c0e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c0e6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c0e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c0f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c0f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0fa:	334c      	adds	r3, #76	; 0x4c
 800c0fc:	224c      	movs	r2, #76	; 0x4c
 800c0fe:	2100      	movs	r1, #0
 800c100:	4618      	mov	r0, r3
 800c102:	f008 faaa 	bl	801465a <memset>
 800c106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c108:	4a0c      	ldr	r2, [pc, #48]	; (800c13c <prvInitialiseNewTask+0x140>)
 800c10a:	651a      	str	r2, [r3, #80]	; 0x50
 800c10c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c10e:	4a0c      	ldr	r2, [pc, #48]	; (800c140 <prvInitialiseNewTask+0x144>)
 800c110:	655a      	str	r2, [r3, #84]	; 0x54
 800c112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c114:	4a0b      	ldr	r2, [pc, #44]	; (800c144 <prvInitialiseNewTask+0x148>)
 800c116:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c118:	683a      	ldr	r2, [r7, #0]
 800c11a:	68f9      	ldr	r1, [r7, #12]
 800c11c:	69b8      	ldr	r0, [r7, #24]
 800c11e:	f000 feaf 	bl	800ce80 <pxPortInitialiseStack>
 800c122:	4602      	mov	r2, r0
 800c124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c126:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d002      	beq.n	800c134 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c12e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c130:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c132:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c134:	bf00      	nop
 800c136:	3720      	adds	r7, #32
 800c138:	46bd      	mov	sp, r7
 800c13a:	bd80      	pop	{r7, pc}
 800c13c:	20016f28 	.word	0x20016f28
 800c140:	20016f90 	.word	0x20016f90
 800c144:	20016ff8 	.word	0x20016ff8

0800c148 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	b082      	sub	sp, #8
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c150:	f000 ffc0 	bl	800d0d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c154:	4b2a      	ldr	r3, [pc, #168]	; (800c200 <prvAddNewTaskToReadyList+0xb8>)
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	3301      	adds	r3, #1
 800c15a:	4a29      	ldr	r2, [pc, #164]	; (800c200 <prvAddNewTaskToReadyList+0xb8>)
 800c15c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c15e:	4b29      	ldr	r3, [pc, #164]	; (800c204 <prvAddNewTaskToReadyList+0xbc>)
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d109      	bne.n	800c17a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c166:	4a27      	ldr	r2, [pc, #156]	; (800c204 <prvAddNewTaskToReadyList+0xbc>)
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c16c:	4b24      	ldr	r3, [pc, #144]	; (800c200 <prvAddNewTaskToReadyList+0xb8>)
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	2b01      	cmp	r3, #1
 800c172:	d110      	bne.n	800c196 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c174:	f000 fb78 	bl	800c868 <prvInitialiseTaskLists>
 800c178:	e00d      	b.n	800c196 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c17a:	4b23      	ldr	r3, [pc, #140]	; (800c208 <prvAddNewTaskToReadyList+0xc0>)
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d109      	bne.n	800c196 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c182:	4b20      	ldr	r3, [pc, #128]	; (800c204 <prvAddNewTaskToReadyList+0xbc>)
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c18c:	429a      	cmp	r2, r3
 800c18e:	d802      	bhi.n	800c196 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c190:	4a1c      	ldr	r2, [pc, #112]	; (800c204 <prvAddNewTaskToReadyList+0xbc>)
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c196:	4b1d      	ldr	r3, [pc, #116]	; (800c20c <prvAddNewTaskToReadyList+0xc4>)
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	3301      	adds	r3, #1
 800c19c:	4a1b      	ldr	r2, [pc, #108]	; (800c20c <prvAddNewTaskToReadyList+0xc4>)
 800c19e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1a4:	2201      	movs	r2, #1
 800c1a6:	409a      	lsls	r2, r3
 800c1a8:	4b19      	ldr	r3, [pc, #100]	; (800c210 <prvAddNewTaskToReadyList+0xc8>)
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	4313      	orrs	r3, r2
 800c1ae:	4a18      	ldr	r2, [pc, #96]	; (800c210 <prvAddNewTaskToReadyList+0xc8>)
 800c1b0:	6013      	str	r3, [r2, #0]
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1b6:	4613      	mov	r3, r2
 800c1b8:	009b      	lsls	r3, r3, #2
 800c1ba:	4413      	add	r3, r2
 800c1bc:	009b      	lsls	r3, r3, #2
 800c1be:	4a15      	ldr	r2, [pc, #84]	; (800c214 <prvAddNewTaskToReadyList+0xcc>)
 800c1c0:	441a      	add	r2, r3
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	3304      	adds	r3, #4
 800c1c6:	4619      	mov	r1, r3
 800c1c8:	4610      	mov	r0, r2
 800c1ca:	f7ff fe4e 	bl	800be6a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c1ce:	f000 ffb1 	bl	800d134 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c1d2:	4b0d      	ldr	r3, [pc, #52]	; (800c208 <prvAddNewTaskToReadyList+0xc0>)
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d00e      	beq.n	800c1f8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c1da:	4b0a      	ldr	r3, [pc, #40]	; (800c204 <prvAddNewTaskToReadyList+0xbc>)
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1e4:	429a      	cmp	r2, r3
 800c1e6:	d207      	bcs.n	800c1f8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c1e8:	4b0b      	ldr	r3, [pc, #44]	; (800c218 <prvAddNewTaskToReadyList+0xd0>)
 800c1ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1ee:	601a      	str	r2, [r3, #0]
 800c1f0:	f3bf 8f4f 	dsb	sy
 800c1f4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c1f8:	bf00      	nop
 800c1fa:	3708      	adds	r7, #8
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	bd80      	pop	{r7, pc}
 800c200:	2000062c 	.word	0x2000062c
 800c204:	2000052c 	.word	0x2000052c
 800c208:	20000638 	.word	0x20000638
 800c20c:	20000648 	.word	0x20000648
 800c210:	20000634 	.word	0x20000634
 800c214:	20000530 	.word	0x20000530
 800c218:	e000ed04 	.word	0xe000ed04

0800c21c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b08a      	sub	sp, #40	; 0x28
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]
 800c224:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800c226:	2300      	movs	r3, #0
 800c228:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d10a      	bne.n	800c246 <vTaskDelayUntil+0x2a>
	__asm volatile
 800c230:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c234:	f383 8811 	msr	BASEPRI, r3
 800c238:	f3bf 8f6f 	isb	sy
 800c23c:	f3bf 8f4f 	dsb	sy
 800c240:	617b      	str	r3, [r7, #20]
}
 800c242:	bf00      	nop
 800c244:	e7fe      	b.n	800c244 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800c246:	683b      	ldr	r3, [r7, #0]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d10a      	bne.n	800c262 <vTaskDelayUntil+0x46>
	__asm volatile
 800c24c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c250:	f383 8811 	msr	BASEPRI, r3
 800c254:	f3bf 8f6f 	isb	sy
 800c258:	f3bf 8f4f 	dsb	sy
 800c25c:	613b      	str	r3, [r7, #16]
}
 800c25e:	bf00      	nop
 800c260:	e7fe      	b.n	800c260 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800c262:	4b2a      	ldr	r3, [pc, #168]	; (800c30c <vTaskDelayUntil+0xf0>)
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d00a      	beq.n	800c280 <vTaskDelayUntil+0x64>
	__asm volatile
 800c26a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c26e:	f383 8811 	msr	BASEPRI, r3
 800c272:	f3bf 8f6f 	isb	sy
 800c276:	f3bf 8f4f 	dsb	sy
 800c27a:	60fb      	str	r3, [r7, #12]
}
 800c27c:	bf00      	nop
 800c27e:	e7fe      	b.n	800c27e <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800c280:	f000 f8ce 	bl	800c420 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800c284:	4b22      	ldr	r3, [pc, #136]	; (800c310 <vTaskDelayUntil+0xf4>)
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	683a      	ldr	r2, [r7, #0]
 800c290:	4413      	add	r3, r2
 800c292:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	6a3a      	ldr	r2, [r7, #32]
 800c29a:	429a      	cmp	r2, r3
 800c29c:	d20b      	bcs.n	800c2b6 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	69fa      	ldr	r2, [r7, #28]
 800c2a4:	429a      	cmp	r2, r3
 800c2a6:	d211      	bcs.n	800c2cc <vTaskDelayUntil+0xb0>
 800c2a8:	69fa      	ldr	r2, [r7, #28]
 800c2aa:	6a3b      	ldr	r3, [r7, #32]
 800c2ac:	429a      	cmp	r2, r3
 800c2ae:	d90d      	bls.n	800c2cc <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800c2b0:	2301      	movs	r3, #1
 800c2b2:	627b      	str	r3, [r7, #36]	; 0x24
 800c2b4:	e00a      	b.n	800c2cc <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	69fa      	ldr	r2, [r7, #28]
 800c2bc:	429a      	cmp	r2, r3
 800c2be:	d303      	bcc.n	800c2c8 <vTaskDelayUntil+0xac>
 800c2c0:	69fa      	ldr	r2, [r7, #28]
 800c2c2:	6a3b      	ldr	r3, [r7, #32]
 800c2c4:	429a      	cmp	r2, r3
 800c2c6:	d901      	bls.n	800c2cc <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800c2c8:	2301      	movs	r3, #1
 800c2ca:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	69fa      	ldr	r2, [r7, #28]
 800c2d0:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800c2d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d006      	beq.n	800c2e6 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800c2d8:	69fa      	ldr	r2, [r7, #28]
 800c2da:	6a3b      	ldr	r3, [r7, #32]
 800c2dc:	1ad3      	subs	r3, r2, r3
 800c2de:	2100      	movs	r1, #0
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	f000 fd67 	bl	800cdb4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800c2e6:	f000 f8a9 	bl	800c43c <xTaskResumeAll>
 800c2ea:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c2ec:	69bb      	ldr	r3, [r7, #24]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d107      	bne.n	800c302 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800c2f2:	4b08      	ldr	r3, [pc, #32]	; (800c314 <vTaskDelayUntil+0xf8>)
 800c2f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2f8:	601a      	str	r2, [r3, #0]
 800c2fa:	f3bf 8f4f 	dsb	sy
 800c2fe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c302:	bf00      	nop
 800c304:	3728      	adds	r7, #40	; 0x28
 800c306:	46bd      	mov	sp, r7
 800c308:	bd80      	pop	{r7, pc}
 800c30a:	bf00      	nop
 800c30c:	20000654 	.word	0x20000654
 800c310:	20000630 	.word	0x20000630
 800c314:	e000ed04 	.word	0xe000ed04

0800c318 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b084      	sub	sp, #16
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c320:	2300      	movs	r3, #0
 800c322:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d017      	beq.n	800c35a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c32a:	4b13      	ldr	r3, [pc, #76]	; (800c378 <vTaskDelay+0x60>)
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d00a      	beq.n	800c348 <vTaskDelay+0x30>
	__asm volatile
 800c332:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c336:	f383 8811 	msr	BASEPRI, r3
 800c33a:	f3bf 8f6f 	isb	sy
 800c33e:	f3bf 8f4f 	dsb	sy
 800c342:	60bb      	str	r3, [r7, #8]
}
 800c344:	bf00      	nop
 800c346:	e7fe      	b.n	800c346 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c348:	f000 f86a 	bl	800c420 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c34c:	2100      	movs	r1, #0
 800c34e:	6878      	ldr	r0, [r7, #4]
 800c350:	f000 fd30 	bl	800cdb4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c354:	f000 f872 	bl	800c43c <xTaskResumeAll>
 800c358:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d107      	bne.n	800c370 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c360:	4b06      	ldr	r3, [pc, #24]	; (800c37c <vTaskDelay+0x64>)
 800c362:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c366:	601a      	str	r2, [r3, #0]
 800c368:	f3bf 8f4f 	dsb	sy
 800c36c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c370:	bf00      	nop
 800c372:	3710      	adds	r7, #16
 800c374:	46bd      	mov	sp, r7
 800c376:	bd80      	pop	{r7, pc}
 800c378:	20000654 	.word	0x20000654
 800c37c:	e000ed04 	.word	0xe000ed04

0800c380 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c380:	b580      	push	{r7, lr}
 800c382:	b086      	sub	sp, #24
 800c384:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800c386:	4b1e      	ldr	r3, [pc, #120]	; (800c400 <vTaskStartScheduler+0x80>)
 800c388:	9301      	str	r3, [sp, #4]
 800c38a:	2300      	movs	r3, #0
 800c38c:	9300      	str	r3, [sp, #0]
 800c38e:	2300      	movs	r3, #0
 800c390:	2280      	movs	r2, #128	; 0x80
 800c392:	491c      	ldr	r1, [pc, #112]	; (800c404 <vTaskStartScheduler+0x84>)
 800c394:	481c      	ldr	r0, [pc, #112]	; (800c408 <vTaskStartScheduler+0x88>)
 800c396:	f7ff fdef 	bl	800bf78 <xTaskCreate>
 800c39a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	2b01      	cmp	r3, #1
 800c3a0:	d11b      	bne.n	800c3da <vTaskStartScheduler+0x5a>
	__asm volatile
 800c3a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3a6:	f383 8811 	msr	BASEPRI, r3
 800c3aa:	f3bf 8f6f 	isb	sy
 800c3ae:	f3bf 8f4f 	dsb	sy
 800c3b2:	60bb      	str	r3, [r7, #8]
}
 800c3b4:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c3b6:	4b15      	ldr	r3, [pc, #84]	; (800c40c <vTaskStartScheduler+0x8c>)
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	334c      	adds	r3, #76	; 0x4c
 800c3bc:	4a14      	ldr	r2, [pc, #80]	; (800c410 <vTaskStartScheduler+0x90>)
 800c3be:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c3c0:	4b14      	ldr	r3, [pc, #80]	; (800c414 <vTaskStartScheduler+0x94>)
 800c3c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c3c6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c3c8:	4b13      	ldr	r3, [pc, #76]	; (800c418 <vTaskStartScheduler+0x98>)
 800c3ca:	2201      	movs	r2, #1
 800c3cc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c3ce:	4b13      	ldr	r3, [pc, #76]	; (800c41c <vTaskStartScheduler+0x9c>)
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c3d4:	f000 fddc 	bl	800cf90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c3d8:	e00e      	b.n	800c3f8 <vTaskStartScheduler+0x78>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c3e0:	d10a      	bne.n	800c3f8 <vTaskStartScheduler+0x78>
	__asm volatile
 800c3e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3e6:	f383 8811 	msr	BASEPRI, r3
 800c3ea:	f3bf 8f6f 	isb	sy
 800c3ee:	f3bf 8f4f 	dsb	sy
 800c3f2:	607b      	str	r3, [r7, #4]
}
 800c3f4:	bf00      	nop
 800c3f6:	e7fe      	b.n	800c3f6 <vTaskStartScheduler+0x76>
}
 800c3f8:	bf00      	nop
 800c3fa:	3710      	adds	r7, #16
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	bd80      	pop	{r7, pc}
 800c400:	20000650 	.word	0x20000650
 800c404:	08015980 	.word	0x08015980
 800c408:	0800c839 	.word	0x0800c839
 800c40c:	2000052c 	.word	0x2000052c
 800c410:	20000198 	.word	0x20000198
 800c414:	2000064c 	.word	0x2000064c
 800c418:	20000638 	.word	0x20000638
 800c41c:	20000630 	.word	0x20000630

0800c420 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c420:	b480      	push	{r7}
 800c422:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c424:	4b04      	ldr	r3, [pc, #16]	; (800c438 <vTaskSuspendAll+0x18>)
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	3301      	adds	r3, #1
 800c42a:	4a03      	ldr	r2, [pc, #12]	; (800c438 <vTaskSuspendAll+0x18>)
 800c42c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c42e:	bf00      	nop
 800c430:	46bd      	mov	sp, r7
 800c432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c436:	4770      	bx	lr
 800c438:	20000654 	.word	0x20000654

0800c43c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b084      	sub	sp, #16
 800c440:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c442:	2300      	movs	r3, #0
 800c444:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c446:	2300      	movs	r3, #0
 800c448:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c44a:	4b41      	ldr	r3, [pc, #260]	; (800c550 <xTaskResumeAll+0x114>)
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d10a      	bne.n	800c468 <xTaskResumeAll+0x2c>
	__asm volatile
 800c452:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c456:	f383 8811 	msr	BASEPRI, r3
 800c45a:	f3bf 8f6f 	isb	sy
 800c45e:	f3bf 8f4f 	dsb	sy
 800c462:	603b      	str	r3, [r7, #0]
}
 800c464:	bf00      	nop
 800c466:	e7fe      	b.n	800c466 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c468:	f000 fe34 	bl	800d0d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c46c:	4b38      	ldr	r3, [pc, #224]	; (800c550 <xTaskResumeAll+0x114>)
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	3b01      	subs	r3, #1
 800c472:	4a37      	ldr	r2, [pc, #220]	; (800c550 <xTaskResumeAll+0x114>)
 800c474:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c476:	4b36      	ldr	r3, [pc, #216]	; (800c550 <xTaskResumeAll+0x114>)
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d161      	bne.n	800c542 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c47e:	4b35      	ldr	r3, [pc, #212]	; (800c554 <xTaskResumeAll+0x118>)
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d05d      	beq.n	800c542 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c486:	e02e      	b.n	800c4e6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c488:	4b33      	ldr	r3, [pc, #204]	; (800c558 <xTaskResumeAll+0x11c>)
 800c48a:	68db      	ldr	r3, [r3, #12]
 800c48c:	68db      	ldr	r3, [r3, #12]
 800c48e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	3318      	adds	r3, #24
 800c494:	4618      	mov	r0, r3
 800c496:	f7ff fd45 	bl	800bf24 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	3304      	adds	r3, #4
 800c49e:	4618      	mov	r0, r3
 800c4a0:	f7ff fd40 	bl	800bf24 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4a8:	2201      	movs	r2, #1
 800c4aa:	409a      	lsls	r2, r3
 800c4ac:	4b2b      	ldr	r3, [pc, #172]	; (800c55c <xTaskResumeAll+0x120>)
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	4313      	orrs	r3, r2
 800c4b2:	4a2a      	ldr	r2, [pc, #168]	; (800c55c <xTaskResumeAll+0x120>)
 800c4b4:	6013      	str	r3, [r2, #0]
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4ba:	4613      	mov	r3, r2
 800c4bc:	009b      	lsls	r3, r3, #2
 800c4be:	4413      	add	r3, r2
 800c4c0:	009b      	lsls	r3, r3, #2
 800c4c2:	4a27      	ldr	r2, [pc, #156]	; (800c560 <xTaskResumeAll+0x124>)
 800c4c4:	441a      	add	r2, r3
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	3304      	adds	r3, #4
 800c4ca:	4619      	mov	r1, r3
 800c4cc:	4610      	mov	r0, r2
 800c4ce:	f7ff fccc 	bl	800be6a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4d6:	4b23      	ldr	r3, [pc, #140]	; (800c564 <xTaskResumeAll+0x128>)
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4dc:	429a      	cmp	r2, r3
 800c4de:	d302      	bcc.n	800c4e6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800c4e0:	4b21      	ldr	r3, [pc, #132]	; (800c568 <xTaskResumeAll+0x12c>)
 800c4e2:	2201      	movs	r2, #1
 800c4e4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c4e6:	4b1c      	ldr	r3, [pc, #112]	; (800c558 <xTaskResumeAll+0x11c>)
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d1cc      	bne.n	800c488 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d001      	beq.n	800c4f8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c4f4:	f000 fa3c 	bl	800c970 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c4f8:	4b1c      	ldr	r3, [pc, #112]	; (800c56c <xTaskResumeAll+0x130>)
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d010      	beq.n	800c526 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c504:	f000 f858 	bl	800c5b8 <xTaskIncrementTick>
 800c508:	4603      	mov	r3, r0
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d002      	beq.n	800c514 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800c50e:	4b16      	ldr	r3, [pc, #88]	; (800c568 <xTaskResumeAll+0x12c>)
 800c510:	2201      	movs	r2, #1
 800c512:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	3b01      	subs	r3, #1
 800c518:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d1f1      	bne.n	800c504 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800c520:	4b12      	ldr	r3, [pc, #72]	; (800c56c <xTaskResumeAll+0x130>)
 800c522:	2200      	movs	r2, #0
 800c524:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c526:	4b10      	ldr	r3, [pc, #64]	; (800c568 <xTaskResumeAll+0x12c>)
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d009      	beq.n	800c542 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c52e:	2301      	movs	r3, #1
 800c530:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c532:	4b0f      	ldr	r3, [pc, #60]	; (800c570 <xTaskResumeAll+0x134>)
 800c534:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c538:	601a      	str	r2, [r3, #0]
 800c53a:	f3bf 8f4f 	dsb	sy
 800c53e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c542:	f000 fdf7 	bl	800d134 <vPortExitCritical>

	return xAlreadyYielded;
 800c546:	68bb      	ldr	r3, [r7, #8]
}
 800c548:	4618      	mov	r0, r3
 800c54a:	3710      	adds	r7, #16
 800c54c:	46bd      	mov	sp, r7
 800c54e:	bd80      	pop	{r7, pc}
 800c550:	20000654 	.word	0x20000654
 800c554:	2000062c 	.word	0x2000062c
 800c558:	200005ec 	.word	0x200005ec
 800c55c:	20000634 	.word	0x20000634
 800c560:	20000530 	.word	0x20000530
 800c564:	2000052c 	.word	0x2000052c
 800c568:	20000640 	.word	0x20000640
 800c56c:	2000063c 	.word	0x2000063c
 800c570:	e000ed04 	.word	0xe000ed04

0800c574 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c574:	b480      	push	{r7}
 800c576:	b083      	sub	sp, #12
 800c578:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c57a:	4b05      	ldr	r3, [pc, #20]	; (800c590 <xTaskGetTickCount+0x1c>)
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c580:	687b      	ldr	r3, [r7, #4]
}
 800c582:	4618      	mov	r0, r3
 800c584:	370c      	adds	r7, #12
 800c586:	46bd      	mov	sp, r7
 800c588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58c:	4770      	bx	lr
 800c58e:	bf00      	nop
 800c590:	20000630 	.word	0x20000630

0800c594 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800c594:	b580      	push	{r7, lr}
 800c596:	b082      	sub	sp, #8
 800c598:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c59a:	f000 fe7d 	bl	800d298 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800c59e:	2300      	movs	r3, #0
 800c5a0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800c5a2:	4b04      	ldr	r3, [pc, #16]	; (800c5b4 <xTaskGetTickCountFromISR+0x20>)
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c5a8:	683b      	ldr	r3, [r7, #0]
}
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	3708      	adds	r7, #8
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	bd80      	pop	{r7, pc}
 800c5b2:	bf00      	nop
 800c5b4:	20000630 	.word	0x20000630

0800c5b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	b086      	sub	sp, #24
 800c5bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c5be:	2300      	movs	r3, #0
 800c5c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c5c2:	4b4e      	ldr	r3, [pc, #312]	; (800c6fc <xTaskIncrementTick+0x144>)
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	f040 808e 	bne.w	800c6e8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c5cc:	4b4c      	ldr	r3, [pc, #304]	; (800c700 <xTaskIncrementTick+0x148>)
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	3301      	adds	r3, #1
 800c5d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c5d4:	4a4a      	ldr	r2, [pc, #296]	; (800c700 <xTaskIncrementTick+0x148>)
 800c5d6:	693b      	ldr	r3, [r7, #16]
 800c5d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c5da:	693b      	ldr	r3, [r7, #16]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d120      	bne.n	800c622 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c5e0:	4b48      	ldr	r3, [pc, #288]	; (800c704 <xTaskIncrementTick+0x14c>)
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d00a      	beq.n	800c600 <xTaskIncrementTick+0x48>
	__asm volatile
 800c5ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5ee:	f383 8811 	msr	BASEPRI, r3
 800c5f2:	f3bf 8f6f 	isb	sy
 800c5f6:	f3bf 8f4f 	dsb	sy
 800c5fa:	603b      	str	r3, [r7, #0]
}
 800c5fc:	bf00      	nop
 800c5fe:	e7fe      	b.n	800c5fe <xTaskIncrementTick+0x46>
 800c600:	4b40      	ldr	r3, [pc, #256]	; (800c704 <xTaskIncrementTick+0x14c>)
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	60fb      	str	r3, [r7, #12]
 800c606:	4b40      	ldr	r3, [pc, #256]	; (800c708 <xTaskIncrementTick+0x150>)
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	4a3e      	ldr	r2, [pc, #248]	; (800c704 <xTaskIncrementTick+0x14c>)
 800c60c:	6013      	str	r3, [r2, #0]
 800c60e:	4a3e      	ldr	r2, [pc, #248]	; (800c708 <xTaskIncrementTick+0x150>)
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	6013      	str	r3, [r2, #0]
 800c614:	4b3d      	ldr	r3, [pc, #244]	; (800c70c <xTaskIncrementTick+0x154>)
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	3301      	adds	r3, #1
 800c61a:	4a3c      	ldr	r2, [pc, #240]	; (800c70c <xTaskIncrementTick+0x154>)
 800c61c:	6013      	str	r3, [r2, #0]
 800c61e:	f000 f9a7 	bl	800c970 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c622:	4b3b      	ldr	r3, [pc, #236]	; (800c710 <xTaskIncrementTick+0x158>)
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	693a      	ldr	r2, [r7, #16]
 800c628:	429a      	cmp	r2, r3
 800c62a:	d348      	bcc.n	800c6be <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c62c:	4b35      	ldr	r3, [pc, #212]	; (800c704 <xTaskIncrementTick+0x14c>)
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d104      	bne.n	800c640 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c636:	4b36      	ldr	r3, [pc, #216]	; (800c710 <xTaskIncrementTick+0x158>)
 800c638:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c63c:	601a      	str	r2, [r3, #0]
					break;
 800c63e:	e03e      	b.n	800c6be <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c640:	4b30      	ldr	r3, [pc, #192]	; (800c704 <xTaskIncrementTick+0x14c>)
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	68db      	ldr	r3, [r3, #12]
 800c646:	68db      	ldr	r3, [r3, #12]
 800c648:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c64a:	68bb      	ldr	r3, [r7, #8]
 800c64c:	685b      	ldr	r3, [r3, #4]
 800c64e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c650:	693a      	ldr	r2, [r7, #16]
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	429a      	cmp	r2, r3
 800c656:	d203      	bcs.n	800c660 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c658:	4a2d      	ldr	r2, [pc, #180]	; (800c710 <xTaskIncrementTick+0x158>)
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c65e:	e02e      	b.n	800c6be <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c660:	68bb      	ldr	r3, [r7, #8]
 800c662:	3304      	adds	r3, #4
 800c664:	4618      	mov	r0, r3
 800c666:	f7ff fc5d 	bl	800bf24 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c66a:	68bb      	ldr	r3, [r7, #8]
 800c66c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d004      	beq.n	800c67c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c672:	68bb      	ldr	r3, [r7, #8]
 800c674:	3318      	adds	r3, #24
 800c676:	4618      	mov	r0, r3
 800c678:	f7ff fc54 	bl	800bf24 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c67c:	68bb      	ldr	r3, [r7, #8]
 800c67e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c680:	2201      	movs	r2, #1
 800c682:	409a      	lsls	r2, r3
 800c684:	4b23      	ldr	r3, [pc, #140]	; (800c714 <xTaskIncrementTick+0x15c>)
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	4313      	orrs	r3, r2
 800c68a:	4a22      	ldr	r2, [pc, #136]	; (800c714 <xTaskIncrementTick+0x15c>)
 800c68c:	6013      	str	r3, [r2, #0]
 800c68e:	68bb      	ldr	r3, [r7, #8]
 800c690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c692:	4613      	mov	r3, r2
 800c694:	009b      	lsls	r3, r3, #2
 800c696:	4413      	add	r3, r2
 800c698:	009b      	lsls	r3, r3, #2
 800c69a:	4a1f      	ldr	r2, [pc, #124]	; (800c718 <xTaskIncrementTick+0x160>)
 800c69c:	441a      	add	r2, r3
 800c69e:	68bb      	ldr	r3, [r7, #8]
 800c6a0:	3304      	adds	r3, #4
 800c6a2:	4619      	mov	r1, r3
 800c6a4:	4610      	mov	r0, r2
 800c6a6:	f7ff fbe0 	bl	800be6a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c6aa:	68bb      	ldr	r3, [r7, #8]
 800c6ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6ae:	4b1b      	ldr	r3, [pc, #108]	; (800c71c <xTaskIncrementTick+0x164>)
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6b4:	429a      	cmp	r2, r3
 800c6b6:	d3b9      	bcc.n	800c62c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c6b8:	2301      	movs	r3, #1
 800c6ba:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c6bc:	e7b6      	b.n	800c62c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c6be:	4b17      	ldr	r3, [pc, #92]	; (800c71c <xTaskIncrementTick+0x164>)
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6c4:	4914      	ldr	r1, [pc, #80]	; (800c718 <xTaskIncrementTick+0x160>)
 800c6c6:	4613      	mov	r3, r2
 800c6c8:	009b      	lsls	r3, r3, #2
 800c6ca:	4413      	add	r3, r2
 800c6cc:	009b      	lsls	r3, r3, #2
 800c6ce:	440b      	add	r3, r1
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	2b01      	cmp	r3, #1
 800c6d4:	d901      	bls.n	800c6da <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800c6d6:	2301      	movs	r3, #1
 800c6d8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c6da:	4b11      	ldr	r3, [pc, #68]	; (800c720 <xTaskIncrementTick+0x168>)
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d007      	beq.n	800c6f2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800c6e2:	2301      	movs	r3, #1
 800c6e4:	617b      	str	r3, [r7, #20]
 800c6e6:	e004      	b.n	800c6f2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c6e8:	4b0e      	ldr	r3, [pc, #56]	; (800c724 <xTaskIncrementTick+0x16c>)
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	3301      	adds	r3, #1
 800c6ee:	4a0d      	ldr	r2, [pc, #52]	; (800c724 <xTaskIncrementTick+0x16c>)
 800c6f0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c6f2:	697b      	ldr	r3, [r7, #20]
}
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	3718      	adds	r7, #24
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	bd80      	pop	{r7, pc}
 800c6fc:	20000654 	.word	0x20000654
 800c700:	20000630 	.word	0x20000630
 800c704:	200005e4 	.word	0x200005e4
 800c708:	200005e8 	.word	0x200005e8
 800c70c:	20000644 	.word	0x20000644
 800c710:	2000064c 	.word	0x2000064c
 800c714:	20000634 	.word	0x20000634
 800c718:	20000530 	.word	0x20000530
 800c71c:	2000052c 	.word	0x2000052c
 800c720:	20000640 	.word	0x20000640
 800c724:	2000063c 	.word	0x2000063c

0800c728 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c728:	b580      	push	{r7, lr}
 800c72a:	b088      	sub	sp, #32
 800c72c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c72e:	4b3c      	ldr	r3, [pc, #240]	; (800c820 <vTaskSwitchContext+0xf8>)
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	2b00      	cmp	r3, #0
 800c734:	d003      	beq.n	800c73e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c736:	4b3b      	ldr	r3, [pc, #236]	; (800c824 <vTaskSwitchContext+0xfc>)
 800c738:	2201      	movs	r2, #1
 800c73a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c73c:	e06b      	b.n	800c816 <vTaskSwitchContext+0xee>
		xYieldPending = pdFALSE;
 800c73e:	4b39      	ldr	r3, [pc, #228]	; (800c824 <vTaskSwitchContext+0xfc>)
 800c740:	2200      	movs	r2, #0
 800c742:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800c744:	4b38      	ldr	r3, [pc, #224]	; (800c828 <vTaskSwitchContext+0x100>)
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c74a:	61fb      	str	r3, [r7, #28]
 800c74c:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800c750:	61bb      	str	r3, [r7, #24]
 800c752:	69fb      	ldr	r3, [r7, #28]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	69ba      	ldr	r2, [r7, #24]
 800c758:	429a      	cmp	r2, r3
 800c75a:	d111      	bne.n	800c780 <vTaskSwitchContext+0x58>
 800c75c:	69fb      	ldr	r3, [r7, #28]
 800c75e:	3304      	adds	r3, #4
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	69ba      	ldr	r2, [r7, #24]
 800c764:	429a      	cmp	r2, r3
 800c766:	d10b      	bne.n	800c780 <vTaskSwitchContext+0x58>
 800c768:	69fb      	ldr	r3, [r7, #28]
 800c76a:	3308      	adds	r3, #8
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	69ba      	ldr	r2, [r7, #24]
 800c770:	429a      	cmp	r2, r3
 800c772:	d105      	bne.n	800c780 <vTaskSwitchContext+0x58>
 800c774:	69fb      	ldr	r3, [r7, #28]
 800c776:	330c      	adds	r3, #12
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	69ba      	ldr	r2, [r7, #24]
 800c77c:	429a      	cmp	r2, r3
 800c77e:	d008      	beq.n	800c792 <vTaskSwitchContext+0x6a>
 800c780:	4b29      	ldr	r3, [pc, #164]	; (800c828 <vTaskSwitchContext+0x100>)
 800c782:	681a      	ldr	r2, [r3, #0]
 800c784:	4b28      	ldr	r3, [pc, #160]	; (800c828 <vTaskSwitchContext+0x100>)
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	3334      	adds	r3, #52	; 0x34
 800c78a:	4619      	mov	r1, r3
 800c78c:	4610      	mov	r0, r2
 800c78e:	f7f4 fcc5 	bl	800111c <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c792:	4b26      	ldr	r3, [pc, #152]	; (800c82c <vTaskSwitchContext+0x104>)
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	fab3 f383 	clz	r3, r3
 800c79e:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c7a0:	7afb      	ldrb	r3, [r7, #11]
 800c7a2:	f1c3 031f 	rsb	r3, r3, #31
 800c7a6:	617b      	str	r3, [r7, #20]
 800c7a8:	4921      	ldr	r1, [pc, #132]	; (800c830 <vTaskSwitchContext+0x108>)
 800c7aa:	697a      	ldr	r2, [r7, #20]
 800c7ac:	4613      	mov	r3, r2
 800c7ae:	009b      	lsls	r3, r3, #2
 800c7b0:	4413      	add	r3, r2
 800c7b2:	009b      	lsls	r3, r3, #2
 800c7b4:	440b      	add	r3, r1
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d10a      	bne.n	800c7d2 <vTaskSwitchContext+0xaa>
	__asm volatile
 800c7bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7c0:	f383 8811 	msr	BASEPRI, r3
 800c7c4:	f3bf 8f6f 	isb	sy
 800c7c8:	f3bf 8f4f 	dsb	sy
 800c7cc:	607b      	str	r3, [r7, #4]
}
 800c7ce:	bf00      	nop
 800c7d0:	e7fe      	b.n	800c7d0 <vTaskSwitchContext+0xa8>
 800c7d2:	697a      	ldr	r2, [r7, #20]
 800c7d4:	4613      	mov	r3, r2
 800c7d6:	009b      	lsls	r3, r3, #2
 800c7d8:	4413      	add	r3, r2
 800c7da:	009b      	lsls	r3, r3, #2
 800c7dc:	4a14      	ldr	r2, [pc, #80]	; (800c830 <vTaskSwitchContext+0x108>)
 800c7de:	4413      	add	r3, r2
 800c7e0:	613b      	str	r3, [r7, #16]
 800c7e2:	693b      	ldr	r3, [r7, #16]
 800c7e4:	685b      	ldr	r3, [r3, #4]
 800c7e6:	685a      	ldr	r2, [r3, #4]
 800c7e8:	693b      	ldr	r3, [r7, #16]
 800c7ea:	605a      	str	r2, [r3, #4]
 800c7ec:	693b      	ldr	r3, [r7, #16]
 800c7ee:	685a      	ldr	r2, [r3, #4]
 800c7f0:	693b      	ldr	r3, [r7, #16]
 800c7f2:	3308      	adds	r3, #8
 800c7f4:	429a      	cmp	r2, r3
 800c7f6:	d104      	bne.n	800c802 <vTaskSwitchContext+0xda>
 800c7f8:	693b      	ldr	r3, [r7, #16]
 800c7fa:	685b      	ldr	r3, [r3, #4]
 800c7fc:	685a      	ldr	r2, [r3, #4]
 800c7fe:	693b      	ldr	r3, [r7, #16]
 800c800:	605a      	str	r2, [r3, #4]
 800c802:	693b      	ldr	r3, [r7, #16]
 800c804:	685b      	ldr	r3, [r3, #4]
 800c806:	68db      	ldr	r3, [r3, #12]
 800c808:	4a07      	ldr	r2, [pc, #28]	; (800c828 <vTaskSwitchContext+0x100>)
 800c80a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c80c:	4b06      	ldr	r3, [pc, #24]	; (800c828 <vTaskSwitchContext+0x100>)
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	334c      	adds	r3, #76	; 0x4c
 800c812:	4a08      	ldr	r2, [pc, #32]	; (800c834 <vTaskSwitchContext+0x10c>)
 800c814:	6013      	str	r3, [r2, #0]
}
 800c816:	bf00      	nop
 800c818:	3720      	adds	r7, #32
 800c81a:	46bd      	mov	sp, r7
 800c81c:	bd80      	pop	{r7, pc}
 800c81e:	bf00      	nop
 800c820:	20000654 	.word	0x20000654
 800c824:	20000640 	.word	0x20000640
 800c828:	2000052c 	.word	0x2000052c
 800c82c:	20000634 	.word	0x20000634
 800c830:	20000530 	.word	0x20000530
 800c834:	20000198 	.word	0x20000198

0800c838 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c838:	b580      	push	{r7, lr}
 800c83a:	b082      	sub	sp, #8
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c840:	f000 f852 	bl	800c8e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c844:	4b06      	ldr	r3, [pc, #24]	; (800c860 <prvIdleTask+0x28>)
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	2b01      	cmp	r3, #1
 800c84a:	d9f9      	bls.n	800c840 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c84c:	4b05      	ldr	r3, [pc, #20]	; (800c864 <prvIdleTask+0x2c>)
 800c84e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c852:	601a      	str	r2, [r3, #0]
 800c854:	f3bf 8f4f 	dsb	sy
 800c858:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c85c:	e7f0      	b.n	800c840 <prvIdleTask+0x8>
 800c85e:	bf00      	nop
 800c860:	20000530 	.word	0x20000530
 800c864:	e000ed04 	.word	0xe000ed04

0800c868 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b082      	sub	sp, #8
 800c86c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c86e:	2300      	movs	r3, #0
 800c870:	607b      	str	r3, [r7, #4]
 800c872:	e00c      	b.n	800c88e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c874:	687a      	ldr	r2, [r7, #4]
 800c876:	4613      	mov	r3, r2
 800c878:	009b      	lsls	r3, r3, #2
 800c87a:	4413      	add	r3, r2
 800c87c:	009b      	lsls	r3, r3, #2
 800c87e:	4a12      	ldr	r2, [pc, #72]	; (800c8c8 <prvInitialiseTaskLists+0x60>)
 800c880:	4413      	add	r3, r2
 800c882:	4618      	mov	r0, r3
 800c884:	f7ff fac4 	bl	800be10 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	3301      	adds	r3, #1
 800c88c:	607b      	str	r3, [r7, #4]
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	2b06      	cmp	r3, #6
 800c892:	d9ef      	bls.n	800c874 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c894:	480d      	ldr	r0, [pc, #52]	; (800c8cc <prvInitialiseTaskLists+0x64>)
 800c896:	f7ff fabb 	bl	800be10 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c89a:	480d      	ldr	r0, [pc, #52]	; (800c8d0 <prvInitialiseTaskLists+0x68>)
 800c89c:	f7ff fab8 	bl	800be10 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c8a0:	480c      	ldr	r0, [pc, #48]	; (800c8d4 <prvInitialiseTaskLists+0x6c>)
 800c8a2:	f7ff fab5 	bl	800be10 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c8a6:	480c      	ldr	r0, [pc, #48]	; (800c8d8 <prvInitialiseTaskLists+0x70>)
 800c8a8:	f7ff fab2 	bl	800be10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c8ac:	480b      	ldr	r0, [pc, #44]	; (800c8dc <prvInitialiseTaskLists+0x74>)
 800c8ae:	f7ff faaf 	bl	800be10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c8b2:	4b0b      	ldr	r3, [pc, #44]	; (800c8e0 <prvInitialiseTaskLists+0x78>)
 800c8b4:	4a05      	ldr	r2, [pc, #20]	; (800c8cc <prvInitialiseTaskLists+0x64>)
 800c8b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c8b8:	4b0a      	ldr	r3, [pc, #40]	; (800c8e4 <prvInitialiseTaskLists+0x7c>)
 800c8ba:	4a05      	ldr	r2, [pc, #20]	; (800c8d0 <prvInitialiseTaskLists+0x68>)
 800c8bc:	601a      	str	r2, [r3, #0]
}
 800c8be:	bf00      	nop
 800c8c0:	3708      	adds	r7, #8
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	bd80      	pop	{r7, pc}
 800c8c6:	bf00      	nop
 800c8c8:	20000530 	.word	0x20000530
 800c8cc:	200005bc 	.word	0x200005bc
 800c8d0:	200005d0 	.word	0x200005d0
 800c8d4:	200005ec 	.word	0x200005ec
 800c8d8:	20000600 	.word	0x20000600
 800c8dc:	20000618 	.word	0x20000618
 800c8e0:	200005e4 	.word	0x200005e4
 800c8e4:	200005e8 	.word	0x200005e8

0800c8e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	b082      	sub	sp, #8
 800c8ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c8ee:	e019      	b.n	800c924 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c8f0:	f000 fbf0 	bl	800d0d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c8f4:	4b10      	ldr	r3, [pc, #64]	; (800c938 <prvCheckTasksWaitingTermination+0x50>)
 800c8f6:	68db      	ldr	r3, [r3, #12]
 800c8f8:	68db      	ldr	r3, [r3, #12]
 800c8fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	3304      	adds	r3, #4
 800c900:	4618      	mov	r0, r3
 800c902:	f7ff fb0f 	bl	800bf24 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c906:	4b0d      	ldr	r3, [pc, #52]	; (800c93c <prvCheckTasksWaitingTermination+0x54>)
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	3b01      	subs	r3, #1
 800c90c:	4a0b      	ldr	r2, [pc, #44]	; (800c93c <prvCheckTasksWaitingTermination+0x54>)
 800c90e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c910:	4b0b      	ldr	r3, [pc, #44]	; (800c940 <prvCheckTasksWaitingTermination+0x58>)
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	3b01      	subs	r3, #1
 800c916:	4a0a      	ldr	r2, [pc, #40]	; (800c940 <prvCheckTasksWaitingTermination+0x58>)
 800c918:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c91a:	f000 fc0b 	bl	800d134 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c91e:	6878      	ldr	r0, [r7, #4]
 800c920:	f000 f810 	bl	800c944 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c924:	4b06      	ldr	r3, [pc, #24]	; (800c940 <prvCheckTasksWaitingTermination+0x58>)
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d1e1      	bne.n	800c8f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c92c:	bf00      	nop
 800c92e:	bf00      	nop
 800c930:	3708      	adds	r7, #8
 800c932:	46bd      	mov	sp, r7
 800c934:	bd80      	pop	{r7, pc}
 800c936:	bf00      	nop
 800c938:	20000600 	.word	0x20000600
 800c93c:	2000062c 	.word	0x2000062c
 800c940:	20000614 	.word	0x20000614

0800c944 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c944:	b580      	push	{r7, lr}
 800c946:	b082      	sub	sp, #8
 800c948:	af00      	add	r7, sp, #0
 800c94a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	334c      	adds	r3, #76	; 0x4c
 800c950:	4618      	mov	r0, r3
 800c952:	f007 fe8b 	bl	801466c <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c95a:	4618      	mov	r0, r3
 800c95c:	f000 fdac 	bl	800d4b8 <vPortFree>
			vPortFree( pxTCB );
 800c960:	6878      	ldr	r0, [r7, #4]
 800c962:	f000 fda9 	bl	800d4b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c966:	bf00      	nop
 800c968:	3708      	adds	r7, #8
 800c96a:	46bd      	mov	sp, r7
 800c96c:	bd80      	pop	{r7, pc}
	...

0800c970 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c970:	b480      	push	{r7}
 800c972:	b083      	sub	sp, #12
 800c974:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c976:	4b0c      	ldr	r3, [pc, #48]	; (800c9a8 <prvResetNextTaskUnblockTime+0x38>)
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d104      	bne.n	800c98a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c980:	4b0a      	ldr	r3, [pc, #40]	; (800c9ac <prvResetNextTaskUnblockTime+0x3c>)
 800c982:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c986:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c988:	e008      	b.n	800c99c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c98a:	4b07      	ldr	r3, [pc, #28]	; (800c9a8 <prvResetNextTaskUnblockTime+0x38>)
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	68db      	ldr	r3, [r3, #12]
 800c990:	68db      	ldr	r3, [r3, #12]
 800c992:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	685b      	ldr	r3, [r3, #4]
 800c998:	4a04      	ldr	r2, [pc, #16]	; (800c9ac <prvResetNextTaskUnblockTime+0x3c>)
 800c99a:	6013      	str	r3, [r2, #0]
}
 800c99c:	bf00      	nop
 800c99e:	370c      	adds	r7, #12
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a6:	4770      	bx	lr
 800c9a8:	200005e4 	.word	0x200005e4
 800c9ac:	2000064c 	.word	0x2000064c

0800c9b0 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b086      	sub	sp, #24
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	60f8      	str	r0, [r7, #12]
 800c9b8:	60b9      	str	r1, [r7, #8]
 800c9ba:	607a      	str	r2, [r7, #4]
 800c9bc:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800c9be:	f000 fb89 	bl	800d0d4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800c9c2:	4b29      	ldr	r3, [pc, #164]	; (800ca68 <xTaskNotifyWait+0xb8>)
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800c9ca:	b2db      	uxtb	r3, r3
 800c9cc:	2b02      	cmp	r3, #2
 800c9ce:	d01c      	beq.n	800ca0a <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800c9d0:	4b25      	ldr	r3, [pc, #148]	; (800ca68 <xTaskNotifyWait+0xb8>)
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 800c9d8:	68fa      	ldr	r2, [r7, #12]
 800c9da:	43d2      	mvns	r2, r2
 800c9dc:	400a      	ands	r2, r1
 800c9de:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800c9e2:	4b21      	ldr	r3, [pc, #132]	; (800ca68 <xTaskNotifyWait+0xb8>)
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	2201      	movs	r2, #1
 800c9e8:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

				if( xTicksToWait > ( TickType_t ) 0 )
 800c9ec:	683b      	ldr	r3, [r7, #0]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d00b      	beq.n	800ca0a <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c9f2:	2101      	movs	r1, #1
 800c9f4:	6838      	ldr	r0, [r7, #0]
 800c9f6:	f000 f9dd 	bl	800cdb4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800c9fa:	4b1c      	ldr	r3, [pc, #112]	; (800ca6c <xTaskNotifyWait+0xbc>)
 800c9fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca00:	601a      	str	r2, [r3, #0]
 800ca02:	f3bf 8f4f 	dsb	sy
 800ca06:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800ca0a:	f000 fb93 	bl	800d134 <vPortExitCritical>

		taskENTER_CRITICAL();
 800ca0e:	f000 fb61 	bl	800d0d4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d005      	beq.n	800ca24 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800ca18:	4b13      	ldr	r3, [pc, #76]	; (800ca68 <xTaskNotifyWait+0xb8>)
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800ca24:	4b10      	ldr	r3, [pc, #64]	; (800ca68 <xTaskNotifyWait+0xb8>)
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800ca2c:	b2db      	uxtb	r3, r3
 800ca2e:	2b02      	cmp	r3, #2
 800ca30:	d002      	beq.n	800ca38 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800ca32:	2300      	movs	r3, #0
 800ca34:	617b      	str	r3, [r7, #20]
 800ca36:	e00a      	b.n	800ca4e <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800ca38:	4b0b      	ldr	r3, [pc, #44]	; (800ca68 <xTaskNotifyWait+0xb8>)
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 800ca40:	68ba      	ldr	r2, [r7, #8]
 800ca42:	43d2      	mvns	r2, r2
 800ca44:	400a      	ands	r2, r1
 800ca46:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
				xReturn = pdTRUE;
 800ca4a:	2301      	movs	r3, #1
 800ca4c:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ca4e:	4b06      	ldr	r3, [pc, #24]	; (800ca68 <xTaskNotifyWait+0xb8>)
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	2200      	movs	r2, #0
 800ca54:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
		}
		taskEXIT_CRITICAL();
 800ca58:	f000 fb6c 	bl	800d134 <vPortExitCritical>

		return xReturn;
 800ca5c:	697b      	ldr	r3, [r7, #20]
	}
 800ca5e:	4618      	mov	r0, r3
 800ca60:	3718      	adds	r7, #24
 800ca62:	46bd      	mov	sp, r7
 800ca64:	bd80      	pop	{r7, pc}
 800ca66:	bf00      	nop
 800ca68:	2000052c 	.word	0x2000052c
 800ca6c:	e000ed04 	.word	0xe000ed04

0800ca70 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800ca70:	b580      	push	{r7, lr}
 800ca72:	b08a      	sub	sp, #40	; 0x28
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	60f8      	str	r0, [r7, #12]
 800ca78:	60b9      	str	r1, [r7, #8]
 800ca7a:	603b      	str	r3, [r7, #0]
 800ca7c:	4613      	mov	r3, r2
 800ca7e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800ca80:	2301      	movs	r3, #1
 800ca82:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d10a      	bne.n	800caa0 <xTaskGenericNotify+0x30>
	__asm volatile
 800ca8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca8e:	f383 8811 	msr	BASEPRI, r3
 800ca92:	f3bf 8f6f 	isb	sy
 800ca96:	f3bf 8f4f 	dsb	sy
 800ca9a:	61bb      	str	r3, [r7, #24]
}
 800ca9c:	bf00      	nop
 800ca9e:	e7fe      	b.n	800ca9e <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800caa4:	f000 fb16 	bl	800d0d4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800caa8:	683b      	ldr	r3, [r7, #0]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d004      	beq.n	800cab8 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800caae:	6a3b      	ldr	r3, [r7, #32]
 800cab0:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800cab4:	683b      	ldr	r3, [r7, #0]
 800cab6:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800cab8:	6a3b      	ldr	r3, [r7, #32]
 800caba:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800cabe:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800cac0:	6a3b      	ldr	r3, [r7, #32]
 800cac2:	2202      	movs	r2, #2
 800cac4:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

			switch( eAction )
 800cac8:	79fb      	ldrb	r3, [r7, #7]
 800caca:	2b04      	cmp	r3, #4
 800cacc:	d82d      	bhi.n	800cb2a <xTaskGenericNotify+0xba>
 800cace:	a201      	add	r2, pc, #4	; (adr r2, 800cad4 <xTaskGenericNotify+0x64>)
 800cad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cad4:	0800cb4d 	.word	0x0800cb4d
 800cad8:	0800cae9 	.word	0x0800cae9
 800cadc:	0800cafb 	.word	0x0800cafb
 800cae0:	0800cb0b 	.word	0x0800cb0b
 800cae4:	0800cb15 	.word	0x0800cb15
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800cae8:	6a3b      	ldr	r3, [r7, #32]
 800caea:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800caee:	68bb      	ldr	r3, [r7, #8]
 800caf0:	431a      	orrs	r2, r3
 800caf2:	6a3b      	ldr	r3, [r7, #32]
 800caf4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800caf8:	e02b      	b.n	800cb52 <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800cafa:	6a3b      	ldr	r3, [r7, #32]
 800cafc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800cb00:	1c5a      	adds	r2, r3, #1
 800cb02:	6a3b      	ldr	r3, [r7, #32]
 800cb04:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800cb08:	e023      	b.n	800cb52 <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800cb0a:	6a3b      	ldr	r3, [r7, #32]
 800cb0c:	68ba      	ldr	r2, [r7, #8]
 800cb0e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800cb12:	e01e      	b.n	800cb52 <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800cb14:	7ffb      	ldrb	r3, [r7, #31]
 800cb16:	2b02      	cmp	r3, #2
 800cb18:	d004      	beq.n	800cb24 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800cb1a:	6a3b      	ldr	r3, [r7, #32]
 800cb1c:	68ba      	ldr	r2, [r7, #8]
 800cb1e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800cb22:	e016      	b.n	800cb52 <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 800cb24:	2300      	movs	r3, #0
 800cb26:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800cb28:	e013      	b.n	800cb52 <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800cb2a:	6a3b      	ldr	r3, [r7, #32]
 800cb2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800cb30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cb34:	d00c      	beq.n	800cb50 <xTaskGenericNotify+0xe0>
	__asm volatile
 800cb36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb3a:	f383 8811 	msr	BASEPRI, r3
 800cb3e:	f3bf 8f6f 	isb	sy
 800cb42:	f3bf 8f4f 	dsb	sy
 800cb46:	617b      	str	r3, [r7, #20]
}
 800cb48:	bf00      	nop
 800cb4a:	e7fe      	b.n	800cb4a <xTaskGenericNotify+0xda>
					break;
 800cb4c:	bf00      	nop
 800cb4e:	e000      	b.n	800cb52 <xTaskGenericNotify+0xe2>

					break;
 800cb50:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800cb52:	7ffb      	ldrb	r3, [r7, #31]
 800cb54:	2b01      	cmp	r3, #1
 800cb56:	d139      	bne.n	800cbcc <xTaskGenericNotify+0x15c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cb58:	6a3b      	ldr	r3, [r7, #32]
 800cb5a:	3304      	adds	r3, #4
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	f7ff f9e1 	bl	800bf24 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800cb62:	6a3b      	ldr	r3, [r7, #32]
 800cb64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb66:	2201      	movs	r2, #1
 800cb68:	409a      	lsls	r2, r3
 800cb6a:	4b1c      	ldr	r3, [pc, #112]	; (800cbdc <xTaskGenericNotify+0x16c>)
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	4313      	orrs	r3, r2
 800cb70:	4a1a      	ldr	r2, [pc, #104]	; (800cbdc <xTaskGenericNotify+0x16c>)
 800cb72:	6013      	str	r3, [r2, #0]
 800cb74:	6a3b      	ldr	r3, [r7, #32]
 800cb76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb78:	4613      	mov	r3, r2
 800cb7a:	009b      	lsls	r3, r3, #2
 800cb7c:	4413      	add	r3, r2
 800cb7e:	009b      	lsls	r3, r3, #2
 800cb80:	4a17      	ldr	r2, [pc, #92]	; (800cbe0 <xTaskGenericNotify+0x170>)
 800cb82:	441a      	add	r2, r3
 800cb84:	6a3b      	ldr	r3, [r7, #32]
 800cb86:	3304      	adds	r3, #4
 800cb88:	4619      	mov	r1, r3
 800cb8a:	4610      	mov	r0, r2
 800cb8c:	f7ff f96d 	bl	800be6a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800cb90:	6a3b      	ldr	r3, [r7, #32]
 800cb92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d00a      	beq.n	800cbae <xTaskGenericNotify+0x13e>
	__asm volatile
 800cb98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb9c:	f383 8811 	msr	BASEPRI, r3
 800cba0:	f3bf 8f6f 	isb	sy
 800cba4:	f3bf 8f4f 	dsb	sy
 800cba8:	613b      	str	r3, [r7, #16]
}
 800cbaa:	bf00      	nop
 800cbac:	e7fe      	b.n	800cbac <xTaskGenericNotify+0x13c>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cbae:	6a3b      	ldr	r3, [r7, #32]
 800cbb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbb2:	4b0c      	ldr	r3, [pc, #48]	; (800cbe4 <xTaskGenericNotify+0x174>)
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbb8:	429a      	cmp	r2, r3
 800cbba:	d907      	bls.n	800cbcc <xTaskGenericNotify+0x15c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800cbbc:	4b0a      	ldr	r3, [pc, #40]	; (800cbe8 <xTaskGenericNotify+0x178>)
 800cbbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cbc2:	601a      	str	r2, [r3, #0]
 800cbc4:	f3bf 8f4f 	dsb	sy
 800cbc8:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800cbcc:	f000 fab2 	bl	800d134 <vPortExitCritical>

		return xReturn;
 800cbd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	3728      	adds	r7, #40	; 0x28
 800cbd6:	46bd      	mov	sp, r7
 800cbd8:	bd80      	pop	{r7, pc}
 800cbda:	bf00      	nop
 800cbdc:	20000634 	.word	0x20000634
 800cbe0:	20000530 	.word	0x20000530
 800cbe4:	2000052c 	.word	0x2000052c
 800cbe8:	e000ed04 	.word	0xe000ed04

0800cbec <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800cbec:	b580      	push	{r7, lr}
 800cbee:	b08e      	sub	sp, #56	; 0x38
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	60f8      	str	r0, [r7, #12]
 800cbf4:	60b9      	str	r1, [r7, #8]
 800cbf6:	603b      	str	r3, [r7, #0]
 800cbf8:	4613      	mov	r3, r2
 800cbfa:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800cbfc:	2301      	movs	r3, #1
 800cbfe:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d10a      	bne.n	800cc1c <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800cc06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc0a:	f383 8811 	msr	BASEPRI, r3
 800cc0e:	f3bf 8f6f 	isb	sy
 800cc12:	f3bf 8f4f 	dsb	sy
 800cc16:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cc18:	bf00      	nop
 800cc1a:	e7fe      	b.n	800cc1a <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cc1c:	f000 fb3c 	bl	800d298 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	633b      	str	r3, [r7, #48]	; 0x30

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800cc24:	f3ef 8211 	mrs	r2, BASEPRI
 800cc28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc2c:	f383 8811 	msr	BASEPRI, r3
 800cc30:	f3bf 8f6f 	isb	sy
 800cc34:	f3bf 8f4f 	dsb	sy
 800cc38:	623a      	str	r2, [r7, #32]
 800cc3a:	61fb      	str	r3, [r7, #28]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800cc3c:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cc3e:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800cc40:	683b      	ldr	r3, [r7, #0]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d004      	beq.n	800cc50 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800cc46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc48:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800cc4c:	683b      	ldr	r3, [r7, #0]
 800cc4e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800cc50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc52:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800cc56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800cc5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc5c:	2202      	movs	r2, #2
 800cc5e:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

			switch( eAction )
 800cc62:	79fb      	ldrb	r3, [r7, #7]
 800cc64:	2b04      	cmp	r3, #4
 800cc66:	d82f      	bhi.n	800ccc8 <xTaskGenericNotifyFromISR+0xdc>
 800cc68:	a201      	add	r2, pc, #4	; (adr r2, 800cc70 <xTaskGenericNotifyFromISR+0x84>)
 800cc6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc6e:	bf00      	nop
 800cc70:	0800cceb 	.word	0x0800cceb
 800cc74:	0800cc85 	.word	0x0800cc85
 800cc78:	0800cc97 	.word	0x0800cc97
 800cc7c:	0800cca7 	.word	0x0800cca7
 800cc80:	0800ccb1 	.word	0x0800ccb1
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800cc84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc86:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800cc8a:	68bb      	ldr	r3, [r7, #8]
 800cc8c:	431a      	orrs	r2, r3
 800cc8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc90:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800cc94:	e02c      	b.n	800ccf0 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800cc96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc98:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800cc9c:	1c5a      	adds	r2, r3, #1
 800cc9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cca0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800cca4:	e024      	b.n	800ccf0 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800cca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cca8:	68ba      	ldr	r2, [r7, #8]
 800ccaa:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800ccae:	e01f      	b.n	800ccf0 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800ccb0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ccb4:	2b02      	cmp	r3, #2
 800ccb6:	d004      	beq.n	800ccc2 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800ccb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccba:	68ba      	ldr	r2, [r7, #8]
 800ccbc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800ccc0:	e016      	b.n	800ccf0 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800ccc6:	e013      	b.n	800ccf0 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800ccc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ccce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ccd2:	d00c      	beq.n	800ccee <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 800ccd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccd8:	f383 8811 	msr	BASEPRI, r3
 800ccdc:	f3bf 8f6f 	isb	sy
 800cce0:	f3bf 8f4f 	dsb	sy
 800cce4:	61bb      	str	r3, [r7, #24]
}
 800cce6:	bf00      	nop
 800cce8:	e7fe      	b.n	800cce8 <xTaskGenericNotifyFromISR+0xfc>
					break;
 800ccea:	bf00      	nop
 800ccec:	e000      	b.n	800ccf0 <xTaskGenericNotifyFromISR+0x104>
					break;
 800ccee:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800ccf0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ccf4:	2b01      	cmp	r3, #1
 800ccf6:	d145      	bne.n	800cd84 <xTaskGenericNotifyFromISR+0x198>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800ccf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d00a      	beq.n	800cd16 <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 800cd00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd04:	f383 8811 	msr	BASEPRI, r3
 800cd08:	f3bf 8f6f 	isb	sy
 800cd0c:	f3bf 8f4f 	dsb	sy
 800cd10:	617b      	str	r3, [r7, #20]
}
 800cd12:	bf00      	nop
 800cd14:	e7fe      	b.n	800cd14 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cd16:	4b21      	ldr	r3, [pc, #132]	; (800cd9c <xTaskGenericNotifyFromISR+0x1b0>)
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d11c      	bne.n	800cd58 <xTaskGenericNotifyFromISR+0x16c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cd1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd20:	3304      	adds	r3, #4
 800cd22:	4618      	mov	r0, r3
 800cd24:	f7ff f8fe 	bl	800bf24 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cd28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd2c:	2201      	movs	r2, #1
 800cd2e:	409a      	lsls	r2, r3
 800cd30:	4b1b      	ldr	r3, [pc, #108]	; (800cda0 <xTaskGenericNotifyFromISR+0x1b4>)
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	4313      	orrs	r3, r2
 800cd36:	4a1a      	ldr	r2, [pc, #104]	; (800cda0 <xTaskGenericNotifyFromISR+0x1b4>)
 800cd38:	6013      	str	r3, [r2, #0]
 800cd3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd3e:	4613      	mov	r3, r2
 800cd40:	009b      	lsls	r3, r3, #2
 800cd42:	4413      	add	r3, r2
 800cd44:	009b      	lsls	r3, r3, #2
 800cd46:	4a17      	ldr	r2, [pc, #92]	; (800cda4 <xTaskGenericNotifyFromISR+0x1b8>)
 800cd48:	441a      	add	r2, r3
 800cd4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd4c:	3304      	adds	r3, #4
 800cd4e:	4619      	mov	r1, r3
 800cd50:	4610      	mov	r0, r2
 800cd52:	f7ff f88a 	bl	800be6a <vListInsertEnd>
 800cd56:	e005      	b.n	800cd64 <xTaskGenericNotifyFromISR+0x178>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800cd58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd5a:	3318      	adds	r3, #24
 800cd5c:	4619      	mov	r1, r3
 800cd5e:	4812      	ldr	r0, [pc, #72]	; (800cda8 <xTaskGenericNotifyFromISR+0x1bc>)
 800cd60:	f7ff f883 	bl	800be6a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cd64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd68:	4b10      	ldr	r3, [pc, #64]	; (800cdac <xTaskGenericNotifyFromISR+0x1c0>)
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd6e:	429a      	cmp	r2, r3
 800cd70:	d908      	bls.n	800cd84 <xTaskGenericNotifyFromISR+0x198>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800cd72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d002      	beq.n	800cd7e <xTaskGenericNotifyFromISR+0x192>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800cd78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd7a:	2201      	movs	r2, #1
 800cd7c:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800cd7e:	4b0c      	ldr	r3, [pc, #48]	; (800cdb0 <xTaskGenericNotifyFromISR+0x1c4>)
 800cd80:	2201      	movs	r2, #1
 800cd82:	601a      	str	r2, [r3, #0]
 800cd84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd86:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800cd88:	693b      	ldr	r3, [r7, #16]
 800cd8a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800cd8e:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800cd90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800cd92:	4618      	mov	r0, r3
 800cd94:	3738      	adds	r7, #56	; 0x38
 800cd96:	46bd      	mov	sp, r7
 800cd98:	bd80      	pop	{r7, pc}
 800cd9a:	bf00      	nop
 800cd9c:	20000654 	.word	0x20000654
 800cda0:	20000634 	.word	0x20000634
 800cda4:	20000530 	.word	0x20000530
 800cda8:	200005ec 	.word	0x200005ec
 800cdac:	2000052c 	.word	0x2000052c
 800cdb0:	20000640 	.word	0x20000640

0800cdb4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	b084      	sub	sp, #16
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	6078      	str	r0, [r7, #4]
 800cdbc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cdbe:	4b29      	ldr	r3, [pc, #164]	; (800ce64 <prvAddCurrentTaskToDelayedList+0xb0>)
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cdc4:	4b28      	ldr	r3, [pc, #160]	; (800ce68 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	3304      	adds	r3, #4
 800cdca:	4618      	mov	r0, r3
 800cdcc:	f7ff f8aa 	bl	800bf24 <uxListRemove>
 800cdd0:	4603      	mov	r3, r0
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d10b      	bne.n	800cdee <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800cdd6:	4b24      	ldr	r3, [pc, #144]	; (800ce68 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cddc:	2201      	movs	r2, #1
 800cdde:	fa02 f303 	lsl.w	r3, r2, r3
 800cde2:	43da      	mvns	r2, r3
 800cde4:	4b21      	ldr	r3, [pc, #132]	; (800ce6c <prvAddCurrentTaskToDelayedList+0xb8>)
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	4013      	ands	r3, r2
 800cdea:	4a20      	ldr	r2, [pc, #128]	; (800ce6c <prvAddCurrentTaskToDelayedList+0xb8>)
 800cdec:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cdf4:	d10a      	bne.n	800ce0c <prvAddCurrentTaskToDelayedList+0x58>
 800cdf6:	683b      	ldr	r3, [r7, #0]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d007      	beq.n	800ce0c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cdfc:	4b1a      	ldr	r3, [pc, #104]	; (800ce68 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	3304      	adds	r3, #4
 800ce02:	4619      	mov	r1, r3
 800ce04:	481a      	ldr	r0, [pc, #104]	; (800ce70 <prvAddCurrentTaskToDelayedList+0xbc>)
 800ce06:	f7ff f830 	bl	800be6a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ce0a:	e026      	b.n	800ce5a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ce0c:	68fa      	ldr	r2, [r7, #12]
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	4413      	add	r3, r2
 800ce12:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ce14:	4b14      	ldr	r3, [pc, #80]	; (800ce68 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	68ba      	ldr	r2, [r7, #8]
 800ce1a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ce1c:	68ba      	ldr	r2, [r7, #8]
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	429a      	cmp	r2, r3
 800ce22:	d209      	bcs.n	800ce38 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ce24:	4b13      	ldr	r3, [pc, #76]	; (800ce74 <prvAddCurrentTaskToDelayedList+0xc0>)
 800ce26:	681a      	ldr	r2, [r3, #0]
 800ce28:	4b0f      	ldr	r3, [pc, #60]	; (800ce68 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	3304      	adds	r3, #4
 800ce2e:	4619      	mov	r1, r3
 800ce30:	4610      	mov	r0, r2
 800ce32:	f7ff f83e 	bl	800beb2 <vListInsert>
}
 800ce36:	e010      	b.n	800ce5a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ce38:	4b0f      	ldr	r3, [pc, #60]	; (800ce78 <prvAddCurrentTaskToDelayedList+0xc4>)
 800ce3a:	681a      	ldr	r2, [r3, #0]
 800ce3c:	4b0a      	ldr	r3, [pc, #40]	; (800ce68 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	3304      	adds	r3, #4
 800ce42:	4619      	mov	r1, r3
 800ce44:	4610      	mov	r0, r2
 800ce46:	f7ff f834 	bl	800beb2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ce4a:	4b0c      	ldr	r3, [pc, #48]	; (800ce7c <prvAddCurrentTaskToDelayedList+0xc8>)
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	68ba      	ldr	r2, [r7, #8]
 800ce50:	429a      	cmp	r2, r3
 800ce52:	d202      	bcs.n	800ce5a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800ce54:	4a09      	ldr	r2, [pc, #36]	; (800ce7c <prvAddCurrentTaskToDelayedList+0xc8>)
 800ce56:	68bb      	ldr	r3, [r7, #8]
 800ce58:	6013      	str	r3, [r2, #0]
}
 800ce5a:	bf00      	nop
 800ce5c:	3710      	adds	r7, #16
 800ce5e:	46bd      	mov	sp, r7
 800ce60:	bd80      	pop	{r7, pc}
 800ce62:	bf00      	nop
 800ce64:	20000630 	.word	0x20000630
 800ce68:	2000052c 	.word	0x2000052c
 800ce6c:	20000634 	.word	0x20000634
 800ce70:	20000618 	.word	0x20000618
 800ce74:	200005e8 	.word	0x200005e8
 800ce78:	200005e4 	.word	0x200005e4
 800ce7c:	2000064c 	.word	0x2000064c

0800ce80 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ce80:	b480      	push	{r7}
 800ce82:	b085      	sub	sp, #20
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	60f8      	str	r0, [r7, #12]
 800ce88:	60b9      	str	r1, [r7, #8]
 800ce8a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	3b04      	subs	r3, #4
 800ce90:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ce98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	3b04      	subs	r3, #4
 800ce9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cea0:	68bb      	ldr	r3, [r7, #8]
 800cea2:	f023 0201 	bic.w	r2, r3, #1
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	3b04      	subs	r3, #4
 800ceae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ceb0:	4a0c      	ldr	r2, [pc, #48]	; (800cee4 <pxPortInitialiseStack+0x64>)
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	3b14      	subs	r3, #20
 800ceba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cebc:	687a      	ldr	r2, [r7, #4]
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	3b04      	subs	r3, #4
 800cec6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	f06f 0202 	mvn.w	r2, #2
 800cece:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	3b20      	subs	r3, #32
 800ced4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ced6:	68fb      	ldr	r3, [r7, #12]
}
 800ced8:	4618      	mov	r0, r3
 800ceda:	3714      	adds	r7, #20
 800cedc:	46bd      	mov	sp, r7
 800cede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee2:	4770      	bx	lr
 800cee4:	0800cee9 	.word	0x0800cee9

0800cee8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cee8:	b480      	push	{r7}
 800ceea:	b085      	sub	sp, #20
 800ceec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ceee:	2300      	movs	r3, #0
 800cef0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cef2:	4b12      	ldr	r3, [pc, #72]	; (800cf3c <prvTaskExitError+0x54>)
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cefa:	d00a      	beq.n	800cf12 <prvTaskExitError+0x2a>
	__asm volatile
 800cefc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf00:	f383 8811 	msr	BASEPRI, r3
 800cf04:	f3bf 8f6f 	isb	sy
 800cf08:	f3bf 8f4f 	dsb	sy
 800cf0c:	60fb      	str	r3, [r7, #12]
}
 800cf0e:	bf00      	nop
 800cf10:	e7fe      	b.n	800cf10 <prvTaskExitError+0x28>
	__asm volatile
 800cf12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf16:	f383 8811 	msr	BASEPRI, r3
 800cf1a:	f3bf 8f6f 	isb	sy
 800cf1e:	f3bf 8f4f 	dsb	sy
 800cf22:	60bb      	str	r3, [r7, #8]
}
 800cf24:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cf26:	bf00      	nop
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d0fc      	beq.n	800cf28 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cf2e:	bf00      	nop
 800cf30:	bf00      	nop
 800cf32:	3714      	adds	r7, #20
 800cf34:	46bd      	mov	sp, r7
 800cf36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf3a:	4770      	bx	lr
 800cf3c:	20000098 	.word	0x20000098

0800cf40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cf40:	4b07      	ldr	r3, [pc, #28]	; (800cf60 <pxCurrentTCBConst2>)
 800cf42:	6819      	ldr	r1, [r3, #0]
 800cf44:	6808      	ldr	r0, [r1, #0]
 800cf46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf4a:	f380 8809 	msr	PSP, r0
 800cf4e:	f3bf 8f6f 	isb	sy
 800cf52:	f04f 0000 	mov.w	r0, #0
 800cf56:	f380 8811 	msr	BASEPRI, r0
 800cf5a:	4770      	bx	lr
 800cf5c:	f3af 8000 	nop.w

0800cf60 <pxCurrentTCBConst2>:
 800cf60:	2000052c 	.word	0x2000052c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cf64:	bf00      	nop
 800cf66:	bf00      	nop

0800cf68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cf68:	4808      	ldr	r0, [pc, #32]	; (800cf8c <prvPortStartFirstTask+0x24>)
 800cf6a:	6800      	ldr	r0, [r0, #0]
 800cf6c:	6800      	ldr	r0, [r0, #0]
 800cf6e:	f380 8808 	msr	MSP, r0
 800cf72:	f04f 0000 	mov.w	r0, #0
 800cf76:	f380 8814 	msr	CONTROL, r0
 800cf7a:	b662      	cpsie	i
 800cf7c:	b661      	cpsie	f
 800cf7e:	f3bf 8f4f 	dsb	sy
 800cf82:	f3bf 8f6f 	isb	sy
 800cf86:	df00      	svc	0
 800cf88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cf8a:	bf00      	nop
 800cf8c:	e000ed08 	.word	0xe000ed08

0800cf90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b086      	sub	sp, #24
 800cf94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cf96:	4b46      	ldr	r3, [pc, #280]	; (800d0b0 <xPortStartScheduler+0x120>)
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	4a46      	ldr	r2, [pc, #280]	; (800d0b4 <xPortStartScheduler+0x124>)
 800cf9c:	4293      	cmp	r3, r2
 800cf9e:	d10a      	bne.n	800cfb6 <xPortStartScheduler+0x26>
	__asm volatile
 800cfa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfa4:	f383 8811 	msr	BASEPRI, r3
 800cfa8:	f3bf 8f6f 	isb	sy
 800cfac:	f3bf 8f4f 	dsb	sy
 800cfb0:	613b      	str	r3, [r7, #16]
}
 800cfb2:	bf00      	nop
 800cfb4:	e7fe      	b.n	800cfb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cfb6:	4b3e      	ldr	r3, [pc, #248]	; (800d0b0 <xPortStartScheduler+0x120>)
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	4a3f      	ldr	r2, [pc, #252]	; (800d0b8 <xPortStartScheduler+0x128>)
 800cfbc:	4293      	cmp	r3, r2
 800cfbe:	d10a      	bne.n	800cfd6 <xPortStartScheduler+0x46>
	__asm volatile
 800cfc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfc4:	f383 8811 	msr	BASEPRI, r3
 800cfc8:	f3bf 8f6f 	isb	sy
 800cfcc:	f3bf 8f4f 	dsb	sy
 800cfd0:	60fb      	str	r3, [r7, #12]
}
 800cfd2:	bf00      	nop
 800cfd4:	e7fe      	b.n	800cfd4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cfd6:	4b39      	ldr	r3, [pc, #228]	; (800d0bc <xPortStartScheduler+0x12c>)
 800cfd8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cfda:	697b      	ldr	r3, [r7, #20]
 800cfdc:	781b      	ldrb	r3, [r3, #0]
 800cfde:	b2db      	uxtb	r3, r3
 800cfe0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cfe2:	697b      	ldr	r3, [r7, #20]
 800cfe4:	22ff      	movs	r2, #255	; 0xff
 800cfe6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cfe8:	697b      	ldr	r3, [r7, #20]
 800cfea:	781b      	ldrb	r3, [r3, #0]
 800cfec:	b2db      	uxtb	r3, r3
 800cfee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cff0:	78fb      	ldrb	r3, [r7, #3]
 800cff2:	b2db      	uxtb	r3, r3
 800cff4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cff8:	b2da      	uxtb	r2, r3
 800cffa:	4b31      	ldr	r3, [pc, #196]	; (800d0c0 <xPortStartScheduler+0x130>)
 800cffc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cffe:	4b31      	ldr	r3, [pc, #196]	; (800d0c4 <xPortStartScheduler+0x134>)
 800d000:	2207      	movs	r2, #7
 800d002:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d004:	e009      	b.n	800d01a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d006:	4b2f      	ldr	r3, [pc, #188]	; (800d0c4 <xPortStartScheduler+0x134>)
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	3b01      	subs	r3, #1
 800d00c:	4a2d      	ldr	r2, [pc, #180]	; (800d0c4 <xPortStartScheduler+0x134>)
 800d00e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d010:	78fb      	ldrb	r3, [r7, #3]
 800d012:	b2db      	uxtb	r3, r3
 800d014:	005b      	lsls	r3, r3, #1
 800d016:	b2db      	uxtb	r3, r3
 800d018:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d01a:	78fb      	ldrb	r3, [r7, #3]
 800d01c:	b2db      	uxtb	r3, r3
 800d01e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d022:	2b80      	cmp	r3, #128	; 0x80
 800d024:	d0ef      	beq.n	800d006 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d026:	4b27      	ldr	r3, [pc, #156]	; (800d0c4 <xPortStartScheduler+0x134>)
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	f1c3 0307 	rsb	r3, r3, #7
 800d02e:	2b04      	cmp	r3, #4
 800d030:	d00a      	beq.n	800d048 <xPortStartScheduler+0xb8>
	__asm volatile
 800d032:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d036:	f383 8811 	msr	BASEPRI, r3
 800d03a:	f3bf 8f6f 	isb	sy
 800d03e:	f3bf 8f4f 	dsb	sy
 800d042:	60bb      	str	r3, [r7, #8]
}
 800d044:	bf00      	nop
 800d046:	e7fe      	b.n	800d046 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d048:	4b1e      	ldr	r3, [pc, #120]	; (800d0c4 <xPortStartScheduler+0x134>)
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	021b      	lsls	r3, r3, #8
 800d04e:	4a1d      	ldr	r2, [pc, #116]	; (800d0c4 <xPortStartScheduler+0x134>)
 800d050:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d052:	4b1c      	ldr	r3, [pc, #112]	; (800d0c4 <xPortStartScheduler+0x134>)
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d05a:	4a1a      	ldr	r2, [pc, #104]	; (800d0c4 <xPortStartScheduler+0x134>)
 800d05c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	b2da      	uxtb	r2, r3
 800d062:	697b      	ldr	r3, [r7, #20]
 800d064:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d066:	4b18      	ldr	r3, [pc, #96]	; (800d0c8 <xPortStartScheduler+0x138>)
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	4a17      	ldr	r2, [pc, #92]	; (800d0c8 <xPortStartScheduler+0x138>)
 800d06c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d070:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d072:	4b15      	ldr	r3, [pc, #84]	; (800d0c8 <xPortStartScheduler+0x138>)
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	4a14      	ldr	r2, [pc, #80]	; (800d0c8 <xPortStartScheduler+0x138>)
 800d078:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d07c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d07e:	f000 f8dd 	bl	800d23c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d082:	4b12      	ldr	r3, [pc, #72]	; (800d0cc <xPortStartScheduler+0x13c>)
 800d084:	2200      	movs	r2, #0
 800d086:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d088:	f000 f8fc 	bl	800d284 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d08c:	4b10      	ldr	r3, [pc, #64]	; (800d0d0 <xPortStartScheduler+0x140>)
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	4a0f      	ldr	r2, [pc, #60]	; (800d0d0 <xPortStartScheduler+0x140>)
 800d092:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d096:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d098:	f7ff ff66 	bl	800cf68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d09c:	f7ff fb44 	bl	800c728 <vTaskSwitchContext>
	prvTaskExitError();
 800d0a0:	f7ff ff22 	bl	800cee8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d0a4:	2300      	movs	r3, #0
}
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	3718      	adds	r7, #24
 800d0aa:	46bd      	mov	sp, r7
 800d0ac:	bd80      	pop	{r7, pc}
 800d0ae:	bf00      	nop
 800d0b0:	e000ed00 	.word	0xe000ed00
 800d0b4:	410fc271 	.word	0x410fc271
 800d0b8:	410fc270 	.word	0x410fc270
 800d0bc:	e000e400 	.word	0xe000e400
 800d0c0:	20000658 	.word	0x20000658
 800d0c4:	2000065c 	.word	0x2000065c
 800d0c8:	e000ed20 	.word	0xe000ed20
 800d0cc:	20000098 	.word	0x20000098
 800d0d0:	e000ef34 	.word	0xe000ef34

0800d0d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d0d4:	b480      	push	{r7}
 800d0d6:	b083      	sub	sp, #12
 800d0d8:	af00      	add	r7, sp, #0
	__asm volatile
 800d0da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0de:	f383 8811 	msr	BASEPRI, r3
 800d0e2:	f3bf 8f6f 	isb	sy
 800d0e6:	f3bf 8f4f 	dsb	sy
 800d0ea:	607b      	str	r3, [r7, #4]
}
 800d0ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d0ee:	4b0f      	ldr	r3, [pc, #60]	; (800d12c <vPortEnterCritical+0x58>)
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	3301      	adds	r3, #1
 800d0f4:	4a0d      	ldr	r2, [pc, #52]	; (800d12c <vPortEnterCritical+0x58>)
 800d0f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d0f8:	4b0c      	ldr	r3, [pc, #48]	; (800d12c <vPortEnterCritical+0x58>)
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	2b01      	cmp	r3, #1
 800d0fe:	d10f      	bne.n	800d120 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d100:	4b0b      	ldr	r3, [pc, #44]	; (800d130 <vPortEnterCritical+0x5c>)
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	b2db      	uxtb	r3, r3
 800d106:	2b00      	cmp	r3, #0
 800d108:	d00a      	beq.n	800d120 <vPortEnterCritical+0x4c>
	__asm volatile
 800d10a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d10e:	f383 8811 	msr	BASEPRI, r3
 800d112:	f3bf 8f6f 	isb	sy
 800d116:	f3bf 8f4f 	dsb	sy
 800d11a:	603b      	str	r3, [r7, #0]
}
 800d11c:	bf00      	nop
 800d11e:	e7fe      	b.n	800d11e <vPortEnterCritical+0x4a>
	}
}
 800d120:	bf00      	nop
 800d122:	370c      	adds	r7, #12
 800d124:	46bd      	mov	sp, r7
 800d126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12a:	4770      	bx	lr
 800d12c:	20000098 	.word	0x20000098
 800d130:	e000ed04 	.word	0xe000ed04

0800d134 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d134:	b480      	push	{r7}
 800d136:	b083      	sub	sp, #12
 800d138:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d13a:	4b12      	ldr	r3, [pc, #72]	; (800d184 <vPortExitCritical+0x50>)
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d10a      	bne.n	800d158 <vPortExitCritical+0x24>
	__asm volatile
 800d142:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d146:	f383 8811 	msr	BASEPRI, r3
 800d14a:	f3bf 8f6f 	isb	sy
 800d14e:	f3bf 8f4f 	dsb	sy
 800d152:	607b      	str	r3, [r7, #4]
}
 800d154:	bf00      	nop
 800d156:	e7fe      	b.n	800d156 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d158:	4b0a      	ldr	r3, [pc, #40]	; (800d184 <vPortExitCritical+0x50>)
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	3b01      	subs	r3, #1
 800d15e:	4a09      	ldr	r2, [pc, #36]	; (800d184 <vPortExitCritical+0x50>)
 800d160:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d162:	4b08      	ldr	r3, [pc, #32]	; (800d184 <vPortExitCritical+0x50>)
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	2b00      	cmp	r3, #0
 800d168:	d105      	bne.n	800d176 <vPortExitCritical+0x42>
 800d16a:	2300      	movs	r3, #0
 800d16c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d16e:	683b      	ldr	r3, [r7, #0]
 800d170:	f383 8811 	msr	BASEPRI, r3
}
 800d174:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d176:	bf00      	nop
 800d178:	370c      	adds	r7, #12
 800d17a:	46bd      	mov	sp, r7
 800d17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d180:	4770      	bx	lr
 800d182:	bf00      	nop
 800d184:	20000098 	.word	0x20000098
	...

0800d190 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d190:	f3ef 8009 	mrs	r0, PSP
 800d194:	f3bf 8f6f 	isb	sy
 800d198:	4b15      	ldr	r3, [pc, #84]	; (800d1f0 <pxCurrentTCBConst>)
 800d19a:	681a      	ldr	r2, [r3, #0]
 800d19c:	f01e 0f10 	tst.w	lr, #16
 800d1a0:	bf08      	it	eq
 800d1a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d1a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1aa:	6010      	str	r0, [r2, #0]
 800d1ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d1b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d1b4:	f380 8811 	msr	BASEPRI, r0
 800d1b8:	f3bf 8f4f 	dsb	sy
 800d1bc:	f3bf 8f6f 	isb	sy
 800d1c0:	f7ff fab2 	bl	800c728 <vTaskSwitchContext>
 800d1c4:	f04f 0000 	mov.w	r0, #0
 800d1c8:	f380 8811 	msr	BASEPRI, r0
 800d1cc:	bc09      	pop	{r0, r3}
 800d1ce:	6819      	ldr	r1, [r3, #0]
 800d1d0:	6808      	ldr	r0, [r1, #0]
 800d1d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1d6:	f01e 0f10 	tst.w	lr, #16
 800d1da:	bf08      	it	eq
 800d1dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d1e0:	f380 8809 	msr	PSP, r0
 800d1e4:	f3bf 8f6f 	isb	sy
 800d1e8:	4770      	bx	lr
 800d1ea:	bf00      	nop
 800d1ec:	f3af 8000 	nop.w

0800d1f0 <pxCurrentTCBConst>:
 800d1f0:	2000052c 	.word	0x2000052c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d1f4:	bf00      	nop
 800d1f6:	bf00      	nop

0800d1f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d1f8:	b580      	push	{r7, lr}
 800d1fa:	b082      	sub	sp, #8
 800d1fc:	af00      	add	r7, sp, #0
	__asm volatile
 800d1fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d202:	f383 8811 	msr	BASEPRI, r3
 800d206:	f3bf 8f6f 	isb	sy
 800d20a:	f3bf 8f4f 	dsb	sy
 800d20e:	607b      	str	r3, [r7, #4]
}
 800d210:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d212:	f7ff f9d1 	bl	800c5b8 <xTaskIncrementTick>
 800d216:	4603      	mov	r3, r0
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d003      	beq.n	800d224 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d21c:	4b06      	ldr	r3, [pc, #24]	; (800d238 <SysTick_Handler+0x40>)
 800d21e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d222:	601a      	str	r2, [r3, #0]
 800d224:	2300      	movs	r3, #0
 800d226:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d228:	683b      	ldr	r3, [r7, #0]
 800d22a:	f383 8811 	msr	BASEPRI, r3
}
 800d22e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d230:	bf00      	nop
 800d232:	3708      	adds	r7, #8
 800d234:	46bd      	mov	sp, r7
 800d236:	bd80      	pop	{r7, pc}
 800d238:	e000ed04 	.word	0xe000ed04

0800d23c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d23c:	b480      	push	{r7}
 800d23e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d240:	4b0b      	ldr	r3, [pc, #44]	; (800d270 <vPortSetupTimerInterrupt+0x34>)
 800d242:	2200      	movs	r2, #0
 800d244:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d246:	4b0b      	ldr	r3, [pc, #44]	; (800d274 <vPortSetupTimerInterrupt+0x38>)
 800d248:	2200      	movs	r2, #0
 800d24a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d24c:	4b0a      	ldr	r3, [pc, #40]	; (800d278 <vPortSetupTimerInterrupt+0x3c>)
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	4a0a      	ldr	r2, [pc, #40]	; (800d27c <vPortSetupTimerInterrupt+0x40>)
 800d252:	fba2 2303 	umull	r2, r3, r2, r3
 800d256:	099b      	lsrs	r3, r3, #6
 800d258:	4a09      	ldr	r2, [pc, #36]	; (800d280 <vPortSetupTimerInterrupt+0x44>)
 800d25a:	3b01      	subs	r3, #1
 800d25c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d25e:	4b04      	ldr	r3, [pc, #16]	; (800d270 <vPortSetupTimerInterrupt+0x34>)
 800d260:	2207      	movs	r2, #7
 800d262:	601a      	str	r2, [r3, #0]
}
 800d264:	bf00      	nop
 800d266:	46bd      	mov	sp, r7
 800d268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d26c:	4770      	bx	lr
 800d26e:	bf00      	nop
 800d270:	e000e010 	.word	0xe000e010
 800d274:	e000e018 	.word	0xe000e018
 800d278:	20000000 	.word	0x20000000
 800d27c:	10624dd3 	.word	0x10624dd3
 800d280:	e000e014 	.word	0xe000e014

0800d284 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d284:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d294 <vPortEnableVFP+0x10>
 800d288:	6801      	ldr	r1, [r0, #0]
 800d28a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d28e:	6001      	str	r1, [r0, #0]
 800d290:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d292:	bf00      	nop
 800d294:	e000ed88 	.word	0xe000ed88

0800d298 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d298:	b480      	push	{r7}
 800d29a:	b085      	sub	sp, #20
 800d29c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d29e:	f3ef 8305 	mrs	r3, IPSR
 800d2a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	2b0f      	cmp	r3, #15
 800d2a8:	d914      	bls.n	800d2d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d2aa:	4a17      	ldr	r2, [pc, #92]	; (800d308 <vPortValidateInterruptPriority+0x70>)
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	4413      	add	r3, r2
 800d2b0:	781b      	ldrb	r3, [r3, #0]
 800d2b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d2b4:	4b15      	ldr	r3, [pc, #84]	; (800d30c <vPortValidateInterruptPriority+0x74>)
 800d2b6:	781b      	ldrb	r3, [r3, #0]
 800d2b8:	7afa      	ldrb	r2, [r7, #11]
 800d2ba:	429a      	cmp	r2, r3
 800d2bc:	d20a      	bcs.n	800d2d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d2be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2c2:	f383 8811 	msr	BASEPRI, r3
 800d2c6:	f3bf 8f6f 	isb	sy
 800d2ca:	f3bf 8f4f 	dsb	sy
 800d2ce:	607b      	str	r3, [r7, #4]
}
 800d2d0:	bf00      	nop
 800d2d2:	e7fe      	b.n	800d2d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d2d4:	4b0e      	ldr	r3, [pc, #56]	; (800d310 <vPortValidateInterruptPriority+0x78>)
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d2dc:	4b0d      	ldr	r3, [pc, #52]	; (800d314 <vPortValidateInterruptPriority+0x7c>)
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	429a      	cmp	r2, r3
 800d2e2:	d90a      	bls.n	800d2fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d2e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2e8:	f383 8811 	msr	BASEPRI, r3
 800d2ec:	f3bf 8f6f 	isb	sy
 800d2f0:	f3bf 8f4f 	dsb	sy
 800d2f4:	603b      	str	r3, [r7, #0]
}
 800d2f6:	bf00      	nop
 800d2f8:	e7fe      	b.n	800d2f8 <vPortValidateInterruptPriority+0x60>
	}
 800d2fa:	bf00      	nop
 800d2fc:	3714      	adds	r7, #20
 800d2fe:	46bd      	mov	sp, r7
 800d300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d304:	4770      	bx	lr
 800d306:	bf00      	nop
 800d308:	e000e3f0 	.word	0xe000e3f0
 800d30c:	20000658 	.word	0x20000658
 800d310:	e000ed0c 	.word	0xe000ed0c
 800d314:	2000065c 	.word	0x2000065c

0800d318 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d318:	b580      	push	{r7, lr}
 800d31a:	b08a      	sub	sp, #40	; 0x28
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d320:	2300      	movs	r3, #0
 800d322:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d324:	f7ff f87c 	bl	800c420 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d328:	4b5d      	ldr	r3, [pc, #372]	; (800d4a0 <pvPortMalloc+0x188>)
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d101      	bne.n	800d334 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d330:	f000 f924 	bl	800d57c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d334:	4b5b      	ldr	r3, [pc, #364]	; (800d4a4 <pvPortMalloc+0x18c>)
 800d336:	681a      	ldr	r2, [r3, #0]
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	4013      	ands	r3, r2
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	f040 8093 	bne.w	800d468 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	2b00      	cmp	r3, #0
 800d346:	d01d      	beq.n	800d384 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d348:	2208      	movs	r2, #8
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	4413      	add	r3, r2
 800d34e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	f003 0307 	and.w	r3, r3, #7
 800d356:	2b00      	cmp	r3, #0
 800d358:	d014      	beq.n	800d384 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	f023 0307 	bic.w	r3, r3, #7
 800d360:	3308      	adds	r3, #8
 800d362:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	f003 0307 	and.w	r3, r3, #7
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d00a      	beq.n	800d384 <pvPortMalloc+0x6c>
	__asm volatile
 800d36e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d372:	f383 8811 	msr	BASEPRI, r3
 800d376:	f3bf 8f6f 	isb	sy
 800d37a:	f3bf 8f4f 	dsb	sy
 800d37e:	617b      	str	r3, [r7, #20]
}
 800d380:	bf00      	nop
 800d382:	e7fe      	b.n	800d382 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d06e      	beq.n	800d468 <pvPortMalloc+0x150>
 800d38a:	4b47      	ldr	r3, [pc, #284]	; (800d4a8 <pvPortMalloc+0x190>)
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	687a      	ldr	r2, [r7, #4]
 800d390:	429a      	cmp	r2, r3
 800d392:	d869      	bhi.n	800d468 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d394:	4b45      	ldr	r3, [pc, #276]	; (800d4ac <pvPortMalloc+0x194>)
 800d396:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d398:	4b44      	ldr	r3, [pc, #272]	; (800d4ac <pvPortMalloc+0x194>)
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d39e:	e004      	b.n	800d3aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d3a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d3aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3ac:	685b      	ldr	r3, [r3, #4]
 800d3ae:	687a      	ldr	r2, [r7, #4]
 800d3b0:	429a      	cmp	r2, r3
 800d3b2:	d903      	bls.n	800d3bc <pvPortMalloc+0xa4>
 800d3b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d1f1      	bne.n	800d3a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d3bc:	4b38      	ldr	r3, [pc, #224]	; (800d4a0 <pvPortMalloc+0x188>)
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d3c2:	429a      	cmp	r2, r3
 800d3c4:	d050      	beq.n	800d468 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d3c6:	6a3b      	ldr	r3, [r7, #32]
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	2208      	movs	r2, #8
 800d3cc:	4413      	add	r3, r2
 800d3ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d3d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3d2:	681a      	ldr	r2, [r3, #0]
 800d3d4:	6a3b      	ldr	r3, [r7, #32]
 800d3d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d3d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3da:	685a      	ldr	r2, [r3, #4]
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	1ad2      	subs	r2, r2, r3
 800d3e0:	2308      	movs	r3, #8
 800d3e2:	005b      	lsls	r3, r3, #1
 800d3e4:	429a      	cmp	r2, r3
 800d3e6:	d91f      	bls.n	800d428 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d3e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	4413      	add	r3, r2
 800d3ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d3f0:	69bb      	ldr	r3, [r7, #24]
 800d3f2:	f003 0307 	and.w	r3, r3, #7
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d00a      	beq.n	800d410 <pvPortMalloc+0xf8>
	__asm volatile
 800d3fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3fe:	f383 8811 	msr	BASEPRI, r3
 800d402:	f3bf 8f6f 	isb	sy
 800d406:	f3bf 8f4f 	dsb	sy
 800d40a:	613b      	str	r3, [r7, #16]
}
 800d40c:	bf00      	nop
 800d40e:	e7fe      	b.n	800d40e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d412:	685a      	ldr	r2, [r3, #4]
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	1ad2      	subs	r2, r2, r3
 800d418:	69bb      	ldr	r3, [r7, #24]
 800d41a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d41c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d41e:	687a      	ldr	r2, [r7, #4]
 800d420:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d422:	69b8      	ldr	r0, [r7, #24]
 800d424:	f000 f90c 	bl	800d640 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d428:	4b1f      	ldr	r3, [pc, #124]	; (800d4a8 <pvPortMalloc+0x190>)
 800d42a:	681a      	ldr	r2, [r3, #0]
 800d42c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d42e:	685b      	ldr	r3, [r3, #4]
 800d430:	1ad3      	subs	r3, r2, r3
 800d432:	4a1d      	ldr	r2, [pc, #116]	; (800d4a8 <pvPortMalloc+0x190>)
 800d434:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d436:	4b1c      	ldr	r3, [pc, #112]	; (800d4a8 <pvPortMalloc+0x190>)
 800d438:	681a      	ldr	r2, [r3, #0]
 800d43a:	4b1d      	ldr	r3, [pc, #116]	; (800d4b0 <pvPortMalloc+0x198>)
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	429a      	cmp	r2, r3
 800d440:	d203      	bcs.n	800d44a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d442:	4b19      	ldr	r3, [pc, #100]	; (800d4a8 <pvPortMalloc+0x190>)
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	4a1a      	ldr	r2, [pc, #104]	; (800d4b0 <pvPortMalloc+0x198>)
 800d448:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d44a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d44c:	685a      	ldr	r2, [r3, #4]
 800d44e:	4b15      	ldr	r3, [pc, #84]	; (800d4a4 <pvPortMalloc+0x18c>)
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	431a      	orrs	r2, r3
 800d454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d456:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d45a:	2200      	movs	r2, #0
 800d45c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d45e:	4b15      	ldr	r3, [pc, #84]	; (800d4b4 <pvPortMalloc+0x19c>)
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	3301      	adds	r3, #1
 800d464:	4a13      	ldr	r2, [pc, #76]	; (800d4b4 <pvPortMalloc+0x19c>)
 800d466:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d468:	f7fe ffe8 	bl	800c43c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800d46c:	69fb      	ldr	r3, [r7, #28]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d101      	bne.n	800d476 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800d472:	f7f3 fe5e 	bl	8001132 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d476:	69fb      	ldr	r3, [r7, #28]
 800d478:	f003 0307 	and.w	r3, r3, #7
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d00a      	beq.n	800d496 <pvPortMalloc+0x17e>
	__asm volatile
 800d480:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d484:	f383 8811 	msr	BASEPRI, r3
 800d488:	f3bf 8f6f 	isb	sy
 800d48c:	f3bf 8f4f 	dsb	sy
 800d490:	60fb      	str	r3, [r7, #12]
}
 800d492:	bf00      	nop
 800d494:	e7fe      	b.n	800d494 <pvPortMalloc+0x17c>
	return pvReturn;
 800d496:	69fb      	ldr	r3, [r7, #28]
}
 800d498:	4618      	mov	r0, r3
 800d49a:	3728      	adds	r7, #40	; 0x28
 800d49c:	46bd      	mov	sp, r7
 800d49e:	bd80      	pop	{r7, pc}
 800d4a0:	20004268 	.word	0x20004268
 800d4a4:	2000427c 	.word	0x2000427c
 800d4a8:	2000426c 	.word	0x2000426c
 800d4ac:	20004260 	.word	0x20004260
 800d4b0:	20004270 	.word	0x20004270
 800d4b4:	20004274 	.word	0x20004274

0800d4b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d4b8:	b580      	push	{r7, lr}
 800d4ba:	b086      	sub	sp, #24
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d04d      	beq.n	800d566 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d4ca:	2308      	movs	r3, #8
 800d4cc:	425b      	negs	r3, r3
 800d4ce:	697a      	ldr	r2, [r7, #20]
 800d4d0:	4413      	add	r3, r2
 800d4d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d4d4:	697b      	ldr	r3, [r7, #20]
 800d4d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d4d8:	693b      	ldr	r3, [r7, #16]
 800d4da:	685a      	ldr	r2, [r3, #4]
 800d4dc:	4b24      	ldr	r3, [pc, #144]	; (800d570 <vPortFree+0xb8>)
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	4013      	ands	r3, r2
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d10a      	bne.n	800d4fc <vPortFree+0x44>
	__asm volatile
 800d4e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4ea:	f383 8811 	msr	BASEPRI, r3
 800d4ee:	f3bf 8f6f 	isb	sy
 800d4f2:	f3bf 8f4f 	dsb	sy
 800d4f6:	60fb      	str	r3, [r7, #12]
}
 800d4f8:	bf00      	nop
 800d4fa:	e7fe      	b.n	800d4fa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d4fc:	693b      	ldr	r3, [r7, #16]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	2b00      	cmp	r3, #0
 800d502:	d00a      	beq.n	800d51a <vPortFree+0x62>
	__asm volatile
 800d504:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d508:	f383 8811 	msr	BASEPRI, r3
 800d50c:	f3bf 8f6f 	isb	sy
 800d510:	f3bf 8f4f 	dsb	sy
 800d514:	60bb      	str	r3, [r7, #8]
}
 800d516:	bf00      	nop
 800d518:	e7fe      	b.n	800d518 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d51a:	693b      	ldr	r3, [r7, #16]
 800d51c:	685a      	ldr	r2, [r3, #4]
 800d51e:	4b14      	ldr	r3, [pc, #80]	; (800d570 <vPortFree+0xb8>)
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	4013      	ands	r3, r2
 800d524:	2b00      	cmp	r3, #0
 800d526:	d01e      	beq.n	800d566 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d528:	693b      	ldr	r3, [r7, #16]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d11a      	bne.n	800d566 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d530:	693b      	ldr	r3, [r7, #16]
 800d532:	685a      	ldr	r2, [r3, #4]
 800d534:	4b0e      	ldr	r3, [pc, #56]	; (800d570 <vPortFree+0xb8>)
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	43db      	mvns	r3, r3
 800d53a:	401a      	ands	r2, r3
 800d53c:	693b      	ldr	r3, [r7, #16]
 800d53e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d540:	f7fe ff6e 	bl	800c420 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d544:	693b      	ldr	r3, [r7, #16]
 800d546:	685a      	ldr	r2, [r3, #4]
 800d548:	4b0a      	ldr	r3, [pc, #40]	; (800d574 <vPortFree+0xbc>)
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	4413      	add	r3, r2
 800d54e:	4a09      	ldr	r2, [pc, #36]	; (800d574 <vPortFree+0xbc>)
 800d550:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d552:	6938      	ldr	r0, [r7, #16]
 800d554:	f000 f874 	bl	800d640 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d558:	4b07      	ldr	r3, [pc, #28]	; (800d578 <vPortFree+0xc0>)
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	3301      	adds	r3, #1
 800d55e:	4a06      	ldr	r2, [pc, #24]	; (800d578 <vPortFree+0xc0>)
 800d560:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d562:	f7fe ff6b 	bl	800c43c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d566:	bf00      	nop
 800d568:	3718      	adds	r7, #24
 800d56a:	46bd      	mov	sp, r7
 800d56c:	bd80      	pop	{r7, pc}
 800d56e:	bf00      	nop
 800d570:	2000427c 	.word	0x2000427c
 800d574:	2000426c 	.word	0x2000426c
 800d578:	20004278 	.word	0x20004278

0800d57c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d57c:	b480      	push	{r7}
 800d57e:	b085      	sub	sp, #20
 800d580:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d582:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d586:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d588:	4b27      	ldr	r3, [pc, #156]	; (800d628 <prvHeapInit+0xac>)
 800d58a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	f003 0307 	and.w	r3, r3, #7
 800d592:	2b00      	cmp	r3, #0
 800d594:	d00c      	beq.n	800d5b0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	3307      	adds	r3, #7
 800d59a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	f023 0307 	bic.w	r3, r3, #7
 800d5a2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d5a4:	68ba      	ldr	r2, [r7, #8]
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	1ad3      	subs	r3, r2, r3
 800d5aa:	4a1f      	ldr	r2, [pc, #124]	; (800d628 <prvHeapInit+0xac>)
 800d5ac:	4413      	add	r3, r2
 800d5ae:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d5b4:	4a1d      	ldr	r2, [pc, #116]	; (800d62c <prvHeapInit+0xb0>)
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d5ba:	4b1c      	ldr	r3, [pc, #112]	; (800d62c <prvHeapInit+0xb0>)
 800d5bc:	2200      	movs	r2, #0
 800d5be:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	68ba      	ldr	r2, [r7, #8]
 800d5c4:	4413      	add	r3, r2
 800d5c6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d5c8:	2208      	movs	r2, #8
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	1a9b      	subs	r3, r3, r2
 800d5ce:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	f023 0307 	bic.w	r3, r3, #7
 800d5d6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	4a15      	ldr	r2, [pc, #84]	; (800d630 <prvHeapInit+0xb4>)
 800d5dc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d5de:	4b14      	ldr	r3, [pc, #80]	; (800d630 <prvHeapInit+0xb4>)
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	2200      	movs	r2, #0
 800d5e4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d5e6:	4b12      	ldr	r3, [pc, #72]	; (800d630 <prvHeapInit+0xb4>)
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	2200      	movs	r2, #0
 800d5ec:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d5f2:	683b      	ldr	r3, [r7, #0]
 800d5f4:	68fa      	ldr	r2, [r7, #12]
 800d5f6:	1ad2      	subs	r2, r2, r3
 800d5f8:	683b      	ldr	r3, [r7, #0]
 800d5fa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d5fc:	4b0c      	ldr	r3, [pc, #48]	; (800d630 <prvHeapInit+0xb4>)
 800d5fe:	681a      	ldr	r2, [r3, #0]
 800d600:	683b      	ldr	r3, [r7, #0]
 800d602:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d604:	683b      	ldr	r3, [r7, #0]
 800d606:	685b      	ldr	r3, [r3, #4]
 800d608:	4a0a      	ldr	r2, [pc, #40]	; (800d634 <prvHeapInit+0xb8>)
 800d60a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d60c:	683b      	ldr	r3, [r7, #0]
 800d60e:	685b      	ldr	r3, [r3, #4]
 800d610:	4a09      	ldr	r2, [pc, #36]	; (800d638 <prvHeapInit+0xbc>)
 800d612:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d614:	4b09      	ldr	r3, [pc, #36]	; (800d63c <prvHeapInit+0xc0>)
 800d616:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d61a:	601a      	str	r2, [r3, #0]
}
 800d61c:	bf00      	nop
 800d61e:	3714      	adds	r7, #20
 800d620:	46bd      	mov	sp, r7
 800d622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d626:	4770      	bx	lr
 800d628:	20000660 	.word	0x20000660
 800d62c:	20004260 	.word	0x20004260
 800d630:	20004268 	.word	0x20004268
 800d634:	20004270 	.word	0x20004270
 800d638:	2000426c 	.word	0x2000426c
 800d63c:	2000427c 	.word	0x2000427c

0800d640 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d640:	b480      	push	{r7}
 800d642:	b085      	sub	sp, #20
 800d644:	af00      	add	r7, sp, #0
 800d646:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d648:	4b28      	ldr	r3, [pc, #160]	; (800d6ec <prvInsertBlockIntoFreeList+0xac>)
 800d64a:	60fb      	str	r3, [r7, #12]
 800d64c:	e002      	b.n	800d654 <prvInsertBlockIntoFreeList+0x14>
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	60fb      	str	r3, [r7, #12]
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	687a      	ldr	r2, [r7, #4]
 800d65a:	429a      	cmp	r2, r3
 800d65c:	d8f7      	bhi.n	800d64e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	685b      	ldr	r3, [r3, #4]
 800d666:	68ba      	ldr	r2, [r7, #8]
 800d668:	4413      	add	r3, r2
 800d66a:	687a      	ldr	r2, [r7, #4]
 800d66c:	429a      	cmp	r2, r3
 800d66e:	d108      	bne.n	800d682 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	685a      	ldr	r2, [r3, #4]
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	685b      	ldr	r3, [r3, #4]
 800d678:	441a      	add	r2, r3
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	685b      	ldr	r3, [r3, #4]
 800d68a:	68ba      	ldr	r2, [r7, #8]
 800d68c:	441a      	add	r2, r3
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	429a      	cmp	r2, r3
 800d694:	d118      	bne.n	800d6c8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	681a      	ldr	r2, [r3, #0]
 800d69a:	4b15      	ldr	r3, [pc, #84]	; (800d6f0 <prvInsertBlockIntoFreeList+0xb0>)
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	429a      	cmp	r2, r3
 800d6a0:	d00d      	beq.n	800d6be <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	685a      	ldr	r2, [r3, #4]
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	685b      	ldr	r3, [r3, #4]
 800d6ac:	441a      	add	r2, r3
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	681a      	ldr	r2, [r3, #0]
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	601a      	str	r2, [r3, #0]
 800d6bc:	e008      	b.n	800d6d0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d6be:	4b0c      	ldr	r3, [pc, #48]	; (800d6f0 <prvInsertBlockIntoFreeList+0xb0>)
 800d6c0:	681a      	ldr	r2, [r3, #0]
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	601a      	str	r2, [r3, #0]
 800d6c6:	e003      	b.n	800d6d0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	681a      	ldr	r2, [r3, #0]
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d6d0:	68fa      	ldr	r2, [r7, #12]
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	429a      	cmp	r2, r3
 800d6d6:	d002      	beq.n	800d6de <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	687a      	ldr	r2, [r7, #4]
 800d6dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d6de:	bf00      	nop
 800d6e0:	3714      	adds	r7, #20
 800d6e2:	46bd      	mov	sp, r7
 800d6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e8:	4770      	bx	lr
 800d6ea:	bf00      	nop
 800d6ec:	20004260 	.word	0x20004260
 800d6f0:	20004268 	.word	0x20004268

0800d6f4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d6f8:	2200      	movs	r2, #0
 800d6fa:	4912      	ldr	r1, [pc, #72]	; (800d744 <MX_USB_DEVICE_Init+0x50>)
 800d6fc:	4812      	ldr	r0, [pc, #72]	; (800d748 <MX_USB_DEVICE_Init+0x54>)
 800d6fe:	f7fc ff71 	bl	800a5e4 <USBD_Init>
 800d702:	4603      	mov	r3, r0
 800d704:	2b00      	cmp	r3, #0
 800d706:	d001      	beq.n	800d70c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d708:	f7f3 ffa6 	bl	8001658 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d70c:	490f      	ldr	r1, [pc, #60]	; (800d74c <MX_USB_DEVICE_Init+0x58>)
 800d70e:	480e      	ldr	r0, [pc, #56]	; (800d748 <MX_USB_DEVICE_Init+0x54>)
 800d710:	f7fc ff98 	bl	800a644 <USBD_RegisterClass>
 800d714:	4603      	mov	r3, r0
 800d716:	2b00      	cmp	r3, #0
 800d718:	d001      	beq.n	800d71e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d71a:	f7f3 ff9d 	bl	8001658 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d71e:	490c      	ldr	r1, [pc, #48]	; (800d750 <MX_USB_DEVICE_Init+0x5c>)
 800d720:	4809      	ldr	r0, [pc, #36]	; (800d748 <MX_USB_DEVICE_Init+0x54>)
 800d722:	f7fc fe8f 	bl	800a444 <USBD_CDC_RegisterInterface>
 800d726:	4603      	mov	r3, r0
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d001      	beq.n	800d730 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d72c:	f7f3 ff94 	bl	8001658 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d730:	4805      	ldr	r0, [pc, #20]	; (800d748 <MX_USB_DEVICE_Init+0x54>)
 800d732:	f7fc ffbd 	bl	800a6b0 <USBD_Start>
 800d736:	4603      	mov	r3, r0
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d001      	beq.n	800d740 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d73c:	f7f3 ff8c 	bl	8001658 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d740:	bf00      	nop
 800d742:	bd80      	pop	{r7, pc}
 800d744:	200000b0 	.word	0x200000b0
 800d748:	20004280 	.word	0x20004280
 800d74c:	20000018 	.word	0x20000018
 800d750:	2000009c 	.word	0x2000009c

0800d754 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d754:	b580      	push	{r7, lr}
 800d756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d758:	2200      	movs	r2, #0
 800d75a:	4905      	ldr	r1, [pc, #20]	; (800d770 <CDC_Init_FS+0x1c>)
 800d75c:	4805      	ldr	r0, [pc, #20]	; (800d774 <CDC_Init_FS+0x20>)
 800d75e:	f7fc fe8b 	bl	800a478 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d762:	4905      	ldr	r1, [pc, #20]	; (800d778 <CDC_Init_FS+0x24>)
 800d764:	4803      	ldr	r0, [pc, #12]	; (800d774 <CDC_Init_FS+0x20>)
 800d766:	f7fc fea9 	bl	800a4bc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d76a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d76c:	4618      	mov	r0, r3
 800d76e:	bd80      	pop	{r7, pc}
 800d770:	20004d70 	.word	0x20004d70
 800d774:	20004280 	.word	0x20004280
 800d778:	20004570 	.word	0x20004570

0800d77c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d77c:	b480      	push	{r7}
 800d77e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d780:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d782:	4618      	mov	r0, r3
 800d784:	46bd      	mov	sp, r7
 800d786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d78a:	4770      	bx	lr

0800d78c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d78c:	b480      	push	{r7}
 800d78e:	b083      	sub	sp, #12
 800d790:	af00      	add	r7, sp, #0
 800d792:	4603      	mov	r3, r0
 800d794:	6039      	str	r1, [r7, #0]
 800d796:	71fb      	strb	r3, [r7, #7]
 800d798:	4613      	mov	r3, r2
 800d79a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d79c:	79fb      	ldrb	r3, [r7, #7]
 800d79e:	2b23      	cmp	r3, #35	; 0x23
 800d7a0:	d84a      	bhi.n	800d838 <CDC_Control_FS+0xac>
 800d7a2:	a201      	add	r2, pc, #4	; (adr r2, 800d7a8 <CDC_Control_FS+0x1c>)
 800d7a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7a8:	0800d839 	.word	0x0800d839
 800d7ac:	0800d839 	.word	0x0800d839
 800d7b0:	0800d839 	.word	0x0800d839
 800d7b4:	0800d839 	.word	0x0800d839
 800d7b8:	0800d839 	.word	0x0800d839
 800d7bc:	0800d839 	.word	0x0800d839
 800d7c0:	0800d839 	.word	0x0800d839
 800d7c4:	0800d839 	.word	0x0800d839
 800d7c8:	0800d839 	.word	0x0800d839
 800d7cc:	0800d839 	.word	0x0800d839
 800d7d0:	0800d839 	.word	0x0800d839
 800d7d4:	0800d839 	.word	0x0800d839
 800d7d8:	0800d839 	.word	0x0800d839
 800d7dc:	0800d839 	.word	0x0800d839
 800d7e0:	0800d839 	.word	0x0800d839
 800d7e4:	0800d839 	.word	0x0800d839
 800d7e8:	0800d839 	.word	0x0800d839
 800d7ec:	0800d839 	.word	0x0800d839
 800d7f0:	0800d839 	.word	0x0800d839
 800d7f4:	0800d839 	.word	0x0800d839
 800d7f8:	0800d839 	.word	0x0800d839
 800d7fc:	0800d839 	.word	0x0800d839
 800d800:	0800d839 	.word	0x0800d839
 800d804:	0800d839 	.word	0x0800d839
 800d808:	0800d839 	.word	0x0800d839
 800d80c:	0800d839 	.word	0x0800d839
 800d810:	0800d839 	.word	0x0800d839
 800d814:	0800d839 	.word	0x0800d839
 800d818:	0800d839 	.word	0x0800d839
 800d81c:	0800d839 	.word	0x0800d839
 800d820:	0800d839 	.word	0x0800d839
 800d824:	0800d839 	.word	0x0800d839
 800d828:	0800d839 	.word	0x0800d839
 800d82c:	0800d839 	.word	0x0800d839
 800d830:	0800d839 	.word	0x0800d839
 800d834:	0800d839 	.word	0x0800d839
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d838:	bf00      	nop
  }

  return (USBD_OK);
 800d83a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d83c:	4618      	mov	r0, r3
 800d83e:	370c      	adds	r7, #12
 800d840:	46bd      	mov	sp, r7
 800d842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d846:	4770      	bx	lr

0800d848 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	b084      	sub	sp, #16
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
 800d850:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  for (int i = 0; i < USB_REC_MAX_NUM; i++)
 800d852:	2300      	movs	r3, #0
 800d854:	60fb      	str	r3, [r7, #12]
 800d856:	e011      	b.n	800d87c <CDC_Receive_FS+0x34>
  {
    if(usb_vcp_call_back[i] != NULL)
 800d858:	4a10      	ldr	r2, [pc, #64]	; (800d89c <CDC_Receive_FS+0x54>)
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d008      	beq.n	800d876 <CDC_Receive_FS+0x2e>
    {
        (*usb_vcp_call_back[i])(Buf, *Len);
 800d864:	4a0d      	ldr	r2, [pc, #52]	; (800d89c <CDC_Receive_FS+0x54>)
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d86c:	683a      	ldr	r2, [r7, #0]
 800d86e:	6812      	ldr	r2, [r2, #0]
 800d870:	4611      	mov	r1, r2
 800d872:	6878      	ldr	r0, [r7, #4]
 800d874:	4798      	blx	r3
  for (int i = 0; i < USB_REC_MAX_NUM; i++)
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	3301      	adds	r3, #1
 800d87a:	60fb      	str	r3, [r7, #12]
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	2b04      	cmp	r3, #4
 800d880:	ddea      	ble.n	800d858 <CDC_Receive_FS+0x10>
    }
  }
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d882:	6879      	ldr	r1, [r7, #4]
 800d884:	4806      	ldr	r0, [pc, #24]	; (800d8a0 <CDC_Receive_FS+0x58>)
 800d886:	f7fc fe19 	bl	800a4bc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d88a:	4805      	ldr	r0, [pc, #20]	; (800d8a0 <CDC_Receive_FS+0x58>)
 800d88c:	f7fc fe74 	bl	800a578 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d890:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d892:	4618      	mov	r0, r3
 800d894:	3710      	adds	r7, #16
 800d896:	46bd      	mov	sp, r7
 800d898:	bd80      	pop	{r7, pc}
 800d89a:	bf00      	nop
 800d89c:	2000455c 	.word	0x2000455c
 800d8a0:	20004280 	.word	0x20004280

0800d8a4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	b084      	sub	sp, #16
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	6078      	str	r0, [r7, #4]
 800d8ac:	460b      	mov	r3, r1
 800d8ae:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d8b0:	2300      	movs	r3, #0
 800d8b2:	73fb      	strb	r3, [r7, #15]
  //   return USBD_BUSY;
  // }
  // USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
  // result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);

	fifo_s_puts(&usb_tx_fifo, (char*)Buf, Len);
 800d8b4:	887b      	ldrh	r3, [r7, #2]
 800d8b6:	461a      	mov	r2, r3
 800d8b8:	6879      	ldr	r1, [r7, #4]
 800d8ba:	4804      	ldr	r0, [pc, #16]	; (800d8cc <CDC_Transmit_FS+0x28>)
 800d8bc:	f005 fedc 	bl	8013678 <fifo_s_puts>

  return result;
 800d8c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	3710      	adds	r7, #16
 800d8c6:	46bd      	mov	sp, r7
 800d8c8:	bd80      	pop	{r7, pc}
 800d8ca:	bf00      	nop
 800d8cc:	20005570 	.word	0x20005570

0800d8d0 <usb_tx_flush>:

int32_t usb_tx_flush(void* argc)
{
 800d8d0:	b590      	push	{r4, r7, lr}
 800d8d2:	b089      	sub	sp, #36	; 0x24
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	6078      	str	r0, [r7, #4]
	uint8_t result = USBD_OK;
 800d8d8:	2300      	movs	r3, #0
 800d8da:	77fb      	strb	r3, [r7, #31]
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d8dc:	4b17      	ldr	r3, [pc, #92]	; (800d93c <usb_tx_flush+0x6c>)
 800d8de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d8e2:	61bb      	str	r3, [r7, #24]
	
	if (hcdc->TxState != 0){
 800d8e4:	69bb      	ldr	r3, [r7, #24]
 800d8e6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d001      	beq.n	800d8f2 <usb_tx_flush+0x22>
    return USBD_BUSY;
 800d8ee:	2301      	movs	r3, #1
 800d8f0:	e01f      	b.n	800d932 <usb_tx_flush+0x62>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800d8f2:	f3ef 8310 	mrs	r3, PRIMASK
 800d8f6:	60fb      	str	r3, [r7, #12]
  return(result);
 800d8f8:	68fb      	ldr	r3, [r7, #12]
  }
	else
	{
		FIFO_CPU_SR_TYPE cpu_sr;
		uint32_t send_num;
    cpu_sr = FIFO_GET_CPU_SR();
 800d8fa:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 800d8fc:	b672      	cpsid	i
}
 800d8fe:	bf00      	nop

    FIFO_ENTER_CRITICAL(); 
		send_num = usb_tx_fifo.used_num;
 800d900:	4b0f      	ldr	r3, [pc, #60]	; (800d940 <usb_tx_flush+0x70>)
 800d902:	68db      	ldr	r3, [r3, #12]
 800d904:	617b      	str	r3, [r7, #20]
		fifo_s_gets_noprotect(&usb_tx_fifo, (char*)UserTxBufferFS, send_num);
 800d906:	697b      	ldr	r3, [r7, #20]
 800d908:	461a      	mov	r2, r3
 800d90a:	490e      	ldr	r1, [pc, #56]	; (800d944 <usb_tx_flush+0x74>)
 800d90c:	480c      	ldr	r0, [pc, #48]	; (800d940 <usb_tx_flush+0x70>)
 800d90e:	f006 f84d 	bl	80139ac <fifo_s_gets_noprotect>
 800d912:	613c      	str	r4, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d914:	693b      	ldr	r3, [r7, #16]
 800d916:	f383 8810 	msr	PRIMASK, r3
}
 800d91a:	bf00      	nop
		FIFO_RESTORE_CPU_SR(cpu_sr);

		USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, send_num);
 800d91c:	697a      	ldr	r2, [r7, #20]
 800d91e:	4909      	ldr	r1, [pc, #36]	; (800d944 <usb_tx_flush+0x74>)
 800d920:	4806      	ldr	r0, [pc, #24]	; (800d93c <usb_tx_flush+0x6c>)
 800d922:	f7fc fda9 	bl	800a478 <USBD_CDC_SetTxBuffer>
    result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d926:	4805      	ldr	r0, [pc, #20]	; (800d93c <usb_tx_flush+0x6c>)
 800d928:	f7fc fde6 	bl	800a4f8 <USBD_CDC_TransmitPacket>
 800d92c:	4603      	mov	r3, r0
 800d92e:	77fb      	strb	r3, [r7, #31]
  
		return result;
 800d930:	7ffb      	ldrb	r3, [r7, #31]
	}
}
 800d932:	4618      	mov	r0, r3
 800d934:	3724      	adds	r7, #36	; 0x24
 800d936:	46bd      	mov	sp, r7
 800d938:	bd90      	pop	{r4, r7, pc}
 800d93a:	bf00      	nop
 800d93c:	20004280 	.word	0x20004280
 800d940:	20005570 	.word	0x20005570
 800d944:	20004d70 	.word	0x20004d70

0800d948 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d948:	b480      	push	{r7}
 800d94a:	b087      	sub	sp, #28
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	60f8      	str	r0, [r7, #12]
 800d950:	60b9      	str	r1, [r7, #8]
 800d952:	4613      	mov	r3, r2
 800d954:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d956:	2300      	movs	r3, #0
 800d958:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d95a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d95e:	4618      	mov	r0, r3
 800d960:	371c      	adds	r7, #28
 800d962:	46bd      	mov	sp, r7
 800d964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d968:	4770      	bx	lr
	...

0800d96c <usb_vcp_rx_callback_register>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
int32_t usb_vcp_rx_callback_register(usb_vcp_call_back_f fun)
{
 800d96c:	b480      	push	{r7}
 800d96e:	b085      	sub	sp, #20
 800d970:	af00      	add	r7, sp, #0
 800d972:	6078      	str	r0, [r7, #4]
    
  for (int i = 0; i < USB_REC_MAX_NUM; i++)
 800d974:	2300      	movs	r3, #0
 800d976:	60fb      	str	r3, [r7, #12]
 800d978:	e00f      	b.n	800d99a <usb_vcp_rx_callback_register+0x2e>
  {
    if(usb_vcp_call_back[i] == NULL)
 800d97a:	4a0d      	ldr	r2, [pc, #52]	; (800d9b0 <usb_vcp_rx_callback_register+0x44>)
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d982:	2b00      	cmp	r3, #0
 800d984:	d106      	bne.n	800d994 <usb_vcp_rx_callback_register+0x28>
    {
      usb_vcp_call_back[i] = fun;
 800d986:	490a      	ldr	r1, [pc, #40]	; (800d9b0 <usb_vcp_rx_callback_register+0x44>)
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	687a      	ldr	r2, [r7, #4]
 800d98c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      return USBD_OK;
 800d990:	2300      	movs	r3, #0
 800d992:	e006      	b.n	800d9a2 <usb_vcp_rx_callback_register+0x36>
  for (int i = 0; i < USB_REC_MAX_NUM; i++)
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	3301      	adds	r3, #1
 800d998:	60fb      	str	r3, [r7, #12]
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	2b04      	cmp	r3, #4
 800d99e:	ddec      	ble.n	800d97a <usb_vcp_rx_callback_register+0xe>
    }
  }
    
  return USBD_FAIL;
 800d9a0:	2303      	movs	r3, #3
}
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	3714      	adds	r7, #20
 800d9a6:	46bd      	mov	sp, r7
 800d9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ac:	4770      	bx	lr
 800d9ae:	bf00      	nop
 800d9b0:	2000455c 	.word	0x2000455c

0800d9b4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d9b4:	b480      	push	{r7}
 800d9b6:	b083      	sub	sp, #12
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	4603      	mov	r3, r0
 800d9bc:	6039      	str	r1, [r7, #0]
 800d9be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d9c0:	683b      	ldr	r3, [r7, #0]
 800d9c2:	2212      	movs	r2, #18
 800d9c4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d9c6:	4b03      	ldr	r3, [pc, #12]	; (800d9d4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d9c8:	4618      	mov	r0, r3
 800d9ca:	370c      	adds	r7, #12
 800d9cc:	46bd      	mov	sp, r7
 800d9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d2:	4770      	bx	lr
 800d9d4:	200000cc 	.word	0x200000cc

0800d9d8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d9d8:	b480      	push	{r7}
 800d9da:	b083      	sub	sp, #12
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	4603      	mov	r3, r0
 800d9e0:	6039      	str	r1, [r7, #0]
 800d9e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d9e4:	683b      	ldr	r3, [r7, #0]
 800d9e6:	2204      	movs	r2, #4
 800d9e8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d9ea:	4b03      	ldr	r3, [pc, #12]	; (800d9f8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	370c      	adds	r7, #12
 800d9f0:	46bd      	mov	sp, r7
 800d9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f6:	4770      	bx	lr
 800d9f8:	200000e0 	.word	0x200000e0

0800d9fc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b082      	sub	sp, #8
 800da00:	af00      	add	r7, sp, #0
 800da02:	4603      	mov	r3, r0
 800da04:	6039      	str	r1, [r7, #0]
 800da06:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800da08:	79fb      	ldrb	r3, [r7, #7]
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d105      	bne.n	800da1a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800da0e:	683a      	ldr	r2, [r7, #0]
 800da10:	4907      	ldr	r1, [pc, #28]	; (800da30 <USBD_FS_ProductStrDescriptor+0x34>)
 800da12:	4808      	ldr	r0, [pc, #32]	; (800da34 <USBD_FS_ProductStrDescriptor+0x38>)
 800da14:	f7fd fffe 	bl	800ba14 <USBD_GetString>
 800da18:	e004      	b.n	800da24 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800da1a:	683a      	ldr	r2, [r7, #0]
 800da1c:	4904      	ldr	r1, [pc, #16]	; (800da30 <USBD_FS_ProductStrDescriptor+0x34>)
 800da1e:	4805      	ldr	r0, [pc, #20]	; (800da34 <USBD_FS_ProductStrDescriptor+0x38>)
 800da20:	f7fd fff8 	bl	800ba14 <USBD_GetString>
  }
  return USBD_StrDesc;
 800da24:	4b02      	ldr	r3, [pc, #8]	; (800da30 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800da26:	4618      	mov	r0, r3
 800da28:	3708      	adds	r7, #8
 800da2a:	46bd      	mov	sp, r7
 800da2c:	bd80      	pop	{r7, pc}
 800da2e:	bf00      	nop
 800da30:	20005588 	.word	0x20005588
 800da34:	08015988 	.word	0x08015988

0800da38 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800da38:	b580      	push	{r7, lr}
 800da3a:	b082      	sub	sp, #8
 800da3c:	af00      	add	r7, sp, #0
 800da3e:	4603      	mov	r3, r0
 800da40:	6039      	str	r1, [r7, #0]
 800da42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800da44:	683a      	ldr	r2, [r7, #0]
 800da46:	4904      	ldr	r1, [pc, #16]	; (800da58 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800da48:	4804      	ldr	r0, [pc, #16]	; (800da5c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800da4a:	f7fd ffe3 	bl	800ba14 <USBD_GetString>
  return USBD_StrDesc;
 800da4e:	4b02      	ldr	r3, [pc, #8]	; (800da58 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800da50:	4618      	mov	r0, r3
 800da52:	3708      	adds	r7, #8
 800da54:	46bd      	mov	sp, r7
 800da56:	bd80      	pop	{r7, pc}
 800da58:	20005588 	.word	0x20005588
 800da5c:	080159a0 	.word	0x080159a0

0800da60 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800da60:	b580      	push	{r7, lr}
 800da62:	b082      	sub	sp, #8
 800da64:	af00      	add	r7, sp, #0
 800da66:	4603      	mov	r3, r0
 800da68:	6039      	str	r1, [r7, #0]
 800da6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800da6c:	683b      	ldr	r3, [r7, #0]
 800da6e:	221a      	movs	r2, #26
 800da70:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800da72:	f000 f843 	bl	800dafc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800da76:	4b02      	ldr	r3, [pc, #8]	; (800da80 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800da78:	4618      	mov	r0, r3
 800da7a:	3708      	adds	r7, #8
 800da7c:	46bd      	mov	sp, r7
 800da7e:	bd80      	pop	{r7, pc}
 800da80:	200000e4 	.word	0x200000e4

0800da84 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800da84:	b580      	push	{r7, lr}
 800da86:	b082      	sub	sp, #8
 800da88:	af00      	add	r7, sp, #0
 800da8a:	4603      	mov	r3, r0
 800da8c:	6039      	str	r1, [r7, #0]
 800da8e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800da90:	79fb      	ldrb	r3, [r7, #7]
 800da92:	2b00      	cmp	r3, #0
 800da94:	d105      	bne.n	800daa2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800da96:	683a      	ldr	r2, [r7, #0]
 800da98:	4907      	ldr	r1, [pc, #28]	; (800dab8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800da9a:	4808      	ldr	r0, [pc, #32]	; (800dabc <USBD_FS_ConfigStrDescriptor+0x38>)
 800da9c:	f7fd ffba 	bl	800ba14 <USBD_GetString>
 800daa0:	e004      	b.n	800daac <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800daa2:	683a      	ldr	r2, [r7, #0]
 800daa4:	4904      	ldr	r1, [pc, #16]	; (800dab8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800daa6:	4805      	ldr	r0, [pc, #20]	; (800dabc <USBD_FS_ConfigStrDescriptor+0x38>)
 800daa8:	f7fd ffb4 	bl	800ba14 <USBD_GetString>
  }
  return USBD_StrDesc;
 800daac:	4b02      	ldr	r3, [pc, #8]	; (800dab8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800daae:	4618      	mov	r0, r3
 800dab0:	3708      	adds	r7, #8
 800dab2:	46bd      	mov	sp, r7
 800dab4:	bd80      	pop	{r7, pc}
 800dab6:	bf00      	nop
 800dab8:	20005588 	.word	0x20005588
 800dabc:	080159b4 	.word	0x080159b4

0800dac0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dac0:	b580      	push	{r7, lr}
 800dac2:	b082      	sub	sp, #8
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	4603      	mov	r3, r0
 800dac8:	6039      	str	r1, [r7, #0]
 800daca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dacc:	79fb      	ldrb	r3, [r7, #7]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d105      	bne.n	800dade <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800dad2:	683a      	ldr	r2, [r7, #0]
 800dad4:	4907      	ldr	r1, [pc, #28]	; (800daf4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800dad6:	4808      	ldr	r0, [pc, #32]	; (800daf8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800dad8:	f7fd ff9c 	bl	800ba14 <USBD_GetString>
 800dadc:	e004      	b.n	800dae8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800dade:	683a      	ldr	r2, [r7, #0]
 800dae0:	4904      	ldr	r1, [pc, #16]	; (800daf4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800dae2:	4805      	ldr	r0, [pc, #20]	; (800daf8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800dae4:	f7fd ff96 	bl	800ba14 <USBD_GetString>
  }
  return USBD_StrDesc;
 800dae8:	4b02      	ldr	r3, [pc, #8]	; (800daf4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800daea:	4618      	mov	r0, r3
 800daec:	3708      	adds	r7, #8
 800daee:	46bd      	mov	sp, r7
 800daf0:	bd80      	pop	{r7, pc}
 800daf2:	bf00      	nop
 800daf4:	20005588 	.word	0x20005588
 800daf8:	080159c0 	.word	0x080159c0

0800dafc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800dafc:	b580      	push	{r7, lr}
 800dafe:	b084      	sub	sp, #16
 800db00:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800db02:	4b0f      	ldr	r3, [pc, #60]	; (800db40 <Get_SerialNum+0x44>)
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800db08:	4b0e      	ldr	r3, [pc, #56]	; (800db44 <Get_SerialNum+0x48>)
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800db0e:	4b0e      	ldr	r3, [pc, #56]	; (800db48 <Get_SerialNum+0x4c>)
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800db14:	68fa      	ldr	r2, [r7, #12]
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	4413      	add	r3, r2
 800db1a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d009      	beq.n	800db36 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800db22:	2208      	movs	r2, #8
 800db24:	4909      	ldr	r1, [pc, #36]	; (800db4c <Get_SerialNum+0x50>)
 800db26:	68f8      	ldr	r0, [r7, #12]
 800db28:	f000 f814 	bl	800db54 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800db2c:	2204      	movs	r2, #4
 800db2e:	4908      	ldr	r1, [pc, #32]	; (800db50 <Get_SerialNum+0x54>)
 800db30:	68b8      	ldr	r0, [r7, #8]
 800db32:	f000 f80f 	bl	800db54 <IntToUnicode>
  }
}
 800db36:	bf00      	nop
 800db38:	3710      	adds	r7, #16
 800db3a:	46bd      	mov	sp, r7
 800db3c:	bd80      	pop	{r7, pc}
 800db3e:	bf00      	nop
 800db40:	1fff7a10 	.word	0x1fff7a10
 800db44:	1fff7a14 	.word	0x1fff7a14
 800db48:	1fff7a18 	.word	0x1fff7a18
 800db4c:	200000e6 	.word	0x200000e6
 800db50:	200000f6 	.word	0x200000f6

0800db54 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800db54:	b480      	push	{r7}
 800db56:	b087      	sub	sp, #28
 800db58:	af00      	add	r7, sp, #0
 800db5a:	60f8      	str	r0, [r7, #12]
 800db5c:	60b9      	str	r1, [r7, #8]
 800db5e:	4613      	mov	r3, r2
 800db60:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800db62:	2300      	movs	r3, #0
 800db64:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800db66:	2300      	movs	r3, #0
 800db68:	75fb      	strb	r3, [r7, #23]
 800db6a:	e027      	b.n	800dbbc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	0f1b      	lsrs	r3, r3, #28
 800db70:	2b09      	cmp	r3, #9
 800db72:	d80b      	bhi.n	800db8c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	0f1b      	lsrs	r3, r3, #28
 800db78:	b2da      	uxtb	r2, r3
 800db7a:	7dfb      	ldrb	r3, [r7, #23]
 800db7c:	005b      	lsls	r3, r3, #1
 800db7e:	4619      	mov	r1, r3
 800db80:	68bb      	ldr	r3, [r7, #8]
 800db82:	440b      	add	r3, r1
 800db84:	3230      	adds	r2, #48	; 0x30
 800db86:	b2d2      	uxtb	r2, r2
 800db88:	701a      	strb	r2, [r3, #0]
 800db8a:	e00a      	b.n	800dba2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	0f1b      	lsrs	r3, r3, #28
 800db90:	b2da      	uxtb	r2, r3
 800db92:	7dfb      	ldrb	r3, [r7, #23]
 800db94:	005b      	lsls	r3, r3, #1
 800db96:	4619      	mov	r1, r3
 800db98:	68bb      	ldr	r3, [r7, #8]
 800db9a:	440b      	add	r3, r1
 800db9c:	3237      	adds	r2, #55	; 0x37
 800db9e:	b2d2      	uxtb	r2, r2
 800dba0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	011b      	lsls	r3, r3, #4
 800dba6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800dba8:	7dfb      	ldrb	r3, [r7, #23]
 800dbaa:	005b      	lsls	r3, r3, #1
 800dbac:	3301      	adds	r3, #1
 800dbae:	68ba      	ldr	r2, [r7, #8]
 800dbb0:	4413      	add	r3, r2
 800dbb2:	2200      	movs	r2, #0
 800dbb4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800dbb6:	7dfb      	ldrb	r3, [r7, #23]
 800dbb8:	3301      	adds	r3, #1
 800dbba:	75fb      	strb	r3, [r7, #23]
 800dbbc:	7dfa      	ldrb	r2, [r7, #23]
 800dbbe:	79fb      	ldrb	r3, [r7, #7]
 800dbc0:	429a      	cmp	r2, r3
 800dbc2:	d3d3      	bcc.n	800db6c <IntToUnicode+0x18>
  }
}
 800dbc4:	bf00      	nop
 800dbc6:	bf00      	nop
 800dbc8:	371c      	adds	r7, #28
 800dbca:	46bd      	mov	sp, r7
 800dbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd0:	4770      	bx	lr
	...

0800dbd4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800dbd4:	b580      	push	{r7, lr}
 800dbd6:	b08a      	sub	sp, #40	; 0x28
 800dbd8:	af00      	add	r7, sp, #0
 800dbda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dbdc:	f107 0314 	add.w	r3, r7, #20
 800dbe0:	2200      	movs	r2, #0
 800dbe2:	601a      	str	r2, [r3, #0]
 800dbe4:	605a      	str	r2, [r3, #4]
 800dbe6:	609a      	str	r2, [r3, #8]
 800dbe8:	60da      	str	r2, [r3, #12]
 800dbea:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800dbf4:	d13a      	bne.n	800dc6c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800dbf6:	2300      	movs	r3, #0
 800dbf8:	613b      	str	r3, [r7, #16]
 800dbfa:	4b1e      	ldr	r3, [pc, #120]	; (800dc74 <HAL_PCD_MspInit+0xa0>)
 800dbfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbfe:	4a1d      	ldr	r2, [pc, #116]	; (800dc74 <HAL_PCD_MspInit+0xa0>)
 800dc00:	f043 0301 	orr.w	r3, r3, #1
 800dc04:	6313      	str	r3, [r2, #48]	; 0x30
 800dc06:	4b1b      	ldr	r3, [pc, #108]	; (800dc74 <HAL_PCD_MspInit+0xa0>)
 800dc08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc0a:	f003 0301 	and.w	r3, r3, #1
 800dc0e:	613b      	str	r3, [r7, #16]
 800dc10:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 800dc12:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800dc16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dc18:	2302      	movs	r3, #2
 800dc1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dc20:	2303      	movs	r3, #3
 800dc22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800dc24:	230a      	movs	r3, #10
 800dc26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dc28:	f107 0314 	add.w	r3, r7, #20
 800dc2c:	4619      	mov	r1, r3
 800dc2e:	4812      	ldr	r0, [pc, #72]	; (800dc78 <HAL_PCD_MspInit+0xa4>)
 800dc30:	f7f5 fea0 	bl	8003974 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800dc34:	4b0f      	ldr	r3, [pc, #60]	; (800dc74 <HAL_PCD_MspInit+0xa0>)
 800dc36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc38:	4a0e      	ldr	r2, [pc, #56]	; (800dc74 <HAL_PCD_MspInit+0xa0>)
 800dc3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc3e:	6353      	str	r3, [r2, #52]	; 0x34
 800dc40:	2300      	movs	r3, #0
 800dc42:	60fb      	str	r3, [r7, #12]
 800dc44:	4b0b      	ldr	r3, [pc, #44]	; (800dc74 <HAL_PCD_MspInit+0xa0>)
 800dc46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dc48:	4a0a      	ldr	r2, [pc, #40]	; (800dc74 <HAL_PCD_MspInit+0xa0>)
 800dc4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800dc4e:	6453      	str	r3, [r2, #68]	; 0x44
 800dc50:	4b08      	ldr	r3, [pc, #32]	; (800dc74 <HAL_PCD_MspInit+0xa0>)
 800dc52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dc54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dc58:	60fb      	str	r3, [r7, #12]
 800dc5a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800dc5c:	2200      	movs	r2, #0
 800dc5e:	2105      	movs	r1, #5
 800dc60:	2043      	movs	r0, #67	; 0x43
 800dc62:	f7f5 fa5b 	bl	800311c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800dc66:	2043      	movs	r0, #67	; 0x43
 800dc68:	f7f5 fa74 	bl	8003154 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800dc6c:	bf00      	nop
 800dc6e:	3728      	adds	r7, #40	; 0x28
 800dc70:	46bd      	mov	sp, r7
 800dc72:	bd80      	pop	{r7, pc}
 800dc74:	40023800 	.word	0x40023800
 800dc78:	40020000 	.word	0x40020000

0800dc7c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc7c:	b580      	push	{r7, lr}
 800dc7e:	b082      	sub	sp, #8
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800dc90:	4619      	mov	r1, r3
 800dc92:	4610      	mov	r0, r2
 800dc94:	f7fc fd59 	bl	800a74a <USBD_LL_SetupStage>
}
 800dc98:	bf00      	nop
 800dc9a:	3708      	adds	r7, #8
 800dc9c:	46bd      	mov	sp, r7
 800dc9e:	bd80      	pop	{r7, pc}

0800dca0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dca0:	b580      	push	{r7, lr}
 800dca2:	b082      	sub	sp, #8
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	6078      	str	r0, [r7, #4]
 800dca8:	460b      	mov	r3, r1
 800dcaa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800dcb2:	78fa      	ldrb	r2, [r7, #3]
 800dcb4:	6879      	ldr	r1, [r7, #4]
 800dcb6:	4613      	mov	r3, r2
 800dcb8:	00db      	lsls	r3, r3, #3
 800dcba:	4413      	add	r3, r2
 800dcbc:	009b      	lsls	r3, r3, #2
 800dcbe:	440b      	add	r3, r1
 800dcc0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800dcc4:	681a      	ldr	r2, [r3, #0]
 800dcc6:	78fb      	ldrb	r3, [r7, #3]
 800dcc8:	4619      	mov	r1, r3
 800dcca:	f7fc fd93 	bl	800a7f4 <USBD_LL_DataOutStage>
}
 800dcce:	bf00      	nop
 800dcd0:	3708      	adds	r7, #8
 800dcd2:	46bd      	mov	sp, r7
 800dcd4:	bd80      	pop	{r7, pc}

0800dcd6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dcd6:	b580      	push	{r7, lr}
 800dcd8:	b082      	sub	sp, #8
 800dcda:	af00      	add	r7, sp, #0
 800dcdc:	6078      	str	r0, [r7, #4]
 800dcde:	460b      	mov	r3, r1
 800dce0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800dce8:	78fa      	ldrb	r2, [r7, #3]
 800dcea:	6879      	ldr	r1, [r7, #4]
 800dcec:	4613      	mov	r3, r2
 800dcee:	00db      	lsls	r3, r3, #3
 800dcf0:	4413      	add	r3, r2
 800dcf2:	009b      	lsls	r3, r3, #2
 800dcf4:	440b      	add	r3, r1
 800dcf6:	3320      	adds	r3, #32
 800dcf8:	681a      	ldr	r2, [r3, #0]
 800dcfa:	78fb      	ldrb	r3, [r7, #3]
 800dcfc:	4619      	mov	r1, r3
 800dcfe:	f7fc fe2c 	bl	800a95a <USBD_LL_DataInStage>
}
 800dd02:	bf00      	nop
 800dd04:	3708      	adds	r7, #8
 800dd06:	46bd      	mov	sp, r7
 800dd08:	bd80      	pop	{r7, pc}

0800dd0a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd0a:	b580      	push	{r7, lr}
 800dd0c:	b082      	sub	sp, #8
 800dd0e:	af00      	add	r7, sp, #0
 800dd10:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800dd18:	4618      	mov	r0, r3
 800dd1a:	f7fc ff66 	bl	800abea <USBD_LL_SOF>
}
 800dd1e:	bf00      	nop
 800dd20:	3708      	adds	r7, #8
 800dd22:	46bd      	mov	sp, r7
 800dd24:	bd80      	pop	{r7, pc}

0800dd26 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd26:	b580      	push	{r7, lr}
 800dd28:	b084      	sub	sp, #16
 800dd2a:	af00      	add	r7, sp, #0
 800dd2c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800dd2e:	2301      	movs	r3, #1
 800dd30:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	79db      	ldrb	r3, [r3, #7]
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d102      	bne.n	800dd40 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800dd3a:	2300      	movs	r3, #0
 800dd3c:	73fb      	strb	r3, [r7, #15]
 800dd3e:	e008      	b.n	800dd52 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	79db      	ldrb	r3, [r3, #7]
 800dd44:	2b02      	cmp	r3, #2
 800dd46:	d102      	bne.n	800dd4e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800dd48:	2301      	movs	r3, #1
 800dd4a:	73fb      	strb	r3, [r7, #15]
 800dd4c:	e001      	b.n	800dd52 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800dd4e:	f7f3 fc83 	bl	8001658 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800dd58:	7bfa      	ldrb	r2, [r7, #15]
 800dd5a:	4611      	mov	r1, r2
 800dd5c:	4618      	mov	r0, r3
 800dd5e:	f7fc ff00 	bl	800ab62 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800dd68:	4618      	mov	r0, r3
 800dd6a:	f7fc fea8 	bl	800aabe <USBD_LL_Reset>
}
 800dd6e:	bf00      	nop
 800dd70:	3710      	adds	r7, #16
 800dd72:	46bd      	mov	sp, r7
 800dd74:	bd80      	pop	{r7, pc}
	...

0800dd78 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd78:	b580      	push	{r7, lr}
 800dd7a:	b082      	sub	sp, #8
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800dd86:	4618      	mov	r0, r3
 800dd88:	f7fc fefb 	bl	800ab82 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	687a      	ldr	r2, [r7, #4]
 800dd98:	6812      	ldr	r2, [r2, #0]
 800dd9a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800dd9e:	f043 0301 	orr.w	r3, r3, #1
 800dda2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	7adb      	ldrb	r3, [r3, #11]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d005      	beq.n	800ddb8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ddac:	4b04      	ldr	r3, [pc, #16]	; (800ddc0 <HAL_PCD_SuspendCallback+0x48>)
 800ddae:	691b      	ldr	r3, [r3, #16]
 800ddb0:	4a03      	ldr	r2, [pc, #12]	; (800ddc0 <HAL_PCD_SuspendCallback+0x48>)
 800ddb2:	f043 0306 	orr.w	r3, r3, #6
 800ddb6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ddb8:	bf00      	nop
 800ddba:	3708      	adds	r7, #8
 800ddbc:	46bd      	mov	sp, r7
 800ddbe:	bd80      	pop	{r7, pc}
 800ddc0:	e000ed00 	.word	0xe000ed00

0800ddc4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ddc4:	b580      	push	{r7, lr}
 800ddc6:	b082      	sub	sp, #8
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	f7fc fef1 	bl	800abba <USBD_LL_Resume>
}
 800ddd8:	bf00      	nop
 800ddda:	3708      	adds	r7, #8
 800dddc:	46bd      	mov	sp, r7
 800ddde:	bd80      	pop	{r7, pc}

0800dde0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dde0:	b580      	push	{r7, lr}
 800dde2:	b082      	sub	sp, #8
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	6078      	str	r0, [r7, #4]
 800dde8:	460b      	mov	r3, r1
 800ddea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800ddf2:	78fa      	ldrb	r2, [r7, #3]
 800ddf4:	4611      	mov	r1, r2
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	f7fc ff49 	bl	800ac8e <USBD_LL_IsoOUTIncomplete>
}
 800ddfc:	bf00      	nop
 800ddfe:	3708      	adds	r7, #8
 800de00:	46bd      	mov	sp, r7
 800de02:	bd80      	pop	{r7, pc}

0800de04 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de04:	b580      	push	{r7, lr}
 800de06:	b082      	sub	sp, #8
 800de08:	af00      	add	r7, sp, #0
 800de0a:	6078      	str	r0, [r7, #4]
 800de0c:	460b      	mov	r3, r1
 800de0e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800de16:	78fa      	ldrb	r2, [r7, #3]
 800de18:	4611      	mov	r1, r2
 800de1a:	4618      	mov	r0, r3
 800de1c:	f7fc ff05 	bl	800ac2a <USBD_LL_IsoINIncomplete>
}
 800de20:	bf00      	nop
 800de22:	3708      	adds	r7, #8
 800de24:	46bd      	mov	sp, r7
 800de26:	bd80      	pop	{r7, pc}

0800de28 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de28:	b580      	push	{r7, lr}
 800de2a:	b082      	sub	sp, #8
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800de36:	4618      	mov	r0, r3
 800de38:	f7fc ff5b 	bl	800acf2 <USBD_LL_DevConnected>
}
 800de3c:	bf00      	nop
 800de3e:	3708      	adds	r7, #8
 800de40:	46bd      	mov	sp, r7
 800de42:	bd80      	pop	{r7, pc}

0800de44 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de44:	b580      	push	{r7, lr}
 800de46:	b082      	sub	sp, #8
 800de48:	af00      	add	r7, sp, #0
 800de4a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800de52:	4618      	mov	r0, r3
 800de54:	f7fc ff58 	bl	800ad08 <USBD_LL_DevDisconnected>
}
 800de58:	bf00      	nop
 800de5a:	3708      	adds	r7, #8
 800de5c:	46bd      	mov	sp, r7
 800de5e:	bd80      	pop	{r7, pc}

0800de60 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800de60:	b580      	push	{r7, lr}
 800de62:	b082      	sub	sp, #8
 800de64:	af00      	add	r7, sp, #0
 800de66:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	781b      	ldrb	r3, [r3, #0]
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d13c      	bne.n	800deea <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800de70:	4a20      	ldr	r2, [pc, #128]	; (800def4 <USBD_LL_Init+0x94>)
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	4a1e      	ldr	r2, [pc, #120]	; (800def4 <USBD_LL_Init+0x94>)
 800de7c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800de80:	4b1c      	ldr	r3, [pc, #112]	; (800def4 <USBD_LL_Init+0x94>)
 800de82:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800de86:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800de88:	4b1a      	ldr	r3, [pc, #104]	; (800def4 <USBD_LL_Init+0x94>)
 800de8a:	2204      	movs	r2, #4
 800de8c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800de8e:	4b19      	ldr	r3, [pc, #100]	; (800def4 <USBD_LL_Init+0x94>)
 800de90:	2202      	movs	r2, #2
 800de92:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800de94:	4b17      	ldr	r3, [pc, #92]	; (800def4 <USBD_LL_Init+0x94>)
 800de96:	2200      	movs	r2, #0
 800de98:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800de9a:	4b16      	ldr	r3, [pc, #88]	; (800def4 <USBD_LL_Init+0x94>)
 800de9c:	2202      	movs	r2, #2
 800de9e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800dea0:	4b14      	ldr	r3, [pc, #80]	; (800def4 <USBD_LL_Init+0x94>)
 800dea2:	2200      	movs	r2, #0
 800dea4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800dea6:	4b13      	ldr	r3, [pc, #76]	; (800def4 <USBD_LL_Init+0x94>)
 800dea8:	2200      	movs	r2, #0
 800deaa:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800deac:	4b11      	ldr	r3, [pc, #68]	; (800def4 <USBD_LL_Init+0x94>)
 800deae:	2200      	movs	r2, #0
 800deb0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800deb2:	4b10      	ldr	r3, [pc, #64]	; (800def4 <USBD_LL_Init+0x94>)
 800deb4:	2200      	movs	r2, #0
 800deb6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800deb8:	4b0e      	ldr	r3, [pc, #56]	; (800def4 <USBD_LL_Init+0x94>)
 800deba:	2200      	movs	r2, #0
 800debc:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800debe:	480d      	ldr	r0, [pc, #52]	; (800def4 <USBD_LL_Init+0x94>)
 800dec0:	f7f5 ff4f 	bl	8003d62 <HAL_PCD_Init>
 800dec4:	4603      	mov	r3, r0
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d001      	beq.n	800dece <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800deca:	f7f3 fbc5 	bl	8001658 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800dece:	2180      	movs	r1, #128	; 0x80
 800ded0:	4808      	ldr	r0, [pc, #32]	; (800def4 <USBD_LL_Init+0x94>)
 800ded2:	f7f7 f97a 	bl	80051ca <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ded6:	2240      	movs	r2, #64	; 0x40
 800ded8:	2100      	movs	r1, #0
 800deda:	4806      	ldr	r0, [pc, #24]	; (800def4 <USBD_LL_Init+0x94>)
 800dedc:	f7f7 f92e 	bl	800513c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800dee0:	2280      	movs	r2, #128	; 0x80
 800dee2:	2101      	movs	r1, #1
 800dee4:	4803      	ldr	r0, [pc, #12]	; (800def4 <USBD_LL_Init+0x94>)
 800dee6:	f7f7 f929 	bl	800513c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800deea:	2300      	movs	r3, #0
}
 800deec:	4618      	mov	r0, r3
 800deee:	3708      	adds	r7, #8
 800def0:	46bd      	mov	sp, r7
 800def2:	bd80      	pop	{r7, pc}
 800def4:	20005788 	.word	0x20005788

0800def8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800def8:	b580      	push	{r7, lr}
 800defa:	b084      	sub	sp, #16
 800defc:	af00      	add	r7, sp, #0
 800defe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df00:	2300      	movs	r3, #0
 800df02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800df04:	2300      	movs	r3, #0
 800df06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800df0e:	4618      	mov	r0, r3
 800df10:	f7f6 f836 	bl	8003f80 <HAL_PCD_Start>
 800df14:	4603      	mov	r3, r0
 800df16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800df18:	7bfb      	ldrb	r3, [r7, #15]
 800df1a:	4618      	mov	r0, r3
 800df1c:	f000 f942 	bl	800e1a4 <USBD_Get_USB_Status>
 800df20:	4603      	mov	r3, r0
 800df22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800df24:	7bbb      	ldrb	r3, [r7, #14]
}
 800df26:	4618      	mov	r0, r3
 800df28:	3710      	adds	r7, #16
 800df2a:	46bd      	mov	sp, r7
 800df2c:	bd80      	pop	{r7, pc}

0800df2e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800df2e:	b580      	push	{r7, lr}
 800df30:	b084      	sub	sp, #16
 800df32:	af00      	add	r7, sp, #0
 800df34:	6078      	str	r0, [r7, #4]
 800df36:	4608      	mov	r0, r1
 800df38:	4611      	mov	r1, r2
 800df3a:	461a      	mov	r2, r3
 800df3c:	4603      	mov	r3, r0
 800df3e:	70fb      	strb	r3, [r7, #3]
 800df40:	460b      	mov	r3, r1
 800df42:	70bb      	strb	r3, [r7, #2]
 800df44:	4613      	mov	r3, r2
 800df46:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df48:	2300      	movs	r3, #0
 800df4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800df4c:	2300      	movs	r3, #0
 800df4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800df56:	78bb      	ldrb	r3, [r7, #2]
 800df58:	883a      	ldrh	r2, [r7, #0]
 800df5a:	78f9      	ldrb	r1, [r7, #3]
 800df5c:	f7f6 fd0a 	bl	8004974 <HAL_PCD_EP_Open>
 800df60:	4603      	mov	r3, r0
 800df62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800df64:	7bfb      	ldrb	r3, [r7, #15]
 800df66:	4618      	mov	r0, r3
 800df68:	f000 f91c 	bl	800e1a4 <USBD_Get_USB_Status>
 800df6c:	4603      	mov	r3, r0
 800df6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800df70:	7bbb      	ldrb	r3, [r7, #14]
}
 800df72:	4618      	mov	r0, r3
 800df74:	3710      	adds	r7, #16
 800df76:	46bd      	mov	sp, r7
 800df78:	bd80      	pop	{r7, pc}

0800df7a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800df7a:	b580      	push	{r7, lr}
 800df7c:	b084      	sub	sp, #16
 800df7e:	af00      	add	r7, sp, #0
 800df80:	6078      	str	r0, [r7, #4]
 800df82:	460b      	mov	r3, r1
 800df84:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df86:	2300      	movs	r3, #0
 800df88:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800df8a:	2300      	movs	r3, #0
 800df8c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800df94:	78fa      	ldrb	r2, [r7, #3]
 800df96:	4611      	mov	r1, r2
 800df98:	4618      	mov	r0, r3
 800df9a:	f7f6 fd53 	bl	8004a44 <HAL_PCD_EP_Close>
 800df9e:	4603      	mov	r3, r0
 800dfa0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dfa2:	7bfb      	ldrb	r3, [r7, #15]
 800dfa4:	4618      	mov	r0, r3
 800dfa6:	f000 f8fd 	bl	800e1a4 <USBD_Get_USB_Status>
 800dfaa:	4603      	mov	r3, r0
 800dfac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dfae:	7bbb      	ldrb	r3, [r7, #14]
}
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	3710      	adds	r7, #16
 800dfb4:	46bd      	mov	sp, r7
 800dfb6:	bd80      	pop	{r7, pc}

0800dfb8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dfb8:	b580      	push	{r7, lr}
 800dfba:	b084      	sub	sp, #16
 800dfbc:	af00      	add	r7, sp, #0
 800dfbe:	6078      	str	r0, [r7, #4]
 800dfc0:	460b      	mov	r3, r1
 800dfc2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dfc4:	2300      	movs	r3, #0
 800dfc6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dfc8:	2300      	movs	r3, #0
 800dfca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800dfd2:	78fa      	ldrb	r2, [r7, #3]
 800dfd4:	4611      	mov	r1, r2
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	f7f6 fe0b 	bl	8004bf2 <HAL_PCD_EP_SetStall>
 800dfdc:	4603      	mov	r3, r0
 800dfde:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dfe0:	7bfb      	ldrb	r3, [r7, #15]
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	f000 f8de 	bl	800e1a4 <USBD_Get_USB_Status>
 800dfe8:	4603      	mov	r3, r0
 800dfea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dfec:	7bbb      	ldrb	r3, [r7, #14]
}
 800dfee:	4618      	mov	r0, r3
 800dff0:	3710      	adds	r7, #16
 800dff2:	46bd      	mov	sp, r7
 800dff4:	bd80      	pop	{r7, pc}

0800dff6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dff6:	b580      	push	{r7, lr}
 800dff8:	b084      	sub	sp, #16
 800dffa:	af00      	add	r7, sp, #0
 800dffc:	6078      	str	r0, [r7, #4]
 800dffe:	460b      	mov	r3, r1
 800e000:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e002:	2300      	movs	r3, #0
 800e004:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e006:	2300      	movs	r3, #0
 800e008:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e010:	78fa      	ldrb	r2, [r7, #3]
 800e012:	4611      	mov	r1, r2
 800e014:	4618      	mov	r0, r3
 800e016:	f7f6 fe4f 	bl	8004cb8 <HAL_PCD_EP_ClrStall>
 800e01a:	4603      	mov	r3, r0
 800e01c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e01e:	7bfb      	ldrb	r3, [r7, #15]
 800e020:	4618      	mov	r0, r3
 800e022:	f000 f8bf 	bl	800e1a4 <USBD_Get_USB_Status>
 800e026:	4603      	mov	r3, r0
 800e028:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e02a:	7bbb      	ldrb	r3, [r7, #14]
}
 800e02c:	4618      	mov	r0, r3
 800e02e:	3710      	adds	r7, #16
 800e030:	46bd      	mov	sp, r7
 800e032:	bd80      	pop	{r7, pc}

0800e034 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e034:	b480      	push	{r7}
 800e036:	b085      	sub	sp, #20
 800e038:	af00      	add	r7, sp, #0
 800e03a:	6078      	str	r0, [r7, #4]
 800e03c:	460b      	mov	r3, r1
 800e03e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e046:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e048:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	da0b      	bge.n	800e068 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e050:	78fb      	ldrb	r3, [r7, #3]
 800e052:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e056:	68f9      	ldr	r1, [r7, #12]
 800e058:	4613      	mov	r3, r2
 800e05a:	00db      	lsls	r3, r3, #3
 800e05c:	4413      	add	r3, r2
 800e05e:	009b      	lsls	r3, r3, #2
 800e060:	440b      	add	r3, r1
 800e062:	3316      	adds	r3, #22
 800e064:	781b      	ldrb	r3, [r3, #0]
 800e066:	e00b      	b.n	800e080 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e068:	78fb      	ldrb	r3, [r7, #3]
 800e06a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e06e:	68f9      	ldr	r1, [r7, #12]
 800e070:	4613      	mov	r3, r2
 800e072:	00db      	lsls	r3, r3, #3
 800e074:	4413      	add	r3, r2
 800e076:	009b      	lsls	r3, r3, #2
 800e078:	440b      	add	r3, r1
 800e07a:	f203 2356 	addw	r3, r3, #598	; 0x256
 800e07e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e080:	4618      	mov	r0, r3
 800e082:	3714      	adds	r7, #20
 800e084:	46bd      	mov	sp, r7
 800e086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e08a:	4770      	bx	lr

0800e08c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e08c:	b580      	push	{r7, lr}
 800e08e:	b084      	sub	sp, #16
 800e090:	af00      	add	r7, sp, #0
 800e092:	6078      	str	r0, [r7, #4]
 800e094:	460b      	mov	r3, r1
 800e096:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e098:	2300      	movs	r3, #0
 800e09a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e09c:	2300      	movs	r3, #0
 800e09e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e0a6:	78fa      	ldrb	r2, [r7, #3]
 800e0a8:	4611      	mov	r1, r2
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	f7f6 fc3e 	bl	800492c <HAL_PCD_SetAddress>
 800e0b0:	4603      	mov	r3, r0
 800e0b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e0b4:	7bfb      	ldrb	r3, [r7, #15]
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	f000 f874 	bl	800e1a4 <USBD_Get_USB_Status>
 800e0bc:	4603      	mov	r3, r0
 800e0be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e0c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800e0c2:	4618      	mov	r0, r3
 800e0c4:	3710      	adds	r7, #16
 800e0c6:	46bd      	mov	sp, r7
 800e0c8:	bd80      	pop	{r7, pc}

0800e0ca <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e0ca:	b580      	push	{r7, lr}
 800e0cc:	b086      	sub	sp, #24
 800e0ce:	af00      	add	r7, sp, #0
 800e0d0:	60f8      	str	r0, [r7, #12]
 800e0d2:	607a      	str	r2, [r7, #4]
 800e0d4:	603b      	str	r3, [r7, #0]
 800e0d6:	460b      	mov	r3, r1
 800e0d8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e0da:	2300      	movs	r3, #0
 800e0dc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e0de:	2300      	movs	r3, #0
 800e0e0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e0e8:	7af9      	ldrb	r1, [r7, #11]
 800e0ea:	683b      	ldr	r3, [r7, #0]
 800e0ec:	687a      	ldr	r2, [r7, #4]
 800e0ee:	f7f6 fd46 	bl	8004b7e <HAL_PCD_EP_Transmit>
 800e0f2:	4603      	mov	r3, r0
 800e0f4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e0f6:	7dfb      	ldrb	r3, [r7, #23]
 800e0f8:	4618      	mov	r0, r3
 800e0fa:	f000 f853 	bl	800e1a4 <USBD_Get_USB_Status>
 800e0fe:	4603      	mov	r3, r0
 800e100:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e102:	7dbb      	ldrb	r3, [r7, #22]
}
 800e104:	4618      	mov	r0, r3
 800e106:	3718      	adds	r7, #24
 800e108:	46bd      	mov	sp, r7
 800e10a:	bd80      	pop	{r7, pc}

0800e10c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e10c:	b580      	push	{r7, lr}
 800e10e:	b086      	sub	sp, #24
 800e110:	af00      	add	r7, sp, #0
 800e112:	60f8      	str	r0, [r7, #12]
 800e114:	607a      	str	r2, [r7, #4]
 800e116:	603b      	str	r3, [r7, #0]
 800e118:	460b      	mov	r3, r1
 800e11a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e11c:	2300      	movs	r3, #0
 800e11e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e120:	2300      	movs	r3, #0
 800e122:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e12a:	7af9      	ldrb	r1, [r7, #11]
 800e12c:	683b      	ldr	r3, [r7, #0]
 800e12e:	687a      	ldr	r2, [r7, #4]
 800e130:	f7f6 fcd2 	bl	8004ad8 <HAL_PCD_EP_Receive>
 800e134:	4603      	mov	r3, r0
 800e136:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e138:	7dfb      	ldrb	r3, [r7, #23]
 800e13a:	4618      	mov	r0, r3
 800e13c:	f000 f832 	bl	800e1a4 <USBD_Get_USB_Status>
 800e140:	4603      	mov	r3, r0
 800e142:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e144:	7dbb      	ldrb	r3, [r7, #22]
}
 800e146:	4618      	mov	r0, r3
 800e148:	3718      	adds	r7, #24
 800e14a:	46bd      	mov	sp, r7
 800e14c:	bd80      	pop	{r7, pc}

0800e14e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e14e:	b580      	push	{r7, lr}
 800e150:	b082      	sub	sp, #8
 800e152:	af00      	add	r7, sp, #0
 800e154:	6078      	str	r0, [r7, #4]
 800e156:	460b      	mov	r3, r1
 800e158:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e160:	78fa      	ldrb	r2, [r7, #3]
 800e162:	4611      	mov	r1, r2
 800e164:	4618      	mov	r0, r3
 800e166:	f7f6 fcf2 	bl	8004b4e <HAL_PCD_EP_GetRxCount>
 800e16a:	4603      	mov	r3, r0
}
 800e16c:	4618      	mov	r0, r3
 800e16e:	3708      	adds	r7, #8
 800e170:	46bd      	mov	sp, r7
 800e172:	bd80      	pop	{r7, pc}

0800e174 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e174:	b480      	push	{r7}
 800e176:	b083      	sub	sp, #12
 800e178:	af00      	add	r7, sp, #0
 800e17a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e17c:	4b03      	ldr	r3, [pc, #12]	; (800e18c <USBD_static_malloc+0x18>)
}
 800e17e:	4618      	mov	r0, r3
 800e180:	370c      	adds	r7, #12
 800e182:	46bd      	mov	sp, r7
 800e184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e188:	4770      	bx	lr
 800e18a:	bf00      	nop
 800e18c:	20005c6c 	.word	0x20005c6c

0800e190 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e190:	b480      	push	{r7}
 800e192:	b083      	sub	sp, #12
 800e194:	af00      	add	r7, sp, #0
 800e196:	6078      	str	r0, [r7, #4]

}
 800e198:	bf00      	nop
 800e19a:	370c      	adds	r7, #12
 800e19c:	46bd      	mov	sp, r7
 800e19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a2:	4770      	bx	lr

0800e1a4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e1a4:	b480      	push	{r7}
 800e1a6:	b085      	sub	sp, #20
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	4603      	mov	r3, r0
 800e1ac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e1ae:	2300      	movs	r3, #0
 800e1b0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e1b2:	79fb      	ldrb	r3, [r7, #7]
 800e1b4:	2b03      	cmp	r3, #3
 800e1b6:	d817      	bhi.n	800e1e8 <USBD_Get_USB_Status+0x44>
 800e1b8:	a201      	add	r2, pc, #4	; (adr r2, 800e1c0 <USBD_Get_USB_Status+0x1c>)
 800e1ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1be:	bf00      	nop
 800e1c0:	0800e1d1 	.word	0x0800e1d1
 800e1c4:	0800e1d7 	.word	0x0800e1d7
 800e1c8:	0800e1dd 	.word	0x0800e1dd
 800e1cc:	0800e1e3 	.word	0x0800e1e3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e1d0:	2300      	movs	r3, #0
 800e1d2:	73fb      	strb	r3, [r7, #15]
    break;
 800e1d4:	e00b      	b.n	800e1ee <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e1d6:	2303      	movs	r3, #3
 800e1d8:	73fb      	strb	r3, [r7, #15]
    break;
 800e1da:	e008      	b.n	800e1ee <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e1dc:	2301      	movs	r3, #1
 800e1de:	73fb      	strb	r3, [r7, #15]
    break;
 800e1e0:	e005      	b.n	800e1ee <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e1e2:	2303      	movs	r3, #3
 800e1e4:	73fb      	strb	r3, [r7, #15]
    break;
 800e1e6:	e002      	b.n	800e1ee <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e1e8:	2303      	movs	r3, #3
 800e1ea:	73fb      	strb	r3, [r7, #15]
    break;
 800e1ec:	bf00      	nop
  }
  return usb_status;
 800e1ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	3714      	adds	r7, #20
 800e1f4:	46bd      	mov	sp, r7
 800e1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1fa:	4770      	bx	lr

0800e1fc <mecanum_calculate>:
  * @param input : ccx=+vx(mm/s)  ccy=+vy(mm/s)  ccw=+vw(deg/s)
  *        output: every wheel speed(rpm)
  * @note  1=FR 2=FL 3=BL 4=BR
  */
void mecanum_calculate(struct mecanum *mec)
{
 800e1fc:	b580      	push	{r7, lr}
 800e1fe:	b08a      	sub	sp, #40	; 0x28
 800e200:	af00      	add	r7, sp, #0
 800e202:	6078      	str	r0, [r7, #4]
  static float rotate_ratio_fl;
  static float rotate_ratio_bl;
  static float rotate_ratio_br;
  static float wheel_rpm_ratio;

  rotate_ratio_fr = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f - mec->param.rotate_x_offset + mec->param.rotate_y_offset) / RADIAN_COEF;
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	ed93 7a02 	vldr	s14, [r3, #8]
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	edd3 7a01 	vldr	s15, [r3, #4]
 800e210:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e214:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800e218:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	edd3 7a03 	vldr	s15, [r3, #12]
 800e222:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	edd3 7a04 	vldr	s15, [r3, #16]
 800e22c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e230:	eddf 6ac6 	vldr	s13, [pc, #792]	; 800e54c <mecanum_calculate+0x350>
 800e234:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e238:	4bc5      	ldr	r3, [pc, #788]	; (800e550 <mecanum_calculate+0x354>)
 800e23a:	edc3 7a00 	vstr	s15, [r3]
  rotate_ratio_fl = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f - mec->param.rotate_x_offset - mec->param.rotate_y_offset) / RADIAN_COEF;
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	ed93 7a02 	vldr	s14, [r3, #8]
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	edd3 7a01 	vldr	s15, [r3, #4]
 800e24a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e24e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800e252:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	edd3 7a03 	vldr	s15, [r3, #12]
 800e25c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	edd3 7a04 	vldr	s15, [r3, #16]
 800e266:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e26a:	eddf 6ab8 	vldr	s13, [pc, #736]	; 800e54c <mecanum_calculate+0x350>
 800e26e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e272:	4bb8      	ldr	r3, [pc, #736]	; (800e554 <mecanum_calculate+0x358>)
 800e274:	edc3 7a00 	vstr	s15, [r3]
  rotate_ratio_bl = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f + mec->param.rotate_x_offset - mec->param.rotate_y_offset) / RADIAN_COEF;
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	ed93 7a02 	vldr	s14, [r3, #8]
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	edd3 7a01 	vldr	s15, [r3, #4]
 800e284:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e288:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800e28c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	edd3 7a03 	vldr	s15, [r3, #12]
 800e296:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	edd3 7a04 	vldr	s15, [r3, #16]
 800e2a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e2a4:	eddf 6aa9 	vldr	s13, [pc, #676]	; 800e54c <mecanum_calculate+0x350>
 800e2a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e2ac:	4baa      	ldr	r3, [pc, #680]	; (800e558 <mecanum_calculate+0x35c>)
 800e2ae:	edc3 7a00 	vstr	s15, [r3]
  rotate_ratio_br = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f + mec->param.rotate_x_offset + mec->param.rotate_y_offset) / RADIAN_COEF;
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	ed93 7a02 	vldr	s14, [r3, #8]
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	edd3 7a01 	vldr	s15, [r3, #4]
 800e2be:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e2c2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800e2c6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	edd3 7a03 	vldr	s15, [r3, #12]
 800e2d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	edd3 7a04 	vldr	s15, [r3, #16]
 800e2da:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e2de:	eddf 6a9b 	vldr	s13, [pc, #620]	; 800e54c <mecanum_calculate+0x350>
 800e2e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e2e6:	4b9d      	ldr	r3, [pc, #628]	; (800e55c <mecanum_calculate+0x360>)
 800e2e8:	edc3 7a00 	vstr	s15, [r3]

  wheel_rpm_ratio = 60.0f / (mec->param.wheel_perimeter * MOTOR_DECELE_RATIO);
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	edd3 7a00 	vldr	s15, [r3]
 800e2f2:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 800e560 <mecanum_calculate+0x364>
 800e2f6:	ee27 7a87 	vmul.f32	s14, s15, s14
 800e2fa:	eddf 6a9a 	vldr	s13, [pc, #616]	; 800e564 <mecanum_calculate+0x368>
 800e2fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e302:	4b99      	ldr	r3, [pc, #612]	; (800e568 <mecanum_calculate+0x36c>)
 800e304:	edc3 7a00 	vstr	s15, [r3]

  MEC_VAL_LIMIT(mec->speed.vx, -MAX_CHASSIS_VX_SPEED, MAX_CHASSIS_VX_SPEED); //mm/s
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	edd3 7a05 	vldr	s15, [r3, #20]
 800e30e:	ed9f 7a97 	vldr	s14, [pc, #604]	; 800e56c <mecanum_calculate+0x370>
 800e312:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e31a:	d803      	bhi.n	800e324 <mecanum_calculate+0x128>
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	4a94      	ldr	r2, [pc, #592]	; (800e570 <mecanum_calculate+0x374>)
 800e320:	615a      	str	r2, [r3, #20]
 800e322:	e00c      	b.n	800e33e <mecanum_calculate+0x142>
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	edd3 7a05 	vldr	s15, [r3, #20]
 800e32a:	ed9f 7a92 	vldr	s14, [pc, #584]	; 800e574 <mecanum_calculate+0x378>
 800e32e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e336:	db02      	blt.n	800e33e <mecanum_calculate+0x142>
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	4a8f      	ldr	r2, [pc, #572]	; (800e578 <mecanum_calculate+0x37c>)
 800e33c:	615a      	str	r2, [r3, #20]
  MEC_VAL_LIMIT(mec->speed.vy, -MAX_CHASSIS_VY_SPEED, MAX_CHASSIS_VY_SPEED); //mm/s
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	edd3 7a06 	vldr	s15, [r3, #24]
 800e344:	ed9f 7a89 	vldr	s14, [pc, #548]	; 800e56c <mecanum_calculate+0x370>
 800e348:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e34c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e350:	d803      	bhi.n	800e35a <mecanum_calculate+0x15e>
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	4a86      	ldr	r2, [pc, #536]	; (800e570 <mecanum_calculate+0x374>)
 800e356:	619a      	str	r2, [r3, #24]
 800e358:	e00c      	b.n	800e374 <mecanum_calculate+0x178>
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	edd3 7a06 	vldr	s15, [r3, #24]
 800e360:	ed9f 7a84 	vldr	s14, [pc, #528]	; 800e574 <mecanum_calculate+0x378>
 800e364:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e36c:	db02      	blt.n	800e374 <mecanum_calculate+0x178>
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	4a81      	ldr	r2, [pc, #516]	; (800e578 <mecanum_calculate+0x37c>)
 800e372:	619a      	str	r2, [r3, #24]
  MEC_VAL_LIMIT(mec->speed.vw, -MAX_CHASSIS_VW_SPEED, MAX_CHASSIS_VW_SPEED); //deg/s
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	edd3 7a07 	vldr	s15, [r3, #28]
 800e37a:	ed9f 7a80 	vldr	s14, [pc, #512]	; 800e57c <mecanum_calculate+0x380>
 800e37e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e386:	d803      	bhi.n	800e390 <mecanum_calculate+0x194>
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	4a7d      	ldr	r2, [pc, #500]	; (800e580 <mecanum_calculate+0x384>)
 800e38c:	61da      	str	r2, [r3, #28]
 800e38e:	e00c      	b.n	800e3aa <mecanum_calculate+0x1ae>
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	edd3 7a07 	vldr	s15, [r3, #28]
 800e396:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 800e584 <mecanum_calculate+0x388>
 800e39a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e39e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3a2:	db02      	blt.n	800e3aa <mecanum_calculate+0x1ae>
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	4a78      	ldr	r2, [pc, #480]	; (800e588 <mecanum_calculate+0x38c>)
 800e3a8:	61da      	str	r2, [r3, #28]

  float wheel_rpm[4];
  float max = 0;
 800e3aa:	f04f 0300 	mov.w	r3, #0
 800e3ae:	627b      	str	r3, [r7, #36]	; 0x24

  wheel_rpm[0] = (-mec->speed.vx - mec->speed.vy - mec->speed.vw * rotate_ratio_fr) * wheel_rpm_ratio;
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	edd3 7a05 	vldr	s15, [r3, #20]
 800e3b6:	eeb1 7a67 	vneg.f32	s14, s15
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	edd3 7a06 	vldr	s15, [r3, #24]
 800e3c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	edd3 6a07 	vldr	s13, [r3, #28]
 800e3ca:	4b61      	ldr	r3, [pc, #388]	; (800e550 <mecanum_calculate+0x354>)
 800e3cc:	edd3 7a00 	vldr	s15, [r3]
 800e3d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e3d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e3d8:	4b63      	ldr	r3, [pc, #396]	; (800e568 <mecanum_calculate+0x36c>)
 800e3da:	edd3 7a00 	vldr	s15, [r3]
 800e3de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e3e2:	edc7 7a03 	vstr	s15, [r7, #12]
  wheel_rpm[1] = (mec->speed.vx - mec->speed.vy - mec->speed.vw * rotate_ratio_fl) * wheel_rpm_ratio;
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	ed93 7a05 	vldr	s14, [r3, #20]
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	edd3 7a06 	vldr	s15, [r3, #24]
 800e3f2:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	edd3 6a07 	vldr	s13, [r3, #28]
 800e3fc:	4b55      	ldr	r3, [pc, #340]	; (800e554 <mecanum_calculate+0x358>)
 800e3fe:	edd3 7a00 	vldr	s15, [r3]
 800e402:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e406:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e40a:	4b57      	ldr	r3, [pc, #348]	; (800e568 <mecanum_calculate+0x36c>)
 800e40c:	edd3 7a00 	vldr	s15, [r3]
 800e410:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e414:	edc7 7a04 	vstr	s15, [r7, #16]
  wheel_rpm[2] = (mec->speed.vx + mec->speed.vy - mec->speed.vw * rotate_ratio_bl) * wheel_rpm_ratio;
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	ed93 7a05 	vldr	s14, [r3, #20]
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	edd3 7a06 	vldr	s15, [r3, #24]
 800e424:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	edd3 6a07 	vldr	s13, [r3, #28]
 800e42e:	4b4a      	ldr	r3, [pc, #296]	; (800e558 <mecanum_calculate+0x35c>)
 800e430:	edd3 7a00 	vldr	s15, [r3]
 800e434:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e438:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e43c:	4b4a      	ldr	r3, [pc, #296]	; (800e568 <mecanum_calculate+0x36c>)
 800e43e:	edd3 7a00 	vldr	s15, [r3]
 800e442:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e446:	edc7 7a05 	vstr	s15, [r7, #20]
  wheel_rpm[3] = (-mec->speed.vx + mec->speed.vy - mec->speed.vw * rotate_ratio_br) * wheel_rpm_ratio;
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	ed93 7a06 	vldr	s14, [r3, #24]
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	edd3 7a05 	vldr	s15, [r3, #20]
 800e456:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	edd3 6a07 	vldr	s13, [r3, #28]
 800e460:	4b3e      	ldr	r3, [pc, #248]	; (800e55c <mecanum_calculate+0x360>)
 800e462:	edd3 7a00 	vldr	s15, [r3]
 800e466:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e46a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e46e:	4b3e      	ldr	r3, [pc, #248]	; (800e568 <mecanum_calculate+0x36c>)
 800e470:	edd3 7a00 	vldr	s15, [r3]
 800e474:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e478:	edc7 7a06 	vstr	s15, [r7, #24]

  //find max item
  for (uint8_t i = 0; i < 4; i++)
 800e47c:	2300      	movs	r3, #0
 800e47e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e482:	e021      	b.n	800e4c8 <mecanum_calculate+0x2cc>
  {
    if (fabs(wheel_rpm[i]) > max)
 800e484:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e488:	009b      	lsls	r3, r3, #2
 800e48a:	3328      	adds	r3, #40	; 0x28
 800e48c:	443b      	add	r3, r7
 800e48e:	3b1c      	subs	r3, #28
 800e490:	edd3 7a00 	vldr	s15, [r3]
 800e494:	eef0 7ae7 	vabs.f32	s15, s15
 800e498:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800e49c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e4a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4a4:	d50b      	bpl.n	800e4be <mecanum_calculate+0x2c2>
      max = fabs(wheel_rpm[i]);
 800e4a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e4aa:	009b      	lsls	r3, r3, #2
 800e4ac:	3328      	adds	r3, #40	; 0x28
 800e4ae:	443b      	add	r3, r7
 800e4b0:	3b1c      	subs	r3, #28
 800e4b2:	edd3 7a00 	vldr	s15, [r3]
 800e4b6:	eef0 7ae7 	vabs.f32	s15, s15
 800e4ba:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  for (uint8_t i = 0; i < 4; i++)
 800e4be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e4c2:	3301      	adds	r3, #1
 800e4c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e4c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e4cc:	2b03      	cmp	r3, #3
 800e4ce:	d9d9      	bls.n	800e484 <mecanum_calculate+0x288>
  }

  //equal proportion
  if (max > MAX_WHEEL_RPM)
 800e4d0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800e4d4:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 800e58c <mecanum_calculate+0x390>
 800e4d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e4dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4e0:	dd28      	ble.n	800e534 <mecanum_calculate+0x338>
  {
    float rate = MAX_WHEEL_RPM / max;
 800e4e2:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800e58c <mecanum_calculate+0x390>
 800e4e6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800e4ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e4ee:	edc7 7a07 	vstr	s15, [r7, #28]
    for (uint8_t i = 0; i < 4; i++)
 800e4f2:	2300      	movs	r3, #0
 800e4f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800e4f8:	e018      	b.n	800e52c <mecanum_calculate+0x330>
      wheel_rpm[i] *= rate;
 800e4fa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e4fe:	009b      	lsls	r3, r3, #2
 800e500:	3328      	adds	r3, #40	; 0x28
 800e502:	443b      	add	r3, r7
 800e504:	3b1c      	subs	r3, #28
 800e506:	ed93 7a00 	vldr	s14, [r3]
 800e50a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e50e:	edd7 7a07 	vldr	s15, [r7, #28]
 800e512:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e516:	009b      	lsls	r3, r3, #2
 800e518:	3328      	adds	r3, #40	; 0x28
 800e51a:	443b      	add	r3, r7
 800e51c:	3b1c      	subs	r3, #28
 800e51e:	edc3 7a00 	vstr	s15, [r3]
    for (uint8_t i = 0; i < 4; i++)
 800e522:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e526:	3301      	adds	r3, #1
 800e528:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800e52c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e530:	2b03      	cmp	r3, #3
 800e532:	d9e2      	bls.n	800e4fa <mecanum_calculate+0x2fe>
  }
  memcpy(mec->wheel_rpm, wheel_rpm, 4 * sizeof(float));
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	3340      	adds	r3, #64	; 0x40
 800e538:	f107 010c 	add.w	r1, r7, #12
 800e53c:	2210      	movs	r2, #16
 800e53e:	4618      	mov	r0, r3
 800e540:	f006 f910 	bl	8014764 <memcpy>
}
 800e544:	bf00      	nop
 800e546:	3728      	adds	r7, #40	; 0x28
 800e548:	46bd      	mov	sp, r7
 800e54a:	bd80      	pop	{r7, pc}
 800e54c:	42653333 	.word	0x42653333
 800e550:	20005e8c 	.word	0x20005e8c
 800e554:	20005e90 	.word	0x20005e90
 800e558:	20005e94 	.word	0x20005e94
 800e55c:	20005e98 	.word	0x20005e98
 800e560:	3d579436 	.word	0x3d579436
 800e564:	42700000 	.word	0x42700000
 800e568:	20005e9c 	.word	0x20005e9c
 800e56c:	c54e4000 	.word	0xc54e4000
 800e570:	c54e4000 	.word	0xc54e4000
 800e574:	454e4000 	.word	0x454e4000
 800e578:	454e4000 	.word	0x454e4000
 800e57c:	c3960000 	.word	0xc3960000
 800e580:	c3960000 	.word	0xc3960000
 800e584:	43960000 	.word	0x43960000
 800e588:	43960000 	.word	0x43960000
 800e58c:	4604d000 	.word	0x4604d000

0800e590 <mecanum_position_measure>:

void mecanum_position_measure(struct mecanum *mec, struct mecanum_motor_fdb wheel_fdb[])
{
 800e590:	b5b0      	push	{r4, r5, r7, lr}
 800e592:	b082      	sub	sp, #8
 800e594:	af00      	add	r7, sp, #0
 800e596:	6078      	str	r0, [r7, #4]
 800e598:	6039      	str	r1, [r7, #0]
  static double mecanum_angle;
  static double last_d_x, last_d_y, last_d_w, d_x, d_y, d_w, diff_d_x, diff_d_y, diff_d_w;
  static double position_x, position_y, angle_w;
  static double v_x, v_y, v_w;

  rotate_ratio_fr = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f -
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	ed93 7a02 	vldr	s14, [r3, #8]
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	edd3 7a01 	vldr	s15, [r3, #4]
 800e5a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e5aa:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800e5ae:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                     mec->param.rotate_x_offset + mec->param.rotate_y_offset);
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	edd3 7a03 	vldr	s15, [r3, #12]
  rotate_ratio_fr = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f -
 800e5b8:	ee37 7a67 	vsub.f32	s14, s14, s15
                     mec->param.rotate_x_offset + mec->param.rotate_y_offset);
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	edd3 7a04 	vldr	s15, [r3, #16]
 800e5c2:	ee77 7a27 	vadd.f32	s15, s14, s15
  rotate_ratio_fr = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f -
 800e5c6:	4bc2      	ldr	r3, [pc, #776]	; (800e8d0 <mecanum_position_measure+0x340>)
 800e5c8:	edc3 7a00 	vstr	s15, [r3]
  rotate_ratio_fl = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f -
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	ed93 7a02 	vldr	s14, [r3, #8]
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	edd3 7a01 	vldr	s15, [r3, #4]
 800e5d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e5dc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800e5e0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                     mec->param.rotate_x_offset - mec->param.rotate_y_offset);
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	edd3 7a03 	vldr	s15, [r3, #12]
  rotate_ratio_fl = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f -
 800e5ea:	ee37 7a67 	vsub.f32	s14, s14, s15
                     mec->param.rotate_x_offset - mec->param.rotate_y_offset);
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	edd3 7a04 	vldr	s15, [r3, #16]
 800e5f4:	ee77 7a67 	vsub.f32	s15, s14, s15
  rotate_ratio_fl = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f -
 800e5f8:	4bb6      	ldr	r3, [pc, #728]	; (800e8d4 <mecanum_position_measure+0x344>)
 800e5fa:	edc3 7a00 	vstr	s15, [r3]
  rotate_ratio_bl = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f +
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	ed93 7a02 	vldr	s14, [r3, #8]
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	edd3 7a01 	vldr	s15, [r3, #4]
 800e60a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e60e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800e612:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                     mec->param.rotate_x_offset - mec->param.rotate_y_offset);
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	edd3 7a03 	vldr	s15, [r3, #12]
  rotate_ratio_bl = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f +
 800e61c:	ee37 7a27 	vadd.f32	s14, s14, s15
                     mec->param.rotate_x_offset - mec->param.rotate_y_offset);
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	edd3 7a04 	vldr	s15, [r3, #16]
 800e626:	ee77 7a67 	vsub.f32	s15, s14, s15
  rotate_ratio_bl = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f +
 800e62a:	4bab      	ldr	r3, [pc, #684]	; (800e8d8 <mecanum_position_measure+0x348>)
 800e62c:	edc3 7a00 	vstr	s15, [r3]
  rotate_ratio_br = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f +
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	ed93 7a02 	vldr	s14, [r3, #8]
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	edd3 7a01 	vldr	s15, [r3, #4]
 800e63c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e640:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800e644:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                     mec->param.rotate_x_offset + mec->param.rotate_y_offset);
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	edd3 7a03 	vldr	s15, [r3, #12]
  rotate_ratio_br = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f +
 800e64e:	ee37 7a27 	vadd.f32	s14, s14, s15
                     mec->param.rotate_x_offset + mec->param.rotate_y_offset);
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	edd3 7a04 	vldr	s15, [r3, #16]
 800e658:	ee77 7a27 	vadd.f32	s15, s14, s15
  rotate_ratio_br = ((mec->param.wheelbase + mec->param.wheeltrack) / 2.0f +
 800e65c:	4b9f      	ldr	r3, [pc, #636]	; (800e8dc <mecanum_position_measure+0x34c>)
 800e65e:	edc3 7a00 	vstr	s15, [r3]
  rpm_ratio = mec->param.wheel_perimeter * MOTOR_DECELE_RATIO / (4 * 60.0f);
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	edd3 7a00 	vldr	s15, [r3]
 800e668:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 800e8e0 <mecanum_position_measure+0x350>
 800e66c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800e670:	eddf 6a9c 	vldr	s13, [pc, #624]	; 800e8e4 <mecanum_position_measure+0x354>
 800e674:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e678:	4b9b      	ldr	r3, [pc, #620]	; (800e8e8 <mecanum_position_measure+0x358>)
 800e67a:	edc3 7a00 	vstr	s15, [r3]
  ecd_ratio = mec->param.wheel_perimeter * MOTOR_DECELE_RATIO / (4 * MOTOR_ENCODER_ACCURACY);
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	edd3 7a00 	vldr	s15, [r3]
 800e684:	ed9f 7a96 	vldr	s14, [pc, #600]	; 800e8e0 <mecanum_position_measure+0x350>
 800e688:	ee27 7a87 	vmul.f32	s14, s15, s14
 800e68c:	eddf 6a97 	vldr	s13, [pc, #604]	; 800e8ec <mecanum_position_measure+0x35c>
 800e690:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e694:	4b96      	ldr	r3, [pc, #600]	; (800e8f0 <mecanum_position_measure+0x360>)
 800e696:	edc3 7a00 	vstr	s15, [r3]

  last_d_x = d_x;
 800e69a:	4b96      	ldr	r3, [pc, #600]	; (800e8f4 <mecanum_position_measure+0x364>)
 800e69c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6a0:	4995      	ldr	r1, [pc, #596]	; (800e8f8 <mecanum_position_measure+0x368>)
 800e6a2:	e9c1 2300 	strd	r2, r3, [r1]
  last_d_y = d_y;
 800e6a6:	4b95      	ldr	r3, [pc, #596]	; (800e8fc <mecanum_position_measure+0x36c>)
 800e6a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6ac:	4994      	ldr	r1, [pc, #592]	; (800e900 <mecanum_position_measure+0x370>)
 800e6ae:	e9c1 2300 	strd	r2, r3, [r1]
  last_d_w = d_w;
 800e6b2:	4b94      	ldr	r3, [pc, #592]	; (800e904 <mecanum_position_measure+0x374>)
 800e6b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6b8:	4993      	ldr	r1, [pc, #588]	; (800e908 <mecanum_position_measure+0x378>)
 800e6ba:	e9c1 2300 	strd	r2, r3, [r1]
  d_x = ecd_ratio * (-wheel_fdb[0].total_ecd + wheel_fdb[1].total_ecd + wheel_fdb[2].total_ecd - wheel_fdb[3].total_ecd);
 800e6be:	683b      	ldr	r3, [r7, #0]
 800e6c0:	3308      	adds	r3, #8
 800e6c2:	ed93 7a00 	vldr	s14, [r3]
 800e6c6:	683b      	ldr	r3, [r7, #0]
 800e6c8:	edd3 7a00 	vldr	s15, [r3]
 800e6cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e6d0:	683b      	ldr	r3, [r7, #0]
 800e6d2:	3310      	adds	r3, #16
 800e6d4:	edd3 7a00 	vldr	s15, [r3]
 800e6d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e6dc:	683b      	ldr	r3, [r7, #0]
 800e6de:	3318      	adds	r3, #24
 800e6e0:	edd3 7a00 	vldr	s15, [r3]
 800e6e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e6e8:	4b81      	ldr	r3, [pc, #516]	; (800e8f0 <mecanum_position_measure+0x360>)
 800e6ea:	edd3 7a00 	vldr	s15, [r3]
 800e6ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e6f2:	ee17 0a90 	vmov	r0, s15
 800e6f6:	f7f1 fee7 	bl	80004c8 <__aeabi_f2d>
 800e6fa:	4602      	mov	r2, r0
 800e6fc:	460b      	mov	r3, r1
 800e6fe:	497d      	ldr	r1, [pc, #500]	; (800e8f4 <mecanum_position_measure+0x364>)
 800e700:	e9c1 2300 	strd	r2, r3, [r1]
  d_y = ecd_ratio * (-wheel_fdb[0].total_ecd - wheel_fdb[1].total_ecd + wheel_fdb[2].total_ecd + wheel_fdb[3].total_ecd);
 800e704:	683b      	ldr	r3, [r7, #0]
 800e706:	edd3 7a00 	vldr	s15, [r3]
 800e70a:	eeb1 7a67 	vneg.f32	s14, s15
 800e70e:	683b      	ldr	r3, [r7, #0]
 800e710:	3308      	adds	r3, #8
 800e712:	edd3 7a00 	vldr	s15, [r3]
 800e716:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e71a:	683b      	ldr	r3, [r7, #0]
 800e71c:	3310      	adds	r3, #16
 800e71e:	edd3 7a00 	vldr	s15, [r3]
 800e722:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e726:	683b      	ldr	r3, [r7, #0]
 800e728:	3318      	adds	r3, #24
 800e72a:	edd3 7a00 	vldr	s15, [r3]
 800e72e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e732:	4b6f      	ldr	r3, [pc, #444]	; (800e8f0 <mecanum_position_measure+0x360>)
 800e734:	edd3 7a00 	vldr	s15, [r3]
 800e738:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e73c:	ee17 0a90 	vmov	r0, s15
 800e740:	f7f1 fec2 	bl	80004c8 <__aeabi_f2d>
 800e744:	4602      	mov	r2, r0
 800e746:	460b      	mov	r3, r1
 800e748:	496c      	ldr	r1, [pc, #432]	; (800e8fc <mecanum_position_measure+0x36c>)
 800e74a:	e9c1 2300 	strd	r2, r3, [r1]
  d_w = ecd_ratio * (-wheel_fdb[0].total_ecd / rotate_ratio_fr - wheel_fdb[1].total_ecd / rotate_ratio_fl - wheel_fdb[2].total_ecd / rotate_ratio_bl - wheel_fdb[3].total_ecd / rotate_ratio_br);
 800e74e:	683b      	ldr	r3, [r7, #0]
 800e750:	edd3 7a00 	vldr	s15, [r3]
 800e754:	eef1 6a67 	vneg.f32	s13, s15
 800e758:	4b5d      	ldr	r3, [pc, #372]	; (800e8d0 <mecanum_position_measure+0x340>)
 800e75a:	edd3 7a00 	vldr	s15, [r3]
 800e75e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e762:	683b      	ldr	r3, [r7, #0]
 800e764:	3308      	adds	r3, #8
 800e766:	ed93 6a00 	vldr	s12, [r3]
 800e76a:	4b5a      	ldr	r3, [pc, #360]	; (800e8d4 <mecanum_position_measure+0x344>)
 800e76c:	edd3 6a00 	vldr	s13, [r3]
 800e770:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800e774:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e778:	683b      	ldr	r3, [r7, #0]
 800e77a:	3310      	adds	r3, #16
 800e77c:	ed93 6a00 	vldr	s12, [r3]
 800e780:	4b55      	ldr	r3, [pc, #340]	; (800e8d8 <mecanum_position_measure+0x348>)
 800e782:	edd3 6a00 	vldr	s13, [r3]
 800e786:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800e78a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e78e:	683b      	ldr	r3, [r7, #0]
 800e790:	3318      	adds	r3, #24
 800e792:	ed93 6a00 	vldr	s12, [r3]
 800e796:	4b51      	ldr	r3, [pc, #324]	; (800e8dc <mecanum_position_measure+0x34c>)
 800e798:	edd3 6a00 	vldr	s13, [r3]
 800e79c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800e7a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e7a4:	4b52      	ldr	r3, [pc, #328]	; (800e8f0 <mecanum_position_measure+0x360>)
 800e7a6:	edd3 7a00 	vldr	s15, [r3]
 800e7aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e7ae:	ee17 0a90 	vmov	r0, s15
 800e7b2:	f7f1 fe89 	bl	80004c8 <__aeabi_f2d>
 800e7b6:	4602      	mov	r2, r0
 800e7b8:	460b      	mov	r3, r1
 800e7ba:	4952      	ldr	r1, [pc, #328]	; (800e904 <mecanum_position_measure+0x374>)
 800e7bc:	e9c1 2300 	strd	r2, r3, [r1]

  diff_d_x = d_x - last_d_x;
 800e7c0:	4b4c      	ldr	r3, [pc, #304]	; (800e8f4 <mecanum_position_measure+0x364>)
 800e7c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e7c6:	4b4c      	ldr	r3, [pc, #304]	; (800e8f8 <mecanum_position_measure+0x368>)
 800e7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7cc:	f7f1 fd1c 	bl	8000208 <__aeabi_dsub>
 800e7d0:	4602      	mov	r2, r0
 800e7d2:	460b      	mov	r3, r1
 800e7d4:	494d      	ldr	r1, [pc, #308]	; (800e90c <mecanum_position_measure+0x37c>)
 800e7d6:	e9c1 2300 	strd	r2, r3, [r1]
  diff_d_y = d_y - last_d_y;
 800e7da:	4b48      	ldr	r3, [pc, #288]	; (800e8fc <mecanum_position_measure+0x36c>)
 800e7dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e7e0:	4b47      	ldr	r3, [pc, #284]	; (800e900 <mecanum_position_measure+0x370>)
 800e7e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7e6:	f7f1 fd0f 	bl	8000208 <__aeabi_dsub>
 800e7ea:	4602      	mov	r2, r0
 800e7ec:	460b      	mov	r3, r1
 800e7ee:	4948      	ldr	r1, [pc, #288]	; (800e910 <mecanum_position_measure+0x380>)
 800e7f0:	e9c1 2300 	strd	r2, r3, [r1]
  diff_d_w = d_w - last_d_w;
 800e7f4:	4b43      	ldr	r3, [pc, #268]	; (800e904 <mecanum_position_measure+0x374>)
 800e7f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e7fa:	4b43      	ldr	r3, [pc, #268]	; (800e908 <mecanum_position_measure+0x378>)
 800e7fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e800:	f7f1 fd02 	bl	8000208 <__aeabi_dsub>
 800e804:	4602      	mov	r2, r0
 800e806:	460b      	mov	r3, r1
 800e808:	4942      	ldr	r1, [pc, #264]	; (800e914 <mecanum_position_measure+0x384>)
 800e80a:	e9c1 2300 	strd	r2, r3, [r1]

  /* use glb_chassis gyro angle data */
  mecanum_angle = mec->gyro.yaw_gyro_angle / RADIAN_COEF;
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800e814:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800e918 <mecanum_position_measure+0x388>
 800e818:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800e81c:	ee16 0a90 	vmov	r0, s13
 800e820:	f7f1 fe52 	bl	80004c8 <__aeabi_f2d>
 800e824:	4602      	mov	r2, r0
 800e826:	460b      	mov	r3, r1
 800e828:	493c      	ldr	r1, [pc, #240]	; (800e91c <mecanum_position_measure+0x38c>)
 800e82a:	e9c1 2300 	strd	r2, r3, [r1]

  position_x += diff_d_x * cos(mecanum_angle) - diff_d_y * sin(mecanum_angle);
 800e82e:	4b3b      	ldr	r3, [pc, #236]	; (800e91c <mecanum_position_measure+0x38c>)
 800e830:	ed93 7b00 	vldr	d7, [r3]
 800e834:	eeb0 0a47 	vmov.f32	s0, s14
 800e838:	eef0 0a67 	vmov.f32	s1, s15
 800e83c:	f005 ffec 	bl	8014818 <cos>
 800e840:	ec51 0b10 	vmov	r0, r1, d0
 800e844:	4b31      	ldr	r3, [pc, #196]	; (800e90c <mecanum_position_measure+0x37c>)
 800e846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e84a:	f7f1 fe95 	bl	8000578 <__aeabi_dmul>
 800e84e:	4602      	mov	r2, r0
 800e850:	460b      	mov	r3, r1
 800e852:	4614      	mov	r4, r2
 800e854:	461d      	mov	r5, r3
 800e856:	4b31      	ldr	r3, [pc, #196]	; (800e91c <mecanum_position_measure+0x38c>)
 800e858:	ed93 7b00 	vldr	d7, [r3]
 800e85c:	eeb0 0a47 	vmov.f32	s0, s14
 800e860:	eef0 0a67 	vmov.f32	s1, s15
 800e864:	f006 f838 	bl	80148d8 <sin>
 800e868:	ec51 0b10 	vmov	r0, r1, d0
 800e86c:	4b28      	ldr	r3, [pc, #160]	; (800e910 <mecanum_position_measure+0x380>)
 800e86e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e872:	f7f1 fe81 	bl	8000578 <__aeabi_dmul>
 800e876:	4602      	mov	r2, r0
 800e878:	460b      	mov	r3, r1
 800e87a:	4620      	mov	r0, r4
 800e87c:	4629      	mov	r1, r5
 800e87e:	f7f1 fcc3 	bl	8000208 <__aeabi_dsub>
 800e882:	4602      	mov	r2, r0
 800e884:	460b      	mov	r3, r1
 800e886:	4610      	mov	r0, r2
 800e888:	4619      	mov	r1, r3
 800e88a:	4b25      	ldr	r3, [pc, #148]	; (800e920 <mecanum_position_measure+0x390>)
 800e88c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e890:	f7f1 fcbc 	bl	800020c <__adddf3>
 800e894:	4602      	mov	r2, r0
 800e896:	460b      	mov	r3, r1
 800e898:	4921      	ldr	r1, [pc, #132]	; (800e920 <mecanum_position_measure+0x390>)
 800e89a:	e9c1 2300 	strd	r2, r3, [r1]
  position_y += diff_d_x * sin(mecanum_angle) + diff_d_y * cos(mecanum_angle);
 800e89e:	4b1f      	ldr	r3, [pc, #124]	; (800e91c <mecanum_position_measure+0x38c>)
 800e8a0:	ed93 7b00 	vldr	d7, [r3]
 800e8a4:	eeb0 0a47 	vmov.f32	s0, s14
 800e8a8:	eef0 0a67 	vmov.f32	s1, s15
 800e8ac:	f006 f814 	bl	80148d8 <sin>
 800e8b0:	ec51 0b10 	vmov	r0, r1, d0
 800e8b4:	4b15      	ldr	r3, [pc, #84]	; (800e90c <mecanum_position_measure+0x37c>)
 800e8b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8ba:	f7f1 fe5d 	bl	8000578 <__aeabi_dmul>
 800e8be:	4602      	mov	r2, r0
 800e8c0:	460b      	mov	r3, r1
 800e8c2:	4614      	mov	r4, r2
 800e8c4:	461d      	mov	r5, r3
 800e8c6:	4b15      	ldr	r3, [pc, #84]	; (800e91c <mecanum_position_measure+0x38c>)
 800e8c8:	ed93 7b00 	vldr	d7, [r3]
 800e8cc:	e02a      	b.n	800e924 <mecanum_position_measure+0x394>
 800e8ce:	bf00      	nop
 800e8d0:	20005ea0 	.word	0x20005ea0
 800e8d4:	20005ea4 	.word	0x20005ea4
 800e8d8:	20005ea8 	.word	0x20005ea8
 800e8dc:	20005eac 	.word	0x20005eac
 800e8e0:	3d579436 	.word	0x3d579436
 800e8e4:	43700000 	.word	0x43700000
 800e8e8:	20005eb0 	.word	0x20005eb0
 800e8ec:	47000000 	.word	0x47000000
 800e8f0:	20005eb4 	.word	0x20005eb4
 800e8f4:	20005eb8 	.word	0x20005eb8
 800e8f8:	20005ec0 	.word	0x20005ec0
 800e8fc:	20005ec8 	.word	0x20005ec8
 800e900:	20005ed0 	.word	0x20005ed0
 800e904:	20005ed8 	.word	0x20005ed8
 800e908:	20005ee0 	.word	0x20005ee0
 800e90c:	20005ee8 	.word	0x20005ee8
 800e910:	20005ef0 	.word	0x20005ef0
 800e914:	20005ef8 	.word	0x20005ef8
 800e918:	42653333 	.word	0x42653333
 800e91c:	20005f00 	.word	0x20005f00
 800e920:	20005f08 	.word	0x20005f08
 800e924:	eeb0 0a47 	vmov.f32	s0, s14
 800e928:	eef0 0a67 	vmov.f32	s1, s15
 800e92c:	f005 ff74 	bl	8014818 <cos>
 800e930:	ec51 0b10 	vmov	r0, r1, d0
 800e934:	4b7c      	ldr	r3, [pc, #496]	; (800eb28 <mecanum_position_measure+0x598>)
 800e936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e93a:	f7f1 fe1d 	bl	8000578 <__aeabi_dmul>
 800e93e:	4602      	mov	r2, r0
 800e940:	460b      	mov	r3, r1
 800e942:	4620      	mov	r0, r4
 800e944:	4629      	mov	r1, r5
 800e946:	f7f1 fc61 	bl	800020c <__adddf3>
 800e94a:	4602      	mov	r2, r0
 800e94c:	460b      	mov	r3, r1
 800e94e:	4610      	mov	r0, r2
 800e950:	4619      	mov	r1, r3
 800e952:	4b76      	ldr	r3, [pc, #472]	; (800eb2c <mecanum_position_measure+0x59c>)
 800e954:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e958:	f7f1 fc58 	bl	800020c <__adddf3>
 800e95c:	4602      	mov	r2, r0
 800e95e:	460b      	mov	r3, r1
 800e960:	4972      	ldr	r1, [pc, #456]	; (800eb2c <mecanum_position_measure+0x59c>)
 800e962:	e9c1 2300 	strd	r2, r3, [r1]

  angle_w += diff_d_w;
 800e966:	4b72      	ldr	r3, [pc, #456]	; (800eb30 <mecanum_position_measure+0x5a0>)
 800e968:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e96c:	4b71      	ldr	r3, [pc, #452]	; (800eb34 <mecanum_position_measure+0x5a4>)
 800e96e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e972:	f7f1 fc4b 	bl	800020c <__adddf3>
 800e976:	4602      	mov	r2, r0
 800e978:	460b      	mov	r3, r1
 800e97a:	496d      	ldr	r1, [pc, #436]	; (800eb30 <mecanum_position_measure+0x5a0>)
 800e97c:	e9c1 2300 	strd	r2, r3, [r1]

  mec->position.position_x_mm = position_x;        //mm
 800e980:	4b6d      	ldr	r3, [pc, #436]	; (800eb38 <mecanum_position_measure+0x5a8>)
 800e982:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e986:	4610      	mov	r0, r2
 800e988:	4619      	mov	r1, r3
 800e98a:	f7f2 f8b7 	bl	8000afc <__aeabi_d2f>
 800e98e:	4602      	mov	r2, r0
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	62da      	str	r2, [r3, #44]	; 0x2c
  mec->position.position_y_mm = position_y;        //mm
 800e994:	4b65      	ldr	r3, [pc, #404]	; (800eb2c <mecanum_position_measure+0x59c>)
 800e996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e99a:	4610      	mov	r0, r2
 800e99c:	4619      	mov	r1, r3
 800e99e:	f7f2 f8ad 	bl	8000afc <__aeabi_d2f>
 800e9a2:	4602      	mov	r2, r0
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	631a      	str	r2, [r3, #48]	; 0x30
  mec->position.angle_deg = angle_w * RADIAN_COEF; //degree
 800e9a8:	4b61      	ldr	r3, [pc, #388]	; (800eb30 <mecanum_position_measure+0x5a0>)
 800e9aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e9ae:	a35c      	add	r3, pc, #368	; (adr r3, 800eb20 <mecanum_position_measure+0x590>)
 800e9b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9b4:	f7f1 fde0 	bl	8000578 <__aeabi_dmul>
 800e9b8:	4602      	mov	r2, r0
 800e9ba:	460b      	mov	r3, r1
 800e9bc:	4610      	mov	r0, r2
 800e9be:	4619      	mov	r1, r3
 800e9c0:	f7f2 f89c 	bl	8000afc <__aeabi_d2f>
 800e9c4:	4602      	mov	r2, r0
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	635a      	str	r2, [r3, #52]	; 0x34

  v_x = rpm_ratio * (-wheel_fdb[0].speed_rpm + wheel_fdb[1].speed_rpm + wheel_fdb[2].speed_rpm - wheel_fdb[3].speed_rpm);
 800e9ca:	683b      	ldr	r3, [r7, #0]
 800e9cc:	3308      	adds	r3, #8
 800e9ce:	ed93 7a01 	vldr	s14, [r3, #4]
 800e9d2:	683b      	ldr	r3, [r7, #0]
 800e9d4:	edd3 7a01 	vldr	s15, [r3, #4]
 800e9d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e9dc:	683b      	ldr	r3, [r7, #0]
 800e9de:	3310      	adds	r3, #16
 800e9e0:	edd3 7a01 	vldr	s15, [r3, #4]
 800e9e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e9e8:	683b      	ldr	r3, [r7, #0]
 800e9ea:	3318      	adds	r3, #24
 800e9ec:	edd3 7a01 	vldr	s15, [r3, #4]
 800e9f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e9f4:	4b51      	ldr	r3, [pc, #324]	; (800eb3c <mecanum_position_measure+0x5ac>)
 800e9f6:	edd3 7a00 	vldr	s15, [r3]
 800e9fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e9fe:	ee17 0a90 	vmov	r0, s15
 800ea02:	f7f1 fd61 	bl	80004c8 <__aeabi_f2d>
 800ea06:	4602      	mov	r2, r0
 800ea08:	460b      	mov	r3, r1
 800ea0a:	494d      	ldr	r1, [pc, #308]	; (800eb40 <mecanum_position_measure+0x5b0>)
 800ea0c:	e9c1 2300 	strd	r2, r3, [r1]
  v_y = rpm_ratio * (-wheel_fdb[0].speed_rpm - wheel_fdb[1].speed_rpm + wheel_fdb[2].speed_rpm + wheel_fdb[3].speed_rpm);
 800ea10:	683b      	ldr	r3, [r7, #0]
 800ea12:	edd3 7a01 	vldr	s15, [r3, #4]
 800ea16:	eeb1 7a67 	vneg.f32	s14, s15
 800ea1a:	683b      	ldr	r3, [r7, #0]
 800ea1c:	3308      	adds	r3, #8
 800ea1e:	edd3 7a01 	vldr	s15, [r3, #4]
 800ea22:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ea26:	683b      	ldr	r3, [r7, #0]
 800ea28:	3310      	adds	r3, #16
 800ea2a:	edd3 7a01 	vldr	s15, [r3, #4]
 800ea2e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ea32:	683b      	ldr	r3, [r7, #0]
 800ea34:	3318      	adds	r3, #24
 800ea36:	edd3 7a01 	vldr	s15, [r3, #4]
 800ea3a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ea3e:	4b3f      	ldr	r3, [pc, #252]	; (800eb3c <mecanum_position_measure+0x5ac>)
 800ea40:	edd3 7a00 	vldr	s15, [r3]
 800ea44:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ea48:	ee17 0a90 	vmov	r0, s15
 800ea4c:	f7f1 fd3c 	bl	80004c8 <__aeabi_f2d>
 800ea50:	4602      	mov	r2, r0
 800ea52:	460b      	mov	r3, r1
 800ea54:	493b      	ldr	r1, [pc, #236]	; (800eb44 <mecanum_position_measure+0x5b4>)
 800ea56:	e9c1 2300 	strd	r2, r3, [r1]
  v_w = rpm_ratio * (-wheel_fdb[0].speed_rpm / rotate_ratio_fr - wheel_fdb[1].speed_rpm / rotate_ratio_fl - wheel_fdb[2].speed_rpm / rotate_ratio_bl - wheel_fdb[3].speed_rpm / rotate_ratio_br);
 800ea5a:	683b      	ldr	r3, [r7, #0]
 800ea5c:	edd3 7a01 	vldr	s15, [r3, #4]
 800ea60:	eef1 6a67 	vneg.f32	s13, s15
 800ea64:	4b38      	ldr	r3, [pc, #224]	; (800eb48 <mecanum_position_measure+0x5b8>)
 800ea66:	edd3 7a00 	vldr	s15, [r3]
 800ea6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ea6e:	683b      	ldr	r3, [r7, #0]
 800ea70:	3308      	adds	r3, #8
 800ea72:	ed93 6a01 	vldr	s12, [r3, #4]
 800ea76:	4b35      	ldr	r3, [pc, #212]	; (800eb4c <mecanum_position_measure+0x5bc>)
 800ea78:	edd3 6a00 	vldr	s13, [r3]
 800ea7c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800ea80:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ea84:	683b      	ldr	r3, [r7, #0]
 800ea86:	3310      	adds	r3, #16
 800ea88:	ed93 6a01 	vldr	s12, [r3, #4]
 800ea8c:	4b30      	ldr	r3, [pc, #192]	; (800eb50 <mecanum_position_measure+0x5c0>)
 800ea8e:	edd3 6a00 	vldr	s13, [r3]
 800ea92:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800ea96:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ea9a:	683b      	ldr	r3, [r7, #0]
 800ea9c:	3318      	adds	r3, #24
 800ea9e:	ed93 6a01 	vldr	s12, [r3, #4]
 800eaa2:	4b2c      	ldr	r3, [pc, #176]	; (800eb54 <mecanum_position_measure+0x5c4>)
 800eaa4:	edd3 6a00 	vldr	s13, [r3]
 800eaa8:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800eaac:	ee37 7a67 	vsub.f32	s14, s14, s15
 800eab0:	4b22      	ldr	r3, [pc, #136]	; (800eb3c <mecanum_position_measure+0x5ac>)
 800eab2:	edd3 7a00 	vldr	s15, [r3]
 800eab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eaba:	ee17 0a90 	vmov	r0, s15
 800eabe:	f7f1 fd03 	bl	80004c8 <__aeabi_f2d>
 800eac2:	4602      	mov	r2, r0
 800eac4:	460b      	mov	r3, r1
 800eac6:	4924      	ldr	r1, [pc, #144]	; (800eb58 <mecanum_position_measure+0x5c8>)
 800eac8:	e9c1 2300 	strd	r2, r3, [r1]

  mec->position.v_x_mm = v_x;                 //mm/s
 800eacc:	4b1c      	ldr	r3, [pc, #112]	; (800eb40 <mecanum_position_measure+0x5b0>)
 800eace:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ead2:	4610      	mov	r0, r2
 800ead4:	4619      	mov	r1, r3
 800ead6:	f7f2 f811 	bl	8000afc <__aeabi_d2f>
 800eada:	4602      	mov	r2, r0
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	621a      	str	r2, [r3, #32]
  mec->position.v_y_mm = v_y;                 //mm/s
 800eae0:	4b18      	ldr	r3, [pc, #96]	; (800eb44 <mecanum_position_measure+0x5b4>)
 800eae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eae6:	4610      	mov	r0, r2
 800eae8:	4619      	mov	r1, r3
 800eaea:	f7f2 f807 	bl	8000afc <__aeabi_d2f>
 800eaee:	4602      	mov	r2, r0
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	625a      	str	r2, [r3, #36]	; 0x24
  mec->position.rate_deg = v_w * RADIAN_COEF; //degree/s
 800eaf4:	4b18      	ldr	r3, [pc, #96]	; (800eb58 <mecanum_position_measure+0x5c8>)
 800eaf6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800eafa:	a309      	add	r3, pc, #36	; (adr r3, 800eb20 <mecanum_position_measure+0x590>)
 800eafc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb00:	f7f1 fd3a 	bl	8000578 <__aeabi_dmul>
 800eb04:	4602      	mov	r2, r0
 800eb06:	460b      	mov	r3, r1
 800eb08:	4610      	mov	r0, r2
 800eb0a:	4619      	mov	r1, r3
 800eb0c:	f7f1 fff6 	bl	8000afc <__aeabi_d2f>
 800eb10:	4602      	mov	r2, r0
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	629a      	str	r2, [r3, #40]	; 0x28
}
 800eb16:	bf00      	nop
 800eb18:	3708      	adds	r7, #8
 800eb1a:	46bd      	mov	sp, r7
 800eb1c:	bdb0      	pop	{r4, r5, r7, pc}
 800eb1e:	bf00      	nop
 800eb20:	60000000 	.word	0x60000000
 800eb24:	404ca666 	.word	0x404ca666
 800eb28:	20005ef0 	.word	0x20005ef0
 800eb2c:	20005f10 	.word	0x20005f10
 800eb30:	20005f18 	.word	0x20005f18
 800eb34:	20005ef8 	.word	0x20005ef8
 800eb38:	20005f08 	.word	0x20005f08
 800eb3c:	20005eb0 	.word	0x20005eb0
 800eb40:	20005f20 	.word	0x20005f20
 800eb44:	20005f28 	.word	0x20005f28
 800eb48:	20005ea0 	.word	0x20005ea0
 800eb4c:	20005ea4 	.word	0x20005ea4
 800eb50:	20005ea8 	.word	0x20005ea8
 800eb54:	20005eac 	.word	0x20005eac
 800eb58:	20005f30 	.word	0x20005f30

0800eb5c <abs_limit>:

#include "sys.h"
#include "pid.h"

void abs_limit(float *a, float ABS_MAX)
{
 800eb5c:	b480      	push	{r7}
 800eb5e:	b083      	sub	sp, #12
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	6078      	str	r0, [r7, #4]
 800eb64:	ed87 0a00 	vstr	s0, [r7]
  if (*a > ABS_MAX)
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	edd3 7a00 	vldr	s15, [r3]
 800eb6e:	ed97 7a00 	vldr	s14, [r7]
 800eb72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800eb76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb7a:	d502      	bpl.n	800eb82 <abs_limit+0x26>
    *a = ABS_MAX;
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	683a      	ldr	r2, [r7, #0]
 800eb80:	601a      	str	r2, [r3, #0]
  if (*a < -ABS_MAX)
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	ed93 7a00 	vldr	s14, [r3]
 800eb88:	edd7 7a00 	vldr	s15, [r7]
 800eb8c:	eef1 7a67 	vneg.f32	s15, s15
 800eb90:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800eb94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb98:	d400      	bmi.n	800eb9c <abs_limit+0x40>
    *a = -ABS_MAX;
}
 800eb9a:	e006      	b.n	800ebaa <abs_limit+0x4e>
    *a = -ABS_MAX;
 800eb9c:	edd7 7a00 	vldr	s15, [r7]
 800eba0:	eef1 7a67 	vneg.f32	s15, s15
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	edc3 7a00 	vstr	s15, [r3]
}
 800ebaa:	bf00      	nop
 800ebac:	370c      	adds	r7, #12
 800ebae:	46bd      	mov	sp, r7
 800ebb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb4:	4770      	bx	lr

0800ebb6 <pid_param_init>:
    float maxout,
    float inte_limit,
    float kp,
    float ki,
    float kd)
{
 800ebb6:	b480      	push	{r7}
 800ebb8:	b087      	sub	sp, #28
 800ebba:	af00      	add	r7, sp, #0
 800ebbc:	6178      	str	r0, [r7, #20]
 800ebbe:	ed87 0a04 	vstr	s0, [r7, #16]
 800ebc2:	edc7 0a03 	vstr	s1, [r7, #12]
 800ebc6:	ed87 1a02 	vstr	s2, [r7, #8]
 800ebca:	edc7 1a01 	vstr	s3, [r7, #4]
 800ebce:	ed87 2a00 	vstr	s4, [r7]

  pid->param.inte_limit = inte_limit;
 800ebd2:	697b      	ldr	r3, [r7, #20]
 800ebd4:	68fa      	ldr	r2, [r7, #12]
 800ebd6:	615a      	str	r2, [r3, #20]
  pid->param.max_out = maxout;
 800ebd8:	697b      	ldr	r3, [r7, #20]
 800ebda:	693a      	ldr	r2, [r7, #16]
 800ebdc:	611a      	str	r2, [r3, #16]

  pid->param.p = kp;
 800ebde:	697b      	ldr	r3, [r7, #20]
 800ebe0:	68ba      	ldr	r2, [r7, #8]
 800ebe2:	601a      	str	r2, [r3, #0]
  pid->param.i = ki;
 800ebe4:	697b      	ldr	r3, [r7, #20]
 800ebe6:	687a      	ldr	r2, [r7, #4]
 800ebe8:	605a      	str	r2, [r3, #4]
  pid->param.d = kd;
 800ebea:	697b      	ldr	r3, [r7, #20]
 800ebec:	683a      	ldr	r2, [r7, #0]
 800ebee:	609a      	str	r2, [r3, #8]
}
 800ebf0:	bf00      	nop
 800ebf2:	371c      	adds	r7, #28
 800ebf4:	46bd      	mov	sp, r7
 800ebf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebfa:	4770      	bx	lr

0800ebfc <pid_reset>:
  * @param[in] pid: control pid struct
  * @param[in] p/i/d: pid parameter
  * @retval    none
  */
static void pid_reset(struct pid *pid, float kp, float ki, float kd)
{
 800ebfc:	b480      	push	{r7}
 800ebfe:	b085      	sub	sp, #20
 800ec00:	af00      	add	r7, sp, #0
 800ec02:	60f8      	str	r0, [r7, #12]
 800ec04:	ed87 0a02 	vstr	s0, [r7, #8]
 800ec08:	edc7 0a01 	vstr	s1, [r7, #4]
 800ec0c:	ed87 1a00 	vstr	s2, [r7]
  pid->param.p = kp;
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	68ba      	ldr	r2, [r7, #8]
 800ec14:	601a      	str	r2, [r3, #0]
  pid->param.i = ki;
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	687a      	ldr	r2, [r7, #4]
 800ec1a:	605a      	str	r2, [r3, #4]
  pid->param.d = kd;
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	683a      	ldr	r2, [r7, #0]
 800ec20:	609a      	str	r2, [r3, #8]

  pid->pout = 0;
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	f04f 0200 	mov.w	r2, #0
 800ec28:	629a      	str	r2, [r3, #40]	; 0x28
  pid->iout = 0;
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	f04f 0200 	mov.w	r2, #0
 800ec30:	62da      	str	r2, [r3, #44]	; 0x2c
  pid->dout = 0;
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	f04f 0200 	mov.w	r2, #0
 800ec38:	631a      	str	r2, [r3, #48]	; 0x30
  pid->out = 0;
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	f04f 0200 	mov.w	r2, #0
 800ec40:	635a      	str	r2, [r3, #52]	; 0x34
}
 800ec42:	bf00      	nop
 800ec44:	3714      	adds	r7, #20
 800ec46:	46bd      	mov	sp, r7
 800ec48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec4c:	4770      	bx	lr

0800ec4e <pid_calculate>:
  * @param[in] get: measure feedback value
  * @param[in] set: target value
  * @retval    pid calculate output 
  */
float pid_calculate(struct pid *pid, float get, float set)
{
 800ec4e:	b580      	push	{r7, lr}
 800ec50:	b084      	sub	sp, #16
 800ec52:	af00      	add	r7, sp, #0
 800ec54:	60f8      	str	r0, [r7, #12]
 800ec56:	ed87 0a02 	vstr	s0, [r7, #8]
 800ec5a:	edc7 0a01 	vstr	s1, [r7, #4]
  pid->get = get;
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	68ba      	ldr	r2, [r7, #8]
 800ec62:	61da      	str	r2, [r3, #28]
  pid->set = set;
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	687a      	ldr	r2, [r7, #4]
 800ec68:	619a      	str	r2, [r3, #24]
  pid->err = set - get;
 800ec6a:	ed97 7a01 	vldr	s14, [r7, #4]
 800ec6e:	edd7 7a02 	vldr	s15, [r7, #8]
 800ec72:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	edc3 7a08 	vstr	s15, [r3, #32]
  if ((pid->param.input_max_err != 0) && (fabs(pid->err) > pid->param.input_max_err))
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	edd3 7a03 	vldr	s15, [r3, #12]
 800ec82:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ec86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec8a:	d00f      	beq.n	800ecac <pid_calculate+0x5e>
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	edd3 7a08 	vldr	s15, [r3, #32]
 800ec92:	eeb0 7ae7 	vabs.f32	s14, s15
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	edd3 7a03 	vldr	s15, [r3, #12]
 800ec9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800eca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eca4:	dd02      	ble.n	800ecac <pid_calculate+0x5e>
    return 0;
 800eca6:	f04f 0300 	mov.w	r3, #0
 800ecaa:	e052      	b.n	800ed52 <pid_calculate+0x104>

  pid->pout = pid->param.p * pid->err;
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	ed93 7a00 	vldr	s14, [r3]
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	edd3 7a08 	vldr	s15, [r3, #32]
 800ecb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
  pid->iout += pid->param.i * pid->err;
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	edd3 6a01 	vldr	s13, [r3, #4]
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	edd3 7a08 	vldr	s15, [r3, #32]
 800ecd4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ecd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
  pid->dout = pid->param.d * (pid->err - pid->last_err);
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	ed93 7a02 	vldr	s14, [r3, #8]
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	edd3 6a08 	vldr	s13, [r3, #32]
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800ecf4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800ecf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

  abs_limit(&(pid->iout), pid->param.inte_limit);
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	edd3 7a05 	vldr	s15, [r3, #20]
 800ed0e:	eeb0 0a67 	vmov.f32	s0, s15
 800ed12:	4610      	mov	r0, r2
 800ed14:	f7ff ff22 	bl	800eb5c <abs_limit>
  pid->out = pid->pout + pid->iout + pid->dout;
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800ed24:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800ed2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
  abs_limit(&(pid->out), pid->param.max_out);
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	edd3 7a04 	vldr	s15, [r3, #16]
 800ed44:	eeb0 0a67 	vmov.f32	s0, s15
 800ed48:	4610      	mov	r0, r2
 800ed4a:	f7ff ff07 	bl	800eb5c <abs_limit>

  return pid->out;
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 800ed52:	ee07 3a90 	vmov	s15, r3
 800ed56:	eeb0 0a67 	vmov.f32	s0, s15
 800ed5a:	3710      	adds	r7, #16
 800ed5c:	46bd      	mov	sp, r7
 800ed5e:	bd80      	pop	{r7, pc}

0800ed60 <pid_struct_init>:
    float inte_limit,

    float kp,
    float ki,
    float kd)
{
 800ed60:	b580      	push	{r7, lr}
 800ed62:	b086      	sub	sp, #24
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	6178      	str	r0, [r7, #20]
 800ed68:	ed87 0a04 	vstr	s0, [r7, #16]
 800ed6c:	edc7 0a03 	vstr	s1, [r7, #12]
 800ed70:	ed87 1a02 	vstr	s2, [r7, #8]
 800ed74:	edc7 1a01 	vstr	s3, [r7, #4]
 800ed78:	ed87 2a00 	vstr	s4, [r7]
  pid->f_param_init = pid_param_init;
 800ed7c:	697b      	ldr	r3, [r7, #20]
 800ed7e:	4a10      	ldr	r2, [pc, #64]	; (800edc0 <pid_struct_init+0x60>)
 800ed80:	639a      	str	r2, [r3, #56]	; 0x38
  pid->f_pid_reset = pid_reset;
 800ed82:	697b      	ldr	r3, [r7, #20]
 800ed84:	4a0f      	ldr	r2, [pc, #60]	; (800edc4 <pid_struct_init+0x64>)
 800ed86:	63da      	str	r2, [r3, #60]	; 0x3c

  pid->f_param_init(pid, maxout, inte_limit, kp, ki, kd);
 800ed88:	697b      	ldr	r3, [r7, #20]
 800ed8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed8c:	ed97 2a00 	vldr	s4, [r7]
 800ed90:	edd7 1a01 	vldr	s3, [r7, #4]
 800ed94:	ed97 1a02 	vldr	s2, [r7, #8]
 800ed98:	edd7 0a03 	vldr	s1, [r7, #12]
 800ed9c:	ed97 0a04 	vldr	s0, [r7, #16]
 800eda0:	6978      	ldr	r0, [r7, #20]
 800eda2:	4798      	blx	r3
  pid->f_pid_reset(pid, kp, ki, kd);
 800eda4:	697b      	ldr	r3, [r7, #20]
 800eda6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eda8:	ed97 1a00 	vldr	s2, [r7]
 800edac:	edd7 0a01 	vldr	s1, [r7, #4]
 800edb0:	ed97 0a02 	vldr	s0, [r7, #8]
 800edb4:	6978      	ldr	r0, [r7, #20]
 800edb6:	4798      	blx	r3
}
 800edb8:	bf00      	nop
 800edba:	3718      	adds	r7, #24
 800edbc:	46bd      	mov	sp, r7
 800edbe:	bd80      	pop	{r7, pc}
 800edc0:	0800ebb7 	.word	0x0800ebb7
 800edc4:	0800ebfd 	.word	0x0800ebfd

0800edc8 <chassis_task>:

float follow_relative_angle;
struct pid pid_follow = {0}; //angle control

void chassis_task(void const *argument)
{
 800edc8:	b580      	push	{r7, lr}
 800edca:	b086      	sub	sp, #24
 800edcc:	af00      	add	r7, sp, #0
 800edce:	6078      	str	r0, [r7, #4]
  uint32_t period = osKernelSysTick();
 800edd0:	f7fc ff31 	bl	800bc36 <osKernelSysTick>
 800edd4:	4603      	mov	r3, r0
 800edd6:	60bb      	str	r3, [r7, #8]
  chassis_t pchassis = NULL;
 800edd8:	2300      	movs	r3, #0
 800edda:	617b      	str	r3, [r7, #20]
  rc_device_t prc_dev = NULL;
 800eddc:	2300      	movs	r3, #0
 800edde:	613b      	str	r3, [r7, #16]
  rc_info_t prc_info = NULL;
 800ede0:	2300      	movs	r3, #0
 800ede2:	60fb      	str	r3, [r7, #12]
  pchassis = chassis_find("chassis");
 800ede4:	4815      	ldr	r0, [pc, #84]	; (800ee3c <chassis_task+0x74>)
 800ede6:	f002 fd65 	bl	80118b4 <chassis_find>
 800edea:	6178      	str	r0, [r7, #20]
  prc_dev = rc_device_find("uart_rc");
 800edec:	4814      	ldr	r0, [pc, #80]	; (800ee40 <chassis_task+0x78>)
 800edee:	f001 fdad 	bl	801094c <rc_device_find>
 800edf2:	6138      	str	r0, [r7, #16]

  if (prc_dev != NULL)
 800edf4:	693b      	ldr	r3, [r7, #16]
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d003      	beq.n	800ee02 <chassis_task+0x3a>
  {
    prc_info = rc_device_get_info(prc_dev);
 800edfa:	6938      	ldr	r0, [r7, #16]
 800edfc:	f001 fd95 	bl	801092a <rc_device_get_info>
 800ee00:	60f8      	str	r0, [r7, #12]
  }
  else
  {
  }

  soft_timer_register(chassis_push_info, (void *)pchassis, 10);
 800ee02:	220a      	movs	r2, #10
 800ee04:	6979      	ldr	r1, [r7, #20]
 800ee06:	480f      	ldr	r0, [pc, #60]	; (800ee44 <chassis_task+0x7c>)
 800ee08:	f000 fc26 	bl	800f658 <soft_timer_register>

  pid_struct_init(&pid_follow, MAX_CHASSIS_VW_SPEED, 50, 8.0f, 0.0f, 2.0f);
 800ee0c:	eeb0 2a00 	vmov.f32	s4, #0	; 0x40000000  2.0
 800ee10:	eddf 1a0d 	vldr	s3, [pc, #52]	; 800ee48 <chassis_task+0x80>
 800ee14:	eeb2 1a00 	vmov.f32	s2, #32	; 0x41000000  8.0
 800ee18:	eddf 0a0c 	vldr	s1, [pc, #48]	; 800ee4c <chassis_task+0x84>
 800ee1c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800ee50 <chassis_task+0x88>
 800ee20:	480c      	ldr	r0, [pc, #48]	; (800ee54 <chassis_task+0x8c>)
 800ee22:	f7ff ff9d 	bl	800ed60 <pid_struct_init>
//      }
//
//      chassis_set_acc(pchassis, 0, 0, 0);
//    }

    chassis_execute(pchassis);
 800ee26:	6978      	ldr	r0, [r7, #20]
 800ee28:	f002 fb2a 	bl	8011480 <chassis_execute>
    osDelayUntil(&period, 2);
 800ee2c:	f107 0308 	add.w	r3, r7, #8
 800ee30:	2102      	movs	r1, #2
 800ee32:	4618      	mov	r0, r3
 800ee34:	f7fc ffd6 	bl	800bde4 <osDelayUntil>
    chassis_execute(pchassis);
 800ee38:	e7f5      	b.n	800ee26 <chassis_task+0x5e>
 800ee3a:	bf00      	nop
 800ee3c:	080159d0 	.word	0x080159d0
 800ee40:	080159d8 	.word	0x080159d8
 800ee44:	0800f1e1 	.word	0x0800f1e1
 800ee48:	00000000 	.word	0x00000000
 800ee4c:	42480000 	.word	0x42480000
 800ee50:	43960000 	.word	0x43960000
 800ee54:	20005f38 	.word	0x20005f38

0800ee58 <usb_rcv_callback>:
//  osSignalSet(communicate_task_t, RECV_PROTOCOL_SIGNAL);
//  return header->DLC;
//}

static int32_t usb_rcv_callback(uint8_t *buf, uint32_t len)
{
 800ee58:	b580      	push	{r7, lr}
 800ee5a:	b082      	sub	sp, #8
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	6078      	str	r0, [r7, #4]
 800ee60:	6039      	str	r1, [r7, #0]
  protocol_uart_rcv_data(PROTOCOL_USB_PORT, buf, len);
 800ee62:	683a      	ldr	r2, [r7, #0]
 800ee64:	6879      	ldr	r1, [r7, #4]
 800ee66:	2000      	movs	r0, #0
 800ee68:	f003 faa6 	bl	80123b8 <protocol_uart_rcv_data>
  osSignalSet(communicate_task_t, RECV_PROTOCOL_SIGNAL);
 800ee6c:	4b05      	ldr	r3, [pc, #20]	; (800ee84 <usb_rcv_callback+0x2c>)
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	2101      	movs	r1, #1
 800ee72:	4618      	mov	r0, r3
 800ee74:	f7fc ff2a 	bl	800bccc <osSignalSet>
  return len;
 800ee78:	683b      	ldr	r3, [r7, #0]
}
 800ee7a:	4618      	mov	r0, r3
 800ee7c:	3708      	adds	r7, #8
 800ee7e:	46bd      	mov	sp, r7
 800ee80:	bd80      	pop	{r7, pc}
 800ee82:	bf00      	nop
 800ee84:	2000640c 	.word	0x2000640c

0800ee88 <manifold2_heart_package>:
//  protocol_send(GIMBAL_ADDRESS, CMD_GIMBAL_ADJUST, 0, 0);
//  return 0;
//}

int32_t manifold2_heart_package(uint8_t *buff, uint16_t len)
{
 800ee88:	b480      	push	{r7}
 800ee8a:	b083      	sub	sp, #12
 800ee8c:	af00      	add	r7, sp, #0
 800ee8e:	6078      	str	r0, [r7, #4]
 800ee90:	460b      	mov	r3, r1
 800ee92:	807b      	strh	r3, [r7, #2]
  return 0;
 800ee94:	2300      	movs	r3, #0
}
 800ee96:	4618      	mov	r0, r3
 800ee98:	370c      	adds	r7, #12
 800ee9a:	46bd      	mov	sp, r7
 800ee9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eea0:	4770      	bx	lr
	...

0800eea4 <report_firmware_version>:

int32_t report_firmware_version(uint8_t *buff, uint16_t len)
{
 800eea4:	b480      	push	{r7}
 800eea6:	b083      	sub	sp, #12
 800eea8:	af00      	add	r7, sp, #0
 800eeaa:	6078      	str	r0, [r7, #4]
 800eeac:	460b      	mov	r3, r1
 800eeae:	807b      	strh	r3, [r7, #2]
  return FIRMWARE_VERSION;
 800eeb0:	4b03      	ldr	r3, [pc, #12]	; (800eec0 <report_firmware_version+0x1c>)
}
 800eeb2:	4618      	mov	r0, r3
 800eeb4:	370c      	adds	r7, #12
 800eeb6:	46bd      	mov	sp, r7
 800eeb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eebc:	4770      	bx	lr
 800eebe:	bf00      	nop
 800eec0:	01000106 	.word	0x01000106

0800eec4 <communicate_task>:

void communicate_task(void const *argument)
{
 800eec4:	b580      	push	{r7, lr}
 800eec6:	b088      	sub	sp, #32
 800eec8:	af02      	add	r7, sp, #8
 800eeca:	6078      	str	r0, [r7, #4]
//  uint8_t app;
//  app = get_sys_cfg();

//  if (app == CHASSIS_APP)
//  {
    protocol_local_init(CHASSIS_ADDRESS);
 800eecc:	2001      	movs	r0, #1
 800eece:	f002 ff59 	bl	8011d84 <protocol_local_init>
//    protocol_can_interface_register("gimbal_can2", 4096, 1, PROTOCOL_CAN_PORT2, GIMBAL_CAN_ID, CHASSIS_CAN_ID, can2_send_data);
    protocol_uart_interface_register("manifold2", 4096, 1, PROTOCOL_USB_PORT, usb_interface_send);
 800eed2:	4b1f      	ldr	r3, [pc, #124]	; (800ef50 <communicate_task+0x8c>)
 800eed4:	9300      	str	r3, [sp, #0]
 800eed6:	2300      	movs	r3, #0
 800eed8:	2201      	movs	r2, #1
 800eeda:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800eede:	481d      	ldr	r0, [pc, #116]	; (800ef54 <communicate_task+0x90>)
 800eee0:	f003 f9e6 	bl	80122b0 <protocol_uart_interface_register>
    protocol_set_route(GIMBAL_ADDRESS, "gimbal_can2");
 800eee4:	491c      	ldr	r1, [pc, #112]	; (800ef58 <communicate_task+0x94>)
 800eee6:	2002      	movs	r0, #2
 800eee8:	f003 faa4 	bl	8012434 <protocol_set_route>
    protocol_set_route(MANIFOLD2_ADDRESS, "manifold2");
 800eeec:	4919      	ldr	r1, [pc, #100]	; (800ef54 <communicate_task+0x90>)
 800eeee:	2000      	movs	r0, #0
 800eef0:	f003 faa0 	bl	8012434 <protocol_set_route>
//    protocol_set_route(CHASSIS_ADDRESS, "chassis_can2");
//    protocol_set_route(MANIFOLD2_ADDRESS, "chassis_can2");
//    protocol_rcv_cmd_register(CMD_RC_DATA_FORWORD, dr16_rx_data_by_can);
//  }

  protocol_rcv_cmd_register(CMD_MANIFOLD2_HEART, manifold2_heart_package);
 800eef4:	4919      	ldr	r1, [pc, #100]	; (800ef5c <communicate_task+0x98>)
 800eef6:	2001      	movs	r0, #1
 800eef8:	f002 ff08 	bl	8011d0c <protocol_rcv_cmd_register>
  protocol_rcv_cmd_register(CMD_REPORT_VERSION, report_firmware_version);
 800eefc:	4918      	ldr	r1, [pc, #96]	; (800ef60 <communicate_task+0x9c>)
 800eefe:	2002      	movs	r0, #2
 800ef00:	f002 ff04 	bl	8011d0c <protocol_rcv_cmd_register>

  usb_vcp_rx_callback_register(usb_rcv_callback);
 800ef04:	4817      	ldr	r0, [pc, #92]	; (800ef64 <communicate_task+0xa0>)
 800ef06:	f7fe fd31 	bl	800d96c <usb_vcp_rx_callback_register>
  soft_timer_register(usb_tx_flush, NULL, 1);
 800ef0a:	2201      	movs	r2, #1
 800ef0c:	2100      	movs	r1, #0
 800ef0e:	4816      	ldr	r0, [pc, #88]	; (800ef68 <communicate_task+0xa4>)
 800ef10:	f000 fba2 	bl	800f658 <soft_timer_register>
	protocol_send_list_add_callback_reg(protocol_send_success_callback);
 800ef14:	4815      	ldr	r0, [pc, #84]	; (800ef6c <communicate_task+0xa8>)
 800ef16:	f003 f8f7 	bl	8012108 <protocol_send_list_add_callback_reg>

  while (1)
  {
    osEvent event;

    event = osSignalWait(SEND_PROTOCOL_SIGNAL | RECV_PROTOCOL_SIGNAL | REFEREE_SIGNAL, osWaitForever);
 800ef1a:	f107 030c 	add.w	r3, r7, #12
 800ef1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ef22:	2107      	movs	r1, #7
 800ef24:	4618      	mov	r0, r3
 800ef26:	f7fc ff11 	bl	800bd4c <osSignalWait>

    if (event.status == osEventSignal)
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	2b08      	cmp	r3, #8
 800ef2e:	d1f4      	bne.n	800ef1a <communicate_task+0x56>
    {
      if (event.value.signals & SEND_PROTOCOL_SIGNAL)
 800ef30:	693b      	ldr	r3, [r7, #16]
 800ef32:	f003 0302 	and.w	r3, r3, #2
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d001      	beq.n	800ef3e <communicate_task+0x7a>
      {
        protocol_send_flush();
 800ef3a:	f003 f81b 	bl	8011f74 <protocol_send_flush>
      }

      if (event.value.signals & RECV_PROTOCOL_SIGNAL)
 800ef3e:	693b      	ldr	r3, [r7, #16]
 800ef40:	f003 0301 	and.w	r3, r3, #1
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d0e8      	beq.n	800ef1a <communicate_task+0x56>
      {
        protocol_unpack_flush();
 800ef48:	f003 f868 	bl	801201c <protocol_unpack_flush>
  {
 800ef4c:	e7e5      	b.n	800ef1a <communicate_task+0x56>
 800ef4e:	bf00      	nop
 800ef50:	0800ef71 	.word	0x0800ef71
 800ef54:	080159e0 	.word	0x080159e0
 800ef58:	080159ec 	.word	0x080159ec
 800ef5c:	0800ee89 	.word	0x0800ee89
 800ef60:	0800eea5 	.word	0x0800eea5
 800ef64:	0800ee59 	.word	0x0800ee59
 800ef68:	0800d8d1 	.word	0x0800d8d1
 800ef6c:	0800ef91 	.word	0x0800ef91

0800ef70 <usb_interface_send>:
    }
  }
}

static int32_t usb_interface_send(uint8_t *p_data, uint32_t len)
{
 800ef70:	b580      	push	{r7, lr}
 800ef72:	b082      	sub	sp, #8
 800ef74:	af00      	add	r7, sp, #0
 800ef76:	6078      	str	r0, [r7, #4]
 800ef78:	6039      	str	r1, [r7, #0]
  CDC_Transmit_FS(p_data, len);
 800ef7a:	683b      	ldr	r3, [r7, #0]
 800ef7c:	b29b      	uxth	r3, r3
 800ef7e:	4619      	mov	r1, r3
 800ef80:	6878      	ldr	r0, [r7, #4]
 800ef82:	f7fe fc8f 	bl	800d8a4 <CDC_Transmit_FS>
  return 0;
 800ef86:	2300      	movs	r3, #0
}
 800ef88:	4618      	mov	r0, r3
 800ef8a:	3708      	adds	r7, #8
 800ef8c:	46bd      	mov	sp, r7
 800ef8e:	bd80      	pop	{r7, pc}

0800ef90 <protocol_send_success_callback>:

static void protocol_send_success_callback(void)
{
 800ef90:	b580      	push	{r7, lr}
 800ef92:	af00      	add	r7, sp, #0
  osSignalSet(communicate_task_t, SEND_PROTOCOL_SIGNAL);
 800ef94:	4b03      	ldr	r3, [pc, #12]	; (800efa4 <protocol_send_success_callback+0x14>)
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	2102      	movs	r1, #2
 800ef9a:	4618      	mov	r0, r3
 800ef9c:	f7fc fe96 	bl	800bccc <osSignalSet>
}
 800efa0:	bf00      	nop
 800efa2:	bd80      	pop	{r7, pc}
 800efa4:	2000640c 	.word	0x2000640c

0800efa8 <infantry_cmd_task>:
//  gimbal_auto_adjust_start();
//  return 0;
//}

void infantry_cmd_task(void const *argument)
{
 800efa8:	b580      	push	{r7, lr}
 800efaa:	b088      	sub	sp, #32
 800efac:	af00      	add	r7, sp, #0
 800efae:	6078      	str	r0, [r7, #4]
//  app = get_sys_cfg();

//  rc_device_t prc_dev = NULL;
//  shoot_t pshoot = NULL;
//  gimbal_t pgimbal = NULL;
  chassis_t pchassis = NULL;
 800efb0:	2300      	movs	r3, #0
 800efb2:	61fb      	str	r3, [r7, #28]
//
//  pshoot = shoot_find("shoot");
//  pgimbal = gimbal_find("gimbal");
  pchassis = chassis_find("chassis");
 800efb4:	4866      	ldr	r0, [pc, #408]	; (800f150 <infantry_cmd_task+0x1a8>)
 800efb6:	f002 fc7d 	bl	80118b4 <chassis_find>
 800efba:	61f8      	str	r0, [r7, #28]
//  if (app == CHASSIS_APP)
//  {
//    prc_dev = rc_device_find("uart_rc");
//    protocol_rcv_cmd_register(CMD_STUDENT_DATA, student_data_transmit);
//    protocol_rcv_cmd_register(CMD_PUSH_GIMBAL_INFO, gimbal_info_rcv);
    protocol_rcv_cmd_register(CMD_SET_CHASSIS_SPEED, chassis_speed_ctrl);
 800efbc:	4965      	ldr	r1, [pc, #404]	; (800f154 <infantry_cmd_task+0x1ac>)
 800efbe:	f240 2003 	movw	r0, #515	; 0x203
 800efc2:	f002 fea3 	bl	8011d0c <protocol_rcv_cmd_register>
    protocol_rcv_cmd_register(CMD_SET_CHASSIS_SPD_ACC, chassis_spd_acc_ctrl);
 800efc6:	4964      	ldr	r1, [pc, #400]	; (800f158 <infantry_cmd_task+0x1b0>)
 800efc8:	f240 2005 	movw	r0, #517	; 0x205
 800efcc:	f002 fe9e 	bl	8011d0c <protocol_rcv_cmd_register>
//    else
//    {
//      event = osSignalWait(MANIFOLD2_CHASSIS_SIGNAL | MANIFOLD2_GIMBAL_SIGNAL |
//                               MANIFOLD2_SHOOT_SIGNAL | MANIFOLD2_FRICTION_SIGNAL | MANIFOLD2_CHASSIS_ACC_SIGNAL,
//                           500);
      event = osSignalWait(MANIFOLD2_CHASSIS_SIGNAL | MANIFOLD2_CHASSIS_ACC_SIGNAL, 500);
 800efd0:	f107 0308 	add.w	r3, r7, #8
 800efd4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800efd8:	2111      	movs	r1, #17
 800efda:	4618      	mov	r0, r3
 800efdc:	f7fc feb6 	bl	800bd4c <osSignalWait>

      if (event.status == osEventSignal)
 800efe0:	68bb      	ldr	r3, [r7, #8]
 800efe2:	2b08      	cmp	r3, #8
 800efe4:	d1f4      	bne.n	800efd0 <infantry_cmd_task+0x28>
      {
        if (event.value.signals & MANIFOLD2_CHASSIS_SIGNAL)
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	f003 0301 	and.w	r3, r3, #1
 800efec:	2b00      	cmp	r3, #0
 800efee:	d046      	beq.n	800f07e <infantry_cmd_task+0xd6>
        {
          struct cmd_chassis_speed *pspeed;
          pspeed = &manifold_cmd.chassis_speed;
 800eff0:	4b5a      	ldr	r3, [pc, #360]	; (800f15c <infantry_cmd_task+0x1b4>)
 800eff2:	61bb      	str	r3, [r7, #24]
          chassis_set_offset(pchassis, pspeed->rotate_x_offset, pspeed->rotate_x_offset);
 800eff4:	69bb      	ldr	r3, [r7, #24]
 800eff6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800effa:	b21b      	sxth	r3, r3
 800effc:	ee07 3a90 	vmov	s15, r3
 800f000:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f004:	69bb      	ldr	r3, [r7, #24]
 800f006:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800f00a:	b21b      	sxth	r3, r3
 800f00c:	ee07 3a10 	vmov	s14, r3
 800f010:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f014:	eef0 0a47 	vmov.f32	s1, s14
 800f018:	eeb0 0a67 	vmov.f32	s0, s15
 800f01c:	69f8      	ldr	r0, [r7, #28]
 800f01e:	f002 fb6b 	bl	80116f8 <chassis_set_offset>
          chassis_set_acc(pchassis, 0, 0, 0);
 800f022:	ed9f 1a4f 	vldr	s2, [pc, #316]	; 800f160 <infantry_cmd_task+0x1b8>
 800f026:	eddf 0a4e 	vldr	s1, [pc, #312]	; 800f160 <infantry_cmd_task+0x1b8>
 800f02a:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800f160 <infantry_cmd_task+0x1b8>
 800f02e:	69f8      	ldr	r0, [r7, #28]
 800f030:	f002 fb40 	bl	80116b4 <chassis_set_acc>
          chassis_set_speed(pchassis, pspeed->vx, pspeed->vy, pspeed->vw / 10.0f);
 800f034:	69bb      	ldr	r3, [r7, #24]
 800f036:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f03a:	b21b      	sxth	r3, r3
 800f03c:	ee07 3a90 	vmov	s15, r3
 800f040:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f044:	69bb      	ldr	r3, [r7, #24]
 800f046:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f04a:	b21b      	sxth	r3, r3
 800f04c:	ee07 3a90 	vmov	s15, r3
 800f050:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800f054:	69bb      	ldr	r3, [r7, #24]
 800f056:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800f05a:	b21b      	sxth	r3, r3
 800f05c:	ee07 3a90 	vmov	s15, r3
 800f060:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f064:	eef2 5a04 	vmov.f32	s11, #36	; 0x41200000  10.0
 800f068:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 800f06c:	eeb0 1a46 	vmov.f32	s2, s12
 800f070:	eef0 0a66 	vmov.f32	s1, s13
 800f074:	eeb0 0a47 	vmov.f32	s0, s14
 800f078:	69f8      	ldr	r0, [r7, #28]
 800f07a:	f002 fafb 	bl	8011674 <chassis_set_speed>
        }

        if (event.value.signals & MANIFOLD2_CHASSIS_ACC_SIGNAL)
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	f003 0310 	and.w	r3, r3, #16
 800f084:	2b00      	cmp	r3, #0
 800f086:	d0a3      	beq.n	800efd0 <infantry_cmd_task+0x28>
        {
          struct cmd_chassis_spd_acc *pacc;
          pacc = &manifold_cmd.chassis_spd_acc;
 800f088:	4b36      	ldr	r3, [pc, #216]	; (800f164 <infantry_cmd_task+0x1bc>)
 800f08a:	617b      	str	r3, [r7, #20]
          chassis_set_offset(pchassis, pacc->rotate_x_offset, pacc->rotate_x_offset);
 800f08c:	697b      	ldr	r3, [r7, #20]
 800f08e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800f092:	b21b      	sxth	r3, r3
 800f094:	ee07 3a90 	vmov	s15, r3
 800f098:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f09c:	697b      	ldr	r3, [r7, #20]
 800f09e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800f0a2:	b21b      	sxth	r3, r3
 800f0a4:	ee07 3a10 	vmov	s14, r3
 800f0a8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f0ac:	eef0 0a47 	vmov.f32	s1, s14
 800f0b0:	eeb0 0a67 	vmov.f32	s0, s15
 800f0b4:	69f8      	ldr	r0, [r7, #28]
 800f0b6:	f002 fb1f 	bl	80116f8 <chassis_set_offset>
          chassis_set_acc(pchassis, pacc->ax, pacc->ay, pacc->wz / 10.0f);
 800f0ba:	697b      	ldr	r3, [r7, #20]
 800f0bc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800f0c0:	b21b      	sxth	r3, r3
 800f0c2:	ee07 3a90 	vmov	s15, r3
 800f0c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f0ca:	697b      	ldr	r3, [r7, #20]
 800f0cc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800f0d0:	b21b      	sxth	r3, r3
 800f0d2:	ee07 3a90 	vmov	s15, r3
 800f0d6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800f0da:	697b      	ldr	r3, [r7, #20]
 800f0dc:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800f0e0:	b21b      	sxth	r3, r3
 800f0e2:	ee07 3a90 	vmov	s15, r3
 800f0e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f0ea:	eef2 5a04 	vmov.f32	s11, #36	; 0x41200000  10.0
 800f0ee:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 800f0f2:	eeb0 1a46 	vmov.f32	s2, s12
 800f0f6:	eef0 0a66 	vmov.f32	s1, s13
 800f0fa:	eeb0 0a47 	vmov.f32	s0, s14
 800f0fe:	69f8      	ldr	r0, [r7, #28]
 800f100:	f002 fad8 	bl	80116b4 <chassis_set_acc>
          chassis_set_speed(pchassis, pacc->vx, pacc->vy, pacc->vw / 10.0f);
 800f104:	697b      	ldr	r3, [r7, #20]
 800f106:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f10a:	b21b      	sxth	r3, r3
 800f10c:	ee07 3a90 	vmov	s15, r3
 800f110:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f114:	697b      	ldr	r3, [r7, #20]
 800f116:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f11a:	b21b      	sxth	r3, r3
 800f11c:	ee07 3a90 	vmov	s15, r3
 800f120:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800f124:	697b      	ldr	r3, [r7, #20]
 800f126:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800f12a:	b21b      	sxth	r3, r3
 800f12c:	ee07 3a90 	vmov	s15, r3
 800f130:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f134:	eef2 5a04 	vmov.f32	s11, #36	; 0x41200000  10.0
 800f138:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 800f13c:	eeb0 1a46 	vmov.f32	s2, s12
 800f140:	eef0 0a66 	vmov.f32	s1, s13
 800f144:	eeb0 0a47 	vmov.f32	s0, s14
 800f148:	69f8      	ldr	r0, [r7, #28]
 800f14a:	f002 fa93 	bl	8011674 <chassis_set_speed>
      event = osSignalWait(MANIFOLD2_CHASSIS_SIGNAL | MANIFOLD2_CHASSIS_ACC_SIGNAL, 500);
 800f14e:	e73f      	b.n	800efd0 <infantry_cmd_task+0x28>
 800f150:	080159f8 	.word	0x080159f8
 800f154:	0800f169 	.word	0x0800f169
 800f158:	0800f1a5 	.word	0x0800f1a5
 800f15c:	20005f91 	.word	0x20005f91
 800f160:	00000000 	.word	0x00000000
 800f164:	20005f9b 	.word	0x20005f9b

0800f168 <chassis_speed_ctrl>:
//  referee_protocol_tansmit(cmd_id, buff + 2, len - 2);
//  return 0;
//}

int32_t chassis_speed_ctrl(uint8_t *buff, uint16_t len)
{
 800f168:	b580      	push	{r7, lr}
 800f16a:	b082      	sub	sp, #8
 800f16c:	af00      	add	r7, sp, #0
 800f16e:	6078      	str	r0, [r7, #4]
 800f170:	460b      	mov	r3, r1
 800f172:	807b      	strh	r3, [r7, #2]
  if (len == sizeof(struct cmd_chassis_speed))
 800f174:	887b      	ldrh	r3, [r7, #2]
 800f176:	2b0a      	cmp	r3, #10
 800f178:	d10b      	bne.n	800f192 <chassis_speed_ctrl+0x2a>
  {
    memcpy(&manifold_cmd.chassis_speed, buff, len);
 800f17a:	887b      	ldrh	r3, [r7, #2]
 800f17c:	461a      	mov	r2, r3
 800f17e:	6879      	ldr	r1, [r7, #4]
 800f180:	4806      	ldr	r0, [pc, #24]	; (800f19c <chassis_speed_ctrl+0x34>)
 800f182:	f005 faef 	bl	8014764 <memcpy>
    osSignalSet(cmd_task_t, MANIFOLD2_CHASSIS_SIGNAL);
 800f186:	4b06      	ldr	r3, [pc, #24]	; (800f1a0 <chassis_speed_ctrl+0x38>)
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	2101      	movs	r1, #1
 800f18c:	4618      	mov	r0, r3
 800f18e:	f7fc fd9d 	bl	800bccc <osSignalSet>
  }
  return 0;
 800f192:	2300      	movs	r3, #0
}
 800f194:	4618      	mov	r0, r3
 800f196:	3708      	adds	r7, #8
 800f198:	46bd      	mov	sp, r7
 800f19a:	bd80      	pop	{r7, pc}
 800f19c:	20005f91 	.word	0x20005f91
 800f1a0:	20006410 	.word	0x20006410

0800f1a4 <chassis_spd_acc_ctrl>:

int32_t chassis_spd_acc_ctrl(uint8_t *buff, uint16_t len)
{
 800f1a4:	b580      	push	{r7, lr}
 800f1a6:	b082      	sub	sp, #8
 800f1a8:	af00      	add	r7, sp, #0
 800f1aa:	6078      	str	r0, [r7, #4]
 800f1ac:	460b      	mov	r3, r1
 800f1ae:	807b      	strh	r3, [r7, #2]
  if (len == sizeof(struct cmd_chassis_spd_acc))
 800f1b0:	887b      	ldrh	r3, [r7, #2]
 800f1b2:	2b10      	cmp	r3, #16
 800f1b4:	d10b      	bne.n	800f1ce <chassis_spd_acc_ctrl+0x2a>
  {
    memcpy(&manifold_cmd.chassis_spd_acc, buff, len);
 800f1b6:	887b      	ldrh	r3, [r7, #2]
 800f1b8:	461a      	mov	r2, r3
 800f1ba:	6879      	ldr	r1, [r7, #4]
 800f1bc:	4806      	ldr	r0, [pc, #24]	; (800f1d8 <chassis_spd_acc_ctrl+0x34>)
 800f1be:	f005 fad1 	bl	8014764 <memcpy>
    osSignalSet(cmd_task_t, MANIFOLD2_CHASSIS_ACC_SIGNAL);
 800f1c2:	4b06      	ldr	r3, [pc, #24]	; (800f1dc <chassis_spd_acc_ctrl+0x38>)
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	2110      	movs	r1, #16
 800f1c8:	4618      	mov	r0, r3
 800f1ca:	f7fc fd7f 	bl	800bccc <osSignalSet>
  }
  return 0;
 800f1ce:	2300      	movs	r3, #0
}
 800f1d0:	4618      	mov	r0, r3
 800f1d2:	3708      	adds	r7, #8
 800f1d4:	46bd      	mov	sp, r7
 800f1d6:	bd80      	pop	{r7, pc}
 800f1d8:	20005f9b 	.word	0x20005f9b
 800f1dc:	20006410 	.word	0x20006410

0800f1e0 <chassis_push_info>:
//
//  return 0;
//}

int32_t chassis_push_info(void *argc)
{
 800f1e0:	b580      	push	{r7, lr}
 800f1e2:	b090      	sub	sp, #64	; 0x40
 800f1e4:	af00      	add	r7, sp, #0
 800f1e6:	6078      	str	r0, [r7, #4]
  struct chassis_info info;
  chassis_t pchassis = (chassis_t)argc;
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  chassis_get_info(pchassis, &info);
 800f1ec:	f107 030c 	add.w	r3, r7, #12
 800f1f0:	4619      	mov	r1, r3
 800f1f2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f1f4:	f002 fa9c 	bl	8011730 <chassis_get_info>

  cmd_chassis_info.angle_deg = info.angle_deg * 10;
 800f1f8:	edd7 7a08 	vldr	s15, [r7, #32]
 800f1fc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800f200:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f204:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f208:	ee17 3a90 	vmov	r3, s15
 800f20c:	b21a      	sxth	r2, r3
 800f20e:	4b25      	ldr	r3, [pc, #148]	; (800f2a4 <chassis_push_info+0xc4>)
 800f210:	819a      	strh	r2, [r3, #12]
  cmd_chassis_info.gyro_angle = info.yaw_gyro_angle * 10;
 800f212:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800f216:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800f21a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f21e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f222:	ee17 3a90 	vmov	r3, s15
 800f226:	b21a      	sxth	r2, r3
 800f228:	4b1e      	ldr	r3, [pc, #120]	; (800f2a4 <chassis_push_info+0xc4>)
 800f22a:	801a      	strh	r2, [r3, #0]
  cmd_chassis_info.gyro_palstance = info.yaw_gyro_rate * 10;
 800f22c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800f230:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800f234:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f238:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f23c:	ee17 3a90 	vmov	r3, s15
 800f240:	b21a      	sxth	r2, r3
 800f242:	4b18      	ldr	r3, [pc, #96]	; (800f2a4 <chassis_push_info+0xc4>)
 800f244:	805a      	strh	r2, [r3, #2]
  cmd_chassis_info.position_x_mm = info.position_x_mm;
 800f246:	edd7 7a06 	vldr	s15, [r7, #24]
 800f24a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f24e:	ee17 2a90 	vmov	r2, s15
 800f252:	4b14      	ldr	r3, [pc, #80]	; (800f2a4 <chassis_push_info+0xc4>)
 800f254:	605a      	str	r2, [r3, #4]
  cmd_chassis_info.position_y_mm = info.position_y_mm;
 800f256:	edd7 7a07 	vldr	s15, [r7, #28]
 800f25a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f25e:	ee17 2a90 	vmov	r2, s15
 800f262:	4b10      	ldr	r3, [pc, #64]	; (800f2a4 <chassis_push_info+0xc4>)
 800f264:	609a      	str	r2, [r3, #8]
  cmd_chassis_info.v_x_mm = info.v_x_mm;
 800f266:	edd7 7a03 	vldr	s15, [r7, #12]
 800f26a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f26e:	ee17 3a90 	vmov	r3, s15
 800f272:	b21a      	sxth	r2, r3
 800f274:	4b0b      	ldr	r3, [pc, #44]	; (800f2a4 <chassis_push_info+0xc4>)
 800f276:	81da      	strh	r2, [r3, #14]
  cmd_chassis_info.v_y_mm = info.v_y_mm;
 800f278:	edd7 7a04 	vldr	s15, [r7, #16]
 800f27c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f280:	ee17 3a90 	vmov	r3, s15
 800f284:	b21a      	sxth	r2, r3
 800f286:	4b07      	ldr	r3, [pc, #28]	; (800f2a4 <chassis_push_info+0xc4>)
 800f288:	821a      	strh	r2, [r3, #16]

  protocol_send(MANIFOLD2_ADDRESS, CMD_PUSH_CHASSIS_INFO, &cmd_chassis_info, sizeof(cmd_chassis_info));
 800f28a:	2312      	movs	r3, #18
 800f28c:	4a05      	ldr	r2, [pc, #20]	; (800f2a4 <chassis_push_info+0xc4>)
 800f28e:	f240 2101 	movw	r1, #513	; 0x201
 800f292:	2000      	movs	r0, #0
 800f294:	f002 fdea 	bl	8011e6c <protocol_send>

  return 0;
 800f298:	2300      	movs	r3, #0
}
 800f29a:	4618      	mov	r0, r3
 800f29c:	3740      	adds	r7, #64	; 0x40
 800f29e:	46bd      	mov	sp, r7
 800f2a0:	bd80      	pop	{r7, pc}
 800f2a2:	bf00      	nop
 800f2a4:	20005f78 	.word	0x20005f78

0800f2a8 <system_config>:
static uint8_t glb_sys_cfg;

extern int ulog_console_backend_init(void);

void system_config(void)
{
 800f2a8:	b580      	push	{r7, lr}
 800f2aa:	af00      	add	r7, sp, #0
  glb_sys_cfg = HAL_GPIO_ReadPin(SYS_CFG_GPIO_Port, SYS_CFG_Pin);
 800f2ac:	2140      	movs	r1, #64	; 0x40
 800f2ae:	4804      	ldr	r0, [pc, #16]	; (800f2c0 <system_config+0x18>)
 800f2b0:	f7f4 fd0c 	bl	8003ccc <HAL_GPIO_ReadPin>
 800f2b4:	4603      	mov	r3, r0
 800f2b6:	461a      	mov	r2, r3
 800f2b8:	4b02      	ldr	r3, [pc, #8]	; (800f2c4 <system_config+0x1c>)
 800f2ba:	701a      	strb	r2, [r3, #0]
}
 800f2bc:	bf00      	nop
 800f2be:	bd80      	pop	{r7, pc}
 800f2c0:	40020c00 	.word	0x40020c00
 800f2c4:	20006400 	.word	0x20006400

0800f2c8 <get_sys_cfg>:

uint8_t get_sys_cfg(void)
{
 800f2c8:	b480      	push	{r7}
 800f2ca:	af00      	add	r7, sp, #0
  return glb_sys_cfg;
 800f2cc:	4b03      	ldr	r3, [pc, #12]	; (800f2dc <get_sys_cfg+0x14>)
 800f2ce:	781b      	ldrb	r3, [r3, #0]
}
 800f2d0:	4618      	mov	r0, r3
 800f2d2:	46bd      	mov	sp, r7
 800f2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d8:	4770      	bx	lr
 800f2da:	bf00      	nop
 800f2dc:	20006400 	.word	0x20006400

0800f2e0 <hw_init>:

void hw_init(void)
{
 800f2e0:	b580      	push	{r7, lr}
 800f2e2:	af00      	add	r7, sp, #0
//  cali_param_init();
  board_config();
 800f2e4:	f000 fa6e 	bl	800f7c4 <board_config>
  test_init();
 800f2e8:	f005 f86c 	bl	80143c4 <test_init>
  system_config();
 800f2ec:	f7ff ffdc 	bl	800f2a8 <system_config>

//  if(glb_sys_cfg == CHASSIS_APP)
//  {
//    rc_device_register(&rc_dev, "uart_rc", 0);
//    dr16_forword_callback_register(rc_data_forword_by_can);
    chassis_pid_register(&chassis, "chassis", DEVICE_CAN1);
 800f2f0:	2200      	movs	r2, #0
 800f2f2:	4905      	ldr	r1, [pc, #20]	; (800f308 <hw_init+0x28>)
 800f2f4:	4805      	ldr	r0, [pc, #20]	; (800f30c <hw_init+0x2c>)
 800f2f6:	f001 ff45 	bl	8011184 <chassis_pid_register>
    chassis_disable(&chassis);
 800f2fa:	4804      	ldr	r0, [pc, #16]	; (800f30c <hw_init+0x2c>)
 800f2fc:	f002 fb0c 	bl	8011918 <chassis_disable>
//    gimbal_yaw_disable(&gimbal);
//    gimbal_pitch_disable(&gimbal);
//    shoot_disable(&shoot);
//  }

  offline_init();
 800f300:	f000 f864 	bl	800f3cc <offline_init>
}
 800f304:	bf00      	nop
 800f306:	bd80      	pop	{r7, pc}
 800f308:	08015a00 	.word	0x08015a00
 800f30c:	20005fb8 	.word	0x20005fb8

0800f310 <task_init>:
osThreadId communicate_task_t;
osThreadId cmd_task_t;
osThreadId shoot_task_t;

void task_init(void)
{
 800f310:	b5b0      	push	{r4, r5, r7, lr}
 800f312:	b096      	sub	sp, #88	; 0x58
 800f314:	af00      	add	r7, sp, #0
  uint8_t app;
  app = get_sys_cfg();
 800f316:	f7ff ffd7 	bl	800f2c8 <get_sys_cfg>
 800f31a:	4603      	mov	r3, r0
 800f31c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

  osThreadDef(TIMER_1MS, timer_task, osPriorityHigh, 0, 512);
 800f320:	4b22      	ldr	r3, [pc, #136]	; (800f3ac <task_init+0x9c>)
 800f322:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800f326:	461d      	mov	r5, r3
 800f328:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f32a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f32c:	682b      	ldr	r3, [r5, #0]
 800f32e:	6023      	str	r3, [r4, #0]
  timer_task_t = osThreadCreate(osThread(TIMER_1MS), NULL);
 800f330:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f334:	2100      	movs	r1, #0
 800f336:	4618      	mov	r0, r3
 800f338:	f7fc fc8d 	bl	800bc56 <osThreadCreate>
 800f33c:	4603      	mov	r3, r0
 800f33e:	4a1c      	ldr	r2, [pc, #112]	; (800f3b0 <task_init+0xa0>)
 800f340:	6013      	str	r3, [r2, #0]

  osThreadDef(COMMUNICATE_TASK, communicate_task, osPriorityHigh, 0, 4096);
 800f342:	4b1c      	ldr	r3, [pc, #112]	; (800f3b4 <task_init+0xa4>)
 800f344:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 800f348:	461d      	mov	r5, r3
 800f34a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f34c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f34e:	682b      	ldr	r3, [r5, #0]
 800f350:	6023      	str	r3, [r4, #0]
  communicate_task_t = osThreadCreate(osThread(COMMUNICATE_TASK), NULL);
 800f352:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f356:	2100      	movs	r1, #0
 800f358:	4618      	mov	r0, r3
 800f35a:	f7fc fc7c 	bl	800bc56 <osThreadCreate>
 800f35e:	4603      	mov	r3, r0
 800f360:	4a15      	ldr	r2, [pc, #84]	; (800f3b8 <task_init+0xa8>)
 800f362:	6013      	str	r3, [r2, #0]

  osThreadDef(CMD_TASK, infantry_cmd_task, osPriorityNormal, 0, 4096);
 800f364:	4b15      	ldr	r3, [pc, #84]	; (800f3bc <task_init+0xac>)
 800f366:	f107 0418 	add.w	r4, r7, #24
 800f36a:	461d      	mov	r5, r3
 800f36c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f36e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f370:	682b      	ldr	r3, [r5, #0]
 800f372:	6023      	str	r3, [r4, #0]
  cmd_task_t = osThreadCreate(osThread(CMD_TASK), NULL);
 800f374:	f107 0318 	add.w	r3, r7, #24
 800f378:	2100      	movs	r1, #0
 800f37a:	4618      	mov	r0, r3
 800f37c:	f7fc fc6b 	bl	800bc56 <osThreadCreate>
 800f380:	4603      	mov	r3, r0
 800f382:	4a0f      	ldr	r2, [pc, #60]	; (800f3c0 <task_init+0xb0>)
 800f384:	6013      	str	r3, [r2, #0]
//
//  if (app == CHASSIS_APP)
//  {
    osThreadDef(CHASSIS_TASK, chassis_task, osPriorityRealtime, 0, 512);
 800f386:	4b0f      	ldr	r3, [pc, #60]	; (800f3c4 <task_init+0xb4>)
 800f388:	1d3c      	adds	r4, r7, #4
 800f38a:	461d      	mov	r5, r3
 800f38c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f38e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f390:	682b      	ldr	r3, [r5, #0]
 800f392:	6023      	str	r3, [r4, #0]
    chassis_task_t = osThreadCreate(osThread(CHASSIS_TASK), NULL);
 800f394:	1d3b      	adds	r3, r7, #4
 800f396:	2100      	movs	r1, #0
 800f398:	4618      	mov	r0, r3
 800f39a:	f7fc fc5c 	bl	800bc56 <osThreadCreate>
 800f39e:	4603      	mov	r3, r0
 800f3a0:	4a09      	ldr	r2, [pc, #36]	; (800f3c8 <task_init+0xb8>)
 800f3a2:	6013      	str	r3, [r2, #0]
//    gimbal_task_t = osThreadCreate(osThread(GIMBAL_TASK), NULL);
//
//    osThreadDef(SHOOT_TASK, shoot_task, osPriorityNormal, 0, 512);
//    shoot_task_t = osThreadCreate(osThread(SHOOT_TASK), NULL);
//  }
}
 800f3a4:	bf00      	nop
 800f3a6:	3758      	adds	r7, #88	; 0x58
 800f3a8:	46bd      	mov	sp, r7
 800f3aa:	bdb0      	pop	{r4, r5, r7, pc}
 800f3ac:	08015a14 	.word	0x08015a14
 800f3b0:	20006404 	.word	0x20006404
 800f3b4:	08015a3c 	.word	0x08015a3c
 800f3b8:	2000640c 	.word	0x2000640c
 800f3bc:	08015a5c 	.word	0x08015a5c
 800f3c0:	20006410 	.word	0x20006410
 800f3c4:	08015a80 	.word	0x08015a80
 800f3c8:	20006408 	.word	0x20006408

0800f3cc <offline_init>:
//static gimbal_t pgimbal = NULL;
static chassis_t pchassis = NULL;
//static shoot_t pshoot = NULL;

void offline_init(void)
{
 800f3cc:	b580      	push	{r7, lr}
 800f3ce:	b084      	sub	sp, #16
 800f3d0:	af02      	add	r7, sp, #8
//  uint8_t app;
//  app = get_sys_cfg();

  for (int i = 0; i < BEEP_MAX_TIMES; i++)
 800f3d2:	2300      	movs	r3, #0
 800f3d4:	607b      	str	r3, [r7, #4]
 800f3d6:	e009      	b.n	800f3ec <offline_init+0x20>
  {
    offline_beep_times[i] = i;
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	b2d9      	uxtb	r1, r3
 800f3dc:	4a26      	ldr	r2, [pc, #152]	; (800f478 <offline_init+0xac>)
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	4413      	add	r3, r2
 800f3e2:	460a      	mov	r2, r1
 800f3e4:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < BEEP_MAX_TIMES; i++)
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	3301      	adds	r3, #1
 800f3ea:	607b      	str	r3, [r7, #4]
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	2b13      	cmp	r3, #19
 800f3f0:	ddf2      	ble.n	800f3d8 <offline_init+0xc>
  }

//  pshoot = shoot_find("shoot");
//  pgimbal = gimbal_find("gimbal");
  pchassis = chassis_find("chassis");
 800f3f2:	4822      	ldr	r0, [pc, #136]	; (800f47c <offline_init+0xb0>)
 800f3f4:	f002 fa5e 	bl	80118b4 <chassis_find>
 800f3f8:	4603      	mov	r3, r0
 800f3fa:	4a21      	ldr	r2, [pc, #132]	; (800f480 <offline_init+0xb4>)
 800f3fc:	6013      	str	r3, [r2, #0]

  detect_device_register(&offline_dev, "detect", 0, 0);
 800f3fe:	2300      	movs	r3, #0
 800f400:	2200      	movs	r2, #0
 800f402:	4920      	ldr	r1, [pc, #128]	; (800f484 <offline_init+0xb8>)
 800f404:	4820      	ldr	r0, [pc, #128]	; (800f488 <offline_init+0xbc>)
 800f406:	f001 fabc 	bl	8010982 <detect_device_register>

//  detect_device_add_event(&offline_dev, RC_OFFLINE_EVENT, 100, rc_offline_callback, NULL);
  detect_device_add_event(&offline_dev, GYRO_OFFLINE_EVENT, 100, offline_beep_set_times, &offline_beep_times[8]);
 800f40a:	4b20      	ldr	r3, [pc, #128]	; (800f48c <offline_init+0xc0>)
 800f40c:	9300      	str	r3, [sp, #0]
 800f40e:	4b20      	ldr	r3, [pc, #128]	; (800f490 <offline_init+0xc4>)
 800f410:	2264      	movs	r2, #100	; 0x64
 800f412:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f416:	481c      	ldr	r0, [pc, #112]	; (800f488 <offline_init+0xbc>)
 800f418:	f001 fb92 	bl	8010b40 <detect_device_add_event>

//  if (app == CHASSIS_APP)
//  {
    detect_device_add_event(&offline_dev, MOTOR1_OFFLINE_EVENT, 100, offline_beep_set_times, &offline_beep_times[1]);
 800f41c:	4b1d      	ldr	r3, [pc, #116]	; (800f494 <offline_init+0xc8>)
 800f41e:	9300      	str	r3, [sp, #0]
 800f420:	4b1b      	ldr	r3, [pc, #108]	; (800f490 <offline_init+0xc4>)
 800f422:	2264      	movs	r2, #100	; 0x64
 800f424:	2102      	movs	r1, #2
 800f426:	4818      	ldr	r0, [pc, #96]	; (800f488 <offline_init+0xbc>)
 800f428:	f001 fb8a 	bl	8010b40 <detect_device_add_event>
    detect_device_add_event(&offline_dev, MOTOR2_OFFLINE_EVENT, 100, offline_beep_set_times, &offline_beep_times[2]);
 800f42c:	4b1a      	ldr	r3, [pc, #104]	; (800f498 <offline_init+0xcc>)
 800f42e:	9300      	str	r3, [sp, #0]
 800f430:	4b17      	ldr	r3, [pc, #92]	; (800f490 <offline_init+0xc4>)
 800f432:	2264      	movs	r2, #100	; 0x64
 800f434:	2104      	movs	r1, #4
 800f436:	4814      	ldr	r0, [pc, #80]	; (800f488 <offline_init+0xbc>)
 800f438:	f001 fb82 	bl	8010b40 <detect_device_add_event>
    detect_device_add_event(&offline_dev, MOTOR3_OFFLINE_EVENT, 100, offline_beep_set_times, &offline_beep_times[3]);
 800f43c:	4b17      	ldr	r3, [pc, #92]	; (800f49c <offline_init+0xd0>)
 800f43e:	9300      	str	r3, [sp, #0]
 800f440:	4b13      	ldr	r3, [pc, #76]	; (800f490 <offline_init+0xc4>)
 800f442:	2264      	movs	r2, #100	; 0x64
 800f444:	2108      	movs	r1, #8
 800f446:	4810      	ldr	r0, [pc, #64]	; (800f488 <offline_init+0xbc>)
 800f448:	f001 fb7a 	bl	8010b40 <detect_device_add_event>
    detect_device_add_event(&offline_dev, MOTOR4_OFFLINE_EVENT, 100, offline_beep_set_times, &offline_beep_times[4]);
 800f44c:	4b14      	ldr	r3, [pc, #80]	; (800f4a0 <offline_init+0xd4>)
 800f44e:	9300      	str	r3, [sp, #0]
 800f450:	4b0f      	ldr	r3, [pc, #60]	; (800f490 <offline_init+0xc4>)
 800f452:	2264      	movs	r2, #100	; 0x64
 800f454:	2110      	movs	r1, #16
 800f456:	480c      	ldr	r0, [pc, #48]	; (800f488 <offline_init+0xbc>)
 800f458:	f001 fb72 	bl	8010b40 <detect_device_add_event>
//    detect_device_add_event(&offline_dev, YAW_OFFLINE_EVENT, 100, offline_beep_set_times, &offline_beep_times[5]);
//    detect_device_add_event(&offline_dev, PITCH_OFFLINE_EVENT, 100, offline_beep_set_times, &offline_beep_times[6]);
//    detect_device_add_event(&offline_dev, TURN_OFFLINE_EVENT, 100, offline_beep_set_times, &offline_beep_times[7]);
//  }

  soft_timer_register(offline_check, NULL, 20);
 800f45c:	2214      	movs	r2, #20
 800f45e:	2100      	movs	r1, #0
 800f460:	4810      	ldr	r0, [pc, #64]	; (800f4a4 <offline_init+0xd8>)
 800f462:	f000 f8f9 	bl	800f658 <soft_timer_register>
  can_fifo0_rx_callback_register(&can1_manage, can1_detect_update);
 800f466:	4910      	ldr	r1, [pc, #64]	; (800f4a8 <offline_init+0xdc>)
 800f468:	4810      	ldr	r0, [pc, #64]	; (800f4ac <offline_init+0xe0>)
 800f46a:	f000 fae5 	bl	800fa38 <can_fifo0_rx_callback_register>
//  can_fifo0_rx_callback_register(&can2_manage, can2_detect_update);
}
 800f46e:	bf00      	nop
 800f470:	3708      	adds	r7, #8
 800f472:	46bd      	mov	sp, r7
 800f474:	bd80      	pop	{r7, pc}
 800f476:	bf00      	nop
 800f478:	20006658 	.word	0x20006658
 800f47c:	08015a94 	.word	0x08015a94
 800f480:	2000666c 	.word	0x2000666c
 800f484:	08015a9c 	.word	0x08015a9c
 800f488:	20006414 	.word	0x20006414
 800f48c:	20006660 	.word	0x20006660
 800f490:	0800f505 	.word	0x0800f505
 800f494:	20006659 	.word	0x20006659
 800f498:	2000665a 	.word	0x2000665a
 800f49c:	2000665b 	.word	0x2000665b
 800f4a0:	2000665c 	.word	0x2000665c
 800f4a4:	0800f4b1 	.word	0x0800f4b1
 800f4a8:	0800f521 	.word	0x0800f521
 800f4ac:	200067a0 	.word	0x200067a0

0800f4b0 <offline_check>:

int32_t offline_check(void *argc)
{
 800f4b0:	b580      	push	{r7, lr}
 800f4b2:	b082      	sub	sp, #8
 800f4b4:	af00      	add	r7, sp, #0
 800f4b6:	6078      	str	r0, [r7, #4]
  detect_device_check(&offline_dev, 0xffffffff);
 800f4b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800f4bc:	480d      	ldr	r0, [pc, #52]	; (800f4f4 <offline_check+0x44>)
 800f4be:	f001 fac1 	bl	8010a44 <detect_device_check>
  if (detect_device_get_event(&offline_dev) == 0)
 800f4c2:	480c      	ldr	r0, [pc, #48]	; (800f4f4 <offline_check+0x44>)
 800f4c4:	f001 fb2b 	bl	8010b1e <detect_device_get_event>
 800f4c8:	4603      	mov	r3, r0
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d10d      	bne.n	800f4ea <offline_check+0x3a>
  {
    offline_beep_set_times(&offline_beep_times[0]);
 800f4ce:	480a      	ldr	r0, [pc, #40]	; (800f4f8 <offline_check+0x48>)
 800f4d0:	f000 f818 	bl	800f504 <offline_beep_set_times>

//    gimbal_yaw_enable(pgimbal);
//    gimbal_pitch_enable(pgimbal);
//    shoot_enable(pshoot);
    chassis_enable(pchassis);
 800f4d4:	4b09      	ldr	r3, [pc, #36]	; (800f4fc <offline_check+0x4c>)
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	4618      	mov	r0, r3
 800f4da:	f002 f9f9 	bl	80118d0 <chassis_enable>
		
		LED_RED_OFF();
 800f4de:	2201      	movs	r2, #1
 800f4e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800f4e4:	4806      	ldr	r0, [pc, #24]	; (800f500 <offline_check+0x50>)
 800f4e6:	f7f4 fc09 	bl	8003cfc <HAL_GPIO_WritePin>
//    gimbal_yaw_disable(pgimbal);
//    gimbal_pitch_disable(pgimbal);
//    shoot_disable(pshoot);
//    chassis_disable(pchassis);
//  }
  return 0;
 800f4ea:	2300      	movs	r3, #0
}
 800f4ec:	4618      	mov	r0, r3
 800f4ee:	3708      	adds	r7, #8
 800f4f0:	46bd      	mov	sp, r7
 800f4f2:	bd80      	pop	{r7, pc}
 800f4f4:	20006414 	.word	0x20006414
 800f4f8:	20006658 	.word	0x20006658
 800f4fc:	2000666c 	.word	0x2000666c
 800f500:	40021000 	.word	0x40021000

0800f504 <offline_beep_set_times>:
//  gimbal_init_state_reset();
//  return 0;
//}

int32_t offline_beep_set_times(void *argc)
{
 800f504:	b580      	push	{r7, lr}
 800f506:	b082      	sub	sp, #8
 800f508:	af00      	add	r7, sp, #0
 800f50a:	6078      	str	r0, [r7, #4]
  return beep_set_times(*(uint8_t *)argc);
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	781b      	ldrb	r3, [r3, #0]
 800f510:	4618      	mov	r0, r3
 800f512:	f000 ffaf 	bl	8010474 <beep_set_times>
 800f516:	4603      	mov	r3, r0
}
 800f518:	4618      	mov	r0, r3
 800f51a:	3708      	adds	r7, #8
 800f51c:	46bd      	mov	sp, r7
 800f51e:	bd80      	pop	{r7, pc}

0800f520 <can1_detect_update>:

int32_t can1_detect_update(CAN_RxHeaderTypeDef *header, uint8_t *rx_data)
{
 800f520:	b580      	push	{r7, lr}
 800f522:	b082      	sub	sp, #8
 800f524:	af00      	add	r7, sp, #0
 800f526:	6078      	str	r0, [r7, #4]
 800f528:	6039      	str	r1, [r7, #0]
  switch (header->StdId)
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 800f532:	2b06      	cmp	r3, #6
 800f534:	d833      	bhi.n	800f59e <can1_detect_update+0x7e>
 800f536:	a201      	add	r2, pc, #4	; (adr r2, 800f53c <can1_detect_update+0x1c>)
 800f538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f53c:	0800f559 	.word	0x0800f559
 800f540:	0800f563 	.word	0x0800f563
 800f544:	0800f56d 	.word	0x0800f56d
 800f548:	0800f577 	.word	0x0800f577
 800f54c:	0800f581 	.word	0x0800f581
 800f550:	0800f58b 	.word	0x0800f58b
 800f554:	0800f595 	.word	0x0800f595
  {
  case 0x201:
    detect_device_update(&offline_dev, MOTOR1_OFFLINE_EVENT);
 800f558:	2102      	movs	r1, #2
 800f55a:	4814      	ldr	r0, [pc, #80]	; (800f5ac <can1_detect_update+0x8c>)
 800f55c:	f001 fa3e 	bl	80109dc <detect_device_update>
    break;
 800f560:	e01e      	b.n	800f5a0 <can1_detect_update+0x80>
  case 0x202:
    detect_device_update(&offline_dev, MOTOR2_OFFLINE_EVENT);
 800f562:	2104      	movs	r1, #4
 800f564:	4811      	ldr	r0, [pc, #68]	; (800f5ac <can1_detect_update+0x8c>)
 800f566:	f001 fa39 	bl	80109dc <detect_device_update>
    break;
 800f56a:	e019      	b.n	800f5a0 <can1_detect_update+0x80>
  case 0x203:
    detect_device_update(&offline_dev, MOTOR3_OFFLINE_EVENT);
 800f56c:	2108      	movs	r1, #8
 800f56e:	480f      	ldr	r0, [pc, #60]	; (800f5ac <can1_detect_update+0x8c>)
 800f570:	f001 fa34 	bl	80109dc <detect_device_update>
    break;
 800f574:	e014      	b.n	800f5a0 <can1_detect_update+0x80>
  case 0x204:
    detect_device_update(&offline_dev, MOTOR4_OFFLINE_EVENT);
 800f576:	2110      	movs	r1, #16
 800f578:	480c      	ldr	r0, [pc, #48]	; (800f5ac <can1_detect_update+0x8c>)
 800f57a:	f001 fa2f 	bl	80109dc <detect_device_update>
    break;
 800f57e:	e00f      	b.n	800f5a0 <can1_detect_update+0x80>
  case 0x205:
    detect_device_update(&offline_dev, YAW_OFFLINE_EVENT);
 800f580:	2120      	movs	r1, #32
 800f582:	480a      	ldr	r0, [pc, #40]	; (800f5ac <can1_detect_update+0x8c>)
 800f584:	f001 fa2a 	bl	80109dc <detect_device_update>
    break;
 800f588:	e00a      	b.n	800f5a0 <can1_detect_update+0x80>
  case 0x206:
    detect_device_update(&offline_dev, PITCH_OFFLINE_EVENT);
 800f58a:	2140      	movs	r1, #64	; 0x40
 800f58c:	4807      	ldr	r0, [pc, #28]	; (800f5ac <can1_detect_update+0x8c>)
 800f58e:	f001 fa25 	bl	80109dc <detect_device_update>
    break;
 800f592:	e005      	b.n	800f5a0 <can1_detect_update+0x80>
  case 0x207:
    detect_device_update(&offline_dev, TURN_OFFLINE_EVENT);
 800f594:	2180      	movs	r1, #128	; 0x80
 800f596:	4805      	ldr	r0, [pc, #20]	; (800f5ac <can1_detect_update+0x8c>)
 800f598:	f001 fa20 	bl	80109dc <detect_device_update>
    break;
 800f59c:	e000      	b.n	800f5a0 <can1_detect_update+0x80>
  default:
    break;
 800f59e:	bf00      	nop
  }

  return header->DLC;
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	691b      	ldr	r3, [r3, #16]
}
 800f5a4:	4618      	mov	r0, r3
 800f5a6:	3708      	adds	r7, #8
 800f5a8:	46bd      	mov	sp, r7
 800f5aa:	bd80      	pop	{r7, pc}
 800f5ac:	20006414 	.word	0x20006414

0800f5b0 <timer_task>:
#include "timer_task.h"

struct soft_timer soft_timer[TIMER_ELEMENT_NUM_MAX - 1];

void timer_task(void const *argument)
{
 800f5b0:	b580      	push	{r7, lr}
 800f5b2:	b084      	sub	sp, #16
 800f5b4:	af00      	add	r7, sp, #0
 800f5b6:	6078      	str	r0, [r7, #4]
  uint32_t period = osKernelSysTick();
 800f5b8:	f7fc fb3d 	bl	800bc36 <osKernelSysTick>
 800f5bc:	4603      	mov	r3, r0
 800f5be:	60bb      	str	r3, [r7, #8]

  while (1)
  {
    TimerISR_Hook();
 800f5c0:	f004 ff2e 	bl	8014420 <TimerISR_Hook>

    for (int i = 0; i < TIMER_ELEMENT_NUM_MAX - 1; i++)
 800f5c4:	2300      	movs	r3, #0
 800f5c6:	60fb      	str	r3, [r7, #12]
 800f5c8:	e03a      	b.n	800f640 <timer_task+0x90>
    {
      if ((soft_timer[i].id != 0) && (soft_timer[i].soft_timer_callback != NULL))
 800f5ca:	4a22      	ldr	r2, [pc, #136]	; (800f654 <timer_task+0xa4>)
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	011b      	lsls	r3, r3, #4
 800f5d0:	4413      	add	r3, r2
 800f5d2:	781b      	ldrb	r3, [r3, #0]
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d030      	beq.n	800f63a <timer_task+0x8a>
 800f5d8:	4a1e      	ldr	r2, [pc, #120]	; (800f654 <timer_task+0xa4>)
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	011b      	lsls	r3, r3, #4
 800f5de:	4413      	add	r3, r2
 800f5e0:	330c      	adds	r3, #12
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d028      	beq.n	800f63a <timer_task+0x8a>
      {
        if (soft_timer_check(soft_timer[i].id) == SOFT_TIMER_TIMEOUT)
 800f5e8:	4a1a      	ldr	r2, [pc, #104]	; (800f654 <timer_task+0xa4>)
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	011b      	lsls	r3, r3, #4
 800f5ee:	4413      	add	r3, r2
 800f5f0:	781b      	ldrb	r3, [r3, #0]
 800f5f2:	b29b      	uxth	r3, r3
 800f5f4:	4618      	mov	r0, r3
 800f5f6:	f004 ffcf 	bl	8014598 <soft_timer_check>
 800f5fa:	4603      	mov	r3, r0
 800f5fc:	2b02      	cmp	r3, #2
 800f5fe:	d11c      	bne.n	800f63a <timer_task+0x8a>
        {
          soft_timer[i].soft_timer_callback(soft_timer[i].argc);
 800f600:	4a14      	ldr	r2, [pc, #80]	; (800f654 <timer_task+0xa4>)
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	011b      	lsls	r3, r3, #4
 800f606:	4413      	add	r3, r2
 800f608:	330c      	adds	r3, #12
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	4911      	ldr	r1, [pc, #68]	; (800f654 <timer_task+0xa4>)
 800f60e:	68fa      	ldr	r2, [r7, #12]
 800f610:	0112      	lsls	r2, r2, #4
 800f612:	440a      	add	r2, r1
 800f614:	3208      	adds	r2, #8
 800f616:	6812      	ldr	r2, [r2, #0]
 800f618:	4610      	mov	r0, r2
 800f61a:	4798      	blx	r3

          soft_timer_update(soft_timer[i].id, soft_timer[i].ticks);
 800f61c:	4a0d      	ldr	r2, [pc, #52]	; (800f654 <timer_task+0xa4>)
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	011b      	lsls	r3, r3, #4
 800f622:	4413      	add	r3, r2
 800f624:	781b      	ldrb	r3, [r3, #0]
 800f626:	4618      	mov	r0, r3
 800f628:	4a0a      	ldr	r2, [pc, #40]	; (800f654 <timer_task+0xa4>)
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	011b      	lsls	r3, r3, #4
 800f62e:	4413      	add	r3, r2
 800f630:	3304      	adds	r3, #4
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	4619      	mov	r1, r3
 800f636:	f004 ff7b 	bl	8014530 <soft_timer_update>
    for (int i = 0; i < TIMER_ELEMENT_NUM_MAX - 1; i++)
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	3301      	adds	r3, #1
 800f63e:	60fb      	str	r3, [r7, #12]
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	2b12      	cmp	r3, #18
 800f644:	ddc1      	ble.n	800f5ca <timer_task+0x1a>
        }
      }
    }

    osDelayUntil(&period, 1);
 800f646:	f107 0308 	add.w	r3, r7, #8
 800f64a:	2101      	movs	r1, #1
 800f64c:	4618      	mov	r0, r3
 800f64e:	f7fc fbc9 	bl	800bde4 <osDelayUntil>
    TimerISR_Hook();
 800f652:	e7b5      	b.n	800f5c0 <timer_task+0x10>
 800f654:	20006670 	.word	0x20006670

0800f658 <soft_timer_register>:
  }
}

int32_t soft_timer_register(int32_t (*soft_timer_callback)(void *argc), void *argc, uint32_t ticks)
{
 800f658:	b580      	push	{r7, lr}
 800f65a:	b086      	sub	sp, #24
 800f65c:	af00      	add	r7, sp, #0
 800f65e:	60f8      	str	r0, [r7, #12]
 800f660:	60b9      	str	r1, [r7, #8]
 800f662:	607a      	str	r2, [r7, #4]
  for (int i = 0; i < TIMER_ELEMENT_NUM_MAX - 1; i++)
 800f664:	2300      	movs	r3, #0
 800f666:	617b      	str	r3, [r7, #20]
 800f668:	e02b      	b.n	800f6c2 <soft_timer_register+0x6a>
  {
    if (soft_timer[i].id == 0)
 800f66a:	4a1a      	ldr	r2, [pc, #104]	; (800f6d4 <soft_timer_register+0x7c>)
 800f66c:	697b      	ldr	r3, [r7, #20]
 800f66e:	011b      	lsls	r3, r3, #4
 800f670:	4413      	add	r3, r2
 800f672:	781b      	ldrb	r3, [r3, #0]
 800f674:	2b00      	cmp	r3, #0
 800f676:	d121      	bne.n	800f6bc <soft_timer_register+0x64>
    {
      soft_timer[i].id = soft_timer_req(ticks);
 800f678:	6878      	ldr	r0, [r7, #4]
 800f67a:	f004 ff1f 	bl	80144bc <soft_timer_req>
 800f67e:	4603      	mov	r3, r0
 800f680:	b2d9      	uxtb	r1, r3
 800f682:	4a14      	ldr	r2, [pc, #80]	; (800f6d4 <soft_timer_register+0x7c>)
 800f684:	697b      	ldr	r3, [r7, #20]
 800f686:	011b      	lsls	r3, r3, #4
 800f688:	4413      	add	r3, r2
 800f68a:	460a      	mov	r2, r1
 800f68c:	701a      	strb	r2, [r3, #0]
      soft_timer[i].ticks = ticks;
 800f68e:	4a11      	ldr	r2, [pc, #68]	; (800f6d4 <soft_timer_register+0x7c>)
 800f690:	697b      	ldr	r3, [r7, #20]
 800f692:	011b      	lsls	r3, r3, #4
 800f694:	4413      	add	r3, r2
 800f696:	3304      	adds	r3, #4
 800f698:	687a      	ldr	r2, [r7, #4]
 800f69a:	601a      	str	r2, [r3, #0]
      soft_timer[i].argc = argc;
 800f69c:	4a0d      	ldr	r2, [pc, #52]	; (800f6d4 <soft_timer_register+0x7c>)
 800f69e:	697b      	ldr	r3, [r7, #20]
 800f6a0:	011b      	lsls	r3, r3, #4
 800f6a2:	4413      	add	r3, r2
 800f6a4:	3308      	adds	r3, #8
 800f6a6:	68ba      	ldr	r2, [r7, #8]
 800f6a8:	601a      	str	r2, [r3, #0]
      soft_timer[i].soft_timer_callback = soft_timer_callback;
 800f6aa:	4a0a      	ldr	r2, [pc, #40]	; (800f6d4 <soft_timer_register+0x7c>)
 800f6ac:	697b      	ldr	r3, [r7, #20]
 800f6ae:	011b      	lsls	r3, r3, #4
 800f6b0:	4413      	add	r3, r2
 800f6b2:	330c      	adds	r3, #12
 800f6b4:	68fa      	ldr	r2, [r7, #12]
 800f6b6:	601a      	str	r2, [r3, #0]
      return i;
 800f6b8:	697b      	ldr	r3, [r7, #20]
 800f6ba:	e007      	b.n	800f6cc <soft_timer_register+0x74>
  for (int i = 0; i < TIMER_ELEMENT_NUM_MAX - 1; i++)
 800f6bc:	697b      	ldr	r3, [r7, #20]
 800f6be:	3301      	adds	r3, #1
 800f6c0:	617b      	str	r3, [r7, #20]
 800f6c2:	697b      	ldr	r3, [r7, #20]
 800f6c4:	2b12      	cmp	r3, #18
 800f6c6:	ddd0      	ble.n	800f66a <soft_timer_register+0x12>
    }
  }
  return -1;
 800f6c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800f6cc:	4618      	mov	r0, r3
 800f6ce:	3718      	adds	r7, #24
 800f6d0:	46bd      	mov	sp, r7
 800f6d2:	bd80      	pop	{r7, pc}
 800f6d4:	20006670 	.word	0x20006670

0800f6d8 <can1_motor_msg_rec>:
#include "timer_task.h"
#include "gimbal_task.h"
#include "offline_check.h"

int32_t can1_motor_msg_rec(CAN_RxHeaderTypeDef *header, uint8_t *data)
{
 800f6d8:	b580      	push	{r7, lr}
 800f6da:	b082      	sub	sp, #8
 800f6dc:	af00      	add	r7, sp, #0
 800f6de:	6078      	str	r0, [r7, #4]
 800f6e0:	6039      	str	r1, [r7, #0]
  motor_device_data_update(DEVICE_CAN1, header->StdId, data);
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	b29b      	uxth	r3, r3
 800f6e8:	683a      	ldr	r2, [r7, #0]
 800f6ea:	4619      	mov	r1, r3
 800f6ec:	2000      	movs	r0, #0
 800f6ee:	f001 fc69 	bl	8010fc4 <motor_device_data_update>
  return 0;
 800f6f2:	2300      	movs	r3, #0
}
 800f6f4:	4618      	mov	r0, r3
 800f6f6:	3708      	adds	r7, #8
 800f6f8:	46bd      	mov	sp, r7
 800f6fa:	bd80      	pop	{r7, pc}

0800f6fc <motor_canstd_send>:
end:
  return err;
}

int32_t motor_canstd_send(enum device_can can, struct can_msg msg)
{
 800f6fc:	b084      	sub	sp, #16
 800f6fe:	b590      	push	{r4, r7, lr}
 800f700:	b083      	sub	sp, #12
 800f702:	af00      	add	r7, sp, #0
 800f704:	4604      	mov	r4, r0
 800f706:	f107 001c 	add.w	r0, r7, #28
 800f70a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800f70e:	4623      	mov	r3, r4
 800f710:	71fb      	strb	r3, [r7, #7]
  if (can == DEVICE_CAN1)
 800f712:	79fb      	ldrb	r3, [r7, #7]
 800f714:	2b00      	cmp	r3, #0
 800f716:	d10c      	bne.n	800f732 <motor_canstd_send+0x36>
    can_msg_bytes_send(&hcan1, msg.data, 8, msg.id);
 800f718:	69fb      	ldr	r3, [r7, #28]
 800f71a:	f3c3 031c 	ubfx	r3, r3, #0, #29
 800f71e:	b29a      	uxth	r2, r3
 800f720:	f107 031c 	add.w	r3, r7, #28
 800f724:	f103 0108 	add.w	r1, r3, #8
 800f728:	4613      	mov	r3, r2
 800f72a:	2208      	movs	r2, #8
 800f72c:	4805      	ldr	r0, [pc, #20]	; (800f744 <motor_canstd_send+0x48>)
 800f72e:	f000 f8d7 	bl	800f8e0 <can_msg_bytes_send>
  return 0;
 800f732:	2300      	movs	r3, #0
}
 800f734:	4618      	mov	r0, r3
 800f736:	370c      	adds	r7, #12
 800f738:	46bd      	mov	sp, r7
 800f73a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800f73e:	b004      	add	sp, #16
 800f740:	4770      	bx	lr
 800f742:	bf00      	nop
 800f744:	200001bc 	.word	0x200001bc

0800f748 <get_time_us>:
    }
  }
}

uint32_t get_time_us(void)
{
 800f748:	b480      	push	{r7}
 800f74a:	af00      	add	r7, sp, #0
  return TIM5->CNT;
 800f74c:	4b03      	ldr	r3, [pc, #12]	; (800f75c <get_time_us+0x14>)
 800f74e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 800f750:	4618      	mov	r0, r3
 800f752:	46bd      	mov	sp, r7
 800f754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f758:	4770      	bx	lr
 800f75a:	bf00      	nop
 800f75c:	40000c00 	.word	0x40000c00

0800f760 <get_time_ms>:

uint32_t get_time_ms(void)
{
 800f760:	b580      	push	{r7, lr}
 800f762:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800f764:	f7f2 fd5a 	bl	800221c <HAL_GetTick>
 800f768:	4603      	mov	r3, r0
}
 800f76a:	4618      	mov	r0, r3
 800f76c:	bd80      	pop	{r7, pc}
	...

0800f770 <get_time_ms_us>:

float get_time_ms_us(void)
{
 800f770:	b580      	push	{r7, lr}
 800f772:	ed2d 8b02 	vpush	{d8}
 800f776:	af00      	add	r7, sp, #0
  return get_time_ms() + get_time_us() / 1000.0f;
 800f778:	f7ff fff2 	bl	800f760 <get_time_ms>
 800f77c:	ee07 0a90 	vmov	s15, r0
 800f780:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800f784:	f7ff ffe0 	bl	800f748 <get_time_us>
 800f788:	ee07 0a90 	vmov	s15, r0
 800f78c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800f790:	eddf 6a05 	vldr	s13, [pc, #20]	; 800f7a8 <get_time_ms_us+0x38>
 800f794:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f798:	ee78 7a27 	vadd.f32	s15, s16, s15
}
 800f79c:	eeb0 0a67 	vmov.f32	s0, s15
 800f7a0:	46bd      	mov	sp, r7
 800f7a2:	ecbd 8b02 	vpop	{d8}
 800f7a6:	bd80      	pop	{r7, pc}
 800f7a8:	447a0000 	.word	0x447a0000

0800f7ac <motor_can1_output_1ms>:

int32_t motor_can1_output_1ms(void *argc)
{
 800f7ac:	b580      	push	{r7, lr}
 800f7ae:	b082      	sub	sp, #8
 800f7b0:	af00      	add	r7, sp, #0
 800f7b2:	6078      	str	r0, [r7, #4]
  motor_device_can_output(DEVICE_CAN1);
 800f7b4:	2000      	movs	r0, #0
 800f7b6:	f001 fb0f 	bl	8010dd8 <motor_device_can_output>
  return 0;
 800f7ba:	2300      	movs	r3, #0
}
 800f7bc:	4618      	mov	r0, r3
 800f7be:	3708      	adds	r7, #8
 800f7c0:	46bd      	mov	sp, r7
 800f7c2:	bd80      	pop	{r7, pc}

0800f7c4 <board_config>:

void board_config(void)
{
 800f7c4:	b580      	push	{r7, lr}
 800f7c6:	af00      	add	r7, sp, #0
  soft_timer_init();
 800f7c8:	f004 fe56 	bl	8014478 <soft_timer_init>

  usart6_manage_init();
 800f7cc:	f000 fec4 	bl	8010558 <usart6_manage_init>
//  usart3_manage_init();
  can_manage_init();
 800f7d0:	f000 f822 	bl	800f818 <can_manage_init>
  pwm_device_init();
 800f7d4:	f000 fe34 	bl	8010440 <pwm_device_init>
  mpu_device_init();
 800f7d8:	f000 fc12 	bl	8010000 <mpu_device_init>

//  dr16_uart_init();
//  dr16_rx_uart_callback_register(dr16_rx_data_by_uart);

  soft_timer_register(motor_can1_output_1ms, NULL, 1);
 800f7dc:	2201      	movs	r2, #1
 800f7de:	2100      	movs	r1, #0
 800f7e0:	4808      	ldr	r0, [pc, #32]	; (800f804 <board_config+0x40>)
 800f7e2:	f7ff ff39 	bl	800f658 <soft_timer_register>
//  soft_timer_register(beep_ctrl_times, NULL, 1);
  soft_timer_register(led_toggle_300ms, NULL, 1); 
 800f7e6:	2201      	movs	r2, #1
 800f7e8:	2100      	movs	r1, #0
 800f7ea:	4807      	ldr	r0, [pc, #28]	; (800f808 <board_config+0x44>)
 800f7ec:	f7ff ff34 	bl	800f658 <soft_timer_register>

  motor_device_can_send_register(motor_canstd_send);
 800f7f0:	4806      	ldr	r0, [pc, #24]	; (800f80c <board_config+0x48>)
 800f7f2:	f001 fa6d 	bl	8010cd0 <motor_device_can_send_register>
//  single_gyro_can_send_register(gyro_can_std_send);

  can_fifo0_rx_callback_register(&can1_manage, can1_motor_msg_rec);
 800f7f6:	4906      	ldr	r1, [pc, #24]	; (800f810 <board_config+0x4c>)
 800f7f8:	4806      	ldr	r0, [pc, #24]	; (800f814 <board_config+0x50>)
 800f7fa:	f000 f91d 	bl	800fa38 <can_fifo0_rx_callback_register>
//  can_fifo0_rx_callback_register(&can2_manage, can2_single_gyro_rec);
}
 800f7fe:	bf00      	nop
 800f800:	bd80      	pop	{r7, pc}
 800f802:	bf00      	nop
 800f804:	0800f7ad 	.word	0x0800f7ad
 800f808:	08010499 	.word	0x08010499
 800f80c:	0800f6fd 	.word	0x0800f6fd
 800f810:	0800f6d9 	.word	0x0800f6d9
 800f814:	200067a0 	.word	0x200067a0

0800f818 <can_manage_init>:

static uint8_t can1_tx_fifo_buff[CAN1_TX_FIFO_SIZE];
//static uint8_t can2_tx_fifo_buff[CAN2_TX_FIFO_SIZE];

void can_manage_init(void)
{
 800f818:	b580      	push	{r7, lr}
 800f81a:	b08c      	sub	sp, #48	; 0x30
 800f81c:	af00      	add	r7, sp, #0
  can1_manage.is_sending = 0;
 800f81e:	4b2c      	ldr	r3, [pc, #176]	; (800f8d0 <can_manage_init+0xb8>)
 800f820:	2200      	movs	r2, #0
 800f822:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  can1_manage.hcan = &hcan1;
 800f826:	4b2a      	ldr	r3, [pc, #168]	; (800f8d0 <can_manage_init+0xb8>)
 800f828:	4a2a      	ldr	r2, [pc, #168]	; (800f8d4 <can_manage_init+0xbc>)
 800f82a:	601a      	str	r2, [r3, #0]

  for (int i = 0; i < MAX_CAN_REGISTER_NUM; i++)
 800f82c:	2300      	movs	r3, #0
 800f82e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f830:	e008      	b.n	800f844 <can_manage_init+0x2c>
  {
    can1_manage.can_rec_callback[i] = NULL;
 800f832:	4a27      	ldr	r2, [pc, #156]	; (800f8d0 <can_manage_init+0xb8>)
 800f834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f836:	330a      	adds	r3, #10
 800f838:	2100      	movs	r1, #0
 800f83a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (int i = 0; i < MAX_CAN_REGISTER_NUM; i++)
 800f83e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f840:	3301      	adds	r3, #1
 800f842:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f846:	2b04      	cmp	r3, #4
 800f848:	ddf3      	ble.n	800f832 <can_manage_init+0x1a>
//    can2_manage.can_rec_callback[i] = NULL;
  }

  fifo_init(&(can1_manage.tx_fifo),
 800f84a:	2340      	movs	r3, #64	; 0x40
 800f84c:	2210      	movs	r2, #16
 800f84e:	4922      	ldr	r1, [pc, #136]	; (800f8d8 <can_manage_init+0xc0>)
 800f850:	4822      	ldr	r0, [pc, #136]	; (800f8dc <can_manage_init+0xc4>)
 800f852:	f004 f9c3 	bl	8013bdc <fifo_init>
            can1_tx_fifo_buff,
            sizeof(struct can_std_msg),
            CAN1_TX_FIFO_UNIT_NUM);

  CAN_FilterTypeDef can_filter_st;
  can_filter_st.FilterActivation = ENABLE;
 800f856:	2301      	movs	r3, #1
 800f858:	627b      	str	r3, [r7, #36]	; 0x24
  can_filter_st.FilterMode = CAN_FILTERMODE_IDMASK;
 800f85a:	2300      	movs	r3, #0
 800f85c:	61fb      	str	r3, [r7, #28]
  can_filter_st.FilterScale = CAN_FILTERSCALE_32BIT;
 800f85e:	2301      	movs	r3, #1
 800f860:	623b      	str	r3, [r7, #32]
  can_filter_st.FilterIdHigh = 0x0000;
 800f862:	2300      	movs	r3, #0
 800f864:	607b      	str	r3, [r7, #4]
  can_filter_st.FilterIdLow = 0x0000;
 800f866:	2300      	movs	r3, #0
 800f868:	60bb      	str	r3, [r7, #8]
  can_filter_st.FilterMaskIdHigh = 0x0000;
 800f86a:	2300      	movs	r3, #0
 800f86c:	60fb      	str	r3, [r7, #12]
  can_filter_st.FilterBank = 0;
 800f86e:	2300      	movs	r3, #0
 800f870:	61bb      	str	r3, [r7, #24]
  can_filter_st.FilterFIFOAssignment = CAN_RX_FIFO0;
 800f872:	2300      	movs	r3, #0
 800f874:	617b      	str	r3, [r7, #20]
  HAL_CAN_ConfigFilter(&hcan1, &can_filter_st);
 800f876:	1d3b      	adds	r3, r7, #4
 800f878:	4619      	mov	r1, r3
 800f87a:	4816      	ldr	r0, [pc, #88]	; (800f8d4 <can_manage_init+0xbc>)
 800f87c:	f7f2 fdfa 	bl	8002474 <HAL_CAN_ConfigFilter>
  HAL_CAN_Start(&hcan1);
 800f880:	4814      	ldr	r0, [pc, #80]	; (800f8d4 <can_manage_init+0xbc>)
 800f882:	f7f2 fed7 	bl	8002634 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800f886:	2102      	movs	r1, #2
 800f888:	4812      	ldr	r0, [pc, #72]	; (800f8d4 <can_manage_init+0xbc>)
 800f88a:	f7f3 f93e 	bl	8002b0a <HAL_CAN_ActivateNotification>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_TX_MAILBOX_EMPTY);
 800f88e:	2101      	movs	r1, #1
 800f890:	4810      	ldr	r0, [pc, #64]	; (800f8d4 <can_manage_init+0xbc>)
 800f892:	f7f3 f93a 	bl	8002b0a <HAL_CAN_ActivateNotification>

  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_ERROR);
 800f896:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800f89a:	480e      	ldr	r0, [pc, #56]	; (800f8d4 <can_manage_init+0xbc>)
 800f89c:	f7f3 f935 	bl	8002b0a <HAL_CAN_ActivateNotification>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_ERROR_WARNING);
 800f8a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f8a4:	480b      	ldr	r0, [pc, #44]	; (800f8d4 <can_manage_init+0xbc>)
 800f8a6:	f7f3 f930 	bl	8002b0a <HAL_CAN_ActivateNotification>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_BUSOFF);
 800f8aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800f8ae:	4809      	ldr	r0, [pc, #36]	; (800f8d4 <can_manage_init+0xbc>)
 800f8b0:	f7f3 f92b 	bl	8002b0a <HAL_CAN_ActivateNotification>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_ERROR_PASSIVE);
 800f8b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f8b8:	4806      	ldr	r0, [pc, #24]	; (800f8d4 <can_manage_init+0xbc>)
 800f8ba:	f7f3 f926 	bl	8002b0a <HAL_CAN_ActivateNotification>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_LAST_ERROR_CODE);
 800f8be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800f8c2:	4804      	ldr	r0, [pc, #16]	; (800f8d4 <can_manage_init+0xbc>)
 800f8c4:	f7f3 f921 	bl	8002b0a <HAL_CAN_ActivateNotification>

  return;
 800f8c8:	bf00      	nop
}
 800f8ca:	3730      	adds	r7, #48	; 0x30
 800f8cc:	46bd      	mov	sp, r7
 800f8ce:	bd80      	pop	{r7, pc}
 800f8d0:	200067a0 	.word	0x200067a0
 800f8d4:	200001bc 	.word	0x200001bc
 800f8d8:	200067dc 	.word	0x200067dc
 800f8dc:	200067a4 	.word	0x200067a4

0800f8e0 <can_msg_bytes_send>:

uint32_t can_msg_bytes_send(CAN_HandleTypeDef *hcan,
                            uint8_t *data, uint16_t len, uint16_t std_id)
{
 800f8e0:	b590      	push	{r4, r7, lr}
 800f8e2:	b093      	sub	sp, #76	; 0x4c
 800f8e4:	af00      	add	r7, sp, #0
 800f8e6:	60f8      	str	r0, [r7, #12]
 800f8e8:	60b9      	str	r1, [r7, #8]
 800f8ea:	4611      	mov	r1, r2
 800f8ec:	461a      	mov	r2, r3
 800f8ee:	460b      	mov	r3, r1
 800f8f0:	80fb      	strh	r3, [r7, #6]
 800f8f2:	4613      	mov	r3, r2
 800f8f4:	80bb      	strh	r3, [r7, #4]
  uint8_t *send_ptr;
  uint16_t send_num;
  can_manage_obj_t m_obj;
  struct can_std_msg msg;

  send_ptr = data;
 800f8f6:	68bb      	ldr	r3, [r7, #8]
 800f8f8:	647b      	str	r3, [r7, #68]	; 0x44
  msg.std_id = std_id;
 800f8fa:	88bb      	ldrh	r3, [r7, #4]
 800f8fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  send_num = 0;
 800f8fe:	2300      	movs	r3, #0
 800f900:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  if (hcan == &hcan1)
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	4a4a      	ldr	r2, [pc, #296]	; (800fa30 <can_msg_bytes_send+0x150>)
 800f908:	4293      	cmp	r3, r2
 800f90a:	d102      	bne.n	800f912 <can_msg_bytes_send+0x32>
  {
    m_obj = &can1_manage;
 800f90c:	4b49      	ldr	r3, [pc, #292]	; (800fa34 <can_msg_bytes_send+0x154>)
 800f90e:	63fb      	str	r3, [r7, #60]	; 0x3c
  else
  {
    return 0;
  }

  while (send_num < len)
 800f910:	e044      	b.n	800f99c <can_msg_bytes_send+0xbc>
    return 0;
 800f912:	2300      	movs	r3, #0
 800f914:	e088      	b.n	800fa28 <can_msg_bytes_send+0x148>
  {
    if (fifo_is_full(&(m_obj->tx_fifo)))
 800f916:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f918:	3304      	adds	r3, #4
 800f91a:	4618      	mov	r0, r3
 800f91c:	f004 fa59 	bl	8013dd2 <fifo_is_full>
 800f920:	4603      	mov	r3, r0
 800f922:	2b00      	cmp	r3, #0
 800f924:	d004      	beq.n	800f930 <can_msg_bytes_send+0x50>
    {
      //can is error
      m_obj->is_sending = 0;
 800f926:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f928:	2200      	movs	r2, #0
 800f92a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      break;
 800f92e:	e03a      	b.n	800f9a6 <can_msg_bytes_send+0xc6>
    }

    if (len - send_num >= 8)
 800f930:	88fa      	ldrh	r2, [r7, #6]
 800f932:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f936:	1ad3      	subs	r3, r2, r3
 800f938:	2b07      	cmp	r3, #7
 800f93a:	dd03      	ble.n	800f944 <can_msg_bytes_send+0x64>
    {
      msg.dlc = 8;
 800f93c:	2308      	movs	r3, #8
 800f93e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 800f942:	e008      	b.n	800f956 <can_msg_bytes_send+0x76>
    }
    else
    {
      msg.dlc = len - send_num;
 800f944:	88fb      	ldrh	r3, [r7, #6]
 800f946:	b2da      	uxtb	r2, r3
 800f948:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f94c:	b2db      	uxtb	r3, r3
 800f94e:	1ad3      	subs	r3, r2, r3
 800f950:	b2db      	uxtb	r3, r3
 800f952:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    }

    //memcpy(msg.data, data, msg.dlc);
    *((uint32_t *)(msg.data)) = *((uint32_t *)(send_ptr));
 800f956:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f95a:	3305      	adds	r3, #5
 800f95c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f95e:	6812      	ldr	r2, [r2, #0]
 800f960:	601a      	str	r2, [r3, #0]
    *((uint32_t *)(msg.data + 4)) = *((uint32_t *)(send_ptr + 4));
 800f962:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f966:	3305      	adds	r3, #5
 800f968:	3304      	adds	r3, #4
 800f96a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f96c:	6852      	ldr	r2, [r2, #4]
 800f96e:	601a      	str	r2, [r3, #0]

    send_ptr += msg.dlc;
 800f970:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800f974:	461a      	mov	r2, r3
 800f976:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f978:	4413      	add	r3, r2
 800f97a:	647b      	str	r3, [r7, #68]	; 0x44
    send_num += msg.dlc;
 800f97c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800f980:	b29a      	uxth	r2, r3
 800f982:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f986:	4413      	add	r3, r2
 800f988:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

    fifo_put(&(m_obj->tx_fifo), &msg);
 800f98c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f98e:	3304      	adds	r3, #4
 800f990:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800f994:	4611      	mov	r1, r2
 800f996:	4618      	mov	r0, r3
 800f998:	f004 f94a 	bl	8013c30 <fifo_put>
  while (send_num < len)
 800f99c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f9a0:	88fb      	ldrh	r3, [r7, #6]
 800f9a2:	429a      	cmp	r2, r3
 800f9a4:	d3b7      	bcc.n	800f916 <can_msg_bytes_send+0x36>
  }

  if ((m_obj->is_sending) == 0 && (!(fifo_is_empty(&(m_obj->tx_fifo)))))
 800f9a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d139      	bne.n	800fa24 <can_msg_bytes_send+0x144>
 800f9b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9b2:	3304      	adds	r3, #4
 800f9b4:	4618      	mov	r0, r3
 800f9b6:	f004 f9fb 	bl	8013db0 <fifo_is_empty>
 800f9ba:	4603      	mov	r3, r0
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d131      	bne.n	800fa24 <can_msg_bytes_send+0x144>
  {
    CAN_TxHeaderTypeDef header;
    uint32_t send_mail_box;

    header.StdId = std_id;
 800f9c0:	88bb      	ldrh	r3, [r7, #4]
 800f9c2:	617b      	str	r3, [r7, #20]
    header.IDE = CAN_ID_STD;
 800f9c4:	2300      	movs	r3, #0
 800f9c6:	61fb      	str	r3, [r7, #28]
    header.RTR = CAN_RTR_DATA;
 800f9c8:	2300      	movs	r3, #0
 800f9ca:	623b      	str	r3, [r7, #32]

    while (HAL_CAN_GetTxMailboxesFreeLevel(m_obj->hcan) && (!(fifo_is_empty(&(m_obj->tx_fifo)))))
 800f9cc:	e01a      	b.n	800fa04 <can_msg_bytes_send+0x124>
    {
      fifo_get(&(m_obj->tx_fifo), &msg);
 800f9ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9d0:	3304      	adds	r3, #4
 800f9d2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800f9d6:	4611      	mov	r1, r2
 800f9d8:	4618      	mov	r0, r3
 800f9da:	f004 f96f 	bl	8013cbc <fifo_get>
      header.DLC = msg.dlc;
 800f9de:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800f9e2:	627b      	str	r3, [r7, #36]	; 0x24
      HAL_CAN_AddTxMessage(m_obj->hcan, &header, msg.data, &send_mail_box);
 800f9e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9e6:	6818      	ldr	r0, [r3, #0]
 800f9e8:	f107 0410 	add.w	r4, r7, #16
 800f9ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f9f0:	1d5a      	adds	r2, r3, #5
 800f9f2:	f107 0114 	add.w	r1, r7, #20
 800f9f6:	4623      	mov	r3, r4
 800f9f8:	f7f2 fe60 	bl	80026bc <HAL_CAN_AddTxMessage>

      m_obj->is_sending = 1;
 800f9fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9fe:	2201      	movs	r2, #1
 800fa00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    while (HAL_CAN_GetTxMailboxesFreeLevel(m_obj->hcan) && (!(fifo_is_empty(&(m_obj->tx_fifo)))))
 800fa04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	4618      	mov	r0, r3
 800fa0a:	f7f2 ff27 	bl	800285c <HAL_CAN_GetTxMailboxesFreeLevel>
 800fa0e:	4603      	mov	r3, r0
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d007      	beq.n	800fa24 <can_msg_bytes_send+0x144>
 800fa14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa16:	3304      	adds	r3, #4
 800fa18:	4618      	mov	r0, r3
 800fa1a:	f004 f9c9 	bl	8013db0 <fifo_is_empty>
 800fa1e:	4603      	mov	r3, r0
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d0d4      	beq.n	800f9ce <can_msg_bytes_send+0xee>
    }
  }

  return send_num;
 800fa24:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
}
 800fa28:	4618      	mov	r0, r3
 800fa2a:	374c      	adds	r7, #76	; 0x4c
 800fa2c:	46bd      	mov	sp, r7
 800fa2e:	bd90      	pop	{r4, r7, pc}
 800fa30:	200001bc 	.word	0x200001bc
 800fa34:	200067a0 	.word	0x200067a0

0800fa38 <can_fifo0_rx_callback_register>:

int32_t can_fifo0_rx_callback_register(can_manage_obj_t m_obj, can_stdmsg_rx_callback_t fun)
{
 800fa38:	b480      	push	{r7}
 800fa3a:	b085      	sub	sp, #20
 800fa3c:	af00      	add	r7, sp, #0
 800fa3e:	6078      	str	r0, [r7, #4]
 800fa40:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < MAX_CAN_REGISTER_NUM; i++)
 800fa42:	2300      	movs	r3, #0
 800fa44:	60fb      	str	r3, [r7, #12]
 800fa46:	e011      	b.n	800fa6c <can_fifo0_rx_callback_register+0x34>
  {
    if (m_obj->can_rec_callback[i] == NULL)
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	68fa      	ldr	r2, [r7, #12]
 800fa4c:	320a      	adds	r2, #10
 800fa4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d107      	bne.n	800fa66 <can_fifo0_rx_callback_register+0x2e>
    {
      m_obj->can_rec_callback[i] = fun;
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	68fa      	ldr	r2, [r7, #12]
 800fa5a:	320a      	adds	r2, #10
 800fa5c:	6839      	ldr	r1, [r7, #0]
 800fa5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      return i;
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	e007      	b.n	800fa76 <can_fifo0_rx_callback_register+0x3e>
  for (int i = 0; i < MAX_CAN_REGISTER_NUM; i++)
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	3301      	adds	r3, #1
 800fa6a:	60fb      	str	r3, [r7, #12]
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	2b04      	cmp	r3, #4
 800fa70:	ddea      	ble.n	800fa48 <can_fifo0_rx_callback_register+0x10>
    }
  }
  return -1;
 800fa72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800fa76:	4618      	mov	r0, r3
 800fa78:	3714      	adds	r7, #20
 800fa7a:	46bd      	mov	sp, r7
 800fa7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa80:	4770      	bx	lr

0800fa82 <can_tx_mailbox_complete_hanle>:
static void can_tx_mailbox_complete_hanle(can_manage_obj_t m_obj)
{
 800fa82:	b5b0      	push	{r4, r5, r7, lr}
 800fa84:	b090      	sub	sp, #64	; 0x40
 800fa86:	af00      	add	r7, sp, #0
 800fa88:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800fa8a:	f3ef 8310 	mrs	r3, PRIMASK
 800fa8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800fa90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  struct can_std_msg msg;
  CAN_TxHeaderTypeDef header;
  uint32_t send_mail_box;

  FIFO_CPU_SR_TYPE cpu_sr;
  cpu_sr = FIFO_GET_CPU_SR();
 800fa92:	461d      	mov	r5, r3
  __ASM volatile ("cpsid i" : : : "memory");
 800fa94:	b672      	cpsid	i
}
 800fa96:	bf00      	nop
  FIFO_ENTER_CRITICAL();

  if (!fifo_is_empty(&(m_obj->tx_fifo)))
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	3304      	adds	r3, #4
 800fa9c:	4618      	mov	r0, r3
 800fa9e:	f004 f987 	bl	8013db0 <fifo_is_empty>
 800faa2:	4603      	mov	r3, r0
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d133      	bne.n	800fb10 <can_tx_mailbox_complete_hanle+0x8e>
  {
    while (!fifo_is_empty(&(m_obj->tx_fifo)))
 800faa8:	e029      	b.n	800fafe <can_tx_mailbox_complete_hanle+0x7c>
    {
      if (HAL_CAN_GetTxMailboxesFreeLevel(m_obj->hcan))
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	4618      	mov	r0, r3
 800fab0:	f7f2 fed4 	bl	800285c <HAL_CAN_GetTxMailboxesFreeLevel>
 800fab4:	4603      	mov	r3, r0
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d01d      	beq.n	800faf6 <can_tx_mailbox_complete_hanle+0x74>
      {

        fifo_get_noprotect(&(m_obj->tx_fifo), &msg);
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	3304      	adds	r3, #4
 800fabe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800fac2:	4611      	mov	r1, r2
 800fac4:	4618      	mov	r0, r3
 800fac6:	f004 f93f 	bl	8013d48 <fifo_get_noprotect>

        header.StdId = msg.std_id;
 800faca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800facc:	613b      	str	r3, [r7, #16]
        header.DLC = msg.dlc;
 800face:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800fad2:	623b      	str	r3, [r7, #32]
        header.IDE = CAN_ID_STD;
 800fad4:	2300      	movs	r3, #0
 800fad6:	61bb      	str	r3, [r7, #24]
        header.RTR = CAN_RTR_DATA;
 800fad8:	2300      	movs	r3, #0
 800fada:	61fb      	str	r3, [r7, #28]

        HAL_CAN_AddTxMessage(m_obj->hcan, &header, msg.data, &send_mail_box);
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	6818      	ldr	r0, [r3, #0]
 800fae0:	f107 040c 	add.w	r4, r7, #12
 800fae4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fae8:	1d5a      	adds	r2, r3, #5
 800faea:	f107 0110 	add.w	r1, r7, #16
 800faee:	4623      	mov	r3, r4
 800faf0:	f7f2 fde4 	bl	80026bc <HAL_CAN_AddTxMessage>
 800faf4:	e003      	b.n	800fafe <can_tx_mailbox_complete_hanle+0x7c>
      }
      else
      {
        m_obj->is_sending = 0;
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	2200      	movs	r2, #0
 800fafa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    while (!fifo_is_empty(&(m_obj->tx_fifo)))
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	3304      	adds	r3, #4
 800fb02:	4618      	mov	r0, r3
 800fb04:	f004 f954 	bl	8013db0 <fifo_is_empty>
 800fb08:	4603      	mov	r3, r0
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d0cd      	beq.n	800faaa <can_tx_mailbox_complete_hanle+0x28>
 800fb0e:	e003      	b.n	800fb18 <can_tx_mailbox_complete_hanle+0x96>
      }
    }
  }
  else
  {
    m_obj->is_sending = 0;
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	2200      	movs	r2, #0
 800fb14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800fb18:	63bd      	str	r5, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fb1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb1c:	f383 8810 	msr	PRIMASK, r3
}
 800fb20:	bf00      	nop
  }

  FIFO_RESTORE_CPU_SR(cpu_sr);

  return;
 800fb22:	bf00      	nop
}
 800fb24:	3740      	adds	r7, #64	; 0x40
 800fb26:	46bd      	mov	sp, r7
 800fb28:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800fb2c <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800fb2c:	b580      	push	{r7, lr}
 800fb2e:	b082      	sub	sp, #8
 800fb30:	af00      	add	r7, sp, #0
 800fb32:	6078      	str	r0, [r7, #4]
  if (hcan == &hcan1)
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	4a05      	ldr	r2, [pc, #20]	; (800fb4c <HAL_CAN_TxMailbox0CompleteCallback+0x20>)
 800fb38:	4293      	cmp	r3, r2
 800fb3a:	d102      	bne.n	800fb42 <HAL_CAN_TxMailbox0CompleteCallback+0x16>
  {
    can_tx_mailbox_complete_hanle(&can1_manage);
 800fb3c:	4804      	ldr	r0, [pc, #16]	; (800fb50 <HAL_CAN_TxMailbox0CompleteCallback+0x24>)
 800fb3e:	f7ff ffa0 	bl	800fa82 <can_tx_mailbox_complete_hanle>
  }
}
 800fb42:	bf00      	nop
 800fb44:	3708      	adds	r7, #8
 800fb46:	46bd      	mov	sp, r7
 800fb48:	bd80      	pop	{r7, pc}
 800fb4a:	bf00      	nop
 800fb4c:	200001bc 	.word	0x200001bc
 800fb50:	200067a0 	.word	0x200067a0

0800fb54 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800fb54:	b580      	push	{r7, lr}
 800fb56:	b082      	sub	sp, #8
 800fb58:	af00      	add	r7, sp, #0
 800fb5a:	6078      	str	r0, [r7, #4]
  if (hcan == &hcan1)
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	4a05      	ldr	r2, [pc, #20]	; (800fb74 <HAL_CAN_TxMailbox1CompleteCallback+0x20>)
 800fb60:	4293      	cmp	r3, r2
 800fb62:	d102      	bne.n	800fb6a <HAL_CAN_TxMailbox1CompleteCallback+0x16>
  {
    can_tx_mailbox_complete_hanle(&can1_manage);
 800fb64:	4804      	ldr	r0, [pc, #16]	; (800fb78 <HAL_CAN_TxMailbox1CompleteCallback+0x24>)
 800fb66:	f7ff ff8c 	bl	800fa82 <can_tx_mailbox_complete_hanle>
  }
}
 800fb6a:	bf00      	nop
 800fb6c:	3708      	adds	r7, #8
 800fb6e:	46bd      	mov	sp, r7
 800fb70:	bd80      	pop	{r7, pc}
 800fb72:	bf00      	nop
 800fb74:	200001bc 	.word	0x200001bc
 800fb78:	200067a0 	.word	0x200067a0

0800fb7c <HAL_CAN_TxMailbox2CompleteCallback>:
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800fb7c:	b580      	push	{r7, lr}
 800fb7e:	b082      	sub	sp, #8
 800fb80:	af00      	add	r7, sp, #0
 800fb82:	6078      	str	r0, [r7, #4]
  if (hcan == &hcan1)
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	4a05      	ldr	r2, [pc, #20]	; (800fb9c <HAL_CAN_TxMailbox2CompleteCallback+0x20>)
 800fb88:	4293      	cmp	r3, r2
 800fb8a:	d102      	bne.n	800fb92 <HAL_CAN_TxMailbox2CompleteCallback+0x16>
  {
    can_tx_mailbox_complete_hanle(&can1_manage);
 800fb8c:	4804      	ldr	r0, [pc, #16]	; (800fba0 <HAL_CAN_TxMailbox2CompleteCallback+0x24>)
 800fb8e:	f7ff ff78 	bl	800fa82 <can_tx_mailbox_complete_hanle>
  }
}
 800fb92:	bf00      	nop
 800fb94:	3708      	adds	r7, #8
 800fb96:	46bd      	mov	sp, r7
 800fb98:	bd80      	pop	{r7, pc}
 800fb9a:	bf00      	nop
 800fb9c:	200001bc 	.word	0x200001bc
 800fba0:	200067a0 	.word	0x200067a0

0800fba4 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800fba4:	b580      	push	{r7, lr}
 800fba6:	b082      	sub	sp, #8
 800fba8:	af00      	add	r7, sp, #0
 800fbaa:	6078      	str	r0, [r7, #4]
  if (hcan == &hcan1)
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	4a06      	ldr	r2, [pc, #24]	; (800fbc8 <HAL_CAN_ErrorCallback+0x24>)
 800fbb0:	4293      	cmp	r3, r2
 800fbb2:	d102      	bne.n	800fbba <HAL_CAN_ErrorCallback+0x16>
  {
    can_tx_mailbox_complete_hanle(&can1_manage);
 800fbb4:	4805      	ldr	r0, [pc, #20]	; (800fbcc <HAL_CAN_ErrorCallback+0x28>)
 800fbb6:	f7ff ff64 	bl	800fa82 <can_tx_mailbox_complete_hanle>
  }
  HAL_CAN_ResetError(hcan);
 800fbba:	6878      	ldr	r0, [r7, #4]
 800fbbc:	f7f3 f9d2 	bl	8002f64 <HAL_CAN_ResetError>
}
 800fbc0:	bf00      	nop
 800fbc2:	3708      	adds	r7, #8
 800fbc4:	46bd      	mov	sp, r7
 800fbc6:	bd80      	pop	{r7, pc}
 800fbc8:	200001bc 	.word	0x200001bc
 800fbcc:	200067a0 	.word	0x200067a0

0800fbd0 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800fbd0:	b580      	push	{r7, lr}
 800fbd2:	b08c      	sub	sp, #48	; 0x30
 800fbd4:	af00      	add	r7, sp, #0
 800fbd6:	6078      	str	r0, [r7, #4]
  CAN_RxHeaderTypeDef rx_header;
  uint8_t rx_data[8];

  HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data);
 800fbd8:	f107 0308 	add.w	r3, r7, #8
 800fbdc:	f107 0210 	add.w	r2, r7, #16
 800fbe0:	2100      	movs	r1, #0
 800fbe2:	6878      	ldr	r0, [r7, #4]
 800fbe4:	f7f2 fe6f 	bl	80028c6 <HAL_CAN_GetRxMessage>

  if (hcan == &hcan1)
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	4a11      	ldr	r2, [pc, #68]	; (800fc30 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 800fbec:	4293      	cmp	r3, r2
 800fbee:	d11a      	bne.n	800fc26 <HAL_CAN_RxFifo0MsgPendingCallback+0x56>
  {
    for (int i = 0; i < MAX_CAN_REGISTER_NUM; i++)
 800fbf0:	2300      	movs	r3, #0
 800fbf2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fbf4:	e014      	b.n	800fc20 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>
    {
      if (can1_manage.can_rec_callback[i] != NULL)
 800fbf6:	4a0f      	ldr	r2, [pc, #60]	; (800fc34 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 800fbf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbfa:	330a      	adds	r3, #10
 800fbfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d00a      	beq.n	800fc1a <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
      {
        (*(can1_manage.can_rec_callback[i]))(&rx_header, rx_data);
 800fc04:	4a0b      	ldr	r2, [pc, #44]	; (800fc34 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 800fc06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc08:	330a      	adds	r3, #10
 800fc0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fc0e:	f107 0108 	add.w	r1, r7, #8
 800fc12:	f107 0210 	add.w	r2, r7, #16
 800fc16:	4610      	mov	r0, r2
 800fc18:	4798      	blx	r3
    for (int i = 0; i < MAX_CAN_REGISTER_NUM; i++)
 800fc1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc1c:	3301      	adds	r3, #1
 800fc1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fc20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc22:	2b04      	cmp	r3, #4
 800fc24:	dde7      	ble.n	800fbf6 <HAL_CAN_RxFifo0MsgPendingCallback+0x26>
      }
    }
  }
}
 800fc26:	bf00      	nop
 800fc28:	3730      	adds	r7, #48	; 0x30
 800fc2a:	46bd      	mov	sp, r7
 800fc2c:	bd80      	pop	{r7, pc}
 800fc2e:	bf00      	nop
 800fc30:	200001bc 	.word	0x200001bc
 800fc34:	200067a0 	.word	0x200067a0

0800fc38 <mpu_write_reg>:
static void get_mpu_gyro_offset(void);
static void get_mpu_acc_offset(void);
static void get_ist_mag_offset(void);

uint8_t mpu_write_reg(uint8_t const reg, uint8_t const data)
{
 800fc38:	b580      	push	{r7, lr}
 800fc3a:	b084      	sub	sp, #16
 800fc3c:	af02      	add	r7, sp, #8
 800fc3e:	4603      	mov	r3, r0
 800fc40:	460a      	mov	r2, r1
 800fc42:	71fb      	strb	r3, [r7, #7]
 800fc44:	4613      	mov	r3, r2
 800fc46:	71bb      	strb	r3, [r7, #6]
  MPU_NSS_LOW();
 800fc48:	2200      	movs	r2, #0
 800fc4a:	2140      	movs	r1, #64	; 0x40
 800fc4c:	4812      	ldr	r0, [pc, #72]	; (800fc98 <mpu_write_reg+0x60>)
 800fc4e:	f7f4 f855 	bl	8003cfc <HAL_GPIO_WritePin>
  tx = reg & 0x7F;
 800fc52:	79fb      	ldrb	r3, [r7, #7]
 800fc54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fc58:	b2da      	uxtb	r2, r3
 800fc5a:	4b10      	ldr	r3, [pc, #64]	; (800fc9c <mpu_write_reg+0x64>)
 800fc5c:	701a      	strb	r2, [r3, #0]
  HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800fc5e:	2337      	movs	r3, #55	; 0x37
 800fc60:	9300      	str	r3, [sp, #0]
 800fc62:	2301      	movs	r3, #1
 800fc64:	4a0e      	ldr	r2, [pc, #56]	; (800fca0 <mpu_write_reg+0x68>)
 800fc66:	490d      	ldr	r1, [pc, #52]	; (800fc9c <mpu_write_reg+0x64>)
 800fc68:	480e      	ldr	r0, [pc, #56]	; (800fca4 <mpu_write_reg+0x6c>)
 800fc6a:	f7f5 ffde 	bl	8005c2a <HAL_SPI_TransmitReceive>
  tx = data;
 800fc6e:	4a0b      	ldr	r2, [pc, #44]	; (800fc9c <mpu_write_reg+0x64>)
 800fc70:	79bb      	ldrb	r3, [r7, #6]
 800fc72:	7013      	strb	r3, [r2, #0]
  HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800fc74:	2337      	movs	r3, #55	; 0x37
 800fc76:	9300      	str	r3, [sp, #0]
 800fc78:	2301      	movs	r3, #1
 800fc7a:	4a09      	ldr	r2, [pc, #36]	; (800fca0 <mpu_write_reg+0x68>)
 800fc7c:	4907      	ldr	r1, [pc, #28]	; (800fc9c <mpu_write_reg+0x64>)
 800fc7e:	4809      	ldr	r0, [pc, #36]	; (800fca4 <mpu_write_reg+0x6c>)
 800fc80:	f7f5 ffd3 	bl	8005c2a <HAL_SPI_TransmitReceive>
  MPU_NSS_HIGH();
 800fc84:	2201      	movs	r2, #1
 800fc86:	2140      	movs	r1, #64	; 0x40
 800fc88:	4803      	ldr	r0, [pc, #12]	; (800fc98 <mpu_write_reg+0x60>)
 800fc8a:	f7f4 f837 	bl	8003cfc <HAL_GPIO_WritePin>
  return 0;
 800fc8e:	2300      	movs	r3, #0
}
 800fc90:	4618      	mov	r0, r3
 800fc92:	3708      	adds	r7, #8
 800fc94:	46bd      	mov	sp, r7
 800fc96:	bd80      	pop	{r7, pc}
 800fc98:	40021400 	.word	0x40021400
 800fc9c:	20006bdc 	.word	0x20006bdc
 800fca0:	20006bdd 	.word	0x20006bdd
 800fca4:	20000214 	.word	0x20000214

0800fca8 <mpu_read_reg>:

uint8_t mpu_read_reg(uint8_t const reg)
{
 800fca8:	b580      	push	{r7, lr}
 800fcaa:	b084      	sub	sp, #16
 800fcac:	af02      	add	r7, sp, #8
 800fcae:	4603      	mov	r3, r0
 800fcb0:	71fb      	strb	r3, [r7, #7]
  MPU_NSS_LOW();
 800fcb2:	2200      	movs	r2, #0
 800fcb4:	2140      	movs	r1, #64	; 0x40
 800fcb6:	4812      	ldr	r0, [pc, #72]	; (800fd00 <mpu_read_reg+0x58>)
 800fcb8:	f7f4 f820 	bl	8003cfc <HAL_GPIO_WritePin>
  tx = reg | 0x80;
 800fcbc:	79fb      	ldrb	r3, [r7, #7]
 800fcbe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800fcc2:	b2da      	uxtb	r2, r3
 800fcc4:	4b0f      	ldr	r3, [pc, #60]	; (800fd04 <mpu_read_reg+0x5c>)
 800fcc6:	701a      	strb	r2, [r3, #0]
  HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800fcc8:	2337      	movs	r3, #55	; 0x37
 800fcca:	9300      	str	r3, [sp, #0]
 800fccc:	2301      	movs	r3, #1
 800fcce:	4a0e      	ldr	r2, [pc, #56]	; (800fd08 <mpu_read_reg+0x60>)
 800fcd0:	490c      	ldr	r1, [pc, #48]	; (800fd04 <mpu_read_reg+0x5c>)
 800fcd2:	480e      	ldr	r0, [pc, #56]	; (800fd0c <mpu_read_reg+0x64>)
 800fcd4:	f7f5 ffa9 	bl	8005c2a <HAL_SPI_TransmitReceive>
  HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800fcd8:	2337      	movs	r3, #55	; 0x37
 800fcda:	9300      	str	r3, [sp, #0]
 800fcdc:	2301      	movs	r3, #1
 800fcde:	4a0a      	ldr	r2, [pc, #40]	; (800fd08 <mpu_read_reg+0x60>)
 800fce0:	4908      	ldr	r1, [pc, #32]	; (800fd04 <mpu_read_reg+0x5c>)
 800fce2:	480a      	ldr	r0, [pc, #40]	; (800fd0c <mpu_read_reg+0x64>)
 800fce4:	f7f5 ffa1 	bl	8005c2a <HAL_SPI_TransmitReceive>
  MPU_NSS_HIGH();
 800fce8:	2201      	movs	r2, #1
 800fcea:	2140      	movs	r1, #64	; 0x40
 800fcec:	4804      	ldr	r0, [pc, #16]	; (800fd00 <mpu_read_reg+0x58>)
 800fcee:	f7f4 f805 	bl	8003cfc <HAL_GPIO_WritePin>
  return rx;
 800fcf2:	4b05      	ldr	r3, [pc, #20]	; (800fd08 <mpu_read_reg+0x60>)
 800fcf4:	781b      	ldrb	r3, [r3, #0]
}
 800fcf6:	4618      	mov	r0, r3
 800fcf8:	3708      	adds	r7, #8
 800fcfa:	46bd      	mov	sp, r7
 800fcfc:	bd80      	pop	{r7, pc}
 800fcfe:	bf00      	nop
 800fd00:	40021400 	.word	0x40021400
 800fd04:	20006bdc 	.word	0x20006bdc
 800fd08:	20006bdd 	.word	0x20006bdd
 800fd0c:	20000214 	.word	0x20000214

0800fd10 <mpu_read_regs>:

uint8_t mpu_read_regs(uint8_t const regAddr, uint8_t *pData, uint8_t len)
{
 800fd10:	b580      	push	{r7, lr}
 800fd12:	b084      	sub	sp, #16
 800fd14:	af02      	add	r7, sp, #8
 800fd16:	4603      	mov	r3, r0
 800fd18:	6039      	str	r1, [r7, #0]
 800fd1a:	71fb      	strb	r3, [r7, #7]
 800fd1c:	4613      	mov	r3, r2
 800fd1e:	71bb      	strb	r3, [r7, #6]
  MPU_NSS_LOW();
 800fd20:	2200      	movs	r2, #0
 800fd22:	2140      	movs	r1, #64	; 0x40
 800fd24:	4813      	ldr	r0, [pc, #76]	; (800fd74 <mpu_read_regs+0x64>)
 800fd26:	f7f3 ffe9 	bl	8003cfc <HAL_GPIO_WritePin>
  tx = regAddr | 0x80;
 800fd2a:	79fb      	ldrb	r3, [r7, #7]
 800fd2c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800fd30:	b2da      	uxtb	r2, r3
 800fd32:	4b11      	ldr	r3, [pc, #68]	; (800fd78 <mpu_read_regs+0x68>)
 800fd34:	701a      	strb	r2, [r3, #0]
  tx_buff[0] = tx;
 800fd36:	4b10      	ldr	r3, [pc, #64]	; (800fd78 <mpu_read_regs+0x68>)
 800fd38:	781a      	ldrb	r2, [r3, #0]
 800fd3a:	4b10      	ldr	r3, [pc, #64]	; (800fd7c <mpu_read_regs+0x6c>)
 800fd3c:	701a      	strb	r2, [r3, #0]
  HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800fd3e:	2337      	movs	r3, #55	; 0x37
 800fd40:	9300      	str	r3, [sp, #0]
 800fd42:	2301      	movs	r3, #1
 800fd44:	4a0e      	ldr	r2, [pc, #56]	; (800fd80 <mpu_read_regs+0x70>)
 800fd46:	490c      	ldr	r1, [pc, #48]	; (800fd78 <mpu_read_regs+0x68>)
 800fd48:	480e      	ldr	r0, [pc, #56]	; (800fd84 <mpu_read_regs+0x74>)
 800fd4a:	f7f5 ff6e 	bl	8005c2a <HAL_SPI_TransmitReceive>
  HAL_SPI_TransmitReceive(&MPU_HSPI, tx_buff, pData, len, 55);
 800fd4e:	79bb      	ldrb	r3, [r7, #6]
 800fd50:	b29b      	uxth	r3, r3
 800fd52:	2237      	movs	r2, #55	; 0x37
 800fd54:	9200      	str	r2, [sp, #0]
 800fd56:	683a      	ldr	r2, [r7, #0]
 800fd58:	4908      	ldr	r1, [pc, #32]	; (800fd7c <mpu_read_regs+0x6c>)
 800fd5a:	480a      	ldr	r0, [pc, #40]	; (800fd84 <mpu_read_regs+0x74>)
 800fd5c:	f7f5 ff65 	bl	8005c2a <HAL_SPI_TransmitReceive>
  MPU_NSS_HIGH();
 800fd60:	2201      	movs	r2, #1
 800fd62:	2140      	movs	r1, #64	; 0x40
 800fd64:	4803      	ldr	r0, [pc, #12]	; (800fd74 <mpu_read_regs+0x64>)
 800fd66:	f7f3 ffc9 	bl	8003cfc <HAL_GPIO_WritePin>
  return 0;
 800fd6a:	2300      	movs	r3, #0
}
 800fd6c:	4618      	mov	r0, r3
 800fd6e:	3708      	adds	r7, #8
 800fd70:	46bd      	mov	sp, r7
 800fd72:	bd80      	pop	{r7, pc}
 800fd74:	40021400 	.word	0x40021400
 800fd78:	20006bdc 	.word	0x20006bdc
 800fd7c:	20006be0 	.word	0x20006be0
 800fd80:	20006bdd 	.word	0x20006bdd
 800fd84:	20000214 	.word	0x20000214

0800fd88 <ist_reg_write_by_mpu>:

static void ist_reg_write_by_mpu(uint8_t addr, uint8_t data)
{
 800fd88:	b580      	push	{r7, lr}
 800fd8a:	b082      	sub	sp, #8
 800fd8c:	af00      	add	r7, sp, #0
 800fd8e:	4603      	mov	r3, r0
 800fd90:	460a      	mov	r2, r1
 800fd92:	71fb      	strb	r3, [r7, #7]
 800fd94:	4613      	mov	r3, r2
 800fd96:	71bb      	strb	r3, [r7, #6]
  //turn off slave 1 at first
  mpu_write_reg(MPU6500_I2C_SLV1_CTRL, 0x00);
 800fd98:	2100      	movs	r1, #0
 800fd9a:	202a      	movs	r0, #42	; 0x2a
 800fd9c:	f7ff ff4c 	bl	800fc38 <mpu_write_reg>
  MPU_DELAY(2);
 800fda0:	2002      	movs	r0, #2
 800fda2:	f7f2 fa47 	bl	8002234 <HAL_Delay>
  mpu_write_reg(MPU6500_I2C_SLV1_REG, addr);
 800fda6:	79fb      	ldrb	r3, [r7, #7]
 800fda8:	4619      	mov	r1, r3
 800fdaa:	2029      	movs	r0, #41	; 0x29
 800fdac:	f7ff ff44 	bl	800fc38 <mpu_write_reg>
  MPU_DELAY(2);
 800fdb0:	2002      	movs	r0, #2
 800fdb2:	f7f2 fa3f 	bl	8002234 <HAL_Delay>
  mpu_write_reg(MPU6500_I2C_SLV1_DO, data);
 800fdb6:	79bb      	ldrb	r3, [r7, #6]
 800fdb8:	4619      	mov	r1, r3
 800fdba:	2064      	movs	r0, #100	; 0x64
 800fdbc:	f7ff ff3c 	bl	800fc38 <mpu_write_reg>
  MPU_DELAY(2);
 800fdc0:	2002      	movs	r0, #2
 800fdc2:	f7f2 fa37 	bl	8002234 <HAL_Delay>
  //turn on slave 1 with one byte transmitting
  mpu_write_reg(MPU6500_I2C_SLV1_CTRL, 0x80 | 0x01);
 800fdc6:	2181      	movs	r1, #129	; 0x81
 800fdc8:	202a      	movs	r0, #42	; 0x2a
 800fdca:	f7ff ff35 	bl	800fc38 <mpu_write_reg>
  MPU_DELAY(10);
 800fdce:	200a      	movs	r0, #10
 800fdd0:	f7f2 fa30 	bl	8002234 <HAL_Delay>
}
 800fdd4:	bf00      	nop
 800fdd6:	3708      	adds	r7, #8
 800fdd8:	46bd      	mov	sp, r7
 800fdda:	bd80      	pop	{r7, pc}

0800fddc <ist_reg_read_by_mpu>:

static uint8_t ist_reg_read_by_mpu(uint8_t addr)
{
 800fddc:	b580      	push	{r7, lr}
 800fdde:	b084      	sub	sp, #16
 800fde0:	af00      	add	r7, sp, #0
 800fde2:	4603      	mov	r3, r0
 800fde4:	71fb      	strb	r3, [r7, #7]
  uint8_t retval;
  mpu_write_reg(MPU6500_I2C_SLV4_REG, addr);
 800fde6:	79fb      	ldrb	r3, [r7, #7]
 800fde8:	4619      	mov	r1, r3
 800fdea:	2032      	movs	r0, #50	; 0x32
 800fdec:	f7ff ff24 	bl	800fc38 <mpu_write_reg>
  MPU_DELAY(10);
 800fdf0:	200a      	movs	r0, #10
 800fdf2:	f7f2 fa1f 	bl	8002234 <HAL_Delay>
  mpu_write_reg(MPU6500_I2C_SLV4_CTRL, 0x80);
 800fdf6:	2180      	movs	r1, #128	; 0x80
 800fdf8:	2034      	movs	r0, #52	; 0x34
 800fdfa:	f7ff ff1d 	bl	800fc38 <mpu_write_reg>
  MPU_DELAY(10);
 800fdfe:	200a      	movs	r0, #10
 800fe00:	f7f2 fa18 	bl	8002234 <HAL_Delay>
  retval = mpu_read_reg(MPU6500_I2C_SLV4_DI);
 800fe04:	2035      	movs	r0, #53	; 0x35
 800fe06:	f7ff ff4f 	bl	800fca8 <mpu_read_reg>
 800fe0a:	4603      	mov	r3, r0
 800fe0c:	73fb      	strb	r3, [r7, #15]
  //turn off slave4 after read
  mpu_write_reg(MPU6500_I2C_SLV4_CTRL, 0x00);
 800fe0e:	2100      	movs	r1, #0
 800fe10:	2034      	movs	r0, #52	; 0x34
 800fe12:	f7ff ff11 	bl	800fc38 <mpu_write_reg>
  MPU_DELAY(10);
 800fe16:	200a      	movs	r0, #10
 800fe18:	f7f2 fa0c 	bl	8002234 <HAL_Delay>
  return retval;
 800fe1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe1e:	4618      	mov	r0, r3
 800fe20:	3710      	adds	r7, #16
 800fe22:	46bd      	mov	sp, r7
 800fe24:	bd80      	pop	{r7, pc}

0800fe26 <mpu_mst_i2c_auto_read_config>:

static void mpu_mst_i2c_auto_read_config(uint8_t device_address, uint8_t reg_base_addr, uint8_t data_num)
{
 800fe26:	b580      	push	{r7, lr}
 800fe28:	b082      	sub	sp, #8
 800fe2a:	af00      	add	r7, sp, #0
 800fe2c:	4603      	mov	r3, r0
 800fe2e:	71fb      	strb	r3, [r7, #7]
 800fe30:	460b      	mov	r3, r1
 800fe32:	71bb      	strb	r3, [r7, #6]
 800fe34:	4613      	mov	r3, r2
 800fe36:	717b      	strb	r3, [r7, #5]
  //configure the device address of the IST8310
  //use slave1,auto transmit single measure mode.
  mpu_write_reg(MPU6500_I2C_SLV1_ADDR, device_address);
 800fe38:	79fb      	ldrb	r3, [r7, #7]
 800fe3a:	4619      	mov	r1, r3
 800fe3c:	2028      	movs	r0, #40	; 0x28
 800fe3e:	f7ff fefb 	bl	800fc38 <mpu_write_reg>
  MPU_DELAY(2);
 800fe42:	2002      	movs	r0, #2
 800fe44:	f7f2 f9f6 	bl	8002234 <HAL_Delay>
  mpu_write_reg(MPU6500_I2C_SLV1_REG, IST8310_R_CONFA);
 800fe48:	210a      	movs	r1, #10
 800fe4a:	2029      	movs	r0, #41	; 0x29
 800fe4c:	f7ff fef4 	bl	800fc38 <mpu_write_reg>
  MPU_DELAY(2);
 800fe50:	2002      	movs	r0, #2
 800fe52:	f7f2 f9ef 	bl	8002234 <HAL_Delay>
  mpu_write_reg(MPU6500_I2C_SLV1_DO, IST8310_ODR_MODE);
 800fe56:	2101      	movs	r1, #1
 800fe58:	2064      	movs	r0, #100	; 0x64
 800fe5a:	f7ff feed 	bl	800fc38 <mpu_write_reg>
  MPU_DELAY(2);
 800fe5e:	2002      	movs	r0, #2
 800fe60:	f7f2 f9e8 	bl	8002234 <HAL_Delay>

  //use slave0,auto read data
  mpu_write_reg(MPU6500_I2C_SLV0_ADDR, 0x80 | device_address);
 800fe64:	79fb      	ldrb	r3, [r7, #7]
 800fe66:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800fe6a:	b2db      	uxtb	r3, r3
 800fe6c:	4619      	mov	r1, r3
 800fe6e:	2025      	movs	r0, #37	; 0x25
 800fe70:	f7ff fee2 	bl	800fc38 <mpu_write_reg>
  MPU_DELAY(2);
 800fe74:	2002      	movs	r0, #2
 800fe76:	f7f2 f9dd 	bl	8002234 <HAL_Delay>
  mpu_write_reg(MPU6500_I2C_SLV0_REG, reg_base_addr);
 800fe7a:	79bb      	ldrb	r3, [r7, #6]
 800fe7c:	4619      	mov	r1, r3
 800fe7e:	2026      	movs	r0, #38	; 0x26
 800fe80:	f7ff feda 	bl	800fc38 <mpu_write_reg>
  MPU_DELAY(2);
 800fe84:	2002      	movs	r0, #2
 800fe86:	f7f2 f9d5 	bl	8002234 <HAL_Delay>

  //every eight mpu6500 internal samples one i2c master read
  mpu_write_reg(MPU6500_I2C_SLV4_CTRL, 0x03);
 800fe8a:	2103      	movs	r1, #3
 800fe8c:	2034      	movs	r0, #52	; 0x34
 800fe8e:	f7ff fed3 	bl	800fc38 <mpu_write_reg>
  MPU_DELAY(2);
 800fe92:	2002      	movs	r0, #2
 800fe94:	f7f2 f9ce 	bl	8002234 <HAL_Delay>
  //enable slave 0 and 1 access delay
  mpu_write_reg(MPU6500_I2C_MST_DELAY_CTRL, 0x01 | 0x02);
 800fe98:	2103      	movs	r1, #3
 800fe9a:	2067      	movs	r0, #103	; 0x67
 800fe9c:	f7ff fecc 	bl	800fc38 <mpu_write_reg>
  MPU_DELAY(2);
 800fea0:	2002      	movs	r0, #2
 800fea2:	f7f2 f9c7 	bl	8002234 <HAL_Delay>
  //enable slave 1 auto transmit
  mpu_write_reg(MPU6500_I2C_SLV1_CTRL, 0x80 | 0x01);
 800fea6:	2181      	movs	r1, #129	; 0x81
 800fea8:	202a      	movs	r0, #42	; 0x2a
 800feaa:	f7ff fec5 	bl	800fc38 <mpu_write_reg>
  MPU_DELAY(6); //Wait 6ms (minimum waiting time for 16 times internal average setup)
 800feae:	2006      	movs	r0, #6
 800feb0:	f7f2 f9c0 	bl	8002234 <HAL_Delay>
  //enable slave 0 with data_num bytes reading
  mpu_write_reg(MPU6500_I2C_SLV0_CTRL, 0x80 | data_num);
 800feb4:	797b      	ldrb	r3, [r7, #5]
 800feb6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800feba:	b2db      	uxtb	r3, r3
 800febc:	4619      	mov	r1, r3
 800febe:	2027      	movs	r0, #39	; 0x27
 800fec0:	f7ff feba 	bl	800fc38 <mpu_write_reg>
  MPU_DELAY(2);
 800fec4:	2002      	movs	r0, #2
 800fec6:	f7f2 f9b5 	bl	8002234 <HAL_Delay>
}
 800feca:	bf00      	nop
 800fecc:	3708      	adds	r7, #8
 800fece:	46bd      	mov	sp, r7
 800fed0:	bd80      	pop	{r7, pc}

0800fed2 <ist8310_init>:

uint8_t ist8310_init(void)
{
 800fed2:	b580      	push	{r7, lr}
 800fed4:	af00      	add	r7, sp, #0
  //Enable I2C master mode, Reset I2C Slave module
  mpu_write_reg(MPU6500_USER_CTRL, 0x30);
 800fed6:	2130      	movs	r1, #48	; 0x30
 800fed8:	206a      	movs	r0, #106	; 0x6a
 800feda:	f7ff fead 	bl	800fc38 <mpu_write_reg>
  MPU_DELAY(10);
 800fede:	200a      	movs	r0, #10
 800fee0:	f7f2 f9a8 	bl	8002234 <HAL_Delay>
  //I2C master clock 400kHz
  mpu_write_reg(MPU6500_I2C_MST_CTRL, 0x0d);
 800fee4:	210d      	movs	r1, #13
 800fee6:	2024      	movs	r0, #36	; 0x24
 800fee8:	f7ff fea6 	bl	800fc38 <mpu_write_reg>
  MPU_DELAY(10);
 800feec:	200a      	movs	r0, #10
 800feee:	f7f2 f9a1 	bl	8002234 <HAL_Delay>

  //turn on slave 1 for ist write and slave 4 for ist read
  mpu_write_reg(MPU6500_I2C_SLV1_ADDR, IST8310_ADDRESS); //write ist
 800fef2:	210e      	movs	r1, #14
 800fef4:	2028      	movs	r0, #40	; 0x28
 800fef6:	f7ff fe9f 	bl	800fc38 <mpu_write_reg>
  MPU_DELAY(10);
 800fefa:	200a      	movs	r0, #10
 800fefc:	f7f2 f99a 	bl	8002234 <HAL_Delay>
  mpu_write_reg(MPU6500_I2C_SLV4_ADDR, 0x80 | IST8310_ADDRESS); //read ist
 800ff00:	218e      	movs	r1, #142	; 0x8e
 800ff02:	2031      	movs	r0, #49	; 0x31
 800ff04:	f7ff fe98 	bl	800fc38 <mpu_write_reg>
  MPU_DELAY(10);
 800ff08:	200a      	movs	r0, #10
 800ff0a:	f7f2 f993 	bl	8002234 <HAL_Delay>

  //reset ist8310
  ist_reg_write_by_mpu(IST8310_R_CONFB, 0x01);
 800ff0e:	2101      	movs	r1, #1
 800ff10:	200b      	movs	r0, #11
 800ff12:	f7ff ff39 	bl	800fd88 <ist_reg_write_by_mpu>
  MPU_DELAY(10);
 800ff16:	200a      	movs	r0, #10
 800ff18:	f7f2 f98c 	bl	8002234 <HAL_Delay>

  if (IST8310_DEVICE_ID_A != ist_reg_read_by_mpu(IST8310_WHO_AM_I))
 800ff1c:	2000      	movs	r0, #0
 800ff1e:	f7ff ff5d 	bl	800fddc <ist_reg_read_by_mpu>
 800ff22:	4603      	mov	r3, r0
 800ff24:	2b10      	cmp	r3, #16
 800ff26:	d001      	beq.n	800ff2c <ist8310_init+0x5a>
    return 1;
 800ff28:	2301      	movs	r3, #1
 800ff2a:	e059      	b.n	800ffe0 <ist8310_init+0x10e>

  ist_reg_write_by_mpu(IST8310_R_CONFB, 0x01);
 800ff2c:	2101      	movs	r1, #1
 800ff2e:	200b      	movs	r0, #11
 800ff30:	f7ff ff2a 	bl	800fd88 <ist_reg_write_by_mpu>
  MPU_DELAY(10);
 800ff34:	200a      	movs	r0, #10
 800ff36:	f7f2 f97d 	bl	8002234 <HAL_Delay>

  //config as ready mode to access reg
  ist_reg_write_by_mpu(IST8310_R_CONFA, 0x00);
 800ff3a:	2100      	movs	r1, #0
 800ff3c:	200a      	movs	r0, #10
 800ff3e:	f7ff ff23 	bl	800fd88 <ist_reg_write_by_mpu>
  if (ist_reg_read_by_mpu(IST8310_R_CONFA) != 0x00)
 800ff42:	200a      	movs	r0, #10
 800ff44:	f7ff ff4a 	bl	800fddc <ist_reg_read_by_mpu>
 800ff48:	4603      	mov	r3, r0
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d001      	beq.n	800ff52 <ist8310_init+0x80>
    return 2;
 800ff4e:	2302      	movs	r3, #2
 800ff50:	e046      	b.n	800ffe0 <ist8310_init+0x10e>
  MPU_DELAY(10);
 800ff52:	200a      	movs	r0, #10
 800ff54:	f7f2 f96e 	bl	8002234 <HAL_Delay>

  //normal state, no int
  ist_reg_write_by_mpu(IST8310_R_CONFB, 0x00);
 800ff58:	2100      	movs	r1, #0
 800ff5a:	200b      	movs	r0, #11
 800ff5c:	f7ff ff14 	bl	800fd88 <ist_reg_write_by_mpu>
  if (ist_reg_read_by_mpu(IST8310_R_CONFB) != 0x00)
 800ff60:	200b      	movs	r0, #11
 800ff62:	f7ff ff3b 	bl	800fddc <ist_reg_read_by_mpu>
 800ff66:	4603      	mov	r3, r0
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d001      	beq.n	800ff70 <ist8310_init+0x9e>
    return 3;
 800ff6c:	2303      	movs	r3, #3
 800ff6e:	e037      	b.n	800ffe0 <ist8310_init+0x10e>
  MPU_DELAY(10);
 800ff70:	200a      	movs	r0, #10
 800ff72:	f7f2 f95f 	bl	8002234 <HAL_Delay>

  //config  low noise mode, x,y,z axis 16 time 1 avg,
  ist_reg_write_by_mpu(IST8310_AVGCNTL, 0x24); //100100
 800ff76:	2124      	movs	r1, #36	; 0x24
 800ff78:	2041      	movs	r0, #65	; 0x41
 800ff7a:	f7ff ff05 	bl	800fd88 <ist_reg_write_by_mpu>
  if (ist_reg_read_by_mpu(IST8310_AVGCNTL) != 0x24)
 800ff7e:	2041      	movs	r0, #65	; 0x41
 800ff80:	f7ff ff2c 	bl	800fddc <ist_reg_read_by_mpu>
 800ff84:	4603      	mov	r3, r0
 800ff86:	2b24      	cmp	r3, #36	; 0x24
 800ff88:	d001      	beq.n	800ff8e <ist8310_init+0xbc>
    return 4;
 800ff8a:	2304      	movs	r3, #4
 800ff8c:	e028      	b.n	800ffe0 <ist8310_init+0x10e>
  MPU_DELAY(10);
 800ff8e:	200a      	movs	r0, #10
 800ff90:	f7f2 f950 	bl	8002234 <HAL_Delay>

  //Set/Reset pulse duration setup, normal mode
  ist_reg_write_by_mpu(IST8310_PDCNTL, 0xc0);
 800ff94:	21c0      	movs	r1, #192	; 0xc0
 800ff96:	2042      	movs	r0, #66	; 0x42
 800ff98:	f7ff fef6 	bl	800fd88 <ist_reg_write_by_mpu>
  if (ist_reg_read_by_mpu(IST8310_PDCNTL) != 0xc0)
 800ff9c:	2042      	movs	r0, #66	; 0x42
 800ff9e:	f7ff ff1d 	bl	800fddc <ist_reg_read_by_mpu>
 800ffa2:	4603      	mov	r3, r0
 800ffa4:	2bc0      	cmp	r3, #192	; 0xc0
 800ffa6:	d001      	beq.n	800ffac <ist8310_init+0xda>
    return 5;
 800ffa8:	2305      	movs	r3, #5
 800ffaa:	e019      	b.n	800ffe0 <ist8310_init+0x10e>
  MPU_DELAY(10);
 800ffac:	200a      	movs	r0, #10
 800ffae:	f7f2 f941 	bl	8002234 <HAL_Delay>

  //turn off slave1 & slave 4
  mpu_write_reg(MPU6500_I2C_SLV1_CTRL, 0x00);
 800ffb2:	2100      	movs	r1, #0
 800ffb4:	202a      	movs	r0, #42	; 0x2a
 800ffb6:	f7ff fe3f 	bl	800fc38 <mpu_write_reg>
  MPU_DELAY(10);
 800ffba:	200a      	movs	r0, #10
 800ffbc:	f7f2 f93a 	bl	8002234 <HAL_Delay>
  mpu_write_reg(MPU6500_I2C_SLV4_CTRL, 0x00);
 800ffc0:	2100      	movs	r1, #0
 800ffc2:	2034      	movs	r0, #52	; 0x34
 800ffc4:	f7ff fe38 	bl	800fc38 <mpu_write_reg>
  MPU_DELAY(10);
 800ffc8:	200a      	movs	r0, #10
 800ffca:	f7f2 f933 	bl	8002234 <HAL_Delay>

  //configure and turn on slave 0
  mpu_mst_i2c_auto_read_config(IST8310_ADDRESS, IST8310_R_XL, 0x06);
 800ffce:	2206      	movs	r2, #6
 800ffd0:	2103      	movs	r1, #3
 800ffd2:	200e      	movs	r0, #14
 800ffd4:	f7ff ff27 	bl	800fe26 <mpu_mst_i2c_auto_read_config>
  MPU_DELAY(100);
 800ffd8:	2064      	movs	r0, #100	; 0x64
 800ffda:	f7f2 f92b 	bl	8002234 <HAL_Delay>
  return 0;
 800ffde:	2300      	movs	r3, #0
}
 800ffe0:	4618      	mov	r0, r3
 800ffe2:	bd80      	pop	{r7, pc}

0800ffe4 <ist8310_get_data>:

void ist8310_get_data(uint8_t *buff)
{
 800ffe4:	b580      	push	{r7, lr}
 800ffe6:	b082      	sub	sp, #8
 800ffe8:	af00      	add	r7, sp, #0
 800ffea:	6078      	str	r0, [r7, #4]
  mpu_read_regs(MPU6500_EXT_SENS_DATA_00, buff, 6);
 800ffec:	2206      	movs	r2, #6
 800ffee:	6879      	ldr	r1, [r7, #4]
 800fff0:	2049      	movs	r0, #73	; 0x49
 800fff2:	f7ff fe8d 	bl	800fd10 <mpu_read_regs>
}
 800fff6:	bf00      	nop
 800fff8:	3708      	adds	r7, #8
 800fffa:	46bd      	mov	sp, r7
 800fffc:	bd80      	pop	{r7, pc}
	...

08010000 <mpu_device_init>:
{
  *tmp = 21 + mpu_data.temp / 333.87f;;
}

uint8_t mpu_device_init(void)
{
 8010000:	b590      	push	{r4, r7, lr}
 8010002:	b087      	sub	sp, #28
 8010004:	af00      	add	r7, sp, #0
  // Reset the internal registers
  IST_ENABLE();
 8010006:	2201      	movs	r2, #1
 8010008:	2104      	movs	r1, #4
 801000a:	4829      	ldr	r0, [pc, #164]	; (80100b0 <mpu_device_init+0xb0>)
 801000c:	f7f3 fe76 	bl	8003cfc <HAL_GPIO_WritePin>

  mpu_write_reg(MPU6500_PWR_MGMT_1, 0x80);
 8010010:	2180      	movs	r1, #128	; 0x80
 8010012:	206b      	movs	r0, #107	; 0x6b
 8010014:	f7ff fe10 	bl	800fc38 <mpu_write_reg>
  MPU_DELAY(100);
 8010018:	2064      	movs	r0, #100	; 0x64
 801001a:	f7f2 f90b 	bl	8002234 <HAL_Delay>
  // Reset gyro/accel/temp digital signal path
  mpu_write_reg(MPU6500_SIGNAL_PATH_RESET, 0x07);
 801001e:	2107      	movs	r1, #7
 8010020:	2068      	movs	r0, #104	; 0x68
 8010022:	f7ff fe09 	bl	800fc38 <mpu_write_reg>
  MPU_DELAY(100);
 8010026:	2064      	movs	r0, #100	; 0x64
 8010028:	f7f2 f904 	bl	8002234 <HAL_Delay>

  if (MPU6500_ID != mpu_read_reg(MPU6500_WHO_AM_I))
 801002c:	2075      	movs	r0, #117	; 0x75
 801002e:	f7ff fe3b 	bl	800fca8 <mpu_read_reg>
 8010032:	4603      	mov	r3, r0
 8010034:	2b70      	cmp	r3, #112	; 0x70
 8010036:	d001      	beq.n	801003c <mpu_device_init+0x3c>
    return 1;
 8010038:	2301      	movs	r3, #1
 801003a:	e035      	b.n	80100a8 <mpu_device_init+0xa8>
  //0: 250hz; 1: 184hz; 2: 92hz; 3: 41hz; 4: 20hz; 5: 10hz; 6: 5hz; 7: 3600hz
  uint8_t MPU6500_Init_Data[7][2] = {
 801003c:	4b1d      	ldr	r3, [pc, #116]	; (80100b4 <mpu_device_init+0xb4>)
 801003e:	1d3c      	adds	r4, r7, #4
 8010040:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010042:	c407      	stmia	r4!, {r0, r1, r2}
 8010044:	8023      	strh	r3, [r4, #0]
      {MPU6500_USER_CTRL, 0x20},      // Enable the I2C Master I/F module
                                      // pins ES_DA and ES_SCL are isolated from
                                      // pins SDA/SDI and SCL/SCLK.
  };

  for (int i = 0; i < 7; i++)
 8010046:	2300      	movs	r3, #0
 8010048:	617b      	str	r3, [r7, #20]
 801004a:	e015      	b.n	8010078 <mpu_device_init+0x78>
  {
    mpu_write_reg(MPU6500_Init_Data[i][0], MPU6500_Init_Data[i][1]);
 801004c:	697b      	ldr	r3, [r7, #20]
 801004e:	005b      	lsls	r3, r3, #1
 8010050:	3318      	adds	r3, #24
 8010052:	443b      	add	r3, r7
 8010054:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8010058:	697b      	ldr	r3, [r7, #20]
 801005a:	005b      	lsls	r3, r3, #1
 801005c:	3318      	adds	r3, #24
 801005e:	443b      	add	r3, r7
 8010060:	f813 3c13 	ldrb.w	r3, [r3, #-19]
 8010064:	4619      	mov	r1, r3
 8010066:	4610      	mov	r0, r2
 8010068:	f7ff fde6 	bl	800fc38 <mpu_write_reg>
    MPU_DELAY(1);
 801006c:	2001      	movs	r0, #1
 801006e:	f7f2 f8e1 	bl	8002234 <HAL_Delay>
  for (int i = 0; i < 7; i++)
 8010072:	697b      	ldr	r3, [r7, #20]
 8010074:	3301      	adds	r3, #1
 8010076:	617b      	str	r3, [r7, #20]
 8010078:	697b      	ldr	r3, [r7, #20]
 801007a:	2b06      	cmp	r3, #6
 801007c:	dde6      	ble.n	801004c <mpu_device_init+0x4c>
  }

  ist8310_init();
 801007e:	f7ff ff28 	bl	800fed2 <ist8310_init>

  if (imu_cali.gyro_flag == 1)
 8010082:	4b0d      	ldr	r3, [pc, #52]	; (80100b8 <mpu_device_init+0xb8>)
 8010084:	781b      	ldrb	r3, [r3, #0]
 8010086:	2b01      	cmp	r3, #1
 8010088:	d101      	bne.n	801008e <mpu_device_init+0x8e>
  {
    get_mpu_gyro_offset();
 801008a:	f000 f817 	bl	80100bc <get_mpu_gyro_offset>
  }

  if (imu_cali.acc_flag == 1)
 801008e:	4b0a      	ldr	r3, [pc, #40]	; (80100b8 <mpu_device_init+0xb8>)
 8010090:	785b      	ldrb	r3, [r3, #1]
 8010092:	2b01      	cmp	r3, #1
 8010094:	d101      	bne.n	801009a <mpu_device_init+0x9a>
  {
    get_mpu_acc_offset();
 8010096:	f000 f893 	bl	80101c0 <get_mpu_acc_offset>
  }

  if (imu_cali.mag_flag == 1)
 801009a:	4b07      	ldr	r3, [pc, #28]	; (80100b8 <mpu_device_init+0xb8>)
 801009c:	789b      	ldrb	r3, [r3, #2]
 801009e:	2b01      	cmp	r3, #1
 80100a0:	d101      	bne.n	80100a6 <mpu_device_init+0xa6>
  {
    get_ist_mag_offset();
 80100a2:	f000 f913 	bl	80102cc <get_ist_mag_offset>
  }

  return 0;
 80100a6:	2300      	movs	r3, #0
}
 80100a8:	4618      	mov	r0, r3
 80100aa:	371c      	adds	r7, #28
 80100ac:	46bd      	mov	sp, r7
 80100ae:	bd90      	pop	{r4, r7, pc}
 80100b0:	40021000 	.word	0x40021000
 80100b4:	08015aa4 	.word	0x08015aa4
 80100b8:	20000100 	.word	0x20000100

080100bc <get_mpu_gyro_offset>:

static void get_mpu_gyro_offset(void)
{
 80100bc:	b580      	push	{r7, lr}
 80100be:	b082      	sub	sp, #8
 80100c0:	af00      	add	r7, sp, #0
  int i;
  for (i = 0; i < 300; i++)
 80100c2:	2300      	movs	r3, #0
 80100c4:	607b      	str	r3, [r7, #4]
 80100c6:	e043      	b.n	8010150 <get_mpu_gyro_offset+0x94>
  {
    mpu_read_regs(MPU6500_ACCEL_XOUT_H, mpu_buff, 14);
 80100c8:	220e      	movs	r2, #14
 80100ca:	4939      	ldr	r1, [pc, #228]	; (80101b0 <get_mpu_gyro_offset+0xf4>)
 80100cc:	203b      	movs	r0, #59	; 0x3b
 80100ce:	f7ff fe1f 	bl	800fd10 <mpu_read_regs>

    mpu_data.gx_offset += mpu_buff[8] << 8 | mpu_buff[9];
 80100d2:	4b38      	ldr	r3, [pc, #224]	; (80101b4 <get_mpu_gyro_offset+0xf8>)
 80100d4:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80100d8:	b29a      	uxth	r2, r3
 80100da:	4b35      	ldr	r3, [pc, #212]	; (80101b0 <get_mpu_gyro_offset+0xf4>)
 80100dc:	7a1b      	ldrb	r3, [r3, #8]
 80100de:	021b      	lsls	r3, r3, #8
 80100e0:	b219      	sxth	r1, r3
 80100e2:	4b33      	ldr	r3, [pc, #204]	; (80101b0 <get_mpu_gyro_offset+0xf4>)
 80100e4:	7a5b      	ldrb	r3, [r3, #9]
 80100e6:	b21b      	sxth	r3, r3
 80100e8:	430b      	orrs	r3, r1
 80100ea:	b21b      	sxth	r3, r3
 80100ec:	b29b      	uxth	r3, r3
 80100ee:	4413      	add	r3, r2
 80100f0:	b29b      	uxth	r3, r3
 80100f2:	b21a      	sxth	r2, r3
 80100f4:	4b2f      	ldr	r3, [pc, #188]	; (80101b4 <get_mpu_gyro_offset+0xf8>)
 80100f6:	835a      	strh	r2, [r3, #26]
    mpu_data.gy_offset += mpu_buff[10] << 8 | mpu_buff[11];
 80100f8:	4b2e      	ldr	r3, [pc, #184]	; (80101b4 <get_mpu_gyro_offset+0xf8>)
 80100fa:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80100fe:	b29a      	uxth	r2, r3
 8010100:	4b2b      	ldr	r3, [pc, #172]	; (80101b0 <get_mpu_gyro_offset+0xf4>)
 8010102:	7a9b      	ldrb	r3, [r3, #10]
 8010104:	021b      	lsls	r3, r3, #8
 8010106:	b219      	sxth	r1, r3
 8010108:	4b29      	ldr	r3, [pc, #164]	; (80101b0 <get_mpu_gyro_offset+0xf4>)
 801010a:	7adb      	ldrb	r3, [r3, #11]
 801010c:	b21b      	sxth	r3, r3
 801010e:	430b      	orrs	r3, r1
 8010110:	b21b      	sxth	r3, r3
 8010112:	b29b      	uxth	r3, r3
 8010114:	4413      	add	r3, r2
 8010116:	b29b      	uxth	r3, r3
 8010118:	b21a      	sxth	r2, r3
 801011a:	4b26      	ldr	r3, [pc, #152]	; (80101b4 <get_mpu_gyro_offset+0xf8>)
 801011c:	839a      	strh	r2, [r3, #28]
    mpu_data.gz_offset += mpu_buff[12] << 8 | mpu_buff[13];
 801011e:	4b25      	ldr	r3, [pc, #148]	; (80101b4 <get_mpu_gyro_offset+0xf8>)
 8010120:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8010124:	b29a      	uxth	r2, r3
 8010126:	4b22      	ldr	r3, [pc, #136]	; (80101b0 <get_mpu_gyro_offset+0xf4>)
 8010128:	7b1b      	ldrb	r3, [r3, #12]
 801012a:	021b      	lsls	r3, r3, #8
 801012c:	b219      	sxth	r1, r3
 801012e:	4b20      	ldr	r3, [pc, #128]	; (80101b0 <get_mpu_gyro_offset+0xf4>)
 8010130:	7b5b      	ldrb	r3, [r3, #13]
 8010132:	b21b      	sxth	r3, r3
 8010134:	430b      	orrs	r3, r1
 8010136:	b21b      	sxth	r3, r3
 8010138:	b29b      	uxth	r3, r3
 801013a:	4413      	add	r3, r2
 801013c:	b29b      	uxth	r3, r3
 801013e:	b21a      	sxth	r2, r3
 8010140:	4b1c      	ldr	r3, [pc, #112]	; (80101b4 <get_mpu_gyro_offset+0xf8>)
 8010142:	83da      	strh	r2, [r3, #30]

    MPU_DELAY(2);
 8010144:	2002      	movs	r0, #2
 8010146:	f7f2 f875 	bl	8002234 <HAL_Delay>
  for (i = 0; i < 300; i++)
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	3301      	adds	r3, #1
 801014e:	607b      	str	r3, [r7, #4]
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8010156:	dbb7      	blt.n	80100c8 <get_mpu_gyro_offset+0xc>
  }

  mpu_data.gx_offset = mpu_data.gx_offset / 300;
 8010158:	4b16      	ldr	r3, [pc, #88]	; (80101b4 <get_mpu_gyro_offset+0xf8>)
 801015a:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801015e:	4a16      	ldr	r2, [pc, #88]	; (80101b8 <get_mpu_gyro_offset+0xfc>)
 8010160:	fb82 1203 	smull	r1, r2, r2, r3
 8010164:	1152      	asrs	r2, r2, #5
 8010166:	17db      	asrs	r3, r3, #31
 8010168:	1ad3      	subs	r3, r2, r3
 801016a:	b21a      	sxth	r2, r3
 801016c:	4b11      	ldr	r3, [pc, #68]	; (80101b4 <get_mpu_gyro_offset+0xf8>)
 801016e:	835a      	strh	r2, [r3, #26]
  mpu_data.gy_offset = mpu_data.gy_offset / 300;
 8010170:	4b10      	ldr	r3, [pc, #64]	; (80101b4 <get_mpu_gyro_offset+0xf8>)
 8010172:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8010176:	4a10      	ldr	r2, [pc, #64]	; (80101b8 <get_mpu_gyro_offset+0xfc>)
 8010178:	fb82 1203 	smull	r1, r2, r2, r3
 801017c:	1152      	asrs	r2, r2, #5
 801017e:	17db      	asrs	r3, r3, #31
 8010180:	1ad3      	subs	r3, r2, r3
 8010182:	b21a      	sxth	r2, r3
 8010184:	4b0b      	ldr	r3, [pc, #44]	; (80101b4 <get_mpu_gyro_offset+0xf8>)
 8010186:	839a      	strh	r2, [r3, #28]
  mpu_data.gz_offset = mpu_data.gz_offset / 300;
 8010188:	4b0a      	ldr	r3, [pc, #40]	; (80101b4 <get_mpu_gyro_offset+0xf8>)
 801018a:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 801018e:	4a0a      	ldr	r2, [pc, #40]	; (80101b8 <get_mpu_gyro_offset+0xfc>)
 8010190:	fb82 1203 	smull	r1, r2, r2, r3
 8010194:	1152      	asrs	r2, r2, #5
 8010196:	17db      	asrs	r3, r3, #31
 8010198:	1ad3      	subs	r3, r2, r3
 801019a:	b21a      	sxth	r2, r3
 801019c:	4b05      	ldr	r3, [pc, #20]	; (80101b4 <get_mpu_gyro_offset+0xf8>)
 801019e:	83da      	strh	r2, [r3, #30]
  imu_cali.gyro_flag = 0;
 80101a0:	4b06      	ldr	r3, [pc, #24]	; (80101bc <get_mpu_gyro_offset+0x100>)
 80101a2:	2200      	movs	r2, #0
 80101a4:	701a      	strb	r2, [r3, #0]
}
 80101a6:	bf00      	nop
 80101a8:	3708      	adds	r7, #8
 80101aa:	46bd      	mov	sp, r7
 80101ac:	bd80      	pop	{r7, pc}
 80101ae:	bf00      	nop
 80101b0:	20006bf0 	.word	0x20006bf0
 80101b4:	20006c00 	.word	0x20006c00
 80101b8:	1b4e81b5 	.word	0x1b4e81b5
 80101bc:	20000100 	.word	0x20000100

080101c0 <get_mpu_acc_offset>:

static void get_mpu_acc_offset(void)
{
 80101c0:	b580      	push	{r7, lr}
 80101c2:	b082      	sub	sp, #8
 80101c4:	af00      	add	r7, sp, #0
  int i;
  for (i = 0; i < 300; i++)
 80101c6:	2300      	movs	r3, #0
 80101c8:	607b      	str	r3, [r7, #4]
 80101ca:	e047      	b.n	801025c <get_mpu_acc_offset+0x9c>
  {
    mpu_read_regs(MPU6500_ACCEL_XOUT_H, mpu_buff, 14);
 80101cc:	220e      	movs	r2, #14
 80101ce:	493b      	ldr	r1, [pc, #236]	; (80102bc <get_mpu_acc_offset+0xfc>)
 80101d0:	203b      	movs	r0, #59	; 0x3b
 80101d2:	f7ff fd9d 	bl	800fd10 <mpu_read_regs>

    mpu_data.ax_offset += mpu_buff[0] << 8 | mpu_buff[1];
 80101d6:	4b3a      	ldr	r3, [pc, #232]	; (80102c0 <get_mpu_acc_offset+0x100>)
 80101d8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80101dc:	b29a      	uxth	r2, r3
 80101de:	4b37      	ldr	r3, [pc, #220]	; (80102bc <get_mpu_acc_offset+0xfc>)
 80101e0:	781b      	ldrb	r3, [r3, #0]
 80101e2:	021b      	lsls	r3, r3, #8
 80101e4:	b219      	sxth	r1, r3
 80101e6:	4b35      	ldr	r3, [pc, #212]	; (80102bc <get_mpu_acc_offset+0xfc>)
 80101e8:	785b      	ldrb	r3, [r3, #1]
 80101ea:	b21b      	sxth	r3, r3
 80101ec:	430b      	orrs	r3, r1
 80101ee:	b21b      	sxth	r3, r3
 80101f0:	b29b      	uxth	r3, r3
 80101f2:	4413      	add	r3, r2
 80101f4:	b29b      	uxth	r3, r3
 80101f6:	b21a      	sxth	r2, r3
 80101f8:	4b31      	ldr	r3, [pc, #196]	; (80102c0 <get_mpu_acc_offset+0x100>)
 80101fa:	829a      	strh	r2, [r3, #20]
    mpu_data.ay_offset += mpu_buff[2] << 8 | mpu_buff[3];
 80101fc:	4b30      	ldr	r3, [pc, #192]	; (80102c0 <get_mpu_acc_offset+0x100>)
 80101fe:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8010202:	b29a      	uxth	r2, r3
 8010204:	4b2d      	ldr	r3, [pc, #180]	; (80102bc <get_mpu_acc_offset+0xfc>)
 8010206:	789b      	ldrb	r3, [r3, #2]
 8010208:	021b      	lsls	r3, r3, #8
 801020a:	b219      	sxth	r1, r3
 801020c:	4b2b      	ldr	r3, [pc, #172]	; (80102bc <get_mpu_acc_offset+0xfc>)
 801020e:	78db      	ldrb	r3, [r3, #3]
 8010210:	b21b      	sxth	r3, r3
 8010212:	430b      	orrs	r3, r1
 8010214:	b21b      	sxth	r3, r3
 8010216:	b29b      	uxth	r3, r3
 8010218:	4413      	add	r3, r2
 801021a:	b29b      	uxth	r3, r3
 801021c:	b21a      	sxth	r2, r3
 801021e:	4b28      	ldr	r3, [pc, #160]	; (80102c0 <get_mpu_acc_offset+0x100>)
 8010220:	82da      	strh	r2, [r3, #22]
    mpu_data.az_offset += mpu_buff[4] << 8 | mpu_buff[5] - 4096;
 8010222:	4b27      	ldr	r3, [pc, #156]	; (80102c0 <get_mpu_acc_offset+0x100>)
 8010224:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8010228:	b29a      	uxth	r2, r3
 801022a:	4b24      	ldr	r3, [pc, #144]	; (80102bc <get_mpu_acc_offset+0xfc>)
 801022c:	791b      	ldrb	r3, [r3, #4]
 801022e:	021b      	lsls	r3, r3, #8
 8010230:	b219      	sxth	r1, r3
 8010232:	4b22      	ldr	r3, [pc, #136]	; (80102bc <get_mpu_acc_offset+0xfc>)
 8010234:	795b      	ldrb	r3, [r3, #5]
 8010236:	b29b      	uxth	r3, r3
 8010238:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 801023c:	b29b      	uxth	r3, r3
 801023e:	b21b      	sxth	r3, r3
 8010240:	430b      	orrs	r3, r1
 8010242:	b21b      	sxth	r3, r3
 8010244:	b29b      	uxth	r3, r3
 8010246:	4413      	add	r3, r2
 8010248:	b29b      	uxth	r3, r3
 801024a:	b21a      	sxth	r2, r3
 801024c:	4b1c      	ldr	r3, [pc, #112]	; (80102c0 <get_mpu_acc_offset+0x100>)
 801024e:	831a      	strh	r2, [r3, #24]

    MPU_DELAY(2);
 8010250:	2002      	movs	r0, #2
 8010252:	f7f1 ffef 	bl	8002234 <HAL_Delay>
  for (i = 0; i < 300; i++)
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	3301      	adds	r3, #1
 801025a:	607b      	str	r3, [r7, #4]
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8010262:	dbb3      	blt.n	80101cc <get_mpu_acc_offset+0xc>
  }

  mpu_data.ax_offset = mpu_data.ax_offset / 300;
 8010264:	4b16      	ldr	r3, [pc, #88]	; (80102c0 <get_mpu_acc_offset+0x100>)
 8010266:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801026a:	4a16      	ldr	r2, [pc, #88]	; (80102c4 <get_mpu_acc_offset+0x104>)
 801026c:	fb82 1203 	smull	r1, r2, r2, r3
 8010270:	1152      	asrs	r2, r2, #5
 8010272:	17db      	asrs	r3, r3, #31
 8010274:	1ad3      	subs	r3, r2, r3
 8010276:	b21a      	sxth	r2, r3
 8010278:	4b11      	ldr	r3, [pc, #68]	; (80102c0 <get_mpu_acc_offset+0x100>)
 801027a:	829a      	strh	r2, [r3, #20]
  mpu_data.ay_offset = mpu_data.ay_offset / 300;
 801027c:	4b10      	ldr	r3, [pc, #64]	; (80102c0 <get_mpu_acc_offset+0x100>)
 801027e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8010282:	4a10      	ldr	r2, [pc, #64]	; (80102c4 <get_mpu_acc_offset+0x104>)
 8010284:	fb82 1203 	smull	r1, r2, r2, r3
 8010288:	1152      	asrs	r2, r2, #5
 801028a:	17db      	asrs	r3, r3, #31
 801028c:	1ad3      	subs	r3, r2, r3
 801028e:	b21a      	sxth	r2, r3
 8010290:	4b0b      	ldr	r3, [pc, #44]	; (80102c0 <get_mpu_acc_offset+0x100>)
 8010292:	82da      	strh	r2, [r3, #22]
  mpu_data.az_offset = mpu_data.az_offset / 300;
 8010294:	4b0a      	ldr	r3, [pc, #40]	; (80102c0 <get_mpu_acc_offset+0x100>)
 8010296:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801029a:	4a0a      	ldr	r2, [pc, #40]	; (80102c4 <get_mpu_acc_offset+0x104>)
 801029c:	fb82 1203 	smull	r1, r2, r2, r3
 80102a0:	1152      	asrs	r2, r2, #5
 80102a2:	17db      	asrs	r3, r3, #31
 80102a4:	1ad3      	subs	r3, r2, r3
 80102a6:	b21a      	sxth	r2, r3
 80102a8:	4b05      	ldr	r3, [pc, #20]	; (80102c0 <get_mpu_acc_offset+0x100>)
 80102aa:	831a      	strh	r2, [r3, #24]

  imu_cali.acc_flag = 0;
 80102ac:	4b06      	ldr	r3, [pc, #24]	; (80102c8 <get_mpu_acc_offset+0x108>)
 80102ae:	2200      	movs	r2, #0
 80102b0:	705a      	strb	r2, [r3, #1]
}
 80102b2:	bf00      	nop
 80102b4:	3708      	adds	r7, #8
 80102b6:	46bd      	mov	sp, r7
 80102b8:	bd80      	pop	{r7, pc}
 80102ba:	bf00      	nop
 80102bc:	20006bf0 	.word	0x20006bf0
 80102c0:	20006c00 	.word	0x20006c00
 80102c4:	1b4e81b5 	.word	0x1b4e81b5
 80102c8:	20000100 	.word	0x20000100

080102cc <get_ist_mag_offset>:

static void get_ist_mag_offset(void)
{
 80102cc:	b580      	push	{r7, lr}
 80102ce:	b086      	sub	sp, #24
 80102d0:	af00      	add	r7, sp, #0
  int16_t mag_max[3], mag_min[3];
  int i;
  for (i = 0; i < 5000; i++)
 80102d2:	2300      	movs	r3, #0
 80102d4:	617b      	str	r3, [r7, #20]
 80102d6:	e062      	b.n	801039e <get_ist_mag_offset+0xd2>
  {
    ist8310_get_data((uint8_t *)&mpu_data.mx);
 80102d8:	4856      	ldr	r0, [pc, #344]	; (8010434 <get_ist_mag_offset+0x168>)
 80102da:	f7ff fe83 	bl	800ffe4 <ist8310_get_data>
    if ((abs(mpu_data.mx) < 400) && (abs(mpu_data.my) < 400) && (abs(mpu_data.mz) < 400))
 80102de:	4b56      	ldr	r3, [pc, #344]	; (8010438 <get_ist_mag_offset+0x16c>)
 80102e0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	bfb8      	it	lt
 80102e8:	425b      	neglt	r3, r3
 80102ea:	b29b      	uxth	r3, r3
 80102ec:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80102f0:	d24f      	bcs.n	8010392 <get_ist_mag_offset+0xc6>
 80102f2:	4b51      	ldr	r3, [pc, #324]	; (8010438 <get_ist_mag_offset+0x16c>)
 80102f4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	bfb8      	it	lt
 80102fc:	425b      	neglt	r3, r3
 80102fe:	b29b      	uxth	r3, r3
 8010300:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8010304:	d245      	bcs.n	8010392 <get_ist_mag_offset+0xc6>
 8010306:	4b4c      	ldr	r3, [pc, #304]	; (8010438 <get_ist_mag_offset+0x16c>)
 8010308:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801030c:	2b00      	cmp	r3, #0
 801030e:	bfb8      	it	lt
 8010310:	425b      	neglt	r3, r3
 8010312:	b29b      	uxth	r3, r3
 8010314:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8010318:	d23b      	bcs.n	8010392 <get_ist_mag_offset+0xc6>
    {
      mag_max[0] = VAL_MAX(mag_max[0], mpu_data.mx);
 801031a:	4b47      	ldr	r3, [pc, #284]	; (8010438 <get_ist_mag_offset+0x16c>)
 801031c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8010320:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8010324:	4293      	cmp	r3, r2
 8010326:	bfb8      	it	lt
 8010328:	4613      	movlt	r3, r2
 801032a:	b21b      	sxth	r3, r3
 801032c:	81bb      	strh	r3, [r7, #12]
      mag_min[0] = VAL_MIN(mag_min[0], mpu_data.mx);
 801032e:	4b42      	ldr	r3, [pc, #264]	; (8010438 <get_ist_mag_offset+0x16c>)
 8010330:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8010334:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8010338:	4293      	cmp	r3, r2
 801033a:	bfa8      	it	ge
 801033c:	4613      	movge	r3, r2
 801033e:	b21b      	sxth	r3, r3
 8010340:	80bb      	strh	r3, [r7, #4]

      mag_max[1] = VAL_MAX(mag_max[1], mpu_data.my);
 8010342:	4b3d      	ldr	r3, [pc, #244]	; (8010438 <get_ist_mag_offset+0x16c>)
 8010344:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8010348:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801034c:	4293      	cmp	r3, r2
 801034e:	bfb8      	it	lt
 8010350:	4613      	movlt	r3, r2
 8010352:	b21b      	sxth	r3, r3
 8010354:	81fb      	strh	r3, [r7, #14]
      mag_min[1] = VAL_MIN(mag_min[1], mpu_data.my);
 8010356:	4b38      	ldr	r3, [pc, #224]	; (8010438 <get_ist_mag_offset+0x16c>)
 8010358:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 801035c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010360:	4293      	cmp	r3, r2
 8010362:	bfa8      	it	ge
 8010364:	4613      	movge	r3, r2
 8010366:	b21b      	sxth	r3, r3
 8010368:	80fb      	strh	r3, [r7, #6]

      mag_max[2] = VAL_MAX(mag_max[2], mpu_data.mz);
 801036a:	4b33      	ldr	r3, [pc, #204]	; (8010438 <get_ist_mag_offset+0x16c>)
 801036c:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8010370:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8010374:	4293      	cmp	r3, r2
 8010376:	bfb8      	it	lt
 8010378:	4613      	movlt	r3, r2
 801037a:	b21b      	sxth	r3, r3
 801037c:	823b      	strh	r3, [r7, #16]
      mag_min[2] = VAL_MIN(mag_min[2], mpu_data.mz);
 801037e:	4b2e      	ldr	r3, [pc, #184]	; (8010438 <get_ist_mag_offset+0x16c>)
 8010380:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8010384:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8010388:	4293      	cmp	r3, r2
 801038a:	bfa8      	it	ge
 801038c:	4613      	movge	r3, r2
 801038e:	b21b      	sxth	r3, r3
 8010390:	813b      	strh	r3, [r7, #8]
    }
    MPU_DELAY(2);
 8010392:	2002      	movs	r0, #2
 8010394:	f7f1 ff4e 	bl	8002234 <HAL_Delay>
  for (i = 0; i < 5000; i++)
 8010398:	697b      	ldr	r3, [r7, #20]
 801039a:	3301      	adds	r3, #1
 801039c:	617b      	str	r3, [r7, #20]
 801039e:	697b      	ldr	r3, [r7, #20]
 80103a0:	f241 3287 	movw	r2, #4999	; 0x1387
 80103a4:	4293      	cmp	r3, r2
 80103a6:	dd97      	ble.n	80102d8 <get_ist_mag_offset+0xc>
  }
  mpu_data.mx_offset = (int16_t)((mag_max[0] + mag_min[0]) * 0.5f);
 80103a8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80103ac:	461a      	mov	r2, r3
 80103ae:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80103b2:	4413      	add	r3, r2
 80103b4:	ee07 3a90 	vmov	s15, r3
 80103b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80103bc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80103c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80103c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80103c8:	ee17 3a90 	vmov	r3, s15
 80103cc:	b21a      	sxth	r2, r3
 80103ce:	4b1a      	ldr	r3, [pc, #104]	; (8010438 <get_ist_mag_offset+0x16c>)
 80103d0:	841a      	strh	r2, [r3, #32]
  mpu_data.my_offset = (int16_t)((mag_max[1] + mag_min[1]) * 0.5f);
 80103d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80103d6:	461a      	mov	r2, r3
 80103d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80103dc:	4413      	add	r3, r2
 80103de:	ee07 3a90 	vmov	s15, r3
 80103e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80103e6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80103ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80103ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80103f2:	ee17 3a90 	vmov	r3, s15
 80103f6:	b21a      	sxth	r2, r3
 80103f8:	4b0f      	ldr	r3, [pc, #60]	; (8010438 <get_ist_mag_offset+0x16c>)
 80103fa:	845a      	strh	r2, [r3, #34]	; 0x22
  mpu_data.mz_offset = (int16_t)((mag_max[2] + mag_min[2]) * 0.5f);
 80103fc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8010400:	461a      	mov	r2, r3
 8010402:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8010406:	4413      	add	r3, r2
 8010408:	ee07 3a90 	vmov	s15, r3
 801040c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010410:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8010414:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010418:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801041c:	ee17 3a90 	vmov	r3, s15
 8010420:	b21a      	sxth	r2, r3
 8010422:	4b05      	ldr	r3, [pc, #20]	; (8010438 <get_ist_mag_offset+0x16c>)
 8010424:	849a      	strh	r2, [r3, #36]	; 0x24

  imu_cali.mag_flag = 0;
 8010426:	4b05      	ldr	r3, [pc, #20]	; (801043c <get_ist_mag_offset+0x170>)
 8010428:	2200      	movs	r2, #0
 801042a:	709a      	strb	r2, [r3, #2]
}
 801042c:	bf00      	nop
 801042e:	3718      	adds	r7, #24
 8010430:	46bd      	mov	sp, r7
 8010432:	bd80      	pop	{r7, pc}
 8010434:	20006c0c 	.word	0x20006c0c
 8010438:	20006c00 	.word	0x20006c00
 801043c:	20000100 	.word	0x20000100

08010440 <pwm_device_init>:
#include "tim.h"
#include "sys.h"
#include "drv_io.h"

void pwm_device_init(void)
{
 8010440:	b580      	push	{r7, lr}
 8010442:	af00      	add	r7, sp, #0
  HAL_TIM_PWM_Start(&htim3,  TIM_CHANNEL_2); // ctrl imu temperature
 8010444:	2104      	movs	r1, #4
 8010446:	4808      	ldr	r0, [pc, #32]	; (8010468 <pwm_device_init+0x28>)
 8010448:	f7f5 ff8c 	bl	8006364 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1); // beep
 801044c:	2100      	movs	r1, #0
 801044e:	4807      	ldr	r0, [pc, #28]	; (801046c <pwm_device_init+0x2c>)
 8010450:	f7f5 ff88 	bl	8006364 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,  TIM_CHANNEL_1); // friction wheel
 8010454:	2100      	movs	r1, #0
 8010456:	4806      	ldr	r0, [pc, #24]	; (8010470 <pwm_device_init+0x30>)
 8010458:	f7f5 ff84 	bl	8006364 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,  TIM_CHANNEL_4);
 801045c:	210c      	movs	r1, #12
 801045e:	4804      	ldr	r0, [pc, #16]	; (8010470 <pwm_device_init+0x30>)
 8010460:	f7f5 ff80 	bl	8006364 <HAL_TIM_PWM_Start>
}
 8010464:	bf00      	nop
 8010466:	bd80      	pop	{r7, pc}
 8010468:	20000344 	.word	0x20000344
 801046c:	2000038c 	.word	0x2000038c
 8010470:	200002b4 	.word	0x200002b4

08010474 <beep_set_times>:
}

static uint8_t beep_times;

int32_t beep_set_times(uint8_t times)
{
 8010474:	b480      	push	{r7}
 8010476:	b083      	sub	sp, #12
 8010478:	af00      	add	r7, sp, #0
 801047a:	4603      	mov	r3, r0
 801047c:	71fb      	strb	r3, [r7, #7]
  beep_times = times;
 801047e:	4a05      	ldr	r2, [pc, #20]	; (8010494 <beep_set_times+0x20>)
 8010480:	79fb      	ldrb	r3, [r7, #7]
 8010482:	7013      	strb	r3, [r2, #0]
  return 0;
 8010484:	2300      	movs	r3, #0
}
 8010486:	4618      	mov	r0, r3
 8010488:	370c      	adds	r7, #12
 801048a:	46bd      	mov	sp, r7
 801048c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010490:	4770      	bx	lr
 8010492:	bf00      	nop
 8010494:	20006c26 	.word	0x20006c26

08010498 <led_toggle_300ms>:

  return 0;
}

int32_t led_toggle_300ms(void *argc)
{
 8010498:	b580      	push	{r7, lr}
 801049a:	b082      	sub	sp, #8
 801049c:	af00      	add	r7, sp, #0
 801049e:	6078      	str	r0, [r7, #4]
  static uint32_t led_tick;

  if (get_time_ms() - led_tick > 300)
 80104a0:	f7ff f95e 	bl	800f760 <get_time_ms>
 80104a4:	4602      	mov	r2, r0
 80104a6:	4b0a      	ldr	r3, [pc, #40]	; (80104d0 <led_toggle_300ms+0x38>)
 80104a8:	681b      	ldr	r3, [r3, #0]
 80104aa:	1ad3      	subs	r3, r2, r3
 80104ac:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80104b0:	d909      	bls.n	80104c6 <led_toggle_300ms+0x2e>
  {
    LED_GREEN_TOGGLE();
 80104b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80104b6:	4807      	ldr	r0, [pc, #28]	; (80104d4 <led_toggle_300ms+0x3c>)
 80104b8:	f7f3 fc39 	bl	8003d2e <HAL_GPIO_TogglePin>
    led_tick = get_time_ms();
 80104bc:	f7ff f950 	bl	800f760 <get_time_ms>
 80104c0:	4603      	mov	r3, r0
 80104c2:	4a03      	ldr	r2, [pc, #12]	; (80104d0 <led_toggle_300ms+0x38>)
 80104c4:	6013      	str	r3, [r2, #0]
  }

  return 0;
 80104c6:	2300      	movs	r3, #0
}
 80104c8:	4618      	mov	r0, r3
 80104ca:	3708      	adds	r7, #8
 80104cc:	46bd      	mov	sp, r7
 80104ce:	bd80      	pop	{r7, pc}
 80104d0:	20006c28 	.word	0x20006c28
 80104d4:	40021400 	.word	0x40021400

080104d8 <HAL_UART_RxHalfCpltCallback>:
//  usart_rx_callback_register(&usart3_manage_obj, fun);
//  return;
//}

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80104d8:	b580      	push	{r7, lr}
 80104da:	b082      	sub	sp, #8
 80104dc:	af00      	add	r7, sp, #0
 80104de:	6078      	str	r0, [r7, #4]
//  if (huart == &huart3)
//  {
//    usart_rec_to_buff(&usart3_manage_obj, INTERRUPT_TYPE_DMA_HALF);
//  }
//  else if (huart == &huart6)
  if (huart == &huart6)
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	4a06      	ldr	r2, [pc, #24]	; (80104fc <HAL_UART_RxHalfCpltCallback+0x24>)
 80104e4:	4293      	cmp	r3, r2
 80104e6:	d104      	bne.n	80104f2 <HAL_UART_RxHalfCpltCallback+0x1a>
  {
    usart_rec_to_buff(&usart6_manage_obj, INTERRUPT_TYPE_DMA_HALF);
 80104e8:	2101      	movs	r1, #1
 80104ea:	4805      	ldr	r0, [pc, #20]	; (8010500 <HAL_UART_RxHalfCpltCallback+0x28>)
 80104ec:	f000 f8b1 	bl	8010652 <usart_rec_to_buff>
  }

  return;
 80104f0:	bf00      	nop
 80104f2:	bf00      	nop
}
 80104f4:	3708      	adds	r7, #8
 80104f6:	46bd      	mov	sp, r7
 80104f8:	bd80      	pop	{r7, pc}
 80104fa:	bf00      	nop
 80104fc:	2000041c 	.word	0x2000041c
 8010500:	2000742c 	.word	0x2000742c

08010504 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8010504:	b580      	push	{r7, lr}
 8010506:	b082      	sub	sp, #8
 8010508:	af00      	add	r7, sp, #0
 801050a:	6078      	str	r0, [r7, #4]
//  if (huart == &huart3)
//  {
//    usart_rec_to_buff(&usart3_manage_obj, INTERRUPT_TYPE_DMA_ALL);
//  }
//  else if (huart == &huart6)
  if (huart == &huart6)
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	4a06      	ldr	r2, [pc, #24]	; (8010528 <HAL_UART_RxCpltCallback+0x24>)
 8010510:	4293      	cmp	r3, r2
 8010512:	d104      	bne.n	801051e <HAL_UART_RxCpltCallback+0x1a>
  {
    usart_rec_to_buff(&usart6_manage_obj, INTERRUPT_TYPE_DMA_ALL);
 8010514:	2102      	movs	r1, #2
 8010516:	4805      	ldr	r0, [pc, #20]	; (801052c <HAL_UART_RxCpltCallback+0x28>)
 8010518:	f000 f89b 	bl	8010652 <usart_rec_to_buff>
  }

  return;
 801051c:	bf00      	nop
 801051e:	bf00      	nop
}
 8010520:	3708      	adds	r7, #8
 8010522:	46bd      	mov	sp, r7
 8010524:	bd80      	pop	{r7, pc}
 8010526:	bf00      	nop
 8010528:	2000041c 	.word	0x2000041c
 801052c:	2000742c 	.word	0x2000742c

08010530 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8010530:	b580      	push	{r7, lr}
 8010532:	b082      	sub	sp, #8
 8010534:	af00      	add	r7, sp, #0
 8010536:	6078      	str	r0, [r7, #4]
//  if (huart == &huart3)
//  {
//    usart_transmit_hook(&usart3_manage_obj);
//  }
//  else if (huart == &huart6)
  if (huart == &huart6)
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	4a05      	ldr	r2, [pc, #20]	; (8010550 <HAL_UART_TxCpltCallback+0x20>)
 801053c:	4293      	cmp	r3, r2
 801053e:	d103      	bne.n	8010548 <HAL_UART_TxCpltCallback+0x18>
  {
    usart_transmit_hook(&usart6_manage_obj);
 8010540:	4804      	ldr	r0, [pc, #16]	; (8010554 <HAL_UART_TxCpltCallback+0x24>)
 8010542:	f000 f84f 	bl	80105e4 <usart_transmit_hook>
  }

  return;
 8010546:	bf00      	nop
 8010548:	bf00      	nop
}
 801054a:	3708      	adds	r7, #8
 801054c:	46bd      	mov	sp, r7
 801054e:	bd80      	pop	{r7, pc}
 8010550:	2000041c 	.word	0x2000041c
 8010554:	2000742c 	.word	0x2000742c

08010558 <usart6_manage_init>:
//  HAL_UART_Receive_DMA(&huart3, usart3_rx_buff, USART3_RX_BUFFER_SIZE);
//  __HAL_UART_ENABLE_IT(&huart3, UART_IT_IDLE);
//}

void usart6_manage_init(void)
{
 8010558:	b580      	push	{r7, lr}
 801055a:	af00      	add	r7, sp, #0
  usart6_manage_obj.rx_buffer = usart6_rx_buff;
 801055c:	4b1a      	ldr	r3, [pc, #104]	; (80105c8 <usart6_manage_init+0x70>)
 801055e:	4a1b      	ldr	r2, [pc, #108]	; (80105cc <usart6_manage_init+0x74>)
 8010560:	60da      	str	r2, [r3, #12]
  usart6_manage_obj.rx_buffer_size = USART6_RX_BUFFER_SIZE;
 8010562:	4b19      	ldr	r3, [pc, #100]	; (80105c8 <usart6_manage_init+0x70>)
 8010564:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010568:	811a      	strh	r2, [r3, #8]
  usart6_manage_obj.dma_h = &hdma_usart6_rx;
 801056a:	4b17      	ldr	r3, [pc, #92]	; (80105c8 <usart6_manage_init+0x70>)
 801056c:	4a18      	ldr	r2, [pc, #96]	; (80105d0 <usart6_manage_init+0x78>)
 801056e:	605a      	str	r2, [r3, #4]
  usart6_manage_obj.uart_h = &huart6;
 8010570:	4b15      	ldr	r3, [pc, #84]	; (80105c8 <usart6_manage_init+0x70>)
 8010572:	4a18      	ldr	r2, [pc, #96]	; (80105d4 <usart6_manage_init+0x7c>)
 8010574:	601a      	str	r2, [r3, #0]
  usart6_manage_obj.tx_fifo_buffer = usart6_tx_fifo_buff;
 8010576:	4b14      	ldr	r3, [pc, #80]	; (80105c8 <usart6_manage_init+0x70>)
 8010578:	4a17      	ldr	r2, [pc, #92]	; (80105d8 <usart6_manage_init+0x80>)
 801057a:	639a      	str	r2, [r3, #56]	; 0x38
  usart6_manage_obj.tx_fifo_size = USART6_TX_FIFO_SIZE;
 801057c:	4b12      	ldr	r3, [pc, #72]	; (80105c8 <usart6_manage_init+0x70>)
 801057e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010582:	879a      	strh	r2, [r3, #60]	; 0x3c
  usart6_manage_obj.tx_buffer_size = USART6_TX_BUFFER_SIZE;
 8010584:	4b10      	ldr	r3, [pc, #64]	; (80105c8 <usart6_manage_init+0x70>)
 8010586:	f44f 7200 	mov.w	r2, #512	; 0x200
 801058a:	839a      	strh	r2, [r3, #28]
  usart6_manage_obj.tx_buffer = usart6_tx_buff;
 801058c:	4b0e      	ldr	r3, [pc, #56]	; (80105c8 <usart6_manage_init+0x70>)
 801058e:	4a13      	ldr	r2, [pc, #76]	; (80105dc <usart6_manage_init+0x84>)
 8010590:	619a      	str	r2, [r3, #24]
  usart6_manage_obj.is_sending = 0;
 8010592:	4b0d      	ldr	r3, [pc, #52]	; (80105c8 <usart6_manage_init+0x70>)
 8010594:	2200      	movs	r2, #0
 8010596:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  fifo_s_init(&(usart6_manage_obj.tx_fifo), usart6_tx_fifo_buff, USART6_TX_FIFO_SIZE);
 801059a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801059e:	490e      	ldr	r1, [pc, #56]	; (80105d8 <usart6_manage_init+0x80>)
 80105a0:	480f      	ldr	r0, [pc, #60]	; (80105e0 <usart6_manage_init+0x88>)
 80105a2:	f003 f847 	bl	8013634 <fifo_s_init>

  HAL_UART_Receive_DMA(&huart6, usart6_rx_buff, USART6_RX_BUFFER_SIZE);
 80105a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80105aa:	4908      	ldr	r1, [pc, #32]	; (80105cc <usart6_manage_init+0x74>)
 80105ac:	4809      	ldr	r0, [pc, #36]	; (80105d4 <usart6_manage_init+0x7c>)
 80105ae:	f7f6 ff01 	bl	80073b4 <HAL_UART_Receive_DMA>
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_IDLE);
 80105b2:	4b08      	ldr	r3, [pc, #32]	; (80105d4 <usart6_manage_init+0x7c>)
 80105b4:	681b      	ldr	r3, [r3, #0]
 80105b6:	68da      	ldr	r2, [r3, #12]
 80105b8:	4b06      	ldr	r3, [pc, #24]	; (80105d4 <usart6_manage_init+0x7c>)
 80105ba:	681b      	ldr	r3, [r3, #0]
 80105bc:	f042 0210 	orr.w	r2, r2, #16
 80105c0:	60da      	str	r2, [r3, #12]
}
 80105c2:	bf00      	nop
 80105c4:	bd80      	pop	{r7, pc}
 80105c6:	bf00      	nop
 80105c8:	2000742c 	.word	0x2000742c
 80105cc:	20006c2c 	.word	0x20006c2c
 80105d0:	20000464 	.word	0x20000464
 80105d4:	2000041c 	.word	0x2000041c
 80105d8:	2000702c 	.word	0x2000702c
 80105dc:	20006e2c 	.word	0x20006e2c
 80105e0:	2000744c 	.word	0x2000744c

080105e4 <usart_transmit_hook>:

  return ERR_NORAML;
}

static void usart_transmit_hook(usart_manage_obj_t *m_obj)
{
 80105e4:	b580      	push	{r7, lr}
 80105e6:	b084      	sub	sp, #16
 80105e8:	af00      	add	r7, sp, #0
 80105ea:	6078      	str	r0, [r7, #4]
  uint16_t fifo_data_num = 0;
 80105ec:	2300      	movs	r3, #0
 80105ee:	81bb      	strh	r3, [r7, #12]
  uint16_t send_num = 0;
 80105f0:	2300      	movs	r3, #0
 80105f2:	81fb      	strh	r3, [r7, #14]

  fifo_data_num = m_obj->tx_fifo.used_num;
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105f8:	81bb      	strh	r3, [r7, #12]

  if (fifo_data_num != 0)
 80105fa:	89bb      	ldrh	r3, [r7, #12]
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d020      	beq.n	8010642 <usart_transmit_hook+0x5e>
  {
    if (fifo_data_num < m_obj->tx_buffer_size)
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	8b9b      	ldrh	r3, [r3, #28]
 8010604:	89ba      	ldrh	r2, [r7, #12]
 8010606:	429a      	cmp	r2, r3
 8010608:	d202      	bcs.n	8010610 <usart_transmit_hook+0x2c>
    {
      send_num = fifo_data_num;
 801060a:	89bb      	ldrh	r3, [r7, #12]
 801060c:	81fb      	strh	r3, [r7, #14]
 801060e:	e002      	b.n	8010616 <usart_transmit_hook+0x32>
    }
    else
    {
      send_num = m_obj->tx_buffer_size;
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	8b9b      	ldrh	r3, [r3, #28]
 8010614:	81fb      	strh	r3, [r7, #14]
    }
    fifo_s_gets(&(m_obj->tx_fifo), (char *)(m_obj->tx_buffer), send_num);
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	f103 0020 	add.w	r0, r3, #32
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	699b      	ldr	r3, [r3, #24]
 8010620:	89fa      	ldrh	r2, [r7, #14]
 8010622:	4619      	mov	r1, r3
 8010624:	f003 f945 	bl	80138b2 <fifo_s_gets>
    m_obj->is_sending = 1;
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	2201      	movs	r2, #1
 801062c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_UART_Transmit_DMA(m_obj->uart_h, m_obj->tx_buffer, send_num);
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	6818      	ldr	r0, [r3, #0]
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	699b      	ldr	r3, [r3, #24]
 8010638:	89fa      	ldrh	r2, [r7, #14]
 801063a:	4619      	mov	r1, r3
 801063c:	f7f6 fe4a 	bl	80072d4 <HAL_UART_Transmit_DMA>
  }
  else
  {
    m_obj->is_sending = 0;
  }
  return;
 8010640:	e004      	b.n	801064c <usart_transmit_hook+0x68>
    m_obj->is_sending = 0;
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	2200      	movs	r2, #0
 8010646:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  return;
 801064a:	bf00      	nop
}
 801064c:	3710      	adds	r7, #16
 801064e:	46bd      	mov	sp, r7
 8010650:	bd80      	pop	{r7, pc}

08010652 <usart_rec_to_buff>:

static void usart_rec_to_buff(usart_manage_obj_t *m_obj, interrput_type int_type)
{
 8010652:	b580      	push	{r7, lr}
 8010654:	b088      	sub	sp, #32
 8010656:	af00      	add	r7, sp, #0
 8010658:	6078      	str	r0, [r7, #4]
 801065a:	460b      	mov	r3, r1
 801065c:	70fb      	strb	r3, [r7, #3]
  uint16_t read_end_ptr = 0;
 801065e:	2300      	movs	r3, #0
 8010660:	83fb      	strh	r3, [r7, #30]
  uint16_t read_length = 0;
 8010662:	2300      	movs	r3, #0
 8010664:	83bb      	strh	r3, [r7, #28]
  uint16_t read_success_length = 0;
 8010666:	2300      	movs	r3, #0
 8010668:	837b      	strh	r3, [r7, #26]
  uint16_t read_start_ptr = m_obj->read_start_index;
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	8a1b      	ldrh	r3, [r3, #16]
 801066e:	833b      	strh	r3, [r7, #24]
  uint8_t *pdata = m_obj->rx_buffer;
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	68db      	ldr	r3, [r3, #12]
 8010674:	617b      	str	r3, [r7, #20]

  UNUSED(read_success_length);

  uint16_t buff_left = m_obj->dma_h->Instance->NDTR;
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	685b      	ldr	r3, [r3, #4]
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	685b      	ldr	r3, [r3, #4]
 801067e:	827b      	strh	r3, [r7, #18]

  if (int_type == INTERRUPT_TYPE_UART)
 8010680:	78fb      	ldrb	r3, [r7, #3]
 8010682:	2b00      	cmp	r3, #0
 8010684:	d104      	bne.n	8010690 <usart_rec_to_buff+0x3e>
  {
    read_end_ptr = m_obj->rx_buffer_size - buff_left;
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	891a      	ldrh	r2, [r3, #8]
 801068a:	8a7b      	ldrh	r3, [r7, #18]
 801068c:	1ad3      	subs	r3, r2, r3
 801068e:	83fb      	strh	r3, [r7, #30]
  }

  if (int_type == INTERRUPT_TYPE_DMA_HALF)
 8010690:	78fb      	ldrb	r3, [r7, #3]
 8010692:	2b01      	cmp	r3, #1
 8010694:	d103      	bne.n	801069e <usart_rec_to_buff+0x4c>
  {
    read_end_ptr = m_obj->rx_buffer_size / 2;
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	891b      	ldrh	r3, [r3, #8]
 801069a:	085b      	lsrs	r3, r3, #1
 801069c:	83fb      	strh	r3, [r7, #30]
  }

  if (int_type == INTERRUPT_TYPE_DMA_ALL)
 801069e:	78fb      	ldrb	r3, [r7, #3]
 80106a0:	2b02      	cmp	r3, #2
 80106a2:	d102      	bne.n	80106aa <usart_rec_to_buff+0x58>
  {
    read_end_ptr = m_obj->rx_buffer_size;
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	891b      	ldrh	r3, [r3, #8]
 80106a8:	83fb      	strh	r3, [r7, #30]
  }

  read_length = read_end_ptr - m_obj->read_start_index;
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	8a1b      	ldrh	r3, [r3, #16]
 80106ae:	8bfa      	ldrh	r2, [r7, #30]
 80106b0:	1ad3      	subs	r3, r2, r3
 80106b2:	83bb      	strh	r3, [r7, #28]

  if (m_obj->call_back_f != NULL)
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	695b      	ldr	r3, [r3, #20]
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d00b      	beq.n	80106d4 <usart_rec_to_buff+0x82>
  {
    uint8_t *read_ptr = pdata + read_start_ptr;
 80106bc:	8b3b      	ldrh	r3, [r7, #24]
 80106be:	697a      	ldr	r2, [r7, #20]
 80106c0:	4413      	add	r3, r2
 80106c2:	60fb      	str	r3, [r7, #12]
    read_success_length = m_obj->call_back_f(read_ptr, read_length);
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	695b      	ldr	r3, [r3, #20]
 80106c8:	8bba      	ldrh	r2, [r7, #28]
 80106ca:	4611      	mov	r1, r2
 80106cc:	68f8      	ldr	r0, [r7, #12]
 80106ce:	4798      	blx	r3
 80106d0:	4603      	mov	r3, r0
 80106d2:	837b      	strh	r3, [r7, #26]
  }

  m_obj->read_start_index = (m_obj->read_start_index + read_length) % (m_obj->rx_buffer_size);
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	8a1b      	ldrh	r3, [r3, #16]
 80106d8:	461a      	mov	r2, r3
 80106da:	8bbb      	ldrh	r3, [r7, #28]
 80106dc:	4413      	add	r3, r2
 80106de:	687a      	ldr	r2, [r7, #4]
 80106e0:	8912      	ldrh	r2, [r2, #8]
 80106e2:	fb93 f1f2 	sdiv	r1, r3, r2
 80106e6:	fb01 f202 	mul.w	r2, r1, r2
 80106ea:	1a9b      	subs	r3, r3, r2
 80106ec:	b29a      	uxth	r2, r3
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	821a      	strh	r2, [r3, #16]

  return;
 80106f2:	bf00      	nop
}
 80106f4:	3720      	adds	r7, #32
 80106f6:	46bd      	mov	sp, r7
 80106f8:	bd80      	pop	{r7, pc}

080106fa <controller_register>:
                            const char *name,
                            enum controller_type type,
                            void *param,
                            void *feedback,
                            uint8_t enable)
{
 80106fa:	b580      	push	{r7, lr}
 80106fc:	b084      	sub	sp, #16
 80106fe:	af00      	add	r7, sp, #0
 8010700:	60f8      	str	r0, [r7, #12]
 8010702:	60b9      	str	r1, [r7, #8]
 8010704:	603b      	str	r3, [r7, #0]
 8010706:	4613      	mov	r3, r2
 8010708:	71fb      	strb	r3, [r7, #7]
  if (ctrl == NULL)
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	2b00      	cmp	r3, #0
 801070e:	d102      	bne.n	8010716 <controller_register+0x1c>
    return -RM_INVAL;
 8010710:	f06f 0301 	mvn.w	r3, #1
 8010714:	e01d      	b.n	8010752 <controller_register+0x58>
  if (controller_find(name) != NULL)
 8010716:	68b8      	ldr	r0, [r7, #8]
 8010718:	f000 f81f 	bl	801075a <controller_find>
 801071c:	4603      	mov	r3, r0
 801071e:	2b00      	cmp	r3, #0
 8010720:	d002      	beq.n	8010728 <controller_register+0x2e>
    return -RM_EXISTED;
 8010722:	f06f 0302 	mvn.w	r3, #2
 8010726:	e014      	b.n	8010752 <controller_register+0x58>

  object_init(&(ctrl->parent), Object_Class_Controller, name);
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	68ba      	ldr	r2, [r7, #8]
 801072c:	2102      	movs	r1, #2
 801072e:	4618      	mov	r0, r3
 8010730:	f001 f9a4 	bl	8011a7c <object_init>

  ctrl->type = type;
 8010734:	68fb      	ldr	r3, [r7, #12]
 8010736:	79fa      	ldrb	r2, [r7, #7]
 8010738:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  ctrl->enable = enable;
 801073c:	68fb      	ldr	r3, [r7, #12]
 801073e:	7f3a      	ldrb	r2, [r7, #28]
 8010740:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  ctrl->param = param;
 8010744:	68fb      	ldr	r3, [r7, #12]
 8010746:	683a      	ldr	r2, [r7, #0]
 8010748:	631a      	str	r2, [r3, #48]	; 0x30
  ctrl->feedback = feedback;
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	69ba      	ldr	r2, [r7, #24]
 801074e:	635a      	str	r2, [r3, #52]	; 0x34

  return RM_OK;
 8010750:	2300      	movs	r3, #0
}
 8010752:	4618      	mov	r0, r3
 8010754:	3710      	adds	r7, #16
 8010756:	46bd      	mov	sp, r7
 8010758:	bd80      	pop	{r7, pc}

0801075a <controller_find>:

  return RM_OK;
}

controller_t controller_find(const char *name)
{
 801075a:	b580      	push	{r7, lr}
 801075c:	b084      	sub	sp, #16
 801075e:	af00      	add	r7, sp, #0
 8010760:	6078      	str	r0, [r7, #4]
  struct object *object;

  object = object_find(name, Object_Class_Controller);
 8010762:	2102      	movs	r1, #2
 8010764:	6878      	ldr	r0, [r7, #4]
 8010766:	f001 f9c5 	bl	8011af4 <object_find>
 801076a:	60f8      	str	r0, [r7, #12]

  return (controller_t)object;
 801076c:	68fb      	ldr	r3, [r7, #12]
}
 801076e:	4618      	mov	r0, r3
 8010770:	3710      	adds	r7, #16
 8010772:	46bd      	mov	sp, r7
 8010774:	bd80      	pop	{r7, pc}

08010776 <controller_execute>:

  return RM_OK;
}

int32_t controller_execute(struct controller *ctrl, void *feedback)
{
 8010776:	b580      	push	{r7, lr}
 8010778:	b082      	sub	sp, #8
 801077a:	af00      	add	r7, sp, #0
 801077c:	6078      	str	r0, [r7, #4]
 801077e:	6039      	str	r1, [r7, #0]
  if (ctrl == NULL)
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	2b00      	cmp	r3, #0
 8010784:	d102      	bne.n	801078c <controller_execute+0x16>
    return -RM_INVAL;
 8010786:	f06f 0301 	mvn.w	r3, #1
 801078a:	e029      	b.n	80107e0 <controller_execute+0x6a>

  if (feedback == NULL)
 801078c:	683b      	ldr	r3, [r7, #0]
 801078e:	2b00      	cmp	r3, #0
 8010790:	d102      	bne.n	8010798 <controller_execute+0x22>
    return -RM_INVAL;
 8010792:	f06f 0301 	mvn.w	r3, #1
 8010796:	e023      	b.n	80107e0 <controller_execute+0x6a>

  if (ctrl->convert_feedback == NULL)
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801079c:	2b00      	cmp	r3, #0
 801079e:	d102      	bne.n	80107a6 <controller_execute+0x30>
  {
    return -RM_INVAL;
 80107a0:	f06f 0301 	mvn.w	r3, #1
 80107a4:	e01c      	b.n	80107e0 <controller_execute+0x6a>
  }
  else
  {
    ctrl->convert_feedback(ctrl, feedback);
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107aa:	6839      	ldr	r1, [r7, #0]
 80107ac:	6878      	ldr	r0, [r7, #4]
 80107ae:	4798      	blx	r3
  }

  if ((ctrl->control != NULL) && (ctrl->enable == 1))
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d012      	beq.n	80107de <controller_execute+0x68>
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80107be:	2b01      	cmp	r3, #1
 80107c0:	d10d      	bne.n	80107de <controller_execute+0x68>
  {
    ctrl->control(ctrl, ctrl->param, ctrl->feedback, ctrl->input);
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80107c6:	687a      	ldr	r2, [r7, #4]
 80107c8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80107ca:	687a      	ldr	r2, [r7, #4]
 80107cc:	6b50      	ldr	r0, [r2, #52]	; 0x34
 80107ce:	687a      	ldr	r2, [r7, #4]
 80107d0:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 80107d4:	eeb0 0a67 	vmov.f32	s0, s15
 80107d8:	4602      	mov	r2, r0
 80107da:	6878      	ldr	r0, [r7, #4]
 80107dc:	4798      	blx	r3
  }

  return RM_OK;
 80107de:	2300      	movs	r3, #0
}
 80107e0:	4618      	mov	r0, r3
 80107e2:	3708      	adds	r7, #8
 80107e4:	46bd      	mov	sp, r7
 80107e6:	bd80      	pop	{r7, pc}

080107e8 <controller_set_input>:

int32_t controller_set_input(struct controller *ctrl, float input)
{
 80107e8:	b480      	push	{r7}
 80107ea:	b083      	sub	sp, #12
 80107ec:	af00      	add	r7, sp, #0
 80107ee:	6078      	str	r0, [r7, #4]
 80107f0:	ed87 0a00 	vstr	s0, [r7]
  if (ctrl == NULL)
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d101      	bne.n	80107fe <controller_set_input+0x16>
    return 0;
 80107fa:	2300      	movs	r3, #0
 80107fc:	e003      	b.n	8010806 <controller_set_input+0x1e>
  ctrl->input = input;
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	683a      	ldr	r2, [r7, #0]
 8010802:	639a      	str	r2, [r3, #56]	; 0x38
  return RM_OK;
 8010804:	2300      	movs	r3, #0
}
 8010806:	4618      	mov	r0, r3
 8010808:	370c      	adds	r7, #12
 801080a:	46bd      	mov	sp, r7
 801080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010810:	4770      	bx	lr

08010812 <controller_get_output>:

float controller_get_output(struct controller *ctrl, float *out)
{
 8010812:	b480      	push	{r7}
 8010814:	b083      	sub	sp, #12
 8010816:	af00      	add	r7, sp, #0
 8010818:	6078      	str	r0, [r7, #4]
 801081a:	6039      	str	r1, [r7, #0]
  if (ctrl == NULL)
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	2b00      	cmp	r3, #0
 8010820:	d102      	bne.n	8010828 <controller_get_output+0x16>
    return 0;
 8010822:	f04f 0300 	mov.w	r3, #0
 8010826:	e005      	b.n	8010834 <controller_get_output+0x22>
  *out = ctrl->output;
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801082c:	683b      	ldr	r3, [r7, #0]
 801082e:	601a      	str	r2, [r3, #0]
  return ctrl->output;
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8010834:	ee07 3a90 	vmov	s15, r3
 8010838:	eeb0 0a67 	vmov.f32	s0, s15
 801083c:	370c      	adds	r7, #12
 801083e:	46bd      	mov	sp, r7
 8010840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010844:	4770      	bx	lr

08010846 <controller_enable>:

  return ctrl->type;
}

int32_t controller_enable(struct controller *ctrl)
{
 8010846:	b480      	push	{r7}
 8010848:	b083      	sub	sp, #12
 801084a:	af00      	add	r7, sp, #0
 801084c:	6078      	str	r0, [r7, #4]
  if (ctrl == NULL)
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	2b00      	cmp	r3, #0
 8010852:	d101      	bne.n	8010858 <controller_enable+0x12>
    return RM_INVAL;
 8010854:	2302      	movs	r3, #2
 8010856:	e004      	b.n	8010862 <controller_enable+0x1c>
  ctrl->enable = 1;
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	2201      	movs	r2, #1
 801085c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  return RM_OK;
 8010860:	2300      	movs	r3, #0
}
 8010862:	4618      	mov	r0, r3
 8010864:	370c      	adds	r7, #12
 8010866:	46bd      	mov	sp, r7
 8010868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801086c:	4770      	bx	lr

0801086e <controller_disable>:

int32_t controller_disable(struct controller *ctrl)
{
 801086e:	b480      	push	{r7}
 8010870:	b083      	sub	sp, #12
 8010872:	af00      	add	r7, sp, #0
 8010874:	6078      	str	r0, [r7, #4]
  if (ctrl == NULL)
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	2b00      	cmp	r3, #0
 801087a:	d101      	bne.n	8010880 <controller_disable+0x12>
    return RM_INVAL;
 801087c:	2302      	movs	r3, #2
 801087e:	e00c      	b.n	801089a <controller_disable+0x2c>
  ctrl->enable = 0;
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	2200      	movs	r2, #0
 8010884:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  ctrl->output = 0;
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	f04f 0200 	mov.w	r2, #0
 801088e:	63da      	str	r2, [r3, #60]	; 0x3c
  ctrl->input = 0;
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	f04f 0200 	mov.w	r2, #0
 8010896:	639a      	str	r2, [r3, #56]	; 0x38
  return RM_OK;
 8010898:	2300      	movs	r3, #0
}
 801089a:	4618      	mov	r0, r3
 801089c:	370c      	adds	r7, #12
 801089e:	46bd      	mov	sp, r7
 80108a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108a4:	4770      	bx	lr
	...

080108a8 <pid_controller_register>:
int32_t pid_controller_register(struct controller *ctrl,
                                const char *name,
                                struct pid *param,
                                struct pid_feedback *feedback,
                                uint8_t enable)
{
 80108a8:	b580      	push	{r7, lr}
 80108aa:	b086      	sub	sp, #24
 80108ac:	af02      	add	r7, sp, #8
 80108ae:	60f8      	str	r0, [r7, #12]
 80108b0:	60b9      	str	r1, [r7, #8]
 80108b2:	607a      	str	r2, [r7, #4]
 80108b4:	603b      	str	r3, [r7, #0]
  if (ctrl == NULL)
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d102      	bne.n	80108c2 <pid_controller_register+0x1a>
    return -RM_INVAL;
 80108bc:	f06f 0301 	mvn.w	r3, #1
 80108c0:	e00d      	b.n	80108de <pid_controller_register+0x36>
  
  ctrl->control = pid_control;
 80108c2:	68fb      	ldr	r3, [r7, #12]
 80108c4:	4a08      	ldr	r2, [pc, #32]	; (80108e8 <pid_controller_register+0x40>)
 80108c6:	645a      	str	r2, [r3, #68]	; 0x44
  controller_register(ctrl, name, Controller_Class_PID, (void *)param, (void *)feedback, enable);
 80108c8:	7e3b      	ldrb	r3, [r7, #24]
 80108ca:	9301      	str	r3, [sp, #4]
 80108cc:	683b      	ldr	r3, [r7, #0]
 80108ce:	9300      	str	r3, [sp, #0]
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	2200      	movs	r2, #0
 80108d4:	68b9      	ldr	r1, [r7, #8]
 80108d6:	68f8      	ldr	r0, [r7, #12]
 80108d8:	f7ff ff0f 	bl	80106fa <controller_register>

  return RM_OK;
 80108dc:	2300      	movs	r3, #0
}              
 80108de:	4618      	mov	r0, r3
 80108e0:	3710      	adds	r7, #16
 80108e2:	46bd      	mov	sp, r7
 80108e4:	bd80      	pop	{r7, pc}
 80108e6:	bf00      	nop
 80108e8:	080108ed 	.word	0x080108ed

080108ec <pid_control>:

int32_t pid_control(struct controller *ctrl, void *param, void *feedback, float input)
{
 80108ec:	b580      	push	{r7, lr}
 80108ee:	b086      	sub	sp, #24
 80108f0:	af00      	add	r7, sp, #0
 80108f2:	60f8      	str	r0, [r7, #12]
 80108f4:	60b9      	str	r1, [r7, #8]
 80108f6:	607a      	str	r2, [r7, #4]
 80108f8:	ed87 0a00 	vstr	s0, [r7]
  pid_t pid_param = (pid_t)param;
 80108fc:	68bb      	ldr	r3, [r7, #8]
 80108fe:	617b      	str	r3, [r7, #20]
  pid_feedback_t pid_feedback = (pid_feedback_t)feedback;
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	613b      	str	r3, [r7, #16]
  
  pid_calculate(pid_param, pid_feedback->feedback, input);
 8010904:	693b      	ldr	r3, [r7, #16]
 8010906:	edd3 7a00 	vldr	s15, [r3]
 801090a:	edd7 0a00 	vldr	s1, [r7]
 801090e:	eeb0 0a67 	vmov.f32	s0, s15
 8010912:	6978      	ldr	r0, [r7, #20]
 8010914:	f7fe f99b 	bl	800ec4e <pid_calculate>
  
  ctrl->output = pid_param->out;
 8010918:	697b      	ldr	r3, [r7, #20]
 801091a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	63da      	str	r2, [r3, #60]	; 0x3c

  return RM_OK; 
 8010920:	2300      	movs	r3, #0
}
 8010922:	4618      	mov	r0, r3
 8010924:	3718      	adds	r7, #24
 8010926:	46bd      	mov	sp, r7
 8010928:	bd80      	pop	{r7, pc}

0801092a <rc_device_get_info>:

  return -RM_UNREGISTERED;
}

rc_info_t rc_device_get_info(rc_device_t rc_dev)
{
 801092a:	b480      	push	{r7}
 801092c:	b083      	sub	sp, #12
 801092e:	af00      	add	r7, sp, #0
 8010930:	6078      	str	r0, [r7, #4]
  if (rc_dev == NULL)
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	2b00      	cmp	r3, #0
 8010936:	d101      	bne.n	801093c <rc_device_get_info+0x12>
  {
    return NULL;
 8010938:	2300      	movs	r3, #0
 801093a:	e001      	b.n	8010940 <rc_device_get_info+0x16>
  }

  return &(rc_dev->rc_info);
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	3338      	adds	r3, #56	; 0x38
}
 8010940:	4618      	mov	r0, r3
 8010942:	370c      	adds	r7, #12
 8010944:	46bd      	mov	sp, r7
 8010946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801094a:	4770      	bx	lr

0801094c <rc_device_find>:

rc_device_t rc_device_find(const char *name)
{
 801094c:	b580      	push	{r7, lr}
 801094e:	b084      	sub	sp, #16
 8010950:	af00      	add	r7, sp, #0
 8010952:	6078      	str	r0, [r7, #4]
  rc_device_t rc_dev;
  enum device_type type;

  rc_dev = (rc_device_t)device_find(name);
 8010954:	6878      	ldr	r0, [r7, #4]
 8010956:	f000 f963 	bl	8010c20 <device_find>
 801095a:	60f8      	str	r0, [r7, #12]
  
  if(rc_dev == NULL)
 801095c:	68fb      	ldr	r3, [r7, #12]
 801095e:	2b00      	cmp	r3, #0
 8010960:	d101      	bne.n	8010966 <rc_device_find+0x1a>
    return NULL;
 8010962:	2300      	movs	r3, #0
 8010964:	e009      	b.n	801097a <rc_device_find+0x2e>
  
  type = ((device_t)rc_dev)->type;
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801096c:	72fb      	strb	r3, [r7, #11]
  
  if (type == Device_Class_RC)
 801096e:	7afb      	ldrb	r3, [r7, #11]
 8010970:	2b01      	cmp	r3, #1
 8010972:	d101      	bne.n	8010978 <rc_device_find+0x2c>
  {
    return rc_dev;
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	e000      	b.n	801097a <rc_device_find+0x2e>
  }
  else
  {
    return NULL;
 8010978:	2300      	movs	r3, #0
  }
}
 801097a:	4618      	mov	r0, r3
 801097c:	3710      	adds	r7, #16
 801097e:	46bd      	mov	sp, r7
 8010980:	bd80      	pop	{r7, pc}

08010982 <detect_device_register>:

int32_t detect_device_register(detect_device_t detect_dev,
                               const char *name,
                               uint16_t flags,
                               uint8_t callback_mode)
{
 8010982:	b580      	push	{r7, lr}
 8010984:	b084      	sub	sp, #16
 8010986:	af00      	add	r7, sp, #0
 8010988:	60f8      	str	r0, [r7, #12]
 801098a:	60b9      	str	r1, [r7, #8]
 801098c:	4611      	mov	r1, r2
 801098e:	461a      	mov	r2, r3
 8010990:	460b      	mov	r3, r1
 8010992:	80fb      	strh	r3, [r7, #6]
 8010994:	4613      	mov	r3, r2
 8010996:	717b      	strb	r3, [r7, #5]
  if (detect_dev == NULL)
 8010998:	68fb      	ldr	r3, [r7, #12]
 801099a:	2b00      	cmp	r3, #0
 801099c:	d102      	bne.n	80109a4 <detect_device_register+0x22>
    return -RM_INVAL;
 801099e:	f06f 0301 	mvn.w	r3, #1
 80109a2:	e017      	b.n	80109d4 <detect_device_register+0x52>

  if (device_find(name) != NULL)
 80109a4:	68b8      	ldr	r0, [r7, #8]
 80109a6:	f000 f93b 	bl	8010c20 <device_find>
 80109aa:	4603      	mov	r3, r0
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d002      	beq.n	80109b6 <detect_device_register+0x34>
    return -RM_EXISTED;
 80109b0:	f06f 0302 	mvn.w	r3, #2
 80109b4:	e00e      	b.n	80109d4 <detect_device_register+0x52>

  ((device_t)detect_dev)->type = Device_Class_Detect;
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	2202      	movs	r2, #2
 80109ba:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  detect_dev->callback_mode = callback_mode;
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	797a      	ldrb	r2, [r7, #5]
 80109c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  device_register(&(detect_dev->parent), name, flags);
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	88fa      	ldrh	r2, [r7, #6]
 80109ca:	68b9      	ldr	r1, [r7, #8]
 80109cc:	4618      	mov	r0, r3
 80109ce:	f000 f8fc 	bl	8010bca <device_register>

  return RM_OK;
 80109d2:	2300      	movs	r3, #0
}
 80109d4:	4618      	mov	r0, r3
 80109d6:	3710      	adds	r7, #16
 80109d8:	46bd      	mov	sp, r7
 80109da:	bd80      	pop	{r7, pc}

080109dc <detect_device_update>:

int32_t detect_device_update(detect_device_t detect_dev, uint32_t event)
{
 80109dc:	b580      	push	{r7, lr}
 80109de:	b084      	sub	sp, #16
 80109e0:	af00      	add	r7, sp, #0
 80109e2:	6078      	str	r0, [r7, #4]
 80109e4:	6039      	str	r1, [r7, #0]
  if (detect_dev == NULL)
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d102      	bne.n	80109f2 <detect_device_update+0x16>
    return -RM_INVAL;
 80109ec:	f06f 0301 	mvn.w	r3, #1
 80109f0:	e024      	b.n	8010a3c <detect_device_update+0x60>

  uint32_t temp = 1;
 80109f2:	2301      	movs	r3, #1
 80109f4:	60bb      	str	r3, [r7, #8]

  event &= detect_dev->enable;
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109fa:	683a      	ldr	r2, [r7, #0]
 80109fc:	4013      	ands	r3, r2
 80109fe:	603b      	str	r3, [r7, #0]

  for (int i = 0; i < 32; i++)
 8010a00:	2300      	movs	r3, #0
 8010a02:	60fb      	str	r3, [r7, #12]
 8010a04:	e016      	b.n	8010a34 <detect_device_update+0x58>
  {
    temp = 1 << i;
 8010a06:	2201      	movs	r2, #1
 8010a08:	68fb      	ldr	r3, [r7, #12]
 8010a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8010a0e:	60bb      	str	r3, [r7, #8]
    if ((event & temp) == temp)
 8010a10:	683a      	ldr	r2, [r7, #0]
 8010a12:	68bb      	ldr	r3, [r7, #8]
 8010a14:	4013      	ands	r3, r2
 8010a16:	68ba      	ldr	r2, [r7, #8]
 8010a18:	429a      	cmp	r2, r3
 8010a1a:	d108      	bne.n	8010a2e <detect_device_update+0x52>
    {
      detect_dev->last_time[i] = offline_get_ms();
 8010a1c:	f7f1 fbfe 	bl	800221c <HAL_GetTick>
 8010a20:	4601      	mov	r1, r0
 8010a22:	687a      	ldr	r2, [r7, #4]
 8010a24:	68fb      	ldr	r3, [r7, #12]
 8010a26:	3310      	adds	r3, #16
 8010a28:	009b      	lsls	r3, r3, #2
 8010a2a:	4413      	add	r3, r2
 8010a2c:	6059      	str	r1, [r3, #4]
  for (int i = 0; i < 32; i++)
 8010a2e:	68fb      	ldr	r3, [r7, #12]
 8010a30:	3301      	adds	r3, #1
 8010a32:	60fb      	str	r3, [r7, #12]
 8010a34:	68fb      	ldr	r3, [r7, #12]
 8010a36:	2b1f      	cmp	r3, #31
 8010a38:	dde5      	ble.n	8010a06 <detect_device_update+0x2a>
    }
  }

  return RM_OK;
 8010a3a:	2300      	movs	r3, #0
}
 8010a3c:	4618      	mov	r0, r3
 8010a3e:	3710      	adds	r7, #16
 8010a40:	46bd      	mov	sp, r7
 8010a42:	bd80      	pop	{r7, pc}

08010a44 <detect_device_check>:

  return RM_OK;
}

int32_t detect_device_check(detect_device_t detect_dev, uint32_t event)
{
 8010a44:	b580      	push	{r7, lr}
 8010a46:	b086      	sub	sp, #24
 8010a48:	af00      	add	r7, sp, #0
 8010a4a:	6078      	str	r0, [r7, #4]
 8010a4c:	6039      	str	r1, [r7, #0]
  if (detect_dev == NULL)
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d102      	bne.n	8010a5a <detect_device_check+0x16>
    return -RM_INVAL;
 8010a54:	f06f 0301 	mvn.w	r3, #1
 8010a58:	e05d      	b.n	8010b16 <detect_device_check+0xd2>

  uint8_t callback_execute = 0;
 8010a5a:	2300      	movs	r3, #0
 8010a5c:	75fb      	strb	r3, [r7, #23]
  uint32_t temp = 1;
 8010a5e:	2301      	movs	r3, #1
 8010a60:	60fb      	str	r3, [r7, #12]

  event = event & detect_dev->enable;
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a66:	683a      	ldr	r2, [r7, #0]
 8010a68:	4013      	ands	r3, r2
 8010a6a:	603b      	str	r3, [r7, #0]

  for (int i = 0; i < 32; i++)
 8010a6c:	2300      	movs	r3, #0
 8010a6e:	613b      	str	r3, [r7, #16]
 8010a70:	e04d      	b.n	8010b0e <detect_device_check+0xca>
  {
    temp = 1 << i;
 8010a72:	2201      	movs	r2, #1
 8010a74:	693b      	ldr	r3, [r7, #16]
 8010a76:	fa02 f303 	lsl.w	r3, r2, r3
 8010a7a:	60fb      	str	r3, [r7, #12]
    if ((event & temp) == temp)
 8010a7c:	683a      	ldr	r2, [r7, #0]
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	4013      	ands	r3, r2
 8010a82:	68fa      	ldr	r2, [r7, #12]
 8010a84:	429a      	cmp	r2, r3
 8010a86:	d13f      	bne.n	8010b08 <detect_device_check+0xc4>
    {
      if ((offline_get_ms() - detect_dev->last_time[i]) > detect_dev->timeout[i])
 8010a88:	f7f1 fbc8 	bl	800221c <HAL_GetTick>
 8010a8c:	4601      	mov	r1, r0
 8010a8e:	687a      	ldr	r2, [r7, #4]
 8010a90:	693b      	ldr	r3, [r7, #16]
 8010a92:	3310      	adds	r3, #16
 8010a94:	009b      	lsls	r3, r3, #2
 8010a96:	4413      	add	r3, r2
 8010a98:	685b      	ldr	r3, [r3, #4]
 8010a9a:	1aca      	subs	r2, r1, r3
 8010a9c:	6879      	ldr	r1, [r7, #4]
 8010a9e:	693b      	ldr	r3, [r7, #16]
 8010aa0:	3330      	adds	r3, #48	; 0x30
 8010aa2:	009b      	lsls	r3, r3, #2
 8010aa4:	440b      	add	r3, r1
 8010aa6:	685b      	ldr	r3, [r3, #4]
 8010aa8:	429a      	cmp	r2, r3
 8010aaa:	d926      	bls.n	8010afa <detect_device_check+0xb6>
      {
        detect_dev->event |= temp;
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010ab0:	68fb      	ldr	r3, [r7, #12]
 8010ab2:	431a      	orrs	r2, r3
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	63da      	str	r2, [r3, #60]	; 0x3c

        if ((detect_dev->offline_callback[i] != NULL) && (callback_execute == 0))
 8010ab8:	687a      	ldr	r2, [r7, #4]
 8010aba:	693b      	ldr	r3, [r7, #16]
 8010abc:	3370      	adds	r3, #112	; 0x70
 8010abe:	009b      	lsls	r3, r3, #2
 8010ac0:	4413      	add	r3, r2
 8010ac2:	685b      	ldr	r3, [r3, #4]
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d01f      	beq.n	8010b08 <detect_device_check+0xc4>
 8010ac8:	7dfb      	ldrb	r3, [r7, #23]
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d11c      	bne.n	8010b08 <detect_device_check+0xc4>
        {
          detect_dev->offline_callback[i](detect_dev->argc[i]);
 8010ace:	687a      	ldr	r2, [r7, #4]
 8010ad0:	693b      	ldr	r3, [r7, #16]
 8010ad2:	3370      	adds	r3, #112	; 0x70
 8010ad4:	009b      	lsls	r3, r3, #2
 8010ad6:	4413      	add	r3, r2
 8010ad8:	685a      	ldr	r2, [r3, #4]
 8010ada:	6879      	ldr	r1, [r7, #4]
 8010adc:	693b      	ldr	r3, [r7, #16]
 8010ade:	3350      	adds	r3, #80	; 0x50
 8010ae0:	009b      	lsls	r3, r3, #2
 8010ae2:	440b      	add	r3, r1
 8010ae4:	685b      	ldr	r3, [r3, #4]
 8010ae6:	4618      	mov	r0, r3
 8010ae8:	4790      	blx	r2

          if (detect_dev->callback_mode == HIGHEST_PRIORITY)
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d109      	bne.n	8010b08 <detect_device_check+0xc4>
          {
            callback_execute = 1;
 8010af4:	2301      	movs	r3, #1
 8010af6:	75fb      	strb	r3, [r7, #23]
 8010af8:	e006      	b.n	8010b08 <detect_device_check+0xc4>
          }
        }
      }
      else
      {
        detect_dev->event &= ~temp;
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010afe:	68fb      	ldr	r3, [r7, #12]
 8010b00:	43db      	mvns	r3, r3
 8010b02:	401a      	ands	r2, r3
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	63da      	str	r2, [r3, #60]	; 0x3c
  for (int i = 0; i < 32; i++)
 8010b08:	693b      	ldr	r3, [r7, #16]
 8010b0a:	3301      	adds	r3, #1
 8010b0c:	613b      	str	r3, [r7, #16]
 8010b0e:	693b      	ldr	r3, [r7, #16]
 8010b10:	2b1f      	cmp	r3, #31
 8010b12:	ddae      	ble.n	8010a72 <detect_device_check+0x2e>
      }
    }
  }

  return RM_OK;
 8010b14:	2300      	movs	r3, #0
}
 8010b16:	4618      	mov	r0, r3
 8010b18:	3718      	adds	r7, #24
 8010b1a:	46bd      	mov	sp, r7
 8010b1c:	bd80      	pop	{r7, pc}

08010b1e <detect_device_get_event>:

uint32_t detect_device_get_event(detect_device_t detect_dev)
{
 8010b1e:	b480      	push	{r7}
 8010b20:	b083      	sub	sp, #12
 8010b22:	af00      	add	r7, sp, #0
 8010b24:	6078      	str	r0, [r7, #4]
  if (detect_dev == NULL)
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	d101      	bne.n	8010b30 <detect_device_get_event+0x12>
    return NULL;
 8010b2c:	2300      	movs	r3, #0
 8010b2e:	e001      	b.n	8010b34 <detect_device_get_event+0x16>

  return detect_dev->event;
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8010b34:	4618      	mov	r0, r3
 8010b36:	370c      	adds	r7, #12
 8010b38:	46bd      	mov	sp, r7
 8010b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b3e:	4770      	bx	lr

08010b40 <detect_device_add_event>:
int32_t detect_device_add_event(detect_device_t detect_dev,
                                uint32_t event,
                                uint32_t timeout,
                                int32_t (*offline_callback)(void *argc),
                                void *argc)
{
 8010b40:	b480      	push	{r7}
 8010b42:	b087      	sub	sp, #28
 8010b44:	af00      	add	r7, sp, #0
 8010b46:	60f8      	str	r0, [r7, #12]
 8010b48:	60b9      	str	r1, [r7, #8]
 8010b4a:	607a      	str	r2, [r7, #4]
 8010b4c:	603b      	str	r3, [r7, #0]
  if (detect_dev == NULL)
 8010b4e:	68fb      	ldr	r3, [r7, #12]
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d102      	bne.n	8010b5a <detect_device_add_event+0x1a>
    return -RM_INVAL;
 8010b54:	f06f 0301 	mvn.w	r3, #1
 8010b58:	e031      	b.n	8010bbe <detect_device_add_event+0x7e>

  uint32_t temp = 1;
 8010b5a:	2301      	movs	r3, #1
 8010b5c:	613b      	str	r3, [r7, #16]
  detect_dev->enable |= event;
 8010b5e:	68fb      	ldr	r3, [r7, #12]
 8010b60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010b62:	68bb      	ldr	r3, [r7, #8]
 8010b64:	431a      	orrs	r2, r3
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	641a      	str	r2, [r3, #64]	; 0x40

  for (int i = 0; i < 32; i++)
 8010b6a:	2300      	movs	r3, #0
 8010b6c:	617b      	str	r3, [r7, #20]
 8010b6e:	e022      	b.n	8010bb6 <detect_device_add_event+0x76>
  {
    temp = 1 << i;
 8010b70:	2201      	movs	r2, #1
 8010b72:	697b      	ldr	r3, [r7, #20]
 8010b74:	fa02 f303 	lsl.w	r3, r2, r3
 8010b78:	613b      	str	r3, [r7, #16]
    if ((event & temp) == temp)
 8010b7a:	68ba      	ldr	r2, [r7, #8]
 8010b7c:	693b      	ldr	r3, [r7, #16]
 8010b7e:	4013      	ands	r3, r2
 8010b80:	693a      	ldr	r2, [r7, #16]
 8010b82:	429a      	cmp	r2, r3
 8010b84:	d114      	bne.n	8010bb0 <detect_device_add_event+0x70>
    {
      detect_dev->timeout[i] = timeout;
 8010b86:	68fa      	ldr	r2, [r7, #12]
 8010b88:	697b      	ldr	r3, [r7, #20]
 8010b8a:	3330      	adds	r3, #48	; 0x30
 8010b8c:	009b      	lsls	r3, r3, #2
 8010b8e:	4413      	add	r3, r2
 8010b90:	687a      	ldr	r2, [r7, #4]
 8010b92:	605a      	str	r2, [r3, #4]
      detect_dev->argc[i] = argc;
 8010b94:	68fa      	ldr	r2, [r7, #12]
 8010b96:	697b      	ldr	r3, [r7, #20]
 8010b98:	3350      	adds	r3, #80	; 0x50
 8010b9a:	009b      	lsls	r3, r3, #2
 8010b9c:	4413      	add	r3, r2
 8010b9e:	6a3a      	ldr	r2, [r7, #32]
 8010ba0:	605a      	str	r2, [r3, #4]
      detect_dev->offline_callback[i] = offline_callback;
 8010ba2:	68fa      	ldr	r2, [r7, #12]
 8010ba4:	697b      	ldr	r3, [r7, #20]
 8010ba6:	3370      	adds	r3, #112	; 0x70
 8010ba8:	009b      	lsls	r3, r3, #2
 8010baa:	4413      	add	r3, r2
 8010bac:	683a      	ldr	r2, [r7, #0]
 8010bae:	605a      	str	r2, [r3, #4]
  for (int i = 0; i < 32; i++)
 8010bb0:	697b      	ldr	r3, [r7, #20]
 8010bb2:	3301      	adds	r3, #1
 8010bb4:	617b      	str	r3, [r7, #20]
 8010bb6:	697b      	ldr	r3, [r7, #20]
 8010bb8:	2b1f      	cmp	r3, #31
 8010bba:	ddd9      	ble.n	8010b70 <detect_device_add_event+0x30>
    }
  }

  return RM_OK;
 8010bbc:	2300      	movs	r3, #0
}
 8010bbe:	4618      	mov	r0, r3
 8010bc0:	371c      	adds	r7, #28
 8010bc2:	46bd      	mov	sp, r7
 8010bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bc8:	4770      	bx	lr

08010bca <device_register>:
#include "device.h"

int32_t device_register(struct device *dev,
                        const char *name,
                        uint16_t flags)
{
 8010bca:	b580      	push	{r7, lr}
 8010bcc:	b084      	sub	sp, #16
 8010bce:	af00      	add	r7, sp, #0
 8010bd0:	60f8      	str	r0, [r7, #12]
 8010bd2:	60b9      	str	r1, [r7, #8]
 8010bd4:	4613      	mov	r3, r2
 8010bd6:	80fb      	strh	r3, [r7, #6]
  if (dev == NULL)
 8010bd8:	68fb      	ldr	r3, [r7, #12]
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d102      	bne.n	8010be4 <device_register+0x1a>
    return -RM_INVAL;
 8010bde:	f06f 0301 	mvn.w	r3, #1
 8010be2:	e019      	b.n	8010c18 <device_register+0x4e>
  if (device_find(name) != NULL)
 8010be4:	68b8      	ldr	r0, [r7, #8]
 8010be6:	f000 f81b 	bl	8010c20 <device_find>
 8010bea:	4603      	mov	r3, r0
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d002      	beq.n	8010bf6 <device_register+0x2c>
    return -RM_EXISTED;
 8010bf0:	f06f 0302 	mvn.w	r3, #2
 8010bf4:	e010      	b.n	8010c18 <device_register+0x4e>

  object_init(&(dev->parent), Object_Class_Device, name);
 8010bf6:	68fb      	ldr	r3, [r7, #12]
 8010bf8:	68ba      	ldr	r2, [r7, #8]
 8010bfa:	2100      	movs	r1, #0
 8010bfc:	4618      	mov	r0, r3
 8010bfe:	f000 ff3d 	bl	8011a7c <object_init>

  dev->flag = flags;
 8010c02:	68fb      	ldr	r3, [r7, #12]
 8010c04:	88fa      	ldrh	r2, [r7, #6]
 8010c06:	85da      	strh	r2, [r3, #46]	; 0x2e
  dev->ref_count = 0;
 8010c08:	68fb      	ldr	r3, [r7, #12]
 8010c0a:	2200      	movs	r2, #0
 8010c0c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  dev->open_flag = 0;
 8010c10:	68fb      	ldr	r3, [r7, #12]
 8010c12:	2200      	movs	r2, #0
 8010c14:	861a      	strh	r2, [r3, #48]	; 0x30

  return RM_OK;
 8010c16:	2300      	movs	r3, #0
}
 8010c18:	4618      	mov	r0, r3
 8010c1a:	3710      	adds	r7, #16
 8010c1c:	46bd      	mov	sp, r7
 8010c1e:	bd80      	pop	{r7, pc}

08010c20 <device_find>:

  return RM_OK;
}

device_t device_find(const char *name)
{
 8010c20:	b580      	push	{r7, lr}
 8010c22:	b084      	sub	sp, #16
 8010c24:	af00      	add	r7, sp, #0
 8010c26:	6078      	str	r0, [r7, #4]
  struct object *object;

  object = object_find(name, Object_Class_Device);
 8010c28:	2100      	movs	r1, #0
 8010c2a:	6878      	ldr	r0, [r7, #4]
 8010c2c:	f000 ff62 	bl	8011af4 <object_find>
 8010c30:	60f8      	str	r0, [r7, #12]

  return (device_t)object;
 8010c32:	68fb      	ldr	r3, [r7, #12]
}
 8010c34:	4618      	mov	r0, r3
 8010c36:	3710      	adds	r7, #16
 8010c38:	46bd      	mov	sp, r7
 8010c3a:	bd80      	pop	{r7, pc}

08010c3c <motor_device_register>:
static fn_can_send motor_can_send = NULL;

int32_t motor_device_register(motor_device_t motor_dev,
                              const char *name,
                              uint16_t flags)
{
 8010c3c:	b580      	push	{r7, lr}
 8010c3e:	b084      	sub	sp, #16
 8010c40:	af00      	add	r7, sp, #0
 8010c42:	60f8      	str	r0, [r7, #12]
 8010c44:	60b9      	str	r1, [r7, #8]
 8010c46:	4613      	mov	r3, r2
 8010c48:	80fb      	strh	r3, [r7, #6]
  if (motor_dev == NULL)
 8010c4a:	68fb      	ldr	r3, [r7, #12]
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d102      	bne.n	8010c56 <motor_device_register+0x1a>
    return -RM_INVAL;
 8010c50:	f06f 0301 	mvn.w	r3, #1
 8010c54:	e035      	b.n	8010cc2 <motor_device_register+0x86>

  if (device_find(name) != NULL)
 8010c56:	68b8      	ldr	r0, [r7, #8]
 8010c58:	f7ff ffe2 	bl	8010c20 <device_find>
 8010c5c:	4603      	mov	r3, r0
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d002      	beq.n	8010c68 <motor_device_register+0x2c>
    return -RM_EXISTED;
 8010c62:	f06f 0302 	mvn.w	r3, #2
 8010c66:	e02c      	b.n	8010cc2 <motor_device_register+0x86>

  if (motor_device_find_by_canid(motor_dev->can_periph, motor_dev->can_id) != NULL)
 8010c68:	68fb      	ldr	r3, [r7, #12]
 8010c6a:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8010c6e:	68fb      	ldr	r3, [r7, #12]
 8010c70:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8010c74:	4619      	mov	r1, r3
 8010c76:	4610      	mov	r0, r2
 8010c78:	f000 f864 	bl	8010d44 <motor_device_find_by_canid>
 8010c7c:	4603      	mov	r3, r0
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d002      	beq.n	8010c88 <motor_device_register+0x4c>
    return -RM_EXISTED;
 8010c82:	f06f 0302 	mvn.w	r3, #2
 8010c86:	e01c      	b.n	8010cc2 <motor_device_register+0x86>

  if ((motor_dev->can_id < 0x201) && (motor_dev->can_id > 0x208))
 8010c88:	68fb      	ldr	r3, [r7, #12]
 8010c8a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8010c8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010c92:	d808      	bhi.n	8010ca6 <motor_device_register+0x6a>
 8010c94:	68fb      	ldr	r3, [r7, #12]
 8010c96:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8010c9a:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 8010c9e:	d902      	bls.n	8010ca6 <motor_device_register+0x6a>
    return -RM_ERROR;
 8010ca0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010ca4:	e00d      	b.n	8010cc2 <motor_device_register+0x86>

  motor_dev->parent.type = Device_Class_Motor;
 8010ca6:	68fb      	ldr	r3, [r7, #12]
 8010ca8:	2200      	movs	r2, #0
 8010caa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  motor_dev->get_data = get_encoder_data;
 8010cae:	68fb      	ldr	r3, [r7, #12]
 8010cb0:	4a06      	ldr	r2, [pc, #24]	; (8010ccc <motor_device_register+0x90>)
 8010cb2:	661a      	str	r2, [r3, #96]	; 0x60

  device_register( &(motor_dev->parent), name, flags);
 8010cb4:	68fb      	ldr	r3, [r7, #12]
 8010cb6:	88fa      	ldrh	r2, [r7, #6]
 8010cb8:	68b9      	ldr	r1, [r7, #8]
 8010cba:	4618      	mov	r0, r3
 8010cbc:	f7ff ff85 	bl	8010bca <device_register>

  return RM_OK;
 8010cc0:	2300      	movs	r3, #0
}
 8010cc2:	4618      	mov	r0, r3
 8010cc4:	3710      	adds	r7, #16
 8010cc6:	46bd      	mov	sp, r7
 8010cc8:	bd80      	pop	{r7, pc}
 8010cca:	bf00      	nop
 8010ccc:	08011005 	.word	0x08011005

08010cd0 <motor_device_can_send_register>:

void motor_device_can_send_register(fn_can_send fn)
{
 8010cd0:	b480      	push	{r7}
 8010cd2:	b083      	sub	sp, #12
 8010cd4:	af00      	add	r7, sp, #0
 8010cd6:	6078      	str	r0, [r7, #4]
  if (fn != NULL)
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d002      	beq.n	8010ce4 <motor_device_can_send_register+0x14>
    motor_can_send = fn;
 8010cde:	4a04      	ldr	r2, [pc, #16]	; (8010cf0 <motor_device_can_send_register+0x20>)
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	6013      	str	r3, [r2, #0]
}
 8010ce4:	bf00      	nop
 8010ce6:	370c      	adds	r7, #12
 8010ce8:	46bd      	mov	sp, r7
 8010cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cee:	4770      	bx	lr
 8010cf0:	2000746c 	.word	0x2000746c

08010cf4 <motor_device_get_data>:
    return NULL;
  }
}

motor_data_t motor_device_get_data(motor_device_t motor_dev)
{
 8010cf4:	b480      	push	{r7}
 8010cf6:	b083      	sub	sp, #12
 8010cf8:	af00      	add	r7, sp, #0
 8010cfa:	6078      	str	r0, [r7, #4]
  if (motor_dev != NULL)
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d002      	beq.n	8010d08 <motor_device_get_data+0x14>
  {
    return &(motor_dev->data);
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	3338      	adds	r3, #56	; 0x38
 8010d06:	e000      	b.n	8010d0a <motor_device_get_data+0x16>
  }
  return NULL;
 8010d08:	2300      	movs	r3, #0
}
 8010d0a:	4618      	mov	r0, r3
 8010d0c:	370c      	adds	r7, #12
 8010d0e:	46bd      	mov	sp, r7
 8010d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d14:	4770      	bx	lr

08010d16 <motor_device_set_current>:

int32_t motor_device_set_current(motor_device_t motor_dev, int16_t current)
{
 8010d16:	b480      	push	{r7}
 8010d18:	b083      	sub	sp, #12
 8010d1a:	af00      	add	r7, sp, #0
 8010d1c:	6078      	str	r0, [r7, #4]
 8010d1e:	460b      	mov	r3, r1
 8010d20:	807b      	strh	r3, [r7, #2]

  if (motor_dev != NULL)
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d005      	beq.n	8010d34 <motor_device_set_current+0x1e>
  {
    motor_dev->current = current;
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	887a      	ldrh	r2, [r7, #2]
 8010d2c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    return RM_OK;
 8010d30:	2300      	movs	r3, #0
 8010d32:	e001      	b.n	8010d38 <motor_device_set_current+0x22>
  }
  return -RM_ERROR;
 8010d34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8010d38:	4618      	mov	r0, r3
 8010d3a:	370c      	adds	r7, #12
 8010d3c:	46bd      	mov	sp, r7
 8010d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d42:	4770      	bx	lr

08010d44 <motor_device_find_by_canid>:

motor_device_t motor_device_find_by_canid(enum device_can can, uint16_t can_id)
{
 8010d44:	b590      	push	{r4, r7, lr}
 8010d46:	b08b      	sub	sp, #44	; 0x2c
 8010d48:	af00      	add	r7, sp, #0
 8010d4a:	4603      	mov	r3, r0
 8010d4c:	460a      	mov	r2, r1
 8010d4e:	71fb      	strb	r3, [r7, #7]
 8010d50:	4613      	mov	r3, r2
 8010d52:	80bb      	strh	r3, [r7, #4]
  struct object *object;
  list_t *node = NULL;
 8010d54:	2300      	movs	r3, #0
 8010d56:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8010d58:	f3ef 8310 	mrs	r3, PRIMASK
 8010d5c:	617b      	str	r3, [r7, #20]
  return(result);
 8010d5e:	697b      	ldr	r3, [r7, #20]
  enum device_type type;

  var_cpu_sr();
  
  /* enter critical */
  enter_critical();
 8010d60:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 8010d62:	b672      	cpsid	i
}
 8010d64:	bf00      	nop

  /* try to find device object */
  information = object_get_information(Object_Class_Device);
 8010d66:	2000      	movs	r0, #0
 8010d68:	f000 fe5e 	bl	8011a28 <object_get_information>
 8010d6c:	6238      	str	r0, [r7, #32]

  for (node = information->object_list.next;
 8010d6e:	6a3b      	ldr	r3, [r7, #32]
 8010d70:	685b      	ldr	r3, [r3, #4]
 8010d72:	627b      	str	r3, [r7, #36]	; 0x24
 8010d74:	e020      	b.n	8010db8 <motor_device_find_by_canid+0x74>
       node != &(information->object_list);
       node = node->next)
  {
    object = list_entry(node, struct object, list);
 8010d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d78:	3b24      	subs	r3, #36	; 0x24
 8010d7a:	61fb      	str	r3, [r7, #28]

    type = (enum device_type)(((device_t)object)->type);
 8010d7c:	69fb      	ldr	r3, [r7, #28]
 8010d7e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010d82:	76fb      	strb	r3, [r7, #27]

    if (type != Device_Class_Motor)
 8010d84:	7efb      	ldrb	r3, [r7, #27]
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d112      	bne.n	8010db0 <motor_device_find_by_canid+0x6c>
    {
      continue;
    }  
    else if ((((motor_device_t)object)->can_id == can_id) && (((motor_device_t)object)->can_periph == can))
 8010d8a:	69fb      	ldr	r3, [r7, #28]
 8010d8c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8010d90:	88ba      	ldrh	r2, [r7, #4]
 8010d92:	429a      	cmp	r2, r3
 8010d94:	d10d      	bne.n	8010db2 <motor_device_find_by_canid+0x6e>
 8010d96:	69fb      	ldr	r3, [r7, #28]
 8010d98:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8010d9c:	79fa      	ldrb	r2, [r7, #7]
 8010d9e:	429a      	cmp	r2, r3
 8010da0:	d107      	bne.n	8010db2 <motor_device_find_by_canid+0x6e>
 8010da2:	613c      	str	r4, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010da4:	693b      	ldr	r3, [r7, #16]
 8010da6:	f383 8810 	msr	PRIMASK, r3
}
 8010daa:	bf00      	nop
    {
      /* leave critical */
      exit_critical();
      return (motor_device_t)object;
 8010dac:	69fb      	ldr	r3, [r7, #28]
 8010dae:	e00e      	b.n	8010dce <motor_device_find_by_canid+0x8a>
      continue;
 8010db0:	bf00      	nop
       node = node->next)
 8010db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	627b      	str	r3, [r7, #36]	; 0x24
       node != &(information->object_list);
 8010db8:	6a3b      	ldr	r3, [r7, #32]
 8010dba:	3304      	adds	r3, #4
 8010dbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010dbe:	429a      	cmp	r2, r3
 8010dc0:	d1d9      	bne.n	8010d76 <motor_device_find_by_canid+0x32>
 8010dc2:	60fc      	str	r4, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010dc4:	68fb      	ldr	r3, [r7, #12]
 8010dc6:	f383 8810 	msr	PRIMASK, r3
}
 8010dca:	bf00      	nop

  /* leave critical */
  exit_critical();

  /* not found */
  return NULL;
 8010dcc:	2300      	movs	r3, #0
}
 8010dce:	4618      	mov	r0, r3
 8010dd0:	372c      	adds	r7, #44	; 0x2c
 8010dd2:	46bd      	mov	sp, r7
 8010dd4:	bd90      	pop	{r4, r7, pc}
	...

08010dd8 <motor_device_can_output>:

static uint8_t motor_send_flag[DEVICE_CAN_NUM][2];
static struct can_msg motor_msg[DEVICE_CAN_NUM][2];

int32_t motor_device_can_output(enum device_can m_can)
{
 8010dd8:	b590      	push	{r4, r7, lr}
 8010dda:	b08d      	sub	sp, #52	; 0x34
 8010ddc:	af02      	add	r7, sp, #8
 8010dde:	4603      	mov	r3, r0
 8010de0:	71fb      	strb	r3, [r7, #7]
  struct object *object;
  list_t *node = NULL;
 8010de2:	2300      	movs	r3, #0
 8010de4:	627b      	str	r3, [r7, #36]	; 0x24
  struct object_information *information;
  motor_device_t motor_dev;

  memset(motor_msg, 0, sizeof(motor_msg));
 8010de6:	2240      	movs	r2, #64	; 0x40
 8010de8:	2100      	movs	r1, #0
 8010dea:	4873      	ldr	r0, [pc, #460]	; (8010fb8 <motor_device_can_output+0x1e0>)
 8010dec:	f003 fc35 	bl	801465a <memset>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8010df0:	f3ef 8310 	mrs	r3, PRIMASK
 8010df4:	613b      	str	r3, [r7, #16]
  return(result);
 8010df6:	693b      	ldr	r3, [r7, #16]

  var_cpu_sr();
   
  /* enter critical */
  enter_critical();
 8010df8:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 8010dfa:	b672      	cpsid	i
}
 8010dfc:	bf00      	nop

  /* try to find device object */
  information = object_get_information(Object_Class_Device);
 8010dfe:	2000      	movs	r0, #0
 8010e00:	f000 fe12 	bl	8011a28 <object_get_information>
 8010e04:	61f8      	str	r0, [r7, #28]

  for (node = information->object_list.next;
 8010e06:	69fb      	ldr	r3, [r7, #28]
 8010e08:	685b      	ldr	r3, [r3, #4]
 8010e0a:	627b      	str	r3, [r7, #36]	; 0x24
 8010e0c:	e098      	b.n	8010f40 <motor_device_can_output+0x168>
       node != &(information->object_list);
       node = node->next)
  {
    object = list_entry(node, struct object, list);
 8010e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e10:	3b24      	subs	r3, #36	; 0x24
 8010e12:	61bb      	str	r3, [r7, #24]
    motor_dev = (motor_device_t)object;
 8010e14:	69bb      	ldr	r3, [r7, #24]
 8010e16:	617b      	str	r3, [r7, #20]
    if(motor_dev->parent.type == Device_Class_Motor)
 8010e18:	697b      	ldr	r3, [r7, #20]
 8010e1a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	f040 808b 	bne.w	8010f3a <motor_device_can_output+0x162>
    {
      if (((motor_device_t)object)->can_id < 0x205)
 8010e24:	69bb      	ldr	r3, [r7, #24]
 8010e26:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8010e2a:	f5b3 7f01 	cmp.w	r3, #516	; 0x204
 8010e2e:	d841      	bhi.n	8010eb4 <motor_device_can_output+0xdc>
      {
        motor_msg[motor_dev->can_periph][0].id = 0x200;
 8010e30:	697b      	ldr	r3, [r7, #20]
 8010e32:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8010e36:	4a60      	ldr	r2, [pc, #384]	; (8010fb8 <motor_device_can_output+0x1e0>)
 8010e38:	015b      	lsls	r3, r3, #5
 8010e3a:	441a      	add	r2, r3
 8010e3c:	6813      	ldr	r3, [r2, #0]
 8010e3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010e42:	f361 031c 	bfi	r3, r1, #0, #29
 8010e46:	6013      	str	r3, [r2, #0]
        motor_msg[motor_dev->can_periph][0].data[(motor_dev->can_id - 0x201) * 2] = motor_dev->current >> 8;
 8010e48:	697b      	ldr	r3, [r7, #20]
 8010e4a:	f9b3 305e 	ldrsh.w	r3, [r3, #94]	; 0x5e
 8010e4e:	121b      	asrs	r3, r3, #8
 8010e50:	b219      	sxth	r1, r3
 8010e52:	697b      	ldr	r3, [r7, #20]
 8010e54:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8010e58:	461a      	mov	r2, r3
 8010e5a:	697b      	ldr	r3, [r7, #20]
 8010e5c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8010e60:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 8010e64:	005b      	lsls	r3, r3, #1
 8010e66:	b2c8      	uxtb	r0, r1
 8010e68:	4953      	ldr	r1, [pc, #332]	; (8010fb8 <motor_device_can_output+0x1e0>)
 8010e6a:	0152      	lsls	r2, r2, #5
 8010e6c:	440a      	add	r2, r1
 8010e6e:	4413      	add	r3, r2
 8010e70:	3308      	adds	r3, #8
 8010e72:	4602      	mov	r2, r0
 8010e74:	701a      	strb	r2, [r3, #0]
        motor_msg[motor_dev->can_periph][0].data[(motor_dev->can_id - 0x201) * 2 + 1] = motor_dev->current;
 8010e76:	697b      	ldr	r3, [r7, #20]
 8010e78:	f9b3 105e 	ldrsh.w	r1, [r3, #94]	; 0x5e
 8010e7c:	697b      	ldr	r3, [r7, #20]
 8010e7e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8010e82:	461a      	mov	r2, r3
 8010e84:	697b      	ldr	r3, [r7, #20]
 8010e86:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8010e8a:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 8010e8e:	005b      	lsls	r3, r3, #1
 8010e90:	3301      	adds	r3, #1
 8010e92:	b2c8      	uxtb	r0, r1
 8010e94:	4948      	ldr	r1, [pc, #288]	; (8010fb8 <motor_device_can_output+0x1e0>)
 8010e96:	0152      	lsls	r2, r2, #5
 8010e98:	440a      	add	r2, r1
 8010e9a:	4413      	add	r3, r2
 8010e9c:	3308      	adds	r3, #8
 8010e9e:	4602      	mov	r2, r0
 8010ea0:	701a      	strb	r2, [r3, #0]
        motor_send_flag[motor_dev->can_periph][0] = 1;
 8010ea2:	697b      	ldr	r3, [r7, #20]
 8010ea4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8010ea8:	461a      	mov	r2, r3
 8010eaa:	4b44      	ldr	r3, [pc, #272]	; (8010fbc <motor_device_can_output+0x1e4>)
 8010eac:	2101      	movs	r1, #1
 8010eae:	f803 1012 	strb.w	r1, [r3, r2, lsl #1]
 8010eb2:	e042      	b.n	8010f3a <motor_device_can_output+0x162>
      }
      else
      {
        motor_msg[motor_dev->can_periph][1].id = 0x1FF;
 8010eb4:	697b      	ldr	r3, [r7, #20]
 8010eb6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8010eba:	4a3f      	ldr	r2, [pc, #252]	; (8010fb8 <motor_device_can_output+0x1e0>)
 8010ebc:	015b      	lsls	r3, r3, #5
 8010ebe:	4413      	add	r3, r2
 8010ec0:	f103 0210 	add.w	r2, r3, #16
 8010ec4:	6813      	ldr	r3, [r2, #0]
 8010ec6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8010eca:	f361 031c 	bfi	r3, r1, #0, #29
 8010ece:	6013      	str	r3, [r2, #0]
        motor_msg[motor_dev->can_periph][1].data[(motor_dev->can_id - 0x205) * 2] = motor_dev->current >> 8;
 8010ed0:	697b      	ldr	r3, [r7, #20]
 8010ed2:	f9b3 305e 	ldrsh.w	r3, [r3, #94]	; 0x5e
 8010ed6:	121b      	asrs	r3, r3, #8
 8010ed8:	b219      	sxth	r1, r3
 8010eda:	697b      	ldr	r3, [r7, #20]
 8010edc:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8010ee0:	461a      	mov	r2, r3
 8010ee2:	697b      	ldr	r3, [r7, #20]
 8010ee4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8010ee8:	f2a3 2305 	subw	r3, r3, #517	; 0x205
 8010eec:	005b      	lsls	r3, r3, #1
 8010eee:	b2c8      	uxtb	r0, r1
 8010ef0:	4931      	ldr	r1, [pc, #196]	; (8010fb8 <motor_device_can_output+0x1e0>)
 8010ef2:	0152      	lsls	r2, r2, #5
 8010ef4:	440a      	add	r2, r1
 8010ef6:	4413      	add	r3, r2
 8010ef8:	3318      	adds	r3, #24
 8010efa:	4602      	mov	r2, r0
 8010efc:	701a      	strb	r2, [r3, #0]
        motor_msg[motor_dev->can_periph][1].data[(motor_dev->can_id - 0x205) * 2 + 1] = motor_dev->current;
 8010efe:	697b      	ldr	r3, [r7, #20]
 8010f00:	f9b3 105e 	ldrsh.w	r1, [r3, #94]	; 0x5e
 8010f04:	697b      	ldr	r3, [r7, #20]
 8010f06:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8010f0a:	461a      	mov	r2, r3
 8010f0c:	697b      	ldr	r3, [r7, #20]
 8010f0e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8010f12:	f2a3 2305 	subw	r3, r3, #517	; 0x205
 8010f16:	005b      	lsls	r3, r3, #1
 8010f18:	3301      	adds	r3, #1
 8010f1a:	b2c8      	uxtb	r0, r1
 8010f1c:	4926      	ldr	r1, [pc, #152]	; (8010fb8 <motor_device_can_output+0x1e0>)
 8010f1e:	0152      	lsls	r2, r2, #5
 8010f20:	440a      	add	r2, r1
 8010f22:	4413      	add	r3, r2
 8010f24:	3318      	adds	r3, #24
 8010f26:	4602      	mov	r2, r0
 8010f28:	701a      	strb	r2, [r3, #0]
        motor_send_flag[motor_dev->can_periph][1] = 1;
 8010f2a:	697b      	ldr	r3, [r7, #20]
 8010f2c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8010f30:	4a22      	ldr	r2, [pc, #136]	; (8010fbc <motor_device_can_output+0x1e4>)
 8010f32:	005b      	lsls	r3, r3, #1
 8010f34:	4413      	add	r3, r2
 8010f36:	2201      	movs	r2, #1
 8010f38:	705a      	strb	r2, [r3, #1]
       node = node->next)
 8010f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f3c:	681b      	ldr	r3, [r3, #0]
 8010f3e:	627b      	str	r3, [r7, #36]	; 0x24
       node != &(information->object_list);
 8010f40:	69fb      	ldr	r3, [r7, #28]
 8010f42:	3304      	adds	r3, #4
 8010f44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010f46:	429a      	cmp	r2, r3
 8010f48:	f47f af61 	bne.w	8010e0e <motor_device_can_output+0x36>
 8010f4c:	60fc      	str	r4, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010f4e:	68fb      	ldr	r3, [r7, #12]
 8010f50:	f383 8810 	msr	PRIMASK, r3
}
 8010f54:	bf00      	nop
  }

  /* leave critical */
  exit_critical();
  
  for (int j = 0; j < 2; j++)
 8010f56:	2300      	movs	r3, #0
 8010f58:	623b      	str	r3, [r7, #32]
 8010f5a:	e025      	b.n	8010fa8 <motor_device_can_output+0x1d0>
  {
    if (motor_send_flag[m_can][j] == 1)
 8010f5c:	79fb      	ldrb	r3, [r7, #7]
 8010f5e:	4a17      	ldr	r2, [pc, #92]	; (8010fbc <motor_device_can_output+0x1e4>)
 8010f60:	005b      	lsls	r3, r3, #1
 8010f62:	441a      	add	r2, r3
 8010f64:	6a3b      	ldr	r3, [r7, #32]
 8010f66:	4413      	add	r3, r2
 8010f68:	781b      	ldrb	r3, [r3, #0]
 8010f6a:	2b01      	cmp	r3, #1
 8010f6c:	d119      	bne.n	8010fa2 <motor_device_can_output+0x1ca>
    {
      if (motor_can_send != NULL)
 8010f6e:	4b14      	ldr	r3, [pc, #80]	; (8010fc0 <motor_device_can_output+0x1e8>)
 8010f70:	681b      	ldr	r3, [r3, #0]
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d00d      	beq.n	8010f92 <motor_device_can_output+0x1ba>
        motor_can_send(m_can, motor_msg[m_can][j]);
 8010f76:	4b12      	ldr	r3, [pc, #72]	; (8010fc0 <motor_device_can_output+0x1e8>)
 8010f78:	681c      	ldr	r4, [r3, #0]
 8010f7a:	79fb      	ldrb	r3, [r7, #7]
 8010f7c:	490e      	ldr	r1, [pc, #56]	; (8010fb8 <motor_device_can_output+0x1e0>)
 8010f7e:	005a      	lsls	r2, r3, #1
 8010f80:	6a3b      	ldr	r3, [r7, #32]
 8010f82:	4413      	add	r3, r2
 8010f84:	011b      	lsls	r3, r3, #4
 8010f86:	440b      	add	r3, r1
 8010f88:	79f8      	ldrb	r0, [r7, #7]
 8010f8a:	68da      	ldr	r2, [r3, #12]
 8010f8c:	9200      	str	r2, [sp, #0]
 8010f8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010f90:	47a0      	blx	r4
      motor_send_flag[m_can][j] = 0;
 8010f92:	79fb      	ldrb	r3, [r7, #7]
 8010f94:	4a09      	ldr	r2, [pc, #36]	; (8010fbc <motor_device_can_output+0x1e4>)
 8010f96:	005b      	lsls	r3, r3, #1
 8010f98:	441a      	add	r2, r3
 8010f9a:	6a3b      	ldr	r3, [r7, #32]
 8010f9c:	4413      	add	r3, r2
 8010f9e:	2200      	movs	r2, #0
 8010fa0:	701a      	strb	r2, [r3, #0]
  for (int j = 0; j < 2; j++)
 8010fa2:	6a3b      	ldr	r3, [r7, #32]
 8010fa4:	3301      	adds	r3, #1
 8010fa6:	623b      	str	r3, [r7, #32]
 8010fa8:	6a3b      	ldr	r3, [r7, #32]
 8010faa:	2b01      	cmp	r3, #1
 8010fac:	ddd6      	ble.n	8010f5c <motor_device_can_output+0x184>
    }
  }

  /* not found */
  return RM_OK;
 8010fae:	2300      	movs	r3, #0
}
 8010fb0:	4618      	mov	r0, r3
 8010fb2:	372c      	adds	r7, #44	; 0x2c
 8010fb4:	46bd      	mov	sp, r7
 8010fb6:	bd90      	pop	{r4, r7, pc}
 8010fb8:	20007474 	.word	0x20007474
 8010fbc:	20007470 	.word	0x20007470
 8010fc0:	2000746c 	.word	0x2000746c

08010fc4 <motor_device_data_update>:

int32_t motor_device_data_update(enum device_can can, uint16_t can_id, uint8_t can_rx_data[])
{
 8010fc4:	b580      	push	{r7, lr}
 8010fc6:	b084      	sub	sp, #16
 8010fc8:	af00      	add	r7, sp, #0
 8010fca:	4603      	mov	r3, r0
 8010fcc:	603a      	str	r2, [r7, #0]
 8010fce:	71fb      	strb	r3, [r7, #7]
 8010fd0:	460b      	mov	r3, r1
 8010fd2:	80bb      	strh	r3, [r7, #4]
  motor_device_t motor_dev;
  motor_dev = motor_device_find_by_canid(can, can_id);
 8010fd4:	88ba      	ldrh	r2, [r7, #4]
 8010fd6:	79fb      	ldrb	r3, [r7, #7]
 8010fd8:	4611      	mov	r1, r2
 8010fda:	4618      	mov	r0, r3
 8010fdc:	f7ff feb2 	bl	8010d44 <motor_device_find_by_canid>
 8010fe0:	60f8      	str	r0, [r7, #12]
  if (motor_dev != NULL)
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d006      	beq.n	8010ff6 <motor_device_data_update+0x32>
  {
    motor_dev->get_data(motor_dev, can_rx_data);
 8010fe8:	68fb      	ldr	r3, [r7, #12]
 8010fea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010fec:	6839      	ldr	r1, [r7, #0]
 8010fee:	68f8      	ldr	r0, [r7, #12]
 8010ff0:	4798      	blx	r3
    return RM_OK;
 8010ff2:	2300      	movs	r3, #0
 8010ff4:	e001      	b.n	8010ffa <motor_device_data_update+0x36>
  }
  return -RM_UNREGISTERED;
 8010ff6:	f06f 0303 	mvn.w	r3, #3
}
 8010ffa:	4618      	mov	r0, r3
 8010ffc:	3710      	adds	r7, #16
 8010ffe:	46bd      	mov	sp, r7
 8011000:	bd80      	pop	{r7, pc}
	...

08011004 <get_encoder_data>:

static void get_encoder_data(motor_device_t motor, uint8_t can_rx_data[])
{
 8011004:	b580      	push	{r7, lr}
 8011006:	b084      	sub	sp, #16
 8011008:	af00      	add	r7, sp, #0
 801100a:	6078      	str	r0, [r7, #4]
 801100c:	6039      	str	r1, [r7, #0]
  motor_data_t ptr = &(motor->data);
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	3338      	adds	r3, #56	; 0x38
 8011012:	60fb      	str	r3, [r7, #12]
  ptr->msg_cnt++;
 8011014:	68fb      	ldr	r3, [r7, #12]
 8011016:	699b      	ldr	r3, [r3, #24]
 8011018:	1c5a      	adds	r2, r3, #1
 801101a:	68fb      	ldr	r3, [r7, #12]
 801101c:	619a      	str	r2, [r3, #24]

  if (ptr->msg_cnt > 50)
 801101e:	68fb      	ldr	r3, [r7, #12]
 8011020:	699b      	ldr	r3, [r3, #24]
 8011022:	2b32      	cmp	r3, #50	; 0x32
 8011024:	d903      	bls.n	801102e <get_encoder_data+0x2a>
  {
    motor->init_offset_f = 0;
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	2200      	movs	r2, #0
 801102a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  }

  if (motor->init_offset_f == 1)
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011034:	2b01      	cmp	r3, #1
 8011036:	d104      	bne.n	8011042 <get_encoder_data+0x3e>
  {
    get_motor_offset(ptr, can_rx_data);
 8011038:	6839      	ldr	r1, [r7, #0]
 801103a:	68f8      	ldr	r0, [r7, #12]
 801103c:	f000 f886 	bl	801114c <get_motor_offset>
    return;
 8011040:	e07f      	b.n	8011142 <get_encoder_data+0x13e>
  }

  ptr->last_ecd = ptr->ecd;
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	881a      	ldrh	r2, [r3, #0]
 8011046:	68fb      	ldr	r3, [r7, #12]
 8011048:	805a      	strh	r2, [r3, #2]
  ptr->ecd = (uint16_t)(can_rx_data[0] << 8 | can_rx_data[1]);
 801104a:	683b      	ldr	r3, [r7, #0]
 801104c:	781b      	ldrb	r3, [r3, #0]
 801104e:	021b      	lsls	r3, r3, #8
 8011050:	b21a      	sxth	r2, r3
 8011052:	683b      	ldr	r3, [r7, #0]
 8011054:	3301      	adds	r3, #1
 8011056:	781b      	ldrb	r3, [r3, #0]
 8011058:	b21b      	sxth	r3, r3
 801105a:	4313      	orrs	r3, r2
 801105c:	b21b      	sxth	r3, r3
 801105e:	b29a      	uxth	r2, r3
 8011060:	68fb      	ldr	r3, [r7, #12]
 8011062:	801a      	strh	r2, [r3, #0]

  if (ptr->ecd - ptr->last_ecd > 4096)
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	881b      	ldrh	r3, [r3, #0]
 8011068:	461a      	mov	r2, r3
 801106a:	68fb      	ldr	r3, [r7, #12]
 801106c:	885b      	ldrh	r3, [r3, #2]
 801106e:	1ad3      	subs	r3, r2, r3
 8011070:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011074:	dd0f      	ble.n	8011096 <get_encoder_data+0x92>
  {
    ptr->round_cnt--;
 8011076:	68fb      	ldr	r3, [r7, #12]
 8011078:	689b      	ldr	r3, [r3, #8]
 801107a:	1e5a      	subs	r2, r3, #1
 801107c:	68fb      	ldr	r3, [r7, #12]
 801107e:	609a      	str	r2, [r3, #8]
    ptr->ecd_raw_rate = ptr->ecd - ptr->last_ecd - 8192;
 8011080:	68fb      	ldr	r3, [r7, #12]
 8011082:	881b      	ldrh	r3, [r3, #0]
 8011084:	461a      	mov	r2, r3
 8011086:	68fb      	ldr	r3, [r7, #12]
 8011088:	885b      	ldrh	r3, [r3, #2]
 801108a:	1ad3      	subs	r3, r2, r3
 801108c:	f5a3 5200 	sub.w	r2, r3, #8192	; 0x2000
 8011090:	68fb      	ldr	r3, [r7, #12]
 8011092:	615a      	str	r2, [r3, #20]
 8011094:	e020      	b.n	80110d8 <get_encoder_data+0xd4>
  }
  else if (ptr->ecd - ptr->last_ecd < -4096)
 8011096:	68fb      	ldr	r3, [r7, #12]
 8011098:	881b      	ldrh	r3, [r3, #0]
 801109a:	461a      	mov	r2, r3
 801109c:	68fb      	ldr	r3, [r7, #12]
 801109e:	885b      	ldrh	r3, [r3, #2]
 80110a0:	1ad3      	subs	r3, r2, r3
 80110a2:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 80110a6:	da0f      	bge.n	80110c8 <get_encoder_data+0xc4>
  {
    ptr->round_cnt++;
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	689b      	ldr	r3, [r3, #8]
 80110ac:	1c5a      	adds	r2, r3, #1
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	609a      	str	r2, [r3, #8]
    ptr->ecd_raw_rate = ptr->ecd - ptr->last_ecd + 8192;
 80110b2:	68fb      	ldr	r3, [r7, #12]
 80110b4:	881b      	ldrh	r3, [r3, #0]
 80110b6:	461a      	mov	r2, r3
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	885b      	ldrh	r3, [r3, #2]
 80110bc:	1ad3      	subs	r3, r2, r3
 80110be:	f503 5200 	add.w	r2, r3, #8192	; 0x2000
 80110c2:	68fb      	ldr	r3, [r7, #12]
 80110c4:	615a      	str	r2, [r3, #20]
 80110c6:	e007      	b.n	80110d8 <get_encoder_data+0xd4>
  }
  else
  {
    ptr->ecd_raw_rate = ptr->ecd - ptr->last_ecd;
 80110c8:	68fb      	ldr	r3, [r7, #12]
 80110ca:	881b      	ldrh	r3, [r3, #0]
 80110cc:	461a      	mov	r2, r3
 80110ce:	68fb      	ldr	r3, [r7, #12]
 80110d0:	885b      	ldrh	r3, [r3, #2]
 80110d2:	1ad2      	subs	r2, r2, r3
 80110d4:	68fb      	ldr	r3, [r7, #12]
 80110d6:	615a      	str	r2, [r3, #20]
  }

  ptr->total_ecd = ptr->round_cnt * 8192 + ptr->ecd - ptr->offset_ecd;
 80110d8:	68fb      	ldr	r3, [r7, #12]
 80110da:	689b      	ldr	r3, [r3, #8]
 80110dc:	035b      	lsls	r3, r3, #13
 80110de:	68fa      	ldr	r2, [r7, #12]
 80110e0:	8812      	ldrh	r2, [r2, #0]
 80110e2:	4413      	add	r3, r2
 80110e4:	68fa      	ldr	r2, [r7, #12]
 80110e6:	8b92      	ldrh	r2, [r2, #28]
 80110e8:	1a9a      	subs	r2, r3, r2
 80110ea:	68fb      	ldr	r3, [r7, #12]
 80110ec:	60da      	str	r2, [r3, #12]
  /* total angle, unit is degree */
  ptr->total_angle = ptr->total_ecd / ENCODER_ANGLE_RATIO;
 80110ee:	68fb      	ldr	r3, [r7, #12]
 80110f0:	68db      	ldr	r3, [r3, #12]
 80110f2:	ee07 3a90 	vmov	s15, r3
 80110f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80110fa:	eddf 6a13 	vldr	s13, [pc, #76]	; 8011148 <get_encoder_data+0x144>
 80110fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011102:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011106:	ee17 2a90 	vmov	r2, s15
 801110a:	68fb      	ldr	r3, [r7, #12]
 801110c:	611a      	str	r2, [r3, #16]

  ptr->speed_rpm = (int16_t)(can_rx_data[2] << 8 | can_rx_data[3]);
 801110e:	683b      	ldr	r3, [r7, #0]
 8011110:	3302      	adds	r3, #2
 8011112:	781b      	ldrb	r3, [r3, #0]
 8011114:	021b      	lsls	r3, r3, #8
 8011116:	b21a      	sxth	r2, r3
 8011118:	683b      	ldr	r3, [r7, #0]
 801111a:	3303      	adds	r3, #3
 801111c:	781b      	ldrb	r3, [r3, #0]
 801111e:	b21b      	sxth	r3, r3
 8011120:	4313      	orrs	r3, r2
 8011122:	b21a      	sxth	r2, r3
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	809a      	strh	r2, [r3, #4]
  ptr->given_current = (int16_t)(can_rx_data[4] << 8 | can_rx_data[5]);
 8011128:	683b      	ldr	r3, [r7, #0]
 801112a:	3304      	adds	r3, #4
 801112c:	781b      	ldrb	r3, [r3, #0]
 801112e:	021b      	lsls	r3, r3, #8
 8011130:	b21a      	sxth	r2, r3
 8011132:	683b      	ldr	r3, [r7, #0]
 8011134:	3305      	adds	r3, #5
 8011136:	781b      	ldrb	r3, [r3, #0]
 8011138:	b21b      	sxth	r3, r3
 801113a:	4313      	orrs	r3, r2
 801113c:	b21a      	sxth	r2, r3
 801113e:	68fb      	ldr	r3, [r7, #12]
 8011140:	80da      	strh	r2, [r3, #6]
}
 8011142:	3710      	adds	r7, #16
 8011144:	46bd      	mov	sp, r7
 8011146:	bd80      	pop	{r7, pc}
 8011148:	41b60b61 	.word	0x41b60b61

0801114c <get_motor_offset>:

static void get_motor_offset(motor_data_t ptr, uint8_t can_rx_data[])
{
 801114c:	b480      	push	{r7}
 801114e:	b083      	sub	sp, #12
 8011150:	af00      	add	r7, sp, #0
 8011152:	6078      	str	r0, [r7, #4]
 8011154:	6039      	str	r1, [r7, #0]
  ptr->ecd = (uint16_t)(can_rx_data[0] << 8 | can_rx_data[1]);
 8011156:	683b      	ldr	r3, [r7, #0]
 8011158:	781b      	ldrb	r3, [r3, #0]
 801115a:	021b      	lsls	r3, r3, #8
 801115c:	b21a      	sxth	r2, r3
 801115e:	683b      	ldr	r3, [r7, #0]
 8011160:	3301      	adds	r3, #1
 8011162:	781b      	ldrb	r3, [r3, #0]
 8011164:	b21b      	sxth	r3, r3
 8011166:	4313      	orrs	r3, r2
 8011168:	b21b      	sxth	r3, r3
 801116a:	b29a      	uxth	r2, r3
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	801a      	strh	r2, [r3, #0]
  ptr->offset_ecd = ptr->ecd;
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	881a      	ldrh	r2, [r3, #0]
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	839a      	strh	r2, [r3, #28]
}
 8011178:	bf00      	nop
 801117a:	370c      	adds	r7, #12
 801117c:	46bd      	mov	sp, r7
 801117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011182:	4770      	bx	lr

08011184 <chassis_pid_register>:
#include "chassis.h"
 
static int32_t motor_pid_input_convert(struct controller *ctrl, void *input);

int32_t chassis_pid_register(struct chassis *chassis, const char *name, enum device_can can)
{
 8011184:	b590      	push	{r4, r7, lr}
 8011186:	b0ad      	sub	sp, #180	; 0xb4
 8011188:	af02      	add	r7, sp, #8
 801118a:	60f8      	str	r0, [r7, #12]
 801118c:	60b9      	str	r1, [r7, #8]
 801118e:	4613      	mov	r3, r2
 8011190:	71fb      	strb	r3, [r7, #7]
  char motor_name[4][OBJECT_NAME_MAX_LEN] = {0};
 8011192:	f107 0314 	add.w	r3, r7, #20
 8011196:	2280      	movs	r2, #128	; 0x80
 8011198:	2100      	movs	r1, #0
 801119a:	4618      	mov	r0, r3
 801119c:	f003 fa5d 	bl	801465a <memset>
  uint8_t name_len;

  int32_t err;

  if (chassis == NULL)
 80111a0:	68fb      	ldr	r3, [r7, #12]
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d102      	bne.n	80111ac <chassis_pid_register+0x28>
    return -RM_INVAL;
 80111a6:	f06f 0301 	mvn.w	r3, #1
 80111aa:	e143      	b.n	8011434 <chassis_pid_register+0x2b0>
  if (chassis_find(name) != NULL)
 80111ac:	68b8      	ldr	r0, [r7, #8]
 80111ae:	f000 fb81 	bl	80118b4 <chassis_find>
 80111b2:	4603      	mov	r3, r0
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d002      	beq.n	80111be <chassis_pid_register+0x3a>
    return -RM_EXISTED;
 80111b8:	f06f 0302 	mvn.w	r3, #2
 80111bc:	e13a      	b.n	8011434 <chassis_pid_register+0x2b0>

  object_init(&(chassis->parent), Object_Class_Chassis, name);
 80111be:	68fb      	ldr	r3, [r7, #12]
 80111c0:	68ba      	ldr	r2, [r7, #8]
 80111c2:	2103      	movs	r1, #3
 80111c4:	4618      	mov	r0, r3
 80111c6:	f000 fc59 	bl	8011a7c <object_init>

  name_len = strlen(name);
 80111ca:	68b8      	ldr	r0, [r7, #8]
 80111cc:	f7ef f810 	bl	80001f0 <strlen>
 80111d0:	4603      	mov	r3, r0
 80111d2:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  if (name_len > OBJECT_NAME_MAX_LEN / 2)
 80111d6:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80111da:	2b10      	cmp	r3, #16
 80111dc:	d902      	bls.n	80111e4 <chassis_pid_register+0x60>
  {
    name_len = OBJECT_NAME_MAX_LEN / 2;
 80111de:	2310      	movs	r3, #16
 80111e0:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
  }

  for (int i = 0; i < 4; i++)
 80111e4:	2300      	movs	r3, #0
 80111e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80111ea:	e054      	b.n	8011296 <chassis_pid_register+0x112>
  {
    memcpy(&motor_name[i], name, name_len);
 80111ec:	f107 0214 	add.w	r2, r7, #20
 80111f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80111f4:	015b      	lsls	r3, r3, #5
 80111f6:	4413      	add	r3, r2
 80111f8:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 80111fc:	68b9      	ldr	r1, [r7, #8]
 80111fe:	4618      	mov	r0, r3
 8011200:	f003 fab0 	bl	8014764 <memcpy>
    chassis->motor[i].can_periph = can;
 8011204:	68fa      	ldr	r2, [r7, #12]
 8011206:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801120a:	2164      	movs	r1, #100	; 0x64
 801120c:	fb01 f303 	mul.w	r3, r1, r3
 8011210:	4413      	add	r3, r2
 8011212:	33e0      	adds	r3, #224	; 0xe0
 8011214:	79fa      	ldrb	r2, [r7, #7]
 8011216:	701a      	strb	r2, [r3, #0]
    chassis->motor[i].can_id = 0x201 + i;
 8011218:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801121c:	b29b      	uxth	r3, r3
 801121e:	f203 2301 	addw	r3, r3, #513	; 0x201
 8011222:	b298      	uxth	r0, r3
 8011224:	68fa      	ldr	r2, [r7, #12]
 8011226:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801122a:	2164      	movs	r1, #100	; 0x64
 801122c:	fb01 f303 	mul.w	r3, r1, r3
 8011230:	4413      	add	r3, r2
 8011232:	33e2      	adds	r3, #226	; 0xe2
 8011234:	4602      	mov	r2, r0
 8011236:	801a      	strh	r2, [r3, #0]
    chassis->motor[i].init_offset_f = 1;
 8011238:	68fa      	ldr	r2, [r7, #12]
 801123a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801123e:	2164      	movs	r1, #100	; 0x64
 8011240:	fb01 f303 	mul.w	r3, r1, r3
 8011244:	4413      	add	r3, r2
 8011246:	33e4      	adds	r3, #228	; 0xe4
 8011248:	2201      	movs	r2, #1
 801124a:	801a      	strh	r2, [r3, #0]

    chassis->ctrl[i].convert_feedback = motor_pid_input_convert;
 801124c:	68f9      	ldr	r1, [r7, #12]
 801124e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8011252:	4613      	mov	r3, r2
 8011254:	00db      	lsls	r3, r3, #3
 8011256:	4413      	add	r3, r2
 8011258:	00db      	lsls	r3, r3, #3
 801125a:	440b      	add	r3, r1
 801125c:	f503 735a 	add.w	r3, r3, #872	; 0x368
 8011260:	4a76      	ldr	r2, [pc, #472]	; (801143c <chassis_pid_register+0x2b8>)
 8011262:	601a      	str	r2, [r3, #0]
    pid_struct_init(&chassis->motor_pid[i], 15000, 500, 6.5f, 0.1, 0);
 8011264:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011268:	019b      	lsls	r3, r3, #6
 801126a:	f503 7306 	add.w	r3, r3, #536	; 0x218
 801126e:	68fa      	ldr	r2, [r7, #12]
 8011270:	4413      	add	r3, r2
 8011272:	ed9f 2a73 	vldr	s4, [pc, #460]	; 8011440 <chassis_pid_register+0x2bc>
 8011276:	eddf 1a73 	vldr	s3, [pc, #460]	; 8011444 <chassis_pid_register+0x2c0>
 801127a:	eeb1 1a0a 	vmov.f32	s2, #26	; 0x40d00000  6.5
 801127e:	eddf 0a72 	vldr	s1, [pc, #456]	; 8011448 <chassis_pid_register+0x2c4>
 8011282:	ed9f 0a72 	vldr	s0, [pc, #456]	; 801144c <chassis_pid_register+0x2c8>
 8011286:	4618      	mov	r0, r3
 8011288:	f7fd fd6a 	bl	800ed60 <pid_struct_init>
  for (int i = 0; i < 4; i++)
 801128c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011290:	3301      	adds	r3, #1
 8011292:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8011296:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801129a:	2b03      	cmp	r3, #3
 801129c:	dda6      	ble.n	80111ec <chassis_pid_register+0x68>
  }

  chassis->mecanum.param.wheel_perimeter = PERIMETER;
 801129e:	68fb      	ldr	r3, [r7, #12]
 80112a0:	4a6b      	ldr	r2, [pc, #428]	; (8011450 <chassis_pid_register+0x2cc>)
 80112a2:	62da      	str	r2, [r3, #44]	; 0x2c
  chassis->mecanum.param.wheeltrack = WHEELTRACK;
 80112a4:	68fb      	ldr	r3, [r7, #12]
 80112a6:	4a6b      	ldr	r2, [pc, #428]	; (8011454 <chassis_pid_register+0x2d0>)
 80112a8:	631a      	str	r2, [r3, #48]	; 0x30
  chassis->mecanum.param.wheelbase = WHEELBASE;
 80112aa:	68fb      	ldr	r3, [r7, #12]
 80112ac:	4a6a      	ldr	r2, [pc, #424]	; (8011458 <chassis_pid_register+0x2d4>)
 80112ae:	635a      	str	r2, [r3, #52]	; 0x34
  chassis->mecanum.param.rotate_x_offset = ROTATE_X_OFFSET;
 80112b0:	68fb      	ldr	r3, [r7, #12]
 80112b2:	4a6a      	ldr	r2, [pc, #424]	; (801145c <chassis_pid_register+0x2d8>)
 80112b4:	639a      	str	r2, [r3, #56]	; 0x38
  chassis->mecanum.param.rotate_y_offset = ROTATE_Y_OFFSET;
 80112b6:	68fb      	ldr	r3, [r7, #12]
 80112b8:	f04f 0200 	mov.w	r2, #0
 80112bc:	63da      	str	r2, [r3, #60]	; 0x3c

  memcpy(&motor_name[0][name_len], "_FR\0", 4);
 80112be:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80112c2:	f107 0214 	add.w	r2, r7, #20
 80112c6:	4413      	add	r3, r2
 80112c8:	2204      	movs	r2, #4
 80112ca:	4965      	ldr	r1, [pc, #404]	; (8011460 <chassis_pid_register+0x2dc>)
 80112cc:	4618      	mov	r0, r3
 80112ce:	f003 fa49 	bl	8014764 <memcpy>
  memcpy(&motor_name[1][name_len], "_FL\0", 4);
 80112d2:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80112d6:	f107 0214 	add.w	r2, r7, #20
 80112da:	3320      	adds	r3, #32
 80112dc:	4413      	add	r3, r2
 80112de:	2204      	movs	r2, #4
 80112e0:	4960      	ldr	r1, [pc, #384]	; (8011464 <chassis_pid_register+0x2e0>)
 80112e2:	4618      	mov	r0, r3
 80112e4:	f003 fa3e 	bl	8014764 <memcpy>
  memcpy(&motor_name[2][name_len], "_BL\0", 4);
 80112e8:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80112ec:	f107 0214 	add.w	r2, r7, #20
 80112f0:	3340      	adds	r3, #64	; 0x40
 80112f2:	4413      	add	r3, r2
 80112f4:	2204      	movs	r2, #4
 80112f6:	495c      	ldr	r1, [pc, #368]	; (8011468 <chassis_pid_register+0x2e4>)
 80112f8:	4618      	mov	r0, r3
 80112fa:	f003 fa33 	bl	8014764 <memcpy>
  memcpy(&motor_name[3][name_len], "_BR\0", 4);
 80112fe:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8011302:	f107 0214 	add.w	r2, r7, #20
 8011306:	3360      	adds	r3, #96	; 0x60
 8011308:	4413      	add	r3, r2
 801130a:	2204      	movs	r2, #4
 801130c:	4957      	ldr	r1, [pc, #348]	; (801146c <chassis_pid_register+0x2e8>)
 801130e:	4618      	mov	r0, r3
 8011310:	f003 fa28 	bl	8014764 <memcpy>

  for (int i = 0; i < 4; i++)
 8011314:	2300      	movs	r3, #0
 8011316:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801131a:	e01c      	b.n	8011356 <chassis_pid_register+0x1d2>
  {
    err = motor_device_register(&(chassis->motor[i]), motor_name[i], 0);
 801131c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011320:	2264      	movs	r2, #100	; 0x64
 8011322:	fb02 f303 	mul.w	r3, r2, r3
 8011326:	3388      	adds	r3, #136	; 0x88
 8011328:	68fa      	ldr	r2, [r7, #12]
 801132a:	18d0      	adds	r0, r2, r3
 801132c:	f107 0214 	add.w	r2, r7, #20
 8011330:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011334:	015b      	lsls	r3, r3, #5
 8011336:	4413      	add	r3, r2
 8011338:	2200      	movs	r2, #0
 801133a:	4619      	mov	r1, r3
 801133c:	f7ff fc7e 	bl	8010c3c <motor_device_register>
 8011340:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
    if (err != RM_OK)
 8011344:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011348:	2b00      	cmp	r3, #0
 801134a:	d16a      	bne.n	8011422 <chassis_pid_register+0x29e>
  for (int i = 0; i < 4; i++)
 801134c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011350:	3301      	adds	r3, #1
 8011352:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8011356:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801135a:	2b03      	cmp	r3, #3
 801135c:	ddde      	ble.n	801131c <chassis_pid_register+0x198>
      goto end;
  }

  memcpy(&motor_name[0][name_len], "_CTLFR\0", 7);
 801135e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8011362:	f107 0214 	add.w	r2, r7, #20
 8011366:	4413      	add	r3, r2
 8011368:	2207      	movs	r2, #7
 801136a:	4941      	ldr	r1, [pc, #260]	; (8011470 <chassis_pid_register+0x2ec>)
 801136c:	4618      	mov	r0, r3
 801136e:	f003 f9f9 	bl	8014764 <memcpy>
  memcpy(&motor_name[1][name_len], "_CTLFL\0", 7);
 8011372:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8011376:	f107 0214 	add.w	r2, r7, #20
 801137a:	3320      	adds	r3, #32
 801137c:	4413      	add	r3, r2
 801137e:	2207      	movs	r2, #7
 8011380:	493c      	ldr	r1, [pc, #240]	; (8011474 <chassis_pid_register+0x2f0>)
 8011382:	4618      	mov	r0, r3
 8011384:	f003 f9ee 	bl	8014764 <memcpy>
  memcpy(&motor_name[2][name_len], "_CTLBL\0", 7);
 8011388:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 801138c:	f107 0214 	add.w	r2, r7, #20
 8011390:	3340      	adds	r3, #64	; 0x40
 8011392:	4413      	add	r3, r2
 8011394:	2207      	movs	r2, #7
 8011396:	4938      	ldr	r1, [pc, #224]	; (8011478 <chassis_pid_register+0x2f4>)
 8011398:	4618      	mov	r0, r3
 801139a:	f003 f9e3 	bl	8014764 <memcpy>
  memcpy(&motor_name[3][name_len], "_CTLBR\0", 7);
 801139e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80113a2:	f107 0214 	add.w	r2, r7, #20
 80113a6:	3360      	adds	r3, #96	; 0x60
 80113a8:	4413      	add	r3, r2
 80113aa:	2207      	movs	r2, #7
 80113ac:	4933      	ldr	r1, [pc, #204]	; (801147c <chassis_pid_register+0x2f8>)
 80113ae:	4618      	mov	r0, r3
 80113b0:	f003 f9d8 	bl	8014764 <memcpy>

  for (int i = 0; i < 4; i++)
 80113b4:	2300      	movs	r3, #0
 80113b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80113ba:	e02c      	b.n	8011416 <chassis_pid_register+0x292>
  {
    err = pid_controller_register(&(chassis->ctrl[i]), motor_name[i], &(chassis->motor_pid[i]), &(chassis->motor_feedback[i]), 1);
 80113bc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80113c0:	4613      	mov	r3, r2
 80113c2:	00db      	lsls	r3, r3, #3
 80113c4:	4413      	add	r3, r2
 80113c6:	00db      	lsls	r3, r3, #3
 80113c8:	f503 734a 	add.w	r3, r3, #808	; 0x328
 80113cc:	68fa      	ldr	r2, [r7, #12]
 80113ce:	18d0      	adds	r0, r2, r3
 80113d0:	f107 0214 	add.w	r2, r7, #20
 80113d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80113d8:	015b      	lsls	r3, r3, #5
 80113da:	18d1      	adds	r1, r2, r3
 80113dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80113e0:	019b      	lsls	r3, r3, #6
 80113e2:	f503 7306 	add.w	r3, r3, #536	; 0x218
 80113e6:	68fa      	ldr	r2, [r7, #12]
 80113e8:	18d4      	adds	r4, r2, r3
 80113ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80113ee:	33c6      	adds	r3, #198	; 0xc6
 80113f0:	009b      	lsls	r3, r3, #2
 80113f2:	68fa      	ldr	r2, [r7, #12]
 80113f4:	4413      	add	r3, r2
 80113f6:	2201      	movs	r2, #1
 80113f8:	9200      	str	r2, [sp, #0]
 80113fa:	4622      	mov	r2, r4
 80113fc:	f7ff fa54 	bl	80108a8 <pid_controller_register>
 8011400:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
    if (err != RM_OK)
 8011404:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011408:	2b00      	cmp	r3, #0
 801140a:	d10c      	bne.n	8011426 <chassis_pid_register+0x2a2>
  for (int i = 0; i < 4; i++)
 801140c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011410:	3301      	adds	r3, #1
 8011412:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8011416:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801141a:	2b03      	cmp	r3, #3
 801141c:	ddce      	ble.n	80113bc <chassis_pid_register+0x238>
      goto end;
  }

  return RM_OK;
 801141e:	2300      	movs	r3, #0
 8011420:	e008      	b.n	8011434 <chassis_pid_register+0x2b0>
      goto end;
 8011422:	bf00      	nop
 8011424:	e000      	b.n	8011428 <chassis_pid_register+0x2a4>
      goto end;
 8011426:	bf00      	nop
end:
  object_detach(&(chassis->parent));
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	4618      	mov	r0, r3
 801142c:	f000 fbae 	bl	8011b8c <object_detach>

  return err;
 8011430:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
}
 8011434:	4618      	mov	r0, r3
 8011436:	37ac      	adds	r7, #172	; 0xac
 8011438:	46bd      	mov	sp, r7
 801143a:	bd90      	pop	{r4, r7, pc}
 801143c:	08011961 	.word	0x08011961
 8011440:	00000000 	.word	0x00000000
 8011444:	3dcccccd 	.word	0x3dcccccd
 8011448:	43fa0000 	.word	0x43fa0000
 801144c:	466a6000 	.word	0x466a6000
 8011450:	43ef0000 	.word	0x43ef0000
 8011454:	43c50000 	.word	0x43c50000
 8011458:	43cf8000 	.word	0x43cf8000
 801145c:	40e00000 	.word	0x40e00000
 8011460:	08015ab4 	.word	0x08015ab4
 8011464:	08015abc 	.word	0x08015abc
 8011468:	08015ac4 	.word	0x08015ac4
 801146c:	08015acc 	.word	0x08015acc
 8011470:	08015ad4 	.word	0x08015ad4
 8011474:	08015adc 	.word	0x08015adc
 8011478:	08015ae4 	.word	0x08015ae4
 801147c:	08015aec 	.word	0x08015aec

08011480 <chassis_execute>:

int32_t chassis_execute(struct chassis *chassis)
{
 8011480:	b580      	push	{r7, lr}
 8011482:	b08e      	sub	sp, #56	; 0x38
 8011484:	af00      	add	r7, sp, #0
 8011486:	6078      	str	r0, [r7, #4]
  struct mecanum_motor_fdb wheel_fdb[4];

  static uint8_t init_f = 0;
  static float last_time, period;
  
  if (chassis == NULL)
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	2b00      	cmp	r3, #0
 801148c:	d102      	bne.n	8011494 <chassis_execute+0x14>
    return -RM_INVAL;
 801148e:	f06f 0301 	mvn.w	r3, #1
 8011492:	e0e2      	b.n	801165a <chassis_execute+0x1da>
  
	period  = get_time_ms_us() - last_time;
 8011494:	f7fe f96c 	bl	800f770 <get_time_ms_us>
 8011498:	eeb0 7a40 	vmov.f32	s14, s0
 801149c:	4b71      	ldr	r3, [pc, #452]	; (8011664 <chassis_execute+0x1e4>)
 801149e:	edd3 7a00 	vldr	s15, [r3]
 80114a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80114a6:	4b70      	ldr	r3, [pc, #448]	; (8011668 <chassis_execute+0x1e8>)
 80114a8:	edc3 7a00 	vstr	s15, [r3]

  if(!init_f)
 80114ac:	4b6f      	ldr	r3, [pc, #444]	; (801166c <chassis_execute+0x1ec>)
 80114ae:	781b      	ldrb	r3, [r3, #0]
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	d10e      	bne.n	80114d2 <chassis_execute+0x52>
  {
    period = 0;
 80114b4:	4b6c      	ldr	r3, [pc, #432]	; (8011668 <chassis_execute+0x1e8>)
 80114b6:	f04f 0200 	mov.w	r2, #0
 80114ba:	601a      	str	r2, [r3, #0]
		last_time = get_time_ms_us();
 80114bc:	f7fe f958 	bl	800f770 <get_time_ms_us>
 80114c0:	eef0 7a40 	vmov.f32	s15, s0
 80114c4:	4b67      	ldr	r3, [pc, #412]	; (8011664 <chassis_execute+0x1e4>)
 80114c6:	edc3 7a00 	vstr	s15, [r3]
    init_f = 1;
 80114ca:	4b68      	ldr	r3, [pc, #416]	; (801166c <chassis_execute+0x1ec>)
 80114cc:	2201      	movs	r2, #1
 80114ce:	701a      	strb	r2, [r3, #0]
 80114d0:	e042      	b.n	8011558 <chassis_execute+0xd8>
  }
  else
  {
    last_time = get_time_ms_us();
 80114d2:	f7fe f94d 	bl	800f770 <get_time_ms_us>
 80114d6:	eef0 7a40 	vmov.f32	s15, s0
 80114da:	4b62      	ldr	r3, [pc, #392]	; (8011664 <chassis_execute+0x1e4>)
 80114dc:	edc3 7a00 	vstr	s15, [r3]

    chassis->mecanum.speed.vx += chassis->acc.ax/1000.0f*period;
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 80114ec:	ed9f 6a60 	vldr	s12, [pc, #384]	; 8011670 <chassis_execute+0x1f0>
 80114f0:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80114f4:	4b5c      	ldr	r3, [pc, #368]	; (8011668 <chassis_execute+0x1e8>)
 80114f6:	edd3 7a00 	vldr	s15, [r3]
 80114fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80114fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    chassis->mecanum.speed.vy += chassis->acc.ay/1000.0f*period;
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8011514:	ed9f 6a56 	vldr	s12, [pc, #344]	; 8011670 <chassis_execute+0x1f0>
 8011518:	eec7 6a86 	vdiv.f32	s13, s15, s12
 801151c:	4b52      	ldr	r3, [pc, #328]	; (8011668 <chassis_execute+0x1e8>)
 801151e:	edd3 7a00 	vldr	s15, [r3]
 8011522:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011526:	ee77 7a27 	vadd.f32	s15, s14, s15
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
    chassis->mecanum.speed.vw += chassis->acc.wz/1000.0f*period;
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 801153c:	ed9f 6a4c 	vldr	s12, [pc, #304]	; 8011670 <chassis_execute+0x1f0>
 8011540:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8011544:	4b48      	ldr	r3, [pc, #288]	; (8011668 <chassis_execute+0x1e8>)
 8011546:	edd3 7a00 	vldr	s15, [r3]
 801154a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801154e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
  }
  
  mecanum_calculate(&(chassis->mecanum));
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	332c      	adds	r3, #44	; 0x2c
 801155c:	4618      	mov	r0, r3
 801155e:	f7fc fe4d 	bl	800e1fc <mecanum_calculate>

  for (int i = 0; i < 4; i++)
 8011562:	2300      	movs	r3, #0
 8011564:	637b      	str	r3, [r7, #52]	; 0x34
 8011566:	e06c      	b.n	8011642 <chassis_execute+0x1c2>
  {
    pdata = motor_device_get_data(&(chassis->motor[i]));
 8011568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801156a:	2264      	movs	r2, #100	; 0x64
 801156c:	fb02 f303 	mul.w	r3, r2, r3
 8011570:	3388      	adds	r3, #136	; 0x88
 8011572:	687a      	ldr	r2, [r7, #4]
 8011574:	4413      	add	r3, r2
 8011576:	4618      	mov	r0, r3
 8011578:	f7ff fbbc 	bl	8010cf4 <motor_device_get_data>
 801157c:	6338      	str	r0, [r7, #48]	; 0x30

    wheel_fdb[i].total_ecd = pdata->total_ecd;
 801157e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011580:	68db      	ldr	r3, [r3, #12]
 8011582:	ee07 3a90 	vmov	s15, r3
 8011586:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801158a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801158c:	00db      	lsls	r3, r3, #3
 801158e:	3338      	adds	r3, #56	; 0x38
 8011590:	443b      	add	r3, r7
 8011592:	3b2c      	subs	r3, #44	; 0x2c
 8011594:	edc3 7a00 	vstr	s15, [r3]
    wheel_fdb[i].speed_rpm = pdata->speed_rpm;
 8011598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801159a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801159e:	ee07 3a90 	vmov	s15, r3
 80115a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80115a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115a8:	00db      	lsls	r3, r3, #3
 80115aa:	3338      	adds	r3, #56	; 0x38
 80115ac:	443b      	add	r3, r7
 80115ae:	3b28      	subs	r3, #40	; 0x28
 80115b0:	edc3 7a00 	vstr	s15, [r3]

    controller_set_input(&chassis->ctrl[i], chassis->mecanum.wheel_rpm[i]);
 80115b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80115b6:	4613      	mov	r3, r2
 80115b8:	00db      	lsls	r3, r3, #3
 80115ba:	4413      	add	r3, r2
 80115bc:	00db      	lsls	r3, r3, #3
 80115be:	f503 734a 	add.w	r3, r3, #808	; 0x328
 80115c2:	687a      	ldr	r2, [r7, #4]
 80115c4:	18d1      	adds	r1, r2, r3
 80115c6:	687a      	ldr	r2, [r7, #4]
 80115c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115ca:	331a      	adds	r3, #26
 80115cc:	009b      	lsls	r3, r3, #2
 80115ce:	4413      	add	r3, r2
 80115d0:	3304      	adds	r3, #4
 80115d2:	edd3 7a00 	vldr	s15, [r3]
 80115d6:	eeb0 0a67 	vmov.f32	s0, s15
 80115da:	4608      	mov	r0, r1
 80115dc:	f7ff f904 	bl	80107e8 <controller_set_input>
    controller_execute(&chassis->ctrl[i], (void *)pdata);
 80115e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80115e2:	4613      	mov	r3, r2
 80115e4:	00db      	lsls	r3, r3, #3
 80115e6:	4413      	add	r3, r2
 80115e8:	00db      	lsls	r3, r3, #3
 80115ea:	f503 734a 	add.w	r3, r3, #808	; 0x328
 80115ee:	687a      	ldr	r2, [r7, #4]
 80115f0:	4413      	add	r3, r2
 80115f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80115f4:	4618      	mov	r0, r3
 80115f6:	f7ff f8be 	bl	8010776 <controller_execute>
    controller_get_output(&chassis->ctrl[i], &motor_out);
 80115fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80115fc:	4613      	mov	r3, r2
 80115fe:	00db      	lsls	r3, r3, #3
 8011600:	4413      	add	r3, r2
 8011602:	00db      	lsls	r3, r3, #3
 8011604:	f503 734a 	add.w	r3, r3, #808	; 0x328
 8011608:	687a      	ldr	r2, [r7, #4]
 801160a:	4413      	add	r3, r2
 801160c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8011610:	4611      	mov	r1, r2
 8011612:	4618      	mov	r0, r3
 8011614:	f7ff f8fd 	bl	8010812 <controller_get_output>

    motor_device_set_current(&chassis->motor[i], (int16_t)motor_out);
 8011618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801161a:	2264      	movs	r2, #100	; 0x64
 801161c:	fb02 f303 	mul.w	r3, r2, r3
 8011620:	3388      	adds	r3, #136	; 0x88
 8011622:	687a      	ldr	r2, [r7, #4]
 8011624:	4413      	add	r3, r2
 8011626:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801162a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801162e:	ee17 2a90 	vmov	r2, s15
 8011632:	b212      	sxth	r2, r2
 8011634:	4611      	mov	r1, r2
 8011636:	4618      	mov	r0, r3
 8011638:	f7ff fb6d 	bl	8010d16 <motor_device_set_current>
  for (int i = 0; i < 4; i++)
 801163c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801163e:	3301      	adds	r3, #1
 8011640:	637b      	str	r3, [r7, #52]	; 0x34
 8011642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011644:	2b03      	cmp	r3, #3
 8011646:	dd8f      	ble.n	8011568 <chassis_execute+0xe8>
  }

  mecanum_position_measure(&(chassis->mecanum), wheel_fdb);
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	332c      	adds	r3, #44	; 0x2c
 801164c:	f107 020c 	add.w	r2, r7, #12
 8011650:	4611      	mov	r1, r2
 8011652:	4618      	mov	r0, r3
 8011654:	f7fc ff9c 	bl	800e590 <mecanum_position_measure>

  return RM_OK;
 8011658:	2300      	movs	r3, #0
}
 801165a:	4618      	mov	r0, r3
 801165c:	3738      	adds	r7, #56	; 0x38
 801165e:	46bd      	mov	sp, r7
 8011660:	bd80      	pop	{r7, pc}
 8011662:	bf00      	nop
 8011664:	200074b4 	.word	0x200074b4
 8011668:	200074b8 	.word	0x200074b8
 801166c:	200074bc 	.word	0x200074bc
 8011670:	447a0000 	.word	0x447a0000

08011674 <chassis_set_speed>:
  chassis->mecanum.gyro.yaw_gyro_rate = yaw_rate;
  return RM_OK;
}

int32_t chassis_set_speed(struct chassis *chassis, float vx, float vy, float vw)
{
 8011674:	b480      	push	{r7}
 8011676:	b085      	sub	sp, #20
 8011678:	af00      	add	r7, sp, #0
 801167a:	60f8      	str	r0, [r7, #12]
 801167c:	ed87 0a02 	vstr	s0, [r7, #8]
 8011680:	edc7 0a01 	vstr	s1, [r7, #4]
 8011684:	ed87 1a00 	vstr	s2, [r7]
  if (chassis == NULL)
 8011688:	68fb      	ldr	r3, [r7, #12]
 801168a:	2b00      	cmp	r3, #0
 801168c:	d102      	bne.n	8011694 <chassis_set_speed+0x20>
    return -RM_INVAL;
 801168e:	f06f 0301 	mvn.w	r3, #1
 8011692:	e009      	b.n	80116a8 <chassis_set_speed+0x34>
  chassis->mecanum.speed.vx = vx;
 8011694:	68fb      	ldr	r3, [r7, #12]
 8011696:	68ba      	ldr	r2, [r7, #8]
 8011698:	641a      	str	r2, [r3, #64]	; 0x40
  chassis->mecanum.speed.vy = vy;
 801169a:	68fb      	ldr	r3, [r7, #12]
 801169c:	687a      	ldr	r2, [r7, #4]
 801169e:	645a      	str	r2, [r3, #68]	; 0x44
  chassis->mecanum.speed.vw = vw;
 80116a0:	68fb      	ldr	r3, [r7, #12]
 80116a2:	683a      	ldr	r2, [r7, #0]
 80116a4:	649a      	str	r2, [r3, #72]	; 0x48
  return RM_OK;
 80116a6:	2300      	movs	r3, #0
}
 80116a8:	4618      	mov	r0, r3
 80116aa:	3714      	adds	r7, #20
 80116ac:	46bd      	mov	sp, r7
 80116ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116b2:	4770      	bx	lr

080116b4 <chassis_set_acc>:

int32_t chassis_set_acc(struct chassis *chassis, float ax, float ay, float wz)
{
 80116b4:	b480      	push	{r7}
 80116b6:	b085      	sub	sp, #20
 80116b8:	af00      	add	r7, sp, #0
 80116ba:	60f8      	str	r0, [r7, #12]
 80116bc:	ed87 0a02 	vstr	s0, [r7, #8]
 80116c0:	edc7 0a01 	vstr	s1, [r7, #4]
 80116c4:	ed87 1a00 	vstr	s2, [r7]
  if (chassis == NULL)
 80116c8:	68fb      	ldr	r3, [r7, #12]
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d102      	bne.n	80116d4 <chassis_set_acc+0x20>
    return -RM_INVAL;
 80116ce:	f06f 0301 	mvn.w	r3, #1
 80116d2:	e00b      	b.n	80116ec <chassis_set_acc+0x38>
  chassis->acc.ax = ax;
 80116d4:	68fb      	ldr	r3, [r7, #12]
 80116d6:	68ba      	ldr	r2, [r7, #8]
 80116d8:	67da      	str	r2, [r3, #124]	; 0x7c
  chassis->acc.ay = ay;
 80116da:	68fb      	ldr	r3, [r7, #12]
 80116dc:	687a      	ldr	r2, [r7, #4]
 80116de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  chassis->acc.wz = wz;
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	683a      	ldr	r2, [r7, #0]
 80116e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  return RM_OK;
 80116ea:	2300      	movs	r3, #0
}
 80116ec:	4618      	mov	r0, r3
 80116ee:	3714      	adds	r7, #20
 80116f0:	46bd      	mov	sp, r7
 80116f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116f6:	4770      	bx	lr

080116f8 <chassis_set_offset>:
  chassis->mecanum.speed.vy = vy;
  return RM_OK;
}

int32_t chassis_set_offset(struct chassis *chassis, float offset_x, float offset_y)
{
 80116f8:	b480      	push	{r7}
 80116fa:	b085      	sub	sp, #20
 80116fc:	af00      	add	r7, sp, #0
 80116fe:	60f8      	str	r0, [r7, #12]
 8011700:	ed87 0a02 	vstr	s0, [r7, #8]
 8011704:	edc7 0a01 	vstr	s1, [r7, #4]
  if (chassis == NULL)
 8011708:	68fb      	ldr	r3, [r7, #12]
 801170a:	2b00      	cmp	r3, #0
 801170c:	d102      	bne.n	8011714 <chassis_set_offset+0x1c>
    return -RM_INVAL;
 801170e:	f06f 0301 	mvn.w	r3, #1
 8011712:	e006      	b.n	8011722 <chassis_set_offset+0x2a>

  chassis->mecanum.param.rotate_x_offset = offset_x;
 8011714:	68fb      	ldr	r3, [r7, #12]
 8011716:	68ba      	ldr	r2, [r7, #8]
 8011718:	639a      	str	r2, [r3, #56]	; 0x38
  chassis->mecanum.param.rotate_y_offset = offset_y;
 801171a:	68fb      	ldr	r3, [r7, #12]
 801171c:	687a      	ldr	r2, [r7, #4]
 801171e:	63da      	str	r2, [r3, #60]	; 0x3c

  return RM_OK;
 8011720:	2300      	movs	r3, #0
}
 8011722:	4618      	mov	r0, r3
 8011724:	3714      	adds	r7, #20
 8011726:	46bd      	mov	sp, r7
 8011728:	f85d 7b04 	ldr.w	r7, [sp], #4
 801172c:	4770      	bx	lr
	...

08011730 <chassis_get_info>:

int32_t chassis_get_info(struct chassis *chassis, struct chassis_info *info)
{
 8011730:	b580      	push	{r7, lr}
 8011732:	b084      	sub	sp, #16
 8011734:	af00      	add	r7, sp, #0
 8011736:	6078      	str	r0, [r7, #4]
 8011738:	6039      	str	r1, [r7, #0]
  if (chassis == NULL)
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	2b00      	cmp	r3, #0
 801173e:	d101      	bne.n	8011744 <chassis_get_info+0x14>
    return NULL;
 8011740:	2300      	movs	r3, #0
 8011742:	e0ab      	b.n	801189c <chassis_get_info+0x16c>

  memcpy(info, &(chassis->mecanum.position), sizeof(struct mecanum_position));
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	334c      	adds	r3, #76	; 0x4c
 8011748:	2218      	movs	r2, #24
 801174a:	4619      	mov	r1, r3
 801174c:	6838      	ldr	r0, [r7, #0]
 801174e:	f003 f809 	bl	8014764 <memcpy>
  ANGLE_LIMIT_360(info->angle_deg, chassis->mecanum.position.angle_deg);
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 801175e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011762:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011766:	ee77 7a67 	vsub.f32	s15, s14, s15
 801176a:	683b      	ldr	r3, [r7, #0]
 801176c:	edc3 7a05 	vstr	s15, [r3, #20]
 8011770:	683b      	ldr	r3, [r7, #0]
 8011772:	ed93 7a05 	vldr	s14, [r3, #20]
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 801177c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011780:	ee17 3a90 	vmov	r3, s15
 8011784:	4a47      	ldr	r2, [pc, #284]	; (80118a4 <chassis_get_info+0x174>)
 8011786:	fb82 1203 	smull	r1, r2, r2, r3
 801178a:	441a      	add	r2, r3
 801178c:	1211      	asrs	r1, r2, #8
 801178e:	17da      	asrs	r2, r3, #31
 8011790:	1a8a      	subs	r2, r1, r2
 8011792:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8011796:	fb01 f202 	mul.w	r2, r1, r2
 801179a:	1a9a      	subs	r2, r3, r2
 801179c:	ee07 2a90 	vmov	s15, r2
 80117a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80117a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80117a8:	683b      	ldr	r3, [r7, #0]
 80117aa:	edc3 7a05 	vstr	s15, [r3, #20]
  ANGLE_LIMIT_360_TO_180(info->angle_deg);
 80117ae:	683b      	ldr	r3, [r7, #0]
 80117b0:	edd3 7a05 	vldr	s15, [r3, #20]
 80117b4:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80118a8 <chassis_get_info+0x178>
 80117b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80117bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117c0:	dd09      	ble.n	80117d6 <chassis_get_info+0xa6>
 80117c2:	683b      	ldr	r3, [r7, #0]
 80117c4:	edd3 7a05 	vldr	s15, [r3, #20]
 80117c8:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80118ac <chassis_get_info+0x17c>
 80117cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80117d0:	683b      	ldr	r3, [r7, #0]
 80117d2:	edc3 7a05 	vstr	s15, [r3, #20]
  ANGLE_LIMIT_360(info->yaw_gyro_angle, chassis->mecanum.gyro.yaw_gyro_angle);
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80117e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80117e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80117ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80117ee:	683b      	ldr	r3, [r7, #0]
 80117f0:	edc3 7a06 	vstr	s15, [r3, #24]
 80117f4:	683b      	ldr	r3, [r7, #0]
 80117f6:	ed93 7a06 	vldr	s14, [r3, #24]
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8011800:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011804:	ee17 3a90 	vmov	r3, s15
 8011808:	4a26      	ldr	r2, [pc, #152]	; (80118a4 <chassis_get_info+0x174>)
 801180a:	fb82 1203 	smull	r1, r2, r2, r3
 801180e:	441a      	add	r2, r3
 8011810:	1211      	asrs	r1, r2, #8
 8011812:	17da      	asrs	r2, r3, #31
 8011814:	1a8a      	subs	r2, r1, r2
 8011816:	f44f 71b4 	mov.w	r1, #360	; 0x168
 801181a:	fb01 f202 	mul.w	r2, r1, r2
 801181e:	1a9a      	subs	r2, r3, r2
 8011820:	ee07 2a90 	vmov	s15, r2
 8011824:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011828:	ee77 7a27 	vadd.f32	s15, s14, s15
 801182c:	683b      	ldr	r3, [r7, #0]
 801182e:	edc3 7a06 	vstr	s15, [r3, #24]
  ANGLE_LIMIT_360_TO_180(info->yaw_gyro_angle);
 8011832:	683b      	ldr	r3, [r7, #0]
 8011834:	edd3 7a06 	vldr	s15, [r3, #24]
 8011838:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80118a8 <chassis_get_info+0x178>
 801183c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011844:	dd09      	ble.n	801185a <chassis_get_info+0x12a>
 8011846:	683b      	ldr	r3, [r7, #0]
 8011848:	edd3 7a06 	vldr	s15, [r3, #24]
 801184c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80118ac <chassis_get_info+0x17c>
 8011850:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011854:	683b      	ldr	r3, [r7, #0]
 8011856:	edc3 7a06 	vstr	s15, [r3, #24]
  info->yaw_gyro_rate = chassis->mecanum.gyro.yaw_gyro_rate;
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 801185e:	683b      	ldr	r3, [r7, #0]
 8011860:	61da      	str	r2, [r3, #28]

  for (int i = 0; i < 4; i++)
 8011862:	2300      	movs	r3, #0
 8011864:	60fb      	str	r3, [r7, #12]
 8011866:	e015      	b.n	8011894 <chassis_get_info+0x164>
  {
    info->wheel_rpm[i] = chassis->mecanum.wheel_rpm[i] * MOTOR_DECELE_RATIO;
 8011868:	687a      	ldr	r2, [r7, #4]
 801186a:	68fb      	ldr	r3, [r7, #12]
 801186c:	331a      	adds	r3, #26
 801186e:	009b      	lsls	r3, r3, #2
 8011870:	4413      	add	r3, r2
 8011872:	3304      	adds	r3, #4
 8011874:	edd3 7a00 	vldr	s15, [r3]
 8011878:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80118b0 <chassis_get_info+0x180>
 801187c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011880:	683a      	ldr	r2, [r7, #0]
 8011882:	68fb      	ldr	r3, [r7, #12]
 8011884:	3308      	adds	r3, #8
 8011886:	009b      	lsls	r3, r3, #2
 8011888:	4413      	add	r3, r2
 801188a:	edc3 7a00 	vstr	s15, [r3]
  for (int i = 0; i < 4; i++)
 801188e:	68fb      	ldr	r3, [r7, #12]
 8011890:	3301      	adds	r3, #1
 8011892:	60fb      	str	r3, [r7, #12]
 8011894:	68fb      	ldr	r3, [r7, #12]
 8011896:	2b03      	cmp	r3, #3
 8011898:	dde6      	ble.n	8011868 <chassis_get_info+0x138>
  }

  return RM_OK;
 801189a:	2300      	movs	r3, #0
}
 801189c:	4618      	mov	r0, r3
 801189e:	3710      	adds	r7, #16
 80118a0:	46bd      	mov	sp, r7
 80118a2:	bd80      	pop	{r7, pc}
 80118a4:	b60b60b7 	.word	0xb60b60b7
 80118a8:	43340000 	.word	0x43340000
 80118ac:	43b40000 	.word	0x43b40000
 80118b0:	3d579436 	.word	0x3d579436

080118b4 <chassis_find>:

chassis_t chassis_find(const char *name)
{
 80118b4:	b580      	push	{r7, lr}
 80118b6:	b084      	sub	sp, #16
 80118b8:	af00      	add	r7, sp, #0
 80118ba:	6078      	str	r0, [r7, #4]
  struct object *object;

  object = object_find(name, Object_Class_Chassis);
 80118bc:	2103      	movs	r1, #3
 80118be:	6878      	ldr	r0, [r7, #4]
 80118c0:	f000 f918 	bl	8011af4 <object_find>
 80118c4:	60f8      	str	r0, [r7, #12]

  return (chassis_t)object;
 80118c6:	68fb      	ldr	r3, [r7, #12]
}
 80118c8:	4618      	mov	r0, r3
 80118ca:	3710      	adds	r7, #16
 80118cc:	46bd      	mov	sp, r7
 80118ce:	bd80      	pop	{r7, pc}

080118d0 <chassis_enable>:

int32_t chassis_enable(struct chassis *chassis)
{
 80118d0:	b580      	push	{r7, lr}
 80118d2:	b084      	sub	sp, #16
 80118d4:	af00      	add	r7, sp, #0
 80118d6:	6078      	str	r0, [r7, #4]
  if (chassis == NULL)
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	2b00      	cmp	r3, #0
 80118dc:	d102      	bne.n	80118e4 <chassis_enable+0x14>
    return -RM_INVAL;
 80118de:	f06f 0301 	mvn.w	r3, #1
 80118e2:	e015      	b.n	8011910 <chassis_enable+0x40>

  for (int i = 0; i < 4; i++)
 80118e4:	2300      	movs	r3, #0
 80118e6:	60fb      	str	r3, [r7, #12]
 80118e8:	e00e      	b.n	8011908 <chassis_enable+0x38>
  {
    controller_enable(&(chassis->ctrl[i])); 
 80118ea:	68fa      	ldr	r2, [r7, #12]
 80118ec:	4613      	mov	r3, r2
 80118ee:	00db      	lsls	r3, r3, #3
 80118f0:	4413      	add	r3, r2
 80118f2:	00db      	lsls	r3, r3, #3
 80118f4:	f503 734a 	add.w	r3, r3, #808	; 0x328
 80118f8:	687a      	ldr	r2, [r7, #4]
 80118fa:	4413      	add	r3, r2
 80118fc:	4618      	mov	r0, r3
 80118fe:	f7fe ffa2 	bl	8010846 <controller_enable>
  for (int i = 0; i < 4; i++)
 8011902:	68fb      	ldr	r3, [r7, #12]
 8011904:	3301      	adds	r3, #1
 8011906:	60fb      	str	r3, [r7, #12]
 8011908:	68fb      	ldr	r3, [r7, #12]
 801190a:	2b03      	cmp	r3, #3
 801190c:	dded      	ble.n	80118ea <chassis_enable+0x1a>
  }

  return RM_OK;
 801190e:	2300      	movs	r3, #0
}
 8011910:	4618      	mov	r0, r3
 8011912:	3710      	adds	r7, #16
 8011914:	46bd      	mov	sp, r7
 8011916:	bd80      	pop	{r7, pc}

08011918 <chassis_disable>:

int32_t chassis_disable(struct chassis *chassis)
{
 8011918:	b580      	push	{r7, lr}
 801191a:	b084      	sub	sp, #16
 801191c:	af00      	add	r7, sp, #0
 801191e:	6078      	str	r0, [r7, #4]
  if (chassis == NULL)
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	2b00      	cmp	r3, #0
 8011924:	d102      	bne.n	801192c <chassis_disable+0x14>
    return -RM_INVAL;
 8011926:	f06f 0301 	mvn.w	r3, #1
 801192a:	e015      	b.n	8011958 <chassis_disable+0x40>

  for (int i = 0; i < 4; i++)
 801192c:	2300      	movs	r3, #0
 801192e:	60fb      	str	r3, [r7, #12]
 8011930:	e00e      	b.n	8011950 <chassis_disable+0x38>
  {
    controller_disable(&(chassis->ctrl[i])); 
 8011932:	68fa      	ldr	r2, [r7, #12]
 8011934:	4613      	mov	r3, r2
 8011936:	00db      	lsls	r3, r3, #3
 8011938:	4413      	add	r3, r2
 801193a:	00db      	lsls	r3, r3, #3
 801193c:	f503 734a 	add.w	r3, r3, #808	; 0x328
 8011940:	687a      	ldr	r2, [r7, #4]
 8011942:	4413      	add	r3, r2
 8011944:	4618      	mov	r0, r3
 8011946:	f7fe ff92 	bl	801086e <controller_disable>
  for (int i = 0; i < 4; i++)
 801194a:	68fb      	ldr	r3, [r7, #12]
 801194c:	3301      	adds	r3, #1
 801194e:	60fb      	str	r3, [r7, #12]
 8011950:	68fb      	ldr	r3, [r7, #12]
 8011952:	2b03      	cmp	r3, #3
 8011954:	dded      	ble.n	8011932 <chassis_disable+0x1a>
  }

  return RM_OK;
 8011956:	2300      	movs	r3, #0
}
 8011958:	4618      	mov	r0, r3
 801195a:	3710      	adds	r7, #16
 801195c:	46bd      	mov	sp, r7
 801195e:	bd80      	pop	{r7, pc}

08011960 <motor_pid_input_convert>:

static int32_t motor_pid_input_convert(struct controller *ctrl, void *input)
{
 8011960:	b480      	push	{r7}
 8011962:	b085      	sub	sp, #20
 8011964:	af00      	add	r7, sp, #0
 8011966:	6078      	str	r0, [r7, #4]
 8011968:	6039      	str	r1, [r7, #0]
  pid_feedback_t pid_fdb = (pid_feedback_t)(ctrl->feedback);
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801196e:	60fb      	str	r3, [r7, #12]
  motor_data_t data = (motor_data_t)input;
 8011970:	683b      	ldr	r3, [r7, #0]
 8011972:	60bb      	str	r3, [r7, #8]
  pid_fdb->feedback = data->speed_rpm;
 8011974:	68bb      	ldr	r3, [r7, #8]
 8011976:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801197a:	ee07 3a90 	vmov	s15, r3
 801197e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011982:	68fb      	ldr	r3, [r7, #12]
 8011984:	edc3 7a00 	vstr	s15, [r3]

  return RM_OK;
 8011988:	2300      	movs	r3, #0
}
 801198a:	4618      	mov	r0, r3
 801198c:	3714      	adds	r7, #20
 801198e:	46bd      	mov	sp, r7
 8011990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011994:	4770      	bx	lr

08011996 <__list_add>:
 * the prev/next entries already!
 */
static __inline void __list_add(list_t *new,
                                list_t *prev,
                                list_t *next)
{
 8011996:	b480      	push	{r7}
 8011998:	b085      	sub	sp, #20
 801199a:	af00      	add	r7, sp, #0
 801199c:	60f8      	str	r0, [r7, #12]
 801199e:	60b9      	str	r1, [r7, #8]
 80119a0:	607a      	str	r2, [r7, #4]
  next->prev = new;
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	68fa      	ldr	r2, [r7, #12]
 80119a6:	605a      	str	r2, [r3, #4]
  new->next = next;
 80119a8:	68fb      	ldr	r3, [r7, #12]
 80119aa:	687a      	ldr	r2, [r7, #4]
 80119ac:	601a      	str	r2, [r3, #0]
  new->prev = prev;
 80119ae:	68fb      	ldr	r3, [r7, #12]
 80119b0:	68ba      	ldr	r2, [r7, #8]
 80119b2:	605a      	str	r2, [r3, #4]
  prev->next = new;
 80119b4:	68bb      	ldr	r3, [r7, #8]
 80119b6:	68fa      	ldr	r2, [r7, #12]
 80119b8:	601a      	str	r2, [r3, #0]
}
 80119ba:	bf00      	nop
 80119bc:	3714      	adds	r7, #20
 80119be:	46bd      	mov	sp, r7
 80119c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119c4:	4770      	bx	lr

080119c6 <list_add>:
 *
 * Insert a new entry after the specified head.
 * This is good for implementing stacks.
 */
static __inline void list_add(list_t *new, list_t *head)
{
 80119c6:	b580      	push	{r7, lr}
 80119c8:	b082      	sub	sp, #8
 80119ca:	af00      	add	r7, sp, #0
 80119cc:	6078      	str	r0, [r7, #4]
 80119ce:	6039      	str	r1, [r7, #0]
  __list_add(new, head, head->next);
 80119d0:	683b      	ldr	r3, [r7, #0]
 80119d2:	681b      	ldr	r3, [r3, #0]
 80119d4:	461a      	mov	r2, r3
 80119d6:	6839      	ldr	r1, [r7, #0]
 80119d8:	6878      	ldr	r0, [r7, #4]
 80119da:	f7ff ffdc 	bl	8011996 <__list_add>
}
 80119de:	bf00      	nop
 80119e0:	3708      	adds	r7, #8
 80119e2:	46bd      	mov	sp, r7
 80119e4:	bd80      	pop	{r7, pc}

080119e6 <__list_del>:
 *
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 */
static __inline void __list_del(list_t *prev, list_t *next)
{
 80119e6:	b480      	push	{r7}
 80119e8:	b083      	sub	sp, #12
 80119ea:	af00      	add	r7, sp, #0
 80119ec:	6078      	str	r0, [r7, #4]
 80119ee:	6039      	str	r1, [r7, #0]
  next->prev = prev;
 80119f0:	683b      	ldr	r3, [r7, #0]
 80119f2:	687a      	ldr	r2, [r7, #4]
 80119f4:	605a      	str	r2, [r3, #4]
  prev->next = next;
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	683a      	ldr	r2, [r7, #0]
 80119fa:	601a      	str	r2, [r3, #0]
}
 80119fc:	bf00      	nop
 80119fe:	370c      	adds	r7, #12
 8011a00:	46bd      	mov	sp, r7
 8011a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a06:	4770      	bx	lr

08011a08 <list_del>:
 * @entry: the element to delete from the list.
 * Note: list_empty() on entry does not return true after this, the entry is
 * in an undefined state.
 */
static __inline void list_del(list_t *entry)
{
 8011a08:	b580      	push	{r7, lr}
 8011a0a:	b082      	sub	sp, #8
 8011a0c:	af00      	add	r7, sp, #0
 8011a0e:	6078      	str	r0, [r7, #4]
  __list_del(entry->prev, entry->next);
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	685a      	ldr	r2, [r3, #4]
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	681b      	ldr	r3, [r3, #0]
 8011a18:	4619      	mov	r1, r3
 8011a1a:	4610      	mov	r0, r2
 8011a1c:	f7ff ffe3 	bl	80119e6 <__list_del>
}
 8011a20:	bf00      	nop
 8011a22:	3708      	adds	r7, #8
 8011a24:	46bd      	mov	sp, r7
 8011a26:	bd80      	pop	{r7, pc}

08011a28 <object_get_information>:
        {Object_Class_Shoot, _OBJ_CONTAINER_LIST_INIT(Object_Info_Shoot)},
};

struct object_information *
object_get_information(enum object_class_type type)
{
 8011a28:	b480      	push	{r7}
 8011a2a:	b085      	sub	sp, #20
 8011a2c:	af00      	add	r7, sp, #0
 8011a2e:	4603      	mov	r3, r0
 8011a30:	71fb      	strb	r3, [r7, #7]
  int index;

  for (index = 0; index < Object_Info_Unknown; index++)
 8011a32:	2300      	movs	r3, #0
 8011a34:	60fb      	str	r3, [r7, #12]
 8011a36:	e015      	b.n	8011a64 <object_get_information+0x3c>
    if (object_container[index].type == type)
 8011a38:	490f      	ldr	r1, [pc, #60]	; (8011a78 <object_get_information+0x50>)
 8011a3a:	68fa      	ldr	r2, [r7, #12]
 8011a3c:	4613      	mov	r3, r2
 8011a3e:	005b      	lsls	r3, r3, #1
 8011a40:	4413      	add	r3, r2
 8011a42:	009b      	lsls	r3, r3, #2
 8011a44:	440b      	add	r3, r1
 8011a46:	781b      	ldrb	r3, [r3, #0]
 8011a48:	79fa      	ldrb	r2, [r7, #7]
 8011a4a:	429a      	cmp	r2, r3
 8011a4c:	d107      	bne.n	8011a5e <object_get_information+0x36>
      return &object_container[index];
 8011a4e:	68fa      	ldr	r2, [r7, #12]
 8011a50:	4613      	mov	r3, r2
 8011a52:	005b      	lsls	r3, r3, #1
 8011a54:	4413      	add	r3, r2
 8011a56:	009b      	lsls	r3, r3, #2
 8011a58:	4a07      	ldr	r2, [pc, #28]	; (8011a78 <object_get_information+0x50>)
 8011a5a:	4413      	add	r3, r2
 8011a5c:	e006      	b.n	8011a6c <object_get_information+0x44>
  for (index = 0; index < Object_Info_Unknown; index++)
 8011a5e:	68fb      	ldr	r3, [r7, #12]
 8011a60:	3301      	adds	r3, #1
 8011a62:	60fb      	str	r3, [r7, #12]
 8011a64:	68fb      	ldr	r3, [r7, #12]
 8011a66:	2b05      	cmp	r3, #5
 8011a68:	dde6      	ble.n	8011a38 <object_get_information+0x10>

  return NULL;
 8011a6a:	2300      	movs	r3, #0
}
 8011a6c:	4618      	mov	r0, r3
 8011a6e:	3714      	adds	r7, #20
 8011a70:	46bd      	mov	sp, r7
 8011a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a76:	4770      	bx	lr
 8011a78:	20000104 	.word	0x20000104

08011a7c <object_init>:

int32_t object_init(struct object *object,
                    enum object_class_type type,
                    const char *name)
{
 8011a7c:	b590      	push	{r4, r7, lr}
 8011a7e:	b089      	sub	sp, #36	; 0x24
 8011a80:	af00      	add	r7, sp, #0
 8011a82:	60f8      	str	r0, [r7, #12]
 8011a84:	460b      	mov	r3, r1
 8011a86:	607a      	str	r2, [r7, #4]
 8011a88:	72fb      	strb	r3, [r7, #11]
  struct object_information *information;

  var_cpu_sr();

  /* get object information */
  information = object_get_information(type);
 8011a8a:	7afb      	ldrb	r3, [r7, #11]
 8011a8c:	4618      	mov	r0, r3
 8011a8e:	f7ff ffcb 	bl	8011a28 <object_get_information>
 8011a92:	61f8      	str	r0, [r7, #28]
  assert_param_obj(information != NULL);

  /* initialize object's parameters */
  object->type = type;
 8011a94:	68fb      	ldr	r3, [r7, #12]
 8011a96:	7afa      	ldrb	r2, [r7, #11]
 8011a98:	f883 2020 	strb.w	r2, [r3, #32]

  /* copy name */
  if (strlen(name) > OBJECT_NAME_MAX_LEN - 1)
 8011a9c:	6878      	ldr	r0, [r7, #4]
 8011a9e:	f7ee fba7 	bl	80001f0 <strlen>
 8011aa2:	4603      	mov	r3, r0
 8011aa4:	2b1f      	cmp	r3, #31
 8011aa6:	d902      	bls.n	8011aae <object_init+0x32>
  {
    return -1;
 8011aa8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011aac:	e01e      	b.n	8011aec <object_init+0x70>
  }

  strncpy(object->name, name, OBJECT_NAME_MAX_LEN);
 8011aae:	68fb      	ldr	r3, [r7, #12]
 8011ab0:	2220      	movs	r2, #32
 8011ab2:	6879      	ldr	r1, [r7, #4]
 8011ab4:	4618      	mov	r0, r3
 8011ab6:	f002 fdbd 	bl	8014634 <strncpy>
  object->name[OBJECT_NAME_MAX_LEN - 1] = '\0';
 8011aba:	68fb      	ldr	r3, [r7, #12]
 8011abc:	2200      	movs	r2, #0
 8011abe:	77da      	strb	r2, [r3, #31]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8011ac0:	f3ef 8310 	mrs	r3, PRIMASK
 8011ac4:	617b      	str	r3, [r7, #20]
  return(result);
 8011ac6:	697b      	ldr	r3, [r7, #20]

  /* lock interrupt */
  enter_critical();
 8011ac8:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 8011aca:	b672      	cpsid	i
}
 8011acc:	bf00      	nop

  {
    /* insert object into information object list */
    list_add(&(object->list), &(information->object_list));
 8011ace:	68fb      	ldr	r3, [r7, #12]
 8011ad0:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8011ad4:	69fb      	ldr	r3, [r7, #28]
 8011ad6:	3304      	adds	r3, #4
 8011ad8:	4619      	mov	r1, r3
 8011ada:	4610      	mov	r0, r2
 8011adc:	f7ff ff73 	bl	80119c6 <list_add>
 8011ae0:	61bc      	str	r4, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011ae2:	69bb      	ldr	r3, [r7, #24]
 8011ae4:	f383 8810 	msr	PRIMASK, r3
}
 8011ae8:	bf00      	nop
  }

  /* unlock interrupt */
  exit_critical();
  return 0;
 8011aea:	2300      	movs	r3, #0
}
 8011aec:	4618      	mov	r0, r3
 8011aee:	3724      	adds	r7, #36	; 0x24
 8011af0:	46bd      	mov	sp, r7
 8011af2:	bd90      	pop	{r4, r7, pc}

08011af4 <object_find>:

object_t object_find(const char *name, enum object_class_type type)
{
 8011af4:	b590      	push	{r4, r7, lr}
 8011af6:	b089      	sub	sp, #36	; 0x24
 8011af8:	af00      	add	r7, sp, #0
 8011afa:	6078      	str	r0, [r7, #4]
 8011afc:	460b      	mov	r3, r1
 8011afe:	70fb      	strb	r3, [r7, #3]
  struct object *object = NULL;
 8011b00:	2300      	movs	r3, #0
 8011b02:	617b      	str	r3, [r7, #20]
  struct object_information *information = NULL;
 8011b04:	2300      	movs	r3, #0
 8011b06:	61fb      	str	r3, [r7, #28]
  list_t *node = NULL;
 8011b08:	2300      	movs	r3, #0
 8011b0a:	61bb      	str	r3, [r7, #24]

  var_cpu_sr();

  /* parameter check */
  if ((name == NULL) || (type >= Object_Class_Unknown))
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d002      	beq.n	8011b18 <object_find+0x24>
 8011b12:	78fb      	ldrb	r3, [r7, #3]
 8011b14:	2b05      	cmp	r3, #5
 8011b16:	d901      	bls.n	8011b1c <object_find+0x28>
    return NULL;
 8011b18:	2300      	movs	r3, #0
 8011b1a:	e033      	b.n	8011b84 <object_find+0x90>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8011b1c:	f3ef 8310 	mrs	r3, PRIMASK
 8011b20:	613b      	str	r3, [r7, #16]
  return(result);
 8011b22:	693b      	ldr	r3, [r7, #16]

  /* enter critical */
  enter_critical();
 8011b24:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 8011b26:	b672      	cpsid	i
}
 8011b28:	bf00      	nop

  /* try to find object */
  if (information == NULL)
 8011b2a:	69fb      	ldr	r3, [r7, #28]
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d104      	bne.n	8011b3a <object_find+0x46>
  {
    information = object_get_information(type);
 8011b30:	78fb      	ldrb	r3, [r7, #3]
 8011b32:	4618      	mov	r0, r3
 8011b34:	f7ff ff78 	bl	8011a28 <object_get_information>
 8011b38:	61f8      	str	r0, [r7, #28]
    assert_param_obj(information != NULL);
  }
  for (node = information->object_list.next;
 8011b3a:	69fb      	ldr	r3, [r7, #28]
 8011b3c:	685b      	ldr	r3, [r3, #4]
 8011b3e:	61bb      	str	r3, [r7, #24]
 8011b40:	e015      	b.n	8011b6e <object_find+0x7a>
       node != &(information->object_list);
       node = node->next)
  {
    object = list_entry(node, struct object, list);
 8011b42:	69bb      	ldr	r3, [r7, #24]
 8011b44:	3b24      	subs	r3, #36	; 0x24
 8011b46:	617b      	str	r3, [r7, #20]
    if (strncmp(object->name, name, OBJECT_NAME_MAX_LEN) == 0)
 8011b48:	697b      	ldr	r3, [r7, #20]
 8011b4a:	2220      	movs	r2, #32
 8011b4c:	6879      	ldr	r1, [r7, #4]
 8011b4e:	4618      	mov	r0, r3
 8011b50:	f002 fd5e 	bl	8014610 <strncmp>
 8011b54:	4603      	mov	r3, r0
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d106      	bne.n	8011b68 <object_find+0x74>
 8011b5a:	60fc      	str	r4, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011b5c:	68fb      	ldr	r3, [r7, #12]
 8011b5e:	f383 8810 	msr	PRIMASK, r3
}
 8011b62:	bf00      	nop
    {
      /* leave critical */
      exit_critical();

      return object;
 8011b64:	697b      	ldr	r3, [r7, #20]
 8011b66:	e00d      	b.n	8011b84 <object_find+0x90>
       node = node->next)
 8011b68:	69bb      	ldr	r3, [r7, #24]
 8011b6a:	681b      	ldr	r3, [r3, #0]
 8011b6c:	61bb      	str	r3, [r7, #24]
       node != &(information->object_list);
 8011b6e:	69fb      	ldr	r3, [r7, #28]
 8011b70:	3304      	adds	r3, #4
 8011b72:	69ba      	ldr	r2, [r7, #24]
 8011b74:	429a      	cmp	r2, r3
 8011b76:	d1e4      	bne.n	8011b42 <object_find+0x4e>
 8011b78:	60bc      	str	r4, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011b7a:	68bb      	ldr	r3, [r7, #8]
 8011b7c:	f383 8810 	msr	PRIMASK, r3
}
 8011b80:	bf00      	nop
  }

  /* leave critical */
  exit_critical();

  return NULL;
 8011b82:	2300      	movs	r3, #0
}
 8011b84:	4618      	mov	r0, r3
 8011b86:	3724      	adds	r7, #36	; 0x24
 8011b88:	46bd      	mov	sp, r7
 8011b8a:	bd90      	pop	{r4, r7, pc}

08011b8c <object_detach>:

void object_detach(object_t object)
{
 8011b8c:	b590      	push	{r4, r7, lr}
 8011b8e:	b085      	sub	sp, #20
 8011b90:	af00      	add	r7, sp, #0
 8011b92:	6078      	str	r0, [r7, #4]

  /* object check */
  assert_param_obj(object != NULL);

  /* reset object type */
  object->type = Object_Class_Unknown;
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	2206      	movs	r2, #6
 8011b98:	f883 2020 	strb.w	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8011b9c:	f3ef 8310 	mrs	r3, PRIMASK
 8011ba0:	60bb      	str	r3, [r7, #8]
  return(result);
 8011ba2:	68bb      	ldr	r3, [r7, #8]

  /* lock interrupt */
  enter_critical();
 8011ba4:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 8011ba6:	b672      	cpsid	i
}
 8011ba8:	bf00      	nop

  /* remove from old list */
  list_del(&(object->list));
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	3324      	adds	r3, #36	; 0x24
 8011bae:	4618      	mov	r0, r3
 8011bb0:	f7ff ff2a 	bl	8011a08 <list_del>
 8011bb4:	60fc      	str	r4, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011bb6:	68fb      	ldr	r3, [r7, #12]
 8011bb8:	f383 8810 	msr	PRIMASK, r3
}
 8011bbc:	bf00      	nop

  /* unlock interrupt */
  exit_critical();
}
 8011bbe:	bf00      	nop
 8011bc0:	3714      	adds	r7, #20
 8011bc2:	46bd      	mov	sp, r7
 8011bc4:	bd90      	pop	{r4, r7, pc}

08011bc6 <INIT_LIST_HEAD>:
{
 8011bc6:	b480      	push	{r7}
 8011bc8:	b083      	sub	sp, #12
 8011bca:	af00      	add	r7, sp, #0
 8011bcc:	6078      	str	r0, [r7, #4]
  list->next = list;
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	687a      	ldr	r2, [r7, #4]
 8011bd2:	601a      	str	r2, [r3, #0]
  list->prev = list;
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	687a      	ldr	r2, [r7, #4]
 8011bd8:	605a      	str	r2, [r3, #4]
}
 8011bda:	bf00      	nop
 8011bdc:	370c      	adds	r7, #12
 8011bde:	46bd      	mov	sp, r7
 8011be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011be4:	4770      	bx	lr
	...

08011be8 <protocol_get_send_cmd_info>:

/* Private function prototypes -----------------------------------------------*/
/* Exported functions --------------------------------------------------------*/

struct send_cmd_info *protocol_get_send_cmd_info(uint16_t cmd)
{
 8011be8:	b480      	push	{r7}
 8011bea:	b085      	sub	sp, #20
 8011bec:	af00      	add	r7, sp, #0
 8011bee:	4603      	mov	r3, r0
 8011bf0:	80fb      	strh	r3, [r7, #6]
  for (int i = 0; i < PROTOCOL_CMD_MAX_NUM; i++)
 8011bf2:	2300      	movs	r3, #0
 8011bf4:	60fb      	str	r3, [r7, #12]
 8011bf6:	e01c      	b.n	8011c32 <protocol_get_send_cmd_info+0x4a>
  {
    if ((protocol_local_info.send_cmd_info[i].cmd == cmd) && (protocol_local_info.send_cmd_info[i].used == 1))
 8011bf8:	4a13      	ldr	r2, [pc, #76]	; (8011c48 <protocol_get_send_cmd_info+0x60>)
 8011bfa:	68fb      	ldr	r3, [r7, #12]
 8011bfc:	011b      	lsls	r3, r3, #4
 8011bfe:	4413      	add	r3, r2
 8011c00:	f203 239a 	addw	r3, r3, #666	; 0x29a
 8011c04:	881b      	ldrh	r3, [r3, #0]
 8011c06:	88fa      	ldrh	r2, [r7, #6]
 8011c08:	429a      	cmp	r2, r3
 8011c0a:	d10f      	bne.n	8011c2c <protocol_get_send_cmd_info+0x44>
 8011c0c:	4a0e      	ldr	r2, [pc, #56]	; (8011c48 <protocol_get_send_cmd_info+0x60>)
 8011c0e:	68fb      	ldr	r3, [r7, #12]
 8011c10:	011b      	lsls	r3, r3, #4
 8011c12:	4413      	add	r3, r2
 8011c14:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8011c18:	781b      	ldrb	r3, [r3, #0]
 8011c1a:	2b01      	cmp	r3, #1
 8011c1c:	d106      	bne.n	8011c2c <protocol_get_send_cmd_info+0x44>
    {
      return &protocol_local_info.send_cmd_info[i];
 8011c1e:	68fb      	ldr	r3, [r7, #12]
 8011c20:	011b      	lsls	r3, r3, #4
 8011c22:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8011c26:	4a08      	ldr	r2, [pc, #32]	; (8011c48 <protocol_get_send_cmd_info+0x60>)
 8011c28:	4413      	add	r3, r2
 8011c2a:	e006      	b.n	8011c3a <protocol_get_send_cmd_info+0x52>
  for (int i = 0; i < PROTOCOL_CMD_MAX_NUM; i++)
 8011c2c:	68fb      	ldr	r3, [r7, #12]
 8011c2e:	3301      	adds	r3, #1
 8011c30:	60fb      	str	r3, [r7, #12]
 8011c32:	68fb      	ldr	r3, [r7, #12]
 8011c34:	2b31      	cmp	r3, #49	; 0x31
 8011c36:	dddf      	ble.n	8011bf8 <protocol_get_send_cmd_info+0x10>
    }
  }
  return NULL;
 8011c38:	2300      	movs	r3, #0
}
 8011c3a:	4618      	mov	r0, r3
 8011c3c:	3714      	adds	r7, #20
 8011c3e:	46bd      	mov	sp, r7
 8011c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c44:	4770      	bx	lr
 8011c46:	bf00      	nop
 8011c48:	200074d0 	.word	0x200074d0

08011c4c <protocol_rcv_pack_handle>:

static void protocol_rcv_pack_handle(uint8_t *pack_data, uint16_t cmd, uint8_t session, uint8_t source_add)
{
 8011c4c:	b580      	push	{r7, lr}
 8011c4e:	b088      	sub	sp, #32
 8011c50:	af02      	add	r7, sp, #8
 8011c52:	6078      	str	r0, [r7, #4]
 8011c54:	4608      	mov	r0, r1
 8011c56:	4611      	mov	r1, r2
 8011c58:	461a      	mov	r2, r3
 8011c5a:	4603      	mov	r3, r0
 8011c5c:	807b      	strh	r3, [r7, #2]
 8011c5e:	460b      	mov	r3, r1
 8011c60:	707b      	strb	r3, [r7, #1]
 8011c62:	4613      	mov	r3, r2
 8011c64:	703b      	strb	r3, [r7, #0]
  protocol_pack_desc_t *pack;
  uint16_t rcv_seq;
  int32_t err;
  pack = (protocol_pack_desc_t *)(pack_data);
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	613b      	str	r3, [r7, #16]
  rcv_seq = pack->seq_num;
 8011c6a:	693b      	ldr	r3, [r7, #16]
 8011c6c:	7a1a      	ldrb	r2, [r3, #8]
 8011c6e:	7a5b      	ldrb	r3, [r3, #9]
 8011c70:	021b      	lsls	r3, r3, #8
 8011c72:	4313      	orrs	r3, r2
 8011c74:	81fb      	strh	r3, [r7, #14]

  for (int i = 0; i < PROTOCOL_CMD_MAX_NUM; i++)
 8011c76:	2300      	movs	r3, #0
 8011c78:	617b      	str	r3, [r7, #20]
 8011c7a:	e03d      	b.n	8011cf8 <protocol_rcv_pack_handle+0xac>
  {
    if ((protocol_local_info.rcv_cmd_info[i].cmd == cmd) && (protocol_local_info.rcv_cmd_info[i].rcv_callback != NULL) && (protocol_local_info.rcv_cmd_info[i].used == 1))
 8011c7c:	4a22      	ldr	r2, [pc, #136]	; (8011d08 <protocol_rcv_pack_handle+0xbc>)
 8011c7e:	697b      	ldr	r3, [r7, #20]
 8011c80:	3321      	adds	r3, #33	; 0x21
 8011c82:	00db      	lsls	r3, r3, #3
 8011c84:	4413      	add	r3, r2
 8011c86:	885b      	ldrh	r3, [r3, #2]
 8011c88:	887a      	ldrh	r2, [r7, #2]
 8011c8a:	429a      	cmp	r2, r3
 8011c8c:	d131      	bne.n	8011cf2 <protocol_rcv_pack_handle+0xa6>
 8011c8e:	4a1e      	ldr	r2, [pc, #120]	; (8011d08 <protocol_rcv_pack_handle+0xbc>)
 8011c90:	697b      	ldr	r3, [r7, #20]
 8011c92:	3321      	adds	r3, #33	; 0x21
 8011c94:	00db      	lsls	r3, r3, #3
 8011c96:	4413      	add	r3, r2
 8011c98:	685b      	ldr	r3, [r3, #4]
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d029      	beq.n	8011cf2 <protocol_rcv_pack_handle+0xa6>
 8011c9e:	4a1a      	ldr	r2, [pc, #104]	; (8011d08 <protocol_rcv_pack_handle+0xbc>)
 8011ca0:	697b      	ldr	r3, [r7, #20]
 8011ca2:	3321      	adds	r3, #33	; 0x21
 8011ca4:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8011ca8:	2b01      	cmp	r3, #1
 8011caa:	d122      	bne.n	8011cf2 <protocol_rcv_pack_handle+0xa6>
    {
      err = protocol_local_info.rcv_cmd_info[i].rcv_callback(pack->pdata + 2, pack->data_len - PACK_HEADER_TAIL_LEN);
 8011cac:	4a16      	ldr	r2, [pc, #88]	; (8011d08 <protocol_rcv_pack_handle+0xbc>)
 8011cae:	697b      	ldr	r3, [r7, #20]
 8011cb0:	3321      	adds	r3, #33	; 0x21
 8011cb2:	00db      	lsls	r3, r3, #3
 8011cb4:	4413      	add	r3, r2
 8011cb6:	685a      	ldr	r2, [r3, #4]
 8011cb8:	693b      	ldr	r3, [r7, #16]
 8011cba:	330c      	adds	r3, #12
 8011cbc:	1c98      	adds	r0, r3, #2
 8011cbe:	693b      	ldr	r3, [r7, #16]
 8011cc0:	7859      	ldrb	r1, [r3, #1]
 8011cc2:	789b      	ldrb	r3, [r3, #2]
 8011cc4:	f003 0303 	and.w	r3, r3, #3
 8011cc8:	021b      	lsls	r3, r3, #8
 8011cca:	430b      	orrs	r3, r1
 8011ccc:	b29b      	uxth	r3, r3
 8011cce:	3b12      	subs	r3, #18
 8011cd0:	b29b      	uxth	r3, r3
 8011cd2:	4619      	mov	r1, r3
 8011cd4:	4790      	blx	r2
 8011cd6:	4603      	mov	r3, r0
 8011cd8:	60bb      	str	r3, [r7, #8]
      if (session != 0)
 8011cda:	787b      	ldrb	r3, [r7, #1]
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d008      	beq.n	8011cf2 <protocol_rcv_pack_handle+0xa6>
      {
        protocol_ack(source_add, session, &err, sizeof(err), rcv_seq);
 8011ce0:	f107 0208 	add.w	r2, r7, #8
 8011ce4:	7879      	ldrb	r1, [r7, #1]
 8011ce6:	7838      	ldrb	r0, [r7, #0]
 8011ce8:	89fb      	ldrh	r3, [r7, #14]
 8011cea:	9300      	str	r3, [sp, #0]
 8011cec:	2304      	movs	r3, #4
 8011cee:	f000 f917 	bl	8011f20 <protocol_ack>
  for (int i = 0; i < PROTOCOL_CMD_MAX_NUM; i++)
 8011cf2:	697b      	ldr	r3, [r7, #20]
 8011cf4:	3301      	adds	r3, #1
 8011cf6:	617b      	str	r3, [r7, #20]
 8011cf8:	697b      	ldr	r3, [r7, #20]
 8011cfa:	2b31      	cmp	r3, #49	; 0x31
 8011cfc:	ddbe      	ble.n	8011c7c <protocol_rcv_pack_handle+0x30>
      }
    }
  }

  return;
 8011cfe:	bf00      	nop
}
 8011d00:	3718      	adds	r7, #24
 8011d02:	46bd      	mov	sp, r7
 8011d04:	bd80      	pop	{r7, pc}
 8011d06:	bf00      	nop
 8011d08:	200074d0 	.word	0x200074d0

08011d0c <protocol_rcv_cmd_register>:

int32_t protocol_rcv_cmd_register(uint16_t cmd, rcv_handle_fn_t rcv_callback)
{
 8011d0c:	b580      	push	{r7, lr}
 8011d0e:	b084      	sub	sp, #16
 8011d10:	af00      	add	r7, sp, #0
 8011d12:	4603      	mov	r3, r0
 8011d14:	6039      	str	r1, [r7, #0]
 8011d16:	80fb      	strh	r3, [r7, #6]
  for (int i = 0; i < PROTOCOL_CMD_MAX_NUM; i++)
 8011d18:	2300      	movs	r3, #0
 8011d1a:	60fb      	str	r3, [r7, #12]
 8011d1c:	e01f      	b.n	8011d5e <protocol_rcv_cmd_register+0x52>
  {
    if (protocol_local_info.rcv_cmd_info[i].used == 0)
 8011d1e:	4a17      	ldr	r2, [pc, #92]	; (8011d7c <protocol_rcv_cmd_register+0x70>)
 8011d20:	68fb      	ldr	r3, [r7, #12]
 8011d22:	3321      	adds	r3, #33	; 0x21
 8011d24:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d115      	bne.n	8011d58 <protocol_rcv_cmd_register+0x4c>
    {
      protocol_local_info.rcv_cmd_info[i].used = 1;
 8011d2c:	4a13      	ldr	r2, [pc, #76]	; (8011d7c <protocol_rcv_cmd_register+0x70>)
 8011d2e:	68fb      	ldr	r3, [r7, #12]
 8011d30:	3321      	adds	r3, #33	; 0x21
 8011d32:	2101      	movs	r1, #1
 8011d34:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
      protocol_local_info.rcv_cmd_info[i].cmd = cmd;
 8011d38:	4a10      	ldr	r2, [pc, #64]	; (8011d7c <protocol_rcv_cmd_register+0x70>)
 8011d3a:	68fb      	ldr	r3, [r7, #12]
 8011d3c:	3321      	adds	r3, #33	; 0x21
 8011d3e:	00db      	lsls	r3, r3, #3
 8011d40:	4413      	add	r3, r2
 8011d42:	88fa      	ldrh	r2, [r7, #6]
 8011d44:	805a      	strh	r2, [r3, #2]
      protocol_local_info.rcv_cmd_info[i].rcv_callback = rcv_callback;
 8011d46:	4a0d      	ldr	r2, [pc, #52]	; (8011d7c <protocol_rcv_cmd_register+0x70>)
 8011d48:	68fb      	ldr	r3, [r7, #12]
 8011d4a:	3321      	adds	r3, #33	; 0x21
 8011d4c:	00db      	lsls	r3, r3, #3
 8011d4e:	4413      	add	r3, r2
 8011d50:	683a      	ldr	r2, [r7, #0]
 8011d52:	605a      	str	r2, [r3, #4]
      return 0;
 8011d54:	2300      	movs	r3, #0
 8011d56:	e00c      	b.n	8011d72 <protocol_rcv_cmd_register+0x66>
  for (int i = 0; i < PROTOCOL_CMD_MAX_NUM; i++)
 8011d58:	68fb      	ldr	r3, [r7, #12]
 8011d5a:	3301      	adds	r3, #1
 8011d5c:	60fb      	str	r3, [r7, #12]
 8011d5e:	68fb      	ldr	r3, [r7, #12]
 8011d60:	2b31      	cmp	r3, #49	; 0x31
 8011d62:	dddc      	ble.n	8011d1e <protocol_rcv_cmd_register+0x12>
    }
  }
  PROTOCOL_ERR_INFO_PRINTF(PROTOCOL_ERR_REGISTER_FAILED, __FILE__, __LINE__);
 8011d64:	2254      	movs	r2, #84	; 0x54
 8011d66:	4906      	ldr	r1, [pc, #24]	; (8011d80 <protocol_rcv_cmd_register+0x74>)
 8011d68:	2012      	movs	r0, #18
 8011d6a:	f001 fbc7 	bl	80134fc <protocol_s_error_info_printf>
  return -1;
 8011d6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8011d72:	4618      	mov	r0, r3
 8011d74:	3710      	adds	r7, #16
 8011d76:	46bd      	mov	sp, r7
 8011d78:	bd80      	pop	{r7, pc}
 8011d7a:	bf00      	nop
 8011d7c:	200074d0 	.word	0x200074d0
 8011d80:	08015af4 	.word	0x08015af4

08011d84 <protocol_local_init>:
    * @brief  Protocol local initialization function
    * @param  address  Protocol local address, which cannot be changed after initialization. Each device in the same network occupies a unique address.
    * @retval Protocol return status
  */
uint32_t protocol_local_init(uint8_t address)
{
 8011d84:	b580      	push	{r7, lr}
 8011d86:	b086      	sub	sp, #24
 8011d88:	af00      	add	r7, sp, #0
 8011d8a:	4603      	mov	r3, r0
 8011d8c:	71fb      	strb	r3, [r7, #7]

  uint32_t status;

  status = PROTOCOL_SUCCESS;
 8011d8e:	2300      	movs	r3, #0
 8011d90:	613b      	str	r3, [r7, #16]

  // Check if it is a little-endian machine
  const uint16_t endian_test = 0xAABB;
 8011d92:	f64a 23bb 	movw	r3, #43707	; 0xaabb
 8011d96:	81fb      	strh	r3, [r7, #14]
  if (*((uint8_t *)(&endian_test)) == 0xAA)
 8011d98:	f107 030e 	add.w	r3, r7, #14
 8011d9c:	781b      	ldrb	r3, [r3, #0]
 8011d9e:	2baa      	cmp	r3, #170	; 0xaa
 8011da0:	d107      	bne.n	8011db2 <protocol_local_init+0x2e>
  {
    // It is big-endian mode
    status = PROTOCOL_ERR_UNSUPPORT_CPU;
 8011da2:	230d      	movs	r3, #13
 8011da4:	613b      	str	r3, [r7, #16]
    PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 8011da6:	229d      	movs	r2, #157	; 0x9d
 8011da8:	492b      	ldr	r1, [pc, #172]	; (8011e58 <protocol_local_init+0xd4>)
 8011daa:	6938      	ldr	r0, [r7, #16]
 8011dac:	f001 fba6 	bl	80134fc <protocol_s_error_info_printf>

    while (1){
 8011db0:	e7fe      	b.n	8011db0 <protocol_local_init+0x2c>
    }
  }

  MUTEX_INIT(protocol_local_info.mutex_lock);
  
  memset(protocol_local_info.route_table, 0xFF, PROTOCOL_ROUTE_TABLE_MAX_NUM);
 8011db2:	22fe      	movs	r2, #254	; 0xfe
 8011db4:	21ff      	movs	r1, #255	; 0xff
 8011db6:	4829      	ldr	r0, [pc, #164]	; (8011e5c <protocol_local_init+0xd8>)
 8011db8:	f002 fc4f 	bl	801465a <memset>
	
	for(uint8_t i = 0; i < PROTOCOL_INTERFACE_MAX; i++)
 8011dbc:	2300      	movs	r3, #0
 8011dbe:	75fb      	strb	r3, [r7, #23]
 8011dc0:	e00f      	b.n	8011de2 <protocol_local_init+0x5e>
	{
		/* initalization user data is 0xFF */
		// PROBLEM: Triggers HardFault_interupt from memory overflow. THe loop doesnt stop at 5
		// FIXED: i = 0
		memset(&protocol_local_info.interface[i].user_data, 0xFF, sizeof(union interface_user_data));
 8011dc2:	7dfb      	ldrb	r3, [r7, #23]
 8011dc4:	2294      	movs	r2, #148	; 0x94
 8011dc6:	fb02 f303 	mul.w	r3, r2, r3
 8011dca:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8011dce:	4a24      	ldr	r2, [pc, #144]	; (8011e60 <protocol_local_init+0xdc>)
 8011dd0:	4413      	add	r3, r2
 8011dd2:	220c      	movs	r2, #12
 8011dd4:	21ff      	movs	r1, #255	; 0xff
 8011dd6:	4618      	mov	r0, r3
 8011dd8:	f002 fc3f 	bl	801465a <memset>
	for(uint8_t i = 0; i < PROTOCOL_INTERFACE_MAX; i++)
 8011ddc:	7dfb      	ldrb	r3, [r7, #23]
 8011dde:	3301      	adds	r3, #1
 8011de0:	75fb      	strb	r3, [r7, #23]
 8011de2:	7dfb      	ldrb	r3, [r7, #23]
 8011de4:	2b04      	cmp	r3, #4
 8011de6:	d9ec      	bls.n	8011dc2 <protocol_local_init+0x3e>
	}

  for(uint8_t i = 0 ; i < PROTOCOL_CMD_MAX_NUM; i++)
 8011de8:	2300      	movs	r3, #0
 8011dea:	75bb      	strb	r3, [r7, #22]
 8011dec:	e01b      	b.n	8011e26 <protocol_local_init+0xa2>
	{
    // PROBLEM: Triggers HardFault_interupt
    // FIXED: i = 0
	  /* initalization cmd is 0xFF */
	   memset(&protocol_local_info.send_cmd_info[i].cmd, 0xFFFF, sizeof(uint16_t));
 8011dee:	7dbb      	ldrb	r3, [r7, #22]
 8011df0:	011b      	lsls	r3, r3, #4
 8011df2:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8011df6:	4a1a      	ldr	r2, [pc, #104]	; (8011e60 <protocol_local_init+0xdc>)
 8011df8:	4413      	add	r3, r2
 8011dfa:	3302      	adds	r3, #2
 8011dfc:	2202      	movs	r2, #2
 8011dfe:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011e02:	4618      	mov	r0, r3
 8011e04:	f002 fc29 	bl	801465a <memset>
	   memset(&protocol_local_info.rcv_cmd_info[i].cmd, 0xFFFF, sizeof(uint16_t));
 8011e08:	7dbb      	ldrb	r3, [r7, #22]
 8011e0a:	3321      	adds	r3, #33	; 0x21
 8011e0c:	00db      	lsls	r3, r3, #3
 8011e0e:	4a14      	ldr	r2, [pc, #80]	; (8011e60 <protocol_local_init+0xdc>)
 8011e10:	4413      	add	r3, r2
 8011e12:	3302      	adds	r3, #2
 8011e14:	2202      	movs	r2, #2
 8011e16:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011e1a:	4618      	mov	r0, r3
 8011e1c:	f002 fc1d 	bl	801465a <memset>
  for(uint8_t i = 0 ; i < PROTOCOL_CMD_MAX_NUM; i++)
 8011e20:	7dbb      	ldrb	r3, [r7, #22]
 8011e22:	3301      	adds	r3, #1
 8011e24:	75bb      	strb	r3, [r7, #22]
 8011e26:	7dbb      	ldrb	r3, [r7, #22]
 8011e28:	2b31      	cmp	r3, #49	; 0x31
 8011e2a:	d9e0      	bls.n	8011dee <protocol_local_init+0x6a>
	}

  protocol_local_info.address = address;
 8011e2c:	4a0c      	ldr	r2, [pc, #48]	; (8011e60 <protocol_local_init+0xdc>)
 8011e2e:	79fb      	ldrb	r3, [r7, #7]
 8011e30:	7013      	strb	r3, [r2, #0]
  protocol_local_info.rcv_nor_callBack = protocol_rcv_pack_handle;
 8011e32:	4b0b      	ldr	r3, [pc, #44]	; (8011e60 <protocol_local_init+0xdc>)
 8011e34:	4a0b      	ldr	r2, [pc, #44]	; (8011e64 <protocol_local_init+0xe0>)
 8011e36:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

  MUTEX_INIT(boardcast_object.mutex_lock);
  INIT_LIST_HEAD(&boardcast_object.send_list_header);
 8011e3a:	480b      	ldr	r0, [pc, #44]	; (8011e68 <protocol_local_init+0xe4>)
 8011e3c:	f7ff fec3 	bl	8011bc6 <INIT_LIST_HEAD>
  boardcast_object.is_valid = 1;
 8011e40:	4b09      	ldr	r3, [pc, #36]	; (8011e68 <protocol_local_init+0xe4>)
 8011e42:	2201      	movs	r2, #1
 8011e44:	725a      	strb	r2, [r3, #9]
  protocol_local_info.is_valid = 1; // Set the protocol to be valid after initialization
 8011e46:	4b06      	ldr	r3, [pc, #24]	; (8011e60 <protocol_local_init+0xdc>)
 8011e48:	2201      	movs	r2, #1
 8011e4a:	f883 289c 	strb.w	r2, [r3, #2204]	; 0x89c
  PROTOCOL_OTHER_INFO_PRINTF("Local info has been initialized.");

  return status;
 8011e4e:	693b      	ldr	r3, [r7, #16]
}
 8011e50:	4618      	mov	r0, r3
 8011e52:	3718      	adds	r7, #24
 8011e54:	46bd      	mov	sp, r7
 8011e56:	bd80      	pop	{r7, pc}
 8011e58:	08015af4 	.word	0x08015af4
 8011e5c:	200074d1 	.word	0x200074d1
 8011e60:	200074d0 	.word	0x200074d0
 8011e64:	08011c4d 	.word	0x08011c4d
 8011e68:	200074c0 	.word	0x200074c0

08011e6c <protocol_send>:
    * @param  p_data Pointer to the data to be sent
    * @param  data_len Length of the data to be sent
    * @retval Protocol return status
  */
uint32_t protocol_send(uint8_t reciver, uint16_t cmd, void *p_data, uint32_t data_len)
{
 8011e6c:	b580      	push	{r7, lr}
 8011e6e:	b08c      	sub	sp, #48	; 0x30
 8011e70:	af04      	add	r7, sp, #16
 8011e72:	60ba      	str	r2, [r7, #8]
 8011e74:	607b      	str	r3, [r7, #4]
 8011e76:	4603      	mov	r3, r0
 8011e78:	73fb      	strb	r3, [r7, #15]
 8011e7a:	460b      	mov	r3, r1
 8011e7c:	81bb      	strh	r3, [r7, #12]
  uint32_t status;
  uint8_t session = 0;
 8011e7e:	2300      	movs	r3, #0
 8011e80:	76fb      	strb	r3, [r7, #27]
  uint8_t ack = 0;
 8011e82:	2300      	movs	r3, #0
 8011e84:	76bb      	strb	r3, [r7, #26]

  struct send_cmd_info *cmd_info;
  cmd_info = protocol_get_send_cmd_info(cmd);
 8011e86:	89bb      	ldrh	r3, [r7, #12]
 8011e88:	4618      	mov	r0, r3
 8011e8a:	f7ff fead 	bl	8011be8 <protocol_get_send_cmd_info>
 8011e8e:	6178      	str	r0, [r7, #20]
  
  struct perph_interface *int_obj;
  int_obj = protocol_s_get_route(reciver);
 8011e90:	7bfb      	ldrb	r3, [r7, #15]
 8011e92:	4618      	mov	r0, r3
 8011e94:	f001 f80c 	bl	8012eb0 <protocol_s_get_route>
 8011e98:	6138      	str	r0, [r7, #16]
  
  if (cmd_info != NULL)
 8011e9a:	697b      	ldr	r3, [r7, #20]
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d002      	beq.n	8011ea6 <protocol_send+0x3a>
  {
    ack = cmd_info->ack_enable;
 8011ea0:	697b      	ldr	r3, [r7, #20]
 8011ea2:	791b      	ldrb	r3, [r3, #4]
 8011ea4:	76bb      	strb	r3, [r7, #26]
  }

  if (reciver == PROTOCOL_BROADCAST_ADDR)
 8011ea6:	7bfb      	ldrb	r3, [r7, #15]
 8011ea8:	2bff      	cmp	r3, #255	; 0xff
 8011eaa:	d107      	bne.n	8011ebc <protocol_send+0x50>
  {
    status = protocol_s_broadcast_add_node(p_data, data_len, cmd);
 8011eac:	89bb      	ldrh	r3, [r7, #12]
 8011eae:	461a      	mov	r2, r3
 8011eb0:	6879      	ldr	r1, [r7, #4]
 8011eb2:	68b8      	ldr	r0, [r7, #8]
 8011eb4:	f000 fd20 	bl	80128f8 <protocol_s_broadcast_add_node>
 8011eb8:	61f8      	str	r0, [r7, #28]
 8011eba:	e014      	b.n	8011ee6 <protocol_send+0x7a>
  }
  else
  {
    if (ack == 1)
 8011ebc:	7ebb      	ldrb	r3, [r7, #26]
 8011ebe:	2b01      	cmp	r3, #1
 8011ec0:	d104      	bne.n	8011ecc <protocol_send+0x60>
    {
      session = protocol_get_session(int_obj);
 8011ec2:	6938      	ldr	r0, [r7, #16]
 8011ec4:	f000 fb81 	bl	80125ca <protocol_get_session>
 8011ec8:	4603      	mov	r3, r0
 8011eca:	76fb      	strb	r3, [r7, #27]
    }
    status = protocol_s_add_sendnode(reciver, session, PROTOCOL_PACK_NOR, p_data,
 8011ecc:	7ef9      	ldrb	r1, [r7, #27]
 8011ece:	7bf8      	ldrb	r0, [r7, #15]
 8011ed0:	2300      	movs	r3, #0
 8011ed2:	9302      	str	r3, [sp, #8]
 8011ed4:	89bb      	ldrh	r3, [r7, #12]
 8011ed6:	9301      	str	r3, [sp, #4]
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	9300      	str	r3, [sp, #0]
 8011edc:	68bb      	ldr	r3, [r7, #8]
 8011ede:	2200      	movs	r2, #0
 8011ee0:	f000 fbb6 	bl	8012650 <protocol_s_add_sendnode>
 8011ee4:	61f8      	str	r0, [r7, #28]
                                     data_len, cmd, 0);
  }
  if (status == PROTOCOL_SUCCESS)
 8011ee6:	69fb      	ldr	r3, [r7, #28]
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d109      	bne.n	8011f00 <protocol_send+0x94>
  {
    if (protocol_local_info.send_list_add_callBack != NULL)
 8011eec:	4b0b      	ldr	r3, [pc, #44]	; (8011f1c <protocol_send+0xb0>)
 8011eee:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	d00c      	beq.n	8011f10 <protocol_send+0xa4>
    {
      protocol_local_info.send_list_add_callBack();
 8011ef6:	4b09      	ldr	r3, [pc, #36]	; (8011f1c <protocol_send+0xb0>)
 8011ef8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8011efc:	4798      	blx	r3
 8011efe:	e007      	b.n	8011f10 <protocol_send+0xa4>
    }
  }
  else
  {
    if (ack == 1)
 8011f00:	7ebb      	ldrb	r3, [r7, #26]
 8011f02:	2b01      	cmp	r3, #1
 8011f04:	d104      	bne.n	8011f10 <protocol_send+0xa4>
    {
      protocol_release_session(int_obj, session);
 8011f06:	7efb      	ldrb	r3, [r7, #27]
 8011f08:	4619      	mov	r1, r3
 8011f0a:	6938      	ldr	r0, [r7, #16]
 8011f0c:	f000 fb83 	bl	8012616 <protocol_release_session>
    }
  }
  return status;
 8011f10:	69fb      	ldr	r3, [r7, #28]
}
 8011f12:	4618      	mov	r0, r3
 8011f14:	3720      	adds	r7, #32
 8011f16:	46bd      	mov	sp, r7
 8011f18:	bd80      	pop	{r7, pc}
 8011f1a:	bf00      	nop
 8011f1c:	200074d0 	.word	0x200074d0

08011f20 <protocol_ack>:
    * @param  data_len Length of the data to be sent
    * @param  ack_seq Sequence number of the Ack packet to be sent
    * @retval Protocol return status
  */
uint32_t protocol_ack(uint8_t reciver, uint8_t session, void *p_data, uint32_t data_len, uint16_t ack_seq)
{
 8011f20:	b580      	push	{r7, lr}
 8011f22:	b08a      	sub	sp, #40	; 0x28
 8011f24:	af04      	add	r7, sp, #16
 8011f26:	60ba      	str	r2, [r7, #8]
 8011f28:	607b      	str	r3, [r7, #4]
 8011f2a:	4603      	mov	r3, r0
 8011f2c:	73fb      	strb	r3, [r7, #15]
 8011f2e:	460b      	mov	r3, r1
 8011f30:	73bb      	strb	r3, [r7, #14]
  uint32_t status;
  status = protocol_s_add_sendnode(reciver, session, PROTOCOL_PACK_ACK, p_data,
 8011f32:	7bb9      	ldrb	r1, [r7, #14]
 8011f34:	7bf8      	ldrb	r0, [r7, #15]
 8011f36:	8c3b      	ldrh	r3, [r7, #32]
 8011f38:	9302      	str	r3, [sp, #8]
 8011f3a:	2300      	movs	r3, #0
 8011f3c:	9301      	str	r3, [sp, #4]
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	9300      	str	r3, [sp, #0]
 8011f42:	68bb      	ldr	r3, [r7, #8]
 8011f44:	2201      	movs	r2, #1
 8011f46:	f000 fb83 	bl	8012650 <protocol_s_add_sendnode>
 8011f4a:	6178      	str	r0, [r7, #20]
                                   data_len, 0, ack_seq);
  if (status == PROTOCOL_SUCCESS)
 8011f4c:	697b      	ldr	r3, [r7, #20]
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d108      	bne.n	8011f64 <protocol_ack+0x44>
  {
    if (protocol_local_info.send_list_add_callBack != NULL)
 8011f52:	4b07      	ldr	r3, [pc, #28]	; (8011f70 <protocol_ack+0x50>)
 8011f54:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d003      	beq.n	8011f64 <protocol_ack+0x44>
    {
      protocol_local_info.send_list_add_callBack();
 8011f5c:	4b04      	ldr	r3, [pc, #16]	; (8011f70 <protocol_ack+0x50>)
 8011f5e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8011f62:	4798      	blx	r3
    }
  }
  return status;
 8011f64:	697b      	ldr	r3, [r7, #20]
}
 8011f66:	4618      	mov	r0, r3
 8011f68:	3718      	adds	r7, #24
 8011f6a:	46bd      	mov	sp, r7
 8011f6c:	bd80      	pop	{r7, pc}
 8011f6e:	bf00      	nop
 8011f70:	200074d0 	.word	0x200074d0

08011f74 <protocol_send_flush>:
  * @brief Flushes the send list, calling this function will send the data in the send list. Call after calling protocol_send or protocol_ack, or call periodically.
  * @param void
  * @retval Protocol return status
  */
uint32_t protocol_send_flush(void)
{
 8011f74:	b580      	push	{r7, lr}
 8011f76:	b082      	sub	sp, #8
 8011f78:	af00      	add	r7, sp, #0
  for (uint8_t i = 0; i < PROTOCOL_INTERFACE_MAX; i++)
 8011f7a:	2300      	movs	r3, #0
 8011f7c:	71fb      	strb	r3, [r7, #7]
 8011f7e:	e035      	b.n	8011fec <protocol_send_flush+0x78>
  {
    if (protocol_local_info.interface[i].is_valid)
 8011f80:	79fb      	ldrb	r3, [r7, #7]
 8011f82:	4a23      	ldr	r2, [pc, #140]	; (8012010 <protocol_send_flush+0x9c>)
 8011f84:	2194      	movs	r1, #148	; 0x94
 8011f86:	fb01 f303 	mul.w	r3, r1, r3
 8011f8a:	4413      	add	r3, r2
 8011f8c:	f203 6319 	addw	r3, r3, #1561	; 0x619
 8011f90:	781b      	ldrb	r3, [r3, #0]
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d027      	beq.n	8011fe6 <protocol_send_flush+0x72>
    {
      if (protocol_local_info.interface[i].send.normal_node_num > 0)
 8011f96:	79fb      	ldrb	r3, [r7, #7]
 8011f98:	4a1d      	ldr	r2, [pc, #116]	; (8012010 <protocol_send_flush+0x9c>)
 8011f9a:	2194      	movs	r1, #148	; 0x94
 8011f9c:	fb01 f303 	mul.w	r3, r1, r3
 8011fa0:	4413      	add	r3, r2
 8011fa2:	f203 6312 	addw	r3, r3, #1554	; 0x612
 8011fa6:	781b      	ldrb	r3, [r3, #0]
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d008      	beq.n	8011fbe <protocol_send_flush+0x4a>
      {
        protocol_s_interface_normal_send_flush(protocol_local_info.interface + i);
 8011fac:	79fb      	ldrb	r3, [r7, #7]
 8011fae:	2294      	movs	r2, #148	; 0x94
 8011fb0:	fb02 f303 	mul.w	r3, r2, r3
 8011fb4:	4a17      	ldr	r2, [pc, #92]	; (8012014 <protocol_send_flush+0xa0>)
 8011fb6:	4413      	add	r3, r2
 8011fb8:	4618      	mov	r0, r3
 8011fba:	f000 fdfd 	bl	8012bb8 <protocol_s_interface_normal_send_flush>
      }
      if (protocol_local_info.interface[i].send.ack_node_num > 0)
 8011fbe:	79fb      	ldrb	r3, [r7, #7]
 8011fc0:	4a13      	ldr	r2, [pc, #76]	; (8012010 <protocol_send_flush+0x9c>)
 8011fc2:	2194      	movs	r1, #148	; 0x94
 8011fc4:	fb01 f303 	mul.w	r3, r1, r3
 8011fc8:	4413      	add	r3, r2
 8011fca:	f203 6313 	addw	r3, r3, #1555	; 0x613
 8011fce:	781b      	ldrb	r3, [r3, #0]
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d008      	beq.n	8011fe6 <protocol_send_flush+0x72>
      {
        protocol_s_interface_ack_send_flush(protocol_local_info.interface + i);
 8011fd4:	79fb      	ldrb	r3, [r7, #7]
 8011fd6:	2294      	movs	r2, #148	; 0x94
 8011fd8:	fb02 f303 	mul.w	r3, r2, r3
 8011fdc:	4a0d      	ldr	r2, [pc, #52]	; (8012014 <protocol_send_flush+0xa0>)
 8011fde:	4413      	add	r3, r2
 8011fe0:	4618      	mov	r0, r3
 8011fe2:	f000 feb4 	bl	8012d4e <protocol_s_interface_ack_send_flush>
  for (uint8_t i = 0; i < PROTOCOL_INTERFACE_MAX; i++)
 8011fe6:	79fb      	ldrb	r3, [r7, #7]
 8011fe8:	3301      	adds	r3, #1
 8011fea:	71fb      	strb	r3, [r7, #7]
 8011fec:	79fb      	ldrb	r3, [r7, #7]
 8011fee:	2b04      	cmp	r3, #4
 8011ff0:	d9c6      	bls.n	8011f80 <protocol_send_flush+0xc>
      }
    }
  }

  if (boardcast_object.is_valid)
 8011ff2:	4b09      	ldr	r3, [pc, #36]	; (8012018 <protocol_send_flush+0xa4>)
 8011ff4:	7a5b      	ldrb	r3, [r3, #9]
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	d005      	beq.n	8012006 <protocol_send_flush+0x92>
  {
    if (boardcast_object.send_node_num > 0)
 8011ffa:	4b07      	ldr	r3, [pc, #28]	; (8012018 <protocol_send_flush+0xa4>)
 8011ffc:	7a1b      	ldrb	r3, [r3, #8]
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d001      	beq.n	8012006 <protocol_send_flush+0x92>
    {
      protocol_s_broadcast_send_flush();
 8012002:	f000 fee3 	bl	8012dcc <protocol_s_broadcast_send_flush>
    }
  }
  return 0;
 8012006:	2300      	movs	r3, #0
}
 8012008:	4618      	mov	r0, r3
 801200a:	3708      	adds	r7, #8
 801200c:	46bd      	mov	sp, r7
 801200e:	bd80      	pop	{r7, pc}
 8012010:	200074d0 	.word	0x200074d0
 8012014:	20007a88 	.word	0x20007a88
 8012018:	200074c0 	.word	0x200074c0

0801201c <protocol_unpack_flush>:
    * @brief  Protocol flushes the receive buffer, calling this function will unpack the data in the receive buffer. Call after receiving data or periodically.
    * @param  void
    * @retval Protocol return status
  */
uint32_t protocol_unpack_flush(void)
{
 801201c:	b580      	push	{r7, lr}
 801201e:	b082      	sub	sp, #8
 8012020:	af00      	add	r7, sp, #0
  for (uint8_t i = 0; i < PROTOCOL_INTERFACE_MAX; i++)
 8012022:	2300      	movs	r3, #0
 8012024:	71fb      	strb	r3, [r7, #7]
 8012026:	e018      	b.n	801205a <protocol_unpack_flush+0x3e>
  {
    if (protocol_local_info.interface[i].is_valid)
 8012028:	79fb      	ldrb	r3, [r7, #7]
 801202a:	4a10      	ldr	r2, [pc, #64]	; (801206c <protocol_unpack_flush+0x50>)
 801202c:	2194      	movs	r1, #148	; 0x94
 801202e:	fb01 f303 	mul.w	r3, r1, r3
 8012032:	4413      	add	r3, r2
 8012034:	f203 6319 	addw	r3, r3, #1561	; 0x619
 8012038:	781b      	ldrb	r3, [r3, #0]
 801203a:	2b00      	cmp	r3, #0
 801203c:	d00a      	beq.n	8012054 <protocol_unpack_flush+0x38>
    {
      protocol_s_extract(&(protocol_local_info.interface[i]));
 801203e:	79fb      	ldrb	r3, [r7, #7]
 8012040:	2294      	movs	r2, #148	; 0x94
 8012042:	fb02 f303 	mul.w	r3, r2, r3
 8012046:	f503 63b7 	add.w	r3, r3, #1464	; 0x5b8
 801204a:	4a08      	ldr	r2, [pc, #32]	; (801206c <protocol_unpack_flush+0x50>)
 801204c:	4413      	add	r3, r2
 801204e:	4618      	mov	r0, r3
 8012050:	f001 f8cc 	bl	80131ec <protocol_s_extract>
  for (uint8_t i = 0; i < PROTOCOL_INTERFACE_MAX; i++)
 8012054:	79fb      	ldrb	r3, [r7, #7]
 8012056:	3301      	adds	r3, #1
 8012058:	71fb      	strb	r3, [r7, #7]
 801205a:	79fb      	ldrb	r3, [r7, #7]
 801205c:	2b04      	cmp	r3, #4
 801205e:	d9e3      	bls.n	8012028 <protocol_unpack_flush+0xc>
    }
  }
  return 0;
 8012060:	2300      	movs	r3, #0
}
 8012062:	4618      	mov	r0, r3
 8012064:	3708      	adds	r7, #8
 8012066:	46bd      	mov	sp, r7
 8012068:	bd80      	pop	{r7, pc}
 801206a:	bf00      	nop
 801206c:	200074d0 	.word	0x200074d0

08012070 <protocol_rcv_data>:
    * @param  data_len Length of the data
    * @param  perph Interface index, specify the index of the interface where the data is received
    * @retval Protocol return status
  */
uint32_t protocol_rcv_data(void *p_data, uint32_t data_len, struct perph_interface *perph)
{
 8012070:	b590      	push	{r4, r7, lr}
 8012072:	b08b      	sub	sp, #44	; 0x2c
 8012074:	af00      	add	r7, sp, #0
 8012076:	60f8      	str	r0, [r7, #12]
 8012078:	60b9      	str	r1, [r7, #8]
 801207a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801207c:	f3ef 8310 	mrs	r3, PRIMASK
 8012080:	61bb      	str	r3, [r7, #24]
  return(result);
 8012082:	69bb      	ldr	r3, [r7, #24]
  struct perph_interface *obj;
  uint32_t rcv_length;
  uint32_t status;

  //Interrupt Off;
  cpu_sr = FIFO_GET_CPU_SR();
 8012084:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 8012086:	b672      	cpsid	i
}
 8012088:	bf00      	nop
  FIFO_ENTER_CRITICAL();
  
  status = PROTOCOL_SUCCESS;
 801208a:	2300      	movs	r3, #0
 801208c:	627b      	str	r3, [r7, #36]	; 0x24

  if (protocol_local_info.is_valid == 0)
 801208e:	4b1c      	ldr	r3, [pc, #112]	; (8012100 <protocol_rcv_data+0x90>)
 8012090:	f893 389c 	ldrb.w	r3, [r3, #2204]	; 0x89c
 8012094:	2b00      	cmp	r3, #0
 8012096:	d108      	bne.n	80120aa <protocol_rcv_data+0x3a>
  {
    status = PROTOCOL_ERR_PROTOCOL_NOT_INIT;
 8012098:	2310      	movs	r3, #16
 801209a:	627b      	str	r3, [r7, #36]	; 0x24
 801209c:	617c      	str	r4, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801209e:	697b      	ldr	r3, [r7, #20]
 80120a0:	f383 8810 	msr	PRIMASK, r3
}
 80120a4:	bf00      	nop
    //Interrupt On
    FIFO_RESTORE_CPU_SR(cpu_sr);
    return status;
 80120a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120a8:	e026      	b.n	80120f8 <protocol_rcv_data+0x88>
  }

  obj = &(protocol_local_info.interface[perph->idx]);
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80120b0:	461a      	mov	r2, r3
 80120b2:	2394      	movs	r3, #148	; 0x94
 80120b4:	fb02 f303 	mul.w	r3, r2, r3
 80120b8:	f503 63b7 	add.w	r3, r3, #1464	; 0x5b8
 80120bc:	4a10      	ldr	r2, [pc, #64]	; (8012100 <protocol_rcv_data+0x90>)
 80120be:	4413      	add	r3, r2
 80120c0:	623b      	str	r3, [r7, #32]

  //TODO: Removed the protection here because considering that this function is not reentrant for the same protocol interface, careful consideration is needed.
  //Adding protection, high-speed transmission may still have nested reentry.
  rcv_length = fifo_s_puts_noprotect(&(obj->rcvd.fifo), p_data, data_len);
 80120c2:	6a3b      	ldr	r3, [r7, #32]
 80120c4:	3320      	adds	r3, #32
 80120c6:	68ba      	ldr	r2, [r7, #8]
 80120c8:	68f9      	ldr	r1, [r7, #12]
 80120ca:	4618      	mov	r0, r3
 80120cc:	f001 fb51 	bl	8013772 <fifo_s_puts_noprotect>
 80120d0:	4603      	mov	r3, r0
 80120d2:	61fb      	str	r3, [r7, #28]

  if (rcv_length < data_len)
 80120d4:	69fa      	ldr	r2, [r7, #28]
 80120d6:	68bb      	ldr	r3, [r7, #8]
 80120d8:	429a      	cmp	r2, r3
 80120da:	d207      	bcs.n	80120ec <protocol_rcv_data+0x7c>
  {
    status = PROTOCOL_ERR_FIFO_FULL;
 80120dc:	230b      	movs	r3, #11
 80120de:	627b      	str	r3, [r7, #36]	; 0x24
    PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 80120e0:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 80120e4:	4907      	ldr	r1, [pc, #28]	; (8012104 <protocol_rcv_data+0x94>)
 80120e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80120e8:	f001 fa08 	bl	80134fc <protocol_s_error_info_printf>
 80120ec:	613c      	str	r4, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80120ee:	693b      	ldr	r3, [r7, #16]
 80120f0:	f383 8810 	msr	PRIMASK, r3
}
 80120f4:	bf00      	nop
  }
  //Interrupt On
  FIFO_RESTORE_CPU_SR(cpu_sr);
  return status;
 80120f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80120f8:	4618      	mov	r0, r3
 80120fa:	372c      	adds	r7, #44	; 0x2c
 80120fc:	46bd      	mov	sp, r7
 80120fe:	bd90      	pop	{r4, r7, pc}
 8012100:	200074d0 	.word	0x200074d0
 8012104:	08015af4 	.word	0x08015af4

08012108 <protocol_send_list_add_callback_reg>:
    * @brief  Protocol registers the callback function for adding the send packet to the send list. This function is called after the protocol data packet is packed and added to the send list.
    * @param  fn Callback function pointer, format refers to pack_handle_fn_t
    * @retval 0
  */
  uint32_t protocol_send_list_add_callback_reg(void_fn_t fn)
  {
 8012108:	b480      	push	{r7}
 801210a:	b083      	sub	sp, #12
 801210c:	af00      	add	r7, sp, #0
 801210e:	6078      	str	r0, [r7, #4]
    protocol_local_info.send_list_add_callBack = fn;
 8012110:	4a05      	ldr	r2, [pc, #20]	; (8012128 <protocol_send_list_add_callback_reg+0x20>)
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    return 0;
 8012118:	2300      	movs	r3, #0
  }
 801211a:	4618      	mov	r0, r3
 801211c:	370c      	adds	r7, #12
 801211e:	46bd      	mov	sp, r7
 8012120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012124:	4770      	bx	lr
 8012126:	bf00      	nop
 8012128:	200074d0 	.word	0x200074d0

0801212c <protocol_p_malloc>:
    * @brief  Protocol memory allocation interface function, users can modify this function according to actual needs
    * @param  size Size of memory to allocate in bytes
    * @retval If allocation is successful, returns the pointer to the allocated memory, otherwise returns NULL
    */
void *protocol_p_malloc(uint32_t size)
{
 801212c:	b580      	push	{r7, lr}
 801212e:	b082      	sub	sp, #8
 8012130:	af00      	add	r7, sp, #0
 8012132:	6078      	str	r0, [r7, #4]
  return heap_malloc(size);
 8012134:	6878      	ldr	r0, [r7, #4]
 8012136:	f001 fe5d 	bl	8013df4 <heap_malloc>
 801213a:	4603      	mov	r3, r0
}
 801213c:	4618      	mov	r0, r3
 801213e:	3708      	adds	r7, #8
 8012140:	46bd      	mov	sp, r7
 8012142:	bd80      	pop	{r7, pc}

08012144 <protocol_p_free>:
    * @brief  Protocol memory deallocation interface function, users can modify this function according to actual needs
    * @param  ptr Pointer to the starting address of the memory to be freed
    * @retval void
    */
  void protocol_p_free(void *ptr)
  {
 8012144:	b580      	push	{r7, lr}
 8012146:	b082      	sub	sp, #8
 8012148:	af00      	add	r7, sp, #0
 801214a:	6078      	str	r0, [r7, #4]
    heap_free(ptr);
 801214c:	6878      	ldr	r0, [r7, #4]
 801214e:	f001 fefb 	bl	8013f48 <heap_free>
  }
 8012152:	bf00      	nop
 8012154:	3708      	adds	r7, #8
 8012156:	46bd      	mov	sp, r7
 8012158:	bd80      	pop	{r7, pc}

0801215a <protocol_p_get_time>:
    * @brief  Protocol function to get system time in milliseconds, users can modify this function according to actual needs
    * @param  void
    * @retval Current system time in milliseconds
  */
uint32_t protocol_p_get_time(void)
{
 801215a:	b580      	push	{r7, lr}
 801215c:	af00      	add	r7, sp, #0
  return osKernelSysTick() / portTICK_PERIOD_MS;
 801215e:	f7f9 fd6a 	bl	800bc36 <osKernelSysTick>
 8012162:	4603      	mov	r3, r0
}
 8012164:	4618      	mov	r0, r3
 8012166:	bd80      	pop	{r7, pc}

08012168 <INIT_LIST_HEAD>:
{
 8012168:	b480      	push	{r7}
 801216a:	b083      	sub	sp, #12
 801216c:	af00      	add	r7, sp, #0
 801216e:	6078      	str	r0, [r7, #4]
  list->next = list;
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	687a      	ldr	r2, [r7, #4]
 8012174:	601a      	str	r2, [r3, #0]
  list->prev = list;
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	687a      	ldr	r2, [r7, #4]
 801217a:	605a      	str	r2, [r3, #4]
}
 801217c:	bf00      	nop
 801217e:	370c      	adds	r7, #12
 8012180:	46bd      	mov	sp, r7
 8012182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012186:	4770      	bx	lr

08012188 <protocol_interface_init>:
  */
int32_t protocol_interface_init(struct perph_interface *perph,
                                char *interface_name,
                                uint8_t boardcast_output_enable,
                                uint16_t rcv_buf_size)
{
 8012188:	b580      	push	{r7, lr}
 801218a:	b08a      	sub	sp, #40	; 0x28
 801218c:	af00      	add	r7, sp, #0
 801218e:	60f8      	str	r0, [r7, #12]
 8012190:	60b9      	str	r1, [r7, #8]
 8012192:	4611      	mov	r1, r2
 8012194:	461a      	mov	r2, r3
 8012196:	460b      	mov	r3, r1
 8012198:	71fb      	strb	r3, [r7, #7]
 801219a:	4613      	mov	r3, r2
 801219c:	80bb      	strh	r3, [r7, #4]
  struct perph_interface *interface;

  uint32_t status;
  int32_t idx = PROTOCOL_INTERFACE_MAX;
 801219e:	2305      	movs	r3, #5
 80121a0:	627b      	str	r3, [r7, #36]	; 0x24

  status = PROTOCOL_SUCCESS;
 80121a2:	2300      	movs	r3, #0
 80121a4:	61fb      	str	r3, [r7, #28]

  for (int i = 0; i < PROTOCOL_INTERFACE_MAX; i++)
 80121a6:	2300      	movs	r3, #0
 80121a8:	623b      	str	r3, [r7, #32]
 80121aa:	e010      	b.n	80121ce <protocol_interface_init+0x46>
  {
    if (protocol_local_info.interface[i].is_valid == 0)
 80121ac:	4a3d      	ldr	r2, [pc, #244]	; (80122a4 <protocol_interface_init+0x11c>)
 80121ae:	6a3b      	ldr	r3, [r7, #32]
 80121b0:	2194      	movs	r1, #148	; 0x94
 80121b2:	fb01 f303 	mul.w	r3, r1, r3
 80121b6:	4413      	add	r3, r2
 80121b8:	f203 6319 	addw	r3, r3, #1561	; 0x619
 80121bc:	781b      	ldrb	r3, [r3, #0]
 80121be:	2b00      	cmp	r3, #0
 80121c0:	d102      	bne.n	80121c8 <protocol_interface_init+0x40>
    {
      idx = i;
 80121c2:	6a3b      	ldr	r3, [r7, #32]
 80121c4:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80121c6:	e005      	b.n	80121d4 <protocol_interface_init+0x4c>
  for (int i = 0; i < PROTOCOL_INTERFACE_MAX; i++)
 80121c8:	6a3b      	ldr	r3, [r7, #32]
 80121ca:	3301      	adds	r3, #1
 80121cc:	623b      	str	r3, [r7, #32]
 80121ce:	6a3b      	ldr	r3, [r7, #32]
 80121d0:	2b04      	cmp	r3, #4
 80121d2:	ddeb      	ble.n	80121ac <protocol_interface_init+0x24>
    }
  }

  if (idx == PROTOCOL_INTERFACE_MAX)
 80121d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121d6:	2b05      	cmp	r3, #5
 80121d8:	d108      	bne.n	80121ec <protocol_interface_init+0x64>
  {
    //TODO: Index length exceeded
    status = PROTOCOL_ERR_OBJECT_NOT_FOUND;
 80121da:	230c      	movs	r3, #12
 80121dc:	61fb      	str	r3, [r7, #28]
    PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 80121de:	223d      	movs	r2, #61	; 0x3d
 80121e0:	4931      	ldr	r1, [pc, #196]	; (80122a8 <protocol_interface_init+0x120>)
 80121e2:	69f8      	ldr	r0, [r7, #28]
 80121e4:	f001 f98a 	bl	80134fc <protocol_s_error_info_printf>
    return status;
 80121e8:	69fb      	ldr	r3, [r7, #28]
 80121ea:	e056      	b.n	801229a <protocol_interface_init+0x112>
  }

  interface = &protocol_local_info.interface[idx];
 80121ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121ee:	2294      	movs	r2, #148	; 0x94
 80121f0:	fb02 f303 	mul.w	r3, r2, r3
 80121f4:	f503 63b7 	add.w	r3, r3, #1464	; 0x5b8
 80121f8:	4a2a      	ldr	r2, [pc, #168]	; (80122a4 <protocol_interface_init+0x11c>)
 80121fa:	4413      	add	r3, r2
 80121fc:	61bb      	str	r3, [r7, #24]
  
  memcpy(interface, perph, sizeof(struct perph_interface));
 80121fe:	2294      	movs	r2, #148	; 0x94
 8012200:	68f9      	ldr	r1, [r7, #12]
 8012202:	69b8      	ldr	r0, [r7, #24]
 8012204:	f002 faae 	bl	8014764 <memcpy>

  // initialization name
  if ((interface_name != NULL) && (strlen(interface_name) < PROTOCOL_OBJ_NAME_MAX_LEN))
 8012208:	68bb      	ldr	r3, [r7, #8]
 801220a:	2b00      	cmp	r3, #0
 801220c:	d00f      	beq.n	801222e <protocol_interface_init+0xa6>
 801220e:	68b8      	ldr	r0, [r7, #8]
 8012210:	f7ed ffee 	bl	80001f0 <strlen>
 8012214:	4603      	mov	r3, r0
 8012216:	2b1f      	cmp	r3, #31
 8012218:	d809      	bhi.n	801222e <protocol_interface_init+0xa6>
  {
    strncpy(interface->object_name, (const char *)interface_name, sizeof(interface->object_name));
 801221a:	69bb      	ldr	r3, [r7, #24]
 801221c:	2220      	movs	r2, #32
 801221e:	68b9      	ldr	r1, [r7, #8]
 8012220:	4618      	mov	r0, r3
 8012222:	f002 fa07 	bl	8014634 <strncpy>
    interface->object_name[PROTOCOL_OBJ_NAME_MAX_LEN - 1] = '\0';
 8012226:	69bb      	ldr	r3, [r7, #24]
 8012228:	2200      	movs	r2, #0
 801222a:	77da      	strb	r2, [r3, #31]
 801222c:	e005      	b.n	801223a <protocol_interface_init+0xb2>
  }
  else
  {
    strcpy(interface->object_name, "NULL");
 801222e:	69bb      	ldr	r3, [r7, #24]
 8012230:	4a1e      	ldr	r2, [pc, #120]	; (80122ac <protocol_interface_init+0x124>)
 8012232:	6810      	ldr	r0, [r2, #0]
 8012234:	6018      	str	r0, [r3, #0]
 8012236:	7912      	ldrb	r2, [r2, #4]
 8012238:	711a      	strb	r2, [r3, #4]
  }

  // Initialize the receive buffer area
  uint8_t *rcv_buf = protocol_p_malloc(rcv_buf_size);
 801223a:	88bb      	ldrh	r3, [r7, #4]
 801223c:	4618      	mov	r0, r3
 801223e:	f7ff ff75 	bl	801212c <protocol_p_malloc>
 8012242:	6178      	str	r0, [r7, #20]
  if (rcv_buf == NULL)
 8012244:	697b      	ldr	r3, [r7, #20]
 8012246:	2b00      	cmp	r3, #0
 8012248:	d108      	bne.n	801225c <protocol_interface_init+0xd4>
  {
    status = PROTOCOL_ERR_NOT_ENOUGH_MEM;
 801224a:	2302      	movs	r3, #2
 801224c:	61fb      	str	r3, [r7, #28]
    PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 801224e:	2255      	movs	r2, #85	; 0x55
 8012250:	4915      	ldr	r1, [pc, #84]	; (80122a8 <protocol_interface_init+0x120>)
 8012252:	69f8      	ldr	r0, [r7, #28]
 8012254:	f001 f952 	bl	80134fc <protocol_s_error_info_printf>
    return status;
 8012258:	69fb      	ldr	r3, [r7, #28]
 801225a:	e01e      	b.n	801229a <protocol_interface_init+0x112>
  }
  fifo_s_init(&interface->rcvd.fifo, rcv_buf, rcv_buf_size);
 801225c:	69bb      	ldr	r3, [r7, #24]
 801225e:	3320      	adds	r3, #32
 8012260:	88ba      	ldrh	r2, [r7, #4]
 8012262:	6979      	ldr	r1, [r7, #20]
 8012264:	4618      	mov	r0, r3
 8012266:	f001 f9e5 	bl	8013634 <fifo_s_init>

  // Initialize the sending structure
  INIT_LIST_HEAD(&interface->send.normal_list_header);
 801226a:	69bb      	ldr	r3, [r7, #24]
 801226c:	3348      	adds	r3, #72	; 0x48
 801226e:	4618      	mov	r0, r3
 8012270:	f7ff ff7a 	bl	8012168 <INIT_LIST_HEAD>
  INIT_LIST_HEAD(&interface->send.ack_list_header);
 8012274:	69bb      	ldr	r3, [r7, #24]
 8012276:	3350      	adds	r3, #80	; 0x50
 8012278:	4618      	mov	r0, r3
 801227a:	f7ff ff75 	bl	8012168 <INIT_LIST_HEAD>
  MUTEX_INIT(interface->send.mutex_lock);

  interface->broadcast_output_enable = boardcast_output_enable;
 801227e:	69bb      	ldr	r3, [r7, #24]
 8012280:	79fa      	ldrb	r2, [r7, #7]
 8012282:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  interface->idx = idx;
 8012286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012288:	b2da      	uxtb	r2, r3
 801228a:	69bb      	ldr	r3, [r7, #24]
 801228c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  interface->is_valid = 1;
 8012290:	69bb      	ldr	r3, [r7, #24]
 8012292:	2201      	movs	r2, #1
 8012294:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  PROTOCOL_OTHER_INFO_PRINTF("Interface %s[%d] has been initialized.",
                             interface->object_name, interface->idx);

  return status;
 8012298:	69fb      	ldr	r3, [r7, #28]
}
 801229a:	4618      	mov	r0, r3
 801229c:	3728      	adds	r7, #40	; 0x28
 801229e:	46bd      	mov	sp, r7
 80122a0:	bd80      	pop	{r7, pc}
 80122a2:	bf00      	nop
 80122a4:	200074d0 	.word	0x200074d0
 80122a8:	08015b1c 	.word	0x08015b1c
 80122ac:	08015b50 	.word	0x08015b50

080122b0 <protocol_uart_interface_register>:
int32_t protocol_uart_interface_register(char *interface_name,
                                        uint16_t rcv_buf_size,
                                        uint8_t boardcast_output_enable,
                                        uint8_t com_port,
										int32_t (*com_send_fn)(uint8_t *p_data, uint32_t len))
{
 80122b0:	b580      	push	{r7, lr}
 80122b2:	b0a8      	sub	sp, #160	; 0xa0
 80122b4:	af00      	add	r7, sp, #0
 80122b6:	6078      	str	r0, [r7, #4]
 80122b8:	4608      	mov	r0, r1
 80122ba:	4611      	mov	r1, r2
 80122bc:	461a      	mov	r2, r3
 80122be:	4603      	mov	r3, r0
 80122c0:	807b      	strh	r3, [r7, #2]
 80122c2:	460b      	mov	r3, r1
 80122c4:	707b      	strb	r3, [r7, #1]
 80122c6:	4613      	mov	r3, r2
 80122c8:	703b      	strb	r3, [r7, #0]
  struct perph_interface interface = {0};
 80122ca:	f107 0308 	add.w	r3, r7, #8
 80122ce:	2294      	movs	r2, #148	; 0x94
 80122d0:	2100      	movs	r1, #0
 80122d2:	4618      	mov	r0, r3
 80122d4:	f002 f9c1 	bl	801465a <memset>
  uint32_t status;
  status = PROTOCOL_SUCCESS;
 80122d8:	2300      	movs	r3, #0
 80122da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  interface.type = COM_PORT;
 80122de:	2300      	movs	r3, #0
 80122e0:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  interface.send_callback.com_send_fn = com_send_fn;
 80122e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80122e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  interface.user_data.com.port = com_port;
 80122ec:	783b      	ldrb	r3, [r7, #0]
 80122ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  status = protocol_interface_init(&interface, interface_name, boardcast_output_enable, rcv_buf_size);
 80122f2:	887b      	ldrh	r3, [r7, #2]
 80122f4:	787a      	ldrb	r2, [r7, #1]
 80122f6:	f107 0008 	add.w	r0, r7, #8
 80122fa:	6879      	ldr	r1, [r7, #4]
 80122fc:	f7ff ff44 	bl	8012188 <protocol_interface_init>
 8012300:	4603      	mov	r3, r0
 8012302:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return status;
 8012306:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
}
 801230a:	4618      	mov	r0, r3
 801230c:	37a0      	adds	r7, #160	; 0xa0
 801230e:	46bd      	mov	sp, r7
 8012310:	bd80      	pop	{r7, pc}
	...

08012314 <protocol_interface_send_data>:

int32_t protocol_interface_send_data(struct perph_interface *perph, uint8_t *buff, uint16_t len)
{
 8012314:	b580      	push	{r7, lr}
 8012316:	b086      	sub	sp, #24
 8012318:	af00      	add	r7, sp, #0
 801231a:	60f8      	str	r0, [r7, #12]
 801231c:	60b9      	str	r1, [r7, #8]
 801231e:	4613      	mov	r3, r2
 8012320:	80fb      	strh	r3, [r7, #6]
  uint32_t status;
  status = PROTOCOL_SUCCESS;
 8012322:	2300      	movs	r3, #0
 8012324:	617b      	str	r3, [r7, #20]

  if (perph == NULL)
 8012326:	68fb      	ldr	r3, [r7, #12]
 8012328:	2b00      	cmp	r3, #0
 801232a:	d108      	bne.n	801233e <protocol_interface_send_data+0x2a>
  {
    status = PROTOCOL_ERR_INTER_NOT_FOUND;
 801232c:	230f      	movs	r3, #15
 801232e:	617b      	str	r3, [r7, #20]
    PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 8012330:	2299      	movs	r2, #153	; 0x99
 8012332:	4920      	ldr	r1, [pc, #128]	; (80123b4 <protocol_interface_send_data+0xa0>)
 8012334:	6978      	ldr	r0, [r7, #20]
 8012336:	f001 f8e1 	bl	80134fc <protocol_s_error_info_printf>
    return status;
 801233a:	697b      	ldr	r3, [r7, #20]
 801233c:	e035      	b.n	80123aa <protocol_interface_send_data+0x96>
  }

  if (perph->type == CAN_PORT)
 801233e:	68fb      	ldr	r3, [r7, #12]
 8012340:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8012344:	2b01      	cmp	r3, #1
 8012346:	d116      	bne.n	8012376 <protocol_interface_send_data+0x62>
  {
    if (perph->send_callback.can_send_fn != NULL)
 8012348:	68fb      	ldr	r3, [r7, #12]
 801234a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801234e:	2b00      	cmp	r3, #0
 8012350:	d009      	beq.n	8012366 <protocol_interface_send_data+0x52>
    {
      perph->send_callback.can_send_fn(perph->user_data.can.send_id, buff, len);
 8012352:	68fb      	ldr	r3, [r7, #12]
 8012354:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012358:	68fa      	ldr	r2, [r7, #12]
 801235a:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
 801235e:	88fa      	ldrh	r2, [r7, #6]
 8012360:	68b9      	ldr	r1, [r7, #8]
 8012362:	4798      	blx	r3
 8012364:	e020      	b.n	80123a8 <protocol_interface_send_data+0x94>
    }
    else
    {
      status = PROTOCOL_ERR_INTER_NOT_FOUND;
 8012366:	230f      	movs	r3, #15
 8012368:	617b      	str	r3, [r7, #20]
      PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 801236a:	22a6      	movs	r2, #166	; 0xa6
 801236c:	4911      	ldr	r1, [pc, #68]	; (80123b4 <protocol_interface_send_data+0xa0>)
 801236e:	6978      	ldr	r0, [r7, #20]
 8012370:	f001 f8c4 	bl	80134fc <protocol_s_error_info_printf>
 8012374:	e018      	b.n	80123a8 <protocol_interface_send_data+0x94>
    }
  }
  else if (perph->type == COM_PORT)
 8012376:	68fb      	ldr	r3, [r7, #12]
 8012378:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 801237c:	2b00      	cmp	r3, #0
 801237e:	d113      	bne.n	80123a8 <protocol_interface_send_data+0x94>
  {
    if (perph->send_callback.com_send_fn != NULL)
 8012380:	68fb      	ldr	r3, [r7, #12]
 8012382:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012386:	2b00      	cmp	r3, #0
 8012388:	d007      	beq.n	801239a <protocol_interface_send_data+0x86>
    {
      perph->send_callback.com_send_fn(buff, len);
 801238a:	68fb      	ldr	r3, [r7, #12]
 801238c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012390:	88fa      	ldrh	r2, [r7, #6]
 8012392:	4611      	mov	r1, r2
 8012394:	68b8      	ldr	r0, [r7, #8]
 8012396:	4798      	blx	r3
 8012398:	e006      	b.n	80123a8 <protocol_interface_send_data+0x94>
    }
    else
    {
      status = PROTOCOL_ERR_INTER_NOT_FOUND;
 801239a:	230f      	movs	r3, #15
 801239c:	617b      	str	r3, [r7, #20]
      PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 801239e:	22b2      	movs	r2, #178	; 0xb2
 80123a0:	4904      	ldr	r1, [pc, #16]	; (80123b4 <protocol_interface_send_data+0xa0>)
 80123a2:	6978      	ldr	r0, [r7, #20]
 80123a4:	f001 f8aa 	bl	80134fc <protocol_s_error_info_printf>
    }
  }
  return status;
 80123a8:	697b      	ldr	r3, [r7, #20]
}
 80123aa:	4618      	mov	r0, r3
 80123ac:	3718      	adds	r7, #24
 80123ae:	46bd      	mov	sp, r7
 80123b0:	bd80      	pop	{r7, pc}
 80123b2:	bf00      	nop
 80123b4:	08015b1c 	.word	0x08015b1c

080123b8 <protocol_uart_rcv_data>:
  } 
  return status;
}

uint32_t protocol_uart_rcv_data(uint8_t com_port, void *p_data, uint32_t data_len)
{
 80123b8:	b580      	push	{r7, lr}
 80123ba:	b086      	sub	sp, #24
 80123bc:	af00      	add	r7, sp, #0
 80123be:	4603      	mov	r3, r0
 80123c0:	60b9      	str	r1, [r7, #8]
 80123c2:	607a      	str	r2, [r7, #4]
 80123c4:	73fb      	strb	r3, [r7, #15]
  uint32_t status =PROTOCOL_SUCCESS;
 80123c6:	2300      	movs	r3, #0
 80123c8:	613b      	str	r3, [r7, #16]

  for (int i = 0; i< PROTOCOL_INTERFACE_MAX; i++)
 80123ca:	2300      	movs	r3, #0
 80123cc:	617b      	str	r3, [r7, #20]
 80123ce:	e026      	b.n	801241e <protocol_uart_rcv_data+0x66>
  {
    if((protocol_local_info.interface[i].type == COM_PORT)
 80123d0:	4a17      	ldr	r2, [pc, #92]	; (8012430 <protocol_uart_rcv_data+0x78>)
 80123d2:	697b      	ldr	r3, [r7, #20]
 80123d4:	2194      	movs	r1, #148	; 0x94
 80123d6:	fb01 f303 	mul.w	r3, r1, r3
 80123da:	4413      	add	r3, r2
 80123dc:	f203 633a 	addw	r3, r3, #1594	; 0x63a
 80123e0:	781b      	ldrb	r3, [r3, #0]
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d118      	bne.n	8012418 <protocol_uart_rcv_data+0x60>
     &&(protocol_local_info.interface[i].user_data.com.port == com_port))
 80123e6:	4a12      	ldr	r2, [pc, #72]	; (8012430 <protocol_uart_rcv_data+0x78>)
 80123e8:	697b      	ldr	r3, [r7, #20]
 80123ea:	2194      	movs	r1, #148	; 0x94
 80123ec:	fb01 f303 	mul.w	r3, r1, r3
 80123f0:	4413      	add	r3, r2
 80123f2:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 80123f6:	681a      	ldr	r2, [r3, #0]
 80123f8:	7bfb      	ldrb	r3, [r7, #15]
 80123fa:	429a      	cmp	r2, r3
 80123fc:	d10c      	bne.n	8012418 <protocol_uart_rcv_data+0x60>
    {
      protocol_rcv_data(p_data, data_len, &protocol_local_info.interface[i]);
 80123fe:	697b      	ldr	r3, [r7, #20]
 8012400:	2294      	movs	r2, #148	; 0x94
 8012402:	fb02 f303 	mul.w	r3, r2, r3
 8012406:	f503 63b7 	add.w	r3, r3, #1464	; 0x5b8
 801240a:	4a09      	ldr	r2, [pc, #36]	; (8012430 <protocol_uart_rcv_data+0x78>)
 801240c:	4413      	add	r3, r2
 801240e:	461a      	mov	r2, r3
 8012410:	6879      	ldr	r1, [r7, #4]
 8012412:	68b8      	ldr	r0, [r7, #8]
 8012414:	f7ff fe2c 	bl	8012070 <protocol_rcv_data>
  for (int i = 0; i< PROTOCOL_INTERFACE_MAX; i++)
 8012418:	697b      	ldr	r3, [r7, #20]
 801241a:	3301      	adds	r3, #1
 801241c:	617b      	str	r3, [r7, #20]
 801241e:	697b      	ldr	r3, [r7, #20]
 8012420:	2b04      	cmp	r3, #4
 8012422:	ddd5      	ble.n	80123d0 <protocol_uart_rcv_data+0x18>
    }
  }
  return status;
 8012424:	693b      	ldr	r3, [r7, #16]
}
 8012426:	4618      	mov	r0, r3
 8012428:	3718      	adds	r7, #24
 801242a:	46bd      	mov	sp, r7
 801242c:	bd80      	pop	{r7, pc}
 801242e:	bf00      	nop
 8012430:	200074d0 	.word	0x200074d0

08012434 <protocol_set_route>:
    * @param  tar_add Target address
    *         interface Next hop interface serial number corresponding to the target address
    * @retval Protocol return status
    */
int32_t protocol_set_route(uint8_t tar_add, const char *name)
{
 8012434:	b580      	push	{r7, lr}
 8012436:	b084      	sub	sp, #16
 8012438:	af00      	add	r7, sp, #0
 801243a:	4603      	mov	r3, r0
 801243c:	6039      	str	r1, [r7, #0]
 801243e:	71fb      	strb	r3, [r7, #7]
  uint32_t status;
  struct perph_interface *perph;
  perph = protocol_get_interface(name);
 8012440:	6838      	ldr	r0, [r7, #0]
 8012442:	f000 f83b 	bl	80124bc <protocol_get_interface>
 8012446:	60f8      	str	r0, [r7, #12]

  status = PROTOCOL_SUCCESS;
 8012448:	2300      	movs	r3, #0
 801244a:	60bb      	str	r3, [r7, #8]
  if (perph == NULL)
 801244c:	68fb      	ldr	r3, [r7, #12]
 801244e:	2b00      	cmp	r3, #0
 8012450:	d108      	bne.n	8012464 <protocol_set_route+0x30>
  {
    status = PROTOCOL_ERR_INTER_NOT_FOUND;
 8012452:	230f      	movs	r3, #15
 8012454:	60bb      	str	r3, [r7, #8]
    PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 8012456:	22e7      	movs	r2, #231	; 0xe7
 8012458:	4916      	ldr	r1, [pc, #88]	; (80124b4 <protocol_set_route+0x80>)
 801245a:	68b8      	ldr	r0, [r7, #8]
 801245c:	f001 f84e 	bl	80134fc <protocol_s_error_info_printf>
    return status;
 8012460:	68bb      	ldr	r3, [r7, #8]
 8012462:	e022      	b.n	80124aa <protocol_set_route+0x76>
  }
  if (tar_add >= PROTOCOL_ROUTE_TABLE_MAX_NUM)
 8012464:	79fb      	ldrb	r3, [r7, #7]
 8012466:	2bfd      	cmp	r3, #253	; 0xfd
 8012468:	d908      	bls.n	801247c <protocol_set_route+0x48>
  {
    status = PROTOCOL_ERR_ROUTEU_SET_BEYOND;
 801246a:	230e      	movs	r3, #14
 801246c:	60bb      	str	r3, [r7, #8]
    PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 801246e:	22ed      	movs	r2, #237	; 0xed
 8012470:	4910      	ldr	r1, [pc, #64]	; (80124b4 <protocol_set_route+0x80>)
 8012472:	68b8      	ldr	r0, [r7, #8]
 8012474:	f001 f842 	bl	80134fc <protocol_s_error_info_printf>
    return status;
 8012478:	68bb      	ldr	r3, [r7, #8]
 801247a:	e016      	b.n	80124aa <protocol_set_route+0x76>
  }

  if (perph->is_valid == 0)
 801247c:	68fb      	ldr	r3, [r7, #12]
 801247e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8012482:	2b00      	cmp	r3, #0
 8012484:	d108      	bne.n	8012498 <protocol_set_route+0x64>
  {
    status = PROTOCOL_ERR_INTER_NOT_FOUND;
 8012486:	230f      	movs	r3, #15
 8012488:	60bb      	str	r3, [r7, #8]
    PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 801248a:	22f4      	movs	r2, #244	; 0xf4
 801248c:	4909      	ldr	r1, [pc, #36]	; (80124b4 <protocol_set_route+0x80>)
 801248e:	68b8      	ldr	r0, [r7, #8]
 8012490:	f001 f834 	bl	80134fc <protocol_s_error_info_printf>
    return status;
 8012494:	68bb      	ldr	r3, [r7, #8]
 8012496:	e008      	b.n	80124aa <protocol_set_route+0x76>
  }

  protocol_local_info.route_table[tar_add] = perph->idx;
 8012498:	79fb      	ldrb	r3, [r7, #7]
 801249a:	68fa      	ldr	r2, [r7, #12]
 801249c:	f892 1060 	ldrb.w	r1, [r2, #96]	; 0x60
 80124a0:	4a05      	ldr	r2, [pc, #20]	; (80124b8 <protocol_set_route+0x84>)
 80124a2:	4413      	add	r3, r2
 80124a4:	460a      	mov	r2, r1
 80124a6:	705a      	strb	r2, [r3, #1]

  PROTOCOL_OTHER_INFO_PRINTF("Route has been set, Address 0x%02X next jump is %s[%d].",
                             tar_add, perph->object_name, perph->idx);

  return status;
 80124a8:	68bb      	ldr	r3, [r7, #8]
}
 80124aa:	4618      	mov	r0, r3
 80124ac:	3710      	adds	r7, #16
 80124ae:	46bd      	mov	sp, r7
 80124b0:	bd80      	pop	{r7, pc}
 80124b2:	bf00      	nop
 80124b4:	08015b1c 	.word	0x08015b1c
 80124b8:	200074d0 	.word	0x200074d0

080124bc <protocol_get_interface>:

struct perph_interface *protocol_get_interface(const char *name)
{
 80124bc:	b590      	push	{r4, r7, lr}
 80124be:	b087      	sub	sp, #28
 80124c0:	af00      	add	r7, sp, #0
 80124c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80124c4:	f3ef 8310 	mrs	r3, PRIMASK
 80124c8:	613b      	str	r3, [r7, #16]
  return(result);
 80124ca:	693b      	ldr	r3, [r7, #16]
  var_cpu_sr();
  enter_critical();
 80124cc:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 80124ce:	b672      	cpsid	i
}
 80124d0:	bf00      	nop
  for (int i = 0; i < PROTOCOL_INTERFACE_MAX; i++)
 80124d2:	2300      	movs	r3, #0
 80124d4:	617b      	str	r3, [r7, #20]
 80124d6:	e020      	b.n	801251a <protocol_get_interface+0x5e>
  {
    if (strncmp(protocol_local_info.interface[i].object_name, name, PROTOCOL_OBJ_NAME_MAX_LEN) == 0)
 80124d8:	697b      	ldr	r3, [r7, #20]
 80124da:	2294      	movs	r2, #148	; 0x94
 80124dc:	fb02 f303 	mul.w	r3, r2, r3
 80124e0:	f503 63b7 	add.w	r3, r3, #1464	; 0x5b8
 80124e4:	4a13      	ldr	r2, [pc, #76]	; (8012534 <protocol_get_interface+0x78>)
 80124e6:	4413      	add	r3, r2
 80124e8:	2220      	movs	r2, #32
 80124ea:	6879      	ldr	r1, [r7, #4]
 80124ec:	4618      	mov	r0, r3
 80124ee:	f002 f88f 	bl	8014610 <strncmp>
 80124f2:	4603      	mov	r3, r0
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d10d      	bne.n	8012514 <protocol_get_interface+0x58>
 80124f8:	60fc      	str	r4, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80124fa:	68fb      	ldr	r3, [r7, #12]
 80124fc:	f383 8810 	msr	PRIMASK, r3
}
 8012500:	bf00      	nop
    {
      exit_critical();
      return &protocol_local_info.interface[i];
 8012502:	697b      	ldr	r3, [r7, #20]
 8012504:	2294      	movs	r2, #148	; 0x94
 8012506:	fb02 f303 	mul.w	r3, r2, r3
 801250a:	f503 63b7 	add.w	r3, r3, #1464	; 0x5b8
 801250e:	4a09      	ldr	r2, [pc, #36]	; (8012534 <protocol_get_interface+0x78>)
 8012510:	4413      	add	r3, r2
 8012512:	e00b      	b.n	801252c <protocol_get_interface+0x70>
  for (int i = 0; i < PROTOCOL_INTERFACE_MAX; i++)
 8012514:	697b      	ldr	r3, [r7, #20]
 8012516:	3301      	adds	r3, #1
 8012518:	617b      	str	r3, [r7, #20]
 801251a:	697b      	ldr	r3, [r7, #20]
 801251c:	2b04      	cmp	r3, #4
 801251e:	dddb      	ble.n	80124d8 <protocol_get_interface+0x1c>
 8012520:	60bc      	str	r4, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012522:	68bb      	ldr	r3, [r7, #8]
 8012524:	f383 8810 	msr	PRIMASK, r3
}
 8012528:	bf00      	nop
    }
  }
  exit_critical();
  return NULL;
 801252a:	2300      	movs	r3, #0
}
 801252c:	4618      	mov	r0, r3
 801252e:	371c      	adds	r7, #28
 8012530:	46bd      	mov	sp, r7
 8012532:	bd90      	pop	{r4, r7, pc}
 8012534:	200074d0 	.word	0x200074d0

08012538 <__list_add>:
{
 8012538:	b480      	push	{r7}
 801253a:	b085      	sub	sp, #20
 801253c:	af00      	add	r7, sp, #0
 801253e:	60f8      	str	r0, [r7, #12]
 8012540:	60b9      	str	r1, [r7, #8]
 8012542:	607a      	str	r2, [r7, #4]
  next->prev = new;
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	68fa      	ldr	r2, [r7, #12]
 8012548:	605a      	str	r2, [r3, #4]
  new->next = next;
 801254a:	68fb      	ldr	r3, [r7, #12]
 801254c:	687a      	ldr	r2, [r7, #4]
 801254e:	601a      	str	r2, [r3, #0]
  new->prev = prev;
 8012550:	68fb      	ldr	r3, [r7, #12]
 8012552:	68ba      	ldr	r2, [r7, #8]
 8012554:	605a      	str	r2, [r3, #4]
  prev->next = new;
 8012556:	68bb      	ldr	r3, [r7, #8]
 8012558:	68fa      	ldr	r2, [r7, #12]
 801255a:	601a      	str	r2, [r3, #0]
}
 801255c:	bf00      	nop
 801255e:	3714      	adds	r7, #20
 8012560:	46bd      	mov	sp, r7
 8012562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012566:	4770      	bx	lr

08012568 <list_add>:
{
 8012568:	b580      	push	{r7, lr}
 801256a:	b082      	sub	sp, #8
 801256c:	af00      	add	r7, sp, #0
 801256e:	6078      	str	r0, [r7, #4]
 8012570:	6039      	str	r1, [r7, #0]
  __list_add(new, head, head->next);
 8012572:	683b      	ldr	r3, [r7, #0]
 8012574:	681b      	ldr	r3, [r3, #0]
 8012576:	461a      	mov	r2, r3
 8012578:	6839      	ldr	r1, [r7, #0]
 801257a:	6878      	ldr	r0, [r7, #4]
 801257c:	f7ff ffdc 	bl	8012538 <__list_add>
}
 8012580:	bf00      	nop
 8012582:	3708      	adds	r7, #8
 8012584:	46bd      	mov	sp, r7
 8012586:	bd80      	pop	{r7, pc}

08012588 <__list_del>:
{
 8012588:	b480      	push	{r7}
 801258a:	b083      	sub	sp, #12
 801258c:	af00      	add	r7, sp, #0
 801258e:	6078      	str	r0, [r7, #4]
 8012590:	6039      	str	r1, [r7, #0]
  next->prev = prev;
 8012592:	683b      	ldr	r3, [r7, #0]
 8012594:	687a      	ldr	r2, [r7, #4]
 8012596:	605a      	str	r2, [r3, #4]
  prev->next = next;
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	683a      	ldr	r2, [r7, #0]
 801259c:	601a      	str	r2, [r3, #0]
}
 801259e:	bf00      	nop
 80125a0:	370c      	adds	r7, #12
 80125a2:	46bd      	mov	sp, r7
 80125a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125a8:	4770      	bx	lr

080125aa <list_del>:
{
 80125aa:	b580      	push	{r7, lr}
 80125ac:	b082      	sub	sp, #8
 80125ae:	af00      	add	r7, sp, #0
 80125b0:	6078      	str	r0, [r7, #4]
  __list_del(entry->prev, entry->next);
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	685a      	ldr	r2, [r3, #4]
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	681b      	ldr	r3, [r3, #0]
 80125ba:	4619      	mov	r1, r3
 80125bc:	4610      	mov	r0, r2
 80125be:	f7ff ffe3 	bl	8012588 <__list_del>
}
 80125c2:	bf00      	nop
 80125c4:	3708      	adds	r7, #8
 80125c6:	46bd      	mov	sp, r7
 80125c8:	bd80      	pop	{r7, pc}

080125ca <protocol_get_session>:

/* Private function prototypes -----------------------------------------------*/
/* Exported functions --------------------------------------------------------*/

uint8_t protocol_get_session(struct perph_interface * interface)
{
 80125ca:	b480      	push	{r7}
 80125cc:	b085      	sub	sp, #20
 80125ce:	af00      	add	r7, sp, #0
 80125d0:	6078      	str	r0, [r7, #4]
  for (int i = 0; i < 31; i++)
 80125d2:	2300      	movs	r3, #0
 80125d4:	60fb      	str	r3, [r7, #12]
 80125d6:	e014      	b.n	8012602 <protocol_get_session+0x38>
  {
    if (interface->session[i] == 0)
 80125d8:	687a      	ldr	r2, [r7, #4]
 80125da:	68fb      	ldr	r3, [r7, #12]
 80125dc:	4413      	add	r3, r2
 80125de:	3363      	adds	r3, #99	; 0x63
 80125e0:	781b      	ldrb	r3, [r3, #0]
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	d10a      	bne.n	80125fc <protocol_get_session+0x32>
    {
      interface->session[i] = 1;
 80125e6:	687a      	ldr	r2, [r7, #4]
 80125e8:	68fb      	ldr	r3, [r7, #12]
 80125ea:	4413      	add	r3, r2
 80125ec:	3363      	adds	r3, #99	; 0x63
 80125ee:	2201      	movs	r2, #1
 80125f0:	701a      	strb	r2, [r3, #0]
      return i + 1;
 80125f2:	68fb      	ldr	r3, [r7, #12]
 80125f4:	b2db      	uxtb	r3, r3
 80125f6:	3301      	adds	r3, #1
 80125f8:	b2db      	uxtb	r3, r3
 80125fa:	e006      	b.n	801260a <protocol_get_session+0x40>
  for (int i = 0; i < 31; i++)
 80125fc:	68fb      	ldr	r3, [r7, #12]
 80125fe:	3301      	adds	r3, #1
 8012600:	60fb      	str	r3, [r7, #12]
 8012602:	68fb      	ldr	r3, [r7, #12]
 8012604:	2b1e      	cmp	r3, #30
 8012606:	dde7      	ble.n	80125d8 <protocol_get_session+0xe>
    }
  }
  return 0;
 8012608:	2300      	movs	r3, #0
}
 801260a:	4618      	mov	r0, r3
 801260c:	3714      	adds	r7, #20
 801260e:	46bd      	mov	sp, r7
 8012610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012614:	4770      	bx	lr

08012616 <protocol_release_session>:

int32_t protocol_release_session(struct perph_interface * interface, uint8_t id)
{
 8012616:	b480      	push	{r7}
 8012618:	b083      	sub	sp, #12
 801261a:	af00      	add	r7, sp, #0
 801261c:	6078      	str	r0, [r7, #4]
 801261e:	460b      	mov	r3, r1
 8012620:	70fb      	strb	r3, [r7, #3]
  if ((id > 0) && (id < 32))
 8012622:	78fb      	ldrb	r3, [r7, #3]
 8012624:	2b00      	cmp	r3, #0
 8012626:	d00b      	beq.n	8012640 <protocol_release_session+0x2a>
 8012628:	78fb      	ldrb	r3, [r7, #3]
 801262a:	2b1f      	cmp	r3, #31
 801262c:	d808      	bhi.n	8012640 <protocol_release_session+0x2a>
  {
    interface->session[id - 1] = 0;
 801262e:	78fb      	ldrb	r3, [r7, #3]
 8012630:	3b01      	subs	r3, #1
 8012632:	687a      	ldr	r2, [r7, #4]
 8012634:	4413      	add	r3, r2
 8012636:	2200      	movs	r2, #0
 8012638:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
    return 0;
 801263c:	2300      	movs	r3, #0
 801263e:	e001      	b.n	8012644 <protocol_release_session+0x2e>
  }
  return -1;
 8012640:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8012644:	4618      	mov	r0, r3
 8012646:	370c      	adds	r7, #12
 8012648:	46bd      	mov	sp, r7
 801264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801264e:	4770      	bx	lr

08012650 <protocol_s_add_sendnode>:

// Add protocol frame
uint32_t protocol_s_add_sendnode(uint8_t reciver, uint8_t session, uint8_t pack_type,
                                 void *p_data, uint32_t data_len, uint16_t cmd, uint16_t ack_seq)
{
 8012650:	b580      	push	{r7, lr}
 8012652:	b094      	sub	sp, #80	; 0x50
 8012654:	af02      	add	r7, sp, #8
 8012656:	603b      	str	r3, [r7, #0]
 8012658:	4603      	mov	r3, r0
 801265a:	71fb      	strb	r3, [r7, #7]
 801265c:	460b      	mov	r3, r1
 801265e:	71bb      	strb	r3, [r7, #6]
 8012660:	4613      	mov	r3, r2
 8012662:	717b      	strb	r3, [r7, #5]
  send_ctx_t ctx = {0};
 8012664:	2300      	movs	r3, #0
 8012666:	60fb      	str	r3, [r7, #12]
  uint32_t pack_head_offset;
  protocol_pack_desc_t *pack_head;
  send_list_node_t *send_node;
  uint16_t seq;

  status = PROTOCOL_SUCCESS;
 8012668:	2300      	movs	r3, #0
 801266a:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (data_len > PROTOCOL_MAX_DATA_LEN)
 801266c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801266e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012672:	d908      	bls.n	8012686 <protocol_s_add_sendnode+0x36>
  {
    status = PROTOCOL_ERR_DATA_TOO_LONG;
 8012674:	2301      	movs	r3, #1
 8012676:	63fb      	str	r3, [r7, #60]	; 0x3c
    PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 8012678:	224d      	movs	r2, #77	; 0x4d
 801267a:	499e      	ldr	r1, [pc, #632]	; (80128f4 <protocol_s_add_sendnode+0x2a4>)
 801267c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801267e:	f000 ff3d 	bl	80134fc <protocol_s_error_info_printf>
    return status;
 8012682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012684:	e132      	b.n	80128ec <protocol_s_add_sendnode+0x29c>
  }

  // Configure sending parameters
  ctx.s_a_r.pack_type = pack_type;
 8012686:	797b      	ldrb	r3, [r7, #5]
 8012688:	f003 0301 	and.w	r3, r3, #1
 801268c:	b2da      	uxtb	r2, r3
 801268e:	7bfb      	ldrb	r3, [r7, #15]
 8012690:	f362 1345 	bfi	r3, r2, #5, #1
 8012694:	73fb      	strb	r3, [r7, #15]
  ctx.s_a_r.session = session;
 8012696:	79bb      	ldrb	r3, [r7, #6]
 8012698:	f003 031f 	and.w	r3, r3, #31
 801269c:	b2da      	uxtb	r2, r3
 801269e:	7bfb      	ldrb	r3, [r7, #15]
 80126a0:	f362 0304 	bfi	r3, r2, #0, #5
 80126a4:	73fb      	strb	r3, [r7, #15]
  ctx.s_a_r.res = 0;
 80126a6:	7bfb      	ldrb	r3, [r7, #15]
 80126a8:	f36f 1387 	bfc	r3, #6, #2
 80126ac:	73fb      	strb	r3, [r7, #15]
  ctx.reciver = reciver;
 80126ae:	79fb      	ldrb	r3, [r7, #7]
 80126b0:	73bb      	strb	r3, [r7, #14]
  ctx.version = PROTOCOL_VERSION;
 80126b2:	2300      	movs	r3, #0
 80126b4:	81bb      	strh	r3, [r7, #12]

  // Get routing interface
  int_obj = protocol_s_get_route(reciver);
 80126b6:	79fb      	ldrb	r3, [r7, #7]
 80126b8:	4618      	mov	r0, r3
 80126ba:	f000 fbf9 	bl	8012eb0 <protocol_s_get_route>
 80126be:	63b8      	str	r0, [r7, #56]	; 0x38

  if (int_obj == NULL)
 80126c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d108      	bne.n	80126d8 <protocol_s_add_sendnode+0x88>
  {
    status = PROTOCOL_ERR_ROUTE_NOT_FOUND;
 80126c6:	2306      	movs	r3, #6
 80126c8:	63fb      	str	r3, [r7, #60]	; 0x3c
    PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 80126ca:	225e      	movs	r2, #94	; 0x5e
 80126cc:	4989      	ldr	r1, [pc, #548]	; (80128f4 <protocol_s_add_sendnode+0x2a4>)
 80126ce:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80126d0:	f000 ff14 	bl	80134fc <protocol_s_error_info_printf>

    return status;
 80126d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80126d6:	e109      	b.n	80128ec <protocol_s_add_sendnode+0x29c>
  }

  if ((pack_type == PROTOCOL_PACK_NOR) && (session != 0))
 80126d8:	797b      	ldrb	r3, [r7, #5]
 80126da:	2b00      	cmp	r3, #0
 80126dc:	d114      	bne.n	8012708 <protocol_s_add_sendnode+0xb8>
 80126de:	79bb      	ldrb	r3, [r7, #6]
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	d011      	beq.n	8012708 <protocol_s_add_sendnode+0xb8>
  {
    if (protocol_s_session_get_node(int_obj, reciver, session) != NULL)
 80126e4:	79ba      	ldrb	r2, [r7, #6]
 80126e6:	79fb      	ldrb	r3, [r7, #7]
 80126e8:	4619      	mov	r1, r3
 80126ea:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80126ec:	f000 fc0c 	bl	8012f08 <protocol_s_session_get_node>
 80126f0:	4603      	mov	r3, r0
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	d008      	beq.n	8012708 <protocol_s_add_sendnode+0xb8>
    {
      status = PROTOCOL_ERR_SESSION_IS_USE;
 80126f6:	2305      	movs	r3, #5
 80126f8:	63fb      	str	r3, [r7, #60]	; 0x3c
      PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 80126fa:	2268      	movs	r2, #104	; 0x68
 80126fc:	497d      	ldr	r1, [pc, #500]	; (80128f4 <protocol_s_add_sendnode+0x2a4>)
 80126fe:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012700:	f000 fefc 	bl	80134fc <protocol_s_error_info_printf>
      return status;
 8012704:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012706:	e0f1      	b.n	80128ec <protocol_s_add_sendnode+0x29c>
    }
  }

  // Allocate memory required for data frame
  if (pack_type == PROTOCOL_PACK_ACK)
 8012708:	797b      	ldrb	r3, [r7, #5]
 801270a:	2b01      	cmp	r3, #1
 801270c:	d103      	bne.n	8012716 <protocol_s_add_sendnode+0xc6>
  {
    malloc_size = PROTOCOL_PACK_HEAD_TAIL_SIZE + PROTOCOL_SEND_NODE_SIZE +
 801270e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012710:	3340      	adds	r3, #64	; 0x40
 8012712:	647b      	str	r3, [r7, #68]	; 0x44
 8012714:	e002      	b.n	801271c <protocol_s_add_sendnode+0xcc>
                  data_len;
  }
  else
  {
    malloc_size = PROTOCOL_PACK_HEAD_TAIL_SIZE + PROTOCOL_SEND_NODE_SIZE +
 8012716:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012718:	3342      	adds	r3, #66	; 0x42
 801271a:	647b      	str	r3, [r7, #68]	; 0x44
                  data_len + PROTOCOL_PACK_CMD_SIZE;
  }
  malloc_zone = protocol_p_malloc(malloc_size);
 801271c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801271e:	f7ff fd05 	bl	801212c <protocol_p_malloc>
 8012722:	6378      	str	r0, [r7, #52]	; 0x34
  if (malloc_zone == NULL)
 8012724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012726:	2b00      	cmp	r3, #0
 8012728:	d108      	bne.n	801273c <protocol_s_add_sendnode+0xec>
  {
    status = PROTOCOL_ERR_NOT_ENOUGH_MEM;
 801272a:	2302      	movs	r3, #2
 801272c:	63fb      	str	r3, [r7, #60]	; 0x3c
    PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 801272e:	227c      	movs	r2, #124	; 0x7c
 8012730:	4970      	ldr	r1, [pc, #448]	; (80128f4 <protocol_s_add_sendnode+0x2a4>)
 8012732:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012734:	f000 fee2 	bl	80134fc <protocol_s_error_info_printf>
    return status;
 8012738:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801273a:	e0d7      	b.n	80128ec <protocol_s_add_sendnode+0x29c>
  }

  if (pack_type == PROTOCOL_PACK_NOR)
 801273c:	797b      	ldrb	r3, [r7, #5]
 801273e:	2b00      	cmp	r3, #0
 8012740:	d118      	bne.n	8012774 <protocol_s_add_sendnode+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8012742:	f3ef 8310 	mrs	r3, PRIMASK
 8012746:	61fb      	str	r3, [r7, #28]
  return(result);
 8012748:	69fa      	ldr	r2, [r7, #28]
  {
    MUTEX_LOCK(int_obj->send.mutex_lock);
 801274a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801274c:	65da      	str	r2, [r3, #92]	; 0x5c
  __ASM volatile ("cpsid i" : : : "memory");
 801274e:	b672      	cpsid	i
}
 8012750:	bf00      	nop
    seq = int_obj->send.send_seq++;
 8012752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012754:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8012758:	1c5a      	adds	r2, r3, #1
 801275a:	b291      	uxth	r1, r2
 801275c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801275e:	f8a2 1058 	strh.w	r1, [r2, #88]	; 0x58
 8012762:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    MUTEX_UNLOCK(int_obj->send.mutex_lock);
 8012766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801276a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801276c:	6a3b      	ldr	r3, [r7, #32]
 801276e:	f383 8810 	msr	PRIMASK, r3
}
 8012772:	e003      	b.n	801277c <protocol_s_add_sendnode+0x12c>
  }
  else
  {
    seq = ack_seq;
 8012774:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8012778:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  }

  pack_head_offset = PROTOCOL_SEND_NODE_SIZE;
 801277c:	2330      	movs	r3, #48	; 0x30
 801277e:	633b      	str	r3, [r7, #48]	; 0x30
  pack_head = (protocol_pack_desc_t *)&malloc_zone[pack_head_offset];
 8012780:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012784:	4413      	add	r3, r2
 8012786:	62fb      	str	r3, [r7, #44]	; 0x2c
  send_node = (send_list_node_t *)&malloc_zone[0];
 8012788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801278a:	62bb      	str	r3, [r7, #40]	; 0x28

  // Fill in the frame data section
  protocol_s_fill_pack(&ctx, p_data, data_len, (uint8_t *)(pack_head), seq, cmd);
 801278c:	f107 000c 	add.w	r0, r7, #12
 8012790:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8012794:	9301      	str	r3, [sp, #4]
 8012796:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801279a:	9300      	str	r3, [sp, #0]
 801279c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801279e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80127a0:	6839      	ldr	r1, [r7, #0]
 80127a2:	f000 f945 	bl	8012a30 <protocol_s_fill_pack>

  // Populate send_node
  send_node->session = ctx.s_a_r.session;
 80127a6:	7bfb      	ldrb	r3, [r7, #15]
 80127a8:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80127ac:	b2db      	uxtb	r3, r3
 80127ae:	461a      	mov	r2, r3
 80127b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127b2:	745a      	strb	r2, [r3, #17]
  send_node->p_data = &malloc_zone[pack_head_offset];
 80127b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80127b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127b8:	441a      	add	r2, r3
 80127ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127bc:	609a      	str	r2, [r3, #8]
  send_node->len = malloc_size - PROTOCOL_SEND_NODE_SIZE;
 80127be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80127c0:	b29b      	uxth	r3, r3
 80127c2:	3b30      	subs	r3, #48	; 0x30
 80127c4:	b29a      	uxth	r2, r3
 80127c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127c8:	819a      	strh	r2, [r3, #12]
  send_node->pre_timestamp = 0;
 80127ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127cc:	2200      	movs	r2, #0
 80127ce:	61da      	str	r2, [r3, #28]
  send_node->is_got_ack = 0;
 80127d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127d2:	2200      	movs	r2, #0
 80127d4:	73da      	strb	r2, [r3, #15]
  send_node->is_first_send = 1;
 80127d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127d8:	2201      	movs	r2, #1
 80127da:	f883 2020 	strb.w	r2, [r3, #32]
  send_node->address = reciver;
 80127de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127e0:	79fa      	ldrb	r2, [r7, #7]
 80127e2:	749a      	strb	r2, [r3, #18]
  send_node->pack_type = pack_type;
 80127e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127e6:	797a      	ldrb	r2, [r7, #5]
 80127e8:	759a      	strb	r2, [r3, #22]
  send_node->is_ready_realse = 0;
 80127ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127ec:	2200      	movs	r2, #0
 80127ee:	741a      	strb	r2, [r3, #16]
  send_node->cmd = cmd;
 80127f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127f2:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80127f6:	829a      	strh	r2, [r3, #20]
  send_node->forward_src_obj = NULL;
 80127f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127fa:	2200      	movs	r2, #0
 80127fc:	625a      	str	r2, [r3, #36]	; 0x24

  struct send_cmd_info *cmd_info;
  cmd_info = protocol_get_send_cmd_info(cmd);
 80127fe:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8012802:	4618      	mov	r0, r3
 8012804:	f7ff f9f0 	bl	8011be8 <protocol_get_send_cmd_info>
 8012808:	6278      	str	r0, [r7, #36]	; 0x24
  if (cmd_info != NULL)
 801280a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801280c:	2b00      	cmp	r3, #0
 801280e:	d010      	beq.n	8012832 <protocol_s_add_sendnode+0x1e2>
  {
    send_node->rest_cnt = cmd_info->resend_times;
 8012810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012812:	795a      	ldrb	r2, [r3, #5]
 8012814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012816:	75da      	strb	r2, [r3, #23]
    send_node->timeout = cmd_info->resend_timeout;
 8012818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801281a:	88da      	ldrh	r2, [r3, #6]
 801281c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801281e:	831a      	strh	r2, [r3, #24]
    send_node->ack_callback = cmd_info->ack_callback;
 8012820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012822:	689a      	ldr	r2, [r3, #8]
 8012824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012826:	629a      	str	r2, [r3, #40]	; 0x28
    send_node->no_ack_callback = cmd_info->no_ack_callback;
 8012828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801282a:	68da      	ldr	r2, [r3, #12]
 801282c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801282e:	62da      	str	r2, [r3, #44]	; 0x2c
 8012830:	e00b      	b.n	801284a <protocol_s_add_sendnode+0x1fa>
  }
  else
  {
    send_node->rest_cnt = 1;
 8012832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012834:	2201      	movs	r2, #1
 8012836:	75da      	strb	r2, [r3, #23]
    send_node->timeout = 0;
 8012838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801283a:	2200      	movs	r2, #0
 801283c:	831a      	strh	r2, [r3, #24]
    send_node->ack_callback = NULL;
 801283e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012840:	2200      	movs	r2, #0
 8012842:	629a      	str	r2, [r3, #40]	; 0x28
    send_node->no_ack_callback = NULL;
 8012844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012846:	2200      	movs	r2, #0
 8012848:	62da      	str	r2, [r3, #44]	; 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801284a:	f3ef 8310 	mrs	r3, PRIMASK
 801284e:	61bb      	str	r3, [r7, #24]
  return(result);
 8012850:	69ba      	ldr	r2, [r7, #24]
  }

  //Add to sending list
  MUTEX_LOCK(int_obj->send.mutex_lock);
 8012852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012854:	65da      	str	r2, [r3, #92]	; 0x5c
  __ASM volatile ("cpsid i" : : : "memory");
 8012856:	b672      	cpsid	i
}
 8012858:	bf00      	nop

  if ((pack_type == PROTOCOL_PACK_NOR) && (session != 0))
 801285a:	797b      	ldrb	r3, [r7, #5]
 801285c:	2b00      	cmp	r3, #0
 801285e:	d11b      	bne.n	8012898 <protocol_s_add_sendnode+0x248>
 8012860:	79bb      	ldrb	r3, [r7, #6]
 8012862:	2b00      	cmp	r3, #0
 8012864:	d018      	beq.n	8012898 <protocol_s_add_sendnode+0x248>
  {
    if (protocol_s_session_get_node(int_obj, reciver, session) != NULL)
 8012866:	79ba      	ldrb	r2, [r7, #6]
 8012868:	79fb      	ldrb	r3, [r7, #7]
 801286a:	4619      	mov	r1, r3
 801286c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801286e:	f000 fb4b 	bl	8012f08 <protocol_s_session_get_node>
 8012872:	4603      	mov	r3, r0
 8012874:	2b00      	cmp	r3, #0
 8012876:	d00f      	beq.n	8012898 <protocol_s_add_sendnode+0x248>
    {
      status = PROTOCOL_ERR_SESSION_IS_USE;
 8012878:	2305      	movs	r3, #5
 801287a:	63fb      	str	r3, [r7, #60]	; 0x3c
      MUTEX_UNLOCK(int_obj->send.mutex_lock);
 801287c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801287e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012880:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012882:	697b      	ldr	r3, [r7, #20]
 8012884:	f383 8810 	msr	PRIMASK, r3
}
 8012888:	bf00      	nop
      PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 801288a:	22b9      	movs	r2, #185	; 0xb9
 801288c:	4919      	ldr	r1, [pc, #100]	; (80128f4 <protocol_s_add_sendnode+0x2a4>)
 801288e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012890:	f000 fe34 	bl	80134fc <protocol_s_error_info_printf>
      return status;
 8012894:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012896:	e029      	b.n	80128ec <protocol_s_add_sendnode+0x29c>
    }
  }

  if (pack_type == PROTOCOL_PACK_NOR)
 8012898:	797b      	ldrb	r3, [r7, #5]
 801289a:	2b00      	cmp	r3, #0
 801289c:	d10f      	bne.n	80128be <protocol_s_add_sendnode+0x26e>
  {
    list_add(&(send_node->send_list), &(int_obj->send.normal_list_header));
 801289e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80128a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128a2:	3348      	adds	r3, #72	; 0x48
 80128a4:	4619      	mov	r1, r3
 80128a6:	4610      	mov	r0, r2
 80128a8:	f7ff fe5e 	bl	8012568 <list_add>
    int_obj->send.normal_node_num++;
 80128ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128ae:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 80128b2:	3301      	adds	r3, #1
 80128b4:	b2da      	uxtb	r2, r3
 80128b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128b8:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
 80128bc:	e00e      	b.n	80128dc <protocol_s_add_sendnode+0x28c>
  }
  else
  {
    list_add(&(send_node->send_list), &(int_obj->send.ack_list_header));
 80128be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80128c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128c2:	3350      	adds	r3, #80	; 0x50
 80128c4:	4619      	mov	r1, r3
 80128c6:	4610      	mov	r0, r2
 80128c8:	f7ff fe4e 	bl	8012568 <list_add>
    int_obj->send.ack_node_num++;
 80128cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128ce:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 80128d2:	3301      	adds	r3, #1
 80128d4:	b2da      	uxtb	r2, r3
 80128d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128d8:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
  }

  MUTEX_UNLOCK(int_obj->send.mutex_lock);
 80128dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80128e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80128e2:	693b      	ldr	r3, [r7, #16]
 80128e4:	f383 8810 	msr	PRIMASK, r3
}
 80128e8:	bf00      	nop
  {
    PROTOCOL_SEND_DBG_PRINTF("Send pack, Address:0x%02X, Session: %d Ack pack.",
                              reciver, session);
  }

  return status;
 80128ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80128ec:	4618      	mov	r0, r3
 80128ee:	3748      	adds	r7, #72	; 0x48
 80128f0:	46bd      	mov	sp, r7
 80128f2:	bd80      	pop	{r7, pc}
 80128f4:	08015b58 	.word	0x08015b58

080128f8 <protocol_s_broadcast_add_node>:

// Add processing function to broadcast package
uint32_t protocol_s_broadcast_add_node(void *p_data, uint32_t data_len, uint16_t cmd)
{
 80128f8:	b580      	push	{r7, lr}
 80128fa:	b090      	sub	sp, #64	; 0x40
 80128fc:	af02      	add	r7, sp, #8
 80128fe:	60f8      	str	r0, [r7, #12]
 8012900:	60b9      	str	r1, [r7, #8]
 8012902:	4613      	mov	r3, r2
 8012904:	80fb      	strh	r3, [r7, #6]
  uint8_t *malloc_zone;
  uint32_t pack_head_offset;
  protocol_pack_desc_t *pack_head;
  send_list_node_t *send_node;

  status = PROTOCOL_SUCCESS;
 8012906:	2300      	movs	r3, #0
 8012908:	637b      	str	r3, [r7, #52]	; 0x34

  if (data_len > PROTOCOL_MAX_DATA_LEN)
 801290a:	68bb      	ldr	r3, [r7, #8]
 801290c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012910:	d908      	bls.n	8012924 <protocol_s_broadcast_add_node+0x2c>
  {
    status = PROTOCOL_ERR_DATA_TOO_LONG;
 8012912:	2301      	movs	r3, #1
 8012914:	637b      	str	r3, [r7, #52]	; 0x34
    PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 8012916:	22e9      	movs	r2, #233	; 0xe9
 8012918:	4943      	ldr	r1, [pc, #268]	; (8012a28 <protocol_s_broadcast_add_node+0x130>)
 801291a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801291c:	f000 fdee 	bl	80134fc <protocol_s_error_info_printf>
    return status;
 8012920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012922:	e07d      	b.n	8012a20 <protocol_s_broadcast_add_node+0x128>
  }

  // Configure sending parameters
  ctx.s_a_r.pack_type = PROTOCOL_PACK_NOR;
 8012924:	7dfb      	ldrb	r3, [r7, #23]
 8012926:	f36f 1345 	bfc	r3, #5, #1
 801292a:	75fb      	strb	r3, [r7, #23]
  ctx.s_a_r.session = 0;
 801292c:	7dfb      	ldrb	r3, [r7, #23]
 801292e:	f36f 0304 	bfc	r3, #0, #5
 8012932:	75fb      	strb	r3, [r7, #23]
  ctx.s_a_r.res = 0;
 8012934:	7dfb      	ldrb	r3, [r7, #23]
 8012936:	f36f 1387 	bfc	r3, #6, #2
 801293a:	75fb      	strb	r3, [r7, #23]
  ctx.reciver = PROTOCOL_BROADCAST_ADDR;
 801293c:	23ff      	movs	r3, #255	; 0xff
 801293e:	75bb      	strb	r3, [r7, #22]
  ctx.version = PROTOCOL_VERSION;
 8012940:	2300      	movs	r3, #0
 8012942:	82bb      	strh	r3, [r7, #20]

  malloc_size = PROTOCOL_PACK_HEAD_TAIL_SIZE + PROTOCOL_SEND_NODE_SIZE +
 8012944:	68bb      	ldr	r3, [r7, #8]
 8012946:	3342      	adds	r3, #66	; 0x42
 8012948:	633b      	str	r3, [r7, #48]	; 0x30
                data_len + PROTOCOL_PACK_CMD_SIZE;

  malloc_zone = protocol_p_malloc(malloc_size);
 801294a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801294c:	f7ff fbee 	bl	801212c <protocol_p_malloc>
 8012950:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (malloc_zone == NULL)
 8012952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012954:	2b00      	cmp	r3, #0
 8012956:	d108      	bne.n	801296a <protocol_s_broadcast_add_node+0x72>
  {
    status = PROTOCOL_ERR_NOT_ENOUGH_MEM;
 8012958:	2302      	movs	r3, #2
 801295a:	637b      	str	r3, [r7, #52]	; 0x34
    PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 801295c:	22fb      	movs	r2, #251	; 0xfb
 801295e:	4932      	ldr	r1, [pc, #200]	; (8012a28 <protocol_s_broadcast_add_node+0x130>)
 8012960:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8012962:	f000 fdcb 	bl	80134fc <protocol_s_error_info_printf>
    return status;
 8012966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012968:	e05a      	b.n	8012a20 <protocol_s_broadcast_add_node+0x128>
  }

  pack_head_offset = PROTOCOL_SEND_NODE_SIZE;
 801296a:	2330      	movs	r3, #48	; 0x30
 801296c:	62bb      	str	r3, [r7, #40]	; 0x28
  pack_head = (protocol_pack_desc_t *)&malloc_zone[pack_head_offset];
 801296e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012972:	4413      	add	r3, r2
 8012974:	627b      	str	r3, [r7, #36]	; 0x24
  send_node = (send_list_node_t *)&malloc_zone[0];
 8012976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012978:	623b      	str	r3, [r7, #32]

  // Fill in the frame data section
  protocol_s_fill_pack(&ctx, p_data, data_len, (uint8_t *)(pack_head), 0, cmd);
 801297a:	f107 0014 	add.w	r0, r7, #20
 801297e:	88fb      	ldrh	r3, [r7, #6]
 8012980:	9301      	str	r3, [sp, #4]
 8012982:	2300      	movs	r3, #0
 8012984:	9300      	str	r3, [sp, #0]
 8012986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012988:	68ba      	ldr	r2, [r7, #8]
 801298a:	68f9      	ldr	r1, [r7, #12]
 801298c:	f000 f850 	bl	8012a30 <protocol_s_fill_pack>

  // Populate send_node
  send_node->session = 0;
 8012990:	6a3b      	ldr	r3, [r7, #32]
 8012992:	2200      	movs	r2, #0
 8012994:	745a      	strb	r2, [r3, #17]
  send_node->p_data = &malloc_zone[pack_head_offset];
 8012996:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801299a:	441a      	add	r2, r3
 801299c:	6a3b      	ldr	r3, [r7, #32]
 801299e:	609a      	str	r2, [r3, #8]
  send_node->len = malloc_size - PROTOCOL_SEND_NODE_SIZE;
 80129a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129a2:	b29b      	uxth	r3, r3
 80129a4:	3b30      	subs	r3, #48	; 0x30
 80129a6:	b29a      	uxth	r2, r3
 80129a8:	6a3b      	ldr	r3, [r7, #32]
 80129aa:	819a      	strh	r2, [r3, #12]
  send_node->rest_cnt = 1;
 80129ac:	6a3b      	ldr	r3, [r7, #32]
 80129ae:	2201      	movs	r2, #1
 80129b0:	75da      	strb	r2, [r3, #23]
  send_node->pre_timestamp = 0;
 80129b2:	6a3b      	ldr	r3, [r7, #32]
 80129b4:	2200      	movs	r2, #0
 80129b6:	61da      	str	r2, [r3, #28]
  send_node->timeout = 0;
 80129b8:	6a3b      	ldr	r3, [r7, #32]
 80129ba:	2200      	movs	r2, #0
 80129bc:	831a      	strh	r2, [r3, #24]
  send_node->is_got_ack = 0;
 80129be:	6a3b      	ldr	r3, [r7, #32]
 80129c0:	2200      	movs	r2, #0
 80129c2:	73da      	strb	r2, [r3, #15]
  send_node->is_first_send = 1;
 80129c4:	6a3b      	ldr	r3, [r7, #32]
 80129c6:	2201      	movs	r2, #1
 80129c8:	f883 2020 	strb.w	r2, [r3, #32]
  send_node->address = PROTOCOL_BROADCAST_ADDR;
 80129cc:	6a3b      	ldr	r3, [r7, #32]
 80129ce:	22ff      	movs	r2, #255	; 0xff
 80129d0:	749a      	strb	r2, [r3, #18]
  send_node->pack_type = PROTOCOL_PACK_NOR;
 80129d2:	6a3b      	ldr	r3, [r7, #32]
 80129d4:	2200      	movs	r2, #0
 80129d6:	759a      	strb	r2, [r3, #22]
  send_node->is_ready_realse = 0;
 80129d8:	6a3b      	ldr	r3, [r7, #32]
 80129da:	2200      	movs	r2, #0
 80129dc:	741a      	strb	r2, [r3, #16]
  send_node->cmd = cmd;
 80129de:	6a3b      	ldr	r3, [r7, #32]
 80129e0:	88fa      	ldrh	r2, [r7, #6]
 80129e2:	829a      	strh	r2, [r3, #20]
  send_node->forward_src_obj = NULL;
 80129e4:	6a3b      	ldr	r3, [r7, #32]
 80129e6:	2200      	movs	r2, #0
 80129e8:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80129ea:	f3ef 8310 	mrs	r3, PRIMASK
 80129ee:	61bb      	str	r3, [r7, #24]
  return(result);
 80129f0:	69bb      	ldr	r3, [r7, #24]

  // Add to sending list
  MUTEX_LOCK(boardcast_object.mutex_lock);
 80129f2:	4a0e      	ldr	r2, [pc, #56]	; (8012a2c <protocol_s_broadcast_add_node+0x134>)
 80129f4:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80129f6:	b672      	cpsid	i
}
 80129f8:	bf00      	nop

  list_add(&(send_node->send_list), &(boardcast_object.send_list_header));
 80129fa:	6a3b      	ldr	r3, [r7, #32]
 80129fc:	490b      	ldr	r1, [pc, #44]	; (8012a2c <protocol_s_broadcast_add_node+0x134>)
 80129fe:	4618      	mov	r0, r3
 8012a00:	f7ff fdb2 	bl	8012568 <list_add>
  boardcast_object.send_node_num++;
 8012a04:	4b09      	ldr	r3, [pc, #36]	; (8012a2c <protocol_s_broadcast_add_node+0x134>)
 8012a06:	7a1b      	ldrb	r3, [r3, #8]
 8012a08:	3301      	adds	r3, #1
 8012a0a:	b2da      	uxtb	r2, r3
 8012a0c:	4b07      	ldr	r3, [pc, #28]	; (8012a2c <protocol_s_broadcast_add_node+0x134>)
 8012a0e:	721a      	strb	r2, [r3, #8]

  MUTEX_UNLOCK(boardcast_object.mutex_lock);
 8012a10:	4b06      	ldr	r3, [pc, #24]	; (8012a2c <protocol_s_broadcast_add_node+0x134>)
 8012a12:	68db      	ldr	r3, [r3, #12]
 8012a14:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012a16:	69fb      	ldr	r3, [r7, #28]
 8012a18:	f383 8810 	msr	PRIMASK, r3
}
 8012a1c:	bf00      	nop

  PROTOCOL_SEND_DBG_PRINTF("Send broadcast pack, Cmd:0x%04X, Normal pack.", cmd);

  return status;
 8012a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012a20:	4618      	mov	r0, r3
 8012a22:	3738      	adds	r7, #56	; 0x38
 8012a24:	46bd      	mov	sp, r7
 8012a26:	bd80      	pop	{r7, pc}
 8012a28:	08015b58 	.word	0x08015b58
 8012a2c:	200074c0 	.word	0x200074c0

08012a30 <protocol_s_fill_pack>:

// frame padding
uint32_t protocol_s_fill_pack(send_ctx_t *ctx, uint8_t *p_data,
                              uint32_t data_len, uint8_t *pack_zone, uint16_t seq, uint16_t cmd)
{
 8012a30:	b580      	push	{r7, lr}
 8012a32:	b086      	sub	sp, #24
 8012a34:	af00      	add	r7, sp, #0
 8012a36:	60f8      	str	r0, [r7, #12]
 8012a38:	60b9      	str	r1, [r7, #8]
 8012a3a:	607a      	str	r2, [r7, #4]
 8012a3c:	603b      	str	r3, [r7, #0]
  uint32_t status = 0;
 8012a3e:	2300      	movs	r3, #0
 8012a40:	617b      	str	r3, [r7, #20]
  protocol_pack_desc_t *p_pack_head;

  p_pack_head = (protocol_pack_desc_t *)pack_zone;
 8012a42:	683b      	ldr	r3, [r7, #0]
 8012a44:	613b      	str	r3, [r7, #16]

  /* get local module */

  p_pack_head->sof = PROTOCOL_HEADER;
 8012a46:	693b      	ldr	r3, [r7, #16]
 8012a48:	22aa      	movs	r2, #170	; 0xaa
 8012a4a:	701a      	strb	r2, [r3, #0]
  p_pack_head->version = ctx->version;
 8012a4c:	68fb      	ldr	r3, [r7, #12]
 8012a4e:	881b      	ldrh	r3, [r3, #0]
 8012a50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012a54:	b2d9      	uxtb	r1, r3
 8012a56:	693a      	ldr	r2, [r7, #16]
 8012a58:	7893      	ldrb	r3, [r2, #2]
 8012a5a:	f361 0387 	bfi	r3, r1, #2, #6
 8012a5e:	7093      	strb	r3, [r2, #2]
  p_pack_head->sender = protocol_local_info.address;
 8012a60:	4b41      	ldr	r3, [pc, #260]	; (8012b68 <protocol_s_fill_pack+0x138>)
 8012a62:	781a      	ldrb	r2, [r3, #0]
 8012a64:	693b      	ldr	r3, [r7, #16]
 8012a66:	711a      	strb	r2, [r3, #4]
  p_pack_head->reciver = ctx->reciver;
 8012a68:	68fb      	ldr	r3, [r7, #12]
 8012a6a:	789a      	ldrb	r2, [r3, #2]
 8012a6c:	693b      	ldr	r3, [r7, #16]
 8012a6e:	715a      	strb	r2, [r3, #5]
  p_pack_head->S_A_R_c = ctx->S_A_R_c;
 8012a70:	68fb      	ldr	r3, [r7, #12]
 8012a72:	78da      	ldrb	r2, [r3, #3]
 8012a74:	693b      	ldr	r3, [r7, #16]
 8012a76:	70da      	strb	r2, [r3, #3]
  p_pack_head->seq_num = seq;
 8012a78:	693b      	ldr	r3, [r7, #16]
 8012a7a:	8c3a      	ldrh	r2, [r7, #32]
 8012a7c:	811a      	strh	r2, [r3, #8]
  p_pack_head->ver_data_len = p_pack_head->ver_data_len;
 8012a7e:	693b      	ldr	r3, [r7, #16]
 8012a80:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8012a84:	b29a      	uxth	r2, r3
 8012a86:	693b      	ldr	r3, [r7, #16]
 8012a88:	f8a3 2001 	strh.w	r2, [r3, #1]
  p_pack_head->res1 = 0;
 8012a8c:	693b      	ldr	r3, [r7, #16]
 8012a8e:	2200      	movs	r2, #0
 8012a90:	719a      	strb	r2, [r3, #6]
 8012a92:	2200      	movs	r2, #0
 8012a94:	71da      	strb	r2, [r3, #7]

  /* cpy data */
  if (ctx->s_a_r.pack_type == PROTOCOL_PACK_ACK)
 8012a96:	68fb      	ldr	r3, [r7, #12]
 8012a98:	78db      	ldrb	r3, [r3, #3]
 8012a9a:	f003 0320 	and.w	r3, r3, #32
 8012a9e:	b2db      	uxtb	r3, r3
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	d020      	beq.n	8012ae6 <protocol_s_fill_pack+0xb6>
  {
    p_pack_head->data_len = data_len + PROTOCOL_PACK_HEAD_TAIL_SIZE;
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	b29b      	uxth	r3, r3
 8012aa8:	3310      	adds	r3, #16
 8012aaa:	b29b      	uxth	r3, r3
 8012aac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012ab0:	b29a      	uxth	r2, r3
 8012ab2:	693b      	ldr	r3, [r7, #16]
 8012ab4:	b2d1      	uxtb	r1, r2
 8012ab6:	2000      	movs	r0, #0
 8012ab8:	4301      	orrs	r1, r0
 8012aba:	7059      	strb	r1, [r3, #1]
 8012abc:	0a12      	lsrs	r2, r2, #8
 8012abe:	b292      	uxth	r2, r2
 8012ac0:	f002 0203 	and.w	r2, r2, #3
 8012ac4:	f002 0003 	and.w	r0, r2, #3
 8012ac8:	789a      	ldrb	r2, [r3, #2]
 8012aca:	f022 0203 	bic.w	r2, r2, #3
 8012ace:	4611      	mov	r1, r2
 8012ad0:	4602      	mov	r2, r0
 8012ad2:	430a      	orrs	r2, r1
 8012ad4:	709a      	strb	r2, [r3, #2]
    memcpy(pack_zone + PROTOCOL_PACK_HEAD_SIZE, p_data, data_len);
 8012ad6:	683b      	ldr	r3, [r7, #0]
 8012ad8:	330c      	adds	r3, #12
 8012ada:	687a      	ldr	r2, [r7, #4]
 8012adc:	68b9      	ldr	r1, [r7, #8]
 8012ade:	4618      	mov	r0, r3
 8012ae0:	f001 fe40 	bl	8014764 <memcpy>
 8012ae4:	e023      	b.n	8012b2e <protocol_s_fill_pack+0xfe>
  }
  else
  {
    p_pack_head->data_len = data_len + PROTOCOL_PACK_HEAD_TAIL_SIZE + PROTOCOL_PACK_CMD_SIZE;
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	b29b      	uxth	r3, r3
 8012aea:	3312      	adds	r3, #18
 8012aec:	b29b      	uxth	r3, r3
 8012aee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012af2:	b29a      	uxth	r2, r3
 8012af4:	693b      	ldr	r3, [r7, #16]
 8012af6:	b2d1      	uxtb	r1, r2
 8012af8:	2000      	movs	r0, #0
 8012afa:	4301      	orrs	r1, r0
 8012afc:	7059      	strb	r1, [r3, #1]
 8012afe:	0a12      	lsrs	r2, r2, #8
 8012b00:	b292      	uxth	r2, r2
 8012b02:	f002 0203 	and.w	r2, r2, #3
 8012b06:	f002 0003 	and.w	r0, r2, #3
 8012b0a:	789a      	ldrb	r2, [r3, #2]
 8012b0c:	f022 0203 	bic.w	r2, r2, #3
 8012b10:	4611      	mov	r1, r2
 8012b12:	4602      	mov	r2, r0
 8012b14:	430a      	orrs	r2, r1
 8012b16:	709a      	strb	r2, [r3, #2]
    *((uint16_t *)(pack_zone + PROTOCOL_PACK_HEAD_SIZE)) = cmd;
 8012b18:	683b      	ldr	r3, [r7, #0]
 8012b1a:	330c      	adds	r3, #12
 8012b1c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012b1e:	801a      	strh	r2, [r3, #0]
    memcpy(pack_zone + PROTOCOL_PACK_HEAD_SIZE + PROTOCOL_PACK_CMD_SIZE, p_data, data_len);
 8012b20:	683b      	ldr	r3, [r7, #0]
 8012b22:	330e      	adds	r3, #14
 8012b24:	687a      	ldr	r2, [r7, #4]
 8012b26:	68b9      	ldr	r1, [r7, #8]
 8012b28:	4618      	mov	r0, r3
 8012b2a:	f001 fe1b 	bl	8014764 <memcpy>
  }

  /* crc */
  append_crc16(pack_zone, 12);
 8012b2e:	210c      	movs	r1, #12
 8012b30:	6838      	ldr	r0, [r7, #0]
 8012b32:	f001 fb6b 	bl	801420c <append_crc16>

  if (ctx->s_a_r.pack_type == PROTOCOL_PACK_ACK)
 8012b36:	68fb      	ldr	r3, [r7, #12]
 8012b38:	78db      	ldrb	r3, [r3, #3]
 8012b3a:	f003 0320 	and.w	r3, r3, #32
 8012b3e:	b2db      	uxtb	r3, r3
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	d006      	beq.n	8012b52 <protocol_s_fill_pack+0x122>
  {
    append_crc32(pack_zone, data_len + PROTOCOL_PACK_HEAD_TAIL_SIZE);
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	3310      	adds	r3, #16
 8012b48:	4619      	mov	r1, r3
 8012b4a:	6838      	ldr	r0, [r7, #0]
 8012b4c:	f001 fc00 	bl	8014350 <append_crc32>
 8012b50:	e005      	b.n	8012b5e <protocol_s_fill_pack+0x12e>
  }
  else
  {
    append_crc32(pack_zone, data_len + PROTOCOL_PACK_HEAD_TAIL_SIZE + PROTOCOL_PACK_CMD_SIZE);
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	3312      	adds	r3, #18
 8012b56:	4619      	mov	r1, r3
 8012b58:	6838      	ldr	r0, [r7, #0]
 8012b5a:	f001 fbf9 	bl	8014350 <append_crc32>
  }

  return status;
 8012b5e:	697b      	ldr	r3, [r7, #20]
}
 8012b60:	4618      	mov	r0, r3
 8012b62:	3718      	adds	r7, #24
 8012b64:	46bd      	mov	sp, r7
 8012b66:	bd80      	pop	{r7, pc}
 8012b68:	200074d0 	.word	0x200074d0

08012b6c <protocol_s_interface_send_data>:

// Send data through interface
uint32_t protocol_s_interface_send_data(send_list_node_t *cur_send_node, struct perph_interface *obj)
{
 8012b6c:	b580      	push	{r7, lr}
 8012b6e:	b082      	sub	sp, #8
 8012b70:	af00      	add	r7, sp, #0
 8012b72:	6078      	str	r0, [r7, #4]
 8012b74:	6039      	str	r1, [r7, #0]

#if (PROTOCOL_AUTO_LOOKBACK == PROTOCOL_ENABLE)

  if (cur_send_node->address != protocol_local_info.address)
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	7c9a      	ldrb	r2, [r3, #18]
 8012b7a:	4b0d      	ldr	r3, [pc, #52]	; (8012bb0 <protocol_s_interface_send_data+0x44>)
 8012b7c:	781b      	ldrb	r3, [r3, #0]
 8012b7e:	429a      	cmp	r2, r3
 8012b80:	d008      	beq.n	8012b94 <protocol_s_interface_send_data+0x28>
  {
    // The sending address is different from the local address. Outgoing
    protocol_interface_send_data(obj, cur_send_node->p_data, cur_send_node->len);
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	6899      	ldr	r1, [r3, #8]
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	899b      	ldrh	r3, [r3, #12]
 8012b8a:	461a      	mov	r2, r3
 8012b8c:	6838      	ldr	r0, [r7, #0]
 8012b8e:	f7ff fbc1 	bl	8012314 <protocol_interface_send_data>
 8012b92:	e007      	b.n	8012ba4 <protocol_s_interface_send_data+0x38>
  }
  else
  {
    // The sending address is the same as the local address and loops back directly internally.

    protocol_rcv_data(cur_send_node->p_data, cur_send_node->len, &protocol_local_info.interface[0]);
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	6898      	ldr	r0, [r3, #8]
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	899b      	ldrh	r3, [r3, #12]
 8012b9c:	4a05      	ldr	r2, [pc, #20]	; (8012bb4 <protocol_s_interface_send_data+0x48>)
 8012b9e:	4619      	mov	r1, r3
 8012ba0:	f7ff fa66 	bl	8012070 <protocol_rcv_data>
                           cur_send_node->len,
                           obj->interface);
  }
#endif

  return PROTOCOL_SUCCESS;
 8012ba4:	2300      	movs	r3, #0
}
 8012ba6:	4618      	mov	r0, r3
 8012ba8:	3708      	adds	r7, #8
 8012baa:	46bd      	mov	sp, r7
 8012bac:	bd80      	pop	{r7, pc}
 8012bae:	bf00      	nop
 8012bb0:	200074d0 	.word	0x200074d0
 8012bb4:	20007a88 	.word	0x20007a88

08012bb8 <protocol_s_interface_normal_send_flush>:

// Clear sending list
uint32_t protocol_s_interface_normal_send_flush(struct perph_interface *obj)
{
 8012bb8:	b580      	push	{r7, lr}
 8012bba:	b08e      	sub	sp, #56	; 0x38
 8012bbc:	af00      	add	r7, sp, #0
 8012bbe:	6078      	str	r0, [r7, #4]
  list_t *cur_node;
  list_t *store_list;
  send_list_node_t *cur_send_node;
  uint32_t timeout;

  head_node = &(obj->send.normal_list_header);
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	3348      	adds	r3, #72	; 0x48
 8012bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  list_for_each_prev_safe(cur_node, store_list, head_node)
 8012bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bc8:	685b      	ldr	r3, [r3, #4]
 8012bca:	637b      	str	r3, [r7, #52]	; 0x34
 8012bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012bce:	685b      	ldr	r3, [r3, #4]
 8012bd0:	633b      	str	r3, [r7, #48]	; 0x30
 8012bd2:	e0b2      	b.n	8012d3a <protocol_s_interface_normal_send_flush+0x182>
  {

    cur_send_node = (send_list_node_t *)cur_node;
 8012bd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012bd6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8012bd8:	f3ef 8310 	mrs	r3, PRIMASK
 8012bdc:	623b      	str	r3, [r7, #32]
  return(result);
 8012bde:	6a3a      	ldr	r2, [r7, #32]

    MUTEX_LOCK(obj->send.mutex_lock);
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	65da      	str	r2, [r3, #92]	; 0x5c
  __ASM volatile ("cpsid i" : : : "memory");
 8012be4:	b672      	cpsid	i
}
 8012be6:	bf00      	nop
    // Get ACK, delete
    if (cur_send_node->is_got_ack)
 8012be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bea:	7bdb      	ldrb	r3, [r3, #15]
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	d01b      	beq.n	8012c28 <protocol_s_interface_normal_send_flush+0x70>
    {
      list_del(cur_node);
 8012bf0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8012bf2:	f7ff fcda 	bl	80125aa <list_del>
      protocol_p_free(cur_send_node);
 8012bf6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012bf8:	f7ff faa4 	bl	8012144 <protocol_p_free>
      obj->send.normal_node_num--;
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 8012c02:	3b01      	subs	r3, #1
 8012c04:	b2da      	uxtb	r2, r3
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a

      protocol_release_session(obj, cur_send_node->session);
 8012c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c0e:	7c5b      	ldrb	r3, [r3, #17]
 8012c10:	4619      	mov	r1, r3
 8012c12:	6878      	ldr	r0, [r7, #4]
 8012c14:	f7ff fcff 	bl	8012616 <protocol_release_session>

      MUTEX_UNLOCK(obj->send.mutex_lock);
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012c1c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012c1e:	69fb      	ldr	r3, [r7, #28]
 8012c20:	f383 8810 	msr	PRIMASK, r3
}
 8012c24:	bf00      	nop
      continue;
 8012c26:	e083      	b.n	8012d30 <protocol_s_interface_normal_send_flush+0x178>
    }

    // Released after exceeding the number of retransmissions
    if (cur_send_node->is_ready_realse)
 8012c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c2a:	7c1b      	ldrb	r3, [r3, #16]
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	d025      	beq.n	8012c7c <protocol_s_interface_normal_send_flush+0xc4>
    {
      list_del(cur_node);
 8012c30:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8012c32:	f7ff fcba 	bl	80125aa <list_del>
      obj->send.normal_node_num--;
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 8012c3c:	3b01      	subs	r3, #1
 8012c3e:	b2da      	uxtb	r2, r3
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a

      if (cur_send_node->no_ack_callback != NULL)
 8012c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	d005      	beq.n	8012c5a <protocol_s_interface_normal_send_flush+0xa2>
      {
        cur_send_node->no_ack_callback(cur_send_node->cmd);
 8012c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012c54:	8a92      	ldrh	r2, [r2, #20]
 8012c56:	4610      	mov	r0, r2
 8012c58:	4798      	blx	r3
      }

      protocol_release_session(obj, cur_send_node->session);
 8012c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c5c:	7c5b      	ldrb	r3, [r3, #17]
 8012c5e:	4619      	mov	r1, r3
 8012c60:	6878      	ldr	r0, [r7, #4]
 8012c62:	f7ff fcd8 	bl	8012616 <protocol_release_session>

      protocol_p_free(cur_send_node);
 8012c66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012c68:	f7ff fa6c 	bl	8012144 <protocol_p_free>

      MUTEX_UNLOCK(obj->send.mutex_lock);
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012c70:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012c72:	69bb      	ldr	r3, [r7, #24]
 8012c74:	f383 8810 	msr	PRIMASK, r3
}
 8012c78:	bf00      	nop
      continue;
 8012c7a:	e059      	b.n	8012d30 <protocol_s_interface_normal_send_flush+0x178>
    }
    else
    {
      MUTEX_UNLOCK(obj->send.mutex_lock);
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012c80:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012c82:	697b      	ldr	r3, [r7, #20]
 8012c84:	f383 8810 	msr	PRIMASK, r3
}
 8012c88:	bf00      	nop
    }

    timeout = protocol_p_get_time() - cur_send_node->pre_timestamp;
 8012c8a:	f7ff fa66 	bl	801215a <protocol_p_get_time>
 8012c8e:	4602      	mov	r2, r0
 8012c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c92:	69db      	ldr	r3, [r3, #28]
 8012c94:	1ad3      	subs	r3, r2, r3
 8012c96:	627b      	str	r3, [r7, #36]	; 0x24

    // Retransmit after timeout or send for the first time
    if ((timeout > cur_send_node->timeout || cur_send_node->is_first_send) &&
 8012c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c9a:	8b1b      	ldrh	r3, [r3, #24]
 8012c9c:	461a      	mov	r2, r3
 8012c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ca0:	4293      	cmp	r3, r2
 8012ca2:	d804      	bhi.n	8012cae <protocol_s_interface_normal_send_flush+0xf6>
 8012ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ca6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	d040      	beq.n	8012d30 <protocol_s_interface_normal_send_flush+0x178>
        cur_send_node->rest_cnt >= 1)
 8012cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cb0:	7ddb      	ldrb	r3, [r3, #23]
    if ((timeout > cur_send_node->timeout || cur_send_node->is_first_send) &&
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	d03c      	beq.n	8012d30 <protocol_s_interface_normal_send_flush+0x178>
    {
      cur_send_node->is_first_send = 0;
 8012cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cb8:	2200      	movs	r2, #0
 8012cba:	f883 2020 	strb.w	r2, [r3, #32]

      cur_send_node->rest_cnt--;
 8012cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cc0:	7ddb      	ldrb	r3, [r3, #23]
 8012cc2:	3b01      	subs	r3, #1
 8012cc4:	b2da      	uxtb	r2, r3
 8012cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cc8:	75da      	strb	r2, [r3, #23]

      // send data
      protocol_s_interface_send_data(cur_send_node, obj);
 8012cca:	6879      	ldr	r1, [r7, #4]
 8012ccc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012cce:	f7ff ff4d 	bl	8012b6c <protocol_s_interface_send_data>

      if (cur_send_node->session == 0)
 8012cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cd4:	7c5b      	ldrb	r3, [r3, #17]
 8012cd6:	2b00      	cmp	r3, #0
 8012cd8:	d11d      	bne.n	8012d16 <protocol_s_interface_normal_send_flush+0x15e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8012cda:	f3ef 8310 	mrs	r3, PRIMASK
 8012cde:	60fb      	str	r3, [r7, #12]
  return(result);
 8012ce0:	68fa      	ldr	r2, [r7, #12]
      {
        // session is 0, no retransmission or ACK reply is required
        MUTEX_LOCK(obj->send.mutex_lock);
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	65da      	str	r2, [r3, #92]	; 0x5c
  __ASM volatile ("cpsid i" : : : "memory");
 8012ce6:	b672      	cpsid	i
}
 8012ce8:	bf00      	nop
        list_del(cur_node);
 8012cea:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8012cec:	f7ff fc5d 	bl	80125aa <list_del>
        obj->send.normal_node_num--;
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 8012cf6:	3b01      	subs	r3, #1
 8012cf8:	b2da      	uxtb	r2, r3
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
        protocol_p_free(cur_send_node);
 8012d00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012d02:	f7ff fa1f 	bl	8012144 <protocol_p_free>
        MUTEX_UNLOCK(obj->send.mutex_lock);
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012d0a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012d0c:	693b      	ldr	r3, [r7, #16]
 8012d0e:	f383 8810 	msr	PRIMASK, r3
}
 8012d12:	bf00      	nop
        continue;
 8012d14:	e00c      	b.n	8012d30 <protocol_s_interface_normal_send_flush+0x178>
      }
      else
      {
        // The session is not 0 and requires retransmission and ACK confirmation.
        if (cur_send_node->rest_cnt == 0)
 8012d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d18:	7ddb      	ldrb	r3, [r3, #23]
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	d103      	bne.n	8012d26 <protocol_s_interface_normal_send_flush+0x16e>
        {
          // The number of sending times has been exhausted
          cur_send_node->is_ready_realse = 1;
 8012d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d20:	2201      	movs	r2, #1
 8012d22:	741a      	strb	r2, [r3, #16]
 8012d24:	e004      	b.n	8012d30 <protocol_s_interface_normal_send_flush+0x178>
        }
        else
        {
          cur_send_node->pre_timestamp = protocol_p_get_time();
 8012d26:	f7ff fa18 	bl	801215a <protocol_p_get_time>
 8012d2a:	4602      	mov	r2, r0
 8012d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d2e:	61da      	str	r2, [r3, #28]
  list_for_each_prev_safe(cur_node, store_list, head_node)
 8012d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d32:	637b      	str	r3, [r7, #52]	; 0x34
 8012d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d36:	685b      	ldr	r3, [r3, #4]
 8012d38:	633b      	str	r3, [r7, #48]	; 0x30
 8012d3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d3e:	429a      	cmp	r2, r3
 8012d40:	f47f af48 	bne.w	8012bd4 <protocol_s_interface_normal_send_flush+0x1c>
        }
      }
    }
  }

  return 0;
 8012d44:	2300      	movs	r3, #0
}
 8012d46:	4618      	mov	r0, r3
 8012d48:	3738      	adds	r7, #56	; 0x38
 8012d4a:	46bd      	mov	sp, r7
 8012d4c:	bd80      	pop	{r7, pc}

08012d4e <protocol_s_interface_ack_send_flush>:

// Clear the ACK frame sending list
uint32_t protocol_s_interface_ack_send_flush(struct perph_interface *obj)
{
 8012d4e:	b580      	push	{r7, lr}
 8012d50:	b088      	sub	sp, #32
 8012d52:	af00      	add	r7, sp, #0
 8012d54:	6078      	str	r0, [r7, #4]
  list_t *head_node;
  list_t *cur_node;
  list_t *store_list;
  send_list_node_t *cur_send_node;

  head_node = &(obj->send.ack_list_header);
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	3350      	adds	r3, #80	; 0x50
 8012d5a:	617b      	str	r3, [r7, #20]
  list_for_each_prev_safe(cur_node, store_list, head_node)
 8012d5c:	697b      	ldr	r3, [r7, #20]
 8012d5e:	685b      	ldr	r3, [r3, #4]
 8012d60:	61fb      	str	r3, [r7, #28]
 8012d62:	69fb      	ldr	r3, [r7, #28]
 8012d64:	685b      	ldr	r3, [r3, #4]
 8012d66:	61bb      	str	r3, [r7, #24]
 8012d68:	e027      	b.n	8012dba <protocol_s_interface_ack_send_flush+0x6c>
  {

    cur_send_node = (send_list_node_t *)cur_node;
 8012d6a:	69fb      	ldr	r3, [r7, #28]
 8012d6c:	613b      	str	r3, [r7, #16]

    protocol_s_interface_send_data(cur_send_node, obj);
 8012d6e:	6879      	ldr	r1, [r7, #4]
 8012d70:	6938      	ldr	r0, [r7, #16]
 8012d72:	f7ff fefb 	bl	8012b6c <protocol_s_interface_send_data>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8012d76:	f3ef 8310 	mrs	r3, PRIMASK
 8012d7a:	60bb      	str	r3, [r7, #8]
  return(result);
 8012d7c:	68ba      	ldr	r2, [r7, #8]

    //The packet is of ACK type and does not require retransmission or confirmation.
    MUTEX_LOCK(obj->send.mutex_lock);
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	65da      	str	r2, [r3, #92]	; 0x5c
  __ASM volatile ("cpsid i" : : : "memory");
 8012d82:	b672      	cpsid	i
}
 8012d84:	bf00      	nop
    list_del(cur_node);
 8012d86:	69f8      	ldr	r0, [r7, #28]
 8012d88:	f7ff fc0f 	bl	80125aa <list_del>
    obj->send.ack_node_num--;
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8012d92:	3b01      	subs	r3, #1
 8012d94:	b2da      	uxtb	r2, r3
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
    protocol_p_free(cur_send_node);
 8012d9c:	6938      	ldr	r0, [r7, #16]
 8012d9e:	f7ff f9d1 	bl	8012144 <protocol_p_free>
    MUTEX_UNLOCK(obj->send.mutex_lock);
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012da6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012da8:	68fb      	ldr	r3, [r7, #12]
 8012daa:	f383 8810 	msr	PRIMASK, r3
}
 8012dae:	bf00      	nop
  list_for_each_prev_safe(cur_node, store_list, head_node)
 8012db0:	69bb      	ldr	r3, [r7, #24]
 8012db2:	61fb      	str	r3, [r7, #28]
 8012db4:	69fb      	ldr	r3, [r7, #28]
 8012db6:	685b      	ldr	r3, [r3, #4]
 8012db8:	61bb      	str	r3, [r7, #24]
 8012dba:	69fa      	ldr	r2, [r7, #28]
 8012dbc:	697b      	ldr	r3, [r7, #20]
 8012dbe:	429a      	cmp	r2, r3
 8012dc0:	d1d3      	bne.n	8012d6a <protocol_s_interface_ack_send_flush+0x1c>
  }

  return 0;
 8012dc2:	2300      	movs	r3, #0
}
 8012dc4:	4618      	mov	r0, r3
 8012dc6:	3720      	adds	r7, #32
 8012dc8:	46bd      	mov	sp, r7
 8012dca:	bd80      	pop	{r7, pc}

08012dcc <protocol_s_broadcast_send_flush>:

//Clear the broadcast packet sending list
uint32_t protocol_s_broadcast_send_flush(void)
{
 8012dcc:	b580      	push	{r7, lr}
 8012dce:	b088      	sub	sp, #32
 8012dd0:	af00      	add	r7, sp, #0
  list_t *head_node;
  list_t *cur_node;
  list_t *store_list;
  send_list_node_t *cur_send_node;

  head_node = &(boardcast_object.send_list_header);
 8012dd2:	4b34      	ldr	r3, [pc, #208]	; (8012ea4 <protocol_s_broadcast_send_flush+0xd8>)
 8012dd4:	613b      	str	r3, [r7, #16]
  list_for_each_prev_safe(cur_node, store_list, head_node)
 8012dd6:	693b      	ldr	r3, [r7, #16]
 8012dd8:	685b      	ldr	r3, [r3, #4]
 8012dda:	61fb      	str	r3, [r7, #28]
 8012ddc:	69fb      	ldr	r3, [r7, #28]
 8012dde:	685b      	ldr	r3, [r3, #4]
 8012de0:	61bb      	str	r3, [r7, #24]
 8012de2:	e055      	b.n	8012e90 <protocol_s_broadcast_send_flush+0xc4>
  {
    cur_send_node = (send_list_node_t *)cur_node;
 8012de4:	69fb      	ldr	r3, [r7, #28]
 8012de6:	60fb      	str	r3, [r7, #12]

    for (uint8_t i = 0; i < PROTOCOL_INTERFACE_MAX; i++)
 8012de8:	2300      	movs	r3, #0
 8012dea:	75fb      	strb	r3, [r7, #23]
 8012dec:	e02d      	b.n	8012e4a <protocol_s_broadcast_send_flush+0x7e>
    {
      if (cur_send_node->forward_src_obj == protocol_local_info.interface + i)
 8012dee:	68fb      	ldr	r3, [r7, #12]
 8012df0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012df2:	7dfb      	ldrb	r3, [r7, #23]
 8012df4:	2194      	movs	r1, #148	; 0x94
 8012df6:	fb01 f303 	mul.w	r3, r1, r3
 8012dfa:	492b      	ldr	r1, [pc, #172]	; (8012ea8 <protocol_s_broadcast_send_flush+0xdc>)
 8012dfc:	440b      	add	r3, r1
 8012dfe:	429a      	cmp	r2, r3
 8012e00:	d01b      	beq.n	8012e3a <protocol_s_broadcast_send_flush+0x6e>
        continue;
      if (!cur_send_node->forward_src_obj->is_valid)
 8012e02:	68fb      	ldr	r3, [r7, #12]
 8012e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e06:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d017      	beq.n	8012e3e <protocol_s_broadcast_send_flush+0x72>
        continue;
      if (!protocol_local_info.interface[i].broadcast_output_enable)
 8012e0e:	7dfb      	ldrb	r3, [r7, #23]
 8012e10:	4a26      	ldr	r2, [pc, #152]	; (8012eac <protocol_s_broadcast_send_flush+0xe0>)
 8012e12:	2194      	movs	r1, #148	; 0x94
 8012e14:	fb01 f303 	mul.w	r3, r1, r3
 8012e18:	4413      	add	r3, r2
 8012e1a:	f203 631a 	addw	r3, r3, #1562	; 0x61a
 8012e1e:	781b      	ldrb	r3, [r3, #0]
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	d00e      	beq.n	8012e42 <protocol_s_broadcast_send_flush+0x76>
        continue;

      protocol_s_interface_send_data(cur_send_node, protocol_local_info.interface + i);
 8012e24:	7dfb      	ldrb	r3, [r7, #23]
 8012e26:	2294      	movs	r2, #148	; 0x94
 8012e28:	fb02 f303 	mul.w	r3, r2, r3
 8012e2c:	4a1e      	ldr	r2, [pc, #120]	; (8012ea8 <protocol_s_broadcast_send_flush+0xdc>)
 8012e2e:	4413      	add	r3, r2
 8012e30:	4619      	mov	r1, r3
 8012e32:	68f8      	ldr	r0, [r7, #12]
 8012e34:	f7ff fe9a 	bl	8012b6c <protocol_s_interface_send_data>
 8012e38:	e004      	b.n	8012e44 <protocol_s_broadcast_send_flush+0x78>
        continue;
 8012e3a:	bf00      	nop
 8012e3c:	e002      	b.n	8012e44 <protocol_s_broadcast_send_flush+0x78>
        continue;
 8012e3e:	bf00      	nop
 8012e40:	e000      	b.n	8012e44 <protocol_s_broadcast_send_flush+0x78>
        continue;
 8012e42:	bf00      	nop
    for (uint8_t i = 0; i < PROTOCOL_INTERFACE_MAX; i++)
 8012e44:	7dfb      	ldrb	r3, [r7, #23]
 8012e46:	3301      	adds	r3, #1
 8012e48:	75fb      	strb	r3, [r7, #23]
 8012e4a:	7dfb      	ldrb	r3, [r7, #23]
 8012e4c:	2b04      	cmp	r3, #4
 8012e4e:	d9ce      	bls.n	8012dee <protocol_s_broadcast_send_flush+0x22>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8012e50:	f3ef 8310 	mrs	r3, PRIMASK
 8012e54:	607b      	str	r3, [r7, #4]
  return(result);
 8012e56:	687b      	ldr	r3, [r7, #4]
    }

    MUTEX_LOCK(boardcast_object.mutex_lock);
 8012e58:	4a12      	ldr	r2, [pc, #72]	; (8012ea4 <protocol_s_broadcast_send_flush+0xd8>)
 8012e5a:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8012e5c:	b672      	cpsid	i
}
 8012e5e:	bf00      	nop
    list_del(cur_node);
 8012e60:	69f8      	ldr	r0, [r7, #28]
 8012e62:	f7ff fba2 	bl	80125aa <list_del>
    boardcast_object.send_node_num--;
 8012e66:	4b0f      	ldr	r3, [pc, #60]	; (8012ea4 <protocol_s_broadcast_send_flush+0xd8>)
 8012e68:	7a1b      	ldrb	r3, [r3, #8]
 8012e6a:	3b01      	subs	r3, #1
 8012e6c:	b2da      	uxtb	r2, r3
 8012e6e:	4b0d      	ldr	r3, [pc, #52]	; (8012ea4 <protocol_s_broadcast_send_flush+0xd8>)
 8012e70:	721a      	strb	r2, [r3, #8]
    protocol_p_free(cur_send_node);
 8012e72:	68f8      	ldr	r0, [r7, #12]
 8012e74:	f7ff f966 	bl	8012144 <protocol_p_free>
    MUTEX_UNLOCK(boardcast_object.mutex_lock);
 8012e78:	4b0a      	ldr	r3, [pc, #40]	; (8012ea4 <protocol_s_broadcast_send_flush+0xd8>)
 8012e7a:	68db      	ldr	r3, [r3, #12]
 8012e7c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012e7e:	68bb      	ldr	r3, [r7, #8]
 8012e80:	f383 8810 	msr	PRIMASK, r3
}
 8012e84:	bf00      	nop
  list_for_each_prev_safe(cur_node, store_list, head_node)
 8012e86:	69bb      	ldr	r3, [r7, #24]
 8012e88:	61fb      	str	r3, [r7, #28]
 8012e8a:	69fb      	ldr	r3, [r7, #28]
 8012e8c:	685b      	ldr	r3, [r3, #4]
 8012e8e:	61bb      	str	r3, [r7, #24]
 8012e90:	69fa      	ldr	r2, [r7, #28]
 8012e92:	693b      	ldr	r3, [r7, #16]
 8012e94:	429a      	cmp	r2, r3
 8012e96:	d1a5      	bne.n	8012de4 <protocol_s_broadcast_send_flush+0x18>
  }

  return 0;
 8012e98:	2300      	movs	r3, #0
}
 8012e9a:	4618      	mov	r0, r3
 8012e9c:	3720      	adds	r7, #32
 8012e9e:	46bd      	mov	sp, r7
 8012ea0:	bd80      	pop	{r7, pc}
 8012ea2:	bf00      	nop
 8012ea4:	200074c0 	.word	0x200074c0
 8012ea8:	20007a88 	.word	0x20007a88
 8012eac:	200074d0 	.word	0x200074d0

08012eb0 <protocol_s_get_route>:

//Get route
struct perph_interface *protocol_s_get_route(uint8_t tar_add)
{
 8012eb0:	b480      	push	{r7}
 8012eb2:	b085      	sub	sp, #20
 8012eb4:	af00      	add	r7, sp, #0
 8012eb6:	4603      	mov	r3, r0
 8012eb8:	71fb      	strb	r3, [r7, #7]
  uint8_t int_obj_idx;

  int_obj_idx = protocol_local_info.route_table[tar_add]; 
 8012eba:	79fb      	ldrb	r3, [r7, #7]
 8012ebc:	4a11      	ldr	r2, [pc, #68]	; (8012f04 <protocol_s_get_route+0x54>)
 8012ebe:	4413      	add	r3, r2
 8012ec0:	785b      	ldrb	r3, [r3, #1]
 8012ec2:	73fb      	strb	r3, [r7, #15]
  if (int_obj_idx > PROTOCOL_INTERFACE_MAX)
 8012ec4:	7bfb      	ldrb	r3, [r7, #15]
 8012ec6:	2b05      	cmp	r3, #5
 8012ec8:	d901      	bls.n	8012ece <protocol_s_get_route+0x1e>
  {
    return NULL;
 8012eca:	2300      	movs	r3, #0
 8012ecc:	e014      	b.n	8012ef8 <protocol_s_get_route+0x48>
  }

  if (protocol_local_info.interface[int_obj_idx].is_valid) 
 8012ece:	7bfb      	ldrb	r3, [r7, #15]
 8012ed0:	4a0c      	ldr	r2, [pc, #48]	; (8012f04 <protocol_s_get_route+0x54>)
 8012ed2:	2194      	movs	r1, #148	; 0x94
 8012ed4:	fb01 f303 	mul.w	r3, r1, r3
 8012ed8:	4413      	add	r3, r2
 8012eda:	f203 6319 	addw	r3, r3, #1561	; 0x619
 8012ede:	781b      	ldrb	r3, [r3, #0]
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	d008      	beq.n	8012ef6 <protocol_s_get_route+0x46>
  {
    return &(protocol_local_info.interface[int_obj_idx]);
 8012ee4:	7bfb      	ldrb	r3, [r7, #15]
 8012ee6:	2294      	movs	r2, #148	; 0x94
 8012ee8:	fb02 f303 	mul.w	r3, r2, r3
 8012eec:	f503 63b7 	add.w	r3, r3, #1464	; 0x5b8
 8012ef0:	4a04      	ldr	r2, [pc, #16]	; (8012f04 <protocol_s_get_route+0x54>)
 8012ef2:	4413      	add	r3, r2
 8012ef4:	e000      	b.n	8012ef8 <protocol_s_get_route+0x48>
  }
  else
  {
    return NULL;
 8012ef6:	2300      	movs	r3, #0
  }
}
 8012ef8:	4618      	mov	r0, r3
 8012efa:	3714      	adds	r7, #20
 8012efc:	46bd      	mov	sp, r7
 8012efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f02:	4770      	bx	lr
 8012f04:	200074d0 	.word	0x200074d0

08012f08 <protocol_s_session_get_node>:

//Get the node with the specified address and session
send_list_node_t *protocol_s_session_get_node(struct perph_interface *obj,
                                              uint8_t address, uint8_t session)
{
 8012f08:	b480      	push	{r7}
 8012f0a:	b08b      	sub	sp, #44	; 0x2c
 8012f0c:	af00      	add	r7, sp, #0
 8012f0e:	6078      	str	r0, [r7, #4]
 8012f10:	460b      	mov	r3, r1
 8012f12:	70fb      	strb	r3, [r7, #3]
 8012f14:	4613      	mov	r3, r2
 8012f16:	70bb      	strb	r3, [r7, #2]
  list_t *head_node;
  list_t *cur_node;
  list_t *store_list;
  send_list_node_t *cur_send_node;

  head_node = &(obj->send.normal_list_header);
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	3348      	adds	r3, #72	; 0x48
 8012f1c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8012f1e:	f3ef 8310 	mrs	r3, PRIMASK
 8012f22:	617b      	str	r3, [r7, #20]
  return(result);
 8012f24:	697b      	ldr	r3, [r7, #20]

  MUTEX_LOCK(protocol_local_info.mutex_lock);
 8012f26:	4a1d      	ldr	r2, [pc, #116]	; (8012f9c <protocol_s_session_get_node+0x94>)
 8012f28:	f8c2 38a0 	str.w	r3, [r2, #2208]	; 0x8a0
  __ASM volatile ("cpsid i" : : : "memory");
 8012f2c:	b672      	cpsid	i
}
 8012f2e:	bf00      	nop
  list_for_each_prev_safe(cur_node, store_list, head_node)
 8012f30:	69fb      	ldr	r3, [r7, #28]
 8012f32:	685b      	ldr	r3, [r3, #4]
 8012f34:	627b      	str	r3, [r7, #36]	; 0x24
 8012f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f38:	685b      	ldr	r3, [r3, #4]
 8012f3a:	623b      	str	r3, [r7, #32]
 8012f3c:	e01a      	b.n	8012f74 <protocol_s_session_get_node+0x6c>
  {
    cur_send_node = (send_list_node_t *)cur_node;
 8012f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f40:	61bb      	str	r3, [r7, #24]

    if ((cur_send_node->session == session) &&
 8012f42:	69bb      	ldr	r3, [r7, #24]
 8012f44:	7c5b      	ldrb	r3, [r3, #17]
 8012f46:	78ba      	ldrb	r2, [r7, #2]
 8012f48:	429a      	cmp	r2, r3
 8012f4a:	d10e      	bne.n	8012f6a <protocol_s_session_get_node+0x62>
        (cur_send_node->address == address))
 8012f4c:	69bb      	ldr	r3, [r7, #24]
 8012f4e:	7c9b      	ldrb	r3, [r3, #18]
    if ((cur_send_node->session == session) &&
 8012f50:	78fa      	ldrb	r2, [r7, #3]
 8012f52:	429a      	cmp	r2, r3
 8012f54:	d109      	bne.n	8012f6a <protocol_s_session_get_node+0x62>
    {
      MUTEX_UNLOCK(protocol_local_info.mutex_lock);
 8012f56:	4b11      	ldr	r3, [pc, #68]	; (8012f9c <protocol_s_session_get_node+0x94>)
 8012f58:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
 8012f5c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012f5e:	693b      	ldr	r3, [r7, #16]
 8012f60:	f383 8810 	msr	PRIMASK, r3
}
 8012f64:	bf00      	nop
      return cur_send_node;
 8012f66:	69bb      	ldr	r3, [r7, #24]
 8012f68:	e011      	b.n	8012f8e <protocol_s_session_get_node+0x86>
  list_for_each_prev_safe(cur_node, store_list, head_node)
 8012f6a:	6a3b      	ldr	r3, [r7, #32]
 8012f6c:	627b      	str	r3, [r7, #36]	; 0x24
 8012f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f70:	685b      	ldr	r3, [r3, #4]
 8012f72:	623b      	str	r3, [r7, #32]
 8012f74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012f76:	69fb      	ldr	r3, [r7, #28]
 8012f78:	429a      	cmp	r2, r3
 8012f7a:	d1e0      	bne.n	8012f3e <protocol_s_session_get_node+0x36>
    }
  }
  MUTEX_UNLOCK(protocol_local_info.mutex_lock);
 8012f7c:	4b07      	ldr	r3, [pc, #28]	; (8012f9c <protocol_s_session_get_node+0x94>)
 8012f7e:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
 8012f82:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012f84:	68fb      	ldr	r3, [r7, #12]
 8012f86:	f383 8810 	msr	PRIMASK, r3
}
 8012f8a:	bf00      	nop
  return NULL;
 8012f8c:	2300      	movs	r3, #0
}
 8012f8e:	4618      	mov	r0, r3
 8012f90:	372c      	adds	r7, #44	; 0x2c
 8012f92:	46bd      	mov	sp, r7
 8012f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f98:	4770      	bx	lr
 8012f9a:	bf00      	nop
 8012f9c:	200074d0 	.word	0x200074d0

08012fa0 <protocol_s_pack_forward>:

//Packet forwarding function
uint32_t protocol_s_pack_forward(protocol_pack_desc_t *p_pack, struct perph_interface *src_obj)
{
 8012fa0:	b580      	push	{r7, lr}
 8012fa2:	b08c      	sub	sp, #48	; 0x30
 8012fa4:	af00      	add	r7, sp, #0
 8012fa6:	6078      	str	r0, [r7, #4]
 8012fa8:	6039      	str	r1, [r7, #0]
  uint8_t *malloc_zone;
  uint32_t status;
  uint32_t pack_head_offset;
  send_list_node_t *send_node;

  status = PROTOCOL_SUCCESS;
 8012faa:	2300      	movs	r3, #0
 8012fac:	62bb      	str	r3, [r7, #40]	; 0x28

  //Find the destination of the package
  if (p_pack->reciver != PROTOCOL_BROADCAST_ADDR)
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	795b      	ldrb	r3, [r3, #5]
 8012fb2:	2bff      	cmp	r3, #255	; 0xff
 8012fb4:	d00a      	beq.n	8012fcc <protocol_s_pack_forward+0x2c>
  {
    tar_inter = protocol_s_get_route(p_pack->reciver);
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	795b      	ldrb	r3, [r3, #5]
 8012fba:	4618      	mov	r0, r3
 8012fbc:	f7ff ff78 	bl	8012eb0 <protocol_s_get_route>
 8012fc0:	62f8      	str	r0, [r7, #44]	; 0x2c

    if (tar_inter == NULL)
 8012fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	d101      	bne.n	8012fcc <protocol_s_pack_forward+0x2c>
    {
      PROTOCOL_RCV_ERR_PRINTF("Pack forward error, Route to address 0x%02x does not exist.", p_pack->reciver);

      return PROTOCOL_ERR_ROUTE_NOT_FOUND;
 8012fc8:	2306      	movs	r3, #6
 8012fca:	e09b      	b.n	8013104 <protocol_s_pack_forward+0x164>
    }
  }

  // Allocate memory required to forward packets
  malloc_zone = protocol_p_malloc(p_pack->data_len + PROTOCOL_SEND_NODE_SIZE);
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	785a      	ldrb	r2, [r3, #1]
 8012fd0:	789b      	ldrb	r3, [r3, #2]
 8012fd2:	f003 0303 	and.w	r3, r3, #3
 8012fd6:	021b      	lsls	r3, r3, #8
 8012fd8:	4313      	orrs	r3, r2
 8012fda:	b29b      	uxth	r3, r3
 8012fdc:	3330      	adds	r3, #48	; 0x30
 8012fde:	4618      	mov	r0, r3
 8012fe0:	f7ff f8a4 	bl	801212c <protocol_p_malloc>
 8012fe4:	6278      	str	r0, [r7, #36]	; 0x24
  if (malloc_zone == NULL)
 8012fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	d109      	bne.n	8013000 <protocol_s_pack_forward+0x60>
  {
    status = PROTOCOL_ERR_NOT_ENOUGH_MEM;
 8012fec:	2302      	movs	r3, #2
 8012fee:	62bb      	str	r3, [r7, #40]	; 0x28
    PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 8012ff0:	f44f 7217 	mov.w	r2, #604	; 0x25c
 8012ff4:	4945      	ldr	r1, [pc, #276]	; (801310c <protocol_s_pack_forward+0x16c>)
 8012ff6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012ff8:	f000 fa80 	bl	80134fc <protocol_s_error_info_printf>
    return status;
 8012ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ffe:	e081      	b.n	8013104 <protocol_s_pack_forward+0x164>
  }

  pack_head_offset = PROTOCOL_SEND_NODE_SIZE;
 8013000:	2330      	movs	r3, #48	; 0x30
 8013002:	623b      	str	r3, [r7, #32]
  send_node = (send_list_node_t *)&malloc_zone[0];
 8013004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013006:	61fb      	str	r3, [r7, #28]

  send_node->session = 0;
 8013008:	69fb      	ldr	r3, [r7, #28]
 801300a:	2200      	movs	r2, #0
 801300c:	745a      	strb	r2, [r3, #17]
  send_node->p_data = &malloc_zone[pack_head_offset];
 801300e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013010:	6a3b      	ldr	r3, [r7, #32]
 8013012:	441a      	add	r2, r3
 8013014:	69fb      	ldr	r3, [r7, #28]
 8013016:	609a      	str	r2, [r3, #8]
  send_node->len = p_pack->data_len;
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	785a      	ldrb	r2, [r3, #1]
 801301c:	789b      	ldrb	r3, [r3, #2]
 801301e:	f003 0303 	and.w	r3, r3, #3
 8013022:	021b      	lsls	r3, r3, #8
 8013024:	4313      	orrs	r3, r2
 8013026:	b29b      	uxth	r3, r3
 8013028:	461a      	mov	r2, r3
 801302a:	69fb      	ldr	r3, [r7, #28]
 801302c:	819a      	strh	r2, [r3, #12]
  send_node->rest_cnt = 1;
 801302e:	69fb      	ldr	r3, [r7, #28]
 8013030:	2201      	movs	r2, #1
 8013032:	75da      	strb	r2, [r3, #23]
  send_node->pre_timestamp = 0;
 8013034:	69fb      	ldr	r3, [r7, #28]
 8013036:	2200      	movs	r2, #0
 8013038:	61da      	str	r2, [r3, #28]
  send_node->timeout = 0;
 801303a:	69fb      	ldr	r3, [r7, #28]
 801303c:	2200      	movs	r2, #0
 801303e:	831a      	strh	r2, [r3, #24]
  send_node->is_got_ack = 0;
 8013040:	69fb      	ldr	r3, [r7, #28]
 8013042:	2200      	movs	r2, #0
 8013044:	73da      	strb	r2, [r3, #15]
  send_node->is_first_send = 1;
 8013046:	69fb      	ldr	r3, [r7, #28]
 8013048:	2201      	movs	r2, #1
 801304a:	f883 2020 	strb.w	r2, [r3, #32]
  send_node->address = p_pack->reciver;
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	795a      	ldrb	r2, [r3, #5]
 8013052:	69fb      	ldr	r3, [r7, #28]
 8013054:	749a      	strb	r2, [r3, #18]
  send_node->pack_type = PROTOCOL_PACK_ACK; //It is faster to send forwarded packets as ACK packets
 8013056:	69fb      	ldr	r3, [r7, #28]
 8013058:	2201      	movs	r2, #1
 801305a:	759a      	strb	r2, [r3, #22]
  send_node->is_ready_realse = 0;
 801305c:	69fb      	ldr	r3, [r7, #28]
 801305e:	2200      	movs	r2, #0
 8013060:	741a      	strb	r2, [r3, #16]
  send_node->cmd = 0;
 8013062:	69fb      	ldr	r3, [r7, #28]
 8013064:	2200      	movs	r2, #0
 8013066:	829a      	strh	r2, [r3, #20]
  send_node->forward_src_obj = src_obj;
 8013068:	69fb      	ldr	r3, [r7, #28]
 801306a:	683a      	ldr	r2, [r7, #0]
 801306c:	625a      	str	r2, [r3, #36]	; 0x24

  memcpy(send_node->p_data, p_pack, p_pack->data_len);
 801306e:	69fb      	ldr	r3, [r7, #28]
 8013070:	6898      	ldr	r0, [r3, #8]
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	785a      	ldrb	r2, [r3, #1]
 8013076:	789b      	ldrb	r3, [r3, #2]
 8013078:	f003 0303 	and.w	r3, r3, #3
 801307c:	021b      	lsls	r3, r3, #8
 801307e:	4313      	orrs	r3, r2
 8013080:	b29b      	uxth	r3, r3
 8013082:	461a      	mov	r2, r3
 8013084:	6879      	ldr	r1, [r7, #4]
 8013086:	f001 fb6d 	bl	8014764 <memcpy>
  if (p_pack->reciver != PROTOCOL_BROADCAST_ADDR)
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	795b      	ldrb	r3, [r3, #5]
 801308e:	2bff      	cmp	r3, #255	; 0xff
 8013090:	d01d      	beq.n	80130ce <protocol_s_pack_forward+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8013092:	f3ef 8310 	mrs	r3, PRIMASK
 8013096:	617b      	str	r3, [r7, #20]
  return(result);
 8013098:	697a      	ldr	r2, [r7, #20]
  {
    // Non-broadcast packet handling
    MUTEX_LOCK(tar_inter->send.mutex_lock);
 801309a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801309c:	65da      	str	r2, [r3, #92]	; 0x5c
  __ASM volatile ("cpsid i" : : : "memory");
 801309e:	b672      	cpsid	i
}
 80130a0:	bf00      	nop
    list_add(&(send_node->send_list), &(tar_inter->send.ack_list_header)); //It is faster to send forwarded packets as ACK packets
 80130a2:	69fa      	ldr	r2, [r7, #28]
 80130a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130a6:	3350      	adds	r3, #80	; 0x50
 80130a8:	4619      	mov	r1, r3
 80130aa:	4610      	mov	r0, r2
 80130ac:	f7ff fa5c 	bl	8012568 <list_add>
    tar_inter->send.ack_node_num++;
 80130b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130b2:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 80130b6:	3301      	adds	r3, #1
 80130b8:	b2da      	uxtb	r2, r3
 80130ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130bc:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
    MUTEX_UNLOCK(tar_inter->send.mutex_lock);
 80130c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80130c4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80130c6:	69bb      	ldr	r3, [r7, #24]
 80130c8:	f383 8810 	msr	PRIMASK, r3
}
 80130cc:	e019      	b.n	8013102 <protocol_s_pack_forward+0x162>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80130ce:	f3ef 8310 	mrs	r3, PRIMASK
 80130d2:	60fb      	str	r3, [r7, #12]
  return(result);
 80130d4:	68fb      	ldr	r3, [r7, #12]
                             p_pack->reciver, tar_inter->object_name);
  }
  else
  {
    //Broadcast packet processing
    MUTEX_LOCK(boardcast_object.mutex_lock);
 80130d6:	4a0e      	ldr	r2, [pc, #56]	; (8013110 <protocol_s_pack_forward+0x170>)
 80130d8:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80130da:	b672      	cpsid	i
}
 80130dc:	bf00      	nop

    list_add(&(send_node->send_list), &(boardcast_object.send_list_header));
 80130de:	69fb      	ldr	r3, [r7, #28]
 80130e0:	490b      	ldr	r1, [pc, #44]	; (8013110 <protocol_s_pack_forward+0x170>)
 80130e2:	4618      	mov	r0, r3
 80130e4:	f7ff fa40 	bl	8012568 <list_add>
    boardcast_object.send_node_num++;
 80130e8:	4b09      	ldr	r3, [pc, #36]	; (8013110 <protocol_s_pack_forward+0x170>)
 80130ea:	7a1b      	ldrb	r3, [r3, #8]
 80130ec:	3301      	adds	r3, #1
 80130ee:	b2da      	uxtb	r2, r3
 80130f0:	4b07      	ldr	r3, [pc, #28]	; (8013110 <protocol_s_pack_forward+0x170>)
 80130f2:	721a      	strb	r2, [r3, #8]

    MUTEX_UNLOCK(boardcast_object.mutex_lock);
 80130f4:	4b06      	ldr	r3, [pc, #24]	; (8013110 <protocol_s_pack_forward+0x170>)
 80130f6:	68db      	ldr	r3, [r3, #12]
 80130f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80130fa:	693b      	ldr	r3, [r7, #16]
 80130fc:	f383 8810 	msr	PRIMASK, r3
}
 8013100:	bf00      	nop

    PROTOCOL_RCV_DBG_PRINTF("Broadcast pack forward.");
  }

  return status;
 8013102:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8013104:	4618      	mov	r0, r3
 8013106:	3730      	adds	r7, #48	; 0x30
 8013108:	46bd      	mov	sp, r7
 801310a:	bd80      	pop	{r7, pc}
 801310c:	08015b58 	.word	0x08015b58
 8013110:	200074c0 	.word	0x200074c0

08013114 <protocol_s_unpack_data_handle>:

//Unpack processing function
uint32_t protocol_s_unpack_data_handle(struct perph_interface *obj)
{
 8013114:	b590      	push	{r4, r7, lr}
 8013116:	b087      	sub	sp, #28
 8013118:	af00      	add	r7, sp, #0
 801311a:	6078      	str	r0, [r7, #4]
  uint32_t status;
  uint16_t cmd;
  protocol_pack_desc_t *p_pack;
  send_list_node_t *session_node;

  status = PROTOCOL_SUCCESS;
 801311c:	2300      	movs	r3, #0
 801311e:	617b      	str	r3, [r7, #20]
  p_pack = (protocol_pack_desc_t *)(obj->rcvd.p_data);
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013124:	613b      	str	r3, [r7, #16]

#if PROTOCOL_ROUTE_FOWARD == PROTOCOL_ENABLE

  //If the receiving address does not match the local address, forward it
  if (p_pack->reciver != protocol_local_info.address)
 8013126:	693b      	ldr	r3, [r7, #16]
 8013128:	795a      	ldrb	r2, [r3, #5]
 801312a:	4b2e      	ldr	r3, [pc, #184]	; (80131e4 <protocol_s_unpack_data_handle+0xd0>)
 801312c:	781b      	ldrb	r3, [r3, #0]
 801312e:	429a      	cmp	r2, r3
 8013130:	d00a      	beq.n	8013148 <protocol_s_unpack_data_handle+0x34>
  {
    status = protocol_s_pack_forward(p_pack, obj);
 8013132:	6879      	ldr	r1, [r7, #4]
 8013134:	6938      	ldr	r0, [r7, #16]
 8013136:	f7ff ff33 	bl	8012fa0 <protocol_s_pack_forward>
 801313a:	6178      	str	r0, [r7, #20]
    if (p_pack->reciver != PROTOCOL_BROADCAST_ADDR)
 801313c:	693b      	ldr	r3, [r7, #16]
 801313e:	795b      	ldrb	r3, [r3, #5]
 8013140:	2bff      	cmp	r3, #255	; 0xff
 8013142:	d001      	beq.n	8013148 <protocol_s_unpack_data_handle+0x34>
    {
      return status;
 8013144:	697b      	ldr	r3, [r7, #20]
 8013146:	e049      	b.n	80131dc <protocol_s_unpack_data_handle+0xc8>
    }
  }

#endif

  if (p_pack->pack_type == PROTOCOL_PACK_ACK)
 8013148:	693b      	ldr	r3, [r7, #16]
 801314a:	78db      	ldrb	r3, [r3, #3]
 801314c:	f003 0320 	and.w	r3, r3, #32
 8013150:	b2db      	uxtb	r3, r3
 8013152:	2b00      	cmp	r3, #0
 8013154:	d02a      	beq.n	80131ac <protocol_s_unpack_data_handle+0x98>
  {
    session_node = protocol_s_session_get_node(obj,
 8013156:	693b      	ldr	r3, [r7, #16]
 8013158:	7919      	ldrb	r1, [r3, #4]
                                               p_pack->sender,
                                               p_pack->session);
 801315a:	693b      	ldr	r3, [r7, #16]
 801315c:	78db      	ldrb	r3, [r3, #3]
 801315e:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8013162:	b2db      	uxtb	r3, r3
    session_node = protocol_s_session_get_node(obj,
 8013164:	461a      	mov	r2, r3
 8013166:	6878      	ldr	r0, [r7, #4]
 8013168:	f7ff fece 	bl	8012f08 <protocol_s_session_get_node>
 801316c:	60b8      	str	r0, [r7, #8]

    if (session_node == NULL)
 801316e:	68bb      	ldr	r3, [r7, #8]
 8013170:	2b00      	cmp	r3, #0
 8013172:	d109      	bne.n	8013188 <protocol_s_unpack_data_handle+0x74>
    {
      status = PROTOCOL_ERR_SESSION_NOT_FOUND;
 8013174:	2303      	movs	r3, #3
 8013176:	617b      	str	r3, [r7, #20]
      PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 8013178:	f240 22af 	movw	r2, #687	; 0x2af
 801317c:	491a      	ldr	r1, [pc, #104]	; (80131e8 <protocol_s_unpack_data_handle+0xd4>)
 801317e:	6978      	ldr	r0, [r7, #20]
 8013180:	f000 f9bc 	bl	80134fc <protocol_s_error_info_printf>

      return status;
 8013184:	697b      	ldr	r3, [r7, #20]
 8013186:	e029      	b.n	80131dc <protocol_s_unpack_data_handle+0xc8>
    }
    session_node->is_got_ack = 1;
 8013188:	68bb      	ldr	r3, [r7, #8]
 801318a:	2201      	movs	r2, #1
 801318c:	73da      	strb	r2, [r3, #15]

    cmd = session_node->cmd;
 801318e:	68bb      	ldr	r3, [r7, #8]
 8013190:	8a9b      	ldrh	r3, [r3, #20]
 8013192:	81fb      	strh	r3, [r7, #14]

    PROTOCOL_RCV_DBG_PRINTF("Rcv pack, Address:0x%02X, Cmd:0x%04X, Session:%d Ack pack.",
                             p_pack->sender, cmd, p_pack->session);

    if (session_node->ack_callback != NULL)
 8013194:	68bb      	ldr	r3, [r7, #8]
 8013196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013198:	2b00      	cmp	r3, #0
 801319a:	d01e      	beq.n	80131da <protocol_s_unpack_data_handle+0xc6>
    {
      session_node->ack_callback(*(int32_t *)(p_pack->pdata));
 801319c:	68bb      	ldr	r3, [r7, #8]
 801319e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80131a0:	693a      	ldr	r2, [r7, #16]
 80131a2:	320c      	adds	r2, #12
 80131a4:	6812      	ldr	r2, [r2, #0]
 80131a6:	4610      	mov	r0, r2
 80131a8:	4798      	blx	r3
 80131aa:	e016      	b.n	80131da <protocol_s_unpack_data_handle+0xc6>
    }
  }
  else
  {
    cmd = *((uint16_t *)(p_pack->pdata));
 80131ac:	693b      	ldr	r3, [r7, #16]
 80131ae:	330c      	adds	r3, #12
 80131b0:	881b      	ldrh	r3, [r3, #0]
 80131b2:	81fb      	strh	r3, [r7, #14]
    PROTOCOL_RCV_DBG_PRINTF("Rcv pack, Address:0x%02X, Cmd:0x%04X, Normal pack.",
                             p_pack->sender, cmd);
    if (protocol_local_info.rcv_nor_callBack != NULL)
 80131b4:	4b0b      	ldr	r3, [pc, #44]	; (80131e4 <protocol_s_unpack_data_handle+0xd0>)
 80131b6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80131ba:	2b00      	cmp	r3, #0
 80131bc:	d00d      	beq.n	80131da <protocol_s_unpack_data_handle+0xc6>
    {
      protocol_local_info.rcv_nor_callBack((uint8_t *)p_pack,
 80131be:	4b09      	ldr	r3, [pc, #36]	; (80131e4 <protocol_s_unpack_data_handle+0xd0>)
 80131c0:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
                                           cmd,
                                           p_pack->session,
 80131c4:	693b      	ldr	r3, [r7, #16]
 80131c6:	78db      	ldrb	r3, [r3, #3]
 80131c8:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80131cc:	b2db      	uxtb	r3, r3
      protocol_local_info.rcv_nor_callBack((uint8_t *)p_pack,
 80131ce:	461a      	mov	r2, r3
 80131d0:	693b      	ldr	r3, [r7, #16]
 80131d2:	791b      	ldrb	r3, [r3, #4]
 80131d4:	89f9      	ldrh	r1, [r7, #14]
 80131d6:	6938      	ldr	r0, [r7, #16]
 80131d8:	47a0      	blx	r4
                                           p_pack->sender);
    }
  }

  return status;
 80131da:	697b      	ldr	r3, [r7, #20]
}
 80131dc:	4618      	mov	r0, r3
 80131de:	371c      	adds	r7, #28
 80131e0:	46bd      	mov	sp, r7
 80131e2:	bd90      	pop	{r4, r7, pc}
 80131e4:	200074d0 	.word	0x200074d0
 80131e8:	08015b58 	.word	0x08015b58

080131ec <protocol_s_extract>:

//Unpack
uint32_t protocol_s_extract(struct perph_interface *obj)
{
 80131ec:	b580      	push	{r7, lr}
 80131ee:	b084      	sub	sp, #16
 80131f0:	af00      	add	r7, sp, #0
 80131f2:	6078      	str	r0, [r7, #4]
  uint32_t status = 0;
 80131f4:	2300      	movs	r3, #0
 80131f6:	60fb      	str	r3, [r7, #12]
  rcvd_desc_t *rcvd;

  rcvd = &obj->rcvd;
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	3320      	adds	r3, #32
 80131fc:	60bb      	str	r3, [r7, #8]
  if (fifo_s_isempty(&rcvd->fifo))
 80131fe:	68bb      	ldr	r3, [r7, #8]
 8013200:	4618      	mov	r0, r3
 8013202:	f000 fcda 	bl	8013bba <fifo_s_isempty>
 8013206:	4603      	mov	r3, r0
 8013208:	2b00      	cmp	r3, #0
 801320a:	d003      	beq.n	8013214 <protocol_s_extract+0x28>
  {
    status = PROTOCOL_ERR_FIFO_EMPTY;
 801320c:	2307      	movs	r3, #7
 801320e:	60fb      	str	r3, [r7, #12]
    return status;
 8013210:	68fb      	ldr	r3, [r7, #12]
 8013212:	e0af      	b.n	8013374 <protocol_s_extract+0x188>
  }

  while (1)
  {
    switch (rcvd->state)
 8013214:	68bb      	ldr	r3, [r7, #8]
 8013216:	f893 3020 	ldrb.w	r3, [r3, #32]
 801321a:	2b04      	cmp	r3, #4
 801321c:	f200 8098 	bhi.w	8013350 <protocol_s_extract+0x164>
 8013220:	a201      	add	r2, pc, #4	; (adr r2, 8013228 <protocol_s_extract+0x3c>)
 8013222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013226:	bf00      	nop
 8013228:	0801323d 	.word	0x0801323d
 801322c:	08013257 	.word	0x08013257
 8013230:	080132c3 	.word	0x080132c3
 8013234:	080132f5 	.word	0x080132f5
 8013238:	08013335 	.word	0x08013335
    {
    case UNPACK_PACK_STAGE_FIND_SOF:

      status = protocol_s_find_pack_header(rcvd);
 801323c:	68b8      	ldr	r0, [r7, #8]
 801323e:	f000 f89f 	bl	8013380 <protocol_s_find_pack_header>
 8013242:	60f8      	str	r0, [r7, #12]
      if (status == PROTOCOL_SUCCESS)
 8013244:	68fb      	ldr	r3, [r7, #12]
 8013246:	2b00      	cmp	r3, #0
 8013248:	f040 8084 	bne.w	8013354 <protocol_s_extract+0x168>
      {
        rcvd->state = UNPACK_PACK_STAGE_AUTH_HEADER;
 801324c:	68bb      	ldr	r3, [r7, #8]
 801324e:	2201      	movs	r2, #1
 8013250:	f883 2020 	strb.w	r2, [r3, #32]
      }
      break;
 8013254:	e07e      	b.n	8013354 <protocol_s_extract+0x168>

    case UNPACK_PACK_STAGE_AUTH_HEADER:

      status = protocol_s_auth_pack_header(rcvd);
 8013256:	68b8      	ldr	r0, [r7, #8]
 8013258:	f000 f8b4 	bl	80133c4 <protocol_s_auth_pack_header>
 801325c:	60f8      	str	r0, [r7, #12]

      if (status == PROTOCOL_SUCCESS)
 801325e:	68fb      	ldr	r3, [r7, #12]
 8013260:	2b00      	cmp	r3, #0
 8013262:	d122      	bne.n	80132aa <protocol_s_extract+0xbe>
      { /* malloc memory size equal to header size adding data size */
        rcvd->state = UNPACK_PACK_STAGE_RECV_DATA;
 8013264:	68bb      	ldr	r3, [r7, #8]
 8013266:	2202      	movs	r2, #2
 8013268:	f883 2020 	strb.w	r2, [r3, #32]
        rcvd->p_data = protocol_p_malloc(rcvd->total_num);
 801326c:	68bb      	ldr	r3, [r7, #8]
 801326e:	8bdb      	ldrh	r3, [r3, #30]
 8013270:	4618      	mov	r0, r3
 8013272:	f7fe ff5b 	bl	801212c <protocol_p_malloc>
 8013276:	4602      	mov	r2, r0
 8013278:	68bb      	ldr	r3, [r7, #8]
 801327a:	619a      	str	r2, [r3, #24]
        if (rcvd->p_data == NULL)
 801327c:	68bb      	ldr	r3, [r7, #8]
 801327e:	699b      	ldr	r3, [r3, #24]
 8013280:	2b00      	cmp	r3, #0
 8013282:	d109      	bne.n	8013298 <protocol_s_extract+0xac>
        {
          status = PROTOCOL_ERR_NOT_ENOUGH_MEM;
 8013284:	2302      	movs	r3, #2
 8013286:	60fb      	str	r3, [r7, #12]
          PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 8013288:	f240 22f5 	movw	r2, #757	; 0x2f5
 801328c:	493b      	ldr	r1, [pc, #236]	; (801337c <protocol_s_extract+0x190>)
 801328e:	68f8      	ldr	r0, [r7, #12]
 8013290:	f000 f934 	bl	80134fc <protocol_s_error_info_printf>
          return status;
 8013294:	68fb      	ldr	r3, [r7, #12]
 8013296:	e06d      	b.n	8013374 <protocol_s_extract+0x188>
        }
        memset(rcvd->p_data, 0, rcvd->rcvd_num);
 8013298:	68bb      	ldr	r3, [r7, #8]
 801329a:	6998      	ldr	r0, [r3, #24]
 801329c:	68bb      	ldr	r3, [r7, #8]
 801329e:	8b9b      	ldrh	r3, [r3, #28]
 80132a0:	461a      	mov	r2, r3
 80132a2:	2100      	movs	r1, #0
 80132a4:	f001 f9d9 	bl	801465a <memset>
        /* this is a pseudo header, remove this from fifo */
        rcvd->state = UNPACK_PACK_STAGE_FIND_SOF;

        PROTOCOL_RCV_ERR_PRINTF("Pack header auth failure.");
      }
      break;
 80132a8:	e056      	b.n	8013358 <protocol_s_extract+0x16c>
      else if (status == PROTOCOL_ERR_AUTH_FAILURE)
 80132aa:	68fb      	ldr	r3, [r7, #12]
 80132ac:	2b08      	cmp	r3, #8
 80132ae:	d153      	bne.n	8013358 <protocol_s_extract+0x16c>
        fifo_s_get(&rcvd->fifo);
 80132b0:	68bb      	ldr	r3, [r7, #8]
 80132b2:	4618      	mov	r0, r3
 80132b4:	f000 fac8 	bl	8013848 <fifo_s_get>
        rcvd->state = UNPACK_PACK_STAGE_FIND_SOF;
 80132b8:	68bb      	ldr	r3, [r7, #8]
 80132ba:	2200      	movs	r2, #0
 80132bc:	f883 2020 	strb.w	r2, [r3, #32]
      break;
 80132c0:	e04a      	b.n	8013358 <protocol_s_extract+0x16c>

    case UNPACK_PACK_STAGE_RECV_DATA:

      if (rcvd->p_data)
 80132c2:	68bb      	ldr	r3, [r7, #8]
 80132c4:	699b      	ldr	r3, [r3, #24]
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d004      	beq.n	80132d4 <protocol_s_extract+0xe8>
      {
        status = protocol_s_fetch_pack_data(rcvd);
 80132ca:	68b8      	ldr	r0, [r7, #8]
 80132cc:	f000 f8c0 	bl	8013450 <protocol_s_fetch_pack_data>
 80132d0:	60f8      	str	r0, [r7, #12]
 80132d2:	e007      	b.n	80132e4 <protocol_s_extract+0xf8>
      }
      else
      {
        status = PROTOCOL_ERR_NOT_ENOUGH_MEM;
 80132d4:	2302      	movs	r3, #2
 80132d6:	60fb      	str	r3, [r7, #12]
        PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 80132d8:	f240 320e 	movw	r2, #782	; 0x30e
 80132dc:	4927      	ldr	r1, [pc, #156]	; (801337c <protocol_s_extract+0x190>)
 80132de:	68f8      	ldr	r0, [r7, #12]
 80132e0:	f000 f90c 	bl	80134fc <protocol_s_error_info_printf>
      }

      if (status == PROTOCOL_SUCCESS)
 80132e4:	68fb      	ldr	r3, [r7, #12]
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	d138      	bne.n	801335c <protocol_s_extract+0x170>
      {
        rcvd->state = UNPACK_PACK_STAGE_AUTH_PACK;
 80132ea:	68bb      	ldr	r3, [r7, #8]
 80132ec:	2203      	movs	r2, #3
 80132ee:	f883 2020 	strb.w	r2, [r3, #32]
      }

      break;
 80132f2:	e033      	b.n	801335c <protocol_s_extract+0x170>

    case UNPACK_PACK_STAGE_AUTH_PACK:

      if (verify_crc32(rcvd->p_data, rcvd->total_num))
 80132f4:	68bb      	ldr	r3, [r7, #8]
 80132f6:	699a      	ldr	r2, [r3, #24]
 80132f8:	68bb      	ldr	r3, [r7, #8]
 80132fa:	8bdb      	ldrh	r3, [r3, #30]
 80132fc:	4619      	mov	r1, r3
 80132fe:	4610      	mov	r0, r2
 8013300:	f000 ffda 	bl	80142b8 <verify_crc32>
 8013304:	4603      	mov	r3, r0
 8013306:	2b00      	cmp	r3, #0
 8013308:	d004      	beq.n	8013314 <protocol_s_extract+0x128>
      {
        rcvd->state = UNPACK_PACK_STAGE_DATA_HANDLE;
 801330a:	68bb      	ldr	r3, [r7, #8]
 801330c:	2204      	movs	r2, #4
 801330e:	f883 2020 	strb.w	r2, [r3, #32]
        protocol_p_free(rcvd->p_data);
        rcvd->state = UNPACK_PACK_STAGE_FIND_SOF;

        PROTOCOL_RCV_ERR_PRINTF("Pack data auth failure.");
      }
      break;
 8013312:	e024      	b.n	801335e <protocol_s_extract+0x172>
        rcvd->rcvd_num = 0;
 8013314:	68bb      	ldr	r3, [r7, #8]
 8013316:	2200      	movs	r2, #0
 8013318:	839a      	strh	r2, [r3, #28]
        rcvd->total_num = 0;
 801331a:	68bb      	ldr	r3, [r7, #8]
 801331c:	2200      	movs	r2, #0
 801331e:	83da      	strh	r2, [r3, #30]
        protocol_p_free(rcvd->p_data);
 8013320:	68bb      	ldr	r3, [r7, #8]
 8013322:	699b      	ldr	r3, [r3, #24]
 8013324:	4618      	mov	r0, r3
 8013326:	f7fe ff0d 	bl	8012144 <protocol_p_free>
        rcvd->state = UNPACK_PACK_STAGE_FIND_SOF;
 801332a:	68bb      	ldr	r3, [r7, #8]
 801332c:	2200      	movs	r2, #0
 801332e:	f883 2020 	strb.w	r2, [r3, #32]
      break;
 8013332:	e014      	b.n	801335e <protocol_s_extract+0x172>

    case UNPACK_PACK_STAGE_DATA_HANDLE:

      status = protocol_s_unpack_data_handle(obj);
 8013334:	6878      	ldr	r0, [r7, #4]
 8013336:	f7ff feed 	bl	8013114 <protocol_s_unpack_data_handle>
 801333a:	60f8      	str	r0, [r7, #12]

      protocol_p_free(rcvd->p_data);
 801333c:	68bb      	ldr	r3, [r7, #8]
 801333e:	699b      	ldr	r3, [r3, #24]
 8013340:	4618      	mov	r0, r3
 8013342:	f7fe feff 	bl	8012144 <protocol_p_free>
      rcvd->state = UNPACK_PACK_STAGE_FIND_SOF;
 8013346:	68bb      	ldr	r3, [r7, #8]
 8013348:	2200      	movs	r2, #0
 801334a:	f883 2020 	strb.w	r2, [r3, #32]
      break;
 801334e:	e006      	b.n	801335e <protocol_s_extract+0x172>

    default:
      break;
 8013350:	bf00      	nop
 8013352:	e004      	b.n	801335e <protocol_s_extract+0x172>
      break;
 8013354:	bf00      	nop
 8013356:	e002      	b.n	801335e <protocol_s_extract+0x172>
      break;
 8013358:	bf00      	nop
 801335a:	e000      	b.n	801335e <protocol_s_extract+0x172>
      break;
 801335c:	bf00      	nop
    }

    if (status == PROTOCOL_ERR_DATA_NOT_ENOUGH ||
 801335e:	68fb      	ldr	r3, [r7, #12]
 8013360:	2b0a      	cmp	r3, #10
 8013362:	d006      	beq.n	8013372 <protocol_s_extract+0x186>
 8013364:	68fb      	ldr	r3, [r7, #12]
 8013366:	2b02      	cmp	r3, #2
 8013368:	d003      	beq.n	8013372 <protocol_s_extract+0x186>
        status == PROTOCOL_ERR_NOT_ENOUGH_MEM ||
 801336a:	68fb      	ldr	r3, [r7, #12]
 801336c:	2b09      	cmp	r3, #9
 801336e:	d000      	beq.n	8013372 <protocol_s_extract+0x186>
    switch (rcvd->state)
 8013370:	e750      	b.n	8013214 <protocol_s_extract+0x28>
    {
      break; /* break from while */
    }
  }

  return status;
 8013372:	68fb      	ldr	r3, [r7, #12]
}
 8013374:	4618      	mov	r0, r3
 8013376:	3710      	adds	r7, #16
 8013378:	46bd      	mov	sp, r7
 801337a:	bd80      	pop	{r7, pc}
 801337c:	08015b58 	.word	0x08015b58

08013380 <protocol_s_find_pack_header>:

//Find frame header
uint32_t protocol_s_find_pack_header(rcvd_desc_t *rcvd)
{
 8013380:	b580      	push	{r7, lr}
 8013382:	b084      	sub	sp, #16
 8013384:	af00      	add	r7, sp, #0
 8013386:	6078      	str	r0, [r7, #4]
  uint32_t status;

  while (fifo_s_isempty(&rcvd->fifo) == 0)
 8013388:	e00e      	b.n	80133a8 <protocol_s_find_pack_header+0x28>
  { // if fifo not empty, loop
    if ((uint8_t)(fifo_s_preread(&rcvd->fifo, 0)) == PROTOCOL_HEADER)
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	2100      	movs	r1, #0
 801338e:	4618      	mov	r0, r3
 8013390:	f000 fb77 	bl	8013a82 <fifo_s_preread>
 8013394:	4603      	mov	r3, r0
 8013396:	2baa      	cmp	r3, #170	; 0xaa
 8013398:	d102      	bne.n	80133a0 <protocol_s_find_pack_header+0x20>
    {
      status = PROTOCOL_SUCCESS;
 801339a:	2300      	movs	r3, #0
 801339c:	60fb      	str	r3, [r7, #12]
      goto END;
 801339e:	e00c      	b.n	80133ba <protocol_s_find_pack_header+0x3a>
    }
    else
    {
      fifo_s_get(&rcvd->fifo); //remove one byte from fifo
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	4618      	mov	r0, r3
 80133a4:	f000 fa50 	bl	8013848 <fifo_s_get>
  while (fifo_s_isempty(&rcvd->fifo) == 0)
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	4618      	mov	r0, r3
 80133ac:	f000 fc05 	bl	8013bba <fifo_s_isempty>
 80133b0:	4603      	mov	r3, r0
 80133b2:	2b00      	cmp	r3, #0
 80133b4:	d0e9      	beq.n	801338a <protocol_s_find_pack_header+0xa>
    }
  }
  //if fifo not empty, loop

  status = PROTOCOL_ERR_NOT_FIND_HEADER;
 80133b6:	2309      	movs	r3, #9
 80133b8:	60fb      	str	r3, [r7, #12]

END:
  return status;
 80133ba:	68fb      	ldr	r3, [r7, #12]
}
 80133bc:	4618      	mov	r0, r3
 80133be:	3710      	adds	r7, #16
 80133c0:	46bd      	mov	sp, r7
 80133c2:	bd80      	pop	{r7, pc}

080133c4 <protocol_s_auth_pack_header>:

//Verification header
uint32_t protocol_s_auth_pack_header(rcvd_desc_t *rcvd)
{
 80133c4:	b580      	push	{r7, lr}
 80133c6:	b088      	sub	sp, #32
 80133c8:	af00      	add	r7, sp, #0
 80133ca:	6078      	str	r0, [r7, #4]
  uint32_t status;
  uint8_t auth_array[12];
  ver_data_len_t ver_len;

  if (fifo_s_prereads(&rcvd->fifo, (char *)auth_array, 0, 12) == 12)
 80133cc:	6878      	ldr	r0, [r7, #4]
 80133ce:	f107 0110 	add.w	r1, r7, #16
 80133d2:	230c      	movs	r3, #12
 80133d4:	2200      	movs	r2, #0
 80133d6:	f000 fb7b 	bl	8013ad0 <fifo_s_prereads>
 80133da:	4603      	mov	r3, r0
 80133dc:	2b0c      	cmp	r3, #12
 80133de:	d130      	bne.n	8013442 <protocol_s_auth_pack_header+0x7e>
  {
    ver_len = protocol_s_get_ver_datalen(auth_array);
 80133e0:	f107 0310 	add.w	r3, r7, #16
 80133e4:	4618      	mov	r0, r3
 80133e6:	f000 f862 	bl	80134ae <protocol_s_get_ver_datalen>
 80133ea:	4603      	mov	r3, r0
 80133ec:	81bb      	strh	r3, [r7, #12]
    if (ver_len.data_len - PROTOCOL_PACK_HEAD_TAIL_SIZE > PROTOCOL_MAX_DATA_LEN)
 80133ee:	89bb      	ldrh	r3, [r7, #12]
 80133f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80133f4:	b29b      	uxth	r3, r3
 80133f6:	3b10      	subs	r3, #16
 80133f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80133fc:	d902      	bls.n	8013404 <protocol_s_auth_pack_header+0x40>
    {
      status = PROTOCOL_ERR_AUTH_FAILURE;
 80133fe:	2308      	movs	r3, #8
 8013400:	61fb      	str	r3, [r7, #28]
 8013402:	e020      	b.n	8013446 <protocol_s_auth_pack_header+0x82>
    }
    else
    {
      if ((ver_len.version == 0) && (verify_crc16(auth_array, 12) == 1))
 8013404:	7b7b      	ldrb	r3, [r7, #13]
 8013406:	f023 0303 	bic.w	r3, r3, #3
 801340a:	b2db      	uxtb	r3, r3
 801340c:	2b00      	cmp	r3, #0
 801340e:	d115      	bne.n	801343c <protocol_s_auth_pack_header+0x78>
 8013410:	f107 0310 	add.w	r3, r7, #16
 8013414:	210c      	movs	r1, #12
 8013416:	4618      	mov	r0, r3
 8013418:	f000 fec4 	bl	80141a4 <verify_crc16>
 801341c:	4603      	mov	r3, r0
 801341e:	2b01      	cmp	r3, #1
 8013420:	d10c      	bne.n	801343c <protocol_s_auth_pack_header+0x78>
      {
        status = PROTOCOL_SUCCESS;
 8013422:	2300      	movs	r3, #0
 8013424:	61fb      	str	r3, [r7, #28]
        rcvd->total_num = ver_len.data_len;
 8013426:	89bb      	ldrh	r3, [r7, #12]
 8013428:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801342c:	b29b      	uxth	r3, r3
 801342e:	461a      	mov	r2, r3
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	83da      	strh	r2, [r3, #30]
        rcvd->rcvd_num = 0;
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	2200      	movs	r2, #0
 8013438:	839a      	strh	r2, [r3, #28]
 801343a:	e004      	b.n	8013446 <protocol_s_auth_pack_header+0x82>
      }
      else
      {
        status = PROTOCOL_ERR_AUTH_FAILURE;
 801343c:	2308      	movs	r3, #8
 801343e:	61fb      	str	r3, [r7, #28]
 8013440:	e001      	b.n	8013446 <protocol_s_auth_pack_header+0x82>
      }
    }
  }
  else
  {
    status = PROTOCOL_ERR_DATA_NOT_ENOUGH;
 8013442:	230a      	movs	r3, #10
 8013444:	61fb      	str	r3, [r7, #28]
  }

  return status;
 8013446:	69fb      	ldr	r3, [r7, #28]
}
 8013448:	4618      	mov	r0, r3
 801344a:	3720      	adds	r7, #32
 801344c:	46bd      	mov	sp, r7
 801344e:	bd80      	pop	{r7, pc}

08013450 <protocol_s_fetch_pack_data>:

//Get package data
uint32_t protocol_s_fetch_pack_data(rcvd_desc_t *rcvd)
{
 8013450:	b580      	push	{r7, lr}
 8013452:	b086      	sub	sp, #24
 8013454:	af00      	add	r7, sp, #0
 8013456:	6078      	str	r0, [r7, #4]
  uint32_t status;
  uint32_t length;
  uint32_t want_len;

  want_len = rcvd->total_num - rcvd->rcvd_num;
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	8bdb      	ldrh	r3, [r3, #30]
 801345c:	461a      	mov	r2, r3
 801345e:	687b      	ldr	r3, [r7, #4]
 8013460:	8b9b      	ldrh	r3, [r3, #28]
 8013462:	1ad3      	subs	r3, r2, r3
 8013464:	613b      	str	r3, [r7, #16]
  length = fifo_s_gets(&rcvd->fifo,
 8013466:	6878      	ldr	r0, [r7, #4]
                       (char *)rcvd->p_data + rcvd->rcvd_num,
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	699b      	ldr	r3, [r3, #24]
 801346c:	687a      	ldr	r2, [r7, #4]
 801346e:	8b92      	ldrh	r2, [r2, #28]
  length = fifo_s_gets(&rcvd->fifo,
 8013470:	4413      	add	r3, r2
 8013472:	693a      	ldr	r2, [r7, #16]
 8013474:	4619      	mov	r1, r3
 8013476:	f000 fa1c 	bl	80138b2 <fifo_s_gets>
 801347a:	4603      	mov	r3, r0
 801347c:	60fb      	str	r3, [r7, #12]
                       want_len);
  rcvd->rcvd_num += length;
 801347e:	687b      	ldr	r3, [r7, #4]
 8013480:	8b9a      	ldrh	r2, [r3, #28]
 8013482:	68fb      	ldr	r3, [r7, #12]
 8013484:	b29b      	uxth	r3, r3
 8013486:	4413      	add	r3, r2
 8013488:	b29a      	uxth	r2, r3
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	839a      	strh	r2, [r3, #28]

  if (rcvd->rcvd_num < rcvd->total_num)
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	8b9a      	ldrh	r2, [r3, #28]
 8013492:	687b      	ldr	r3, [r7, #4]
 8013494:	8bdb      	ldrh	r3, [r3, #30]
 8013496:	429a      	cmp	r2, r3
 8013498:	d202      	bcs.n	80134a0 <protocol_s_fetch_pack_data+0x50>
  {
    status = PROTOCOL_ERR_DATA_NOT_ENOUGH;
 801349a:	230a      	movs	r3, #10
 801349c:	617b      	str	r3, [r7, #20]
 801349e:	e001      	b.n	80134a4 <protocol_s_fetch_pack_data+0x54>
  }
  else
  {
    status = PROTOCOL_SUCCESS;
 80134a0:	2300      	movs	r3, #0
 80134a2:	617b      	str	r3, [r7, #20]
  }
  return status;
 80134a4:	697b      	ldr	r3, [r7, #20]
}
 80134a6:	4618      	mov	r0, r3
 80134a8:	3718      	adds	r7, #24
 80134aa:	46bd      	mov	sp, r7
 80134ac:	bd80      	pop	{r7, pc}

080134ae <protocol_s_get_ver_datalen>:

//Get version number and data length
ver_data_len_t protocol_s_get_ver_datalen(void *pack)

{
 80134ae:	b480      	push	{r7}
 80134b0:	b087      	sub	sp, #28
 80134b2:	af00      	add	r7, sp, #0
 80134b4:	6078      	str	r0, [r7, #4]
  ver_data_len_t ver_len;
  uint16_t *tmp = (uint16_t *)&ver_len;
 80134b6:	f107 0308 	add.w	r3, r7, #8
 80134ba:	617b      	str	r3, [r7, #20]
  uint8_t *ptr = (uint8_t *)pack;
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	613b      	str	r3, [r7, #16]

  *tmp = ptr[2] << 8 | ptr[1];
 80134c0:	693b      	ldr	r3, [r7, #16]
 80134c2:	3302      	adds	r3, #2
 80134c4:	781b      	ldrb	r3, [r3, #0]
 80134c6:	021b      	lsls	r3, r3, #8
 80134c8:	b21a      	sxth	r2, r3
 80134ca:	693b      	ldr	r3, [r7, #16]
 80134cc:	3301      	adds	r3, #1
 80134ce:	781b      	ldrb	r3, [r3, #0]
 80134d0:	b21b      	sxth	r3, r3
 80134d2:	4313      	orrs	r3, r2
 80134d4:	b21b      	sxth	r3, r3
 80134d6:	b29a      	uxth	r2, r3
 80134d8:	697b      	ldr	r3, [r7, #20]
 80134da:	801a      	strh	r2, [r3, #0]

  return ver_len;
 80134dc:	893b      	ldrh	r3, [r7, #8]
 80134de:	81bb      	strh	r3, [r7, #12]
 80134e0:	2300      	movs	r3, #0
 80134e2:	7b3a      	ldrb	r2, [r7, #12]
 80134e4:	f362 0307 	bfi	r3, r2, #0, #8
 80134e8:	7b7a      	ldrb	r2, [r7, #13]
 80134ea:	f362 230f 	bfi	r3, r2, #8, #8
}
 80134ee:	4618      	mov	r0, r3
 80134f0:	371c      	adds	r7, #28
 80134f2:	46bd      	mov	sp, r7
 80134f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134f8:	4770      	bx	lr
	...

080134fc <protocol_s_error_info_printf>:

//Accept error message
void protocol_s_error_info_printf(uint32_t status, char *file, int line)
{
 80134fc:	b480      	push	{r7}
 80134fe:	b087      	sub	sp, #28
 8013500:	af00      	add	r7, sp, #0
 8013502:	60f8      	str	r0, [r7, #12]
 8013504:	60b9      	str	r1, [r7, #8]
 8013506:	607a      	str	r2, [r7, #4]
  char *err_info;
  switch (status)
 8013508:	68fb      	ldr	r3, [r7, #12]
 801350a:	2b12      	cmp	r3, #18
 801350c:	d861      	bhi.n	80135d2 <protocol_s_error_info_printf+0xd6>
 801350e:	a201      	add	r2, pc, #4	; (adr r2, 8013514 <protocol_s_error_info_printf+0x18>)
 8013510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013514:	08013561 	.word	0x08013561
 8013518:	08013567 	.word	0x08013567
 801351c:	0801356d 	.word	0x0801356d
 8013520:	08013573 	.word	0x08013573
 8013524:	08013579 	.word	0x08013579
 8013528:	0801357f 	.word	0x0801357f
 801352c:	08013585 	.word	0x08013585
 8013530:	0801358b 	.word	0x0801358b
 8013534:	08013591 	.word	0x08013591
 8013538:	08013597 	.word	0x08013597
 801353c:	0801359d 	.word	0x0801359d
 8013540:	080135a3 	.word	0x080135a3
 8013544:	080135a9 	.word	0x080135a9
 8013548:	080135af 	.word	0x080135af
 801354c:	080135b5 	.word	0x080135b5
 8013550:	080135bb 	.word	0x080135bb
 8013554:	080135c1 	.word	0x080135c1
 8013558:	080135c7 	.word	0x080135c7
 801355c:	080135cd 	.word	0x080135cd
  {
  case PROTOCOL_SUCCESS:
    err_info = "PROTOCOL_SUCCESS";
 8013560:	4b20      	ldr	r3, [pc, #128]	; (80135e4 <protocol_s_error_info_printf+0xe8>)
 8013562:	617b      	str	r3, [r7, #20]
    break;
 8013564:	e037      	b.n	80135d6 <protocol_s_error_info_printf+0xda>
  case PROTOCOL_ERR_DATA_TOO_LONG:
    err_info = "PROTOCOL_ERR_DATA_TOO_LONG";
 8013566:	4b20      	ldr	r3, [pc, #128]	; (80135e8 <protocol_s_error_info_printf+0xec>)
 8013568:	617b      	str	r3, [r7, #20]
    break;
 801356a:	e034      	b.n	80135d6 <protocol_s_error_info_printf+0xda>
  case PROTOCOL_ERR_NOT_ENOUGH_MEM:
    err_info = "PROTOCOL_ERR_NOT_ENOUGH_MEM";
 801356c:	4b1f      	ldr	r3, [pc, #124]	; (80135ec <protocol_s_error_info_printf+0xf0>)
 801356e:	617b      	str	r3, [r7, #20]
    break;
 8013570:	e031      	b.n	80135d6 <protocol_s_error_info_printf+0xda>
  case PROTOCOL_ERR_SESSION_NOT_FOUND:
    err_info = "PROTOCOL_ERR_SESSION_NOT_FOUND";
 8013572:	4b1f      	ldr	r3, [pc, #124]	; (80135f0 <protocol_s_error_info_printf+0xf4>)
 8013574:	617b      	str	r3, [r7, #20]
    break;
 8013576:	e02e      	b.n	80135d6 <protocol_s_error_info_printf+0xda>
  case PROTOCOL_ERR_SESSION_FULL:
    err_info = "PROTOCOL_ERR_SESSION_FULL";
 8013578:	4b1e      	ldr	r3, [pc, #120]	; (80135f4 <protocol_s_error_info_printf+0xf8>)
 801357a:	617b      	str	r3, [r7, #20]
    break;
 801357c:	e02b      	b.n	80135d6 <protocol_s_error_info_printf+0xda>
  case PROTOCOL_ERR_SESSION_IS_USE:
    err_info = "PROTOCOL_ERR_SESSION_IS_USE";
 801357e:	4b1e      	ldr	r3, [pc, #120]	; (80135f8 <protocol_s_error_info_printf+0xfc>)
 8013580:	617b      	str	r3, [r7, #20]
    break;
 8013582:	e028      	b.n	80135d6 <protocol_s_error_info_printf+0xda>
  case PROTOCOL_ERR_ROUTE_NOT_FOUND:
    err_info = "PROTOCOL_ERR_ROUTE_NOT_FOUND";
 8013584:	4b1d      	ldr	r3, [pc, #116]	; (80135fc <protocol_s_error_info_printf+0x100>)
 8013586:	617b      	str	r3, [r7, #20]
    break;
 8013588:	e025      	b.n	80135d6 <protocol_s_error_info_printf+0xda>
  case PROTOCOL_ERR_FIFO_EMPTY:
    err_info = "PROTOCOL_ERR_FIFO_EMPTY";
 801358a:	4b1d      	ldr	r3, [pc, #116]	; (8013600 <protocol_s_error_info_printf+0x104>)
 801358c:	617b      	str	r3, [r7, #20]
    break;
 801358e:	e022      	b.n	80135d6 <protocol_s_error_info_printf+0xda>
  case PROTOCOL_ERR_AUTH_FAILURE:
    err_info = "PROTOCOL_ERR_AUTH_FAILURE";
 8013590:	4b1c      	ldr	r3, [pc, #112]	; (8013604 <protocol_s_error_info_printf+0x108>)
 8013592:	617b      	str	r3, [r7, #20]
    break;
 8013594:	e01f      	b.n	80135d6 <protocol_s_error_info_printf+0xda>
  case PROTOCOL_ERR_NOT_FIND_HEADER:
    err_info = "PROTOCOL_ERR_NOT_FIND_HEADER";
 8013596:	4b1c      	ldr	r3, [pc, #112]	; (8013608 <protocol_s_error_info_printf+0x10c>)
 8013598:	617b      	str	r3, [r7, #20]
    break;
 801359a:	e01c      	b.n	80135d6 <protocol_s_error_info_printf+0xda>
  case PROTOCOL_ERR_DATA_NOT_ENOUGH:
    err_info = "PROTOCOL_ERR_DATA_NOT_ENOUGH";
 801359c:	4b1b      	ldr	r3, [pc, #108]	; (801360c <protocol_s_error_info_printf+0x110>)
 801359e:	617b      	str	r3, [r7, #20]
    break;
 80135a0:	e019      	b.n	80135d6 <protocol_s_error_info_printf+0xda>
  case PROTOCOL_ERR_FIFO_FULL:
    err_info = "PROTOCOL_ERR_FIFO_FULL";
 80135a2:	4b1b      	ldr	r3, [pc, #108]	; (8013610 <protocol_s_error_info_printf+0x114>)
 80135a4:	617b      	str	r3, [r7, #20]
    break;
 80135a6:	e016      	b.n	80135d6 <protocol_s_error_info_printf+0xda>
  case PROTOCOL_ERR_OBJECT_NOT_FOUND:
    err_info = "PROTOCOL_ERR_OBJECT_NOT_FOUND";
 80135a8:	4b1a      	ldr	r3, [pc, #104]	; (8013614 <protocol_s_error_info_printf+0x118>)
 80135aa:	617b      	str	r3, [r7, #20]
    break;
 80135ac:	e013      	b.n	80135d6 <protocol_s_error_info_printf+0xda>
  case PROTOCOL_ERR_UNSUPPORT_CPU:
    err_info = "PROTOCOL_ERR_UNSUPPORT_CPU";
 80135ae:	4b1a      	ldr	r3, [pc, #104]	; (8013618 <protocol_s_error_info_printf+0x11c>)
 80135b0:	617b      	str	r3, [r7, #20]
    break;
 80135b2:	e010      	b.n	80135d6 <protocol_s_error_info_printf+0xda>
  case PROTOCOL_ERR_ROUTEU_SET_BEYOND:
    err_info = "PROTOCOL_ERR_ROUTEU_SET_BEYOND";
 80135b4:	4b19      	ldr	r3, [pc, #100]	; (801361c <protocol_s_error_info_printf+0x120>)
 80135b6:	617b      	str	r3, [r7, #20]
    break;
 80135b8:	e00d      	b.n	80135d6 <protocol_s_error_info_printf+0xda>
  case PROTOCOL_ERR_INTER_NOT_FOUND:
    err_info = "PROTOCOL_ERR_INTER_NOT_FOUND";
 80135ba:	4b19      	ldr	r3, [pc, #100]	; (8013620 <protocol_s_error_info_printf+0x124>)
 80135bc:	617b      	str	r3, [r7, #20]
    break;
 80135be:	e00a      	b.n	80135d6 <protocol_s_error_info_printf+0xda>
  case PROTOCOL_ERR_PROTOCOL_NOT_INIT:
    err_info = "PROTOCOL_ERR_PROTOCOL_NOT_INIT";
 80135c0:	4b18      	ldr	r3, [pc, #96]	; (8013624 <protocol_s_error_info_printf+0x128>)
 80135c2:	617b      	str	r3, [r7, #20]
    break;
 80135c4:	e007      	b.n	80135d6 <protocol_s_error_info_printf+0xda>
  case PROTOCOL_ERR_SESSION_ERROR:
    err_info = "PROTOCOL_ERR_SESSION_ERROR(Boardcast session can only be 0)";
 80135c6:	4b18      	ldr	r3, [pc, #96]	; (8013628 <protocol_s_error_info_printf+0x12c>)
 80135c8:	617b      	str	r3, [r7, #20]
    break;
 80135ca:	e004      	b.n	80135d6 <protocol_s_error_info_printf+0xda>
  case PROTOCOL_ERR_REGISTER_FAILED:
    err_info = "PROTOCOL_ERR_REGISTER_FAILED";
 80135cc:	4b17      	ldr	r3, [pc, #92]	; (801362c <protocol_s_error_info_printf+0x130>)
 80135ce:	617b      	str	r3, [r7, #20]
    break;
 80135d0:	e001      	b.n	80135d6 <protocol_s_error_info_printf+0xda>
  default:
    err_info = "PROTOCOL_ERR_NOT_FOUND";
 80135d2:	4b17      	ldr	r3, [pc, #92]	; (8013630 <protocol_s_error_info_printf+0x134>)
 80135d4:	617b      	str	r3, [r7, #20]
  }
  protocol_log_e("%s[%u].(File:%s,Line:%d)",
                 err_info, status, file, line);

  return;
 80135d6:	bf00      	nop
}
 80135d8:	371c      	adds	r7, #28
 80135da:	46bd      	mov	sp, r7
 80135dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135e0:	4770      	bx	lr
 80135e2:	bf00      	nop
 80135e4:	08015b8c 	.word	0x08015b8c
 80135e8:	08015ba0 	.word	0x08015ba0
 80135ec:	08015bbc 	.word	0x08015bbc
 80135f0:	08015bd8 	.word	0x08015bd8
 80135f4:	08015bf8 	.word	0x08015bf8
 80135f8:	08015c14 	.word	0x08015c14
 80135fc:	08015c30 	.word	0x08015c30
 8013600:	08015c50 	.word	0x08015c50
 8013604:	08015c68 	.word	0x08015c68
 8013608:	08015c84 	.word	0x08015c84
 801360c:	08015ca4 	.word	0x08015ca4
 8013610:	08015cc4 	.word	0x08015cc4
 8013614:	08015cdc 	.word	0x08015cdc
 8013618:	08015cfc 	.word	0x08015cfc
 801361c:	08015d18 	.word	0x08015d18
 8013620:	08015d38 	.word	0x08015d38
 8013624:	08015d58 	.word	0x08015d58
 8013628:	08015d78 	.word	0x08015d78
 801362c:	08015db4 	.word	0x08015db4
 8013630:	08015dd4 	.word	0x08015dd4

08013634 <fifo_s_init>:
//! \param  [in] uint_cnt is count of fifo elements.
//! \retval 0 if initialize successfully, otherwise return -1.
//
//******************************************************************************************
int fifo_s_init(fifo_s_t *p_fifo, void *p_base_addr, int uint_cnt)
{
 8013634:	b480      	push	{r7}
 8013636:	b085      	sub	sp, #20
 8013638:	af00      	add	r7, sp, #0
 801363a:	60f8      	str	r0, [r7, #12]
 801363c:	60b9      	str	r1, [r7, #8]
 801363e:	607a      	str	r2, [r7, #4]
  ASSERT(p_fifo);
  ASSERT(p_base_addr);
  ASSERT(uint_cnt);

  //! Initialize FIFO Control Block.
  p_fifo->p_start_addr = (char *)p_base_addr;
 8013640:	68fb      	ldr	r3, [r7, #12]
 8013642:	68ba      	ldr	r2, [r7, #8]
 8013644:	601a      	str	r2, [r3, #0]
  p_fifo->p_end_addr = (char *)p_base_addr + uint_cnt - 1;
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	3b01      	subs	r3, #1
 801364a:	68ba      	ldr	r2, [r7, #8]
 801364c:	441a      	add	r2, r3
 801364e:	68fb      	ldr	r3, [r7, #12]
 8013650:	605a      	str	r2, [r3, #4]
  p_fifo->free_num = uint_cnt;
 8013652:	68fb      	ldr	r3, [r7, #12]
 8013654:	687a      	ldr	r2, [r7, #4]
 8013656:	609a      	str	r2, [r3, #8]
  p_fifo->used_num = 0;
 8013658:	68fb      	ldr	r3, [r7, #12]
 801365a:	2200      	movs	r2, #0
 801365c:	60da      	str	r2, [r3, #12]
  p_fifo->p_read_addr = (char *)p_base_addr;
 801365e:	68fb      	ldr	r3, [r7, #12]
 8013660:	68ba      	ldr	r2, [r7, #8]
 8013662:	611a      	str	r2, [r3, #16]
  p_fifo->p_write_addr = (char *)p_base_addr;
 8013664:	68fb      	ldr	r3, [r7, #12]
 8013666:	68ba      	ldr	r2, [r7, #8]
 8013668:	615a      	str	r2, [r3, #20]

  return (0);
 801366a:	2300      	movs	r3, #0
}
 801366c:	4618      	mov	r0, r3
 801366e:	3714      	adds	r7, #20
 8013670:	46bd      	mov	sp, r7
 8013672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013676:	4770      	bx	lr

08013678 <fifo_s_puts>:
//! \param  [in]  the number of elements
//! \retval the number of really write data, otherwise return -1.
//
//******************************************************************************************
int fifo_s_puts(fifo_s_t *p_fifo, char *p_source, int len)
{
 8013678:	b590      	push	{r4, r7, lr}
 801367a:	b08b      	sub	sp, #44	; 0x2c
 801367c:	af00      	add	r7, sp, #0
 801367e:	60f8      	str	r0, [r7, #12]
 8013680:	60b9      	str	r1, [r7, #8]
 8013682:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8013684:	f3ef 8310 	mrs	r3, PRIMASK
 8013688:	61bb      	str	r3, [r7, #24]
  return(result);
 801368a:	69bb      	ldr	r3, [r7, #24]
  int len_from_start;

  ASSERT(p_fifo);
  
  //Interrupt Off;
  cpu_sr = FIFO_GET_CPU_SR();
 801368c:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 801368e:	b672      	cpsid	i
}
 8013690:	bf00      	nop
  FIFO_ENTER_CRITICAL();

  if (NULL == p_source)
 8013692:	68bb      	ldr	r3, [r7, #8]
 8013694:	2b00      	cmp	r3, #0
 8013696:	d05e      	beq.n	8013756 <fifo_s_puts+0xde>
  {
      goto end;
  }

  if (0 == p_fifo->free_num)
 8013698:	68fb      	ldr	r3, [r7, #12]
 801369a:	689b      	ldr	r3, [r3, #8]
 801369c:	2b00      	cmp	r3, #0
 801369e:	d05c      	beq.n	801375a <fifo_s_puts+0xe2>
  {
      goto end;
  }

  if (p_fifo->p_write_addr > p_fifo->p_end_addr)
 80136a0:	68fb      	ldr	r3, [r7, #12]
 80136a2:	695a      	ldr	r2, [r3, #20]
 80136a4:	68fb      	ldr	r3, [r7, #12]
 80136a6:	685b      	ldr	r3, [r3, #4]
 80136a8:	429a      	cmp	r2, r3
 80136aa:	d903      	bls.n	80136b4 <fifo_s_puts+0x3c>
    p_fifo->p_write_addr = p_fifo->p_start_addr;
 80136ac:	68fb      	ldr	r3, [r7, #12]
 80136ae:	681a      	ldr	r2, [r3, #0]
 80136b0:	68fb      	ldr	r3, [r7, #12]
 80136b2:	615a      	str	r2, [r3, #20]

  len = (len < p_fifo->free_num) ? len : p_fifo->free_num;
 80136b4:	68fb      	ldr	r3, [r7, #12]
 80136b6:	689b      	ldr	r3, [r3, #8]
 80136b8:	687a      	ldr	r2, [r7, #4]
 80136ba:	4293      	cmp	r3, r2
 80136bc:	bfa8      	it	ge
 80136be:	4613      	movge	r3, r2
 80136c0:	607b      	str	r3, [r7, #4]
  len_to_end = p_fifo->p_end_addr - p_fifo->p_write_addr + 1;
 80136c2:	68fb      	ldr	r3, [r7, #12]
 80136c4:	685a      	ldr	r2, [r3, #4]
 80136c6:	68fb      	ldr	r3, [r7, #12]
 80136c8:	695b      	ldr	r3, [r3, #20]
 80136ca:	1ad3      	subs	r3, r2, r3
 80136cc:	3301      	adds	r3, #1
 80136ce:	627b      	str	r3, [r7, #36]	; 0x24

  if (len_to_end >= len) //no rollback
 80136d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	429a      	cmp	r2, r3
 80136d6:	db0f      	blt.n	80136f8 <fifo_s_puts+0x80>
  {
    len_to_end = len;
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	627b      	str	r3, [r7, #36]	; 0x24
    memcpy(p_fifo->p_write_addr, p_source, len_to_end);
 80136dc:	68fb      	ldr	r3, [r7, #12]
 80136de:	695b      	ldr	r3, [r3, #20]
 80136e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80136e2:	68b9      	ldr	r1, [r7, #8]
 80136e4:	4618      	mov	r0, r3
 80136e6:	f001 f83d 	bl	8014764 <memcpy>
    p_fifo->p_write_addr += len_to_end;
 80136ea:	68fb      	ldr	r3, [r7, #12]
 80136ec:	695a      	ldr	r2, [r3, #20]
 80136ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136f0:	441a      	add	r2, r3
 80136f2:	68fb      	ldr	r3, [r7, #12]
 80136f4:	615a      	str	r2, [r3, #20]
 80136f6:	e019      	b.n	801372c <fifo_s_puts+0xb4>
  }
  else //rollback
  {
    len_from_start = len - len_to_end;
 80136f8:	687a      	ldr	r2, [r7, #4]
 80136fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136fc:	1ad3      	subs	r3, r2, r3
 80136fe:	623b      	str	r3, [r7, #32]
    memcpy(p_fifo->p_write_addr, p_source, len_to_end);
 8013700:	68fb      	ldr	r3, [r7, #12]
 8013702:	695b      	ldr	r3, [r3, #20]
 8013704:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013706:	68b9      	ldr	r1, [r7, #8]
 8013708:	4618      	mov	r0, r3
 801370a:	f001 f82b 	bl	8014764 <memcpy>
    memcpy(p_fifo->p_start_addr, p_source + len_to_end, len_from_start);
 801370e:	68fb      	ldr	r3, [r7, #12]
 8013710:	6818      	ldr	r0, [r3, #0]
 8013712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013714:	68ba      	ldr	r2, [r7, #8]
 8013716:	4413      	add	r3, r2
 8013718:	6a3a      	ldr	r2, [r7, #32]
 801371a:	4619      	mov	r1, r3
 801371c:	f001 f822 	bl	8014764 <memcpy>
    p_fifo->p_write_addr = p_fifo->p_start_addr + len_from_start;
 8013720:	68fb      	ldr	r3, [r7, #12]
 8013722:	681a      	ldr	r2, [r3, #0]
 8013724:	6a3b      	ldr	r3, [r7, #32]
 8013726:	441a      	add	r2, r3
 8013728:	68fb      	ldr	r3, [r7, #12]
 801372a:	615a      	str	r2, [r3, #20]
  }

  p_fifo->free_num -= len;
 801372c:	68fb      	ldr	r3, [r7, #12]
 801372e:	689a      	ldr	r2, [r3, #8]
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	1ad2      	subs	r2, r2, r3
 8013734:	68fb      	ldr	r3, [r7, #12]
 8013736:	609a      	str	r2, [r3, #8]
  p_fifo->used_num += len;
 8013738:	68fb      	ldr	r3, [r7, #12]
 801373a:	68da      	ldr	r2, [r3, #12]
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	441a      	add	r2, r3
 8013740:	68fb      	ldr	r3, [r7, #12]
 8013742:	60da      	str	r2, [r3, #12]
  retval = len;
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	61fb      	str	r3, [r7, #28]
 8013748:	617c      	str	r4, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801374a:	697b      	ldr	r3, [r7, #20]
 801374c:	f383 8810 	msr	PRIMASK, r3
}
 8013750:	bf00      	nop

  //Interrupt On
  FIFO_RESTORE_CPU_SR(cpu_sr);

  return retval;
 8013752:	69fb      	ldr	r3, [r7, #28]
 8013754:	e009      	b.n	801376a <fifo_s_puts+0xf2>
      goto end;
 8013756:	bf00      	nop
 8013758:	e000      	b.n	801375c <fifo_s_puts+0xe4>
      goto end;
 801375a:	bf00      	nop
 801375c:	613c      	str	r4, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801375e:	693b      	ldr	r3, [r7, #16]
 8013760:	f383 8810 	msr	PRIMASK, r3
}
 8013764:	bf00      	nop
end:
  //Interrupt On
  FIFO_RESTORE_CPU_SR(cpu_sr);
  return (-1);
 8013766:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801376a:	4618      	mov	r0, r3
 801376c:	372c      	adds	r7, #44	; 0x2c
 801376e:	46bd      	mov	sp, r7
 8013770:	bd90      	pop	{r4, r7, pc}

08013772 <fifo_s_puts_noprotect>:
//! \param  [in]  the number of elements
//! \retval the number of really write data, otherwise return -1.
//
//******************************************************************************************
int fifo_s_puts_noprotect(fifo_s_t *p_fifo, char *p_source, int len)
{
 8013772:	b580      	push	{r7, lr}
 8013774:	b088      	sub	sp, #32
 8013776:	af00      	add	r7, sp, #0
 8013778:	60f8      	str	r0, [r7, #12]
 801377a:	60b9      	str	r1, [r7, #8]
 801377c:	607a      	str	r2, [r7, #4]
  int len_to_end;
  int len_from_start;

  ASSERT(p_fifo);

  if (NULL == p_source)
 801377e:	68bb      	ldr	r3, [r7, #8]
 8013780:	2b00      	cmp	r3, #0
 8013782:	d102      	bne.n	801378a <fifo_s_puts_noprotect+0x18>
    return -1;
 8013784:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013788:	e05a      	b.n	8013840 <fifo_s_puts_noprotect+0xce>

  if (0 == p_fifo->free_num)
 801378a:	68fb      	ldr	r3, [r7, #12]
 801378c:	689b      	ldr	r3, [r3, #8]
 801378e:	2b00      	cmp	r3, #0
 8013790:	d101      	bne.n	8013796 <fifo_s_puts_noprotect+0x24>
    return 0;
 8013792:	2300      	movs	r3, #0
 8013794:	e054      	b.n	8013840 <fifo_s_puts_noprotect+0xce>

  if (p_fifo->p_write_addr > p_fifo->p_end_addr)
 8013796:	68fb      	ldr	r3, [r7, #12]
 8013798:	695a      	ldr	r2, [r3, #20]
 801379a:	68fb      	ldr	r3, [r7, #12]
 801379c:	685b      	ldr	r3, [r3, #4]
 801379e:	429a      	cmp	r2, r3
 80137a0:	d903      	bls.n	80137aa <fifo_s_puts_noprotect+0x38>
    p_fifo->p_write_addr = p_fifo->p_start_addr;
 80137a2:	68fb      	ldr	r3, [r7, #12]
 80137a4:	681a      	ldr	r2, [r3, #0]
 80137a6:	68fb      	ldr	r3, [r7, #12]
 80137a8:	615a      	str	r2, [r3, #20]

  len = (len < p_fifo->free_num) ? len : p_fifo->free_num;
 80137aa:	68fb      	ldr	r3, [r7, #12]
 80137ac:	689b      	ldr	r3, [r3, #8]
 80137ae:	687a      	ldr	r2, [r7, #4]
 80137b0:	4293      	cmp	r3, r2
 80137b2:	bfa8      	it	ge
 80137b4:	4613      	movge	r3, r2
 80137b6:	607b      	str	r3, [r7, #4]
  len_to_end = p_fifo->p_end_addr - p_fifo->p_write_addr + 1;
 80137b8:	68fb      	ldr	r3, [r7, #12]
 80137ba:	685a      	ldr	r2, [r3, #4]
 80137bc:	68fb      	ldr	r3, [r7, #12]
 80137be:	695b      	ldr	r3, [r3, #20]
 80137c0:	1ad3      	subs	r3, r2, r3
 80137c2:	3301      	adds	r3, #1
 80137c4:	61fb      	str	r3, [r7, #28]

  if (len_to_end >= len) //no rollback
 80137c6:	69fa      	ldr	r2, [r7, #28]
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	429a      	cmp	r2, r3
 80137cc:	db0f      	blt.n	80137ee <fifo_s_puts_noprotect+0x7c>
  {
    len_to_end = len;
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	61fb      	str	r3, [r7, #28]
    memcpy(p_fifo->p_write_addr, p_source, len_to_end);
 80137d2:	68fb      	ldr	r3, [r7, #12]
 80137d4:	695b      	ldr	r3, [r3, #20]
 80137d6:	69fa      	ldr	r2, [r7, #28]
 80137d8:	68b9      	ldr	r1, [r7, #8]
 80137da:	4618      	mov	r0, r3
 80137dc:	f000 ffc2 	bl	8014764 <memcpy>
    p_fifo->p_write_addr += len_to_end;
 80137e0:	68fb      	ldr	r3, [r7, #12]
 80137e2:	695a      	ldr	r2, [r3, #20]
 80137e4:	69fb      	ldr	r3, [r7, #28]
 80137e6:	441a      	add	r2, r3
 80137e8:	68fb      	ldr	r3, [r7, #12]
 80137ea:	615a      	str	r2, [r3, #20]
 80137ec:	e019      	b.n	8013822 <fifo_s_puts_noprotect+0xb0>
  }
  else //rollback
  {
    len_from_start = len - len_to_end;
 80137ee:	687a      	ldr	r2, [r7, #4]
 80137f0:	69fb      	ldr	r3, [r7, #28]
 80137f2:	1ad3      	subs	r3, r2, r3
 80137f4:	61bb      	str	r3, [r7, #24]
    memcpy(p_fifo->p_write_addr, p_source, len_to_end);
 80137f6:	68fb      	ldr	r3, [r7, #12]
 80137f8:	695b      	ldr	r3, [r3, #20]
 80137fa:	69fa      	ldr	r2, [r7, #28]
 80137fc:	68b9      	ldr	r1, [r7, #8]
 80137fe:	4618      	mov	r0, r3
 8013800:	f000 ffb0 	bl	8014764 <memcpy>
    memcpy(p_fifo->p_start_addr, p_source + len_to_end, len_from_start);
 8013804:	68fb      	ldr	r3, [r7, #12]
 8013806:	6818      	ldr	r0, [r3, #0]
 8013808:	69fb      	ldr	r3, [r7, #28]
 801380a:	68ba      	ldr	r2, [r7, #8]
 801380c:	4413      	add	r3, r2
 801380e:	69ba      	ldr	r2, [r7, #24]
 8013810:	4619      	mov	r1, r3
 8013812:	f000 ffa7 	bl	8014764 <memcpy>
    p_fifo->p_write_addr = p_fifo->p_start_addr + len_from_start;
 8013816:	68fb      	ldr	r3, [r7, #12]
 8013818:	681a      	ldr	r2, [r3, #0]
 801381a:	69bb      	ldr	r3, [r7, #24]
 801381c:	441a      	add	r2, r3
 801381e:	68fb      	ldr	r3, [r7, #12]
 8013820:	615a      	str	r2, [r3, #20]
  }

  p_fifo->free_num -= len;
 8013822:	68fb      	ldr	r3, [r7, #12]
 8013824:	689a      	ldr	r2, [r3, #8]
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	1ad2      	subs	r2, r2, r3
 801382a:	68fb      	ldr	r3, [r7, #12]
 801382c:	609a      	str	r2, [r3, #8]
  p_fifo->used_num += len;
 801382e:	68fb      	ldr	r3, [r7, #12]
 8013830:	68da      	ldr	r2, [r3, #12]
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	441a      	add	r2, r3
 8013836:	68fb      	ldr	r3, [r7, #12]
 8013838:	60da      	str	r2, [r3, #12]
  retval = len;
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	617b      	str	r3, [r7, #20]

  return retval;
 801383e:	697b      	ldr	r3, [r7, #20]
}
 8013840:	4618      	mov	r0, r3
 8013842:	3720      	adds	r7, #32
 8013844:	46bd      	mov	sp, r7
 8013846:	bd80      	pop	{r7, pc}

08013848 <fifo_s_get>:
//!
//! \retval the data element of FIFO.
//
//******************************************************************************************
char fifo_s_get(fifo_s_t *p_fifo)
{
 8013848:	b490      	push	{r4, r7}
 801384a:	b086      	sub	sp, #24
 801384c:	af00      	add	r7, sp, #0
 801384e:	6078      	str	r0, [r7, #4]
  FIFO_CPU_SR_TYPE cpu_sr;
  char retval = 0;
 8013850:	2300      	movs	r3, #0
 8013852:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8013854:	f3ef 8310 	mrs	r3, PRIMASK
 8013858:	613b      	str	r3, [r7, #16]
  return(result);
 801385a:	693b      	ldr	r3, [r7, #16]

  //! Check input parameters.
  ASSERT(p_fifo);

  //Interrupt Off;
  cpu_sr = FIFO_GET_CPU_SR();
 801385c:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 801385e:	b672      	cpsid	i
}
 8013860:	bf00      	nop
  FIFO_ENTER_CRITICAL();

  if (p_fifo->p_read_addr > p_fifo->p_end_addr)
 8013862:	687b      	ldr	r3, [r7, #4]
 8013864:	691a      	ldr	r2, [r3, #16]
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	685b      	ldr	r3, [r3, #4]
 801386a:	429a      	cmp	r2, r3
 801386c:	d903      	bls.n	8013876 <fifo_s_get+0x2e>
    p_fifo->p_read_addr = p_fifo->p_start_addr;
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	681a      	ldr	r2, [r3, #0]
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	611a      	str	r2, [r3, #16]

  retval = *p_fifo->p_read_addr;
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	691b      	ldr	r3, [r3, #16]
 801387a:	781b      	ldrb	r3, [r3, #0]
 801387c:	75fb      	strb	r3, [r7, #23]
  // Update information
  p_fifo->p_read_addr++;
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	691b      	ldr	r3, [r3, #16]
 8013882:	1c5a      	adds	r2, r3, #1
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	611a      	str	r2, [r3, #16]
  p_fifo->free_num++;
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	689b      	ldr	r3, [r3, #8]
 801388c:	1c5a      	adds	r2, r3, #1
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	609a      	str	r2, [r3, #8]
  p_fifo->used_num--;
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	68db      	ldr	r3, [r3, #12]
 8013896:	1e5a      	subs	r2, r3, #1
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	60da      	str	r2, [r3, #12]
 801389c:	60fc      	str	r4, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801389e:	68fb      	ldr	r3, [r7, #12]
 80138a0:	f383 8810 	msr	PRIMASK, r3
}
 80138a4:	bf00      	nop
  //Interrupt On
  FIFO_RESTORE_CPU_SR(cpu_sr);
  return (retval);
 80138a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80138a8:	4618      	mov	r0, r3
 80138aa:	3718      	adds	r7, #24
 80138ac:	46bd      	mov	sp, r7
 80138ae:	bc90      	pop	{r4, r7}
 80138b0:	4770      	bx	lr

080138b2 <fifo_s_gets>:
//!
//! \retval the number of really read data.
//
//******************************************************************************************
int fifo_s_gets(fifo_s_t *p_fifo, char *p_dest, int len)
{
 80138b2:	b590      	push	{r4, r7, lr}
 80138b4:	b08b      	sub	sp, #44	; 0x2c
 80138b6:	af00      	add	r7, sp, #0
 80138b8:	60f8      	str	r0, [r7, #12]
 80138ba:	60b9      	str	r1, [r7, #8]
 80138bc:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80138be:	f3ef 8310 	mrs	r3, PRIMASK
 80138c2:	61bb      	str	r3, [r7, #24]
  return(result);
 80138c4:	69bb      	ldr	r3, [r7, #24]
  int len_from_start;

  ASSERT(p_fifo);

  //Interrupt Off;
  cpu_sr = FIFO_GET_CPU_SR();
 80138c6:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 80138c8:	b672      	cpsid	i
}
 80138ca:	bf00      	nop
  FIFO_ENTER_CRITICAL();

  if (NULL == p_dest)
 80138cc:	68bb      	ldr	r3, [r7, #8]
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d05e      	beq.n	8013990 <fifo_s_gets+0xde>
  {
    goto end;
  }

  if (0 == p_fifo->used_num)
 80138d2:	68fb      	ldr	r3, [r7, #12]
 80138d4:	68db      	ldr	r3, [r3, #12]
 80138d6:	2b00      	cmp	r3, #0
 80138d8:	d05c      	beq.n	8013994 <fifo_s_gets+0xe2>
  {
    goto end;
  }

  if (p_fifo->p_read_addr > p_fifo->p_end_addr)
 80138da:	68fb      	ldr	r3, [r7, #12]
 80138dc:	691a      	ldr	r2, [r3, #16]
 80138de:	68fb      	ldr	r3, [r7, #12]
 80138e0:	685b      	ldr	r3, [r3, #4]
 80138e2:	429a      	cmp	r2, r3
 80138e4:	d903      	bls.n	80138ee <fifo_s_gets+0x3c>
    p_fifo->p_read_addr = p_fifo->p_start_addr;
 80138e6:	68fb      	ldr	r3, [r7, #12]
 80138e8:	681a      	ldr	r2, [r3, #0]
 80138ea:	68fb      	ldr	r3, [r7, #12]
 80138ec:	611a      	str	r2, [r3, #16]

  len = (len < p_fifo->used_num) ? len : p_fifo->used_num;
 80138ee:	68fb      	ldr	r3, [r7, #12]
 80138f0:	68db      	ldr	r3, [r3, #12]
 80138f2:	687a      	ldr	r2, [r7, #4]
 80138f4:	4293      	cmp	r3, r2
 80138f6:	bfa8      	it	ge
 80138f8:	4613      	movge	r3, r2
 80138fa:	607b      	str	r3, [r7, #4]
  len_to_end = p_fifo->p_end_addr - p_fifo->p_read_addr + 1;
 80138fc:	68fb      	ldr	r3, [r7, #12]
 80138fe:	685a      	ldr	r2, [r3, #4]
 8013900:	68fb      	ldr	r3, [r7, #12]
 8013902:	691b      	ldr	r3, [r3, #16]
 8013904:	1ad3      	subs	r3, r2, r3
 8013906:	3301      	adds	r3, #1
 8013908:	627b      	str	r3, [r7, #36]	; 0x24

  if (len_to_end >= len) //no rollback
 801390a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	429a      	cmp	r2, r3
 8013910:	db0f      	blt.n	8013932 <fifo_s_gets+0x80>
  {
    len_to_end = len;
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	627b      	str	r3, [r7, #36]	; 0x24
    memcpy(p_dest, p_fifo->p_read_addr, len_to_end);
 8013916:	68fb      	ldr	r3, [r7, #12]
 8013918:	691b      	ldr	r3, [r3, #16]
 801391a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801391c:	4619      	mov	r1, r3
 801391e:	68b8      	ldr	r0, [r7, #8]
 8013920:	f000 ff20 	bl	8014764 <memcpy>
    p_fifo->p_read_addr += len_to_end;
 8013924:	68fb      	ldr	r3, [r7, #12]
 8013926:	691a      	ldr	r2, [r3, #16]
 8013928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801392a:	441a      	add	r2, r3
 801392c:	68fb      	ldr	r3, [r7, #12]
 801392e:	611a      	str	r2, [r3, #16]
 8013930:	e019      	b.n	8013966 <fifo_s_gets+0xb4>
  }
  else //rollback
  {
    len_from_start = len - len_to_end;
 8013932:	687a      	ldr	r2, [r7, #4]
 8013934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013936:	1ad3      	subs	r3, r2, r3
 8013938:	623b      	str	r3, [r7, #32]
    memcpy(p_dest, p_fifo->p_read_addr, len_to_end);
 801393a:	68fb      	ldr	r3, [r7, #12]
 801393c:	691b      	ldr	r3, [r3, #16]
 801393e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013940:	4619      	mov	r1, r3
 8013942:	68b8      	ldr	r0, [r7, #8]
 8013944:	f000 ff0e 	bl	8014764 <memcpy>
    memcpy(p_dest + len_to_end, p_fifo->p_start_addr, len_from_start);
 8013948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801394a:	68ba      	ldr	r2, [r7, #8]
 801394c:	18d0      	adds	r0, r2, r3
 801394e:	68fb      	ldr	r3, [r7, #12]
 8013950:	681b      	ldr	r3, [r3, #0]
 8013952:	6a3a      	ldr	r2, [r7, #32]
 8013954:	4619      	mov	r1, r3
 8013956:	f000 ff05 	bl	8014764 <memcpy>
    p_fifo->p_read_addr = p_fifo->p_start_addr + len_from_start;
 801395a:	68fb      	ldr	r3, [r7, #12]
 801395c:	681a      	ldr	r2, [r3, #0]
 801395e:	6a3b      	ldr	r3, [r7, #32]
 8013960:	441a      	add	r2, r3
 8013962:	68fb      	ldr	r3, [r7, #12]
 8013964:	611a      	str	r2, [r3, #16]
  }

  p_fifo->free_num += len;
 8013966:	68fb      	ldr	r3, [r7, #12]
 8013968:	689a      	ldr	r2, [r3, #8]
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	441a      	add	r2, r3
 801396e:	68fb      	ldr	r3, [r7, #12]
 8013970:	609a      	str	r2, [r3, #8]
  p_fifo->used_num -= len;
 8013972:	68fb      	ldr	r3, [r7, #12]
 8013974:	68da      	ldr	r2, [r3, #12]
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	1ad2      	subs	r2, r2, r3
 801397a:	68fb      	ldr	r3, [r7, #12]
 801397c:	60da      	str	r2, [r3, #12]
  retval = len;
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	61fb      	str	r3, [r7, #28]
 8013982:	617c      	str	r4, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013984:	697b      	ldr	r3, [r7, #20]
 8013986:	f383 8810 	msr	PRIMASK, r3
}
 801398a:	bf00      	nop
  //Interrupt On
  FIFO_RESTORE_CPU_SR(cpu_sr);

  return retval;
 801398c:	69fb      	ldr	r3, [r7, #28]
 801398e:	e009      	b.n	80139a4 <fifo_s_gets+0xf2>
    goto end;
 8013990:	bf00      	nop
 8013992:	e000      	b.n	8013996 <fifo_s_gets+0xe4>
    goto end;
 8013994:	bf00      	nop
 8013996:	613c      	str	r4, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013998:	693b      	ldr	r3, [r7, #16]
 801399a:	f383 8810 	msr	PRIMASK, r3
}
 801399e:	bf00      	nop
end:
  //Interrupt On
  FIFO_RESTORE_CPU_SR(cpu_sr);
  return (-1);
 80139a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80139a4:	4618      	mov	r0, r3
 80139a6:	372c      	adds	r7, #44	; 0x2c
 80139a8:	46bd      	mov	sp, r7
 80139aa:	bd90      	pop	{r4, r7, pc}

080139ac <fifo_s_gets_noprotect>:
//!
//! \retval the number of really read data.
//
//******************************************************************************************
int fifo_s_gets_noprotect(fifo_s_t *p_fifo, char *p_dest, int len)
{
 80139ac:	b580      	push	{r7, lr}
 80139ae:	b088      	sub	sp, #32
 80139b0:	af00      	add	r7, sp, #0
 80139b2:	60f8      	str	r0, [r7, #12]
 80139b4:	60b9      	str	r1, [r7, #8]
 80139b6:	607a      	str	r2, [r7, #4]
  int len_to_end;
  int len_from_start;

  ASSERT(p_fifo);

  if (NULL == p_dest)
 80139b8:	68bb      	ldr	r3, [r7, #8]
 80139ba:	2b00      	cmp	r3, #0
 80139bc:	d102      	bne.n	80139c4 <fifo_s_gets_noprotect+0x18>
    return -1;
 80139be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80139c2:	e05a      	b.n	8013a7a <fifo_s_gets_noprotect+0xce>

  if (0 == p_fifo->used_num)
 80139c4:	68fb      	ldr	r3, [r7, #12]
 80139c6:	68db      	ldr	r3, [r3, #12]
 80139c8:	2b00      	cmp	r3, #0
 80139ca:	d101      	bne.n	80139d0 <fifo_s_gets_noprotect+0x24>
    return 0;
 80139cc:	2300      	movs	r3, #0
 80139ce:	e054      	b.n	8013a7a <fifo_s_gets_noprotect+0xce>

  if (p_fifo->p_read_addr > p_fifo->p_end_addr)
 80139d0:	68fb      	ldr	r3, [r7, #12]
 80139d2:	691a      	ldr	r2, [r3, #16]
 80139d4:	68fb      	ldr	r3, [r7, #12]
 80139d6:	685b      	ldr	r3, [r3, #4]
 80139d8:	429a      	cmp	r2, r3
 80139da:	d903      	bls.n	80139e4 <fifo_s_gets_noprotect+0x38>
    p_fifo->p_read_addr = p_fifo->p_start_addr;
 80139dc:	68fb      	ldr	r3, [r7, #12]
 80139de:	681a      	ldr	r2, [r3, #0]
 80139e0:	68fb      	ldr	r3, [r7, #12]
 80139e2:	611a      	str	r2, [r3, #16]

  len = (len < p_fifo->used_num) ? len : p_fifo->used_num;
 80139e4:	68fb      	ldr	r3, [r7, #12]
 80139e6:	68db      	ldr	r3, [r3, #12]
 80139e8:	687a      	ldr	r2, [r7, #4]
 80139ea:	4293      	cmp	r3, r2
 80139ec:	bfa8      	it	ge
 80139ee:	4613      	movge	r3, r2
 80139f0:	607b      	str	r3, [r7, #4]
  len_to_end = p_fifo->p_end_addr - p_fifo->p_read_addr + 1;
 80139f2:	68fb      	ldr	r3, [r7, #12]
 80139f4:	685a      	ldr	r2, [r3, #4]
 80139f6:	68fb      	ldr	r3, [r7, #12]
 80139f8:	691b      	ldr	r3, [r3, #16]
 80139fa:	1ad3      	subs	r3, r2, r3
 80139fc:	3301      	adds	r3, #1
 80139fe:	61fb      	str	r3, [r7, #28]

  if (len_to_end >= len) //no rollback
 8013a00:	69fa      	ldr	r2, [r7, #28]
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	429a      	cmp	r2, r3
 8013a06:	db0f      	blt.n	8013a28 <fifo_s_gets_noprotect+0x7c>
  {
    len_to_end = len;
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	61fb      	str	r3, [r7, #28]
    memcpy(p_dest, p_fifo->p_read_addr, len_to_end);
 8013a0c:	68fb      	ldr	r3, [r7, #12]
 8013a0e:	691b      	ldr	r3, [r3, #16]
 8013a10:	69fa      	ldr	r2, [r7, #28]
 8013a12:	4619      	mov	r1, r3
 8013a14:	68b8      	ldr	r0, [r7, #8]
 8013a16:	f000 fea5 	bl	8014764 <memcpy>
    p_fifo->p_read_addr += len_to_end;
 8013a1a:	68fb      	ldr	r3, [r7, #12]
 8013a1c:	691a      	ldr	r2, [r3, #16]
 8013a1e:	69fb      	ldr	r3, [r7, #28]
 8013a20:	441a      	add	r2, r3
 8013a22:	68fb      	ldr	r3, [r7, #12]
 8013a24:	611a      	str	r2, [r3, #16]
 8013a26:	e019      	b.n	8013a5c <fifo_s_gets_noprotect+0xb0>
  }
  else //rollback
  {
    len_from_start = len - len_to_end;
 8013a28:	687a      	ldr	r2, [r7, #4]
 8013a2a:	69fb      	ldr	r3, [r7, #28]
 8013a2c:	1ad3      	subs	r3, r2, r3
 8013a2e:	61bb      	str	r3, [r7, #24]
    memcpy(p_dest, p_fifo->p_read_addr, len_to_end);
 8013a30:	68fb      	ldr	r3, [r7, #12]
 8013a32:	691b      	ldr	r3, [r3, #16]
 8013a34:	69fa      	ldr	r2, [r7, #28]
 8013a36:	4619      	mov	r1, r3
 8013a38:	68b8      	ldr	r0, [r7, #8]
 8013a3a:	f000 fe93 	bl	8014764 <memcpy>
    memcpy(p_dest + len_to_end, p_fifo->p_start_addr, len_from_start);
 8013a3e:	69fb      	ldr	r3, [r7, #28]
 8013a40:	68ba      	ldr	r2, [r7, #8]
 8013a42:	18d0      	adds	r0, r2, r3
 8013a44:	68fb      	ldr	r3, [r7, #12]
 8013a46:	681b      	ldr	r3, [r3, #0]
 8013a48:	69ba      	ldr	r2, [r7, #24]
 8013a4a:	4619      	mov	r1, r3
 8013a4c:	f000 fe8a 	bl	8014764 <memcpy>
    p_fifo->p_read_addr = p_fifo->p_start_addr + len_from_start;
 8013a50:	68fb      	ldr	r3, [r7, #12]
 8013a52:	681a      	ldr	r2, [r3, #0]
 8013a54:	69bb      	ldr	r3, [r7, #24]
 8013a56:	441a      	add	r2, r3
 8013a58:	68fb      	ldr	r3, [r7, #12]
 8013a5a:	611a      	str	r2, [r3, #16]
  }

  p_fifo->free_num += len;
 8013a5c:	68fb      	ldr	r3, [r7, #12]
 8013a5e:	689a      	ldr	r2, [r3, #8]
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	441a      	add	r2, r3
 8013a64:	68fb      	ldr	r3, [r7, #12]
 8013a66:	609a      	str	r2, [r3, #8]
  p_fifo->used_num -= len;
 8013a68:	68fb      	ldr	r3, [r7, #12]
 8013a6a:	68da      	ldr	r2, [r3, #12]
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	1ad2      	subs	r2, r2, r3
 8013a70:	68fb      	ldr	r3, [r7, #12]
 8013a72:	60da      	str	r2, [r3, #12]
  retval = len;
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	617b      	str	r3, [r7, #20]

  return retval;
 8013a78:	697b      	ldr	r3, [r7, #20]
}
 8013a7a:	4618      	mov	r0, r3
 8013a7c:	3720      	adds	r7, #32
 8013a7e:	46bd      	mov	sp, r7
 8013a80:	bd80      	pop	{r7, pc}

08013a82 <fifo_s_preread>:
//!
//! \retval the data element of FIFO.
//
//******************************************************************************************
char fifo_s_preread(fifo_s_t *p_fifo, int offset)
{
 8013a82:	b480      	push	{r7}
 8013a84:	b085      	sub	sp, #20
 8013a86:	af00      	add	r7, sp, #0
 8013a88:	6078      	str	r0, [r7, #4]
 8013a8a:	6039      	str	r1, [r7, #0]
  char *tmp_read_addr;

  //! Check input parameters.
  ASSERT(p_fifo);

  if (offset > p_fifo->used_num)
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	68db      	ldr	r3, [r3, #12]
 8013a90:	683a      	ldr	r2, [r7, #0]
 8013a92:	429a      	cmp	r2, r3
 8013a94:	dd01      	ble.n	8013a9a <fifo_s_preread+0x18>
  {
    return 0;
 8013a96:	2300      	movs	r3, #0
 8013a98:	e014      	b.n	8013ac4 <fifo_s_preread+0x42>
  }
  else
  {
    // Move Read Pointer to right position
    tmp_read_addr = p_fifo->p_read_addr + offset;
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	691a      	ldr	r2, [r3, #16]
 8013a9e:	683b      	ldr	r3, [r7, #0]
 8013aa0:	4413      	add	r3, r2
 8013aa2:	60fb      	str	r3, [r7, #12]
    if (tmp_read_addr > p_fifo->p_end_addr)
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	685b      	ldr	r3, [r3, #4]
 8013aa8:	68fa      	ldr	r2, [r7, #12]
 8013aaa:	429a      	cmp	r2, r3
 8013aac:	d908      	bls.n	8013ac0 <fifo_s_preread+0x3e>
      tmp_read_addr = tmp_read_addr - p_fifo->p_end_addr + p_fifo->p_start_addr - 1;
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	681a      	ldr	r2, [r3, #0]
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	685b      	ldr	r3, [r3, #4]
 8013ab6:	68f9      	ldr	r1, [r7, #12]
 8013ab8:	1acb      	subs	r3, r1, r3
 8013aba:	3b01      	subs	r3, #1
 8013abc:	4413      	add	r3, r2
 8013abe:	60fb      	str	r3, [r7, #12]

    return *tmp_read_addr;
 8013ac0:	68fb      	ldr	r3, [r7, #12]
 8013ac2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013ac4:	4618      	mov	r0, r3
 8013ac6:	3714      	adds	r7, #20
 8013ac8:	46bd      	mov	sp, r7
 8013aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ace:	4770      	bx	lr

08013ad0 <fifo_s_prereads>:
 *
 *
 *
 */
int fifo_s_prereads(fifo_s_t *p_fifo, char *p_dest, int offset, int len)
{
 8013ad0:	b590      	push	{r4, r7, lr}
 8013ad2:	b08d      	sub	sp, #52	; 0x34
 8013ad4:	af00      	add	r7, sp, #0
 8013ad6:	60f8      	str	r0, [r7, #12]
 8013ad8:	60b9      	str	r1, [r7, #8]
 8013ada:	607a      	str	r2, [r7, #4]
 8013adc:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8013ade:	f3ef 8310 	mrs	r3, PRIMASK
 8013ae2:	61fb      	str	r3, [r7, #28]
  return(result);
 8013ae4:	69fb      	ldr	r3, [r7, #28]
  int len_from_start;

  ASSERT(p_fifo);

  //Interrupt Off;
  cpu_sr = FIFO_GET_CPU_SR();
 8013ae6:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 8013ae8:	b672      	cpsid	i
}
 8013aea:	bf00      	nop
  FIFO_ENTER_CRITICAL();

  if (NULL == p_dest)
 8013aec:	68bb      	ldr	r3, [r7, #8]
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	d053      	beq.n	8013b9a <fifo_s_prereads+0xca>
    goto end;

  if (0 == p_fifo->used_num)
 8013af2:	68fb      	ldr	r3, [r7, #12]
 8013af4:	68db      	ldr	r3, [r3, #12]
 8013af6:	2b00      	cmp	r3, #0
 8013af8:	d051      	beq.n	8013b9e <fifo_s_prereads+0xce>
    goto end;

  if (offset >= p_fifo->used_num)
 8013afa:	68fb      	ldr	r3, [r7, #12]
 8013afc:	68db      	ldr	r3, [r3, #12]
 8013afe:	687a      	ldr	r2, [r7, #4]
 8013b00:	429a      	cmp	r2, r3
 8013b02:	da4e      	bge.n	8013ba2 <fifo_s_prereads+0xd2>
    goto end;

  tmp_read_addr = p_fifo->p_read_addr + offset;
 8013b04:	68fb      	ldr	r3, [r7, #12]
 8013b06:	691a      	ldr	r2, [r3, #16]
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	4413      	add	r3, r2
 8013b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (tmp_read_addr > p_fifo->p_end_addr)
 8013b0e:	68fb      	ldr	r3, [r7, #12]
 8013b10:	685b      	ldr	r3, [r3, #4]
 8013b12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013b14:	429a      	cmp	r2, r3
 8013b16:	d908      	bls.n	8013b2a <fifo_s_prereads+0x5a>
    tmp_read_addr = tmp_read_addr - p_fifo->p_end_addr + p_fifo->p_start_addr - 1;
 8013b18:	68fb      	ldr	r3, [r7, #12]
 8013b1a:	681a      	ldr	r2, [r3, #0]
 8013b1c:	68fb      	ldr	r3, [r7, #12]
 8013b1e:	685b      	ldr	r3, [r3, #4]
 8013b20:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013b22:	1acb      	subs	r3, r1, r3
 8013b24:	3b01      	subs	r3, #1
 8013b26:	4413      	add	r3, r2
 8013b28:	62fb      	str	r3, [r7, #44]	; 0x2c

  len = (len < (p_fifo->used_num - offset)) ? len : (p_fifo->used_num - offset);
 8013b2a:	68fb      	ldr	r3, [r7, #12]
 8013b2c:	68da      	ldr	r2, [r3, #12]
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	1ad3      	subs	r3, r2, r3
 8013b32:	683a      	ldr	r2, [r7, #0]
 8013b34:	4293      	cmp	r3, r2
 8013b36:	bfa8      	it	ge
 8013b38:	4613      	movge	r3, r2
 8013b3a:	603b      	str	r3, [r7, #0]
  len_to_end = p_fifo->p_end_addr - tmp_read_addr + 1;
 8013b3c:	68fb      	ldr	r3, [r7, #12]
 8013b3e:	685a      	ldr	r2, [r3, #4]
 8013b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b42:	1ad3      	subs	r3, r2, r3
 8013b44:	3301      	adds	r3, #1
 8013b46:	62bb      	str	r3, [r7, #40]	; 0x28

  if (len_to_end >= len) //no rollback
 8013b48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013b4a:	683b      	ldr	r3, [r7, #0]
 8013b4c:	429a      	cmp	r2, r3
 8013b4e:	db08      	blt.n	8013b62 <fifo_s_prereads+0x92>
  {
    len_to_end = len;
 8013b50:	683b      	ldr	r3, [r7, #0]
 8013b52:	62bb      	str	r3, [r7, #40]	; 0x28
    memcpy(p_dest, tmp_read_addr, len_to_end);
 8013b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b56:	461a      	mov	r2, r3
 8013b58:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013b5a:	68b8      	ldr	r0, [r7, #8]
 8013b5c:	f000 fe02 	bl	8014764 <memcpy>
 8013b60:	e012      	b.n	8013b88 <fifo_s_prereads+0xb8>
  }
  else //rollback
  {
    len_from_start = len - len_to_end;
 8013b62:	683a      	ldr	r2, [r7, #0]
 8013b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b66:	1ad3      	subs	r3, r2, r3
 8013b68:	627b      	str	r3, [r7, #36]	; 0x24
    memcpy(p_dest, tmp_read_addr, len_to_end);
 8013b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b6c:	461a      	mov	r2, r3
 8013b6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013b70:	68b8      	ldr	r0, [r7, #8]
 8013b72:	f000 fdf7 	bl	8014764 <memcpy>
    memcpy(p_dest + len_to_end, p_fifo->p_start_addr, len_from_start);
 8013b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b78:	68ba      	ldr	r2, [r7, #8]
 8013b7a:	18d0      	adds	r0, r2, r3
 8013b7c:	68fb      	ldr	r3, [r7, #12]
 8013b7e:	681b      	ldr	r3, [r3, #0]
 8013b80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013b82:	4619      	mov	r1, r3
 8013b84:	f000 fdee 	bl	8014764 <memcpy>
  }

  retval = len;
 8013b88:	683b      	ldr	r3, [r7, #0]
 8013b8a:	623b      	str	r3, [r7, #32]
 8013b8c:	61bc      	str	r4, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013b8e:	69bb      	ldr	r3, [r7, #24]
 8013b90:	f383 8810 	msr	PRIMASK, r3
}
 8013b94:	bf00      	nop
  //Interrupt On
  FIFO_RESTORE_CPU_SR(cpu_sr);

  return retval;
 8013b96:	6a3b      	ldr	r3, [r7, #32]
 8013b98:	e00b      	b.n	8013bb2 <fifo_s_prereads+0xe2>
    goto end;
 8013b9a:	bf00      	nop
 8013b9c:	e002      	b.n	8013ba4 <fifo_s_prereads+0xd4>
    goto end;
 8013b9e:	bf00      	nop
 8013ba0:	e000      	b.n	8013ba4 <fifo_s_prereads+0xd4>
    goto end;
 8013ba2:	bf00      	nop
 8013ba4:	617c      	str	r4, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013ba6:	697b      	ldr	r3, [r7, #20]
 8013ba8:	f383 8810 	msr	PRIMASK, r3
}
 8013bac:	bf00      	nop
end:
  //Interrupt On
  FIFO_RESTORE_CPU_SR(cpu_sr);
  return (-1);
 8013bae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8013bb2:	4618      	mov	r0, r3
 8013bb4:	3734      	adds	r7, #52	; 0x34
 8013bb6:	46bd      	mov	sp, r7
 8013bb8:	bd90      	pop	{r4, r7, pc}

08013bba <fifo_s_isempty>:
//! \retval - None-zero(true) if empty.
//!         - Zero(false) if not empty.
//
//******************************************************************************************
char fifo_s_isempty(fifo_s_t *p_fifo)
{
 8013bba:	b480      	push	{r7}
 8013bbc:	b083      	sub	sp, #12
 8013bbe:	af00      	add	r7, sp, #0
 8013bc0:	6078      	str	r0, [r7, #4]
  //! Check input parameter.
  ASSERT(p_fifo);
  return (p_fifo->used_num ? 0 : 1);
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	68db      	ldr	r3, [r3, #12]
 8013bc6:	2b00      	cmp	r3, #0
 8013bc8:	bf0c      	ite	eq
 8013bca:	2301      	moveq	r3, #1
 8013bcc:	2300      	movne	r3, #0
 8013bce:	b2db      	uxtb	r3, r3
}
 8013bd0:	4618      	mov	r0, r3
 8013bd2:	370c      	adds	r7, #12
 8013bd4:	46bd      	mov	sp, r7
 8013bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bda:	4770      	bx	lr

08013bdc <fifo_init>:
//! \param  [in] UnitCnt is count of fifo elements.
//! \retval 0 if initialize successfully, otherwise return -1.
//
//******************************************************************************************
int fifo_init(fifo_t *p_fifo, void *p_base_addr, char unit_size, int unit_cnt)
{
 8013bdc:	b480      	push	{r7}
 8013bde:	b085      	sub	sp, #20
 8013be0:	af00      	add	r7, sp, #0
 8013be2:	60f8      	str	r0, [r7, #12]
 8013be4:	60b9      	str	r1, [r7, #8]
 8013be6:	603b      	str	r3, [r7, #0]
 8013be8:	4613      	mov	r3, r2
 8013bea:	71fb      	strb	r3, [r7, #7]
  ASSERT(p_base_addr);
  ASSERT(unit_size);
  ASSERT(unit_cnt);

  //! Initialize FIFO Control Block.
  p_fifo->p_start_addr = (char *)p_base_addr;
 8013bec:	68fb      	ldr	r3, [r7, #12]
 8013bee:	68ba      	ldr	r2, [r7, #8]
 8013bf0:	601a      	str	r2, [r3, #0]
  p_fifo->p_end_addr = (char *)p_base_addr + unit_size * unit_cnt - 1;
 8013bf2:	79fb      	ldrb	r3, [r7, #7]
 8013bf4:	683a      	ldr	r2, [r7, #0]
 8013bf6:	fb02 f303 	mul.w	r3, r2, r3
 8013bfa:	3b01      	subs	r3, #1
 8013bfc:	68ba      	ldr	r2, [r7, #8]
 8013bfe:	441a      	add	r2, r3
 8013c00:	68fb      	ldr	r3, [r7, #12]
 8013c02:	605a      	str	r2, [r3, #4]
  p_fifo->free_num = unit_cnt;
 8013c04:	68fb      	ldr	r3, [r7, #12]
 8013c06:	683a      	ldr	r2, [r7, #0]
 8013c08:	609a      	str	r2, [r3, #8]
  p_fifo->used_num = 0;
 8013c0a:	68fb      	ldr	r3, [r7, #12]
 8013c0c:	2200      	movs	r2, #0
 8013c0e:	60da      	str	r2, [r3, #12]
  p_fifo->unit_size = unit_size;
 8013c10:	79fa      	ldrb	r2, [r7, #7]
 8013c12:	68fb      	ldr	r3, [r7, #12]
 8013c14:	611a      	str	r2, [r3, #16]
  p_fifo->p_read_addr = (char *)p_base_addr;
 8013c16:	68fb      	ldr	r3, [r7, #12]
 8013c18:	68ba      	ldr	r2, [r7, #8]
 8013c1a:	615a      	str	r2, [r3, #20]
  p_fifo->p_write_addr = (char *)p_base_addr;
 8013c1c:	68fb      	ldr	r3, [r7, #12]
 8013c1e:	68ba      	ldr	r2, [r7, #8]
 8013c20:	619a      	str	r2, [r3, #24]

  return (0);
 8013c22:	2300      	movs	r3, #0
}
 8013c24:	4618      	mov	r0, r3
 8013c26:	3714      	adds	r7, #20
 8013c28:	46bd      	mov	sp, r7
 8013c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c2e:	4770      	bx	lr

08013c30 <fifo_put>:
//!
//! \retval 0 if operate successfully, otherwise return -1.
//
//******************************************************************************************
int fifo_put(fifo_t *p_fifo, void *p_element)
{
 8013c30:	b590      	push	{r4, r7, lr}
 8013c32:	b087      	sub	sp, #28
 8013c34:	af00      	add	r7, sp, #0
 8013c36:	6078      	str	r0, [r7, #4]
 8013c38:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8013c3a:	f3ef 8310 	mrs	r3, PRIMASK
 8013c3e:	617b      	str	r3, [r7, #20]
  return(result);
 8013c40:	697b      	ldr	r3, [r7, #20]
  FIFO_CPU_SR_TYPE cpu_sr;
  ASSERT(p_fifo);
  ASSERT(p_element);

    //Interrupt Off;
  cpu_sr = FIFO_GET_CPU_SR();
 8013c42:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 8013c44:	b672      	cpsid	i
}
 8013c46:	bf00      	nop
  FIFO_ENTER_CRITICAL();

  // Full ?
  if (0 == p_fifo->free_num)
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	689b      	ldr	r3, [r3, #8]
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d029      	beq.n	8013ca4 <fifo_put+0x74>
    goto end;
  }

  //! Copy Data

  if (p_fifo->p_write_addr > p_fifo->p_end_addr)
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	699a      	ldr	r2, [r3, #24]
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	685b      	ldr	r3, [r3, #4]
 8013c58:	429a      	cmp	r2, r3
 8013c5a:	d903      	bls.n	8013c64 <fifo_put+0x34>
    p_fifo->p_write_addr = p_fifo->p_start_addr;
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	681a      	ldr	r2, [r3, #0]
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	619a      	str	r2, [r3, #24]

  memcpy(p_fifo->p_write_addr, p_element, p_fifo->unit_size);
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	6998      	ldr	r0, [r3, #24]
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	691b      	ldr	r3, [r3, #16]
 8013c6c:	461a      	mov	r2, r3
 8013c6e:	6839      	ldr	r1, [r7, #0]
 8013c70:	f000 fd78 	bl	8014764 <memcpy>
  p_fifo->p_write_addr += p_fifo->unit_size;
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	699b      	ldr	r3, [r3, #24]
 8013c78:	687a      	ldr	r2, [r7, #4]
 8013c7a:	6912      	ldr	r2, [r2, #16]
 8013c7c:	441a      	add	r2, r3
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	619a      	str	r2, [r3, #24]
  p_fifo->free_num--;
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	689b      	ldr	r3, [r3, #8]
 8013c86:	1e5a      	subs	r2, r3, #1
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	609a      	str	r2, [r3, #8]
  p_fifo->used_num++;
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	68db      	ldr	r3, [r3, #12]
 8013c90:	1c5a      	adds	r2, r3, #1
 8013c92:	687b      	ldr	r3, [r7, #4]
 8013c94:	60da      	str	r2, [r3, #12]
 8013c96:	613c      	str	r4, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013c98:	693b      	ldr	r3, [r7, #16]
 8013c9a:	f383 8810 	msr	PRIMASK, r3
}
 8013c9e:	bf00      	nop
  //Interrupt On
  FIFO_RESTORE_CPU_SR(cpu_sr);
  return (0);
 8013ca0:	2300      	movs	r3, #0
 8013ca2:	e007      	b.n	8013cb4 <fifo_put+0x84>
    goto end;
 8013ca4:	bf00      	nop
 8013ca6:	60fc      	str	r4, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013ca8:	68fb      	ldr	r3, [r7, #12]
 8013caa:	f383 8810 	msr	PRIMASK, r3
}
 8013cae:	bf00      	nop
end:
  //Interrupt On
  FIFO_RESTORE_CPU_SR(cpu_sr);
  return (-1);
 8013cb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8013cb4:	4618      	mov	r0, r3
 8013cb6:	371c      	adds	r7, #28
 8013cb8:	46bd      	mov	sp, r7
 8013cba:	bd90      	pop	{r4, r7, pc}

08013cbc <fifo_get>:
//!
//! \retval 0 if operate successfully, otherwise return -1.
//
//******************************************************************************************
int fifo_get(fifo_t *p_fifo, void *p_element)
{
 8013cbc:	b590      	push	{r4, r7, lr}
 8013cbe:	b087      	sub	sp, #28
 8013cc0:	af00      	add	r7, sp, #0
 8013cc2:	6078      	str	r0, [r7, #4]
 8013cc4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8013cc6:	f3ef 8310 	mrs	r3, PRIMASK
 8013cca:	617b      	str	r3, [r7, #20]
  return(result);
 8013ccc:	697b      	ldr	r3, [r7, #20]
  //! Check input parameters.
  ASSERT(p_fifo);
  ASSERT(p_element);
  
      //Interrupt Off;
  cpu_sr = FIFO_GET_CPU_SR();
 8013cce:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 8013cd0:	b672      	cpsid	i
}
 8013cd2:	bf00      	nop
  FIFO_ENTER_CRITICAL();

  // Empty ?
  if (0 == p_fifo->used_num)
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	68db      	ldr	r3, [r3, #12]
 8013cd8:	2b00      	cmp	r3, #0
 8013cda:	d029      	beq.n	8013d30 <fifo_get+0x74>
    goto end;
  }

  //! Copy Data

  if (p_fifo->p_read_addr > p_fifo->p_end_addr)
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	695a      	ldr	r2, [r3, #20]
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	685b      	ldr	r3, [r3, #4]
 8013ce4:	429a      	cmp	r2, r3
 8013ce6:	d903      	bls.n	8013cf0 <fifo_get+0x34>
  {
    p_fifo->p_read_addr = p_fifo->p_start_addr;
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	681a      	ldr	r2, [r3, #0]
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	615a      	str	r2, [r3, #20]
  }
  memcpy(p_element, p_fifo->p_read_addr, p_fifo->unit_size);
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	6959      	ldr	r1, [r3, #20]
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	691b      	ldr	r3, [r3, #16]
 8013cf8:	461a      	mov	r2, r3
 8013cfa:	6838      	ldr	r0, [r7, #0]
 8013cfc:	f000 fd32 	bl	8014764 <memcpy>
  p_fifo->p_read_addr += p_fifo->unit_size;
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	695b      	ldr	r3, [r3, #20]
 8013d04:	687a      	ldr	r2, [r7, #4]
 8013d06:	6912      	ldr	r2, [r2, #16]
 8013d08:	441a      	add	r2, r3
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	615a      	str	r2, [r3, #20]
  p_fifo->free_num++;
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	689b      	ldr	r3, [r3, #8]
 8013d12:	1c5a      	adds	r2, r3, #1
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	609a      	str	r2, [r3, #8]
  p_fifo->used_num--;
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	68db      	ldr	r3, [r3, #12]
 8013d1c:	1e5a      	subs	r2, r3, #1
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	60da      	str	r2, [r3, #12]
 8013d22:	613c      	str	r4, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013d24:	693b      	ldr	r3, [r7, #16]
 8013d26:	f383 8810 	msr	PRIMASK, r3
}
 8013d2a:	bf00      	nop
  //Interrupt On
  FIFO_RESTORE_CPU_SR(cpu_sr);
  return (0);
 8013d2c:	2300      	movs	r3, #0
 8013d2e:	e007      	b.n	8013d40 <fifo_get+0x84>
    goto end;
 8013d30:	bf00      	nop
 8013d32:	60fc      	str	r4, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013d34:	68fb      	ldr	r3, [r7, #12]
 8013d36:	f383 8810 	msr	PRIMASK, r3
}
 8013d3a:	bf00      	nop
end:
  //Interrupt On
  FIFO_RESTORE_CPU_SR(cpu_sr);
  return (-1);
 8013d3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8013d40:	4618      	mov	r0, r3
 8013d42:	371c      	adds	r7, #28
 8013d44:	46bd      	mov	sp, r7
 8013d46:	bd90      	pop	{r4, r7, pc}

08013d48 <fifo_get_noprotect>:
//!
//! \retval 0 if operate successfully, otherwise return -1.
//
//******************************************************************************************
int fifo_get_noprotect(fifo_t *p_fifo, void *p_element)
{
 8013d48:	b580      	push	{r7, lr}
 8013d4a:	b082      	sub	sp, #8
 8013d4c:	af00      	add	r7, sp, #0
 8013d4e:	6078      	str	r0, [r7, #4]
 8013d50:	6039      	str	r1, [r7, #0]
  //! Check input parameters.
  ASSERT(p_fifo);
  ASSERT(p_element);

  // Empty ?
  if (0 == p_fifo->used_num)
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	68db      	ldr	r3, [r3, #12]
 8013d56:	2b00      	cmp	r3, #0
 8013d58:	d102      	bne.n	8013d60 <fifo_get_noprotect+0x18>
  {
    //! Error, FIFO is Empty!
    return (-1);
 8013d5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013d5e:	e023      	b.n	8013da8 <fifo_get_noprotect+0x60>
  }

  //! Copy Data
  if (p_fifo->p_read_addr > p_fifo->p_end_addr)
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	695a      	ldr	r2, [r3, #20]
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	685b      	ldr	r3, [r3, #4]
 8013d68:	429a      	cmp	r2, r3
 8013d6a:	d903      	bls.n	8013d74 <fifo_get_noprotect+0x2c>
  {
    p_fifo->p_read_addr = p_fifo->p_start_addr;
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	681a      	ldr	r2, [r3, #0]
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	615a      	str	r2, [r3, #20]
  }
  memcpy(p_element, p_fifo->p_read_addr, p_fifo->unit_size);
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	6959      	ldr	r1, [r3, #20]
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	691b      	ldr	r3, [r3, #16]
 8013d7c:	461a      	mov	r2, r3
 8013d7e:	6838      	ldr	r0, [r7, #0]
 8013d80:	f000 fcf0 	bl	8014764 <memcpy>
  p_fifo->p_read_addr += p_fifo->unit_size;
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	695b      	ldr	r3, [r3, #20]
 8013d88:	687a      	ldr	r2, [r7, #4]
 8013d8a:	6912      	ldr	r2, [r2, #16]
 8013d8c:	441a      	add	r2, r3
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	615a      	str	r2, [r3, #20]
  p_fifo->free_num++;
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	689b      	ldr	r3, [r3, #8]
 8013d96:	1c5a      	adds	r2, r3, #1
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	609a      	str	r2, [r3, #8]
  p_fifo->used_num--;
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	68db      	ldr	r3, [r3, #12]
 8013da0:	1e5a      	subs	r2, r3, #1
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	60da      	str	r2, [r3, #12]

  return (0);
 8013da6:	2300      	movs	r3, #0
}
 8013da8:	4618      	mov	r0, r3
 8013daa:	3708      	adds	r7, #8
 8013dac:	46bd      	mov	sp, r7
 8013dae:	bd80      	pop	{r7, pc}

08013db0 <fifo_is_empty>:
//! \retval - None-zero(true) if empty.
//!         - Zero(false) if not empty.
//
//******************************************************************************************
int fifo_is_empty(fifo_t *p_fifo)
{
 8013db0:	b480      	push	{r7}
 8013db2:	b083      	sub	sp, #12
 8013db4:	af00      	add	r7, sp, #0
 8013db6:	6078      	str	r0, [r7, #4]
  //! Check input parameter.
  ASSERT(p_fifo);

  return (0 == p_fifo->used_num);
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	68db      	ldr	r3, [r3, #12]
 8013dbc:	2b00      	cmp	r3, #0
 8013dbe:	bf0c      	ite	eq
 8013dc0:	2301      	moveq	r3, #1
 8013dc2:	2300      	movne	r3, #0
 8013dc4:	b2db      	uxtb	r3, r3
}
 8013dc6:	4618      	mov	r0, r3
 8013dc8:	370c      	adds	r7, #12
 8013dca:	46bd      	mov	sp, r7
 8013dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dd0:	4770      	bx	lr

08013dd2 <fifo_is_full>:
//! \retval - None-zero(true) if full.
//!         - Zero(false) if not full.
//
//******************************************************************************************
int fifo_is_full(fifo_t *p_fifo)
{
 8013dd2:	b480      	push	{r7}
 8013dd4:	b083      	sub	sp, #12
 8013dd6:	af00      	add	r7, sp, #0
 8013dd8:	6078      	str	r0, [r7, #4]
  //! Check input parameter.
  ASSERT(p_fifo);

  return (0 == p_fifo->free_num);
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	689b      	ldr	r3, [r3, #8]
 8013dde:	2b00      	cmp	r3, #0
 8013de0:	bf0c      	ite	eq
 8013de2:	2301      	moveq	r3, #1
 8013de4:	2300      	movne	r3, #0
 8013de6:	b2db      	uxtb	r3, r3
}
 8013de8:	4618      	mov	r0, r3
 8013dea:	370c      	adds	r7, #12
 8013dec:	46bd      	mov	sp, r7
 8013dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013df2:	4770      	bx	lr

08013df4 <heap_malloc>:
static uint32_t block_allocated_bit = 0;

/*-----------------------------------------------------------*/

void *heap_malloc(uint32_t wanted_size)
{
 8013df4:	b580      	push	{r7, lr}
 8013df6:	b088      	sub	sp, #32
 8013df8:	af00      	add	r7, sp, #0
 8013dfa:	6078      	str	r0, [r7, #4]
  block_link_t *block, *prev_block, *new_block;
  void *reval = NULL;
 8013dfc:	2300      	movs	r3, #0
 8013dfe:	617b      	str	r3, [r7, #20]

  if (mutex_init == 0)
 8013e00:	4b4a      	ldr	r3, [pc, #296]	; (8013f2c <heap_malloc+0x138>)
 8013e02:	781b      	ldrb	r3, [r3, #0]
 8013e04:	2b00      	cmp	r3, #0
 8013e06:	d102      	bne.n	8013e0e <heap_malloc+0x1a>
  {
    mutex_init = 1;
 8013e08:	4b48      	ldr	r3, [pc, #288]	; (8013f2c <heap_malloc+0x138>)
 8013e0a:	2201      	movs	r2, #1
 8013e0c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8013e0e:	f3ef 8310 	mrs	r3, PRIMASK
 8013e12:	60fb      	str	r3, [r7, #12]
  return(result);
 8013e14:	68fb      	ldr	r3, [r7, #12]
    MUTEX_INIT(mem_mutex);
  }

  MUTEX_LOCK(mem_mutex);
 8013e16:	4a46      	ldr	r2, [pc, #280]	; (8013f30 <heap_malloc+0x13c>)
 8013e18:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8013e1a:	b672      	cpsid	i
}
 8013e1c:	bf00      	nop
  {
    /* If this is the first call to malloc then the heap will require
        initialisation to setup the list of free blocks. */
    if (end == NULL)
 8013e1e:	4b45      	ldr	r3, [pc, #276]	; (8013f34 <heap_malloc+0x140>)
 8013e20:	681b      	ldr	r3, [r3, #0]
 8013e22:	2b00      	cmp	r3, #0
 8013e24:	d101      	bne.n	8013e2a <heap_malloc+0x36>
    {
      heap_init();
 8013e26:	f000 f8d5 	bl	8013fd4 <heap_init>

    /* Check the requested block size is not so large that the top bit is
        set.  The top bit of the block size member of the block_link_t structure
        is used to determine who owns the block - the application or the
        kernel, so it must be free. */
    if ((wanted_size & block_allocated_bit) == 0)
 8013e2a:	4b43      	ldr	r3, [pc, #268]	; (8013f38 <heap_malloc+0x144>)
 8013e2c:	681a      	ldr	r2, [r3, #0]
 8013e2e:	687b      	ldr	r3, [r7, #4]
 8013e30:	4013      	ands	r3, r2
 8013e32:	2b00      	cmp	r3, #0
 8013e34:	d16d      	bne.n	8013f12 <heap_malloc+0x11e>
    {
      /* The wanted size is increased so it can contain a block_link_t
            structure in addition to the requested amount of bytes. */
      if (wanted_size > 0)
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	d00d      	beq.n	8013e58 <heap_malloc+0x64>
      {
        wanted_size += STRUCT_SIZE;
 8013e3c:	2208      	movs	r2, #8
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	4413      	add	r3, r2
 8013e42:	607b      	str	r3, [r7, #4]

        /* Ensure that blocks are always aligned to the required number
                of bytes. */
        if ((wanted_size & BYTE_ALIGNMENT_MASK) != 0x00)
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	f003 0307 	and.w	r3, r3, #7
 8013e4a:	2b00      	cmp	r3, #0
 8013e4c:	d004      	beq.n	8013e58 <heap_malloc+0x64>
        {
          /* Byte alignment required. */
          wanted_size += (BYTE_ALIGNMENT - (wanted_size & BYTE_ALIGNMENT_MASK));
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	f023 0307 	bic.w	r3, r3, #7
 8013e54:	3308      	adds	r3, #8
 8013e56:	607b      	str	r3, [r7, #4]
          HEAP_ASSERT((wanted_size & BYTE_ALIGNMENT_MASK) == 0);
        }
      }

      if ((wanted_size > 0) && (wanted_size <= free_bytes_remain))
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d059      	beq.n	8013f12 <heap_malloc+0x11e>
 8013e5e:	4b37      	ldr	r3, [pc, #220]	; (8013f3c <heap_malloc+0x148>)
 8013e60:	681b      	ldr	r3, [r3, #0]
 8013e62:	687a      	ldr	r2, [r7, #4]
 8013e64:	429a      	cmp	r2, r3
 8013e66:	d854      	bhi.n	8013f12 <heap_malloc+0x11e>
      {
        /* Traverse the list from the start    (lowest address) block until
                one    of adequate size is found. */
        prev_block = &start;
 8013e68:	4b35      	ldr	r3, [pc, #212]	; (8013f40 <heap_malloc+0x14c>)
 8013e6a:	61bb      	str	r3, [r7, #24]
        block = start.next_free;
 8013e6c:	4b34      	ldr	r3, [pc, #208]	; (8013f40 <heap_malloc+0x14c>)
 8013e6e:	681b      	ldr	r3, [r3, #0]
 8013e70:	61fb      	str	r3, [r7, #28]
        while ((block->block_size < wanted_size) && (block->next_free != NULL))
 8013e72:	e004      	b.n	8013e7e <heap_malloc+0x8a>
        {
          prev_block = block;
 8013e74:	69fb      	ldr	r3, [r7, #28]
 8013e76:	61bb      	str	r3, [r7, #24]
          block = block->next_free;
 8013e78:	69fb      	ldr	r3, [r7, #28]
 8013e7a:	681b      	ldr	r3, [r3, #0]
 8013e7c:	61fb      	str	r3, [r7, #28]
        while ((block->block_size < wanted_size) && (block->next_free != NULL))
 8013e7e:	69fb      	ldr	r3, [r7, #28]
 8013e80:	685b      	ldr	r3, [r3, #4]
 8013e82:	687a      	ldr	r2, [r7, #4]
 8013e84:	429a      	cmp	r2, r3
 8013e86:	d903      	bls.n	8013e90 <heap_malloc+0x9c>
 8013e88:	69fb      	ldr	r3, [r7, #28]
 8013e8a:	681b      	ldr	r3, [r3, #0]
 8013e8c:	2b00      	cmp	r3, #0
 8013e8e:	d1f1      	bne.n	8013e74 <heap_malloc+0x80>
        }

        /* If the end marker was reached then a block of adequate size
                was    not found. */
        if (block != end)
 8013e90:	4b28      	ldr	r3, [pc, #160]	; (8013f34 <heap_malloc+0x140>)
 8013e92:	681b      	ldr	r3, [r3, #0]
 8013e94:	69fa      	ldr	r2, [r7, #28]
 8013e96:	429a      	cmp	r2, r3
 8013e98:	d03b      	beq.n	8013f12 <heap_malloc+0x11e>
        {
          /* Return the memory space pointed to - jumping over the
                    block_link_t structure at its start. */
          reval = (void *)(((uint8_t *)prev_block->next_free) + STRUCT_SIZE);
 8013e9a:	69bb      	ldr	r3, [r7, #24]
 8013e9c:	681b      	ldr	r3, [r3, #0]
 8013e9e:	2208      	movs	r2, #8
 8013ea0:	4413      	add	r3, r2
 8013ea2:	617b      	str	r3, [r7, #20]

          /* This block is being returned for use so must be taken out
                    of the list of free blocks. */
          prev_block->next_free = block->next_free;
 8013ea4:	69fb      	ldr	r3, [r7, #28]
 8013ea6:	681a      	ldr	r2, [r3, #0]
 8013ea8:	69bb      	ldr	r3, [r7, #24]
 8013eaa:	601a      	str	r2, [r3, #0]

          /* If the block is larger than required it can be split into
                    two. */
          if ((block->block_size - wanted_size) > MINIMUM_BLOCK_SIZE)
 8013eac:	69fb      	ldr	r3, [r7, #28]
 8013eae:	685a      	ldr	r2, [r3, #4]
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	1ad2      	subs	r2, r2, r3
 8013eb4:	2308      	movs	r3, #8
 8013eb6:	005b      	lsls	r3, r3, #1
 8013eb8:	429a      	cmp	r2, r3
 8013eba:	d90f      	bls.n	8013edc <heap_malloc+0xe8>
          {
            /* This block is to be split into two.  Create a new
                        block following the number of bytes requested. The void
                        cast is used to prevent byte alignment warnings from the
                        compiler. */
            new_block = (void *)(((uint8_t *)block) + wanted_size);
 8013ebc:	69fa      	ldr	r2, [r7, #28]
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	4413      	add	r3, r2
 8013ec2:	613b      	str	r3, [r7, #16]
            HEAP_ASSERT((((uint32_t)new_block) & BYTE_ALIGNMENT_MASK) == 0);

            /* Calculate the sizes of two blocks split from the
                        single block. */
            new_block->block_size = block->block_size - wanted_size;
 8013ec4:	69fb      	ldr	r3, [r7, #28]
 8013ec6:	685a      	ldr	r2, [r3, #4]
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	1ad2      	subs	r2, r2, r3
 8013ecc:	693b      	ldr	r3, [r7, #16]
 8013ece:	605a      	str	r2, [r3, #4]
            block->block_size = wanted_size;
 8013ed0:	69fb      	ldr	r3, [r7, #28]
 8013ed2:	687a      	ldr	r2, [r7, #4]
 8013ed4:	605a      	str	r2, [r3, #4]

            /* Insert the new block into the list of free blocks. */
            insert_into_free_list(new_block);
 8013ed6:	6938      	ldr	r0, [r7, #16]
 8013ed8:	f000 f8de 	bl	8014098 <insert_into_free_list>
          }

          free_bytes_remain -= block->block_size;
 8013edc:	4b17      	ldr	r3, [pc, #92]	; (8013f3c <heap_malloc+0x148>)
 8013ede:	681a      	ldr	r2, [r3, #0]
 8013ee0:	69fb      	ldr	r3, [r7, #28]
 8013ee2:	685b      	ldr	r3, [r3, #4]
 8013ee4:	1ad3      	subs	r3, r2, r3
 8013ee6:	4a15      	ldr	r2, [pc, #84]	; (8013f3c <heap_malloc+0x148>)
 8013ee8:	6013      	str	r3, [r2, #0]

          if (free_bytes_remain < ever_free_bytes_remain)
 8013eea:	4b14      	ldr	r3, [pc, #80]	; (8013f3c <heap_malloc+0x148>)
 8013eec:	681a      	ldr	r2, [r3, #0]
 8013eee:	4b15      	ldr	r3, [pc, #84]	; (8013f44 <heap_malloc+0x150>)
 8013ef0:	681b      	ldr	r3, [r3, #0]
 8013ef2:	429a      	cmp	r2, r3
 8013ef4:	d203      	bcs.n	8013efe <heap_malloc+0x10a>
          {
            ever_free_bytes_remain = free_bytes_remain;
 8013ef6:	4b11      	ldr	r3, [pc, #68]	; (8013f3c <heap_malloc+0x148>)
 8013ef8:	681b      	ldr	r3, [r3, #0]
 8013efa:	4a12      	ldr	r2, [pc, #72]	; (8013f44 <heap_malloc+0x150>)
 8013efc:	6013      	str	r3, [r2, #0]
          }

          /* The block is being returned - it is allocated and owned
                    by the application and has no "next" block. */
          block->block_size |= block_allocated_bit;
 8013efe:	69fb      	ldr	r3, [r7, #28]
 8013f00:	685a      	ldr	r2, [r3, #4]
 8013f02:	4b0d      	ldr	r3, [pc, #52]	; (8013f38 <heap_malloc+0x144>)
 8013f04:	681b      	ldr	r3, [r3, #0]
 8013f06:	431a      	orrs	r2, r3
 8013f08:	69fb      	ldr	r3, [r7, #28]
 8013f0a:	605a      	str	r2, [r3, #4]
          block->next_free = NULL;
 8013f0c:	69fb      	ldr	r3, [r7, #28]
 8013f0e:	2200      	movs	r2, #0
 8013f10:	601a      	str	r2, [r3, #0]
        }
      }
    }
  }
  MUTEX_UNLOCK(mem_mutex);
 8013f12:	4b07      	ldr	r3, [pc, #28]	; (8013f30 <heap_malloc+0x13c>)
 8013f14:	681b      	ldr	r3, [r3, #0]
 8013f16:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013f18:	68bb      	ldr	r3, [r7, #8]
 8013f1a:	f383 8810 	msr	PRIMASK, r3
}
 8013f1e:	bf00      	nop

  HEAP_ASSERT((((uint32_t)reval) & (uint32_t)BYTE_ALIGNMENT_MASK) == 0);
  return reval;
 8013f20:	697b      	ldr	r3, [r7, #20]
}
 8013f22:	4618      	mov	r0, r3
 8013f24:	3720      	adds	r7, #32
 8013f26:	46bd      	mov	sp, r7
 8013f28:	bd80      	pop	{r7, pc}
 8013f2a:	bf00      	nop
 8013f2c:	20016d78 	.word	0x20016d78
 8013f30:	20007d74 	.word	0x20007d74
 8013f34:	20016d84 	.word	0x20016d84
 8013f38:	20016d90 	.word	0x20016d90
 8013f3c:	20016d88 	.word	0x20016d88
 8013f40:	20016d7c 	.word	0x20016d7c
 8013f44:	20016d8c 	.word	0x20016d8c

08013f48 <heap_free>:
/*-----------------------------------------------------------*/

void heap_free(void *pv)
{
 8013f48:	b580      	push	{r7, lr}
 8013f4a:	b086      	sub	sp, #24
 8013f4c:	af00      	add	r7, sp, #0
 8013f4e:	6078      	str	r0, [r7, #4]
  uint8_t *puc = (uint8_t *)pv;
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8013f54:	f3ef 8310 	mrs	r3, PRIMASK
 8013f58:	60fb      	str	r3, [r7, #12]
  return(result);
 8013f5a:	68fb      	ldr	r3, [r7, #12]
  block_link_t *block;

  MUTEX_LOCK(mem_mutex);
 8013f5c:	4a1a      	ldr	r2, [pc, #104]	; (8013fc8 <heap_free+0x80>)
 8013f5e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8013f60:	b672      	cpsid	i
}
 8013f62:	bf00      	nop

  if (pv != NULL)
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	2b00      	cmp	r3, #0
 8013f68:	d023      	beq.n	8013fb2 <heap_free+0x6a>
  {
    /* The memory being freed will have an block_link_t structure immediately
        before it. */
    puc -= STRUCT_SIZE;
 8013f6a:	2308      	movs	r3, #8
 8013f6c:	425b      	negs	r3, r3
 8013f6e:	697a      	ldr	r2, [r7, #20]
 8013f70:	4413      	add	r3, r2
 8013f72:	617b      	str	r3, [r7, #20]

    /* This casting is to keep the compiler from issuing warnings. */
    block = (void *)puc;
 8013f74:	697b      	ldr	r3, [r7, #20]
 8013f76:	613b      	str	r3, [r7, #16]

    /* Check the block is actually allocated. */
    HEAP_ASSERT((block->block_size & block_allocated_bit) != 0);
    HEAP_ASSERT(block->next_free == NULL);

    if ((block->block_size & block_allocated_bit) != 0)
 8013f78:	693b      	ldr	r3, [r7, #16]
 8013f7a:	685a      	ldr	r2, [r3, #4]
 8013f7c:	4b13      	ldr	r3, [pc, #76]	; (8013fcc <heap_free+0x84>)
 8013f7e:	681b      	ldr	r3, [r3, #0]
 8013f80:	4013      	ands	r3, r2
 8013f82:	2b00      	cmp	r3, #0
 8013f84:	d015      	beq.n	8013fb2 <heap_free+0x6a>
    {
      if (block->next_free == NULL)
 8013f86:	693b      	ldr	r3, [r7, #16]
 8013f88:	681b      	ldr	r3, [r3, #0]
 8013f8a:	2b00      	cmp	r3, #0
 8013f8c:	d111      	bne.n	8013fb2 <heap_free+0x6a>
      {
        /* The block is being returned to the heap - it is no longer
                allocated. */
        block->block_size &= ~block_allocated_bit;
 8013f8e:	693b      	ldr	r3, [r7, #16]
 8013f90:	685a      	ldr	r2, [r3, #4]
 8013f92:	4b0e      	ldr	r3, [pc, #56]	; (8013fcc <heap_free+0x84>)
 8013f94:	681b      	ldr	r3, [r3, #0]
 8013f96:	43db      	mvns	r3, r3
 8013f98:	401a      	ands	r2, r3
 8013f9a:	693b      	ldr	r3, [r7, #16]
 8013f9c:	605a      	str	r2, [r3, #4]

        {
          /* Add this block to the list of free blocks. */
          free_bytes_remain += block->block_size;
 8013f9e:	693b      	ldr	r3, [r7, #16]
 8013fa0:	685a      	ldr	r2, [r3, #4]
 8013fa2:	4b0b      	ldr	r3, [pc, #44]	; (8013fd0 <heap_free+0x88>)
 8013fa4:	681b      	ldr	r3, [r3, #0]
 8013fa6:	4413      	add	r3, r2
 8013fa8:	4a09      	ldr	r2, [pc, #36]	; (8013fd0 <heap_free+0x88>)
 8013faa:	6013      	str	r3, [r2, #0]
          insert_into_free_list(((block_link_t *)block));
 8013fac:	6938      	ldr	r0, [r7, #16]
 8013fae:	f000 f873 	bl	8014098 <insert_into_free_list>
        }
      }
    }
  }
  MUTEX_UNLOCK(mem_mutex);
 8013fb2:	4b05      	ldr	r3, [pc, #20]	; (8013fc8 <heap_free+0x80>)
 8013fb4:	681b      	ldr	r3, [r3, #0]
 8013fb6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013fb8:	68bb      	ldr	r3, [r7, #8]
 8013fba:	f383 8810 	msr	PRIMASK, r3
}
 8013fbe:	bf00      	nop
}
 8013fc0:	bf00      	nop
 8013fc2:	3718      	adds	r7, #24
 8013fc4:	46bd      	mov	sp, r7
 8013fc6:	bd80      	pop	{r7, pc}
 8013fc8:	20007d74 	.word	0x20007d74
 8013fcc:	20016d90 	.word	0x20016d90
 8013fd0:	20016d88 	.word	0x20016d88

08013fd4 <heap_init>:
  return ever_free_bytes_remain;
}
/*-----------------------------------------------------------*/

static void heap_init(void)
{
 8013fd4:	b480      	push	{r7}
 8013fd6:	b085      	sub	sp, #20
 8013fd8:	af00      	add	r7, sp, #0
  block_link_t *first_free_block;
  uint8_t *aligned_heap;
  uint32_t address;
  uint32_t total_heap_size = TOTAL_HEAP_SIZE;
 8013fda:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8013fde:	60bb      	str	r3, [r7, #8]

  /* Ensure the heap starts on a correctly aligned boundary. */
  address = (uint32_t)heap;
 8013fe0:	4b27      	ldr	r3, [pc, #156]	; (8014080 <heap_init+0xac>)
 8013fe2:	60fb      	str	r3, [r7, #12]

  if ((address & BYTE_ALIGNMENT_MASK) != 0)
 8013fe4:	68fb      	ldr	r3, [r7, #12]
 8013fe6:	f003 0307 	and.w	r3, r3, #7
 8013fea:	2b00      	cmp	r3, #0
 8013fec:	d00c      	beq.n	8014008 <heap_init+0x34>
  {
    address += (BYTE_ALIGNMENT - 1);
 8013fee:	68fb      	ldr	r3, [r7, #12]
 8013ff0:	3307      	adds	r3, #7
 8013ff2:	60fb      	str	r3, [r7, #12]
    address &= ~((uint32_t)BYTE_ALIGNMENT_MASK);
 8013ff4:	68fb      	ldr	r3, [r7, #12]
 8013ff6:	f023 0307 	bic.w	r3, r3, #7
 8013ffa:	60fb      	str	r3, [r7, #12]
    total_heap_size -= address - (uint32_t)heap;
 8013ffc:	68ba      	ldr	r2, [r7, #8]
 8013ffe:	68fb      	ldr	r3, [r7, #12]
 8014000:	1ad3      	subs	r3, r2, r3
 8014002:	4a1f      	ldr	r2, [pc, #124]	; (8014080 <heap_init+0xac>)
 8014004:	4413      	add	r3, r2
 8014006:	60bb      	str	r3, [r7, #8]
  }

  aligned_heap = (uint8_t *)address;
 8014008:	68fb      	ldr	r3, [r7, #12]
 801400a:	607b      	str	r3, [r7, #4]

  /* start is used to hold a pointer to the first item in the list of free
    blocks.  The void cast is used to prevent compiler warnings. */
  start.next_free = (void *)aligned_heap;
 801400c:	4a1d      	ldr	r2, [pc, #116]	; (8014084 <heap_init+0xb0>)
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	6013      	str	r3, [r2, #0]
  start.block_size = (uint32_t)0;
 8014012:	4b1c      	ldr	r3, [pc, #112]	; (8014084 <heap_init+0xb0>)
 8014014:	2200      	movs	r2, #0
 8014016:	605a      	str	r2, [r3, #4]

  /* end is used to mark the end of the list of free blocks and is inserted
    at the end of the heap space. */
  address = ((uint32_t)aligned_heap) + total_heap_size;
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	68ba      	ldr	r2, [r7, #8]
 801401c:	4413      	add	r3, r2
 801401e:	60fb      	str	r3, [r7, #12]
  address -= STRUCT_SIZE;
 8014020:	2208      	movs	r2, #8
 8014022:	68fb      	ldr	r3, [r7, #12]
 8014024:	1a9b      	subs	r3, r3, r2
 8014026:	60fb      	str	r3, [r7, #12]
  address &= ~((uint32_t)BYTE_ALIGNMENT_MASK);
 8014028:	68fb      	ldr	r3, [r7, #12]
 801402a:	f023 0307 	bic.w	r3, r3, #7
 801402e:	60fb      	str	r3, [r7, #12]
  end = (void *)address;
 8014030:	68fb      	ldr	r3, [r7, #12]
 8014032:	4a15      	ldr	r2, [pc, #84]	; (8014088 <heap_init+0xb4>)
 8014034:	6013      	str	r3, [r2, #0]
  end->block_size = 0;
 8014036:	4b14      	ldr	r3, [pc, #80]	; (8014088 <heap_init+0xb4>)
 8014038:	681b      	ldr	r3, [r3, #0]
 801403a:	2200      	movs	r2, #0
 801403c:	605a      	str	r2, [r3, #4]
  end->next_free = NULL;
 801403e:	4b12      	ldr	r3, [pc, #72]	; (8014088 <heap_init+0xb4>)
 8014040:	681b      	ldr	r3, [r3, #0]
 8014042:	2200      	movs	r2, #0
 8014044:	601a      	str	r2, [r3, #0]

  /* To start with there is a single free block that is sized to take up the
    entire heap space, minus the space taken by end. */
  first_free_block = (void *)aligned_heap;
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	603b      	str	r3, [r7, #0]
  first_free_block->block_size = address - (uint32_t)first_free_block;
 801404a:	683b      	ldr	r3, [r7, #0]
 801404c:	68fa      	ldr	r2, [r7, #12]
 801404e:	1ad2      	subs	r2, r2, r3
 8014050:	683b      	ldr	r3, [r7, #0]
 8014052:	605a      	str	r2, [r3, #4]
  first_free_block->next_free = end;
 8014054:	4b0c      	ldr	r3, [pc, #48]	; (8014088 <heap_init+0xb4>)
 8014056:	681a      	ldr	r2, [r3, #0]
 8014058:	683b      	ldr	r3, [r7, #0]
 801405a:	601a      	str	r2, [r3, #0]

  /* Only one block exists - and it covers the entire usable heap space. */
  ever_free_bytes_remain = first_free_block->block_size;
 801405c:	683b      	ldr	r3, [r7, #0]
 801405e:	685b      	ldr	r3, [r3, #4]
 8014060:	4a0a      	ldr	r2, [pc, #40]	; (801408c <heap_init+0xb8>)
 8014062:	6013      	str	r3, [r2, #0]
  free_bytes_remain = first_free_block->block_size;
 8014064:	683b      	ldr	r3, [r7, #0]
 8014066:	685b      	ldr	r3, [r3, #4]
 8014068:	4a09      	ldr	r2, [pc, #36]	; (8014090 <heap_init+0xbc>)
 801406a:	6013      	str	r3, [r2, #0]

  /* Work out the position of the top bit in a uint32_t variable. */
  block_allocated_bit = ((uint32_t)1) << ((sizeof(uint32_t) * BITS_PER_BYTE) - 1);
 801406c:	4b09      	ldr	r3, [pc, #36]	; (8014094 <heap_init+0xc0>)
 801406e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8014072:	601a      	str	r2, [r3, #0]
}
 8014074:	bf00      	nop
 8014076:	3714      	adds	r7, #20
 8014078:	46bd      	mov	sp, r7
 801407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801407e:	4770      	bx	lr
 8014080:	20007d78 	.word	0x20007d78
 8014084:	20016d7c 	.word	0x20016d7c
 8014088:	20016d84 	.word	0x20016d84
 801408c:	20016d8c 	.word	0x20016d8c
 8014090:	20016d88 	.word	0x20016d88
 8014094:	20016d90 	.word	0x20016d90

08014098 <insert_into_free_list>:
/*-----------------------------------------------------------*/

static void insert_into_free_list(block_link_t *block_to_insert)
{
 8014098:	b480      	push	{r7}
 801409a:	b085      	sub	sp, #20
 801409c:	af00      	add	r7, sp, #0
 801409e:	6078      	str	r0, [r7, #4]
  block_link_t *iterator;
  uint8_t *puc;

  /* Iterate through the list until a block is found that has a higher address
    than the block being inserted. */
  for (iterator = &start; iterator->next_free < block_to_insert; iterator = iterator->next_free)
 80140a0:	4b28      	ldr	r3, [pc, #160]	; (8014144 <insert_into_free_list+0xac>)
 80140a2:	60fb      	str	r3, [r7, #12]
 80140a4:	e002      	b.n	80140ac <insert_into_free_list+0x14>
 80140a6:	68fb      	ldr	r3, [r7, #12]
 80140a8:	681b      	ldr	r3, [r3, #0]
 80140aa:	60fb      	str	r3, [r7, #12]
 80140ac:	68fb      	ldr	r3, [r7, #12]
 80140ae:	681b      	ldr	r3, [r3, #0]
 80140b0:	687a      	ldr	r2, [r7, #4]
 80140b2:	429a      	cmp	r2, r3
 80140b4:	d8f7      	bhi.n	80140a6 <insert_into_free_list+0xe>
    /* Nothing to do here, just iterate to the right position. */
  }

  /* Do the block being inserted, and the block it is being inserted after
    make a contiguous block of memory? */
  puc = (uint8_t *)iterator;
 80140b6:	68fb      	ldr	r3, [r7, #12]
 80140b8:	60bb      	str	r3, [r7, #8]
  if ((puc + iterator->block_size) == (uint8_t *)block_to_insert)
 80140ba:	68fb      	ldr	r3, [r7, #12]
 80140bc:	685b      	ldr	r3, [r3, #4]
 80140be:	68ba      	ldr	r2, [r7, #8]
 80140c0:	4413      	add	r3, r2
 80140c2:	687a      	ldr	r2, [r7, #4]
 80140c4:	429a      	cmp	r2, r3
 80140c6:	d108      	bne.n	80140da <insert_into_free_list+0x42>
  {
    iterator->block_size += block_to_insert->block_size;
 80140c8:	68fb      	ldr	r3, [r7, #12]
 80140ca:	685a      	ldr	r2, [r3, #4]
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	685b      	ldr	r3, [r3, #4]
 80140d0:	441a      	add	r2, r3
 80140d2:	68fb      	ldr	r3, [r7, #12]
 80140d4:	605a      	str	r2, [r3, #4]
    block_to_insert = iterator;
 80140d6:	68fb      	ldr	r3, [r7, #12]
 80140d8:	607b      	str	r3, [r7, #4]
  }

  /* Do the block being inserted, and the block it is being inserted before
    make a contiguous block of memory? */
  puc = (uint8_t *)block_to_insert;
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	60bb      	str	r3, [r7, #8]
  if ((puc + block_to_insert->block_size) == (uint8_t *)iterator->next_free)
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	685b      	ldr	r3, [r3, #4]
 80140e2:	68ba      	ldr	r2, [r7, #8]
 80140e4:	441a      	add	r2, r3
 80140e6:	68fb      	ldr	r3, [r7, #12]
 80140e8:	681b      	ldr	r3, [r3, #0]
 80140ea:	429a      	cmp	r2, r3
 80140ec:	d118      	bne.n	8014120 <insert_into_free_list+0x88>
  {
    if (iterator->next_free != end)
 80140ee:	68fb      	ldr	r3, [r7, #12]
 80140f0:	681a      	ldr	r2, [r3, #0]
 80140f2:	4b15      	ldr	r3, [pc, #84]	; (8014148 <insert_into_free_list+0xb0>)
 80140f4:	681b      	ldr	r3, [r3, #0]
 80140f6:	429a      	cmp	r2, r3
 80140f8:	d00d      	beq.n	8014116 <insert_into_free_list+0x7e>
    {
      /* Form one big block from the two blocks. */
      block_to_insert->block_size += iterator->next_free->block_size;
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	685a      	ldr	r2, [r3, #4]
 80140fe:	68fb      	ldr	r3, [r7, #12]
 8014100:	681b      	ldr	r3, [r3, #0]
 8014102:	685b      	ldr	r3, [r3, #4]
 8014104:	441a      	add	r2, r3
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	605a      	str	r2, [r3, #4]
      block_to_insert->next_free = iterator->next_free->next_free;
 801410a:	68fb      	ldr	r3, [r7, #12]
 801410c:	681b      	ldr	r3, [r3, #0]
 801410e:	681a      	ldr	r2, [r3, #0]
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	601a      	str	r2, [r3, #0]
 8014114:	e008      	b.n	8014128 <insert_into_free_list+0x90>
    }
    else
    {
      block_to_insert->next_free = end;
 8014116:	4b0c      	ldr	r3, [pc, #48]	; (8014148 <insert_into_free_list+0xb0>)
 8014118:	681a      	ldr	r2, [r3, #0]
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	601a      	str	r2, [r3, #0]
 801411e:	e003      	b.n	8014128 <insert_into_free_list+0x90>
    }
  }
  else
  {
    block_to_insert->next_free = iterator->next_free;
 8014120:	68fb      	ldr	r3, [r7, #12]
 8014122:	681a      	ldr	r2, [r3, #0]
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	601a      	str	r2, [r3, #0]

  /* If the block being inserted plugged a gab, so was merged with the block
    before and the block after, then it's next_free pointer will have
    already been set, and should not be set here as that would make it point
    to itself. */
  if (iterator != block_to_insert)
 8014128:	68fa      	ldr	r2, [r7, #12]
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	429a      	cmp	r2, r3
 801412e:	d002      	beq.n	8014136 <insert_into_free_list+0x9e>
  {
    iterator->next_free = block_to_insert;
 8014130:	68fb      	ldr	r3, [r7, #12]
 8014132:	687a      	ldr	r2, [r7, #4]
 8014134:	601a      	str	r2, [r3, #0]
  }
}
 8014136:	bf00      	nop
 8014138:	3714      	adds	r7, #20
 801413a:	46bd      	mov	sp, r7
 801413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014140:	4770      	bx	lr
 8014142:	bf00      	nop
 8014144:	20016d7c 	.word	0x20016d7c
 8014148:	20016d84 	.word	0x20016d84

0801414c <get_crc16>:
**  Descriptions: CRC16 checksum function
**  Input:        Data to check,Stream length, initialized checksum
**  Output:       CRC checksum
*/
uint16_t get_crc16(uint8_t *pchMessage,uint32_t dwLength,uint16_t wCRC)
{
 801414c:	b480      	push	{r7}
 801414e:	b087      	sub	sp, #28
 8014150:	af00      	add	r7, sp, #0
 8014152:	60f8      	str	r0, [r7, #12]
 8014154:	60b9      	str	r1, [r7, #8]
 8014156:	4613      	mov	r3, r2
 8014158:	80fb      	strh	r3, [r7, #6]
    uint8_t chData;
    if (pchMessage == NULL)
 801415a:	68fb      	ldr	r3, [r7, #12]
 801415c:	2b00      	cmp	r3, #0
 801415e:	d113      	bne.n	8014188 <get_crc16+0x3c>
    {
        return 0xFFFF;
 8014160:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014164:	e016      	b.n	8014194 <get_crc16+0x48>
    }

    while(dwLength--)
    {
        chData = *pchMessage++;
 8014166:	68fb      	ldr	r3, [r7, #12]
 8014168:	1c5a      	adds	r2, r3, #1
 801416a:	60fa      	str	r2, [r7, #12]
 801416c:	781b      	ldrb	r3, [r3, #0]
 801416e:	75fb      	strb	r3, [r7, #23]
        (wCRC) = ((uint16_t)(wCRC) >> 8)  ^ wCRC_Table[((uint16_t)(wCRC) ^ (uint16_t)(chData)) & 0x00ff];
 8014170:	88fb      	ldrh	r3, [r7, #6]
 8014172:	0a1b      	lsrs	r3, r3, #8
 8014174:	b29a      	uxth	r2, r3
 8014176:	88f9      	ldrh	r1, [r7, #6]
 8014178:	7dfb      	ldrb	r3, [r7, #23]
 801417a:	404b      	eors	r3, r1
 801417c:	b2db      	uxtb	r3, r3
 801417e:	4908      	ldr	r1, [pc, #32]	; (80141a0 <get_crc16+0x54>)
 8014180:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014184:	4053      	eors	r3, r2
 8014186:	80fb      	strh	r3, [r7, #6]
    while(dwLength--)
 8014188:	68bb      	ldr	r3, [r7, #8]
 801418a:	1e5a      	subs	r2, r3, #1
 801418c:	60ba      	str	r2, [r7, #8]
 801418e:	2b00      	cmp	r3, #0
 8014190:	d1e9      	bne.n	8014166 <get_crc16+0x1a>
    }

    return wCRC;
 8014192:	88fb      	ldrh	r3, [r7, #6]
}
 8014194:	4618      	mov	r0, r3
 8014196:	371c      	adds	r7, #28
 8014198:	46bd      	mov	sp, r7
 801419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801419e:	4770      	bx	lr
 80141a0:	08015e0c 	.word	0x08015e0c

080141a4 <verify_crc16>:
**  Input:        Data to Verify,Stream length = Data + checksum
**  Output:       True or False (CRC Verify Result)
*/
//CRC 的验证方法也可以是看append后的字节流经过CRC运算后结果是否为零来判断
uint32_t verify_crc16(uint8_t *pchMessage, uint32_t dwLength)
{
 80141a4:	b580      	push	{r7, lr}
 80141a6:	b084      	sub	sp, #16
 80141a8:	af00      	add	r7, sp, #0
 80141aa:	6078      	str	r0, [r7, #4]
 80141ac:	6039      	str	r1, [r7, #0]
    uint16_t wExpected = 0;
 80141ae:	2300      	movs	r3, #0
 80141b0:	81fb      	strh	r3, [r7, #14]

    if ((pchMessage == NULL) || (dwLength <= 2))
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	2b00      	cmp	r3, #0
 80141b6:	d002      	beq.n	80141be <verify_crc16+0x1a>
 80141b8:	683b      	ldr	r3, [r7, #0]
 80141ba:	2b02      	cmp	r3, #2
 80141bc:	d801      	bhi.n	80141c2 <verify_crc16+0x1e>
    {
        return __FALSE;
 80141be:	2300      	movs	r3, #0
 80141c0:	e020      	b.n	8014204 <verify_crc16+0x60>
    }
    wExpected = get_crc16(pchMessage, dwLength - 2, CRC16_INIT);
 80141c2:	683b      	ldr	r3, [r7, #0]
 80141c4:	3b02      	subs	r3, #2
 80141c6:	f643 22a3 	movw	r2, #15011	; 0x3aa3
 80141ca:	4619      	mov	r1, r3
 80141cc:	6878      	ldr	r0, [r7, #4]
 80141ce:	f7ff ffbd 	bl	801414c <get_crc16>
 80141d2:	4603      	mov	r3, r0
 80141d4:	81fb      	strh	r3, [r7, #14]

    return ((wExpected & 0xff) == pchMessage[dwLength - 2] && ((wExpected >> 8) & 0xff) == pchMessage[dwLength - 1]);
 80141d6:	89fb      	ldrh	r3, [r7, #14]
 80141d8:	b2db      	uxtb	r3, r3
 80141da:	683a      	ldr	r2, [r7, #0]
 80141dc:	3a02      	subs	r2, #2
 80141de:	6879      	ldr	r1, [r7, #4]
 80141e0:	440a      	add	r2, r1
 80141e2:	7812      	ldrb	r2, [r2, #0]
 80141e4:	4293      	cmp	r3, r2
 80141e6:	d10c      	bne.n	8014202 <verify_crc16+0x5e>
 80141e8:	89fb      	ldrh	r3, [r7, #14]
 80141ea:	0a1b      	lsrs	r3, r3, #8
 80141ec:	b29b      	uxth	r3, r3
 80141ee:	b2db      	uxtb	r3, r3
 80141f0:	683a      	ldr	r2, [r7, #0]
 80141f2:	3a01      	subs	r2, #1
 80141f4:	6879      	ldr	r1, [r7, #4]
 80141f6:	440a      	add	r2, r1
 80141f8:	7812      	ldrb	r2, [r2, #0]
 80141fa:	4293      	cmp	r3, r2
 80141fc:	d101      	bne.n	8014202 <verify_crc16+0x5e>
 80141fe:	2301      	movs	r3, #1
 8014200:	e000      	b.n	8014204 <verify_crc16+0x60>
 8014202:	2300      	movs	r3, #0
}
 8014204:	4618      	mov	r0, r3
 8014206:	3710      	adds	r7, #16
 8014208:	46bd      	mov	sp, r7
 801420a:	bd80      	pop	{r7, pc}

0801420c <append_crc16>:
**  Descriptions: append CRC16 to the end of data
**  Input:        Data to CRC and append,Stream length = Data + checksum
**  Output:       True or False (CRC Verify Result)
*/
void append_crc16(uint8_t* pchMessage,uint32_t dwLength)
{
 801420c:	b580      	push	{r7, lr}
 801420e:	b084      	sub	sp, #16
 8014210:	af00      	add	r7, sp, #0
 8014212:	6078      	str	r0, [r7, #4]
 8014214:	6039      	str	r1, [r7, #0]
    uint16_t wCRC = 0;
 8014216:	2300      	movs	r3, #0
 8014218:	81fb      	strh	r3, [r7, #14]

    if ((pchMessage == NULL) || (dwLength <= 2))
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	2b00      	cmp	r3, #0
 801421e:	d01d      	beq.n	801425c <append_crc16+0x50>
 8014220:	683b      	ldr	r3, [r7, #0]
 8014222:	2b02      	cmp	r3, #2
 8014224:	d91a      	bls.n	801425c <append_crc16+0x50>
    {
        return;
    }
    wCRC = get_crc16 ( (uint8_t *)pchMessage, dwLength-2, CRC16_INIT );
 8014226:	683b      	ldr	r3, [r7, #0]
 8014228:	3b02      	subs	r3, #2
 801422a:	f643 22a3 	movw	r2, #15011	; 0x3aa3
 801422e:	4619      	mov	r1, r3
 8014230:	6878      	ldr	r0, [r7, #4]
 8014232:	f7ff ff8b 	bl	801414c <get_crc16>
 8014236:	4603      	mov	r3, r0
 8014238:	81fb      	strh	r3, [r7, #14]

    pchMessage[dwLength-2] = (uint8_t)(wCRC & 0x00ff);
 801423a:	683b      	ldr	r3, [r7, #0]
 801423c:	3b02      	subs	r3, #2
 801423e:	687a      	ldr	r2, [r7, #4]
 8014240:	4413      	add	r3, r2
 8014242:	89fa      	ldrh	r2, [r7, #14]
 8014244:	b2d2      	uxtb	r2, r2
 8014246:	701a      	strb	r2, [r3, #0]
    pchMessage[dwLength-1] = (uint8_t)((wCRC >> 8)& 0x00ff);
 8014248:	89fb      	ldrh	r3, [r7, #14]
 801424a:	0a1b      	lsrs	r3, r3, #8
 801424c:	b299      	uxth	r1, r3
 801424e:	683b      	ldr	r3, [r7, #0]
 8014250:	3b01      	subs	r3, #1
 8014252:	687a      	ldr	r2, [r7, #4]
 8014254:	4413      	add	r3, r2
 8014256:	b2ca      	uxtb	r2, r1
 8014258:	701a      	strb	r2, [r3, #0]
 801425a:	e000      	b.n	801425e <append_crc16+0x52>
        return;
 801425c:	bf00      	nop
}
 801425e:	3710      	adds	r7, #16
 8014260:	46bd      	mov	sp, r7
 8014262:	bd80      	pop	{r7, pc}

08014264 <get_crc32>:
**  Descriptions: CRC16 checksum function
**  Input:        Data to check,Stream length, initialized checksum
**  Output:       CRC checksum
*/
uint32_t get_crc32(uint8_t *pchMessage,uint32_t dwLength,uint32_t wCRC)
{
 8014264:	b480      	push	{r7}
 8014266:	b087      	sub	sp, #28
 8014268:	af00      	add	r7, sp, #0
 801426a:	60f8      	str	r0, [r7, #12]
 801426c:	60b9      	str	r1, [r7, #8]
 801426e:	607a      	str	r2, [r7, #4]
    uint8_t chData;
    if (pchMessage == NULL)
 8014270:	68fb      	ldr	r3, [r7, #12]
 8014272:	2b00      	cmp	r3, #0
 8014274:	d112      	bne.n	801429c <get_crc32+0x38>
    {
        return 0xFFFF;
 8014276:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801427a:	e015      	b.n	80142a8 <get_crc32+0x44>
    }

    while(dwLength--)
    {
        chData = *pchMessage++;
 801427c:	68fb      	ldr	r3, [r7, #12]
 801427e:	1c5a      	adds	r2, r3, #1
 8014280:	60fa      	str	r2, [r7, #12]
 8014282:	781b      	ldrb	r3, [r3, #0]
 8014284:	75fb      	strb	r3, [r7, #23]
        (wCRC) = ((uint32_t)(wCRC) >> 8)  ^ CRC32_Table[((uint32_t)(wCRC) ^ (uint32_t)(chData)) & 0x000000ff];
 8014286:	687b      	ldr	r3, [r7, #4]
 8014288:	0a1a      	lsrs	r2, r3, #8
 801428a:	7df9      	ldrb	r1, [r7, #23]
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	404b      	eors	r3, r1
 8014290:	b2db      	uxtb	r3, r3
 8014292:	4908      	ldr	r1, [pc, #32]	; (80142b4 <get_crc32+0x50>)
 8014294:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8014298:	4053      	eors	r3, r2
 801429a:	607b      	str	r3, [r7, #4]
    while(dwLength--)
 801429c:	68bb      	ldr	r3, [r7, #8]
 801429e:	1e5a      	subs	r2, r3, #1
 80142a0:	60ba      	str	r2, [r7, #8]
 80142a2:	2b00      	cmp	r3, #0
 80142a4:	d1ea      	bne.n	801427c <get_crc32+0x18>
    }

    return wCRC;
 80142a6:	687b      	ldr	r3, [r7, #4]
}
 80142a8:	4618      	mov	r0, r3
 80142aa:	371c      	adds	r7, #28
 80142ac:	46bd      	mov	sp, r7
 80142ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142b2:	4770      	bx	lr
 80142b4:	0801600c 	.word	0x0801600c

080142b8 <verify_crc32>:
**  Input:        Data to Verify,Stream length = Data + checksum
**  Output:       True or False (CRC Verify Result)
*/
//CRC 的验证方法也可以是看append后的字节流经过CRC运算后结果是否为零来判断
uint32_t verify_crc32(uint8_t *pchMessage, uint32_t dwLength)
{
 80142b8:	b580      	push	{r7, lr}
 80142ba:	b084      	sub	sp, #16
 80142bc:	af00      	add	r7, sp, #0
 80142be:	6078      	str	r0, [r7, #4]
 80142c0:	6039      	str	r1, [r7, #0]
    uint32_t wExpected = 0;
 80142c2:	2300      	movs	r3, #0
 80142c4:	60fb      	str	r3, [r7, #12]
    uint32_t input_crc = 0;
 80142c6:	2300      	movs	r3, #0
 80142c8:	60bb      	str	r3, [r7, #8]
    if ((pchMessage == NULL) || (dwLength <= 4))
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	2b00      	cmp	r3, #0
 80142ce:	d002      	beq.n	80142d6 <verify_crc32+0x1e>
 80142d0:	683b      	ldr	r3, [r7, #0]
 80142d2:	2b04      	cmp	r3, #4
 80142d4:	d801      	bhi.n	80142da <verify_crc32+0x22>
    {
        return __FALSE;
 80142d6:	2300      	movs	r3, #0
 80142d8:	e036      	b.n	8014348 <verify_crc32+0x90>
    }
    wExpected = get_crc32(pchMessage, dwLength - 4, CRC32_INIT);
 80142da:	683b      	ldr	r3, [r7, #0]
 80142dc:	3b04      	subs	r3, #4
 80142de:	f643 22a3 	movw	r2, #15011	; 0x3aa3
 80142e2:	4619      	mov	r1, r3
 80142e4:	6878      	ldr	r0, [r7, #4]
 80142e6:	f7ff ffbd 	bl	8014264 <get_crc32>
 80142ea:	60f8      	str	r0, [r7, #12]

    input_crc |= pchMessage[dwLength - 4];
 80142ec:	683b      	ldr	r3, [r7, #0]
 80142ee:	3b04      	subs	r3, #4
 80142f0:	687a      	ldr	r2, [r7, #4]
 80142f2:	4413      	add	r3, r2
 80142f4:	781b      	ldrb	r3, [r3, #0]
 80142f6:	461a      	mov	r2, r3
 80142f8:	68bb      	ldr	r3, [r7, #8]
 80142fa:	4313      	orrs	r3, r2
 80142fc:	60bb      	str	r3, [r7, #8]
    input_crc |= ((uint32_t)(pchMessage[dwLength - 3]) << 8)  & 0xff00;
 80142fe:	683b      	ldr	r3, [r7, #0]
 8014300:	3b03      	subs	r3, #3
 8014302:	687a      	ldr	r2, [r7, #4]
 8014304:	4413      	add	r3, r2
 8014306:	781b      	ldrb	r3, [r3, #0]
 8014308:	021b      	lsls	r3, r3, #8
 801430a:	b29b      	uxth	r3, r3
 801430c:	68ba      	ldr	r2, [r7, #8]
 801430e:	4313      	orrs	r3, r2
 8014310:	60bb      	str	r3, [r7, #8]
    input_crc |= ((uint32_t)(pchMessage[dwLength - 2]) << 16) & 0xff0000;
 8014312:	683b      	ldr	r3, [r7, #0]
 8014314:	3b02      	subs	r3, #2
 8014316:	687a      	ldr	r2, [r7, #4]
 8014318:	4413      	add	r3, r2
 801431a:	781b      	ldrb	r3, [r3, #0]
 801431c:	041b      	lsls	r3, r3, #16
 801431e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8014322:	68ba      	ldr	r2, [r7, #8]
 8014324:	4313      	orrs	r3, r2
 8014326:	60bb      	str	r3, [r7, #8]
    input_crc |= ((uint32_t)(pchMessage[dwLength - 1]) << 24) & 0xff000000;
 8014328:	683b      	ldr	r3, [r7, #0]
 801432a:	3b01      	subs	r3, #1
 801432c:	687a      	ldr	r2, [r7, #4]
 801432e:	4413      	add	r3, r2
 8014330:	781b      	ldrb	r3, [r3, #0]
 8014332:	061b      	lsls	r3, r3, #24
 8014334:	68ba      	ldr	r2, [r7, #8]
 8014336:	4313      	orrs	r3, r2
 8014338:	60bb      	str	r3, [r7, #8]

    return (input_crc == wExpected);
 801433a:	68ba      	ldr	r2, [r7, #8]
 801433c:	68fb      	ldr	r3, [r7, #12]
 801433e:	429a      	cmp	r2, r3
 8014340:	bf0c      	ite	eq
 8014342:	2301      	moveq	r3, #1
 8014344:	2300      	movne	r3, #0
 8014346:	b2db      	uxtb	r3, r3
}
 8014348:	4618      	mov	r0, r3
 801434a:	3710      	adds	r7, #16
 801434c:	46bd      	mov	sp, r7
 801434e:	bd80      	pop	{r7, pc}

08014350 <append_crc32>:
**  Descriptions: append CRC16 to the end of data
**  Input:        Data to CRC and append,Stream length = Data + checksum
**  Output:       True or False (CRC Verify Result)
*/
void append_crc32(uint8_t* pchMessage,uint32_t dwLength)
{
 8014350:	b580      	push	{r7, lr}
 8014352:	b084      	sub	sp, #16
 8014354:	af00      	add	r7, sp, #0
 8014356:	6078      	str	r0, [r7, #4]
 8014358:	6039      	str	r1, [r7, #0]
    uint32_t wCRC = 0;
 801435a:	2300      	movs	r3, #0
 801435c:	60fb      	str	r3, [r7, #12]

    if ((pchMessage == NULL) || (dwLength <= 4))
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	2b00      	cmp	r3, #0
 8014362:	d02b      	beq.n	80143bc <append_crc32+0x6c>
 8014364:	683b      	ldr	r3, [r7, #0]
 8014366:	2b04      	cmp	r3, #4
 8014368:	d928      	bls.n	80143bc <append_crc32+0x6c>
    {
        return;
    }
    wCRC = get_crc32 ( (uint8_t *)pchMessage, dwLength-4, CRC32_INIT);
 801436a:	683b      	ldr	r3, [r7, #0]
 801436c:	3b04      	subs	r3, #4
 801436e:	f643 22a3 	movw	r2, #15011	; 0x3aa3
 8014372:	4619      	mov	r1, r3
 8014374:	6878      	ldr	r0, [r7, #4]
 8014376:	f7ff ff75 	bl	8014264 <get_crc32>
 801437a:	60f8      	str	r0, [r7, #12]

    pchMessage[dwLength-4] = (uint8_t)(wCRC & 0xff);
 801437c:	683b      	ldr	r3, [r7, #0]
 801437e:	3b04      	subs	r3, #4
 8014380:	687a      	ldr	r2, [r7, #4]
 8014382:	4413      	add	r3, r2
 8014384:	68fa      	ldr	r2, [r7, #12]
 8014386:	b2d2      	uxtb	r2, r2
 8014388:	701a      	strb	r2, [r3, #0]
    pchMessage[dwLength-3] = (uint8_t)((wCRC >> 8)& 0xff);
 801438a:	68fb      	ldr	r3, [r7, #12]
 801438c:	0a19      	lsrs	r1, r3, #8
 801438e:	683b      	ldr	r3, [r7, #0]
 8014390:	3b03      	subs	r3, #3
 8014392:	687a      	ldr	r2, [r7, #4]
 8014394:	4413      	add	r3, r2
 8014396:	b2ca      	uxtb	r2, r1
 8014398:	701a      	strb	r2, [r3, #0]
    pchMessage[dwLength-2] = (uint8_t)((wCRC >> 16)& 0xff);
 801439a:	68fb      	ldr	r3, [r7, #12]
 801439c:	0c19      	lsrs	r1, r3, #16
 801439e:	683b      	ldr	r3, [r7, #0]
 80143a0:	3b02      	subs	r3, #2
 80143a2:	687a      	ldr	r2, [r7, #4]
 80143a4:	4413      	add	r3, r2
 80143a6:	b2ca      	uxtb	r2, r1
 80143a8:	701a      	strb	r2, [r3, #0]
    pchMessage[dwLength-1] = (uint8_t)((wCRC >> 24)& 0xff);
 80143aa:	68fb      	ldr	r3, [r7, #12]
 80143ac:	0e19      	lsrs	r1, r3, #24
 80143ae:	683b      	ldr	r3, [r7, #0]
 80143b0:	3b01      	subs	r3, #1
 80143b2:	687a      	ldr	r2, [r7, #4]
 80143b4:	4413      	add	r3, r2
 80143b6:	b2ca      	uxtb	r2, r1
 80143b8:	701a      	strb	r2, [r3, #0]
 80143ba:	e000      	b.n	80143be <append_crc32+0x6e>
        return;
 80143bc:	bf00      	nop
}
 80143be:	3710      	adds	r7, #16
 80143c0:	46bd      	mov	sp, r7
 80143c2:	bd80      	pop	{r7, pc}

080143c4 <test_init>:
}

#else

void test_init(void)
{
 80143c4:	b480      	push	{r7}
 80143c6:	af00      	add	r7, sp, #0

}
 80143c8:	bf00      	nop
 80143ca:	46bd      	mov	sp, r7
 80143cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143d0:	4770      	bx	lr
	...

080143d4 <test_module_execute>:
  }
  return -1;
}

int32_t test_module_execute(void)
{
 80143d4:	b580      	push	{r7, lr}
 80143d6:	b082      	sub	sp, #8
 80143d8:	af00      	add	r7, sp, #0
  for (int i = 0; i < MAX_TEST_FN_NUM; i++)
 80143da:	2300      	movs	r3, #0
 80143dc:	607b      	str	r3, [r7, #4]
 80143de:	e012      	b.n	8014406 <test_module_execute+0x32>
  {
    if (test_module_fn[i] != NULL)
 80143e0:	4a0d      	ldr	r2, [pc, #52]	; (8014418 <test_module_execute+0x44>)
 80143e2:	687b      	ldr	r3, [r7, #4]
 80143e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80143e8:	2b00      	cmp	r3, #0
 80143ea:	d009      	beq.n	8014400 <test_module_execute+0x2c>
    {
      test_module_fn[i](test_module_argc[i]);
 80143ec:	4a0a      	ldr	r2, [pc, #40]	; (8014418 <test_module_execute+0x44>)
 80143ee:	687b      	ldr	r3, [r7, #4]
 80143f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80143f4:	4909      	ldr	r1, [pc, #36]	; (801441c <test_module_execute+0x48>)
 80143f6:	687a      	ldr	r2, [r7, #4]
 80143f8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80143fc:	4610      	mov	r0, r2
 80143fe:	4798      	blx	r3
  for (int i = 0; i < MAX_TEST_FN_NUM; i++)
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	3301      	adds	r3, #1
 8014404:	607b      	str	r3, [r7, #4]
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	2b1d      	cmp	r3, #29
 801440a:	dde9      	ble.n	80143e0 <test_module_execute+0xc>
    }
  }
  return 0;
 801440c:	2300      	movs	r3, #0
}
 801440e:	4618      	mov	r0, r3
 8014410:	3708      	adds	r7, #8
 8014412:	46bd      	mov	sp, r7
 8014414:	bd80      	pop	{r7, pc}
 8014416:	bf00      	nop
 8014418:	20016d94 	.word	0x20016d94
 801441c:	20016e0c 	.word	0x20016e0c

08014420 <TimerISR_Hook>:
//!
//! \note   Typical 1ms interval
//
//******************************************************************************************
void TimerISR_Hook(void)
{    
 8014420:	b480      	push	{r7}
 8014422:	b083      	sub	sp, #12
 8014424:	af00      	add	r7, sp, #0
    for(uint8_t i = 1; i < TIMER_ELEMENT_NUM_MAX; i++)
 8014426:	2301      	movs	r3, #1
 8014428:	71fb      	strb	r3, [r7, #7]
 801442a:	e019      	b.n	8014460 <TimerISR_Hook+0x40>
    {
        if(SoftTimer[i].handle !=  0)
 801442c:	79fb      	ldrb	r3, [r7, #7]
 801442e:	4a11      	ldr	r2, [pc, #68]	; (8014474 <TimerISR_Hook+0x54>)
 8014430:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 8014434:	2b00      	cmp	r3, #0
 8014436:	d010      	beq.n	801445a <TimerISR_Hook+0x3a>
        {
            if(SoftTimer[i].delay)
 8014438:	79fb      	ldrb	r3, [r7, #7]
 801443a:	4a0e      	ldr	r2, [pc, #56]	; (8014474 <TimerISR_Hook+0x54>)
 801443c:	00db      	lsls	r3, r3, #3
 801443e:	4413      	add	r3, r2
 8014440:	685b      	ldr	r3, [r3, #4]
 8014442:	2b00      	cmp	r3, #0
 8014444:	d009      	beq.n	801445a <TimerISR_Hook+0x3a>
            {
                SoftTimer[i].delay--;
 8014446:	79fa      	ldrb	r2, [r7, #7]
 8014448:	490a      	ldr	r1, [pc, #40]	; (8014474 <TimerISR_Hook+0x54>)
 801444a:	00d3      	lsls	r3, r2, #3
 801444c:	440b      	add	r3, r1
 801444e:	685b      	ldr	r3, [r3, #4]
 8014450:	1e59      	subs	r1, r3, #1
 8014452:	4808      	ldr	r0, [pc, #32]	; (8014474 <TimerISR_Hook+0x54>)
 8014454:	00d3      	lsls	r3, r2, #3
 8014456:	4403      	add	r3, r0
 8014458:	6059      	str	r1, [r3, #4]
    for(uint8_t i = 1; i < TIMER_ELEMENT_NUM_MAX; i++)
 801445a:	79fb      	ldrb	r3, [r7, #7]
 801445c:	3301      	adds	r3, #1
 801445e:	71fb      	strb	r3, [r7, #7]
 8014460:	79fb      	ldrb	r3, [r7, #7]
 8014462:	2b13      	cmp	r3, #19
 8014464:	d9e2      	bls.n	801442c <TimerISR_Hook+0xc>
            }
        }
    }
}
 8014466:	bf00      	nop
 8014468:	bf00      	nop
 801446a:	370c      	adds	r7, #12
 801446c:	46bd      	mov	sp, r7
 801446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014472:	4770      	bx	lr
 8014474:	20016e84 	.word	0x20016e84

08014478 <soft_timer_init>:
//!         - This function must be called first !.
//!         
//
//******************************************************************************************
uint16_t soft_timer_init(void)
{
 8014478:	b480      	push	{r7}
 801447a:	b083      	sub	sp, #12
 801447c:	af00      	add	r7, sp, #0
    uint8_t i = 0;
 801447e:	2300      	movs	r3, #0
 8014480:	71fb      	strb	r3, [r7, #7]

    // Clear All Elements
    for(i = 1; i < TIMER_ELEMENT_NUM_MAX; i++)
 8014482:	2301      	movs	r3, #1
 8014484:	71fb      	strb	r3, [r7, #7]
 8014486:	e00d      	b.n	80144a4 <soft_timer_init+0x2c>
    {
        SoftTimer[i].handle    = 0;
 8014488:	79fb      	ldrb	r3, [r7, #7]
 801448a:	4a0b      	ldr	r2, [pc, #44]	; (80144b8 <soft_timer_init+0x40>)
 801448c:	2100      	movs	r1, #0
 801448e:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
        SoftTimer[i].delay     = 0;        
 8014492:	79fb      	ldrb	r3, [r7, #7]
 8014494:	4a08      	ldr	r2, [pc, #32]	; (80144b8 <soft_timer_init+0x40>)
 8014496:	00db      	lsls	r3, r3, #3
 8014498:	4413      	add	r3, r2
 801449a:	2200      	movs	r2, #0
 801449c:	605a      	str	r2, [r3, #4]
    for(i = 1; i < TIMER_ELEMENT_NUM_MAX; i++)
 801449e:	79fb      	ldrb	r3, [r7, #7]
 80144a0:	3301      	adds	r3, #1
 80144a2:	71fb      	strb	r3, [r7, #7]
 80144a4:	79fb      	ldrb	r3, [r7, #7]
 80144a6:	2b13      	cmp	r3, #19
 80144a8:	d9ee      	bls.n	8014488 <soft_timer_init+0x10>
    }

    return (SOFT_TIMER_SUCCESS);
 80144aa:	2300      	movs	r3, #0
}
 80144ac:	4618      	mov	r0, r3
 80144ae:	370c      	adds	r7, #12
 80144b0:	46bd      	mov	sp, r7
 80144b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144b6:	4770      	bx	lr
 80144b8:	20016e84 	.word	0x20016e84

080144bc <soft_timer_req>:
//!         - Timer handle only can be used once.
//!         
//
//******************************************************************************************
uint16_t soft_timer_req(uint32_t Tick)
{
 80144bc:	b480      	push	{r7}
 80144be:	b087      	sub	sp, #28
 80144c0:	af00      	add	r7, sp, #0
 80144c2:	6078      	str	r0, [r7, #4]
    uint8_t i = 0;
 80144c4:	2300      	movs	r3, #0
 80144c6:	75fb      	strb	r3, [r7, #23]

    for (i = 1; i < TIMER_ELEMENT_NUM_MAX; i++)
 80144c8:	2301      	movs	r3, #1
 80144ca:	75fb      	strb	r3, [r7, #23]
 80144cc:	e024      	b.n	8014518 <soft_timer_req+0x5c>
    {
        if (SoftTimer[i].handle == 0)
 80144ce:	7dfb      	ldrb	r3, [r7, #23]
 80144d0:	4a16      	ldr	r2, [pc, #88]	; (801452c <soft_timer_req+0x70>)
 80144d2:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 80144d6:	2b00      	cmp	r3, #0
 80144d8:	d11b      	bne.n	8014512 <soft_timer_req+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80144da:	f3ef 8310 	mrs	r3, PRIMASK
 80144de:	60bb      	str	r3, [r7, #8]
  return(result);
 80144e0:	68bb      	ldr	r3, [r7, #8]
        {
            CRITICAL_SETCION_ENTER();
 80144e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80144e4:	b672      	cpsid	i
}
 80144e6:	bf00      	nop

            SoftTimer[i].handle    = i;
 80144e8:	7dfb      	ldrb	r3, [r7, #23]
 80144ea:	7dfa      	ldrb	r2, [r7, #23]
 80144ec:	b291      	uxth	r1, r2
 80144ee:	4a0f      	ldr	r2, [pc, #60]	; (801452c <soft_timer_req+0x70>)
 80144f0:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
            SoftTimer[i].delay     = Tick;            
 80144f4:	7dfb      	ldrb	r3, [r7, #23]
 80144f6:	4a0d      	ldr	r2, [pc, #52]	; (801452c <soft_timer_req+0x70>)
 80144f8:	00db      	lsls	r3, r3, #3
 80144fa:	4413      	add	r3, r2
 80144fc:	687a      	ldr	r2, [r7, #4]
 80144fe:	605a      	str	r2, [r3, #4]
 8014500:	693b      	ldr	r3, [r7, #16]
 8014502:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014504:	68fb      	ldr	r3, [r7, #12]
 8014506:	f383 8810 	msr	PRIMASK, r3
}
 801450a:	bf00      	nop

            CRITICAL_SETCION_EXIT();

            return (i);
 801450c:	7dfb      	ldrb	r3, [r7, #23]
 801450e:	b29b      	uxth	r3, r3
 8014510:	e006      	b.n	8014520 <soft_timer_req+0x64>
    for (i = 1; i < TIMER_ELEMENT_NUM_MAX; i++)
 8014512:	7dfb      	ldrb	r3, [r7, #23]
 8014514:	3301      	adds	r3, #1
 8014516:	75fb      	strb	r3, [r7, #23]
 8014518:	7dfb      	ldrb	r3, [r7, #23]
 801451a:	2b13      	cmp	r3, #19
 801451c:	d9d7      	bls.n	80144ce <soft_timer_req+0x12>
        }
    }

    return (0);
 801451e:	2300      	movs	r3, #0
}
 8014520:	4618      	mov	r0, r3
 8014522:	371c      	adds	r7, #28
 8014524:	46bd      	mov	sp, r7
 8014526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801452a:	4770      	bx	lr
 801452c:	20016e84 	.word	0x20016e84

08014530 <soft_timer_update>:
//!         - Non-Zero                 failure
//!         
//
//******************************************************************************************
uint16_t soft_timer_update(uint32_t Id, uint32_t Tick)
{
 8014530:	b480      	push	{r7}
 8014532:	b087      	sub	sp, #28
 8014534:	af00      	add	r7, sp, #0
 8014536:	6078      	str	r0, [r7, #4]
 8014538:	6039      	str	r1, [r7, #0]
    for (uint8_t i = 1; i < TIMER_ELEMENT_NUM_MAX; i++)
 801453a:	2301      	movs	r3, #1
 801453c:	75fb      	strb	r3, [r7, #23]
 801453e:	e01f      	b.n	8014580 <soft_timer_update+0x50>
    {
        if (SoftTimer[i].handle == Id)
 8014540:	7dfb      	ldrb	r3, [r7, #23]
 8014542:	4a14      	ldr	r2, [pc, #80]	; (8014594 <soft_timer_update+0x64>)
 8014544:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 8014548:	461a      	mov	r2, r3
 801454a:	687b      	ldr	r3, [r7, #4]
 801454c:	4293      	cmp	r3, r2
 801454e:	d114      	bne.n	801457a <soft_timer_update+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8014550:	f3ef 8310 	mrs	r3, PRIMASK
 8014554:	60bb      	str	r3, [r7, #8]
  return(result);
 8014556:	68bb      	ldr	r3, [r7, #8]
        {
            CRITICAL_SETCION_ENTER();
 8014558:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801455a:	b672      	cpsid	i
}
 801455c:	bf00      	nop

            SoftTimer[i].delay = Tick;
 801455e:	7dfb      	ldrb	r3, [r7, #23]
 8014560:	4a0c      	ldr	r2, [pc, #48]	; (8014594 <soft_timer_update+0x64>)
 8014562:	00db      	lsls	r3, r3, #3
 8014564:	4413      	add	r3, r2
 8014566:	683a      	ldr	r2, [r7, #0]
 8014568:	605a      	str	r2, [r3, #4]
 801456a:	693b      	ldr	r3, [r7, #16]
 801456c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801456e:	68fb      	ldr	r3, [r7, #12]
 8014570:	f383 8810 	msr	PRIMASK, r3
}
 8014574:	bf00      	nop

            CRITICAL_SETCION_EXIT();

            // Success
            return (0);
 8014576:	2300      	movs	r3, #0
 8014578:	e006      	b.n	8014588 <soft_timer_update+0x58>
    for (uint8_t i = 1; i < TIMER_ELEMENT_NUM_MAX; i++)
 801457a:	7dfb      	ldrb	r3, [r7, #23]
 801457c:	3301      	adds	r3, #1
 801457e:	75fb      	strb	r3, [r7, #23]
 8014580:	7dfb      	ldrb	r3, [r7, #23]
 8014582:	2b13      	cmp	r3, #19
 8014584:	d9dc      	bls.n	8014540 <soft_timer_update+0x10>
        }
    }

    // Failure
    return (1);
 8014586:	2301      	movs	r3, #1
}
 8014588:	4618      	mov	r0, r3
 801458a:	371c      	adds	r7, #28
 801458c:	46bd      	mov	sp, r7
 801458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014592:	4770      	bx	lr
 8014594:	20016e84 	.word	0x20016e84

08014598 <soft_timer_check>:
//!         - Timer handle only can be used once.
//!         
//
//******************************************************************************************
uint16_t soft_timer_check(uint16_t Handle)
{    
 8014598:	b480      	push	{r7}
 801459a:	b087      	sub	sp, #28
 801459c:	af00      	add	r7, sp, #0
 801459e:	4603      	mov	r3, r0
 80145a0:	80fb      	strh	r3, [r7, #6]
    uint16_t retval = SOFT_TIMER_ERR;
 80145a2:	2303      	movs	r3, #3
 80145a4:	82fb      	strh	r3, [r7, #22]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80145a6:	f3ef 8310 	mrs	r3, PRIMASK
 80145aa:	60fb      	str	r3, [r7, #12]
  return(result);
 80145ac:	68fb      	ldr	r3, [r7, #12]

    CRITICAL_SETCION_ENTER();    
 80145ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80145b0:	b672      	cpsid	i
}
 80145b2:	bf00      	nop
    if(SoftTimer[Handle].handle ==  Handle)
 80145b4:	88fb      	ldrh	r3, [r7, #6]
 80145b6:	4a0f      	ldr	r2, [pc, #60]	; (80145f4 <soft_timer_check+0x5c>)
 80145b8:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 80145bc:	88fa      	ldrh	r2, [r7, #6]
 80145be:	429a      	cmp	r2, r3
 80145c0:	d10b      	bne.n	80145da <soft_timer_check+0x42>
    {
        if(SoftTimer[Handle].delay)
 80145c2:	88fb      	ldrh	r3, [r7, #6]
 80145c4:	4a0b      	ldr	r2, [pc, #44]	; (80145f4 <soft_timer_check+0x5c>)
 80145c6:	00db      	lsls	r3, r3, #3
 80145c8:	4413      	add	r3, r2
 80145ca:	685b      	ldr	r3, [r3, #4]
 80145cc:	2b00      	cmp	r3, #0
 80145ce:	d002      	beq.n	80145d6 <soft_timer_check+0x3e>
        {
            retval = SOFT_TIMER_ING;
 80145d0:	2301      	movs	r3, #1
 80145d2:	82fb      	strh	r3, [r7, #22]
 80145d4:	e001      	b.n	80145da <soft_timer_check+0x42>
        }
        else
        {
            retval = SOFT_TIMER_TIMEOUT;
 80145d6:	2302      	movs	r3, #2
 80145d8:	82fb      	strh	r3, [r7, #22]
 80145da:	693b      	ldr	r3, [r7, #16]
 80145dc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80145de:	68bb      	ldr	r3, [r7, #8]
 80145e0:	f383 8810 	msr	PRIMASK, r3
}
 80145e4:	bf00      	nop
        }
    }
    CRITICAL_SETCION_EXIT();

    return (retval);
 80145e6:	8afb      	ldrh	r3, [r7, #22]
}
 80145e8:	4618      	mov	r0, r3
 80145ea:	371c      	adds	r7, #28
 80145ec:	46bd      	mov	sp, r7
 80145ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145f2:	4770      	bx	lr
 80145f4:	20016e84 	.word	0x20016e84

080145f8 <__malloc_lock>:
 80145f8:	4801      	ldr	r0, [pc, #4]	; (8014600 <__malloc_lock+0x8>)
 80145fa:	f000 b8b1 	b.w	8014760 <__retarget_lock_acquire_recursive>
 80145fe:	bf00      	nop
 8014600:	20017060 	.word	0x20017060

08014604 <__malloc_unlock>:
 8014604:	4801      	ldr	r0, [pc, #4]	; (801460c <__malloc_unlock+0x8>)
 8014606:	f000 b8ac 	b.w	8014762 <__retarget_lock_release_recursive>
 801460a:	bf00      	nop
 801460c:	20017060 	.word	0x20017060

08014610 <strncmp>:
 8014610:	b510      	push	{r4, lr}
 8014612:	b16a      	cbz	r2, 8014630 <strncmp+0x20>
 8014614:	3901      	subs	r1, #1
 8014616:	1884      	adds	r4, r0, r2
 8014618:	f810 2b01 	ldrb.w	r2, [r0], #1
 801461c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8014620:	429a      	cmp	r2, r3
 8014622:	d103      	bne.n	801462c <strncmp+0x1c>
 8014624:	42a0      	cmp	r0, r4
 8014626:	d001      	beq.n	801462c <strncmp+0x1c>
 8014628:	2a00      	cmp	r2, #0
 801462a:	d1f5      	bne.n	8014618 <strncmp+0x8>
 801462c:	1ad0      	subs	r0, r2, r3
 801462e:	bd10      	pop	{r4, pc}
 8014630:	4610      	mov	r0, r2
 8014632:	e7fc      	b.n	801462e <strncmp+0x1e>

08014634 <strncpy>:
 8014634:	b510      	push	{r4, lr}
 8014636:	3901      	subs	r1, #1
 8014638:	4603      	mov	r3, r0
 801463a:	b132      	cbz	r2, 801464a <strncpy+0x16>
 801463c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8014640:	f803 4b01 	strb.w	r4, [r3], #1
 8014644:	3a01      	subs	r2, #1
 8014646:	2c00      	cmp	r4, #0
 8014648:	d1f7      	bne.n	801463a <strncpy+0x6>
 801464a:	441a      	add	r2, r3
 801464c:	2100      	movs	r1, #0
 801464e:	4293      	cmp	r3, r2
 8014650:	d100      	bne.n	8014654 <strncpy+0x20>
 8014652:	bd10      	pop	{r4, pc}
 8014654:	f803 1b01 	strb.w	r1, [r3], #1
 8014658:	e7f9      	b.n	801464e <strncpy+0x1a>

0801465a <memset>:
 801465a:	4402      	add	r2, r0
 801465c:	4603      	mov	r3, r0
 801465e:	4293      	cmp	r3, r2
 8014660:	d100      	bne.n	8014664 <memset+0xa>
 8014662:	4770      	bx	lr
 8014664:	f803 1b01 	strb.w	r1, [r3], #1
 8014668:	e7f9      	b.n	801465e <memset+0x4>
	...

0801466c <_reclaim_reent>:
 801466c:	4b29      	ldr	r3, [pc, #164]	; (8014714 <_reclaim_reent+0xa8>)
 801466e:	681b      	ldr	r3, [r3, #0]
 8014670:	4283      	cmp	r3, r0
 8014672:	b570      	push	{r4, r5, r6, lr}
 8014674:	4604      	mov	r4, r0
 8014676:	d04b      	beq.n	8014710 <_reclaim_reent+0xa4>
 8014678:	69c3      	ldr	r3, [r0, #28]
 801467a:	b143      	cbz	r3, 801468e <_reclaim_reent+0x22>
 801467c:	68db      	ldr	r3, [r3, #12]
 801467e:	2b00      	cmp	r3, #0
 8014680:	d144      	bne.n	801470c <_reclaim_reent+0xa0>
 8014682:	69e3      	ldr	r3, [r4, #28]
 8014684:	6819      	ldr	r1, [r3, #0]
 8014686:	b111      	cbz	r1, 801468e <_reclaim_reent+0x22>
 8014688:	4620      	mov	r0, r4
 801468a:	f000 f879 	bl	8014780 <_free_r>
 801468e:	6961      	ldr	r1, [r4, #20]
 8014690:	b111      	cbz	r1, 8014698 <_reclaim_reent+0x2c>
 8014692:	4620      	mov	r0, r4
 8014694:	f000 f874 	bl	8014780 <_free_r>
 8014698:	69e1      	ldr	r1, [r4, #28]
 801469a:	b111      	cbz	r1, 80146a2 <_reclaim_reent+0x36>
 801469c:	4620      	mov	r0, r4
 801469e:	f000 f86f 	bl	8014780 <_free_r>
 80146a2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80146a4:	b111      	cbz	r1, 80146ac <_reclaim_reent+0x40>
 80146a6:	4620      	mov	r0, r4
 80146a8:	f000 f86a 	bl	8014780 <_free_r>
 80146ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80146ae:	b111      	cbz	r1, 80146b6 <_reclaim_reent+0x4a>
 80146b0:	4620      	mov	r0, r4
 80146b2:	f000 f865 	bl	8014780 <_free_r>
 80146b6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80146b8:	b111      	cbz	r1, 80146c0 <_reclaim_reent+0x54>
 80146ba:	4620      	mov	r0, r4
 80146bc:	f000 f860 	bl	8014780 <_free_r>
 80146c0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80146c2:	b111      	cbz	r1, 80146ca <_reclaim_reent+0x5e>
 80146c4:	4620      	mov	r0, r4
 80146c6:	f000 f85b 	bl	8014780 <_free_r>
 80146ca:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80146cc:	b111      	cbz	r1, 80146d4 <_reclaim_reent+0x68>
 80146ce:	4620      	mov	r0, r4
 80146d0:	f000 f856 	bl	8014780 <_free_r>
 80146d4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80146d6:	b111      	cbz	r1, 80146de <_reclaim_reent+0x72>
 80146d8:	4620      	mov	r0, r4
 80146da:	f000 f851 	bl	8014780 <_free_r>
 80146de:	6a23      	ldr	r3, [r4, #32]
 80146e0:	b1b3      	cbz	r3, 8014710 <_reclaim_reent+0xa4>
 80146e2:	4620      	mov	r0, r4
 80146e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80146e8:	4718      	bx	r3
 80146ea:	5949      	ldr	r1, [r1, r5]
 80146ec:	b941      	cbnz	r1, 8014700 <_reclaim_reent+0x94>
 80146ee:	3504      	adds	r5, #4
 80146f0:	69e3      	ldr	r3, [r4, #28]
 80146f2:	2d80      	cmp	r5, #128	; 0x80
 80146f4:	68d9      	ldr	r1, [r3, #12]
 80146f6:	d1f8      	bne.n	80146ea <_reclaim_reent+0x7e>
 80146f8:	4620      	mov	r0, r4
 80146fa:	f000 f841 	bl	8014780 <_free_r>
 80146fe:	e7c0      	b.n	8014682 <_reclaim_reent+0x16>
 8014700:	680e      	ldr	r6, [r1, #0]
 8014702:	4620      	mov	r0, r4
 8014704:	f000 f83c 	bl	8014780 <_free_r>
 8014708:	4631      	mov	r1, r6
 801470a:	e7ef      	b.n	80146ec <_reclaim_reent+0x80>
 801470c:	2500      	movs	r5, #0
 801470e:	e7ef      	b.n	80146f0 <_reclaim_reent+0x84>
 8014710:	bd70      	pop	{r4, r5, r6, pc}
 8014712:	bf00      	nop
 8014714:	20000198 	.word	0x20000198

08014718 <__libc_init_array>:
 8014718:	b570      	push	{r4, r5, r6, lr}
 801471a:	4d0d      	ldr	r5, [pc, #52]	; (8014750 <__libc_init_array+0x38>)
 801471c:	4c0d      	ldr	r4, [pc, #52]	; (8014754 <__libc_init_array+0x3c>)
 801471e:	1b64      	subs	r4, r4, r5
 8014720:	10a4      	asrs	r4, r4, #2
 8014722:	2600      	movs	r6, #0
 8014724:	42a6      	cmp	r6, r4
 8014726:	d109      	bne.n	801473c <__libc_init_array+0x24>
 8014728:	4d0b      	ldr	r5, [pc, #44]	; (8014758 <__libc_init_array+0x40>)
 801472a:	4c0c      	ldr	r4, [pc, #48]	; (801475c <__libc_init_array+0x44>)
 801472c:	f001 f90c 	bl	8015948 <_init>
 8014730:	1b64      	subs	r4, r4, r5
 8014732:	10a4      	asrs	r4, r4, #2
 8014734:	2600      	movs	r6, #0
 8014736:	42a6      	cmp	r6, r4
 8014738:	d105      	bne.n	8014746 <__libc_init_array+0x2e>
 801473a:	bd70      	pop	{r4, r5, r6, pc}
 801473c:	f855 3b04 	ldr.w	r3, [r5], #4
 8014740:	4798      	blx	r3
 8014742:	3601      	adds	r6, #1
 8014744:	e7ee      	b.n	8014724 <__libc_init_array+0xc>
 8014746:	f855 3b04 	ldr.w	r3, [r5], #4
 801474a:	4798      	blx	r3
 801474c:	3601      	adds	r6, #1
 801474e:	e7f2      	b.n	8014736 <__libc_init_array+0x1e>
 8014750:	080165f0 	.word	0x080165f0
 8014754:	080165f0 	.word	0x080165f0
 8014758:	080165f0 	.word	0x080165f0
 801475c:	080165f4 	.word	0x080165f4

08014760 <__retarget_lock_acquire_recursive>:
 8014760:	4770      	bx	lr

08014762 <__retarget_lock_release_recursive>:
 8014762:	4770      	bx	lr

08014764 <memcpy>:
 8014764:	440a      	add	r2, r1
 8014766:	4291      	cmp	r1, r2
 8014768:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801476c:	d100      	bne.n	8014770 <memcpy+0xc>
 801476e:	4770      	bx	lr
 8014770:	b510      	push	{r4, lr}
 8014772:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014776:	f803 4f01 	strb.w	r4, [r3, #1]!
 801477a:	4291      	cmp	r1, r2
 801477c:	d1f9      	bne.n	8014772 <memcpy+0xe>
 801477e:	bd10      	pop	{r4, pc}

08014780 <_free_r>:
 8014780:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014782:	2900      	cmp	r1, #0
 8014784:	d044      	beq.n	8014810 <_free_r+0x90>
 8014786:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801478a:	9001      	str	r0, [sp, #4]
 801478c:	2b00      	cmp	r3, #0
 801478e:	f1a1 0404 	sub.w	r4, r1, #4
 8014792:	bfb8      	it	lt
 8014794:	18e4      	addlt	r4, r4, r3
 8014796:	f7ff ff2f 	bl	80145f8 <__malloc_lock>
 801479a:	4a1e      	ldr	r2, [pc, #120]	; (8014814 <_free_r+0x94>)
 801479c:	9801      	ldr	r0, [sp, #4]
 801479e:	6813      	ldr	r3, [r2, #0]
 80147a0:	b933      	cbnz	r3, 80147b0 <_free_r+0x30>
 80147a2:	6063      	str	r3, [r4, #4]
 80147a4:	6014      	str	r4, [r2, #0]
 80147a6:	b003      	add	sp, #12
 80147a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80147ac:	f7ff bf2a 	b.w	8014604 <__malloc_unlock>
 80147b0:	42a3      	cmp	r3, r4
 80147b2:	d908      	bls.n	80147c6 <_free_r+0x46>
 80147b4:	6825      	ldr	r5, [r4, #0]
 80147b6:	1961      	adds	r1, r4, r5
 80147b8:	428b      	cmp	r3, r1
 80147ba:	bf01      	itttt	eq
 80147bc:	6819      	ldreq	r1, [r3, #0]
 80147be:	685b      	ldreq	r3, [r3, #4]
 80147c0:	1949      	addeq	r1, r1, r5
 80147c2:	6021      	streq	r1, [r4, #0]
 80147c4:	e7ed      	b.n	80147a2 <_free_r+0x22>
 80147c6:	461a      	mov	r2, r3
 80147c8:	685b      	ldr	r3, [r3, #4]
 80147ca:	b10b      	cbz	r3, 80147d0 <_free_r+0x50>
 80147cc:	42a3      	cmp	r3, r4
 80147ce:	d9fa      	bls.n	80147c6 <_free_r+0x46>
 80147d0:	6811      	ldr	r1, [r2, #0]
 80147d2:	1855      	adds	r5, r2, r1
 80147d4:	42a5      	cmp	r5, r4
 80147d6:	d10b      	bne.n	80147f0 <_free_r+0x70>
 80147d8:	6824      	ldr	r4, [r4, #0]
 80147da:	4421      	add	r1, r4
 80147dc:	1854      	adds	r4, r2, r1
 80147de:	42a3      	cmp	r3, r4
 80147e0:	6011      	str	r1, [r2, #0]
 80147e2:	d1e0      	bne.n	80147a6 <_free_r+0x26>
 80147e4:	681c      	ldr	r4, [r3, #0]
 80147e6:	685b      	ldr	r3, [r3, #4]
 80147e8:	6053      	str	r3, [r2, #4]
 80147ea:	440c      	add	r4, r1
 80147ec:	6014      	str	r4, [r2, #0]
 80147ee:	e7da      	b.n	80147a6 <_free_r+0x26>
 80147f0:	d902      	bls.n	80147f8 <_free_r+0x78>
 80147f2:	230c      	movs	r3, #12
 80147f4:	6003      	str	r3, [r0, #0]
 80147f6:	e7d6      	b.n	80147a6 <_free_r+0x26>
 80147f8:	6825      	ldr	r5, [r4, #0]
 80147fa:	1961      	adds	r1, r4, r5
 80147fc:	428b      	cmp	r3, r1
 80147fe:	bf04      	itt	eq
 8014800:	6819      	ldreq	r1, [r3, #0]
 8014802:	685b      	ldreq	r3, [r3, #4]
 8014804:	6063      	str	r3, [r4, #4]
 8014806:	bf04      	itt	eq
 8014808:	1949      	addeq	r1, r1, r5
 801480a:	6021      	streq	r1, [r4, #0]
 801480c:	6054      	str	r4, [r2, #4]
 801480e:	e7ca      	b.n	80147a6 <_free_r+0x26>
 8014810:	b003      	add	sp, #12
 8014812:	bd30      	pop	{r4, r5, pc}
 8014814:	20016f24 	.word	0x20016f24

08014818 <cos>:
 8014818:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801481a:	ec53 2b10 	vmov	r2, r3, d0
 801481e:	4826      	ldr	r0, [pc, #152]	; (80148b8 <cos+0xa0>)
 8014820:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8014824:	4281      	cmp	r1, r0
 8014826:	dc06      	bgt.n	8014836 <cos+0x1e>
 8014828:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80148b0 <cos+0x98>
 801482c:	b005      	add	sp, #20
 801482e:	f85d eb04 	ldr.w	lr, [sp], #4
 8014832:	f000 be01 	b.w	8015438 <__kernel_cos>
 8014836:	4821      	ldr	r0, [pc, #132]	; (80148bc <cos+0xa4>)
 8014838:	4281      	cmp	r1, r0
 801483a:	dd09      	ble.n	8014850 <cos+0x38>
 801483c:	ee10 0a10 	vmov	r0, s0
 8014840:	4619      	mov	r1, r3
 8014842:	f7eb fce1 	bl	8000208 <__aeabi_dsub>
 8014846:	ec41 0b10 	vmov	d0, r0, r1
 801484a:	b005      	add	sp, #20
 801484c:	f85d fb04 	ldr.w	pc, [sp], #4
 8014850:	4668      	mov	r0, sp
 8014852:	f000 f899 	bl	8014988 <__ieee754_rem_pio2>
 8014856:	f000 0003 	and.w	r0, r0, #3
 801485a:	2801      	cmp	r0, #1
 801485c:	d00b      	beq.n	8014876 <cos+0x5e>
 801485e:	2802      	cmp	r0, #2
 8014860:	d016      	beq.n	8014890 <cos+0x78>
 8014862:	b9e0      	cbnz	r0, 801489e <cos+0x86>
 8014864:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014868:	ed9d 0b00 	vldr	d0, [sp]
 801486c:	f000 fde4 	bl	8015438 <__kernel_cos>
 8014870:	ec51 0b10 	vmov	r0, r1, d0
 8014874:	e7e7      	b.n	8014846 <cos+0x2e>
 8014876:	ed9d 1b02 	vldr	d1, [sp, #8]
 801487a:	ed9d 0b00 	vldr	d0, [sp]
 801487e:	f000 fea3 	bl	80155c8 <__kernel_sin>
 8014882:	ec53 2b10 	vmov	r2, r3, d0
 8014886:	ee10 0a10 	vmov	r0, s0
 801488a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801488e:	e7da      	b.n	8014846 <cos+0x2e>
 8014890:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014894:	ed9d 0b00 	vldr	d0, [sp]
 8014898:	f000 fdce 	bl	8015438 <__kernel_cos>
 801489c:	e7f1      	b.n	8014882 <cos+0x6a>
 801489e:	ed9d 1b02 	vldr	d1, [sp, #8]
 80148a2:	ed9d 0b00 	vldr	d0, [sp]
 80148a6:	2001      	movs	r0, #1
 80148a8:	f000 fe8e 	bl	80155c8 <__kernel_sin>
 80148ac:	e7e0      	b.n	8014870 <cos+0x58>
 80148ae:	bf00      	nop
	...
 80148b8:	3fe921fb 	.word	0x3fe921fb
 80148bc:	7fefffff 	.word	0x7fefffff

080148c0 <fabs>:
 80148c0:	ec51 0b10 	vmov	r0, r1, d0
 80148c4:	ee10 2a10 	vmov	r2, s0
 80148c8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80148cc:	ec43 2b10 	vmov	d0, r2, r3
 80148d0:	4770      	bx	lr
 80148d2:	0000      	movs	r0, r0
 80148d4:	0000      	movs	r0, r0
	...

080148d8 <sin>:
 80148d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80148da:	ec53 2b10 	vmov	r2, r3, d0
 80148de:	4828      	ldr	r0, [pc, #160]	; (8014980 <sin+0xa8>)
 80148e0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80148e4:	4281      	cmp	r1, r0
 80148e6:	dc07      	bgt.n	80148f8 <sin+0x20>
 80148e8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8014978 <sin+0xa0>
 80148ec:	2000      	movs	r0, #0
 80148ee:	b005      	add	sp, #20
 80148f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80148f4:	f000 be68 	b.w	80155c8 <__kernel_sin>
 80148f8:	4822      	ldr	r0, [pc, #136]	; (8014984 <sin+0xac>)
 80148fa:	4281      	cmp	r1, r0
 80148fc:	dd09      	ble.n	8014912 <sin+0x3a>
 80148fe:	ee10 0a10 	vmov	r0, s0
 8014902:	4619      	mov	r1, r3
 8014904:	f7eb fc80 	bl	8000208 <__aeabi_dsub>
 8014908:	ec41 0b10 	vmov	d0, r0, r1
 801490c:	b005      	add	sp, #20
 801490e:	f85d fb04 	ldr.w	pc, [sp], #4
 8014912:	4668      	mov	r0, sp
 8014914:	f000 f838 	bl	8014988 <__ieee754_rem_pio2>
 8014918:	f000 0003 	and.w	r0, r0, #3
 801491c:	2801      	cmp	r0, #1
 801491e:	d00c      	beq.n	801493a <sin+0x62>
 8014920:	2802      	cmp	r0, #2
 8014922:	d011      	beq.n	8014948 <sin+0x70>
 8014924:	b9f0      	cbnz	r0, 8014964 <sin+0x8c>
 8014926:	ed9d 1b02 	vldr	d1, [sp, #8]
 801492a:	ed9d 0b00 	vldr	d0, [sp]
 801492e:	2001      	movs	r0, #1
 8014930:	f000 fe4a 	bl	80155c8 <__kernel_sin>
 8014934:	ec51 0b10 	vmov	r0, r1, d0
 8014938:	e7e6      	b.n	8014908 <sin+0x30>
 801493a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801493e:	ed9d 0b00 	vldr	d0, [sp]
 8014942:	f000 fd79 	bl	8015438 <__kernel_cos>
 8014946:	e7f5      	b.n	8014934 <sin+0x5c>
 8014948:	ed9d 1b02 	vldr	d1, [sp, #8]
 801494c:	ed9d 0b00 	vldr	d0, [sp]
 8014950:	2001      	movs	r0, #1
 8014952:	f000 fe39 	bl	80155c8 <__kernel_sin>
 8014956:	ec53 2b10 	vmov	r2, r3, d0
 801495a:	ee10 0a10 	vmov	r0, s0
 801495e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8014962:	e7d1      	b.n	8014908 <sin+0x30>
 8014964:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014968:	ed9d 0b00 	vldr	d0, [sp]
 801496c:	f000 fd64 	bl	8015438 <__kernel_cos>
 8014970:	e7f1      	b.n	8014956 <sin+0x7e>
 8014972:	bf00      	nop
 8014974:	f3af 8000 	nop.w
	...
 8014980:	3fe921fb 	.word	0x3fe921fb
 8014984:	7fefffff 	.word	0x7fefffff

08014988 <__ieee754_rem_pio2>:
 8014988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801498c:	ed2d 8b02 	vpush	{d8}
 8014990:	ec55 4b10 	vmov	r4, r5, d0
 8014994:	4bca      	ldr	r3, [pc, #808]	; (8014cc0 <__ieee754_rem_pio2+0x338>)
 8014996:	b08b      	sub	sp, #44	; 0x2c
 8014998:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 801499c:	4598      	cmp	r8, r3
 801499e:	4682      	mov	sl, r0
 80149a0:	9502      	str	r5, [sp, #8]
 80149a2:	dc08      	bgt.n	80149b6 <__ieee754_rem_pio2+0x2e>
 80149a4:	2200      	movs	r2, #0
 80149a6:	2300      	movs	r3, #0
 80149a8:	ed80 0b00 	vstr	d0, [r0]
 80149ac:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80149b0:	f04f 0b00 	mov.w	fp, #0
 80149b4:	e028      	b.n	8014a08 <__ieee754_rem_pio2+0x80>
 80149b6:	4bc3      	ldr	r3, [pc, #780]	; (8014cc4 <__ieee754_rem_pio2+0x33c>)
 80149b8:	4598      	cmp	r8, r3
 80149ba:	dc78      	bgt.n	8014aae <__ieee754_rem_pio2+0x126>
 80149bc:	9b02      	ldr	r3, [sp, #8]
 80149be:	4ec2      	ldr	r6, [pc, #776]	; (8014cc8 <__ieee754_rem_pio2+0x340>)
 80149c0:	2b00      	cmp	r3, #0
 80149c2:	ee10 0a10 	vmov	r0, s0
 80149c6:	a3b0      	add	r3, pc, #704	; (adr r3, 8014c88 <__ieee754_rem_pio2+0x300>)
 80149c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149cc:	4629      	mov	r1, r5
 80149ce:	dd39      	ble.n	8014a44 <__ieee754_rem_pio2+0xbc>
 80149d0:	f7eb fc1a 	bl	8000208 <__aeabi_dsub>
 80149d4:	45b0      	cmp	r8, r6
 80149d6:	4604      	mov	r4, r0
 80149d8:	460d      	mov	r5, r1
 80149da:	d01b      	beq.n	8014a14 <__ieee754_rem_pio2+0x8c>
 80149dc:	a3ac      	add	r3, pc, #688	; (adr r3, 8014c90 <__ieee754_rem_pio2+0x308>)
 80149de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149e2:	f7eb fc11 	bl	8000208 <__aeabi_dsub>
 80149e6:	4602      	mov	r2, r0
 80149e8:	460b      	mov	r3, r1
 80149ea:	e9ca 2300 	strd	r2, r3, [sl]
 80149ee:	4620      	mov	r0, r4
 80149f0:	4629      	mov	r1, r5
 80149f2:	f7eb fc09 	bl	8000208 <__aeabi_dsub>
 80149f6:	a3a6      	add	r3, pc, #664	; (adr r3, 8014c90 <__ieee754_rem_pio2+0x308>)
 80149f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149fc:	f7eb fc04 	bl	8000208 <__aeabi_dsub>
 8014a00:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8014a04:	f04f 0b01 	mov.w	fp, #1
 8014a08:	4658      	mov	r0, fp
 8014a0a:	b00b      	add	sp, #44	; 0x2c
 8014a0c:	ecbd 8b02 	vpop	{d8}
 8014a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a14:	a3a0      	add	r3, pc, #640	; (adr r3, 8014c98 <__ieee754_rem_pio2+0x310>)
 8014a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a1a:	f7eb fbf5 	bl	8000208 <__aeabi_dsub>
 8014a1e:	a3a0      	add	r3, pc, #640	; (adr r3, 8014ca0 <__ieee754_rem_pio2+0x318>)
 8014a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a24:	4604      	mov	r4, r0
 8014a26:	460d      	mov	r5, r1
 8014a28:	f7eb fbee 	bl	8000208 <__aeabi_dsub>
 8014a2c:	4602      	mov	r2, r0
 8014a2e:	460b      	mov	r3, r1
 8014a30:	e9ca 2300 	strd	r2, r3, [sl]
 8014a34:	4620      	mov	r0, r4
 8014a36:	4629      	mov	r1, r5
 8014a38:	f7eb fbe6 	bl	8000208 <__aeabi_dsub>
 8014a3c:	a398      	add	r3, pc, #608	; (adr r3, 8014ca0 <__ieee754_rem_pio2+0x318>)
 8014a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a42:	e7db      	b.n	80149fc <__ieee754_rem_pio2+0x74>
 8014a44:	f7eb fbe2 	bl	800020c <__adddf3>
 8014a48:	45b0      	cmp	r8, r6
 8014a4a:	4604      	mov	r4, r0
 8014a4c:	460d      	mov	r5, r1
 8014a4e:	d016      	beq.n	8014a7e <__ieee754_rem_pio2+0xf6>
 8014a50:	a38f      	add	r3, pc, #572	; (adr r3, 8014c90 <__ieee754_rem_pio2+0x308>)
 8014a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a56:	f7eb fbd9 	bl	800020c <__adddf3>
 8014a5a:	4602      	mov	r2, r0
 8014a5c:	460b      	mov	r3, r1
 8014a5e:	e9ca 2300 	strd	r2, r3, [sl]
 8014a62:	4620      	mov	r0, r4
 8014a64:	4629      	mov	r1, r5
 8014a66:	f7eb fbcf 	bl	8000208 <__aeabi_dsub>
 8014a6a:	a389      	add	r3, pc, #548	; (adr r3, 8014c90 <__ieee754_rem_pio2+0x308>)
 8014a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a70:	f7eb fbcc 	bl	800020c <__adddf3>
 8014a74:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8014a78:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8014a7c:	e7c4      	b.n	8014a08 <__ieee754_rem_pio2+0x80>
 8014a7e:	a386      	add	r3, pc, #536	; (adr r3, 8014c98 <__ieee754_rem_pio2+0x310>)
 8014a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a84:	f7eb fbc2 	bl	800020c <__adddf3>
 8014a88:	a385      	add	r3, pc, #532	; (adr r3, 8014ca0 <__ieee754_rem_pio2+0x318>)
 8014a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a8e:	4604      	mov	r4, r0
 8014a90:	460d      	mov	r5, r1
 8014a92:	f7eb fbbb 	bl	800020c <__adddf3>
 8014a96:	4602      	mov	r2, r0
 8014a98:	460b      	mov	r3, r1
 8014a9a:	e9ca 2300 	strd	r2, r3, [sl]
 8014a9e:	4620      	mov	r0, r4
 8014aa0:	4629      	mov	r1, r5
 8014aa2:	f7eb fbb1 	bl	8000208 <__aeabi_dsub>
 8014aa6:	a37e      	add	r3, pc, #504	; (adr r3, 8014ca0 <__ieee754_rem_pio2+0x318>)
 8014aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014aac:	e7e0      	b.n	8014a70 <__ieee754_rem_pio2+0xe8>
 8014aae:	4b87      	ldr	r3, [pc, #540]	; (8014ccc <__ieee754_rem_pio2+0x344>)
 8014ab0:	4598      	cmp	r8, r3
 8014ab2:	f300 80d8 	bgt.w	8014c66 <__ieee754_rem_pio2+0x2de>
 8014ab6:	f7ff ff03 	bl	80148c0 <fabs>
 8014aba:	ec55 4b10 	vmov	r4, r5, d0
 8014abe:	ee10 0a10 	vmov	r0, s0
 8014ac2:	a379      	add	r3, pc, #484	; (adr r3, 8014ca8 <__ieee754_rem_pio2+0x320>)
 8014ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ac8:	4629      	mov	r1, r5
 8014aca:	f7eb fd55 	bl	8000578 <__aeabi_dmul>
 8014ace:	4b80      	ldr	r3, [pc, #512]	; (8014cd0 <__ieee754_rem_pio2+0x348>)
 8014ad0:	2200      	movs	r2, #0
 8014ad2:	f7eb fb9b 	bl	800020c <__adddf3>
 8014ad6:	f7eb ffe9 	bl	8000aac <__aeabi_d2iz>
 8014ada:	4683      	mov	fp, r0
 8014adc:	f7eb fce2 	bl	80004a4 <__aeabi_i2d>
 8014ae0:	4602      	mov	r2, r0
 8014ae2:	460b      	mov	r3, r1
 8014ae4:	ec43 2b18 	vmov	d8, r2, r3
 8014ae8:	a367      	add	r3, pc, #412	; (adr r3, 8014c88 <__ieee754_rem_pio2+0x300>)
 8014aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014aee:	f7eb fd43 	bl	8000578 <__aeabi_dmul>
 8014af2:	4602      	mov	r2, r0
 8014af4:	460b      	mov	r3, r1
 8014af6:	4620      	mov	r0, r4
 8014af8:	4629      	mov	r1, r5
 8014afa:	f7eb fb85 	bl	8000208 <__aeabi_dsub>
 8014afe:	a364      	add	r3, pc, #400	; (adr r3, 8014c90 <__ieee754_rem_pio2+0x308>)
 8014b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b04:	4606      	mov	r6, r0
 8014b06:	460f      	mov	r7, r1
 8014b08:	ec51 0b18 	vmov	r0, r1, d8
 8014b0c:	f7eb fd34 	bl	8000578 <__aeabi_dmul>
 8014b10:	f1bb 0f1f 	cmp.w	fp, #31
 8014b14:	4604      	mov	r4, r0
 8014b16:	460d      	mov	r5, r1
 8014b18:	dc0d      	bgt.n	8014b36 <__ieee754_rem_pio2+0x1ae>
 8014b1a:	4b6e      	ldr	r3, [pc, #440]	; (8014cd4 <__ieee754_rem_pio2+0x34c>)
 8014b1c:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8014b20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014b24:	4543      	cmp	r3, r8
 8014b26:	d006      	beq.n	8014b36 <__ieee754_rem_pio2+0x1ae>
 8014b28:	4622      	mov	r2, r4
 8014b2a:	462b      	mov	r3, r5
 8014b2c:	4630      	mov	r0, r6
 8014b2e:	4639      	mov	r1, r7
 8014b30:	f7eb fb6a 	bl	8000208 <__aeabi_dsub>
 8014b34:	e00e      	b.n	8014b54 <__ieee754_rem_pio2+0x1cc>
 8014b36:	462b      	mov	r3, r5
 8014b38:	4622      	mov	r2, r4
 8014b3a:	4630      	mov	r0, r6
 8014b3c:	4639      	mov	r1, r7
 8014b3e:	f7eb fb63 	bl	8000208 <__aeabi_dsub>
 8014b42:	ea4f 5328 	mov.w	r3, r8, asr #20
 8014b46:	9303      	str	r3, [sp, #12]
 8014b48:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8014b4c:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8014b50:	2b10      	cmp	r3, #16
 8014b52:	dc02      	bgt.n	8014b5a <__ieee754_rem_pio2+0x1d2>
 8014b54:	e9ca 0100 	strd	r0, r1, [sl]
 8014b58:	e039      	b.n	8014bce <__ieee754_rem_pio2+0x246>
 8014b5a:	a34f      	add	r3, pc, #316	; (adr r3, 8014c98 <__ieee754_rem_pio2+0x310>)
 8014b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b60:	ec51 0b18 	vmov	r0, r1, d8
 8014b64:	f7eb fd08 	bl	8000578 <__aeabi_dmul>
 8014b68:	4604      	mov	r4, r0
 8014b6a:	460d      	mov	r5, r1
 8014b6c:	4602      	mov	r2, r0
 8014b6e:	460b      	mov	r3, r1
 8014b70:	4630      	mov	r0, r6
 8014b72:	4639      	mov	r1, r7
 8014b74:	f7eb fb48 	bl	8000208 <__aeabi_dsub>
 8014b78:	4602      	mov	r2, r0
 8014b7a:	460b      	mov	r3, r1
 8014b7c:	4680      	mov	r8, r0
 8014b7e:	4689      	mov	r9, r1
 8014b80:	4630      	mov	r0, r6
 8014b82:	4639      	mov	r1, r7
 8014b84:	f7eb fb40 	bl	8000208 <__aeabi_dsub>
 8014b88:	4622      	mov	r2, r4
 8014b8a:	462b      	mov	r3, r5
 8014b8c:	f7eb fb3c 	bl	8000208 <__aeabi_dsub>
 8014b90:	a343      	add	r3, pc, #268	; (adr r3, 8014ca0 <__ieee754_rem_pio2+0x318>)
 8014b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b96:	4604      	mov	r4, r0
 8014b98:	460d      	mov	r5, r1
 8014b9a:	ec51 0b18 	vmov	r0, r1, d8
 8014b9e:	f7eb fceb 	bl	8000578 <__aeabi_dmul>
 8014ba2:	4622      	mov	r2, r4
 8014ba4:	462b      	mov	r3, r5
 8014ba6:	f7eb fb2f 	bl	8000208 <__aeabi_dsub>
 8014baa:	4602      	mov	r2, r0
 8014bac:	460b      	mov	r3, r1
 8014bae:	4604      	mov	r4, r0
 8014bb0:	460d      	mov	r5, r1
 8014bb2:	4640      	mov	r0, r8
 8014bb4:	4649      	mov	r1, r9
 8014bb6:	f7eb fb27 	bl	8000208 <__aeabi_dsub>
 8014bba:	9a03      	ldr	r2, [sp, #12]
 8014bbc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8014bc0:	1ad3      	subs	r3, r2, r3
 8014bc2:	2b31      	cmp	r3, #49	; 0x31
 8014bc4:	dc24      	bgt.n	8014c10 <__ieee754_rem_pio2+0x288>
 8014bc6:	e9ca 0100 	strd	r0, r1, [sl]
 8014bca:	4646      	mov	r6, r8
 8014bcc:	464f      	mov	r7, r9
 8014bce:	e9da 8900 	ldrd	r8, r9, [sl]
 8014bd2:	4630      	mov	r0, r6
 8014bd4:	4642      	mov	r2, r8
 8014bd6:	464b      	mov	r3, r9
 8014bd8:	4639      	mov	r1, r7
 8014bda:	f7eb fb15 	bl	8000208 <__aeabi_dsub>
 8014bde:	462b      	mov	r3, r5
 8014be0:	4622      	mov	r2, r4
 8014be2:	f7eb fb11 	bl	8000208 <__aeabi_dsub>
 8014be6:	9b02      	ldr	r3, [sp, #8]
 8014be8:	2b00      	cmp	r3, #0
 8014bea:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8014bee:	f6bf af0b 	bge.w	8014a08 <__ieee754_rem_pio2+0x80>
 8014bf2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8014bf6:	f8ca 3004 	str.w	r3, [sl, #4]
 8014bfa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014bfe:	f8ca 8000 	str.w	r8, [sl]
 8014c02:	f8ca 0008 	str.w	r0, [sl, #8]
 8014c06:	f8ca 300c 	str.w	r3, [sl, #12]
 8014c0a:	f1cb 0b00 	rsb	fp, fp, #0
 8014c0e:	e6fb      	b.n	8014a08 <__ieee754_rem_pio2+0x80>
 8014c10:	a327      	add	r3, pc, #156	; (adr r3, 8014cb0 <__ieee754_rem_pio2+0x328>)
 8014c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c16:	ec51 0b18 	vmov	r0, r1, d8
 8014c1a:	f7eb fcad 	bl	8000578 <__aeabi_dmul>
 8014c1e:	4604      	mov	r4, r0
 8014c20:	460d      	mov	r5, r1
 8014c22:	4602      	mov	r2, r0
 8014c24:	460b      	mov	r3, r1
 8014c26:	4640      	mov	r0, r8
 8014c28:	4649      	mov	r1, r9
 8014c2a:	f7eb faed 	bl	8000208 <__aeabi_dsub>
 8014c2e:	4602      	mov	r2, r0
 8014c30:	460b      	mov	r3, r1
 8014c32:	4606      	mov	r6, r0
 8014c34:	460f      	mov	r7, r1
 8014c36:	4640      	mov	r0, r8
 8014c38:	4649      	mov	r1, r9
 8014c3a:	f7eb fae5 	bl	8000208 <__aeabi_dsub>
 8014c3e:	4622      	mov	r2, r4
 8014c40:	462b      	mov	r3, r5
 8014c42:	f7eb fae1 	bl	8000208 <__aeabi_dsub>
 8014c46:	a31c      	add	r3, pc, #112	; (adr r3, 8014cb8 <__ieee754_rem_pio2+0x330>)
 8014c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c4c:	4604      	mov	r4, r0
 8014c4e:	460d      	mov	r5, r1
 8014c50:	ec51 0b18 	vmov	r0, r1, d8
 8014c54:	f7eb fc90 	bl	8000578 <__aeabi_dmul>
 8014c58:	4622      	mov	r2, r4
 8014c5a:	462b      	mov	r3, r5
 8014c5c:	f7eb fad4 	bl	8000208 <__aeabi_dsub>
 8014c60:	4604      	mov	r4, r0
 8014c62:	460d      	mov	r5, r1
 8014c64:	e760      	b.n	8014b28 <__ieee754_rem_pio2+0x1a0>
 8014c66:	4b1c      	ldr	r3, [pc, #112]	; (8014cd8 <__ieee754_rem_pio2+0x350>)
 8014c68:	4598      	cmp	r8, r3
 8014c6a:	dd37      	ble.n	8014cdc <__ieee754_rem_pio2+0x354>
 8014c6c:	ee10 2a10 	vmov	r2, s0
 8014c70:	462b      	mov	r3, r5
 8014c72:	4620      	mov	r0, r4
 8014c74:	4629      	mov	r1, r5
 8014c76:	f7eb fac7 	bl	8000208 <__aeabi_dsub>
 8014c7a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8014c7e:	e9ca 0100 	strd	r0, r1, [sl]
 8014c82:	e695      	b.n	80149b0 <__ieee754_rem_pio2+0x28>
 8014c84:	f3af 8000 	nop.w
 8014c88:	54400000 	.word	0x54400000
 8014c8c:	3ff921fb 	.word	0x3ff921fb
 8014c90:	1a626331 	.word	0x1a626331
 8014c94:	3dd0b461 	.word	0x3dd0b461
 8014c98:	1a600000 	.word	0x1a600000
 8014c9c:	3dd0b461 	.word	0x3dd0b461
 8014ca0:	2e037073 	.word	0x2e037073
 8014ca4:	3ba3198a 	.word	0x3ba3198a
 8014ca8:	6dc9c883 	.word	0x6dc9c883
 8014cac:	3fe45f30 	.word	0x3fe45f30
 8014cb0:	2e000000 	.word	0x2e000000
 8014cb4:	3ba3198a 	.word	0x3ba3198a
 8014cb8:	252049c1 	.word	0x252049c1
 8014cbc:	397b839a 	.word	0x397b839a
 8014cc0:	3fe921fb 	.word	0x3fe921fb
 8014cc4:	4002d97b 	.word	0x4002d97b
 8014cc8:	3ff921fb 	.word	0x3ff921fb
 8014ccc:	413921fb 	.word	0x413921fb
 8014cd0:	3fe00000 	.word	0x3fe00000
 8014cd4:	0801640c 	.word	0x0801640c
 8014cd8:	7fefffff 	.word	0x7fefffff
 8014cdc:	ea4f 5628 	mov.w	r6, r8, asr #20
 8014ce0:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8014ce4:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8014ce8:	4620      	mov	r0, r4
 8014cea:	460d      	mov	r5, r1
 8014cec:	f7eb fede 	bl	8000aac <__aeabi_d2iz>
 8014cf0:	f7eb fbd8 	bl	80004a4 <__aeabi_i2d>
 8014cf4:	4602      	mov	r2, r0
 8014cf6:	460b      	mov	r3, r1
 8014cf8:	4620      	mov	r0, r4
 8014cfa:	4629      	mov	r1, r5
 8014cfc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8014d00:	f7eb fa82 	bl	8000208 <__aeabi_dsub>
 8014d04:	4b21      	ldr	r3, [pc, #132]	; (8014d8c <__ieee754_rem_pio2+0x404>)
 8014d06:	2200      	movs	r2, #0
 8014d08:	f7eb fc36 	bl	8000578 <__aeabi_dmul>
 8014d0c:	460d      	mov	r5, r1
 8014d0e:	4604      	mov	r4, r0
 8014d10:	f7eb fecc 	bl	8000aac <__aeabi_d2iz>
 8014d14:	f7eb fbc6 	bl	80004a4 <__aeabi_i2d>
 8014d18:	4602      	mov	r2, r0
 8014d1a:	460b      	mov	r3, r1
 8014d1c:	4620      	mov	r0, r4
 8014d1e:	4629      	mov	r1, r5
 8014d20:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014d24:	f7eb fa70 	bl	8000208 <__aeabi_dsub>
 8014d28:	4b18      	ldr	r3, [pc, #96]	; (8014d8c <__ieee754_rem_pio2+0x404>)
 8014d2a:	2200      	movs	r2, #0
 8014d2c:	f7eb fc24 	bl	8000578 <__aeabi_dmul>
 8014d30:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014d34:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8014d38:	2703      	movs	r7, #3
 8014d3a:	2400      	movs	r4, #0
 8014d3c:	2500      	movs	r5, #0
 8014d3e:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8014d42:	4622      	mov	r2, r4
 8014d44:	462b      	mov	r3, r5
 8014d46:	46b9      	mov	r9, r7
 8014d48:	3f01      	subs	r7, #1
 8014d4a:	f7eb fe7d 	bl	8000a48 <__aeabi_dcmpeq>
 8014d4e:	2800      	cmp	r0, #0
 8014d50:	d1f5      	bne.n	8014d3e <__ieee754_rem_pio2+0x3b6>
 8014d52:	4b0f      	ldr	r3, [pc, #60]	; (8014d90 <__ieee754_rem_pio2+0x408>)
 8014d54:	9301      	str	r3, [sp, #4]
 8014d56:	2302      	movs	r3, #2
 8014d58:	9300      	str	r3, [sp, #0]
 8014d5a:	4632      	mov	r2, r6
 8014d5c:	464b      	mov	r3, r9
 8014d5e:	4651      	mov	r1, sl
 8014d60:	a804      	add	r0, sp, #16
 8014d62:	f000 f819 	bl	8014d98 <__kernel_rem_pio2>
 8014d66:	9b02      	ldr	r3, [sp, #8]
 8014d68:	2b00      	cmp	r3, #0
 8014d6a:	4683      	mov	fp, r0
 8014d6c:	f6bf ae4c 	bge.w	8014a08 <__ieee754_rem_pio2+0x80>
 8014d70:	e9da 2100 	ldrd	r2, r1, [sl]
 8014d74:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014d78:	e9ca 2300 	strd	r2, r3, [sl]
 8014d7c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8014d80:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014d84:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8014d88:	e73f      	b.n	8014c0a <__ieee754_rem_pio2+0x282>
 8014d8a:	bf00      	nop
 8014d8c:	41700000 	.word	0x41700000
 8014d90:	0801648c 	.word	0x0801648c
 8014d94:	00000000 	.word	0x00000000

08014d98 <__kernel_rem_pio2>:
 8014d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d9c:	ed2d 8b02 	vpush	{d8}
 8014da0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8014da4:	f112 0f14 	cmn.w	r2, #20
 8014da8:	9306      	str	r3, [sp, #24]
 8014daa:	9104      	str	r1, [sp, #16]
 8014dac:	4bc2      	ldr	r3, [pc, #776]	; (80150b8 <__kernel_rem_pio2+0x320>)
 8014dae:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8014db0:	9009      	str	r0, [sp, #36]	; 0x24
 8014db2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014db6:	9300      	str	r3, [sp, #0]
 8014db8:	9b06      	ldr	r3, [sp, #24]
 8014dba:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8014dbe:	bfa8      	it	ge
 8014dc0:	1ed4      	subge	r4, r2, #3
 8014dc2:	9305      	str	r3, [sp, #20]
 8014dc4:	bfb2      	itee	lt
 8014dc6:	2400      	movlt	r4, #0
 8014dc8:	2318      	movge	r3, #24
 8014dca:	fb94 f4f3 	sdivge	r4, r4, r3
 8014dce:	f06f 0317 	mvn.w	r3, #23
 8014dd2:	fb04 3303 	mla	r3, r4, r3, r3
 8014dd6:	eb03 0a02 	add.w	sl, r3, r2
 8014dda:	9b00      	ldr	r3, [sp, #0]
 8014ddc:	9a05      	ldr	r2, [sp, #20]
 8014dde:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 80150a8 <__kernel_rem_pio2+0x310>
 8014de2:	eb03 0802 	add.w	r8, r3, r2
 8014de6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8014de8:	1aa7      	subs	r7, r4, r2
 8014dea:	ae20      	add	r6, sp, #128	; 0x80
 8014dec:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8014df0:	2500      	movs	r5, #0
 8014df2:	4545      	cmp	r5, r8
 8014df4:	dd13      	ble.n	8014e1e <__kernel_rem_pio2+0x86>
 8014df6:	9b06      	ldr	r3, [sp, #24]
 8014df8:	aa20      	add	r2, sp, #128	; 0x80
 8014dfa:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8014dfe:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8014e02:	f04f 0800 	mov.w	r8, #0
 8014e06:	9b00      	ldr	r3, [sp, #0]
 8014e08:	4598      	cmp	r8, r3
 8014e0a:	dc31      	bgt.n	8014e70 <__kernel_rem_pio2+0xd8>
 8014e0c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 80150a8 <__kernel_rem_pio2+0x310>
 8014e10:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8014e14:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014e18:	462f      	mov	r7, r5
 8014e1a:	2600      	movs	r6, #0
 8014e1c:	e01b      	b.n	8014e56 <__kernel_rem_pio2+0xbe>
 8014e1e:	42ef      	cmn	r7, r5
 8014e20:	d407      	bmi.n	8014e32 <__kernel_rem_pio2+0x9a>
 8014e22:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8014e26:	f7eb fb3d 	bl	80004a4 <__aeabi_i2d>
 8014e2a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8014e2e:	3501      	adds	r5, #1
 8014e30:	e7df      	b.n	8014df2 <__kernel_rem_pio2+0x5a>
 8014e32:	ec51 0b18 	vmov	r0, r1, d8
 8014e36:	e7f8      	b.n	8014e2a <__kernel_rem_pio2+0x92>
 8014e38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014e3c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8014e40:	f7eb fb9a 	bl	8000578 <__aeabi_dmul>
 8014e44:	4602      	mov	r2, r0
 8014e46:	460b      	mov	r3, r1
 8014e48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014e4c:	f7eb f9de 	bl	800020c <__adddf3>
 8014e50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014e54:	3601      	adds	r6, #1
 8014e56:	9b05      	ldr	r3, [sp, #20]
 8014e58:	429e      	cmp	r6, r3
 8014e5a:	f1a7 0708 	sub.w	r7, r7, #8
 8014e5e:	ddeb      	ble.n	8014e38 <__kernel_rem_pio2+0xa0>
 8014e60:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014e64:	f108 0801 	add.w	r8, r8, #1
 8014e68:	ecab 7b02 	vstmia	fp!, {d7}
 8014e6c:	3508      	adds	r5, #8
 8014e6e:	e7ca      	b.n	8014e06 <__kernel_rem_pio2+0x6e>
 8014e70:	9b00      	ldr	r3, [sp, #0]
 8014e72:	aa0c      	add	r2, sp, #48	; 0x30
 8014e74:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014e78:	930b      	str	r3, [sp, #44]	; 0x2c
 8014e7a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8014e7c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8014e80:	9c00      	ldr	r4, [sp, #0]
 8014e82:	930a      	str	r3, [sp, #40]	; 0x28
 8014e84:	00e3      	lsls	r3, r4, #3
 8014e86:	9308      	str	r3, [sp, #32]
 8014e88:	ab98      	add	r3, sp, #608	; 0x260
 8014e8a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8014e8e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8014e92:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8014e96:	ab70      	add	r3, sp, #448	; 0x1c0
 8014e98:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8014e9c:	46c3      	mov	fp, r8
 8014e9e:	46a1      	mov	r9, r4
 8014ea0:	f1b9 0f00 	cmp.w	r9, #0
 8014ea4:	f1a5 0508 	sub.w	r5, r5, #8
 8014ea8:	dc77      	bgt.n	8014f9a <__kernel_rem_pio2+0x202>
 8014eaa:	ec47 6b10 	vmov	d0, r6, r7
 8014eae:	4650      	mov	r0, sl
 8014eb0:	f000 fc4a 	bl	8015748 <scalbn>
 8014eb4:	ec57 6b10 	vmov	r6, r7, d0
 8014eb8:	2200      	movs	r2, #0
 8014eba:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8014ebe:	ee10 0a10 	vmov	r0, s0
 8014ec2:	4639      	mov	r1, r7
 8014ec4:	f7eb fb58 	bl	8000578 <__aeabi_dmul>
 8014ec8:	ec41 0b10 	vmov	d0, r0, r1
 8014ecc:	f000 fcbc 	bl	8015848 <floor>
 8014ed0:	4b7a      	ldr	r3, [pc, #488]	; (80150bc <__kernel_rem_pio2+0x324>)
 8014ed2:	ec51 0b10 	vmov	r0, r1, d0
 8014ed6:	2200      	movs	r2, #0
 8014ed8:	f7eb fb4e 	bl	8000578 <__aeabi_dmul>
 8014edc:	4602      	mov	r2, r0
 8014ede:	460b      	mov	r3, r1
 8014ee0:	4630      	mov	r0, r6
 8014ee2:	4639      	mov	r1, r7
 8014ee4:	f7eb f990 	bl	8000208 <__aeabi_dsub>
 8014ee8:	460f      	mov	r7, r1
 8014eea:	4606      	mov	r6, r0
 8014eec:	f7eb fdde 	bl	8000aac <__aeabi_d2iz>
 8014ef0:	9002      	str	r0, [sp, #8]
 8014ef2:	f7eb fad7 	bl	80004a4 <__aeabi_i2d>
 8014ef6:	4602      	mov	r2, r0
 8014ef8:	460b      	mov	r3, r1
 8014efa:	4630      	mov	r0, r6
 8014efc:	4639      	mov	r1, r7
 8014efe:	f7eb f983 	bl	8000208 <__aeabi_dsub>
 8014f02:	f1ba 0f00 	cmp.w	sl, #0
 8014f06:	4606      	mov	r6, r0
 8014f08:	460f      	mov	r7, r1
 8014f0a:	dd6d      	ble.n	8014fe8 <__kernel_rem_pio2+0x250>
 8014f0c:	1e61      	subs	r1, r4, #1
 8014f0e:	ab0c      	add	r3, sp, #48	; 0x30
 8014f10:	9d02      	ldr	r5, [sp, #8]
 8014f12:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014f16:	f1ca 0018 	rsb	r0, sl, #24
 8014f1a:	fa43 f200 	asr.w	r2, r3, r0
 8014f1e:	4415      	add	r5, r2
 8014f20:	4082      	lsls	r2, r0
 8014f22:	1a9b      	subs	r3, r3, r2
 8014f24:	aa0c      	add	r2, sp, #48	; 0x30
 8014f26:	9502      	str	r5, [sp, #8]
 8014f28:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8014f2c:	f1ca 0217 	rsb	r2, sl, #23
 8014f30:	fa43 fb02 	asr.w	fp, r3, r2
 8014f34:	f1bb 0f00 	cmp.w	fp, #0
 8014f38:	dd65      	ble.n	8015006 <__kernel_rem_pio2+0x26e>
 8014f3a:	9b02      	ldr	r3, [sp, #8]
 8014f3c:	2200      	movs	r2, #0
 8014f3e:	3301      	adds	r3, #1
 8014f40:	9302      	str	r3, [sp, #8]
 8014f42:	4615      	mov	r5, r2
 8014f44:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8014f48:	4294      	cmp	r4, r2
 8014f4a:	f300 809f 	bgt.w	801508c <__kernel_rem_pio2+0x2f4>
 8014f4e:	f1ba 0f00 	cmp.w	sl, #0
 8014f52:	dd07      	ble.n	8014f64 <__kernel_rem_pio2+0x1cc>
 8014f54:	f1ba 0f01 	cmp.w	sl, #1
 8014f58:	f000 80c1 	beq.w	80150de <__kernel_rem_pio2+0x346>
 8014f5c:	f1ba 0f02 	cmp.w	sl, #2
 8014f60:	f000 80c7 	beq.w	80150f2 <__kernel_rem_pio2+0x35a>
 8014f64:	f1bb 0f02 	cmp.w	fp, #2
 8014f68:	d14d      	bne.n	8015006 <__kernel_rem_pio2+0x26e>
 8014f6a:	4632      	mov	r2, r6
 8014f6c:	463b      	mov	r3, r7
 8014f6e:	4954      	ldr	r1, [pc, #336]	; (80150c0 <__kernel_rem_pio2+0x328>)
 8014f70:	2000      	movs	r0, #0
 8014f72:	f7eb f949 	bl	8000208 <__aeabi_dsub>
 8014f76:	4606      	mov	r6, r0
 8014f78:	460f      	mov	r7, r1
 8014f7a:	2d00      	cmp	r5, #0
 8014f7c:	d043      	beq.n	8015006 <__kernel_rem_pio2+0x26e>
 8014f7e:	4650      	mov	r0, sl
 8014f80:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 80150b0 <__kernel_rem_pio2+0x318>
 8014f84:	f000 fbe0 	bl	8015748 <scalbn>
 8014f88:	4630      	mov	r0, r6
 8014f8a:	4639      	mov	r1, r7
 8014f8c:	ec53 2b10 	vmov	r2, r3, d0
 8014f90:	f7eb f93a 	bl	8000208 <__aeabi_dsub>
 8014f94:	4606      	mov	r6, r0
 8014f96:	460f      	mov	r7, r1
 8014f98:	e035      	b.n	8015006 <__kernel_rem_pio2+0x26e>
 8014f9a:	4b4a      	ldr	r3, [pc, #296]	; (80150c4 <__kernel_rem_pio2+0x32c>)
 8014f9c:	2200      	movs	r2, #0
 8014f9e:	4630      	mov	r0, r6
 8014fa0:	4639      	mov	r1, r7
 8014fa2:	f7eb fae9 	bl	8000578 <__aeabi_dmul>
 8014fa6:	f7eb fd81 	bl	8000aac <__aeabi_d2iz>
 8014faa:	f7eb fa7b 	bl	80004a4 <__aeabi_i2d>
 8014fae:	4602      	mov	r2, r0
 8014fb0:	460b      	mov	r3, r1
 8014fb2:	ec43 2b18 	vmov	d8, r2, r3
 8014fb6:	4b44      	ldr	r3, [pc, #272]	; (80150c8 <__kernel_rem_pio2+0x330>)
 8014fb8:	2200      	movs	r2, #0
 8014fba:	f7eb fadd 	bl	8000578 <__aeabi_dmul>
 8014fbe:	4602      	mov	r2, r0
 8014fc0:	460b      	mov	r3, r1
 8014fc2:	4630      	mov	r0, r6
 8014fc4:	4639      	mov	r1, r7
 8014fc6:	f7eb f91f 	bl	8000208 <__aeabi_dsub>
 8014fca:	f7eb fd6f 	bl	8000aac <__aeabi_d2iz>
 8014fce:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014fd2:	f84b 0b04 	str.w	r0, [fp], #4
 8014fd6:	ec51 0b18 	vmov	r0, r1, d8
 8014fda:	f7eb f917 	bl	800020c <__adddf3>
 8014fde:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8014fe2:	4606      	mov	r6, r0
 8014fe4:	460f      	mov	r7, r1
 8014fe6:	e75b      	b.n	8014ea0 <__kernel_rem_pio2+0x108>
 8014fe8:	d106      	bne.n	8014ff8 <__kernel_rem_pio2+0x260>
 8014fea:	1e63      	subs	r3, r4, #1
 8014fec:	aa0c      	add	r2, sp, #48	; 0x30
 8014fee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014ff2:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8014ff6:	e79d      	b.n	8014f34 <__kernel_rem_pio2+0x19c>
 8014ff8:	4b34      	ldr	r3, [pc, #208]	; (80150cc <__kernel_rem_pio2+0x334>)
 8014ffa:	2200      	movs	r2, #0
 8014ffc:	f7eb fd42 	bl	8000a84 <__aeabi_dcmpge>
 8015000:	2800      	cmp	r0, #0
 8015002:	d140      	bne.n	8015086 <__kernel_rem_pio2+0x2ee>
 8015004:	4683      	mov	fp, r0
 8015006:	2200      	movs	r2, #0
 8015008:	2300      	movs	r3, #0
 801500a:	4630      	mov	r0, r6
 801500c:	4639      	mov	r1, r7
 801500e:	f7eb fd1b 	bl	8000a48 <__aeabi_dcmpeq>
 8015012:	2800      	cmp	r0, #0
 8015014:	f000 80c1 	beq.w	801519a <__kernel_rem_pio2+0x402>
 8015018:	1e65      	subs	r5, r4, #1
 801501a:	462b      	mov	r3, r5
 801501c:	2200      	movs	r2, #0
 801501e:	9900      	ldr	r1, [sp, #0]
 8015020:	428b      	cmp	r3, r1
 8015022:	da6d      	bge.n	8015100 <__kernel_rem_pio2+0x368>
 8015024:	2a00      	cmp	r2, #0
 8015026:	f000 808a 	beq.w	801513e <__kernel_rem_pio2+0x3a6>
 801502a:	ab0c      	add	r3, sp, #48	; 0x30
 801502c:	f1aa 0a18 	sub.w	sl, sl, #24
 8015030:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8015034:	2b00      	cmp	r3, #0
 8015036:	f000 80ae 	beq.w	8015196 <__kernel_rem_pio2+0x3fe>
 801503a:	4650      	mov	r0, sl
 801503c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 80150b0 <__kernel_rem_pio2+0x318>
 8015040:	f000 fb82 	bl	8015748 <scalbn>
 8015044:	1c6b      	adds	r3, r5, #1
 8015046:	00da      	lsls	r2, r3, #3
 8015048:	9205      	str	r2, [sp, #20]
 801504a:	ec57 6b10 	vmov	r6, r7, d0
 801504e:	aa70      	add	r2, sp, #448	; 0x1c0
 8015050:	f8df 9070 	ldr.w	r9, [pc, #112]	; 80150c4 <__kernel_rem_pio2+0x32c>
 8015054:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8015058:	462c      	mov	r4, r5
 801505a:	f04f 0800 	mov.w	r8, #0
 801505e:	2c00      	cmp	r4, #0
 8015060:	f280 80d4 	bge.w	801520c <__kernel_rem_pio2+0x474>
 8015064:	462c      	mov	r4, r5
 8015066:	2c00      	cmp	r4, #0
 8015068:	f2c0 8102 	blt.w	8015270 <__kernel_rem_pio2+0x4d8>
 801506c:	4b18      	ldr	r3, [pc, #96]	; (80150d0 <__kernel_rem_pio2+0x338>)
 801506e:	461e      	mov	r6, r3
 8015070:	ab70      	add	r3, sp, #448	; 0x1c0
 8015072:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8015076:	1b2b      	subs	r3, r5, r4
 8015078:	f04f 0900 	mov.w	r9, #0
 801507c:	f04f 0a00 	mov.w	sl, #0
 8015080:	2700      	movs	r7, #0
 8015082:	9306      	str	r3, [sp, #24]
 8015084:	e0e6      	b.n	8015254 <__kernel_rem_pio2+0x4bc>
 8015086:	f04f 0b02 	mov.w	fp, #2
 801508a:	e756      	b.n	8014f3a <__kernel_rem_pio2+0x1a2>
 801508c:	f8d8 3000 	ldr.w	r3, [r8]
 8015090:	bb05      	cbnz	r5, 80150d4 <__kernel_rem_pio2+0x33c>
 8015092:	b123      	cbz	r3, 801509e <__kernel_rem_pio2+0x306>
 8015094:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8015098:	f8c8 3000 	str.w	r3, [r8]
 801509c:	2301      	movs	r3, #1
 801509e:	3201      	adds	r2, #1
 80150a0:	f108 0804 	add.w	r8, r8, #4
 80150a4:	461d      	mov	r5, r3
 80150a6:	e74f      	b.n	8014f48 <__kernel_rem_pio2+0x1b0>
	...
 80150b4:	3ff00000 	.word	0x3ff00000
 80150b8:	080165d8 	.word	0x080165d8
 80150bc:	40200000 	.word	0x40200000
 80150c0:	3ff00000 	.word	0x3ff00000
 80150c4:	3e700000 	.word	0x3e700000
 80150c8:	41700000 	.word	0x41700000
 80150cc:	3fe00000 	.word	0x3fe00000
 80150d0:	08016598 	.word	0x08016598
 80150d4:	1acb      	subs	r3, r1, r3
 80150d6:	f8c8 3000 	str.w	r3, [r8]
 80150da:	462b      	mov	r3, r5
 80150dc:	e7df      	b.n	801509e <__kernel_rem_pio2+0x306>
 80150de:	1e62      	subs	r2, r4, #1
 80150e0:	ab0c      	add	r3, sp, #48	; 0x30
 80150e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80150e6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80150ea:	a90c      	add	r1, sp, #48	; 0x30
 80150ec:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80150f0:	e738      	b.n	8014f64 <__kernel_rem_pio2+0x1cc>
 80150f2:	1e62      	subs	r2, r4, #1
 80150f4:	ab0c      	add	r3, sp, #48	; 0x30
 80150f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80150fa:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80150fe:	e7f4      	b.n	80150ea <__kernel_rem_pio2+0x352>
 8015100:	a90c      	add	r1, sp, #48	; 0x30
 8015102:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8015106:	3b01      	subs	r3, #1
 8015108:	430a      	orrs	r2, r1
 801510a:	e788      	b.n	801501e <__kernel_rem_pio2+0x286>
 801510c:	3301      	adds	r3, #1
 801510e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8015112:	2900      	cmp	r1, #0
 8015114:	d0fa      	beq.n	801510c <__kernel_rem_pio2+0x374>
 8015116:	9a08      	ldr	r2, [sp, #32]
 8015118:	f502 7218 	add.w	r2, r2, #608	; 0x260
 801511c:	446a      	add	r2, sp
 801511e:	3a98      	subs	r2, #152	; 0x98
 8015120:	9208      	str	r2, [sp, #32]
 8015122:	9a06      	ldr	r2, [sp, #24]
 8015124:	a920      	add	r1, sp, #128	; 0x80
 8015126:	18a2      	adds	r2, r4, r2
 8015128:	18e3      	adds	r3, r4, r3
 801512a:	f104 0801 	add.w	r8, r4, #1
 801512e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8015132:	9302      	str	r3, [sp, #8]
 8015134:	9b02      	ldr	r3, [sp, #8]
 8015136:	4543      	cmp	r3, r8
 8015138:	da04      	bge.n	8015144 <__kernel_rem_pio2+0x3ac>
 801513a:	461c      	mov	r4, r3
 801513c:	e6a2      	b.n	8014e84 <__kernel_rem_pio2+0xec>
 801513e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015140:	2301      	movs	r3, #1
 8015142:	e7e4      	b.n	801510e <__kernel_rem_pio2+0x376>
 8015144:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015146:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801514a:	f7eb f9ab 	bl	80004a4 <__aeabi_i2d>
 801514e:	e8e5 0102 	strd	r0, r1, [r5], #8
 8015152:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015154:	46ab      	mov	fp, r5
 8015156:	461c      	mov	r4, r3
 8015158:	f04f 0900 	mov.w	r9, #0
 801515c:	2600      	movs	r6, #0
 801515e:	2700      	movs	r7, #0
 8015160:	9b05      	ldr	r3, [sp, #20]
 8015162:	4599      	cmp	r9, r3
 8015164:	dd06      	ble.n	8015174 <__kernel_rem_pio2+0x3dc>
 8015166:	9b08      	ldr	r3, [sp, #32]
 8015168:	e8e3 6702 	strd	r6, r7, [r3], #8
 801516c:	f108 0801 	add.w	r8, r8, #1
 8015170:	9308      	str	r3, [sp, #32]
 8015172:	e7df      	b.n	8015134 <__kernel_rem_pio2+0x39c>
 8015174:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8015178:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801517c:	f7eb f9fc 	bl	8000578 <__aeabi_dmul>
 8015180:	4602      	mov	r2, r0
 8015182:	460b      	mov	r3, r1
 8015184:	4630      	mov	r0, r6
 8015186:	4639      	mov	r1, r7
 8015188:	f7eb f840 	bl	800020c <__adddf3>
 801518c:	f109 0901 	add.w	r9, r9, #1
 8015190:	4606      	mov	r6, r0
 8015192:	460f      	mov	r7, r1
 8015194:	e7e4      	b.n	8015160 <__kernel_rem_pio2+0x3c8>
 8015196:	3d01      	subs	r5, #1
 8015198:	e747      	b.n	801502a <__kernel_rem_pio2+0x292>
 801519a:	ec47 6b10 	vmov	d0, r6, r7
 801519e:	f1ca 0000 	rsb	r0, sl, #0
 80151a2:	f000 fad1 	bl	8015748 <scalbn>
 80151a6:	ec57 6b10 	vmov	r6, r7, d0
 80151aa:	4ba0      	ldr	r3, [pc, #640]	; (801542c <__kernel_rem_pio2+0x694>)
 80151ac:	ee10 0a10 	vmov	r0, s0
 80151b0:	2200      	movs	r2, #0
 80151b2:	4639      	mov	r1, r7
 80151b4:	f7eb fc66 	bl	8000a84 <__aeabi_dcmpge>
 80151b8:	b1f8      	cbz	r0, 80151fa <__kernel_rem_pio2+0x462>
 80151ba:	4b9d      	ldr	r3, [pc, #628]	; (8015430 <__kernel_rem_pio2+0x698>)
 80151bc:	2200      	movs	r2, #0
 80151be:	4630      	mov	r0, r6
 80151c0:	4639      	mov	r1, r7
 80151c2:	f7eb f9d9 	bl	8000578 <__aeabi_dmul>
 80151c6:	f7eb fc71 	bl	8000aac <__aeabi_d2iz>
 80151ca:	4680      	mov	r8, r0
 80151cc:	f7eb f96a 	bl	80004a4 <__aeabi_i2d>
 80151d0:	4b96      	ldr	r3, [pc, #600]	; (801542c <__kernel_rem_pio2+0x694>)
 80151d2:	2200      	movs	r2, #0
 80151d4:	f7eb f9d0 	bl	8000578 <__aeabi_dmul>
 80151d8:	460b      	mov	r3, r1
 80151da:	4602      	mov	r2, r0
 80151dc:	4639      	mov	r1, r7
 80151de:	4630      	mov	r0, r6
 80151e0:	f7eb f812 	bl	8000208 <__aeabi_dsub>
 80151e4:	f7eb fc62 	bl	8000aac <__aeabi_d2iz>
 80151e8:	1c65      	adds	r5, r4, #1
 80151ea:	ab0c      	add	r3, sp, #48	; 0x30
 80151ec:	f10a 0a18 	add.w	sl, sl, #24
 80151f0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80151f4:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80151f8:	e71f      	b.n	801503a <__kernel_rem_pio2+0x2a2>
 80151fa:	4630      	mov	r0, r6
 80151fc:	4639      	mov	r1, r7
 80151fe:	f7eb fc55 	bl	8000aac <__aeabi_d2iz>
 8015202:	ab0c      	add	r3, sp, #48	; 0x30
 8015204:	4625      	mov	r5, r4
 8015206:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801520a:	e716      	b.n	801503a <__kernel_rem_pio2+0x2a2>
 801520c:	ab0c      	add	r3, sp, #48	; 0x30
 801520e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015212:	f7eb f947 	bl	80004a4 <__aeabi_i2d>
 8015216:	4632      	mov	r2, r6
 8015218:	463b      	mov	r3, r7
 801521a:	f7eb f9ad 	bl	8000578 <__aeabi_dmul>
 801521e:	4642      	mov	r2, r8
 8015220:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8015224:	464b      	mov	r3, r9
 8015226:	4630      	mov	r0, r6
 8015228:	4639      	mov	r1, r7
 801522a:	f7eb f9a5 	bl	8000578 <__aeabi_dmul>
 801522e:	3c01      	subs	r4, #1
 8015230:	4606      	mov	r6, r0
 8015232:	460f      	mov	r7, r1
 8015234:	e713      	b.n	801505e <__kernel_rem_pio2+0x2c6>
 8015236:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 801523a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 801523e:	f7eb f99b 	bl	8000578 <__aeabi_dmul>
 8015242:	4602      	mov	r2, r0
 8015244:	460b      	mov	r3, r1
 8015246:	4648      	mov	r0, r9
 8015248:	4651      	mov	r1, sl
 801524a:	f7ea ffdf 	bl	800020c <__adddf3>
 801524e:	3701      	adds	r7, #1
 8015250:	4681      	mov	r9, r0
 8015252:	468a      	mov	sl, r1
 8015254:	9b00      	ldr	r3, [sp, #0]
 8015256:	429f      	cmp	r7, r3
 8015258:	dc02      	bgt.n	8015260 <__kernel_rem_pio2+0x4c8>
 801525a:	9b06      	ldr	r3, [sp, #24]
 801525c:	429f      	cmp	r7, r3
 801525e:	ddea      	ble.n	8015236 <__kernel_rem_pio2+0x49e>
 8015260:	9a06      	ldr	r2, [sp, #24]
 8015262:	ab48      	add	r3, sp, #288	; 0x120
 8015264:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8015268:	e9c6 9a00 	strd	r9, sl, [r6]
 801526c:	3c01      	subs	r4, #1
 801526e:	e6fa      	b.n	8015066 <__kernel_rem_pio2+0x2ce>
 8015270:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8015272:	2b02      	cmp	r3, #2
 8015274:	dc0b      	bgt.n	801528e <__kernel_rem_pio2+0x4f6>
 8015276:	2b00      	cmp	r3, #0
 8015278:	dc39      	bgt.n	80152ee <__kernel_rem_pio2+0x556>
 801527a:	d05d      	beq.n	8015338 <__kernel_rem_pio2+0x5a0>
 801527c:	9b02      	ldr	r3, [sp, #8]
 801527e:	f003 0007 	and.w	r0, r3, #7
 8015282:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8015286:	ecbd 8b02 	vpop	{d8}
 801528a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801528e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8015290:	2b03      	cmp	r3, #3
 8015292:	d1f3      	bne.n	801527c <__kernel_rem_pio2+0x4e4>
 8015294:	9b05      	ldr	r3, [sp, #20]
 8015296:	9500      	str	r5, [sp, #0]
 8015298:	f503 7318 	add.w	r3, r3, #608	; 0x260
 801529c:	eb0d 0403 	add.w	r4, sp, r3
 80152a0:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 80152a4:	46a2      	mov	sl, r4
 80152a6:	9b00      	ldr	r3, [sp, #0]
 80152a8:	2b00      	cmp	r3, #0
 80152aa:	f1aa 0a08 	sub.w	sl, sl, #8
 80152ae:	dc69      	bgt.n	8015384 <__kernel_rem_pio2+0x5ec>
 80152b0:	46aa      	mov	sl, r5
 80152b2:	f1ba 0f01 	cmp.w	sl, #1
 80152b6:	f1a4 0408 	sub.w	r4, r4, #8
 80152ba:	f300 8083 	bgt.w	80153c4 <__kernel_rem_pio2+0x62c>
 80152be:	9c05      	ldr	r4, [sp, #20]
 80152c0:	ab48      	add	r3, sp, #288	; 0x120
 80152c2:	441c      	add	r4, r3
 80152c4:	2000      	movs	r0, #0
 80152c6:	2100      	movs	r1, #0
 80152c8:	2d01      	cmp	r5, #1
 80152ca:	f300 809a 	bgt.w	8015402 <__kernel_rem_pio2+0x66a>
 80152ce:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 80152d2:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80152d6:	f1bb 0f00 	cmp.w	fp, #0
 80152da:	f040 8098 	bne.w	801540e <__kernel_rem_pio2+0x676>
 80152de:	9b04      	ldr	r3, [sp, #16]
 80152e0:	e9c3 7800 	strd	r7, r8, [r3]
 80152e4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80152e8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80152ec:	e7c6      	b.n	801527c <__kernel_rem_pio2+0x4e4>
 80152ee:	9e05      	ldr	r6, [sp, #20]
 80152f0:	ab48      	add	r3, sp, #288	; 0x120
 80152f2:	441e      	add	r6, r3
 80152f4:	462c      	mov	r4, r5
 80152f6:	2000      	movs	r0, #0
 80152f8:	2100      	movs	r1, #0
 80152fa:	2c00      	cmp	r4, #0
 80152fc:	da33      	bge.n	8015366 <__kernel_rem_pio2+0x5ce>
 80152fe:	f1bb 0f00 	cmp.w	fp, #0
 8015302:	d036      	beq.n	8015372 <__kernel_rem_pio2+0x5da>
 8015304:	4602      	mov	r2, r0
 8015306:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801530a:	9c04      	ldr	r4, [sp, #16]
 801530c:	e9c4 2300 	strd	r2, r3, [r4]
 8015310:	4602      	mov	r2, r0
 8015312:	460b      	mov	r3, r1
 8015314:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8015318:	f7ea ff76 	bl	8000208 <__aeabi_dsub>
 801531c:	ae4a      	add	r6, sp, #296	; 0x128
 801531e:	2401      	movs	r4, #1
 8015320:	42a5      	cmp	r5, r4
 8015322:	da29      	bge.n	8015378 <__kernel_rem_pio2+0x5e0>
 8015324:	f1bb 0f00 	cmp.w	fp, #0
 8015328:	d002      	beq.n	8015330 <__kernel_rem_pio2+0x598>
 801532a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801532e:	4619      	mov	r1, r3
 8015330:	9b04      	ldr	r3, [sp, #16]
 8015332:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8015336:	e7a1      	b.n	801527c <__kernel_rem_pio2+0x4e4>
 8015338:	9c05      	ldr	r4, [sp, #20]
 801533a:	ab48      	add	r3, sp, #288	; 0x120
 801533c:	441c      	add	r4, r3
 801533e:	2000      	movs	r0, #0
 8015340:	2100      	movs	r1, #0
 8015342:	2d00      	cmp	r5, #0
 8015344:	da09      	bge.n	801535a <__kernel_rem_pio2+0x5c2>
 8015346:	f1bb 0f00 	cmp.w	fp, #0
 801534a:	d002      	beq.n	8015352 <__kernel_rem_pio2+0x5ba>
 801534c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015350:	4619      	mov	r1, r3
 8015352:	9b04      	ldr	r3, [sp, #16]
 8015354:	e9c3 0100 	strd	r0, r1, [r3]
 8015358:	e790      	b.n	801527c <__kernel_rem_pio2+0x4e4>
 801535a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801535e:	f7ea ff55 	bl	800020c <__adddf3>
 8015362:	3d01      	subs	r5, #1
 8015364:	e7ed      	b.n	8015342 <__kernel_rem_pio2+0x5aa>
 8015366:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 801536a:	f7ea ff4f 	bl	800020c <__adddf3>
 801536e:	3c01      	subs	r4, #1
 8015370:	e7c3      	b.n	80152fa <__kernel_rem_pio2+0x562>
 8015372:	4602      	mov	r2, r0
 8015374:	460b      	mov	r3, r1
 8015376:	e7c8      	b.n	801530a <__kernel_rem_pio2+0x572>
 8015378:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801537c:	f7ea ff46 	bl	800020c <__adddf3>
 8015380:	3401      	adds	r4, #1
 8015382:	e7cd      	b.n	8015320 <__kernel_rem_pio2+0x588>
 8015384:	e9da 8900 	ldrd	r8, r9, [sl]
 8015388:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 801538c:	9b00      	ldr	r3, [sp, #0]
 801538e:	3b01      	subs	r3, #1
 8015390:	9300      	str	r3, [sp, #0]
 8015392:	4632      	mov	r2, r6
 8015394:	463b      	mov	r3, r7
 8015396:	4640      	mov	r0, r8
 8015398:	4649      	mov	r1, r9
 801539a:	f7ea ff37 	bl	800020c <__adddf3>
 801539e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80153a2:	4602      	mov	r2, r0
 80153a4:	460b      	mov	r3, r1
 80153a6:	4640      	mov	r0, r8
 80153a8:	4649      	mov	r1, r9
 80153aa:	f7ea ff2d 	bl	8000208 <__aeabi_dsub>
 80153ae:	4632      	mov	r2, r6
 80153b0:	463b      	mov	r3, r7
 80153b2:	f7ea ff2b 	bl	800020c <__adddf3>
 80153b6:	ed9d 7b06 	vldr	d7, [sp, #24]
 80153ba:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80153be:	ed8a 7b00 	vstr	d7, [sl]
 80153c2:	e770      	b.n	80152a6 <__kernel_rem_pio2+0x50e>
 80153c4:	e9d4 8900 	ldrd	r8, r9, [r4]
 80153c8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80153cc:	4640      	mov	r0, r8
 80153ce:	4632      	mov	r2, r6
 80153d0:	463b      	mov	r3, r7
 80153d2:	4649      	mov	r1, r9
 80153d4:	f7ea ff1a 	bl	800020c <__adddf3>
 80153d8:	e9cd 0100 	strd	r0, r1, [sp]
 80153dc:	4602      	mov	r2, r0
 80153de:	460b      	mov	r3, r1
 80153e0:	4640      	mov	r0, r8
 80153e2:	4649      	mov	r1, r9
 80153e4:	f7ea ff10 	bl	8000208 <__aeabi_dsub>
 80153e8:	4632      	mov	r2, r6
 80153ea:	463b      	mov	r3, r7
 80153ec:	f7ea ff0e 	bl	800020c <__adddf3>
 80153f0:	ed9d 7b00 	vldr	d7, [sp]
 80153f4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80153f8:	ed84 7b00 	vstr	d7, [r4]
 80153fc:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8015400:	e757      	b.n	80152b2 <__kernel_rem_pio2+0x51a>
 8015402:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8015406:	f7ea ff01 	bl	800020c <__adddf3>
 801540a:	3d01      	subs	r5, #1
 801540c:	e75c      	b.n	80152c8 <__kernel_rem_pio2+0x530>
 801540e:	9b04      	ldr	r3, [sp, #16]
 8015410:	9a04      	ldr	r2, [sp, #16]
 8015412:	601f      	str	r7, [r3, #0]
 8015414:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8015418:	605c      	str	r4, [r3, #4]
 801541a:	609d      	str	r5, [r3, #8]
 801541c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8015420:	60d3      	str	r3, [r2, #12]
 8015422:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015426:	6110      	str	r0, [r2, #16]
 8015428:	6153      	str	r3, [r2, #20]
 801542a:	e727      	b.n	801527c <__kernel_rem_pio2+0x4e4>
 801542c:	41700000 	.word	0x41700000
 8015430:	3e700000 	.word	0x3e700000
 8015434:	00000000 	.word	0x00000000

08015438 <__kernel_cos>:
 8015438:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801543c:	ec57 6b10 	vmov	r6, r7, d0
 8015440:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8015444:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8015448:	ed8d 1b00 	vstr	d1, [sp]
 801544c:	da07      	bge.n	801545e <__kernel_cos+0x26>
 801544e:	ee10 0a10 	vmov	r0, s0
 8015452:	4639      	mov	r1, r7
 8015454:	f7eb fb2a 	bl	8000aac <__aeabi_d2iz>
 8015458:	2800      	cmp	r0, #0
 801545a:	f000 8088 	beq.w	801556e <__kernel_cos+0x136>
 801545e:	4632      	mov	r2, r6
 8015460:	463b      	mov	r3, r7
 8015462:	4630      	mov	r0, r6
 8015464:	4639      	mov	r1, r7
 8015466:	f7eb f887 	bl	8000578 <__aeabi_dmul>
 801546a:	4b51      	ldr	r3, [pc, #324]	; (80155b0 <__kernel_cos+0x178>)
 801546c:	2200      	movs	r2, #0
 801546e:	4604      	mov	r4, r0
 8015470:	460d      	mov	r5, r1
 8015472:	f7eb f881 	bl	8000578 <__aeabi_dmul>
 8015476:	a340      	add	r3, pc, #256	; (adr r3, 8015578 <__kernel_cos+0x140>)
 8015478:	e9d3 2300 	ldrd	r2, r3, [r3]
 801547c:	4682      	mov	sl, r0
 801547e:	468b      	mov	fp, r1
 8015480:	4620      	mov	r0, r4
 8015482:	4629      	mov	r1, r5
 8015484:	f7eb f878 	bl	8000578 <__aeabi_dmul>
 8015488:	a33d      	add	r3, pc, #244	; (adr r3, 8015580 <__kernel_cos+0x148>)
 801548a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801548e:	f7ea febd 	bl	800020c <__adddf3>
 8015492:	4622      	mov	r2, r4
 8015494:	462b      	mov	r3, r5
 8015496:	f7eb f86f 	bl	8000578 <__aeabi_dmul>
 801549a:	a33b      	add	r3, pc, #236	; (adr r3, 8015588 <__kernel_cos+0x150>)
 801549c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154a0:	f7ea feb2 	bl	8000208 <__aeabi_dsub>
 80154a4:	4622      	mov	r2, r4
 80154a6:	462b      	mov	r3, r5
 80154a8:	f7eb f866 	bl	8000578 <__aeabi_dmul>
 80154ac:	a338      	add	r3, pc, #224	; (adr r3, 8015590 <__kernel_cos+0x158>)
 80154ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154b2:	f7ea feab 	bl	800020c <__adddf3>
 80154b6:	4622      	mov	r2, r4
 80154b8:	462b      	mov	r3, r5
 80154ba:	f7eb f85d 	bl	8000578 <__aeabi_dmul>
 80154be:	a336      	add	r3, pc, #216	; (adr r3, 8015598 <__kernel_cos+0x160>)
 80154c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154c4:	f7ea fea0 	bl	8000208 <__aeabi_dsub>
 80154c8:	4622      	mov	r2, r4
 80154ca:	462b      	mov	r3, r5
 80154cc:	f7eb f854 	bl	8000578 <__aeabi_dmul>
 80154d0:	a333      	add	r3, pc, #204	; (adr r3, 80155a0 <__kernel_cos+0x168>)
 80154d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154d6:	f7ea fe99 	bl	800020c <__adddf3>
 80154da:	4622      	mov	r2, r4
 80154dc:	462b      	mov	r3, r5
 80154de:	f7eb f84b 	bl	8000578 <__aeabi_dmul>
 80154e2:	4622      	mov	r2, r4
 80154e4:	462b      	mov	r3, r5
 80154e6:	f7eb f847 	bl	8000578 <__aeabi_dmul>
 80154ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80154ee:	4604      	mov	r4, r0
 80154f0:	460d      	mov	r5, r1
 80154f2:	4630      	mov	r0, r6
 80154f4:	4639      	mov	r1, r7
 80154f6:	f7eb f83f 	bl	8000578 <__aeabi_dmul>
 80154fa:	460b      	mov	r3, r1
 80154fc:	4602      	mov	r2, r0
 80154fe:	4629      	mov	r1, r5
 8015500:	4620      	mov	r0, r4
 8015502:	f7ea fe81 	bl	8000208 <__aeabi_dsub>
 8015506:	4b2b      	ldr	r3, [pc, #172]	; (80155b4 <__kernel_cos+0x17c>)
 8015508:	4598      	cmp	r8, r3
 801550a:	4606      	mov	r6, r0
 801550c:	460f      	mov	r7, r1
 801550e:	dc10      	bgt.n	8015532 <__kernel_cos+0xfa>
 8015510:	4602      	mov	r2, r0
 8015512:	460b      	mov	r3, r1
 8015514:	4650      	mov	r0, sl
 8015516:	4659      	mov	r1, fp
 8015518:	f7ea fe76 	bl	8000208 <__aeabi_dsub>
 801551c:	460b      	mov	r3, r1
 801551e:	4926      	ldr	r1, [pc, #152]	; (80155b8 <__kernel_cos+0x180>)
 8015520:	4602      	mov	r2, r0
 8015522:	2000      	movs	r0, #0
 8015524:	f7ea fe70 	bl	8000208 <__aeabi_dsub>
 8015528:	ec41 0b10 	vmov	d0, r0, r1
 801552c:	b003      	add	sp, #12
 801552e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015532:	4b22      	ldr	r3, [pc, #136]	; (80155bc <__kernel_cos+0x184>)
 8015534:	4920      	ldr	r1, [pc, #128]	; (80155b8 <__kernel_cos+0x180>)
 8015536:	4598      	cmp	r8, r3
 8015538:	bfcc      	ite	gt
 801553a:	4d21      	ldrgt	r5, [pc, #132]	; (80155c0 <__kernel_cos+0x188>)
 801553c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8015540:	2400      	movs	r4, #0
 8015542:	4622      	mov	r2, r4
 8015544:	462b      	mov	r3, r5
 8015546:	2000      	movs	r0, #0
 8015548:	f7ea fe5e 	bl	8000208 <__aeabi_dsub>
 801554c:	4622      	mov	r2, r4
 801554e:	4680      	mov	r8, r0
 8015550:	4689      	mov	r9, r1
 8015552:	462b      	mov	r3, r5
 8015554:	4650      	mov	r0, sl
 8015556:	4659      	mov	r1, fp
 8015558:	f7ea fe56 	bl	8000208 <__aeabi_dsub>
 801555c:	4632      	mov	r2, r6
 801555e:	463b      	mov	r3, r7
 8015560:	f7ea fe52 	bl	8000208 <__aeabi_dsub>
 8015564:	4602      	mov	r2, r0
 8015566:	460b      	mov	r3, r1
 8015568:	4640      	mov	r0, r8
 801556a:	4649      	mov	r1, r9
 801556c:	e7da      	b.n	8015524 <__kernel_cos+0xec>
 801556e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80155a8 <__kernel_cos+0x170>
 8015572:	e7db      	b.n	801552c <__kernel_cos+0xf4>
 8015574:	f3af 8000 	nop.w
 8015578:	be8838d4 	.word	0xbe8838d4
 801557c:	bda8fae9 	.word	0xbda8fae9
 8015580:	bdb4b1c4 	.word	0xbdb4b1c4
 8015584:	3e21ee9e 	.word	0x3e21ee9e
 8015588:	809c52ad 	.word	0x809c52ad
 801558c:	3e927e4f 	.word	0x3e927e4f
 8015590:	19cb1590 	.word	0x19cb1590
 8015594:	3efa01a0 	.word	0x3efa01a0
 8015598:	16c15177 	.word	0x16c15177
 801559c:	3f56c16c 	.word	0x3f56c16c
 80155a0:	5555554c 	.word	0x5555554c
 80155a4:	3fa55555 	.word	0x3fa55555
 80155a8:	00000000 	.word	0x00000000
 80155ac:	3ff00000 	.word	0x3ff00000
 80155b0:	3fe00000 	.word	0x3fe00000
 80155b4:	3fd33332 	.word	0x3fd33332
 80155b8:	3ff00000 	.word	0x3ff00000
 80155bc:	3fe90000 	.word	0x3fe90000
 80155c0:	3fd20000 	.word	0x3fd20000
 80155c4:	00000000 	.word	0x00000000

080155c8 <__kernel_sin>:
 80155c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80155cc:	ed2d 8b04 	vpush	{d8-d9}
 80155d0:	eeb0 8a41 	vmov.f32	s16, s2
 80155d4:	eef0 8a61 	vmov.f32	s17, s3
 80155d8:	ec55 4b10 	vmov	r4, r5, d0
 80155dc:	b083      	sub	sp, #12
 80155de:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80155e2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80155e6:	9001      	str	r0, [sp, #4]
 80155e8:	da06      	bge.n	80155f8 <__kernel_sin+0x30>
 80155ea:	ee10 0a10 	vmov	r0, s0
 80155ee:	4629      	mov	r1, r5
 80155f0:	f7eb fa5c 	bl	8000aac <__aeabi_d2iz>
 80155f4:	2800      	cmp	r0, #0
 80155f6:	d051      	beq.n	801569c <__kernel_sin+0xd4>
 80155f8:	4622      	mov	r2, r4
 80155fa:	462b      	mov	r3, r5
 80155fc:	4620      	mov	r0, r4
 80155fe:	4629      	mov	r1, r5
 8015600:	f7ea ffba 	bl	8000578 <__aeabi_dmul>
 8015604:	4682      	mov	sl, r0
 8015606:	468b      	mov	fp, r1
 8015608:	4602      	mov	r2, r0
 801560a:	460b      	mov	r3, r1
 801560c:	4620      	mov	r0, r4
 801560e:	4629      	mov	r1, r5
 8015610:	f7ea ffb2 	bl	8000578 <__aeabi_dmul>
 8015614:	a341      	add	r3, pc, #260	; (adr r3, 801571c <__kernel_sin+0x154>)
 8015616:	e9d3 2300 	ldrd	r2, r3, [r3]
 801561a:	4680      	mov	r8, r0
 801561c:	4689      	mov	r9, r1
 801561e:	4650      	mov	r0, sl
 8015620:	4659      	mov	r1, fp
 8015622:	f7ea ffa9 	bl	8000578 <__aeabi_dmul>
 8015626:	a33f      	add	r3, pc, #252	; (adr r3, 8015724 <__kernel_sin+0x15c>)
 8015628:	e9d3 2300 	ldrd	r2, r3, [r3]
 801562c:	f7ea fdec 	bl	8000208 <__aeabi_dsub>
 8015630:	4652      	mov	r2, sl
 8015632:	465b      	mov	r3, fp
 8015634:	f7ea ffa0 	bl	8000578 <__aeabi_dmul>
 8015638:	a33c      	add	r3, pc, #240	; (adr r3, 801572c <__kernel_sin+0x164>)
 801563a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801563e:	f7ea fde5 	bl	800020c <__adddf3>
 8015642:	4652      	mov	r2, sl
 8015644:	465b      	mov	r3, fp
 8015646:	f7ea ff97 	bl	8000578 <__aeabi_dmul>
 801564a:	a33a      	add	r3, pc, #232	; (adr r3, 8015734 <__kernel_sin+0x16c>)
 801564c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015650:	f7ea fdda 	bl	8000208 <__aeabi_dsub>
 8015654:	4652      	mov	r2, sl
 8015656:	465b      	mov	r3, fp
 8015658:	f7ea ff8e 	bl	8000578 <__aeabi_dmul>
 801565c:	a337      	add	r3, pc, #220	; (adr r3, 801573c <__kernel_sin+0x174>)
 801565e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015662:	f7ea fdd3 	bl	800020c <__adddf3>
 8015666:	9b01      	ldr	r3, [sp, #4]
 8015668:	4606      	mov	r6, r0
 801566a:	460f      	mov	r7, r1
 801566c:	b9eb      	cbnz	r3, 80156aa <__kernel_sin+0xe2>
 801566e:	4602      	mov	r2, r0
 8015670:	460b      	mov	r3, r1
 8015672:	4650      	mov	r0, sl
 8015674:	4659      	mov	r1, fp
 8015676:	f7ea ff7f 	bl	8000578 <__aeabi_dmul>
 801567a:	a325      	add	r3, pc, #148	; (adr r3, 8015710 <__kernel_sin+0x148>)
 801567c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015680:	f7ea fdc2 	bl	8000208 <__aeabi_dsub>
 8015684:	4642      	mov	r2, r8
 8015686:	464b      	mov	r3, r9
 8015688:	f7ea ff76 	bl	8000578 <__aeabi_dmul>
 801568c:	4602      	mov	r2, r0
 801568e:	460b      	mov	r3, r1
 8015690:	4620      	mov	r0, r4
 8015692:	4629      	mov	r1, r5
 8015694:	f7ea fdba 	bl	800020c <__adddf3>
 8015698:	4604      	mov	r4, r0
 801569a:	460d      	mov	r5, r1
 801569c:	ec45 4b10 	vmov	d0, r4, r5
 80156a0:	b003      	add	sp, #12
 80156a2:	ecbd 8b04 	vpop	{d8-d9}
 80156a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80156aa:	4b1b      	ldr	r3, [pc, #108]	; (8015718 <__kernel_sin+0x150>)
 80156ac:	ec51 0b18 	vmov	r0, r1, d8
 80156b0:	2200      	movs	r2, #0
 80156b2:	f7ea ff61 	bl	8000578 <__aeabi_dmul>
 80156b6:	4632      	mov	r2, r6
 80156b8:	ec41 0b19 	vmov	d9, r0, r1
 80156bc:	463b      	mov	r3, r7
 80156be:	4640      	mov	r0, r8
 80156c0:	4649      	mov	r1, r9
 80156c2:	f7ea ff59 	bl	8000578 <__aeabi_dmul>
 80156c6:	4602      	mov	r2, r0
 80156c8:	460b      	mov	r3, r1
 80156ca:	ec51 0b19 	vmov	r0, r1, d9
 80156ce:	f7ea fd9b 	bl	8000208 <__aeabi_dsub>
 80156d2:	4652      	mov	r2, sl
 80156d4:	465b      	mov	r3, fp
 80156d6:	f7ea ff4f 	bl	8000578 <__aeabi_dmul>
 80156da:	ec53 2b18 	vmov	r2, r3, d8
 80156de:	f7ea fd93 	bl	8000208 <__aeabi_dsub>
 80156e2:	a30b      	add	r3, pc, #44	; (adr r3, 8015710 <__kernel_sin+0x148>)
 80156e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156e8:	4606      	mov	r6, r0
 80156ea:	460f      	mov	r7, r1
 80156ec:	4640      	mov	r0, r8
 80156ee:	4649      	mov	r1, r9
 80156f0:	f7ea ff42 	bl	8000578 <__aeabi_dmul>
 80156f4:	4602      	mov	r2, r0
 80156f6:	460b      	mov	r3, r1
 80156f8:	4630      	mov	r0, r6
 80156fa:	4639      	mov	r1, r7
 80156fc:	f7ea fd86 	bl	800020c <__adddf3>
 8015700:	4602      	mov	r2, r0
 8015702:	460b      	mov	r3, r1
 8015704:	4620      	mov	r0, r4
 8015706:	4629      	mov	r1, r5
 8015708:	f7ea fd7e 	bl	8000208 <__aeabi_dsub>
 801570c:	e7c4      	b.n	8015698 <__kernel_sin+0xd0>
 801570e:	bf00      	nop
 8015710:	55555549 	.word	0x55555549
 8015714:	3fc55555 	.word	0x3fc55555
 8015718:	3fe00000 	.word	0x3fe00000
 801571c:	5acfd57c 	.word	0x5acfd57c
 8015720:	3de5d93a 	.word	0x3de5d93a
 8015724:	8a2b9ceb 	.word	0x8a2b9ceb
 8015728:	3e5ae5e6 	.word	0x3e5ae5e6
 801572c:	57b1fe7d 	.word	0x57b1fe7d
 8015730:	3ec71de3 	.word	0x3ec71de3
 8015734:	19c161d5 	.word	0x19c161d5
 8015738:	3f2a01a0 	.word	0x3f2a01a0
 801573c:	1110f8a6 	.word	0x1110f8a6
 8015740:	3f811111 	.word	0x3f811111
 8015744:	00000000 	.word	0x00000000

08015748 <scalbn>:
 8015748:	b570      	push	{r4, r5, r6, lr}
 801574a:	ec55 4b10 	vmov	r4, r5, d0
 801574e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8015752:	4606      	mov	r6, r0
 8015754:	462b      	mov	r3, r5
 8015756:	b999      	cbnz	r1, 8015780 <scalbn+0x38>
 8015758:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801575c:	4323      	orrs	r3, r4
 801575e:	d03f      	beq.n	80157e0 <scalbn+0x98>
 8015760:	4b35      	ldr	r3, [pc, #212]	; (8015838 <scalbn+0xf0>)
 8015762:	4629      	mov	r1, r5
 8015764:	ee10 0a10 	vmov	r0, s0
 8015768:	2200      	movs	r2, #0
 801576a:	f7ea ff05 	bl	8000578 <__aeabi_dmul>
 801576e:	4b33      	ldr	r3, [pc, #204]	; (801583c <scalbn+0xf4>)
 8015770:	429e      	cmp	r6, r3
 8015772:	4604      	mov	r4, r0
 8015774:	460d      	mov	r5, r1
 8015776:	da10      	bge.n	801579a <scalbn+0x52>
 8015778:	a327      	add	r3, pc, #156	; (adr r3, 8015818 <scalbn+0xd0>)
 801577a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801577e:	e01f      	b.n	80157c0 <scalbn+0x78>
 8015780:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8015784:	4291      	cmp	r1, r2
 8015786:	d10c      	bne.n	80157a2 <scalbn+0x5a>
 8015788:	ee10 2a10 	vmov	r2, s0
 801578c:	4620      	mov	r0, r4
 801578e:	4629      	mov	r1, r5
 8015790:	f7ea fd3c 	bl	800020c <__adddf3>
 8015794:	4604      	mov	r4, r0
 8015796:	460d      	mov	r5, r1
 8015798:	e022      	b.n	80157e0 <scalbn+0x98>
 801579a:	460b      	mov	r3, r1
 801579c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80157a0:	3936      	subs	r1, #54	; 0x36
 80157a2:	f24c 3250 	movw	r2, #50000	; 0xc350
 80157a6:	4296      	cmp	r6, r2
 80157a8:	dd0d      	ble.n	80157c6 <scalbn+0x7e>
 80157aa:	2d00      	cmp	r5, #0
 80157ac:	a11c      	add	r1, pc, #112	; (adr r1, 8015820 <scalbn+0xd8>)
 80157ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80157b2:	da02      	bge.n	80157ba <scalbn+0x72>
 80157b4:	a11c      	add	r1, pc, #112	; (adr r1, 8015828 <scalbn+0xe0>)
 80157b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80157ba:	a319      	add	r3, pc, #100	; (adr r3, 8015820 <scalbn+0xd8>)
 80157bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157c0:	f7ea feda 	bl	8000578 <__aeabi_dmul>
 80157c4:	e7e6      	b.n	8015794 <scalbn+0x4c>
 80157c6:	1872      	adds	r2, r6, r1
 80157c8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80157cc:	428a      	cmp	r2, r1
 80157ce:	dcec      	bgt.n	80157aa <scalbn+0x62>
 80157d0:	2a00      	cmp	r2, #0
 80157d2:	dd08      	ble.n	80157e6 <scalbn+0x9e>
 80157d4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80157d8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80157dc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80157e0:	ec45 4b10 	vmov	d0, r4, r5
 80157e4:	bd70      	pop	{r4, r5, r6, pc}
 80157e6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80157ea:	da08      	bge.n	80157fe <scalbn+0xb6>
 80157ec:	2d00      	cmp	r5, #0
 80157ee:	a10a      	add	r1, pc, #40	; (adr r1, 8015818 <scalbn+0xd0>)
 80157f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80157f4:	dac0      	bge.n	8015778 <scalbn+0x30>
 80157f6:	a10e      	add	r1, pc, #56	; (adr r1, 8015830 <scalbn+0xe8>)
 80157f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80157fc:	e7bc      	b.n	8015778 <scalbn+0x30>
 80157fe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015802:	3236      	adds	r2, #54	; 0x36
 8015804:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8015808:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801580c:	4620      	mov	r0, r4
 801580e:	4b0c      	ldr	r3, [pc, #48]	; (8015840 <scalbn+0xf8>)
 8015810:	2200      	movs	r2, #0
 8015812:	e7d5      	b.n	80157c0 <scalbn+0x78>
 8015814:	f3af 8000 	nop.w
 8015818:	c2f8f359 	.word	0xc2f8f359
 801581c:	01a56e1f 	.word	0x01a56e1f
 8015820:	8800759c 	.word	0x8800759c
 8015824:	7e37e43c 	.word	0x7e37e43c
 8015828:	8800759c 	.word	0x8800759c
 801582c:	fe37e43c 	.word	0xfe37e43c
 8015830:	c2f8f359 	.word	0xc2f8f359
 8015834:	81a56e1f 	.word	0x81a56e1f
 8015838:	43500000 	.word	0x43500000
 801583c:	ffff3cb0 	.word	0xffff3cb0
 8015840:	3c900000 	.word	0x3c900000
 8015844:	00000000 	.word	0x00000000

08015848 <floor>:
 8015848:	ec51 0b10 	vmov	r0, r1, d0
 801584c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8015850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015854:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8015858:	2e13      	cmp	r6, #19
 801585a:	ee10 5a10 	vmov	r5, s0
 801585e:	ee10 8a10 	vmov	r8, s0
 8015862:	460c      	mov	r4, r1
 8015864:	dc31      	bgt.n	80158ca <floor+0x82>
 8015866:	2e00      	cmp	r6, #0
 8015868:	da14      	bge.n	8015894 <floor+0x4c>
 801586a:	a333      	add	r3, pc, #204	; (adr r3, 8015938 <floor+0xf0>)
 801586c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015870:	f7ea fccc 	bl	800020c <__adddf3>
 8015874:	2200      	movs	r2, #0
 8015876:	2300      	movs	r3, #0
 8015878:	f7eb f90e 	bl	8000a98 <__aeabi_dcmpgt>
 801587c:	b138      	cbz	r0, 801588e <floor+0x46>
 801587e:	2c00      	cmp	r4, #0
 8015880:	da53      	bge.n	801592a <floor+0xe2>
 8015882:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8015886:	4325      	orrs	r5, r4
 8015888:	d052      	beq.n	8015930 <floor+0xe8>
 801588a:	4c2d      	ldr	r4, [pc, #180]	; (8015940 <floor+0xf8>)
 801588c:	2500      	movs	r5, #0
 801588e:	4621      	mov	r1, r4
 8015890:	4628      	mov	r0, r5
 8015892:	e024      	b.n	80158de <floor+0x96>
 8015894:	4f2b      	ldr	r7, [pc, #172]	; (8015944 <floor+0xfc>)
 8015896:	4137      	asrs	r7, r6
 8015898:	ea01 0307 	and.w	r3, r1, r7
 801589c:	4303      	orrs	r3, r0
 801589e:	d01e      	beq.n	80158de <floor+0x96>
 80158a0:	a325      	add	r3, pc, #148	; (adr r3, 8015938 <floor+0xf0>)
 80158a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158a6:	f7ea fcb1 	bl	800020c <__adddf3>
 80158aa:	2200      	movs	r2, #0
 80158ac:	2300      	movs	r3, #0
 80158ae:	f7eb f8f3 	bl	8000a98 <__aeabi_dcmpgt>
 80158b2:	2800      	cmp	r0, #0
 80158b4:	d0eb      	beq.n	801588e <floor+0x46>
 80158b6:	2c00      	cmp	r4, #0
 80158b8:	bfbe      	ittt	lt
 80158ba:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80158be:	4133      	asrlt	r3, r6
 80158c0:	18e4      	addlt	r4, r4, r3
 80158c2:	ea24 0407 	bic.w	r4, r4, r7
 80158c6:	2500      	movs	r5, #0
 80158c8:	e7e1      	b.n	801588e <floor+0x46>
 80158ca:	2e33      	cmp	r6, #51	; 0x33
 80158cc:	dd0b      	ble.n	80158e6 <floor+0x9e>
 80158ce:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80158d2:	d104      	bne.n	80158de <floor+0x96>
 80158d4:	ee10 2a10 	vmov	r2, s0
 80158d8:	460b      	mov	r3, r1
 80158da:	f7ea fc97 	bl	800020c <__adddf3>
 80158de:	ec41 0b10 	vmov	d0, r0, r1
 80158e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80158e6:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 80158ea:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80158ee:	40df      	lsrs	r7, r3
 80158f0:	4238      	tst	r0, r7
 80158f2:	d0f4      	beq.n	80158de <floor+0x96>
 80158f4:	a310      	add	r3, pc, #64	; (adr r3, 8015938 <floor+0xf0>)
 80158f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158fa:	f7ea fc87 	bl	800020c <__adddf3>
 80158fe:	2200      	movs	r2, #0
 8015900:	2300      	movs	r3, #0
 8015902:	f7eb f8c9 	bl	8000a98 <__aeabi_dcmpgt>
 8015906:	2800      	cmp	r0, #0
 8015908:	d0c1      	beq.n	801588e <floor+0x46>
 801590a:	2c00      	cmp	r4, #0
 801590c:	da0a      	bge.n	8015924 <floor+0xdc>
 801590e:	2e14      	cmp	r6, #20
 8015910:	d101      	bne.n	8015916 <floor+0xce>
 8015912:	3401      	adds	r4, #1
 8015914:	e006      	b.n	8015924 <floor+0xdc>
 8015916:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801591a:	2301      	movs	r3, #1
 801591c:	40b3      	lsls	r3, r6
 801591e:	441d      	add	r5, r3
 8015920:	45a8      	cmp	r8, r5
 8015922:	d8f6      	bhi.n	8015912 <floor+0xca>
 8015924:	ea25 0507 	bic.w	r5, r5, r7
 8015928:	e7b1      	b.n	801588e <floor+0x46>
 801592a:	2500      	movs	r5, #0
 801592c:	462c      	mov	r4, r5
 801592e:	e7ae      	b.n	801588e <floor+0x46>
 8015930:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8015934:	e7ab      	b.n	801588e <floor+0x46>
 8015936:	bf00      	nop
 8015938:	8800759c 	.word	0x8800759c
 801593c:	7e37e43c 	.word	0x7e37e43c
 8015940:	bff00000 	.word	0xbff00000
 8015944:	000fffff 	.word	0x000fffff

08015948 <_init>:
 8015948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801594a:	bf00      	nop
 801594c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801594e:	bc08      	pop	{r3}
 8015950:	469e      	mov	lr, r3
 8015952:	4770      	bx	lr

08015954 <_fini>:
 8015954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015956:	bf00      	nop
 8015958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801595a:	bc08      	pop	{r3}
 801595c:	469e      	mov	lr, r3
 801595e:	4770      	bx	lr
