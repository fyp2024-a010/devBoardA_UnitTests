
usbCommunication.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c8b0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  0800ca60  0800ca60  0001ca60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cb54  0800cb54  00020150  2**0
                  CONTENTS
  4 .ARM          00000008  0800cb54  0800cb54  0001cb54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cb5c  0800cb5c  00020150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cb5c  0800cb5c  0001cb5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cb60  0800cb60  0001cb60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000150  20000000  0800cb64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020150  2**0
                  CONTENTS
 10 .bss          00012414  20000150  20000150  00020150  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20012564  20012564  00020150  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 14 .debug_info   00023e6b  00000000  00000000  000201c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00006347  00000000  00000000  0004402e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001f10  00000000  00000000  0004a378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000017ad  00000000  00000000  0004c288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002b69c  00000000  00000000  0004da35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00029820  00000000  00000000  000790d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e9c2e  00000000  00000000  000a28f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00008224  00000000  00000000  0018c520  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000089  00000000  00000000  00194744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000150 	.word	0x20000150
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800ca48 	.word	0x0800ca48

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000154 	.word	0x20000154
 80001ec:	0800ca48 	.word	0x0800ca48

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000200:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000204:	f000 b970 	b.w	80004e8 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	460d      	mov	r5, r1
 8000228:	4604      	mov	r4, r0
 800022a:	460f      	mov	r7, r1
 800022c:	2b00      	cmp	r3, #0
 800022e:	d14a      	bne.n	80002c6 <__udivmoddi4+0xa6>
 8000230:	428a      	cmp	r2, r1
 8000232:	4694      	mov	ip, r2
 8000234:	d965      	bls.n	8000302 <__udivmoddi4+0xe2>
 8000236:	fab2 f382 	clz	r3, r2
 800023a:	b143      	cbz	r3, 800024e <__udivmoddi4+0x2e>
 800023c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000240:	f1c3 0220 	rsb	r2, r3, #32
 8000244:	409f      	lsls	r7, r3
 8000246:	fa20 f202 	lsr.w	r2, r0, r2
 800024a:	4317      	orrs	r7, r2
 800024c:	409c      	lsls	r4, r3
 800024e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000252:	fa1f f58c 	uxth.w	r5, ip
 8000256:	fbb7 f1fe 	udiv	r1, r7, lr
 800025a:	0c22      	lsrs	r2, r4, #16
 800025c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000260:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000264:	fb01 f005 	mul.w	r0, r1, r5
 8000268:	4290      	cmp	r0, r2
 800026a:	d90a      	bls.n	8000282 <__udivmoddi4+0x62>
 800026c:	eb1c 0202 	adds.w	r2, ip, r2
 8000270:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000274:	f080 811c 	bcs.w	80004b0 <__udivmoddi4+0x290>
 8000278:	4290      	cmp	r0, r2
 800027a:	f240 8119 	bls.w	80004b0 <__udivmoddi4+0x290>
 800027e:	3902      	subs	r1, #2
 8000280:	4462      	add	r2, ip
 8000282:	1a12      	subs	r2, r2, r0
 8000284:	b2a4      	uxth	r4, r4
 8000286:	fbb2 f0fe 	udiv	r0, r2, lr
 800028a:	fb0e 2210 	mls	r2, lr, r0, r2
 800028e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000292:	fb00 f505 	mul.w	r5, r0, r5
 8000296:	42a5      	cmp	r5, r4
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x90>
 800029a:	eb1c 0404 	adds.w	r4, ip, r4
 800029e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002a2:	f080 8107 	bcs.w	80004b4 <__udivmoddi4+0x294>
 80002a6:	42a5      	cmp	r5, r4
 80002a8:	f240 8104 	bls.w	80004b4 <__udivmoddi4+0x294>
 80002ac:	4464      	add	r4, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b4:	1b64      	subs	r4, r4, r5
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11e      	cbz	r6, 80002c2 <__udivmoddi4+0xa2>
 80002ba:	40dc      	lsrs	r4, r3
 80002bc:	2300      	movs	r3, #0
 80002be:	e9c6 4300 	strd	r4, r3, [r6]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d908      	bls.n	80002dc <__udivmoddi4+0xbc>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80ed 	beq.w	80004aa <__udivmoddi4+0x28a>
 80002d0:	2100      	movs	r1, #0
 80002d2:	e9c6 0500 	strd	r0, r5, [r6]
 80002d6:	4608      	mov	r0, r1
 80002d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002dc:	fab3 f183 	clz	r1, r3
 80002e0:	2900      	cmp	r1, #0
 80002e2:	d149      	bne.n	8000378 <__udivmoddi4+0x158>
 80002e4:	42ab      	cmp	r3, r5
 80002e6:	d302      	bcc.n	80002ee <__udivmoddi4+0xce>
 80002e8:	4282      	cmp	r2, r0
 80002ea:	f200 80f8 	bhi.w	80004de <__udivmoddi4+0x2be>
 80002ee:	1a84      	subs	r4, r0, r2
 80002f0:	eb65 0203 	sbc.w	r2, r5, r3
 80002f4:	2001      	movs	r0, #1
 80002f6:	4617      	mov	r7, r2
 80002f8:	2e00      	cmp	r6, #0
 80002fa:	d0e2      	beq.n	80002c2 <__udivmoddi4+0xa2>
 80002fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000300:	e7df      	b.n	80002c2 <__udivmoddi4+0xa2>
 8000302:	b902      	cbnz	r2, 8000306 <__udivmoddi4+0xe6>
 8000304:	deff      	udf	#255	; 0xff
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	2b00      	cmp	r3, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x210>
 8000310:	1a8a      	subs	r2, r1, r2
 8000312:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000316:	fa1f fe8c 	uxth.w	lr, ip
 800031a:	2101      	movs	r1, #1
 800031c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000320:	fb07 2015 	mls	r0, r7, r5, r2
 8000324:	0c22      	lsrs	r2, r4, #16
 8000326:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800032a:	fb0e f005 	mul.w	r0, lr, r5
 800032e:	4290      	cmp	r0, r2
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x124>
 8000332:	eb1c 0202 	adds.w	r2, ip, r2
 8000336:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4290      	cmp	r0, r2
 800033e:	f200 80cb 	bhi.w	80004d8 <__udivmoddi4+0x2b8>
 8000342:	4645      	mov	r5, r8
 8000344:	1a12      	subs	r2, r2, r0
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb2 f0f7 	udiv	r0, r2, r7
 800034c:	fb07 2210 	mls	r2, r7, r0, r2
 8000350:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000354:	fb0e fe00 	mul.w	lr, lr, r0
 8000358:	45a6      	cmp	lr, r4
 800035a:	d908      	bls.n	800036e <__udivmoddi4+0x14e>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x14c>
 8000366:	45a6      	cmp	lr, r4
 8000368:	f200 80bb 	bhi.w	80004e2 <__udivmoddi4+0x2c2>
 800036c:	4610      	mov	r0, r2
 800036e:	eba4 040e 	sub.w	r4, r4, lr
 8000372:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000376:	e79f      	b.n	80002b8 <__udivmoddi4+0x98>
 8000378:	f1c1 0720 	rsb	r7, r1, #32
 800037c:	408b      	lsls	r3, r1
 800037e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000382:	ea4c 0c03 	orr.w	ip, ip, r3
 8000386:	fa05 f401 	lsl.w	r4, r5, r1
 800038a:	fa20 f307 	lsr.w	r3, r0, r7
 800038e:	40fd      	lsrs	r5, r7
 8000390:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000394:	4323      	orrs	r3, r4
 8000396:	fbb5 f8f9 	udiv	r8, r5, r9
 800039a:	fa1f fe8c 	uxth.w	lr, ip
 800039e:	fb09 5518 	mls	r5, r9, r8, r5
 80003a2:	0c1c      	lsrs	r4, r3, #16
 80003a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a8:	fb08 f50e 	mul.w	r5, r8, lr
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	fa02 f201 	lsl.w	r2, r2, r1
 80003b2:	fa00 f001 	lsl.w	r0, r0, r1
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1c 0404 	adds.w	r4, ip, r4
 80003bc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003c0:	f080 8088 	bcs.w	80004d4 <__udivmoddi4+0x2b4>
 80003c4:	42a5      	cmp	r5, r4
 80003c6:	f240 8085 	bls.w	80004d4 <__udivmoddi4+0x2b4>
 80003ca:	f1a8 0802 	sub.w	r8, r8, #2
 80003ce:	4464      	add	r4, ip
 80003d0:	1b64      	subs	r4, r4, r5
 80003d2:	b29d      	uxth	r5, r3
 80003d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d8:	fb09 4413 	mls	r4, r9, r3, r4
 80003dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e4:	45a6      	cmp	lr, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003f0:	d26c      	bcs.n	80004cc <__udivmoddi4+0x2ac>
 80003f2:	45a6      	cmp	lr, r4
 80003f4:	d96a      	bls.n	80004cc <__udivmoddi4+0x2ac>
 80003f6:	3b02      	subs	r3, #2
 80003f8:	4464      	add	r4, ip
 80003fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000402:	eba4 040e 	sub.w	r4, r4, lr
 8000406:	42ac      	cmp	r4, r5
 8000408:	46c8      	mov	r8, r9
 800040a:	46ae      	mov	lr, r5
 800040c:	d356      	bcc.n	80004bc <__udivmoddi4+0x29c>
 800040e:	d053      	beq.n	80004b8 <__udivmoddi4+0x298>
 8000410:	b156      	cbz	r6, 8000428 <__udivmoddi4+0x208>
 8000412:	ebb0 0208 	subs.w	r2, r0, r8
 8000416:	eb64 040e 	sbc.w	r4, r4, lr
 800041a:	fa04 f707 	lsl.w	r7, r4, r7
 800041e:	40ca      	lsrs	r2, r1
 8000420:	40cc      	lsrs	r4, r1
 8000422:	4317      	orrs	r7, r2
 8000424:	e9c6 7400 	strd	r7, r4, [r6]
 8000428:	4618      	mov	r0, r3
 800042a:	2100      	movs	r1, #0
 800042c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000430:	f1c3 0120 	rsb	r1, r3, #32
 8000434:	fa02 fc03 	lsl.w	ip, r2, r3
 8000438:	fa20 f201 	lsr.w	r2, r0, r1
 800043c:	fa25 f101 	lsr.w	r1, r5, r1
 8000440:	409d      	lsls	r5, r3
 8000442:	432a      	orrs	r2, r5
 8000444:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000450:	fb07 1510 	mls	r5, r7, r0, r1
 8000454:	0c11      	lsrs	r1, r2, #16
 8000456:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800045a:	fb00 f50e 	mul.w	r5, r0, lr
 800045e:	428d      	cmp	r5, r1
 8000460:	fa04 f403 	lsl.w	r4, r4, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x258>
 8000466:	eb1c 0101 	adds.w	r1, ip, r1
 800046a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800046e:	d22f      	bcs.n	80004d0 <__udivmoddi4+0x2b0>
 8000470:	428d      	cmp	r5, r1
 8000472:	d92d      	bls.n	80004d0 <__udivmoddi4+0x2b0>
 8000474:	3802      	subs	r0, #2
 8000476:	4461      	add	r1, ip
 8000478:	1b49      	subs	r1, r1, r5
 800047a:	b292      	uxth	r2, r2
 800047c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000480:	fb07 1115 	mls	r1, r7, r5, r1
 8000484:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000488:	fb05 f10e 	mul.w	r1, r5, lr
 800048c:	4291      	cmp	r1, r2
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x282>
 8000490:	eb1c 0202 	adds.w	r2, ip, r2
 8000494:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000498:	d216      	bcs.n	80004c8 <__udivmoddi4+0x2a8>
 800049a:	4291      	cmp	r1, r2
 800049c:	d914      	bls.n	80004c8 <__udivmoddi4+0x2a8>
 800049e:	3d02      	subs	r5, #2
 80004a0:	4462      	add	r2, ip
 80004a2:	1a52      	subs	r2, r2, r1
 80004a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a8:	e738      	b.n	800031c <__udivmoddi4+0xfc>
 80004aa:	4631      	mov	r1, r6
 80004ac:	4630      	mov	r0, r6
 80004ae:	e708      	b.n	80002c2 <__udivmoddi4+0xa2>
 80004b0:	4639      	mov	r1, r7
 80004b2:	e6e6      	b.n	8000282 <__udivmoddi4+0x62>
 80004b4:	4610      	mov	r0, r2
 80004b6:	e6fb      	b.n	80002b0 <__udivmoddi4+0x90>
 80004b8:	4548      	cmp	r0, r9
 80004ba:	d2a9      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004bc:	ebb9 0802 	subs.w	r8, r9, r2
 80004c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c4:	3b01      	subs	r3, #1
 80004c6:	e7a3      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c8:	4645      	mov	r5, r8
 80004ca:	e7ea      	b.n	80004a2 <__udivmoddi4+0x282>
 80004cc:	462b      	mov	r3, r5
 80004ce:	e794      	b.n	80003fa <__udivmoddi4+0x1da>
 80004d0:	4640      	mov	r0, r8
 80004d2:	e7d1      	b.n	8000478 <__udivmoddi4+0x258>
 80004d4:	46d0      	mov	r8, sl
 80004d6:	e77b      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d8:	3d02      	subs	r5, #2
 80004da:	4462      	add	r2, ip
 80004dc:	e732      	b.n	8000344 <__udivmoddi4+0x124>
 80004de:	4608      	mov	r0, r1
 80004e0:	e70a      	b.n	80002f8 <__udivmoddi4+0xd8>
 80004e2:	4464      	add	r4, ip
 80004e4:	3802      	subs	r0, #2
 80004e6:	e742      	b.n	800036e <__udivmoddi4+0x14e>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80004f0:	4b17      	ldr	r3, [pc, #92]	; (8000550 <MX_CAN1_Init+0x64>)
 80004f2:	4a18      	ldr	r2, [pc, #96]	; (8000554 <MX_CAN1_Init+0x68>)
 80004f4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 7;
 80004f6:	4b16      	ldr	r3, [pc, #88]	; (8000550 <MX_CAN1_Init+0x64>)
 80004f8:	2207      	movs	r2, #7
 80004fa:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80004fc:	4b14      	ldr	r3, [pc, #80]	; (8000550 <MX_CAN1_Init+0x64>)
 80004fe:	2200      	movs	r2, #0
 8000500:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000502:	4b13      	ldr	r3, [pc, #76]	; (8000550 <MX_CAN1_Init+0x64>)
 8000504:	2200      	movs	r2, #0
 8000506:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000508:	4b11      	ldr	r3, [pc, #68]	; (8000550 <MX_CAN1_Init+0x64>)
 800050a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800050e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000510:	4b0f      	ldr	r3, [pc, #60]	; (8000550 <MX_CAN1_Init+0x64>)
 8000512:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000516:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000518:	4b0d      	ldr	r3, [pc, #52]	; (8000550 <MX_CAN1_Init+0x64>)
 800051a:	2200      	movs	r2, #0
 800051c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800051e:	4b0c      	ldr	r3, [pc, #48]	; (8000550 <MX_CAN1_Init+0x64>)
 8000520:	2200      	movs	r2, #0
 8000522:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000524:	4b0a      	ldr	r3, [pc, #40]	; (8000550 <MX_CAN1_Init+0x64>)
 8000526:	2200      	movs	r2, #0
 8000528:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800052a:	4b09      	ldr	r3, [pc, #36]	; (8000550 <MX_CAN1_Init+0x64>)
 800052c:	2200      	movs	r2, #0
 800052e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000530:	4b07      	ldr	r3, [pc, #28]	; (8000550 <MX_CAN1_Init+0x64>)
 8000532:	2200      	movs	r2, #0
 8000534:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 8000536:	4b06      	ldr	r3, [pc, #24]	; (8000550 <MX_CAN1_Init+0x64>)
 8000538:	2201      	movs	r2, #1
 800053a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800053c:	4804      	ldr	r0, [pc, #16]	; (8000550 <MX_CAN1_Init+0x64>)
 800053e:	f001 f9c5 	bl	80018cc <HAL_CAN_Init>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000548:	f000 fbae 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800054c:	bf00      	nop
 800054e:	bd80      	pop	{r7, pc}
 8000550:	2000016c 	.word	0x2000016c
 8000554:	40006400 	.word	0x40006400

08000558 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 800055c:	4b16      	ldr	r3, [pc, #88]	; (80005b8 <MX_CAN2_Init+0x60>)
 800055e:	4a17      	ldr	r2, [pc, #92]	; (80005bc <MX_CAN2_Init+0x64>)
 8000560:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 8000562:	4b15      	ldr	r3, [pc, #84]	; (80005b8 <MX_CAN2_Init+0x60>)
 8000564:	2210      	movs	r2, #16
 8000566:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000568:	4b13      	ldr	r3, [pc, #76]	; (80005b8 <MX_CAN2_Init+0x60>)
 800056a:	2200      	movs	r2, #0
 800056c:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800056e:	4b12      	ldr	r3, [pc, #72]	; (80005b8 <MX_CAN2_Init+0x60>)
 8000570:	2200      	movs	r2, #0
 8000572:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000574:	4b10      	ldr	r3, [pc, #64]	; (80005b8 <MX_CAN2_Init+0x60>)
 8000576:	2200      	movs	r2, #0
 8000578:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 800057a:	4b0f      	ldr	r3, [pc, #60]	; (80005b8 <MX_CAN2_Init+0x60>)
 800057c:	2200      	movs	r2, #0
 800057e:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000580:	4b0d      	ldr	r3, [pc, #52]	; (80005b8 <MX_CAN2_Init+0x60>)
 8000582:	2200      	movs	r2, #0
 8000584:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000586:	4b0c      	ldr	r3, [pc, #48]	; (80005b8 <MX_CAN2_Init+0x60>)
 8000588:	2200      	movs	r2, #0
 800058a:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 800058c:	4b0a      	ldr	r3, [pc, #40]	; (80005b8 <MX_CAN2_Init+0x60>)
 800058e:	2200      	movs	r2, #0
 8000590:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000592:	4b09      	ldr	r3, [pc, #36]	; (80005b8 <MX_CAN2_Init+0x60>)
 8000594:	2200      	movs	r2, #0
 8000596:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000598:	4b07      	ldr	r3, [pc, #28]	; (80005b8 <MX_CAN2_Init+0x60>)
 800059a:	2200      	movs	r2, #0
 800059c:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800059e:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <MX_CAN2_Init+0x60>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80005a4:	4804      	ldr	r0, [pc, #16]	; (80005b8 <MX_CAN2_Init+0x60>)
 80005a6:	f001 f991 	bl	80018cc <HAL_CAN_Init>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 80005b0:	f000 fb7a 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80005b4:	bf00      	nop
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	20000194 	.word	0x20000194
 80005bc:	40006800 	.word	0x40006800

080005c0 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b08c      	sub	sp, #48	; 0x30
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c8:	f107 031c 	add.w	r3, r7, #28
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	605a      	str	r2, [r3, #4]
 80005d2:	609a      	str	r2, [r3, #8]
 80005d4:	60da      	str	r2, [r3, #12]
 80005d6:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a4a      	ldr	r2, [pc, #296]	; (8000708 <HAL_CAN_MspInit+0x148>)
 80005de:	4293      	cmp	r3, r2
 80005e0:	d145      	bne.n	800066e <HAL_CAN_MspInit+0xae>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80005e2:	4b4a      	ldr	r3, [pc, #296]	; (800070c <HAL_CAN_MspInit+0x14c>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	3301      	adds	r3, #1
 80005e8:	4a48      	ldr	r2, [pc, #288]	; (800070c <HAL_CAN_MspInit+0x14c>)
 80005ea:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80005ec:	4b47      	ldr	r3, [pc, #284]	; (800070c <HAL_CAN_MspInit+0x14c>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	2b01      	cmp	r3, #1
 80005f2:	d10d      	bne.n	8000610 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80005f4:	2300      	movs	r3, #0
 80005f6:	61bb      	str	r3, [r7, #24]
 80005f8:	4b45      	ldr	r3, [pc, #276]	; (8000710 <HAL_CAN_MspInit+0x150>)
 80005fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005fc:	4a44      	ldr	r2, [pc, #272]	; (8000710 <HAL_CAN_MspInit+0x150>)
 80005fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000602:	6413      	str	r3, [r2, #64]	; 0x40
 8000604:	4b42      	ldr	r3, [pc, #264]	; (8000710 <HAL_CAN_MspInit+0x150>)
 8000606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000608:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800060c:	61bb      	str	r3, [r7, #24]
 800060e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000610:	2300      	movs	r3, #0
 8000612:	617b      	str	r3, [r7, #20]
 8000614:	4b3e      	ldr	r3, [pc, #248]	; (8000710 <HAL_CAN_MspInit+0x150>)
 8000616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000618:	4a3d      	ldr	r2, [pc, #244]	; (8000710 <HAL_CAN_MspInit+0x150>)
 800061a:	f043 0308 	orr.w	r3, r3, #8
 800061e:	6313      	str	r3, [r2, #48]	; 0x30
 8000620:	4b3b      	ldr	r3, [pc, #236]	; (8000710 <HAL_CAN_MspInit+0x150>)
 8000622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000624:	f003 0308 	and.w	r3, r3, #8
 8000628:	617b      	str	r3, [r7, #20]
 800062a:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800062c:	2303      	movs	r3, #3
 800062e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000630:	2302      	movs	r3, #2
 8000632:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000634:	2300      	movs	r3, #0
 8000636:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000638:	2303      	movs	r3, #3
 800063a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800063c:	2309      	movs	r3, #9
 800063e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000640:	f107 031c 	add.w	r3, r7, #28
 8000644:	4619      	mov	r1, r3
 8000646:	4833      	ldr	r0, [pc, #204]	; (8000714 <HAL_CAN_MspInit+0x154>)
 8000648:	f002 f8d2 	bl	80027f0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 800064c:	2200      	movs	r2, #0
 800064e:	2105      	movs	r1, #5
 8000650:	2013      	movs	r0, #19
 8000652:	f001 fd27 	bl	80020a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000656:	2013      	movs	r0, #19
 8000658:	f001 fd40 	bl	80020dc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 800065c:	2200      	movs	r2, #0
 800065e:	2105      	movs	r1, #5
 8000660:	2014      	movs	r0, #20
 8000662:	f001 fd1f 	bl	80020a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000666:	2014      	movs	r0, #20
 8000668:	f001 fd38 	bl	80020dc <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 800066c:	e048      	b.n	8000700 <HAL_CAN_MspInit+0x140>
  else if(canHandle->Instance==CAN2)
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4a29      	ldr	r2, [pc, #164]	; (8000718 <HAL_CAN_MspInit+0x158>)
 8000674:	4293      	cmp	r3, r2
 8000676:	d143      	bne.n	8000700 <HAL_CAN_MspInit+0x140>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000678:	2300      	movs	r3, #0
 800067a:	613b      	str	r3, [r7, #16]
 800067c:	4b24      	ldr	r3, [pc, #144]	; (8000710 <HAL_CAN_MspInit+0x150>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000680:	4a23      	ldr	r2, [pc, #140]	; (8000710 <HAL_CAN_MspInit+0x150>)
 8000682:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000686:	6413      	str	r3, [r2, #64]	; 0x40
 8000688:	4b21      	ldr	r3, [pc, #132]	; (8000710 <HAL_CAN_MspInit+0x150>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000690:	613b      	str	r3, [r7, #16]
 8000692:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000694:	4b1d      	ldr	r3, [pc, #116]	; (800070c <HAL_CAN_MspInit+0x14c>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	3301      	adds	r3, #1
 800069a:	4a1c      	ldr	r2, [pc, #112]	; (800070c <HAL_CAN_MspInit+0x14c>)
 800069c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800069e:	4b1b      	ldr	r3, [pc, #108]	; (800070c <HAL_CAN_MspInit+0x14c>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	2b01      	cmp	r3, #1
 80006a4:	d10d      	bne.n	80006c2 <HAL_CAN_MspInit+0x102>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	60fb      	str	r3, [r7, #12]
 80006aa:	4b19      	ldr	r3, [pc, #100]	; (8000710 <HAL_CAN_MspInit+0x150>)
 80006ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ae:	4a18      	ldr	r2, [pc, #96]	; (8000710 <HAL_CAN_MspInit+0x150>)
 80006b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006b4:	6413      	str	r3, [r2, #64]	; 0x40
 80006b6:	4b16      	ldr	r3, [pc, #88]	; (8000710 <HAL_CAN_MspInit+0x150>)
 80006b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80006be:	60fb      	str	r3, [r7, #12]
 80006c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	60bb      	str	r3, [r7, #8]
 80006c6:	4b12      	ldr	r3, [pc, #72]	; (8000710 <HAL_CAN_MspInit+0x150>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	4a11      	ldr	r2, [pc, #68]	; (8000710 <HAL_CAN_MspInit+0x150>)
 80006cc:	f043 0302 	orr.w	r3, r3, #2
 80006d0:	6313      	str	r3, [r2, #48]	; 0x30
 80006d2:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <HAL_CAN_MspInit+0x150>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	f003 0302 	and.w	r3, r3, #2
 80006da:	60bb      	str	r3, [r7, #8]
 80006dc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80006de:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80006e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e4:	2302      	movs	r3, #2
 80006e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e8:	2300      	movs	r3, #0
 80006ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ec:	2303      	movs	r3, #3
 80006ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80006f0:	2309      	movs	r3, #9
 80006f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006f4:	f107 031c 	add.w	r3, r7, #28
 80006f8:	4619      	mov	r1, r3
 80006fa:	4808      	ldr	r0, [pc, #32]	; (800071c <HAL_CAN_MspInit+0x15c>)
 80006fc:	f002 f878 	bl	80027f0 <HAL_GPIO_Init>
}
 8000700:	bf00      	nop
 8000702:	3730      	adds	r7, #48	; 0x30
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	40006400 	.word	0x40006400
 800070c:	200001bc 	.word	0x200001bc
 8000710:	40023800 	.word	0x40023800
 8000714:	40020c00 	.word	0x40020c00
 8000718:	40006800 	.word	0x40006800
 800071c:	40020400 	.word	0x40020400

08000720 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	607b      	str	r3, [r7, #4]
 800072a:	4b10      	ldr	r3, [pc, #64]	; (800076c <MX_DMA_Init+0x4c>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a0f      	ldr	r2, [pc, #60]	; (800076c <MX_DMA_Init+0x4c>)
 8000730:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
 8000736:	4b0d      	ldr	r3, [pc, #52]	; (800076c <MX_DMA_Init+0x4c>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8000742:	2200      	movs	r2, #0
 8000744:	2105      	movs	r1, #5
 8000746:	2039      	movs	r0, #57	; 0x39
 8000748:	f001 fcac 	bl	80020a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800074c:	2039      	movs	r0, #57	; 0x39
 800074e:	f001 fcc5 	bl	80020dc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8000752:	2200      	movs	r2, #0
 8000754:	2105      	movs	r1, #5
 8000756:	2045      	movs	r0, #69	; 0x45
 8000758:	f001 fca4 	bl	80020a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800075c:	2045      	movs	r0, #69	; 0x45
 800075e:	f001 fcbd 	bl	80020dc <HAL_NVIC_EnableIRQ>

}
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40023800 	.word	0x40023800

08000770 <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
 8000778:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800077a:	bf00      	nop
 800077c:	370c      	adds	r7, #12
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr

08000786 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000786:	b480      	push	{r7}
 8000788:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 800078a:	bf00      	nop
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr

08000794 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000794:	b5b0      	push	{r4, r5, r7, lr}
 8000796:	b086      	sub	sp, #24
 8000798:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800079a:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <MX_FREERTOS_Init+0x2c>)
 800079c:	1d3c      	adds	r4, r7, #4
 800079e:	461d      	mov	r5, r3
 80007a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007a4:	682b      	ldr	r3, [r5, #0]
 80007a6:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80007a8:	1d3b      	adds	r3, r7, #4
 80007aa:	2100      	movs	r1, #0
 80007ac:	4618      	mov	r0, r3
 80007ae:	f009 fb54 	bl	8009e5a <osThreadCreate>
 80007b2:	4603      	mov	r3, r0
 80007b4:	4a03      	ldr	r2, [pc, #12]	; (80007c4 <MX_FREERTOS_Init+0x30>)
 80007b6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80007b8:	bf00      	nop
 80007ba:	3718      	adds	r7, #24
 80007bc:	46bd      	mov	sp, r7
 80007be:	bdb0      	pop	{r4, r5, r7, pc}
 80007c0:	0800ca6c 	.word	0x0800ca6c
 80007c4:	200001c0 	.word	0x200001c0

080007c8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80007d0:	f00a fe08 	bl	800b3e4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80007d4:	2001      	movs	r0, #1
 80007d6:	f009 fb67 	bl	8009ea8 <osDelay>
 80007da:	e7fb      	b.n	80007d4 <StartDefaultTask+0xc>

080007dc <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b08e      	sub	sp, #56	; 0x38
 80007e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]
 80007ee:	60da      	str	r2, [r3, #12]
 80007f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	623b      	str	r3, [r7, #32]
 80007f6:	4bb3      	ldr	r3, [pc, #716]	; (8000ac4 <MX_GPIO_Init+0x2e8>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4ab2      	ldr	r2, [pc, #712]	; (8000ac4 <MX_GPIO_Init+0x2e8>)
 80007fc:	f043 0310 	orr.w	r3, r3, #16
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4bb0      	ldr	r3, [pc, #704]	; (8000ac4 <MX_GPIO_Init+0x2e8>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0310 	and.w	r3, r3, #16
 800080a:	623b      	str	r3, [r7, #32]
 800080c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	61fb      	str	r3, [r7, #28]
 8000812:	4bac      	ldr	r3, [pc, #688]	; (8000ac4 <MX_GPIO_Init+0x2e8>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4aab      	ldr	r2, [pc, #684]	; (8000ac4 <MX_GPIO_Init+0x2e8>)
 8000818:	f043 0302 	orr.w	r3, r3, #2
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4ba9      	ldr	r3, [pc, #676]	; (8000ac4 <MX_GPIO_Init+0x2e8>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0302 	and.w	r3, r3, #2
 8000826:	61fb      	str	r3, [r7, #28]
 8000828:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	61bb      	str	r3, [r7, #24]
 800082e:	4ba5      	ldr	r3, [pc, #660]	; (8000ac4 <MX_GPIO_Init+0x2e8>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4aa4      	ldr	r2, [pc, #656]	; (8000ac4 <MX_GPIO_Init+0x2e8>)
 8000834:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4ba2      	ldr	r3, [pc, #648]	; (8000ac4 <MX_GPIO_Init+0x2e8>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000842:	61bb      	str	r3, [r7, #24]
 8000844:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	617b      	str	r3, [r7, #20]
 800084a:	4b9e      	ldr	r3, [pc, #632]	; (8000ac4 <MX_GPIO_Init+0x2e8>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a9d      	ldr	r2, [pc, #628]	; (8000ac4 <MX_GPIO_Init+0x2e8>)
 8000850:	f043 0308 	orr.w	r3, r3, #8
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b9b      	ldr	r3, [pc, #620]	; (8000ac4 <MX_GPIO_Init+0x2e8>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0308 	and.w	r3, r3, #8
 800085e:	617b      	str	r3, [r7, #20]
 8000860:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	613b      	str	r3, [r7, #16]
 8000866:	4b97      	ldr	r3, [pc, #604]	; (8000ac4 <MX_GPIO_Init+0x2e8>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a96      	ldr	r2, [pc, #600]	; (8000ac4 <MX_GPIO_Init+0x2e8>)
 800086c:	f043 0304 	orr.w	r3, r3, #4
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b94      	ldr	r3, [pc, #592]	; (8000ac4 <MX_GPIO_Init+0x2e8>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0304 	and.w	r3, r3, #4
 800087a:	613b      	str	r3, [r7, #16]
 800087c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	60fb      	str	r3, [r7, #12]
 8000882:	4b90      	ldr	r3, [pc, #576]	; (8000ac4 <MX_GPIO_Init+0x2e8>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a8f      	ldr	r2, [pc, #572]	; (8000ac4 <MX_GPIO_Init+0x2e8>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b8d      	ldr	r3, [pc, #564]	; (8000ac4 <MX_GPIO_Init+0x2e8>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	60bb      	str	r3, [r7, #8]
 800089e:	4b89      	ldr	r3, [pc, #548]	; (8000ac4 <MX_GPIO_Init+0x2e8>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a88      	ldr	r2, [pc, #544]	; (8000ac4 <MX_GPIO_Init+0x2e8>)
 80008a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b86      	ldr	r3, [pc, #536]	; (8000ac4 <MX_GPIO_Init+0x2e8>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008b2:	60bb      	str	r3, [r7, #8]
 80008b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	607b      	str	r3, [r7, #4]
 80008ba:	4b82      	ldr	r3, [pc, #520]	; (8000ac4 <MX_GPIO_Init+0x2e8>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a81      	ldr	r2, [pc, #516]	; (8000ac4 <MX_GPIO_Init+0x2e8>)
 80008c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b7f      	ldr	r3, [pc, #508]	; (8000ac4 <MX_GPIO_Init+0x2e8>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	603b      	str	r3, [r7, #0]
 80008d6:	4b7b      	ldr	r3, [pc, #492]	; (8000ac4 <MX_GPIO_Init+0x2e8>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a7a      	ldr	r2, [pc, #488]	; (8000ac4 <MX_GPIO_Init+0x2e8>)
 80008dc:	f043 0320 	orr.w	r3, r3, #32
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b78      	ldr	r3, [pc, #480]	; (8000ac4 <MX_GPIO_Init+0x2e8>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0320 	and.w	r3, r3, #32
 80008ea:	603b      	str	r3, [r7, #0]
 80008ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, IST_RESET_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	f640 0104 	movw	r1, #2052	; 0x804
 80008f4:	4874      	ldr	r0, [pc, #464]	; (8000ac8 <MX_GPIO_Init+0x2ec>)
 80008f6:	f002 f927 	bl	8002b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, POWER1_CTRL_Pin|POWER2_CTRL_Pin|POWER3_CTRL_Pin|POWER4_CTRL_Pin, GPIO_PIN_RESET);
 80008fa:	2200      	movs	r2, #0
 80008fc:	213c      	movs	r1, #60	; 0x3c
 80008fe:	4873      	ldr	r0, [pc, #460]	; (8000acc <MX_GPIO_Init+0x2f0>)
 8000900:	f002 f922 	bl	8002b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED_A_Pin|LED_B_Pin|LED_C_Pin|LED_D_Pin
 8000904:	2200      	movs	r2, #0
 8000906:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 800090a:	4871      	ldr	r0, [pc, #452]	; (8000ad0 <MX_GPIO_Init+0x2f4>)
 800090c:	f002 f91c 	bl	8002b48 <HAL_GPIO_WritePin>
                          |LED_E_Pin|LED_F_Pin|LED_G_Pin|LED_H_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SPI5_NSS_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 8000910:	2200      	movs	r2, #0
 8000912:	f244 0140 	movw	r1, #16448	; 0x4040
 8000916:	486f      	ldr	r0, [pc, #444]	; (8000ad4 <MX_GPIO_Init+0x2f8>)
 8000918:	f002 f916 	bl	8002b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IO_PROBE_GPIO_Port, IO_PROBE_Pin, GPIO_PIN_RESET);
 800091c:	2200      	movs	r2, #0
 800091e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000922:	486d      	ldr	r0, [pc, #436]	; (8000ad8 <MX_GPIO_Init+0x2fc>)
 8000924:	f002 f910 	bl	8002b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE1 PE0 PE4
                           PE5 PE6 PE13 PE8
                           PE9 PE7 PE10 PE12
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_4
 8000928:	f24b 73fb 	movw	r3, #47099	; 0xb7fb
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_13|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800092e:	2303      	movs	r3, #3
 8000930:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000936:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800093a:	4619      	mov	r1, r3
 800093c:	4862      	ldr	r0, [pc, #392]	; (8000ac8 <MX_GPIO_Init+0x2ec>)
 800093e:	f001 ff57 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = IST_RESET_Pin|LED_RED_Pin;
 8000942:	f640 0304 	movw	r3, #2052	; 0x804
 8000946:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000948:	2301      	movs	r3, #1
 800094a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000950:	2300      	movs	r3, #0
 8000952:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000958:	4619      	mov	r1, r3
 800095a:	485b      	ldr	r0, [pc, #364]	; (8000ac8 <MX_GPIO_Init+0x2ec>)
 800095c:	f001 ff48 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB4 PB3 PB9
                           PB7 PB6 PB1 PB0
                           PB10 PB11 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_9
 8000960:	f64c 73db 	movw	r3, #53211	; 0xcfdb
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1|GPIO_PIN_0
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000966:	2303      	movs	r3, #3
 8000968:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800096e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000972:	4619      	mov	r1, r3
 8000974:	4859      	ldr	r0, [pc, #356]	; (8000adc <MX_GPIO_Init+0x300>)
 8000976:	f001 ff3b 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG13 PG15 PG12 PG11
                           PG10 PG0 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_12|GPIO_PIN_11
 800097a:	f64b 4301 	movw	r3, #48129	; 0xbc01
 800097e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_10|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000980:	2303      	movs	r3, #3
 8000982:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000988:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800098c:	4619      	mov	r1, r3
 800098e:	4850      	ldr	r0, [pc, #320]	; (8000ad0 <MX_GPIO_Init+0x2f4>)
 8000990:	f001 ff2e 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD7 PD5 PD4 PD3
                           PD2 PD15 PD14 PD13
                           PD11 PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3
 8000994:	f64e 43bc 	movw	r3, #60604	; 0xecbc
 8000998:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_2|GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13
                          |GPIO_PIN_11|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800099a:	2303      	movs	r3, #3
 800099c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a6:	4619      	mov	r1, r3
 80009a8:	484b      	ldr	r0, [pc, #300]	; (8000ad8 <MX_GPIO_Init+0x2fc>)
 80009aa:	f001 ff21 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC12 PC11 PC10 PC13
                           PC14 PC15 PC9 PC8
                           PC7 PC6 PC0 PC1
                           PC2 PC3 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_13
 80009ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009b2:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009b4:	2303      	movs	r3, #3
 80009b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c0:	4619      	mov	r1, r3
 80009c2:	4847      	ldr	r0, [pc, #284]	; (8000ae0 <MX_GPIO_Init+0x304>)
 80009c4:	f001 ff14 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA15 PA10 PA9 PA4
                           PA6 PA5 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_4
 80009c8:	f248 63f0 	movw	r3, #34544	; 0x86f0
 80009cc:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ce:	2303      	movs	r3, #3
 80009d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009da:	4619      	mov	r1, r3
 80009dc:	4841      	ldr	r0, [pc, #260]	; (8000ae4 <MX_GPIO_Init+0x308>)
 80009de:	f001 ff07 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SYS_CFG_Pin;
 80009e2:	2340      	movs	r3, #64	; 0x40
 80009e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e6:	2300      	movs	r3, #0
 80009e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SYS_CFG_GPIO_Port, &GPIO_InitStruct);
 80009ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f2:	4619      	mov	r1, r3
 80009f4:	4838      	ldr	r0, [pc, #224]	; (8000ad8 <MX_GPIO_Init+0x2fc>)
 80009f6:	f001 fefb 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = PIN_Y_Pin|PIN_X_Pin|PIN_V_Pin|PIN_Z_Pin;
 80009fa:	23e4      	movs	r3, #228	; 0xe4
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009fe:	2300      	movs	r3, #0
 8000a00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4836      	ldr	r0, [pc, #216]	; (8000ae8 <MX_GPIO_Init+0x30c>)
 8000a0e:	f001 feef 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI3 PI8 PI9 PI4
                           PI1 PI10 PI11 PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_4
 8000a12:	f640 731b 	movw	r3, #3867	; 0xf1b
 8000a16:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a24:	4619      	mov	r1, r3
 8000a26:	4830      	ldr	r0, [pc, #192]	; (8000ae8 <MX_GPIO_Init+0x30c>)
 8000a28:	f001 fee2 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH15 PH13 PH14 PH12
                           PH11 PH10 PH8 PH9
                           PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_12
 8000a2c:	f64f 7380 	movw	r3, #65408	; 0xff80
 8000a30:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a32:	2303      	movs	r3, #3
 8000a34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000a3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4822      	ldr	r0, [pc, #136]	; (8000acc <MX_GPIO_Init+0x2f0>)
 8000a42:	f001 fed5 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF2 PF1 PF3
                           PF4 PF5 PF13 PF12
                           PF15 PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_3
 8000a46:	f64b 033f 	movw	r3, #47167	; 0xb83f
 8000a4a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_13|GPIO_PIN_12
                          |GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a4c:	2303      	movs	r3, #3
 8000a4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a58:	4619      	mov	r1, r3
 8000a5a:	481e      	ldr	r0, [pc, #120]	; (8000ad4 <MX_GPIO_Init+0x2f8>)
 8000a5c:	f001 fec8 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = POWER1_CTRL_Pin|POWER2_CTRL_Pin|POWER3_CTRL_Pin|POWER4_CTRL_Pin;
 8000a60:	233c      	movs	r3, #60	; 0x3c
 8000a62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a64:	2301      	movs	r3, #1
 8000a66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000a70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a74:	4619      	mov	r1, r3
 8000a76:	4815      	ldr	r0, [pc, #84]	; (8000acc <MX_GPIO_Init+0x2f0>)
 8000a78:	f001 feba 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LED_A_Pin|LED_B_Pin|LED_C_Pin|LED_D_Pin
 8000a7c:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 8000a80:	627b      	str	r3, [r7, #36]	; 0x24
                          |LED_E_Pin|LED_F_Pin|LED_G_Pin|LED_H_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a82:	2301      	movs	r3, #1
 8000a84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a92:	4619      	mov	r1, r3
 8000a94:	480e      	ldr	r0, [pc, #56]	; (8000ad0 <MX_GPIO_Init+0x2f4>)
 8000a96:	f001 feab 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = SPI5_NSS_Pin|LED_GREEN_Pin;
 8000a9a:	f244 0340 	movw	r3, #16448	; 0x4040
 8000a9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000aac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4808      	ldr	r0, [pc, #32]	; (8000ad4 <MX_GPIO_Init+0x2f8>)
 8000ab4:	f001 fe9c 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 8000ab8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000abc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000abe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ac2:	e013      	b.n	8000aec <MX_GPIO_Init+0x310>
 8000ac4:	40023800 	.word	0x40023800
 8000ac8:	40021000 	.word	0x40021000
 8000acc:	40021c00 	.word	0x40021c00
 8000ad0:	40021800 	.word	0x40021800
 8000ad4:	40021400 	.word	0x40021400
 8000ad8:	40020c00 	.word	0x40020c00
 8000adc:	40020400 	.word	0x40020400
 8000ae0:	40020800 	.word	0x40020800
 8000ae4:	40020000 	.word	0x40020000
 8000ae8:	40022000 	.word	0x40022000
 8000aec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aee:	2301      	movs	r3, #1
 8000af0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 8000af2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af6:	4619      	mov	r1, r3
 8000af8:	4816      	ldr	r0, [pc, #88]	; (8000b54 <MX_GPIO_Init+0x378>)
 8000afa:	f001 fe79 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8000afe:	2304      	movs	r3, #4
 8000b00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b02:	2300      	movs	r3, #0
 8000b04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 8000b0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4811      	ldr	r0, [pc, #68]	; (8000b58 <MX_GPIO_Init+0x37c>)
 8000b12:	f001 fe6d 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = PIN_YA1_Pin|PIN_ZA0_Pin|PIN_XA2_Pin|PIN_W_Pin;
 8000b16:	230f      	movs	r3, #15
 8000b18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b26:	4619      	mov	r1, r3
 8000b28:	480c      	ldr	r0, [pc, #48]	; (8000b5c <MX_GPIO_Init+0x380>)
 8000b2a:	f001 fe61 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IO_PROBE_Pin;
 8000b2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b34:	2301      	movs	r3, #1
 8000b36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(IO_PROBE_GPIO_Port, &GPIO_InitStruct);
 8000b40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b44:	4619      	mov	r1, r3
 8000b46:	4806      	ldr	r0, [pc, #24]	; (8000b60 <MX_GPIO_Init+0x384>)
 8000b48:	f001 fe52 	bl	80027f0 <HAL_GPIO_Init>

}
 8000b4c:	bf00      	nop
 8000b4e:	3738      	adds	r7, #56	; 0x38
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	40021400 	.word	0x40021400
 8000b58:	40020400 	.word	0x40020400
 8000b5c:	40020000 	.word	0x40020000
 8000b60:	40020c00 	.word	0x40020c00

08000b64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b68:	f000 fe4a 	bl	8001800 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b6c:	f000 f820 	bl	8000bb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b70:	f7ff fe34 	bl	80007dc <MX_GPIO_Init>
  MX_DMA_Init();
 8000b74:	f7ff fdd4 	bl	8000720 <MX_DMA_Init>
  MX_SPI5_Init();
 8000b78:	f000 f89c 	bl	8000cb4 <MX_SPI5_Init>
  MX_CAN1_Init();
 8000b7c:	f7ff fcb6 	bl	80004ec <MX_CAN1_Init>
  MX_USART6_UART_Init();
 8000b80:	f000 fcfc 	bl	800157c <MX_USART6_UART_Init>
  MX_TIM1_Init();
 8000b84:	f000 fa34 	bl	8000ff0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000b88:	f000 fac2 	bl	8001110 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000b8c:	f000 fb0c 	bl	80011a8 <MX_TIM3_Init>
  MX_TIM12_Init();
 8000b90:	f000 fb64 	bl	800125c <MX_TIM12_Init>
  MX_CAN2_Init();
 8000b94:	f7ff fce0 	bl	8000558 <MX_CAN2_Init>
  MX_USART3_UART_Init();
 8000b98:	f000 fcc6 	bl	8001528 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  hw_init();
 8000b9c:	f00b f98a 	bl	800beb4 <hw_init>
  task_init();
 8000ba0:	f00b f98e 	bl	800bec0 <task_init>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000ba4:	f7ff fdf6 	bl	8000794 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000ba8:	f009 f940 	bl	8009e2c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bac:	e7fe      	b.n	8000bac <main+0x48>
	...

08000bb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b094      	sub	sp, #80	; 0x50
 8000bb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bb6:	f107 0320 	add.w	r3, r7, #32
 8000bba:	2230      	movs	r2, #48	; 0x30
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f00b fe64 	bl	800c88c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bc4:	f107 030c 	add.w	r3, r7, #12
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	60da      	str	r2, [r3, #12]
 8000bd2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	60bb      	str	r3, [r7, #8]
 8000bd8:	4b28      	ldr	r3, [pc, #160]	; (8000c7c <SystemClock_Config+0xcc>)
 8000bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bdc:	4a27      	ldr	r2, [pc, #156]	; (8000c7c <SystemClock_Config+0xcc>)
 8000bde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000be2:	6413      	str	r3, [r2, #64]	; 0x40
 8000be4:	4b25      	ldr	r3, [pc, #148]	; (8000c7c <SystemClock_Config+0xcc>)
 8000be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bec:	60bb      	str	r3, [r7, #8]
 8000bee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	607b      	str	r3, [r7, #4]
 8000bf4:	4b22      	ldr	r3, [pc, #136]	; (8000c80 <SystemClock_Config+0xd0>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a21      	ldr	r2, [pc, #132]	; (8000c80 <SystemClock_Config+0xd0>)
 8000bfa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000bfe:	6013      	str	r3, [r2, #0]
 8000c00:	4b1f      	ldr	r3, [pc, #124]	; (8000c80 <SystemClock_Config+0xd0>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c08:	607b      	str	r3, [r7, #4]
 8000c0a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c14:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c16:	2302      	movs	r3, #2
 8000c18:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c1a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8000c20:	2306      	movs	r3, #6
 8000c22:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000c24:	23a8      	movs	r3, #168	; 0xa8
 8000c26:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000c2c:	2307      	movs	r3, #7
 8000c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c30:	f107 0320 	add.w	r3, r7, #32
 8000c34:	4618      	mov	r0, r3
 8000c36:	f003 fa0b 	bl	8004050 <HAL_RCC_OscConfig>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c40:	f000 f832 	bl	8000ca8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c44:	230f      	movs	r3, #15
 8000c46:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c50:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c54:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c5a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c5c:	f107 030c 	add.w	r3, r7, #12
 8000c60:	2105      	movs	r1, #5
 8000c62:	4618      	mov	r0, r3
 8000c64:	f003 fc6c 	bl	8004540 <HAL_RCC_ClockConfig>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000c6e:	f000 f81b 	bl	8000ca8 <Error_Handler>
  }
}
 8000c72:	bf00      	nop
 8000c74:	3750      	adds	r7, #80	; 0x50
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40023800 	.word	0x40023800
 8000c80:	40007000 	.word	0x40007000

08000c84 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a04      	ldr	r2, [pc, #16]	; (8000ca4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d101      	bne.n	8000c9a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c96:	f000 fdd5 	bl	8001844 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM2) {
  }
  /* USER CODE END Callback 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40000c00 	.word	0x40000c00

08000ca8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cac:	b672      	cpsid	i
}
 8000cae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cb0:	e7fe      	b.n	8000cb0 <Error_Handler+0x8>
	...

08000cb4 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8000cb8:	4b17      	ldr	r3, [pc, #92]	; (8000d18 <MX_SPI5_Init+0x64>)
 8000cba:	4a18      	ldr	r2, [pc, #96]	; (8000d1c <MX_SPI5_Init+0x68>)
 8000cbc:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000cbe:	4b16      	ldr	r3, [pc, #88]	; (8000d18 <MX_SPI5_Init+0x64>)
 8000cc0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000cc4:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000cc6:	4b14      	ldr	r3, [pc, #80]	; (8000d18 <MX_SPI5_Init+0x64>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ccc:	4b12      	ldr	r3, [pc, #72]	; (8000d18 <MX_SPI5_Init+0x64>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cd2:	4b11      	ldr	r3, [pc, #68]	; (8000d18 <MX_SPI5_Init+0x64>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cd8:	4b0f      	ldr	r3, [pc, #60]	; (8000d18 <MX_SPI5_Init+0x64>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000cde:	4b0e      	ldr	r3, [pc, #56]	; (8000d18 <MX_SPI5_Init+0x64>)
 8000ce0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ce4:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000ce6:	4b0c      	ldr	r3, [pc, #48]	; (8000d18 <MX_SPI5_Init+0x64>)
 8000ce8:	2230      	movs	r2, #48	; 0x30
 8000cea:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cec:	4b0a      	ldr	r3, [pc, #40]	; (8000d18 <MX_SPI5_Init+0x64>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cf2:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <MX_SPI5_Init+0x64>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cf8:	4b07      	ldr	r3, [pc, #28]	; (8000d18 <MX_SPI5_Init+0x64>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000cfe:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <MX_SPI5_Init+0x64>)
 8000d00:	220a      	movs	r2, #10
 8000d02:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000d04:	4804      	ldr	r0, [pc, #16]	; (8000d18 <MX_SPI5_Init+0x64>)
 8000d06:	f003 fe2d 	bl	8004964 <HAL_SPI_Init>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000d10:	f7ff ffca 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000d14:	bf00      	nop
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	200001c4 	.word	0x200001c4
 8000d1c:	40015000 	.word	0x40015000

08000d20 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b08a      	sub	sp, #40	; 0x28
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d28:	f107 0314 	add.w	r3, r7, #20
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	609a      	str	r2, [r3, #8]
 8000d34:	60da      	str	r2, [r3, #12]
 8000d36:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a19      	ldr	r2, [pc, #100]	; (8000da4 <HAL_SPI_MspInit+0x84>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d12c      	bne.n	8000d9c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	613b      	str	r3, [r7, #16]
 8000d46:	4b18      	ldr	r3, [pc, #96]	; (8000da8 <HAL_SPI_MspInit+0x88>)
 8000d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4a:	4a17      	ldr	r2, [pc, #92]	; (8000da8 <HAL_SPI_MspInit+0x88>)
 8000d4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000d50:	6453      	str	r3, [r2, #68]	; 0x44
 8000d52:	4b15      	ldr	r3, [pc, #84]	; (8000da8 <HAL_SPI_MspInit+0x88>)
 8000d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d5a:	613b      	str	r3, [r7, #16]
 8000d5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60fb      	str	r3, [r7, #12]
 8000d62:	4b11      	ldr	r3, [pc, #68]	; (8000da8 <HAL_SPI_MspInit+0x88>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	4a10      	ldr	r2, [pc, #64]	; (8000da8 <HAL_SPI_MspInit+0x88>)
 8000d68:	f043 0320 	orr.w	r3, r3, #32
 8000d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6e:	4b0e      	ldr	r3, [pc, #56]	; (8000da8 <HAL_SPI_MspInit+0x88>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	f003 0320 	and.w	r3, r3, #32
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF9     ------> SPI5_MOSI
    PF8     ------> SPI5_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_8;
 8000d7a:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000d7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d80:	2302      	movs	r3, #2
 8000d82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d88:	2303      	movs	r3, #3
 8000d8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000d8c:	2305      	movs	r3, #5
 8000d8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d90:	f107 0314 	add.w	r3, r7, #20
 8000d94:	4619      	mov	r1, r3
 8000d96:	4805      	ldr	r0, [pc, #20]	; (8000dac <HAL_SPI_MspInit+0x8c>)
 8000d98:	f001 fd2a 	bl	80027f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8000d9c:	bf00      	nop
 8000d9e:	3728      	adds	r7, #40	; 0x28
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	40015000 	.word	0x40015000
 8000da8:	40023800 	.word	0x40023800
 8000dac:	40021400 	.word	0x40021400

08000db0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	607b      	str	r3, [r7, #4]
 8000dba:	4b12      	ldr	r3, [pc, #72]	; (8000e04 <HAL_MspInit+0x54>)
 8000dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dbe:	4a11      	ldr	r2, [pc, #68]	; (8000e04 <HAL_MspInit+0x54>)
 8000dc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dc4:	6453      	str	r3, [r2, #68]	; 0x44
 8000dc6:	4b0f      	ldr	r3, [pc, #60]	; (8000e04 <HAL_MspInit+0x54>)
 8000dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dce:	607b      	str	r3, [r7, #4]
 8000dd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	603b      	str	r3, [r7, #0]
 8000dd6:	4b0b      	ldr	r3, [pc, #44]	; (8000e04 <HAL_MspInit+0x54>)
 8000dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dda:	4a0a      	ldr	r2, [pc, #40]	; (8000e04 <HAL_MspInit+0x54>)
 8000ddc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000de0:	6413      	str	r3, [r2, #64]	; 0x40
 8000de2:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <HAL_MspInit+0x54>)
 8000de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dea:	603b      	str	r3, [r7, #0]
 8000dec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000dee:	2200      	movs	r2, #0
 8000df0:	210f      	movs	r1, #15
 8000df2:	f06f 0001 	mvn.w	r0, #1
 8000df6:	f001 f955 	bl	80020a4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40023800 	.word	0x40023800

08000e08 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b08e      	sub	sp, #56	; 0x38
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000e10:	2300      	movs	r3, #0
 8000e12:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000e14:	2300      	movs	r3, #0
 8000e16:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000e18:	2300      	movs	r3, #0
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	4b33      	ldr	r3, [pc, #204]	; (8000eec <HAL_InitTick+0xe4>)
 8000e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e20:	4a32      	ldr	r2, [pc, #200]	; (8000eec <HAL_InitTick+0xe4>)
 8000e22:	f043 0308 	orr.w	r3, r3, #8
 8000e26:	6413      	str	r3, [r2, #64]	; 0x40
 8000e28:	4b30      	ldr	r3, [pc, #192]	; (8000eec <HAL_InitTick+0xe4>)
 8000e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2c:	f003 0308 	and.w	r3, r3, #8
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e34:	f107 0210 	add.w	r2, r7, #16
 8000e38:	f107 0314 	add.w	r3, r7, #20
 8000e3c:	4611      	mov	r1, r2
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f003 fd5e 	bl	8004900 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e44:	6a3b      	ldr	r3, [r7, #32]
 8000e46:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d103      	bne.n	8000e56 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e4e:	f003 fd2f 	bl	80048b0 <HAL_RCC_GetPCLK1Freq>
 8000e52:	6378      	str	r0, [r7, #52]	; 0x34
 8000e54:	e004      	b.n	8000e60 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e56:	f003 fd2b 	bl	80048b0 <HAL_RCC_GetPCLK1Freq>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e62:	4a23      	ldr	r2, [pc, #140]	; (8000ef0 <HAL_InitTick+0xe8>)
 8000e64:	fba2 2303 	umull	r2, r3, r2, r3
 8000e68:	0c9b      	lsrs	r3, r3, #18
 8000e6a:	3b01      	subs	r3, #1
 8000e6c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000e6e:	4b21      	ldr	r3, [pc, #132]	; (8000ef4 <HAL_InitTick+0xec>)
 8000e70:	4a21      	ldr	r2, [pc, #132]	; (8000ef8 <HAL_InitTick+0xf0>)
 8000e72:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000e74:	4b1f      	ldr	r3, [pc, #124]	; (8000ef4 <HAL_InitTick+0xec>)
 8000e76:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e7a:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000e7c:	4a1d      	ldr	r2, [pc, #116]	; (8000ef4 <HAL_InitTick+0xec>)
 8000e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e80:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000e82:	4b1c      	ldr	r3, [pc, #112]	; (8000ef4 <HAL_InitTick+0xec>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e88:	4b1a      	ldr	r3, [pc, #104]	; (8000ef4 <HAL_InitTick+0xec>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e8e:	4b19      	ldr	r3, [pc, #100]	; (8000ef4 <HAL_InitTick+0xec>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8000e94:	4817      	ldr	r0, [pc, #92]	; (8000ef4 <HAL_InitTick+0xec>)
 8000e96:	f003 fdee 	bl	8004a76 <HAL_TIM_Base_Init>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000ea0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d11b      	bne.n	8000ee0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8000ea8:	4812      	ldr	r0, [pc, #72]	; (8000ef4 <HAL_InitTick+0xec>)
 8000eaa:	f003 fe33 	bl	8004b14 <HAL_TIM_Base_Start_IT>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000eb4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d111      	bne.n	8000ee0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000ebc:	2032      	movs	r0, #50	; 0x32
 8000ebe:	f001 f90d 	bl	80020dc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2b0f      	cmp	r3, #15
 8000ec6:	d808      	bhi.n	8000eda <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	6879      	ldr	r1, [r7, #4]
 8000ecc:	2032      	movs	r0, #50	; 0x32
 8000ece:	f001 f8e9 	bl	80020a4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ed2:	4a0a      	ldr	r2, [pc, #40]	; (8000efc <HAL_InitTick+0xf4>)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6013      	str	r3, [r2, #0]
 8000ed8:	e002      	b.n	8000ee0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000ee0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3738      	adds	r7, #56	; 0x38
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40023800 	.word	0x40023800
 8000ef0:	431bde83 	.word	0x431bde83
 8000ef4:	2000021c 	.word	0x2000021c
 8000ef8:	40000c00 	.word	0x40000c00
 8000efc:	20000004 	.word	0x20000004

08000f00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f04:	e7fe      	b.n	8000f04 <NMI_Handler+0x4>

08000f06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f0a:	e7fe      	b.n	8000f0a <HardFault_Handler+0x4>

08000f0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f10:	e7fe      	b.n	8000f10 <MemManage_Handler+0x4>

08000f12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f12:	b480      	push	{r7}
 8000f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f16:	e7fe      	b.n	8000f16 <BusFault_Handler+0x4>

08000f18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f1c:	e7fe      	b.n	8000f1c <UsageFault_Handler+0x4>

08000f1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000f30:	4802      	ldr	r0, [pc, #8]	; (8000f3c <CAN1_TX_IRQHandler+0x10>)
 8000f32:	f000 fdc6 	bl	8001ac2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	2000016c 	.word	0x2000016c

08000f40 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000f44:	4802      	ldr	r0, [pc, #8]	; (8000f50 <CAN1_RX0_IRQHandler+0x10>)
 8000f46:	f000 fdbc 	bl	8001ac2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	2000016c 	.word	0x2000016c

08000f54 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f58:	4802      	ldr	r0, [pc, #8]	; (8000f64 <TIM2_IRQHandler+0x10>)
 8000f5a:	f003 fe9a 	bl	8004c92 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	200002ac 	.word	0x200002ac

08000f68 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000f6c:	4802      	ldr	r0, [pc, #8]	; (8000f78 <TIM5_IRQHandler+0x10>)
 8000f6e:	f003 fe90 	bl	8004c92 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	2000021c 	.word	0x2000021c

08000f7c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8000f80:	4802      	ldr	r0, [pc, #8]	; (8000f8c <DMA2_Stream1_IRQHandler+0x10>)
 8000f82:	f001 f9f9 	bl	8002378 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000414 	.word	0x20000414

08000f90 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000f94:	4802      	ldr	r0, [pc, #8]	; (8000fa0 <OTG_FS_IRQHandler+0x10>)
 8000f96:	f001 ff4e 	bl	8002e36 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	20010b0c 	.word	0x20010b0c

08000fa4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8000fa8:	4802      	ldr	r0, [pc, #8]	; (8000fb4 <DMA2_Stream6_IRQHandler+0x10>)
 8000faa:	f001 f9e5 	bl	8002378 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	20000474 	.word	0x20000474

08000fb8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
//  usart3_idle_callback();
  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000fbc:	4802      	ldr	r0, [pc, #8]	; (8000fc8 <USART6_IRQHandler+0x10>)
 8000fbe:	f004 fd33 	bl	8005a28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	200003cc 	.word	0x200003cc

08000fcc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fd0:	4b06      	ldr	r3, [pc, #24]	; (8000fec <SystemInit+0x20>)
 8000fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fd6:	4a05      	ldr	r2, [pc, #20]	; (8000fec <SystemInit+0x20>)
 8000fd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b092      	sub	sp, #72	; 0x48
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ff6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001000:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	611a      	str	r2, [r3, #16]
 8001010:	615a      	str	r2, [r3, #20]
 8001012:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001014:	1d3b      	adds	r3, r7, #4
 8001016:	2220      	movs	r2, #32
 8001018:	2100      	movs	r1, #0
 800101a:	4618      	mov	r0, r3
 800101c:	f00b fc36 	bl	800c88c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001020:	4b39      	ldr	r3, [pc, #228]	; (8001108 <MX_TIM1_Init+0x118>)
 8001022:	4a3a      	ldr	r2, [pc, #232]	; (800110c <MX_TIM1_Init+0x11c>)
 8001024:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16;
 8001026:	4b38      	ldr	r3, [pc, #224]	; (8001108 <MX_TIM1_Init+0x118>)
 8001028:	2210      	movs	r2, #16
 800102a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800102c:	4b36      	ldr	r3, [pc, #216]	; (8001108 <MX_TIM1_Init+0x118>)
 800102e:	2200      	movs	r2, #0
 8001030:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 8001032:	4b35      	ldr	r3, [pc, #212]	; (8001108 <MX_TIM1_Init+0x118>)
 8001034:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001038:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800103a:	4b33      	ldr	r3, [pc, #204]	; (8001108 <MX_TIM1_Init+0x118>)
 800103c:	2200      	movs	r2, #0
 800103e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001040:	4b31      	ldr	r3, [pc, #196]	; (8001108 <MX_TIM1_Init+0x118>)
 8001042:	2200      	movs	r2, #0
 8001044:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001046:	4b30      	ldr	r3, [pc, #192]	; (8001108 <MX_TIM1_Init+0x118>)
 8001048:	2200      	movs	r2, #0
 800104a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800104c:	482e      	ldr	r0, [pc, #184]	; (8001108 <MX_TIM1_Init+0x118>)
 800104e:	f003 fdd1 	bl	8004bf4 <HAL_TIM_PWM_Init>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001058:	f7ff fe26 	bl	8000ca8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800105c:	2300      	movs	r3, #0
 800105e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001060:	2300      	movs	r3, #0
 8001062:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001064:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001068:	4619      	mov	r1, r3
 800106a:	4827      	ldr	r0, [pc, #156]	; (8001108 <MX_TIM1_Init+0x118>)
 800106c:	f004 fbaa 	bl	80057c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001076:	f7ff fe17 	bl	8000ca8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800107a:	2360      	movs	r3, #96	; 0x60
 800107c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1000;
 800107e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001082:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001084:	2300      	movs	r3, #0
 8001086:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001088:	2300      	movs	r3, #0
 800108a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800108c:	2300      	movs	r3, #0
 800108e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001090:	2300      	movs	r3, #0
 8001092:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001094:	2300      	movs	r3, #0
 8001096:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001098:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800109c:	2200      	movs	r2, #0
 800109e:	4619      	mov	r1, r3
 80010a0:	4819      	ldr	r0, [pc, #100]	; (8001108 <MX_TIM1_Init+0x118>)
 80010a2:	f003 fee7 	bl	8004e74 <HAL_TIM_PWM_ConfigChannel>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 80010ac:	f7ff fdfc 	bl	8000ca8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80010b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010b4:	220c      	movs	r2, #12
 80010b6:	4619      	mov	r1, r3
 80010b8:	4813      	ldr	r0, [pc, #76]	; (8001108 <MX_TIM1_Init+0x118>)
 80010ba:	f003 fedb 	bl	8004e74 <HAL_TIM_PWM_ConfigChannel>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 80010c4:	f7ff fdf0 	bl	8000ca8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010c8:	2300      	movs	r3, #0
 80010ca:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010cc:	2300      	movs	r3, #0
 80010ce:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010d0:	2300      	movs	r3, #0
 80010d2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010e0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010e2:	2300      	movs	r3, #0
 80010e4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	4619      	mov	r1, r3
 80010ea:	4807      	ldr	r0, [pc, #28]	; (8001108 <MX_TIM1_Init+0x118>)
 80010ec:	f004 fbe6 	bl	80058bc <HAL_TIMEx_ConfigBreakDeadTime>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 80010f6:	f7ff fdd7 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80010fa:	4803      	ldr	r0, [pc, #12]	; (8001108 <MX_TIM1_Init+0x118>)
 80010fc:	f000 f968 	bl	80013d0 <HAL_TIM_MspPostInit>

}
 8001100:	bf00      	nop
 8001102:	3748      	adds	r7, #72	; 0x48
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20000264 	.word	0x20000264
 800110c:	40010000 	.word	0x40010000

08001110 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001116:	f107 0308 	add.w	r3, r7, #8
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	605a      	str	r2, [r3, #4]
 8001120:	609a      	str	r2, [r3, #8]
 8001122:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001124:	463b      	mov	r3, r7
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800112c:	4b1d      	ldr	r3, [pc, #116]	; (80011a4 <MX_TIM2_Init+0x94>)
 800112e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001132:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8001134:	4b1b      	ldr	r3, [pc, #108]	; (80011a4 <MX_TIM2_Init+0x94>)
 8001136:	2253      	movs	r2, #83	; 0x53
 8001138:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800113a:	4b1a      	ldr	r3, [pc, #104]	; (80011a4 <MX_TIM2_Init+0x94>)
 800113c:	2200      	movs	r2, #0
 800113e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001140:	4b18      	ldr	r3, [pc, #96]	; (80011a4 <MX_TIM2_Init+0x94>)
 8001142:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001146:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001148:	4b16      	ldr	r3, [pc, #88]	; (80011a4 <MX_TIM2_Init+0x94>)
 800114a:	2200      	movs	r2, #0
 800114c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800114e:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <MX_TIM2_Init+0x94>)
 8001150:	2200      	movs	r2, #0
 8001152:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001154:	4813      	ldr	r0, [pc, #76]	; (80011a4 <MX_TIM2_Init+0x94>)
 8001156:	f003 fc8e 	bl	8004a76 <HAL_TIM_Base_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001160:	f7ff fda2 	bl	8000ca8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001164:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001168:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800116a:	f107 0308 	add.w	r3, r7, #8
 800116e:	4619      	mov	r1, r3
 8001170:	480c      	ldr	r0, [pc, #48]	; (80011a4 <MX_TIM2_Init+0x94>)
 8001172:	f003 ff41 	bl	8004ff8 <HAL_TIM_ConfigClockSource>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800117c:	f7ff fd94 	bl	8000ca8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001180:	2300      	movs	r3, #0
 8001182:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001184:	2300      	movs	r3, #0
 8001186:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001188:	463b      	mov	r3, r7
 800118a:	4619      	mov	r1, r3
 800118c:	4805      	ldr	r0, [pc, #20]	; (80011a4 <MX_TIM2_Init+0x94>)
 800118e:	f004 fb19 	bl	80057c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001198:	f7ff fd86 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800119c:	bf00      	nop
 800119e:	3718      	adds	r7, #24
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	200002ac 	.word	0x200002ac

080011a8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b08a      	sub	sp, #40	; 0x28
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ae:	f107 0320 	add.w	r3, r7, #32
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011b8:	1d3b      	adds	r3, r7, #4
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	605a      	str	r2, [r3, #4]
 80011c0:	609a      	str	r2, [r3, #8]
 80011c2:	60da      	str	r2, [r3, #12]
 80011c4:	611a      	str	r2, [r3, #16]
 80011c6:	615a      	str	r2, [r3, #20]
 80011c8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011ca:	4b22      	ldr	r3, [pc, #136]	; (8001254 <MX_TIM3_Init+0xac>)
 80011cc:	4a22      	ldr	r2, [pc, #136]	; (8001258 <MX_TIM3_Init+0xb0>)
 80011ce:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 80011d0:	4b20      	ldr	r3, [pc, #128]	; (8001254 <MX_TIM3_Init+0xac>)
 80011d2:	2253      	movs	r2, #83	; 0x53
 80011d4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d6:	4b1f      	ldr	r3, [pc, #124]	; (8001254 <MX_TIM3_Init+0xac>)
 80011d8:	2200      	movs	r2, #0
 80011da:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000-1;
 80011dc:	4b1d      	ldr	r3, [pc, #116]	; (8001254 <MX_TIM3_Init+0xac>)
 80011de:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80011e2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e4:	4b1b      	ldr	r3, [pc, #108]	; (8001254 <MX_TIM3_Init+0xac>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ea:	4b1a      	ldr	r3, [pc, #104]	; (8001254 <MX_TIM3_Init+0xac>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80011f0:	4818      	ldr	r0, [pc, #96]	; (8001254 <MX_TIM3_Init+0xac>)
 80011f2:	f003 fcff 	bl	8004bf4 <HAL_TIM_PWM_Init>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80011fc:	f7ff fd54 	bl	8000ca8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001200:	2300      	movs	r3, #0
 8001202:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001204:	2300      	movs	r3, #0
 8001206:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001208:	f107 0320 	add.w	r3, r7, #32
 800120c:	4619      	mov	r1, r3
 800120e:	4811      	ldr	r0, [pc, #68]	; (8001254 <MX_TIM3_Init+0xac>)
 8001210:	f004 fad8 	bl	80057c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800121a:	f7ff fd45 	bl	8000ca8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800121e:	2360      	movs	r3, #96	; 0x60
 8001220:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001222:	2300      	movs	r3, #0
 8001224:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001226:	2300      	movs	r3, #0
 8001228:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800122a:	2300      	movs	r3, #0
 800122c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800122e:	1d3b      	adds	r3, r7, #4
 8001230:	2204      	movs	r2, #4
 8001232:	4619      	mov	r1, r3
 8001234:	4807      	ldr	r0, [pc, #28]	; (8001254 <MX_TIM3_Init+0xac>)
 8001236:	f003 fe1d 	bl	8004e74 <HAL_TIM_PWM_ConfigChannel>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001240:	f7ff fd32 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001244:	4803      	ldr	r0, [pc, #12]	; (8001254 <MX_TIM3_Init+0xac>)
 8001246:	f000 f8c3 	bl	80013d0 <HAL_TIM_MspPostInit>

}
 800124a:	bf00      	nop
 800124c:	3728      	adds	r7, #40	; 0x28
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	200002f4 	.word	0x200002f4
 8001258:	40000400 	.word	0x40000400

0800125c <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b088      	sub	sp, #32
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001262:	1d3b      	adds	r3, r7, #4
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
 800126e:	611a      	str	r2, [r3, #16]
 8001270:	615a      	str	r2, [r3, #20]
 8001272:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001274:	4b1a      	ldr	r3, [pc, #104]	; (80012e0 <MX_TIM12_Init+0x84>)
 8001276:	4a1b      	ldr	r2, [pc, #108]	; (80012e4 <MX_TIM12_Init+0x88>)
 8001278:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 83;
 800127a:	4b19      	ldr	r3, [pc, #100]	; (80012e0 <MX_TIM12_Init+0x84>)
 800127c:	2253      	movs	r2, #83	; 0x53
 800127e:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001280:	4b17      	ldr	r3, [pc, #92]	; (80012e0 <MX_TIM12_Init+0x84>)
 8001282:	2200      	movs	r2, #0
 8001284:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 20000-1;
 8001286:	4b16      	ldr	r3, [pc, #88]	; (80012e0 <MX_TIM12_Init+0x84>)
 8001288:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800128c:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800128e:	4b14      	ldr	r3, [pc, #80]	; (80012e0 <MX_TIM12_Init+0x84>)
 8001290:	2200      	movs	r2, #0
 8001292:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001294:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <MX_TIM12_Init+0x84>)
 8001296:	2200      	movs	r2, #0
 8001298:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800129a:	4811      	ldr	r0, [pc, #68]	; (80012e0 <MX_TIM12_Init+0x84>)
 800129c:	f003 fcaa 	bl	8004bf4 <HAL_TIM_PWM_Init>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 80012a6:	f7ff fcff 	bl	8000ca8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012aa:	2360      	movs	r3, #96	; 0x60
 80012ac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012ae:	2300      	movs	r3, #0
 80012b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012b2:	2300      	movs	r3, #0
 80012b4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012b6:	2300      	movs	r3, #0
 80012b8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012ba:	1d3b      	adds	r3, r7, #4
 80012bc:	2200      	movs	r2, #0
 80012be:	4619      	mov	r1, r3
 80012c0:	4807      	ldr	r0, [pc, #28]	; (80012e0 <MX_TIM12_Init+0x84>)
 80012c2:	f003 fdd7 	bl	8004e74 <HAL_TIM_PWM_ConfigChannel>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 80012cc:	f7ff fcec 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80012d0:	4803      	ldr	r0, [pc, #12]	; (80012e0 <MX_TIM12_Init+0x84>)
 80012d2:	f000 f87d 	bl	80013d0 <HAL_TIM_MspPostInit>

}
 80012d6:	bf00      	nop
 80012d8:	3720      	adds	r7, #32
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	2000033c 	.word	0x2000033c
 80012e4:	40001800 	.word	0x40001800

080012e8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b087      	sub	sp, #28
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a1f      	ldr	r2, [pc, #124]	; (8001374 <HAL_TIM_PWM_MspInit+0x8c>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d10e      	bne.n	8001318 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	617b      	str	r3, [r7, #20]
 80012fe:	4b1e      	ldr	r3, [pc, #120]	; (8001378 <HAL_TIM_PWM_MspInit+0x90>)
 8001300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001302:	4a1d      	ldr	r2, [pc, #116]	; (8001378 <HAL_TIM_PWM_MspInit+0x90>)
 8001304:	f043 0301 	orr.w	r3, r3, #1
 8001308:	6453      	str	r3, [r2, #68]	; 0x44
 800130a:	4b1b      	ldr	r3, [pc, #108]	; (8001378 <HAL_TIM_PWM_MspInit+0x90>)
 800130c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	617b      	str	r3, [r7, #20]
 8001314:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8001316:	e026      	b.n	8001366 <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM3)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a17      	ldr	r2, [pc, #92]	; (800137c <HAL_TIM_PWM_MspInit+0x94>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d10e      	bne.n	8001340 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	613b      	str	r3, [r7, #16]
 8001326:	4b14      	ldr	r3, [pc, #80]	; (8001378 <HAL_TIM_PWM_MspInit+0x90>)
 8001328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132a:	4a13      	ldr	r2, [pc, #76]	; (8001378 <HAL_TIM_PWM_MspInit+0x90>)
 800132c:	f043 0302 	orr.w	r3, r3, #2
 8001330:	6413      	str	r3, [r2, #64]	; 0x40
 8001332:	4b11      	ldr	r3, [pc, #68]	; (8001378 <HAL_TIM_PWM_MspInit+0x90>)
 8001334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	613b      	str	r3, [r7, #16]
 800133c:	693b      	ldr	r3, [r7, #16]
}
 800133e:	e012      	b.n	8001366 <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM12)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a0e      	ldr	r2, [pc, #56]	; (8001380 <HAL_TIM_PWM_MspInit+0x98>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d10d      	bne.n	8001366 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	60fb      	str	r3, [r7, #12]
 800134e:	4b0a      	ldr	r3, [pc, #40]	; (8001378 <HAL_TIM_PWM_MspInit+0x90>)
 8001350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001352:	4a09      	ldr	r2, [pc, #36]	; (8001378 <HAL_TIM_PWM_MspInit+0x90>)
 8001354:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001358:	6413      	str	r3, [r2, #64]	; 0x40
 800135a:	4b07      	ldr	r3, [pc, #28]	; (8001378 <HAL_TIM_PWM_MspInit+0x90>)
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	68fb      	ldr	r3, [r7, #12]
}
 8001366:	bf00      	nop
 8001368:	371c      	adds	r7, #28
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	40010000 	.word	0x40010000
 8001378:	40023800 	.word	0x40023800
 800137c:	40000400 	.word	0x40000400
 8001380:	40001800 	.word	0x40001800

08001384 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001394:	d115      	bne.n	80013c2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <HAL_TIM_Base_MspInit+0x48>)
 800139c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139e:	4a0b      	ldr	r2, [pc, #44]	; (80013cc <HAL_TIM_Base_MspInit+0x48>)
 80013a0:	f043 0301 	orr.w	r3, r3, #1
 80013a4:	6413      	str	r3, [r2, #64]	; 0x40
 80013a6:	4b09      	ldr	r3, [pc, #36]	; (80013cc <HAL_TIM_Base_MspInit+0x48>)
 80013a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80013b2:	2200      	movs	r2, #0
 80013b4:	2105      	movs	r1, #5
 80013b6:	201c      	movs	r0, #28
 80013b8:	f000 fe74 	bl	80020a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013bc:	201c      	movs	r0, #28
 80013be:	f000 fe8d 	bl	80020dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80013c2:	bf00      	nop
 80013c4:	3710      	adds	r7, #16
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40023800 	.word	0x40023800

080013d0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b08c      	sub	sp, #48	; 0x30
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d8:	f107 031c 	add.w	r3, r7, #28
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]
 80013e6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a46      	ldr	r2, [pc, #280]	; (8001508 <HAL_TIM_MspPostInit+0x138>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d13e      	bne.n	8001470 <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	61bb      	str	r3, [r7, #24]
 80013f6:	4b45      	ldr	r3, [pc, #276]	; (800150c <HAL_TIM_MspPostInit+0x13c>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	4a44      	ldr	r2, [pc, #272]	; (800150c <HAL_TIM_MspPostInit+0x13c>)
 80013fc:	f043 0301 	orr.w	r3, r3, #1
 8001400:	6313      	str	r3, [r2, #48]	; 0x30
 8001402:	4b42      	ldr	r3, [pc, #264]	; (800150c <HAL_TIM_MspPostInit+0x13c>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	61bb      	str	r3, [r7, #24]
 800140c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	617b      	str	r3, [r7, #20]
 8001412:	4b3e      	ldr	r3, [pc, #248]	; (800150c <HAL_TIM_MspPostInit+0x13c>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	4a3d      	ldr	r2, [pc, #244]	; (800150c <HAL_TIM_MspPostInit+0x13c>)
 8001418:	f043 0310 	orr.w	r3, r3, #16
 800141c:	6313      	str	r3, [r2, #48]	; 0x30
 800141e:	4b3b      	ldr	r3, [pc, #236]	; (800150c <HAL_TIM_MspPostInit+0x13c>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	f003 0310 	and.w	r3, r3, #16
 8001426:	617b      	str	r3, [r7, #20]
 8001428:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800142a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800142e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001430:	2302      	movs	r3, #2
 8001432:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001434:	2300      	movs	r3, #0
 8001436:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001438:	2300      	movs	r3, #0
 800143a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800143c:	2301      	movs	r3, #1
 800143e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001440:	f107 031c 	add.w	r3, r7, #28
 8001444:	4619      	mov	r1, r3
 8001446:	4832      	ldr	r0, [pc, #200]	; (8001510 <HAL_TIM_MspPostInit+0x140>)
 8001448:	f001 f9d2 	bl	80027f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800144c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001450:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001452:	2302      	movs	r3, #2
 8001454:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145a:	2300      	movs	r3, #0
 800145c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800145e:	2301      	movs	r3, #1
 8001460:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001462:	f107 031c 	add.w	r3, r7, #28
 8001466:	4619      	mov	r1, r3
 8001468:	482a      	ldr	r0, [pc, #168]	; (8001514 <HAL_TIM_MspPostInit+0x144>)
 800146a:	f001 f9c1 	bl	80027f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800146e:	e046      	b.n	80014fe <HAL_TIM_MspPostInit+0x12e>
  else if(timHandle->Instance==TIM3)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a28      	ldr	r2, [pc, #160]	; (8001518 <HAL_TIM_MspPostInit+0x148>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d11e      	bne.n	80014b8 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	613b      	str	r3, [r7, #16]
 800147e:	4b23      	ldr	r3, [pc, #140]	; (800150c <HAL_TIM_MspPostInit+0x13c>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	4a22      	ldr	r2, [pc, #136]	; (800150c <HAL_TIM_MspPostInit+0x13c>)
 8001484:	f043 0302 	orr.w	r3, r3, #2
 8001488:	6313      	str	r3, [r2, #48]	; 0x30
 800148a:	4b20      	ldr	r3, [pc, #128]	; (800150c <HAL_TIM_MspPostInit+0x13c>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	613b      	str	r3, [r7, #16]
 8001494:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001496:	2320      	movs	r3, #32
 8001498:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149a:	2302      	movs	r3, #2
 800149c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149e:	2300      	movs	r3, #0
 80014a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a2:	2300      	movs	r3, #0
 80014a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80014a6:	2302      	movs	r3, #2
 80014a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014aa:	f107 031c 	add.w	r3, r7, #28
 80014ae:	4619      	mov	r1, r3
 80014b0:	481a      	ldr	r0, [pc, #104]	; (800151c <HAL_TIM_MspPostInit+0x14c>)
 80014b2:	f001 f99d 	bl	80027f0 <HAL_GPIO_Init>
}
 80014b6:	e022      	b.n	80014fe <HAL_TIM_MspPostInit+0x12e>
  else if(timHandle->Instance==TIM12)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a18      	ldr	r2, [pc, #96]	; (8001520 <HAL_TIM_MspPostInit+0x150>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d11d      	bne.n	80014fe <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	60fb      	str	r3, [r7, #12]
 80014c6:	4b11      	ldr	r3, [pc, #68]	; (800150c <HAL_TIM_MspPostInit+0x13c>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	4a10      	ldr	r2, [pc, #64]	; (800150c <HAL_TIM_MspPostInit+0x13c>)
 80014cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014d0:	6313      	str	r3, [r2, #48]	; 0x30
 80014d2:	4b0e      	ldr	r3, [pc, #56]	; (800150c <HAL_TIM_MspPostInit+0x13c>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80014de:	2340      	movs	r3, #64	; 0x40
 80014e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e2:	2302      	movs	r3, #2
 80014e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ea:	2300      	movs	r3, #0
 80014ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80014ee:	2309      	movs	r3, #9
 80014f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80014f2:	f107 031c 	add.w	r3, r7, #28
 80014f6:	4619      	mov	r1, r3
 80014f8:	480a      	ldr	r0, [pc, #40]	; (8001524 <HAL_TIM_MspPostInit+0x154>)
 80014fa:	f001 f979 	bl	80027f0 <HAL_GPIO_Init>
}
 80014fe:	bf00      	nop
 8001500:	3730      	adds	r7, #48	; 0x30
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40010000 	.word	0x40010000
 800150c:	40023800 	.word	0x40023800
 8001510:	40020000 	.word	0x40020000
 8001514:	40021000 	.word	0x40021000
 8001518:	40000400 	.word	0x40000400
 800151c:	40020400 	.word	0x40020400
 8001520:	40001800 	.word	0x40001800
 8001524:	40021c00 	.word	0x40021c00

08001528 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800152c:	4b11      	ldr	r3, [pc, #68]	; (8001574 <MX_USART3_UART_Init+0x4c>)
 800152e:	4a12      	ldr	r2, [pc, #72]	; (8001578 <MX_USART3_UART_Init+0x50>)
 8001530:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 8001532:	4b10      	ldr	r3, [pc, #64]	; (8001574 <MX_USART3_UART_Init+0x4c>)
 8001534:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8001538:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800153a:	4b0e      	ldr	r3, [pc, #56]	; (8001574 <MX_USART3_UART_Init+0x4c>)
 800153c:	2200      	movs	r2, #0
 800153e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001540:	4b0c      	ldr	r3, [pc, #48]	; (8001574 <MX_USART3_UART_Init+0x4c>)
 8001542:	2200      	movs	r2, #0
 8001544:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001546:	4b0b      	ldr	r3, [pc, #44]	; (8001574 <MX_USART3_UART_Init+0x4c>)
 8001548:	2200      	movs	r2, #0
 800154a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800154c:	4b09      	ldr	r3, [pc, #36]	; (8001574 <MX_USART3_UART_Init+0x4c>)
 800154e:	220c      	movs	r2, #12
 8001550:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001552:	4b08      	ldr	r3, [pc, #32]	; (8001574 <MX_USART3_UART_Init+0x4c>)
 8001554:	2200      	movs	r2, #0
 8001556:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001558:	4b06      	ldr	r3, [pc, #24]	; (8001574 <MX_USART3_UART_Init+0x4c>)
 800155a:	2200      	movs	r2, #0
 800155c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800155e:	4805      	ldr	r0, [pc, #20]	; (8001574 <MX_USART3_UART_Init+0x4c>)
 8001560:	f004 fa12 	bl	8005988 <HAL_UART_Init>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800156a:	f7ff fb9d 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	20000384 	.word	0x20000384
 8001578:	40004800 	.word	0x40004800

0800157c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001580:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <MX_USART6_UART_Init+0x4c>)
 8001582:	4a12      	ldr	r2, [pc, #72]	; (80015cc <MX_USART6_UART_Init+0x50>)
 8001584:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 921600;
 8001586:	4b10      	ldr	r3, [pc, #64]	; (80015c8 <MX_USART6_UART_Init+0x4c>)
 8001588:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 800158c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800158e:	4b0e      	ldr	r3, [pc, #56]	; (80015c8 <MX_USART6_UART_Init+0x4c>)
 8001590:	2200      	movs	r2, #0
 8001592:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001594:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <MX_USART6_UART_Init+0x4c>)
 8001596:	2200      	movs	r2, #0
 8001598:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800159a:	4b0b      	ldr	r3, [pc, #44]	; (80015c8 <MX_USART6_UART_Init+0x4c>)
 800159c:	2200      	movs	r2, #0
 800159e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80015a0:	4b09      	ldr	r3, [pc, #36]	; (80015c8 <MX_USART6_UART_Init+0x4c>)
 80015a2:	220c      	movs	r2, #12
 80015a4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015a6:	4b08      	ldr	r3, [pc, #32]	; (80015c8 <MX_USART6_UART_Init+0x4c>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80015ac:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <MX_USART6_UART_Init+0x4c>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80015b2:	4805      	ldr	r0, [pc, #20]	; (80015c8 <MX_USART6_UART_Init+0x4c>)
 80015b4:	f004 f9e8 	bl	8005988 <HAL_UART_Init>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80015be:	f7ff fb73 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	200003cc 	.word	0x200003cc
 80015cc:	40011400 	.word	0x40011400

080015d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b08c      	sub	sp, #48	; 0x30
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d8:	f107 031c 	add.w	r3, r7, #28
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	605a      	str	r2, [r3, #4]
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	60da      	str	r2, [r3, #12]
 80015e6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a66      	ldr	r2, [pc, #408]	; (8001788 <HAL_UART_MspInit+0x1b8>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d12d      	bne.n	800164e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	61bb      	str	r3, [r7, #24]
 80015f6:	4b65      	ldr	r3, [pc, #404]	; (800178c <HAL_UART_MspInit+0x1bc>)
 80015f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fa:	4a64      	ldr	r2, [pc, #400]	; (800178c <HAL_UART_MspInit+0x1bc>)
 80015fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001600:	6413      	str	r3, [r2, #64]	; 0x40
 8001602:	4b62      	ldr	r3, [pc, #392]	; (800178c <HAL_UART_MspInit+0x1bc>)
 8001604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001606:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800160a:	61bb      	str	r3, [r7, #24]
 800160c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	617b      	str	r3, [r7, #20]
 8001612:	4b5e      	ldr	r3, [pc, #376]	; (800178c <HAL_UART_MspInit+0x1bc>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	4a5d      	ldr	r2, [pc, #372]	; (800178c <HAL_UART_MspInit+0x1bc>)
 8001618:	f043 0308 	orr.w	r3, r3, #8
 800161c:	6313      	str	r3, [r2, #48]	; 0x30
 800161e:	4b5b      	ldr	r3, [pc, #364]	; (800178c <HAL_UART_MspInit+0x1bc>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	f003 0308 	and.w	r3, r3, #8
 8001626:	617b      	str	r3, [r7, #20]
 8001628:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD9     ------> USART3_RX
    PD8     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 800162a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800162e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001630:	2302      	movs	r3, #2
 8001632:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001634:	2301      	movs	r3, #1
 8001636:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001638:	2303      	movs	r3, #3
 800163a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800163c:	2307      	movs	r3, #7
 800163e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001640:	f107 031c 	add.w	r3, r7, #28
 8001644:	4619      	mov	r1, r3
 8001646:	4852      	ldr	r0, [pc, #328]	; (8001790 <HAL_UART_MspInit+0x1c0>)
 8001648:	f001 f8d2 	bl	80027f0 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800164c:	e097      	b.n	800177e <HAL_UART_MspInit+0x1ae>
  else if(uartHandle->Instance==USART6)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a50      	ldr	r2, [pc, #320]	; (8001794 <HAL_UART_MspInit+0x1c4>)
 8001654:	4293      	cmp	r3, r2
 8001656:	f040 8092 	bne.w	800177e <HAL_UART_MspInit+0x1ae>
    __HAL_RCC_USART6_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	613b      	str	r3, [r7, #16]
 800165e:	4b4b      	ldr	r3, [pc, #300]	; (800178c <HAL_UART_MspInit+0x1bc>)
 8001660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001662:	4a4a      	ldr	r2, [pc, #296]	; (800178c <HAL_UART_MspInit+0x1bc>)
 8001664:	f043 0320 	orr.w	r3, r3, #32
 8001668:	6453      	str	r3, [r2, #68]	; 0x44
 800166a:	4b48      	ldr	r3, [pc, #288]	; (800178c <HAL_UART_MspInit+0x1bc>)
 800166c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166e:	f003 0320 	and.w	r3, r3, #32
 8001672:	613b      	str	r3, [r7, #16]
 8001674:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	4b44      	ldr	r3, [pc, #272]	; (800178c <HAL_UART_MspInit+0x1bc>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	4a43      	ldr	r2, [pc, #268]	; (800178c <HAL_UART_MspInit+0x1bc>)
 8001680:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001684:	6313      	str	r3, [r2, #48]	; 0x30
 8001686:	4b41      	ldr	r3, [pc, #260]	; (800178c <HAL_UART_MspInit+0x1bc>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 8001692:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001696:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001698:	2302      	movs	r3, #2
 800169a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800169c:	2301      	movs	r3, #1
 800169e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a0:	2303      	movs	r3, #3
 80016a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80016a4:	2308      	movs	r3, #8
 80016a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016a8:	f107 031c 	add.w	r3, r7, #28
 80016ac:	4619      	mov	r1, r3
 80016ae:	483a      	ldr	r0, [pc, #232]	; (8001798 <HAL_UART_MspInit+0x1c8>)
 80016b0:	f001 f89e 	bl	80027f0 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80016b4:	4b39      	ldr	r3, [pc, #228]	; (800179c <HAL_UART_MspInit+0x1cc>)
 80016b6:	4a3a      	ldr	r2, [pc, #232]	; (80017a0 <HAL_UART_MspInit+0x1d0>)
 80016b8:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80016ba:	4b38      	ldr	r3, [pc, #224]	; (800179c <HAL_UART_MspInit+0x1cc>)
 80016bc:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80016c0:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016c2:	4b36      	ldr	r3, [pc, #216]	; (800179c <HAL_UART_MspInit+0x1cc>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016c8:	4b34      	ldr	r3, [pc, #208]	; (800179c <HAL_UART_MspInit+0x1cc>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016ce:	4b33      	ldr	r3, [pc, #204]	; (800179c <HAL_UART_MspInit+0x1cc>)
 80016d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016d4:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016d6:	4b31      	ldr	r3, [pc, #196]	; (800179c <HAL_UART_MspInit+0x1cc>)
 80016d8:	2200      	movs	r2, #0
 80016da:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016dc:	4b2f      	ldr	r3, [pc, #188]	; (800179c <HAL_UART_MspInit+0x1cc>)
 80016de:	2200      	movs	r2, #0
 80016e0:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 80016e2:	4b2e      	ldr	r3, [pc, #184]	; (800179c <HAL_UART_MspInit+0x1cc>)
 80016e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016e8:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80016ea:	4b2c      	ldr	r3, [pc, #176]	; (800179c <HAL_UART_MspInit+0x1cc>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016f0:	4b2a      	ldr	r3, [pc, #168]	; (800179c <HAL_UART_MspInit+0x1cc>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80016f6:	4829      	ldr	r0, [pc, #164]	; (800179c <HAL_UART_MspInit+0x1cc>)
 80016f8:	f000 fcfe 	bl	80020f8 <HAL_DMA_Init>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <HAL_UART_MspInit+0x136>
      Error_Handler();
 8001702:	f7ff fad1 	bl	8000ca8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4a24      	ldr	r2, [pc, #144]	; (800179c <HAL_UART_MspInit+0x1cc>)
 800170a:	63da      	str	r2, [r3, #60]	; 0x3c
 800170c:	4a23      	ldr	r2, [pc, #140]	; (800179c <HAL_UART_MspInit+0x1cc>)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8001712:	4b24      	ldr	r3, [pc, #144]	; (80017a4 <HAL_UART_MspInit+0x1d4>)
 8001714:	4a24      	ldr	r2, [pc, #144]	; (80017a8 <HAL_UART_MspInit+0x1d8>)
 8001716:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8001718:	4b22      	ldr	r3, [pc, #136]	; (80017a4 <HAL_UART_MspInit+0x1d4>)
 800171a:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800171e:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001720:	4b20      	ldr	r3, [pc, #128]	; (80017a4 <HAL_UART_MspInit+0x1d4>)
 8001722:	2240      	movs	r2, #64	; 0x40
 8001724:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001726:	4b1f      	ldr	r3, [pc, #124]	; (80017a4 <HAL_UART_MspInit+0x1d4>)
 8001728:	2200      	movs	r2, #0
 800172a:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 800172c:	4b1d      	ldr	r3, [pc, #116]	; (80017a4 <HAL_UART_MspInit+0x1d4>)
 800172e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001732:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001734:	4b1b      	ldr	r3, [pc, #108]	; (80017a4 <HAL_UART_MspInit+0x1d4>)
 8001736:	2200      	movs	r2, #0
 8001738:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800173a:	4b1a      	ldr	r3, [pc, #104]	; (80017a4 <HAL_UART_MspInit+0x1d4>)
 800173c:	2200      	movs	r2, #0
 800173e:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8001740:	4b18      	ldr	r3, [pc, #96]	; (80017a4 <HAL_UART_MspInit+0x1d4>)
 8001742:	2200      	movs	r2, #0
 8001744:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001746:	4b17      	ldr	r3, [pc, #92]	; (80017a4 <HAL_UART_MspInit+0x1d4>)
 8001748:	2200      	movs	r2, #0
 800174a:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800174c:	4b15      	ldr	r3, [pc, #84]	; (80017a4 <HAL_UART_MspInit+0x1d4>)
 800174e:	2200      	movs	r2, #0
 8001750:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8001752:	4814      	ldr	r0, [pc, #80]	; (80017a4 <HAL_UART_MspInit+0x1d4>)
 8001754:	f000 fcd0 	bl	80020f8 <HAL_DMA_Init>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <HAL_UART_MspInit+0x192>
      Error_Handler();
 800175e:	f7ff faa3 	bl	8000ca8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4a0f      	ldr	r2, [pc, #60]	; (80017a4 <HAL_UART_MspInit+0x1d4>)
 8001766:	639a      	str	r2, [r3, #56]	; 0x38
 8001768:	4a0e      	ldr	r2, [pc, #56]	; (80017a4 <HAL_UART_MspInit+0x1d4>)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 800176e:	2200      	movs	r2, #0
 8001770:	2105      	movs	r1, #5
 8001772:	2047      	movs	r0, #71	; 0x47
 8001774:	f000 fc96 	bl	80020a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001778:	2047      	movs	r0, #71	; 0x47
 800177a:	f000 fcaf 	bl	80020dc <HAL_NVIC_EnableIRQ>
}
 800177e:	bf00      	nop
 8001780:	3730      	adds	r7, #48	; 0x30
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40004800 	.word	0x40004800
 800178c:	40023800 	.word	0x40023800
 8001790:	40020c00 	.word	0x40020c00
 8001794:	40011400 	.word	0x40011400
 8001798:	40021800 	.word	0x40021800
 800179c:	20000414 	.word	0x20000414
 80017a0:	40026428 	.word	0x40026428
 80017a4:	20000474 	.word	0x20000474
 80017a8:	400264a0 	.word	0x400264a0

080017ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017e4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017b0:	f7ff fc0c 	bl	8000fcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017b4:	480c      	ldr	r0, [pc, #48]	; (80017e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017b6:	490d      	ldr	r1, [pc, #52]	; (80017ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017b8:	4a0d      	ldr	r2, [pc, #52]	; (80017f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017bc:	e002      	b.n	80017c4 <LoopCopyDataInit>

080017be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017c2:	3304      	adds	r3, #4

080017c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017c8:	d3f9      	bcc.n	80017be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ca:	4a0a      	ldr	r2, [pc, #40]	; (80017f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017cc:	4c0a      	ldr	r4, [pc, #40]	; (80017f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017d0:	e001      	b.n	80017d6 <LoopFillZerobss>

080017d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017d4:	3204      	adds	r2, #4

080017d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017d8:	d3fb      	bcc.n	80017d2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80017da:	f00b f8b5 	bl	800c948 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017de:	f7ff f9c1 	bl	8000b64 <main>
  bx  lr    
 80017e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017e4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80017e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017ec:	20000150 	.word	0x20000150
  ldr r2, =_sidata
 80017f0:	0800cb64 	.word	0x0800cb64
  ldr r2, =_sbss
 80017f4:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 80017f8:	20012564 	.word	0x20012564

080017fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017fc:	e7fe      	b.n	80017fc <ADC_IRQHandler>
	...

08001800 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001804:	4b0e      	ldr	r3, [pc, #56]	; (8001840 <HAL_Init+0x40>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a0d      	ldr	r2, [pc, #52]	; (8001840 <HAL_Init+0x40>)
 800180a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800180e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001810:	4b0b      	ldr	r3, [pc, #44]	; (8001840 <HAL_Init+0x40>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a0a      	ldr	r2, [pc, #40]	; (8001840 <HAL_Init+0x40>)
 8001816:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800181a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800181c:	4b08      	ldr	r3, [pc, #32]	; (8001840 <HAL_Init+0x40>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a07      	ldr	r2, [pc, #28]	; (8001840 <HAL_Init+0x40>)
 8001822:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001826:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001828:	2003      	movs	r0, #3
 800182a:	f000 fc30 	bl	800208e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800182e:	200f      	movs	r0, #15
 8001830:	f7ff faea 	bl	8000e08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001834:	f7ff fabc 	bl	8000db0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40023c00 	.word	0x40023c00

08001844 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001848:	4b06      	ldr	r3, [pc, #24]	; (8001864 <HAL_IncTick+0x20>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	461a      	mov	r2, r3
 800184e:	4b06      	ldr	r3, [pc, #24]	; (8001868 <HAL_IncTick+0x24>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4413      	add	r3, r2
 8001854:	4a04      	ldr	r2, [pc, #16]	; (8001868 <HAL_IncTick+0x24>)
 8001856:	6013      	str	r3, [r2, #0]
}
 8001858:	bf00      	nop
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	20000008 	.word	0x20000008
 8001868:	200004d4 	.word	0x200004d4

0800186c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  return uwTick;
 8001870:	4b03      	ldr	r3, [pc, #12]	; (8001880 <HAL_GetTick+0x14>)
 8001872:	681b      	ldr	r3, [r3, #0]
}
 8001874:	4618      	mov	r0, r3
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	200004d4 	.word	0x200004d4

08001884 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800188c:	f7ff ffee 	bl	800186c <HAL_GetTick>
 8001890:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800189c:	d005      	beq.n	80018aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800189e:	4b0a      	ldr	r3, [pc, #40]	; (80018c8 <HAL_Delay+0x44>)
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	461a      	mov	r2, r3
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	4413      	add	r3, r2
 80018a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018aa:	bf00      	nop
 80018ac:	f7ff ffde 	bl	800186c <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	68fa      	ldr	r2, [r7, #12]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d8f7      	bhi.n	80018ac <HAL_Delay+0x28>
  {
  }
}
 80018bc:	bf00      	nop
 80018be:	bf00      	nop
 80018c0:	3710      	adds	r7, #16
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	20000008 	.word	0x20000008

080018cc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d101      	bne.n	80018de <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e0ed      	b.n	8001aba <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d102      	bne.n	80018f0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f7fe fe68 	bl	80005c0 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f042 0201 	orr.w	r2, r2, #1
 80018fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001900:	f7ff ffb4 	bl	800186c <HAL_GetTick>
 8001904:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001906:	e012      	b.n	800192e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001908:	f7ff ffb0 	bl	800186c <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b0a      	cmp	r3, #10
 8001914:	d90b      	bls.n	800192e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2205      	movs	r2, #5
 8001926:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e0c5      	b.n	8001aba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f003 0301 	and.w	r3, r3, #1
 8001938:	2b00      	cmp	r3, #0
 800193a:	d0e5      	beq.n	8001908 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f022 0202 	bic.w	r2, r2, #2
 800194a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800194c:	f7ff ff8e 	bl	800186c <HAL_GetTick>
 8001950:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001952:	e012      	b.n	800197a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001954:	f7ff ff8a 	bl	800186c <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	2b0a      	cmp	r3, #10
 8001960:	d90b      	bls.n	800197a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001966:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2205      	movs	r2, #5
 8001972:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e09f      	b.n	8001aba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f003 0302 	and.w	r3, r3, #2
 8001984:	2b00      	cmp	r3, #0
 8001986:	d1e5      	bne.n	8001954 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	7e1b      	ldrb	r3, [r3, #24]
 800198c:	2b01      	cmp	r3, #1
 800198e:	d108      	bne.n	80019a2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	e007      	b.n	80019b2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	7e5b      	ldrb	r3, [r3, #25]
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d108      	bne.n	80019cc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019c8:	601a      	str	r2, [r3, #0]
 80019ca:	e007      	b.n	80019dc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80019da:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	7e9b      	ldrb	r3, [r3, #26]
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d108      	bne.n	80019f6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f042 0220 	orr.w	r2, r2, #32
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	e007      	b.n	8001a06 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f022 0220 	bic.w	r2, r2, #32
 8001a04:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	7edb      	ldrb	r3, [r3, #27]
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d108      	bne.n	8001a20 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f022 0210 	bic.w	r2, r2, #16
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	e007      	b.n	8001a30 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f042 0210 	orr.w	r2, r2, #16
 8001a2e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	7f1b      	ldrb	r3, [r3, #28]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d108      	bne.n	8001a4a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f042 0208 	orr.w	r2, r2, #8
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	e007      	b.n	8001a5a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f022 0208 	bic.w	r2, r2, #8
 8001a58:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	7f5b      	ldrb	r3, [r3, #29]
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d108      	bne.n	8001a74 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f042 0204 	orr.w	r2, r2, #4
 8001a70:	601a      	str	r2, [r3, #0]
 8001a72:	e007      	b.n	8001a84 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f022 0204 	bic.w	r2, r2, #4
 8001a82:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	689a      	ldr	r2, [r3, #8]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	431a      	orrs	r2, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	691b      	ldr	r3, [r3, #16]
 8001a92:	431a      	orrs	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	695b      	ldr	r3, [r3, #20]
 8001a98:	ea42 0103 	orr.w	r1, r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	1e5a      	subs	r2, r3, #1
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	430a      	orrs	r2, r1
 8001aa8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2200      	movs	r2, #0
 8001aae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3710      	adds	r7, #16
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b08a      	sub	sp, #40	; 0x28
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001aca:	2300      	movs	r3, #0
 8001acc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	695b      	ldr	r3, [r3, #20]
 8001ad4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	691b      	ldr	r3, [r3, #16]
 8001af4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001afe:	6a3b      	ldr	r3, [r7, #32]
 8001b00:	f003 0301 	and.w	r3, r3, #1
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d07c      	beq.n	8001c02 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d023      	beq.n	8001b5a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	2201      	movs	r2, #1
 8001b18:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	f003 0302 	and.w	r3, r3, #2
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d003      	beq.n	8001b2c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f000 f983 	bl	8001e30 <HAL_CAN_TxMailbox0CompleteCallback>
 8001b2a:	e016      	b.n	8001b5a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	f003 0304 	and.w	r3, r3, #4
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d004      	beq.n	8001b40 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b38:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b3c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b3e:	e00c      	b.n	8001b5a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	f003 0308 	and.w	r3, r3, #8
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d004      	beq.n	8001b54 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b50:	627b      	str	r3, [r7, #36]	; 0x24
 8001b52:	e002      	b.n	8001b5a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f000 f989 	bl	8001e6c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d024      	beq.n	8001bae <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b6c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d003      	beq.n	8001b80 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f000 f963 	bl	8001e44 <HAL_CAN_TxMailbox1CompleteCallback>
 8001b7e:	e016      	b.n	8001bae <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d004      	beq.n	8001b94 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b90:	627b      	str	r3, [r7, #36]	; 0x24
 8001b92:	e00c      	b.n	8001bae <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d004      	beq.n	8001ba8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ba4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ba6:	e002      	b.n	8001bae <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f000 f969 	bl	8001e80 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d024      	beq.n	8001c02 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001bc0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d003      	beq.n	8001bd4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f000 f943 	bl	8001e58 <HAL_CAN_TxMailbox2CompleteCallback>
 8001bd2:	e016      	b.n	8001c02 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d004      	beq.n	8001be8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001be4:	627b      	str	r3, [r7, #36]	; 0x24
 8001be6:	e00c      	b.n	8001c02 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d004      	beq.n	8001bfc <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bf8:	627b      	str	r3, [r7, #36]	; 0x24
 8001bfa:	e002      	b.n	8001c02 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f000 f949 	bl	8001e94 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001c02:	6a3b      	ldr	r3, [r7, #32]
 8001c04:	f003 0308 	and.w	r3, r3, #8
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d00c      	beq.n	8001c26 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	f003 0310 	and.w	r3, r3, #16
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d007      	beq.n	8001c26 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c18:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c1c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2210      	movs	r2, #16
 8001c24:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001c26:	6a3b      	ldr	r3, [r7, #32]
 8001c28:	f003 0304 	and.w	r3, r3, #4
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d00b      	beq.n	8001c48 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	f003 0308 	and.w	r3, r3, #8
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d006      	beq.n	8001c48 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2208      	movs	r2, #8
 8001c40:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f000 f93a 	bl	8001ebc <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001c48:	6a3b      	ldr	r3, [r7, #32]
 8001c4a:	f003 0302 	and.w	r3, r3, #2
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d009      	beq.n	8001c66 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	f003 0303 	and.w	r3, r3, #3
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d002      	beq.n	8001c66 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f000 f921 	bl	8001ea8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001c66:	6a3b      	ldr	r3, [r7, #32]
 8001c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d00c      	beq.n	8001c8a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	f003 0310 	and.w	r3, r3, #16
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d007      	beq.n	8001c8a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c80:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2210      	movs	r2, #16
 8001c88:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001c8a:	6a3b      	ldr	r3, [r7, #32]
 8001c8c:	f003 0320 	and.w	r3, r3, #32
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d00b      	beq.n	8001cac <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	f003 0308 	and.w	r3, r3, #8
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d006      	beq.n	8001cac <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2208      	movs	r2, #8
 8001ca4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 f91c 	bl	8001ee4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001cac:	6a3b      	ldr	r3, [r7, #32]
 8001cae:	f003 0310 	and.w	r3, r3, #16
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d009      	beq.n	8001cca <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	691b      	ldr	r3, [r3, #16]
 8001cbc:	f003 0303 	and.w	r3, r3, #3
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d002      	beq.n	8001cca <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f000 f903 	bl	8001ed0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001cca:	6a3b      	ldr	r3, [r7, #32]
 8001ccc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d00b      	beq.n	8001cec <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	f003 0310 	and.w	r3, r3, #16
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d006      	beq.n	8001cec <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2210      	movs	r2, #16
 8001ce4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f000 f906 	bl	8001ef8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001cec:	6a3b      	ldr	r3, [r7, #32]
 8001cee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d00b      	beq.n	8001d0e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	f003 0308 	and.w	r3, r3, #8
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d006      	beq.n	8001d0e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2208      	movs	r2, #8
 8001d06:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f000 f8ff 	bl	8001f0c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001d0e:	6a3b      	ldr	r3, [r7, #32]
 8001d10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d07b      	beq.n	8001e10 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	f003 0304 	and.w	r3, r3, #4
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d072      	beq.n	8001e08 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001d22:	6a3b      	ldr	r3, [r7, #32]
 8001d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d008      	beq.n	8001d3e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d003      	beq.n	8001d3e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d38:	f043 0301 	orr.w	r3, r3, #1
 8001d3c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001d3e:	6a3b      	ldr	r3, [r7, #32]
 8001d40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d008      	beq.n	8001d5a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d003      	beq.n	8001d5a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d54:	f043 0302 	orr.w	r3, r3, #2
 8001d58:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001d5a:	6a3b      	ldr	r3, [r7, #32]
 8001d5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d008      	beq.n	8001d76 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d003      	beq.n	8001d76 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d70:	f043 0304 	orr.w	r3, r3, #4
 8001d74:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001d76:	6a3b      	ldr	r3, [r7, #32]
 8001d78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d043      	beq.n	8001e08 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d03e      	beq.n	8001e08 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d90:	2b60      	cmp	r3, #96	; 0x60
 8001d92:	d02b      	beq.n	8001dec <HAL_CAN_IRQHandler+0x32a>
 8001d94:	2b60      	cmp	r3, #96	; 0x60
 8001d96:	d82e      	bhi.n	8001df6 <HAL_CAN_IRQHandler+0x334>
 8001d98:	2b50      	cmp	r3, #80	; 0x50
 8001d9a:	d022      	beq.n	8001de2 <HAL_CAN_IRQHandler+0x320>
 8001d9c:	2b50      	cmp	r3, #80	; 0x50
 8001d9e:	d82a      	bhi.n	8001df6 <HAL_CAN_IRQHandler+0x334>
 8001da0:	2b40      	cmp	r3, #64	; 0x40
 8001da2:	d019      	beq.n	8001dd8 <HAL_CAN_IRQHandler+0x316>
 8001da4:	2b40      	cmp	r3, #64	; 0x40
 8001da6:	d826      	bhi.n	8001df6 <HAL_CAN_IRQHandler+0x334>
 8001da8:	2b30      	cmp	r3, #48	; 0x30
 8001daa:	d010      	beq.n	8001dce <HAL_CAN_IRQHandler+0x30c>
 8001dac:	2b30      	cmp	r3, #48	; 0x30
 8001dae:	d822      	bhi.n	8001df6 <HAL_CAN_IRQHandler+0x334>
 8001db0:	2b10      	cmp	r3, #16
 8001db2:	d002      	beq.n	8001dba <HAL_CAN_IRQHandler+0x2f8>
 8001db4:	2b20      	cmp	r3, #32
 8001db6:	d005      	beq.n	8001dc4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001db8:	e01d      	b.n	8001df6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbc:	f043 0308 	orr.w	r3, r3, #8
 8001dc0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001dc2:	e019      	b.n	8001df8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc6:	f043 0310 	orr.w	r3, r3, #16
 8001dca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001dcc:	e014      	b.n	8001df8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd0:	f043 0320 	orr.w	r3, r3, #32
 8001dd4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001dd6:	e00f      	b.n	8001df8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001dde:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001de0:	e00a      	b.n	8001df8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001de8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001dea:	e005      	b.n	8001df8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001df2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001df4:	e000      	b.n	8001df8 <HAL_CAN_IRQHandler+0x336>
            break;
 8001df6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	699a      	ldr	r2, [r3, #24]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001e06:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2204      	movs	r2, #4
 8001e0e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d008      	beq.n	8001e28 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1c:	431a      	orrs	r2, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f000 f87c 	bl	8001f20 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001e28:	bf00      	nop
 8001e2a:	3728      	adds	r7, #40	; 0x28
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001e38:	bf00      	nop
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001e4c:	bf00      	nop
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001e60:	bf00      	nop
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001e88:	bf00      	nop
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001ec4:	bf00      	nop
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001eec:	bf00      	nop
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001f28:	bf00      	nop
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f003 0307 	and.w	r3, r3, #7
 8001f42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f44:	4b0c      	ldr	r3, [pc, #48]	; (8001f78 <__NVIC_SetPriorityGrouping+0x44>)
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f4a:	68ba      	ldr	r2, [r7, #8]
 8001f4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f50:	4013      	ands	r3, r2
 8001f52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f66:	4a04      	ldr	r2, [pc, #16]	; (8001f78 <__NVIC_SetPriorityGrouping+0x44>)
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	60d3      	str	r3, [r2, #12]
}
 8001f6c:	bf00      	nop
 8001f6e:	3714      	adds	r7, #20
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr
 8001f78:	e000ed00 	.word	0xe000ed00

08001f7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f80:	4b04      	ldr	r3, [pc, #16]	; (8001f94 <__NVIC_GetPriorityGrouping+0x18>)
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	0a1b      	lsrs	r3, r3, #8
 8001f86:	f003 0307 	and.w	r3, r3, #7
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	e000ed00 	.word	0xe000ed00

08001f98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	db0b      	blt.n	8001fc2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001faa:	79fb      	ldrb	r3, [r7, #7]
 8001fac:	f003 021f 	and.w	r2, r3, #31
 8001fb0:	4907      	ldr	r1, [pc, #28]	; (8001fd0 <__NVIC_EnableIRQ+0x38>)
 8001fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb6:	095b      	lsrs	r3, r3, #5
 8001fb8:	2001      	movs	r0, #1
 8001fba:	fa00 f202 	lsl.w	r2, r0, r2
 8001fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001fc2:	bf00      	nop
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	e000e100 	.word	0xe000e100

08001fd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	4603      	mov	r3, r0
 8001fdc:	6039      	str	r1, [r7, #0]
 8001fde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	db0a      	blt.n	8001ffe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	b2da      	uxtb	r2, r3
 8001fec:	490c      	ldr	r1, [pc, #48]	; (8002020 <__NVIC_SetPriority+0x4c>)
 8001fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff2:	0112      	lsls	r2, r2, #4
 8001ff4:	b2d2      	uxtb	r2, r2
 8001ff6:	440b      	add	r3, r1
 8001ff8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ffc:	e00a      	b.n	8002014 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	b2da      	uxtb	r2, r3
 8002002:	4908      	ldr	r1, [pc, #32]	; (8002024 <__NVIC_SetPriority+0x50>)
 8002004:	79fb      	ldrb	r3, [r7, #7]
 8002006:	f003 030f 	and.w	r3, r3, #15
 800200a:	3b04      	subs	r3, #4
 800200c:	0112      	lsls	r2, r2, #4
 800200e:	b2d2      	uxtb	r2, r2
 8002010:	440b      	add	r3, r1
 8002012:	761a      	strb	r2, [r3, #24]
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr
 8002020:	e000e100 	.word	0xe000e100
 8002024:	e000ed00 	.word	0xe000ed00

08002028 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002028:	b480      	push	{r7}
 800202a:	b089      	sub	sp, #36	; 0x24
 800202c:	af00      	add	r7, sp, #0
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	60b9      	str	r1, [r7, #8]
 8002032:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f003 0307 	and.w	r3, r3, #7
 800203a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	f1c3 0307 	rsb	r3, r3, #7
 8002042:	2b04      	cmp	r3, #4
 8002044:	bf28      	it	cs
 8002046:	2304      	movcs	r3, #4
 8002048:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	3304      	adds	r3, #4
 800204e:	2b06      	cmp	r3, #6
 8002050:	d902      	bls.n	8002058 <NVIC_EncodePriority+0x30>
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	3b03      	subs	r3, #3
 8002056:	e000      	b.n	800205a <NVIC_EncodePriority+0x32>
 8002058:	2300      	movs	r3, #0
 800205a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800205c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	fa02 f303 	lsl.w	r3, r2, r3
 8002066:	43da      	mvns	r2, r3
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	401a      	ands	r2, r3
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002070:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	fa01 f303 	lsl.w	r3, r1, r3
 800207a:	43d9      	mvns	r1, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002080:	4313      	orrs	r3, r2
         );
}
 8002082:	4618      	mov	r0, r3
 8002084:	3724      	adds	r7, #36	; 0x24
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr

0800208e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b082      	sub	sp, #8
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f7ff ff4c 	bl	8001f34 <__NVIC_SetPriorityGrouping>
}
 800209c:	bf00      	nop
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b086      	sub	sp, #24
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	4603      	mov	r3, r0
 80020ac:	60b9      	str	r1, [r7, #8]
 80020ae:	607a      	str	r2, [r7, #4]
 80020b0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020b2:	2300      	movs	r3, #0
 80020b4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020b6:	f7ff ff61 	bl	8001f7c <__NVIC_GetPriorityGrouping>
 80020ba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	68b9      	ldr	r1, [r7, #8]
 80020c0:	6978      	ldr	r0, [r7, #20]
 80020c2:	f7ff ffb1 	bl	8002028 <NVIC_EncodePriority>
 80020c6:	4602      	mov	r2, r0
 80020c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020cc:	4611      	mov	r1, r2
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7ff ff80 	bl	8001fd4 <__NVIC_SetPriority>
}
 80020d4:	bf00      	nop
 80020d6:	3718      	adds	r7, #24
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	4603      	mov	r3, r0
 80020e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7ff ff54 	bl	8001f98 <__NVIC_EnableIRQ>
}
 80020f0:	bf00      	nop
 80020f2:	3708      	adds	r7, #8
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002100:	2300      	movs	r3, #0
 8002102:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002104:	f7ff fbb2 	bl	800186c <HAL_GetTick>
 8002108:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d101      	bne.n	8002114 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e099      	b.n	8002248 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2202      	movs	r2, #2
 8002118:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f022 0201 	bic.w	r2, r2, #1
 8002132:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002134:	e00f      	b.n	8002156 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002136:	f7ff fb99 	bl	800186c <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b05      	cmp	r3, #5
 8002142:	d908      	bls.n	8002156 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2220      	movs	r2, #32
 8002148:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2203      	movs	r2, #3
 800214e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e078      	b.n	8002248 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0301 	and.w	r3, r3, #1
 8002160:	2b00      	cmp	r3, #0
 8002162:	d1e8      	bne.n	8002136 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800216c:	697a      	ldr	r2, [r7, #20]
 800216e:	4b38      	ldr	r3, [pc, #224]	; (8002250 <HAL_DMA_Init+0x158>)
 8002170:	4013      	ands	r3, r2
 8002172:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685a      	ldr	r2, [r3, #4]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002182:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	691b      	ldr	r3, [r3, #16]
 8002188:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800218e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800219a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a1b      	ldr	r3, [r3, #32]
 80021a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021a2:	697a      	ldr	r2, [r7, #20]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ac:	2b04      	cmp	r3, #4
 80021ae:	d107      	bne.n	80021c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b8:	4313      	orrs	r3, r2
 80021ba:	697a      	ldr	r2, [r7, #20]
 80021bc:	4313      	orrs	r3, r2
 80021be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	697a      	ldr	r2, [r7, #20]
 80021c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	695b      	ldr	r3, [r3, #20]
 80021ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	f023 0307 	bic.w	r3, r3, #7
 80021d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021dc:	697a      	ldr	r2, [r7, #20]
 80021de:	4313      	orrs	r3, r2
 80021e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e6:	2b04      	cmp	r3, #4
 80021e8:	d117      	bne.n	800221a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ee:	697a      	ldr	r2, [r7, #20]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d00e      	beq.n	800221a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f000 fa7b 	bl	80026f8 <DMA_CheckFifoParam>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d008      	beq.n	800221a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2240      	movs	r2, #64	; 0x40
 800220c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2201      	movs	r2, #1
 8002212:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002216:	2301      	movs	r3, #1
 8002218:	e016      	b.n	8002248 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	697a      	ldr	r2, [r7, #20]
 8002220:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f000 fa32 	bl	800268c <DMA_CalcBaseAndBitshift>
 8002228:	4603      	mov	r3, r0
 800222a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002230:	223f      	movs	r2, #63	; 0x3f
 8002232:	409a      	lsls	r2, r3
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2201      	movs	r2, #1
 8002242:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002246:	2300      	movs	r3, #0
}
 8002248:	4618      	mov	r0, r3
 800224a:	3718      	adds	r7, #24
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	f010803f 	.word	0xf010803f

08002254 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002260:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002262:	f7ff fb03 	bl	800186c <HAL_GetTick>
 8002266:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800226e:	b2db      	uxtb	r3, r3
 8002270:	2b02      	cmp	r3, #2
 8002272:	d008      	beq.n	8002286 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2280      	movs	r2, #128	; 0x80
 8002278:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e052      	b.n	800232c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f022 0216 	bic.w	r2, r2, #22
 8002294:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	695a      	ldr	r2, [r3, #20]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022a4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d103      	bne.n	80022b6 <HAL_DMA_Abort+0x62>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d007      	beq.n	80022c6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f022 0208 	bic.w	r2, r2, #8
 80022c4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f022 0201 	bic.w	r2, r2, #1
 80022d4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022d6:	e013      	b.n	8002300 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022d8:	f7ff fac8 	bl	800186c <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b05      	cmp	r3, #5
 80022e4:	d90c      	bls.n	8002300 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2220      	movs	r2, #32
 80022ea:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2203      	movs	r2, #3
 80022f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e015      	b.n	800232c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0301 	and.w	r3, r3, #1
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1e4      	bne.n	80022d8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002312:	223f      	movs	r2, #63	; 0x3f
 8002314:	409a      	lsls	r2, r3
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2201      	movs	r2, #1
 800231e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800232a:	2300      	movs	r3, #0
}
 800232c:	4618      	mov	r0, r3
 800232e:	3710      	adds	r7, #16
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002342:	b2db      	uxtb	r3, r3
 8002344:	2b02      	cmp	r3, #2
 8002346:	d004      	beq.n	8002352 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2280      	movs	r2, #128	; 0x80
 800234c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e00c      	b.n	800236c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2205      	movs	r2, #5
 8002356:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f022 0201 	bic.w	r2, r2, #1
 8002368:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800236a:	2300      	movs	r3, #0
}
 800236c:	4618      	mov	r0, r3
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b086      	sub	sp, #24
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002380:	2300      	movs	r3, #0
 8002382:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002384:	4b8e      	ldr	r3, [pc, #568]	; (80025c0 <HAL_DMA_IRQHandler+0x248>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a8e      	ldr	r2, [pc, #568]	; (80025c4 <HAL_DMA_IRQHandler+0x24c>)
 800238a:	fba2 2303 	umull	r2, r3, r2, r3
 800238e:	0a9b      	lsrs	r3, r3, #10
 8002390:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002396:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023a2:	2208      	movs	r2, #8
 80023a4:	409a      	lsls	r2, r3
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	4013      	ands	r3, r2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d01a      	beq.n	80023e4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0304 	and.w	r3, r3, #4
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d013      	beq.n	80023e4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f022 0204 	bic.w	r2, r2, #4
 80023ca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023d0:	2208      	movs	r2, #8
 80023d2:	409a      	lsls	r2, r3
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023dc:	f043 0201 	orr.w	r2, r3, #1
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023e8:	2201      	movs	r2, #1
 80023ea:	409a      	lsls	r2, r3
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	4013      	ands	r3, r2
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d012      	beq.n	800241a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	695b      	ldr	r3, [r3, #20]
 80023fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d00b      	beq.n	800241a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002406:	2201      	movs	r2, #1
 8002408:	409a      	lsls	r2, r3
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002412:	f043 0202 	orr.w	r2, r3, #2
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800241e:	2204      	movs	r2, #4
 8002420:	409a      	lsls	r2, r3
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	4013      	ands	r3, r2
 8002426:	2b00      	cmp	r3, #0
 8002428:	d012      	beq.n	8002450 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0302 	and.w	r3, r3, #2
 8002434:	2b00      	cmp	r3, #0
 8002436:	d00b      	beq.n	8002450 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800243c:	2204      	movs	r2, #4
 800243e:	409a      	lsls	r2, r3
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002448:	f043 0204 	orr.w	r2, r3, #4
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002454:	2210      	movs	r2, #16
 8002456:	409a      	lsls	r2, r3
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	4013      	ands	r3, r2
 800245c:	2b00      	cmp	r3, #0
 800245e:	d043      	beq.n	80024e8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0308 	and.w	r3, r3, #8
 800246a:	2b00      	cmp	r3, #0
 800246c:	d03c      	beq.n	80024e8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002472:	2210      	movs	r2, #16
 8002474:	409a      	lsls	r2, r3
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d018      	beq.n	80024ba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d108      	bne.n	80024a8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249a:	2b00      	cmp	r3, #0
 800249c:	d024      	beq.n	80024e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	4798      	blx	r3
 80024a6:	e01f      	b.n	80024e8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d01b      	beq.n	80024e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	4798      	blx	r3
 80024b8:	e016      	b.n	80024e8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d107      	bne.n	80024d8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f022 0208 	bic.w	r2, r2, #8
 80024d6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d003      	beq.n	80024e8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ec:	2220      	movs	r2, #32
 80024ee:	409a      	lsls	r2, r3
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	4013      	ands	r3, r2
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	f000 808f 	beq.w	8002618 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0310 	and.w	r3, r3, #16
 8002504:	2b00      	cmp	r3, #0
 8002506:	f000 8087 	beq.w	8002618 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800250e:	2220      	movs	r2, #32
 8002510:	409a      	lsls	r2, r3
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800251c:	b2db      	uxtb	r3, r3
 800251e:	2b05      	cmp	r3, #5
 8002520:	d136      	bne.n	8002590 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f022 0216 	bic.w	r2, r2, #22
 8002530:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	695a      	ldr	r2, [r3, #20]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002540:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002546:	2b00      	cmp	r3, #0
 8002548:	d103      	bne.n	8002552 <HAL_DMA_IRQHandler+0x1da>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800254e:	2b00      	cmp	r3, #0
 8002550:	d007      	beq.n	8002562 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f022 0208 	bic.w	r2, r2, #8
 8002560:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002566:	223f      	movs	r2, #63	; 0x3f
 8002568:	409a      	lsls	r2, r3
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2201      	movs	r2, #1
 8002572:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002582:	2b00      	cmp	r3, #0
 8002584:	d07e      	beq.n	8002684 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	4798      	blx	r3
        }
        return;
 800258e:	e079      	b.n	8002684 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d01d      	beq.n	80025da <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d10d      	bne.n	80025c8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d031      	beq.n	8002618 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	4798      	blx	r3
 80025bc:	e02c      	b.n	8002618 <HAL_DMA_IRQHandler+0x2a0>
 80025be:	bf00      	nop
 80025c0:	20000000 	.word	0x20000000
 80025c4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d023      	beq.n	8002618 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	4798      	blx	r3
 80025d8:	e01e      	b.n	8002618 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d10f      	bne.n	8002608 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f022 0210 	bic.w	r2, r2, #16
 80025f6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800260c:	2b00      	cmp	r3, #0
 800260e:	d003      	beq.n	8002618 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800261c:	2b00      	cmp	r3, #0
 800261e:	d032      	beq.n	8002686 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002624:	f003 0301 	and.w	r3, r3, #1
 8002628:	2b00      	cmp	r3, #0
 800262a:	d022      	beq.n	8002672 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2205      	movs	r2, #5
 8002630:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f022 0201 	bic.w	r2, r2, #1
 8002642:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	3301      	adds	r3, #1
 8002648:	60bb      	str	r3, [r7, #8]
 800264a:	697a      	ldr	r2, [r7, #20]
 800264c:	429a      	cmp	r2, r3
 800264e:	d307      	bcc.n	8002660 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	2b00      	cmp	r3, #0
 800265c:	d1f2      	bne.n	8002644 <HAL_DMA_IRQHandler+0x2cc>
 800265e:	e000      	b.n	8002662 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002660:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2201      	movs	r2, #1
 8002666:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002676:	2b00      	cmp	r3, #0
 8002678:	d005      	beq.n	8002686 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	4798      	blx	r3
 8002682:	e000      	b.n	8002686 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002684:	bf00      	nop
    }
  }
}
 8002686:	3718      	adds	r7, #24
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800268c:	b480      	push	{r7}
 800268e:	b085      	sub	sp, #20
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	b2db      	uxtb	r3, r3
 800269a:	3b10      	subs	r3, #16
 800269c:	4a14      	ldr	r2, [pc, #80]	; (80026f0 <DMA_CalcBaseAndBitshift+0x64>)
 800269e:	fba2 2303 	umull	r2, r3, r2, r3
 80026a2:	091b      	lsrs	r3, r3, #4
 80026a4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80026a6:	4a13      	ldr	r2, [pc, #76]	; (80026f4 <DMA_CalcBaseAndBitshift+0x68>)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	4413      	add	r3, r2
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	461a      	mov	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2b03      	cmp	r3, #3
 80026b8:	d909      	bls.n	80026ce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80026c2:	f023 0303 	bic.w	r3, r3, #3
 80026c6:	1d1a      	adds	r2, r3, #4
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	659a      	str	r2, [r3, #88]	; 0x58
 80026cc:	e007      	b.n	80026de <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80026d6:	f023 0303 	bic.w	r3, r3, #3
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3714      	adds	r7, #20
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	aaaaaaab 	.word	0xaaaaaaab
 80026f4:	0800cb4c 	.word	0x0800cb4c

080026f8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b085      	sub	sp, #20
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002700:	2300      	movs	r3, #0
 8002702:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002708:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d11f      	bne.n	8002752 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	2b03      	cmp	r3, #3
 8002716:	d856      	bhi.n	80027c6 <DMA_CheckFifoParam+0xce>
 8002718:	a201      	add	r2, pc, #4	; (adr r2, 8002720 <DMA_CheckFifoParam+0x28>)
 800271a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800271e:	bf00      	nop
 8002720:	08002731 	.word	0x08002731
 8002724:	08002743 	.word	0x08002743
 8002728:	08002731 	.word	0x08002731
 800272c:	080027c7 	.word	0x080027c7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002734:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d046      	beq.n	80027ca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002740:	e043      	b.n	80027ca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002746:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800274a:	d140      	bne.n	80027ce <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002750:	e03d      	b.n	80027ce <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	699b      	ldr	r3, [r3, #24]
 8002756:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800275a:	d121      	bne.n	80027a0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	2b03      	cmp	r3, #3
 8002760:	d837      	bhi.n	80027d2 <DMA_CheckFifoParam+0xda>
 8002762:	a201      	add	r2, pc, #4	; (adr r2, 8002768 <DMA_CheckFifoParam+0x70>)
 8002764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002768:	08002779 	.word	0x08002779
 800276c:	0800277f 	.word	0x0800277f
 8002770:	08002779 	.word	0x08002779
 8002774:	08002791 	.word	0x08002791
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	73fb      	strb	r3, [r7, #15]
      break;
 800277c:	e030      	b.n	80027e0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002782:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d025      	beq.n	80027d6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800278e:	e022      	b.n	80027d6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002794:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002798:	d11f      	bne.n	80027da <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800279e:	e01c      	b.n	80027da <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d903      	bls.n	80027ae <DMA_CheckFifoParam+0xb6>
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	2b03      	cmp	r3, #3
 80027aa:	d003      	beq.n	80027b4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80027ac:	e018      	b.n	80027e0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	73fb      	strb	r3, [r7, #15]
      break;
 80027b2:	e015      	b.n	80027e0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d00e      	beq.n	80027de <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	73fb      	strb	r3, [r7, #15]
      break;
 80027c4:	e00b      	b.n	80027de <DMA_CheckFifoParam+0xe6>
      break;
 80027c6:	bf00      	nop
 80027c8:	e00a      	b.n	80027e0 <DMA_CheckFifoParam+0xe8>
      break;
 80027ca:	bf00      	nop
 80027cc:	e008      	b.n	80027e0 <DMA_CheckFifoParam+0xe8>
      break;
 80027ce:	bf00      	nop
 80027d0:	e006      	b.n	80027e0 <DMA_CheckFifoParam+0xe8>
      break;
 80027d2:	bf00      	nop
 80027d4:	e004      	b.n	80027e0 <DMA_CheckFifoParam+0xe8>
      break;
 80027d6:	bf00      	nop
 80027d8:	e002      	b.n	80027e0 <DMA_CheckFifoParam+0xe8>
      break;   
 80027da:	bf00      	nop
 80027dc:	e000      	b.n	80027e0 <DMA_CheckFifoParam+0xe8>
      break;
 80027de:	bf00      	nop
    }
  } 
  
  return status; 
 80027e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3714      	adds	r7, #20
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop

080027f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b089      	sub	sp, #36	; 0x24
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027fa:	2300      	movs	r3, #0
 80027fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027fe:	2300      	movs	r3, #0
 8002800:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002802:	2300      	movs	r3, #0
 8002804:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002806:	2300      	movs	r3, #0
 8002808:	61fb      	str	r3, [r7, #28]
 800280a:	e177      	b.n	8002afc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800280c:	2201      	movs	r2, #1
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	697a      	ldr	r2, [r7, #20]
 800281c:	4013      	ands	r3, r2
 800281e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002820:	693a      	ldr	r2, [r7, #16]
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	429a      	cmp	r2, r3
 8002826:	f040 8166 	bne.w	8002af6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f003 0303 	and.w	r3, r3, #3
 8002832:	2b01      	cmp	r3, #1
 8002834:	d005      	beq.n	8002842 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800283e:	2b02      	cmp	r3, #2
 8002840:	d130      	bne.n	80028a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	2203      	movs	r2, #3
 800284e:	fa02 f303 	lsl.w	r3, r2, r3
 8002852:	43db      	mvns	r3, r3
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	4013      	ands	r3, r2
 8002858:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	68da      	ldr	r2, [r3, #12]
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	fa02 f303 	lsl.w	r3, r2, r3
 8002866:	69ba      	ldr	r2, [r7, #24]
 8002868:	4313      	orrs	r3, r2
 800286a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	69ba      	ldr	r2, [r7, #24]
 8002870:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002878:	2201      	movs	r2, #1
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	fa02 f303 	lsl.w	r3, r2, r3
 8002880:	43db      	mvns	r3, r3
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	4013      	ands	r3, r2
 8002886:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	091b      	lsrs	r3, r3, #4
 800288e:	f003 0201 	and.w	r2, r3, #1
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	4313      	orrs	r3, r2
 800289c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f003 0303 	and.w	r3, r3, #3
 80028ac:	2b03      	cmp	r3, #3
 80028ae:	d017      	beq.n	80028e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	2203      	movs	r2, #3
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	43db      	mvns	r3, r3
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	4013      	ands	r3, r2
 80028c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	689a      	ldr	r2, [r3, #8]
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f003 0303 	and.w	r3, r3, #3
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d123      	bne.n	8002934 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	08da      	lsrs	r2, r3, #3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	3208      	adds	r2, #8
 80028f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	f003 0307 	and.w	r3, r3, #7
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	220f      	movs	r2, #15
 8002904:	fa02 f303 	lsl.w	r3, r2, r3
 8002908:	43db      	mvns	r3, r3
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	4013      	ands	r3, r2
 800290e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	691a      	ldr	r2, [r3, #16]
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	f003 0307 	and.w	r3, r3, #7
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	fa02 f303 	lsl.w	r3, r2, r3
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	4313      	orrs	r3, r2
 8002924:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	08da      	lsrs	r2, r3, #3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	3208      	adds	r2, #8
 800292e:	69b9      	ldr	r1, [r7, #24]
 8002930:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	2203      	movs	r2, #3
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	43db      	mvns	r3, r3
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	4013      	ands	r3, r2
 800294a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f003 0203 	and.w	r2, r3, #3
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	005b      	lsls	r3, r3, #1
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	4313      	orrs	r3, r2
 8002960:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	69ba      	ldr	r2, [r7, #24]
 8002966:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002970:	2b00      	cmp	r3, #0
 8002972:	f000 80c0 	beq.w	8002af6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002976:	2300      	movs	r3, #0
 8002978:	60fb      	str	r3, [r7, #12]
 800297a:	4b66      	ldr	r3, [pc, #408]	; (8002b14 <HAL_GPIO_Init+0x324>)
 800297c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800297e:	4a65      	ldr	r2, [pc, #404]	; (8002b14 <HAL_GPIO_Init+0x324>)
 8002980:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002984:	6453      	str	r3, [r2, #68]	; 0x44
 8002986:	4b63      	ldr	r3, [pc, #396]	; (8002b14 <HAL_GPIO_Init+0x324>)
 8002988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800298e:	60fb      	str	r3, [r7, #12]
 8002990:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002992:	4a61      	ldr	r2, [pc, #388]	; (8002b18 <HAL_GPIO_Init+0x328>)
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	089b      	lsrs	r3, r3, #2
 8002998:	3302      	adds	r3, #2
 800299a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800299e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	f003 0303 	and.w	r3, r3, #3
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	220f      	movs	r2, #15
 80029aa:	fa02 f303 	lsl.w	r3, r2, r3
 80029ae:	43db      	mvns	r3, r3
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	4013      	ands	r3, r2
 80029b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a58      	ldr	r2, [pc, #352]	; (8002b1c <HAL_GPIO_Init+0x32c>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d037      	beq.n	8002a2e <HAL_GPIO_Init+0x23e>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a57      	ldr	r2, [pc, #348]	; (8002b20 <HAL_GPIO_Init+0x330>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d031      	beq.n	8002a2a <HAL_GPIO_Init+0x23a>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a56      	ldr	r2, [pc, #344]	; (8002b24 <HAL_GPIO_Init+0x334>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d02b      	beq.n	8002a26 <HAL_GPIO_Init+0x236>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a55      	ldr	r2, [pc, #340]	; (8002b28 <HAL_GPIO_Init+0x338>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d025      	beq.n	8002a22 <HAL_GPIO_Init+0x232>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a54      	ldr	r2, [pc, #336]	; (8002b2c <HAL_GPIO_Init+0x33c>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d01f      	beq.n	8002a1e <HAL_GPIO_Init+0x22e>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a53      	ldr	r2, [pc, #332]	; (8002b30 <HAL_GPIO_Init+0x340>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d019      	beq.n	8002a1a <HAL_GPIO_Init+0x22a>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a52      	ldr	r2, [pc, #328]	; (8002b34 <HAL_GPIO_Init+0x344>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d013      	beq.n	8002a16 <HAL_GPIO_Init+0x226>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a51      	ldr	r2, [pc, #324]	; (8002b38 <HAL_GPIO_Init+0x348>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d00d      	beq.n	8002a12 <HAL_GPIO_Init+0x222>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a50      	ldr	r2, [pc, #320]	; (8002b3c <HAL_GPIO_Init+0x34c>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d007      	beq.n	8002a0e <HAL_GPIO_Init+0x21e>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a4f      	ldr	r2, [pc, #316]	; (8002b40 <HAL_GPIO_Init+0x350>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d101      	bne.n	8002a0a <HAL_GPIO_Init+0x21a>
 8002a06:	2309      	movs	r3, #9
 8002a08:	e012      	b.n	8002a30 <HAL_GPIO_Init+0x240>
 8002a0a:	230a      	movs	r3, #10
 8002a0c:	e010      	b.n	8002a30 <HAL_GPIO_Init+0x240>
 8002a0e:	2308      	movs	r3, #8
 8002a10:	e00e      	b.n	8002a30 <HAL_GPIO_Init+0x240>
 8002a12:	2307      	movs	r3, #7
 8002a14:	e00c      	b.n	8002a30 <HAL_GPIO_Init+0x240>
 8002a16:	2306      	movs	r3, #6
 8002a18:	e00a      	b.n	8002a30 <HAL_GPIO_Init+0x240>
 8002a1a:	2305      	movs	r3, #5
 8002a1c:	e008      	b.n	8002a30 <HAL_GPIO_Init+0x240>
 8002a1e:	2304      	movs	r3, #4
 8002a20:	e006      	b.n	8002a30 <HAL_GPIO_Init+0x240>
 8002a22:	2303      	movs	r3, #3
 8002a24:	e004      	b.n	8002a30 <HAL_GPIO_Init+0x240>
 8002a26:	2302      	movs	r3, #2
 8002a28:	e002      	b.n	8002a30 <HAL_GPIO_Init+0x240>
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e000      	b.n	8002a30 <HAL_GPIO_Init+0x240>
 8002a2e:	2300      	movs	r3, #0
 8002a30:	69fa      	ldr	r2, [r7, #28]
 8002a32:	f002 0203 	and.w	r2, r2, #3
 8002a36:	0092      	lsls	r2, r2, #2
 8002a38:	4093      	lsls	r3, r2
 8002a3a:	69ba      	ldr	r2, [r7, #24]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a40:	4935      	ldr	r1, [pc, #212]	; (8002b18 <HAL_GPIO_Init+0x328>)
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	089b      	lsrs	r3, r3, #2
 8002a46:	3302      	adds	r3, #2
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a4e:	4b3d      	ldr	r3, [pc, #244]	; (8002b44 <HAL_GPIO_Init+0x354>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	43db      	mvns	r3, r3
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d003      	beq.n	8002a72 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002a6a:	69ba      	ldr	r2, [r7, #24]
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a72:	4a34      	ldr	r2, [pc, #208]	; (8002b44 <HAL_GPIO_Init+0x354>)
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a78:	4b32      	ldr	r3, [pc, #200]	; (8002b44 <HAL_GPIO_Init+0x354>)
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	43db      	mvns	r3, r3
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	4013      	ands	r3, r2
 8002a86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d003      	beq.n	8002a9c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a9c:	4a29      	ldr	r2, [pc, #164]	; (8002b44 <HAL_GPIO_Init+0x354>)
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002aa2:	4b28      	ldr	r3, [pc, #160]	; (8002b44 <HAL_GPIO_Init+0x354>)
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	43db      	mvns	r3, r3
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	4013      	ands	r3, r2
 8002ab0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d003      	beq.n	8002ac6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002abe:	69ba      	ldr	r2, [r7, #24]
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ac6:	4a1f      	ldr	r2, [pc, #124]	; (8002b44 <HAL_GPIO_Init+0x354>)
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002acc:	4b1d      	ldr	r3, [pc, #116]	; (8002b44 <HAL_GPIO_Init+0x354>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	43db      	mvns	r3, r3
 8002ad6:	69ba      	ldr	r2, [r7, #24]
 8002ad8:	4013      	ands	r3, r2
 8002ada:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d003      	beq.n	8002af0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002af0:	4a14      	ldr	r2, [pc, #80]	; (8002b44 <HAL_GPIO_Init+0x354>)
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	3301      	adds	r3, #1
 8002afa:	61fb      	str	r3, [r7, #28]
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	2b0f      	cmp	r3, #15
 8002b00:	f67f ae84 	bls.w	800280c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b04:	bf00      	nop
 8002b06:	bf00      	nop
 8002b08:	3724      	adds	r7, #36	; 0x24
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop
 8002b14:	40023800 	.word	0x40023800
 8002b18:	40013800 	.word	0x40013800
 8002b1c:	40020000 	.word	0x40020000
 8002b20:	40020400 	.word	0x40020400
 8002b24:	40020800 	.word	0x40020800
 8002b28:	40020c00 	.word	0x40020c00
 8002b2c:	40021000 	.word	0x40021000
 8002b30:	40021400 	.word	0x40021400
 8002b34:	40021800 	.word	0x40021800
 8002b38:	40021c00 	.word	0x40021c00
 8002b3c:	40022000 	.word	0x40022000
 8002b40:	40022400 	.word	0x40022400
 8002b44:	40013c00 	.word	0x40013c00

08002b48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	460b      	mov	r3, r1
 8002b52:	807b      	strh	r3, [r7, #2]
 8002b54:	4613      	mov	r3, r2
 8002b56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b58:	787b      	ldrb	r3, [r7, #1]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d003      	beq.n	8002b66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b5e:	887a      	ldrh	r2, [r7, #2]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b64:	e003      	b.n	8002b6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b66:	887b      	ldrh	r3, [r7, #2]
 8002b68:	041a      	lsls	r2, r3, #16
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	619a      	str	r2, [r3, #24]
}
 8002b6e:	bf00      	nop
 8002b70:	370c      	adds	r7, #12
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr

08002b7a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	b085      	sub	sp, #20
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
 8002b82:	460b      	mov	r3, r1
 8002b84:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	695b      	ldr	r3, [r3, #20]
 8002b8a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b8c:	887a      	ldrh	r2, [r7, #2]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	4013      	ands	r3, r2
 8002b92:	041a      	lsls	r2, r3, #16
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	43d9      	mvns	r1, r3
 8002b98:	887b      	ldrh	r3, [r7, #2]
 8002b9a:	400b      	ands	r3, r1
 8002b9c:	431a      	orrs	r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	619a      	str	r2, [r3, #24]
}
 8002ba2:	bf00      	nop
 8002ba4:	3714      	adds	r7, #20
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr

08002bae <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002bae:	b580      	push	{r7, lr}
 8002bb0:	b086      	sub	sp, #24
 8002bb2:	af02      	add	r7, sp, #8
 8002bb4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d101      	bne.n	8002bc0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e101      	b.n	8002dc4 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d106      	bne.n	8002be0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f008 fde0 	bl	800b7a0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2203      	movs	r2, #3
 8002be4:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bee:	d102      	bne.n	8002bf6 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f003 fef9 	bl	80069f2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6818      	ldr	r0, [r3, #0]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	7c1a      	ldrb	r2, [r3, #16]
 8002c08:	f88d 2000 	strb.w	r2, [sp]
 8002c0c:	3304      	adds	r3, #4
 8002c0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c10:	f003 fdd8 	bl	80067c4 <USB_CoreInit>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d005      	beq.n	8002c26 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2202      	movs	r2, #2
 8002c1e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e0ce      	b.n	8002dc4 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2100      	movs	r1, #0
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f003 fef1 	bl	8006a14 <USB_SetCurrentMode>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d005      	beq.n	8002c44 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e0bf      	b.n	8002dc4 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c44:	2300      	movs	r3, #0
 8002c46:	73fb      	strb	r3, [r7, #15]
 8002c48:	e04a      	b.n	8002ce0 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c4a:	7bfa      	ldrb	r2, [r7, #15]
 8002c4c:	6879      	ldr	r1, [r7, #4]
 8002c4e:	4613      	mov	r3, r2
 8002c50:	00db      	lsls	r3, r3, #3
 8002c52:	4413      	add	r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	440b      	add	r3, r1
 8002c58:	3315      	adds	r3, #21
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c5e:	7bfa      	ldrb	r2, [r7, #15]
 8002c60:	6879      	ldr	r1, [r7, #4]
 8002c62:	4613      	mov	r3, r2
 8002c64:	00db      	lsls	r3, r3, #3
 8002c66:	4413      	add	r3, r2
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	440b      	add	r3, r1
 8002c6c:	3314      	adds	r3, #20
 8002c6e:	7bfa      	ldrb	r2, [r7, #15]
 8002c70:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002c72:	7bfa      	ldrb	r2, [r7, #15]
 8002c74:	7bfb      	ldrb	r3, [r7, #15]
 8002c76:	b298      	uxth	r0, r3
 8002c78:	6879      	ldr	r1, [r7, #4]
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	00db      	lsls	r3, r3, #3
 8002c7e:	4413      	add	r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	440b      	add	r3, r1
 8002c84:	332e      	adds	r3, #46	; 0x2e
 8002c86:	4602      	mov	r2, r0
 8002c88:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c8a:	7bfa      	ldrb	r2, [r7, #15]
 8002c8c:	6879      	ldr	r1, [r7, #4]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	00db      	lsls	r3, r3, #3
 8002c92:	4413      	add	r3, r2
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	440b      	add	r3, r1
 8002c98:	3318      	adds	r3, #24
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c9e:	7bfa      	ldrb	r2, [r7, #15]
 8002ca0:	6879      	ldr	r1, [r7, #4]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	00db      	lsls	r3, r3, #3
 8002ca6:	4413      	add	r3, r2
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	440b      	add	r3, r1
 8002cac:	331c      	adds	r3, #28
 8002cae:	2200      	movs	r2, #0
 8002cb0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002cb2:	7bfa      	ldrb	r2, [r7, #15]
 8002cb4:	6879      	ldr	r1, [r7, #4]
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	00db      	lsls	r3, r3, #3
 8002cba:	4413      	add	r3, r2
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	440b      	add	r3, r1
 8002cc0:	3320      	adds	r3, #32
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002cc6:	7bfa      	ldrb	r2, [r7, #15]
 8002cc8:	6879      	ldr	r1, [r7, #4]
 8002cca:	4613      	mov	r3, r2
 8002ccc:	00db      	lsls	r3, r3, #3
 8002cce:	4413      	add	r3, r2
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	440b      	add	r3, r1
 8002cd4:	3324      	adds	r3, #36	; 0x24
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cda:	7bfb      	ldrb	r3, [r7, #15]
 8002cdc:	3301      	adds	r3, #1
 8002cde:	73fb      	strb	r3, [r7, #15]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	791b      	ldrb	r3, [r3, #4]
 8002ce4:	7bfa      	ldrb	r2, [r7, #15]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d3af      	bcc.n	8002c4a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cea:	2300      	movs	r3, #0
 8002cec:	73fb      	strb	r3, [r7, #15]
 8002cee:	e044      	b.n	8002d7a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002cf0:	7bfa      	ldrb	r2, [r7, #15]
 8002cf2:	6879      	ldr	r1, [r7, #4]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	00db      	lsls	r3, r3, #3
 8002cf8:	4413      	add	r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	440b      	add	r3, r1
 8002cfe:	f203 2355 	addw	r3, r3, #597	; 0x255
 8002d02:	2200      	movs	r2, #0
 8002d04:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d06:	7bfa      	ldrb	r2, [r7, #15]
 8002d08:	6879      	ldr	r1, [r7, #4]
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	00db      	lsls	r3, r3, #3
 8002d0e:	4413      	add	r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	440b      	add	r3, r1
 8002d14:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8002d18:	7bfa      	ldrb	r2, [r7, #15]
 8002d1a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002d1c:	7bfa      	ldrb	r2, [r7, #15]
 8002d1e:	6879      	ldr	r1, [r7, #4]
 8002d20:	4613      	mov	r3, r2
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	4413      	add	r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	440b      	add	r3, r1
 8002d2a:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8002d2e:	2200      	movs	r2, #0
 8002d30:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d32:	7bfa      	ldrb	r2, [r7, #15]
 8002d34:	6879      	ldr	r1, [r7, #4]
 8002d36:	4613      	mov	r3, r2
 8002d38:	00db      	lsls	r3, r3, #3
 8002d3a:	4413      	add	r3, r2
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	440b      	add	r3, r1
 8002d40:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8002d44:	2200      	movs	r2, #0
 8002d46:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d48:	7bfa      	ldrb	r2, [r7, #15]
 8002d4a:	6879      	ldr	r1, [r7, #4]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	00db      	lsls	r3, r3, #3
 8002d50:	4413      	add	r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	440b      	add	r3, r1
 8002d56:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d5e:	7bfa      	ldrb	r2, [r7, #15]
 8002d60:	6879      	ldr	r1, [r7, #4]
 8002d62:	4613      	mov	r3, r2
 8002d64:	00db      	lsls	r3, r3, #3
 8002d66:	4413      	add	r3, r2
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	440b      	add	r3, r1
 8002d6c:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8002d70:	2200      	movs	r2, #0
 8002d72:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d74:	7bfb      	ldrb	r3, [r7, #15]
 8002d76:	3301      	adds	r3, #1
 8002d78:	73fb      	strb	r3, [r7, #15]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	791b      	ldrb	r3, [r3, #4]
 8002d7e:	7bfa      	ldrb	r2, [r7, #15]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d3b5      	bcc.n	8002cf0 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6818      	ldr	r0, [r3, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	7c1a      	ldrb	r2, [r3, #16]
 8002d8c:	f88d 2000 	strb.w	r2, [sp]
 8002d90:	3304      	adds	r3, #4
 8002d92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d94:	f003 fe8a 	bl	8006aac <USB_DevInit>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d005      	beq.n	8002daa <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2202      	movs	r2, #2
 8002da2:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e00c      	b.n	8002dc4 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f004 fece 	bl	8007b5e <USB_DevDisconnect>

  return HAL_OK;
 8002dc2:	2300      	movs	r3, #0
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3710      	adds	r7, #16
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d101      	bne.n	8002de8 <HAL_PCD_Start+0x1c>
 8002de4:	2302      	movs	r3, #2
 8002de6:	e022      	b.n	8002e2e <HAL_PCD_Start+0x62>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d009      	beq.n	8002e10 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d105      	bne.n	8002e10 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e08:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f003 fddb 	bl	80069d0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f004 fe7c 	bl	8007b1c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3710      	adds	r7, #16
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002e36:	b590      	push	{r4, r7, lr}
 8002e38:	b08d      	sub	sp, #52	; 0x34
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e44:	6a3b      	ldr	r3, [r7, #32]
 8002e46:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f004 ff3a 	bl	8007cc6 <USB_GetMode>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	f040 848c 	bne.w	8003772 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f004 fe9e 	bl	8007ba0 <USB_ReadInterrupts>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	f000 8482 	beq.w	8003770 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	0a1b      	lsrs	r3, r3, #8
 8002e76:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f004 fe8b 	bl	8007ba0 <USB_ReadInterrupts>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	f003 0302 	and.w	r3, r3, #2
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d107      	bne.n	8002ea4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	695a      	ldr	r2, [r3, #20]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f002 0202 	and.w	r2, r2, #2
 8002ea2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f004 fe79 	bl	8007ba0 <USB_ReadInterrupts>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	f003 0310 	and.w	r3, r3, #16
 8002eb4:	2b10      	cmp	r3, #16
 8002eb6:	d161      	bne.n	8002f7c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	699a      	ldr	r2, [r3, #24]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f022 0210 	bic.w	r2, r2, #16
 8002ec6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002ec8:	6a3b      	ldr	r3, [r7, #32]
 8002eca:	6a1b      	ldr	r3, [r3, #32]
 8002ecc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	f003 020f 	and.w	r2, r3, #15
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	00db      	lsls	r3, r3, #3
 8002ed8:	4413      	add	r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	3304      	adds	r3, #4
 8002ee6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	0c5b      	lsrs	r3, r3, #17
 8002eec:	f003 030f 	and.w	r3, r3, #15
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d124      	bne.n	8002f3e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002ef4:	69ba      	ldr	r2, [r7, #24]
 8002ef6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002efa:	4013      	ands	r3, r2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d035      	beq.n	8002f6c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	091b      	lsrs	r3, r3, #4
 8002f08:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002f0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	461a      	mov	r2, r3
 8002f12:	6a38      	ldr	r0, [r7, #32]
 8002f14:	f004 fcb0 	bl	8007878 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	68da      	ldr	r2, [r3, #12]
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	091b      	lsrs	r3, r3, #4
 8002f20:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f24:	441a      	add	r2, r3
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	695a      	ldr	r2, [r3, #20]
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	091b      	lsrs	r3, r3, #4
 8002f32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f36:	441a      	add	r2, r3
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	615a      	str	r2, [r3, #20]
 8002f3c:	e016      	b.n	8002f6c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002f3e:	69bb      	ldr	r3, [r7, #24]
 8002f40:	0c5b      	lsrs	r3, r3, #17
 8002f42:	f003 030f 	and.w	r3, r3, #15
 8002f46:	2b06      	cmp	r3, #6
 8002f48:	d110      	bne.n	8002f6c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002f50:	2208      	movs	r2, #8
 8002f52:	4619      	mov	r1, r3
 8002f54:	6a38      	ldr	r0, [r7, #32]
 8002f56:	f004 fc8f 	bl	8007878 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	695a      	ldr	r2, [r3, #20]
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	091b      	lsrs	r3, r3, #4
 8002f62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f66:	441a      	add	r2, r3
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	699a      	ldr	r2, [r3, #24]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f042 0210 	orr.w	r2, r2, #16
 8002f7a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4618      	mov	r0, r3
 8002f82:	f004 fe0d 	bl	8007ba0 <USB_ReadInterrupts>
 8002f86:	4603      	mov	r3, r0
 8002f88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f8c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002f90:	f040 80a7 	bne.w	80030e2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002f94:	2300      	movs	r3, #0
 8002f96:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f004 fe12 	bl	8007bc6 <USB_ReadDevAllOutEpInterrupt>
 8002fa2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002fa4:	e099      	b.n	80030da <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa8:	f003 0301 	and.w	r3, r3, #1
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	f000 808e 	beq.w	80030ce <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fb8:	b2d2      	uxtb	r2, r2
 8002fba:	4611      	mov	r1, r2
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f004 fe36 	bl	8007c2e <USB_ReadDevOutEPInterrupt>
 8002fc2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	f003 0301 	and.w	r3, r3, #1
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d00c      	beq.n	8002fe8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd0:	015a      	lsls	r2, r3, #5
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fda:	461a      	mov	r2, r3
 8002fdc:	2301      	movs	r3, #1
 8002fde:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002fe0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 fea2 	bl	8003d2c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	f003 0308 	and.w	r3, r3, #8
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d00c      	beq.n	800300c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff4:	015a      	lsls	r2, r3, #5
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	4413      	add	r3, r2
 8002ffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ffe:	461a      	mov	r2, r3
 8003000:	2308      	movs	r3, #8
 8003002:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003004:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 ff78 	bl	8003efc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	f003 0310 	and.w	r3, r3, #16
 8003012:	2b00      	cmp	r3, #0
 8003014:	d008      	beq.n	8003028 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003018:	015a      	lsls	r2, r3, #5
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	4413      	add	r3, r2
 800301e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003022:	461a      	mov	r2, r3
 8003024:	2310      	movs	r3, #16
 8003026:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d030      	beq.n	8003094 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003032:	6a3b      	ldr	r3, [r7, #32]
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800303a:	2b80      	cmp	r3, #128	; 0x80
 800303c:	d109      	bne.n	8003052 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	69fa      	ldr	r2, [r7, #28]
 8003048:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800304c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003050:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003052:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003054:	4613      	mov	r3, r2
 8003056:	00db      	lsls	r3, r3, #3
 8003058:	4413      	add	r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	4413      	add	r3, r2
 8003064:	3304      	adds	r3, #4
 8003066:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	78db      	ldrb	r3, [r3, #3]
 800306c:	2b01      	cmp	r3, #1
 800306e:	d108      	bne.n	8003082 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	2200      	movs	r2, #0
 8003074:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003078:	b2db      	uxtb	r3, r3
 800307a:	4619      	mov	r1, r3
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f008 fc95 	bl	800b9ac <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003084:	015a      	lsls	r2, r3, #5
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	4413      	add	r3, r2
 800308a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800308e:	461a      	mov	r2, r3
 8003090:	2302      	movs	r3, #2
 8003092:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	f003 0320 	and.w	r3, r3, #32
 800309a:	2b00      	cmp	r3, #0
 800309c:	d008      	beq.n	80030b0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800309e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a0:	015a      	lsls	r2, r3, #5
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	4413      	add	r3, r2
 80030a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030aa:	461a      	mov	r2, r3
 80030ac:	2320      	movs	r3, #32
 80030ae:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d009      	beq.n	80030ce <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80030ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030bc:	015a      	lsls	r2, r3, #5
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	4413      	add	r3, r2
 80030c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030c6:	461a      	mov	r2, r3
 80030c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80030cc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80030ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d0:	3301      	adds	r3, #1
 80030d2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80030d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d6:	085b      	lsrs	r3, r3, #1
 80030d8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80030da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030dc:	2b00      	cmp	r3, #0
 80030de:	f47f af62 	bne.w	8002fa6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4618      	mov	r0, r3
 80030e8:	f004 fd5a 	bl	8007ba0 <USB_ReadInterrupts>
 80030ec:	4603      	mov	r3, r0
 80030ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80030f6:	f040 80db 	bne.w	80032b0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4618      	mov	r0, r3
 8003100:	f004 fd7b 	bl	8007bfa <USB_ReadDevAllInEpInterrupt>
 8003104:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003106:	2300      	movs	r3, #0
 8003108:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800310a:	e0cd      	b.n	80032a8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800310c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800310e:	f003 0301 	and.w	r3, r3, #1
 8003112:	2b00      	cmp	r3, #0
 8003114:	f000 80c2 	beq.w	800329c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800311e:	b2d2      	uxtb	r2, r2
 8003120:	4611      	mov	r1, r2
 8003122:	4618      	mov	r0, r3
 8003124:	f004 fda1 	bl	8007c6a <USB_ReadDevInEPInterrupt>
 8003128:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	f003 0301 	and.w	r3, r3, #1
 8003130:	2b00      	cmp	r3, #0
 8003132:	d057      	beq.n	80031e4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003136:	f003 030f 	and.w	r3, r3, #15
 800313a:	2201      	movs	r2, #1
 800313c:	fa02 f303 	lsl.w	r3, r2, r3
 8003140:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003148:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	43db      	mvns	r3, r3
 800314e:	69f9      	ldr	r1, [r7, #28]
 8003150:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003154:	4013      	ands	r3, r2
 8003156:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315a:	015a      	lsls	r2, r3, #5
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	4413      	add	r3, r2
 8003160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003164:	461a      	mov	r2, r3
 8003166:	2301      	movs	r3, #1
 8003168:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	799b      	ldrb	r3, [r3, #6]
 800316e:	2b01      	cmp	r3, #1
 8003170:	d132      	bne.n	80031d8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003172:	6879      	ldr	r1, [r7, #4]
 8003174:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003176:	4613      	mov	r3, r2
 8003178:	00db      	lsls	r3, r3, #3
 800317a:	4413      	add	r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	440b      	add	r3, r1
 8003180:	3320      	adds	r3, #32
 8003182:	6819      	ldr	r1, [r3, #0]
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003188:	4613      	mov	r3, r2
 800318a:	00db      	lsls	r3, r3, #3
 800318c:	4413      	add	r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	4403      	add	r3, r0
 8003192:	331c      	adds	r3, #28
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4419      	add	r1, r3
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800319c:	4613      	mov	r3, r2
 800319e:	00db      	lsls	r3, r3, #3
 80031a0:	4413      	add	r3, r2
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	4403      	add	r3, r0
 80031a6:	3320      	adds	r3, #32
 80031a8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80031aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d113      	bne.n	80031d8 <HAL_PCD_IRQHandler+0x3a2>
 80031b0:	6879      	ldr	r1, [r7, #4]
 80031b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031b4:	4613      	mov	r3, r2
 80031b6:	00db      	lsls	r3, r3, #3
 80031b8:	4413      	add	r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	440b      	add	r3, r1
 80031be:	3324      	adds	r3, #36	; 0x24
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d108      	bne.n	80031d8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6818      	ldr	r0, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80031d0:	461a      	mov	r2, r3
 80031d2:	2101      	movs	r1, #1
 80031d4:	f004 fda8 	bl	8007d28 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80031d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	4619      	mov	r1, r3
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f008 fb5f 	bl	800b8a2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	f003 0308 	and.w	r3, r3, #8
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d008      	beq.n	8003200 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80031ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f0:	015a      	lsls	r2, r3, #5
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	4413      	add	r3, r2
 80031f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031fa:	461a      	mov	r2, r3
 80031fc:	2308      	movs	r3, #8
 80031fe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	f003 0310 	and.w	r3, r3, #16
 8003206:	2b00      	cmp	r3, #0
 8003208:	d008      	beq.n	800321c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800320a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320c:	015a      	lsls	r2, r3, #5
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	4413      	add	r3, r2
 8003212:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003216:	461a      	mov	r2, r3
 8003218:	2310      	movs	r3, #16
 800321a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003222:	2b00      	cmp	r3, #0
 8003224:	d008      	beq.n	8003238 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003228:	015a      	lsls	r2, r3, #5
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	4413      	add	r3, r2
 800322e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003232:	461a      	mov	r2, r3
 8003234:	2340      	movs	r3, #64	; 0x40
 8003236:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d023      	beq.n	800328a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003242:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003244:	6a38      	ldr	r0, [r7, #32]
 8003246:	f003 fd95 	bl	8006d74 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800324a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800324c:	4613      	mov	r3, r2
 800324e:	00db      	lsls	r3, r3, #3
 8003250:	4413      	add	r3, r2
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	3310      	adds	r3, #16
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	4413      	add	r3, r2
 800325a:	3304      	adds	r3, #4
 800325c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	78db      	ldrb	r3, [r3, #3]
 8003262:	2b01      	cmp	r3, #1
 8003264:	d108      	bne.n	8003278 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	2200      	movs	r2, #0
 800326a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800326c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326e:	b2db      	uxtb	r3, r3
 8003270:	4619      	mov	r1, r3
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f008 fbac 	bl	800b9d0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327a:	015a      	lsls	r2, r3, #5
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	4413      	add	r3, r2
 8003280:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003284:	461a      	mov	r2, r3
 8003286:	2302      	movs	r3, #2
 8003288:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003290:	2b00      	cmp	r3, #0
 8003292:	d003      	beq.n	800329c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003294:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 fcbb 	bl	8003c12 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800329c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329e:	3301      	adds	r3, #1
 80032a0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80032a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a4:	085b      	lsrs	r3, r3, #1
 80032a6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80032a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	f47f af2e 	bne.w	800310c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f004 fc73 	bl	8007ba0 <USB_ReadInterrupts>
 80032ba:	4603      	mov	r3, r0
 80032bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80032c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80032c4:	d122      	bne.n	800330c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	69fa      	ldr	r2, [r7, #28]
 80032d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032d4:	f023 0301 	bic.w	r3, r3, #1
 80032d8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d108      	bne.n	80032f6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80032ec:	2100      	movs	r1, #0
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f000 fea2 	bl	8004038 <HAL_PCDEx_LPM_Callback>
 80032f4:	e002      	b.n	80032fc <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f008 fb4a 	bl	800b990 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	695a      	ldr	r2, [r3, #20]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800330a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4618      	mov	r0, r3
 8003312:	f004 fc45 	bl	8007ba0 <USB_ReadInterrupts>
 8003316:	4603      	mov	r3, r0
 8003318:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800331c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003320:	d112      	bne.n	8003348 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	2b01      	cmp	r3, #1
 8003330:	d102      	bne.n	8003338 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f008 fb06 	bl	800b944 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	695a      	ldr	r2, [r3, #20]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003346:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4618      	mov	r0, r3
 800334e:	f004 fc27 	bl	8007ba0 <USB_ReadInterrupts>
 8003352:	4603      	mov	r3, r0
 8003354:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003358:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800335c:	f040 80b7 	bne.w	80034ce <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	69fa      	ldr	r2, [r7, #28]
 800336a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800336e:	f023 0301 	bic.w	r3, r3, #1
 8003372:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2110      	movs	r1, #16
 800337a:	4618      	mov	r0, r3
 800337c:	f003 fcfa 	bl	8006d74 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003380:	2300      	movs	r3, #0
 8003382:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003384:	e046      	b.n	8003414 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003388:	015a      	lsls	r2, r3, #5
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	4413      	add	r3, r2
 800338e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003392:	461a      	mov	r2, r3
 8003394:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003398:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800339a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800339c:	015a      	lsls	r2, r3, #5
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	4413      	add	r3, r2
 80033a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033aa:	0151      	lsls	r1, r2, #5
 80033ac:	69fa      	ldr	r2, [r7, #28]
 80033ae:	440a      	add	r2, r1
 80033b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80033b4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80033b8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80033ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033bc:	015a      	lsls	r2, r3, #5
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	4413      	add	r3, r2
 80033c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033c6:	461a      	mov	r2, r3
 80033c8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80033cc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80033ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033d0:	015a      	lsls	r2, r3, #5
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	4413      	add	r3, r2
 80033d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033de:	0151      	lsls	r1, r2, #5
 80033e0:	69fa      	ldr	r2, [r7, #28]
 80033e2:	440a      	add	r2, r1
 80033e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80033e8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80033ec:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80033ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033f0:	015a      	lsls	r2, r3, #5
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	4413      	add	r3, r2
 80033f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033fe:	0151      	lsls	r1, r2, #5
 8003400:	69fa      	ldr	r2, [r7, #28]
 8003402:	440a      	add	r2, r1
 8003404:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003408:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800340c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800340e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003410:	3301      	adds	r3, #1
 8003412:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	791b      	ldrb	r3, [r3, #4]
 8003418:	461a      	mov	r2, r3
 800341a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800341c:	4293      	cmp	r3, r2
 800341e:	d3b2      	bcc.n	8003386 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003426:	69db      	ldr	r3, [r3, #28]
 8003428:	69fa      	ldr	r2, [r7, #28]
 800342a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800342e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003432:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	7bdb      	ldrb	r3, [r3, #15]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d016      	beq.n	800346a <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003442:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003446:	69fa      	ldr	r2, [r7, #28]
 8003448:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800344c:	f043 030b 	orr.w	r3, r3, #11
 8003450:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800345a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800345c:	69fa      	ldr	r2, [r7, #28]
 800345e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003462:	f043 030b 	orr.w	r3, r3, #11
 8003466:	6453      	str	r3, [r2, #68]	; 0x44
 8003468:	e015      	b.n	8003496 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003470:	695b      	ldr	r3, [r3, #20]
 8003472:	69fa      	ldr	r2, [r7, #28]
 8003474:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003478:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800347c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003480:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	69fa      	ldr	r2, [r7, #28]
 800348c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003490:	f043 030b 	orr.w	r3, r3, #11
 8003494:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	69fa      	ldr	r2, [r7, #28]
 80034a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034a4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80034a8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6818      	ldr	r0, [r3, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80034b8:	461a      	mov	r2, r3
 80034ba:	f004 fc35 	bl	8007d28 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	695a      	ldr	r2, [r3, #20]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80034cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4618      	mov	r0, r3
 80034d4:	f004 fb64 	bl	8007ba0 <USB_ReadInterrupts>
 80034d8:	4603      	mov	r3, r0
 80034da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034e2:	d123      	bne.n	800352c <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4618      	mov	r0, r3
 80034ea:	f004 fbfa 	bl	8007ce2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4618      	mov	r0, r3
 80034f4:	f003 fcb7 	bl	8006e66 <USB_GetDevSpeed>
 80034f8:	4603      	mov	r3, r0
 80034fa:	461a      	mov	r2, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681c      	ldr	r4, [r3, #0]
 8003504:	f001 f9c8 	bl	8004898 <HAL_RCC_GetHCLKFreq>
 8003508:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800350e:	461a      	mov	r2, r3
 8003510:	4620      	mov	r0, r4
 8003512:	f003 f9bb 	bl	800688c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f008 f9eb 	bl	800b8f2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	695a      	ldr	r2, [r3, #20]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800352a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4618      	mov	r0, r3
 8003532:	f004 fb35 	bl	8007ba0 <USB_ReadInterrupts>
 8003536:	4603      	mov	r3, r0
 8003538:	f003 0308 	and.w	r3, r3, #8
 800353c:	2b08      	cmp	r3, #8
 800353e:	d10a      	bne.n	8003556 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f008 f9c8 	bl	800b8d6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	695a      	ldr	r2, [r3, #20]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f002 0208 	and.w	r2, r2, #8
 8003554:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4618      	mov	r0, r3
 800355c:	f004 fb20 	bl	8007ba0 <USB_ReadInterrupts>
 8003560:	4603      	mov	r3, r0
 8003562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003566:	2b80      	cmp	r3, #128	; 0x80
 8003568:	d123      	bne.n	80035b2 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800356a:	6a3b      	ldr	r3, [r7, #32]
 800356c:	699b      	ldr	r3, [r3, #24]
 800356e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003572:	6a3b      	ldr	r3, [r7, #32]
 8003574:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003576:	2301      	movs	r3, #1
 8003578:	627b      	str	r3, [r7, #36]	; 0x24
 800357a:	e014      	b.n	80035a6 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800357c:	6879      	ldr	r1, [r7, #4]
 800357e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003580:	4613      	mov	r3, r2
 8003582:	00db      	lsls	r3, r3, #3
 8003584:	4413      	add	r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	440b      	add	r3, r1
 800358a:	f203 2357 	addw	r3, r3, #599	; 0x257
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	2b01      	cmp	r3, #1
 8003592:	d105      	bne.n	80035a0 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003596:	b2db      	uxtb	r3, r3
 8003598:	4619      	mov	r1, r3
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f000 fb08 	bl	8003bb0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80035a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a2:	3301      	adds	r3, #1
 80035a4:	627b      	str	r3, [r7, #36]	; 0x24
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	791b      	ldrb	r3, [r3, #4]
 80035aa:	461a      	mov	r2, r3
 80035ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d3e4      	bcc.n	800357c <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4618      	mov	r0, r3
 80035b8:	f004 faf2 	bl	8007ba0 <USB_ReadInterrupts>
 80035bc:	4603      	mov	r3, r0
 80035be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035c6:	d13c      	bne.n	8003642 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80035c8:	2301      	movs	r3, #1
 80035ca:	627b      	str	r3, [r7, #36]	; 0x24
 80035cc:	e02b      	b.n	8003626 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80035ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d0:	015a      	lsls	r2, r3, #5
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	4413      	add	r3, r2
 80035d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80035de:	6879      	ldr	r1, [r7, #4]
 80035e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035e2:	4613      	mov	r3, r2
 80035e4:	00db      	lsls	r3, r3, #3
 80035e6:	4413      	add	r3, r2
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	440b      	add	r3, r1
 80035ec:	3318      	adds	r3, #24
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d115      	bne.n	8003620 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80035f4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	da12      	bge.n	8003620 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80035fa:	6879      	ldr	r1, [r7, #4]
 80035fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035fe:	4613      	mov	r3, r2
 8003600:	00db      	lsls	r3, r3, #3
 8003602:	4413      	add	r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	440b      	add	r3, r1
 8003608:	3317      	adds	r3, #23
 800360a:	2201      	movs	r2, #1
 800360c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800360e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003610:	b2db      	uxtb	r3, r3
 8003612:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003616:	b2db      	uxtb	r3, r3
 8003618:	4619      	mov	r1, r3
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f000 fac8 	bl	8003bb0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003622:	3301      	adds	r3, #1
 8003624:	627b      	str	r3, [r7, #36]	; 0x24
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	791b      	ldrb	r3, [r3, #4]
 800362a:	461a      	mov	r2, r3
 800362c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362e:	4293      	cmp	r3, r2
 8003630:	d3cd      	bcc.n	80035ce <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	695a      	ldr	r2, [r3, #20]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003640:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4618      	mov	r0, r3
 8003648:	f004 faaa 	bl	8007ba0 <USB_ReadInterrupts>
 800364c:	4603      	mov	r3, r0
 800364e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003652:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003656:	d156      	bne.n	8003706 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003658:	2301      	movs	r3, #1
 800365a:	627b      	str	r3, [r7, #36]	; 0x24
 800365c:	e045      	b.n	80036ea <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800365e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003660:	015a      	lsls	r2, r3, #5
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	4413      	add	r3, r2
 8003666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800366e:	6879      	ldr	r1, [r7, #4]
 8003670:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003672:	4613      	mov	r3, r2
 8003674:	00db      	lsls	r3, r3, #3
 8003676:	4413      	add	r3, r2
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	440b      	add	r3, r1
 800367c:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	2b01      	cmp	r3, #1
 8003684:	d12e      	bne.n	80036e4 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003686:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003688:	2b00      	cmp	r3, #0
 800368a:	da2b      	bge.n	80036e4 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8003698:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800369c:	429a      	cmp	r2, r3
 800369e:	d121      	bne.n	80036e4 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80036a0:	6879      	ldr	r1, [r7, #4]
 80036a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036a4:	4613      	mov	r3, r2
 80036a6:	00db      	lsls	r3, r3, #3
 80036a8:	4413      	add	r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	440b      	add	r3, r1
 80036ae:	f203 2357 	addw	r3, r3, #599	; 0x257
 80036b2:	2201      	movs	r2, #1
 80036b4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80036b6:	6a3b      	ldr	r3, [r7, #32]
 80036b8:	699b      	ldr	r3, [r3, #24]
 80036ba:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80036be:	6a3b      	ldr	r3, [r7, #32]
 80036c0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80036c2:	6a3b      	ldr	r3, [r7, #32]
 80036c4:	695b      	ldr	r3, [r3, #20]
 80036c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d10a      	bne.n	80036e4 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	69fa      	ldr	r2, [r7, #28]
 80036d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036e0:	6053      	str	r3, [r2, #4]
            break;
 80036e2:	e008      	b.n	80036f6 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80036e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e6:	3301      	adds	r3, #1
 80036e8:	627b      	str	r3, [r7, #36]	; 0x24
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	791b      	ldrb	r3, [r3, #4]
 80036ee:	461a      	mov	r2, r3
 80036f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d3b3      	bcc.n	800365e <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	695a      	ldr	r2, [r3, #20]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003704:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4618      	mov	r0, r3
 800370c:	f004 fa48 	bl	8007ba0 <USB_ReadInterrupts>
 8003710:	4603      	mov	r3, r0
 8003712:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003716:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800371a:	d10a      	bne.n	8003732 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f008 f969 	bl	800b9f4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	695a      	ldr	r2, [r3, #20]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003730:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4618      	mov	r0, r3
 8003738:	f004 fa32 	bl	8007ba0 <USB_ReadInterrupts>
 800373c:	4603      	mov	r3, r0
 800373e:	f003 0304 	and.w	r3, r3, #4
 8003742:	2b04      	cmp	r3, #4
 8003744:	d115      	bne.n	8003772 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	f003 0304 	and.w	r3, r3, #4
 8003754:	2b00      	cmp	r3, #0
 8003756:	d002      	beq.n	800375e <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f008 f959 	bl	800ba10 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	6859      	ldr	r1, [r3, #4]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	430a      	orrs	r2, r1
 800376c:	605a      	str	r2, [r3, #4]
 800376e:	e000      	b.n	8003772 <HAL_PCD_IRQHandler+0x93c>
      return;
 8003770:	bf00      	nop
    }
  }
}
 8003772:	3734      	adds	r7, #52	; 0x34
 8003774:	46bd      	mov	sp, r7
 8003776:	bd90      	pop	{r4, r7, pc}

08003778 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	460b      	mov	r3, r1
 8003782:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800378a:	2b01      	cmp	r3, #1
 800378c:	d101      	bne.n	8003792 <HAL_PCD_SetAddress+0x1a>
 800378e:	2302      	movs	r3, #2
 8003790:	e012      	b.n	80037b8 <HAL_PCD_SetAddress+0x40>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2201      	movs	r2, #1
 8003796:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	78fa      	ldrb	r2, [r7, #3]
 800379e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	78fa      	ldrb	r2, [r7, #3]
 80037a6:	4611      	mov	r1, r2
 80037a8:	4618      	mov	r0, r3
 80037aa:	f004 f991 	bl	8007ad0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80037b6:	2300      	movs	r3, #0
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3708      	adds	r7, #8
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	4608      	mov	r0, r1
 80037ca:	4611      	mov	r1, r2
 80037cc:	461a      	mov	r2, r3
 80037ce:	4603      	mov	r3, r0
 80037d0:	70fb      	strb	r3, [r7, #3]
 80037d2:	460b      	mov	r3, r1
 80037d4:	803b      	strh	r3, [r7, #0]
 80037d6:	4613      	mov	r3, r2
 80037d8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80037da:	2300      	movs	r3, #0
 80037dc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80037de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	da0f      	bge.n	8003806 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037e6:	78fb      	ldrb	r3, [r7, #3]
 80037e8:	f003 020f 	and.w	r2, r3, #15
 80037ec:	4613      	mov	r3, r2
 80037ee:	00db      	lsls	r3, r3, #3
 80037f0:	4413      	add	r3, r2
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	3310      	adds	r3, #16
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	4413      	add	r3, r2
 80037fa:	3304      	adds	r3, #4
 80037fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2201      	movs	r2, #1
 8003802:	705a      	strb	r2, [r3, #1]
 8003804:	e00f      	b.n	8003826 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003806:	78fb      	ldrb	r3, [r7, #3]
 8003808:	f003 020f 	and.w	r2, r3, #15
 800380c:	4613      	mov	r3, r2
 800380e:	00db      	lsls	r3, r3, #3
 8003810:	4413      	add	r3, r2
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	4413      	add	r3, r2
 800381c:	3304      	adds	r3, #4
 800381e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2200      	movs	r2, #0
 8003824:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003826:	78fb      	ldrb	r3, [r7, #3]
 8003828:	f003 030f 	and.w	r3, r3, #15
 800382c:	b2da      	uxtb	r2, r3
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003832:	883a      	ldrh	r2, [r7, #0]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	78ba      	ldrb	r2, [r7, #2]
 800383c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	785b      	ldrb	r3, [r3, #1]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d004      	beq.n	8003850 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	b29a      	uxth	r2, r3
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003850:	78bb      	ldrb	r3, [r7, #2]
 8003852:	2b02      	cmp	r3, #2
 8003854:	d102      	bne.n	800385c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2200      	movs	r2, #0
 800385a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003862:	2b01      	cmp	r3, #1
 8003864:	d101      	bne.n	800386a <HAL_PCD_EP_Open+0xaa>
 8003866:	2302      	movs	r3, #2
 8003868:	e00e      	b.n	8003888 <HAL_PCD_EP_Open+0xc8>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68f9      	ldr	r1, [r7, #12]
 8003878:	4618      	mov	r0, r3
 800387a:	f003 fb19 	bl	8006eb0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8003886:	7afb      	ldrb	r3, [r7, #11]
}
 8003888:	4618      	mov	r0, r3
 800388a:	3710      	adds	r7, #16
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	460b      	mov	r3, r1
 800389a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800389c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	da0f      	bge.n	80038c4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038a4:	78fb      	ldrb	r3, [r7, #3]
 80038a6:	f003 020f 	and.w	r2, r3, #15
 80038aa:	4613      	mov	r3, r2
 80038ac:	00db      	lsls	r3, r3, #3
 80038ae:	4413      	add	r3, r2
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	3310      	adds	r3, #16
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	4413      	add	r3, r2
 80038b8:	3304      	adds	r3, #4
 80038ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2201      	movs	r2, #1
 80038c0:	705a      	strb	r2, [r3, #1]
 80038c2:	e00f      	b.n	80038e4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038c4:	78fb      	ldrb	r3, [r7, #3]
 80038c6:	f003 020f 	and.w	r2, r3, #15
 80038ca:	4613      	mov	r3, r2
 80038cc:	00db      	lsls	r3, r3, #3
 80038ce:	4413      	add	r3, r2
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	4413      	add	r3, r2
 80038da:	3304      	adds	r3, #4
 80038dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2200      	movs	r2, #0
 80038e2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80038e4:	78fb      	ldrb	r3, [r7, #3]
 80038e6:	f003 030f 	and.w	r3, r3, #15
 80038ea:	b2da      	uxtb	r2, r3
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d101      	bne.n	80038fe <HAL_PCD_EP_Close+0x6e>
 80038fa:	2302      	movs	r3, #2
 80038fc:	e00e      	b.n	800391c <HAL_PCD_EP_Close+0x8c>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2201      	movs	r2, #1
 8003902:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68f9      	ldr	r1, [r7, #12]
 800390c:	4618      	mov	r0, r3
 800390e:	f003 fb57 	bl	8006fc0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 800391a:	2300      	movs	r3, #0
}
 800391c:	4618      	mov	r0, r3
 800391e:	3710      	adds	r7, #16
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}

08003924 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b086      	sub	sp, #24
 8003928:	af00      	add	r7, sp, #0
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	607a      	str	r2, [r7, #4]
 800392e:	603b      	str	r3, [r7, #0]
 8003930:	460b      	mov	r3, r1
 8003932:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003934:	7afb      	ldrb	r3, [r7, #11]
 8003936:	f003 020f 	and.w	r2, r3, #15
 800393a:	4613      	mov	r3, r2
 800393c:	00db      	lsls	r3, r3, #3
 800393e:	4413      	add	r3, r2
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	4413      	add	r3, r2
 800394a:	3304      	adds	r3, #4
 800394c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	683a      	ldr	r2, [r7, #0]
 8003958:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	2200      	movs	r2, #0
 800395e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	2200      	movs	r2, #0
 8003964:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003966:	7afb      	ldrb	r3, [r7, #11]
 8003968:	f003 030f 	and.w	r3, r3, #15
 800396c:	b2da      	uxtb	r2, r3
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	799b      	ldrb	r3, [r3, #6]
 8003976:	2b01      	cmp	r3, #1
 8003978:	d102      	bne.n	8003980 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6818      	ldr	r0, [r3, #0]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	799b      	ldrb	r3, [r3, #6]
 8003988:	461a      	mov	r2, r3
 800398a:	6979      	ldr	r1, [r7, #20]
 800398c:	f003 fbf4 	bl	8007178 <USB_EPStartXfer>

  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3718      	adds	r7, #24
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}

0800399a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800399a:	b480      	push	{r7}
 800399c:	b083      	sub	sp, #12
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
 80039a2:	460b      	mov	r3, r1
 80039a4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80039a6:	78fb      	ldrb	r3, [r7, #3]
 80039a8:	f003 020f 	and.w	r2, r3, #15
 80039ac:	6879      	ldr	r1, [r7, #4]
 80039ae:	4613      	mov	r3, r2
 80039b0:	00db      	lsls	r3, r3, #3
 80039b2:	4413      	add	r3, r2
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	440b      	add	r3, r1
 80039b8:	f503 731a 	add.w	r3, r3, #616	; 0x268
 80039bc:	681b      	ldr	r3, [r3, #0]
}
 80039be:	4618      	mov	r0, r3
 80039c0:	370c      	adds	r7, #12
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr

080039ca <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b086      	sub	sp, #24
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	60f8      	str	r0, [r7, #12]
 80039d2:	607a      	str	r2, [r7, #4]
 80039d4:	603b      	str	r3, [r7, #0]
 80039d6:	460b      	mov	r3, r1
 80039d8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039da:	7afb      	ldrb	r3, [r7, #11]
 80039dc:	f003 020f 	and.w	r2, r3, #15
 80039e0:	4613      	mov	r3, r2
 80039e2:	00db      	lsls	r3, r3, #3
 80039e4:	4413      	add	r3, r2
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	3310      	adds	r3, #16
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	4413      	add	r3, r2
 80039ee:	3304      	adds	r3, #4
 80039f0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	683a      	ldr	r2, [r7, #0]
 80039fc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	2200      	movs	r2, #0
 8003a02:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	2201      	movs	r2, #1
 8003a08:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a0a:	7afb      	ldrb	r3, [r7, #11]
 8003a0c:	f003 030f 	and.w	r3, r3, #15
 8003a10:	b2da      	uxtb	r2, r3
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	799b      	ldrb	r3, [r3, #6]
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d102      	bne.n	8003a24 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6818      	ldr	r0, [r3, #0]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	799b      	ldrb	r3, [r3, #6]
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	6979      	ldr	r1, [r7, #20]
 8003a30:	f003 fba2 	bl	8007178 <USB_EPStartXfer>

  return HAL_OK;
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3718      	adds	r7, #24
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}

08003a3e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a3e:	b580      	push	{r7, lr}
 8003a40:	b084      	sub	sp, #16
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
 8003a46:	460b      	mov	r3, r1
 8003a48:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003a4a:	78fb      	ldrb	r3, [r7, #3]
 8003a4c:	f003 030f 	and.w	r3, r3, #15
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	7912      	ldrb	r2, [r2, #4]
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d901      	bls.n	8003a5c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e04f      	b.n	8003afc <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	da0f      	bge.n	8003a84 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a64:	78fb      	ldrb	r3, [r7, #3]
 8003a66:	f003 020f 	and.w	r2, r3, #15
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	00db      	lsls	r3, r3, #3
 8003a6e:	4413      	add	r3, r2
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	3310      	adds	r3, #16
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	4413      	add	r3, r2
 8003a78:	3304      	adds	r3, #4
 8003a7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	705a      	strb	r2, [r3, #1]
 8003a82:	e00d      	b.n	8003aa0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003a84:	78fa      	ldrb	r2, [r7, #3]
 8003a86:	4613      	mov	r3, r2
 8003a88:	00db      	lsls	r3, r3, #3
 8003a8a:	4413      	add	r3, r2
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	4413      	add	r3, r2
 8003a96:	3304      	adds	r3, #4
 8003a98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003aa6:	78fb      	ldrb	r3, [r7, #3]
 8003aa8:	f003 030f 	and.w	r3, r3, #15
 8003aac:	b2da      	uxtb	r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d101      	bne.n	8003ac0 <HAL_PCD_EP_SetStall+0x82>
 8003abc:	2302      	movs	r3, #2
 8003abe:	e01d      	b.n	8003afc <HAL_PCD_EP_SetStall+0xbe>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68f9      	ldr	r1, [r7, #12]
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f003 ff2a 	bl	8007928 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ad4:	78fb      	ldrb	r3, [r7, #3]
 8003ad6:	f003 030f 	and.w	r3, r3, #15
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d109      	bne.n	8003af2 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6818      	ldr	r0, [r3, #0]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	7999      	ldrb	r1, [r3, #6]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003aec:	461a      	mov	r2, r3
 8003aee:	f004 f91b 	bl	8007d28 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003afa:	2300      	movs	r3, #0
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3710      	adds	r7, #16
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003b10:	78fb      	ldrb	r3, [r7, #3]
 8003b12:	f003 030f 	and.w	r3, r3, #15
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	7912      	ldrb	r2, [r2, #4]
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d901      	bls.n	8003b22 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e042      	b.n	8003ba8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003b22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	da0f      	bge.n	8003b4a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b2a:	78fb      	ldrb	r3, [r7, #3]
 8003b2c:	f003 020f 	and.w	r2, r3, #15
 8003b30:	4613      	mov	r3, r2
 8003b32:	00db      	lsls	r3, r3, #3
 8003b34:	4413      	add	r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	3310      	adds	r3, #16
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	4413      	add	r3, r2
 8003b3e:	3304      	adds	r3, #4
 8003b40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2201      	movs	r2, #1
 8003b46:	705a      	strb	r2, [r3, #1]
 8003b48:	e00f      	b.n	8003b6a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b4a:	78fb      	ldrb	r3, [r7, #3]
 8003b4c:	f003 020f 	and.w	r2, r3, #15
 8003b50:	4613      	mov	r3, r2
 8003b52:	00db      	lsls	r3, r3, #3
 8003b54:	4413      	add	r3, r2
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	4413      	add	r3, r2
 8003b60:	3304      	adds	r3, #4
 8003b62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2200      	movs	r2, #0
 8003b68:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b70:	78fb      	ldrb	r3, [r7, #3]
 8003b72:	f003 030f 	and.w	r3, r3, #15
 8003b76:	b2da      	uxtb	r2, r3
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d101      	bne.n	8003b8a <HAL_PCD_EP_ClrStall+0x86>
 8003b86:	2302      	movs	r3, #2
 8003b88:	e00e      	b.n	8003ba8 <HAL_PCD_EP_ClrStall+0xa4>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68f9      	ldr	r1, [r7, #12]
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f003 ff33 	bl	8007a04 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3710      	adds	r7, #16
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	460b      	mov	r3, r1
 8003bba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003bbc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	da0c      	bge.n	8003bde <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bc4:	78fb      	ldrb	r3, [r7, #3]
 8003bc6:	f003 020f 	and.w	r2, r3, #15
 8003bca:	4613      	mov	r3, r2
 8003bcc:	00db      	lsls	r3, r3, #3
 8003bce:	4413      	add	r3, r2
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	3310      	adds	r3, #16
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	3304      	adds	r3, #4
 8003bda:	60fb      	str	r3, [r7, #12]
 8003bdc:	e00c      	b.n	8003bf8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bde:	78fb      	ldrb	r3, [r7, #3]
 8003be0:	f003 020f 	and.w	r2, r3, #15
 8003be4:	4613      	mov	r3, r2
 8003be6:	00db      	lsls	r3, r3, #3
 8003be8:	4413      	add	r3, r2
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	3304      	adds	r3, #4
 8003bf6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68f9      	ldr	r1, [r7, #12]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f003 fd52 	bl	80076a8 <USB_EPStopXfer>
 8003c04:	4603      	mov	r3, r0
 8003c06:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003c08:	7afb      	ldrb	r3, [r7, #11]
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3710      	adds	r7, #16
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}

08003c12 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c12:	b580      	push	{r7, lr}
 8003c14:	b08a      	sub	sp, #40	; 0x28
 8003c16:	af02      	add	r7, sp, #8
 8003c18:	6078      	str	r0, [r7, #4]
 8003c1a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003c26:	683a      	ldr	r2, [r7, #0]
 8003c28:	4613      	mov	r3, r2
 8003c2a:	00db      	lsls	r3, r3, #3
 8003c2c:	4413      	add	r3, r2
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	3310      	adds	r3, #16
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	4413      	add	r3, r2
 8003c36:	3304      	adds	r3, #4
 8003c38:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	695a      	ldr	r2, [r3, #20]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d901      	bls.n	8003c4a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e06b      	b.n	8003d22 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	691a      	ldr	r2, [r3, #16]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	69fa      	ldr	r2, [r7, #28]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d902      	bls.n	8003c66 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	3303      	adds	r3, #3
 8003c6a:	089b      	lsrs	r3, r3, #2
 8003c6c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c6e:	e02a      	b.n	8003cc6 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	691a      	ldr	r2, [r3, #16]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	695b      	ldr	r3, [r3, #20]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	69fa      	ldr	r2, [r7, #28]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d902      	bls.n	8003c8c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	3303      	adds	r3, #3
 8003c90:	089b      	lsrs	r3, r3, #2
 8003c92:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	68d9      	ldr	r1, [r3, #12]
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	b2da      	uxtb	r2, r3
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003ca4:	9300      	str	r3, [sp, #0]
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	6978      	ldr	r0, [r7, #20]
 8003caa:	f003 fda7 	bl	80077fc <USB_WritePacket>

    ep->xfer_buff  += len;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	68da      	ldr	r2, [r3, #12]
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	441a      	add	r2, r3
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	695a      	ldr	r2, [r3, #20]
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	441a      	add	r2, r3
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	015a      	lsls	r2, r3, #5
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	4413      	add	r3, r2
 8003cce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cd2:	699b      	ldr	r3, [r3, #24]
 8003cd4:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003cd6:	69ba      	ldr	r2, [r7, #24]
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d809      	bhi.n	8003cf0 <PCD_WriteEmptyTxFifo+0xde>
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	695a      	ldr	r2, [r3, #20]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d203      	bcs.n	8003cf0 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	691b      	ldr	r3, [r3, #16]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1bf      	bne.n	8003c70 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	691a      	ldr	r2, [r3, #16]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	695b      	ldr	r3, [r3, #20]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d811      	bhi.n	8003d20 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	f003 030f 	and.w	r3, r3, #15
 8003d02:	2201      	movs	r2, #1
 8003d04:	fa02 f303 	lsl.w	r3, r2, r3
 8003d08:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	43db      	mvns	r3, r3
 8003d16:	6939      	ldr	r1, [r7, #16]
 8003d18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3720      	adds	r7, #32
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
	...

08003d2c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b088      	sub	sp, #32
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	333c      	adds	r3, #60	; 0x3c
 8003d44:	3304      	adds	r3, #4
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	015a      	lsls	r2, r3, #5
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	4413      	add	r3, r2
 8003d52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	799b      	ldrb	r3, [r3, #6]
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d17b      	bne.n	8003e5a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	f003 0308 	and.w	r3, r3, #8
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d015      	beq.n	8003d98 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	4a61      	ldr	r2, [pc, #388]	; (8003ef4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	f240 80b9 	bls.w	8003ee8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	f000 80b3 	beq.w	8003ee8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	015a      	lsls	r2, r3, #5
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	4413      	add	r3, r2
 8003d8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d8e:	461a      	mov	r2, r3
 8003d90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d94:	6093      	str	r3, [r2, #8]
 8003d96:	e0a7      	b.n	8003ee8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	f003 0320 	and.w	r3, r3, #32
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d009      	beq.n	8003db6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	015a      	lsls	r2, r3, #5
 8003da6:	69bb      	ldr	r3, [r7, #24]
 8003da8:	4413      	add	r3, r2
 8003daa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dae:	461a      	mov	r2, r3
 8003db0:	2320      	movs	r3, #32
 8003db2:	6093      	str	r3, [r2, #8]
 8003db4:	e098      	b.n	8003ee8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	f040 8093 	bne.w	8003ee8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	4a4b      	ldr	r2, [pc, #300]	; (8003ef4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d90f      	bls.n	8003dea <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d00a      	beq.n	8003dea <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	015a      	lsls	r2, r3, #5
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	4413      	add	r3, r2
 8003ddc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003de0:	461a      	mov	r2, r3
 8003de2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003de6:	6093      	str	r3, [r2, #8]
 8003de8:	e07e      	b.n	8003ee8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003dea:	683a      	ldr	r2, [r7, #0]
 8003dec:	4613      	mov	r3, r2
 8003dee:	00db      	lsls	r3, r3, #3
 8003df0:	4413      	add	r3, r2
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	4413      	add	r3, r2
 8003dfc:	3304      	adds	r3, #4
 8003dfe:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6a1a      	ldr	r2, [r3, #32]
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	0159      	lsls	r1, r3, #5
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	440b      	add	r3, r1
 8003e0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e10:	691b      	ldr	r3, [r3, #16]
 8003e12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e16:	1ad2      	subs	r2, r2, r3
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d114      	bne.n	8003e4c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d109      	bne.n	8003e3e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6818      	ldr	r0, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003e34:	461a      	mov	r2, r3
 8003e36:	2101      	movs	r1, #1
 8003e38:	f003 ff76 	bl	8007d28 <USB_EP0_OutStart>
 8003e3c:	e006      	b.n	8003e4c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	68da      	ldr	r2, [r3, #12]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	441a      	add	r2, r3
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	4619      	mov	r1, r3
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f007 fd0a 	bl	800b86c <HAL_PCD_DataOutStageCallback>
 8003e58:	e046      	b.n	8003ee8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	4a26      	ldr	r2, [pc, #152]	; (8003ef8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d124      	bne.n	8003eac <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d00a      	beq.n	8003e82 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	015a      	lsls	r2, r3, #5
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	4413      	add	r3, r2
 8003e74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e78:	461a      	mov	r2, r3
 8003e7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e7e:	6093      	str	r3, [r2, #8]
 8003e80:	e032      	b.n	8003ee8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	f003 0320 	and.w	r3, r3, #32
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d008      	beq.n	8003e9e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	015a      	lsls	r2, r3, #5
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	4413      	add	r3, r2
 8003e94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e98:	461a      	mov	r2, r3
 8003e9a:	2320      	movs	r3, #32
 8003e9c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f007 fce1 	bl	800b86c <HAL_PCD_DataOutStageCallback>
 8003eaa:	e01d      	b.n	8003ee8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d114      	bne.n	8003edc <PCD_EP_OutXfrComplete_int+0x1b0>
 8003eb2:	6879      	ldr	r1, [r7, #4]
 8003eb4:	683a      	ldr	r2, [r7, #0]
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	00db      	lsls	r3, r3, #3
 8003eba:	4413      	add	r3, r2
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	440b      	add	r3, r1
 8003ec0:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d108      	bne.n	8003edc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6818      	ldr	r0, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	2100      	movs	r1, #0
 8003ed8:	f003 ff26 	bl	8007d28 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	4619      	mov	r1, r3
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f007 fcc2 	bl	800b86c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3720      	adds	r7, #32
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	4f54300a 	.word	0x4f54300a
 8003ef8:	4f54310a 	.word	0x4f54310a

08003efc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b086      	sub	sp, #24
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	333c      	adds	r3, #60	; 0x3c
 8003f14:	3304      	adds	r3, #4
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	015a      	lsls	r2, r3, #5
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	4413      	add	r3, r2
 8003f22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	4a15      	ldr	r2, [pc, #84]	; (8003f84 <PCD_EP_OutSetupPacket_int+0x88>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d90e      	bls.n	8003f50 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d009      	beq.n	8003f50 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	015a      	lsls	r2, r3, #5
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	4413      	add	r3, r2
 8003f44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f48:	461a      	mov	r2, r3
 8003f4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f4e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f007 fc79 	bl	800b848 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	4a0a      	ldr	r2, [pc, #40]	; (8003f84 <PCD_EP_OutSetupPacket_int+0x88>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d90c      	bls.n	8003f78 <PCD_EP_OutSetupPacket_int+0x7c>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	799b      	ldrb	r3, [r3, #6]
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d108      	bne.n	8003f78 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6818      	ldr	r0, [r3, #0]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003f70:	461a      	mov	r2, r3
 8003f72:	2101      	movs	r1, #1
 8003f74:	f003 fed8 	bl	8007d28 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3718      	adds	r7, #24
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	4f54300a 	.word	0x4f54300a

08003f88 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b085      	sub	sp, #20
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	460b      	mov	r3, r1
 8003f92:	70fb      	strb	r3, [r7, #3]
 8003f94:	4613      	mov	r3, r2
 8003f96:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003fa0:	78fb      	ldrb	r3, [r7, #3]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d107      	bne.n	8003fb6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003fa6:	883b      	ldrh	r3, [r7, #0]
 8003fa8:	0419      	lsls	r1, r3, #16
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68ba      	ldr	r2, [r7, #8]
 8003fb0:	430a      	orrs	r2, r1
 8003fb2:	629a      	str	r2, [r3, #40]	; 0x28
 8003fb4:	e028      	b.n	8004008 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fbc:	0c1b      	lsrs	r3, r3, #16
 8003fbe:	68ba      	ldr	r2, [r7, #8]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	73fb      	strb	r3, [r7, #15]
 8003fc8:	e00d      	b.n	8003fe6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	7bfb      	ldrb	r3, [r7, #15]
 8003fd0:	3340      	adds	r3, #64	; 0x40
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	4413      	add	r3, r2
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	0c1b      	lsrs	r3, r3, #16
 8003fda:	68ba      	ldr	r2, [r7, #8]
 8003fdc:	4413      	add	r3, r2
 8003fde:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003fe0:	7bfb      	ldrb	r3, [r7, #15]
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	73fb      	strb	r3, [r7, #15]
 8003fe6:	7bfa      	ldrb	r2, [r7, #15]
 8003fe8:	78fb      	ldrb	r3, [r7, #3]
 8003fea:	3b01      	subs	r3, #1
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d3ec      	bcc.n	8003fca <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003ff0:	883b      	ldrh	r3, [r7, #0]
 8003ff2:	0418      	lsls	r0, r3, #16
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6819      	ldr	r1, [r3, #0]
 8003ff8:	78fb      	ldrb	r3, [r7, #3]
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	68ba      	ldr	r2, [r7, #8]
 8003ffe:	4302      	orrs	r2, r0
 8004000:	3340      	adds	r3, #64	; 0x40
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	440b      	add	r3, r1
 8004006:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3714      	adds	r7, #20
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr

08004016 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004016:	b480      	push	{r7}
 8004018:	b083      	sub	sp, #12
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
 800401e:	460b      	mov	r3, r1
 8004020:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	887a      	ldrh	r2, [r7, #2]
 8004028:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800402a:	2300      	movs	r3, #0
}
 800402c:	4618      	mov	r0, r3
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	460b      	mov	r3, r1
 8004042:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004044:	bf00      	nop
 8004046:	370c      	adds	r7, #12
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b086      	sub	sp, #24
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d101      	bne.n	8004062 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e267      	b.n	8004532 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0301 	and.w	r3, r3, #1
 800406a:	2b00      	cmp	r3, #0
 800406c:	d075      	beq.n	800415a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800406e:	4b88      	ldr	r3, [pc, #544]	; (8004290 <HAL_RCC_OscConfig+0x240>)
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	f003 030c 	and.w	r3, r3, #12
 8004076:	2b04      	cmp	r3, #4
 8004078:	d00c      	beq.n	8004094 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800407a:	4b85      	ldr	r3, [pc, #532]	; (8004290 <HAL_RCC_OscConfig+0x240>)
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004082:	2b08      	cmp	r3, #8
 8004084:	d112      	bne.n	80040ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004086:	4b82      	ldr	r3, [pc, #520]	; (8004290 <HAL_RCC_OscConfig+0x240>)
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800408e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004092:	d10b      	bne.n	80040ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004094:	4b7e      	ldr	r3, [pc, #504]	; (8004290 <HAL_RCC_OscConfig+0x240>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d05b      	beq.n	8004158 <HAL_RCC_OscConfig+0x108>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d157      	bne.n	8004158 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e242      	b.n	8004532 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040b4:	d106      	bne.n	80040c4 <HAL_RCC_OscConfig+0x74>
 80040b6:	4b76      	ldr	r3, [pc, #472]	; (8004290 <HAL_RCC_OscConfig+0x240>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a75      	ldr	r2, [pc, #468]	; (8004290 <HAL_RCC_OscConfig+0x240>)
 80040bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040c0:	6013      	str	r3, [r2, #0]
 80040c2:	e01d      	b.n	8004100 <HAL_RCC_OscConfig+0xb0>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040cc:	d10c      	bne.n	80040e8 <HAL_RCC_OscConfig+0x98>
 80040ce:	4b70      	ldr	r3, [pc, #448]	; (8004290 <HAL_RCC_OscConfig+0x240>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a6f      	ldr	r2, [pc, #444]	; (8004290 <HAL_RCC_OscConfig+0x240>)
 80040d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040d8:	6013      	str	r3, [r2, #0]
 80040da:	4b6d      	ldr	r3, [pc, #436]	; (8004290 <HAL_RCC_OscConfig+0x240>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a6c      	ldr	r2, [pc, #432]	; (8004290 <HAL_RCC_OscConfig+0x240>)
 80040e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040e4:	6013      	str	r3, [r2, #0]
 80040e6:	e00b      	b.n	8004100 <HAL_RCC_OscConfig+0xb0>
 80040e8:	4b69      	ldr	r3, [pc, #420]	; (8004290 <HAL_RCC_OscConfig+0x240>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a68      	ldr	r2, [pc, #416]	; (8004290 <HAL_RCC_OscConfig+0x240>)
 80040ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040f2:	6013      	str	r3, [r2, #0]
 80040f4:	4b66      	ldr	r3, [pc, #408]	; (8004290 <HAL_RCC_OscConfig+0x240>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a65      	ldr	r2, [pc, #404]	; (8004290 <HAL_RCC_OscConfig+0x240>)
 80040fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d013      	beq.n	8004130 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004108:	f7fd fbb0 	bl	800186c <HAL_GetTick>
 800410c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800410e:	e008      	b.n	8004122 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004110:	f7fd fbac 	bl	800186c <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	2b64      	cmp	r3, #100	; 0x64
 800411c:	d901      	bls.n	8004122 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e207      	b.n	8004532 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004122:	4b5b      	ldr	r3, [pc, #364]	; (8004290 <HAL_RCC_OscConfig+0x240>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d0f0      	beq.n	8004110 <HAL_RCC_OscConfig+0xc0>
 800412e:	e014      	b.n	800415a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004130:	f7fd fb9c 	bl	800186c <HAL_GetTick>
 8004134:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004136:	e008      	b.n	800414a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004138:	f7fd fb98 	bl	800186c <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	2b64      	cmp	r3, #100	; 0x64
 8004144:	d901      	bls.n	800414a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e1f3      	b.n	8004532 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800414a:	4b51      	ldr	r3, [pc, #324]	; (8004290 <HAL_RCC_OscConfig+0x240>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d1f0      	bne.n	8004138 <HAL_RCC_OscConfig+0xe8>
 8004156:	e000      	b.n	800415a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004158:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0302 	and.w	r3, r3, #2
 8004162:	2b00      	cmp	r3, #0
 8004164:	d063      	beq.n	800422e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004166:	4b4a      	ldr	r3, [pc, #296]	; (8004290 <HAL_RCC_OscConfig+0x240>)
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f003 030c 	and.w	r3, r3, #12
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00b      	beq.n	800418a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004172:	4b47      	ldr	r3, [pc, #284]	; (8004290 <HAL_RCC_OscConfig+0x240>)
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800417a:	2b08      	cmp	r3, #8
 800417c:	d11c      	bne.n	80041b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800417e:	4b44      	ldr	r3, [pc, #272]	; (8004290 <HAL_RCC_OscConfig+0x240>)
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d116      	bne.n	80041b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800418a:	4b41      	ldr	r3, [pc, #260]	; (8004290 <HAL_RCC_OscConfig+0x240>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	2b00      	cmp	r3, #0
 8004194:	d005      	beq.n	80041a2 <HAL_RCC_OscConfig+0x152>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	2b01      	cmp	r3, #1
 800419c:	d001      	beq.n	80041a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e1c7      	b.n	8004532 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041a2:	4b3b      	ldr	r3, [pc, #236]	; (8004290 <HAL_RCC_OscConfig+0x240>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	00db      	lsls	r3, r3, #3
 80041b0:	4937      	ldr	r1, [pc, #220]	; (8004290 <HAL_RCC_OscConfig+0x240>)
 80041b2:	4313      	orrs	r3, r2
 80041b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041b6:	e03a      	b.n	800422e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d020      	beq.n	8004202 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041c0:	4b34      	ldr	r3, [pc, #208]	; (8004294 <HAL_RCC_OscConfig+0x244>)
 80041c2:	2201      	movs	r2, #1
 80041c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041c6:	f7fd fb51 	bl	800186c <HAL_GetTick>
 80041ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041cc:	e008      	b.n	80041e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041ce:	f7fd fb4d 	bl	800186c <HAL_GetTick>
 80041d2:	4602      	mov	r2, r0
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	2b02      	cmp	r3, #2
 80041da:	d901      	bls.n	80041e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80041dc:	2303      	movs	r3, #3
 80041de:	e1a8      	b.n	8004532 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041e0:	4b2b      	ldr	r3, [pc, #172]	; (8004290 <HAL_RCC_OscConfig+0x240>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0302 	and.w	r3, r3, #2
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d0f0      	beq.n	80041ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041ec:	4b28      	ldr	r3, [pc, #160]	; (8004290 <HAL_RCC_OscConfig+0x240>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	691b      	ldr	r3, [r3, #16]
 80041f8:	00db      	lsls	r3, r3, #3
 80041fa:	4925      	ldr	r1, [pc, #148]	; (8004290 <HAL_RCC_OscConfig+0x240>)
 80041fc:	4313      	orrs	r3, r2
 80041fe:	600b      	str	r3, [r1, #0]
 8004200:	e015      	b.n	800422e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004202:	4b24      	ldr	r3, [pc, #144]	; (8004294 <HAL_RCC_OscConfig+0x244>)
 8004204:	2200      	movs	r2, #0
 8004206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004208:	f7fd fb30 	bl	800186c <HAL_GetTick>
 800420c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800420e:	e008      	b.n	8004222 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004210:	f7fd fb2c 	bl	800186c <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	2b02      	cmp	r3, #2
 800421c:	d901      	bls.n	8004222 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e187      	b.n	8004532 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004222:	4b1b      	ldr	r3, [pc, #108]	; (8004290 <HAL_RCC_OscConfig+0x240>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0302 	and.w	r3, r3, #2
 800422a:	2b00      	cmp	r3, #0
 800422c:	d1f0      	bne.n	8004210 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0308 	and.w	r3, r3, #8
 8004236:	2b00      	cmp	r3, #0
 8004238:	d036      	beq.n	80042a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	695b      	ldr	r3, [r3, #20]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d016      	beq.n	8004270 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004242:	4b15      	ldr	r3, [pc, #84]	; (8004298 <HAL_RCC_OscConfig+0x248>)
 8004244:	2201      	movs	r2, #1
 8004246:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004248:	f7fd fb10 	bl	800186c <HAL_GetTick>
 800424c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800424e:	e008      	b.n	8004262 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004250:	f7fd fb0c 	bl	800186c <HAL_GetTick>
 8004254:	4602      	mov	r2, r0
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	2b02      	cmp	r3, #2
 800425c:	d901      	bls.n	8004262 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e167      	b.n	8004532 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004262:	4b0b      	ldr	r3, [pc, #44]	; (8004290 <HAL_RCC_OscConfig+0x240>)
 8004264:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004266:	f003 0302 	and.w	r3, r3, #2
 800426a:	2b00      	cmp	r3, #0
 800426c:	d0f0      	beq.n	8004250 <HAL_RCC_OscConfig+0x200>
 800426e:	e01b      	b.n	80042a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004270:	4b09      	ldr	r3, [pc, #36]	; (8004298 <HAL_RCC_OscConfig+0x248>)
 8004272:	2200      	movs	r2, #0
 8004274:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004276:	f7fd faf9 	bl	800186c <HAL_GetTick>
 800427a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800427c:	e00e      	b.n	800429c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800427e:	f7fd faf5 	bl	800186c <HAL_GetTick>
 8004282:	4602      	mov	r2, r0
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	2b02      	cmp	r3, #2
 800428a:	d907      	bls.n	800429c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800428c:	2303      	movs	r3, #3
 800428e:	e150      	b.n	8004532 <HAL_RCC_OscConfig+0x4e2>
 8004290:	40023800 	.word	0x40023800
 8004294:	42470000 	.word	0x42470000
 8004298:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800429c:	4b88      	ldr	r3, [pc, #544]	; (80044c0 <HAL_RCC_OscConfig+0x470>)
 800429e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042a0:	f003 0302 	and.w	r3, r3, #2
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d1ea      	bne.n	800427e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0304 	and.w	r3, r3, #4
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	f000 8097 	beq.w	80043e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042b6:	2300      	movs	r3, #0
 80042b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042ba:	4b81      	ldr	r3, [pc, #516]	; (80044c0 <HAL_RCC_OscConfig+0x470>)
 80042bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d10f      	bne.n	80042e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042c6:	2300      	movs	r3, #0
 80042c8:	60bb      	str	r3, [r7, #8]
 80042ca:	4b7d      	ldr	r3, [pc, #500]	; (80044c0 <HAL_RCC_OscConfig+0x470>)
 80042cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ce:	4a7c      	ldr	r2, [pc, #496]	; (80044c0 <HAL_RCC_OscConfig+0x470>)
 80042d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042d4:	6413      	str	r3, [r2, #64]	; 0x40
 80042d6:	4b7a      	ldr	r3, [pc, #488]	; (80044c0 <HAL_RCC_OscConfig+0x470>)
 80042d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042de:	60bb      	str	r3, [r7, #8]
 80042e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042e2:	2301      	movs	r3, #1
 80042e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042e6:	4b77      	ldr	r3, [pc, #476]	; (80044c4 <HAL_RCC_OscConfig+0x474>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d118      	bne.n	8004324 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042f2:	4b74      	ldr	r3, [pc, #464]	; (80044c4 <HAL_RCC_OscConfig+0x474>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a73      	ldr	r2, [pc, #460]	; (80044c4 <HAL_RCC_OscConfig+0x474>)
 80042f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042fe:	f7fd fab5 	bl	800186c <HAL_GetTick>
 8004302:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004304:	e008      	b.n	8004318 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004306:	f7fd fab1 	bl	800186c <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	2b02      	cmp	r3, #2
 8004312:	d901      	bls.n	8004318 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004314:	2303      	movs	r3, #3
 8004316:	e10c      	b.n	8004532 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004318:	4b6a      	ldr	r3, [pc, #424]	; (80044c4 <HAL_RCC_OscConfig+0x474>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004320:	2b00      	cmp	r3, #0
 8004322:	d0f0      	beq.n	8004306 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	2b01      	cmp	r3, #1
 800432a:	d106      	bne.n	800433a <HAL_RCC_OscConfig+0x2ea>
 800432c:	4b64      	ldr	r3, [pc, #400]	; (80044c0 <HAL_RCC_OscConfig+0x470>)
 800432e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004330:	4a63      	ldr	r2, [pc, #396]	; (80044c0 <HAL_RCC_OscConfig+0x470>)
 8004332:	f043 0301 	orr.w	r3, r3, #1
 8004336:	6713      	str	r3, [r2, #112]	; 0x70
 8004338:	e01c      	b.n	8004374 <HAL_RCC_OscConfig+0x324>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	2b05      	cmp	r3, #5
 8004340:	d10c      	bne.n	800435c <HAL_RCC_OscConfig+0x30c>
 8004342:	4b5f      	ldr	r3, [pc, #380]	; (80044c0 <HAL_RCC_OscConfig+0x470>)
 8004344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004346:	4a5e      	ldr	r2, [pc, #376]	; (80044c0 <HAL_RCC_OscConfig+0x470>)
 8004348:	f043 0304 	orr.w	r3, r3, #4
 800434c:	6713      	str	r3, [r2, #112]	; 0x70
 800434e:	4b5c      	ldr	r3, [pc, #368]	; (80044c0 <HAL_RCC_OscConfig+0x470>)
 8004350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004352:	4a5b      	ldr	r2, [pc, #364]	; (80044c0 <HAL_RCC_OscConfig+0x470>)
 8004354:	f043 0301 	orr.w	r3, r3, #1
 8004358:	6713      	str	r3, [r2, #112]	; 0x70
 800435a:	e00b      	b.n	8004374 <HAL_RCC_OscConfig+0x324>
 800435c:	4b58      	ldr	r3, [pc, #352]	; (80044c0 <HAL_RCC_OscConfig+0x470>)
 800435e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004360:	4a57      	ldr	r2, [pc, #348]	; (80044c0 <HAL_RCC_OscConfig+0x470>)
 8004362:	f023 0301 	bic.w	r3, r3, #1
 8004366:	6713      	str	r3, [r2, #112]	; 0x70
 8004368:	4b55      	ldr	r3, [pc, #340]	; (80044c0 <HAL_RCC_OscConfig+0x470>)
 800436a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800436c:	4a54      	ldr	r2, [pc, #336]	; (80044c0 <HAL_RCC_OscConfig+0x470>)
 800436e:	f023 0304 	bic.w	r3, r3, #4
 8004372:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d015      	beq.n	80043a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800437c:	f7fd fa76 	bl	800186c <HAL_GetTick>
 8004380:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004382:	e00a      	b.n	800439a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004384:	f7fd fa72 	bl	800186c <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004392:	4293      	cmp	r3, r2
 8004394:	d901      	bls.n	800439a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	e0cb      	b.n	8004532 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800439a:	4b49      	ldr	r3, [pc, #292]	; (80044c0 <HAL_RCC_OscConfig+0x470>)
 800439c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800439e:	f003 0302 	and.w	r3, r3, #2
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d0ee      	beq.n	8004384 <HAL_RCC_OscConfig+0x334>
 80043a6:	e014      	b.n	80043d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043a8:	f7fd fa60 	bl	800186c <HAL_GetTick>
 80043ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043ae:	e00a      	b.n	80043c6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043b0:	f7fd fa5c 	bl	800186c <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80043be:	4293      	cmp	r3, r2
 80043c0:	d901      	bls.n	80043c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	e0b5      	b.n	8004532 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043c6:	4b3e      	ldr	r3, [pc, #248]	; (80044c0 <HAL_RCC_OscConfig+0x470>)
 80043c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ca:	f003 0302 	and.w	r3, r3, #2
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d1ee      	bne.n	80043b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043d2:	7dfb      	ldrb	r3, [r7, #23]
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d105      	bne.n	80043e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043d8:	4b39      	ldr	r3, [pc, #228]	; (80044c0 <HAL_RCC_OscConfig+0x470>)
 80043da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043dc:	4a38      	ldr	r2, [pc, #224]	; (80044c0 <HAL_RCC_OscConfig+0x470>)
 80043de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043e2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	f000 80a1 	beq.w	8004530 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043ee:	4b34      	ldr	r3, [pc, #208]	; (80044c0 <HAL_RCC_OscConfig+0x470>)
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f003 030c 	and.w	r3, r3, #12
 80043f6:	2b08      	cmp	r3, #8
 80043f8:	d05c      	beq.n	80044b4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	699b      	ldr	r3, [r3, #24]
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d141      	bne.n	8004486 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004402:	4b31      	ldr	r3, [pc, #196]	; (80044c8 <HAL_RCC_OscConfig+0x478>)
 8004404:	2200      	movs	r2, #0
 8004406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004408:	f7fd fa30 	bl	800186c <HAL_GetTick>
 800440c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800440e:	e008      	b.n	8004422 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004410:	f7fd fa2c 	bl	800186c <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	2b02      	cmp	r3, #2
 800441c:	d901      	bls.n	8004422 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e087      	b.n	8004532 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004422:	4b27      	ldr	r3, [pc, #156]	; (80044c0 <HAL_RCC_OscConfig+0x470>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1f0      	bne.n	8004410 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	69da      	ldr	r2, [r3, #28]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a1b      	ldr	r3, [r3, #32]
 8004436:	431a      	orrs	r2, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443c:	019b      	lsls	r3, r3, #6
 800443e:	431a      	orrs	r2, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004444:	085b      	lsrs	r3, r3, #1
 8004446:	3b01      	subs	r3, #1
 8004448:	041b      	lsls	r3, r3, #16
 800444a:	431a      	orrs	r2, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004450:	061b      	lsls	r3, r3, #24
 8004452:	491b      	ldr	r1, [pc, #108]	; (80044c0 <HAL_RCC_OscConfig+0x470>)
 8004454:	4313      	orrs	r3, r2
 8004456:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004458:	4b1b      	ldr	r3, [pc, #108]	; (80044c8 <HAL_RCC_OscConfig+0x478>)
 800445a:	2201      	movs	r2, #1
 800445c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800445e:	f7fd fa05 	bl	800186c <HAL_GetTick>
 8004462:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004464:	e008      	b.n	8004478 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004466:	f7fd fa01 	bl	800186c <HAL_GetTick>
 800446a:	4602      	mov	r2, r0
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	2b02      	cmp	r3, #2
 8004472:	d901      	bls.n	8004478 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004474:	2303      	movs	r3, #3
 8004476:	e05c      	b.n	8004532 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004478:	4b11      	ldr	r3, [pc, #68]	; (80044c0 <HAL_RCC_OscConfig+0x470>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004480:	2b00      	cmp	r3, #0
 8004482:	d0f0      	beq.n	8004466 <HAL_RCC_OscConfig+0x416>
 8004484:	e054      	b.n	8004530 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004486:	4b10      	ldr	r3, [pc, #64]	; (80044c8 <HAL_RCC_OscConfig+0x478>)
 8004488:	2200      	movs	r2, #0
 800448a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800448c:	f7fd f9ee 	bl	800186c <HAL_GetTick>
 8004490:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004492:	e008      	b.n	80044a6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004494:	f7fd f9ea 	bl	800186c <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d901      	bls.n	80044a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e045      	b.n	8004532 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044a6:	4b06      	ldr	r3, [pc, #24]	; (80044c0 <HAL_RCC_OscConfig+0x470>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d1f0      	bne.n	8004494 <HAL_RCC_OscConfig+0x444>
 80044b2:	e03d      	b.n	8004530 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	699b      	ldr	r3, [r3, #24]
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d107      	bne.n	80044cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e038      	b.n	8004532 <HAL_RCC_OscConfig+0x4e2>
 80044c0:	40023800 	.word	0x40023800
 80044c4:	40007000 	.word	0x40007000
 80044c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80044cc:	4b1b      	ldr	r3, [pc, #108]	; (800453c <HAL_RCC_OscConfig+0x4ec>)
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	699b      	ldr	r3, [r3, #24]
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d028      	beq.n	800452c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d121      	bne.n	800452c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d11a      	bne.n	800452c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044f6:	68fa      	ldr	r2, [r7, #12]
 80044f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80044fc:	4013      	ands	r3, r2
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004502:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004504:	4293      	cmp	r3, r2
 8004506:	d111      	bne.n	800452c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004512:	085b      	lsrs	r3, r3, #1
 8004514:	3b01      	subs	r3, #1
 8004516:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004518:	429a      	cmp	r2, r3
 800451a:	d107      	bne.n	800452c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004526:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004528:	429a      	cmp	r2, r3
 800452a:	d001      	beq.n	8004530 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e000      	b.n	8004532 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004530:	2300      	movs	r3, #0
}
 8004532:	4618      	mov	r0, r3
 8004534:	3718      	adds	r7, #24
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	40023800 	.word	0x40023800

08004540 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d101      	bne.n	8004554 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e0cc      	b.n	80046ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004554:	4b68      	ldr	r3, [pc, #416]	; (80046f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 030f 	and.w	r3, r3, #15
 800455c:	683a      	ldr	r2, [r7, #0]
 800455e:	429a      	cmp	r2, r3
 8004560:	d90c      	bls.n	800457c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004562:	4b65      	ldr	r3, [pc, #404]	; (80046f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004564:	683a      	ldr	r2, [r7, #0]
 8004566:	b2d2      	uxtb	r2, r2
 8004568:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800456a:	4b63      	ldr	r3, [pc, #396]	; (80046f8 <HAL_RCC_ClockConfig+0x1b8>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 030f 	and.w	r3, r3, #15
 8004572:	683a      	ldr	r2, [r7, #0]
 8004574:	429a      	cmp	r2, r3
 8004576:	d001      	beq.n	800457c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e0b8      	b.n	80046ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0302 	and.w	r3, r3, #2
 8004584:	2b00      	cmp	r3, #0
 8004586:	d020      	beq.n	80045ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0304 	and.w	r3, r3, #4
 8004590:	2b00      	cmp	r3, #0
 8004592:	d005      	beq.n	80045a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004594:	4b59      	ldr	r3, [pc, #356]	; (80046fc <HAL_RCC_ClockConfig+0x1bc>)
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	4a58      	ldr	r2, [pc, #352]	; (80046fc <HAL_RCC_ClockConfig+0x1bc>)
 800459a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800459e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0308 	and.w	r3, r3, #8
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d005      	beq.n	80045b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045ac:	4b53      	ldr	r3, [pc, #332]	; (80046fc <HAL_RCC_ClockConfig+0x1bc>)
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	4a52      	ldr	r2, [pc, #328]	; (80046fc <HAL_RCC_ClockConfig+0x1bc>)
 80045b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80045b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045b8:	4b50      	ldr	r3, [pc, #320]	; (80046fc <HAL_RCC_ClockConfig+0x1bc>)
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	494d      	ldr	r1, [pc, #308]	; (80046fc <HAL_RCC_ClockConfig+0x1bc>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0301 	and.w	r3, r3, #1
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d044      	beq.n	8004660 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d107      	bne.n	80045ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045de:	4b47      	ldr	r3, [pc, #284]	; (80046fc <HAL_RCC_ClockConfig+0x1bc>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d119      	bne.n	800461e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e07f      	b.n	80046ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	2b02      	cmp	r3, #2
 80045f4:	d003      	beq.n	80045fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045fa:	2b03      	cmp	r3, #3
 80045fc:	d107      	bne.n	800460e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045fe:	4b3f      	ldr	r3, [pc, #252]	; (80046fc <HAL_RCC_ClockConfig+0x1bc>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d109      	bne.n	800461e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e06f      	b.n	80046ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800460e:	4b3b      	ldr	r3, [pc, #236]	; (80046fc <HAL_RCC_ClockConfig+0x1bc>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0302 	and.w	r3, r3, #2
 8004616:	2b00      	cmp	r3, #0
 8004618:	d101      	bne.n	800461e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e067      	b.n	80046ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800461e:	4b37      	ldr	r3, [pc, #220]	; (80046fc <HAL_RCC_ClockConfig+0x1bc>)
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	f023 0203 	bic.w	r2, r3, #3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	4934      	ldr	r1, [pc, #208]	; (80046fc <HAL_RCC_ClockConfig+0x1bc>)
 800462c:	4313      	orrs	r3, r2
 800462e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004630:	f7fd f91c 	bl	800186c <HAL_GetTick>
 8004634:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004636:	e00a      	b.n	800464e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004638:	f7fd f918 	bl	800186c <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	f241 3288 	movw	r2, #5000	; 0x1388
 8004646:	4293      	cmp	r3, r2
 8004648:	d901      	bls.n	800464e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e04f      	b.n	80046ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800464e:	4b2b      	ldr	r3, [pc, #172]	; (80046fc <HAL_RCC_ClockConfig+0x1bc>)
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	f003 020c 	and.w	r2, r3, #12
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	429a      	cmp	r2, r3
 800465e:	d1eb      	bne.n	8004638 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004660:	4b25      	ldr	r3, [pc, #148]	; (80046f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 030f 	and.w	r3, r3, #15
 8004668:	683a      	ldr	r2, [r7, #0]
 800466a:	429a      	cmp	r2, r3
 800466c:	d20c      	bcs.n	8004688 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800466e:	4b22      	ldr	r3, [pc, #136]	; (80046f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004670:	683a      	ldr	r2, [r7, #0]
 8004672:	b2d2      	uxtb	r2, r2
 8004674:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004676:	4b20      	ldr	r3, [pc, #128]	; (80046f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 030f 	and.w	r3, r3, #15
 800467e:	683a      	ldr	r2, [r7, #0]
 8004680:	429a      	cmp	r2, r3
 8004682:	d001      	beq.n	8004688 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e032      	b.n	80046ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0304 	and.w	r3, r3, #4
 8004690:	2b00      	cmp	r3, #0
 8004692:	d008      	beq.n	80046a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004694:	4b19      	ldr	r3, [pc, #100]	; (80046fc <HAL_RCC_ClockConfig+0x1bc>)
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	4916      	ldr	r1, [pc, #88]	; (80046fc <HAL_RCC_ClockConfig+0x1bc>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0308 	and.w	r3, r3, #8
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d009      	beq.n	80046c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046b2:	4b12      	ldr	r3, [pc, #72]	; (80046fc <HAL_RCC_ClockConfig+0x1bc>)
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	00db      	lsls	r3, r3, #3
 80046c0:	490e      	ldr	r1, [pc, #56]	; (80046fc <HAL_RCC_ClockConfig+0x1bc>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80046c6:	f000 f821 	bl	800470c <HAL_RCC_GetSysClockFreq>
 80046ca:	4602      	mov	r2, r0
 80046cc:	4b0b      	ldr	r3, [pc, #44]	; (80046fc <HAL_RCC_ClockConfig+0x1bc>)
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	091b      	lsrs	r3, r3, #4
 80046d2:	f003 030f 	and.w	r3, r3, #15
 80046d6:	490a      	ldr	r1, [pc, #40]	; (8004700 <HAL_RCC_ClockConfig+0x1c0>)
 80046d8:	5ccb      	ldrb	r3, [r1, r3]
 80046da:	fa22 f303 	lsr.w	r3, r2, r3
 80046de:	4a09      	ldr	r2, [pc, #36]	; (8004704 <HAL_RCC_ClockConfig+0x1c4>)
 80046e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80046e2:	4b09      	ldr	r3, [pc, #36]	; (8004708 <HAL_RCC_ClockConfig+0x1c8>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4618      	mov	r0, r3
 80046e8:	f7fc fb8e 	bl	8000e08 <HAL_InitTick>

  return HAL_OK;
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3710      	adds	r7, #16
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	40023c00 	.word	0x40023c00
 80046fc:	40023800 	.word	0x40023800
 8004700:	0800cb34 	.word	0x0800cb34
 8004704:	20000000 	.word	0x20000000
 8004708:	20000004 	.word	0x20000004

0800470c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800470c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004710:	b090      	sub	sp, #64	; 0x40
 8004712:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004714:	2300      	movs	r3, #0
 8004716:	637b      	str	r3, [r7, #52]	; 0x34
 8004718:	2300      	movs	r3, #0
 800471a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800471c:	2300      	movs	r3, #0
 800471e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004720:	2300      	movs	r3, #0
 8004722:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004724:	4b59      	ldr	r3, [pc, #356]	; (800488c <HAL_RCC_GetSysClockFreq+0x180>)
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	f003 030c 	and.w	r3, r3, #12
 800472c:	2b08      	cmp	r3, #8
 800472e:	d00d      	beq.n	800474c <HAL_RCC_GetSysClockFreq+0x40>
 8004730:	2b08      	cmp	r3, #8
 8004732:	f200 80a1 	bhi.w	8004878 <HAL_RCC_GetSysClockFreq+0x16c>
 8004736:	2b00      	cmp	r3, #0
 8004738:	d002      	beq.n	8004740 <HAL_RCC_GetSysClockFreq+0x34>
 800473a:	2b04      	cmp	r3, #4
 800473c:	d003      	beq.n	8004746 <HAL_RCC_GetSysClockFreq+0x3a>
 800473e:	e09b      	b.n	8004878 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004740:	4b53      	ldr	r3, [pc, #332]	; (8004890 <HAL_RCC_GetSysClockFreq+0x184>)
 8004742:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004744:	e09b      	b.n	800487e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004746:	4b53      	ldr	r3, [pc, #332]	; (8004894 <HAL_RCC_GetSysClockFreq+0x188>)
 8004748:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800474a:	e098      	b.n	800487e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800474c:	4b4f      	ldr	r3, [pc, #316]	; (800488c <HAL_RCC_GetSysClockFreq+0x180>)
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004754:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004756:	4b4d      	ldr	r3, [pc, #308]	; (800488c <HAL_RCC_GetSysClockFreq+0x180>)
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d028      	beq.n	80047b4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004762:	4b4a      	ldr	r3, [pc, #296]	; (800488c <HAL_RCC_GetSysClockFreq+0x180>)
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	099b      	lsrs	r3, r3, #6
 8004768:	2200      	movs	r2, #0
 800476a:	623b      	str	r3, [r7, #32]
 800476c:	627a      	str	r2, [r7, #36]	; 0x24
 800476e:	6a3b      	ldr	r3, [r7, #32]
 8004770:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004774:	2100      	movs	r1, #0
 8004776:	4b47      	ldr	r3, [pc, #284]	; (8004894 <HAL_RCC_GetSysClockFreq+0x188>)
 8004778:	fb03 f201 	mul.w	r2, r3, r1
 800477c:	2300      	movs	r3, #0
 800477e:	fb00 f303 	mul.w	r3, r0, r3
 8004782:	4413      	add	r3, r2
 8004784:	4a43      	ldr	r2, [pc, #268]	; (8004894 <HAL_RCC_GetSysClockFreq+0x188>)
 8004786:	fba0 1202 	umull	r1, r2, r0, r2
 800478a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800478c:	460a      	mov	r2, r1
 800478e:	62ba      	str	r2, [r7, #40]	; 0x28
 8004790:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004792:	4413      	add	r3, r2
 8004794:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004798:	2200      	movs	r2, #0
 800479a:	61bb      	str	r3, [r7, #24]
 800479c:	61fa      	str	r2, [r7, #28]
 800479e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047a2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80047a6:	f7fb fd23 	bl	80001f0 <__aeabi_uldivmod>
 80047aa:	4602      	mov	r2, r0
 80047ac:	460b      	mov	r3, r1
 80047ae:	4613      	mov	r3, r2
 80047b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047b2:	e053      	b.n	800485c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047b4:	4b35      	ldr	r3, [pc, #212]	; (800488c <HAL_RCC_GetSysClockFreq+0x180>)
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	099b      	lsrs	r3, r3, #6
 80047ba:	2200      	movs	r2, #0
 80047bc:	613b      	str	r3, [r7, #16]
 80047be:	617a      	str	r2, [r7, #20]
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80047c6:	f04f 0b00 	mov.w	fp, #0
 80047ca:	4652      	mov	r2, sl
 80047cc:	465b      	mov	r3, fp
 80047ce:	f04f 0000 	mov.w	r0, #0
 80047d2:	f04f 0100 	mov.w	r1, #0
 80047d6:	0159      	lsls	r1, r3, #5
 80047d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047dc:	0150      	lsls	r0, r2, #5
 80047de:	4602      	mov	r2, r0
 80047e0:	460b      	mov	r3, r1
 80047e2:	ebb2 080a 	subs.w	r8, r2, sl
 80047e6:	eb63 090b 	sbc.w	r9, r3, fp
 80047ea:	f04f 0200 	mov.w	r2, #0
 80047ee:	f04f 0300 	mov.w	r3, #0
 80047f2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80047f6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80047fa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80047fe:	ebb2 0408 	subs.w	r4, r2, r8
 8004802:	eb63 0509 	sbc.w	r5, r3, r9
 8004806:	f04f 0200 	mov.w	r2, #0
 800480a:	f04f 0300 	mov.w	r3, #0
 800480e:	00eb      	lsls	r3, r5, #3
 8004810:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004814:	00e2      	lsls	r2, r4, #3
 8004816:	4614      	mov	r4, r2
 8004818:	461d      	mov	r5, r3
 800481a:	eb14 030a 	adds.w	r3, r4, sl
 800481e:	603b      	str	r3, [r7, #0]
 8004820:	eb45 030b 	adc.w	r3, r5, fp
 8004824:	607b      	str	r3, [r7, #4]
 8004826:	f04f 0200 	mov.w	r2, #0
 800482a:	f04f 0300 	mov.w	r3, #0
 800482e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004832:	4629      	mov	r1, r5
 8004834:	028b      	lsls	r3, r1, #10
 8004836:	4621      	mov	r1, r4
 8004838:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800483c:	4621      	mov	r1, r4
 800483e:	028a      	lsls	r2, r1, #10
 8004840:	4610      	mov	r0, r2
 8004842:	4619      	mov	r1, r3
 8004844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004846:	2200      	movs	r2, #0
 8004848:	60bb      	str	r3, [r7, #8]
 800484a:	60fa      	str	r2, [r7, #12]
 800484c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004850:	f7fb fcce 	bl	80001f0 <__aeabi_uldivmod>
 8004854:	4602      	mov	r2, r0
 8004856:	460b      	mov	r3, r1
 8004858:	4613      	mov	r3, r2
 800485a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800485c:	4b0b      	ldr	r3, [pc, #44]	; (800488c <HAL_RCC_GetSysClockFreq+0x180>)
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	0c1b      	lsrs	r3, r3, #16
 8004862:	f003 0303 	and.w	r3, r3, #3
 8004866:	3301      	adds	r3, #1
 8004868:	005b      	lsls	r3, r3, #1
 800486a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800486c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800486e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004870:	fbb2 f3f3 	udiv	r3, r2, r3
 8004874:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004876:	e002      	b.n	800487e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004878:	4b05      	ldr	r3, [pc, #20]	; (8004890 <HAL_RCC_GetSysClockFreq+0x184>)
 800487a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800487c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800487e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004880:	4618      	mov	r0, r3
 8004882:	3740      	adds	r7, #64	; 0x40
 8004884:	46bd      	mov	sp, r7
 8004886:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800488a:	bf00      	nop
 800488c:	40023800 	.word	0x40023800
 8004890:	00f42400 	.word	0x00f42400
 8004894:	00b71b00 	.word	0x00b71b00

08004898 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004898:	b480      	push	{r7}
 800489a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800489c:	4b03      	ldr	r3, [pc, #12]	; (80048ac <HAL_RCC_GetHCLKFreq+0x14>)
 800489e:	681b      	ldr	r3, [r3, #0]
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr
 80048aa:	bf00      	nop
 80048ac:	20000000 	.word	0x20000000

080048b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80048b4:	f7ff fff0 	bl	8004898 <HAL_RCC_GetHCLKFreq>
 80048b8:	4602      	mov	r2, r0
 80048ba:	4b05      	ldr	r3, [pc, #20]	; (80048d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	0a9b      	lsrs	r3, r3, #10
 80048c0:	f003 0307 	and.w	r3, r3, #7
 80048c4:	4903      	ldr	r1, [pc, #12]	; (80048d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048c6:	5ccb      	ldrb	r3, [r1, r3]
 80048c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	40023800 	.word	0x40023800
 80048d4:	0800cb44 	.word	0x0800cb44

080048d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80048dc:	f7ff ffdc 	bl	8004898 <HAL_RCC_GetHCLKFreq>
 80048e0:	4602      	mov	r2, r0
 80048e2:	4b05      	ldr	r3, [pc, #20]	; (80048f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	0b5b      	lsrs	r3, r3, #13
 80048e8:	f003 0307 	and.w	r3, r3, #7
 80048ec:	4903      	ldr	r1, [pc, #12]	; (80048fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80048ee:	5ccb      	ldrb	r3, [r1, r3]
 80048f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	40023800 	.word	0x40023800
 80048fc:	0800cb44 	.word	0x0800cb44

08004900 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	220f      	movs	r2, #15
 800490e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004910:	4b12      	ldr	r3, [pc, #72]	; (800495c <HAL_RCC_GetClockConfig+0x5c>)
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	f003 0203 	and.w	r2, r3, #3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800491c:	4b0f      	ldr	r3, [pc, #60]	; (800495c <HAL_RCC_GetClockConfig+0x5c>)
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004928:	4b0c      	ldr	r3, [pc, #48]	; (800495c <HAL_RCC_GetClockConfig+0x5c>)
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004934:	4b09      	ldr	r3, [pc, #36]	; (800495c <HAL_RCC_GetClockConfig+0x5c>)
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	08db      	lsrs	r3, r3, #3
 800493a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004942:	4b07      	ldr	r3, [pc, #28]	; (8004960 <HAL_RCC_GetClockConfig+0x60>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 020f 	and.w	r2, r3, #15
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	601a      	str	r2, [r3, #0]
}
 800494e:	bf00      	nop
 8004950:	370c      	adds	r7, #12
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr
 800495a:	bf00      	nop
 800495c:	40023800 	.word	0x40023800
 8004960:	40023c00 	.word	0x40023c00

08004964 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b082      	sub	sp, #8
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d101      	bne.n	8004976 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e07b      	b.n	8004a6e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497a:	2b00      	cmp	r3, #0
 800497c:	d108      	bne.n	8004990 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004986:	d009      	beq.n	800499c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	61da      	str	r2, [r3, #28]
 800498e:	e005      	b.n	800499c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d106      	bne.n	80049bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f7fc f9b2 	bl	8000d20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2202      	movs	r2, #2
 80049c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049d2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80049e4:	431a      	orrs	r2, r3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049ee:	431a      	orrs	r2, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	691b      	ldr	r3, [r3, #16]
 80049f4:	f003 0302 	and.w	r3, r3, #2
 80049f8:	431a      	orrs	r2, r3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	695b      	ldr	r3, [r3, #20]
 80049fe:	f003 0301 	and.w	r3, r3, #1
 8004a02:	431a      	orrs	r2, r3
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	699b      	ldr	r3, [r3, #24]
 8004a08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a0c:	431a      	orrs	r2, r3
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	69db      	ldr	r3, [r3, #28]
 8004a12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a16:	431a      	orrs	r2, r3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6a1b      	ldr	r3, [r3, #32]
 8004a1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a20:	ea42 0103 	orr.w	r1, r2, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a28:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	430a      	orrs	r2, r1
 8004a32:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	699b      	ldr	r3, [r3, #24]
 8004a38:	0c1b      	lsrs	r3, r3, #16
 8004a3a:	f003 0104 	and.w	r1, r3, #4
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a42:	f003 0210 	and.w	r2, r3, #16
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	430a      	orrs	r2, r1
 8004a4c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	69da      	ldr	r2, [r3, #28]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a5c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004a6c:	2300      	movs	r3, #0
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3708      	adds	r7, #8
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}

08004a76 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a76:	b580      	push	{r7, lr}
 8004a78:	b082      	sub	sp, #8
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d101      	bne.n	8004a88 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e041      	b.n	8004b0c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d106      	bne.n	8004aa2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f7fc fc71 	bl	8001384 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2202      	movs	r2, #2
 8004aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	3304      	adds	r3, #4
 8004ab2:	4619      	mov	r1, r3
 8004ab4:	4610      	mov	r0, r2
 8004ab6:	f000 fb8f 	bl	80051d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2201      	movs	r2, #1
 8004abe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2201      	movs	r2, #1
 8004ace:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2201      	movs	r2, #1
 8004ade:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2201      	movs	r2, #1
 8004aee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2201      	movs	r2, #1
 8004af6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2201      	movs	r2, #1
 8004afe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2201      	movs	r2, #1
 8004b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b0a:	2300      	movs	r3, #0
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3708      	adds	r7, #8
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b085      	sub	sp, #20
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d001      	beq.n	8004b2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e04e      	b.n	8004bca <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2202      	movs	r2, #2
 8004b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	68da      	ldr	r2, [r3, #12]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f042 0201 	orr.w	r2, r2, #1
 8004b42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a23      	ldr	r2, [pc, #140]	; (8004bd8 <HAL_TIM_Base_Start_IT+0xc4>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d022      	beq.n	8004b94 <HAL_TIM_Base_Start_IT+0x80>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b56:	d01d      	beq.n	8004b94 <HAL_TIM_Base_Start_IT+0x80>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a1f      	ldr	r2, [pc, #124]	; (8004bdc <HAL_TIM_Base_Start_IT+0xc8>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d018      	beq.n	8004b94 <HAL_TIM_Base_Start_IT+0x80>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a1e      	ldr	r2, [pc, #120]	; (8004be0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d013      	beq.n	8004b94 <HAL_TIM_Base_Start_IT+0x80>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a1c      	ldr	r2, [pc, #112]	; (8004be4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d00e      	beq.n	8004b94 <HAL_TIM_Base_Start_IT+0x80>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a1b      	ldr	r2, [pc, #108]	; (8004be8 <HAL_TIM_Base_Start_IT+0xd4>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d009      	beq.n	8004b94 <HAL_TIM_Base_Start_IT+0x80>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a19      	ldr	r2, [pc, #100]	; (8004bec <HAL_TIM_Base_Start_IT+0xd8>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d004      	beq.n	8004b94 <HAL_TIM_Base_Start_IT+0x80>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a18      	ldr	r2, [pc, #96]	; (8004bf0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d111      	bne.n	8004bb8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	f003 0307 	and.w	r3, r3, #7
 8004b9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2b06      	cmp	r3, #6
 8004ba4:	d010      	beq.n	8004bc8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f042 0201 	orr.w	r2, r2, #1
 8004bb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bb6:	e007      	b.n	8004bc8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f042 0201 	orr.w	r2, r2, #1
 8004bc6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3714      	adds	r7, #20
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr
 8004bd6:	bf00      	nop
 8004bd8:	40010000 	.word	0x40010000
 8004bdc:	40000400 	.word	0x40000400
 8004be0:	40000800 	.word	0x40000800
 8004be4:	40000c00 	.word	0x40000c00
 8004be8:	40010400 	.word	0x40010400
 8004bec:	40014000 	.word	0x40014000
 8004bf0:	40001800 	.word	0x40001800

08004bf4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b082      	sub	sp, #8
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d101      	bne.n	8004c06 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e041      	b.n	8004c8a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d106      	bne.n	8004c20 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f7fc fb64 	bl	80012e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2202      	movs	r2, #2
 8004c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	3304      	adds	r3, #4
 8004c30:	4619      	mov	r1, r3
 8004c32:	4610      	mov	r0, r2
 8004c34:	f000 fad0 	bl	80051d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3708      	adds	r7, #8
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}

08004c92 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c92:	b580      	push	{r7, lr}
 8004c94:	b084      	sub	sp, #16
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	f003 0302 	and.w	r3, r3, #2
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d020      	beq.n	8004cf6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f003 0302 	and.w	r3, r3, #2
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d01b      	beq.n	8004cf6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f06f 0202 	mvn.w	r2, #2
 8004cc6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	699b      	ldr	r3, [r3, #24]
 8004cd4:	f003 0303 	and.w	r3, r3, #3
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d003      	beq.n	8004ce4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f000 fa5c 	bl	800519a <HAL_TIM_IC_CaptureCallback>
 8004ce2:	e005      	b.n	8004cf0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f000 fa4e 	bl	8005186 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f000 fa5f 	bl	80051ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	f003 0304 	and.w	r3, r3, #4
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d020      	beq.n	8004d42 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f003 0304 	and.w	r3, r3, #4
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d01b      	beq.n	8004d42 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f06f 0204 	mvn.w	r2, #4
 8004d12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2202      	movs	r2, #2
 8004d18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	699b      	ldr	r3, [r3, #24]
 8004d20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d003      	beq.n	8004d30 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f000 fa36 	bl	800519a <HAL_TIM_IC_CaptureCallback>
 8004d2e:	e005      	b.n	8004d3c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f000 fa28 	bl	8005186 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f000 fa39 	bl	80051ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	f003 0308 	and.w	r3, r3, #8
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d020      	beq.n	8004d8e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f003 0308 	and.w	r3, r3, #8
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d01b      	beq.n	8004d8e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f06f 0208 	mvn.w	r2, #8
 8004d5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2204      	movs	r2, #4
 8004d64:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	69db      	ldr	r3, [r3, #28]
 8004d6c:	f003 0303 	and.w	r3, r3, #3
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d003      	beq.n	8004d7c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f000 fa10 	bl	800519a <HAL_TIM_IC_CaptureCallback>
 8004d7a:	e005      	b.n	8004d88 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f000 fa02 	bl	8005186 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 fa13 	bl	80051ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	f003 0310 	and.w	r3, r3, #16
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d020      	beq.n	8004dda <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f003 0310 	and.w	r3, r3, #16
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d01b      	beq.n	8004dda <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f06f 0210 	mvn.w	r2, #16
 8004daa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2208      	movs	r2, #8
 8004db0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	69db      	ldr	r3, [r3, #28]
 8004db8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d003      	beq.n	8004dc8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f000 f9ea 	bl	800519a <HAL_TIM_IC_CaptureCallback>
 8004dc6:	e005      	b.n	8004dd4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f000 f9dc 	bl	8005186 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f000 f9ed 	bl	80051ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	f003 0301 	and.w	r3, r3, #1
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d00c      	beq.n	8004dfe <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f003 0301 	and.w	r3, r3, #1
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d007      	beq.n	8004dfe <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f06f 0201 	mvn.w	r2, #1
 8004df6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f7fb ff43 	bl	8000c84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d00c      	beq.n	8004e22 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d007      	beq.n	8004e22 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f000 fda9 	bl	8005974 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d00c      	beq.n	8004e46 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d007      	beq.n	8004e46 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f000 f9be 	bl	80051c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	f003 0320 	and.w	r3, r3, #32
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d00c      	beq.n	8004e6a <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f003 0320 	and.w	r3, r3, #32
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d007      	beq.n	8004e6a <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f06f 0220 	mvn.w	r2, #32
 8004e62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f000 fd7b 	bl	8005960 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e6a:	bf00      	nop
 8004e6c:	3710      	adds	r7, #16
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
	...

08004e74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b086      	sub	sp, #24
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	60b9      	str	r1, [r7, #8]
 8004e7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e80:	2300      	movs	r3, #0
 8004e82:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d101      	bne.n	8004e92 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004e8e:	2302      	movs	r3, #2
 8004e90:	e0ae      	b.n	8004ff0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2201      	movs	r2, #1
 8004e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2b0c      	cmp	r3, #12
 8004e9e:	f200 809f 	bhi.w	8004fe0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004ea2:	a201      	add	r2, pc, #4	; (adr r2, 8004ea8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ea8:	08004edd 	.word	0x08004edd
 8004eac:	08004fe1 	.word	0x08004fe1
 8004eb0:	08004fe1 	.word	0x08004fe1
 8004eb4:	08004fe1 	.word	0x08004fe1
 8004eb8:	08004f1d 	.word	0x08004f1d
 8004ebc:	08004fe1 	.word	0x08004fe1
 8004ec0:	08004fe1 	.word	0x08004fe1
 8004ec4:	08004fe1 	.word	0x08004fe1
 8004ec8:	08004f5f 	.word	0x08004f5f
 8004ecc:	08004fe1 	.word	0x08004fe1
 8004ed0:	08004fe1 	.word	0x08004fe1
 8004ed4:	08004fe1 	.word	0x08004fe1
 8004ed8:	08004f9f 	.word	0x08004f9f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	68b9      	ldr	r1, [r7, #8]
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f000 fa24 	bl	8005330 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	699a      	ldr	r2, [r3, #24]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f042 0208 	orr.w	r2, r2, #8
 8004ef6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	699a      	ldr	r2, [r3, #24]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f022 0204 	bic.w	r2, r2, #4
 8004f06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	6999      	ldr	r1, [r3, #24]
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	691a      	ldr	r2, [r3, #16]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	430a      	orrs	r2, r1
 8004f18:	619a      	str	r2, [r3, #24]
      break;
 8004f1a:	e064      	b.n	8004fe6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	68b9      	ldr	r1, [r7, #8]
 8004f22:	4618      	mov	r0, r3
 8004f24:	f000 fa74 	bl	8005410 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	699a      	ldr	r2, [r3, #24]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	699a      	ldr	r2, [r3, #24]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	6999      	ldr	r1, [r3, #24]
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	021a      	lsls	r2, r3, #8
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	430a      	orrs	r2, r1
 8004f5a:	619a      	str	r2, [r3, #24]
      break;
 8004f5c:	e043      	b.n	8004fe6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	68b9      	ldr	r1, [r7, #8]
 8004f64:	4618      	mov	r0, r3
 8004f66:	f000 fac9 	bl	80054fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	69da      	ldr	r2, [r3, #28]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f042 0208 	orr.w	r2, r2, #8
 8004f78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	69da      	ldr	r2, [r3, #28]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f022 0204 	bic.w	r2, r2, #4
 8004f88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	69d9      	ldr	r1, [r3, #28]
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	691a      	ldr	r2, [r3, #16]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	430a      	orrs	r2, r1
 8004f9a:	61da      	str	r2, [r3, #28]
      break;
 8004f9c:	e023      	b.n	8004fe6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	68b9      	ldr	r1, [r7, #8]
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f000 fb1d 	bl	80055e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	69da      	ldr	r2, [r3, #28]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	69da      	ldr	r2, [r3, #28]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	69d9      	ldr	r1, [r3, #28]
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	691b      	ldr	r3, [r3, #16]
 8004fd4:	021a      	lsls	r2, r3, #8
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	430a      	orrs	r2, r1
 8004fdc:	61da      	str	r2, [r3, #28]
      break;
 8004fde:	e002      	b.n	8004fe6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	75fb      	strb	r3, [r7, #23]
      break;
 8004fe4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004fee:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3718      	adds	r7, #24
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b084      	sub	sp, #16
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005002:	2300      	movs	r3, #0
 8005004:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800500c:	2b01      	cmp	r3, #1
 800500e:	d101      	bne.n	8005014 <HAL_TIM_ConfigClockSource+0x1c>
 8005010:	2302      	movs	r3, #2
 8005012:	e0b4      	b.n	800517e <HAL_TIM_ConfigClockSource+0x186>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2202      	movs	r2, #2
 8005020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005032:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800503a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68ba      	ldr	r2, [r7, #8]
 8005042:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800504c:	d03e      	beq.n	80050cc <HAL_TIM_ConfigClockSource+0xd4>
 800504e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005052:	f200 8087 	bhi.w	8005164 <HAL_TIM_ConfigClockSource+0x16c>
 8005056:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800505a:	f000 8086 	beq.w	800516a <HAL_TIM_ConfigClockSource+0x172>
 800505e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005062:	d87f      	bhi.n	8005164 <HAL_TIM_ConfigClockSource+0x16c>
 8005064:	2b70      	cmp	r3, #112	; 0x70
 8005066:	d01a      	beq.n	800509e <HAL_TIM_ConfigClockSource+0xa6>
 8005068:	2b70      	cmp	r3, #112	; 0x70
 800506a:	d87b      	bhi.n	8005164 <HAL_TIM_ConfigClockSource+0x16c>
 800506c:	2b60      	cmp	r3, #96	; 0x60
 800506e:	d050      	beq.n	8005112 <HAL_TIM_ConfigClockSource+0x11a>
 8005070:	2b60      	cmp	r3, #96	; 0x60
 8005072:	d877      	bhi.n	8005164 <HAL_TIM_ConfigClockSource+0x16c>
 8005074:	2b50      	cmp	r3, #80	; 0x50
 8005076:	d03c      	beq.n	80050f2 <HAL_TIM_ConfigClockSource+0xfa>
 8005078:	2b50      	cmp	r3, #80	; 0x50
 800507a:	d873      	bhi.n	8005164 <HAL_TIM_ConfigClockSource+0x16c>
 800507c:	2b40      	cmp	r3, #64	; 0x40
 800507e:	d058      	beq.n	8005132 <HAL_TIM_ConfigClockSource+0x13a>
 8005080:	2b40      	cmp	r3, #64	; 0x40
 8005082:	d86f      	bhi.n	8005164 <HAL_TIM_ConfigClockSource+0x16c>
 8005084:	2b30      	cmp	r3, #48	; 0x30
 8005086:	d064      	beq.n	8005152 <HAL_TIM_ConfigClockSource+0x15a>
 8005088:	2b30      	cmp	r3, #48	; 0x30
 800508a:	d86b      	bhi.n	8005164 <HAL_TIM_ConfigClockSource+0x16c>
 800508c:	2b20      	cmp	r3, #32
 800508e:	d060      	beq.n	8005152 <HAL_TIM_ConfigClockSource+0x15a>
 8005090:	2b20      	cmp	r3, #32
 8005092:	d867      	bhi.n	8005164 <HAL_TIM_ConfigClockSource+0x16c>
 8005094:	2b00      	cmp	r3, #0
 8005096:	d05c      	beq.n	8005152 <HAL_TIM_ConfigClockSource+0x15a>
 8005098:	2b10      	cmp	r3, #16
 800509a:	d05a      	beq.n	8005152 <HAL_TIM_ConfigClockSource+0x15a>
 800509c:	e062      	b.n	8005164 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80050ae:	f000 fb69 	bl	8005784 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80050c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	68ba      	ldr	r2, [r7, #8]
 80050c8:	609a      	str	r2, [r3, #8]
      break;
 80050ca:	e04f      	b.n	800516c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80050dc:	f000 fb52 	bl	8005784 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	689a      	ldr	r2, [r3, #8]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80050ee:	609a      	str	r2, [r3, #8]
      break;
 80050f0:	e03c      	b.n	800516c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050fe:	461a      	mov	r2, r3
 8005100:	f000 fac6 	bl	8005690 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	2150      	movs	r1, #80	; 0x50
 800510a:	4618      	mov	r0, r3
 800510c:	f000 fb1f 	bl	800574e <TIM_ITRx_SetConfig>
      break;
 8005110:	e02c      	b.n	800516c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800511e:	461a      	mov	r2, r3
 8005120:	f000 fae5 	bl	80056ee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	2160      	movs	r1, #96	; 0x60
 800512a:	4618      	mov	r0, r3
 800512c:	f000 fb0f 	bl	800574e <TIM_ITRx_SetConfig>
      break;
 8005130:	e01c      	b.n	800516c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800513e:	461a      	mov	r2, r3
 8005140:	f000 faa6 	bl	8005690 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	2140      	movs	r1, #64	; 0x40
 800514a:	4618      	mov	r0, r3
 800514c:	f000 faff 	bl	800574e <TIM_ITRx_SetConfig>
      break;
 8005150:	e00c      	b.n	800516c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4619      	mov	r1, r3
 800515c:	4610      	mov	r0, r2
 800515e:	f000 faf6 	bl	800574e <TIM_ITRx_SetConfig>
      break;
 8005162:	e003      	b.n	800516c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	73fb      	strb	r3, [r7, #15]
      break;
 8005168:	e000      	b.n	800516c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800516a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2200      	movs	r2, #0
 8005178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800517c:	7bfb      	ldrb	r3, [r7, #15]
}
 800517e:	4618      	mov	r0, r3
 8005180:	3710      	adds	r7, #16
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}

08005186 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005186:	b480      	push	{r7}
 8005188:	b083      	sub	sp, #12
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800518e:	bf00      	nop
 8005190:	370c      	adds	r7, #12
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr

0800519a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800519a:	b480      	push	{r7}
 800519c:	b083      	sub	sp, #12
 800519e:	af00      	add	r7, sp, #0
 80051a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80051a2:	bf00      	nop
 80051a4:	370c      	adds	r7, #12
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr

080051ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051ae:	b480      	push	{r7}
 80051b0:	b083      	sub	sp, #12
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80051b6:	bf00      	nop
 80051b8:	370c      	adds	r7, #12
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr

080051c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051c2:	b480      	push	{r7}
 80051c4:	b083      	sub	sp, #12
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051ca:	bf00      	nop
 80051cc:	370c      	adds	r7, #12
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr
	...

080051d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80051d8:	b480      	push	{r7}
 80051da:	b085      	sub	sp, #20
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a46      	ldr	r2, [pc, #280]	; (8005304 <TIM_Base_SetConfig+0x12c>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d013      	beq.n	8005218 <TIM_Base_SetConfig+0x40>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051f6:	d00f      	beq.n	8005218 <TIM_Base_SetConfig+0x40>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	4a43      	ldr	r2, [pc, #268]	; (8005308 <TIM_Base_SetConfig+0x130>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d00b      	beq.n	8005218 <TIM_Base_SetConfig+0x40>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4a42      	ldr	r2, [pc, #264]	; (800530c <TIM_Base_SetConfig+0x134>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d007      	beq.n	8005218 <TIM_Base_SetConfig+0x40>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4a41      	ldr	r2, [pc, #260]	; (8005310 <TIM_Base_SetConfig+0x138>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d003      	beq.n	8005218 <TIM_Base_SetConfig+0x40>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4a40      	ldr	r2, [pc, #256]	; (8005314 <TIM_Base_SetConfig+0x13c>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d108      	bne.n	800522a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800521e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	68fa      	ldr	r2, [r7, #12]
 8005226:	4313      	orrs	r3, r2
 8005228:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a35      	ldr	r2, [pc, #212]	; (8005304 <TIM_Base_SetConfig+0x12c>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d02b      	beq.n	800528a <TIM_Base_SetConfig+0xb2>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005238:	d027      	beq.n	800528a <TIM_Base_SetConfig+0xb2>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a32      	ldr	r2, [pc, #200]	; (8005308 <TIM_Base_SetConfig+0x130>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d023      	beq.n	800528a <TIM_Base_SetConfig+0xb2>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a31      	ldr	r2, [pc, #196]	; (800530c <TIM_Base_SetConfig+0x134>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d01f      	beq.n	800528a <TIM_Base_SetConfig+0xb2>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a30      	ldr	r2, [pc, #192]	; (8005310 <TIM_Base_SetConfig+0x138>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d01b      	beq.n	800528a <TIM_Base_SetConfig+0xb2>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a2f      	ldr	r2, [pc, #188]	; (8005314 <TIM_Base_SetConfig+0x13c>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d017      	beq.n	800528a <TIM_Base_SetConfig+0xb2>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a2e      	ldr	r2, [pc, #184]	; (8005318 <TIM_Base_SetConfig+0x140>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d013      	beq.n	800528a <TIM_Base_SetConfig+0xb2>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a2d      	ldr	r2, [pc, #180]	; (800531c <TIM_Base_SetConfig+0x144>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d00f      	beq.n	800528a <TIM_Base_SetConfig+0xb2>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a2c      	ldr	r2, [pc, #176]	; (8005320 <TIM_Base_SetConfig+0x148>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d00b      	beq.n	800528a <TIM_Base_SetConfig+0xb2>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a2b      	ldr	r2, [pc, #172]	; (8005324 <TIM_Base_SetConfig+0x14c>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d007      	beq.n	800528a <TIM_Base_SetConfig+0xb2>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a2a      	ldr	r2, [pc, #168]	; (8005328 <TIM_Base_SetConfig+0x150>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d003      	beq.n	800528a <TIM_Base_SetConfig+0xb2>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a29      	ldr	r2, [pc, #164]	; (800532c <TIM_Base_SetConfig+0x154>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d108      	bne.n	800529c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005290:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	68db      	ldr	r3, [r3, #12]
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	4313      	orrs	r3, r2
 800529a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	695b      	ldr	r3, [r3, #20]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	68fa      	ldr	r2, [r7, #12]
 80052ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	689a      	ldr	r2, [r3, #8]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	4a10      	ldr	r2, [pc, #64]	; (8005304 <TIM_Base_SetConfig+0x12c>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d003      	beq.n	80052d0 <TIM_Base_SetConfig+0xf8>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4a12      	ldr	r2, [pc, #72]	; (8005314 <TIM_Base_SetConfig+0x13c>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d103      	bne.n	80052d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	691a      	ldr	r2, [r3, #16]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	f003 0301 	and.w	r3, r3, #1
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d105      	bne.n	80052f6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	f023 0201 	bic.w	r2, r3, #1
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	611a      	str	r2, [r3, #16]
  }
}
 80052f6:	bf00      	nop
 80052f8:	3714      	adds	r7, #20
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr
 8005302:	bf00      	nop
 8005304:	40010000 	.word	0x40010000
 8005308:	40000400 	.word	0x40000400
 800530c:	40000800 	.word	0x40000800
 8005310:	40000c00 	.word	0x40000c00
 8005314:	40010400 	.word	0x40010400
 8005318:	40014000 	.word	0x40014000
 800531c:	40014400 	.word	0x40014400
 8005320:	40014800 	.word	0x40014800
 8005324:	40001800 	.word	0x40001800
 8005328:	40001c00 	.word	0x40001c00
 800532c:	40002000 	.word	0x40002000

08005330 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005330:	b480      	push	{r7}
 8005332:	b087      	sub	sp, #28
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a1b      	ldr	r3, [r3, #32]
 800533e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6a1b      	ldr	r3, [r3, #32]
 8005344:	f023 0201 	bic.w	r2, r3, #1
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	699b      	ldr	r3, [r3, #24]
 8005356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800535e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f023 0303 	bic.w	r3, r3, #3
 8005366:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	4313      	orrs	r3, r2
 8005370:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	f023 0302 	bic.w	r3, r3, #2
 8005378:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	697a      	ldr	r2, [r7, #20]
 8005380:	4313      	orrs	r3, r2
 8005382:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4a20      	ldr	r2, [pc, #128]	; (8005408 <TIM_OC1_SetConfig+0xd8>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d003      	beq.n	8005394 <TIM_OC1_SetConfig+0x64>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a1f      	ldr	r2, [pc, #124]	; (800540c <TIM_OC1_SetConfig+0xdc>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d10c      	bne.n	80053ae <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	f023 0308 	bic.w	r3, r3, #8
 800539a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	697a      	ldr	r2, [r7, #20]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	f023 0304 	bic.w	r3, r3, #4
 80053ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a15      	ldr	r2, [pc, #84]	; (8005408 <TIM_OC1_SetConfig+0xd8>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d003      	beq.n	80053be <TIM_OC1_SetConfig+0x8e>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a14      	ldr	r2, [pc, #80]	; (800540c <TIM_OC1_SetConfig+0xdc>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d111      	bne.n	80053e2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	695b      	ldr	r3, [r3, #20]
 80053d2:	693a      	ldr	r2, [r7, #16]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	699b      	ldr	r3, [r3, #24]
 80053dc:	693a      	ldr	r2, [r7, #16]
 80053de:	4313      	orrs	r3, r2
 80053e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	693a      	ldr	r2, [r7, #16]
 80053e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	68fa      	ldr	r2, [r7, #12]
 80053ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	685a      	ldr	r2, [r3, #4]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	697a      	ldr	r2, [r7, #20]
 80053fa:	621a      	str	r2, [r3, #32]
}
 80053fc:	bf00      	nop
 80053fe:	371c      	adds	r7, #28
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr
 8005408:	40010000 	.word	0x40010000
 800540c:	40010400 	.word	0x40010400

08005410 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005410:	b480      	push	{r7}
 8005412:	b087      	sub	sp, #28
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a1b      	ldr	r3, [r3, #32]
 800541e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6a1b      	ldr	r3, [r3, #32]
 8005424:	f023 0210 	bic.w	r2, r3, #16
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	699b      	ldr	r3, [r3, #24]
 8005436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800543e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005446:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	021b      	lsls	r3, r3, #8
 800544e:	68fa      	ldr	r2, [r7, #12]
 8005450:	4313      	orrs	r3, r2
 8005452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	f023 0320 	bic.w	r3, r3, #32
 800545a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	011b      	lsls	r3, r3, #4
 8005462:	697a      	ldr	r2, [r7, #20]
 8005464:	4313      	orrs	r3, r2
 8005466:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4a22      	ldr	r2, [pc, #136]	; (80054f4 <TIM_OC2_SetConfig+0xe4>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d003      	beq.n	8005478 <TIM_OC2_SetConfig+0x68>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	4a21      	ldr	r2, [pc, #132]	; (80054f8 <TIM_OC2_SetConfig+0xe8>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d10d      	bne.n	8005494 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800547e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	011b      	lsls	r3, r3, #4
 8005486:	697a      	ldr	r2, [r7, #20]
 8005488:	4313      	orrs	r3, r2
 800548a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005492:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	4a17      	ldr	r2, [pc, #92]	; (80054f4 <TIM_OC2_SetConfig+0xe4>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d003      	beq.n	80054a4 <TIM_OC2_SetConfig+0x94>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	4a16      	ldr	r2, [pc, #88]	; (80054f8 <TIM_OC2_SetConfig+0xe8>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d113      	bne.n	80054cc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80054b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	695b      	ldr	r3, [r3, #20]
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	693a      	ldr	r2, [r7, #16]
 80054bc:	4313      	orrs	r3, r2
 80054be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	699b      	ldr	r3, [r3, #24]
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	693a      	ldr	r2, [r7, #16]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	693a      	ldr	r2, [r7, #16]
 80054d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	68fa      	ldr	r2, [r7, #12]
 80054d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	685a      	ldr	r2, [r3, #4]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	697a      	ldr	r2, [r7, #20]
 80054e4:	621a      	str	r2, [r3, #32]
}
 80054e6:	bf00      	nop
 80054e8:	371c      	adds	r7, #28
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr
 80054f2:	bf00      	nop
 80054f4:	40010000 	.word	0x40010000
 80054f8:	40010400 	.word	0x40010400

080054fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b087      	sub	sp, #28
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a1b      	ldr	r3, [r3, #32]
 800550a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6a1b      	ldr	r3, [r3, #32]
 8005510:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	69db      	ldr	r3, [r3, #28]
 8005522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800552a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f023 0303 	bic.w	r3, r3, #3
 8005532:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	68fa      	ldr	r2, [r7, #12]
 800553a:	4313      	orrs	r3, r2
 800553c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005544:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	021b      	lsls	r3, r3, #8
 800554c:	697a      	ldr	r2, [r7, #20]
 800554e:	4313      	orrs	r3, r2
 8005550:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a21      	ldr	r2, [pc, #132]	; (80055dc <TIM_OC3_SetConfig+0xe0>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d003      	beq.n	8005562 <TIM_OC3_SetConfig+0x66>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4a20      	ldr	r2, [pc, #128]	; (80055e0 <TIM_OC3_SetConfig+0xe4>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d10d      	bne.n	800557e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005568:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	021b      	lsls	r3, r3, #8
 8005570:	697a      	ldr	r2, [r7, #20]
 8005572:	4313      	orrs	r3, r2
 8005574:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800557c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4a16      	ldr	r2, [pc, #88]	; (80055dc <TIM_OC3_SetConfig+0xe0>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d003      	beq.n	800558e <TIM_OC3_SetConfig+0x92>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4a15      	ldr	r2, [pc, #84]	; (80055e0 <TIM_OC3_SetConfig+0xe4>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d113      	bne.n	80055b6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005594:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800559c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	695b      	ldr	r3, [r3, #20]
 80055a2:	011b      	lsls	r3, r3, #4
 80055a4:	693a      	ldr	r2, [r7, #16]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	699b      	ldr	r3, [r3, #24]
 80055ae:	011b      	lsls	r3, r3, #4
 80055b0:	693a      	ldr	r2, [r7, #16]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	693a      	ldr	r2, [r7, #16]
 80055ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	68fa      	ldr	r2, [r7, #12]
 80055c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	685a      	ldr	r2, [r3, #4]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	697a      	ldr	r2, [r7, #20]
 80055ce:	621a      	str	r2, [r3, #32]
}
 80055d0:	bf00      	nop
 80055d2:	371c      	adds	r7, #28
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr
 80055dc:	40010000 	.word	0x40010000
 80055e0:	40010400 	.word	0x40010400

080055e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b087      	sub	sp, #28
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6a1b      	ldr	r3, [r3, #32]
 80055f2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6a1b      	ldr	r3, [r3, #32]
 80055f8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	69db      	ldr	r3, [r3, #28]
 800560a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005612:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800561a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	021b      	lsls	r3, r3, #8
 8005622:	68fa      	ldr	r2, [r7, #12]
 8005624:	4313      	orrs	r3, r2
 8005626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800562e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	031b      	lsls	r3, r3, #12
 8005636:	693a      	ldr	r2, [r7, #16]
 8005638:	4313      	orrs	r3, r2
 800563a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	4a12      	ldr	r2, [pc, #72]	; (8005688 <TIM_OC4_SetConfig+0xa4>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d003      	beq.n	800564c <TIM_OC4_SetConfig+0x68>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4a11      	ldr	r2, [pc, #68]	; (800568c <TIM_OC4_SetConfig+0xa8>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d109      	bne.n	8005660 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005652:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	695b      	ldr	r3, [r3, #20]
 8005658:	019b      	lsls	r3, r3, #6
 800565a:	697a      	ldr	r2, [r7, #20]
 800565c:	4313      	orrs	r3, r2
 800565e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	697a      	ldr	r2, [r7, #20]
 8005664:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	68fa      	ldr	r2, [r7, #12]
 800566a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	685a      	ldr	r2, [r3, #4]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	693a      	ldr	r2, [r7, #16]
 8005678:	621a      	str	r2, [r3, #32]
}
 800567a:	bf00      	nop
 800567c:	371c      	adds	r7, #28
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr
 8005686:	bf00      	nop
 8005688:	40010000 	.word	0x40010000
 800568c:	40010400 	.word	0x40010400

08005690 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005690:	b480      	push	{r7}
 8005692:	b087      	sub	sp, #28
 8005694:	af00      	add	r7, sp, #0
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	6a1b      	ldr	r3, [r3, #32]
 80056a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	6a1b      	ldr	r3, [r3, #32]
 80056a6:	f023 0201 	bic.w	r2, r3, #1
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	699b      	ldr	r3, [r3, #24]
 80056b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	011b      	lsls	r3, r3, #4
 80056c0:	693a      	ldr	r2, [r7, #16]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	f023 030a 	bic.w	r3, r3, #10
 80056cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80056ce:	697a      	ldr	r2, [r7, #20]
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	693a      	ldr	r2, [r7, #16]
 80056da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	697a      	ldr	r2, [r7, #20]
 80056e0:	621a      	str	r2, [r3, #32]
}
 80056e2:	bf00      	nop
 80056e4:	371c      	adds	r7, #28
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr

080056ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056ee:	b480      	push	{r7}
 80056f0:	b087      	sub	sp, #28
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	60f8      	str	r0, [r7, #12]
 80056f6:	60b9      	str	r1, [r7, #8]
 80056f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	6a1b      	ldr	r3, [r3, #32]
 80056fe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	6a1b      	ldr	r3, [r3, #32]
 8005704:	f023 0210 	bic.w	r2, r3, #16
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	699b      	ldr	r3, [r3, #24]
 8005710:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005718:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	031b      	lsls	r3, r3, #12
 800571e:	693a      	ldr	r2, [r7, #16]
 8005720:	4313      	orrs	r3, r2
 8005722:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800572a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	011b      	lsls	r3, r3, #4
 8005730:	697a      	ldr	r2, [r7, #20]
 8005732:	4313      	orrs	r3, r2
 8005734:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	693a      	ldr	r2, [r7, #16]
 800573a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	697a      	ldr	r2, [r7, #20]
 8005740:	621a      	str	r2, [r3, #32]
}
 8005742:	bf00      	nop
 8005744:	371c      	adds	r7, #28
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr

0800574e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800574e:	b480      	push	{r7}
 8005750:	b085      	sub	sp, #20
 8005752:	af00      	add	r7, sp, #0
 8005754:	6078      	str	r0, [r7, #4]
 8005756:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005764:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005766:	683a      	ldr	r2, [r7, #0]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	4313      	orrs	r3, r2
 800576c:	f043 0307 	orr.w	r3, r3, #7
 8005770:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	68fa      	ldr	r2, [r7, #12]
 8005776:	609a      	str	r2, [r3, #8]
}
 8005778:	bf00      	nop
 800577a:	3714      	adds	r7, #20
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr

08005784 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005784:	b480      	push	{r7}
 8005786:	b087      	sub	sp, #28
 8005788:	af00      	add	r7, sp, #0
 800578a:	60f8      	str	r0, [r7, #12]
 800578c:	60b9      	str	r1, [r7, #8]
 800578e:	607a      	str	r2, [r7, #4]
 8005790:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800579e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	021a      	lsls	r2, r3, #8
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	431a      	orrs	r2, r3
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	697a      	ldr	r2, [r7, #20]
 80057ae:	4313      	orrs	r3, r2
 80057b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	697a      	ldr	r2, [r7, #20]
 80057b6:	609a      	str	r2, [r3, #8]
}
 80057b8:	bf00      	nop
 80057ba:	371c      	adds	r7, #28
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr

080057c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b085      	sub	sp, #20
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
 80057cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d101      	bne.n	80057dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057d8:	2302      	movs	r3, #2
 80057da:	e05a      	b.n	8005892 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2202      	movs	r2, #2
 80057e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005802:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	68fa      	ldr	r2, [r7, #12]
 800580a:	4313      	orrs	r3, r2
 800580c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	68fa      	ldr	r2, [r7, #12]
 8005814:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a21      	ldr	r2, [pc, #132]	; (80058a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d022      	beq.n	8005866 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005828:	d01d      	beq.n	8005866 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a1d      	ldr	r2, [pc, #116]	; (80058a4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d018      	beq.n	8005866 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a1b      	ldr	r2, [pc, #108]	; (80058a8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d013      	beq.n	8005866 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a1a      	ldr	r2, [pc, #104]	; (80058ac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d00e      	beq.n	8005866 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a18      	ldr	r2, [pc, #96]	; (80058b0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d009      	beq.n	8005866 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a17      	ldr	r2, [pc, #92]	; (80058b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d004      	beq.n	8005866 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a15      	ldr	r2, [pc, #84]	; (80058b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d10c      	bne.n	8005880 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800586c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	68ba      	ldr	r2, [r7, #8]
 8005874:	4313      	orrs	r3, r2
 8005876:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	68ba      	ldr	r2, [r7, #8]
 800587e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005890:	2300      	movs	r3, #0
}
 8005892:	4618      	mov	r0, r3
 8005894:	3714      	adds	r7, #20
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr
 800589e:	bf00      	nop
 80058a0:	40010000 	.word	0x40010000
 80058a4:	40000400 	.word	0x40000400
 80058a8:	40000800 	.word	0x40000800
 80058ac:	40000c00 	.word	0x40000c00
 80058b0:	40010400 	.word	0x40010400
 80058b4:	40014000 	.word	0x40014000
 80058b8:	40001800 	.word	0x40001800

080058bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80058bc:	b480      	push	{r7}
 80058be:	b085      	sub	sp, #20
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80058c6:	2300      	movs	r3, #0
 80058c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d101      	bne.n	80058d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80058d4:	2302      	movs	r3, #2
 80058d6:	e03d      	b.n	8005954 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	4313      	orrs	r3, r2
 80058fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	4313      	orrs	r3, r2
 8005908:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4313      	orrs	r3, r2
 8005916:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	4313      	orrs	r3, r2
 8005924:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	695b      	ldr	r3, [r3, #20]
 8005930:	4313      	orrs	r3, r2
 8005932:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	69db      	ldr	r3, [r3, #28]
 800593e:	4313      	orrs	r3, r2
 8005940:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	68fa      	ldr	r2, [r7, #12]
 8005948:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005952:	2300      	movs	r3, #0
}
 8005954:	4618      	mov	r0, r3
 8005956:	3714      	adds	r7, #20
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr

08005960 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005960:	b480      	push	{r7}
 8005962:	b083      	sub	sp, #12
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005968:	bf00      	nop
 800596a:	370c      	adds	r7, #12
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr

08005974 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800597c:	bf00      	nop
 800597e:	370c      	adds	r7, #12
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr

08005988 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d101      	bne.n	800599a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e042      	b.n	8005a20 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d106      	bne.n	80059b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f7fb fe0e 	bl	80015d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2224      	movs	r2, #36	; 0x24
 80059b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	68da      	ldr	r2, [r3, #12]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80059ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f000 fc85 	bl	80062dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	691a      	ldr	r2, [r3, #16]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	695a      	ldr	r2, [r3, #20]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80059f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	68da      	ldr	r2, [r3, #12]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2220      	movs	r2, #32
 8005a0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2220      	movs	r2, #32
 8005a14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3708      	adds	r7, #8
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b0ba      	sub	sp, #232	; 0xe8
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	695b      	ldr	r3, [r3, #20]
 8005a4a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005a54:	2300      	movs	r3, #0
 8005a56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a5e:	f003 030f 	and.w	r3, r3, #15
 8005a62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005a66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d10f      	bne.n	8005a8e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a72:	f003 0320 	and.w	r3, r3, #32
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d009      	beq.n	8005a8e <HAL_UART_IRQHandler+0x66>
 8005a7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a7e:	f003 0320 	and.w	r3, r3, #32
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d003      	beq.n	8005a8e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f000 fb69 	bl	800615e <UART_Receive_IT>
      return;
 8005a8c:	e25b      	b.n	8005f46 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005a8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	f000 80de 	beq.w	8005c54 <HAL_UART_IRQHandler+0x22c>
 8005a98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a9c:	f003 0301 	and.w	r3, r3, #1
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d106      	bne.n	8005ab2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005aa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005aa8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	f000 80d1 	beq.w	8005c54 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005ab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ab6:	f003 0301 	and.w	r3, r3, #1
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d00b      	beq.n	8005ad6 <HAL_UART_IRQHandler+0xae>
 8005abe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d005      	beq.n	8005ad6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ace:	f043 0201 	orr.w	r2, r3, #1
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ad6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ada:	f003 0304 	and.w	r3, r3, #4
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d00b      	beq.n	8005afa <HAL_UART_IRQHandler+0xd2>
 8005ae2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ae6:	f003 0301 	and.w	r3, r3, #1
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d005      	beq.n	8005afa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005af2:	f043 0202 	orr.w	r2, r3, #2
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005afa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005afe:	f003 0302 	and.w	r3, r3, #2
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d00b      	beq.n	8005b1e <HAL_UART_IRQHandler+0xf6>
 8005b06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b0a:	f003 0301 	and.w	r3, r3, #1
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d005      	beq.n	8005b1e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b16:	f043 0204 	orr.w	r2, r3, #4
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005b1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b22:	f003 0308 	and.w	r3, r3, #8
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d011      	beq.n	8005b4e <HAL_UART_IRQHandler+0x126>
 8005b2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b2e:	f003 0320 	and.w	r3, r3, #32
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d105      	bne.n	8005b42 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005b36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b3a:	f003 0301 	and.w	r3, r3, #1
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d005      	beq.n	8005b4e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b46:	f043 0208 	orr.w	r2, r3, #8
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	f000 81f2 	beq.w	8005f3c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b5c:	f003 0320 	and.w	r3, r3, #32
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d008      	beq.n	8005b76 <HAL_UART_IRQHandler+0x14e>
 8005b64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b68:	f003 0320 	and.w	r3, r3, #32
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d002      	beq.n	8005b76 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f000 faf4 	bl	800615e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	695b      	ldr	r3, [r3, #20]
 8005b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b80:	2b40      	cmp	r3, #64	; 0x40
 8005b82:	bf0c      	ite	eq
 8005b84:	2301      	moveq	r3, #1
 8005b86:	2300      	movne	r3, #0
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b92:	f003 0308 	and.w	r3, r3, #8
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d103      	bne.n	8005ba2 <HAL_UART_IRQHandler+0x17a>
 8005b9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d04f      	beq.n	8005c42 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f000 f9fc 	bl	8005fa0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	695b      	ldr	r3, [r3, #20]
 8005bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bb2:	2b40      	cmp	r3, #64	; 0x40
 8005bb4:	d141      	bne.n	8005c3a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	3314      	adds	r3, #20
 8005bbc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005bc4:	e853 3f00 	ldrex	r3, [r3]
 8005bc8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005bcc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005bd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bd4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	3314      	adds	r3, #20
 8005bde:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005be2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005be6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005bee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005bf2:	e841 2300 	strex	r3, r2, [r1]
 8005bf6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005bfa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d1d9      	bne.n	8005bb6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d013      	beq.n	8005c32 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c0e:	4a7e      	ldr	r2, [pc, #504]	; (8005e08 <HAL_UART_IRQHandler+0x3e0>)
 8005c10:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c16:	4618      	mov	r0, r3
 8005c18:	f7fc fb8c 	bl	8002334 <HAL_DMA_Abort_IT>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d016      	beq.n	8005c50 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c28:	687a      	ldr	r2, [r7, #4]
 8005c2a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005c2c:	4610      	mov	r0, r2
 8005c2e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c30:	e00e      	b.n	8005c50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f000 f99e 	bl	8005f74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c38:	e00a      	b.n	8005c50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f000 f99a 	bl	8005f74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c40:	e006      	b.n	8005c50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f000 f996 	bl	8005f74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8005c4e:	e175      	b.n	8005f3c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c50:	bf00      	nop
    return;
 8005c52:	e173      	b.n	8005f3c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	f040 814f 	bne.w	8005efc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005c5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c62:	f003 0310 	and.w	r3, r3, #16
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	f000 8148 	beq.w	8005efc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005c6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c70:	f003 0310 	and.w	r3, r3, #16
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	f000 8141 	beq.w	8005efc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	60bb      	str	r3, [r7, #8]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	60bb      	str	r3, [r7, #8]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	60bb      	str	r3, [r7, #8]
 8005c8e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	695b      	ldr	r3, [r3, #20]
 8005c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c9a:	2b40      	cmp	r3, #64	; 0x40
 8005c9c:	f040 80b6 	bne.w	8005e0c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005cac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	f000 8145 	beq.w	8005f40 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005cba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	f080 813e 	bcs.w	8005f40 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005cca:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cd0:	69db      	ldr	r3, [r3, #28]
 8005cd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cd6:	f000 8088 	beq.w	8005dea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	330c      	adds	r3, #12
 8005ce0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005ce8:	e853 3f00 	ldrex	r3, [r3]
 8005cec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005cf0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005cf4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005cf8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	330c      	adds	r3, #12
 8005d02:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005d06:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005d0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d0e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005d12:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005d16:	e841 2300 	strex	r3, r2, [r1]
 8005d1a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005d1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d1d9      	bne.n	8005cda <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	3314      	adds	r3, #20
 8005d2c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d30:	e853 3f00 	ldrex	r3, [r3]
 8005d34:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005d36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d38:	f023 0301 	bic.w	r3, r3, #1
 8005d3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	3314      	adds	r3, #20
 8005d46:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005d4a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005d4e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d50:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005d52:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005d56:	e841 2300 	strex	r3, r2, [r1]
 8005d5a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005d5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d1e1      	bne.n	8005d26 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	3314      	adds	r3, #20
 8005d68:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d6c:	e853 3f00 	ldrex	r3, [r3]
 8005d70:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005d72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	3314      	adds	r3, #20
 8005d82:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005d86:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005d88:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d8a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005d8c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005d8e:	e841 2300 	strex	r3, r2, [r1]
 8005d92:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005d94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d1e3      	bne.n	8005d62 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2220      	movs	r2, #32
 8005d9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2200      	movs	r2, #0
 8005da6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	330c      	adds	r3, #12
 8005dae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005db2:	e853 3f00 	ldrex	r3, [r3]
 8005db6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005db8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dba:	f023 0310 	bic.w	r3, r3, #16
 8005dbe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	330c      	adds	r3, #12
 8005dc8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005dcc:	65ba      	str	r2, [r7, #88]	; 0x58
 8005dce:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005dd2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005dd4:	e841 2300 	strex	r3, r2, [r1]
 8005dd8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005dda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d1e3      	bne.n	8005da8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005de4:	4618      	mov	r0, r3
 8005de6:	f7fc fa35 	bl	8002254 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2202      	movs	r2, #2
 8005dee:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	1ad3      	subs	r3, r2, r3
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	4619      	mov	r1, r3
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f000 f8c1 	bl	8005f88 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005e06:	e09b      	b.n	8005f40 <HAL_UART_IRQHandler+0x518>
 8005e08:	08006067 	.word	0x08006067
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	1ad3      	subs	r3, r2, r3
 8005e18:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	f000 808e 	beq.w	8005f44 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005e28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	f000 8089 	beq.w	8005f44 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	330c      	adds	r3, #12
 8005e38:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e3c:	e853 3f00 	ldrex	r3, [r3]
 8005e40:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005e42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e48:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	330c      	adds	r3, #12
 8005e52:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005e56:	647a      	str	r2, [r7, #68]	; 0x44
 8005e58:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e5a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005e5c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e5e:	e841 2300 	strex	r3, r2, [r1]
 8005e62:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005e64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d1e3      	bne.n	8005e32 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	3314      	adds	r3, #20
 8005e70:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e74:	e853 3f00 	ldrex	r3, [r3]
 8005e78:	623b      	str	r3, [r7, #32]
   return(result);
 8005e7a:	6a3b      	ldr	r3, [r7, #32]
 8005e7c:	f023 0301 	bic.w	r3, r3, #1
 8005e80:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	3314      	adds	r3, #20
 8005e8a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005e8e:	633a      	str	r2, [r7, #48]	; 0x30
 8005e90:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e96:	e841 2300 	strex	r3, r2, [r1]
 8005e9a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d1e3      	bne.n	8005e6a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2220      	movs	r2, #32
 8005ea6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2200      	movs	r2, #0
 8005eae:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	330c      	adds	r3, #12
 8005eb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	e853 3f00 	ldrex	r3, [r3]
 8005ebe:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f023 0310 	bic.w	r3, r3, #16
 8005ec6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	330c      	adds	r3, #12
 8005ed0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005ed4:	61fa      	str	r2, [r7, #28]
 8005ed6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed8:	69b9      	ldr	r1, [r7, #24]
 8005eda:	69fa      	ldr	r2, [r7, #28]
 8005edc:	e841 2300 	strex	r3, r2, [r1]
 8005ee0:	617b      	str	r3, [r7, #20]
   return(result);
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d1e3      	bne.n	8005eb0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2202      	movs	r2, #2
 8005eec:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005eee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ef2:	4619      	mov	r1, r3
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f000 f847 	bl	8005f88 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005efa:	e023      	b.n	8005f44 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005efc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d009      	beq.n	8005f1c <HAL_UART_IRQHandler+0x4f4>
 8005f08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d003      	beq.n	8005f1c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f000 f8ba 	bl	800608e <UART_Transmit_IT>
    return;
 8005f1a:	e014      	b.n	8005f46 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005f1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d00e      	beq.n	8005f46 <HAL_UART_IRQHandler+0x51e>
 8005f28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d008      	beq.n	8005f46 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f000 f8fa 	bl	800612e <UART_EndTransmit_IT>
    return;
 8005f3a:	e004      	b.n	8005f46 <HAL_UART_IRQHandler+0x51e>
    return;
 8005f3c:	bf00      	nop
 8005f3e:	e002      	b.n	8005f46 <HAL_UART_IRQHandler+0x51e>
      return;
 8005f40:	bf00      	nop
 8005f42:	e000      	b.n	8005f46 <HAL_UART_IRQHandler+0x51e>
      return;
 8005f44:	bf00      	nop
  }
}
 8005f46:	37e8      	adds	r7, #232	; 0xe8
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b083      	sub	sp, #12
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005f54:	bf00      	nop
 8005f56:	370c      	adds	r7, #12
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr

08005f60 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b083      	sub	sp, #12
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005f68:	bf00      	nop
 8005f6a:	370c      	adds	r7, #12
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005f7c:	bf00      	nop
 8005f7e:	370c      	adds	r7, #12
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr

08005f88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b083      	sub	sp, #12
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	460b      	mov	r3, r1
 8005f92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005f94:	bf00      	nop
 8005f96:	370c      	adds	r7, #12
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr

08005fa0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b095      	sub	sp, #84	; 0x54
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	330c      	adds	r3, #12
 8005fae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fb2:	e853 3f00 	ldrex	r3, [r3]
 8005fb6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005fbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	330c      	adds	r3, #12
 8005fc6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005fc8:	643a      	str	r2, [r7, #64]	; 0x40
 8005fca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fcc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005fce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005fd0:	e841 2300 	strex	r3, r2, [r1]
 8005fd4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d1e5      	bne.n	8005fa8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	3314      	adds	r3, #20
 8005fe2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe4:	6a3b      	ldr	r3, [r7, #32]
 8005fe6:	e853 3f00 	ldrex	r3, [r3]
 8005fea:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	f023 0301 	bic.w	r3, r3, #1
 8005ff2:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	3314      	adds	r3, #20
 8005ffa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ffc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ffe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006000:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006002:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006004:	e841 2300 	strex	r3, r2, [r1]
 8006008:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800600a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600c:	2b00      	cmp	r3, #0
 800600e:	d1e5      	bne.n	8005fdc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006014:	2b01      	cmp	r3, #1
 8006016:	d119      	bne.n	800604c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	330c      	adds	r3, #12
 800601e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	e853 3f00 	ldrex	r3, [r3]
 8006026:	60bb      	str	r3, [r7, #8]
   return(result);
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	f023 0310 	bic.w	r3, r3, #16
 800602e:	647b      	str	r3, [r7, #68]	; 0x44
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	330c      	adds	r3, #12
 8006036:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006038:	61ba      	str	r2, [r7, #24]
 800603a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800603c:	6979      	ldr	r1, [r7, #20]
 800603e:	69ba      	ldr	r2, [r7, #24]
 8006040:	e841 2300 	strex	r3, r2, [r1]
 8006044:	613b      	str	r3, [r7, #16]
   return(result);
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d1e5      	bne.n	8006018 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2220      	movs	r2, #32
 8006050:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	631a      	str	r2, [r3, #48]	; 0x30
}
 800605a:	bf00      	nop
 800605c:	3754      	adds	r7, #84	; 0x54
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr

08006066 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006066:	b580      	push	{r7, lr}
 8006068:	b084      	sub	sp, #16
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006072:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2200      	movs	r2, #0
 8006078:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2200      	movs	r2, #0
 800607e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006080:	68f8      	ldr	r0, [r7, #12]
 8006082:	f7ff ff77 	bl	8005f74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006086:	bf00      	nop
 8006088:	3710      	adds	r7, #16
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}

0800608e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800608e:	b480      	push	{r7}
 8006090:	b085      	sub	sp, #20
 8006092:	af00      	add	r7, sp, #0
 8006094:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800609c:	b2db      	uxtb	r3, r3
 800609e:	2b21      	cmp	r3, #33	; 0x21
 80060a0:	d13e      	bne.n	8006120 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060aa:	d114      	bne.n	80060d6 <UART_Transmit_IT+0x48>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	691b      	ldr	r3, [r3, #16]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d110      	bne.n	80060d6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6a1b      	ldr	r3, [r3, #32]
 80060b8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	881b      	ldrh	r3, [r3, #0]
 80060be:	461a      	mov	r2, r3
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060c8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6a1b      	ldr	r3, [r3, #32]
 80060ce:	1c9a      	adds	r2, r3, #2
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	621a      	str	r2, [r3, #32]
 80060d4:	e008      	b.n	80060e8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6a1b      	ldr	r3, [r3, #32]
 80060da:	1c59      	adds	r1, r3, #1
 80060dc:	687a      	ldr	r2, [r7, #4]
 80060de:	6211      	str	r1, [r2, #32]
 80060e0:	781a      	ldrb	r2, [r3, #0]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	3b01      	subs	r3, #1
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	4619      	mov	r1, r3
 80060f6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d10f      	bne.n	800611c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	68da      	ldr	r2, [r3, #12]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800610a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	68da      	ldr	r2, [r3, #12]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800611a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800611c:	2300      	movs	r3, #0
 800611e:	e000      	b.n	8006122 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006120:	2302      	movs	r3, #2
  }
}
 8006122:	4618      	mov	r0, r3
 8006124:	3714      	adds	r7, #20
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr

0800612e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800612e:	b580      	push	{r7, lr}
 8006130:	b082      	sub	sp, #8
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	68da      	ldr	r2, [r3, #12]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006144:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2220      	movs	r2, #32
 800614a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f7ff fefc 	bl	8005f4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006154:	2300      	movs	r3, #0
}
 8006156:	4618      	mov	r0, r3
 8006158:	3708      	adds	r7, #8
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}

0800615e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800615e:	b580      	push	{r7, lr}
 8006160:	b08c      	sub	sp, #48	; 0x30
 8006162:	af00      	add	r7, sp, #0
 8006164:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800616c:	b2db      	uxtb	r3, r3
 800616e:	2b22      	cmp	r3, #34	; 0x22
 8006170:	f040 80ae 	bne.w	80062d0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800617c:	d117      	bne.n	80061ae <UART_Receive_IT+0x50>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	691b      	ldr	r3, [r3, #16]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d113      	bne.n	80061ae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006186:	2300      	movs	r3, #0
 8006188:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800618e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	b29b      	uxth	r3, r3
 8006198:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800619c:	b29a      	uxth	r2, r3
 800619e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061a6:	1c9a      	adds	r2, r3, #2
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	629a      	str	r2, [r3, #40]	; 0x28
 80061ac:	e026      	b.n	80061fc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80061b4:	2300      	movs	r3, #0
 80061b6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061c0:	d007      	beq.n	80061d2 <UART_Receive_IT+0x74>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d10a      	bne.n	80061e0 <UART_Receive_IT+0x82>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	691b      	ldr	r3, [r3, #16]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d106      	bne.n	80061e0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	b2da      	uxtb	r2, r3
 80061da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061dc:	701a      	strb	r2, [r3, #0]
 80061de:	e008      	b.n	80061f2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	b2db      	uxtb	r3, r3
 80061e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061ec:	b2da      	uxtb	r2, r3
 80061ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061f0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061f6:	1c5a      	adds	r2, r3, #1
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006200:	b29b      	uxth	r3, r3
 8006202:	3b01      	subs	r3, #1
 8006204:	b29b      	uxth	r3, r3
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	4619      	mov	r1, r3
 800620a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800620c:	2b00      	cmp	r3, #0
 800620e:	d15d      	bne.n	80062cc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	68da      	ldr	r2, [r3, #12]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f022 0220 	bic.w	r2, r2, #32
 800621e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	68da      	ldr	r2, [r3, #12]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800622e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	695a      	ldr	r2, [r3, #20]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f022 0201 	bic.w	r2, r2, #1
 800623e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2220      	movs	r2, #32
 8006244:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006252:	2b01      	cmp	r3, #1
 8006254:	d135      	bne.n	80062c2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	330c      	adds	r3, #12
 8006262:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	e853 3f00 	ldrex	r3, [r3]
 800626a:	613b      	str	r3, [r7, #16]
   return(result);
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	f023 0310 	bic.w	r3, r3, #16
 8006272:	627b      	str	r3, [r7, #36]	; 0x24
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	330c      	adds	r3, #12
 800627a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800627c:	623a      	str	r2, [r7, #32]
 800627e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006280:	69f9      	ldr	r1, [r7, #28]
 8006282:	6a3a      	ldr	r2, [r7, #32]
 8006284:	e841 2300 	strex	r3, r2, [r1]
 8006288:	61bb      	str	r3, [r7, #24]
   return(result);
 800628a:	69bb      	ldr	r3, [r7, #24]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d1e5      	bne.n	800625c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f003 0310 	and.w	r3, r3, #16
 800629a:	2b10      	cmp	r3, #16
 800629c:	d10a      	bne.n	80062b4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800629e:	2300      	movs	r3, #0
 80062a0:	60fb      	str	r3, [r7, #12]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	60fb      	str	r3, [r7, #12]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	60fb      	str	r3, [r7, #12]
 80062b2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80062b8:	4619      	mov	r1, r3
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f7ff fe64 	bl	8005f88 <HAL_UARTEx_RxEventCallback>
 80062c0:	e002      	b.n	80062c8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f7ff fe4c 	bl	8005f60 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80062c8:	2300      	movs	r3, #0
 80062ca:	e002      	b.n	80062d2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80062cc:	2300      	movs	r3, #0
 80062ce:	e000      	b.n	80062d2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80062d0:	2302      	movs	r3, #2
  }
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3730      	adds	r7, #48	; 0x30
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}
	...

080062dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062e0:	b0c0      	sub	sp, #256	; 0x100
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	691b      	ldr	r3, [r3, #16]
 80062f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80062f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062f8:	68d9      	ldr	r1, [r3, #12]
 80062fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	ea40 0301 	orr.w	r3, r0, r1
 8006304:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800630a:	689a      	ldr	r2, [r3, #8]
 800630c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	431a      	orrs	r2, r3
 8006314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006318:	695b      	ldr	r3, [r3, #20]
 800631a:	431a      	orrs	r2, r3
 800631c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006320:	69db      	ldr	r3, [r3, #28]
 8006322:	4313      	orrs	r3, r2
 8006324:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	68db      	ldr	r3, [r3, #12]
 8006330:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006334:	f021 010c 	bic.w	r1, r1, #12
 8006338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006342:	430b      	orrs	r3, r1
 8006344:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	695b      	ldr	r3, [r3, #20]
 800634e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006356:	6999      	ldr	r1, [r3, #24]
 8006358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800635c:	681a      	ldr	r2, [r3, #0]
 800635e:	ea40 0301 	orr.w	r3, r0, r1
 8006362:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	4b8f      	ldr	r3, [pc, #572]	; (80065a8 <UART_SetConfig+0x2cc>)
 800636c:	429a      	cmp	r2, r3
 800636e:	d005      	beq.n	800637c <UART_SetConfig+0xa0>
 8006370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	4b8d      	ldr	r3, [pc, #564]	; (80065ac <UART_SetConfig+0x2d0>)
 8006378:	429a      	cmp	r2, r3
 800637a:	d104      	bne.n	8006386 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800637c:	f7fe faac 	bl	80048d8 <HAL_RCC_GetPCLK2Freq>
 8006380:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006384:	e003      	b.n	800638e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006386:	f7fe fa93 	bl	80048b0 <HAL_RCC_GetPCLK1Freq>
 800638a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800638e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006392:	69db      	ldr	r3, [r3, #28]
 8006394:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006398:	f040 810c 	bne.w	80065b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800639c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063a0:	2200      	movs	r2, #0
 80063a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80063a6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80063aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80063ae:	4622      	mov	r2, r4
 80063b0:	462b      	mov	r3, r5
 80063b2:	1891      	adds	r1, r2, r2
 80063b4:	65b9      	str	r1, [r7, #88]	; 0x58
 80063b6:	415b      	adcs	r3, r3
 80063b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80063ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80063be:	4621      	mov	r1, r4
 80063c0:	eb12 0801 	adds.w	r8, r2, r1
 80063c4:	4629      	mov	r1, r5
 80063c6:	eb43 0901 	adc.w	r9, r3, r1
 80063ca:	f04f 0200 	mov.w	r2, #0
 80063ce:	f04f 0300 	mov.w	r3, #0
 80063d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80063d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80063da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80063de:	4690      	mov	r8, r2
 80063e0:	4699      	mov	r9, r3
 80063e2:	4623      	mov	r3, r4
 80063e4:	eb18 0303 	adds.w	r3, r8, r3
 80063e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80063ec:	462b      	mov	r3, r5
 80063ee:	eb49 0303 	adc.w	r3, r9, r3
 80063f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80063f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	2200      	movs	r2, #0
 80063fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006402:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006406:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800640a:	460b      	mov	r3, r1
 800640c:	18db      	adds	r3, r3, r3
 800640e:	653b      	str	r3, [r7, #80]	; 0x50
 8006410:	4613      	mov	r3, r2
 8006412:	eb42 0303 	adc.w	r3, r2, r3
 8006416:	657b      	str	r3, [r7, #84]	; 0x54
 8006418:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800641c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006420:	f7f9 fee6 	bl	80001f0 <__aeabi_uldivmod>
 8006424:	4602      	mov	r2, r0
 8006426:	460b      	mov	r3, r1
 8006428:	4b61      	ldr	r3, [pc, #388]	; (80065b0 <UART_SetConfig+0x2d4>)
 800642a:	fba3 2302 	umull	r2, r3, r3, r2
 800642e:	095b      	lsrs	r3, r3, #5
 8006430:	011c      	lsls	r4, r3, #4
 8006432:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006436:	2200      	movs	r2, #0
 8006438:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800643c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006440:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006444:	4642      	mov	r2, r8
 8006446:	464b      	mov	r3, r9
 8006448:	1891      	adds	r1, r2, r2
 800644a:	64b9      	str	r1, [r7, #72]	; 0x48
 800644c:	415b      	adcs	r3, r3
 800644e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006450:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006454:	4641      	mov	r1, r8
 8006456:	eb12 0a01 	adds.w	sl, r2, r1
 800645a:	4649      	mov	r1, r9
 800645c:	eb43 0b01 	adc.w	fp, r3, r1
 8006460:	f04f 0200 	mov.w	r2, #0
 8006464:	f04f 0300 	mov.w	r3, #0
 8006468:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800646c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006470:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006474:	4692      	mov	sl, r2
 8006476:	469b      	mov	fp, r3
 8006478:	4643      	mov	r3, r8
 800647a:	eb1a 0303 	adds.w	r3, sl, r3
 800647e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006482:	464b      	mov	r3, r9
 8006484:	eb4b 0303 	adc.w	r3, fp, r3
 8006488:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800648c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	2200      	movs	r2, #0
 8006494:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006498:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800649c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80064a0:	460b      	mov	r3, r1
 80064a2:	18db      	adds	r3, r3, r3
 80064a4:	643b      	str	r3, [r7, #64]	; 0x40
 80064a6:	4613      	mov	r3, r2
 80064a8:	eb42 0303 	adc.w	r3, r2, r3
 80064ac:	647b      	str	r3, [r7, #68]	; 0x44
 80064ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80064b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80064b6:	f7f9 fe9b 	bl	80001f0 <__aeabi_uldivmod>
 80064ba:	4602      	mov	r2, r0
 80064bc:	460b      	mov	r3, r1
 80064be:	4611      	mov	r1, r2
 80064c0:	4b3b      	ldr	r3, [pc, #236]	; (80065b0 <UART_SetConfig+0x2d4>)
 80064c2:	fba3 2301 	umull	r2, r3, r3, r1
 80064c6:	095b      	lsrs	r3, r3, #5
 80064c8:	2264      	movs	r2, #100	; 0x64
 80064ca:	fb02 f303 	mul.w	r3, r2, r3
 80064ce:	1acb      	subs	r3, r1, r3
 80064d0:	00db      	lsls	r3, r3, #3
 80064d2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80064d6:	4b36      	ldr	r3, [pc, #216]	; (80065b0 <UART_SetConfig+0x2d4>)
 80064d8:	fba3 2302 	umull	r2, r3, r3, r2
 80064dc:	095b      	lsrs	r3, r3, #5
 80064de:	005b      	lsls	r3, r3, #1
 80064e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80064e4:	441c      	add	r4, r3
 80064e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064ea:	2200      	movs	r2, #0
 80064ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80064f0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80064f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80064f8:	4642      	mov	r2, r8
 80064fa:	464b      	mov	r3, r9
 80064fc:	1891      	adds	r1, r2, r2
 80064fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8006500:	415b      	adcs	r3, r3
 8006502:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006504:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006508:	4641      	mov	r1, r8
 800650a:	1851      	adds	r1, r2, r1
 800650c:	6339      	str	r1, [r7, #48]	; 0x30
 800650e:	4649      	mov	r1, r9
 8006510:	414b      	adcs	r3, r1
 8006512:	637b      	str	r3, [r7, #52]	; 0x34
 8006514:	f04f 0200 	mov.w	r2, #0
 8006518:	f04f 0300 	mov.w	r3, #0
 800651c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006520:	4659      	mov	r1, fp
 8006522:	00cb      	lsls	r3, r1, #3
 8006524:	4651      	mov	r1, sl
 8006526:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800652a:	4651      	mov	r1, sl
 800652c:	00ca      	lsls	r2, r1, #3
 800652e:	4610      	mov	r0, r2
 8006530:	4619      	mov	r1, r3
 8006532:	4603      	mov	r3, r0
 8006534:	4642      	mov	r2, r8
 8006536:	189b      	adds	r3, r3, r2
 8006538:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800653c:	464b      	mov	r3, r9
 800653e:	460a      	mov	r2, r1
 8006540:	eb42 0303 	adc.w	r3, r2, r3
 8006544:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006554:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006558:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800655c:	460b      	mov	r3, r1
 800655e:	18db      	adds	r3, r3, r3
 8006560:	62bb      	str	r3, [r7, #40]	; 0x28
 8006562:	4613      	mov	r3, r2
 8006564:	eb42 0303 	adc.w	r3, r2, r3
 8006568:	62fb      	str	r3, [r7, #44]	; 0x2c
 800656a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800656e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006572:	f7f9 fe3d 	bl	80001f0 <__aeabi_uldivmod>
 8006576:	4602      	mov	r2, r0
 8006578:	460b      	mov	r3, r1
 800657a:	4b0d      	ldr	r3, [pc, #52]	; (80065b0 <UART_SetConfig+0x2d4>)
 800657c:	fba3 1302 	umull	r1, r3, r3, r2
 8006580:	095b      	lsrs	r3, r3, #5
 8006582:	2164      	movs	r1, #100	; 0x64
 8006584:	fb01 f303 	mul.w	r3, r1, r3
 8006588:	1ad3      	subs	r3, r2, r3
 800658a:	00db      	lsls	r3, r3, #3
 800658c:	3332      	adds	r3, #50	; 0x32
 800658e:	4a08      	ldr	r2, [pc, #32]	; (80065b0 <UART_SetConfig+0x2d4>)
 8006590:	fba2 2303 	umull	r2, r3, r2, r3
 8006594:	095b      	lsrs	r3, r3, #5
 8006596:	f003 0207 	and.w	r2, r3, #7
 800659a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4422      	add	r2, r4
 80065a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80065a4:	e106      	b.n	80067b4 <UART_SetConfig+0x4d8>
 80065a6:	bf00      	nop
 80065a8:	40011000 	.word	0x40011000
 80065ac:	40011400 	.word	0x40011400
 80065b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80065b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065b8:	2200      	movs	r2, #0
 80065ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80065be:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80065c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80065c6:	4642      	mov	r2, r8
 80065c8:	464b      	mov	r3, r9
 80065ca:	1891      	adds	r1, r2, r2
 80065cc:	6239      	str	r1, [r7, #32]
 80065ce:	415b      	adcs	r3, r3
 80065d0:	627b      	str	r3, [r7, #36]	; 0x24
 80065d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80065d6:	4641      	mov	r1, r8
 80065d8:	1854      	adds	r4, r2, r1
 80065da:	4649      	mov	r1, r9
 80065dc:	eb43 0501 	adc.w	r5, r3, r1
 80065e0:	f04f 0200 	mov.w	r2, #0
 80065e4:	f04f 0300 	mov.w	r3, #0
 80065e8:	00eb      	lsls	r3, r5, #3
 80065ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80065ee:	00e2      	lsls	r2, r4, #3
 80065f0:	4614      	mov	r4, r2
 80065f2:	461d      	mov	r5, r3
 80065f4:	4643      	mov	r3, r8
 80065f6:	18e3      	adds	r3, r4, r3
 80065f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80065fc:	464b      	mov	r3, r9
 80065fe:	eb45 0303 	adc.w	r3, r5, r3
 8006602:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	2200      	movs	r2, #0
 800660e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006612:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006616:	f04f 0200 	mov.w	r2, #0
 800661a:	f04f 0300 	mov.w	r3, #0
 800661e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006622:	4629      	mov	r1, r5
 8006624:	008b      	lsls	r3, r1, #2
 8006626:	4621      	mov	r1, r4
 8006628:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800662c:	4621      	mov	r1, r4
 800662e:	008a      	lsls	r2, r1, #2
 8006630:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006634:	f7f9 fddc 	bl	80001f0 <__aeabi_uldivmod>
 8006638:	4602      	mov	r2, r0
 800663a:	460b      	mov	r3, r1
 800663c:	4b60      	ldr	r3, [pc, #384]	; (80067c0 <UART_SetConfig+0x4e4>)
 800663e:	fba3 2302 	umull	r2, r3, r3, r2
 8006642:	095b      	lsrs	r3, r3, #5
 8006644:	011c      	lsls	r4, r3, #4
 8006646:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800664a:	2200      	movs	r2, #0
 800664c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006650:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006654:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006658:	4642      	mov	r2, r8
 800665a:	464b      	mov	r3, r9
 800665c:	1891      	adds	r1, r2, r2
 800665e:	61b9      	str	r1, [r7, #24]
 8006660:	415b      	adcs	r3, r3
 8006662:	61fb      	str	r3, [r7, #28]
 8006664:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006668:	4641      	mov	r1, r8
 800666a:	1851      	adds	r1, r2, r1
 800666c:	6139      	str	r1, [r7, #16]
 800666e:	4649      	mov	r1, r9
 8006670:	414b      	adcs	r3, r1
 8006672:	617b      	str	r3, [r7, #20]
 8006674:	f04f 0200 	mov.w	r2, #0
 8006678:	f04f 0300 	mov.w	r3, #0
 800667c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006680:	4659      	mov	r1, fp
 8006682:	00cb      	lsls	r3, r1, #3
 8006684:	4651      	mov	r1, sl
 8006686:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800668a:	4651      	mov	r1, sl
 800668c:	00ca      	lsls	r2, r1, #3
 800668e:	4610      	mov	r0, r2
 8006690:	4619      	mov	r1, r3
 8006692:	4603      	mov	r3, r0
 8006694:	4642      	mov	r2, r8
 8006696:	189b      	adds	r3, r3, r2
 8006698:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800669c:	464b      	mov	r3, r9
 800669e:	460a      	mov	r2, r1
 80066a0:	eb42 0303 	adc.w	r3, r2, r3
 80066a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80066a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80066b2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80066b4:	f04f 0200 	mov.w	r2, #0
 80066b8:	f04f 0300 	mov.w	r3, #0
 80066bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80066c0:	4649      	mov	r1, r9
 80066c2:	008b      	lsls	r3, r1, #2
 80066c4:	4641      	mov	r1, r8
 80066c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066ca:	4641      	mov	r1, r8
 80066cc:	008a      	lsls	r2, r1, #2
 80066ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80066d2:	f7f9 fd8d 	bl	80001f0 <__aeabi_uldivmod>
 80066d6:	4602      	mov	r2, r0
 80066d8:	460b      	mov	r3, r1
 80066da:	4611      	mov	r1, r2
 80066dc:	4b38      	ldr	r3, [pc, #224]	; (80067c0 <UART_SetConfig+0x4e4>)
 80066de:	fba3 2301 	umull	r2, r3, r3, r1
 80066e2:	095b      	lsrs	r3, r3, #5
 80066e4:	2264      	movs	r2, #100	; 0x64
 80066e6:	fb02 f303 	mul.w	r3, r2, r3
 80066ea:	1acb      	subs	r3, r1, r3
 80066ec:	011b      	lsls	r3, r3, #4
 80066ee:	3332      	adds	r3, #50	; 0x32
 80066f0:	4a33      	ldr	r2, [pc, #204]	; (80067c0 <UART_SetConfig+0x4e4>)
 80066f2:	fba2 2303 	umull	r2, r3, r2, r3
 80066f6:	095b      	lsrs	r3, r3, #5
 80066f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80066fc:	441c      	add	r4, r3
 80066fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006702:	2200      	movs	r2, #0
 8006704:	673b      	str	r3, [r7, #112]	; 0x70
 8006706:	677a      	str	r2, [r7, #116]	; 0x74
 8006708:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800670c:	4642      	mov	r2, r8
 800670e:	464b      	mov	r3, r9
 8006710:	1891      	adds	r1, r2, r2
 8006712:	60b9      	str	r1, [r7, #8]
 8006714:	415b      	adcs	r3, r3
 8006716:	60fb      	str	r3, [r7, #12]
 8006718:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800671c:	4641      	mov	r1, r8
 800671e:	1851      	adds	r1, r2, r1
 8006720:	6039      	str	r1, [r7, #0]
 8006722:	4649      	mov	r1, r9
 8006724:	414b      	adcs	r3, r1
 8006726:	607b      	str	r3, [r7, #4]
 8006728:	f04f 0200 	mov.w	r2, #0
 800672c:	f04f 0300 	mov.w	r3, #0
 8006730:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006734:	4659      	mov	r1, fp
 8006736:	00cb      	lsls	r3, r1, #3
 8006738:	4651      	mov	r1, sl
 800673a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800673e:	4651      	mov	r1, sl
 8006740:	00ca      	lsls	r2, r1, #3
 8006742:	4610      	mov	r0, r2
 8006744:	4619      	mov	r1, r3
 8006746:	4603      	mov	r3, r0
 8006748:	4642      	mov	r2, r8
 800674a:	189b      	adds	r3, r3, r2
 800674c:	66bb      	str	r3, [r7, #104]	; 0x68
 800674e:	464b      	mov	r3, r9
 8006750:	460a      	mov	r2, r1
 8006752:	eb42 0303 	adc.w	r3, r2, r3
 8006756:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	2200      	movs	r2, #0
 8006760:	663b      	str	r3, [r7, #96]	; 0x60
 8006762:	667a      	str	r2, [r7, #100]	; 0x64
 8006764:	f04f 0200 	mov.w	r2, #0
 8006768:	f04f 0300 	mov.w	r3, #0
 800676c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006770:	4649      	mov	r1, r9
 8006772:	008b      	lsls	r3, r1, #2
 8006774:	4641      	mov	r1, r8
 8006776:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800677a:	4641      	mov	r1, r8
 800677c:	008a      	lsls	r2, r1, #2
 800677e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006782:	f7f9 fd35 	bl	80001f0 <__aeabi_uldivmod>
 8006786:	4602      	mov	r2, r0
 8006788:	460b      	mov	r3, r1
 800678a:	4b0d      	ldr	r3, [pc, #52]	; (80067c0 <UART_SetConfig+0x4e4>)
 800678c:	fba3 1302 	umull	r1, r3, r3, r2
 8006790:	095b      	lsrs	r3, r3, #5
 8006792:	2164      	movs	r1, #100	; 0x64
 8006794:	fb01 f303 	mul.w	r3, r1, r3
 8006798:	1ad3      	subs	r3, r2, r3
 800679a:	011b      	lsls	r3, r3, #4
 800679c:	3332      	adds	r3, #50	; 0x32
 800679e:	4a08      	ldr	r2, [pc, #32]	; (80067c0 <UART_SetConfig+0x4e4>)
 80067a0:	fba2 2303 	umull	r2, r3, r2, r3
 80067a4:	095b      	lsrs	r3, r3, #5
 80067a6:	f003 020f 	and.w	r2, r3, #15
 80067aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4422      	add	r2, r4
 80067b2:	609a      	str	r2, [r3, #8]
}
 80067b4:	bf00      	nop
 80067b6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80067ba:	46bd      	mov	sp, r7
 80067bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067c0:	51eb851f 	.word	0x51eb851f

080067c4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80067c4:	b084      	sub	sp, #16
 80067c6:	b580      	push	{r7, lr}
 80067c8:	b084      	sub	sp, #16
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	6078      	str	r0, [r7, #4]
 80067ce:	f107 001c 	add.w	r0, r7, #28
 80067d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80067d6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80067da:	2b01      	cmp	r3, #1
 80067dc:	d123      	bne.n	8006826 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067e2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	68db      	ldr	r3, [r3, #12]
 80067ee:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80067f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	68db      	ldr	r3, [r3, #12]
 80067fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006806:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800680a:	2b01      	cmp	r3, #1
 800680c:	d105      	bne.n	800681a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f001 fae2 	bl	8007de4 <USB_CoreReset>
 8006820:	4603      	mov	r3, r0
 8006822:	73fb      	strb	r3, [r7, #15]
 8006824:	e01b      	b.n	800685e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	68db      	ldr	r3, [r3, #12]
 800682a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f001 fad6 	bl	8007de4 <USB_CoreReset>
 8006838:	4603      	mov	r3, r0
 800683a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800683c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8006840:	2b00      	cmp	r3, #0
 8006842:	d106      	bne.n	8006852 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006848:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	639a      	str	r2, [r3, #56]	; 0x38
 8006850:	e005      	b.n	800685e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006856:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800685e:	7fbb      	ldrb	r3, [r7, #30]
 8006860:	2b01      	cmp	r3, #1
 8006862:	d10b      	bne.n	800687c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	f043 0206 	orr.w	r2, r3, #6
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	f043 0220 	orr.w	r2, r3, #32
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800687c:	7bfb      	ldrb	r3, [r7, #15]
}
 800687e:	4618      	mov	r0, r3
 8006880:	3710      	adds	r7, #16
 8006882:	46bd      	mov	sp, r7
 8006884:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006888:	b004      	add	sp, #16
 800688a:	4770      	bx	lr

0800688c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800688c:	b480      	push	{r7}
 800688e:	b087      	sub	sp, #28
 8006890:	af00      	add	r7, sp, #0
 8006892:	60f8      	str	r0, [r7, #12]
 8006894:	60b9      	str	r1, [r7, #8]
 8006896:	4613      	mov	r3, r2
 8006898:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800689a:	79fb      	ldrb	r3, [r7, #7]
 800689c:	2b02      	cmp	r3, #2
 800689e:	d165      	bne.n	800696c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	4a41      	ldr	r2, [pc, #260]	; (80069a8 <USB_SetTurnaroundTime+0x11c>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d906      	bls.n	80068b6 <USB_SetTurnaroundTime+0x2a>
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	4a40      	ldr	r2, [pc, #256]	; (80069ac <USB_SetTurnaroundTime+0x120>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d202      	bcs.n	80068b6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80068b0:	230f      	movs	r3, #15
 80068b2:	617b      	str	r3, [r7, #20]
 80068b4:	e062      	b.n	800697c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	4a3c      	ldr	r2, [pc, #240]	; (80069ac <USB_SetTurnaroundTime+0x120>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d306      	bcc.n	80068cc <USB_SetTurnaroundTime+0x40>
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	4a3b      	ldr	r2, [pc, #236]	; (80069b0 <USB_SetTurnaroundTime+0x124>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d202      	bcs.n	80068cc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80068c6:	230e      	movs	r3, #14
 80068c8:	617b      	str	r3, [r7, #20]
 80068ca:	e057      	b.n	800697c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	4a38      	ldr	r2, [pc, #224]	; (80069b0 <USB_SetTurnaroundTime+0x124>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d306      	bcc.n	80068e2 <USB_SetTurnaroundTime+0x56>
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	4a37      	ldr	r2, [pc, #220]	; (80069b4 <USB_SetTurnaroundTime+0x128>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d202      	bcs.n	80068e2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80068dc:	230d      	movs	r3, #13
 80068de:	617b      	str	r3, [r7, #20]
 80068e0:	e04c      	b.n	800697c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	4a33      	ldr	r2, [pc, #204]	; (80069b4 <USB_SetTurnaroundTime+0x128>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d306      	bcc.n	80068f8 <USB_SetTurnaroundTime+0x6c>
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	4a32      	ldr	r2, [pc, #200]	; (80069b8 <USB_SetTurnaroundTime+0x12c>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d802      	bhi.n	80068f8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80068f2:	230c      	movs	r3, #12
 80068f4:	617b      	str	r3, [r7, #20]
 80068f6:	e041      	b.n	800697c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	4a2f      	ldr	r2, [pc, #188]	; (80069b8 <USB_SetTurnaroundTime+0x12c>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d906      	bls.n	800690e <USB_SetTurnaroundTime+0x82>
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	4a2e      	ldr	r2, [pc, #184]	; (80069bc <USB_SetTurnaroundTime+0x130>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d802      	bhi.n	800690e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006908:	230b      	movs	r3, #11
 800690a:	617b      	str	r3, [r7, #20]
 800690c:	e036      	b.n	800697c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	4a2a      	ldr	r2, [pc, #168]	; (80069bc <USB_SetTurnaroundTime+0x130>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d906      	bls.n	8006924 <USB_SetTurnaroundTime+0x98>
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	4a29      	ldr	r2, [pc, #164]	; (80069c0 <USB_SetTurnaroundTime+0x134>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d802      	bhi.n	8006924 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800691e:	230a      	movs	r3, #10
 8006920:	617b      	str	r3, [r7, #20]
 8006922:	e02b      	b.n	800697c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	4a26      	ldr	r2, [pc, #152]	; (80069c0 <USB_SetTurnaroundTime+0x134>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d906      	bls.n	800693a <USB_SetTurnaroundTime+0xae>
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	4a25      	ldr	r2, [pc, #148]	; (80069c4 <USB_SetTurnaroundTime+0x138>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d202      	bcs.n	800693a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006934:	2309      	movs	r3, #9
 8006936:	617b      	str	r3, [r7, #20]
 8006938:	e020      	b.n	800697c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	4a21      	ldr	r2, [pc, #132]	; (80069c4 <USB_SetTurnaroundTime+0x138>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d306      	bcc.n	8006950 <USB_SetTurnaroundTime+0xc4>
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	4a20      	ldr	r2, [pc, #128]	; (80069c8 <USB_SetTurnaroundTime+0x13c>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d802      	bhi.n	8006950 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800694a:	2308      	movs	r3, #8
 800694c:	617b      	str	r3, [r7, #20]
 800694e:	e015      	b.n	800697c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	4a1d      	ldr	r2, [pc, #116]	; (80069c8 <USB_SetTurnaroundTime+0x13c>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d906      	bls.n	8006966 <USB_SetTurnaroundTime+0xda>
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	4a1c      	ldr	r2, [pc, #112]	; (80069cc <USB_SetTurnaroundTime+0x140>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d202      	bcs.n	8006966 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006960:	2307      	movs	r3, #7
 8006962:	617b      	str	r3, [r7, #20]
 8006964:	e00a      	b.n	800697c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006966:	2306      	movs	r3, #6
 8006968:	617b      	str	r3, [r7, #20]
 800696a:	e007      	b.n	800697c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800696c:	79fb      	ldrb	r3, [r7, #7]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d102      	bne.n	8006978 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006972:	2309      	movs	r3, #9
 8006974:	617b      	str	r3, [r7, #20]
 8006976:	e001      	b.n	800697c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006978:	2309      	movs	r3, #9
 800697a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	68db      	ldr	r3, [r3, #12]
 8006980:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	68da      	ldr	r2, [r3, #12]
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	029b      	lsls	r3, r3, #10
 8006990:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006994:	431a      	orrs	r2, r3
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800699a:	2300      	movs	r3, #0
}
 800699c:	4618      	mov	r0, r3
 800699e:	371c      	adds	r7, #28
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr
 80069a8:	00d8acbf 	.word	0x00d8acbf
 80069ac:	00e4e1c0 	.word	0x00e4e1c0
 80069b0:	00f42400 	.word	0x00f42400
 80069b4:	01067380 	.word	0x01067380
 80069b8:	011a499f 	.word	0x011a499f
 80069bc:	01312cff 	.word	0x01312cff
 80069c0:	014ca43f 	.word	0x014ca43f
 80069c4:	016e3600 	.word	0x016e3600
 80069c8:	01a6ab1f 	.word	0x01a6ab1f
 80069cc:	01e84800 	.word	0x01e84800

080069d0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b083      	sub	sp, #12
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	689b      	ldr	r3, [r3, #8]
 80069dc:	f043 0201 	orr.w	r2, r3, #1
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80069e4:	2300      	movs	r3, #0
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	370c      	adds	r7, #12
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr

080069f2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80069f2:	b480      	push	{r7}
 80069f4:	b083      	sub	sp, #12
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	f023 0201 	bic.w	r2, r3, #1
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006a06:	2300      	movs	r3, #0
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	370c      	adds	r7, #12
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr

08006a14 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b084      	sub	sp, #16
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	460b      	mov	r3, r1
 8006a1e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006a20:	2300      	movs	r3, #0
 8006a22:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	68db      	ldr	r3, [r3, #12]
 8006a28:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006a30:	78fb      	ldrb	r3, [r7, #3]
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d115      	bne.n	8006a62 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	68db      	ldr	r3, [r3, #12]
 8006a3a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006a42:	200a      	movs	r0, #10
 8006a44:	f7fa ff1e 	bl	8001884 <HAL_Delay>
      ms += 10U;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	330a      	adds	r3, #10
 8006a4c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f001 f939 	bl	8007cc6 <USB_GetMode>
 8006a54:	4603      	mov	r3, r0
 8006a56:	2b01      	cmp	r3, #1
 8006a58:	d01e      	beq.n	8006a98 <USB_SetCurrentMode+0x84>
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2bc7      	cmp	r3, #199	; 0xc7
 8006a5e:	d9f0      	bls.n	8006a42 <USB_SetCurrentMode+0x2e>
 8006a60:	e01a      	b.n	8006a98 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006a62:	78fb      	ldrb	r3, [r7, #3]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d115      	bne.n	8006a94 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	68db      	ldr	r3, [r3, #12]
 8006a6c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006a74:	200a      	movs	r0, #10
 8006a76:	f7fa ff05 	bl	8001884 <HAL_Delay>
      ms += 10U;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	330a      	adds	r3, #10
 8006a7e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f001 f920 	bl	8007cc6 <USB_GetMode>
 8006a86:	4603      	mov	r3, r0
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d005      	beq.n	8006a98 <USB_SetCurrentMode+0x84>
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2bc7      	cmp	r3, #199	; 0xc7
 8006a90:	d9f0      	bls.n	8006a74 <USB_SetCurrentMode+0x60>
 8006a92:	e001      	b.n	8006a98 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006a94:	2301      	movs	r3, #1
 8006a96:	e005      	b.n	8006aa4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2bc8      	cmp	r3, #200	; 0xc8
 8006a9c:	d101      	bne.n	8006aa2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	e000      	b.n	8006aa4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006aa2:	2300      	movs	r3, #0
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3710      	adds	r7, #16
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}

08006aac <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006aac:	b084      	sub	sp, #16
 8006aae:	b580      	push	{r7, lr}
 8006ab0:	b086      	sub	sp, #24
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	6078      	str	r0, [r7, #4]
 8006ab6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006aba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	613b      	str	r3, [r7, #16]
 8006aca:	e009      	b.n	8006ae0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006acc:	687a      	ldr	r2, [r7, #4]
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	3340      	adds	r3, #64	; 0x40
 8006ad2:	009b      	lsls	r3, r3, #2
 8006ad4:	4413      	add	r3, r2
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	3301      	adds	r3, #1
 8006ade:	613b      	str	r3, [r7, #16]
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	2b0e      	cmp	r3, #14
 8006ae4:	d9f2      	bls.n	8006acc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006ae6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d11c      	bne.n	8006b28 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	68fa      	ldr	r2, [r7, #12]
 8006af8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006afc:	f043 0302 	orr.w	r3, r3, #2
 8006b00:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b06:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b12:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b1e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	639a      	str	r2, [r3, #56]	; 0x38
 8006b26:	e00b      	b.n	8006b40 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b2c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b38:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006b46:	461a      	mov	r2, r3
 8006b48:	2300      	movs	r3, #0
 8006b4a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006b4c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d10d      	bne.n	8006b70 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006b54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d104      	bne.n	8006b66 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006b5c:	2100      	movs	r1, #0
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 f968 	bl	8006e34 <USB_SetDevSpeed>
 8006b64:	e008      	b.n	8006b78 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006b66:	2101      	movs	r1, #1
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f000 f963 	bl	8006e34 <USB_SetDevSpeed>
 8006b6e:	e003      	b.n	8006b78 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006b70:	2103      	movs	r1, #3
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f000 f95e 	bl	8006e34 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006b78:	2110      	movs	r1, #16
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 f8fa 	bl	8006d74 <USB_FlushTxFifo>
 8006b80:	4603      	mov	r3, r0
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d001      	beq.n	8006b8a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 f924 	bl	8006dd8 <USB_FlushRxFifo>
 8006b90:	4603      	mov	r3, r0
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d001      	beq.n	8006b9a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bac:	461a      	mov	r2, r3
 8006bae:	2300      	movs	r3, #0
 8006bb0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bb8:	461a      	mov	r2, r3
 8006bba:	2300      	movs	r3, #0
 8006bbc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	613b      	str	r3, [r7, #16]
 8006bc2:	e043      	b.n	8006c4c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	015a      	lsls	r2, r3, #5
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	4413      	add	r3, r2
 8006bcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006bd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006bda:	d118      	bne.n	8006c0e <USB_DevInit+0x162>
    {
      if (i == 0U)
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d10a      	bne.n	8006bf8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	015a      	lsls	r2, r3, #5
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	4413      	add	r3, r2
 8006bea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bee:	461a      	mov	r2, r3
 8006bf0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006bf4:	6013      	str	r3, [r2, #0]
 8006bf6:	e013      	b.n	8006c20 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	015a      	lsls	r2, r3, #5
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	4413      	add	r3, r2
 8006c00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c04:	461a      	mov	r2, r3
 8006c06:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006c0a:	6013      	str	r3, [r2, #0]
 8006c0c:	e008      	b.n	8006c20 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	015a      	lsls	r2, r3, #5
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	4413      	add	r3, r2
 8006c16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	015a      	lsls	r2, r3, #5
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	4413      	add	r3, r2
 8006c28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	2300      	movs	r3, #0
 8006c30:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	015a      	lsls	r2, r3, #5
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	4413      	add	r3, r2
 8006c3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c3e:	461a      	mov	r2, r3
 8006c40:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006c44:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	3301      	adds	r3, #1
 8006c4a:	613b      	str	r3, [r7, #16]
 8006c4c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006c50:	461a      	mov	r2, r3
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d3b5      	bcc.n	8006bc4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c58:	2300      	movs	r3, #0
 8006c5a:	613b      	str	r3, [r7, #16]
 8006c5c:	e043      	b.n	8006ce6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	015a      	lsls	r2, r3, #5
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	4413      	add	r3, r2
 8006c66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c74:	d118      	bne.n	8006ca8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d10a      	bne.n	8006c92 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	015a      	lsls	r2, r3, #5
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	4413      	add	r3, r2
 8006c84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c88:	461a      	mov	r2, r3
 8006c8a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006c8e:	6013      	str	r3, [r2, #0]
 8006c90:	e013      	b.n	8006cba <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	015a      	lsls	r2, r3, #5
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	4413      	add	r3, r2
 8006c9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c9e:	461a      	mov	r2, r3
 8006ca0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006ca4:	6013      	str	r3, [r2, #0]
 8006ca6:	e008      	b.n	8006cba <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	015a      	lsls	r2, r3, #5
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	4413      	add	r3, r2
 8006cb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	015a      	lsls	r2, r3, #5
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	4413      	add	r3, r2
 8006cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	2300      	movs	r3, #0
 8006cca:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	015a      	lsls	r2, r3, #5
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	4413      	add	r3, r2
 8006cd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cd8:	461a      	mov	r2, r3
 8006cda:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006cde:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	3301      	adds	r3, #1
 8006ce4:	613b      	str	r3, [r7, #16]
 8006ce6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006cea:	461a      	mov	r2, r3
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d3b5      	bcc.n	8006c5e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cf8:	691b      	ldr	r3, [r3, #16]
 8006cfa:	68fa      	ldr	r2, [r7, #12]
 8006cfc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d04:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006d12:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006d14:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d105      	bne.n	8006d28 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	699b      	ldr	r3, [r3, #24]
 8006d20:	f043 0210 	orr.w	r2, r3, #16
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	699a      	ldr	r2, [r3, #24]
 8006d2c:	4b10      	ldr	r3, [pc, #64]	; (8006d70 <USB_DevInit+0x2c4>)
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	687a      	ldr	r2, [r7, #4]
 8006d32:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006d34:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d005      	beq.n	8006d48 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	699b      	ldr	r3, [r3, #24]
 8006d40:	f043 0208 	orr.w	r2, r3, #8
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006d48:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d107      	bne.n	8006d60 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	699b      	ldr	r3, [r3, #24]
 8006d54:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d58:	f043 0304 	orr.w	r3, r3, #4
 8006d5c:	687a      	ldr	r2, [r7, #4]
 8006d5e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006d60:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3718      	adds	r7, #24
 8006d66:	46bd      	mov	sp, r7
 8006d68:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d6c:	b004      	add	sp, #16
 8006d6e:	4770      	bx	lr
 8006d70:	803c3800 	.word	0x803c3800

08006d74 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b085      	sub	sp, #20
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	3301      	adds	r3, #1
 8006d86:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006d8e:	d901      	bls.n	8006d94 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006d90:	2303      	movs	r3, #3
 8006d92:	e01b      	b.n	8006dcc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	691b      	ldr	r3, [r3, #16]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	daf2      	bge.n	8006d82 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	019b      	lsls	r3, r3, #6
 8006da4:	f043 0220 	orr.w	r2, r3, #32
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	3301      	adds	r3, #1
 8006db0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006db8:	d901      	bls.n	8006dbe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006dba:	2303      	movs	r3, #3
 8006dbc:	e006      	b.n	8006dcc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	691b      	ldr	r3, [r3, #16]
 8006dc2:	f003 0320 	and.w	r3, r3, #32
 8006dc6:	2b20      	cmp	r3, #32
 8006dc8:	d0f0      	beq.n	8006dac <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006dca:	2300      	movs	r3, #0
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3714      	adds	r7, #20
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr

08006dd8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b085      	sub	sp, #20
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006de0:	2300      	movs	r3, #0
 8006de2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	3301      	adds	r3, #1
 8006de8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006df0:	d901      	bls.n	8006df6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006df2:	2303      	movs	r3, #3
 8006df4:	e018      	b.n	8006e28 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	691b      	ldr	r3, [r3, #16]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	daf2      	bge.n	8006de4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2210      	movs	r2, #16
 8006e06:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	3301      	adds	r3, #1
 8006e0c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006e14:	d901      	bls.n	8006e1a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006e16:	2303      	movs	r3, #3
 8006e18:	e006      	b.n	8006e28 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	691b      	ldr	r3, [r3, #16]
 8006e1e:	f003 0310 	and.w	r3, r3, #16
 8006e22:	2b10      	cmp	r3, #16
 8006e24:	d0f0      	beq.n	8006e08 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006e26:	2300      	movs	r3, #0
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3714      	adds	r7, #20
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr

08006e34 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b085      	sub	sp, #20
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	460b      	mov	r3, r1
 8006e3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e4a:	681a      	ldr	r2, [r3, #0]
 8006e4c:	78fb      	ldrb	r3, [r7, #3]
 8006e4e:	68f9      	ldr	r1, [r7, #12]
 8006e50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e54:	4313      	orrs	r3, r2
 8006e56:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006e58:	2300      	movs	r3, #0
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3714      	adds	r7, #20
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr

08006e66 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8006e66:	b480      	push	{r7}
 8006e68:	b087      	sub	sp, #28
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	f003 0306 	and.w	r3, r3, #6
 8006e7e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d102      	bne.n	8006e8c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006e86:	2300      	movs	r3, #0
 8006e88:	75fb      	strb	r3, [r7, #23]
 8006e8a:	e00a      	b.n	8006ea2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2b02      	cmp	r3, #2
 8006e90:	d002      	beq.n	8006e98 <USB_GetDevSpeed+0x32>
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2b06      	cmp	r3, #6
 8006e96:	d102      	bne.n	8006e9e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006e98:	2302      	movs	r3, #2
 8006e9a:	75fb      	strb	r3, [r7, #23]
 8006e9c:	e001      	b.n	8006ea2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006e9e:	230f      	movs	r3, #15
 8006ea0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006ea2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	371c      	adds	r7, #28
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr

08006eb0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b085      	sub	sp, #20
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	781b      	ldrb	r3, [r3, #0]
 8006ec2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	785b      	ldrb	r3, [r3, #1]
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d13a      	bne.n	8006f42 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ed2:	69da      	ldr	r2, [r3, #28]
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	781b      	ldrb	r3, [r3, #0]
 8006ed8:	f003 030f 	and.w	r3, r3, #15
 8006edc:	2101      	movs	r1, #1
 8006ede:	fa01 f303 	lsl.w	r3, r1, r3
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	68f9      	ldr	r1, [r7, #12]
 8006ee6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006eea:	4313      	orrs	r3, r2
 8006eec:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	015a      	lsls	r2, r3, #5
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	4413      	add	r3, r2
 8006ef6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d155      	bne.n	8006fb0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	015a      	lsls	r2, r3, #5
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	4413      	add	r3, r2
 8006f0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f10:	681a      	ldr	r2, [r3, #0]
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	791b      	ldrb	r3, [r3, #4]
 8006f1e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006f20:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	059b      	lsls	r3, r3, #22
 8006f26:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	68ba      	ldr	r2, [r7, #8]
 8006f2c:	0151      	lsls	r1, r2, #5
 8006f2e:	68fa      	ldr	r2, [r7, #12]
 8006f30:	440a      	add	r2, r1
 8006f32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f3e:	6013      	str	r3, [r2, #0]
 8006f40:	e036      	b.n	8006fb0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f48:	69da      	ldr	r2, [r3, #28]
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	781b      	ldrb	r3, [r3, #0]
 8006f4e:	f003 030f 	and.w	r3, r3, #15
 8006f52:	2101      	movs	r1, #1
 8006f54:	fa01 f303 	lsl.w	r3, r1, r3
 8006f58:	041b      	lsls	r3, r3, #16
 8006f5a:	68f9      	ldr	r1, [r7, #12]
 8006f5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f60:	4313      	orrs	r3, r2
 8006f62:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	015a      	lsls	r2, r3, #5
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	4413      	add	r3, r2
 8006f6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d11a      	bne.n	8006fb0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	015a      	lsls	r2, r3, #5
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	4413      	add	r3, r2
 8006f82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f86:	681a      	ldr	r2, [r3, #0]
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	791b      	ldrb	r3, [r3, #4]
 8006f94:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006f96:	430b      	orrs	r3, r1
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	68ba      	ldr	r2, [r7, #8]
 8006f9c:	0151      	lsls	r1, r2, #5
 8006f9e:	68fa      	ldr	r2, [r7, #12]
 8006fa0:	440a      	add	r2, r1
 8006fa2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006faa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fae:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006fb0:	2300      	movs	r3, #0
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3714      	adds	r7, #20
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbc:	4770      	bx	lr
	...

08006fc0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b085      	sub	sp, #20
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	781b      	ldrb	r3, [r3, #0]
 8006fd2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	785b      	ldrb	r3, [r3, #1]
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d161      	bne.n	80070a0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	015a      	lsls	r2, r3, #5
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	4413      	add	r3, r2
 8006fe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006fee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ff2:	d11f      	bne.n	8007034 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	015a      	lsls	r2, r3, #5
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	4413      	add	r3, r2
 8006ffc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	68ba      	ldr	r2, [r7, #8]
 8007004:	0151      	lsls	r1, r2, #5
 8007006:	68fa      	ldr	r2, [r7, #12]
 8007008:	440a      	add	r2, r1
 800700a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800700e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007012:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	015a      	lsls	r2, r3, #5
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	4413      	add	r3, r2
 800701c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	68ba      	ldr	r2, [r7, #8]
 8007024:	0151      	lsls	r1, r2, #5
 8007026:	68fa      	ldr	r2, [r7, #12]
 8007028:	440a      	add	r2, r1
 800702a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800702e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007032:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800703a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	f003 030f 	and.w	r3, r3, #15
 8007044:	2101      	movs	r1, #1
 8007046:	fa01 f303 	lsl.w	r3, r1, r3
 800704a:	b29b      	uxth	r3, r3
 800704c:	43db      	mvns	r3, r3
 800704e:	68f9      	ldr	r1, [r7, #12]
 8007050:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007054:	4013      	ands	r3, r2
 8007056:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800705e:	69da      	ldr	r2, [r3, #28]
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	781b      	ldrb	r3, [r3, #0]
 8007064:	f003 030f 	and.w	r3, r3, #15
 8007068:	2101      	movs	r1, #1
 800706a:	fa01 f303 	lsl.w	r3, r1, r3
 800706e:	b29b      	uxth	r3, r3
 8007070:	43db      	mvns	r3, r3
 8007072:	68f9      	ldr	r1, [r7, #12]
 8007074:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007078:	4013      	ands	r3, r2
 800707a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	015a      	lsls	r2, r3, #5
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	4413      	add	r3, r2
 8007084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007088:	681a      	ldr	r2, [r3, #0]
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	0159      	lsls	r1, r3, #5
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	440b      	add	r3, r1
 8007092:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007096:	4619      	mov	r1, r3
 8007098:	4b35      	ldr	r3, [pc, #212]	; (8007170 <USB_DeactivateEndpoint+0x1b0>)
 800709a:	4013      	ands	r3, r2
 800709c:	600b      	str	r3, [r1, #0]
 800709e:	e060      	b.n	8007162 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	015a      	lsls	r2, r3, #5
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	4413      	add	r3, r2
 80070a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070b6:	d11f      	bne.n	80070f8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	015a      	lsls	r2, r3, #5
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	4413      	add	r3, r2
 80070c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	68ba      	ldr	r2, [r7, #8]
 80070c8:	0151      	lsls	r1, r2, #5
 80070ca:	68fa      	ldr	r2, [r7, #12]
 80070cc:	440a      	add	r2, r1
 80070ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070d2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80070d6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	015a      	lsls	r2, r3, #5
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	4413      	add	r3, r2
 80070e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	68ba      	ldr	r2, [r7, #8]
 80070e8:	0151      	lsls	r1, r2, #5
 80070ea:	68fa      	ldr	r2, [r7, #12]
 80070ec:	440a      	add	r2, r1
 80070ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80070f6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	781b      	ldrb	r3, [r3, #0]
 8007104:	f003 030f 	and.w	r3, r3, #15
 8007108:	2101      	movs	r1, #1
 800710a:	fa01 f303 	lsl.w	r3, r1, r3
 800710e:	041b      	lsls	r3, r3, #16
 8007110:	43db      	mvns	r3, r3
 8007112:	68f9      	ldr	r1, [r7, #12]
 8007114:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007118:	4013      	ands	r3, r2
 800711a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007122:	69da      	ldr	r2, [r3, #28]
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	781b      	ldrb	r3, [r3, #0]
 8007128:	f003 030f 	and.w	r3, r3, #15
 800712c:	2101      	movs	r1, #1
 800712e:	fa01 f303 	lsl.w	r3, r1, r3
 8007132:	041b      	lsls	r3, r3, #16
 8007134:	43db      	mvns	r3, r3
 8007136:	68f9      	ldr	r1, [r7, #12]
 8007138:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800713c:	4013      	ands	r3, r2
 800713e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	015a      	lsls	r2, r3, #5
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	4413      	add	r3, r2
 8007148:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800714c:	681a      	ldr	r2, [r3, #0]
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	0159      	lsls	r1, r3, #5
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	440b      	add	r3, r1
 8007156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800715a:	4619      	mov	r1, r3
 800715c:	4b05      	ldr	r3, [pc, #20]	; (8007174 <USB_DeactivateEndpoint+0x1b4>)
 800715e:	4013      	ands	r3, r2
 8007160:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007162:	2300      	movs	r3, #0
}
 8007164:	4618      	mov	r0, r3
 8007166:	3714      	adds	r7, #20
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr
 8007170:	ec337800 	.word	0xec337800
 8007174:	eff37800 	.word	0xeff37800

08007178 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b08a      	sub	sp, #40	; 0x28
 800717c:	af02      	add	r7, sp, #8
 800717e:	60f8      	str	r0, [r7, #12]
 8007180:	60b9      	str	r1, [r7, #8]
 8007182:	4613      	mov	r3, r2
 8007184:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	781b      	ldrb	r3, [r3, #0]
 800718e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	785b      	ldrb	r3, [r3, #1]
 8007194:	2b01      	cmp	r3, #1
 8007196:	f040 817a 	bne.w	800748e <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	691b      	ldr	r3, [r3, #16]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d132      	bne.n	8007208 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80071a2:	69bb      	ldr	r3, [r7, #24]
 80071a4:	015a      	lsls	r2, r3, #5
 80071a6:	69fb      	ldr	r3, [r7, #28]
 80071a8:	4413      	add	r3, r2
 80071aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071ae:	691b      	ldr	r3, [r3, #16]
 80071b0:	69ba      	ldr	r2, [r7, #24]
 80071b2:	0151      	lsls	r1, r2, #5
 80071b4:	69fa      	ldr	r2, [r7, #28]
 80071b6:	440a      	add	r2, r1
 80071b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071bc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80071c0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80071c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80071c6:	69bb      	ldr	r3, [r7, #24]
 80071c8:	015a      	lsls	r2, r3, #5
 80071ca:	69fb      	ldr	r3, [r7, #28]
 80071cc:	4413      	add	r3, r2
 80071ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071d2:	691b      	ldr	r3, [r3, #16]
 80071d4:	69ba      	ldr	r2, [r7, #24]
 80071d6:	0151      	lsls	r1, r2, #5
 80071d8:	69fa      	ldr	r2, [r7, #28]
 80071da:	440a      	add	r2, r1
 80071dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80071e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80071e6:	69bb      	ldr	r3, [r7, #24]
 80071e8:	015a      	lsls	r2, r3, #5
 80071ea:	69fb      	ldr	r3, [r7, #28]
 80071ec:	4413      	add	r3, r2
 80071ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071f2:	691b      	ldr	r3, [r3, #16]
 80071f4:	69ba      	ldr	r2, [r7, #24]
 80071f6:	0151      	lsls	r1, r2, #5
 80071f8:	69fa      	ldr	r2, [r7, #28]
 80071fa:	440a      	add	r2, r1
 80071fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007200:	0cdb      	lsrs	r3, r3, #19
 8007202:	04db      	lsls	r3, r3, #19
 8007204:	6113      	str	r3, [r2, #16]
 8007206:	e092      	b.n	800732e <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007208:	69bb      	ldr	r3, [r7, #24]
 800720a:	015a      	lsls	r2, r3, #5
 800720c:	69fb      	ldr	r3, [r7, #28]
 800720e:	4413      	add	r3, r2
 8007210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007214:	691b      	ldr	r3, [r3, #16]
 8007216:	69ba      	ldr	r2, [r7, #24]
 8007218:	0151      	lsls	r1, r2, #5
 800721a:	69fa      	ldr	r2, [r7, #28]
 800721c:	440a      	add	r2, r1
 800721e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007222:	0cdb      	lsrs	r3, r3, #19
 8007224:	04db      	lsls	r3, r3, #19
 8007226:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007228:	69bb      	ldr	r3, [r7, #24]
 800722a:	015a      	lsls	r2, r3, #5
 800722c:	69fb      	ldr	r3, [r7, #28]
 800722e:	4413      	add	r3, r2
 8007230:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007234:	691b      	ldr	r3, [r3, #16]
 8007236:	69ba      	ldr	r2, [r7, #24]
 8007238:	0151      	lsls	r1, r2, #5
 800723a:	69fa      	ldr	r2, [r7, #28]
 800723c:	440a      	add	r2, r1
 800723e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007242:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007246:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800724a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800724c:	69bb      	ldr	r3, [r7, #24]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d11a      	bne.n	8007288 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	691a      	ldr	r2, [r3, #16]
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	689b      	ldr	r3, [r3, #8]
 800725a:	429a      	cmp	r2, r3
 800725c:	d903      	bls.n	8007266 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	689a      	ldr	r2, [r3, #8]
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007266:	69bb      	ldr	r3, [r7, #24]
 8007268:	015a      	lsls	r2, r3, #5
 800726a:	69fb      	ldr	r3, [r7, #28]
 800726c:	4413      	add	r3, r2
 800726e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007272:	691b      	ldr	r3, [r3, #16]
 8007274:	69ba      	ldr	r2, [r7, #24]
 8007276:	0151      	lsls	r1, r2, #5
 8007278:	69fa      	ldr	r2, [r7, #28]
 800727a:	440a      	add	r2, r1
 800727c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007280:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007284:	6113      	str	r3, [r2, #16]
 8007286:	e01b      	b.n	80072c0 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007288:	69bb      	ldr	r3, [r7, #24]
 800728a:	015a      	lsls	r2, r3, #5
 800728c:	69fb      	ldr	r3, [r7, #28]
 800728e:	4413      	add	r3, r2
 8007290:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007294:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	6919      	ldr	r1, [r3, #16]
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	689b      	ldr	r3, [r3, #8]
 800729e:	440b      	add	r3, r1
 80072a0:	1e59      	subs	r1, r3, #1
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80072aa:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80072ac:	4ba2      	ldr	r3, [pc, #648]	; (8007538 <USB_EPStartXfer+0x3c0>)
 80072ae:	400b      	ands	r3, r1
 80072b0:	69b9      	ldr	r1, [r7, #24]
 80072b2:	0148      	lsls	r0, r1, #5
 80072b4:	69f9      	ldr	r1, [r7, #28]
 80072b6:	4401      	add	r1, r0
 80072b8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80072bc:	4313      	orrs	r3, r2
 80072be:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80072c0:	69bb      	ldr	r3, [r7, #24]
 80072c2:	015a      	lsls	r2, r3, #5
 80072c4:	69fb      	ldr	r3, [r7, #28]
 80072c6:	4413      	add	r3, r2
 80072c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072cc:	691a      	ldr	r2, [r3, #16]
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	691b      	ldr	r3, [r3, #16]
 80072d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072d6:	69b9      	ldr	r1, [r7, #24]
 80072d8:	0148      	lsls	r0, r1, #5
 80072da:	69f9      	ldr	r1, [r7, #28]
 80072dc:	4401      	add	r1, r0
 80072de:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80072e2:	4313      	orrs	r3, r2
 80072e4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	791b      	ldrb	r3, [r3, #4]
 80072ea:	2b01      	cmp	r3, #1
 80072ec:	d11f      	bne.n	800732e <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80072ee:	69bb      	ldr	r3, [r7, #24]
 80072f0:	015a      	lsls	r2, r3, #5
 80072f2:	69fb      	ldr	r3, [r7, #28]
 80072f4:	4413      	add	r3, r2
 80072f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072fa:	691b      	ldr	r3, [r3, #16]
 80072fc:	69ba      	ldr	r2, [r7, #24]
 80072fe:	0151      	lsls	r1, r2, #5
 8007300:	69fa      	ldr	r2, [r7, #28]
 8007302:	440a      	add	r2, r1
 8007304:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007308:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800730c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800730e:	69bb      	ldr	r3, [r7, #24]
 8007310:	015a      	lsls	r2, r3, #5
 8007312:	69fb      	ldr	r3, [r7, #28]
 8007314:	4413      	add	r3, r2
 8007316:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800731a:	691b      	ldr	r3, [r3, #16]
 800731c:	69ba      	ldr	r2, [r7, #24]
 800731e:	0151      	lsls	r1, r2, #5
 8007320:	69fa      	ldr	r2, [r7, #28]
 8007322:	440a      	add	r2, r1
 8007324:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007328:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800732c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800732e:	79fb      	ldrb	r3, [r7, #7]
 8007330:	2b01      	cmp	r3, #1
 8007332:	d14b      	bne.n	80073cc <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	69db      	ldr	r3, [r3, #28]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d009      	beq.n	8007350 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800733c:	69bb      	ldr	r3, [r7, #24]
 800733e:	015a      	lsls	r2, r3, #5
 8007340:	69fb      	ldr	r3, [r7, #28]
 8007342:	4413      	add	r3, r2
 8007344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007348:	461a      	mov	r2, r3
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	69db      	ldr	r3, [r3, #28]
 800734e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	791b      	ldrb	r3, [r3, #4]
 8007354:	2b01      	cmp	r3, #1
 8007356:	d128      	bne.n	80073aa <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007358:	69fb      	ldr	r3, [r7, #28]
 800735a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007364:	2b00      	cmp	r3, #0
 8007366:	d110      	bne.n	800738a <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007368:	69bb      	ldr	r3, [r7, #24]
 800736a:	015a      	lsls	r2, r3, #5
 800736c:	69fb      	ldr	r3, [r7, #28]
 800736e:	4413      	add	r3, r2
 8007370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	69ba      	ldr	r2, [r7, #24]
 8007378:	0151      	lsls	r1, r2, #5
 800737a:	69fa      	ldr	r2, [r7, #28]
 800737c:	440a      	add	r2, r1
 800737e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007382:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007386:	6013      	str	r3, [r2, #0]
 8007388:	e00f      	b.n	80073aa <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800738a:	69bb      	ldr	r3, [r7, #24]
 800738c:	015a      	lsls	r2, r3, #5
 800738e:	69fb      	ldr	r3, [r7, #28]
 8007390:	4413      	add	r3, r2
 8007392:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	69ba      	ldr	r2, [r7, #24]
 800739a:	0151      	lsls	r1, r2, #5
 800739c:	69fa      	ldr	r2, [r7, #28]
 800739e:	440a      	add	r2, r1
 80073a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073a8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80073aa:	69bb      	ldr	r3, [r7, #24]
 80073ac:	015a      	lsls	r2, r3, #5
 80073ae:	69fb      	ldr	r3, [r7, #28]
 80073b0:	4413      	add	r3, r2
 80073b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	69ba      	ldr	r2, [r7, #24]
 80073ba:	0151      	lsls	r1, r2, #5
 80073bc:	69fa      	ldr	r2, [r7, #28]
 80073be:	440a      	add	r2, r1
 80073c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073c4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80073c8:	6013      	str	r3, [r2, #0]
 80073ca:	e165      	b.n	8007698 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80073cc:	69bb      	ldr	r3, [r7, #24]
 80073ce:	015a      	lsls	r2, r3, #5
 80073d0:	69fb      	ldr	r3, [r7, #28]
 80073d2:	4413      	add	r3, r2
 80073d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	69ba      	ldr	r2, [r7, #24]
 80073dc:	0151      	lsls	r1, r2, #5
 80073de:	69fa      	ldr	r2, [r7, #28]
 80073e0:	440a      	add	r2, r1
 80073e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073e6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80073ea:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	791b      	ldrb	r3, [r3, #4]
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	d015      	beq.n	8007420 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	691b      	ldr	r3, [r3, #16]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	f000 814d 	beq.w	8007698 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80073fe:	69fb      	ldr	r3, [r7, #28]
 8007400:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007404:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	781b      	ldrb	r3, [r3, #0]
 800740a:	f003 030f 	and.w	r3, r3, #15
 800740e:	2101      	movs	r1, #1
 8007410:	fa01 f303 	lsl.w	r3, r1, r3
 8007414:	69f9      	ldr	r1, [r7, #28]
 8007416:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800741a:	4313      	orrs	r3, r2
 800741c:	634b      	str	r3, [r1, #52]	; 0x34
 800741e:	e13b      	b.n	8007698 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007420:	69fb      	ldr	r3, [r7, #28]
 8007422:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007426:	689b      	ldr	r3, [r3, #8]
 8007428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800742c:	2b00      	cmp	r3, #0
 800742e:	d110      	bne.n	8007452 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007430:	69bb      	ldr	r3, [r7, #24]
 8007432:	015a      	lsls	r2, r3, #5
 8007434:	69fb      	ldr	r3, [r7, #28]
 8007436:	4413      	add	r3, r2
 8007438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	69ba      	ldr	r2, [r7, #24]
 8007440:	0151      	lsls	r1, r2, #5
 8007442:	69fa      	ldr	r2, [r7, #28]
 8007444:	440a      	add	r2, r1
 8007446:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800744a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800744e:	6013      	str	r3, [r2, #0]
 8007450:	e00f      	b.n	8007472 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007452:	69bb      	ldr	r3, [r7, #24]
 8007454:	015a      	lsls	r2, r3, #5
 8007456:	69fb      	ldr	r3, [r7, #28]
 8007458:	4413      	add	r3, r2
 800745a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	69ba      	ldr	r2, [r7, #24]
 8007462:	0151      	lsls	r1, r2, #5
 8007464:	69fa      	ldr	r2, [r7, #28]
 8007466:	440a      	add	r2, r1
 8007468:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800746c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007470:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	68d9      	ldr	r1, [r3, #12]
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	781a      	ldrb	r2, [r3, #0]
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	691b      	ldr	r3, [r3, #16]
 800747e:	b298      	uxth	r0, r3
 8007480:	79fb      	ldrb	r3, [r7, #7]
 8007482:	9300      	str	r3, [sp, #0]
 8007484:	4603      	mov	r3, r0
 8007486:	68f8      	ldr	r0, [r7, #12]
 8007488:	f000 f9b8 	bl	80077fc <USB_WritePacket>
 800748c:	e104      	b.n	8007698 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800748e:	69bb      	ldr	r3, [r7, #24]
 8007490:	015a      	lsls	r2, r3, #5
 8007492:	69fb      	ldr	r3, [r7, #28]
 8007494:	4413      	add	r3, r2
 8007496:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800749a:	691b      	ldr	r3, [r3, #16]
 800749c:	69ba      	ldr	r2, [r7, #24]
 800749e:	0151      	lsls	r1, r2, #5
 80074a0:	69fa      	ldr	r2, [r7, #28]
 80074a2:	440a      	add	r2, r1
 80074a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074a8:	0cdb      	lsrs	r3, r3, #19
 80074aa:	04db      	lsls	r3, r3, #19
 80074ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80074ae:	69bb      	ldr	r3, [r7, #24]
 80074b0:	015a      	lsls	r2, r3, #5
 80074b2:	69fb      	ldr	r3, [r7, #28]
 80074b4:	4413      	add	r3, r2
 80074b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074ba:	691b      	ldr	r3, [r3, #16]
 80074bc:	69ba      	ldr	r2, [r7, #24]
 80074be:	0151      	lsls	r1, r2, #5
 80074c0:	69fa      	ldr	r2, [r7, #28]
 80074c2:	440a      	add	r2, r1
 80074c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074c8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80074cc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80074d0:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80074d2:	69bb      	ldr	r3, [r7, #24]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d131      	bne.n	800753c <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	691b      	ldr	r3, [r3, #16]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d003      	beq.n	80074e8 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	689a      	ldr	r2, [r3, #8]
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	689a      	ldr	r2, [r3, #8]
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80074f0:	69bb      	ldr	r3, [r7, #24]
 80074f2:	015a      	lsls	r2, r3, #5
 80074f4:	69fb      	ldr	r3, [r7, #28]
 80074f6:	4413      	add	r3, r2
 80074f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074fc:	691a      	ldr	r2, [r3, #16]
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	6a1b      	ldr	r3, [r3, #32]
 8007502:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007506:	69b9      	ldr	r1, [r7, #24]
 8007508:	0148      	lsls	r0, r1, #5
 800750a:	69f9      	ldr	r1, [r7, #28]
 800750c:	4401      	add	r1, r0
 800750e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007512:	4313      	orrs	r3, r2
 8007514:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007516:	69bb      	ldr	r3, [r7, #24]
 8007518:	015a      	lsls	r2, r3, #5
 800751a:	69fb      	ldr	r3, [r7, #28]
 800751c:	4413      	add	r3, r2
 800751e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007522:	691b      	ldr	r3, [r3, #16]
 8007524:	69ba      	ldr	r2, [r7, #24]
 8007526:	0151      	lsls	r1, r2, #5
 8007528:	69fa      	ldr	r2, [r7, #28]
 800752a:	440a      	add	r2, r1
 800752c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007530:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007534:	6113      	str	r3, [r2, #16]
 8007536:	e061      	b.n	80075fc <USB_EPStartXfer+0x484>
 8007538:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	691b      	ldr	r3, [r3, #16]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d123      	bne.n	800758c <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007544:	69bb      	ldr	r3, [r7, #24]
 8007546:	015a      	lsls	r2, r3, #5
 8007548:	69fb      	ldr	r3, [r7, #28]
 800754a:	4413      	add	r3, r2
 800754c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007550:	691a      	ldr	r2, [r3, #16]
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	689b      	ldr	r3, [r3, #8]
 8007556:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800755a:	69b9      	ldr	r1, [r7, #24]
 800755c:	0148      	lsls	r0, r1, #5
 800755e:	69f9      	ldr	r1, [r7, #28]
 8007560:	4401      	add	r1, r0
 8007562:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007566:	4313      	orrs	r3, r2
 8007568:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800756a:	69bb      	ldr	r3, [r7, #24]
 800756c:	015a      	lsls	r2, r3, #5
 800756e:	69fb      	ldr	r3, [r7, #28]
 8007570:	4413      	add	r3, r2
 8007572:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007576:	691b      	ldr	r3, [r3, #16]
 8007578:	69ba      	ldr	r2, [r7, #24]
 800757a:	0151      	lsls	r1, r2, #5
 800757c:	69fa      	ldr	r2, [r7, #28]
 800757e:	440a      	add	r2, r1
 8007580:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007584:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007588:	6113      	str	r3, [r2, #16]
 800758a:	e037      	b.n	80075fc <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	691a      	ldr	r2, [r3, #16]
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	689b      	ldr	r3, [r3, #8]
 8007594:	4413      	add	r3, r2
 8007596:	1e5a      	subs	r2, r3, #1
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	689b      	ldr	r3, [r3, #8]
 800759c:	fbb2 f3f3 	udiv	r3, r2, r3
 80075a0:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	689b      	ldr	r3, [r3, #8]
 80075a6:	8afa      	ldrh	r2, [r7, #22]
 80075a8:	fb03 f202 	mul.w	r2, r3, r2
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80075b0:	69bb      	ldr	r3, [r7, #24]
 80075b2:	015a      	lsls	r2, r3, #5
 80075b4:	69fb      	ldr	r3, [r7, #28]
 80075b6:	4413      	add	r3, r2
 80075b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075bc:	691a      	ldr	r2, [r3, #16]
 80075be:	8afb      	ldrh	r3, [r7, #22]
 80075c0:	04d9      	lsls	r1, r3, #19
 80075c2:	4b38      	ldr	r3, [pc, #224]	; (80076a4 <USB_EPStartXfer+0x52c>)
 80075c4:	400b      	ands	r3, r1
 80075c6:	69b9      	ldr	r1, [r7, #24]
 80075c8:	0148      	lsls	r0, r1, #5
 80075ca:	69f9      	ldr	r1, [r7, #28]
 80075cc:	4401      	add	r1, r0
 80075ce:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80075d2:	4313      	orrs	r3, r2
 80075d4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80075d6:	69bb      	ldr	r3, [r7, #24]
 80075d8:	015a      	lsls	r2, r3, #5
 80075da:	69fb      	ldr	r3, [r7, #28]
 80075dc:	4413      	add	r3, r2
 80075de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075e2:	691a      	ldr	r2, [r3, #16]
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	6a1b      	ldr	r3, [r3, #32]
 80075e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80075ec:	69b9      	ldr	r1, [r7, #24]
 80075ee:	0148      	lsls	r0, r1, #5
 80075f0:	69f9      	ldr	r1, [r7, #28]
 80075f2:	4401      	add	r1, r0
 80075f4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80075f8:	4313      	orrs	r3, r2
 80075fa:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80075fc:	79fb      	ldrb	r3, [r7, #7]
 80075fe:	2b01      	cmp	r3, #1
 8007600:	d10d      	bne.n	800761e <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	68db      	ldr	r3, [r3, #12]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d009      	beq.n	800761e <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	68d9      	ldr	r1, [r3, #12]
 800760e:	69bb      	ldr	r3, [r7, #24]
 8007610:	015a      	lsls	r2, r3, #5
 8007612:	69fb      	ldr	r3, [r7, #28]
 8007614:	4413      	add	r3, r2
 8007616:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800761a:	460a      	mov	r2, r1
 800761c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	791b      	ldrb	r3, [r3, #4]
 8007622:	2b01      	cmp	r3, #1
 8007624:	d128      	bne.n	8007678 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007626:	69fb      	ldr	r3, [r7, #28]
 8007628:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800762c:	689b      	ldr	r3, [r3, #8]
 800762e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007632:	2b00      	cmp	r3, #0
 8007634:	d110      	bne.n	8007658 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007636:	69bb      	ldr	r3, [r7, #24]
 8007638:	015a      	lsls	r2, r3, #5
 800763a:	69fb      	ldr	r3, [r7, #28]
 800763c:	4413      	add	r3, r2
 800763e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	69ba      	ldr	r2, [r7, #24]
 8007646:	0151      	lsls	r1, r2, #5
 8007648:	69fa      	ldr	r2, [r7, #28]
 800764a:	440a      	add	r2, r1
 800764c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007650:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007654:	6013      	str	r3, [r2, #0]
 8007656:	e00f      	b.n	8007678 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007658:	69bb      	ldr	r3, [r7, #24]
 800765a:	015a      	lsls	r2, r3, #5
 800765c:	69fb      	ldr	r3, [r7, #28]
 800765e:	4413      	add	r3, r2
 8007660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	69ba      	ldr	r2, [r7, #24]
 8007668:	0151      	lsls	r1, r2, #5
 800766a:	69fa      	ldr	r2, [r7, #28]
 800766c:	440a      	add	r2, r1
 800766e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007672:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007676:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007678:	69bb      	ldr	r3, [r7, #24]
 800767a:	015a      	lsls	r2, r3, #5
 800767c:	69fb      	ldr	r3, [r7, #28]
 800767e:	4413      	add	r3, r2
 8007680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	69ba      	ldr	r2, [r7, #24]
 8007688:	0151      	lsls	r1, r2, #5
 800768a:	69fa      	ldr	r2, [r7, #28]
 800768c:	440a      	add	r2, r1
 800768e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007692:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007696:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007698:	2300      	movs	r3, #0
}
 800769a:	4618      	mov	r0, r3
 800769c:	3720      	adds	r7, #32
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}
 80076a2:	bf00      	nop
 80076a4:	1ff80000 	.word	0x1ff80000

080076a8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b087      	sub	sp, #28
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80076b2:	2300      	movs	r3, #0
 80076b4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80076b6:	2300      	movs	r3, #0
 80076b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	785b      	ldrb	r3, [r3, #1]
 80076c2:	2b01      	cmp	r3, #1
 80076c4:	d14a      	bne.n	800775c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	781b      	ldrb	r3, [r3, #0]
 80076ca:	015a      	lsls	r2, r3, #5
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	4413      	add	r3, r2
 80076d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80076da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80076de:	f040 8086 	bne.w	80077ee <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	781b      	ldrb	r3, [r3, #0]
 80076e6:	015a      	lsls	r2, r3, #5
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	4413      	add	r3, r2
 80076ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	683a      	ldr	r2, [r7, #0]
 80076f4:	7812      	ldrb	r2, [r2, #0]
 80076f6:	0151      	lsls	r1, r2, #5
 80076f8:	693a      	ldr	r2, [r7, #16]
 80076fa:	440a      	add	r2, r1
 80076fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007700:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007704:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	781b      	ldrb	r3, [r3, #0]
 800770a:	015a      	lsls	r2, r3, #5
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	4413      	add	r3, r2
 8007710:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	683a      	ldr	r2, [r7, #0]
 8007718:	7812      	ldrb	r2, [r2, #0]
 800771a:	0151      	lsls	r1, r2, #5
 800771c:	693a      	ldr	r2, [r7, #16]
 800771e:	440a      	add	r2, r1
 8007720:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007724:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007728:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	3301      	adds	r3, #1
 800772e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f242 7210 	movw	r2, #10000	; 0x2710
 8007736:	4293      	cmp	r3, r2
 8007738:	d902      	bls.n	8007740 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800773a:	2301      	movs	r3, #1
 800773c:	75fb      	strb	r3, [r7, #23]
          break;
 800773e:	e056      	b.n	80077ee <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	781b      	ldrb	r3, [r3, #0]
 8007744:	015a      	lsls	r2, r3, #5
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	4413      	add	r3, r2
 800774a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007754:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007758:	d0e7      	beq.n	800772a <USB_EPStopXfer+0x82>
 800775a:	e048      	b.n	80077ee <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	015a      	lsls	r2, r3, #5
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	4413      	add	r3, r2
 8007766:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007770:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007774:	d13b      	bne.n	80077ee <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	781b      	ldrb	r3, [r3, #0]
 800777a:	015a      	lsls	r2, r3, #5
 800777c:	693b      	ldr	r3, [r7, #16]
 800777e:	4413      	add	r3, r2
 8007780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	683a      	ldr	r2, [r7, #0]
 8007788:	7812      	ldrb	r2, [r2, #0]
 800778a:	0151      	lsls	r1, r2, #5
 800778c:	693a      	ldr	r2, [r7, #16]
 800778e:	440a      	add	r2, r1
 8007790:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007794:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007798:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	781b      	ldrb	r3, [r3, #0]
 800779e:	015a      	lsls	r2, r3, #5
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	4413      	add	r3, r2
 80077a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	683a      	ldr	r2, [r7, #0]
 80077ac:	7812      	ldrb	r2, [r2, #0]
 80077ae:	0151      	lsls	r1, r2, #5
 80077b0:	693a      	ldr	r2, [r7, #16]
 80077b2:	440a      	add	r2, r1
 80077b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80077bc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	3301      	adds	r3, #1
 80077c2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f242 7210 	movw	r2, #10000	; 0x2710
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d902      	bls.n	80077d4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80077ce:	2301      	movs	r3, #1
 80077d0:	75fb      	strb	r3, [r7, #23]
          break;
 80077d2:	e00c      	b.n	80077ee <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	781b      	ldrb	r3, [r3, #0]
 80077d8:	015a      	lsls	r2, r3, #5
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	4413      	add	r3, r2
 80077de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80077e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80077ec:	d0e7      	beq.n	80077be <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80077ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	371c      	adds	r7, #28
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr

080077fc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b089      	sub	sp, #36	; 0x24
 8007800:	af00      	add	r7, sp, #0
 8007802:	60f8      	str	r0, [r7, #12]
 8007804:	60b9      	str	r1, [r7, #8]
 8007806:	4611      	mov	r1, r2
 8007808:	461a      	mov	r2, r3
 800780a:	460b      	mov	r3, r1
 800780c:	71fb      	strb	r3, [r7, #7]
 800780e:	4613      	mov	r3, r2
 8007810:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800781a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800781e:	2b00      	cmp	r3, #0
 8007820:	d123      	bne.n	800786a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007822:	88bb      	ldrh	r3, [r7, #4]
 8007824:	3303      	adds	r3, #3
 8007826:	089b      	lsrs	r3, r3, #2
 8007828:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800782a:	2300      	movs	r3, #0
 800782c:	61bb      	str	r3, [r7, #24]
 800782e:	e018      	b.n	8007862 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007830:	79fb      	ldrb	r3, [r7, #7]
 8007832:	031a      	lsls	r2, r3, #12
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	4413      	add	r3, r2
 8007838:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800783c:	461a      	mov	r2, r3
 800783e:	69fb      	ldr	r3, [r7, #28]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007844:	69fb      	ldr	r3, [r7, #28]
 8007846:	3301      	adds	r3, #1
 8007848:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800784a:	69fb      	ldr	r3, [r7, #28]
 800784c:	3301      	adds	r3, #1
 800784e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007850:	69fb      	ldr	r3, [r7, #28]
 8007852:	3301      	adds	r3, #1
 8007854:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007856:	69fb      	ldr	r3, [r7, #28]
 8007858:	3301      	adds	r3, #1
 800785a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800785c:	69bb      	ldr	r3, [r7, #24]
 800785e:	3301      	adds	r3, #1
 8007860:	61bb      	str	r3, [r7, #24]
 8007862:	69ba      	ldr	r2, [r7, #24]
 8007864:	693b      	ldr	r3, [r7, #16]
 8007866:	429a      	cmp	r2, r3
 8007868:	d3e2      	bcc.n	8007830 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800786a:	2300      	movs	r3, #0
}
 800786c:	4618      	mov	r0, r3
 800786e:	3724      	adds	r7, #36	; 0x24
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr

08007878 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007878:	b480      	push	{r7}
 800787a:	b08b      	sub	sp, #44	; 0x2c
 800787c:	af00      	add	r7, sp, #0
 800787e:	60f8      	str	r0, [r7, #12]
 8007880:	60b9      	str	r1, [r7, #8]
 8007882:	4613      	mov	r3, r2
 8007884:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800788e:	88fb      	ldrh	r3, [r7, #6]
 8007890:	089b      	lsrs	r3, r3, #2
 8007892:	b29b      	uxth	r3, r3
 8007894:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007896:	88fb      	ldrh	r3, [r7, #6]
 8007898:	f003 0303 	and.w	r3, r3, #3
 800789c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800789e:	2300      	movs	r3, #0
 80078a0:	623b      	str	r3, [r7, #32]
 80078a2:	e014      	b.n	80078ce <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80078a4:	69bb      	ldr	r3, [r7, #24]
 80078a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078aa:	681a      	ldr	r2, [r3, #0]
 80078ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ae:	601a      	str	r2, [r3, #0]
    pDest++;
 80078b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b2:	3301      	adds	r3, #1
 80078b4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80078b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b8:	3301      	adds	r3, #1
 80078ba:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80078bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078be:	3301      	adds	r3, #1
 80078c0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80078c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c4:	3301      	adds	r3, #1
 80078c6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80078c8:	6a3b      	ldr	r3, [r7, #32]
 80078ca:	3301      	adds	r3, #1
 80078cc:	623b      	str	r3, [r7, #32]
 80078ce:	6a3a      	ldr	r2, [r7, #32]
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	429a      	cmp	r2, r3
 80078d4:	d3e6      	bcc.n	80078a4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80078d6:	8bfb      	ldrh	r3, [r7, #30]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d01e      	beq.n	800791a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80078dc:	2300      	movs	r3, #0
 80078de:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80078e0:	69bb      	ldr	r3, [r7, #24]
 80078e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078e6:	461a      	mov	r2, r3
 80078e8:	f107 0310 	add.w	r3, r7, #16
 80078ec:	6812      	ldr	r2, [r2, #0]
 80078ee:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80078f0:	693a      	ldr	r2, [r7, #16]
 80078f2:	6a3b      	ldr	r3, [r7, #32]
 80078f4:	b2db      	uxtb	r3, r3
 80078f6:	00db      	lsls	r3, r3, #3
 80078f8:	fa22 f303 	lsr.w	r3, r2, r3
 80078fc:	b2da      	uxtb	r2, r3
 80078fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007900:	701a      	strb	r2, [r3, #0]
      i++;
 8007902:	6a3b      	ldr	r3, [r7, #32]
 8007904:	3301      	adds	r3, #1
 8007906:	623b      	str	r3, [r7, #32]
      pDest++;
 8007908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790a:	3301      	adds	r3, #1
 800790c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800790e:	8bfb      	ldrh	r3, [r7, #30]
 8007910:	3b01      	subs	r3, #1
 8007912:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007914:	8bfb      	ldrh	r3, [r7, #30]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d1ea      	bne.n	80078f0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800791a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800791c:	4618      	mov	r0, r3
 800791e:	372c      	adds	r7, #44	; 0x2c
 8007920:	46bd      	mov	sp, r7
 8007922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007926:	4770      	bx	lr

08007928 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007928:	b480      	push	{r7}
 800792a:	b085      	sub	sp, #20
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
 8007930:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	781b      	ldrb	r3, [r3, #0]
 800793a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	785b      	ldrb	r3, [r3, #1]
 8007940:	2b01      	cmp	r3, #1
 8007942:	d12c      	bne.n	800799e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	015a      	lsls	r2, r3, #5
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	4413      	add	r3, r2
 800794c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	2b00      	cmp	r3, #0
 8007954:	db12      	blt.n	800797c <USB_EPSetStall+0x54>
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d00f      	beq.n	800797c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	015a      	lsls	r2, r3, #5
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	4413      	add	r3, r2
 8007964:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	68ba      	ldr	r2, [r7, #8]
 800796c:	0151      	lsls	r1, r2, #5
 800796e:	68fa      	ldr	r2, [r7, #12]
 8007970:	440a      	add	r2, r1
 8007972:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007976:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800797a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	015a      	lsls	r2, r3, #5
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	4413      	add	r3, r2
 8007984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	68ba      	ldr	r2, [r7, #8]
 800798c:	0151      	lsls	r1, r2, #5
 800798e:	68fa      	ldr	r2, [r7, #12]
 8007990:	440a      	add	r2, r1
 8007992:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007996:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800799a:	6013      	str	r3, [r2, #0]
 800799c:	e02b      	b.n	80079f6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	015a      	lsls	r2, r3, #5
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	4413      	add	r3, r2
 80079a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	db12      	blt.n	80079d6 <USB_EPSetStall+0xae>
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d00f      	beq.n	80079d6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	015a      	lsls	r2, r3, #5
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	4413      	add	r3, r2
 80079be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	68ba      	ldr	r2, [r7, #8]
 80079c6:	0151      	lsls	r1, r2, #5
 80079c8:	68fa      	ldr	r2, [r7, #12]
 80079ca:	440a      	add	r2, r1
 80079cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079d0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80079d4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	015a      	lsls	r2, r3, #5
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	4413      	add	r3, r2
 80079de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	68ba      	ldr	r2, [r7, #8]
 80079e6:	0151      	lsls	r1, r2, #5
 80079e8:	68fa      	ldr	r2, [r7, #12]
 80079ea:	440a      	add	r2, r1
 80079ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80079f4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80079f6:	2300      	movs	r3, #0
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3714      	adds	r7, #20
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr

08007a04 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b085      	sub	sp, #20
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	781b      	ldrb	r3, [r3, #0]
 8007a16:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	785b      	ldrb	r3, [r3, #1]
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	d128      	bne.n	8007a72 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	015a      	lsls	r2, r3, #5
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	4413      	add	r3, r2
 8007a28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	68ba      	ldr	r2, [r7, #8]
 8007a30:	0151      	lsls	r1, r2, #5
 8007a32:	68fa      	ldr	r2, [r7, #12]
 8007a34:	440a      	add	r2, r1
 8007a36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a3a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007a3e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	791b      	ldrb	r3, [r3, #4]
 8007a44:	2b03      	cmp	r3, #3
 8007a46:	d003      	beq.n	8007a50 <USB_EPClearStall+0x4c>
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	791b      	ldrb	r3, [r3, #4]
 8007a4c:	2b02      	cmp	r3, #2
 8007a4e:	d138      	bne.n	8007ac2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	015a      	lsls	r2, r3, #5
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	4413      	add	r3, r2
 8007a58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	68ba      	ldr	r2, [r7, #8]
 8007a60:	0151      	lsls	r1, r2, #5
 8007a62:	68fa      	ldr	r2, [r7, #12]
 8007a64:	440a      	add	r2, r1
 8007a66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a6e:	6013      	str	r3, [r2, #0]
 8007a70:	e027      	b.n	8007ac2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	015a      	lsls	r2, r3, #5
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	4413      	add	r3, r2
 8007a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	68ba      	ldr	r2, [r7, #8]
 8007a82:	0151      	lsls	r1, r2, #5
 8007a84:	68fa      	ldr	r2, [r7, #12]
 8007a86:	440a      	add	r2, r1
 8007a88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a8c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007a90:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	791b      	ldrb	r3, [r3, #4]
 8007a96:	2b03      	cmp	r3, #3
 8007a98:	d003      	beq.n	8007aa2 <USB_EPClearStall+0x9e>
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	791b      	ldrb	r3, [r3, #4]
 8007a9e:	2b02      	cmp	r3, #2
 8007aa0:	d10f      	bne.n	8007ac2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	015a      	lsls	r2, r3, #5
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	4413      	add	r3, r2
 8007aaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	68ba      	ldr	r2, [r7, #8]
 8007ab2:	0151      	lsls	r1, r2, #5
 8007ab4:	68fa      	ldr	r2, [r7, #12]
 8007ab6:	440a      	add	r2, r1
 8007ab8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ac0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007ac2:	2300      	movs	r3, #0
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3714      	adds	r7, #20
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ace:	4770      	bx	lr

08007ad0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b085      	sub	sp, #20
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	460b      	mov	r3, r1
 8007ada:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	68fa      	ldr	r2, [r7, #12]
 8007aea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007aee:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007af2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007afa:	681a      	ldr	r2, [r3, #0]
 8007afc:	78fb      	ldrb	r3, [r7, #3]
 8007afe:	011b      	lsls	r3, r3, #4
 8007b00:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007b04:	68f9      	ldr	r1, [r7, #12]
 8007b06:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007b0e:	2300      	movs	r3, #0
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3714      	adds	r7, #20
 8007b14:	46bd      	mov	sp, r7
 8007b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1a:	4770      	bx	lr

08007b1c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b085      	sub	sp, #20
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	68fa      	ldr	r2, [r7, #12]
 8007b32:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007b36:	f023 0303 	bic.w	r3, r3, #3
 8007b3a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	68fa      	ldr	r2, [r7, #12]
 8007b46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b4a:	f023 0302 	bic.w	r3, r3, #2
 8007b4e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007b50:	2300      	movs	r3, #0
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3714      	adds	r7, #20
 8007b56:	46bd      	mov	sp, r7
 8007b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5c:	4770      	bx	lr

08007b5e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007b5e:	b480      	push	{r7}
 8007b60:	b085      	sub	sp, #20
 8007b62:	af00      	add	r7, sp, #0
 8007b64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	68fa      	ldr	r2, [r7, #12]
 8007b74:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007b78:	f023 0303 	bic.w	r3, r3, #3
 8007b7c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	68fa      	ldr	r2, [r7, #12]
 8007b88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b8c:	f043 0302 	orr.w	r3, r3, #2
 8007b90:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007b92:	2300      	movs	r3, #0
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	3714      	adds	r7, #20
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9e:	4770      	bx	lr

08007ba0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b085      	sub	sp, #20
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	695b      	ldr	r3, [r3, #20]
 8007bac:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	699b      	ldr	r3, [r3, #24]
 8007bb2:	68fa      	ldr	r2, [r7, #12]
 8007bb4:	4013      	ands	r3, r2
 8007bb6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3714      	adds	r7, #20
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc4:	4770      	bx	lr

08007bc6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007bc6:	b480      	push	{r7}
 8007bc8:	b085      	sub	sp, #20
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bd8:	699b      	ldr	r3, [r3, #24]
 8007bda:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007be2:	69db      	ldr	r3, [r3, #28]
 8007be4:	68ba      	ldr	r2, [r7, #8]
 8007be6:	4013      	ands	r3, r2
 8007be8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	0c1b      	lsrs	r3, r3, #16
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3714      	adds	r7, #20
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf8:	4770      	bx	lr

08007bfa <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007bfa:	b480      	push	{r7}
 8007bfc:	b085      	sub	sp, #20
 8007bfe:	af00      	add	r7, sp, #0
 8007c00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c0c:	699b      	ldr	r3, [r3, #24]
 8007c0e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c16:	69db      	ldr	r3, [r3, #28]
 8007c18:	68ba      	ldr	r2, [r7, #8]
 8007c1a:	4013      	ands	r3, r2
 8007c1c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	b29b      	uxth	r3, r3
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3714      	adds	r7, #20
 8007c26:	46bd      	mov	sp, r7
 8007c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2c:	4770      	bx	lr

08007c2e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007c2e:	b480      	push	{r7}
 8007c30:	b085      	sub	sp, #20
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	6078      	str	r0, [r7, #4]
 8007c36:	460b      	mov	r3, r1
 8007c38:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007c3e:	78fb      	ldrb	r3, [r7, #3]
 8007c40:	015a      	lsls	r2, r3, #5
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	4413      	add	r3, r2
 8007c46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c4a:	689b      	ldr	r3, [r3, #8]
 8007c4c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c54:	695b      	ldr	r3, [r3, #20]
 8007c56:	68ba      	ldr	r2, [r7, #8]
 8007c58:	4013      	ands	r3, r2
 8007c5a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007c5c:	68bb      	ldr	r3, [r7, #8]
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3714      	adds	r7, #20
 8007c62:	46bd      	mov	sp, r7
 8007c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c68:	4770      	bx	lr

08007c6a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007c6a:	b480      	push	{r7}
 8007c6c:	b087      	sub	sp, #28
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	6078      	str	r0, [r7, #4]
 8007c72:	460b      	mov	r3, r1
 8007c74:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c80:	691b      	ldr	r3, [r3, #16]
 8007c82:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c8c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007c8e:	78fb      	ldrb	r3, [r7, #3]
 8007c90:	f003 030f 	and.w	r3, r3, #15
 8007c94:	68fa      	ldr	r2, [r7, #12]
 8007c96:	fa22 f303 	lsr.w	r3, r2, r3
 8007c9a:	01db      	lsls	r3, r3, #7
 8007c9c:	b2db      	uxtb	r3, r3
 8007c9e:	693a      	ldr	r2, [r7, #16]
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007ca4:	78fb      	ldrb	r3, [r7, #3]
 8007ca6:	015a      	lsls	r2, r3, #5
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	4413      	add	r3, r2
 8007cac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cb0:	689b      	ldr	r3, [r3, #8]
 8007cb2:	693a      	ldr	r2, [r7, #16]
 8007cb4:	4013      	ands	r3, r2
 8007cb6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007cb8:	68bb      	ldr	r3, [r7, #8]
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	371c      	adds	r7, #28
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc4:	4770      	bx	lr

08007cc6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007cc6:	b480      	push	{r7}
 8007cc8:	b083      	sub	sp, #12
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	695b      	ldr	r3, [r3, #20]
 8007cd2:	f003 0301 	and.w	r3, r3, #1
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	370c      	adds	r7, #12
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce0:	4770      	bx	lr

08007ce2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8007ce2:	b480      	push	{r7}
 8007ce4:	b085      	sub	sp, #20
 8007ce6:	af00      	add	r7, sp, #0
 8007ce8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	68fa      	ldr	r2, [r7, #12]
 8007cf8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cfc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007d00:	f023 0307 	bic.w	r3, r3, #7
 8007d04:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	68fa      	ldr	r2, [r7, #12]
 8007d10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d18:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007d1a:	2300      	movs	r3, #0
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	3714      	adds	r7, #20
 8007d20:	46bd      	mov	sp, r7
 8007d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d26:	4770      	bx	lr

08007d28 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b087      	sub	sp, #28
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	60f8      	str	r0, [r7, #12]
 8007d30:	460b      	mov	r3, r1
 8007d32:	607a      	str	r2, [r7, #4]
 8007d34:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	333c      	adds	r3, #60	; 0x3c
 8007d3e:	3304      	adds	r3, #4
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	4a26      	ldr	r2, [pc, #152]	; (8007de0 <USB_EP0_OutStart+0xb8>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d90a      	bls.n	8007d62 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d5c:	d101      	bne.n	8007d62 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	e037      	b.n	8007dd2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007d62:	697b      	ldr	r3, [r7, #20]
 8007d64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d68:	461a      	mov	r2, r3
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007d6e:	697b      	ldr	r3, [r7, #20]
 8007d70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d74:	691b      	ldr	r3, [r3, #16]
 8007d76:	697a      	ldr	r2, [r7, #20]
 8007d78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d7c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007d80:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d88:	691b      	ldr	r3, [r3, #16]
 8007d8a:	697a      	ldr	r2, [r7, #20]
 8007d8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d90:	f043 0318 	orr.w	r3, r3, #24
 8007d94:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d9c:	691b      	ldr	r3, [r3, #16]
 8007d9e:	697a      	ldr	r2, [r7, #20]
 8007da0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007da4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007da8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007daa:	7afb      	ldrb	r3, [r7, #11]
 8007dac:	2b01      	cmp	r3, #1
 8007dae:	d10f      	bne.n	8007dd0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007db6:	461a      	mov	r2, r3
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	697a      	ldr	r2, [r7, #20]
 8007dc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007dca:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007dce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007dd0:	2300      	movs	r3, #0
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	371c      	adds	r7, #28
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ddc:	4770      	bx	lr
 8007dde:	bf00      	nop
 8007de0:	4f54300a 	.word	0x4f54300a

08007de4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b085      	sub	sp, #20
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007dec:	2300      	movs	r3, #0
 8007dee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	3301      	adds	r3, #1
 8007df4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007dfc:	d901      	bls.n	8007e02 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007dfe:	2303      	movs	r3, #3
 8007e00:	e01b      	b.n	8007e3a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	691b      	ldr	r3, [r3, #16]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	daf2      	bge.n	8007df0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	691b      	ldr	r3, [r3, #16]
 8007e12:	f043 0201 	orr.w	r2, r3, #1
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	3301      	adds	r3, #1
 8007e1e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007e26:	d901      	bls.n	8007e2c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007e28:	2303      	movs	r3, #3
 8007e2a:	e006      	b.n	8007e3a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	691b      	ldr	r3, [r3, #16]
 8007e30:	f003 0301 	and.w	r3, r3, #1
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	d0f0      	beq.n	8007e1a <USB_CoreReset+0x36>

  return HAL_OK;
 8007e38:	2300      	movs	r3, #0
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3714      	adds	r7, #20
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e44:	4770      	bx	lr
	...

08007e48 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b084      	sub	sp, #16
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
 8007e50:	460b      	mov	r3, r1
 8007e52:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007e54:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007e58:	f003 ff72 	bl	800bd40 <USBD_static_malloc>
 8007e5c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d109      	bne.n	8007e78 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	32b0      	adds	r2, #176	; 0xb0
 8007e6e:	2100      	movs	r1, #0
 8007e70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007e74:	2302      	movs	r3, #2
 8007e76:	e0d4      	b.n	8008022 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007e78:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007e7c:	2100      	movs	r1, #0
 8007e7e:	68f8      	ldr	r0, [r7, #12]
 8007e80:	f004 fd04 	bl	800c88c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	32b0      	adds	r2, #176	; 0xb0
 8007e8e:	68f9      	ldr	r1, [r7, #12]
 8007e90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	32b0      	adds	r2, #176	; 0xb0
 8007e9e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	7c1b      	ldrb	r3, [r3, #16]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d138      	bne.n	8007f22 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007eb0:	4b5e      	ldr	r3, [pc, #376]	; (800802c <USBD_CDC_Init+0x1e4>)
 8007eb2:	7819      	ldrb	r1, [r3, #0]
 8007eb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007eb8:	2202      	movs	r2, #2
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f003 fe1d 	bl	800bafa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007ec0:	4b5a      	ldr	r3, [pc, #360]	; (800802c <USBD_CDC_Init+0x1e4>)
 8007ec2:	781b      	ldrb	r3, [r3, #0]
 8007ec4:	f003 020f 	and.w	r2, r3, #15
 8007ec8:	6879      	ldr	r1, [r7, #4]
 8007eca:	4613      	mov	r3, r2
 8007ecc:	009b      	lsls	r3, r3, #2
 8007ece:	4413      	add	r3, r2
 8007ed0:	009b      	lsls	r3, r3, #2
 8007ed2:	440b      	add	r3, r1
 8007ed4:	3324      	adds	r3, #36	; 0x24
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007eda:	4b55      	ldr	r3, [pc, #340]	; (8008030 <USBD_CDC_Init+0x1e8>)
 8007edc:	7819      	ldrb	r1, [r3, #0]
 8007ede:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ee2:	2202      	movs	r2, #2
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f003 fe08 	bl	800bafa <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007eea:	4b51      	ldr	r3, [pc, #324]	; (8008030 <USBD_CDC_Init+0x1e8>)
 8007eec:	781b      	ldrb	r3, [r3, #0]
 8007eee:	f003 020f 	and.w	r2, r3, #15
 8007ef2:	6879      	ldr	r1, [r7, #4]
 8007ef4:	4613      	mov	r3, r2
 8007ef6:	009b      	lsls	r3, r3, #2
 8007ef8:	4413      	add	r3, r2
 8007efa:	009b      	lsls	r3, r3, #2
 8007efc:	440b      	add	r3, r1
 8007efe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007f02:	2201      	movs	r2, #1
 8007f04:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007f06:	4b4b      	ldr	r3, [pc, #300]	; (8008034 <USBD_CDC_Init+0x1ec>)
 8007f08:	781b      	ldrb	r3, [r3, #0]
 8007f0a:	f003 020f 	and.w	r2, r3, #15
 8007f0e:	6879      	ldr	r1, [r7, #4]
 8007f10:	4613      	mov	r3, r2
 8007f12:	009b      	lsls	r3, r3, #2
 8007f14:	4413      	add	r3, r2
 8007f16:	009b      	lsls	r3, r3, #2
 8007f18:	440b      	add	r3, r1
 8007f1a:	3326      	adds	r3, #38	; 0x26
 8007f1c:	2210      	movs	r2, #16
 8007f1e:	801a      	strh	r2, [r3, #0]
 8007f20:	e035      	b.n	8007f8e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007f22:	4b42      	ldr	r3, [pc, #264]	; (800802c <USBD_CDC_Init+0x1e4>)
 8007f24:	7819      	ldrb	r1, [r3, #0]
 8007f26:	2340      	movs	r3, #64	; 0x40
 8007f28:	2202      	movs	r2, #2
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f003 fde5 	bl	800bafa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007f30:	4b3e      	ldr	r3, [pc, #248]	; (800802c <USBD_CDC_Init+0x1e4>)
 8007f32:	781b      	ldrb	r3, [r3, #0]
 8007f34:	f003 020f 	and.w	r2, r3, #15
 8007f38:	6879      	ldr	r1, [r7, #4]
 8007f3a:	4613      	mov	r3, r2
 8007f3c:	009b      	lsls	r3, r3, #2
 8007f3e:	4413      	add	r3, r2
 8007f40:	009b      	lsls	r3, r3, #2
 8007f42:	440b      	add	r3, r1
 8007f44:	3324      	adds	r3, #36	; 0x24
 8007f46:	2201      	movs	r2, #1
 8007f48:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007f4a:	4b39      	ldr	r3, [pc, #228]	; (8008030 <USBD_CDC_Init+0x1e8>)
 8007f4c:	7819      	ldrb	r1, [r3, #0]
 8007f4e:	2340      	movs	r3, #64	; 0x40
 8007f50:	2202      	movs	r2, #2
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f003 fdd1 	bl	800bafa <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007f58:	4b35      	ldr	r3, [pc, #212]	; (8008030 <USBD_CDC_Init+0x1e8>)
 8007f5a:	781b      	ldrb	r3, [r3, #0]
 8007f5c:	f003 020f 	and.w	r2, r3, #15
 8007f60:	6879      	ldr	r1, [r7, #4]
 8007f62:	4613      	mov	r3, r2
 8007f64:	009b      	lsls	r3, r3, #2
 8007f66:	4413      	add	r3, r2
 8007f68:	009b      	lsls	r3, r3, #2
 8007f6a:	440b      	add	r3, r1
 8007f6c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007f70:	2201      	movs	r2, #1
 8007f72:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007f74:	4b2f      	ldr	r3, [pc, #188]	; (8008034 <USBD_CDC_Init+0x1ec>)
 8007f76:	781b      	ldrb	r3, [r3, #0]
 8007f78:	f003 020f 	and.w	r2, r3, #15
 8007f7c:	6879      	ldr	r1, [r7, #4]
 8007f7e:	4613      	mov	r3, r2
 8007f80:	009b      	lsls	r3, r3, #2
 8007f82:	4413      	add	r3, r2
 8007f84:	009b      	lsls	r3, r3, #2
 8007f86:	440b      	add	r3, r1
 8007f88:	3326      	adds	r3, #38	; 0x26
 8007f8a:	2210      	movs	r2, #16
 8007f8c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007f8e:	4b29      	ldr	r3, [pc, #164]	; (8008034 <USBD_CDC_Init+0x1ec>)
 8007f90:	7819      	ldrb	r1, [r3, #0]
 8007f92:	2308      	movs	r3, #8
 8007f94:	2203      	movs	r2, #3
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f003 fdaf 	bl	800bafa <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007f9c:	4b25      	ldr	r3, [pc, #148]	; (8008034 <USBD_CDC_Init+0x1ec>)
 8007f9e:	781b      	ldrb	r3, [r3, #0]
 8007fa0:	f003 020f 	and.w	r2, r3, #15
 8007fa4:	6879      	ldr	r1, [r7, #4]
 8007fa6:	4613      	mov	r3, r2
 8007fa8:	009b      	lsls	r3, r3, #2
 8007faa:	4413      	add	r3, r2
 8007fac:	009b      	lsls	r3, r3, #2
 8007fae:	440b      	add	r3, r1
 8007fb0:	3324      	adds	r3, #36	; 0x24
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007fc4:	687a      	ldr	r2, [r7, #4]
 8007fc6:	33b0      	adds	r3, #176	; 0xb0
 8007fc8:	009b      	lsls	r3, r3, #2
 8007fca:	4413      	add	r3, r2
 8007fcc:	685b      	ldr	r3, [r3, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d101      	bne.n	8007ff0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007fec:	2302      	movs	r3, #2
 8007fee:	e018      	b.n	8008022 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	7c1b      	ldrb	r3, [r3, #16]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d10a      	bne.n	800800e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007ff8:	4b0d      	ldr	r3, [pc, #52]	; (8008030 <USBD_CDC_Init+0x1e8>)
 8007ffa:	7819      	ldrb	r1, [r3, #0]
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008002:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f003 fe66 	bl	800bcd8 <USBD_LL_PrepareReceive>
 800800c:	e008      	b.n	8008020 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800800e:	4b08      	ldr	r3, [pc, #32]	; (8008030 <USBD_CDC_Init+0x1e8>)
 8008010:	7819      	ldrb	r1, [r3, #0]
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008018:	2340      	movs	r3, #64	; 0x40
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f003 fe5c 	bl	800bcd8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008020:	2300      	movs	r3, #0
}
 8008022:	4618      	mov	r0, r3
 8008024:	3710      	adds	r7, #16
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}
 800802a:	bf00      	nop
 800802c:	20000093 	.word	0x20000093
 8008030:	20000094 	.word	0x20000094
 8008034:	20000095 	.word	0x20000095

08008038 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b082      	sub	sp, #8
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
 8008040:	460b      	mov	r3, r1
 8008042:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008044:	4b3a      	ldr	r3, [pc, #232]	; (8008130 <USBD_CDC_DeInit+0xf8>)
 8008046:	781b      	ldrb	r3, [r3, #0]
 8008048:	4619      	mov	r1, r3
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f003 fd7b 	bl	800bb46 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008050:	4b37      	ldr	r3, [pc, #220]	; (8008130 <USBD_CDC_DeInit+0xf8>)
 8008052:	781b      	ldrb	r3, [r3, #0]
 8008054:	f003 020f 	and.w	r2, r3, #15
 8008058:	6879      	ldr	r1, [r7, #4]
 800805a:	4613      	mov	r3, r2
 800805c:	009b      	lsls	r3, r3, #2
 800805e:	4413      	add	r3, r2
 8008060:	009b      	lsls	r3, r3, #2
 8008062:	440b      	add	r3, r1
 8008064:	3324      	adds	r3, #36	; 0x24
 8008066:	2200      	movs	r2, #0
 8008068:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800806a:	4b32      	ldr	r3, [pc, #200]	; (8008134 <USBD_CDC_DeInit+0xfc>)
 800806c:	781b      	ldrb	r3, [r3, #0]
 800806e:	4619      	mov	r1, r3
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f003 fd68 	bl	800bb46 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008076:	4b2f      	ldr	r3, [pc, #188]	; (8008134 <USBD_CDC_DeInit+0xfc>)
 8008078:	781b      	ldrb	r3, [r3, #0]
 800807a:	f003 020f 	and.w	r2, r3, #15
 800807e:	6879      	ldr	r1, [r7, #4]
 8008080:	4613      	mov	r3, r2
 8008082:	009b      	lsls	r3, r3, #2
 8008084:	4413      	add	r3, r2
 8008086:	009b      	lsls	r3, r3, #2
 8008088:	440b      	add	r3, r1
 800808a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800808e:	2200      	movs	r2, #0
 8008090:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008092:	4b29      	ldr	r3, [pc, #164]	; (8008138 <USBD_CDC_DeInit+0x100>)
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	4619      	mov	r1, r3
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f003 fd54 	bl	800bb46 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800809e:	4b26      	ldr	r3, [pc, #152]	; (8008138 <USBD_CDC_DeInit+0x100>)
 80080a0:	781b      	ldrb	r3, [r3, #0]
 80080a2:	f003 020f 	and.w	r2, r3, #15
 80080a6:	6879      	ldr	r1, [r7, #4]
 80080a8:	4613      	mov	r3, r2
 80080aa:	009b      	lsls	r3, r3, #2
 80080ac:	4413      	add	r3, r2
 80080ae:	009b      	lsls	r3, r3, #2
 80080b0:	440b      	add	r3, r1
 80080b2:	3324      	adds	r3, #36	; 0x24
 80080b4:	2200      	movs	r2, #0
 80080b6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80080b8:	4b1f      	ldr	r3, [pc, #124]	; (8008138 <USBD_CDC_DeInit+0x100>)
 80080ba:	781b      	ldrb	r3, [r3, #0]
 80080bc:	f003 020f 	and.w	r2, r3, #15
 80080c0:	6879      	ldr	r1, [r7, #4]
 80080c2:	4613      	mov	r3, r2
 80080c4:	009b      	lsls	r3, r3, #2
 80080c6:	4413      	add	r3, r2
 80080c8:	009b      	lsls	r3, r3, #2
 80080ca:	440b      	add	r3, r1
 80080cc:	3326      	adds	r3, #38	; 0x26
 80080ce:	2200      	movs	r2, #0
 80080d0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	32b0      	adds	r2, #176	; 0xb0
 80080dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d01f      	beq.n	8008124 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80080ea:	687a      	ldr	r2, [r7, #4]
 80080ec:	33b0      	adds	r3, #176	; 0xb0
 80080ee:	009b      	lsls	r3, r3, #2
 80080f0:	4413      	add	r3, r2
 80080f2:	685b      	ldr	r3, [r3, #4]
 80080f4:	685b      	ldr	r3, [r3, #4]
 80080f6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	32b0      	adds	r2, #176	; 0xb0
 8008102:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008106:	4618      	mov	r0, r3
 8008108:	f003 fe28 	bl	800bd5c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	32b0      	adds	r2, #176	; 0xb0
 8008116:	2100      	movs	r1, #0
 8008118:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2200      	movs	r2, #0
 8008120:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008124:	2300      	movs	r3, #0
}
 8008126:	4618      	mov	r0, r3
 8008128:	3708      	adds	r7, #8
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}
 800812e:	bf00      	nop
 8008130:	20000093 	.word	0x20000093
 8008134:	20000094 	.word	0x20000094
 8008138:	20000095 	.word	0x20000095

0800813c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b086      	sub	sp, #24
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	32b0      	adds	r2, #176	; 0xb0
 8008150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008154:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008156:	2300      	movs	r3, #0
 8008158:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800815a:	2300      	movs	r3, #0
 800815c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800815e:	2300      	movs	r3, #0
 8008160:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d101      	bne.n	800816c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008168:	2303      	movs	r3, #3
 800816a:	e0bf      	b.n	80082ec <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	781b      	ldrb	r3, [r3, #0]
 8008170:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008174:	2b00      	cmp	r3, #0
 8008176:	d050      	beq.n	800821a <USBD_CDC_Setup+0xde>
 8008178:	2b20      	cmp	r3, #32
 800817a:	f040 80af 	bne.w	80082dc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	88db      	ldrh	r3, [r3, #6]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d03a      	beq.n	80081fc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	781b      	ldrb	r3, [r3, #0]
 800818a:	b25b      	sxtb	r3, r3
 800818c:	2b00      	cmp	r3, #0
 800818e:	da1b      	bge.n	80081c8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008196:	687a      	ldr	r2, [r7, #4]
 8008198:	33b0      	adds	r3, #176	; 0xb0
 800819a:	009b      	lsls	r3, r3, #2
 800819c:	4413      	add	r3, r2
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	689b      	ldr	r3, [r3, #8]
 80081a2:	683a      	ldr	r2, [r7, #0]
 80081a4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80081a6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80081a8:	683a      	ldr	r2, [r7, #0]
 80081aa:	88d2      	ldrh	r2, [r2, #6]
 80081ac:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	88db      	ldrh	r3, [r3, #6]
 80081b2:	2b07      	cmp	r3, #7
 80081b4:	bf28      	it	cs
 80081b6:	2307      	movcs	r3, #7
 80081b8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80081ba:	693b      	ldr	r3, [r7, #16]
 80081bc:	89fa      	ldrh	r2, [r7, #14]
 80081be:	4619      	mov	r1, r3
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f001 fd89 	bl	8009cd8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80081c6:	e090      	b.n	80082ea <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	785a      	ldrb	r2, [r3, #1]
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	88db      	ldrh	r3, [r3, #6]
 80081d6:	2b3f      	cmp	r3, #63	; 0x3f
 80081d8:	d803      	bhi.n	80081e2 <USBD_CDC_Setup+0xa6>
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	88db      	ldrh	r3, [r3, #6]
 80081de:	b2da      	uxtb	r2, r3
 80081e0:	e000      	b.n	80081e4 <USBD_CDC_Setup+0xa8>
 80081e2:	2240      	movs	r2, #64	; 0x40
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80081ea:	6939      	ldr	r1, [r7, #16]
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80081f2:	461a      	mov	r2, r3
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f001 fd9b 	bl	8009d30 <USBD_CtlPrepareRx>
      break;
 80081fa:	e076      	b.n	80082ea <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008202:	687a      	ldr	r2, [r7, #4]
 8008204:	33b0      	adds	r3, #176	; 0xb0
 8008206:	009b      	lsls	r3, r3, #2
 8008208:	4413      	add	r3, r2
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	689b      	ldr	r3, [r3, #8]
 800820e:	683a      	ldr	r2, [r7, #0]
 8008210:	7850      	ldrb	r0, [r2, #1]
 8008212:	2200      	movs	r2, #0
 8008214:	6839      	ldr	r1, [r7, #0]
 8008216:	4798      	blx	r3
      break;
 8008218:	e067      	b.n	80082ea <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	785b      	ldrb	r3, [r3, #1]
 800821e:	2b0b      	cmp	r3, #11
 8008220:	d851      	bhi.n	80082c6 <USBD_CDC_Setup+0x18a>
 8008222:	a201      	add	r2, pc, #4	; (adr r2, 8008228 <USBD_CDC_Setup+0xec>)
 8008224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008228:	08008259 	.word	0x08008259
 800822c:	080082d5 	.word	0x080082d5
 8008230:	080082c7 	.word	0x080082c7
 8008234:	080082c7 	.word	0x080082c7
 8008238:	080082c7 	.word	0x080082c7
 800823c:	080082c7 	.word	0x080082c7
 8008240:	080082c7 	.word	0x080082c7
 8008244:	080082c7 	.word	0x080082c7
 8008248:	080082c7 	.word	0x080082c7
 800824c:	080082c7 	.word	0x080082c7
 8008250:	08008283 	.word	0x08008283
 8008254:	080082ad 	.word	0x080082ad
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800825e:	b2db      	uxtb	r3, r3
 8008260:	2b03      	cmp	r3, #3
 8008262:	d107      	bne.n	8008274 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008264:	f107 030a 	add.w	r3, r7, #10
 8008268:	2202      	movs	r2, #2
 800826a:	4619      	mov	r1, r3
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f001 fd33 	bl	8009cd8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008272:	e032      	b.n	80082da <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008274:	6839      	ldr	r1, [r7, #0]
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f001 fcbd 	bl	8009bf6 <USBD_CtlError>
            ret = USBD_FAIL;
 800827c:	2303      	movs	r3, #3
 800827e:	75fb      	strb	r3, [r7, #23]
          break;
 8008280:	e02b      	b.n	80082da <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008288:	b2db      	uxtb	r3, r3
 800828a:	2b03      	cmp	r3, #3
 800828c:	d107      	bne.n	800829e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800828e:	f107 030d 	add.w	r3, r7, #13
 8008292:	2201      	movs	r2, #1
 8008294:	4619      	mov	r1, r3
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f001 fd1e 	bl	8009cd8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800829c:	e01d      	b.n	80082da <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800829e:	6839      	ldr	r1, [r7, #0]
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f001 fca8 	bl	8009bf6 <USBD_CtlError>
            ret = USBD_FAIL;
 80082a6:	2303      	movs	r3, #3
 80082a8:	75fb      	strb	r3, [r7, #23]
          break;
 80082aa:	e016      	b.n	80082da <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082b2:	b2db      	uxtb	r3, r3
 80082b4:	2b03      	cmp	r3, #3
 80082b6:	d00f      	beq.n	80082d8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80082b8:	6839      	ldr	r1, [r7, #0]
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f001 fc9b 	bl	8009bf6 <USBD_CtlError>
            ret = USBD_FAIL;
 80082c0:	2303      	movs	r3, #3
 80082c2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80082c4:	e008      	b.n	80082d8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80082c6:	6839      	ldr	r1, [r7, #0]
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f001 fc94 	bl	8009bf6 <USBD_CtlError>
          ret = USBD_FAIL;
 80082ce:	2303      	movs	r3, #3
 80082d0:	75fb      	strb	r3, [r7, #23]
          break;
 80082d2:	e002      	b.n	80082da <USBD_CDC_Setup+0x19e>
          break;
 80082d4:	bf00      	nop
 80082d6:	e008      	b.n	80082ea <USBD_CDC_Setup+0x1ae>
          break;
 80082d8:	bf00      	nop
      }
      break;
 80082da:	e006      	b.n	80082ea <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80082dc:	6839      	ldr	r1, [r7, #0]
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f001 fc89 	bl	8009bf6 <USBD_CtlError>
      ret = USBD_FAIL;
 80082e4:	2303      	movs	r3, #3
 80082e6:	75fb      	strb	r3, [r7, #23]
      break;
 80082e8:	bf00      	nop
  }

  return (uint8_t)ret;
 80082ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3718      	adds	r7, #24
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}

080082f4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b084      	sub	sp, #16
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
 80082fc:	460b      	mov	r3, r1
 80082fe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008306:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	32b0      	adds	r2, #176	; 0xb0
 8008312:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d101      	bne.n	800831e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800831a:	2303      	movs	r3, #3
 800831c:	e065      	b.n	80083ea <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	32b0      	adds	r2, #176	; 0xb0
 8008328:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800832c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800832e:	78fb      	ldrb	r3, [r7, #3]
 8008330:	f003 020f 	and.w	r2, r3, #15
 8008334:	6879      	ldr	r1, [r7, #4]
 8008336:	4613      	mov	r3, r2
 8008338:	009b      	lsls	r3, r3, #2
 800833a:	4413      	add	r3, r2
 800833c:	009b      	lsls	r3, r3, #2
 800833e:	440b      	add	r3, r1
 8008340:	3318      	adds	r3, #24
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d02f      	beq.n	80083a8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008348:	78fb      	ldrb	r3, [r7, #3]
 800834a:	f003 020f 	and.w	r2, r3, #15
 800834e:	6879      	ldr	r1, [r7, #4]
 8008350:	4613      	mov	r3, r2
 8008352:	009b      	lsls	r3, r3, #2
 8008354:	4413      	add	r3, r2
 8008356:	009b      	lsls	r3, r3, #2
 8008358:	440b      	add	r3, r1
 800835a:	3318      	adds	r3, #24
 800835c:	681a      	ldr	r2, [r3, #0]
 800835e:	78fb      	ldrb	r3, [r7, #3]
 8008360:	f003 010f 	and.w	r1, r3, #15
 8008364:	68f8      	ldr	r0, [r7, #12]
 8008366:	460b      	mov	r3, r1
 8008368:	00db      	lsls	r3, r3, #3
 800836a:	440b      	add	r3, r1
 800836c:	009b      	lsls	r3, r3, #2
 800836e:	4403      	add	r3, r0
 8008370:	331c      	adds	r3, #28
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	fbb2 f1f3 	udiv	r1, r2, r3
 8008378:	fb01 f303 	mul.w	r3, r1, r3
 800837c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800837e:	2b00      	cmp	r3, #0
 8008380:	d112      	bne.n	80083a8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008382:	78fb      	ldrb	r3, [r7, #3]
 8008384:	f003 020f 	and.w	r2, r3, #15
 8008388:	6879      	ldr	r1, [r7, #4]
 800838a:	4613      	mov	r3, r2
 800838c:	009b      	lsls	r3, r3, #2
 800838e:	4413      	add	r3, r2
 8008390:	009b      	lsls	r3, r3, #2
 8008392:	440b      	add	r3, r1
 8008394:	3318      	adds	r3, #24
 8008396:	2200      	movs	r2, #0
 8008398:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800839a:	78f9      	ldrb	r1, [r7, #3]
 800839c:	2300      	movs	r3, #0
 800839e:	2200      	movs	r2, #0
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f003 fc78 	bl	800bc96 <USBD_LL_Transmit>
 80083a6:	e01f      	b.n	80083e8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	2200      	movs	r2, #0
 80083ac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80083b6:	687a      	ldr	r2, [r7, #4]
 80083b8:	33b0      	adds	r3, #176	; 0xb0
 80083ba:	009b      	lsls	r3, r3, #2
 80083bc:	4413      	add	r3, r2
 80083be:	685b      	ldr	r3, [r3, #4]
 80083c0:	691b      	ldr	r3, [r3, #16]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d010      	beq.n	80083e8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80083cc:	687a      	ldr	r2, [r7, #4]
 80083ce:	33b0      	adds	r3, #176	; 0xb0
 80083d0:	009b      	lsls	r3, r3, #2
 80083d2:	4413      	add	r3, r2
 80083d4:	685b      	ldr	r3, [r3, #4]
 80083d6:	691b      	ldr	r3, [r3, #16]
 80083d8:	68ba      	ldr	r2, [r7, #8]
 80083da:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80083de:	68ba      	ldr	r2, [r7, #8]
 80083e0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80083e4:	78fa      	ldrb	r2, [r7, #3]
 80083e6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80083e8:	2300      	movs	r3, #0
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	3710      	adds	r7, #16
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}

080083f2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80083f2:	b580      	push	{r7, lr}
 80083f4:	b084      	sub	sp, #16
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	6078      	str	r0, [r7, #4]
 80083fa:	460b      	mov	r3, r1
 80083fc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	32b0      	adds	r2, #176	; 0xb0
 8008408:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800840c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	32b0      	adds	r2, #176	; 0xb0
 8008418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d101      	bne.n	8008424 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008420:	2303      	movs	r3, #3
 8008422:	e01a      	b.n	800845a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008424:	78fb      	ldrb	r3, [r7, #3]
 8008426:	4619      	mov	r1, r3
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f003 fc76 	bl	800bd1a <USBD_LL_GetRxDataSize>
 800842e:	4602      	mov	r2, r0
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800843c:	687a      	ldr	r2, [r7, #4]
 800843e:	33b0      	adds	r3, #176	; 0xb0
 8008440:	009b      	lsls	r3, r3, #2
 8008442:	4413      	add	r3, r2
 8008444:	685b      	ldr	r3, [r3, #4]
 8008446:	68db      	ldr	r3, [r3, #12]
 8008448:	68fa      	ldr	r2, [r7, #12]
 800844a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800844e:	68fa      	ldr	r2, [r7, #12]
 8008450:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008454:	4611      	mov	r1, r2
 8008456:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008458:	2300      	movs	r3, #0
}
 800845a:	4618      	mov	r0, r3
 800845c:	3710      	adds	r7, #16
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}

08008462 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008462:	b580      	push	{r7, lr}
 8008464:	b084      	sub	sp, #16
 8008466:	af00      	add	r7, sp, #0
 8008468:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	32b0      	adds	r2, #176	; 0xb0
 8008474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008478:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d101      	bne.n	8008484 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008480:	2303      	movs	r3, #3
 8008482:	e025      	b.n	80084d0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800848a:	687a      	ldr	r2, [r7, #4]
 800848c:	33b0      	adds	r3, #176	; 0xb0
 800848e:	009b      	lsls	r3, r3, #2
 8008490:	4413      	add	r3, r2
 8008492:	685b      	ldr	r3, [r3, #4]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d01a      	beq.n	80084ce <USBD_CDC_EP0_RxReady+0x6c>
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800849e:	2bff      	cmp	r3, #255	; 0xff
 80084a0:	d015      	beq.n	80084ce <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80084a8:	687a      	ldr	r2, [r7, #4]
 80084aa:	33b0      	adds	r3, #176	; 0xb0
 80084ac:	009b      	lsls	r3, r3, #2
 80084ae:	4413      	add	r3, r2
 80084b0:	685b      	ldr	r3, [r3, #4]
 80084b2:	689b      	ldr	r3, [r3, #8]
 80084b4:	68fa      	ldr	r2, [r7, #12]
 80084b6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80084ba:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80084bc:	68fa      	ldr	r2, [r7, #12]
 80084be:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80084c2:	b292      	uxth	r2, r2
 80084c4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	22ff      	movs	r2, #255	; 0xff
 80084ca:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80084ce:	2300      	movs	r3, #0
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	3710      	adds	r7, #16
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}

080084d8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b086      	sub	sp, #24
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80084e0:	2182      	movs	r1, #130	; 0x82
 80084e2:	4818      	ldr	r0, [pc, #96]	; (8008544 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80084e4:	f000 fd4f 	bl	8008f86 <USBD_GetEpDesc>
 80084e8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80084ea:	2101      	movs	r1, #1
 80084ec:	4815      	ldr	r0, [pc, #84]	; (8008544 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80084ee:	f000 fd4a 	bl	8008f86 <USBD_GetEpDesc>
 80084f2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80084f4:	2181      	movs	r1, #129	; 0x81
 80084f6:	4813      	ldr	r0, [pc, #76]	; (8008544 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80084f8:	f000 fd45 	bl	8008f86 <USBD_GetEpDesc>
 80084fc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d002      	beq.n	800850a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	2210      	movs	r2, #16
 8008508:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d006      	beq.n	800851e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	2200      	movs	r2, #0
 8008514:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008518:	711a      	strb	r2, [r3, #4]
 800851a:	2200      	movs	r2, #0
 800851c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d006      	beq.n	8008532 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	2200      	movs	r2, #0
 8008528:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800852c:	711a      	strb	r2, [r3, #4]
 800852e:	2200      	movs	r2, #0
 8008530:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2243      	movs	r2, #67	; 0x43
 8008536:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008538:	4b02      	ldr	r3, [pc, #8]	; (8008544 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800853a:	4618      	mov	r0, r3
 800853c:	3718      	adds	r7, #24
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}
 8008542:	bf00      	nop
 8008544:	20000050 	.word	0x20000050

08008548 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b086      	sub	sp, #24
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008550:	2182      	movs	r1, #130	; 0x82
 8008552:	4818      	ldr	r0, [pc, #96]	; (80085b4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008554:	f000 fd17 	bl	8008f86 <USBD_GetEpDesc>
 8008558:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800855a:	2101      	movs	r1, #1
 800855c:	4815      	ldr	r0, [pc, #84]	; (80085b4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800855e:	f000 fd12 	bl	8008f86 <USBD_GetEpDesc>
 8008562:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008564:	2181      	movs	r1, #129	; 0x81
 8008566:	4813      	ldr	r0, [pc, #76]	; (80085b4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008568:	f000 fd0d 	bl	8008f86 <USBD_GetEpDesc>
 800856c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d002      	beq.n	800857a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008574:	697b      	ldr	r3, [r7, #20]
 8008576:	2210      	movs	r2, #16
 8008578:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800857a:	693b      	ldr	r3, [r7, #16]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d006      	beq.n	800858e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	2200      	movs	r2, #0
 8008584:	711a      	strb	r2, [r3, #4]
 8008586:	2200      	movs	r2, #0
 8008588:	f042 0202 	orr.w	r2, r2, #2
 800858c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d006      	beq.n	80085a2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	2200      	movs	r2, #0
 8008598:	711a      	strb	r2, [r3, #4]
 800859a:	2200      	movs	r2, #0
 800859c:	f042 0202 	orr.w	r2, r2, #2
 80085a0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2243      	movs	r2, #67	; 0x43
 80085a6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80085a8:	4b02      	ldr	r3, [pc, #8]	; (80085b4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3718      	adds	r7, #24
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}
 80085b2:	bf00      	nop
 80085b4:	20000050 	.word	0x20000050

080085b8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b086      	sub	sp, #24
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80085c0:	2182      	movs	r1, #130	; 0x82
 80085c2:	4818      	ldr	r0, [pc, #96]	; (8008624 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80085c4:	f000 fcdf 	bl	8008f86 <USBD_GetEpDesc>
 80085c8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80085ca:	2101      	movs	r1, #1
 80085cc:	4815      	ldr	r0, [pc, #84]	; (8008624 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80085ce:	f000 fcda 	bl	8008f86 <USBD_GetEpDesc>
 80085d2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80085d4:	2181      	movs	r1, #129	; 0x81
 80085d6:	4813      	ldr	r0, [pc, #76]	; (8008624 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80085d8:	f000 fcd5 	bl	8008f86 <USBD_GetEpDesc>
 80085dc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d002      	beq.n	80085ea <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	2210      	movs	r2, #16
 80085e8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80085ea:	693b      	ldr	r3, [r7, #16]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d006      	beq.n	80085fe <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	2200      	movs	r2, #0
 80085f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80085f8:	711a      	strb	r2, [r3, #4]
 80085fa:	2200      	movs	r2, #0
 80085fc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d006      	beq.n	8008612 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	2200      	movs	r2, #0
 8008608:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800860c:	711a      	strb	r2, [r3, #4]
 800860e:	2200      	movs	r2, #0
 8008610:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2243      	movs	r2, #67	; 0x43
 8008616:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008618:	4b02      	ldr	r3, [pc, #8]	; (8008624 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800861a:	4618      	mov	r0, r3
 800861c:	3718      	adds	r7, #24
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}
 8008622:	bf00      	nop
 8008624:	20000050 	.word	0x20000050

08008628 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008628:	b480      	push	{r7}
 800862a:	b083      	sub	sp, #12
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	220a      	movs	r2, #10
 8008634:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008636:	4b03      	ldr	r3, [pc, #12]	; (8008644 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008638:	4618      	mov	r0, r3
 800863a:	370c      	adds	r7, #12
 800863c:	46bd      	mov	sp, r7
 800863e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008642:	4770      	bx	lr
 8008644:	2000000c 	.word	0x2000000c

08008648 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008648:	b480      	push	{r7}
 800864a:	b083      	sub	sp, #12
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
 8008650:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d101      	bne.n	800865c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008658:	2303      	movs	r3, #3
 800865a:	e009      	b.n	8008670 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008662:	687a      	ldr	r2, [r7, #4]
 8008664:	33b0      	adds	r3, #176	; 0xb0
 8008666:	009b      	lsls	r3, r3, #2
 8008668:	4413      	add	r3, r2
 800866a:	683a      	ldr	r2, [r7, #0]
 800866c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800866e:	2300      	movs	r3, #0
}
 8008670:	4618      	mov	r0, r3
 8008672:	370c      	adds	r7, #12
 8008674:	46bd      	mov	sp, r7
 8008676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867a:	4770      	bx	lr

0800867c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800867c:	b480      	push	{r7}
 800867e:	b087      	sub	sp, #28
 8008680:	af00      	add	r7, sp, #0
 8008682:	60f8      	str	r0, [r7, #12]
 8008684:	60b9      	str	r1, [r7, #8]
 8008686:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	32b0      	adds	r2, #176	; 0xb0
 8008692:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008696:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d101      	bne.n	80086a2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800869e:	2303      	movs	r3, #3
 80086a0:	e008      	b.n	80086b4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	68ba      	ldr	r2, [r7, #8]
 80086a6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	687a      	ldr	r2, [r7, #4]
 80086ae:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80086b2:	2300      	movs	r3, #0
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	371c      	adds	r7, #28
 80086b8:	46bd      	mov	sp, r7
 80086ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086be:	4770      	bx	lr

080086c0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b085      	sub	sp, #20
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	32b0      	adds	r2, #176	; 0xb0
 80086d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086d8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d101      	bne.n	80086e4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80086e0:	2303      	movs	r3, #3
 80086e2:	e004      	b.n	80086ee <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	683a      	ldr	r2, [r7, #0]
 80086e8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80086ec:	2300      	movs	r3, #0
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3714      	adds	r7, #20
 80086f2:	46bd      	mov	sp, r7
 80086f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f8:	4770      	bx	lr
	...

080086fc <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b084      	sub	sp, #16
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	32b0      	adds	r2, #176	; 0xb0
 800870e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008712:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8008714:	2301      	movs	r3, #1
 8008716:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d101      	bne.n	8008722 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800871e:	2303      	movs	r3, #3
 8008720:	e025      	b.n	800876e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008728:	2b00      	cmp	r3, #0
 800872a:	d11f      	bne.n	800876c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	2201      	movs	r2, #1
 8008730:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008734:	4b10      	ldr	r3, [pc, #64]	; (8008778 <USBD_CDC_TransmitPacket+0x7c>)
 8008736:	781b      	ldrb	r3, [r3, #0]
 8008738:	f003 020f 	and.w	r2, r3, #15
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	4613      	mov	r3, r2
 8008746:	009b      	lsls	r3, r3, #2
 8008748:	4413      	add	r3, r2
 800874a:	009b      	lsls	r3, r3, #2
 800874c:	4403      	add	r3, r0
 800874e:	3318      	adds	r3, #24
 8008750:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008752:	4b09      	ldr	r3, [pc, #36]	; (8008778 <USBD_CDC_TransmitPacket+0x7c>)
 8008754:	7819      	ldrb	r1, [r3, #0]
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f003 fa97 	bl	800bc96 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008768:	2300      	movs	r3, #0
 800876a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800876c:	7bfb      	ldrb	r3, [r7, #15]
}
 800876e:	4618      	mov	r0, r3
 8008770:	3710      	adds	r7, #16
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}
 8008776:	bf00      	nop
 8008778:	20000093 	.word	0x20000093

0800877c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b084      	sub	sp, #16
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	32b0      	adds	r2, #176	; 0xb0
 800878e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008792:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	32b0      	adds	r2, #176	; 0xb0
 800879e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d101      	bne.n	80087aa <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80087a6:	2303      	movs	r3, #3
 80087a8:	e018      	b.n	80087dc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	7c1b      	ldrb	r3, [r3, #16]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d10a      	bne.n	80087c8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80087b2:	4b0c      	ldr	r3, [pc, #48]	; (80087e4 <USBD_CDC_ReceivePacket+0x68>)
 80087b4:	7819      	ldrb	r1, [r3, #0]
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80087bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f003 fa89 	bl	800bcd8 <USBD_LL_PrepareReceive>
 80087c6:	e008      	b.n	80087da <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80087c8:	4b06      	ldr	r3, [pc, #24]	; (80087e4 <USBD_CDC_ReceivePacket+0x68>)
 80087ca:	7819      	ldrb	r1, [r3, #0]
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80087d2:	2340      	movs	r3, #64	; 0x40
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f003 fa7f 	bl	800bcd8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80087da:	2300      	movs	r3, #0
}
 80087dc:	4618      	mov	r0, r3
 80087de:	3710      	adds	r7, #16
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}
 80087e4:	20000094 	.word	0x20000094

080087e8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b086      	sub	sp, #24
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	60f8      	str	r0, [r7, #12]
 80087f0:	60b9      	str	r1, [r7, #8]
 80087f2:	4613      	mov	r3, r2
 80087f4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d101      	bne.n	8008800 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80087fc:	2303      	movs	r3, #3
 80087fe:	e01f      	b.n	8008840 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2200      	movs	r2, #0
 8008804:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2200      	movs	r2, #0
 800880c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	2200      	movs	r2, #0
 8008814:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d003      	beq.n	8008826 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	68ba      	ldr	r2, [r7, #8]
 8008822:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	2201      	movs	r2, #1
 800882a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	79fa      	ldrb	r2, [r7, #7]
 8008832:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008834:	68f8      	ldr	r0, [r7, #12]
 8008836:	f003 f8f9 	bl	800ba2c <USBD_LL_Init>
 800883a:	4603      	mov	r3, r0
 800883c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800883e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008840:	4618      	mov	r0, r3
 8008842:	3718      	adds	r7, #24
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}

08008848 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b084      	sub	sp, #16
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
 8008850:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008852:	2300      	movs	r3, #0
 8008854:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d101      	bne.n	8008860 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800885c:	2303      	movs	r3, #3
 800885e:	e025      	b.n	80088ac <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	683a      	ldr	r2, [r7, #0]
 8008864:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	32ae      	adds	r2, #174	; 0xae
 8008872:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008878:	2b00      	cmp	r3, #0
 800887a:	d00f      	beq.n	800889c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	32ae      	adds	r2, #174	; 0xae
 8008886:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800888a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800888c:	f107 020e 	add.w	r2, r7, #14
 8008890:	4610      	mov	r0, r2
 8008892:	4798      	blx	r3
 8008894:	4602      	mov	r2, r0
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80088a2:	1c5a      	adds	r2, r3, #1
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80088aa:	2300      	movs	r3, #0
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	3710      	adds	r7, #16
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}

080088b4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b082      	sub	sp, #8
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f003 f901 	bl	800bac4 <USBD_LL_Start>
 80088c2:	4603      	mov	r3, r0
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	3708      	adds	r7, #8
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}

080088cc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80088cc:	b480      	push	{r7}
 80088ce:	b083      	sub	sp, #12
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80088d4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	370c      	adds	r7, #12
 80088da:	46bd      	mov	sp, r7
 80088dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e0:	4770      	bx	lr

080088e2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80088e2:	b580      	push	{r7, lr}
 80088e4:	b084      	sub	sp, #16
 80088e6:	af00      	add	r7, sp, #0
 80088e8:	6078      	str	r0, [r7, #4]
 80088ea:	460b      	mov	r3, r1
 80088ec:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80088ee:	2300      	movs	r3, #0
 80088f0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d009      	beq.n	8008910 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	78fa      	ldrb	r2, [r7, #3]
 8008906:	4611      	mov	r1, r2
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	4798      	blx	r3
 800890c:	4603      	mov	r3, r0
 800890e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008910:	7bfb      	ldrb	r3, [r7, #15]
}
 8008912:	4618      	mov	r0, r3
 8008914:	3710      	adds	r7, #16
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}

0800891a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800891a:	b580      	push	{r7, lr}
 800891c:	b084      	sub	sp, #16
 800891e:	af00      	add	r7, sp, #0
 8008920:	6078      	str	r0, [r7, #4]
 8008922:	460b      	mov	r3, r1
 8008924:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008926:	2300      	movs	r3, #0
 8008928:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008930:	685b      	ldr	r3, [r3, #4]
 8008932:	78fa      	ldrb	r2, [r7, #3]
 8008934:	4611      	mov	r1, r2
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	4798      	blx	r3
 800893a:	4603      	mov	r3, r0
 800893c:	2b00      	cmp	r3, #0
 800893e:	d001      	beq.n	8008944 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008940:	2303      	movs	r3, #3
 8008942:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008944:	7bfb      	ldrb	r3, [r7, #15]
}
 8008946:	4618      	mov	r0, r3
 8008948:	3710      	adds	r7, #16
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}

0800894e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800894e:	b580      	push	{r7, lr}
 8008950:	b084      	sub	sp, #16
 8008952:	af00      	add	r7, sp, #0
 8008954:	6078      	str	r0, [r7, #4]
 8008956:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800895e:	6839      	ldr	r1, [r7, #0]
 8008960:	4618      	mov	r0, r3
 8008962:	f001 f90e 	bl	8009b82 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2201      	movs	r2, #1
 800896a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008974:	461a      	mov	r2, r3
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008982:	f003 031f 	and.w	r3, r3, #31
 8008986:	2b02      	cmp	r3, #2
 8008988:	d01a      	beq.n	80089c0 <USBD_LL_SetupStage+0x72>
 800898a:	2b02      	cmp	r3, #2
 800898c:	d822      	bhi.n	80089d4 <USBD_LL_SetupStage+0x86>
 800898e:	2b00      	cmp	r3, #0
 8008990:	d002      	beq.n	8008998 <USBD_LL_SetupStage+0x4a>
 8008992:	2b01      	cmp	r3, #1
 8008994:	d00a      	beq.n	80089ac <USBD_LL_SetupStage+0x5e>
 8008996:	e01d      	b.n	80089d4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800899e:	4619      	mov	r1, r3
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f000 fb65 	bl	8009070 <USBD_StdDevReq>
 80089a6:	4603      	mov	r3, r0
 80089a8:	73fb      	strb	r3, [r7, #15]
      break;
 80089aa:	e020      	b.n	80089ee <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80089b2:	4619      	mov	r1, r3
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f000 fbcd 	bl	8009154 <USBD_StdItfReq>
 80089ba:	4603      	mov	r3, r0
 80089bc:	73fb      	strb	r3, [r7, #15]
      break;
 80089be:	e016      	b.n	80089ee <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80089c6:	4619      	mov	r1, r3
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f000 fc2f 	bl	800922c <USBD_StdEPReq>
 80089ce:	4603      	mov	r3, r0
 80089d0:	73fb      	strb	r3, [r7, #15]
      break;
 80089d2:	e00c      	b.n	80089ee <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80089da:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80089de:	b2db      	uxtb	r3, r3
 80089e0:	4619      	mov	r1, r3
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f003 f8ce 	bl	800bb84 <USBD_LL_StallEP>
 80089e8:	4603      	mov	r3, r0
 80089ea:	73fb      	strb	r3, [r7, #15]
      break;
 80089ec:	bf00      	nop
  }

  return ret;
 80089ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	3710      	adds	r7, #16
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}

080089f8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b086      	sub	sp, #24
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	60f8      	str	r0, [r7, #12]
 8008a00:	460b      	mov	r3, r1
 8008a02:	607a      	str	r2, [r7, #4]
 8008a04:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008a06:	2300      	movs	r3, #0
 8008a08:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008a0a:	7afb      	ldrb	r3, [r7, #11]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d16e      	bne.n	8008aee <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008a16:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008a1e:	2b03      	cmp	r3, #3
 8008a20:	f040 8098 	bne.w	8008b54 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	689a      	ldr	r2, [r3, #8]
 8008a28:	693b      	ldr	r3, [r7, #16]
 8008a2a:	68db      	ldr	r3, [r3, #12]
 8008a2c:	429a      	cmp	r2, r3
 8008a2e:	d913      	bls.n	8008a58 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	689a      	ldr	r2, [r3, #8]
 8008a34:	693b      	ldr	r3, [r7, #16]
 8008a36:	68db      	ldr	r3, [r3, #12]
 8008a38:	1ad2      	subs	r2, r2, r3
 8008a3a:	693b      	ldr	r3, [r7, #16]
 8008a3c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008a3e:	693b      	ldr	r3, [r7, #16]
 8008a40:	68da      	ldr	r2, [r3, #12]
 8008a42:	693b      	ldr	r3, [r7, #16]
 8008a44:	689b      	ldr	r3, [r3, #8]
 8008a46:	4293      	cmp	r3, r2
 8008a48:	bf28      	it	cs
 8008a4a:	4613      	movcs	r3, r2
 8008a4c:	461a      	mov	r2, r3
 8008a4e:	6879      	ldr	r1, [r7, #4]
 8008a50:	68f8      	ldr	r0, [r7, #12]
 8008a52:	f001 f98a 	bl	8009d6a <USBD_CtlContinueRx>
 8008a56:	e07d      	b.n	8008b54 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008a5e:	f003 031f 	and.w	r3, r3, #31
 8008a62:	2b02      	cmp	r3, #2
 8008a64:	d014      	beq.n	8008a90 <USBD_LL_DataOutStage+0x98>
 8008a66:	2b02      	cmp	r3, #2
 8008a68:	d81d      	bhi.n	8008aa6 <USBD_LL_DataOutStage+0xae>
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d002      	beq.n	8008a74 <USBD_LL_DataOutStage+0x7c>
 8008a6e:	2b01      	cmp	r3, #1
 8008a70:	d003      	beq.n	8008a7a <USBD_LL_DataOutStage+0x82>
 8008a72:	e018      	b.n	8008aa6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008a74:	2300      	movs	r3, #0
 8008a76:	75bb      	strb	r3, [r7, #22]
            break;
 8008a78:	e018      	b.n	8008aac <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008a80:	b2db      	uxtb	r3, r3
 8008a82:	4619      	mov	r1, r3
 8008a84:	68f8      	ldr	r0, [r7, #12]
 8008a86:	f000 fa64 	bl	8008f52 <USBD_CoreFindIF>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	75bb      	strb	r3, [r7, #22]
            break;
 8008a8e:	e00d      	b.n	8008aac <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008a96:	b2db      	uxtb	r3, r3
 8008a98:	4619      	mov	r1, r3
 8008a9a:	68f8      	ldr	r0, [r7, #12]
 8008a9c:	f000 fa66 	bl	8008f6c <USBD_CoreFindEP>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	75bb      	strb	r3, [r7, #22]
            break;
 8008aa4:	e002      	b.n	8008aac <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	75bb      	strb	r3, [r7, #22]
            break;
 8008aaa:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008aac:	7dbb      	ldrb	r3, [r7, #22]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d119      	bne.n	8008ae6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ab8:	b2db      	uxtb	r3, r3
 8008aba:	2b03      	cmp	r3, #3
 8008abc:	d113      	bne.n	8008ae6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008abe:	7dba      	ldrb	r2, [r7, #22]
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	32ae      	adds	r2, #174	; 0xae
 8008ac4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ac8:	691b      	ldr	r3, [r3, #16]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d00b      	beq.n	8008ae6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008ace:	7dba      	ldrb	r2, [r7, #22]
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008ad6:	7dba      	ldrb	r2, [r7, #22]
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	32ae      	adds	r2, #174	; 0xae
 8008adc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ae0:	691b      	ldr	r3, [r3, #16]
 8008ae2:	68f8      	ldr	r0, [r7, #12]
 8008ae4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008ae6:	68f8      	ldr	r0, [r7, #12]
 8008ae8:	f001 f950 	bl	8009d8c <USBD_CtlSendStatus>
 8008aec:	e032      	b.n	8008b54 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008aee:	7afb      	ldrb	r3, [r7, #11]
 8008af0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008af4:	b2db      	uxtb	r3, r3
 8008af6:	4619      	mov	r1, r3
 8008af8:	68f8      	ldr	r0, [r7, #12]
 8008afa:	f000 fa37 	bl	8008f6c <USBD_CoreFindEP>
 8008afe:	4603      	mov	r3, r0
 8008b00:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008b02:	7dbb      	ldrb	r3, [r7, #22]
 8008b04:	2bff      	cmp	r3, #255	; 0xff
 8008b06:	d025      	beq.n	8008b54 <USBD_LL_DataOutStage+0x15c>
 8008b08:	7dbb      	ldrb	r3, [r7, #22]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d122      	bne.n	8008b54 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b14:	b2db      	uxtb	r3, r3
 8008b16:	2b03      	cmp	r3, #3
 8008b18:	d117      	bne.n	8008b4a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008b1a:	7dba      	ldrb	r2, [r7, #22]
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	32ae      	adds	r2, #174	; 0xae
 8008b20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b24:	699b      	ldr	r3, [r3, #24]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d00f      	beq.n	8008b4a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008b2a:	7dba      	ldrb	r2, [r7, #22]
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008b32:	7dba      	ldrb	r2, [r7, #22]
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	32ae      	adds	r2, #174	; 0xae
 8008b38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b3c:	699b      	ldr	r3, [r3, #24]
 8008b3e:	7afa      	ldrb	r2, [r7, #11]
 8008b40:	4611      	mov	r1, r2
 8008b42:	68f8      	ldr	r0, [r7, #12]
 8008b44:	4798      	blx	r3
 8008b46:	4603      	mov	r3, r0
 8008b48:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008b4a:	7dfb      	ldrb	r3, [r7, #23]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d001      	beq.n	8008b54 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008b50:	7dfb      	ldrb	r3, [r7, #23]
 8008b52:	e000      	b.n	8008b56 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008b54:	2300      	movs	r3, #0
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3718      	adds	r7, #24
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}

08008b5e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008b5e:	b580      	push	{r7, lr}
 8008b60:	b086      	sub	sp, #24
 8008b62:	af00      	add	r7, sp, #0
 8008b64:	60f8      	str	r0, [r7, #12]
 8008b66:	460b      	mov	r3, r1
 8008b68:	607a      	str	r2, [r7, #4]
 8008b6a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008b6c:	7afb      	ldrb	r3, [r7, #11]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d16f      	bne.n	8008c52 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	3314      	adds	r3, #20
 8008b76:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008b7e:	2b02      	cmp	r3, #2
 8008b80:	d15a      	bne.n	8008c38 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	689a      	ldr	r2, [r3, #8]
 8008b86:	693b      	ldr	r3, [r7, #16]
 8008b88:	68db      	ldr	r3, [r3, #12]
 8008b8a:	429a      	cmp	r2, r3
 8008b8c:	d914      	bls.n	8008bb8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008b8e:	693b      	ldr	r3, [r7, #16]
 8008b90:	689a      	ldr	r2, [r3, #8]
 8008b92:	693b      	ldr	r3, [r7, #16]
 8008b94:	68db      	ldr	r3, [r3, #12]
 8008b96:	1ad2      	subs	r2, r2, r3
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008b9c:	693b      	ldr	r3, [r7, #16]
 8008b9e:	689b      	ldr	r3, [r3, #8]
 8008ba0:	461a      	mov	r2, r3
 8008ba2:	6879      	ldr	r1, [r7, #4]
 8008ba4:	68f8      	ldr	r0, [r7, #12]
 8008ba6:	f001 f8b2 	bl	8009d0e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008baa:	2300      	movs	r3, #0
 8008bac:	2200      	movs	r2, #0
 8008bae:	2100      	movs	r1, #0
 8008bb0:	68f8      	ldr	r0, [r7, #12]
 8008bb2:	f003 f891 	bl	800bcd8 <USBD_LL_PrepareReceive>
 8008bb6:	e03f      	b.n	8008c38 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008bb8:	693b      	ldr	r3, [r7, #16]
 8008bba:	68da      	ldr	r2, [r3, #12]
 8008bbc:	693b      	ldr	r3, [r7, #16]
 8008bbe:	689b      	ldr	r3, [r3, #8]
 8008bc0:	429a      	cmp	r2, r3
 8008bc2:	d11c      	bne.n	8008bfe <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	685a      	ldr	r2, [r3, #4]
 8008bc8:	693b      	ldr	r3, [r7, #16]
 8008bca:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008bcc:	429a      	cmp	r2, r3
 8008bce:	d316      	bcc.n	8008bfe <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008bd0:	693b      	ldr	r3, [r7, #16]
 8008bd2:	685a      	ldr	r2, [r3, #4]
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008bda:	429a      	cmp	r2, r3
 8008bdc:	d20f      	bcs.n	8008bfe <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008bde:	2200      	movs	r2, #0
 8008be0:	2100      	movs	r1, #0
 8008be2:	68f8      	ldr	r0, [r7, #12]
 8008be4:	f001 f893 	bl	8009d0e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	2200      	movs	r2, #0
 8008bec:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	2100      	movs	r1, #0
 8008bf6:	68f8      	ldr	r0, [r7, #12]
 8008bf8:	f003 f86e 	bl	800bcd8 <USBD_LL_PrepareReceive>
 8008bfc:	e01c      	b.n	8008c38 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c04:	b2db      	uxtb	r3, r3
 8008c06:	2b03      	cmp	r3, #3
 8008c08:	d10f      	bne.n	8008c2a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c10:	68db      	ldr	r3, [r3, #12]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d009      	beq.n	8008c2a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c24:	68db      	ldr	r3, [r3, #12]
 8008c26:	68f8      	ldr	r0, [r7, #12]
 8008c28:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008c2a:	2180      	movs	r1, #128	; 0x80
 8008c2c:	68f8      	ldr	r0, [r7, #12]
 8008c2e:	f002 ffa9 	bl	800bb84 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008c32:	68f8      	ldr	r0, [r7, #12]
 8008c34:	f001 f8bd 	bl	8009db2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d03a      	beq.n	8008cb8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008c42:	68f8      	ldr	r0, [r7, #12]
 8008c44:	f7ff fe42 	bl	80088cc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008c50:	e032      	b.n	8008cb8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008c52:	7afb      	ldrb	r3, [r7, #11]
 8008c54:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008c58:	b2db      	uxtb	r3, r3
 8008c5a:	4619      	mov	r1, r3
 8008c5c:	68f8      	ldr	r0, [r7, #12]
 8008c5e:	f000 f985 	bl	8008f6c <USBD_CoreFindEP>
 8008c62:	4603      	mov	r3, r0
 8008c64:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008c66:	7dfb      	ldrb	r3, [r7, #23]
 8008c68:	2bff      	cmp	r3, #255	; 0xff
 8008c6a:	d025      	beq.n	8008cb8 <USBD_LL_DataInStage+0x15a>
 8008c6c:	7dfb      	ldrb	r3, [r7, #23]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d122      	bne.n	8008cb8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c78:	b2db      	uxtb	r3, r3
 8008c7a:	2b03      	cmp	r3, #3
 8008c7c:	d11c      	bne.n	8008cb8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008c7e:	7dfa      	ldrb	r2, [r7, #23]
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	32ae      	adds	r2, #174	; 0xae
 8008c84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c88:	695b      	ldr	r3, [r3, #20]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d014      	beq.n	8008cb8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008c8e:	7dfa      	ldrb	r2, [r7, #23]
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008c96:	7dfa      	ldrb	r2, [r7, #23]
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	32ae      	adds	r2, #174	; 0xae
 8008c9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ca0:	695b      	ldr	r3, [r3, #20]
 8008ca2:	7afa      	ldrb	r2, [r7, #11]
 8008ca4:	4611      	mov	r1, r2
 8008ca6:	68f8      	ldr	r0, [r7, #12]
 8008ca8:	4798      	blx	r3
 8008caa:	4603      	mov	r3, r0
 8008cac:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008cae:	7dbb      	ldrb	r3, [r7, #22]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d001      	beq.n	8008cb8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008cb4:	7dbb      	ldrb	r3, [r7, #22]
 8008cb6:	e000      	b.n	8008cba <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008cb8:	2300      	movs	r3, #0
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	3718      	adds	r7, #24
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}

08008cc2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008cc2:	b580      	push	{r7, lr}
 8008cc4:	b084      	sub	sp, #16
 8008cc6:	af00      	add	r7, sp, #0
 8008cc8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008cca:	2300      	movs	r3, #0
 8008ccc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2201      	movs	r2, #1
 8008cd2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2200      	movs	r2, #0
 8008cda:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d014      	beq.n	8008d28 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d04:	685b      	ldr	r3, [r3, #4]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d00e      	beq.n	8008d28 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d10:	685b      	ldr	r3, [r3, #4]
 8008d12:	687a      	ldr	r2, [r7, #4]
 8008d14:	6852      	ldr	r2, [r2, #4]
 8008d16:	b2d2      	uxtb	r2, r2
 8008d18:	4611      	mov	r1, r2
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	4798      	blx	r3
 8008d1e:	4603      	mov	r3, r0
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d001      	beq.n	8008d28 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008d24:	2303      	movs	r3, #3
 8008d26:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008d28:	2340      	movs	r3, #64	; 0x40
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	2100      	movs	r1, #0
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f002 fee3 	bl	800bafa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2201      	movs	r2, #1
 8008d38:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2240      	movs	r2, #64	; 0x40
 8008d40:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008d44:	2340      	movs	r3, #64	; 0x40
 8008d46:	2200      	movs	r2, #0
 8008d48:	2180      	movs	r1, #128	; 0x80
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f002 fed5 	bl	800bafa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2201      	movs	r2, #1
 8008d54:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2240      	movs	r2, #64	; 0x40
 8008d5a:	621a      	str	r2, [r3, #32]

  return ret;
 8008d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	3710      	adds	r7, #16
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}

08008d66 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008d66:	b480      	push	{r7}
 8008d68:	b083      	sub	sp, #12
 8008d6a:	af00      	add	r7, sp, #0
 8008d6c:	6078      	str	r0, [r7, #4]
 8008d6e:	460b      	mov	r3, r1
 8008d70:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	78fa      	ldrb	r2, [r7, #3]
 8008d76:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008d78:	2300      	movs	r3, #0
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	370c      	adds	r7, #12
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d84:	4770      	bx	lr

08008d86 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008d86:	b480      	push	{r7}
 8008d88:	b083      	sub	sp, #12
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d94:	b2db      	uxtb	r3, r3
 8008d96:	2b04      	cmp	r3, #4
 8008d98:	d006      	beq.n	8008da8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008da0:	b2da      	uxtb	r2, r3
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2204      	movs	r2, #4
 8008dac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008db0:	2300      	movs	r3, #0
}
 8008db2:	4618      	mov	r0, r3
 8008db4:	370c      	adds	r7, #12
 8008db6:	46bd      	mov	sp, r7
 8008db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbc:	4770      	bx	lr

08008dbe <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008dbe:	b480      	push	{r7}
 8008dc0:	b083      	sub	sp, #12
 8008dc2:	af00      	add	r7, sp, #0
 8008dc4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dcc:	b2db      	uxtb	r3, r3
 8008dce:	2b04      	cmp	r3, #4
 8008dd0:	d106      	bne.n	8008de0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008dd8:	b2da      	uxtb	r2, r3
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008de0:	2300      	movs	r3, #0
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	370c      	adds	r7, #12
 8008de6:	46bd      	mov	sp, r7
 8008de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dec:	4770      	bx	lr

08008dee <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008dee:	b580      	push	{r7, lr}
 8008df0:	b082      	sub	sp, #8
 8008df2:	af00      	add	r7, sp, #0
 8008df4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dfc:	b2db      	uxtb	r3, r3
 8008dfe:	2b03      	cmp	r3, #3
 8008e00:	d110      	bne.n	8008e24 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d00b      	beq.n	8008e24 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e12:	69db      	ldr	r3, [r3, #28]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d005      	beq.n	8008e24 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e1e:	69db      	ldr	r3, [r3, #28]
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008e24:	2300      	movs	r3, #0
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	3708      	adds	r7, #8
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}

08008e2e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008e2e:	b580      	push	{r7, lr}
 8008e30:	b082      	sub	sp, #8
 8008e32:	af00      	add	r7, sp, #0
 8008e34:	6078      	str	r0, [r7, #4]
 8008e36:	460b      	mov	r3, r1
 8008e38:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	32ae      	adds	r2, #174	; 0xae
 8008e44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d101      	bne.n	8008e50 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008e4c:	2303      	movs	r3, #3
 8008e4e:	e01c      	b.n	8008e8a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e56:	b2db      	uxtb	r3, r3
 8008e58:	2b03      	cmp	r3, #3
 8008e5a:	d115      	bne.n	8008e88 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	32ae      	adds	r2, #174	; 0xae
 8008e66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e6a:	6a1b      	ldr	r3, [r3, #32]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d00b      	beq.n	8008e88 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	32ae      	adds	r2, #174	; 0xae
 8008e7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e7e:	6a1b      	ldr	r3, [r3, #32]
 8008e80:	78fa      	ldrb	r2, [r7, #3]
 8008e82:	4611      	mov	r1, r2
 8008e84:	6878      	ldr	r0, [r7, #4]
 8008e86:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008e88:	2300      	movs	r3, #0
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3708      	adds	r7, #8
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}

08008e92 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008e92:	b580      	push	{r7, lr}
 8008e94:	b082      	sub	sp, #8
 8008e96:	af00      	add	r7, sp, #0
 8008e98:	6078      	str	r0, [r7, #4]
 8008e9a:	460b      	mov	r3, r1
 8008e9c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	32ae      	adds	r2, #174	; 0xae
 8008ea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d101      	bne.n	8008eb4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008eb0:	2303      	movs	r3, #3
 8008eb2:	e01c      	b.n	8008eee <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008eba:	b2db      	uxtb	r3, r3
 8008ebc:	2b03      	cmp	r3, #3
 8008ebe:	d115      	bne.n	8008eec <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	32ae      	adds	r2, #174	; 0xae
 8008eca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d00b      	beq.n	8008eec <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	32ae      	adds	r2, #174	; 0xae
 8008ede:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee4:	78fa      	ldrb	r2, [r7, #3]
 8008ee6:	4611      	mov	r1, r2
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008eec:	2300      	movs	r3, #0
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3708      	adds	r7, #8
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}

08008ef6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008ef6:	b480      	push	{r7}
 8008ef8:	b083      	sub	sp, #12
 8008efa:	af00      	add	r7, sp, #0
 8008efc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008efe:	2300      	movs	r3, #0
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	370c      	adds	r7, #12
 8008f04:	46bd      	mov	sp, r7
 8008f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0a:	4770      	bx	lr

08008f0c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b084      	sub	sp, #16
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008f14:	2300      	movs	r3, #0
 8008f16:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2201      	movs	r2, #1
 8008f1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d00e      	beq.n	8008f48 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f30:	685b      	ldr	r3, [r3, #4]
 8008f32:	687a      	ldr	r2, [r7, #4]
 8008f34:	6852      	ldr	r2, [r2, #4]
 8008f36:	b2d2      	uxtb	r2, r2
 8008f38:	4611      	mov	r1, r2
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	4798      	blx	r3
 8008f3e:	4603      	mov	r3, r0
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d001      	beq.n	8008f48 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008f44:	2303      	movs	r3, #3
 8008f46:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3710      	adds	r7, #16
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}

08008f52 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008f52:	b480      	push	{r7}
 8008f54:	b083      	sub	sp, #12
 8008f56:	af00      	add	r7, sp, #0
 8008f58:	6078      	str	r0, [r7, #4]
 8008f5a:	460b      	mov	r3, r1
 8008f5c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008f5e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	370c      	adds	r7, #12
 8008f64:	46bd      	mov	sp, r7
 8008f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6a:	4770      	bx	lr

08008f6c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b083      	sub	sp, #12
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
 8008f74:	460b      	mov	r3, r1
 8008f76:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008f78:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	370c      	adds	r7, #12
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f84:	4770      	bx	lr

08008f86 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008f86:	b580      	push	{r7, lr}
 8008f88:	b086      	sub	sp, #24
 8008f8a:	af00      	add	r7, sp, #0
 8008f8c:	6078      	str	r0, [r7, #4]
 8008f8e:	460b      	mov	r3, r1
 8008f90:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	885b      	ldrh	r3, [r3, #2]
 8008fa2:	b29a      	uxth	r2, r3
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	781b      	ldrb	r3, [r3, #0]
 8008fa8:	b29b      	uxth	r3, r3
 8008faa:	429a      	cmp	r2, r3
 8008fac:	d920      	bls.n	8008ff0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	781b      	ldrb	r3, [r3, #0]
 8008fb2:	b29b      	uxth	r3, r3
 8008fb4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008fb6:	e013      	b.n	8008fe0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008fb8:	f107 030a 	add.w	r3, r7, #10
 8008fbc:	4619      	mov	r1, r3
 8008fbe:	6978      	ldr	r0, [r7, #20]
 8008fc0:	f000 f81b 	bl	8008ffa <USBD_GetNextDesc>
 8008fc4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008fc6:	697b      	ldr	r3, [r7, #20]
 8008fc8:	785b      	ldrb	r3, [r3, #1]
 8008fca:	2b05      	cmp	r3, #5
 8008fcc:	d108      	bne.n	8008fe0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008fce:	697b      	ldr	r3, [r7, #20]
 8008fd0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008fd2:	693b      	ldr	r3, [r7, #16]
 8008fd4:	789b      	ldrb	r3, [r3, #2]
 8008fd6:	78fa      	ldrb	r2, [r7, #3]
 8008fd8:	429a      	cmp	r2, r3
 8008fda:	d008      	beq.n	8008fee <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008fdc:	2300      	movs	r3, #0
 8008fde:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	885b      	ldrh	r3, [r3, #2]
 8008fe4:	b29a      	uxth	r2, r3
 8008fe6:	897b      	ldrh	r3, [r7, #10]
 8008fe8:	429a      	cmp	r2, r3
 8008fea:	d8e5      	bhi.n	8008fb8 <USBD_GetEpDesc+0x32>
 8008fec:	e000      	b.n	8008ff0 <USBD_GetEpDesc+0x6a>
          break;
 8008fee:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008ff0:	693b      	ldr	r3, [r7, #16]
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3718      	adds	r7, #24
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}

08008ffa <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008ffa:	b480      	push	{r7}
 8008ffc:	b085      	sub	sp, #20
 8008ffe:	af00      	add	r7, sp, #0
 8009000:	6078      	str	r0, [r7, #4]
 8009002:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	881a      	ldrh	r2, [r3, #0]
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	781b      	ldrb	r3, [r3, #0]
 8009010:	b29b      	uxth	r3, r3
 8009012:	4413      	add	r3, r2
 8009014:	b29a      	uxth	r2, r3
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	781b      	ldrb	r3, [r3, #0]
 800901e:	461a      	mov	r2, r3
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	4413      	add	r3, r2
 8009024:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009026:	68fb      	ldr	r3, [r7, #12]
}
 8009028:	4618      	mov	r0, r3
 800902a:	3714      	adds	r7, #20
 800902c:	46bd      	mov	sp, r7
 800902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009032:	4770      	bx	lr

08009034 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009034:	b480      	push	{r7}
 8009036:	b087      	sub	sp, #28
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009040:	697b      	ldr	r3, [r7, #20]
 8009042:	781b      	ldrb	r3, [r3, #0]
 8009044:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	3301      	adds	r3, #1
 800904a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800904c:	697b      	ldr	r3, [r7, #20]
 800904e:	781b      	ldrb	r3, [r3, #0]
 8009050:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009052:	8a3b      	ldrh	r3, [r7, #16]
 8009054:	021b      	lsls	r3, r3, #8
 8009056:	b21a      	sxth	r2, r3
 8009058:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800905c:	4313      	orrs	r3, r2
 800905e:	b21b      	sxth	r3, r3
 8009060:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009062:	89fb      	ldrh	r3, [r7, #14]
}
 8009064:	4618      	mov	r0, r3
 8009066:	371c      	adds	r7, #28
 8009068:	46bd      	mov	sp, r7
 800906a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906e:	4770      	bx	lr

08009070 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b084      	sub	sp, #16
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
 8009078:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800907a:	2300      	movs	r3, #0
 800907c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	781b      	ldrb	r3, [r3, #0]
 8009082:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009086:	2b40      	cmp	r3, #64	; 0x40
 8009088:	d005      	beq.n	8009096 <USBD_StdDevReq+0x26>
 800908a:	2b40      	cmp	r3, #64	; 0x40
 800908c:	d857      	bhi.n	800913e <USBD_StdDevReq+0xce>
 800908e:	2b00      	cmp	r3, #0
 8009090:	d00f      	beq.n	80090b2 <USBD_StdDevReq+0x42>
 8009092:	2b20      	cmp	r3, #32
 8009094:	d153      	bne.n	800913e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	32ae      	adds	r2, #174	; 0xae
 80090a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090a4:	689b      	ldr	r3, [r3, #8]
 80090a6:	6839      	ldr	r1, [r7, #0]
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	4798      	blx	r3
 80090ac:	4603      	mov	r3, r0
 80090ae:	73fb      	strb	r3, [r7, #15]
      break;
 80090b0:	e04a      	b.n	8009148 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	785b      	ldrb	r3, [r3, #1]
 80090b6:	2b09      	cmp	r3, #9
 80090b8:	d83b      	bhi.n	8009132 <USBD_StdDevReq+0xc2>
 80090ba:	a201      	add	r2, pc, #4	; (adr r2, 80090c0 <USBD_StdDevReq+0x50>)
 80090bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090c0:	08009115 	.word	0x08009115
 80090c4:	08009129 	.word	0x08009129
 80090c8:	08009133 	.word	0x08009133
 80090cc:	0800911f 	.word	0x0800911f
 80090d0:	08009133 	.word	0x08009133
 80090d4:	080090f3 	.word	0x080090f3
 80090d8:	080090e9 	.word	0x080090e9
 80090dc:	08009133 	.word	0x08009133
 80090e0:	0800910b 	.word	0x0800910b
 80090e4:	080090fd 	.word	0x080090fd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80090e8:	6839      	ldr	r1, [r7, #0]
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f000 fa3c 	bl	8009568 <USBD_GetDescriptor>
          break;
 80090f0:	e024      	b.n	800913c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80090f2:	6839      	ldr	r1, [r7, #0]
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f000 fba1 	bl	800983c <USBD_SetAddress>
          break;
 80090fa:	e01f      	b.n	800913c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80090fc:	6839      	ldr	r1, [r7, #0]
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f000 fbe0 	bl	80098c4 <USBD_SetConfig>
 8009104:	4603      	mov	r3, r0
 8009106:	73fb      	strb	r3, [r7, #15]
          break;
 8009108:	e018      	b.n	800913c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800910a:	6839      	ldr	r1, [r7, #0]
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f000 fc83 	bl	8009a18 <USBD_GetConfig>
          break;
 8009112:	e013      	b.n	800913c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009114:	6839      	ldr	r1, [r7, #0]
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f000 fcb4 	bl	8009a84 <USBD_GetStatus>
          break;
 800911c:	e00e      	b.n	800913c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800911e:	6839      	ldr	r1, [r7, #0]
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f000 fce3 	bl	8009aec <USBD_SetFeature>
          break;
 8009126:	e009      	b.n	800913c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009128:	6839      	ldr	r1, [r7, #0]
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f000 fd07 	bl	8009b3e <USBD_ClrFeature>
          break;
 8009130:	e004      	b.n	800913c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009132:	6839      	ldr	r1, [r7, #0]
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f000 fd5e 	bl	8009bf6 <USBD_CtlError>
          break;
 800913a:	bf00      	nop
      }
      break;
 800913c:	e004      	b.n	8009148 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800913e:	6839      	ldr	r1, [r7, #0]
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f000 fd58 	bl	8009bf6 <USBD_CtlError>
      break;
 8009146:	bf00      	nop
  }

  return ret;
 8009148:	7bfb      	ldrb	r3, [r7, #15]
}
 800914a:	4618      	mov	r0, r3
 800914c:	3710      	adds	r7, #16
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}
 8009152:	bf00      	nop

08009154 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b084      	sub	sp, #16
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
 800915c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800915e:	2300      	movs	r3, #0
 8009160:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	781b      	ldrb	r3, [r3, #0]
 8009166:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800916a:	2b40      	cmp	r3, #64	; 0x40
 800916c:	d005      	beq.n	800917a <USBD_StdItfReq+0x26>
 800916e:	2b40      	cmp	r3, #64	; 0x40
 8009170:	d852      	bhi.n	8009218 <USBD_StdItfReq+0xc4>
 8009172:	2b00      	cmp	r3, #0
 8009174:	d001      	beq.n	800917a <USBD_StdItfReq+0x26>
 8009176:	2b20      	cmp	r3, #32
 8009178:	d14e      	bne.n	8009218 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009180:	b2db      	uxtb	r3, r3
 8009182:	3b01      	subs	r3, #1
 8009184:	2b02      	cmp	r3, #2
 8009186:	d840      	bhi.n	800920a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	889b      	ldrh	r3, [r3, #4]
 800918c:	b2db      	uxtb	r3, r3
 800918e:	2b01      	cmp	r3, #1
 8009190:	d836      	bhi.n	8009200 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	889b      	ldrh	r3, [r3, #4]
 8009196:	b2db      	uxtb	r3, r3
 8009198:	4619      	mov	r1, r3
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f7ff fed9 	bl	8008f52 <USBD_CoreFindIF>
 80091a0:	4603      	mov	r3, r0
 80091a2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80091a4:	7bbb      	ldrb	r3, [r7, #14]
 80091a6:	2bff      	cmp	r3, #255	; 0xff
 80091a8:	d01d      	beq.n	80091e6 <USBD_StdItfReq+0x92>
 80091aa:	7bbb      	ldrb	r3, [r7, #14]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d11a      	bne.n	80091e6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80091b0:	7bba      	ldrb	r2, [r7, #14]
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	32ae      	adds	r2, #174	; 0xae
 80091b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091ba:	689b      	ldr	r3, [r3, #8]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d00f      	beq.n	80091e0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80091c0:	7bba      	ldrb	r2, [r7, #14]
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80091c8:	7bba      	ldrb	r2, [r7, #14]
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	32ae      	adds	r2, #174	; 0xae
 80091ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091d2:	689b      	ldr	r3, [r3, #8]
 80091d4:	6839      	ldr	r1, [r7, #0]
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	4798      	blx	r3
 80091da:	4603      	mov	r3, r0
 80091dc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80091de:	e004      	b.n	80091ea <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80091e0:	2303      	movs	r3, #3
 80091e2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80091e4:	e001      	b.n	80091ea <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80091e6:	2303      	movs	r3, #3
 80091e8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	88db      	ldrh	r3, [r3, #6]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d110      	bne.n	8009214 <USBD_StdItfReq+0xc0>
 80091f2:	7bfb      	ldrb	r3, [r7, #15]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d10d      	bne.n	8009214 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f000 fdc7 	bl	8009d8c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80091fe:	e009      	b.n	8009214 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009200:	6839      	ldr	r1, [r7, #0]
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f000 fcf7 	bl	8009bf6 <USBD_CtlError>
          break;
 8009208:	e004      	b.n	8009214 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800920a:	6839      	ldr	r1, [r7, #0]
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f000 fcf2 	bl	8009bf6 <USBD_CtlError>
          break;
 8009212:	e000      	b.n	8009216 <USBD_StdItfReq+0xc2>
          break;
 8009214:	bf00      	nop
      }
      break;
 8009216:	e004      	b.n	8009222 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009218:	6839      	ldr	r1, [r7, #0]
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f000 fceb 	bl	8009bf6 <USBD_CtlError>
      break;
 8009220:	bf00      	nop
  }

  return ret;
 8009222:	7bfb      	ldrb	r3, [r7, #15]
}
 8009224:	4618      	mov	r0, r3
 8009226:	3710      	adds	r7, #16
 8009228:	46bd      	mov	sp, r7
 800922a:	bd80      	pop	{r7, pc}

0800922c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b084      	sub	sp, #16
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
 8009234:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009236:	2300      	movs	r3, #0
 8009238:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	889b      	ldrh	r3, [r3, #4]
 800923e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	781b      	ldrb	r3, [r3, #0]
 8009244:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009248:	2b40      	cmp	r3, #64	; 0x40
 800924a:	d007      	beq.n	800925c <USBD_StdEPReq+0x30>
 800924c:	2b40      	cmp	r3, #64	; 0x40
 800924e:	f200 817f 	bhi.w	8009550 <USBD_StdEPReq+0x324>
 8009252:	2b00      	cmp	r3, #0
 8009254:	d02a      	beq.n	80092ac <USBD_StdEPReq+0x80>
 8009256:	2b20      	cmp	r3, #32
 8009258:	f040 817a 	bne.w	8009550 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800925c:	7bbb      	ldrb	r3, [r7, #14]
 800925e:	4619      	mov	r1, r3
 8009260:	6878      	ldr	r0, [r7, #4]
 8009262:	f7ff fe83 	bl	8008f6c <USBD_CoreFindEP>
 8009266:	4603      	mov	r3, r0
 8009268:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800926a:	7b7b      	ldrb	r3, [r7, #13]
 800926c:	2bff      	cmp	r3, #255	; 0xff
 800926e:	f000 8174 	beq.w	800955a <USBD_StdEPReq+0x32e>
 8009272:	7b7b      	ldrb	r3, [r7, #13]
 8009274:	2b00      	cmp	r3, #0
 8009276:	f040 8170 	bne.w	800955a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800927a:	7b7a      	ldrb	r2, [r7, #13]
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009282:	7b7a      	ldrb	r2, [r7, #13]
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	32ae      	adds	r2, #174	; 0xae
 8009288:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800928c:	689b      	ldr	r3, [r3, #8]
 800928e:	2b00      	cmp	r3, #0
 8009290:	f000 8163 	beq.w	800955a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009294:	7b7a      	ldrb	r2, [r7, #13]
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	32ae      	adds	r2, #174	; 0xae
 800929a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800929e:	689b      	ldr	r3, [r3, #8]
 80092a0:	6839      	ldr	r1, [r7, #0]
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	4798      	blx	r3
 80092a6:	4603      	mov	r3, r0
 80092a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80092aa:	e156      	b.n	800955a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	785b      	ldrb	r3, [r3, #1]
 80092b0:	2b03      	cmp	r3, #3
 80092b2:	d008      	beq.n	80092c6 <USBD_StdEPReq+0x9a>
 80092b4:	2b03      	cmp	r3, #3
 80092b6:	f300 8145 	bgt.w	8009544 <USBD_StdEPReq+0x318>
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	f000 809b 	beq.w	80093f6 <USBD_StdEPReq+0x1ca>
 80092c0:	2b01      	cmp	r3, #1
 80092c2:	d03c      	beq.n	800933e <USBD_StdEPReq+0x112>
 80092c4:	e13e      	b.n	8009544 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092cc:	b2db      	uxtb	r3, r3
 80092ce:	2b02      	cmp	r3, #2
 80092d0:	d002      	beq.n	80092d8 <USBD_StdEPReq+0xac>
 80092d2:	2b03      	cmp	r3, #3
 80092d4:	d016      	beq.n	8009304 <USBD_StdEPReq+0xd8>
 80092d6:	e02c      	b.n	8009332 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80092d8:	7bbb      	ldrb	r3, [r7, #14]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d00d      	beq.n	80092fa <USBD_StdEPReq+0xce>
 80092de:	7bbb      	ldrb	r3, [r7, #14]
 80092e0:	2b80      	cmp	r3, #128	; 0x80
 80092e2:	d00a      	beq.n	80092fa <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80092e4:	7bbb      	ldrb	r3, [r7, #14]
 80092e6:	4619      	mov	r1, r3
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f002 fc4b 	bl	800bb84 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80092ee:	2180      	movs	r1, #128	; 0x80
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f002 fc47 	bl	800bb84 <USBD_LL_StallEP>
 80092f6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80092f8:	e020      	b.n	800933c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80092fa:	6839      	ldr	r1, [r7, #0]
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	f000 fc7a 	bl	8009bf6 <USBD_CtlError>
              break;
 8009302:	e01b      	b.n	800933c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	885b      	ldrh	r3, [r3, #2]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d10e      	bne.n	800932a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800930c:	7bbb      	ldrb	r3, [r7, #14]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d00b      	beq.n	800932a <USBD_StdEPReq+0xfe>
 8009312:	7bbb      	ldrb	r3, [r7, #14]
 8009314:	2b80      	cmp	r3, #128	; 0x80
 8009316:	d008      	beq.n	800932a <USBD_StdEPReq+0xfe>
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	88db      	ldrh	r3, [r3, #6]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d104      	bne.n	800932a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009320:	7bbb      	ldrb	r3, [r7, #14]
 8009322:	4619      	mov	r1, r3
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f002 fc2d 	bl	800bb84 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f000 fd2e 	bl	8009d8c <USBD_CtlSendStatus>

              break;
 8009330:	e004      	b.n	800933c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009332:	6839      	ldr	r1, [r7, #0]
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f000 fc5e 	bl	8009bf6 <USBD_CtlError>
              break;
 800933a:	bf00      	nop
          }
          break;
 800933c:	e107      	b.n	800954e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009344:	b2db      	uxtb	r3, r3
 8009346:	2b02      	cmp	r3, #2
 8009348:	d002      	beq.n	8009350 <USBD_StdEPReq+0x124>
 800934a:	2b03      	cmp	r3, #3
 800934c:	d016      	beq.n	800937c <USBD_StdEPReq+0x150>
 800934e:	e04b      	b.n	80093e8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009350:	7bbb      	ldrb	r3, [r7, #14]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d00d      	beq.n	8009372 <USBD_StdEPReq+0x146>
 8009356:	7bbb      	ldrb	r3, [r7, #14]
 8009358:	2b80      	cmp	r3, #128	; 0x80
 800935a:	d00a      	beq.n	8009372 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800935c:	7bbb      	ldrb	r3, [r7, #14]
 800935e:	4619      	mov	r1, r3
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	f002 fc0f 	bl	800bb84 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009366:	2180      	movs	r1, #128	; 0x80
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f002 fc0b 	bl	800bb84 <USBD_LL_StallEP>
 800936e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009370:	e040      	b.n	80093f4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009372:	6839      	ldr	r1, [r7, #0]
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f000 fc3e 	bl	8009bf6 <USBD_CtlError>
              break;
 800937a:	e03b      	b.n	80093f4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	885b      	ldrh	r3, [r3, #2]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d136      	bne.n	80093f2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009384:	7bbb      	ldrb	r3, [r7, #14]
 8009386:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800938a:	2b00      	cmp	r3, #0
 800938c:	d004      	beq.n	8009398 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800938e:	7bbb      	ldrb	r3, [r7, #14]
 8009390:	4619      	mov	r1, r3
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f002 fc15 	bl	800bbc2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f000 fcf7 	bl	8009d8c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800939e:	7bbb      	ldrb	r3, [r7, #14]
 80093a0:	4619      	mov	r1, r3
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f7ff fde2 	bl	8008f6c <USBD_CoreFindEP>
 80093a8:	4603      	mov	r3, r0
 80093aa:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80093ac:	7b7b      	ldrb	r3, [r7, #13]
 80093ae:	2bff      	cmp	r3, #255	; 0xff
 80093b0:	d01f      	beq.n	80093f2 <USBD_StdEPReq+0x1c6>
 80093b2:	7b7b      	ldrb	r3, [r7, #13]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d11c      	bne.n	80093f2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80093b8:	7b7a      	ldrb	r2, [r7, #13]
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80093c0:	7b7a      	ldrb	r2, [r7, #13]
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	32ae      	adds	r2, #174	; 0xae
 80093c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093ca:	689b      	ldr	r3, [r3, #8]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d010      	beq.n	80093f2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80093d0:	7b7a      	ldrb	r2, [r7, #13]
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	32ae      	adds	r2, #174	; 0xae
 80093d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093da:	689b      	ldr	r3, [r3, #8]
 80093dc:	6839      	ldr	r1, [r7, #0]
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	4798      	blx	r3
 80093e2:	4603      	mov	r3, r0
 80093e4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80093e6:	e004      	b.n	80093f2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80093e8:	6839      	ldr	r1, [r7, #0]
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f000 fc03 	bl	8009bf6 <USBD_CtlError>
              break;
 80093f0:	e000      	b.n	80093f4 <USBD_StdEPReq+0x1c8>
              break;
 80093f2:	bf00      	nop
          }
          break;
 80093f4:	e0ab      	b.n	800954e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093fc:	b2db      	uxtb	r3, r3
 80093fe:	2b02      	cmp	r3, #2
 8009400:	d002      	beq.n	8009408 <USBD_StdEPReq+0x1dc>
 8009402:	2b03      	cmp	r3, #3
 8009404:	d032      	beq.n	800946c <USBD_StdEPReq+0x240>
 8009406:	e097      	b.n	8009538 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009408:	7bbb      	ldrb	r3, [r7, #14]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d007      	beq.n	800941e <USBD_StdEPReq+0x1f2>
 800940e:	7bbb      	ldrb	r3, [r7, #14]
 8009410:	2b80      	cmp	r3, #128	; 0x80
 8009412:	d004      	beq.n	800941e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009414:	6839      	ldr	r1, [r7, #0]
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f000 fbed 	bl	8009bf6 <USBD_CtlError>
                break;
 800941c:	e091      	b.n	8009542 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800941e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009422:	2b00      	cmp	r3, #0
 8009424:	da0b      	bge.n	800943e <USBD_StdEPReq+0x212>
 8009426:	7bbb      	ldrb	r3, [r7, #14]
 8009428:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800942c:	4613      	mov	r3, r2
 800942e:	009b      	lsls	r3, r3, #2
 8009430:	4413      	add	r3, r2
 8009432:	009b      	lsls	r3, r3, #2
 8009434:	3310      	adds	r3, #16
 8009436:	687a      	ldr	r2, [r7, #4]
 8009438:	4413      	add	r3, r2
 800943a:	3304      	adds	r3, #4
 800943c:	e00b      	b.n	8009456 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800943e:	7bbb      	ldrb	r3, [r7, #14]
 8009440:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009444:	4613      	mov	r3, r2
 8009446:	009b      	lsls	r3, r3, #2
 8009448:	4413      	add	r3, r2
 800944a:	009b      	lsls	r3, r3, #2
 800944c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009450:	687a      	ldr	r2, [r7, #4]
 8009452:	4413      	add	r3, r2
 8009454:	3304      	adds	r3, #4
 8009456:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	2200      	movs	r2, #0
 800945c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	2202      	movs	r2, #2
 8009462:	4619      	mov	r1, r3
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f000 fc37 	bl	8009cd8 <USBD_CtlSendData>
              break;
 800946a:	e06a      	b.n	8009542 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800946c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009470:	2b00      	cmp	r3, #0
 8009472:	da11      	bge.n	8009498 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009474:	7bbb      	ldrb	r3, [r7, #14]
 8009476:	f003 020f 	and.w	r2, r3, #15
 800947a:	6879      	ldr	r1, [r7, #4]
 800947c:	4613      	mov	r3, r2
 800947e:	009b      	lsls	r3, r3, #2
 8009480:	4413      	add	r3, r2
 8009482:	009b      	lsls	r3, r3, #2
 8009484:	440b      	add	r3, r1
 8009486:	3324      	adds	r3, #36	; 0x24
 8009488:	881b      	ldrh	r3, [r3, #0]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d117      	bne.n	80094be <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800948e:	6839      	ldr	r1, [r7, #0]
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f000 fbb0 	bl	8009bf6 <USBD_CtlError>
                  break;
 8009496:	e054      	b.n	8009542 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009498:	7bbb      	ldrb	r3, [r7, #14]
 800949a:	f003 020f 	and.w	r2, r3, #15
 800949e:	6879      	ldr	r1, [r7, #4]
 80094a0:	4613      	mov	r3, r2
 80094a2:	009b      	lsls	r3, r3, #2
 80094a4:	4413      	add	r3, r2
 80094a6:	009b      	lsls	r3, r3, #2
 80094a8:	440b      	add	r3, r1
 80094aa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80094ae:	881b      	ldrh	r3, [r3, #0]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d104      	bne.n	80094be <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80094b4:	6839      	ldr	r1, [r7, #0]
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f000 fb9d 	bl	8009bf6 <USBD_CtlError>
                  break;
 80094bc:	e041      	b.n	8009542 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80094be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	da0b      	bge.n	80094de <USBD_StdEPReq+0x2b2>
 80094c6:	7bbb      	ldrb	r3, [r7, #14]
 80094c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80094cc:	4613      	mov	r3, r2
 80094ce:	009b      	lsls	r3, r3, #2
 80094d0:	4413      	add	r3, r2
 80094d2:	009b      	lsls	r3, r3, #2
 80094d4:	3310      	adds	r3, #16
 80094d6:	687a      	ldr	r2, [r7, #4]
 80094d8:	4413      	add	r3, r2
 80094da:	3304      	adds	r3, #4
 80094dc:	e00b      	b.n	80094f6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80094de:	7bbb      	ldrb	r3, [r7, #14]
 80094e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80094e4:	4613      	mov	r3, r2
 80094e6:	009b      	lsls	r3, r3, #2
 80094e8:	4413      	add	r3, r2
 80094ea:	009b      	lsls	r3, r3, #2
 80094ec:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80094f0:	687a      	ldr	r2, [r7, #4]
 80094f2:	4413      	add	r3, r2
 80094f4:	3304      	adds	r3, #4
 80094f6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80094f8:	7bbb      	ldrb	r3, [r7, #14]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d002      	beq.n	8009504 <USBD_StdEPReq+0x2d8>
 80094fe:	7bbb      	ldrb	r3, [r7, #14]
 8009500:	2b80      	cmp	r3, #128	; 0x80
 8009502:	d103      	bne.n	800950c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	2200      	movs	r2, #0
 8009508:	601a      	str	r2, [r3, #0]
 800950a:	e00e      	b.n	800952a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800950c:	7bbb      	ldrb	r3, [r7, #14]
 800950e:	4619      	mov	r1, r3
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f002 fb75 	bl	800bc00 <USBD_LL_IsStallEP>
 8009516:	4603      	mov	r3, r0
 8009518:	2b00      	cmp	r3, #0
 800951a:	d003      	beq.n	8009524 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	2201      	movs	r2, #1
 8009520:	601a      	str	r2, [r3, #0]
 8009522:	e002      	b.n	800952a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	2200      	movs	r2, #0
 8009528:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	2202      	movs	r2, #2
 800952e:	4619      	mov	r1, r3
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	f000 fbd1 	bl	8009cd8 <USBD_CtlSendData>
              break;
 8009536:	e004      	b.n	8009542 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009538:	6839      	ldr	r1, [r7, #0]
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f000 fb5b 	bl	8009bf6 <USBD_CtlError>
              break;
 8009540:	bf00      	nop
          }
          break;
 8009542:	e004      	b.n	800954e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009544:	6839      	ldr	r1, [r7, #0]
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f000 fb55 	bl	8009bf6 <USBD_CtlError>
          break;
 800954c:	bf00      	nop
      }
      break;
 800954e:	e005      	b.n	800955c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009550:	6839      	ldr	r1, [r7, #0]
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f000 fb4f 	bl	8009bf6 <USBD_CtlError>
      break;
 8009558:	e000      	b.n	800955c <USBD_StdEPReq+0x330>
      break;
 800955a:	bf00      	nop
  }

  return ret;
 800955c:	7bfb      	ldrb	r3, [r7, #15]
}
 800955e:	4618      	mov	r0, r3
 8009560:	3710      	adds	r7, #16
 8009562:	46bd      	mov	sp, r7
 8009564:	bd80      	pop	{r7, pc}
	...

08009568 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b084      	sub	sp, #16
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
 8009570:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009572:	2300      	movs	r3, #0
 8009574:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009576:	2300      	movs	r3, #0
 8009578:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800957a:	2300      	movs	r3, #0
 800957c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	885b      	ldrh	r3, [r3, #2]
 8009582:	0a1b      	lsrs	r3, r3, #8
 8009584:	b29b      	uxth	r3, r3
 8009586:	3b01      	subs	r3, #1
 8009588:	2b06      	cmp	r3, #6
 800958a:	f200 8128 	bhi.w	80097de <USBD_GetDescriptor+0x276>
 800958e:	a201      	add	r2, pc, #4	; (adr r2, 8009594 <USBD_GetDescriptor+0x2c>)
 8009590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009594:	080095b1 	.word	0x080095b1
 8009598:	080095c9 	.word	0x080095c9
 800959c:	08009609 	.word	0x08009609
 80095a0:	080097df 	.word	0x080097df
 80095a4:	080097df 	.word	0x080097df
 80095a8:	0800977f 	.word	0x0800977f
 80095ac:	080097ab 	.word	0x080097ab
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	687a      	ldr	r2, [r7, #4]
 80095ba:	7c12      	ldrb	r2, [r2, #16]
 80095bc:	f107 0108 	add.w	r1, r7, #8
 80095c0:	4610      	mov	r0, r2
 80095c2:	4798      	blx	r3
 80095c4:	60f8      	str	r0, [r7, #12]
      break;
 80095c6:	e112      	b.n	80097ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	7c1b      	ldrb	r3, [r3, #16]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d10d      	bne.n	80095ec <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095d8:	f107 0208 	add.w	r2, r7, #8
 80095dc:	4610      	mov	r0, r2
 80095de:	4798      	blx	r3
 80095e0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	3301      	adds	r3, #1
 80095e6:	2202      	movs	r2, #2
 80095e8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80095ea:	e100      	b.n	80097ee <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095f4:	f107 0208 	add.w	r2, r7, #8
 80095f8:	4610      	mov	r0, r2
 80095fa:	4798      	blx	r3
 80095fc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	3301      	adds	r3, #1
 8009602:	2202      	movs	r2, #2
 8009604:	701a      	strb	r2, [r3, #0]
      break;
 8009606:	e0f2      	b.n	80097ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	885b      	ldrh	r3, [r3, #2]
 800960c:	b2db      	uxtb	r3, r3
 800960e:	2b05      	cmp	r3, #5
 8009610:	f200 80ac 	bhi.w	800976c <USBD_GetDescriptor+0x204>
 8009614:	a201      	add	r2, pc, #4	; (adr r2, 800961c <USBD_GetDescriptor+0xb4>)
 8009616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800961a:	bf00      	nop
 800961c:	08009635 	.word	0x08009635
 8009620:	08009669 	.word	0x08009669
 8009624:	0800969d 	.word	0x0800969d
 8009628:	080096d1 	.word	0x080096d1
 800962c:	08009705 	.word	0x08009705
 8009630:	08009739 	.word	0x08009739
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800963a:	685b      	ldr	r3, [r3, #4]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d00b      	beq.n	8009658 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009646:	685b      	ldr	r3, [r3, #4]
 8009648:	687a      	ldr	r2, [r7, #4]
 800964a:	7c12      	ldrb	r2, [r2, #16]
 800964c:	f107 0108 	add.w	r1, r7, #8
 8009650:	4610      	mov	r0, r2
 8009652:	4798      	blx	r3
 8009654:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009656:	e091      	b.n	800977c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009658:	6839      	ldr	r1, [r7, #0]
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f000 facb 	bl	8009bf6 <USBD_CtlError>
            err++;
 8009660:	7afb      	ldrb	r3, [r7, #11]
 8009662:	3301      	adds	r3, #1
 8009664:	72fb      	strb	r3, [r7, #11]
          break;
 8009666:	e089      	b.n	800977c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800966e:	689b      	ldr	r3, [r3, #8]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d00b      	beq.n	800968c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800967a:	689b      	ldr	r3, [r3, #8]
 800967c:	687a      	ldr	r2, [r7, #4]
 800967e:	7c12      	ldrb	r2, [r2, #16]
 8009680:	f107 0108 	add.w	r1, r7, #8
 8009684:	4610      	mov	r0, r2
 8009686:	4798      	blx	r3
 8009688:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800968a:	e077      	b.n	800977c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800968c:	6839      	ldr	r1, [r7, #0]
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	f000 fab1 	bl	8009bf6 <USBD_CtlError>
            err++;
 8009694:	7afb      	ldrb	r3, [r7, #11]
 8009696:	3301      	adds	r3, #1
 8009698:	72fb      	strb	r3, [r7, #11]
          break;
 800969a:	e06f      	b.n	800977c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096a2:	68db      	ldr	r3, [r3, #12]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d00b      	beq.n	80096c0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096ae:	68db      	ldr	r3, [r3, #12]
 80096b0:	687a      	ldr	r2, [r7, #4]
 80096b2:	7c12      	ldrb	r2, [r2, #16]
 80096b4:	f107 0108 	add.w	r1, r7, #8
 80096b8:	4610      	mov	r0, r2
 80096ba:	4798      	blx	r3
 80096bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096be:	e05d      	b.n	800977c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80096c0:	6839      	ldr	r1, [r7, #0]
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	f000 fa97 	bl	8009bf6 <USBD_CtlError>
            err++;
 80096c8:	7afb      	ldrb	r3, [r7, #11]
 80096ca:	3301      	adds	r3, #1
 80096cc:	72fb      	strb	r3, [r7, #11]
          break;
 80096ce:	e055      	b.n	800977c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096d6:	691b      	ldr	r3, [r3, #16]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d00b      	beq.n	80096f4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096e2:	691b      	ldr	r3, [r3, #16]
 80096e4:	687a      	ldr	r2, [r7, #4]
 80096e6:	7c12      	ldrb	r2, [r2, #16]
 80096e8:	f107 0108 	add.w	r1, r7, #8
 80096ec:	4610      	mov	r0, r2
 80096ee:	4798      	blx	r3
 80096f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096f2:	e043      	b.n	800977c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80096f4:	6839      	ldr	r1, [r7, #0]
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f000 fa7d 	bl	8009bf6 <USBD_CtlError>
            err++;
 80096fc:	7afb      	ldrb	r3, [r7, #11]
 80096fe:	3301      	adds	r3, #1
 8009700:	72fb      	strb	r3, [r7, #11]
          break;
 8009702:	e03b      	b.n	800977c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800970a:	695b      	ldr	r3, [r3, #20]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d00b      	beq.n	8009728 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009716:	695b      	ldr	r3, [r3, #20]
 8009718:	687a      	ldr	r2, [r7, #4]
 800971a:	7c12      	ldrb	r2, [r2, #16]
 800971c:	f107 0108 	add.w	r1, r7, #8
 8009720:	4610      	mov	r0, r2
 8009722:	4798      	blx	r3
 8009724:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009726:	e029      	b.n	800977c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009728:	6839      	ldr	r1, [r7, #0]
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	f000 fa63 	bl	8009bf6 <USBD_CtlError>
            err++;
 8009730:	7afb      	ldrb	r3, [r7, #11]
 8009732:	3301      	adds	r3, #1
 8009734:	72fb      	strb	r3, [r7, #11]
          break;
 8009736:	e021      	b.n	800977c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800973e:	699b      	ldr	r3, [r3, #24]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d00b      	beq.n	800975c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800974a:	699b      	ldr	r3, [r3, #24]
 800974c:	687a      	ldr	r2, [r7, #4]
 800974e:	7c12      	ldrb	r2, [r2, #16]
 8009750:	f107 0108 	add.w	r1, r7, #8
 8009754:	4610      	mov	r0, r2
 8009756:	4798      	blx	r3
 8009758:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800975a:	e00f      	b.n	800977c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800975c:	6839      	ldr	r1, [r7, #0]
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f000 fa49 	bl	8009bf6 <USBD_CtlError>
            err++;
 8009764:	7afb      	ldrb	r3, [r7, #11]
 8009766:	3301      	adds	r3, #1
 8009768:	72fb      	strb	r3, [r7, #11]
          break;
 800976a:	e007      	b.n	800977c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800976c:	6839      	ldr	r1, [r7, #0]
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f000 fa41 	bl	8009bf6 <USBD_CtlError>
          err++;
 8009774:	7afb      	ldrb	r3, [r7, #11]
 8009776:	3301      	adds	r3, #1
 8009778:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800977a:	bf00      	nop
      }
      break;
 800977c:	e037      	b.n	80097ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	7c1b      	ldrb	r3, [r3, #16]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d109      	bne.n	800979a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800978c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800978e:	f107 0208 	add.w	r2, r7, #8
 8009792:	4610      	mov	r0, r2
 8009794:	4798      	blx	r3
 8009796:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009798:	e029      	b.n	80097ee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800979a:	6839      	ldr	r1, [r7, #0]
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f000 fa2a 	bl	8009bf6 <USBD_CtlError>
        err++;
 80097a2:	7afb      	ldrb	r3, [r7, #11]
 80097a4:	3301      	adds	r3, #1
 80097a6:	72fb      	strb	r3, [r7, #11]
      break;
 80097a8:	e021      	b.n	80097ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	7c1b      	ldrb	r3, [r3, #16]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d10d      	bne.n	80097ce <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097ba:	f107 0208 	add.w	r2, r7, #8
 80097be:	4610      	mov	r0, r2
 80097c0:	4798      	blx	r3
 80097c2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	3301      	adds	r3, #1
 80097c8:	2207      	movs	r2, #7
 80097ca:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80097cc:	e00f      	b.n	80097ee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80097ce:	6839      	ldr	r1, [r7, #0]
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f000 fa10 	bl	8009bf6 <USBD_CtlError>
        err++;
 80097d6:	7afb      	ldrb	r3, [r7, #11]
 80097d8:	3301      	adds	r3, #1
 80097da:	72fb      	strb	r3, [r7, #11]
      break;
 80097dc:	e007      	b.n	80097ee <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80097de:	6839      	ldr	r1, [r7, #0]
 80097e0:	6878      	ldr	r0, [r7, #4]
 80097e2:	f000 fa08 	bl	8009bf6 <USBD_CtlError>
      err++;
 80097e6:	7afb      	ldrb	r3, [r7, #11]
 80097e8:	3301      	adds	r3, #1
 80097ea:	72fb      	strb	r3, [r7, #11]
      break;
 80097ec:	bf00      	nop
  }

  if (err != 0U)
 80097ee:	7afb      	ldrb	r3, [r7, #11]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d11e      	bne.n	8009832 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	88db      	ldrh	r3, [r3, #6]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d016      	beq.n	800982a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80097fc:	893b      	ldrh	r3, [r7, #8]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d00e      	beq.n	8009820 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	88da      	ldrh	r2, [r3, #6]
 8009806:	893b      	ldrh	r3, [r7, #8]
 8009808:	4293      	cmp	r3, r2
 800980a:	bf28      	it	cs
 800980c:	4613      	movcs	r3, r2
 800980e:	b29b      	uxth	r3, r3
 8009810:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009812:	893b      	ldrh	r3, [r7, #8]
 8009814:	461a      	mov	r2, r3
 8009816:	68f9      	ldr	r1, [r7, #12]
 8009818:	6878      	ldr	r0, [r7, #4]
 800981a:	f000 fa5d 	bl	8009cd8 <USBD_CtlSendData>
 800981e:	e009      	b.n	8009834 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009820:	6839      	ldr	r1, [r7, #0]
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	f000 f9e7 	bl	8009bf6 <USBD_CtlError>
 8009828:	e004      	b.n	8009834 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f000 faae 	bl	8009d8c <USBD_CtlSendStatus>
 8009830:	e000      	b.n	8009834 <USBD_GetDescriptor+0x2cc>
    return;
 8009832:	bf00      	nop
  }
}
 8009834:	3710      	adds	r7, #16
 8009836:	46bd      	mov	sp, r7
 8009838:	bd80      	pop	{r7, pc}
 800983a:	bf00      	nop

0800983c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b084      	sub	sp, #16
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
 8009844:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	889b      	ldrh	r3, [r3, #4]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d131      	bne.n	80098b2 <USBD_SetAddress+0x76>
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	88db      	ldrh	r3, [r3, #6]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d12d      	bne.n	80098b2 <USBD_SetAddress+0x76>
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	885b      	ldrh	r3, [r3, #2]
 800985a:	2b7f      	cmp	r3, #127	; 0x7f
 800985c:	d829      	bhi.n	80098b2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	885b      	ldrh	r3, [r3, #2]
 8009862:	b2db      	uxtb	r3, r3
 8009864:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009868:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009870:	b2db      	uxtb	r3, r3
 8009872:	2b03      	cmp	r3, #3
 8009874:	d104      	bne.n	8009880 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009876:	6839      	ldr	r1, [r7, #0]
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	f000 f9bc 	bl	8009bf6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800987e:	e01d      	b.n	80098bc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	7bfa      	ldrb	r2, [r7, #15]
 8009884:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009888:	7bfb      	ldrb	r3, [r7, #15]
 800988a:	4619      	mov	r1, r3
 800988c:	6878      	ldr	r0, [r7, #4]
 800988e:	f002 f9e3 	bl	800bc58 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f000 fa7a 	bl	8009d8c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009898:	7bfb      	ldrb	r3, [r7, #15]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d004      	beq.n	80098a8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2202      	movs	r2, #2
 80098a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098a6:	e009      	b.n	80098bc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2201      	movs	r2, #1
 80098ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098b0:	e004      	b.n	80098bc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80098b2:	6839      	ldr	r1, [r7, #0]
 80098b4:	6878      	ldr	r0, [r7, #4]
 80098b6:	f000 f99e 	bl	8009bf6 <USBD_CtlError>
  }
}
 80098ba:	bf00      	nop
 80098bc:	bf00      	nop
 80098be:	3710      	adds	r7, #16
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}

080098c4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b084      	sub	sp, #16
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
 80098cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80098ce:	2300      	movs	r3, #0
 80098d0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	885b      	ldrh	r3, [r3, #2]
 80098d6:	b2da      	uxtb	r2, r3
 80098d8:	4b4e      	ldr	r3, [pc, #312]	; (8009a14 <USBD_SetConfig+0x150>)
 80098da:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80098dc:	4b4d      	ldr	r3, [pc, #308]	; (8009a14 <USBD_SetConfig+0x150>)
 80098de:	781b      	ldrb	r3, [r3, #0]
 80098e0:	2b01      	cmp	r3, #1
 80098e2:	d905      	bls.n	80098f0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80098e4:	6839      	ldr	r1, [r7, #0]
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f000 f985 	bl	8009bf6 <USBD_CtlError>
    return USBD_FAIL;
 80098ec:	2303      	movs	r3, #3
 80098ee:	e08c      	b.n	8009a0a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098f6:	b2db      	uxtb	r3, r3
 80098f8:	2b02      	cmp	r3, #2
 80098fa:	d002      	beq.n	8009902 <USBD_SetConfig+0x3e>
 80098fc:	2b03      	cmp	r3, #3
 80098fe:	d029      	beq.n	8009954 <USBD_SetConfig+0x90>
 8009900:	e075      	b.n	80099ee <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009902:	4b44      	ldr	r3, [pc, #272]	; (8009a14 <USBD_SetConfig+0x150>)
 8009904:	781b      	ldrb	r3, [r3, #0]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d020      	beq.n	800994c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800990a:	4b42      	ldr	r3, [pc, #264]	; (8009a14 <USBD_SetConfig+0x150>)
 800990c:	781b      	ldrb	r3, [r3, #0]
 800990e:	461a      	mov	r2, r3
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009914:	4b3f      	ldr	r3, [pc, #252]	; (8009a14 <USBD_SetConfig+0x150>)
 8009916:	781b      	ldrb	r3, [r3, #0]
 8009918:	4619      	mov	r1, r3
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	f7fe ffe1 	bl	80088e2 <USBD_SetClassConfig>
 8009920:	4603      	mov	r3, r0
 8009922:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009924:	7bfb      	ldrb	r3, [r7, #15]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d008      	beq.n	800993c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800992a:	6839      	ldr	r1, [r7, #0]
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f000 f962 	bl	8009bf6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	2202      	movs	r2, #2
 8009936:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800993a:	e065      	b.n	8009a08 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f000 fa25 	bl	8009d8c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2203      	movs	r2, #3
 8009946:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800994a:	e05d      	b.n	8009a08 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f000 fa1d 	bl	8009d8c <USBD_CtlSendStatus>
      break;
 8009952:	e059      	b.n	8009a08 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009954:	4b2f      	ldr	r3, [pc, #188]	; (8009a14 <USBD_SetConfig+0x150>)
 8009956:	781b      	ldrb	r3, [r3, #0]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d112      	bne.n	8009982 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2202      	movs	r2, #2
 8009960:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009964:	4b2b      	ldr	r3, [pc, #172]	; (8009a14 <USBD_SetConfig+0x150>)
 8009966:	781b      	ldrb	r3, [r3, #0]
 8009968:	461a      	mov	r2, r3
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800996e:	4b29      	ldr	r3, [pc, #164]	; (8009a14 <USBD_SetConfig+0x150>)
 8009970:	781b      	ldrb	r3, [r3, #0]
 8009972:	4619      	mov	r1, r3
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	f7fe ffd0 	bl	800891a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f000 fa06 	bl	8009d8c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009980:	e042      	b.n	8009a08 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009982:	4b24      	ldr	r3, [pc, #144]	; (8009a14 <USBD_SetConfig+0x150>)
 8009984:	781b      	ldrb	r3, [r3, #0]
 8009986:	461a      	mov	r2, r3
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	685b      	ldr	r3, [r3, #4]
 800998c:	429a      	cmp	r2, r3
 800998e:	d02a      	beq.n	80099e6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	685b      	ldr	r3, [r3, #4]
 8009994:	b2db      	uxtb	r3, r3
 8009996:	4619      	mov	r1, r3
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f7fe ffbe 	bl	800891a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800999e:	4b1d      	ldr	r3, [pc, #116]	; (8009a14 <USBD_SetConfig+0x150>)
 80099a0:	781b      	ldrb	r3, [r3, #0]
 80099a2:	461a      	mov	r2, r3
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80099a8:	4b1a      	ldr	r3, [pc, #104]	; (8009a14 <USBD_SetConfig+0x150>)
 80099aa:	781b      	ldrb	r3, [r3, #0]
 80099ac:	4619      	mov	r1, r3
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f7fe ff97 	bl	80088e2 <USBD_SetClassConfig>
 80099b4:	4603      	mov	r3, r0
 80099b6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80099b8:	7bfb      	ldrb	r3, [r7, #15]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d00f      	beq.n	80099de <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80099be:	6839      	ldr	r1, [r7, #0]
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f000 f918 	bl	8009bf6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	685b      	ldr	r3, [r3, #4]
 80099ca:	b2db      	uxtb	r3, r3
 80099cc:	4619      	mov	r1, r3
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f7fe ffa3 	bl	800891a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2202      	movs	r2, #2
 80099d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80099dc:	e014      	b.n	8009a08 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f000 f9d4 	bl	8009d8c <USBD_CtlSendStatus>
      break;
 80099e4:	e010      	b.n	8009a08 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	f000 f9d0 	bl	8009d8c <USBD_CtlSendStatus>
      break;
 80099ec:	e00c      	b.n	8009a08 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80099ee:	6839      	ldr	r1, [r7, #0]
 80099f0:	6878      	ldr	r0, [r7, #4]
 80099f2:	f000 f900 	bl	8009bf6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80099f6:	4b07      	ldr	r3, [pc, #28]	; (8009a14 <USBD_SetConfig+0x150>)
 80099f8:	781b      	ldrb	r3, [r3, #0]
 80099fa:	4619      	mov	r1, r3
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	f7fe ff8c 	bl	800891a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009a02:	2303      	movs	r3, #3
 8009a04:	73fb      	strb	r3, [r7, #15]
      break;
 8009a06:	bf00      	nop
  }

  return ret;
 8009a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	3710      	adds	r7, #16
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}
 8009a12:	bf00      	nop
 8009a14:	200004d8 	.word	0x200004d8

08009a18 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b082      	sub	sp, #8
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
 8009a20:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	88db      	ldrh	r3, [r3, #6]
 8009a26:	2b01      	cmp	r3, #1
 8009a28:	d004      	beq.n	8009a34 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009a2a:	6839      	ldr	r1, [r7, #0]
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f000 f8e2 	bl	8009bf6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009a32:	e023      	b.n	8009a7c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a3a:	b2db      	uxtb	r3, r3
 8009a3c:	2b02      	cmp	r3, #2
 8009a3e:	dc02      	bgt.n	8009a46 <USBD_GetConfig+0x2e>
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	dc03      	bgt.n	8009a4c <USBD_GetConfig+0x34>
 8009a44:	e015      	b.n	8009a72 <USBD_GetConfig+0x5a>
 8009a46:	2b03      	cmp	r3, #3
 8009a48:	d00b      	beq.n	8009a62 <USBD_GetConfig+0x4a>
 8009a4a:	e012      	b.n	8009a72 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2200      	movs	r2, #0
 8009a50:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	3308      	adds	r3, #8
 8009a56:	2201      	movs	r2, #1
 8009a58:	4619      	mov	r1, r3
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	f000 f93c 	bl	8009cd8 <USBD_CtlSendData>
        break;
 8009a60:	e00c      	b.n	8009a7c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	3304      	adds	r3, #4
 8009a66:	2201      	movs	r2, #1
 8009a68:	4619      	mov	r1, r3
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f000 f934 	bl	8009cd8 <USBD_CtlSendData>
        break;
 8009a70:	e004      	b.n	8009a7c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009a72:	6839      	ldr	r1, [r7, #0]
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	f000 f8be 	bl	8009bf6 <USBD_CtlError>
        break;
 8009a7a:	bf00      	nop
}
 8009a7c:	bf00      	nop
 8009a7e:	3708      	adds	r7, #8
 8009a80:	46bd      	mov	sp, r7
 8009a82:	bd80      	pop	{r7, pc}

08009a84 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b082      	sub	sp, #8
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
 8009a8c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a94:	b2db      	uxtb	r3, r3
 8009a96:	3b01      	subs	r3, #1
 8009a98:	2b02      	cmp	r3, #2
 8009a9a:	d81e      	bhi.n	8009ada <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	88db      	ldrh	r3, [r3, #6]
 8009aa0:	2b02      	cmp	r3, #2
 8009aa2:	d004      	beq.n	8009aae <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009aa4:	6839      	ldr	r1, [r7, #0]
 8009aa6:	6878      	ldr	r0, [r7, #4]
 8009aa8:	f000 f8a5 	bl	8009bf6 <USBD_CtlError>
        break;
 8009aac:	e01a      	b.n	8009ae4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2201      	movs	r2, #1
 8009ab2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d005      	beq.n	8009aca <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	68db      	ldr	r3, [r3, #12]
 8009ac2:	f043 0202 	orr.w	r2, r3, #2
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	330c      	adds	r3, #12
 8009ace:	2202      	movs	r2, #2
 8009ad0:	4619      	mov	r1, r3
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	f000 f900 	bl	8009cd8 <USBD_CtlSendData>
      break;
 8009ad8:	e004      	b.n	8009ae4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009ada:	6839      	ldr	r1, [r7, #0]
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	f000 f88a 	bl	8009bf6 <USBD_CtlError>
      break;
 8009ae2:	bf00      	nop
  }
}
 8009ae4:	bf00      	nop
 8009ae6:	3708      	adds	r7, #8
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}

08009aec <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b082      	sub	sp, #8
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
 8009af4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	885b      	ldrh	r3, [r3, #2]
 8009afa:	2b01      	cmp	r3, #1
 8009afc:	d107      	bne.n	8009b0e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2201      	movs	r2, #1
 8009b02:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	f000 f940 	bl	8009d8c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009b0c:	e013      	b.n	8009b36 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	885b      	ldrh	r3, [r3, #2]
 8009b12:	2b02      	cmp	r3, #2
 8009b14:	d10b      	bne.n	8009b2e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	889b      	ldrh	r3, [r3, #4]
 8009b1a:	0a1b      	lsrs	r3, r3, #8
 8009b1c:	b29b      	uxth	r3, r3
 8009b1e:	b2da      	uxtb	r2, r3
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f000 f930 	bl	8009d8c <USBD_CtlSendStatus>
}
 8009b2c:	e003      	b.n	8009b36 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009b2e:	6839      	ldr	r1, [r7, #0]
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	f000 f860 	bl	8009bf6 <USBD_CtlError>
}
 8009b36:	bf00      	nop
 8009b38:	3708      	adds	r7, #8
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}

08009b3e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b3e:	b580      	push	{r7, lr}
 8009b40:	b082      	sub	sp, #8
 8009b42:	af00      	add	r7, sp, #0
 8009b44:	6078      	str	r0, [r7, #4]
 8009b46:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b4e:	b2db      	uxtb	r3, r3
 8009b50:	3b01      	subs	r3, #1
 8009b52:	2b02      	cmp	r3, #2
 8009b54:	d80b      	bhi.n	8009b6e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	885b      	ldrh	r3, [r3, #2]
 8009b5a:	2b01      	cmp	r3, #1
 8009b5c:	d10c      	bne.n	8009b78 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2200      	movs	r2, #0
 8009b62:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	f000 f910 	bl	8009d8c <USBD_CtlSendStatus>
      }
      break;
 8009b6c:	e004      	b.n	8009b78 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009b6e:	6839      	ldr	r1, [r7, #0]
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f000 f840 	bl	8009bf6 <USBD_CtlError>
      break;
 8009b76:	e000      	b.n	8009b7a <USBD_ClrFeature+0x3c>
      break;
 8009b78:	bf00      	nop
  }
}
 8009b7a:	bf00      	nop
 8009b7c:	3708      	adds	r7, #8
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}

08009b82 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009b82:	b580      	push	{r7, lr}
 8009b84:	b084      	sub	sp, #16
 8009b86:	af00      	add	r7, sp, #0
 8009b88:	6078      	str	r0, [r7, #4]
 8009b8a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	781a      	ldrb	r2, [r3, #0]
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	3301      	adds	r3, #1
 8009b9c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	781a      	ldrb	r2, [r3, #0]
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	3301      	adds	r3, #1
 8009baa:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009bac:	68f8      	ldr	r0, [r7, #12]
 8009bae:	f7ff fa41 	bl	8009034 <SWAPBYTE>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	461a      	mov	r2, r3
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	3301      	adds	r3, #1
 8009bbe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	3301      	adds	r3, #1
 8009bc4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009bc6:	68f8      	ldr	r0, [r7, #12]
 8009bc8:	f7ff fa34 	bl	8009034 <SWAPBYTE>
 8009bcc:	4603      	mov	r3, r0
 8009bce:	461a      	mov	r2, r3
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	3301      	adds	r3, #1
 8009bd8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	3301      	adds	r3, #1
 8009bde:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009be0:	68f8      	ldr	r0, [r7, #12]
 8009be2:	f7ff fa27 	bl	8009034 <SWAPBYTE>
 8009be6:	4603      	mov	r3, r0
 8009be8:	461a      	mov	r2, r3
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	80da      	strh	r2, [r3, #6]
}
 8009bee:	bf00      	nop
 8009bf0:	3710      	adds	r7, #16
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bd80      	pop	{r7, pc}

08009bf6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bf6:	b580      	push	{r7, lr}
 8009bf8:	b082      	sub	sp, #8
 8009bfa:	af00      	add	r7, sp, #0
 8009bfc:	6078      	str	r0, [r7, #4]
 8009bfe:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009c00:	2180      	movs	r1, #128	; 0x80
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f001 ffbe 	bl	800bb84 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009c08:	2100      	movs	r1, #0
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f001 ffba 	bl	800bb84 <USBD_LL_StallEP>
}
 8009c10:	bf00      	nop
 8009c12:	3708      	adds	r7, #8
 8009c14:	46bd      	mov	sp, r7
 8009c16:	bd80      	pop	{r7, pc}

08009c18 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b086      	sub	sp, #24
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	60f8      	str	r0, [r7, #12]
 8009c20:	60b9      	str	r1, [r7, #8]
 8009c22:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009c24:	2300      	movs	r3, #0
 8009c26:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d036      	beq.n	8009c9c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009c32:	6938      	ldr	r0, [r7, #16]
 8009c34:	f000 f836 	bl	8009ca4 <USBD_GetLen>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	3301      	adds	r3, #1
 8009c3c:	b29b      	uxth	r3, r3
 8009c3e:	005b      	lsls	r3, r3, #1
 8009c40:	b29a      	uxth	r2, r3
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009c46:	7dfb      	ldrb	r3, [r7, #23]
 8009c48:	68ba      	ldr	r2, [r7, #8]
 8009c4a:	4413      	add	r3, r2
 8009c4c:	687a      	ldr	r2, [r7, #4]
 8009c4e:	7812      	ldrb	r2, [r2, #0]
 8009c50:	701a      	strb	r2, [r3, #0]
  idx++;
 8009c52:	7dfb      	ldrb	r3, [r7, #23]
 8009c54:	3301      	adds	r3, #1
 8009c56:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009c58:	7dfb      	ldrb	r3, [r7, #23]
 8009c5a:	68ba      	ldr	r2, [r7, #8]
 8009c5c:	4413      	add	r3, r2
 8009c5e:	2203      	movs	r2, #3
 8009c60:	701a      	strb	r2, [r3, #0]
  idx++;
 8009c62:	7dfb      	ldrb	r3, [r7, #23]
 8009c64:	3301      	adds	r3, #1
 8009c66:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009c68:	e013      	b.n	8009c92 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009c6a:	7dfb      	ldrb	r3, [r7, #23]
 8009c6c:	68ba      	ldr	r2, [r7, #8]
 8009c6e:	4413      	add	r3, r2
 8009c70:	693a      	ldr	r2, [r7, #16]
 8009c72:	7812      	ldrb	r2, [r2, #0]
 8009c74:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009c76:	693b      	ldr	r3, [r7, #16]
 8009c78:	3301      	adds	r3, #1
 8009c7a:	613b      	str	r3, [r7, #16]
    idx++;
 8009c7c:	7dfb      	ldrb	r3, [r7, #23]
 8009c7e:	3301      	adds	r3, #1
 8009c80:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009c82:	7dfb      	ldrb	r3, [r7, #23]
 8009c84:	68ba      	ldr	r2, [r7, #8]
 8009c86:	4413      	add	r3, r2
 8009c88:	2200      	movs	r2, #0
 8009c8a:	701a      	strb	r2, [r3, #0]
    idx++;
 8009c8c:	7dfb      	ldrb	r3, [r7, #23]
 8009c8e:	3301      	adds	r3, #1
 8009c90:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009c92:	693b      	ldr	r3, [r7, #16]
 8009c94:	781b      	ldrb	r3, [r3, #0]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d1e7      	bne.n	8009c6a <USBD_GetString+0x52>
 8009c9a:	e000      	b.n	8009c9e <USBD_GetString+0x86>
    return;
 8009c9c:	bf00      	nop
  }
}
 8009c9e:	3718      	adds	r7, #24
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd80      	pop	{r7, pc}

08009ca4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009ca4:	b480      	push	{r7}
 8009ca6:	b085      	sub	sp, #20
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009cac:	2300      	movs	r3, #0
 8009cae:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009cb4:	e005      	b.n	8009cc2 <USBD_GetLen+0x1e>
  {
    len++;
 8009cb6:	7bfb      	ldrb	r3, [r7, #15]
 8009cb8:	3301      	adds	r3, #1
 8009cba:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	3301      	adds	r3, #1
 8009cc0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009cc2:	68bb      	ldr	r3, [r7, #8]
 8009cc4:	781b      	ldrb	r3, [r3, #0]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d1f5      	bne.n	8009cb6 <USBD_GetLen+0x12>
  }

  return len;
 8009cca:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ccc:	4618      	mov	r0, r3
 8009cce:	3714      	adds	r7, #20
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd6:	4770      	bx	lr

08009cd8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b084      	sub	sp, #16
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	60f8      	str	r0, [r7, #12]
 8009ce0:	60b9      	str	r1, [r7, #8]
 8009ce2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	2202      	movs	r2, #2
 8009ce8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	687a      	ldr	r2, [r7, #4]
 8009cf0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	687a      	ldr	r2, [r7, #4]
 8009cf6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	68ba      	ldr	r2, [r7, #8]
 8009cfc:	2100      	movs	r1, #0
 8009cfe:	68f8      	ldr	r0, [r7, #12]
 8009d00:	f001 ffc9 	bl	800bc96 <USBD_LL_Transmit>

  return USBD_OK;
 8009d04:	2300      	movs	r3, #0
}
 8009d06:	4618      	mov	r0, r3
 8009d08:	3710      	adds	r7, #16
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}

08009d0e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009d0e:	b580      	push	{r7, lr}
 8009d10:	b084      	sub	sp, #16
 8009d12:	af00      	add	r7, sp, #0
 8009d14:	60f8      	str	r0, [r7, #12]
 8009d16:	60b9      	str	r1, [r7, #8]
 8009d18:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	68ba      	ldr	r2, [r7, #8]
 8009d1e:	2100      	movs	r1, #0
 8009d20:	68f8      	ldr	r0, [r7, #12]
 8009d22:	f001 ffb8 	bl	800bc96 <USBD_LL_Transmit>

  return USBD_OK;
 8009d26:	2300      	movs	r3, #0
}
 8009d28:	4618      	mov	r0, r3
 8009d2a:	3710      	adds	r7, #16
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bd80      	pop	{r7, pc}

08009d30 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b084      	sub	sp, #16
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	60f8      	str	r0, [r7, #12]
 8009d38:	60b9      	str	r1, [r7, #8]
 8009d3a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	2203      	movs	r2, #3
 8009d40:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	687a      	ldr	r2, [r7, #4]
 8009d48:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	687a      	ldr	r2, [r7, #4]
 8009d50:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	68ba      	ldr	r2, [r7, #8]
 8009d58:	2100      	movs	r1, #0
 8009d5a:	68f8      	ldr	r0, [r7, #12]
 8009d5c:	f001 ffbc 	bl	800bcd8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009d60:	2300      	movs	r3, #0
}
 8009d62:	4618      	mov	r0, r3
 8009d64:	3710      	adds	r7, #16
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bd80      	pop	{r7, pc}

08009d6a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009d6a:	b580      	push	{r7, lr}
 8009d6c:	b084      	sub	sp, #16
 8009d6e:	af00      	add	r7, sp, #0
 8009d70:	60f8      	str	r0, [r7, #12]
 8009d72:	60b9      	str	r1, [r7, #8]
 8009d74:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	68ba      	ldr	r2, [r7, #8]
 8009d7a:	2100      	movs	r1, #0
 8009d7c:	68f8      	ldr	r0, [r7, #12]
 8009d7e:	f001 ffab 	bl	800bcd8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009d82:	2300      	movs	r3, #0
}
 8009d84:	4618      	mov	r0, r3
 8009d86:	3710      	adds	r7, #16
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bd80      	pop	{r7, pc}

08009d8c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b082      	sub	sp, #8
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2204      	movs	r2, #4
 8009d98:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	2200      	movs	r2, #0
 8009da0:	2100      	movs	r1, #0
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	f001 ff77 	bl	800bc96 <USBD_LL_Transmit>

  return USBD_OK;
 8009da8:	2300      	movs	r3, #0
}
 8009daa:	4618      	mov	r0, r3
 8009dac:	3708      	adds	r7, #8
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd80      	pop	{r7, pc}

08009db2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009db2:	b580      	push	{r7, lr}
 8009db4:	b082      	sub	sp, #8
 8009db6:	af00      	add	r7, sp, #0
 8009db8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2205      	movs	r2, #5
 8009dbe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	2100      	movs	r1, #0
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	f001 ff85 	bl	800bcd8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009dce:	2300      	movs	r3, #0
}
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	3708      	adds	r7, #8
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	bd80      	pop	{r7, pc}

08009dd8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009dd8:	b480      	push	{r7}
 8009dda:	b085      	sub	sp, #20
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	4603      	mov	r3, r0
 8009de0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009de2:	2300      	movs	r3, #0
 8009de4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009de6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009dea:	2b84      	cmp	r3, #132	; 0x84
 8009dec:	d005      	beq.n	8009dfa <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009dee:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	4413      	add	r3, r2
 8009df6:	3303      	adds	r3, #3
 8009df8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
}
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	3714      	adds	r7, #20
 8009e00:	46bd      	mov	sp, r7
 8009e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e06:	4770      	bx	lr

08009e08 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8009e08:	b480      	push	{r7}
 8009e0a:	b083      	sub	sp, #12
 8009e0c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e0e:	f3ef 8305 	mrs	r3, IPSR
 8009e12:	607b      	str	r3, [r7, #4]
  return(result);
 8009e14:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	bf14      	ite	ne
 8009e1a:	2301      	movne	r3, #1
 8009e1c:	2300      	moveq	r3, #0
 8009e1e:	b2db      	uxtb	r3, r3
}
 8009e20:	4618      	mov	r0, r3
 8009e22:	370c      	adds	r7, #12
 8009e24:	46bd      	mov	sp, r7
 8009e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2a:	4770      	bx	lr

08009e2c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009e30:	f000 fb1c 	bl	800a46c <vTaskStartScheduler>
  
  return osOK;
 8009e34:	2300      	movs	r3, #0
}
 8009e36:	4618      	mov	r0, r3
 8009e38:	bd80      	pop	{r7, pc}

08009e3a <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8009e3a:	b580      	push	{r7, lr}
 8009e3c:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8009e3e:	f7ff ffe3 	bl	8009e08 <inHandlerMode>
 8009e42:	4603      	mov	r3, r0
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d003      	beq.n	8009e50 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8009e48:	f000 fc1a 	bl	800a680 <xTaskGetTickCountFromISR>
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	e002      	b.n	8009e56 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8009e50:	f000 fc06 	bl	800a660 <xTaskGetTickCount>
 8009e54:	4603      	mov	r3, r0
  }
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	bd80      	pop	{r7, pc}

08009e5a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009e5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e5c:	b087      	sub	sp, #28
 8009e5e:	af02      	add	r7, sp, #8
 8009e60:	6078      	str	r0, [r7, #4]
 8009e62:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	685c      	ldr	r4, [r3, #4]
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009e70:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009e78:	4618      	mov	r0, r3
 8009e7a:	f7ff ffad 	bl	8009dd8 <makeFreeRtosPriority>
 8009e7e:	4602      	mov	r2, r0
 8009e80:	f107 030c 	add.w	r3, r7, #12
 8009e84:	9301      	str	r3, [sp, #4]
 8009e86:	9200      	str	r2, [sp, #0]
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	4632      	mov	r2, r6
 8009e8c:	4629      	mov	r1, r5
 8009e8e:	4620      	mov	r0, r4
 8009e90:	f000 f8e8 	bl	800a064 <xTaskCreate>
 8009e94:	4603      	mov	r3, r0
 8009e96:	2b01      	cmp	r3, #1
 8009e98:	d001      	beq.n	8009e9e <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	e000      	b.n	8009ea0 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	3714      	adds	r7, #20
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009ea8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b084      	sub	sp, #16
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d001      	beq.n	8009ebe <osDelay+0x16>
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	e000      	b.n	8009ec0 <osDelay+0x18>
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	f000 fa9f 	bl	800a404 <vTaskDelay>
  
  return osOK;
 8009ec6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009ec8:	4618      	mov	r0, r3
 8009eca:	3710      	adds	r7, #16
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bd80      	pop	{r7, pc}

08009ed0 <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b084      	sub	sp, #16
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
 8009ed8:	6039      	str	r1, [r7, #0]
#if INCLUDE_vTaskDelayUntil
  TickType_t ticks = (millisec / portTICK_PERIOD_MS);
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	60fb      	str	r3, [r7, #12]
  vTaskDelayUntil((TickType_t *) PreviousWakeTime, ticks ? ticks : 1);
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d001      	beq.n	8009ee8 <osDelayUntil+0x18>
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	e000      	b.n	8009eea <osDelayUntil+0x1a>
 8009ee8:	2301      	movs	r3, #1
 8009eea:	4619      	mov	r1, r3
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	f000 fa0b 	bl	800a308 <vTaskDelayUntil>
  
  return osOK;
 8009ef2:	2300      	movs	r3, #0
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
#endif
}
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	3710      	adds	r7, #16
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bd80      	pop	{r7, pc}

08009efc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009efc:	b480      	push	{r7}
 8009efe:	b083      	sub	sp, #12
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f103 0208 	add.w	r2, r3, #8
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009f14:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	f103 0208 	add.w	r2, r3, #8
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f103 0208 	add.w	r2, r3, #8
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009f30:	bf00      	nop
 8009f32:	370c      	adds	r7, #12
 8009f34:	46bd      	mov	sp, r7
 8009f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3a:	4770      	bx	lr

08009f3c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009f3c:	b480      	push	{r7}
 8009f3e:	b083      	sub	sp, #12
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2200      	movs	r2, #0
 8009f48:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009f4a:	bf00      	nop
 8009f4c:	370c      	adds	r7, #12
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f54:	4770      	bx	lr

08009f56 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009f56:	b480      	push	{r7}
 8009f58:	b085      	sub	sp, #20
 8009f5a:	af00      	add	r7, sp, #0
 8009f5c:	6078      	str	r0, [r7, #4]
 8009f5e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	685b      	ldr	r3, [r3, #4]
 8009f64:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	68fa      	ldr	r2, [r7, #12]
 8009f6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	689a      	ldr	r2, [r3, #8]
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	689b      	ldr	r3, [r3, #8]
 8009f78:	683a      	ldr	r2, [r7, #0]
 8009f7a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	683a      	ldr	r2, [r7, #0]
 8009f80:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	687a      	ldr	r2, [r7, #4]
 8009f86:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	1c5a      	adds	r2, r3, #1
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	601a      	str	r2, [r3, #0]
}
 8009f92:	bf00      	nop
 8009f94:	3714      	adds	r7, #20
 8009f96:	46bd      	mov	sp, r7
 8009f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9c:	4770      	bx	lr

08009f9e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009f9e:	b480      	push	{r7}
 8009fa0:	b085      	sub	sp, #20
 8009fa2:	af00      	add	r7, sp, #0
 8009fa4:	6078      	str	r0, [r7, #4]
 8009fa6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009fb4:	d103      	bne.n	8009fbe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	691b      	ldr	r3, [r3, #16]
 8009fba:	60fb      	str	r3, [r7, #12]
 8009fbc:	e00c      	b.n	8009fd8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	3308      	adds	r3, #8
 8009fc2:	60fb      	str	r3, [r7, #12]
 8009fc4:	e002      	b.n	8009fcc <vListInsert+0x2e>
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	685b      	ldr	r3, [r3, #4]
 8009fca:	60fb      	str	r3, [r7, #12]
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	685b      	ldr	r3, [r3, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	68ba      	ldr	r2, [r7, #8]
 8009fd4:	429a      	cmp	r2, r3
 8009fd6:	d2f6      	bcs.n	8009fc6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	685a      	ldr	r2, [r3, #4]
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	685b      	ldr	r3, [r3, #4]
 8009fe4:	683a      	ldr	r2, [r7, #0]
 8009fe6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	68fa      	ldr	r2, [r7, #12]
 8009fec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	683a      	ldr	r2, [r7, #0]
 8009ff2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	687a      	ldr	r2, [r7, #4]
 8009ff8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	1c5a      	adds	r2, r3, #1
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	601a      	str	r2, [r3, #0]
}
 800a004:	bf00      	nop
 800a006:	3714      	adds	r7, #20
 800a008:	46bd      	mov	sp, r7
 800a00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00e:	4770      	bx	lr

0800a010 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a010:	b480      	push	{r7}
 800a012:	b085      	sub	sp, #20
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	691b      	ldr	r3, [r3, #16]
 800a01c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	685b      	ldr	r3, [r3, #4]
 800a022:	687a      	ldr	r2, [r7, #4]
 800a024:	6892      	ldr	r2, [r2, #8]
 800a026:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	689b      	ldr	r3, [r3, #8]
 800a02c:	687a      	ldr	r2, [r7, #4]
 800a02e:	6852      	ldr	r2, [r2, #4]
 800a030:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	685b      	ldr	r3, [r3, #4]
 800a036:	687a      	ldr	r2, [r7, #4]
 800a038:	429a      	cmp	r2, r3
 800a03a:	d103      	bne.n	800a044 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	689a      	ldr	r2, [r3, #8]
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2200      	movs	r2, #0
 800a048:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	1e5a      	subs	r2, r3, #1
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	681b      	ldr	r3, [r3, #0]
}
 800a058:	4618      	mov	r0, r3
 800a05a:	3714      	adds	r7, #20
 800a05c:	46bd      	mov	sp, r7
 800a05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a062:	4770      	bx	lr

0800a064 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a064:	b580      	push	{r7, lr}
 800a066:	b08c      	sub	sp, #48	; 0x30
 800a068:	af04      	add	r7, sp, #16
 800a06a:	60f8      	str	r0, [r7, #12]
 800a06c:	60b9      	str	r1, [r7, #8]
 800a06e:	603b      	str	r3, [r7, #0]
 800a070:	4613      	mov	r3, r2
 800a072:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a074:	88fb      	ldrh	r3, [r7, #6]
 800a076:	009b      	lsls	r3, r3, #2
 800a078:	4618      	mov	r0, r3
 800a07a:	f000 ffc5 	bl	800b008 <pvPortMalloc>
 800a07e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a080:	697b      	ldr	r3, [r7, #20]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d00e      	beq.n	800a0a4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a086:	20a0      	movs	r0, #160	; 0xa0
 800a088:	f000 ffbe 	bl	800b008 <pvPortMalloc>
 800a08c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a08e:	69fb      	ldr	r3, [r7, #28]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d003      	beq.n	800a09c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a094:	69fb      	ldr	r3, [r7, #28]
 800a096:	697a      	ldr	r2, [r7, #20]
 800a098:	631a      	str	r2, [r3, #48]	; 0x30
 800a09a:	e005      	b.n	800a0a8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a09c:	6978      	ldr	r0, [r7, #20]
 800a09e:	f001 f883 	bl	800b1a8 <vPortFree>
 800a0a2:	e001      	b.n	800a0a8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a0a8:	69fb      	ldr	r3, [r7, #28]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d013      	beq.n	800a0d6 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a0ae:	88fa      	ldrh	r2, [r7, #6]
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	9303      	str	r3, [sp, #12]
 800a0b4:	69fb      	ldr	r3, [r7, #28]
 800a0b6:	9302      	str	r3, [sp, #8]
 800a0b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0ba:	9301      	str	r3, [sp, #4]
 800a0bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0be:	9300      	str	r3, [sp, #0]
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	68b9      	ldr	r1, [r7, #8]
 800a0c4:	68f8      	ldr	r0, [r7, #12]
 800a0c6:	f000 f80f 	bl	800a0e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a0ca:	69f8      	ldr	r0, [r7, #28]
 800a0cc:	f000 f8b2 	bl	800a234 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a0d0:	2301      	movs	r3, #1
 800a0d2:	61bb      	str	r3, [r7, #24]
 800a0d4:	e002      	b.n	800a0dc <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a0d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a0da:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a0dc:	69bb      	ldr	r3, [r7, #24]
	}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	3720      	adds	r7, #32
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}
	...

0800a0e8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b088      	sub	sp, #32
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	60f8      	str	r0, [r7, #12]
 800a0f0:	60b9      	str	r1, [r7, #8]
 800a0f2:	607a      	str	r2, [r7, #4]
 800a0f4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a0f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0f8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	009b      	lsls	r3, r3, #2
 800a0fe:	461a      	mov	r2, r3
 800a100:	21a5      	movs	r1, #165	; 0xa5
 800a102:	f002 fbc3 	bl	800c88c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a108:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a110:	3b01      	subs	r3, #1
 800a112:	009b      	lsls	r3, r3, #2
 800a114:	4413      	add	r3, r2
 800a116:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a118:	69bb      	ldr	r3, [r7, #24]
 800a11a:	f023 0307 	bic.w	r3, r3, #7
 800a11e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a120:	69bb      	ldr	r3, [r7, #24]
 800a122:	f003 0307 	and.w	r3, r3, #7
 800a126:	2b00      	cmp	r3, #0
 800a128:	d00a      	beq.n	800a140 <prvInitialiseNewTask+0x58>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a12a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a12e:	f383 8811 	msr	BASEPRI, r3
 800a132:	f3bf 8f6f 	isb	sy
 800a136:	f3bf 8f4f 	dsb	sy
 800a13a:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a13c:	bf00      	nop
 800a13e:	e7fe      	b.n	800a13e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a140:	68bb      	ldr	r3, [r7, #8]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d01f      	beq.n	800a186 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a146:	2300      	movs	r3, #0
 800a148:	61fb      	str	r3, [r7, #28]
 800a14a:	e012      	b.n	800a172 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a14c:	68ba      	ldr	r2, [r7, #8]
 800a14e:	69fb      	ldr	r3, [r7, #28]
 800a150:	4413      	add	r3, r2
 800a152:	7819      	ldrb	r1, [r3, #0]
 800a154:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a156:	69fb      	ldr	r3, [r7, #28]
 800a158:	4413      	add	r3, r2
 800a15a:	3334      	adds	r3, #52	; 0x34
 800a15c:	460a      	mov	r2, r1
 800a15e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a160:	68ba      	ldr	r2, [r7, #8]
 800a162:	69fb      	ldr	r3, [r7, #28]
 800a164:	4413      	add	r3, r2
 800a166:	781b      	ldrb	r3, [r3, #0]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d006      	beq.n	800a17a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a16c:	69fb      	ldr	r3, [r7, #28]
 800a16e:	3301      	adds	r3, #1
 800a170:	61fb      	str	r3, [r7, #28]
 800a172:	69fb      	ldr	r3, [r7, #28]
 800a174:	2b0f      	cmp	r3, #15
 800a176:	d9e9      	bls.n	800a14c <prvInitialiseNewTask+0x64>
 800a178:	e000      	b.n	800a17c <prvInitialiseNewTask+0x94>
			{
				break;
 800a17a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a17c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a17e:	2200      	movs	r2, #0
 800a180:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a184:	e003      	b.n	800a18e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a188:	2200      	movs	r2, #0
 800a18a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a18e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a190:	2b06      	cmp	r3, #6
 800a192:	d901      	bls.n	800a198 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a194:	2306      	movs	r3, #6
 800a196:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a19a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a19c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a19e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1a2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a1a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a1aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ac:	3304      	adds	r3, #4
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f7ff fec4 	bl	8009f3c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a1b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1b6:	3318      	adds	r3, #24
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	f7ff febf 	bl	8009f3c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a1be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1c2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a1c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1c6:	f1c3 0207 	rsb	r2, r3, #7
 800a1ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1cc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a1ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1d2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a1d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a1dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1de:	2200      	movs	r2, #0
 800a1e0:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a1e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1e6:	334c      	adds	r3, #76	; 0x4c
 800a1e8:	224c      	movs	r2, #76	; 0x4c
 800a1ea:	2100      	movs	r1, #0
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	f002 fb4d 	bl	800c88c <memset>
 800a1f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1f4:	4a0c      	ldr	r2, [pc, #48]	; (800a228 <prvInitialiseNewTask+0x140>)
 800a1f6:	651a      	str	r2, [r3, #80]	; 0x50
 800a1f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1fa:	4a0c      	ldr	r2, [pc, #48]	; (800a22c <prvInitialiseNewTask+0x144>)
 800a1fc:	655a      	str	r2, [r3, #84]	; 0x54
 800a1fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a200:	4a0b      	ldr	r2, [pc, #44]	; (800a230 <prvInitialiseNewTask+0x148>)
 800a202:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a204:	683a      	ldr	r2, [r7, #0]
 800a206:	68f9      	ldr	r1, [r7, #12]
 800a208:	69b8      	ldr	r0, [r7, #24]
 800a20a:	f000 fcad 	bl	800ab68 <pxPortInitialiseStack>
 800a20e:	4602      	mov	r2, r0
 800a210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a212:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a216:	2b00      	cmp	r3, #0
 800a218:	d002      	beq.n	800a220 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a21a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a21c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a21e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a220:	bf00      	nop
 800a222:	3720      	adds	r7, #32
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}
 800a228:	20012428 	.word	0x20012428
 800a22c:	20012490 	.word	0x20012490
 800a230:	200124f8 	.word	0x200124f8

0800a234 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b082      	sub	sp, #8
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a23c:	f000 fdc2 	bl	800adc4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a240:	4b2a      	ldr	r3, [pc, #168]	; (800a2ec <prvAddNewTaskToReadyList+0xb8>)
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	3301      	adds	r3, #1
 800a246:	4a29      	ldr	r2, [pc, #164]	; (800a2ec <prvAddNewTaskToReadyList+0xb8>)
 800a248:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a24a:	4b29      	ldr	r3, [pc, #164]	; (800a2f0 <prvAddNewTaskToReadyList+0xbc>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d109      	bne.n	800a266 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a252:	4a27      	ldr	r2, [pc, #156]	; (800a2f0 <prvAddNewTaskToReadyList+0xbc>)
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a258:	4b24      	ldr	r3, [pc, #144]	; (800a2ec <prvAddNewTaskToReadyList+0xb8>)
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	2b01      	cmp	r3, #1
 800a25e:	d110      	bne.n	800a282 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a260:	f000 fb78 	bl	800a954 <prvInitialiseTaskLists>
 800a264:	e00d      	b.n	800a282 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a266:	4b23      	ldr	r3, [pc, #140]	; (800a2f4 <prvAddNewTaskToReadyList+0xc0>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d109      	bne.n	800a282 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a26e:	4b20      	ldr	r3, [pc, #128]	; (800a2f0 <prvAddNewTaskToReadyList+0xbc>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a278:	429a      	cmp	r2, r3
 800a27a:	d802      	bhi.n	800a282 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a27c:	4a1c      	ldr	r2, [pc, #112]	; (800a2f0 <prvAddNewTaskToReadyList+0xbc>)
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a282:	4b1d      	ldr	r3, [pc, #116]	; (800a2f8 <prvAddNewTaskToReadyList+0xc4>)
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	3301      	adds	r3, #1
 800a288:	4a1b      	ldr	r2, [pc, #108]	; (800a2f8 <prvAddNewTaskToReadyList+0xc4>)
 800a28a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a290:	2201      	movs	r2, #1
 800a292:	409a      	lsls	r2, r3
 800a294:	4b19      	ldr	r3, [pc, #100]	; (800a2fc <prvAddNewTaskToReadyList+0xc8>)
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	4313      	orrs	r3, r2
 800a29a:	4a18      	ldr	r2, [pc, #96]	; (800a2fc <prvAddNewTaskToReadyList+0xc8>)
 800a29c:	6013      	str	r3, [r2, #0]
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2a2:	4613      	mov	r3, r2
 800a2a4:	009b      	lsls	r3, r3, #2
 800a2a6:	4413      	add	r3, r2
 800a2a8:	009b      	lsls	r3, r3, #2
 800a2aa:	4a15      	ldr	r2, [pc, #84]	; (800a300 <prvAddNewTaskToReadyList+0xcc>)
 800a2ac:	441a      	add	r2, r3
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	3304      	adds	r3, #4
 800a2b2:	4619      	mov	r1, r3
 800a2b4:	4610      	mov	r0, r2
 800a2b6:	f7ff fe4e 	bl	8009f56 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a2ba:	f000 fdb3 	bl	800ae24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a2be:	4b0d      	ldr	r3, [pc, #52]	; (800a2f4 <prvAddNewTaskToReadyList+0xc0>)
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d00e      	beq.n	800a2e4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a2c6:	4b0a      	ldr	r3, [pc, #40]	; (800a2f0 <prvAddNewTaskToReadyList+0xbc>)
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2d0:	429a      	cmp	r2, r3
 800a2d2:	d207      	bcs.n	800a2e4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a2d4:	4b0b      	ldr	r3, [pc, #44]	; (800a304 <prvAddNewTaskToReadyList+0xd0>)
 800a2d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2da:	601a      	str	r2, [r3, #0]
 800a2dc:	f3bf 8f4f 	dsb	sy
 800a2e0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a2e4:	bf00      	nop
 800a2e6:	3708      	adds	r7, #8
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	bd80      	pop	{r7, pc}
 800a2ec:	200005dc 	.word	0x200005dc
 800a2f0:	200004dc 	.word	0x200004dc
 800a2f4:	200005e8 	.word	0x200005e8
 800a2f8:	200005f8 	.word	0x200005f8
 800a2fc:	200005e4 	.word	0x200005e4
 800a300:	200004e0 	.word	0x200004e0
 800a304:	e000ed04 	.word	0xe000ed04

0800a308 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b08a      	sub	sp, #40	; 0x28
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
 800a310:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800a312:	2300      	movs	r3, #0
 800a314:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d10a      	bne.n	800a332 <vTaskDelayUntil+0x2a>
	__asm volatile
 800a31c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a320:	f383 8811 	msr	BASEPRI, r3
 800a324:	f3bf 8f6f 	isb	sy
 800a328:	f3bf 8f4f 	dsb	sy
 800a32c:	617b      	str	r3, [r7, #20]
}
 800a32e:	bf00      	nop
 800a330:	e7fe      	b.n	800a330 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d10a      	bne.n	800a34e <vTaskDelayUntil+0x46>
	__asm volatile
 800a338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a33c:	f383 8811 	msr	BASEPRI, r3
 800a340:	f3bf 8f6f 	isb	sy
 800a344:	f3bf 8f4f 	dsb	sy
 800a348:	613b      	str	r3, [r7, #16]
}
 800a34a:	bf00      	nop
 800a34c:	e7fe      	b.n	800a34c <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800a34e:	4b2a      	ldr	r3, [pc, #168]	; (800a3f8 <vTaskDelayUntil+0xf0>)
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d00a      	beq.n	800a36c <vTaskDelayUntil+0x64>
	__asm volatile
 800a356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a35a:	f383 8811 	msr	BASEPRI, r3
 800a35e:	f3bf 8f6f 	isb	sy
 800a362:	f3bf 8f4f 	dsb	sy
 800a366:	60fb      	str	r3, [r7, #12]
}
 800a368:	bf00      	nop
 800a36a:	e7fe      	b.n	800a36a <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800a36c:	f000 f8ce 	bl	800a50c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800a370:	4b22      	ldr	r3, [pc, #136]	; (800a3fc <vTaskDelayUntil+0xf4>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	683a      	ldr	r2, [r7, #0]
 800a37c:	4413      	add	r3, r2
 800a37e:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	6a3a      	ldr	r2, [r7, #32]
 800a386:	429a      	cmp	r2, r3
 800a388:	d20b      	bcs.n	800a3a2 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	69fa      	ldr	r2, [r7, #28]
 800a390:	429a      	cmp	r2, r3
 800a392:	d211      	bcs.n	800a3b8 <vTaskDelayUntil+0xb0>
 800a394:	69fa      	ldr	r2, [r7, #28]
 800a396:	6a3b      	ldr	r3, [r7, #32]
 800a398:	429a      	cmp	r2, r3
 800a39a:	d90d      	bls.n	800a3b8 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800a39c:	2301      	movs	r3, #1
 800a39e:	627b      	str	r3, [r7, #36]	; 0x24
 800a3a0:	e00a      	b.n	800a3b8 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	69fa      	ldr	r2, [r7, #28]
 800a3a8:	429a      	cmp	r2, r3
 800a3aa:	d303      	bcc.n	800a3b4 <vTaskDelayUntil+0xac>
 800a3ac:	69fa      	ldr	r2, [r7, #28]
 800a3ae:	6a3b      	ldr	r3, [r7, #32]
 800a3b0:	429a      	cmp	r2, r3
 800a3b2:	d901      	bls.n	800a3b8 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	69fa      	ldr	r2, [r7, #28]
 800a3bc:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800a3be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d006      	beq.n	800a3d2 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800a3c4:	69fa      	ldr	r2, [r7, #28]
 800a3c6:	6a3b      	ldr	r3, [r7, #32]
 800a3c8:	1ad3      	subs	r3, r2, r3
 800a3ca:	2100      	movs	r1, #0
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	f000 fb65 	bl	800aa9c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800a3d2:	f000 f8a9 	bl	800a528 <xTaskResumeAll>
 800a3d6:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a3d8:	69bb      	ldr	r3, [r7, #24]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d107      	bne.n	800a3ee <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800a3de:	4b08      	ldr	r3, [pc, #32]	; (800a400 <vTaskDelayUntil+0xf8>)
 800a3e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3e4:	601a      	str	r2, [r3, #0]
 800a3e6:	f3bf 8f4f 	dsb	sy
 800a3ea:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a3ee:	bf00      	nop
 800a3f0:	3728      	adds	r7, #40	; 0x28
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	bd80      	pop	{r7, pc}
 800a3f6:	bf00      	nop
 800a3f8:	20000604 	.word	0x20000604
 800a3fc:	200005e0 	.word	0x200005e0
 800a400:	e000ed04 	.word	0xe000ed04

0800a404 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a404:	b580      	push	{r7, lr}
 800a406:	b084      	sub	sp, #16
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a40c:	2300      	movs	r3, #0
 800a40e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d017      	beq.n	800a446 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a416:	4b13      	ldr	r3, [pc, #76]	; (800a464 <vTaskDelay+0x60>)
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d00a      	beq.n	800a434 <vTaskDelay+0x30>
	__asm volatile
 800a41e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a422:	f383 8811 	msr	BASEPRI, r3
 800a426:	f3bf 8f6f 	isb	sy
 800a42a:	f3bf 8f4f 	dsb	sy
 800a42e:	60bb      	str	r3, [r7, #8]
}
 800a430:	bf00      	nop
 800a432:	e7fe      	b.n	800a432 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a434:	f000 f86a 	bl	800a50c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a438:	2100      	movs	r1, #0
 800a43a:	6878      	ldr	r0, [r7, #4]
 800a43c:	f000 fb2e 	bl	800aa9c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a440:	f000 f872 	bl	800a528 <xTaskResumeAll>
 800a444:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d107      	bne.n	800a45c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a44c:	4b06      	ldr	r3, [pc, #24]	; (800a468 <vTaskDelay+0x64>)
 800a44e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a452:	601a      	str	r2, [r3, #0]
 800a454:	f3bf 8f4f 	dsb	sy
 800a458:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a45c:	bf00      	nop
 800a45e:	3710      	adds	r7, #16
 800a460:	46bd      	mov	sp, r7
 800a462:	bd80      	pop	{r7, pc}
 800a464:	20000604 	.word	0x20000604
 800a468:	e000ed04 	.word	0xe000ed04

0800a46c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b086      	sub	sp, #24
 800a470:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800a472:	4b1e      	ldr	r3, [pc, #120]	; (800a4ec <vTaskStartScheduler+0x80>)
 800a474:	9301      	str	r3, [sp, #4]
 800a476:	2300      	movs	r3, #0
 800a478:	9300      	str	r3, [sp, #0]
 800a47a:	2300      	movs	r3, #0
 800a47c:	2280      	movs	r2, #128	; 0x80
 800a47e:	491c      	ldr	r1, [pc, #112]	; (800a4f0 <vTaskStartScheduler+0x84>)
 800a480:	481c      	ldr	r0, [pc, #112]	; (800a4f4 <vTaskStartScheduler+0x88>)
 800a482:	f7ff fdef 	bl	800a064 <xTaskCreate>
 800a486:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	2b01      	cmp	r3, #1
 800a48c:	d11b      	bne.n	800a4c6 <vTaskStartScheduler+0x5a>
	__asm volatile
 800a48e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a492:	f383 8811 	msr	BASEPRI, r3
 800a496:	f3bf 8f6f 	isb	sy
 800a49a:	f3bf 8f4f 	dsb	sy
 800a49e:	60bb      	str	r3, [r7, #8]
}
 800a4a0:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a4a2:	4b15      	ldr	r3, [pc, #84]	; (800a4f8 <vTaskStartScheduler+0x8c>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	334c      	adds	r3, #76	; 0x4c
 800a4a8:	4a14      	ldr	r2, [pc, #80]	; (800a4fc <vTaskStartScheduler+0x90>)
 800a4aa:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a4ac:	4b14      	ldr	r3, [pc, #80]	; (800a500 <vTaskStartScheduler+0x94>)
 800a4ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a4b2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a4b4:	4b13      	ldr	r3, [pc, #76]	; (800a504 <vTaskStartScheduler+0x98>)
 800a4b6:	2201      	movs	r2, #1
 800a4b8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a4ba:	4b13      	ldr	r3, [pc, #76]	; (800a508 <vTaskStartScheduler+0x9c>)
 800a4bc:	2200      	movs	r2, #0
 800a4be:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a4c0:	f000 fbde 	bl	800ac80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a4c4:	e00e      	b.n	800a4e4 <vTaskStartScheduler+0x78>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a4cc:	d10a      	bne.n	800a4e4 <vTaskStartScheduler+0x78>
	__asm volatile
 800a4ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4d2:	f383 8811 	msr	BASEPRI, r3
 800a4d6:	f3bf 8f6f 	isb	sy
 800a4da:	f3bf 8f4f 	dsb	sy
 800a4de:	607b      	str	r3, [r7, #4]
}
 800a4e0:	bf00      	nop
 800a4e2:	e7fe      	b.n	800a4e2 <vTaskStartScheduler+0x76>
}
 800a4e4:	bf00      	nop
 800a4e6:	3710      	adds	r7, #16
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	bd80      	pop	{r7, pc}
 800a4ec:	20000600 	.word	0x20000600
 800a4f0:	0800ca80 	.word	0x0800ca80
 800a4f4:	0800a925 	.word	0x0800a925
 800a4f8:	200004dc 	.word	0x200004dc
 800a4fc:	2000014c 	.word	0x2000014c
 800a500:	200005fc 	.word	0x200005fc
 800a504:	200005e8 	.word	0x200005e8
 800a508:	200005e0 	.word	0x200005e0

0800a50c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a50c:	b480      	push	{r7}
 800a50e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a510:	4b04      	ldr	r3, [pc, #16]	; (800a524 <vTaskSuspendAll+0x18>)
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	3301      	adds	r3, #1
 800a516:	4a03      	ldr	r2, [pc, #12]	; (800a524 <vTaskSuspendAll+0x18>)
 800a518:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a51a:	bf00      	nop
 800a51c:	46bd      	mov	sp, r7
 800a51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a522:	4770      	bx	lr
 800a524:	20000604 	.word	0x20000604

0800a528 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b084      	sub	sp, #16
 800a52c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a52e:	2300      	movs	r3, #0
 800a530:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a532:	2300      	movs	r3, #0
 800a534:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a536:	4b41      	ldr	r3, [pc, #260]	; (800a63c <xTaskResumeAll+0x114>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d10a      	bne.n	800a554 <xTaskResumeAll+0x2c>
	__asm volatile
 800a53e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a542:	f383 8811 	msr	BASEPRI, r3
 800a546:	f3bf 8f6f 	isb	sy
 800a54a:	f3bf 8f4f 	dsb	sy
 800a54e:	603b      	str	r3, [r7, #0]
}
 800a550:	bf00      	nop
 800a552:	e7fe      	b.n	800a552 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a554:	f000 fc36 	bl	800adc4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a558:	4b38      	ldr	r3, [pc, #224]	; (800a63c <xTaskResumeAll+0x114>)
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	3b01      	subs	r3, #1
 800a55e:	4a37      	ldr	r2, [pc, #220]	; (800a63c <xTaskResumeAll+0x114>)
 800a560:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a562:	4b36      	ldr	r3, [pc, #216]	; (800a63c <xTaskResumeAll+0x114>)
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d161      	bne.n	800a62e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a56a:	4b35      	ldr	r3, [pc, #212]	; (800a640 <xTaskResumeAll+0x118>)
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d05d      	beq.n	800a62e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a572:	e02e      	b.n	800a5d2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a574:	4b33      	ldr	r3, [pc, #204]	; (800a644 <xTaskResumeAll+0x11c>)
 800a576:	68db      	ldr	r3, [r3, #12]
 800a578:	68db      	ldr	r3, [r3, #12]
 800a57a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	3318      	adds	r3, #24
 800a580:	4618      	mov	r0, r3
 800a582:	f7ff fd45 	bl	800a010 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	3304      	adds	r3, #4
 800a58a:	4618      	mov	r0, r3
 800a58c:	f7ff fd40 	bl	800a010 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a594:	2201      	movs	r2, #1
 800a596:	409a      	lsls	r2, r3
 800a598:	4b2b      	ldr	r3, [pc, #172]	; (800a648 <xTaskResumeAll+0x120>)
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	4313      	orrs	r3, r2
 800a59e:	4a2a      	ldr	r2, [pc, #168]	; (800a648 <xTaskResumeAll+0x120>)
 800a5a0:	6013      	str	r3, [r2, #0]
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5a6:	4613      	mov	r3, r2
 800a5a8:	009b      	lsls	r3, r3, #2
 800a5aa:	4413      	add	r3, r2
 800a5ac:	009b      	lsls	r3, r3, #2
 800a5ae:	4a27      	ldr	r2, [pc, #156]	; (800a64c <xTaskResumeAll+0x124>)
 800a5b0:	441a      	add	r2, r3
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	3304      	adds	r3, #4
 800a5b6:	4619      	mov	r1, r3
 800a5b8:	4610      	mov	r0, r2
 800a5ba:	f7ff fccc 	bl	8009f56 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5c2:	4b23      	ldr	r3, [pc, #140]	; (800a650 <xTaskResumeAll+0x128>)
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5c8:	429a      	cmp	r2, r3
 800a5ca:	d302      	bcc.n	800a5d2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800a5cc:	4b21      	ldr	r3, [pc, #132]	; (800a654 <xTaskResumeAll+0x12c>)
 800a5ce:	2201      	movs	r2, #1
 800a5d0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a5d2:	4b1c      	ldr	r3, [pc, #112]	; (800a644 <xTaskResumeAll+0x11c>)
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d1cc      	bne.n	800a574 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d001      	beq.n	800a5e4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a5e0:	f000 fa3c 	bl	800aa5c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a5e4:	4b1c      	ldr	r3, [pc, #112]	; (800a658 <xTaskResumeAll+0x130>)
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d010      	beq.n	800a612 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a5f0:	f000 f858 	bl	800a6a4 <xTaskIncrementTick>
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d002      	beq.n	800a600 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800a5fa:	4b16      	ldr	r3, [pc, #88]	; (800a654 <xTaskResumeAll+0x12c>)
 800a5fc:	2201      	movs	r2, #1
 800a5fe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	3b01      	subs	r3, #1
 800a604:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d1f1      	bne.n	800a5f0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800a60c:	4b12      	ldr	r3, [pc, #72]	; (800a658 <xTaskResumeAll+0x130>)
 800a60e:	2200      	movs	r2, #0
 800a610:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a612:	4b10      	ldr	r3, [pc, #64]	; (800a654 <xTaskResumeAll+0x12c>)
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d009      	beq.n	800a62e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a61a:	2301      	movs	r3, #1
 800a61c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a61e:	4b0f      	ldr	r3, [pc, #60]	; (800a65c <xTaskResumeAll+0x134>)
 800a620:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a624:	601a      	str	r2, [r3, #0]
 800a626:	f3bf 8f4f 	dsb	sy
 800a62a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a62e:	f000 fbf9 	bl	800ae24 <vPortExitCritical>

	return xAlreadyYielded;
 800a632:	68bb      	ldr	r3, [r7, #8]
}
 800a634:	4618      	mov	r0, r3
 800a636:	3710      	adds	r7, #16
 800a638:	46bd      	mov	sp, r7
 800a63a:	bd80      	pop	{r7, pc}
 800a63c:	20000604 	.word	0x20000604
 800a640:	200005dc 	.word	0x200005dc
 800a644:	2000059c 	.word	0x2000059c
 800a648:	200005e4 	.word	0x200005e4
 800a64c:	200004e0 	.word	0x200004e0
 800a650:	200004dc 	.word	0x200004dc
 800a654:	200005f0 	.word	0x200005f0
 800a658:	200005ec 	.word	0x200005ec
 800a65c:	e000ed04 	.word	0xe000ed04

0800a660 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a660:	b480      	push	{r7}
 800a662:	b083      	sub	sp, #12
 800a664:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a666:	4b05      	ldr	r3, [pc, #20]	; (800a67c <xTaskGetTickCount+0x1c>)
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a66c:	687b      	ldr	r3, [r7, #4]
}
 800a66e:	4618      	mov	r0, r3
 800a670:	370c      	adds	r7, #12
 800a672:	46bd      	mov	sp, r7
 800a674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a678:	4770      	bx	lr
 800a67a:	bf00      	nop
 800a67c:	200005e0 	.word	0x200005e0

0800a680 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b082      	sub	sp, #8
 800a684:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a686:	f000 fc7f 	bl	800af88 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800a68a:	2300      	movs	r3, #0
 800a68c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800a68e:	4b04      	ldr	r3, [pc, #16]	; (800a6a0 <xTaskGetTickCountFromISR+0x20>)
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a694:	683b      	ldr	r3, [r7, #0]
}
 800a696:	4618      	mov	r0, r3
 800a698:	3708      	adds	r7, #8
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bd80      	pop	{r7, pc}
 800a69e:	bf00      	nop
 800a6a0:	200005e0 	.word	0x200005e0

0800a6a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b086      	sub	sp, #24
 800a6a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a6ae:	4b4e      	ldr	r3, [pc, #312]	; (800a7e8 <xTaskIncrementTick+0x144>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	f040 808e 	bne.w	800a7d4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a6b8:	4b4c      	ldr	r3, [pc, #304]	; (800a7ec <xTaskIncrementTick+0x148>)
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	3301      	adds	r3, #1
 800a6be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a6c0:	4a4a      	ldr	r2, [pc, #296]	; (800a7ec <xTaskIncrementTick+0x148>)
 800a6c2:	693b      	ldr	r3, [r7, #16]
 800a6c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a6c6:	693b      	ldr	r3, [r7, #16]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d120      	bne.n	800a70e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a6cc:	4b48      	ldr	r3, [pc, #288]	; (800a7f0 <xTaskIncrementTick+0x14c>)
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d00a      	beq.n	800a6ec <xTaskIncrementTick+0x48>
	__asm volatile
 800a6d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6da:	f383 8811 	msr	BASEPRI, r3
 800a6de:	f3bf 8f6f 	isb	sy
 800a6e2:	f3bf 8f4f 	dsb	sy
 800a6e6:	603b      	str	r3, [r7, #0]
}
 800a6e8:	bf00      	nop
 800a6ea:	e7fe      	b.n	800a6ea <xTaskIncrementTick+0x46>
 800a6ec:	4b40      	ldr	r3, [pc, #256]	; (800a7f0 <xTaskIncrementTick+0x14c>)
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	60fb      	str	r3, [r7, #12]
 800a6f2:	4b40      	ldr	r3, [pc, #256]	; (800a7f4 <xTaskIncrementTick+0x150>)
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	4a3e      	ldr	r2, [pc, #248]	; (800a7f0 <xTaskIncrementTick+0x14c>)
 800a6f8:	6013      	str	r3, [r2, #0]
 800a6fa:	4a3e      	ldr	r2, [pc, #248]	; (800a7f4 <xTaskIncrementTick+0x150>)
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	6013      	str	r3, [r2, #0]
 800a700:	4b3d      	ldr	r3, [pc, #244]	; (800a7f8 <xTaskIncrementTick+0x154>)
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	3301      	adds	r3, #1
 800a706:	4a3c      	ldr	r2, [pc, #240]	; (800a7f8 <xTaskIncrementTick+0x154>)
 800a708:	6013      	str	r3, [r2, #0]
 800a70a:	f000 f9a7 	bl	800aa5c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a70e:	4b3b      	ldr	r3, [pc, #236]	; (800a7fc <xTaskIncrementTick+0x158>)
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	693a      	ldr	r2, [r7, #16]
 800a714:	429a      	cmp	r2, r3
 800a716:	d348      	bcc.n	800a7aa <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a718:	4b35      	ldr	r3, [pc, #212]	; (800a7f0 <xTaskIncrementTick+0x14c>)
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d104      	bne.n	800a72c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a722:	4b36      	ldr	r3, [pc, #216]	; (800a7fc <xTaskIncrementTick+0x158>)
 800a724:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a728:	601a      	str	r2, [r3, #0]
					break;
 800a72a:	e03e      	b.n	800a7aa <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a72c:	4b30      	ldr	r3, [pc, #192]	; (800a7f0 <xTaskIncrementTick+0x14c>)
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	68db      	ldr	r3, [r3, #12]
 800a732:	68db      	ldr	r3, [r3, #12]
 800a734:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a736:	68bb      	ldr	r3, [r7, #8]
 800a738:	685b      	ldr	r3, [r3, #4]
 800a73a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a73c:	693a      	ldr	r2, [r7, #16]
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	429a      	cmp	r2, r3
 800a742:	d203      	bcs.n	800a74c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a744:	4a2d      	ldr	r2, [pc, #180]	; (800a7fc <xTaskIncrementTick+0x158>)
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a74a:	e02e      	b.n	800a7aa <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	3304      	adds	r3, #4
 800a750:	4618      	mov	r0, r3
 800a752:	f7ff fc5d 	bl	800a010 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a756:	68bb      	ldr	r3, [r7, #8]
 800a758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d004      	beq.n	800a768 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a75e:	68bb      	ldr	r3, [r7, #8]
 800a760:	3318      	adds	r3, #24
 800a762:	4618      	mov	r0, r3
 800a764:	f7ff fc54 	bl	800a010 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a768:	68bb      	ldr	r3, [r7, #8]
 800a76a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a76c:	2201      	movs	r2, #1
 800a76e:	409a      	lsls	r2, r3
 800a770:	4b23      	ldr	r3, [pc, #140]	; (800a800 <xTaskIncrementTick+0x15c>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	4313      	orrs	r3, r2
 800a776:	4a22      	ldr	r2, [pc, #136]	; (800a800 <xTaskIncrementTick+0x15c>)
 800a778:	6013      	str	r3, [r2, #0]
 800a77a:	68bb      	ldr	r3, [r7, #8]
 800a77c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a77e:	4613      	mov	r3, r2
 800a780:	009b      	lsls	r3, r3, #2
 800a782:	4413      	add	r3, r2
 800a784:	009b      	lsls	r3, r3, #2
 800a786:	4a1f      	ldr	r2, [pc, #124]	; (800a804 <xTaskIncrementTick+0x160>)
 800a788:	441a      	add	r2, r3
 800a78a:	68bb      	ldr	r3, [r7, #8]
 800a78c:	3304      	adds	r3, #4
 800a78e:	4619      	mov	r1, r3
 800a790:	4610      	mov	r0, r2
 800a792:	f7ff fbe0 	bl	8009f56 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a796:	68bb      	ldr	r3, [r7, #8]
 800a798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a79a:	4b1b      	ldr	r3, [pc, #108]	; (800a808 <xTaskIncrementTick+0x164>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7a0:	429a      	cmp	r2, r3
 800a7a2:	d3b9      	bcc.n	800a718 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a7a4:	2301      	movs	r3, #1
 800a7a6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a7a8:	e7b6      	b.n	800a718 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a7aa:	4b17      	ldr	r3, [pc, #92]	; (800a808 <xTaskIncrementTick+0x164>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7b0:	4914      	ldr	r1, [pc, #80]	; (800a804 <xTaskIncrementTick+0x160>)
 800a7b2:	4613      	mov	r3, r2
 800a7b4:	009b      	lsls	r3, r3, #2
 800a7b6:	4413      	add	r3, r2
 800a7b8:	009b      	lsls	r3, r3, #2
 800a7ba:	440b      	add	r3, r1
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	2b01      	cmp	r3, #1
 800a7c0:	d901      	bls.n	800a7c6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800a7c2:	2301      	movs	r3, #1
 800a7c4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a7c6:	4b11      	ldr	r3, [pc, #68]	; (800a80c <xTaskIncrementTick+0x168>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d007      	beq.n	800a7de <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	617b      	str	r3, [r7, #20]
 800a7d2:	e004      	b.n	800a7de <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a7d4:	4b0e      	ldr	r3, [pc, #56]	; (800a810 <xTaskIncrementTick+0x16c>)
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	3301      	adds	r3, #1
 800a7da:	4a0d      	ldr	r2, [pc, #52]	; (800a810 <xTaskIncrementTick+0x16c>)
 800a7dc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a7de:	697b      	ldr	r3, [r7, #20]
}
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	3718      	adds	r7, #24
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	bd80      	pop	{r7, pc}
 800a7e8:	20000604 	.word	0x20000604
 800a7ec:	200005e0 	.word	0x200005e0
 800a7f0:	20000594 	.word	0x20000594
 800a7f4:	20000598 	.word	0x20000598
 800a7f8:	200005f4 	.word	0x200005f4
 800a7fc:	200005fc 	.word	0x200005fc
 800a800:	200005e4 	.word	0x200005e4
 800a804:	200004e0 	.word	0x200004e0
 800a808:	200004dc 	.word	0x200004dc
 800a80c:	200005f0 	.word	0x200005f0
 800a810:	200005ec 	.word	0x200005ec

0800a814 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b088      	sub	sp, #32
 800a818:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a81a:	4b3c      	ldr	r3, [pc, #240]	; (800a90c <vTaskSwitchContext+0xf8>)
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d003      	beq.n	800a82a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a822:	4b3b      	ldr	r3, [pc, #236]	; (800a910 <vTaskSwitchContext+0xfc>)
 800a824:	2201      	movs	r2, #1
 800a826:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a828:	e06b      	b.n	800a902 <vTaskSwitchContext+0xee>
		xYieldPending = pdFALSE;
 800a82a:	4b39      	ldr	r3, [pc, #228]	; (800a910 <vTaskSwitchContext+0xfc>)
 800a82c:	2200      	movs	r2, #0
 800a82e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800a830:	4b38      	ldr	r3, [pc, #224]	; (800a914 <vTaskSwitchContext+0x100>)
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a836:	61fb      	str	r3, [r7, #28]
 800a838:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800a83c:	61bb      	str	r3, [r7, #24]
 800a83e:	69fb      	ldr	r3, [r7, #28]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	69ba      	ldr	r2, [r7, #24]
 800a844:	429a      	cmp	r2, r3
 800a846:	d111      	bne.n	800a86c <vTaskSwitchContext+0x58>
 800a848:	69fb      	ldr	r3, [r7, #28]
 800a84a:	3304      	adds	r3, #4
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	69ba      	ldr	r2, [r7, #24]
 800a850:	429a      	cmp	r2, r3
 800a852:	d10b      	bne.n	800a86c <vTaskSwitchContext+0x58>
 800a854:	69fb      	ldr	r3, [r7, #28]
 800a856:	3308      	adds	r3, #8
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	69ba      	ldr	r2, [r7, #24]
 800a85c:	429a      	cmp	r2, r3
 800a85e:	d105      	bne.n	800a86c <vTaskSwitchContext+0x58>
 800a860:	69fb      	ldr	r3, [r7, #28]
 800a862:	330c      	adds	r3, #12
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	69ba      	ldr	r2, [r7, #24]
 800a868:	429a      	cmp	r2, r3
 800a86a:	d008      	beq.n	800a87e <vTaskSwitchContext+0x6a>
 800a86c:	4b29      	ldr	r3, [pc, #164]	; (800a914 <vTaskSwitchContext+0x100>)
 800a86e:	681a      	ldr	r2, [r3, #0]
 800a870:	4b28      	ldr	r3, [pc, #160]	; (800a914 <vTaskSwitchContext+0x100>)
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	3334      	adds	r3, #52	; 0x34
 800a876:	4619      	mov	r1, r3
 800a878:	4610      	mov	r0, r2
 800a87a:	f7f5 ff79 	bl	8000770 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a87e:	4b26      	ldr	r3, [pc, #152]	; (800a918 <vTaskSwitchContext+0x104>)
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	fab3 f383 	clz	r3, r3
 800a88a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a88c:	7afb      	ldrb	r3, [r7, #11]
 800a88e:	f1c3 031f 	rsb	r3, r3, #31
 800a892:	617b      	str	r3, [r7, #20]
 800a894:	4921      	ldr	r1, [pc, #132]	; (800a91c <vTaskSwitchContext+0x108>)
 800a896:	697a      	ldr	r2, [r7, #20]
 800a898:	4613      	mov	r3, r2
 800a89a:	009b      	lsls	r3, r3, #2
 800a89c:	4413      	add	r3, r2
 800a89e:	009b      	lsls	r3, r3, #2
 800a8a0:	440b      	add	r3, r1
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d10a      	bne.n	800a8be <vTaskSwitchContext+0xaa>
	__asm volatile
 800a8a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ac:	f383 8811 	msr	BASEPRI, r3
 800a8b0:	f3bf 8f6f 	isb	sy
 800a8b4:	f3bf 8f4f 	dsb	sy
 800a8b8:	607b      	str	r3, [r7, #4]
}
 800a8ba:	bf00      	nop
 800a8bc:	e7fe      	b.n	800a8bc <vTaskSwitchContext+0xa8>
 800a8be:	697a      	ldr	r2, [r7, #20]
 800a8c0:	4613      	mov	r3, r2
 800a8c2:	009b      	lsls	r3, r3, #2
 800a8c4:	4413      	add	r3, r2
 800a8c6:	009b      	lsls	r3, r3, #2
 800a8c8:	4a14      	ldr	r2, [pc, #80]	; (800a91c <vTaskSwitchContext+0x108>)
 800a8ca:	4413      	add	r3, r2
 800a8cc:	613b      	str	r3, [r7, #16]
 800a8ce:	693b      	ldr	r3, [r7, #16]
 800a8d0:	685b      	ldr	r3, [r3, #4]
 800a8d2:	685a      	ldr	r2, [r3, #4]
 800a8d4:	693b      	ldr	r3, [r7, #16]
 800a8d6:	605a      	str	r2, [r3, #4]
 800a8d8:	693b      	ldr	r3, [r7, #16]
 800a8da:	685a      	ldr	r2, [r3, #4]
 800a8dc:	693b      	ldr	r3, [r7, #16]
 800a8de:	3308      	adds	r3, #8
 800a8e0:	429a      	cmp	r2, r3
 800a8e2:	d104      	bne.n	800a8ee <vTaskSwitchContext+0xda>
 800a8e4:	693b      	ldr	r3, [r7, #16]
 800a8e6:	685b      	ldr	r3, [r3, #4]
 800a8e8:	685a      	ldr	r2, [r3, #4]
 800a8ea:	693b      	ldr	r3, [r7, #16]
 800a8ec:	605a      	str	r2, [r3, #4]
 800a8ee:	693b      	ldr	r3, [r7, #16]
 800a8f0:	685b      	ldr	r3, [r3, #4]
 800a8f2:	68db      	ldr	r3, [r3, #12]
 800a8f4:	4a07      	ldr	r2, [pc, #28]	; (800a914 <vTaskSwitchContext+0x100>)
 800a8f6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a8f8:	4b06      	ldr	r3, [pc, #24]	; (800a914 <vTaskSwitchContext+0x100>)
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	334c      	adds	r3, #76	; 0x4c
 800a8fe:	4a08      	ldr	r2, [pc, #32]	; (800a920 <vTaskSwitchContext+0x10c>)
 800a900:	6013      	str	r3, [r2, #0]
}
 800a902:	bf00      	nop
 800a904:	3720      	adds	r7, #32
 800a906:	46bd      	mov	sp, r7
 800a908:	bd80      	pop	{r7, pc}
 800a90a:	bf00      	nop
 800a90c:	20000604 	.word	0x20000604
 800a910:	200005f0 	.word	0x200005f0
 800a914:	200004dc 	.word	0x200004dc
 800a918:	200005e4 	.word	0x200005e4
 800a91c:	200004e0 	.word	0x200004e0
 800a920:	2000014c 	.word	0x2000014c

0800a924 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b082      	sub	sp, #8
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a92c:	f000 f852 	bl	800a9d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a930:	4b06      	ldr	r3, [pc, #24]	; (800a94c <prvIdleTask+0x28>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	2b01      	cmp	r3, #1
 800a936:	d9f9      	bls.n	800a92c <prvIdleTask+0x8>
			{
				taskYIELD();
 800a938:	4b05      	ldr	r3, [pc, #20]	; (800a950 <prvIdleTask+0x2c>)
 800a93a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a93e:	601a      	str	r2, [r3, #0]
 800a940:	f3bf 8f4f 	dsb	sy
 800a944:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a948:	e7f0      	b.n	800a92c <prvIdleTask+0x8>
 800a94a:	bf00      	nop
 800a94c:	200004e0 	.word	0x200004e0
 800a950:	e000ed04 	.word	0xe000ed04

0800a954 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b082      	sub	sp, #8
 800a958:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a95a:	2300      	movs	r3, #0
 800a95c:	607b      	str	r3, [r7, #4]
 800a95e:	e00c      	b.n	800a97a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a960:	687a      	ldr	r2, [r7, #4]
 800a962:	4613      	mov	r3, r2
 800a964:	009b      	lsls	r3, r3, #2
 800a966:	4413      	add	r3, r2
 800a968:	009b      	lsls	r3, r3, #2
 800a96a:	4a12      	ldr	r2, [pc, #72]	; (800a9b4 <prvInitialiseTaskLists+0x60>)
 800a96c:	4413      	add	r3, r2
 800a96e:	4618      	mov	r0, r3
 800a970:	f7ff fac4 	bl	8009efc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	3301      	adds	r3, #1
 800a978:	607b      	str	r3, [r7, #4]
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	2b06      	cmp	r3, #6
 800a97e:	d9ef      	bls.n	800a960 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a980:	480d      	ldr	r0, [pc, #52]	; (800a9b8 <prvInitialiseTaskLists+0x64>)
 800a982:	f7ff fabb 	bl	8009efc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a986:	480d      	ldr	r0, [pc, #52]	; (800a9bc <prvInitialiseTaskLists+0x68>)
 800a988:	f7ff fab8 	bl	8009efc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a98c:	480c      	ldr	r0, [pc, #48]	; (800a9c0 <prvInitialiseTaskLists+0x6c>)
 800a98e:	f7ff fab5 	bl	8009efc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a992:	480c      	ldr	r0, [pc, #48]	; (800a9c4 <prvInitialiseTaskLists+0x70>)
 800a994:	f7ff fab2 	bl	8009efc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a998:	480b      	ldr	r0, [pc, #44]	; (800a9c8 <prvInitialiseTaskLists+0x74>)
 800a99a:	f7ff faaf 	bl	8009efc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a99e:	4b0b      	ldr	r3, [pc, #44]	; (800a9cc <prvInitialiseTaskLists+0x78>)
 800a9a0:	4a05      	ldr	r2, [pc, #20]	; (800a9b8 <prvInitialiseTaskLists+0x64>)
 800a9a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a9a4:	4b0a      	ldr	r3, [pc, #40]	; (800a9d0 <prvInitialiseTaskLists+0x7c>)
 800a9a6:	4a05      	ldr	r2, [pc, #20]	; (800a9bc <prvInitialiseTaskLists+0x68>)
 800a9a8:	601a      	str	r2, [r3, #0]
}
 800a9aa:	bf00      	nop
 800a9ac:	3708      	adds	r7, #8
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	bd80      	pop	{r7, pc}
 800a9b2:	bf00      	nop
 800a9b4:	200004e0 	.word	0x200004e0
 800a9b8:	2000056c 	.word	0x2000056c
 800a9bc:	20000580 	.word	0x20000580
 800a9c0:	2000059c 	.word	0x2000059c
 800a9c4:	200005b0 	.word	0x200005b0
 800a9c8:	200005c8 	.word	0x200005c8
 800a9cc:	20000594 	.word	0x20000594
 800a9d0:	20000598 	.word	0x20000598

0800a9d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b082      	sub	sp, #8
 800a9d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a9da:	e019      	b.n	800aa10 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a9dc:	f000 f9f2 	bl	800adc4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a9e0:	4b10      	ldr	r3, [pc, #64]	; (800aa24 <prvCheckTasksWaitingTermination+0x50>)
 800a9e2:	68db      	ldr	r3, [r3, #12]
 800a9e4:	68db      	ldr	r3, [r3, #12]
 800a9e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	3304      	adds	r3, #4
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	f7ff fb0f 	bl	800a010 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a9f2:	4b0d      	ldr	r3, [pc, #52]	; (800aa28 <prvCheckTasksWaitingTermination+0x54>)
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	3b01      	subs	r3, #1
 800a9f8:	4a0b      	ldr	r2, [pc, #44]	; (800aa28 <prvCheckTasksWaitingTermination+0x54>)
 800a9fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a9fc:	4b0b      	ldr	r3, [pc, #44]	; (800aa2c <prvCheckTasksWaitingTermination+0x58>)
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	3b01      	subs	r3, #1
 800aa02:	4a0a      	ldr	r2, [pc, #40]	; (800aa2c <prvCheckTasksWaitingTermination+0x58>)
 800aa04:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800aa06:	f000 fa0d 	bl	800ae24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800aa0a:	6878      	ldr	r0, [r7, #4]
 800aa0c:	f000 f810 	bl	800aa30 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aa10:	4b06      	ldr	r3, [pc, #24]	; (800aa2c <prvCheckTasksWaitingTermination+0x58>)
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d1e1      	bne.n	800a9dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800aa18:	bf00      	nop
 800aa1a:	bf00      	nop
 800aa1c:	3708      	adds	r7, #8
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bd80      	pop	{r7, pc}
 800aa22:	bf00      	nop
 800aa24:	200005b0 	.word	0x200005b0
 800aa28:	200005dc 	.word	0x200005dc
 800aa2c:	200005c4 	.word	0x200005c4

0800aa30 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b082      	sub	sp, #8
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	334c      	adds	r3, #76	; 0x4c
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	f001 ff2d 	bl	800c89c <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa46:	4618      	mov	r0, r3
 800aa48:	f000 fbae 	bl	800b1a8 <vPortFree>
			vPortFree( pxTCB );
 800aa4c:	6878      	ldr	r0, [r7, #4]
 800aa4e:	f000 fbab 	bl	800b1a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800aa52:	bf00      	nop
 800aa54:	3708      	adds	r7, #8
 800aa56:	46bd      	mov	sp, r7
 800aa58:	bd80      	pop	{r7, pc}
	...

0800aa5c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	b083      	sub	sp, #12
 800aa60:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aa62:	4b0c      	ldr	r3, [pc, #48]	; (800aa94 <prvResetNextTaskUnblockTime+0x38>)
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d104      	bne.n	800aa76 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800aa6c:	4b0a      	ldr	r3, [pc, #40]	; (800aa98 <prvResetNextTaskUnblockTime+0x3c>)
 800aa6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aa72:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800aa74:	e008      	b.n	800aa88 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa76:	4b07      	ldr	r3, [pc, #28]	; (800aa94 <prvResetNextTaskUnblockTime+0x38>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	68db      	ldr	r3, [r3, #12]
 800aa7c:	68db      	ldr	r3, [r3, #12]
 800aa7e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	685b      	ldr	r3, [r3, #4]
 800aa84:	4a04      	ldr	r2, [pc, #16]	; (800aa98 <prvResetNextTaskUnblockTime+0x3c>)
 800aa86:	6013      	str	r3, [r2, #0]
}
 800aa88:	bf00      	nop
 800aa8a:	370c      	adds	r7, #12
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa92:	4770      	bx	lr
 800aa94:	20000594 	.word	0x20000594
 800aa98:	200005fc 	.word	0x200005fc

0800aa9c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b084      	sub	sp, #16
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
 800aaa4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800aaa6:	4b29      	ldr	r3, [pc, #164]	; (800ab4c <prvAddCurrentTaskToDelayedList+0xb0>)
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aaac:	4b28      	ldr	r3, [pc, #160]	; (800ab50 <prvAddCurrentTaskToDelayedList+0xb4>)
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	3304      	adds	r3, #4
 800aab2:	4618      	mov	r0, r3
 800aab4:	f7ff faac 	bl	800a010 <uxListRemove>
 800aab8:	4603      	mov	r3, r0
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d10b      	bne.n	800aad6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800aabe:	4b24      	ldr	r3, [pc, #144]	; (800ab50 <prvAddCurrentTaskToDelayedList+0xb4>)
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aac4:	2201      	movs	r2, #1
 800aac6:	fa02 f303 	lsl.w	r3, r2, r3
 800aaca:	43da      	mvns	r2, r3
 800aacc:	4b21      	ldr	r3, [pc, #132]	; (800ab54 <prvAddCurrentTaskToDelayedList+0xb8>)
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	4013      	ands	r3, r2
 800aad2:	4a20      	ldr	r2, [pc, #128]	; (800ab54 <prvAddCurrentTaskToDelayedList+0xb8>)
 800aad4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aadc:	d10a      	bne.n	800aaf4 <prvAddCurrentTaskToDelayedList+0x58>
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d007      	beq.n	800aaf4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aae4:	4b1a      	ldr	r3, [pc, #104]	; (800ab50 <prvAddCurrentTaskToDelayedList+0xb4>)
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	3304      	adds	r3, #4
 800aaea:	4619      	mov	r1, r3
 800aaec:	481a      	ldr	r0, [pc, #104]	; (800ab58 <prvAddCurrentTaskToDelayedList+0xbc>)
 800aaee:	f7ff fa32 	bl	8009f56 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800aaf2:	e026      	b.n	800ab42 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800aaf4:	68fa      	ldr	r2, [r7, #12]
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	4413      	add	r3, r2
 800aafa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800aafc:	4b14      	ldr	r3, [pc, #80]	; (800ab50 <prvAddCurrentTaskToDelayedList+0xb4>)
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	68ba      	ldr	r2, [r7, #8]
 800ab02:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ab04:	68ba      	ldr	r2, [r7, #8]
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	429a      	cmp	r2, r3
 800ab0a:	d209      	bcs.n	800ab20 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ab0c:	4b13      	ldr	r3, [pc, #76]	; (800ab5c <prvAddCurrentTaskToDelayedList+0xc0>)
 800ab0e:	681a      	ldr	r2, [r3, #0]
 800ab10:	4b0f      	ldr	r3, [pc, #60]	; (800ab50 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	3304      	adds	r3, #4
 800ab16:	4619      	mov	r1, r3
 800ab18:	4610      	mov	r0, r2
 800ab1a:	f7ff fa40 	bl	8009f9e <vListInsert>
}
 800ab1e:	e010      	b.n	800ab42 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ab20:	4b0f      	ldr	r3, [pc, #60]	; (800ab60 <prvAddCurrentTaskToDelayedList+0xc4>)
 800ab22:	681a      	ldr	r2, [r3, #0]
 800ab24:	4b0a      	ldr	r3, [pc, #40]	; (800ab50 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	3304      	adds	r3, #4
 800ab2a:	4619      	mov	r1, r3
 800ab2c:	4610      	mov	r0, r2
 800ab2e:	f7ff fa36 	bl	8009f9e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ab32:	4b0c      	ldr	r3, [pc, #48]	; (800ab64 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	68ba      	ldr	r2, [r7, #8]
 800ab38:	429a      	cmp	r2, r3
 800ab3a:	d202      	bcs.n	800ab42 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800ab3c:	4a09      	ldr	r2, [pc, #36]	; (800ab64 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ab3e:	68bb      	ldr	r3, [r7, #8]
 800ab40:	6013      	str	r3, [r2, #0]
}
 800ab42:	bf00      	nop
 800ab44:	3710      	adds	r7, #16
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bd80      	pop	{r7, pc}
 800ab4a:	bf00      	nop
 800ab4c:	200005e0 	.word	0x200005e0
 800ab50:	200004dc 	.word	0x200004dc
 800ab54:	200005e4 	.word	0x200005e4
 800ab58:	200005c8 	.word	0x200005c8
 800ab5c:	20000598 	.word	0x20000598
 800ab60:	20000594 	.word	0x20000594
 800ab64:	200005fc 	.word	0x200005fc

0800ab68 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ab68:	b480      	push	{r7}
 800ab6a:	b085      	sub	sp, #20
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	60f8      	str	r0, [r7, #12]
 800ab70:	60b9      	str	r1, [r7, #8]
 800ab72:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	3b04      	subs	r3, #4
 800ab78:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ab80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	3b04      	subs	r3, #4
 800ab86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	f023 0201 	bic.w	r2, r3, #1
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	3b04      	subs	r3, #4
 800ab96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ab98:	4a0c      	ldr	r2, [pc, #48]	; (800abcc <pxPortInitialiseStack+0x64>)
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	3b14      	subs	r3, #20
 800aba2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800aba4:	687a      	ldr	r2, [r7, #4]
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	3b04      	subs	r3, #4
 800abae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	f06f 0202 	mvn.w	r2, #2
 800abb6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	3b20      	subs	r3, #32
 800abbc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800abbe:	68fb      	ldr	r3, [r7, #12]
}
 800abc0:	4618      	mov	r0, r3
 800abc2:	3714      	adds	r7, #20
 800abc4:	46bd      	mov	sp, r7
 800abc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abca:	4770      	bx	lr
 800abcc:	0800abd1 	.word	0x0800abd1

0800abd0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800abd0:	b480      	push	{r7}
 800abd2:	b085      	sub	sp, #20
 800abd4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800abd6:	2300      	movs	r3, #0
 800abd8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800abda:	4b12      	ldr	r3, [pc, #72]	; (800ac24 <prvTaskExitError+0x54>)
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800abe2:	d00a      	beq.n	800abfa <prvTaskExitError+0x2a>
	__asm volatile
 800abe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abe8:	f383 8811 	msr	BASEPRI, r3
 800abec:	f3bf 8f6f 	isb	sy
 800abf0:	f3bf 8f4f 	dsb	sy
 800abf4:	60fb      	str	r3, [r7, #12]
}
 800abf6:	bf00      	nop
 800abf8:	e7fe      	b.n	800abf8 <prvTaskExitError+0x28>
	__asm volatile
 800abfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abfe:	f383 8811 	msr	BASEPRI, r3
 800ac02:	f3bf 8f6f 	isb	sy
 800ac06:	f3bf 8f4f 	dsb	sy
 800ac0a:	60bb      	str	r3, [r7, #8]
}
 800ac0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ac0e:	bf00      	nop
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d0fc      	beq.n	800ac10 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ac16:	bf00      	nop
 800ac18:	bf00      	nop
 800ac1a:	3714      	adds	r7, #20
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac22:	4770      	bx	lr
 800ac24:	20000098 	.word	0x20000098
	...

0800ac30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ac30:	4b07      	ldr	r3, [pc, #28]	; (800ac50 <pxCurrentTCBConst2>)
 800ac32:	6819      	ldr	r1, [r3, #0]
 800ac34:	6808      	ldr	r0, [r1, #0]
 800ac36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac3a:	f380 8809 	msr	PSP, r0
 800ac3e:	f3bf 8f6f 	isb	sy
 800ac42:	f04f 0000 	mov.w	r0, #0
 800ac46:	f380 8811 	msr	BASEPRI, r0
 800ac4a:	4770      	bx	lr
 800ac4c:	f3af 8000 	nop.w

0800ac50 <pxCurrentTCBConst2>:
 800ac50:	200004dc 	.word	0x200004dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ac54:	bf00      	nop
 800ac56:	bf00      	nop

0800ac58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ac58:	4808      	ldr	r0, [pc, #32]	; (800ac7c <prvPortStartFirstTask+0x24>)
 800ac5a:	6800      	ldr	r0, [r0, #0]
 800ac5c:	6800      	ldr	r0, [r0, #0]
 800ac5e:	f380 8808 	msr	MSP, r0
 800ac62:	f04f 0000 	mov.w	r0, #0
 800ac66:	f380 8814 	msr	CONTROL, r0
 800ac6a:	b662      	cpsie	i
 800ac6c:	b661      	cpsie	f
 800ac6e:	f3bf 8f4f 	dsb	sy
 800ac72:	f3bf 8f6f 	isb	sy
 800ac76:	df00      	svc	0
 800ac78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ac7a:	bf00      	nop
 800ac7c:	e000ed08 	.word	0xe000ed08

0800ac80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b086      	sub	sp, #24
 800ac84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ac86:	4b46      	ldr	r3, [pc, #280]	; (800ada0 <xPortStartScheduler+0x120>)
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	4a46      	ldr	r2, [pc, #280]	; (800ada4 <xPortStartScheduler+0x124>)
 800ac8c:	4293      	cmp	r3, r2
 800ac8e:	d10a      	bne.n	800aca6 <xPortStartScheduler+0x26>
	__asm volatile
 800ac90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac94:	f383 8811 	msr	BASEPRI, r3
 800ac98:	f3bf 8f6f 	isb	sy
 800ac9c:	f3bf 8f4f 	dsb	sy
 800aca0:	613b      	str	r3, [r7, #16]
}
 800aca2:	bf00      	nop
 800aca4:	e7fe      	b.n	800aca4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800aca6:	4b3e      	ldr	r3, [pc, #248]	; (800ada0 <xPortStartScheduler+0x120>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	4a3f      	ldr	r2, [pc, #252]	; (800ada8 <xPortStartScheduler+0x128>)
 800acac:	4293      	cmp	r3, r2
 800acae:	d10a      	bne.n	800acc6 <xPortStartScheduler+0x46>
	__asm volatile
 800acb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acb4:	f383 8811 	msr	BASEPRI, r3
 800acb8:	f3bf 8f6f 	isb	sy
 800acbc:	f3bf 8f4f 	dsb	sy
 800acc0:	60fb      	str	r3, [r7, #12]
}
 800acc2:	bf00      	nop
 800acc4:	e7fe      	b.n	800acc4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800acc6:	4b39      	ldr	r3, [pc, #228]	; (800adac <xPortStartScheduler+0x12c>)
 800acc8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800acca:	697b      	ldr	r3, [r7, #20]
 800accc:	781b      	ldrb	r3, [r3, #0]
 800acce:	b2db      	uxtb	r3, r3
 800acd0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800acd2:	697b      	ldr	r3, [r7, #20]
 800acd4:	22ff      	movs	r2, #255	; 0xff
 800acd6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800acd8:	697b      	ldr	r3, [r7, #20]
 800acda:	781b      	ldrb	r3, [r3, #0]
 800acdc:	b2db      	uxtb	r3, r3
 800acde:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ace0:	78fb      	ldrb	r3, [r7, #3]
 800ace2:	b2db      	uxtb	r3, r3
 800ace4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ace8:	b2da      	uxtb	r2, r3
 800acea:	4b31      	ldr	r3, [pc, #196]	; (800adb0 <xPortStartScheduler+0x130>)
 800acec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800acee:	4b31      	ldr	r3, [pc, #196]	; (800adb4 <xPortStartScheduler+0x134>)
 800acf0:	2207      	movs	r2, #7
 800acf2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800acf4:	e009      	b.n	800ad0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800acf6:	4b2f      	ldr	r3, [pc, #188]	; (800adb4 <xPortStartScheduler+0x134>)
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	3b01      	subs	r3, #1
 800acfc:	4a2d      	ldr	r2, [pc, #180]	; (800adb4 <xPortStartScheduler+0x134>)
 800acfe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ad00:	78fb      	ldrb	r3, [r7, #3]
 800ad02:	b2db      	uxtb	r3, r3
 800ad04:	005b      	lsls	r3, r3, #1
 800ad06:	b2db      	uxtb	r3, r3
 800ad08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ad0a:	78fb      	ldrb	r3, [r7, #3]
 800ad0c:	b2db      	uxtb	r3, r3
 800ad0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad12:	2b80      	cmp	r3, #128	; 0x80
 800ad14:	d0ef      	beq.n	800acf6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ad16:	4b27      	ldr	r3, [pc, #156]	; (800adb4 <xPortStartScheduler+0x134>)
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	f1c3 0307 	rsb	r3, r3, #7
 800ad1e:	2b04      	cmp	r3, #4
 800ad20:	d00a      	beq.n	800ad38 <xPortStartScheduler+0xb8>
	__asm volatile
 800ad22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad26:	f383 8811 	msr	BASEPRI, r3
 800ad2a:	f3bf 8f6f 	isb	sy
 800ad2e:	f3bf 8f4f 	dsb	sy
 800ad32:	60bb      	str	r3, [r7, #8]
}
 800ad34:	bf00      	nop
 800ad36:	e7fe      	b.n	800ad36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ad38:	4b1e      	ldr	r3, [pc, #120]	; (800adb4 <xPortStartScheduler+0x134>)
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	021b      	lsls	r3, r3, #8
 800ad3e:	4a1d      	ldr	r2, [pc, #116]	; (800adb4 <xPortStartScheduler+0x134>)
 800ad40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ad42:	4b1c      	ldr	r3, [pc, #112]	; (800adb4 <xPortStartScheduler+0x134>)
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ad4a:	4a1a      	ldr	r2, [pc, #104]	; (800adb4 <xPortStartScheduler+0x134>)
 800ad4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	b2da      	uxtb	r2, r3
 800ad52:	697b      	ldr	r3, [r7, #20]
 800ad54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ad56:	4b18      	ldr	r3, [pc, #96]	; (800adb8 <xPortStartScheduler+0x138>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	4a17      	ldr	r2, [pc, #92]	; (800adb8 <xPortStartScheduler+0x138>)
 800ad5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ad60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ad62:	4b15      	ldr	r3, [pc, #84]	; (800adb8 <xPortStartScheduler+0x138>)
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	4a14      	ldr	r2, [pc, #80]	; (800adb8 <xPortStartScheduler+0x138>)
 800ad68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ad6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ad6e:	f000 f8dd 	bl	800af2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ad72:	4b12      	ldr	r3, [pc, #72]	; (800adbc <xPortStartScheduler+0x13c>)
 800ad74:	2200      	movs	r2, #0
 800ad76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ad78:	f000 f8fc 	bl	800af74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ad7c:	4b10      	ldr	r3, [pc, #64]	; (800adc0 <xPortStartScheduler+0x140>)
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	4a0f      	ldr	r2, [pc, #60]	; (800adc0 <xPortStartScheduler+0x140>)
 800ad82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ad86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ad88:	f7ff ff66 	bl	800ac58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ad8c:	f7ff fd42 	bl	800a814 <vTaskSwitchContext>
	prvTaskExitError();
 800ad90:	f7ff ff1e 	bl	800abd0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ad94:	2300      	movs	r3, #0
}
 800ad96:	4618      	mov	r0, r3
 800ad98:	3718      	adds	r7, #24
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	bd80      	pop	{r7, pc}
 800ad9e:	bf00      	nop
 800ada0:	e000ed00 	.word	0xe000ed00
 800ada4:	410fc271 	.word	0x410fc271
 800ada8:	410fc270 	.word	0x410fc270
 800adac:	e000e400 	.word	0xe000e400
 800adb0:	20000608 	.word	0x20000608
 800adb4:	2000060c 	.word	0x2000060c
 800adb8:	e000ed20 	.word	0xe000ed20
 800adbc:	20000098 	.word	0x20000098
 800adc0:	e000ef34 	.word	0xe000ef34

0800adc4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800adc4:	b480      	push	{r7}
 800adc6:	b083      	sub	sp, #12
 800adc8:	af00      	add	r7, sp, #0
	__asm volatile
 800adca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adce:	f383 8811 	msr	BASEPRI, r3
 800add2:	f3bf 8f6f 	isb	sy
 800add6:	f3bf 8f4f 	dsb	sy
 800adda:	607b      	str	r3, [r7, #4]
}
 800addc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800adde:	4b0f      	ldr	r3, [pc, #60]	; (800ae1c <vPortEnterCritical+0x58>)
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	3301      	adds	r3, #1
 800ade4:	4a0d      	ldr	r2, [pc, #52]	; (800ae1c <vPortEnterCritical+0x58>)
 800ade6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ade8:	4b0c      	ldr	r3, [pc, #48]	; (800ae1c <vPortEnterCritical+0x58>)
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	2b01      	cmp	r3, #1
 800adee:	d10f      	bne.n	800ae10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800adf0:	4b0b      	ldr	r3, [pc, #44]	; (800ae20 <vPortEnterCritical+0x5c>)
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	b2db      	uxtb	r3, r3
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d00a      	beq.n	800ae10 <vPortEnterCritical+0x4c>
	__asm volatile
 800adfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adfe:	f383 8811 	msr	BASEPRI, r3
 800ae02:	f3bf 8f6f 	isb	sy
 800ae06:	f3bf 8f4f 	dsb	sy
 800ae0a:	603b      	str	r3, [r7, #0]
}
 800ae0c:	bf00      	nop
 800ae0e:	e7fe      	b.n	800ae0e <vPortEnterCritical+0x4a>
	}
}
 800ae10:	bf00      	nop
 800ae12:	370c      	adds	r7, #12
 800ae14:	46bd      	mov	sp, r7
 800ae16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1a:	4770      	bx	lr
 800ae1c:	20000098 	.word	0x20000098
 800ae20:	e000ed04 	.word	0xe000ed04

0800ae24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ae24:	b480      	push	{r7}
 800ae26:	b083      	sub	sp, #12
 800ae28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ae2a:	4b12      	ldr	r3, [pc, #72]	; (800ae74 <vPortExitCritical+0x50>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d10a      	bne.n	800ae48 <vPortExitCritical+0x24>
	__asm volatile
 800ae32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae36:	f383 8811 	msr	BASEPRI, r3
 800ae3a:	f3bf 8f6f 	isb	sy
 800ae3e:	f3bf 8f4f 	dsb	sy
 800ae42:	607b      	str	r3, [r7, #4]
}
 800ae44:	bf00      	nop
 800ae46:	e7fe      	b.n	800ae46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ae48:	4b0a      	ldr	r3, [pc, #40]	; (800ae74 <vPortExitCritical+0x50>)
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	3b01      	subs	r3, #1
 800ae4e:	4a09      	ldr	r2, [pc, #36]	; (800ae74 <vPortExitCritical+0x50>)
 800ae50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ae52:	4b08      	ldr	r3, [pc, #32]	; (800ae74 <vPortExitCritical+0x50>)
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d105      	bne.n	800ae66 <vPortExitCritical+0x42>
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ae5e:	683b      	ldr	r3, [r7, #0]
 800ae60:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ae64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ae66:	bf00      	nop
 800ae68:	370c      	adds	r7, #12
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae70:	4770      	bx	lr
 800ae72:	bf00      	nop
 800ae74:	20000098 	.word	0x20000098
	...

0800ae80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ae80:	f3ef 8009 	mrs	r0, PSP
 800ae84:	f3bf 8f6f 	isb	sy
 800ae88:	4b15      	ldr	r3, [pc, #84]	; (800aee0 <pxCurrentTCBConst>)
 800ae8a:	681a      	ldr	r2, [r3, #0]
 800ae8c:	f01e 0f10 	tst.w	lr, #16
 800ae90:	bf08      	it	eq
 800ae92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ae96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae9a:	6010      	str	r0, [r2, #0]
 800ae9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800aea0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800aea4:	f380 8811 	msr	BASEPRI, r0
 800aea8:	f3bf 8f4f 	dsb	sy
 800aeac:	f3bf 8f6f 	isb	sy
 800aeb0:	f7ff fcb0 	bl	800a814 <vTaskSwitchContext>
 800aeb4:	f04f 0000 	mov.w	r0, #0
 800aeb8:	f380 8811 	msr	BASEPRI, r0
 800aebc:	bc09      	pop	{r0, r3}
 800aebe:	6819      	ldr	r1, [r3, #0]
 800aec0:	6808      	ldr	r0, [r1, #0]
 800aec2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aec6:	f01e 0f10 	tst.w	lr, #16
 800aeca:	bf08      	it	eq
 800aecc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800aed0:	f380 8809 	msr	PSP, r0
 800aed4:	f3bf 8f6f 	isb	sy
 800aed8:	4770      	bx	lr
 800aeda:	bf00      	nop
 800aedc:	f3af 8000 	nop.w

0800aee0 <pxCurrentTCBConst>:
 800aee0:	200004dc 	.word	0x200004dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800aee4:	bf00      	nop
 800aee6:	bf00      	nop

0800aee8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b082      	sub	sp, #8
 800aeec:	af00      	add	r7, sp, #0
	__asm volatile
 800aeee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aef2:	f383 8811 	msr	BASEPRI, r3
 800aef6:	f3bf 8f6f 	isb	sy
 800aefa:	f3bf 8f4f 	dsb	sy
 800aefe:	607b      	str	r3, [r7, #4]
}
 800af00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800af02:	f7ff fbcf 	bl	800a6a4 <xTaskIncrementTick>
 800af06:	4603      	mov	r3, r0
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d003      	beq.n	800af14 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800af0c:	4b06      	ldr	r3, [pc, #24]	; (800af28 <SysTick_Handler+0x40>)
 800af0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af12:	601a      	str	r2, [r3, #0]
 800af14:	2300      	movs	r3, #0
 800af16:	603b      	str	r3, [r7, #0]
	__asm volatile
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	f383 8811 	msr	BASEPRI, r3
}
 800af1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800af20:	bf00      	nop
 800af22:	3708      	adds	r7, #8
 800af24:	46bd      	mov	sp, r7
 800af26:	bd80      	pop	{r7, pc}
 800af28:	e000ed04 	.word	0xe000ed04

0800af2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800af2c:	b480      	push	{r7}
 800af2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800af30:	4b0b      	ldr	r3, [pc, #44]	; (800af60 <vPortSetupTimerInterrupt+0x34>)
 800af32:	2200      	movs	r2, #0
 800af34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800af36:	4b0b      	ldr	r3, [pc, #44]	; (800af64 <vPortSetupTimerInterrupt+0x38>)
 800af38:	2200      	movs	r2, #0
 800af3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800af3c:	4b0a      	ldr	r3, [pc, #40]	; (800af68 <vPortSetupTimerInterrupt+0x3c>)
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	4a0a      	ldr	r2, [pc, #40]	; (800af6c <vPortSetupTimerInterrupt+0x40>)
 800af42:	fba2 2303 	umull	r2, r3, r2, r3
 800af46:	099b      	lsrs	r3, r3, #6
 800af48:	4a09      	ldr	r2, [pc, #36]	; (800af70 <vPortSetupTimerInterrupt+0x44>)
 800af4a:	3b01      	subs	r3, #1
 800af4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800af4e:	4b04      	ldr	r3, [pc, #16]	; (800af60 <vPortSetupTimerInterrupt+0x34>)
 800af50:	2207      	movs	r2, #7
 800af52:	601a      	str	r2, [r3, #0]
}
 800af54:	bf00      	nop
 800af56:	46bd      	mov	sp, r7
 800af58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5c:	4770      	bx	lr
 800af5e:	bf00      	nop
 800af60:	e000e010 	.word	0xe000e010
 800af64:	e000e018 	.word	0xe000e018
 800af68:	20000000 	.word	0x20000000
 800af6c:	10624dd3 	.word	0x10624dd3
 800af70:	e000e014 	.word	0xe000e014

0800af74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800af74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800af84 <vPortEnableVFP+0x10>
 800af78:	6801      	ldr	r1, [r0, #0]
 800af7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800af7e:	6001      	str	r1, [r0, #0]
 800af80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800af82:	bf00      	nop
 800af84:	e000ed88 	.word	0xe000ed88

0800af88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800af88:	b480      	push	{r7}
 800af8a:	b085      	sub	sp, #20
 800af8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800af8e:	f3ef 8305 	mrs	r3, IPSR
 800af92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	2b0f      	cmp	r3, #15
 800af98:	d914      	bls.n	800afc4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800af9a:	4a17      	ldr	r2, [pc, #92]	; (800aff8 <vPortValidateInterruptPriority+0x70>)
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	4413      	add	r3, r2
 800afa0:	781b      	ldrb	r3, [r3, #0]
 800afa2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800afa4:	4b15      	ldr	r3, [pc, #84]	; (800affc <vPortValidateInterruptPriority+0x74>)
 800afa6:	781b      	ldrb	r3, [r3, #0]
 800afa8:	7afa      	ldrb	r2, [r7, #11]
 800afaa:	429a      	cmp	r2, r3
 800afac:	d20a      	bcs.n	800afc4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800afae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afb2:	f383 8811 	msr	BASEPRI, r3
 800afb6:	f3bf 8f6f 	isb	sy
 800afba:	f3bf 8f4f 	dsb	sy
 800afbe:	607b      	str	r3, [r7, #4]
}
 800afc0:	bf00      	nop
 800afc2:	e7fe      	b.n	800afc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800afc4:	4b0e      	ldr	r3, [pc, #56]	; (800b000 <vPortValidateInterruptPriority+0x78>)
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800afcc:	4b0d      	ldr	r3, [pc, #52]	; (800b004 <vPortValidateInterruptPriority+0x7c>)
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	429a      	cmp	r2, r3
 800afd2:	d90a      	bls.n	800afea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800afd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afd8:	f383 8811 	msr	BASEPRI, r3
 800afdc:	f3bf 8f6f 	isb	sy
 800afe0:	f3bf 8f4f 	dsb	sy
 800afe4:	603b      	str	r3, [r7, #0]
}
 800afe6:	bf00      	nop
 800afe8:	e7fe      	b.n	800afe8 <vPortValidateInterruptPriority+0x60>
	}
 800afea:	bf00      	nop
 800afec:	3714      	adds	r7, #20
 800afee:	46bd      	mov	sp, r7
 800aff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff4:	4770      	bx	lr
 800aff6:	bf00      	nop
 800aff8:	e000e3f0 	.word	0xe000e3f0
 800affc:	20000608 	.word	0x20000608
 800b000:	e000ed0c 	.word	0xe000ed0c
 800b004:	2000060c 	.word	0x2000060c

0800b008 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	b08a      	sub	sp, #40	; 0x28
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b010:	2300      	movs	r3, #0
 800b012:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b014:	f7ff fa7a 	bl	800a50c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b018:	4b5d      	ldr	r3, [pc, #372]	; (800b190 <pvPortMalloc+0x188>)
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d101      	bne.n	800b024 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b020:	f000 f924 	bl	800b26c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b024:	4b5b      	ldr	r3, [pc, #364]	; (800b194 <pvPortMalloc+0x18c>)
 800b026:	681a      	ldr	r2, [r3, #0]
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	4013      	ands	r3, r2
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	f040 8093 	bne.w	800b158 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d01d      	beq.n	800b074 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b038:	2208      	movs	r2, #8
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	4413      	add	r3, r2
 800b03e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	f003 0307 	and.w	r3, r3, #7
 800b046:	2b00      	cmp	r3, #0
 800b048:	d014      	beq.n	800b074 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	f023 0307 	bic.w	r3, r3, #7
 800b050:	3308      	adds	r3, #8
 800b052:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	f003 0307 	and.w	r3, r3, #7
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d00a      	beq.n	800b074 <pvPortMalloc+0x6c>
	__asm volatile
 800b05e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b062:	f383 8811 	msr	BASEPRI, r3
 800b066:	f3bf 8f6f 	isb	sy
 800b06a:	f3bf 8f4f 	dsb	sy
 800b06e:	617b      	str	r3, [r7, #20]
}
 800b070:	bf00      	nop
 800b072:	e7fe      	b.n	800b072 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d06e      	beq.n	800b158 <pvPortMalloc+0x150>
 800b07a:	4b47      	ldr	r3, [pc, #284]	; (800b198 <pvPortMalloc+0x190>)
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	687a      	ldr	r2, [r7, #4]
 800b080:	429a      	cmp	r2, r3
 800b082:	d869      	bhi.n	800b158 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b084:	4b45      	ldr	r3, [pc, #276]	; (800b19c <pvPortMalloc+0x194>)
 800b086:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b088:	4b44      	ldr	r3, [pc, #272]	; (800b19c <pvPortMalloc+0x194>)
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b08e:	e004      	b.n	800b09a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b092:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b09a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b09c:	685b      	ldr	r3, [r3, #4]
 800b09e:	687a      	ldr	r2, [r7, #4]
 800b0a0:	429a      	cmp	r2, r3
 800b0a2:	d903      	bls.n	800b0ac <pvPortMalloc+0xa4>
 800b0a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d1f1      	bne.n	800b090 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b0ac:	4b38      	ldr	r3, [pc, #224]	; (800b190 <pvPortMalloc+0x188>)
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0b2:	429a      	cmp	r2, r3
 800b0b4:	d050      	beq.n	800b158 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b0b6:	6a3b      	ldr	r3, [r7, #32]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	2208      	movs	r2, #8
 800b0bc:	4413      	add	r3, r2
 800b0be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0c2:	681a      	ldr	r2, [r3, #0]
 800b0c4:	6a3b      	ldr	r3, [r7, #32]
 800b0c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ca:	685a      	ldr	r2, [r3, #4]
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	1ad2      	subs	r2, r2, r3
 800b0d0:	2308      	movs	r3, #8
 800b0d2:	005b      	lsls	r3, r3, #1
 800b0d4:	429a      	cmp	r2, r3
 800b0d6:	d91f      	bls.n	800b118 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b0d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	4413      	add	r3, r2
 800b0de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b0e0:	69bb      	ldr	r3, [r7, #24]
 800b0e2:	f003 0307 	and.w	r3, r3, #7
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d00a      	beq.n	800b100 <pvPortMalloc+0xf8>
	__asm volatile
 800b0ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0ee:	f383 8811 	msr	BASEPRI, r3
 800b0f2:	f3bf 8f6f 	isb	sy
 800b0f6:	f3bf 8f4f 	dsb	sy
 800b0fa:	613b      	str	r3, [r7, #16]
}
 800b0fc:	bf00      	nop
 800b0fe:	e7fe      	b.n	800b0fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b102:	685a      	ldr	r2, [r3, #4]
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	1ad2      	subs	r2, r2, r3
 800b108:	69bb      	ldr	r3, [r7, #24]
 800b10a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b10c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b10e:	687a      	ldr	r2, [r7, #4]
 800b110:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b112:	69b8      	ldr	r0, [r7, #24]
 800b114:	f000 f90c 	bl	800b330 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b118:	4b1f      	ldr	r3, [pc, #124]	; (800b198 <pvPortMalloc+0x190>)
 800b11a:	681a      	ldr	r2, [r3, #0]
 800b11c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b11e:	685b      	ldr	r3, [r3, #4]
 800b120:	1ad3      	subs	r3, r2, r3
 800b122:	4a1d      	ldr	r2, [pc, #116]	; (800b198 <pvPortMalloc+0x190>)
 800b124:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b126:	4b1c      	ldr	r3, [pc, #112]	; (800b198 <pvPortMalloc+0x190>)
 800b128:	681a      	ldr	r2, [r3, #0]
 800b12a:	4b1d      	ldr	r3, [pc, #116]	; (800b1a0 <pvPortMalloc+0x198>)
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	429a      	cmp	r2, r3
 800b130:	d203      	bcs.n	800b13a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b132:	4b19      	ldr	r3, [pc, #100]	; (800b198 <pvPortMalloc+0x190>)
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	4a1a      	ldr	r2, [pc, #104]	; (800b1a0 <pvPortMalloc+0x198>)
 800b138:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b13a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b13c:	685a      	ldr	r2, [r3, #4]
 800b13e:	4b15      	ldr	r3, [pc, #84]	; (800b194 <pvPortMalloc+0x18c>)
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	431a      	orrs	r2, r3
 800b144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b146:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b14a:	2200      	movs	r2, #0
 800b14c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b14e:	4b15      	ldr	r3, [pc, #84]	; (800b1a4 <pvPortMalloc+0x19c>)
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	3301      	adds	r3, #1
 800b154:	4a13      	ldr	r2, [pc, #76]	; (800b1a4 <pvPortMalloc+0x19c>)
 800b156:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b158:	f7ff f9e6 	bl	800a528 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800b15c:	69fb      	ldr	r3, [r7, #28]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d101      	bne.n	800b166 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800b162:	f7f5 fb10 	bl	8000786 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b166:	69fb      	ldr	r3, [r7, #28]
 800b168:	f003 0307 	and.w	r3, r3, #7
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d00a      	beq.n	800b186 <pvPortMalloc+0x17e>
	__asm volatile
 800b170:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b174:	f383 8811 	msr	BASEPRI, r3
 800b178:	f3bf 8f6f 	isb	sy
 800b17c:	f3bf 8f4f 	dsb	sy
 800b180:	60fb      	str	r3, [r7, #12]
}
 800b182:	bf00      	nop
 800b184:	e7fe      	b.n	800b184 <pvPortMalloc+0x17c>
	return pvReturn;
 800b186:	69fb      	ldr	r3, [r7, #28]
}
 800b188:	4618      	mov	r0, r3
 800b18a:	3728      	adds	r7, #40	; 0x28
 800b18c:	46bd      	mov	sp, r7
 800b18e:	bd80      	pop	{r7, pc}
 800b190:	2000f618 	.word	0x2000f618
 800b194:	2000f62c 	.word	0x2000f62c
 800b198:	2000f61c 	.word	0x2000f61c
 800b19c:	2000f610 	.word	0x2000f610
 800b1a0:	2000f620 	.word	0x2000f620
 800b1a4:	2000f624 	.word	0x2000f624

0800b1a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b086      	sub	sp, #24
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d04d      	beq.n	800b256 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b1ba:	2308      	movs	r3, #8
 800b1bc:	425b      	negs	r3, r3
 800b1be:	697a      	ldr	r2, [r7, #20]
 800b1c0:	4413      	add	r3, r2
 800b1c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b1c4:	697b      	ldr	r3, [r7, #20]
 800b1c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b1c8:	693b      	ldr	r3, [r7, #16]
 800b1ca:	685a      	ldr	r2, [r3, #4]
 800b1cc:	4b24      	ldr	r3, [pc, #144]	; (800b260 <vPortFree+0xb8>)
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	4013      	ands	r3, r2
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d10a      	bne.n	800b1ec <vPortFree+0x44>
	__asm volatile
 800b1d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1da:	f383 8811 	msr	BASEPRI, r3
 800b1de:	f3bf 8f6f 	isb	sy
 800b1e2:	f3bf 8f4f 	dsb	sy
 800b1e6:	60fb      	str	r3, [r7, #12]
}
 800b1e8:	bf00      	nop
 800b1ea:	e7fe      	b.n	800b1ea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b1ec:	693b      	ldr	r3, [r7, #16]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d00a      	beq.n	800b20a <vPortFree+0x62>
	__asm volatile
 800b1f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1f8:	f383 8811 	msr	BASEPRI, r3
 800b1fc:	f3bf 8f6f 	isb	sy
 800b200:	f3bf 8f4f 	dsb	sy
 800b204:	60bb      	str	r3, [r7, #8]
}
 800b206:	bf00      	nop
 800b208:	e7fe      	b.n	800b208 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b20a:	693b      	ldr	r3, [r7, #16]
 800b20c:	685a      	ldr	r2, [r3, #4]
 800b20e:	4b14      	ldr	r3, [pc, #80]	; (800b260 <vPortFree+0xb8>)
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	4013      	ands	r3, r2
 800b214:	2b00      	cmp	r3, #0
 800b216:	d01e      	beq.n	800b256 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b218:	693b      	ldr	r3, [r7, #16]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d11a      	bne.n	800b256 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b220:	693b      	ldr	r3, [r7, #16]
 800b222:	685a      	ldr	r2, [r3, #4]
 800b224:	4b0e      	ldr	r3, [pc, #56]	; (800b260 <vPortFree+0xb8>)
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	43db      	mvns	r3, r3
 800b22a:	401a      	ands	r2, r3
 800b22c:	693b      	ldr	r3, [r7, #16]
 800b22e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b230:	f7ff f96c 	bl	800a50c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b234:	693b      	ldr	r3, [r7, #16]
 800b236:	685a      	ldr	r2, [r3, #4]
 800b238:	4b0a      	ldr	r3, [pc, #40]	; (800b264 <vPortFree+0xbc>)
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	4413      	add	r3, r2
 800b23e:	4a09      	ldr	r2, [pc, #36]	; (800b264 <vPortFree+0xbc>)
 800b240:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b242:	6938      	ldr	r0, [r7, #16]
 800b244:	f000 f874 	bl	800b330 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b248:	4b07      	ldr	r3, [pc, #28]	; (800b268 <vPortFree+0xc0>)
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	3301      	adds	r3, #1
 800b24e:	4a06      	ldr	r2, [pc, #24]	; (800b268 <vPortFree+0xc0>)
 800b250:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b252:	f7ff f969 	bl	800a528 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b256:	bf00      	nop
 800b258:	3718      	adds	r7, #24
 800b25a:	46bd      	mov	sp, r7
 800b25c:	bd80      	pop	{r7, pc}
 800b25e:	bf00      	nop
 800b260:	2000f62c 	.word	0x2000f62c
 800b264:	2000f61c 	.word	0x2000f61c
 800b268:	2000f628 	.word	0x2000f628

0800b26c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b26c:	b480      	push	{r7}
 800b26e:	b085      	sub	sp, #20
 800b270:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b272:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800b276:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b278:	4b27      	ldr	r3, [pc, #156]	; (800b318 <prvHeapInit+0xac>)
 800b27a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	f003 0307 	and.w	r3, r3, #7
 800b282:	2b00      	cmp	r3, #0
 800b284:	d00c      	beq.n	800b2a0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	3307      	adds	r3, #7
 800b28a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	f023 0307 	bic.w	r3, r3, #7
 800b292:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b294:	68ba      	ldr	r2, [r7, #8]
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	1ad3      	subs	r3, r2, r3
 800b29a:	4a1f      	ldr	r2, [pc, #124]	; (800b318 <prvHeapInit+0xac>)
 800b29c:	4413      	add	r3, r2
 800b29e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b2a4:	4a1d      	ldr	r2, [pc, #116]	; (800b31c <prvHeapInit+0xb0>)
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b2aa:	4b1c      	ldr	r3, [pc, #112]	; (800b31c <prvHeapInit+0xb0>)
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	68ba      	ldr	r2, [r7, #8]
 800b2b4:	4413      	add	r3, r2
 800b2b6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b2b8:	2208      	movs	r2, #8
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	1a9b      	subs	r3, r3, r2
 800b2be:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	f023 0307 	bic.w	r3, r3, #7
 800b2c6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	4a15      	ldr	r2, [pc, #84]	; (800b320 <prvHeapInit+0xb4>)
 800b2cc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b2ce:	4b14      	ldr	r3, [pc, #80]	; (800b320 <prvHeapInit+0xb4>)
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b2d6:	4b12      	ldr	r3, [pc, #72]	; (800b320 <prvHeapInit+0xb4>)
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	2200      	movs	r2, #0
 800b2dc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b2e2:	683b      	ldr	r3, [r7, #0]
 800b2e4:	68fa      	ldr	r2, [r7, #12]
 800b2e6:	1ad2      	subs	r2, r2, r3
 800b2e8:	683b      	ldr	r3, [r7, #0]
 800b2ea:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b2ec:	4b0c      	ldr	r3, [pc, #48]	; (800b320 <prvHeapInit+0xb4>)
 800b2ee:	681a      	ldr	r2, [r3, #0]
 800b2f0:	683b      	ldr	r3, [r7, #0]
 800b2f2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b2f4:	683b      	ldr	r3, [r7, #0]
 800b2f6:	685b      	ldr	r3, [r3, #4]
 800b2f8:	4a0a      	ldr	r2, [pc, #40]	; (800b324 <prvHeapInit+0xb8>)
 800b2fa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	685b      	ldr	r3, [r3, #4]
 800b300:	4a09      	ldr	r2, [pc, #36]	; (800b328 <prvHeapInit+0xbc>)
 800b302:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b304:	4b09      	ldr	r3, [pc, #36]	; (800b32c <prvHeapInit+0xc0>)
 800b306:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b30a:	601a      	str	r2, [r3, #0]
}
 800b30c:	bf00      	nop
 800b30e:	3714      	adds	r7, #20
 800b310:	46bd      	mov	sp, r7
 800b312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b316:	4770      	bx	lr
 800b318:	20000610 	.word	0x20000610
 800b31c:	2000f610 	.word	0x2000f610
 800b320:	2000f618 	.word	0x2000f618
 800b324:	2000f620 	.word	0x2000f620
 800b328:	2000f61c 	.word	0x2000f61c
 800b32c:	2000f62c 	.word	0x2000f62c

0800b330 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b330:	b480      	push	{r7}
 800b332:	b085      	sub	sp, #20
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b338:	4b28      	ldr	r3, [pc, #160]	; (800b3dc <prvInsertBlockIntoFreeList+0xac>)
 800b33a:	60fb      	str	r3, [r7, #12]
 800b33c:	e002      	b.n	800b344 <prvInsertBlockIntoFreeList+0x14>
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	60fb      	str	r3, [r7, #12]
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	687a      	ldr	r2, [r7, #4]
 800b34a:	429a      	cmp	r2, r3
 800b34c:	d8f7      	bhi.n	800b33e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	685b      	ldr	r3, [r3, #4]
 800b356:	68ba      	ldr	r2, [r7, #8]
 800b358:	4413      	add	r3, r2
 800b35a:	687a      	ldr	r2, [r7, #4]
 800b35c:	429a      	cmp	r2, r3
 800b35e:	d108      	bne.n	800b372 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	685a      	ldr	r2, [r3, #4]
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	685b      	ldr	r3, [r3, #4]
 800b368:	441a      	add	r2, r3
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	685b      	ldr	r3, [r3, #4]
 800b37a:	68ba      	ldr	r2, [r7, #8]
 800b37c:	441a      	add	r2, r3
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	429a      	cmp	r2, r3
 800b384:	d118      	bne.n	800b3b8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	681a      	ldr	r2, [r3, #0]
 800b38a:	4b15      	ldr	r3, [pc, #84]	; (800b3e0 <prvInsertBlockIntoFreeList+0xb0>)
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	429a      	cmp	r2, r3
 800b390:	d00d      	beq.n	800b3ae <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	685a      	ldr	r2, [r3, #4]
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	685b      	ldr	r3, [r3, #4]
 800b39c:	441a      	add	r2, r3
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	681a      	ldr	r2, [r3, #0]
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	601a      	str	r2, [r3, #0]
 800b3ac:	e008      	b.n	800b3c0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b3ae:	4b0c      	ldr	r3, [pc, #48]	; (800b3e0 <prvInsertBlockIntoFreeList+0xb0>)
 800b3b0:	681a      	ldr	r2, [r3, #0]
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	601a      	str	r2, [r3, #0]
 800b3b6:	e003      	b.n	800b3c0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	681a      	ldr	r2, [r3, #0]
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b3c0:	68fa      	ldr	r2, [r7, #12]
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	429a      	cmp	r2, r3
 800b3c6:	d002      	beq.n	800b3ce <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	687a      	ldr	r2, [r7, #4]
 800b3cc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b3ce:	bf00      	nop
 800b3d0:	3714      	adds	r7, #20
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d8:	4770      	bx	lr
 800b3da:	bf00      	nop
 800b3dc:	2000f610 	.word	0x2000f610
 800b3e0:	2000f618 	.word	0x2000f618

0800b3e4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	4912      	ldr	r1, [pc, #72]	; (800b434 <MX_USB_DEVICE_Init+0x50>)
 800b3ec:	4812      	ldr	r0, [pc, #72]	; (800b438 <MX_USB_DEVICE_Init+0x54>)
 800b3ee:	f7fd f9fb 	bl	80087e8 <USBD_Init>
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d001      	beq.n	800b3fc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b3f8:	f7f5 fc56 	bl	8000ca8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b3fc:	490f      	ldr	r1, [pc, #60]	; (800b43c <MX_USB_DEVICE_Init+0x58>)
 800b3fe:	480e      	ldr	r0, [pc, #56]	; (800b438 <MX_USB_DEVICE_Init+0x54>)
 800b400:	f7fd fa22 	bl	8008848 <USBD_RegisterClass>
 800b404:	4603      	mov	r3, r0
 800b406:	2b00      	cmp	r3, #0
 800b408:	d001      	beq.n	800b40e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b40a:	f7f5 fc4d 	bl	8000ca8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b40e:	490c      	ldr	r1, [pc, #48]	; (800b440 <MX_USB_DEVICE_Init+0x5c>)
 800b410:	4809      	ldr	r0, [pc, #36]	; (800b438 <MX_USB_DEVICE_Init+0x54>)
 800b412:	f7fd f919 	bl	8008648 <USBD_CDC_RegisterInterface>
 800b416:	4603      	mov	r3, r0
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d001      	beq.n	800b420 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b41c:	f7f5 fc44 	bl	8000ca8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b420:	4805      	ldr	r0, [pc, #20]	; (800b438 <MX_USB_DEVICE_Init+0x54>)
 800b422:	f7fd fa47 	bl	80088b4 <USBD_Start>
 800b426:	4603      	mov	r3, r0
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d001      	beq.n	800b430 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b42c:	f7f5 fc3c 	bl	8000ca8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b430:	bf00      	nop
 800b432:	bd80      	pop	{r7, pc}
 800b434:	200000b0 	.word	0x200000b0
 800b438:	2000f630 	.word	0x2000f630
 800b43c:	20000018 	.word	0x20000018
 800b440:	2000009c 	.word	0x2000009c

0800b444 <CDC_Init_FS>:
/* Private functions ---------------------------------------------------------*/
/**
 * @brief  Initializes the CDC media low layer over the FS USB IP
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Init_FS(void) {
 800b444:	b580      	push	{r7, lr}
 800b446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b448:	2200      	movs	r2, #0
 800b44a:	4905      	ldr	r1, [pc, #20]	; (800b460 <CDC_Init_FS+0x1c>)
 800b44c:	4805      	ldr	r0, [pc, #20]	; (800b464 <CDC_Init_FS+0x20>)
 800b44e:	f7fd f915 	bl	800867c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b452:	4905      	ldr	r1, [pc, #20]	; (800b468 <CDC_Init_FS+0x24>)
 800b454:	4803      	ldr	r0, [pc, #12]	; (800b464 <CDC_Init_FS+0x20>)
 800b456:	f7fd f933 	bl	80086c0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b45a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b45c:	4618      	mov	r0, r3
 800b45e:	bd80      	pop	{r7, pc}
 800b460:	2001010c 	.word	0x2001010c
 800b464:	2000f630 	.word	0x2000f630
 800b468:	2000f90c 	.word	0x2000f90c

0800b46c <CDC_DeInit_FS>:

/**
 * @brief  DeInitializes the CDC media low layer
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_DeInit_FS(void) {
 800b46c:	b480      	push	{r7}
 800b46e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b470:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b472:	4618      	mov	r0, r3
 800b474:	46bd      	mov	sp, r7
 800b476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47a:	4770      	bx	lr

0800b47c <CDC_Control_FS>:
 * @param  pbuf: Buffer containing command data (request parameters)
 * @param  length: Number of data to be sent (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else
 * USBD_FAIL
 */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t *pbuf, uint16_t length) {
 800b47c:	b480      	push	{r7}
 800b47e:	b083      	sub	sp, #12
 800b480:	af00      	add	r7, sp, #0
 800b482:	4603      	mov	r3, r0
 800b484:	6039      	str	r1, [r7, #0]
 800b486:	71fb      	strb	r3, [r7, #7]
 800b488:	4613      	mov	r3, r2
 800b48a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch (cmd) {
 800b48c:	79fb      	ldrb	r3, [r7, #7]
 800b48e:	2b23      	cmp	r3, #35	; 0x23
 800b490:	d84a      	bhi.n	800b528 <CDC_Control_FS+0xac>
 800b492:	a201      	add	r2, pc, #4	; (adr r2, 800b498 <CDC_Control_FS+0x1c>)
 800b494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b498:	0800b529 	.word	0x0800b529
 800b49c:	0800b529 	.word	0x0800b529
 800b4a0:	0800b529 	.word	0x0800b529
 800b4a4:	0800b529 	.word	0x0800b529
 800b4a8:	0800b529 	.word	0x0800b529
 800b4ac:	0800b529 	.word	0x0800b529
 800b4b0:	0800b529 	.word	0x0800b529
 800b4b4:	0800b529 	.word	0x0800b529
 800b4b8:	0800b529 	.word	0x0800b529
 800b4bc:	0800b529 	.word	0x0800b529
 800b4c0:	0800b529 	.word	0x0800b529
 800b4c4:	0800b529 	.word	0x0800b529
 800b4c8:	0800b529 	.word	0x0800b529
 800b4cc:	0800b529 	.word	0x0800b529
 800b4d0:	0800b529 	.word	0x0800b529
 800b4d4:	0800b529 	.word	0x0800b529
 800b4d8:	0800b529 	.word	0x0800b529
 800b4dc:	0800b529 	.word	0x0800b529
 800b4e0:	0800b529 	.word	0x0800b529
 800b4e4:	0800b529 	.word	0x0800b529
 800b4e8:	0800b529 	.word	0x0800b529
 800b4ec:	0800b529 	.word	0x0800b529
 800b4f0:	0800b529 	.word	0x0800b529
 800b4f4:	0800b529 	.word	0x0800b529
 800b4f8:	0800b529 	.word	0x0800b529
 800b4fc:	0800b529 	.word	0x0800b529
 800b500:	0800b529 	.word	0x0800b529
 800b504:	0800b529 	.word	0x0800b529
 800b508:	0800b529 	.word	0x0800b529
 800b50c:	0800b529 	.word	0x0800b529
 800b510:	0800b529 	.word	0x0800b529
 800b514:	0800b529 	.word	0x0800b529
 800b518:	0800b529 	.word	0x0800b529
 800b51c:	0800b529 	.word	0x0800b529
 800b520:	0800b529 	.word	0x0800b529
 800b524:	0800b529 	.word	0x0800b529
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b528:	bf00      	nop
  }

  return (USBD_OK);
 800b52a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b52c:	4618      	mov	r0, r3
 800b52e:	370c      	adds	r7, #12
 800b530:	46bd      	mov	sp, r7
 800b532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b536:	4770      	bx	lr

0800b538 <CDC_Receive_FS>:
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else
 * USBD_FAIL
 */
static int8_t CDC_Receive_FS(uint8_t *Buf, uint32_t *Len) {
 800b538:	b580      	push	{r7, lr}
 800b53a:	b082      	sub	sp, #8
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
 800b540:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  usb_vcp_receive_processing(Buf, Len);
 800b542:	6839      	ldr	r1, [r7, #0]
 800b544:	6878      	ldr	r0, [r7, #4]
 800b546:	f001 f889 	bl	800c65c <usb_vcp_receive_processing>
  return (USBD_OK);
 800b54a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b54c:	4618      	mov	r0, r3
 800b54e:	3708      	adds	r7, #8
 800b550:	46bd      	mov	sp, r7
 800b552:	bd80      	pop	{r7, pc}

0800b554 <CDC_TransmitCplt_FS>:
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else
 * USBD_FAIL
 */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum) {
 800b554:	b580      	push	{r7, lr}
 800b556:	b086      	sub	sp, #24
 800b558:	af00      	add	r7, sp, #0
 800b55a:	60f8      	str	r0, [r7, #12]
 800b55c:	60b9      	str	r1, [r7, #8]
 800b55e:	4613      	mov	r3, r2
 800b560:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b562:	2300      	movs	r3, #0
 800b564:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  result = usb_vcp_transmit_callback_processing(Buf, Len);
 800b566:	68b9      	ldr	r1, [r7, #8]
 800b568:	68f8      	ldr	r0, [r7, #12]
 800b56a:	f001 f8a3 	bl	800c6b4 <usb_vcp_transmit_callback_processing>
 800b56e:	4603      	mov	r3, r0
 800b570:	75fb      	strb	r3, [r7, #23]

  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b572:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b576:	4618      	mov	r0, r3
 800b578:	3718      	adds	r7, #24
 800b57a:	46bd      	mov	sp, r7
 800b57c:	bd80      	pop	{r7, pc}
	...

0800b580 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b580:	b480      	push	{r7}
 800b582:	b083      	sub	sp, #12
 800b584:	af00      	add	r7, sp, #0
 800b586:	4603      	mov	r3, r0
 800b588:	6039      	str	r1, [r7, #0]
 800b58a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b58c:	683b      	ldr	r3, [r7, #0]
 800b58e:	2212      	movs	r2, #18
 800b590:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b592:	4b03      	ldr	r3, [pc, #12]	; (800b5a0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b594:	4618      	mov	r0, r3
 800b596:	370c      	adds	r7, #12
 800b598:	46bd      	mov	sp, r7
 800b59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59e:	4770      	bx	lr
 800b5a0:	200000cc 	.word	0x200000cc

0800b5a4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5a4:	b480      	push	{r7}
 800b5a6:	b083      	sub	sp, #12
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	6039      	str	r1, [r7, #0]
 800b5ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b5b0:	683b      	ldr	r3, [r7, #0]
 800b5b2:	2204      	movs	r2, #4
 800b5b4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b5b6:	4b03      	ldr	r3, [pc, #12]	; (800b5c4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	370c      	adds	r7, #12
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c2:	4770      	bx	lr
 800b5c4:	200000e0 	.word	0x200000e0

0800b5c8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b082      	sub	sp, #8
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	6039      	str	r1, [r7, #0]
 800b5d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b5d4:	79fb      	ldrb	r3, [r7, #7]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d105      	bne.n	800b5e6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b5da:	683a      	ldr	r2, [r7, #0]
 800b5dc:	4907      	ldr	r1, [pc, #28]	; (800b5fc <USBD_FS_ProductStrDescriptor+0x34>)
 800b5de:	4808      	ldr	r0, [pc, #32]	; (800b600 <USBD_FS_ProductStrDescriptor+0x38>)
 800b5e0:	f7fe fb1a 	bl	8009c18 <USBD_GetString>
 800b5e4:	e004      	b.n	800b5f0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b5e6:	683a      	ldr	r2, [r7, #0]
 800b5e8:	4904      	ldr	r1, [pc, #16]	; (800b5fc <USBD_FS_ProductStrDescriptor+0x34>)
 800b5ea:	4805      	ldr	r0, [pc, #20]	; (800b600 <USBD_FS_ProductStrDescriptor+0x38>)
 800b5ec:	f7fe fb14 	bl	8009c18 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b5f0:	4b02      	ldr	r3, [pc, #8]	; (800b5fc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	3708      	adds	r7, #8
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	bd80      	pop	{r7, pc}
 800b5fa:	bf00      	nop
 800b5fc:	2001090c 	.word	0x2001090c
 800b600:	0800ca88 	.word	0x0800ca88

0800b604 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b082      	sub	sp, #8
 800b608:	af00      	add	r7, sp, #0
 800b60a:	4603      	mov	r3, r0
 800b60c:	6039      	str	r1, [r7, #0]
 800b60e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b610:	683a      	ldr	r2, [r7, #0]
 800b612:	4904      	ldr	r1, [pc, #16]	; (800b624 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b614:	4804      	ldr	r0, [pc, #16]	; (800b628 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b616:	f7fe faff 	bl	8009c18 <USBD_GetString>
  return USBD_StrDesc;
 800b61a:	4b02      	ldr	r3, [pc, #8]	; (800b624 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b61c:	4618      	mov	r0, r3
 800b61e:	3708      	adds	r7, #8
 800b620:	46bd      	mov	sp, r7
 800b622:	bd80      	pop	{r7, pc}
 800b624:	2001090c 	.word	0x2001090c
 800b628:	0800caa0 	.word	0x0800caa0

0800b62c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b082      	sub	sp, #8
 800b630:	af00      	add	r7, sp, #0
 800b632:	4603      	mov	r3, r0
 800b634:	6039      	str	r1, [r7, #0]
 800b636:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b638:	683b      	ldr	r3, [r7, #0]
 800b63a:	221a      	movs	r2, #26
 800b63c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b63e:	f000 f843 	bl	800b6c8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b642:	4b02      	ldr	r3, [pc, #8]	; (800b64c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b644:	4618      	mov	r0, r3
 800b646:	3708      	adds	r7, #8
 800b648:	46bd      	mov	sp, r7
 800b64a:	bd80      	pop	{r7, pc}
 800b64c:	200000e4 	.word	0x200000e4

0800b650 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b082      	sub	sp, #8
 800b654:	af00      	add	r7, sp, #0
 800b656:	4603      	mov	r3, r0
 800b658:	6039      	str	r1, [r7, #0]
 800b65a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b65c:	79fb      	ldrb	r3, [r7, #7]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d105      	bne.n	800b66e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b662:	683a      	ldr	r2, [r7, #0]
 800b664:	4907      	ldr	r1, [pc, #28]	; (800b684 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b666:	4808      	ldr	r0, [pc, #32]	; (800b688 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b668:	f7fe fad6 	bl	8009c18 <USBD_GetString>
 800b66c:	e004      	b.n	800b678 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b66e:	683a      	ldr	r2, [r7, #0]
 800b670:	4904      	ldr	r1, [pc, #16]	; (800b684 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b672:	4805      	ldr	r0, [pc, #20]	; (800b688 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b674:	f7fe fad0 	bl	8009c18 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b678:	4b02      	ldr	r3, [pc, #8]	; (800b684 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b67a:	4618      	mov	r0, r3
 800b67c:	3708      	adds	r7, #8
 800b67e:	46bd      	mov	sp, r7
 800b680:	bd80      	pop	{r7, pc}
 800b682:	bf00      	nop
 800b684:	2001090c 	.word	0x2001090c
 800b688:	0800cab4 	.word	0x0800cab4

0800b68c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b082      	sub	sp, #8
 800b690:	af00      	add	r7, sp, #0
 800b692:	4603      	mov	r3, r0
 800b694:	6039      	str	r1, [r7, #0]
 800b696:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b698:	79fb      	ldrb	r3, [r7, #7]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d105      	bne.n	800b6aa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b69e:	683a      	ldr	r2, [r7, #0]
 800b6a0:	4907      	ldr	r1, [pc, #28]	; (800b6c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b6a2:	4808      	ldr	r0, [pc, #32]	; (800b6c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b6a4:	f7fe fab8 	bl	8009c18 <USBD_GetString>
 800b6a8:	e004      	b.n	800b6b4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b6aa:	683a      	ldr	r2, [r7, #0]
 800b6ac:	4904      	ldr	r1, [pc, #16]	; (800b6c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b6ae:	4805      	ldr	r0, [pc, #20]	; (800b6c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b6b0:	f7fe fab2 	bl	8009c18 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b6b4:	4b02      	ldr	r3, [pc, #8]	; (800b6c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	3708      	adds	r7, #8
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	bd80      	pop	{r7, pc}
 800b6be:	bf00      	nop
 800b6c0:	2001090c 	.word	0x2001090c
 800b6c4:	0800cac0 	.word	0x0800cac0

0800b6c8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b084      	sub	sp, #16
 800b6cc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b6ce:	4b0f      	ldr	r3, [pc, #60]	; (800b70c <Get_SerialNum+0x44>)
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b6d4:	4b0e      	ldr	r3, [pc, #56]	; (800b710 <Get_SerialNum+0x48>)
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b6da:	4b0e      	ldr	r3, [pc, #56]	; (800b714 <Get_SerialNum+0x4c>)
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b6e0:	68fa      	ldr	r2, [r7, #12]
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	4413      	add	r3, r2
 800b6e6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d009      	beq.n	800b702 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b6ee:	2208      	movs	r2, #8
 800b6f0:	4909      	ldr	r1, [pc, #36]	; (800b718 <Get_SerialNum+0x50>)
 800b6f2:	68f8      	ldr	r0, [r7, #12]
 800b6f4:	f000 f814 	bl	800b720 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b6f8:	2204      	movs	r2, #4
 800b6fa:	4908      	ldr	r1, [pc, #32]	; (800b71c <Get_SerialNum+0x54>)
 800b6fc:	68b8      	ldr	r0, [r7, #8]
 800b6fe:	f000 f80f 	bl	800b720 <IntToUnicode>
  }
}
 800b702:	bf00      	nop
 800b704:	3710      	adds	r7, #16
 800b706:	46bd      	mov	sp, r7
 800b708:	bd80      	pop	{r7, pc}
 800b70a:	bf00      	nop
 800b70c:	1fff7a10 	.word	0x1fff7a10
 800b710:	1fff7a14 	.word	0x1fff7a14
 800b714:	1fff7a18 	.word	0x1fff7a18
 800b718:	200000e6 	.word	0x200000e6
 800b71c:	200000f6 	.word	0x200000f6

0800b720 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b720:	b480      	push	{r7}
 800b722:	b087      	sub	sp, #28
 800b724:	af00      	add	r7, sp, #0
 800b726:	60f8      	str	r0, [r7, #12]
 800b728:	60b9      	str	r1, [r7, #8]
 800b72a:	4613      	mov	r3, r2
 800b72c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b72e:	2300      	movs	r3, #0
 800b730:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b732:	2300      	movs	r3, #0
 800b734:	75fb      	strb	r3, [r7, #23]
 800b736:	e027      	b.n	800b788 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	0f1b      	lsrs	r3, r3, #28
 800b73c:	2b09      	cmp	r3, #9
 800b73e:	d80b      	bhi.n	800b758 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	0f1b      	lsrs	r3, r3, #28
 800b744:	b2da      	uxtb	r2, r3
 800b746:	7dfb      	ldrb	r3, [r7, #23]
 800b748:	005b      	lsls	r3, r3, #1
 800b74a:	4619      	mov	r1, r3
 800b74c:	68bb      	ldr	r3, [r7, #8]
 800b74e:	440b      	add	r3, r1
 800b750:	3230      	adds	r2, #48	; 0x30
 800b752:	b2d2      	uxtb	r2, r2
 800b754:	701a      	strb	r2, [r3, #0]
 800b756:	e00a      	b.n	800b76e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	0f1b      	lsrs	r3, r3, #28
 800b75c:	b2da      	uxtb	r2, r3
 800b75e:	7dfb      	ldrb	r3, [r7, #23]
 800b760:	005b      	lsls	r3, r3, #1
 800b762:	4619      	mov	r1, r3
 800b764:	68bb      	ldr	r3, [r7, #8]
 800b766:	440b      	add	r3, r1
 800b768:	3237      	adds	r2, #55	; 0x37
 800b76a:	b2d2      	uxtb	r2, r2
 800b76c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	011b      	lsls	r3, r3, #4
 800b772:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b774:	7dfb      	ldrb	r3, [r7, #23]
 800b776:	005b      	lsls	r3, r3, #1
 800b778:	3301      	adds	r3, #1
 800b77a:	68ba      	ldr	r2, [r7, #8]
 800b77c:	4413      	add	r3, r2
 800b77e:	2200      	movs	r2, #0
 800b780:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b782:	7dfb      	ldrb	r3, [r7, #23]
 800b784:	3301      	adds	r3, #1
 800b786:	75fb      	strb	r3, [r7, #23]
 800b788:	7dfa      	ldrb	r2, [r7, #23]
 800b78a:	79fb      	ldrb	r3, [r7, #7]
 800b78c:	429a      	cmp	r2, r3
 800b78e:	d3d3      	bcc.n	800b738 <IntToUnicode+0x18>
  }
}
 800b790:	bf00      	nop
 800b792:	bf00      	nop
 800b794:	371c      	adds	r7, #28
 800b796:	46bd      	mov	sp, r7
 800b798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79c:	4770      	bx	lr
	...

0800b7a0 <HAL_PCD_MspInit>:
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b08a      	sub	sp, #40	; 0x28
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b7a8:	f107 0314 	add.w	r3, r7, #20
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	601a      	str	r2, [r3, #0]
 800b7b0:	605a      	str	r2, [r3, #4]
 800b7b2:	609a      	str	r2, [r3, #8]
 800b7b4:	60da      	str	r2, [r3, #12]
 800b7b6:	611a      	str	r2, [r3, #16]
  {
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b7c0:	d13a      	bne.n	800b838 <HAL_PCD_MspInit+0x98>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
    /**USB_OTG_FS GPIO Configuration
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	613b      	str	r3, [r7, #16]
 800b7c6:	4b1e      	ldr	r3, [pc, #120]	; (800b840 <HAL_PCD_MspInit+0xa0>)
 800b7c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7ca:	4a1d      	ldr	r2, [pc, #116]	; (800b840 <HAL_PCD_MspInit+0xa0>)
 800b7cc:	f043 0301 	orr.w	r3, r3, #1
 800b7d0:	6313      	str	r3, [r2, #48]	; 0x30
 800b7d2:	4b1b      	ldr	r3, [pc, #108]	; (800b840 <HAL_PCD_MspInit+0xa0>)
 800b7d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7d6:	f003 0301 	and.w	r3, r3, #1
 800b7da:	613b      	str	r3, [r7, #16]
 800b7dc:	693b      	ldr	r3, [r7, #16]
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b7de:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b7e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b7e4:	2302      	movs	r3, #2
 800b7e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b7ec:	2303      	movs	r3, #3
 800b7ee:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b7f0:	230a      	movs	r3, #10
 800b7f2:	627b      	str	r3, [r7, #36]	; 0x24

 800b7f4:	f107 0314 	add.w	r3, r7, #20
 800b7f8:	4619      	mov	r1, r3
 800b7fa:	4812      	ldr	r0, [pc, #72]	; (800b844 <HAL_PCD_MspInit+0xa4>)
 800b7fc:	f7f6 fff8 	bl	80027f0 <HAL_GPIO_Init>
    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();

 800b800:	4b0f      	ldr	r3, [pc, #60]	; (800b840 <HAL_PCD_MspInit+0xa0>)
 800b802:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b804:	4a0e      	ldr	r2, [pc, #56]	; (800b840 <HAL_PCD_MspInit+0xa0>)
 800b806:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b80a:	6353      	str	r3, [r2, #52]	; 0x34
 800b80c:	2300      	movs	r3, #0
 800b80e:	60fb      	str	r3, [r7, #12]
 800b810:	4b0b      	ldr	r3, [pc, #44]	; (800b840 <HAL_PCD_MspInit+0xa0>)
 800b812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b814:	4a0a      	ldr	r2, [pc, #40]	; (800b840 <HAL_PCD_MspInit+0xa0>)
 800b816:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b81a:	6453      	str	r3, [r2, #68]	; 0x44
 800b81c:	4b08      	ldr	r3, [pc, #32]	; (800b840 <HAL_PCD_MspInit+0xa0>)
 800b81e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b820:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b824:	60fb      	str	r3, [r7, #12]
 800b826:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b828:	2200      	movs	r2, #0
 800b82a:	2105      	movs	r1, #5
 800b82c:	2043      	movs	r0, #67	; 0x43
 800b82e:	f7f6 fc39 	bl	80020a4 <HAL_NVIC_SetPriority>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */
 800b832:	2043      	movs	r0, #67	; 0x43
 800b834:	f7f6 fc52 	bl	80020dc <HAL_NVIC_EnableIRQ>

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}

 800b838:	bf00      	nop
 800b83a:	3728      	adds	r7, #40	; 0x28
 800b83c:	46bd      	mov	sp, r7
 800b83e:	bd80      	pop	{r7, pc}
 800b840:	40023800 	.word	0x40023800
 800b844:	40020000 	.word	0x40020000

0800b848 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b848:	b580      	push	{r7, lr}
 800b84a:	b082      	sub	sp, #8
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
}
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800b85c:	4619      	mov	r1, r3
 800b85e:	4610      	mov	r0, r2
 800b860:	f7fd f875 	bl	800894e <USBD_LL_SetupStage>

 800b864:	bf00      	nop
 800b866:	3708      	adds	r7, #8
 800b868:	46bd      	mov	sp, r7
 800b86a:	bd80      	pop	{r7, pc}

0800b86c <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b082      	sub	sp, #8
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]
 800b874:	460b      	mov	r3, r1
 800b876:	70fb      	strb	r3, [r7, #3]
}
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800b87e:	78fa      	ldrb	r2, [r7, #3]
 800b880:	6879      	ldr	r1, [r7, #4]
 800b882:	4613      	mov	r3, r2
 800b884:	00db      	lsls	r3, r3, #3
 800b886:	4413      	add	r3, r2
 800b888:	009b      	lsls	r3, r3, #2
 800b88a:	440b      	add	r3, r1
 800b88c:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800b890:	681a      	ldr	r2, [r3, #0]
 800b892:	78fb      	ldrb	r3, [r7, #3]
 800b894:	4619      	mov	r1, r3
 800b896:	f7fd f8af 	bl	80089f8 <USBD_LL_DataOutStage>

 800b89a:	bf00      	nop
 800b89c:	3708      	adds	r7, #8
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	bd80      	pop	{r7, pc}

0800b8a2 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b8a2:	b580      	push	{r7, lr}
 800b8a4:	b082      	sub	sp, #8
 800b8a6:	af00      	add	r7, sp, #0
 800b8a8:	6078      	str	r0, [r7, #4]
 800b8aa:	460b      	mov	r3, r1
 800b8ac:	70fb      	strb	r3, [r7, #3]
}
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800b8b4:	78fa      	ldrb	r2, [r7, #3]
 800b8b6:	6879      	ldr	r1, [r7, #4]
 800b8b8:	4613      	mov	r3, r2
 800b8ba:	00db      	lsls	r3, r3, #3
 800b8bc:	4413      	add	r3, r2
 800b8be:	009b      	lsls	r3, r3, #2
 800b8c0:	440b      	add	r3, r1
 800b8c2:	3320      	adds	r3, #32
 800b8c4:	681a      	ldr	r2, [r3, #0]
 800b8c6:	78fb      	ldrb	r3, [r7, #3]
 800b8c8:	4619      	mov	r1, r3
 800b8ca:	f7fd f948 	bl	8008b5e <USBD_LL_DataInStage>

 800b8ce:	bf00      	nop
 800b8d0:	3708      	adds	r7, #8
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	bd80      	pop	{r7, pc}

0800b8d6 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b8d6:	b580      	push	{r7, lr}
 800b8d8:	b082      	sub	sp, #8
 800b8da:	af00      	add	r7, sp, #0
 800b8dc:	6078      	str	r0, [r7, #4]
}
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	f7fd fa82 	bl	8008dee <USBD_LL_SOF>

 800b8ea:	bf00      	nop
 800b8ec:	3708      	adds	r7, #8
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	bd80      	pop	{r7, pc}

0800b8f2 <HAL_PCD_ResetCallback>:
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b8f2:	b580      	push	{r7, lr}
 800b8f4:	b084      	sub	sp, #16
 800b8f6:	af00      	add	r7, sp, #0
 800b8f8:	6078      	str	r0, [r7, #4]

 800b8fa:	2301      	movs	r3, #1
 800b8fc:	73fb      	strb	r3, [r7, #15]
  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
  {
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	79db      	ldrb	r3, [r3, #7]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d102      	bne.n	800b90c <HAL_PCD_ResetCallback+0x1a>
    speed = USBD_SPEED_HIGH;
  }
 800b906:	2300      	movs	r3, #0
 800b908:	73fb      	strb	r3, [r7, #15]
 800b90a:	e008      	b.n	800b91e <HAL_PCD_ResetCallback+0x2c>
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
  {
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	79db      	ldrb	r3, [r3, #7]
 800b910:	2b02      	cmp	r3, #2
 800b912:	d102      	bne.n	800b91a <HAL_PCD_ResetCallback+0x28>
    speed = USBD_SPEED_FULL;
  }
 800b914:	2301      	movs	r3, #1
 800b916:	73fb      	strb	r3, [r7, #15]
 800b918:	e001      	b.n	800b91e <HAL_PCD_ResetCallback+0x2c>
  else
  {
    Error_Handler();
  }
 800b91a:	f7f5 f9c5 	bl	8000ca8 <Error_Handler>
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);

 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800b924:	7bfa      	ldrb	r2, [r7, #15]
 800b926:	4611      	mov	r1, r2
 800b928:	4618      	mov	r0, r3
 800b92a:	f7fd fa1c 	bl	8008d66 <USBD_LL_SetSpeed>
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
}
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800b934:	4618      	mov	r0, r3
 800b936:	f7fd f9c4 	bl	8008cc2 <USBD_LL_Reset>

 800b93a:	bf00      	nop
 800b93c:	3710      	adds	r7, #16
 800b93e:	46bd      	mov	sp, r7
 800b940:	bd80      	pop	{r7, pc}
	...

0800b944 <HAL_PCD_SuspendCallback>:
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* Inform USB library that core enters in suspend Mode. */
 800b944:	b580      	push	{r7, lr}
 800b946:	b082      	sub	sp, #8
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800b952:	4618      	mov	r0, r3
 800b954:	f7fd fa17 	bl	8008d86 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	687a      	ldr	r2, [r7, #4]
 800b964:	6812      	ldr	r2, [r2, #0]
 800b966:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b96a:	f043 0301 	orr.w	r3, r3, #1
 800b96e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
  {
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	7adb      	ldrb	r3, [r3, #11]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d005      	beq.n	800b984 <HAL_PCD_SuspendCallback+0x40>
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b978:	4b04      	ldr	r3, [pc, #16]	; (800b98c <HAL_PCD_SuspendCallback+0x48>)
 800b97a:	691b      	ldr	r3, [r3, #16]
 800b97c:	4a03      	ldr	r2, [pc, #12]	; (800b98c <HAL_PCD_SuspendCallback+0x48>)
 800b97e:	f043 0306 	orr.w	r3, r3, #6
 800b982:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}

 800b984:	bf00      	nop
 800b986:	3708      	adds	r7, #8
 800b988:	46bd      	mov	sp, r7
 800b98a:	bd80      	pop	{r7, pc}
 800b98c:	e000ed00 	.word	0xe000ed00

0800b990 <HAL_PCD_ResumeCallback>:
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */
 800b990:	b580      	push	{r7, lr}
 800b992:	b082      	sub	sp, #8
 800b994:	af00      	add	r7, sp, #0
 800b996:	6078      	str	r0, [r7, #4]

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
}
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800b99e:	4618      	mov	r0, r3
 800b9a0:	f7fd fa0d 	bl	8008dbe <USBD_LL_Resume>

 800b9a4:	bf00      	nop
 800b9a6:	3708      	adds	r7, #8
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	bd80      	pop	{r7, pc}

0800b9ac <HAL_PCD_ISOOUTIncompleteCallback>:
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b082      	sub	sp, #8
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
 800b9b4:	460b      	mov	r3, r1
 800b9b6:	70fb      	strb	r3, [r7, #3]
}
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800b9be:	78fa      	ldrb	r2, [r7, #3]
 800b9c0:	4611      	mov	r1, r2
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	f7fd fa65 	bl	8008e92 <USBD_LL_IsoOUTIncomplete>

 800b9c8:	bf00      	nop
 800b9ca:	3708      	adds	r7, #8
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	bd80      	pop	{r7, pc}

0800b9d0 <HAL_PCD_ISOINIncompleteCallback>:
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b082      	sub	sp, #8
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
 800b9d8:	460b      	mov	r3, r1
 800b9da:	70fb      	strb	r3, [r7, #3]
}
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800b9e2:	78fa      	ldrb	r2, [r7, #3]
 800b9e4:	4611      	mov	r1, r2
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	f7fd fa21 	bl	8008e2e <USBD_LL_IsoINIncomplete>

 800b9ec:	bf00      	nop
 800b9ee:	3708      	adds	r7, #8
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	bd80      	pop	{r7, pc}

0800b9f4 <HAL_PCD_ConnectCallback>:
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b082      	sub	sp, #8
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
}
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800ba02:	4618      	mov	r0, r3
 800ba04:	f7fd fa77 	bl	8008ef6 <USBD_LL_DevConnected>

 800ba08:	bf00      	nop
 800ba0a:	3708      	adds	r7, #8
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	bd80      	pop	{r7, pc}

0800ba10 <HAL_PCD_DisconnectCallback>:
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b082      	sub	sp, #8
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
}
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800ba1e:	4618      	mov	r0, r3
 800ba20:	f7fd fa74 	bl	8008f0c <USBD_LL_DevDisconnected>

 800ba24:	bf00      	nop
 800ba26:	3708      	adds	r7, #8
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	bd80      	pop	{r7, pc}

0800ba2c <USBD_LL_Init>:
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b082      	sub	sp, #8
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
  if (pdev->id == DEVICE_FS) {
  /* Link the driver to the stack. */
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	781b      	ldrb	r3, [r3, #0]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d13c      	bne.n	800bab6 <USBD_LL_Init+0x8a>
  hpcd_USB_OTG_FS.pData = pdev;
  pdev->pData = &hpcd_USB_OTG_FS;
 800ba3c:	4a20      	ldr	r2, [pc, #128]	; (800bac0 <USBD_LL_Init+0x94>)
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0

 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	4a1e      	ldr	r2, [pc, #120]	; (800bac0 <USBD_LL_Init+0x94>)
 800ba48:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800ba4c:	4b1c      	ldr	r3, [pc, #112]	; (800bac0 <USBD_LL_Init+0x94>)
 800ba4e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ba52:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ba54:	4b1a      	ldr	r3, [pc, #104]	; (800bac0 <USBD_LL_Init+0x94>)
 800ba56:	2204      	movs	r2, #4
 800ba58:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ba5a:	4b19      	ldr	r3, [pc, #100]	; (800bac0 <USBD_LL_Init+0x94>)
 800ba5c:	2202      	movs	r2, #2
 800ba5e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ba60:	4b17      	ldr	r3, [pc, #92]	; (800bac0 <USBD_LL_Init+0x94>)
 800ba62:	2200      	movs	r2, #0
 800ba64:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ba66:	4b16      	ldr	r3, [pc, #88]	; (800bac0 <USBD_LL_Init+0x94>)
 800ba68:	2202      	movs	r2, #2
 800ba6a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ba6c:	4b14      	ldr	r3, [pc, #80]	; (800bac0 <USBD_LL_Init+0x94>)
 800ba6e:	2200      	movs	r2, #0
 800ba70:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ba72:	4b13      	ldr	r3, [pc, #76]	; (800bac0 <USBD_LL_Init+0x94>)
 800ba74:	2200      	movs	r2, #0
 800ba76:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ba78:	4b11      	ldr	r3, [pc, #68]	; (800bac0 <USBD_LL_Init+0x94>)
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ba7e:	4b10      	ldr	r3, [pc, #64]	; (800bac0 <USBD_LL_Init+0x94>)
 800ba80:	2200      	movs	r2, #0
 800ba82:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ba84:	4b0e      	ldr	r3, [pc, #56]	; (800bac0 <USBD_LL_Init+0x94>)
 800ba86:	2200      	movs	r2, #0
 800ba88:	73da      	strb	r2, [r3, #15]
  {
 800ba8a:	480d      	ldr	r0, [pc, #52]	; (800bac0 <USBD_LL_Init+0x94>)
 800ba8c:	f7f7 f88f 	bl	8002bae <HAL_PCD_Init>
 800ba90:	4603      	mov	r3, r0
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d001      	beq.n	800ba9a <USBD_LL_Init+0x6e>
    Error_Handler( );
  }
 800ba96:	f7f5 f907 	bl	8000ca8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ba9a:	2180      	movs	r1, #128	; 0x80
 800ba9c:	4808      	ldr	r0, [pc, #32]	; (800bac0 <USBD_LL_Init+0x94>)
 800ba9e:	f7f8 faba 	bl	8004016 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800baa2:	2240      	movs	r2, #64	; 0x40
 800baa4:	2100      	movs	r1, #0
 800baa6:	4806      	ldr	r0, [pc, #24]	; (800bac0 <USBD_LL_Init+0x94>)
 800baa8:	f7f8 fa6e 	bl	8003f88 <HAL_PCDEx_SetTxFiFo>
  }
 800baac:	2280      	movs	r2, #128	; 0x80
 800baae:	2101      	movs	r1, #1
 800bab0:	4803      	ldr	r0, [pc, #12]	; (800bac0 <USBD_LL_Init+0x94>)
 800bab2:	f7f8 fa69 	bl	8003f88 <HAL_PCDEx_SetTxFiFo>
  return USBD_OK;
}
 800bab6:	2300      	movs	r3, #0

 800bab8:	4618      	mov	r0, r3
 800baba:	3708      	adds	r7, #8
 800babc:	46bd      	mov	sp, r7
 800babe:	bd80      	pop	{r7, pc}
 800bac0:	20010b0c 	.word	0x20010b0c

0800bac4 <USBD_LL_Start>:
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bac4:	b580      	push	{r7, lr}
 800bac6:	b084      	sub	sp, #16
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bacc:	2300      	movs	r3, #0
 800bace:	73fb      	strb	r3, [r7, #15]

 800bad0:	2300      	movs	r3, #0
 800bad2:	73bb      	strb	r3, [r7, #14]
  hal_status = HAL_PCD_Start(pdev->pData);

 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bada:	4618      	mov	r0, r3
 800badc:	f7f7 f976 	bl	8002dcc <HAL_PCD_Start>
 800bae0:	4603      	mov	r3, r0
 800bae2:	73fb      	strb	r3, [r7, #15]
  usb_status =  USBD_Get_USB_Status(hal_status);

 800bae4:	7bfb      	ldrb	r3, [r7, #15]
 800bae6:	4618      	mov	r0, r3
 800bae8:	f000 f942 	bl	800bd70 <USBD_Get_USB_Status>
 800baec:	4603      	mov	r3, r0
 800baee:	73bb      	strb	r3, [r7, #14]
  return usb_status;
}
 800baf0:	7bbb      	ldrb	r3, [r7, #14]

 800baf2:	4618      	mov	r0, r3
 800baf4:	3710      	adds	r7, #16
 800baf6:	46bd      	mov	sp, r7
 800baf8:	bd80      	pop	{r7, pc}

0800bafa <USBD_LL_OpenEP>:
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bafa:	b580      	push	{r7, lr}
 800bafc:	b084      	sub	sp, #16
 800bafe:	af00      	add	r7, sp, #0
 800bb00:	6078      	str	r0, [r7, #4]
 800bb02:	4608      	mov	r0, r1
 800bb04:	4611      	mov	r1, r2
 800bb06:	461a      	mov	r2, r3
 800bb08:	4603      	mov	r3, r0
 800bb0a:	70fb      	strb	r3, [r7, #3]
 800bb0c:	460b      	mov	r3, r1
 800bb0e:	70bb      	strb	r3, [r7, #2]
 800bb10:	4613      	mov	r3, r2
 800bb12:	803b      	strh	r3, [r7, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb14:	2300      	movs	r3, #0
 800bb16:	73fb      	strb	r3, [r7, #15]

 800bb18:	2300      	movs	r3, #0
 800bb1a:	73bb      	strb	r3, [r7, #14]
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);

 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bb22:	78bb      	ldrb	r3, [r7, #2]
 800bb24:	883a      	ldrh	r2, [r7, #0]
 800bb26:	78f9      	ldrb	r1, [r7, #3]
 800bb28:	f7f7 fe4a 	bl	80037c0 <HAL_PCD_EP_Open>
 800bb2c:	4603      	mov	r3, r0
 800bb2e:	73fb      	strb	r3, [r7, #15]
  usb_status =  USBD_Get_USB_Status(hal_status);

 800bb30:	7bfb      	ldrb	r3, [r7, #15]
 800bb32:	4618      	mov	r0, r3
 800bb34:	f000 f91c 	bl	800bd70 <USBD_Get_USB_Status>
 800bb38:	4603      	mov	r3, r0
 800bb3a:	73bb      	strb	r3, [r7, #14]
  return usb_status;
}
 800bb3c:	7bbb      	ldrb	r3, [r7, #14]

 800bb3e:	4618      	mov	r0, r3
 800bb40:	3710      	adds	r7, #16
 800bb42:	46bd      	mov	sp, r7
 800bb44:	bd80      	pop	{r7, pc}

0800bb46 <USBD_LL_CloseEP>:
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb46:	b580      	push	{r7, lr}
 800bb48:	b084      	sub	sp, #16
 800bb4a:	af00      	add	r7, sp, #0
 800bb4c:	6078      	str	r0, [r7, #4]
 800bb4e:	460b      	mov	r3, r1
 800bb50:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb52:	2300      	movs	r3, #0
 800bb54:	73fb      	strb	r3, [r7, #15]

 800bb56:	2300      	movs	r3, #0
 800bb58:	73bb      	strb	r3, [r7, #14]
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);

 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bb60:	78fa      	ldrb	r2, [r7, #3]
 800bb62:	4611      	mov	r1, r2
 800bb64:	4618      	mov	r0, r3
 800bb66:	f7f7 fe93 	bl	8003890 <HAL_PCD_EP_Close>
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	73fb      	strb	r3, [r7, #15]
  usb_status =  USBD_Get_USB_Status(hal_status);

 800bb6e:	7bfb      	ldrb	r3, [r7, #15]
 800bb70:	4618      	mov	r0, r3
 800bb72:	f000 f8fd 	bl	800bd70 <USBD_Get_USB_Status>
 800bb76:	4603      	mov	r3, r0
 800bb78:	73bb      	strb	r3, [r7, #14]
  return usb_status;
}
 800bb7a:	7bbb      	ldrb	r3, [r7, #14]

 800bb7c:	4618      	mov	r0, r3
 800bb7e:	3710      	adds	r7, #16
 800bb80:	46bd      	mov	sp, r7
 800bb82:	bd80      	pop	{r7, pc}

0800bb84 <USBD_LL_StallEP>:
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b084      	sub	sp, #16
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
 800bb8c:	460b      	mov	r3, r1
 800bb8e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb90:	2300      	movs	r3, #0
 800bb92:	73fb      	strb	r3, [r7, #15]

 800bb94:	2300      	movs	r3, #0
 800bb96:	73bb      	strb	r3, [r7, #14]
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);

 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bb9e:	78fa      	ldrb	r2, [r7, #3]
 800bba0:	4611      	mov	r1, r2
 800bba2:	4618      	mov	r0, r3
 800bba4:	f7f7 ff4b 	bl	8003a3e <HAL_PCD_EP_SetStall>
 800bba8:	4603      	mov	r3, r0
 800bbaa:	73fb      	strb	r3, [r7, #15]
  usb_status =  USBD_Get_USB_Status(hal_status);

 800bbac:	7bfb      	ldrb	r3, [r7, #15]
 800bbae:	4618      	mov	r0, r3
 800bbb0:	f000 f8de 	bl	800bd70 <USBD_Get_USB_Status>
 800bbb4:	4603      	mov	r3, r0
 800bbb6:	73bb      	strb	r3, [r7, #14]
  return usb_status;
}
 800bbb8:	7bbb      	ldrb	r3, [r7, #14]

 800bbba:	4618      	mov	r0, r3
 800bbbc:	3710      	adds	r7, #16
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	bd80      	pop	{r7, pc}

0800bbc2 <USBD_LL_ClearStallEP>:
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbc2:	b580      	push	{r7, lr}
 800bbc4:	b084      	sub	sp, #16
 800bbc6:	af00      	add	r7, sp, #0
 800bbc8:	6078      	str	r0, [r7, #4]
 800bbca:	460b      	mov	r3, r1
 800bbcc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbce:	2300      	movs	r3, #0
 800bbd0:	73fb      	strb	r3, [r7, #15]

 800bbd2:	2300      	movs	r3, #0
 800bbd4:	73bb      	strb	r3, [r7, #14]
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);

 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bbdc:	78fa      	ldrb	r2, [r7, #3]
 800bbde:	4611      	mov	r1, r2
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	f7f7 ff8f 	bl	8003b04 <HAL_PCD_EP_ClrStall>
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	73fb      	strb	r3, [r7, #15]
  usb_status =  USBD_Get_USB_Status(hal_status);

 800bbea:	7bfb      	ldrb	r3, [r7, #15]
 800bbec:	4618      	mov	r0, r3
 800bbee:	f000 f8bf 	bl	800bd70 <USBD_Get_USB_Status>
 800bbf2:	4603      	mov	r3, r0
 800bbf4:	73bb      	strb	r3, [r7, #14]
  return usb_status;
}
 800bbf6:	7bbb      	ldrb	r3, [r7, #14]

 800bbf8:	4618      	mov	r0, r3
 800bbfa:	3710      	adds	r7, #16
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	bd80      	pop	{r7, pc}

0800bc00 <USBD_LL_IsStallEP>:
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bc00:	b480      	push	{r7}
 800bc02:	b085      	sub	sp, #20
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
 800bc08:	460b      	mov	r3, r1
 800bc0a:	70fb      	strb	r3, [r7, #3]

 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bc12:	60fb      	str	r3, [r7, #12]
  if((ep_addr & 0x80) == 0x80)
  {
 800bc14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	da0b      	bge.n	800bc34 <USBD_LL_IsStallEP+0x34>
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
  }
 800bc1c:	78fb      	ldrb	r3, [r7, #3]
 800bc1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bc22:	68f9      	ldr	r1, [r7, #12]
 800bc24:	4613      	mov	r3, r2
 800bc26:	00db      	lsls	r3, r3, #3
 800bc28:	4413      	add	r3, r2
 800bc2a:	009b      	lsls	r3, r3, #2
 800bc2c:	440b      	add	r3, r1
 800bc2e:	3316      	adds	r3, #22
 800bc30:	781b      	ldrb	r3, [r3, #0]
 800bc32:	e00b      	b.n	800bc4c <USBD_LL_IsStallEP+0x4c>
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
  }
 800bc34:	78fb      	ldrb	r3, [r7, #3]
 800bc36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bc3a:	68f9      	ldr	r1, [r7, #12]
 800bc3c:	4613      	mov	r3, r2
 800bc3e:	00db      	lsls	r3, r3, #3
 800bc40:	4413      	add	r3, r2
 800bc42:	009b      	lsls	r3, r3, #2
 800bc44:	440b      	add	r3, r1
 800bc46:	f203 2356 	addw	r3, r3, #598	; 0x256
 800bc4a:	781b      	ldrb	r3, [r3, #0]
}

 800bc4c:	4618      	mov	r0, r3
 800bc4e:	3714      	adds	r7, #20
 800bc50:	46bd      	mov	sp, r7
 800bc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc56:	4770      	bx	lr

0800bc58 <USBD_LL_SetUSBAddress>:
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b084      	sub	sp, #16
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
 800bc60:	460b      	mov	r3, r1
 800bc62:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc64:	2300      	movs	r3, #0
 800bc66:	73fb      	strb	r3, [r7, #15]

 800bc68:	2300      	movs	r3, #0
 800bc6a:	73bb      	strb	r3, [r7, #14]
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);

 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bc72:	78fa      	ldrb	r2, [r7, #3]
 800bc74:	4611      	mov	r1, r2
 800bc76:	4618      	mov	r0, r3
 800bc78:	f7f7 fd7e 	bl	8003778 <HAL_PCD_SetAddress>
 800bc7c:	4603      	mov	r3, r0
 800bc7e:	73fb      	strb	r3, [r7, #15]
  usb_status =  USBD_Get_USB_Status(hal_status);

 800bc80:	7bfb      	ldrb	r3, [r7, #15]
 800bc82:	4618      	mov	r0, r3
 800bc84:	f000 f874 	bl	800bd70 <USBD_Get_USB_Status>
 800bc88:	4603      	mov	r3, r0
 800bc8a:	73bb      	strb	r3, [r7, #14]
  return usb_status;
}
 800bc8c:	7bbb      	ldrb	r3, [r7, #14]

 800bc8e:	4618      	mov	r0, r3
 800bc90:	3710      	adds	r7, #16
 800bc92:	46bd      	mov	sp, r7
 800bc94:	bd80      	pop	{r7, pc}

0800bc96 <USBD_LL_Transmit>:
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc96:	b580      	push	{r7, lr}
 800bc98:	b086      	sub	sp, #24
 800bc9a:	af00      	add	r7, sp, #0
 800bc9c:	60f8      	str	r0, [r7, #12]
 800bc9e:	607a      	str	r2, [r7, #4]
 800bca0:	603b      	str	r3, [r7, #0]
 800bca2:	460b      	mov	r3, r1
 800bca4:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bca6:	2300      	movs	r3, #0
 800bca8:	75fb      	strb	r3, [r7, #23]

 800bcaa:	2300      	movs	r3, #0
 800bcac:	75bb      	strb	r3, [r7, #22]
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);

 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bcb4:	7af9      	ldrb	r1, [r7, #11]
 800bcb6:	683b      	ldr	r3, [r7, #0]
 800bcb8:	687a      	ldr	r2, [r7, #4]
 800bcba:	f7f7 fe86 	bl	80039ca <HAL_PCD_EP_Transmit>
 800bcbe:	4603      	mov	r3, r0
 800bcc0:	75fb      	strb	r3, [r7, #23]
  usb_status =  USBD_Get_USB_Status(hal_status);

 800bcc2:	7dfb      	ldrb	r3, [r7, #23]
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	f000 f853 	bl	800bd70 <USBD_Get_USB_Status>
 800bcca:	4603      	mov	r3, r0
 800bccc:	75bb      	strb	r3, [r7, #22]
  return usb_status;
}
 800bcce:	7dbb      	ldrb	r3, [r7, #22]

 800bcd0:	4618      	mov	r0, r3
 800bcd2:	3718      	adds	r7, #24
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	bd80      	pop	{r7, pc}

0800bcd8 <USBD_LL_PrepareReceive>:
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b086      	sub	sp, #24
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	60f8      	str	r0, [r7, #12]
 800bce0:	607a      	str	r2, [r7, #4]
 800bce2:	603b      	str	r3, [r7, #0]
 800bce4:	460b      	mov	r3, r1
 800bce6:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bce8:	2300      	movs	r3, #0
 800bcea:	75fb      	strb	r3, [r7, #23]

 800bcec:	2300      	movs	r3, #0
 800bcee:	75bb      	strb	r3, [r7, #22]
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);

 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bcf6:	7af9      	ldrb	r1, [r7, #11]
 800bcf8:	683b      	ldr	r3, [r7, #0]
 800bcfa:	687a      	ldr	r2, [r7, #4]
 800bcfc:	f7f7 fe12 	bl	8003924 <HAL_PCD_EP_Receive>
 800bd00:	4603      	mov	r3, r0
 800bd02:	75fb      	strb	r3, [r7, #23]
  usb_status =  USBD_Get_USB_Status(hal_status);

 800bd04:	7dfb      	ldrb	r3, [r7, #23]
 800bd06:	4618      	mov	r0, r3
 800bd08:	f000 f832 	bl	800bd70 <USBD_Get_USB_Status>
 800bd0c:	4603      	mov	r3, r0
 800bd0e:	75bb      	strb	r3, [r7, #22]
  return usb_status;
}
 800bd10:	7dbb      	ldrb	r3, [r7, #22]

 800bd12:	4618      	mov	r0, r3
 800bd14:	3718      	adds	r7, #24
 800bd16:	46bd      	mov	sp, r7
 800bd18:	bd80      	pop	{r7, pc}

0800bd1a <USBD_LL_GetRxDataSize>:
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bd1a:	b580      	push	{r7, lr}
 800bd1c:	b082      	sub	sp, #8
 800bd1e:	af00      	add	r7, sp, #0
 800bd20:	6078      	str	r0, [r7, #4]
 800bd22:	460b      	mov	r3, r1
 800bd24:	70fb      	strb	r3, [r7, #3]
}
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bd2c:	78fa      	ldrb	r2, [r7, #3]
 800bd2e:	4611      	mov	r1, r2
 800bd30:	4618      	mov	r0, r3
 800bd32:	f7f7 fe32 	bl	800399a <HAL_PCD_EP_GetRxCount>
 800bd36:	4603      	mov	r3, r0

 800bd38:	4618      	mov	r0, r3
 800bd3a:	3708      	adds	r7, #8
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	bd80      	pop	{r7, pc}

0800bd40 <USBD_static_malloc>:
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
 800bd40:	b480      	push	{r7}
 800bd42:	b083      	sub	sp, #12
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	6078      	str	r0, [r7, #4]
  return mem;
}
 800bd48:	4b03      	ldr	r3, [pc, #12]	; (800bd58 <USBD_static_malloc+0x18>)

 800bd4a:	4618      	mov	r0, r3
 800bd4c:	370c      	adds	r7, #12
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd54:	4770      	bx	lr
 800bd56:	bf00      	nop
 800bd58:	20010ff0 	.word	0x20010ff0

0800bd5c <USBD_static_free>:
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{

 800bd5c:	b480      	push	{r7}
 800bd5e:	b083      	sub	sp, #12
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
}

 800bd64:	bf00      	nop
 800bd66:	370c      	adds	r7, #12
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6e:	4770      	bx	lr

0800bd70 <USBD_Get_USB_Status>:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd70:	b480      	push	{r7}
 800bd72:	b085      	sub	sp, #20
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	4603      	mov	r3, r0
 800bd78:	71fb      	strb	r3, [r7, #7]

 800bd7a:	2300      	movs	r3, #0
 800bd7c:	73fb      	strb	r3, [r7, #15]
  switch (hal_status)
  {
 800bd7e:	79fb      	ldrb	r3, [r7, #7]
 800bd80:	2b03      	cmp	r3, #3
 800bd82:	d817      	bhi.n	800bdb4 <USBD_Get_USB_Status+0x44>
 800bd84:	a201      	add	r2, pc, #4	; (adr r2, 800bd8c <USBD_Get_USB_Status+0x1c>)
 800bd86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd8a:	bf00      	nop
 800bd8c:	0800bd9d 	.word	0x0800bd9d
 800bd90:	0800bda3 	.word	0x0800bda3
 800bd94:	0800bda9 	.word	0x0800bda9
 800bd98:	0800bdaf 	.word	0x0800bdaf
    case HAL_OK :
      usb_status = USBD_OK;
    break;
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	73fb      	strb	r3, [r7, #15]
    case HAL_ERROR :
 800bda0:	e00b      	b.n	800bdba <USBD_Get_USB_Status+0x4a>
      usb_status = USBD_FAIL;
    break;
 800bda2:	2303      	movs	r3, #3
 800bda4:	73fb      	strb	r3, [r7, #15]
    case HAL_BUSY :
 800bda6:	e008      	b.n	800bdba <USBD_Get_USB_Status+0x4a>
      usb_status = USBD_BUSY;
    break;
 800bda8:	2301      	movs	r3, #1
 800bdaa:	73fb      	strb	r3, [r7, #15]
    case HAL_TIMEOUT :
 800bdac:	e005      	b.n	800bdba <USBD_Get_USB_Status+0x4a>
      usb_status = USBD_FAIL;
    break;
 800bdae:	2303      	movs	r3, #3
 800bdb0:	73fb      	strb	r3, [r7, #15]
    default :
 800bdb2:	e002      	b.n	800bdba <USBD_Get_USB_Status+0x4a>
      usb_status = USBD_FAIL;
    break;
 800bdb4:	2303      	movs	r3, #3
 800bdb6:	73fb      	strb	r3, [r7, #15]
  }
 800bdb8:	bf00      	nop
  return usb_status;
}
 800bdba:	7bfb      	ldrb	r3, [r7, #15]
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	3714      	adds	r7, #20
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc6:	4770      	bx	lr

0800bdc8 <toggle_led_green>:
#include "blinky_task.h"

int32_t toggle_led_green(void *argc) {
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b082      	sub	sp, #8
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
  HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 800bdd0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800bdd4:	4803      	ldr	r0, [pc, #12]	; (800bde4 <toggle_led_green+0x1c>)
 800bdd6:	f7f6 fed0 	bl	8002b7a <HAL_GPIO_TogglePin>
  return 0;
 800bdda:	2300      	movs	r3, #0
}
 800bddc:	4618      	mov	r0, r3
 800bdde:	3708      	adds	r7, #8
 800bde0:	46bd      	mov	sp, r7
 800bde2:	bd80      	pop	{r7, pc}
 800bde4:	40021400 	.word	0x40021400

0800bde8 <blinky_task>:

void blinky_task(void const *argument) {
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b084      	sub	sp, #16
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
  uint32_t t = osKernelSysTick();
 800bdf0:	f7fe f823 	bl	8009e3a <osKernelSysTick>
 800bdf4:	4603      	mov	r3, r0
 800bdf6:	60bb      	str	r3, [r7, #8]
  uint32_t period = 100;
 800bdf8:	2364      	movs	r3, #100	; 0x64
 800bdfa:	60fb      	str	r3, [r7, #12]

  soft_timer_register(toggle_led_green, NULL, 1000);
 800bdfc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800be00:	2100      	movs	r1, #0
 800be02:	482a      	ldr	r0, [pc, #168]	; (800beac <blinky_task+0xc4>)
 800be04:	f000 f8f4 	bl	800bff0 <soft_timer_register>

  for (;;) {
    HAL_GPIO_TogglePin(LED_A_GPIO_Port, LED_A_Pin);
 800be08:	f44f 7180 	mov.w	r1, #256	; 0x100
 800be0c:	4828      	ldr	r0, [pc, #160]	; (800beb0 <blinky_task+0xc8>)
 800be0e:	f7f6 feb4 	bl	8002b7a <HAL_GPIO_TogglePin>
    osDelayUntil(&t, period);
 800be12:	f107 0308 	add.w	r3, r7, #8
 800be16:	68f9      	ldr	r1, [r7, #12]
 800be18:	4618      	mov	r0, r3
 800be1a:	f7fe f859 	bl	8009ed0 <osDelayUntil>

    HAL_GPIO_TogglePin(LED_B_GPIO_Port, LED_B_Pin);
 800be1e:	2180      	movs	r1, #128	; 0x80
 800be20:	4823      	ldr	r0, [pc, #140]	; (800beb0 <blinky_task+0xc8>)
 800be22:	f7f6 feaa 	bl	8002b7a <HAL_GPIO_TogglePin>
    osDelayUntil(&t, period);
 800be26:	f107 0308 	add.w	r3, r7, #8
 800be2a:	68f9      	ldr	r1, [r7, #12]
 800be2c:	4618      	mov	r0, r3
 800be2e:	f7fe f84f 	bl	8009ed0 <osDelayUntil>

    HAL_GPIO_TogglePin(LED_C_GPIO_Port, LED_C_Pin);
 800be32:	2140      	movs	r1, #64	; 0x40
 800be34:	481e      	ldr	r0, [pc, #120]	; (800beb0 <blinky_task+0xc8>)
 800be36:	f7f6 fea0 	bl	8002b7a <HAL_GPIO_TogglePin>
    osDelayUntil(&t, period);
 800be3a:	f107 0308 	add.w	r3, r7, #8
 800be3e:	68f9      	ldr	r1, [r7, #12]
 800be40:	4618      	mov	r0, r3
 800be42:	f7fe f845 	bl	8009ed0 <osDelayUntil>

    HAL_GPIO_TogglePin(LED_D_GPIO_Port, LED_D_Pin);
 800be46:	2120      	movs	r1, #32
 800be48:	4819      	ldr	r0, [pc, #100]	; (800beb0 <blinky_task+0xc8>)
 800be4a:	f7f6 fe96 	bl	8002b7a <HAL_GPIO_TogglePin>
    osDelayUntil(&t, period);
 800be4e:	f107 0308 	add.w	r3, r7, #8
 800be52:	68f9      	ldr	r1, [r7, #12]
 800be54:	4618      	mov	r0, r3
 800be56:	f7fe f83b 	bl	8009ed0 <osDelayUntil>

    HAL_GPIO_TogglePin(LED_E_GPIO_Port, LED_E_Pin);
 800be5a:	2110      	movs	r1, #16
 800be5c:	4814      	ldr	r0, [pc, #80]	; (800beb0 <blinky_task+0xc8>)
 800be5e:	f7f6 fe8c 	bl	8002b7a <HAL_GPIO_TogglePin>
    osDelayUntil(&t, period);
 800be62:	f107 0308 	add.w	r3, r7, #8
 800be66:	68f9      	ldr	r1, [r7, #12]
 800be68:	4618      	mov	r0, r3
 800be6a:	f7fe f831 	bl	8009ed0 <osDelayUntil>

    HAL_GPIO_TogglePin(LED_F_GPIO_Port, LED_F_Pin);
 800be6e:	2108      	movs	r1, #8
 800be70:	480f      	ldr	r0, [pc, #60]	; (800beb0 <blinky_task+0xc8>)
 800be72:	f7f6 fe82 	bl	8002b7a <HAL_GPIO_TogglePin>
    osDelayUntil(&t, period);
 800be76:	f107 0308 	add.w	r3, r7, #8
 800be7a:	68f9      	ldr	r1, [r7, #12]
 800be7c:	4618      	mov	r0, r3
 800be7e:	f7fe f827 	bl	8009ed0 <osDelayUntil>

    HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
 800be82:	2104      	movs	r1, #4
 800be84:	480a      	ldr	r0, [pc, #40]	; (800beb0 <blinky_task+0xc8>)
 800be86:	f7f6 fe78 	bl	8002b7a <HAL_GPIO_TogglePin>
    osDelayUntil(&t, period);
 800be8a:	f107 0308 	add.w	r3, r7, #8
 800be8e:	68f9      	ldr	r1, [r7, #12]
 800be90:	4618      	mov	r0, r3
 800be92:	f7fe f81d 	bl	8009ed0 <osDelayUntil>

    HAL_GPIO_TogglePin(LED_H_GPIO_Port, LED_H_Pin);
 800be96:	2102      	movs	r1, #2
 800be98:	4805      	ldr	r0, [pc, #20]	; (800beb0 <blinky_task+0xc8>)
 800be9a:	f7f6 fe6e 	bl	8002b7a <HAL_GPIO_TogglePin>
    osDelayUntil(&t, period);
 800be9e:	f107 0308 	add.w	r3, r7, #8
 800bea2:	68f9      	ldr	r1, [r7, #12]
 800bea4:	4618      	mov	r0, r3
 800bea6:	f7fe f813 	bl	8009ed0 <osDelayUntil>
    HAL_GPIO_TogglePin(LED_A_GPIO_Port, LED_A_Pin);
 800beaa:	e7ad      	b.n	800be08 <blinky_task+0x20>
 800beac:	0800bdc9 	.word	0x0800bdc9
 800beb0:	40021800 	.word	0x40021800

0800beb4 <hw_init>:

osThreadId timer_task_t;
osThreadId blinky_task_t;
osThreadId usbComm_task_t;

void hw_init() { soft_timer_init(); }
 800beb4:	b580      	push	{r7, lr}
 800beb6:	af00      	add	r7, sp, #0
 800beb8:	f000 fae0 	bl	800c47c <soft_timer_init>
 800bebc:	bf00      	nop
 800bebe:	bd80      	pop	{r7, pc}

0800bec0 <task_init>:

void task_init() {
 800bec0:	b5b0      	push	{r4, r5, r7, lr}
 800bec2:	b090      	sub	sp, #64	; 0x40
 800bec4:	af00      	add	r7, sp, #0
  osThreadDef(TIMER_1MS, timer_task, osPriorityRealtime, 0, 512);
 800bec6:	4b1a      	ldr	r3, [pc, #104]	; (800bf30 <task_init+0x70>)
 800bec8:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 800becc:	461d      	mov	r5, r3
 800bece:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bed0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bed2:	682b      	ldr	r3, [r5, #0]
 800bed4:	6023      	str	r3, [r4, #0]
  timer_task_t = osThreadCreate(osThread(TIMER_1MS), NULL);
 800bed6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800beda:	2100      	movs	r1, #0
 800bedc:	4618      	mov	r0, r3
 800bede:	f7fd ffbc 	bl	8009e5a <osThreadCreate>
 800bee2:	4603      	mov	r3, r0
 800bee4:	4a13      	ldr	r2, [pc, #76]	; (800bf34 <task_init+0x74>)
 800bee6:	6013      	str	r3, [r2, #0]

  osThreadDef(BLINKY_TASK, blinky_task, osPriorityIdle, 0, 64);
 800bee8:	4b13      	ldr	r3, [pc, #76]	; (800bf38 <task_init+0x78>)
 800beea:	f107 0418 	add.w	r4, r7, #24
 800beee:	461d      	mov	r5, r3
 800bef0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bef2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bef4:	682b      	ldr	r3, [r5, #0]
 800bef6:	6023      	str	r3, [r4, #0]
  blinky_task_t = osThreadCreate(osThread(BLINKY_TASK), NULL);
 800bef8:	f107 0318 	add.w	r3, r7, #24
 800befc:	2100      	movs	r1, #0
 800befe:	4618      	mov	r0, r3
 800bf00:	f7fd ffab 	bl	8009e5a <osThreadCreate>
 800bf04:	4603      	mov	r3, r0
 800bf06:	4a0d      	ldr	r2, [pc, #52]	; (800bf3c <task_init+0x7c>)
 800bf08:	6013      	str	r3, [r2, #0]

  osThreadDef(USBCOMM_TASK, usbComm_task, osPriorityNormal, 0, 4096);
 800bf0a:	4b0d      	ldr	r3, [pc, #52]	; (800bf40 <task_init+0x80>)
 800bf0c:	1d3c      	adds	r4, r7, #4
 800bf0e:	461d      	mov	r5, r3
 800bf10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bf12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bf14:	682b      	ldr	r3, [r5, #0]
 800bf16:	6023      	str	r3, [r4, #0]
  usbComm_task_t = osThreadCreate(osThread(USBCOMM_TASK), NULL);
 800bf18:	1d3b      	adds	r3, r7, #4
 800bf1a:	2100      	movs	r1, #0
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	f7fd ff9c 	bl	8009e5a <osThreadCreate>
 800bf22:	4603      	mov	r3, r0
 800bf24:	4a07      	ldr	r2, [pc, #28]	; (800bf44 <task_init+0x84>)
 800bf26:	6013      	str	r3, [r2, #0]
}
 800bf28:	bf00      	nop
 800bf2a:	3740      	adds	r7, #64	; 0x40
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	bdb0      	pop	{r4, r5, r7, pc}
 800bf30:	0800cadc 	.word	0x0800cadc
 800bf34:	20011210 	.word	0x20011210
 800bf38:	0800cafc 	.word	0x0800cafc
 800bf3c:	20011214 	.word	0x20011214
 800bf40:	0800cb20 	.word	0x0800cb20
 800bf44:	20011218 	.word	0x20011218

0800bf48 <timer_task>:
 * The function runs in an infinite loop and delays for a specified period.
 * 
 * @param argument Pointer to the task argument (not used in this function).
 */
void timer_task(void const *argument)
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b084      	sub	sp, #16
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
  uint32_t period = osKernelSysTick();
 800bf50:	f7fd ff73 	bl	8009e3a <osKernelSysTick>
 800bf54:	4603      	mov	r3, r0
 800bf56:	60bb      	str	r3, [r7, #8]

  while (1)
  {
    TimerISR_Hook();
 800bf58:	f000 fa64 	bl	800c424 <TimerISR_Hook>

    for (int i = 0; i < TIMER_ELEMENT_NUM_MAX - 1; i++)
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	60fb      	str	r3, [r7, #12]
 800bf60:	e03a      	b.n	800bfd8 <timer_task+0x90>
    {
      if ((soft_timer[i].id != 0) && (soft_timer[i].soft_timer_callback != NULL))
 800bf62:	4a22      	ldr	r2, [pc, #136]	; (800bfec <timer_task+0xa4>)
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	011b      	lsls	r3, r3, #4
 800bf68:	4413      	add	r3, r2
 800bf6a:	781b      	ldrb	r3, [r3, #0]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d030      	beq.n	800bfd2 <timer_task+0x8a>
 800bf70:	4a1e      	ldr	r2, [pc, #120]	; (800bfec <timer_task+0xa4>)
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	011b      	lsls	r3, r3, #4
 800bf76:	4413      	add	r3, r2
 800bf78:	330c      	adds	r3, #12
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d028      	beq.n	800bfd2 <timer_task+0x8a>
      {
        if (soft_timer_check(soft_timer[i].id) == SOFT_TIMER_TIMEOUT)
 800bf80:	4a1a      	ldr	r2, [pc, #104]	; (800bfec <timer_task+0xa4>)
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	011b      	lsls	r3, r3, #4
 800bf86:	4413      	add	r3, r2
 800bf88:	781b      	ldrb	r3, [r3, #0]
 800bf8a:	b29b      	uxth	r3, r3
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	f000 fb05 	bl	800c59c <soft_timer_check>
 800bf92:	4603      	mov	r3, r0
 800bf94:	2b02      	cmp	r3, #2
 800bf96:	d11c      	bne.n	800bfd2 <timer_task+0x8a>
        {
          soft_timer[i].soft_timer_callback(soft_timer[i].argc);
 800bf98:	4a14      	ldr	r2, [pc, #80]	; (800bfec <timer_task+0xa4>)
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	011b      	lsls	r3, r3, #4
 800bf9e:	4413      	add	r3, r2
 800bfa0:	330c      	adds	r3, #12
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	4911      	ldr	r1, [pc, #68]	; (800bfec <timer_task+0xa4>)
 800bfa6:	68fa      	ldr	r2, [r7, #12]
 800bfa8:	0112      	lsls	r2, r2, #4
 800bfaa:	440a      	add	r2, r1
 800bfac:	3208      	adds	r2, #8
 800bfae:	6812      	ldr	r2, [r2, #0]
 800bfb0:	4610      	mov	r0, r2
 800bfb2:	4798      	blx	r3

          soft_timer_update(soft_timer[i].id, soft_timer[i].ticks);
 800bfb4:	4a0d      	ldr	r2, [pc, #52]	; (800bfec <timer_task+0xa4>)
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	011b      	lsls	r3, r3, #4
 800bfba:	4413      	add	r3, r2
 800bfbc:	781b      	ldrb	r3, [r3, #0]
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	4a0a      	ldr	r2, [pc, #40]	; (800bfec <timer_task+0xa4>)
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	011b      	lsls	r3, r3, #4
 800bfc6:	4413      	add	r3, r2
 800bfc8:	3304      	adds	r3, #4
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	4619      	mov	r1, r3
 800bfce:	f000 fab1 	bl	800c534 <soft_timer_update>
    for (int i = 0; i < TIMER_ELEMENT_NUM_MAX - 1; i++)
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	3301      	adds	r3, #1
 800bfd6:	60fb      	str	r3, [r7, #12]
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	2b12      	cmp	r3, #18
 800bfdc:	ddc1      	ble.n	800bf62 <timer_task+0x1a>
        }
      }
    }

    osDelayUntil(&period, 1);
 800bfde:	f107 0308 	add.w	r3, r7, #8
 800bfe2:	2101      	movs	r1, #1
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	f7fd ff73 	bl	8009ed0 <osDelayUntil>
    TimerISR_Hook();
 800bfea:	e7b5      	b.n	800bf58 <timer_task+0x10>
 800bfec:	2001121c 	.word	0x2001121c

0800bff0 <soft_timer_register>:
 *
 * @return                    The index of the registered timer element if successful,
 *                            or -1 if the registration fails (e.g., no available timer element).
 */
int32_t soft_timer_register(int32_t (*soft_timer_callback)(void *argc), void *argc, uint32_t ticks)
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b086      	sub	sp, #24
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	60f8      	str	r0, [r7, #12]
 800bff8:	60b9      	str	r1, [r7, #8]
 800bffa:	607a      	str	r2, [r7, #4]
  for (int i = 0; i < TIMER_ELEMENT_NUM_MAX - 1; i++)
 800bffc:	2300      	movs	r3, #0
 800bffe:	617b      	str	r3, [r7, #20]
 800c000:	e02b      	b.n	800c05a <soft_timer_register+0x6a>
  {
    if (soft_timer[i].id == 0)
 800c002:	4a1a      	ldr	r2, [pc, #104]	; (800c06c <soft_timer_register+0x7c>)
 800c004:	697b      	ldr	r3, [r7, #20]
 800c006:	011b      	lsls	r3, r3, #4
 800c008:	4413      	add	r3, r2
 800c00a:	781b      	ldrb	r3, [r3, #0]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d121      	bne.n	800c054 <soft_timer_register+0x64>
    {
      soft_timer[i].id = soft_timer_req(ticks);
 800c010:	6878      	ldr	r0, [r7, #4]
 800c012:	f000 fa55 	bl	800c4c0 <soft_timer_req>
 800c016:	4603      	mov	r3, r0
 800c018:	b2d9      	uxtb	r1, r3
 800c01a:	4a14      	ldr	r2, [pc, #80]	; (800c06c <soft_timer_register+0x7c>)
 800c01c:	697b      	ldr	r3, [r7, #20]
 800c01e:	011b      	lsls	r3, r3, #4
 800c020:	4413      	add	r3, r2
 800c022:	460a      	mov	r2, r1
 800c024:	701a      	strb	r2, [r3, #0]
      soft_timer[i].ticks = ticks;
 800c026:	4a11      	ldr	r2, [pc, #68]	; (800c06c <soft_timer_register+0x7c>)
 800c028:	697b      	ldr	r3, [r7, #20]
 800c02a:	011b      	lsls	r3, r3, #4
 800c02c:	4413      	add	r3, r2
 800c02e:	3304      	adds	r3, #4
 800c030:	687a      	ldr	r2, [r7, #4]
 800c032:	601a      	str	r2, [r3, #0]
      soft_timer[i].argc = argc;
 800c034:	4a0d      	ldr	r2, [pc, #52]	; (800c06c <soft_timer_register+0x7c>)
 800c036:	697b      	ldr	r3, [r7, #20]
 800c038:	011b      	lsls	r3, r3, #4
 800c03a:	4413      	add	r3, r2
 800c03c:	3308      	adds	r3, #8
 800c03e:	68ba      	ldr	r2, [r7, #8]
 800c040:	601a      	str	r2, [r3, #0]
      soft_timer[i].soft_timer_callback = soft_timer_callback;
 800c042:	4a0a      	ldr	r2, [pc, #40]	; (800c06c <soft_timer_register+0x7c>)
 800c044:	697b      	ldr	r3, [r7, #20]
 800c046:	011b      	lsls	r3, r3, #4
 800c048:	4413      	add	r3, r2
 800c04a:	330c      	adds	r3, #12
 800c04c:	68fa      	ldr	r2, [r7, #12]
 800c04e:	601a      	str	r2, [r3, #0]
      return i;
 800c050:	697b      	ldr	r3, [r7, #20]
 800c052:	e007      	b.n	800c064 <soft_timer_register+0x74>
  for (int i = 0; i < TIMER_ELEMENT_NUM_MAX - 1; i++)
 800c054:	697b      	ldr	r3, [r7, #20]
 800c056:	3301      	adds	r3, #1
 800c058:	617b      	str	r3, [r7, #20]
 800c05a:	697b      	ldr	r3, [r7, #20]
 800c05c:	2b12      	cmp	r3, #18
 800c05e:	ddd0      	ble.n	800c002 <soft_timer_register+0x12>
    }
  }
  return -1;
 800c060:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800c064:	4618      	mov	r0, r3
 800c066:	3718      	adds	r7, #24
 800c068:	46bd      	mov	sp, r7
 800c06a:	bd80      	pop	{r7, pc}
 800c06c:	2001121c 	.word	0x2001121c

0800c070 <int32_to_bytes>:
#include "usbCommunication_task.h"
#include <stdint.h>

uint8_t test_fifo = 0;

uint8_t int32_to_bytes(int32_t value, uint8_t *bytes, int8_t is_big_endian) {
 800c070:	b480      	push	{r7}
 800c072:	b085      	sub	sp, #20
 800c074:	af00      	add	r7, sp, #0
 800c076:	60f8      	str	r0, [r7, #12]
 800c078:	60b9      	str	r1, [r7, #8]
 800c07a:	4613      	mov	r3, r2
 800c07c:	71fb      	strb	r3, [r7, #7]
  // Converts an int32_t value to a byte array.
  if (is_big_endian) {
 800c07e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d016      	beq.n	800c0b4 <int32_to_bytes+0x44>
    bytes[0] = (value >> 24) & 0xFF;
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	0e1b      	lsrs	r3, r3, #24
 800c08a:	b2da      	uxtb	r2, r3
 800c08c:	68bb      	ldr	r3, [r7, #8]
 800c08e:	701a      	strb	r2, [r3, #0]
    bytes[1] = (value >> 16) & 0xFF;
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	141a      	asrs	r2, r3, #16
 800c094:	68bb      	ldr	r3, [r7, #8]
 800c096:	3301      	adds	r3, #1
 800c098:	b2d2      	uxtb	r2, r2
 800c09a:	701a      	strb	r2, [r3, #0]
    bytes[2] = (value >> 8) & 0xFF;
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	121a      	asrs	r2, r3, #8
 800c0a0:	68bb      	ldr	r3, [r7, #8]
 800c0a2:	3302      	adds	r3, #2
 800c0a4:	b2d2      	uxtb	r2, r2
 800c0a6:	701a      	strb	r2, [r3, #0]
    bytes[3] = value & 0xFF;
 800c0a8:	68bb      	ldr	r3, [r7, #8]
 800c0aa:	3303      	adds	r3, #3
 800c0ac:	68fa      	ldr	r2, [r7, #12]
 800c0ae:	b2d2      	uxtb	r2, r2
 800c0b0:	701a      	strb	r2, [r3, #0]
 800c0b2:	e015      	b.n	800c0e0 <int32_to_bytes+0x70>
  } else {
    bytes[0] = value & 0xFF;
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	b2da      	uxtb	r2, r3
 800c0b8:	68bb      	ldr	r3, [r7, #8]
 800c0ba:	701a      	strb	r2, [r3, #0]
    bytes[1] = (value >> 8) & 0xFF;
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	121a      	asrs	r2, r3, #8
 800c0c0:	68bb      	ldr	r3, [r7, #8]
 800c0c2:	3301      	adds	r3, #1
 800c0c4:	b2d2      	uxtb	r2, r2
 800c0c6:	701a      	strb	r2, [r3, #0]
    bytes[2] = (value >> 16) & 0xFF;
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	141a      	asrs	r2, r3, #16
 800c0cc:	68bb      	ldr	r3, [r7, #8]
 800c0ce:	3302      	adds	r3, #2
 800c0d0:	b2d2      	uxtb	r2, r2
 800c0d2:	701a      	strb	r2, [r3, #0]
    bytes[3] = (value >> 24) & 0xFF;
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	0e1a      	lsrs	r2, r3, #24
 800c0d8:	68bb      	ldr	r3, [r7, #8]
 800c0da:	3303      	adds	r3, #3
 800c0dc:	b2d2      	uxtb	r2, r2
 800c0de:	701a      	strb	r2, [r3, #0]
  }

  return 4; // Number of bytes written
 800c0e0:	2304      	movs	r3, #4
}
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	3714      	adds	r7, #20
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ec:	4770      	bx	lr

0800c0ee <bytes_to_int32>:

int32_t bytes_to_int32(uint8_t *bytes, int8_t is_big_endian) {
 800c0ee:	b480      	push	{r7}
 800c0f0:	b085      	sub	sp, #20
 800c0f2:	af00      	add	r7, sp, #0
 800c0f4:	6078      	str	r0, [r7, #4]
 800c0f6:	460b      	mov	r3, r1
 800c0f8:	70fb      	strb	r3, [r7, #3]
  //  Converts a byte array to an int32_t value.
  if (sizeof(bytes) < 4) {
    return 0; // Or return some error code
  }

  int32_t value = 0;
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	60fb      	str	r3, [r7, #12]
  if (is_big_endian) {
 800c0fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d012      	beq.n	800c12c <bytes_to_int32+0x3e>
    // Big-endian: most significant byte first
    value = (bytes[0] << 24) | (bytes[1] << 16) | (bytes[2] << 8) | bytes[3];
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	781b      	ldrb	r3, [r3, #0]
 800c10a:	061a      	lsls	r2, r3, #24
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	3301      	adds	r3, #1
 800c110:	781b      	ldrb	r3, [r3, #0]
 800c112:	041b      	lsls	r3, r3, #16
 800c114:	431a      	orrs	r2, r3
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	3302      	adds	r3, #2
 800c11a:	781b      	ldrb	r3, [r3, #0]
 800c11c:	021b      	lsls	r3, r3, #8
 800c11e:	4313      	orrs	r3, r2
 800c120:	687a      	ldr	r2, [r7, #4]
 800c122:	3203      	adds	r2, #3
 800c124:	7812      	ldrb	r2, [r2, #0]
 800c126:	4313      	orrs	r3, r2
 800c128:	60fb      	str	r3, [r7, #12]
 800c12a:	e011      	b.n	800c150 <bytes_to_int32+0x62>
  } else {
    // Little-endian: least significant byte first
    value = (bytes[3] << 24) | (bytes[2] << 16) | (bytes[1] << 8) | bytes[0];
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	3303      	adds	r3, #3
 800c130:	781b      	ldrb	r3, [r3, #0]
 800c132:	061a      	lsls	r2, r3, #24
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	3302      	adds	r3, #2
 800c138:	781b      	ldrb	r3, [r3, #0]
 800c13a:	041b      	lsls	r3, r3, #16
 800c13c:	431a      	orrs	r2, r3
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	3301      	adds	r3, #1
 800c142:	781b      	ldrb	r3, [r3, #0]
 800c144:	021b      	lsls	r3, r3, #8
 800c146:	4313      	orrs	r3, r2
 800c148:	687a      	ldr	r2, [r7, #4]
 800c14a:	7812      	ldrb	r2, [r2, #0]
 800c14c:	4313      	orrs	r3, r2
 800c14e:	60fb      	str	r3, [r7, #12]
  }
  return value;
 800c150:	68fb      	ldr	r3, [r7, #12]
}
 800c152:	4618      	mov	r0, r3
 800c154:	3714      	adds	r7, #20
 800c156:	46bd      	mov	sp, r7
 800c158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15c:	4770      	bx	lr
	...

0800c160 <usb_rcv_callback>:

static int32_t usb_rcv_callback(uint8_t *buf, uint32_t len) {
 800c160:	b580      	push	{r7, lr}
 800c162:	b084      	sub	sp, #16
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
 800c168:	6039      	str	r1, [r7, #0]
  if (test_fifo == 1) {
 800c16a:	4b0a      	ldr	r3, [pc, #40]	; (800c194 <usb_rcv_callback+0x34>)
 800c16c:	781b      	ldrb	r3, [r3, #0]
 800c16e:	2b01      	cmp	r3, #1
 800c170:	d106      	bne.n	800c180 <usb_rcv_callback+0x20>
    int32_t rx_data = bytes_to_int32(buf, 0);
 800c172:	2100      	movs	r1, #0
 800c174:	6878      	ldr	r0, [r7, #4]
 800c176:	f7ff ffba 	bl	800c0ee <bytes_to_int32>
 800c17a:	60b8      	str	r0, [r7, #8]
    return rx_data;
 800c17c:	68bb      	ldr	r3, [r7, #8]
 800c17e:	e005      	b.n	800c18c <usb_rcv_callback+0x2c>
  } else {
    int32_t rx_data = bytes_to_int32(buf, 0);
 800c180:	2100      	movs	r1, #0
 800c182:	6878      	ldr	r0, [r7, #4]
 800c184:	f7ff ffb3 	bl	800c0ee <bytes_to_int32>
 800c188:	60f8      	str	r0, [r7, #12]
    return rx_data;
 800c18a:	68fb      	ldr	r3, [r7, #12]
  }
}
 800c18c:	4618      	mov	r0, r3
 800c18e:	3710      	adds	r7, #16
 800c190:	46bd      	mov	sp, r7
 800c192:	bd80      	pop	{r7, pc}
 800c194:	2001134c 	.word	0x2001134c

0800c198 <usb_send>:

void usb_send(int32_t data) {
 800c198:	b580      	push	{r7, lr}
 800c19a:	b084      	sub	sp, #16
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
  uint8_t buf[4];
  int32_to_bytes(data, buf, 0);
 800c1a0:	f107 030c 	add.w	r3, r7, #12
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	4619      	mov	r1, r3
 800c1a8:	6878      	ldr	r0, [r7, #4]
 800c1aa:	f7ff ff61 	bl	800c070 <int32_to_bytes>
  if (test_fifo == 1) {
 800c1ae:	4b0a      	ldr	r3, [pc, #40]	; (800c1d8 <usb_send+0x40>)
 800c1b0:	781b      	ldrb	r3, [r3, #0]
 800c1b2:	2b01      	cmp	r3, #1
 800c1b4:	d106      	bne.n	800c1c4 <usb_send+0x2c>
    usb_vcp_tx_write_fifo(buf, sizeof(buf));
 800c1b6:	f107 030c 	add.w	r3, r7, #12
 800c1ba:	2104      	movs	r1, #4
 800c1bc:	4618      	mov	r0, r3
 800c1be:	f000 faab 	bl	800c718 <usb_vcp_tx_write_fifo>
  } else {
    transmit_processing_stm32_default(buf, sizeof(buf));
  }
}
 800c1c2:	e005      	b.n	800c1d0 <usb_send+0x38>
    transmit_processing_stm32_default(buf, sizeof(buf));
 800c1c4:	f107 030c 	add.w	r3, r7, #12
 800c1c8:	2104      	movs	r1, #4
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	f000 fa7e 	bl	800c6cc <transmit_processing_stm32_default>
}
 800c1d0:	bf00      	nop
 800c1d2:	3710      	adds	r7, #16
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	bd80      	pop	{r7, pc}
 800c1d8:	2001134c 	.word	0x2001134c

0800c1dc <usbComm_task>:

void usbComm_task(void const *argument) {
 800c1dc:	b580      	push	{r7, lr}
 800c1de:	b082      	sub	sp, #8
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	6078      	str	r0, [r7, #4]
  usb_vcp_init(true);
 800c1e4:	2001      	movs	r0, #1
 800c1e6:	f000 fa09 	bl	800c5fc <usb_vcp_init>
  usb_vcp_rx_callback_register(usb_rcv_callback);
 800c1ea:	4807      	ldr	r0, [pc, #28]	; (800c208 <usbComm_task+0x2c>)
 800c1ec:	f000 faae 	bl	800c74c <usb_vcp_rx_callback_register>
  soft_timer_register(usb_tx_flush_run, NULL, 1);
 800c1f0:	2201      	movs	r2, #1
 800c1f2:	2100      	movs	r1, #0
 800c1f4:	4805      	ldr	r0, [pc, #20]	; (800c20c <usbComm_task+0x30>)
 800c1f6:	f7ff fefb 	bl	800bff0 <soft_timer_register>

  for (;;) {
    usb_send(32);
 800c1fa:	2020      	movs	r0, #32
 800c1fc:	f7ff ffcc 	bl	800c198 <usb_send>
    osDelay(1);
 800c200:	2001      	movs	r0, #1
 800c202:	f7fd fe51 	bl	8009ea8 <osDelay>
    usb_send(32);
 800c206:	e7f8      	b.n	800c1fa <usbComm_task+0x1e>
 800c208:	0800c161 	.word	0x0800c161
 800c20c:	0800c851 	.word	0x0800c851

0800c210 <fifo_s_init>:
//! \param  [in] uint_cnt is count of fifo elements.
//! \retval 0 if initialize successfully, otherwise return -1.
//
//******************************************************************************************
int fifo_s_init(fifo_s_t *p_fifo, void *p_base_addr, int uint_cnt)
{
 800c210:	b480      	push	{r7}
 800c212:	b085      	sub	sp, #20
 800c214:	af00      	add	r7, sp, #0
 800c216:	60f8      	str	r0, [r7, #12]
 800c218:	60b9      	str	r1, [r7, #8]
 800c21a:	607a      	str	r2, [r7, #4]
  ASSERT(p_fifo);
  ASSERT(p_base_addr);
  ASSERT(uint_cnt);

  //! Initialize FIFO Control Block.
  p_fifo->p_start_addr = (char *)p_base_addr;
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	68ba      	ldr	r2, [r7, #8]
 800c220:	601a      	str	r2, [r3, #0]
  p_fifo->p_end_addr = (char *)p_base_addr + uint_cnt - 1;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	3b01      	subs	r3, #1
 800c226:	68ba      	ldr	r2, [r7, #8]
 800c228:	441a      	add	r2, r3
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	605a      	str	r2, [r3, #4]
  p_fifo->free_num = uint_cnt;
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	687a      	ldr	r2, [r7, #4]
 800c232:	609a      	str	r2, [r3, #8]
  p_fifo->used_num = 0;
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	2200      	movs	r2, #0
 800c238:	60da      	str	r2, [r3, #12]
  p_fifo->p_read_addr = (char *)p_base_addr;
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	68ba      	ldr	r2, [r7, #8]
 800c23e:	611a      	str	r2, [r3, #16]
  p_fifo->p_write_addr = (char *)p_base_addr;
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	68ba      	ldr	r2, [r7, #8]
 800c244:	615a      	str	r2, [r3, #20]

  return (0);
 800c246:	2300      	movs	r3, #0
}
 800c248:	4618      	mov	r0, r3
 800c24a:	3714      	adds	r7, #20
 800c24c:	46bd      	mov	sp, r7
 800c24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c252:	4770      	bx	lr

0800c254 <fifo_s_puts>:
//! \param  [in]  the number of elements
//! \retval the number of really write data, otherwise return -1.
//
//******************************************************************************************
int fifo_s_puts(fifo_s_t *p_fifo, char *p_source, int len)
{
 800c254:	b590      	push	{r4, r7, lr}
 800c256:	b08b      	sub	sp, #44	; 0x2c
 800c258:	af00      	add	r7, sp, #0
 800c25a:	60f8      	str	r0, [r7, #12]
 800c25c:	60b9      	str	r1, [r7, #8]
 800c25e:	607a      	str	r2, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800c260:	f3ef 8310 	mrs	r3, PRIMASK
 800c264:	61bb      	str	r3, [r7, #24]
  return(result);
 800c266:	69bb      	ldr	r3, [r7, #24]
  int len_from_start;

  ASSERT(p_fifo);
  
  //Interrupt Off;
  cpu_sr = FIFO_GET_CPU_SR();
 800c268:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 800c26a:	b672      	cpsid	i
}
 800c26c:	bf00      	nop
  FIFO_ENTER_CRITICAL();

  if (NULL == p_source)
 800c26e:	68bb      	ldr	r3, [r7, #8]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d05e      	beq.n	800c332 <fifo_s_puts+0xde>
  {
      goto end;
  }

  if (0 == p_fifo->free_num)
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	689b      	ldr	r3, [r3, #8]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d05c      	beq.n	800c336 <fifo_s_puts+0xe2>
  {
      goto end;
  }

  if (p_fifo->p_write_addr > p_fifo->p_end_addr)
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	695a      	ldr	r2, [r3, #20]
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	685b      	ldr	r3, [r3, #4]
 800c284:	429a      	cmp	r2, r3
 800c286:	d903      	bls.n	800c290 <fifo_s_puts+0x3c>
    p_fifo->p_write_addr = p_fifo->p_start_addr;
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	681a      	ldr	r2, [r3, #0]
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	615a      	str	r2, [r3, #20]

  len = (len < p_fifo->free_num) ? len : p_fifo->free_num;
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	689b      	ldr	r3, [r3, #8]
 800c294:	687a      	ldr	r2, [r7, #4]
 800c296:	4293      	cmp	r3, r2
 800c298:	bfa8      	it	ge
 800c29a:	4613      	movge	r3, r2
 800c29c:	607b      	str	r3, [r7, #4]
  len_to_end = p_fifo->p_end_addr - p_fifo->p_write_addr + 1;
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	685a      	ldr	r2, [r3, #4]
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	695b      	ldr	r3, [r3, #20]
 800c2a6:	1ad3      	subs	r3, r2, r3
 800c2a8:	3301      	adds	r3, #1
 800c2aa:	627b      	str	r3, [r7, #36]	; 0x24

  if (len_to_end >= len) //no rollback
 800c2ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	429a      	cmp	r2, r3
 800c2b2:	db0f      	blt.n	800c2d4 <fifo_s_puts+0x80>
  {
    len_to_end = len;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	627b      	str	r3, [r7, #36]	; 0x24
    memcpy(p_fifo->p_write_addr, p_source, len_to_end);
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	695b      	ldr	r3, [r3, #20]
 800c2bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2be:	68b9      	ldr	r1, [r7, #8]
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	f000 fb67 	bl	800c994 <memcpy>
    p_fifo->p_write_addr += len_to_end;
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	695a      	ldr	r2, [r3, #20]
 800c2ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2cc:	441a      	add	r2, r3
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	615a      	str	r2, [r3, #20]
 800c2d2:	e019      	b.n	800c308 <fifo_s_puts+0xb4>
  }
  else //rollback
  {
    len_from_start = len - len_to_end;
 800c2d4:	687a      	ldr	r2, [r7, #4]
 800c2d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2d8:	1ad3      	subs	r3, r2, r3
 800c2da:	623b      	str	r3, [r7, #32]
    memcpy(p_fifo->p_write_addr, p_source, len_to_end);
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	695b      	ldr	r3, [r3, #20]
 800c2e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2e2:	68b9      	ldr	r1, [r7, #8]
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	f000 fb55 	bl	800c994 <memcpy>
    memcpy(p_fifo->p_start_addr, p_source + len_to_end, len_from_start);
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	6818      	ldr	r0, [r3, #0]
 800c2ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2f0:	68ba      	ldr	r2, [r7, #8]
 800c2f2:	4413      	add	r3, r2
 800c2f4:	6a3a      	ldr	r2, [r7, #32]
 800c2f6:	4619      	mov	r1, r3
 800c2f8:	f000 fb4c 	bl	800c994 <memcpy>
    p_fifo->p_write_addr = p_fifo->p_start_addr + len_from_start;
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	681a      	ldr	r2, [r3, #0]
 800c300:	6a3b      	ldr	r3, [r7, #32]
 800c302:	441a      	add	r2, r3
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	615a      	str	r2, [r3, #20]
  }

  p_fifo->free_num -= len;
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	689a      	ldr	r2, [r3, #8]
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	1ad2      	subs	r2, r2, r3
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	609a      	str	r2, [r3, #8]
  p_fifo->used_num += len;
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	68da      	ldr	r2, [r3, #12]
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	441a      	add	r2, r3
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	60da      	str	r2, [r3, #12]
  retval = len;
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	61fb      	str	r3, [r7, #28]
 800c324:	617c      	str	r4, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c326:	697b      	ldr	r3, [r7, #20]
 800c328:	f383 8810 	msr	PRIMASK, r3
}
 800c32c:	bf00      	nop

  //Interrupt On
  FIFO_RESTORE_CPU_SR(cpu_sr);

  return retval;
 800c32e:	69fb      	ldr	r3, [r7, #28]
 800c330:	e009      	b.n	800c346 <fifo_s_puts+0xf2>
      goto end;
 800c332:	bf00      	nop
 800c334:	e000      	b.n	800c338 <fifo_s_puts+0xe4>
      goto end;
 800c336:	bf00      	nop
 800c338:	613c      	str	r4, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c33a:	693b      	ldr	r3, [r7, #16]
 800c33c:	f383 8810 	msr	PRIMASK, r3
}
 800c340:	bf00      	nop
end:
  //Interrupt On
  FIFO_RESTORE_CPU_SR(cpu_sr);
  return (-1);
 800c342:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800c346:	4618      	mov	r0, r3
 800c348:	372c      	adds	r7, #44	; 0x2c
 800c34a:	46bd      	mov	sp, r7
 800c34c:	bd90      	pop	{r4, r7, pc}

0800c34e <fifo_s_gets_noprotect>:
//!
//! \retval the number of really read data.
//
//******************************************************************************************
int fifo_s_gets_noprotect(fifo_s_t *p_fifo, char *p_dest, int len)
{
 800c34e:	b580      	push	{r7, lr}
 800c350:	b088      	sub	sp, #32
 800c352:	af00      	add	r7, sp, #0
 800c354:	60f8      	str	r0, [r7, #12]
 800c356:	60b9      	str	r1, [r7, #8]
 800c358:	607a      	str	r2, [r7, #4]
  int len_to_end;
  int len_from_start;

  ASSERT(p_fifo);

  if (NULL == p_dest)
 800c35a:	68bb      	ldr	r3, [r7, #8]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d102      	bne.n	800c366 <fifo_s_gets_noprotect+0x18>
    return -1;
 800c360:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c364:	e05a      	b.n	800c41c <fifo_s_gets_noprotect+0xce>

  if (0 == p_fifo->used_num)
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	68db      	ldr	r3, [r3, #12]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d101      	bne.n	800c372 <fifo_s_gets_noprotect+0x24>
    return 0;
 800c36e:	2300      	movs	r3, #0
 800c370:	e054      	b.n	800c41c <fifo_s_gets_noprotect+0xce>

  if (p_fifo->p_read_addr > p_fifo->p_end_addr)
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	691a      	ldr	r2, [r3, #16]
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	685b      	ldr	r3, [r3, #4]
 800c37a:	429a      	cmp	r2, r3
 800c37c:	d903      	bls.n	800c386 <fifo_s_gets_noprotect+0x38>
    p_fifo->p_read_addr = p_fifo->p_start_addr;
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	681a      	ldr	r2, [r3, #0]
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	611a      	str	r2, [r3, #16]

  len = (len < p_fifo->used_num) ? len : p_fifo->used_num;
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	68db      	ldr	r3, [r3, #12]
 800c38a:	687a      	ldr	r2, [r7, #4]
 800c38c:	4293      	cmp	r3, r2
 800c38e:	bfa8      	it	ge
 800c390:	4613      	movge	r3, r2
 800c392:	607b      	str	r3, [r7, #4]
  len_to_end = p_fifo->p_end_addr - p_fifo->p_read_addr + 1;
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	685a      	ldr	r2, [r3, #4]
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	691b      	ldr	r3, [r3, #16]
 800c39c:	1ad3      	subs	r3, r2, r3
 800c39e:	3301      	adds	r3, #1
 800c3a0:	61fb      	str	r3, [r7, #28]

  if (len_to_end >= len) //no rollback
 800c3a2:	69fa      	ldr	r2, [r7, #28]
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	429a      	cmp	r2, r3
 800c3a8:	db0f      	blt.n	800c3ca <fifo_s_gets_noprotect+0x7c>
  {
    len_to_end = len;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	61fb      	str	r3, [r7, #28]
    memcpy(p_dest, p_fifo->p_read_addr, len_to_end);
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	691b      	ldr	r3, [r3, #16]
 800c3b2:	69fa      	ldr	r2, [r7, #28]
 800c3b4:	4619      	mov	r1, r3
 800c3b6:	68b8      	ldr	r0, [r7, #8]
 800c3b8:	f000 faec 	bl	800c994 <memcpy>
    p_fifo->p_read_addr += len_to_end;
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	691a      	ldr	r2, [r3, #16]
 800c3c0:	69fb      	ldr	r3, [r7, #28]
 800c3c2:	441a      	add	r2, r3
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	611a      	str	r2, [r3, #16]
 800c3c8:	e019      	b.n	800c3fe <fifo_s_gets_noprotect+0xb0>
  }
  else //rollback
  {
    len_from_start = len - len_to_end;
 800c3ca:	687a      	ldr	r2, [r7, #4]
 800c3cc:	69fb      	ldr	r3, [r7, #28]
 800c3ce:	1ad3      	subs	r3, r2, r3
 800c3d0:	61bb      	str	r3, [r7, #24]
    memcpy(p_dest, p_fifo->p_read_addr, len_to_end);
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	691b      	ldr	r3, [r3, #16]
 800c3d6:	69fa      	ldr	r2, [r7, #28]
 800c3d8:	4619      	mov	r1, r3
 800c3da:	68b8      	ldr	r0, [r7, #8]
 800c3dc:	f000 fada 	bl	800c994 <memcpy>
    memcpy(p_dest + len_to_end, p_fifo->p_start_addr, len_from_start);
 800c3e0:	69fb      	ldr	r3, [r7, #28]
 800c3e2:	68ba      	ldr	r2, [r7, #8]
 800c3e4:	18d0      	adds	r0, r2, r3
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	69ba      	ldr	r2, [r7, #24]
 800c3ec:	4619      	mov	r1, r3
 800c3ee:	f000 fad1 	bl	800c994 <memcpy>
    p_fifo->p_read_addr = p_fifo->p_start_addr + len_from_start;
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	681a      	ldr	r2, [r3, #0]
 800c3f6:	69bb      	ldr	r3, [r7, #24]
 800c3f8:	441a      	add	r2, r3
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	611a      	str	r2, [r3, #16]
  }

  p_fifo->free_num += len;
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	689a      	ldr	r2, [r3, #8]
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	441a      	add	r2, r3
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	609a      	str	r2, [r3, #8]
  p_fifo->used_num -= len;
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	68da      	ldr	r2, [r3, #12]
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	1ad2      	subs	r2, r2, r3
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	60da      	str	r2, [r3, #12]
  retval = len;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	617b      	str	r3, [r7, #20]

  return retval;
 800c41a:	697b      	ldr	r3, [r7, #20]
}
 800c41c:	4618      	mov	r0, r3
 800c41e:	3720      	adds	r7, #32
 800c420:	46bd      	mov	sp, r7
 800c422:	bd80      	pop	{r7, pc}

0800c424 <TimerISR_Hook>:
//!         This callback function must be called interval
//!
//! \note   Typical 1ms interval
//
//******************************************************************************************
void TimerISR_Hook(void) {
 800c424:	b480      	push	{r7}
 800c426:	b083      	sub	sp, #12
 800c428:	af00      	add	r7, sp, #0
  for (uint8_t i = 1; i < TIMER_ELEMENT_NUM_MAX; i++) {
 800c42a:	2301      	movs	r3, #1
 800c42c:	71fb      	strb	r3, [r7, #7]
 800c42e:	e019      	b.n	800c464 <TimerISR_Hook+0x40>
    if (SoftTimer[i].handle != 0) {
 800c430:	79fb      	ldrb	r3, [r7, #7]
 800c432:	4a11      	ldr	r2, [pc, #68]	; (800c478 <TimerISR_Hook+0x54>)
 800c434:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d010      	beq.n	800c45e <TimerISR_Hook+0x3a>
      if (SoftTimer[i].delay) {
 800c43c:	79fb      	ldrb	r3, [r7, #7]
 800c43e:	4a0e      	ldr	r2, [pc, #56]	; (800c478 <TimerISR_Hook+0x54>)
 800c440:	00db      	lsls	r3, r3, #3
 800c442:	4413      	add	r3, r2
 800c444:	685b      	ldr	r3, [r3, #4]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d009      	beq.n	800c45e <TimerISR_Hook+0x3a>
        SoftTimer[i].delay--;
 800c44a:	79fa      	ldrb	r2, [r7, #7]
 800c44c:	490a      	ldr	r1, [pc, #40]	; (800c478 <TimerISR_Hook+0x54>)
 800c44e:	00d3      	lsls	r3, r2, #3
 800c450:	440b      	add	r3, r1
 800c452:	685b      	ldr	r3, [r3, #4]
 800c454:	1e59      	subs	r1, r3, #1
 800c456:	4808      	ldr	r0, [pc, #32]	; (800c478 <TimerISR_Hook+0x54>)
 800c458:	00d3      	lsls	r3, r2, #3
 800c45a:	4403      	add	r3, r0
 800c45c:	6059      	str	r1, [r3, #4]
  for (uint8_t i = 1; i < TIMER_ELEMENT_NUM_MAX; i++) {
 800c45e:	79fb      	ldrb	r3, [r7, #7]
 800c460:	3301      	adds	r3, #1
 800c462:	71fb      	strb	r3, [r7, #7]
 800c464:	79fb      	ldrb	r3, [r7, #7]
 800c466:	2b13      	cmp	r3, #19
 800c468:	d9e2      	bls.n	800c430 <TimerISR_Hook+0xc>
      }
    }
  }
}
 800c46a:	bf00      	nop
 800c46c:	bf00      	nop
 800c46e:	370c      	adds	r7, #12
 800c470:	46bd      	mov	sp, r7
 800c472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c476:	4770      	bx	lr
 800c478:	20011350 	.word	0x20011350

0800c47c <soft_timer_init>:
//! \note
//!         - This function must be called first !.
//!
//
//******************************************************************************************
uint16_t soft_timer_init(void) {
 800c47c:	b480      	push	{r7}
 800c47e:	b083      	sub	sp, #12
 800c480:	af00      	add	r7, sp, #0
  uint8_t i = 0;
 800c482:	2300      	movs	r3, #0
 800c484:	71fb      	strb	r3, [r7, #7]

  // Clear All Elements
  for (i = 1; i < TIMER_ELEMENT_NUM_MAX; i++) {
 800c486:	2301      	movs	r3, #1
 800c488:	71fb      	strb	r3, [r7, #7]
 800c48a:	e00d      	b.n	800c4a8 <soft_timer_init+0x2c>
    SoftTimer[i].handle = 0;
 800c48c:	79fb      	ldrb	r3, [r7, #7]
 800c48e:	4a0b      	ldr	r2, [pc, #44]	; (800c4bc <soft_timer_init+0x40>)
 800c490:	2100      	movs	r1, #0
 800c492:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
    SoftTimer[i].delay = 0;
 800c496:	79fb      	ldrb	r3, [r7, #7]
 800c498:	4a08      	ldr	r2, [pc, #32]	; (800c4bc <soft_timer_init+0x40>)
 800c49a:	00db      	lsls	r3, r3, #3
 800c49c:	4413      	add	r3, r2
 800c49e:	2200      	movs	r2, #0
 800c4a0:	605a      	str	r2, [r3, #4]
  for (i = 1; i < TIMER_ELEMENT_NUM_MAX; i++) {
 800c4a2:	79fb      	ldrb	r3, [r7, #7]
 800c4a4:	3301      	adds	r3, #1
 800c4a6:	71fb      	strb	r3, [r7, #7]
 800c4a8:	79fb      	ldrb	r3, [r7, #7]
 800c4aa:	2b13      	cmp	r3, #19
 800c4ac:	d9ee      	bls.n	800c48c <soft_timer_init+0x10>
  }

  return (SOFT_TIMER_SUCCESS);
 800c4ae:	2300      	movs	r3, #0
}
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	370c      	adds	r7, #12
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ba:	4770      	bx	lr
 800c4bc:	20011350 	.word	0x20011350

0800c4c0 <soft_timer_req>:
//! \note
//!         - Timer handle only can be used once.
//!
//
//******************************************************************************************
uint16_t soft_timer_req(uint32_t Tick) {
 800c4c0:	b480      	push	{r7}
 800c4c2:	b087      	sub	sp, #28
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	75fb      	strb	r3, [r7, #23]

  for (i = 1; i < TIMER_ELEMENT_NUM_MAX; i++) {
 800c4cc:	2301      	movs	r3, #1
 800c4ce:	75fb      	strb	r3, [r7, #23]
 800c4d0:	e024      	b.n	800c51c <soft_timer_req+0x5c>
    if (SoftTimer[i].handle == 0) {
 800c4d2:	7dfb      	ldrb	r3, [r7, #23]
 800c4d4:	4a16      	ldr	r2, [pc, #88]	; (800c530 <soft_timer_req+0x70>)
 800c4d6:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d11b      	bne.n	800c516 <soft_timer_req+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800c4de:	f3ef 8310 	mrs	r3, PRIMASK
 800c4e2:	60bb      	str	r3, [r7, #8]
  return(result);
 800c4e4:	68bb      	ldr	r3, [r7, #8]
      CRITICAL_SETCION_ENTER();
 800c4e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800c4e8:	b672      	cpsid	i
}
 800c4ea:	bf00      	nop

      SoftTimer[i].handle = i;
 800c4ec:	7dfb      	ldrb	r3, [r7, #23]
 800c4ee:	7dfa      	ldrb	r2, [r7, #23]
 800c4f0:	b291      	uxth	r1, r2
 800c4f2:	4a0f      	ldr	r2, [pc, #60]	; (800c530 <soft_timer_req+0x70>)
 800c4f4:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
      SoftTimer[i].delay = Tick;
 800c4f8:	7dfb      	ldrb	r3, [r7, #23]
 800c4fa:	4a0d      	ldr	r2, [pc, #52]	; (800c530 <soft_timer_req+0x70>)
 800c4fc:	00db      	lsls	r3, r3, #3
 800c4fe:	4413      	add	r3, r2
 800c500:	687a      	ldr	r2, [r7, #4]
 800c502:	605a      	str	r2, [r3, #4]
 800c504:	693b      	ldr	r3, [r7, #16]
 800c506:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	f383 8810 	msr	PRIMASK, r3
}
 800c50e:	bf00      	nop

      CRITICAL_SETCION_EXIT();

      return (i);
 800c510:	7dfb      	ldrb	r3, [r7, #23]
 800c512:	b29b      	uxth	r3, r3
 800c514:	e006      	b.n	800c524 <soft_timer_req+0x64>
  for (i = 1; i < TIMER_ELEMENT_NUM_MAX; i++) {
 800c516:	7dfb      	ldrb	r3, [r7, #23]
 800c518:	3301      	adds	r3, #1
 800c51a:	75fb      	strb	r3, [r7, #23]
 800c51c:	7dfb      	ldrb	r3, [r7, #23]
 800c51e:	2b13      	cmp	r3, #19
 800c520:	d9d7      	bls.n	800c4d2 <soft_timer_req+0x12>
    }
  }

  return (0);
 800c522:	2300      	movs	r3, #0
}
 800c524:	4618      	mov	r0, r3
 800c526:	371c      	adds	r7, #28
 800c528:	46bd      	mov	sp, r7
 800c52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52e:	4770      	bx	lr
 800c530:	20011350 	.word	0x20011350

0800c534 <soft_timer_update>:
//!         - Zero                     success
//!         - Non-Zero                 failure
//!
//
//******************************************************************************************
uint16_t soft_timer_update(uint32_t Id, uint32_t Tick) {
 800c534:	b480      	push	{r7}
 800c536:	b087      	sub	sp, #28
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
 800c53c:	6039      	str	r1, [r7, #0]
  for (uint8_t i = 1; i < TIMER_ELEMENT_NUM_MAX; i++) {
 800c53e:	2301      	movs	r3, #1
 800c540:	75fb      	strb	r3, [r7, #23]
 800c542:	e01f      	b.n	800c584 <soft_timer_update+0x50>
    if (SoftTimer[i].handle == Id) {
 800c544:	7dfb      	ldrb	r3, [r7, #23]
 800c546:	4a14      	ldr	r2, [pc, #80]	; (800c598 <soft_timer_update+0x64>)
 800c548:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 800c54c:	461a      	mov	r2, r3
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	4293      	cmp	r3, r2
 800c552:	d114      	bne.n	800c57e <soft_timer_update+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800c554:	f3ef 8310 	mrs	r3, PRIMASK
 800c558:	60bb      	str	r3, [r7, #8]
  return(result);
 800c55a:	68bb      	ldr	r3, [r7, #8]
      CRITICAL_SETCION_ENTER();
 800c55c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800c55e:	b672      	cpsid	i
}
 800c560:	bf00      	nop

      SoftTimer[i].delay = Tick;
 800c562:	7dfb      	ldrb	r3, [r7, #23]
 800c564:	4a0c      	ldr	r2, [pc, #48]	; (800c598 <soft_timer_update+0x64>)
 800c566:	00db      	lsls	r3, r3, #3
 800c568:	4413      	add	r3, r2
 800c56a:	683a      	ldr	r2, [r7, #0]
 800c56c:	605a      	str	r2, [r3, #4]
 800c56e:	693b      	ldr	r3, [r7, #16]
 800c570:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	f383 8810 	msr	PRIMASK, r3
}
 800c578:	bf00      	nop

      CRITICAL_SETCION_EXIT();

      // Success
      return (0);
 800c57a:	2300      	movs	r3, #0
 800c57c:	e006      	b.n	800c58c <soft_timer_update+0x58>
  for (uint8_t i = 1; i < TIMER_ELEMENT_NUM_MAX; i++) {
 800c57e:	7dfb      	ldrb	r3, [r7, #23]
 800c580:	3301      	adds	r3, #1
 800c582:	75fb      	strb	r3, [r7, #23]
 800c584:	7dfb      	ldrb	r3, [r7, #23]
 800c586:	2b13      	cmp	r3, #19
 800c588:	d9dc      	bls.n	800c544 <soft_timer_update+0x10>
    }
  }

  // Failure
  return (1);
 800c58a:	2301      	movs	r3, #1
}
 800c58c:	4618      	mov	r0, r3
 800c58e:	371c      	adds	r7, #28
 800c590:	46bd      	mov	sp, r7
 800c592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c596:	4770      	bx	lr
 800c598:	20011350 	.word	0x20011350

0800c59c <soft_timer_check>:
//!         handle.
//!         - Timer handle only can be used once.
//!
//
//******************************************************************************************
uint16_t soft_timer_check(uint16_t Handle) {
 800c59c:	b480      	push	{r7}
 800c59e:	b087      	sub	sp, #28
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	80fb      	strh	r3, [r7, #6]
  uint16_t retval = SOFT_TIMER_ERR;
 800c5a6:	2303      	movs	r3, #3
 800c5a8:	82fb      	strh	r3, [r7, #22]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800c5aa:	f3ef 8310 	mrs	r3, PRIMASK
 800c5ae:	60fb      	str	r3, [r7, #12]
  return(result);
 800c5b0:	68fb      	ldr	r3, [r7, #12]

  CRITICAL_SETCION_ENTER();
 800c5b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800c5b4:	b672      	cpsid	i
}
 800c5b6:	bf00      	nop
  if (SoftTimer[Handle].handle == Handle) {
 800c5b8:	88fb      	ldrh	r3, [r7, #6]
 800c5ba:	4a0f      	ldr	r2, [pc, #60]	; (800c5f8 <soft_timer_check+0x5c>)
 800c5bc:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 800c5c0:	88fa      	ldrh	r2, [r7, #6]
 800c5c2:	429a      	cmp	r2, r3
 800c5c4:	d10b      	bne.n	800c5de <soft_timer_check+0x42>
    if (SoftTimer[Handle].delay) {
 800c5c6:	88fb      	ldrh	r3, [r7, #6]
 800c5c8:	4a0b      	ldr	r2, [pc, #44]	; (800c5f8 <soft_timer_check+0x5c>)
 800c5ca:	00db      	lsls	r3, r3, #3
 800c5cc:	4413      	add	r3, r2
 800c5ce:	685b      	ldr	r3, [r3, #4]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d002      	beq.n	800c5da <soft_timer_check+0x3e>
      retval = SOFT_TIMER_ING;
 800c5d4:	2301      	movs	r3, #1
 800c5d6:	82fb      	strh	r3, [r7, #22]
 800c5d8:	e001      	b.n	800c5de <soft_timer_check+0x42>
    } else {
      retval = SOFT_TIMER_TIMEOUT;
 800c5da:	2302      	movs	r3, #2
 800c5dc:	82fb      	strh	r3, [r7, #22]
 800c5de:	693b      	ldr	r3, [r7, #16]
 800c5e0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c5e2:	68bb      	ldr	r3, [r7, #8]
 800c5e4:	f383 8810 	msr	PRIMASK, r3
}
 800c5e8:	bf00      	nop
    }
  }
  CRITICAL_SETCION_EXIT();

  return (retval);
 800c5ea:	8afb      	ldrh	r3, [r7, #22]
}
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	371c      	adds	r7, #28
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f6:	4770      	bx	lr
 800c5f8:	20011350 	.word	0x20011350

0800c5fc <usb_vcp_init>:
uint8_t usb_tx_fifo_buff[APP_TX_DATA_SIZE];
static usb_vcp_call_back_f usb_vcp_call_back[USB_REC_MAX_NUM];

static bool _fifo_flush_running = false;

void usb_vcp_init(bool use_fifo) {
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b082      	sub	sp, #8
 800c600:	af00      	add	r7, sp, #0
 800c602:	4603      	mov	r3, r0
 800c604:	71fb      	strb	r3, [r7, #7]
  if (use_fifo) {
 800c606:	79fb      	ldrb	r3, [r7, #7]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d003      	beq.n	800c614 <usb_vcp_init+0x18>
    _usb_vcp_use_fifo = true;
 800c60c:	4b0f      	ldr	r3, [pc, #60]	; (800c64c <usb_vcp_init+0x50>)
 800c60e:	2201      	movs	r2, #1
 800c610:	701a      	strb	r2, [r3, #0]
 800c612:	e002      	b.n	800c61a <usb_vcp_init+0x1e>
  } else {
    _usb_vcp_use_fifo = false;
 800c614:	4b0d      	ldr	r3, [pc, #52]	; (800c64c <usb_vcp_init+0x50>)
 800c616:	2200      	movs	r2, #0
 800c618:	701a      	strb	r2, [r3, #0]
  }
  if (_usb_vcp_use_fifo) {
 800c61a:	4b0c      	ldr	r3, [pc, #48]	; (800c64c <usb_vcp_init+0x50>)
 800c61c:	781b      	ldrb	r3, [r3, #0]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d00f      	beq.n	800c642 <usb_vcp_init+0x46>
    fifo_s_init(&usb_tx_fifo, usb_tx_fifo_buff, 4096);
 800c622:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c626:	490a      	ldr	r1, [pc, #40]	; (800c650 <usb_vcp_init+0x54>)
 800c628:	480a      	ldr	r0, [pc, #40]	; (800c654 <usb_vcp_init+0x58>)
 800c62a:	f7ff fdf1 	bl	800c210 <fifo_s_init>
    if (!_fifo_flush_running) {
 800c62e:	4b0a      	ldr	r3, [pc, #40]	; (800c658 <usb_vcp_init+0x5c>)
 800c630:	781b      	ldrb	r3, [r3, #0]
 800c632:	f083 0301 	eor.w	r3, r3, #1
 800c636:	b2db      	uxtb	r3, r3
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d002      	beq.n	800c642 <usb_vcp_init+0x46>
      // tx_flush_init(); // Run Fifo thread here.
      _fifo_flush_running = true;
 800c63c:	4b06      	ldr	r3, [pc, #24]	; (800c658 <usb_vcp_init+0x5c>)
 800c63e:	2201      	movs	r2, #1
 800c640:	701a      	strb	r2, [r3, #0]
    }
  }
}
 800c642:	bf00      	nop
 800c644:	3708      	adds	r7, #8
 800c646:	46bd      	mov	sp, r7
 800c648:	bd80      	pop	{r7, pc}
 800c64a:	bf00      	nop
 800c64c:	200000fe 	.word	0x200000fe
 800c650:	2001140c 	.word	0x2001140c
 800c654:	200113f4 	.word	0x200113f4
 800c658:	20012420 	.word	0x20012420

0800c65c <usb_vcp_receive_processing>:

void usb_vcp_receive_processing(uint8_t *Buf, uint32_t *Len) {
 800c65c:	b580      	push	{r7, lr}
 800c65e:	b084      	sub	sp, #16
 800c660:	af00      	add	r7, sp, #0
 800c662:	6078      	str	r0, [r7, #4]
 800c664:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < USB_REC_MAX_NUM; i++) {
 800c666:	2300      	movs	r3, #0
 800c668:	60fb      	str	r3, [r7, #12]
 800c66a:	e011      	b.n	800c690 <usb_vcp_receive_processing+0x34>
    if (usb_vcp_call_back[i] != NULL) {
 800c66c:	4a0f      	ldr	r2, [pc, #60]	; (800c6ac <usb_vcp_receive_processing+0x50>)
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d008      	beq.n	800c68a <usb_vcp_receive_processing+0x2e>
      (*usb_vcp_call_back[i])(Buf, *Len);
 800c678:	4a0c      	ldr	r2, [pc, #48]	; (800c6ac <usb_vcp_receive_processing+0x50>)
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c680:	683a      	ldr	r2, [r7, #0]
 800c682:	6812      	ldr	r2, [r2, #0]
 800c684:	4611      	mov	r1, r2
 800c686:	6878      	ldr	r0, [r7, #4]
 800c688:	4798      	blx	r3
  for (int i = 0; i < USB_REC_MAX_NUM; i++) {
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	3301      	adds	r3, #1
 800c68e:	60fb      	str	r3, [r7, #12]
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	2b04      	cmp	r3, #4
 800c694:	ddea      	ble.n	800c66c <usb_vcp_receive_processing+0x10>
    }
  }
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c696:	6879      	ldr	r1, [r7, #4]
 800c698:	4805      	ldr	r0, [pc, #20]	; (800c6b0 <usb_vcp_receive_processing+0x54>)
 800c69a:	f7fc f811 	bl	80086c0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c69e:	4804      	ldr	r0, [pc, #16]	; (800c6b0 <usb_vcp_receive_processing+0x54>)
 800c6a0:	f7fc f86c 	bl	800877c <USBD_CDC_ReceivePacket>
  return;
 800c6a4:	bf00      	nop
}
 800c6a6:	3710      	adds	r7, #16
 800c6a8:	46bd      	mov	sp, r7
 800c6aa:	bd80      	pop	{r7, pc}
 800c6ac:	2001240c 	.word	0x2001240c
 800c6b0:	2000f630 	.word	0x2000f630

0800c6b4 <usb_vcp_transmit_callback_processing>:

int8_t usb_vcp_transmit_callback_processing(
    uint8_t *Buf, uint32_t *Len) { // This function may not really work
 800c6b4:	b480      	push	{r7}
 800c6b6:	b083      	sub	sp, #12
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	6078      	str	r0, [r7, #4]
 800c6bc:	6039      	str	r1, [r7, #0]
  //  //Untested so commented out to prevent issue.
  //  if (_usb_tx_need_flushing) {
  //	usb_tx_flush(NULL);
  //  }
  return USBD_OK;
 800c6be:	2300      	movs	r3, #0
}
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	370c      	adds	r7, #12
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ca:	4770      	bx	lr

0800c6cc <transmit_processing_stm32_default>:
    return transmit_processing_robomaster_fifo(Buf, Len);
  }
  return transmit_processing_stm32_default(Buf, Len); // any other case
}

uint8_t transmit_processing_stm32_default(uint8_t *Buf, uint16_t Len) {
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b084      	sub	sp, #16
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
 800c6d4:	460b      	mov	r3, r1
 800c6d6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c6d8:	2300      	movs	r3, #0
 800c6da:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef *hcdc =
 800c6dc:	4b0d      	ldr	r3, [pc, #52]	; (800c714 <transmit_processing_stm32_default+0x48>)
 800c6de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c6e2:	60bb      	str	r3, [r7, #8]
      (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassData;
  if (hcdc->TxState != 0) {
 800c6e4:	68bb      	ldr	r3, [r7, #8]
 800c6e6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d001      	beq.n	800c6f2 <transmit_processing_stm32_default+0x26>
    return USBD_BUSY;
 800c6ee:	2301      	movs	r3, #1
 800c6f0:	e00b      	b.n	800c70a <transmit_processing_stm32_default+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c6f2:	887b      	ldrh	r3, [r7, #2]
 800c6f4:	461a      	mov	r2, r3
 800c6f6:	6879      	ldr	r1, [r7, #4]
 800c6f8:	4806      	ldr	r0, [pc, #24]	; (800c714 <transmit_processing_stm32_default+0x48>)
 800c6fa:	f7fb ffbf 	bl	800867c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c6fe:	4805      	ldr	r0, [pc, #20]	; (800c714 <transmit_processing_stm32_default+0x48>)
 800c700:	f7fb fffc 	bl	80086fc <USBD_CDC_TransmitPacket>
 800c704:	4603      	mov	r3, r0
 800c706:	73fb      	strb	r3, [r7, #15]
  return result;
 800c708:	7bfb      	ldrb	r3, [r7, #15]
}
 800c70a:	4618      	mov	r0, r3
 800c70c:	3710      	adds	r7, #16
 800c70e:	46bd      	mov	sp, r7
 800c710:	bd80      	pop	{r7, pc}
 800c712:	bf00      	nop
 800c714:	2000f630 	.word	0x2000f630

0800c718 <usb_vcp_tx_write_fifo>:

void usb_vcp_tx_write_fifo(uint8_t *Buf, uint16_t Len) {
 800c718:	b580      	push	{r7, lr}
 800c71a:	b082      	sub	sp, #8
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	6078      	str	r0, [r7, #4]
 800c720:	460b      	mov	r3, r1
 800c722:	807b      	strh	r3, [r7, #2]
  if (Len > 0) {
 800c724:	887b      	ldrh	r3, [r7, #2]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d009      	beq.n	800c73e <usb_vcp_tx_write_fifo+0x26>
    fifo_s_puts(&usb_tx_fifo, (char *)Buf, Len);
 800c72a:	887b      	ldrh	r3, [r7, #2]
 800c72c:	461a      	mov	r2, r3
 800c72e:	6879      	ldr	r1, [r7, #4]
 800c730:	4805      	ldr	r0, [pc, #20]	; (800c748 <usb_vcp_tx_write_fifo+0x30>)
 800c732:	f7ff fd8f 	bl	800c254 <fifo_s_puts>
    set_usb_tx_need_flushing(true);
 800c736:	2001      	movs	r0, #1
 800c738:	f000 f82c 	bl	800c794 <set_usb_tx_need_flushing>
  }
  return;
 800c73c:	bf00      	nop
 800c73e:	bf00      	nop
}
 800c740:	3708      	adds	r7, #8
 800c742:	46bd      	mov	sp, r7
 800c744:	bd80      	pop	{r7, pc}
 800c746:	bf00      	nop
 800c748:	200113f4 	.word	0x200113f4

0800c74c <usb_vcp_rx_callback_register>:
  fifo_s_puts(&usb_tx_fifo, (char *)Buf, Len);
  usb_tx_flush(NULL);
  return USBD_OK;
}

int32_t usb_vcp_rx_callback_register(usb_vcp_call_back_f fun) {
 800c74c:	b480      	push	{r7}
 800c74e:	b085      	sub	sp, #20
 800c750:	af00      	add	r7, sp, #0
 800c752:	6078      	str	r0, [r7, #4]
  for (int i = 0; i < USB_REC_MAX_NUM; i++) {
 800c754:	2300      	movs	r3, #0
 800c756:	60fb      	str	r3, [r7, #12]
 800c758:	e00f      	b.n	800c77a <usb_vcp_rx_callback_register+0x2e>
    if (usb_vcp_call_back[i] == NULL) {
 800c75a:	4a0d      	ldr	r2, [pc, #52]	; (800c790 <usb_vcp_rx_callback_register+0x44>)
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c762:	2b00      	cmp	r3, #0
 800c764:	d106      	bne.n	800c774 <usb_vcp_rx_callback_register+0x28>
      usb_vcp_call_back[i] = fun;
 800c766:	490a      	ldr	r1, [pc, #40]	; (800c790 <usb_vcp_rx_callback_register+0x44>)
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	687a      	ldr	r2, [r7, #4]
 800c76c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      return USBD_OK;
 800c770:	2300      	movs	r3, #0
 800c772:	e006      	b.n	800c782 <usb_vcp_rx_callback_register+0x36>
  for (int i = 0; i < USB_REC_MAX_NUM; i++) {
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	3301      	adds	r3, #1
 800c778:	60fb      	str	r3, [r7, #12]
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	2b04      	cmp	r3, #4
 800c77e:	ddec      	ble.n	800c75a <usb_vcp_rx_callback_register+0xe>
    }
  }
  return USBD_FAIL;
 800c780:	2303      	movs	r3, #3
}
 800c782:	4618      	mov	r0, r3
 800c784:	3714      	adds	r7, #20
 800c786:	46bd      	mov	sp, r7
 800c788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78c:	4770      	bx	lr
 800c78e:	bf00      	nop
 800c790:	2001240c 	.word	0x2001240c

0800c794 <set_usb_tx_need_flushing>:

void set_usb_tx_need_flushing(bool value) {
 800c794:	b490      	push	{r4, r7}
 800c796:	b084      	sub	sp, #16
 800c798:	af00      	add	r7, sp, #0
 800c79a:	4603      	mov	r3, r0
 800c79c:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800c79e:	f3ef 8310 	mrs	r3, PRIMASK
 800c7a2:	60bb      	str	r3, [r7, #8]
  return(result);
 800c7a4:	68bb      	ldr	r3, [r7, #8]
  FIFO_CPU_SR_TYPE cpu_sr =
      FIFO_GET_CPU_SR(); // todo Change to your own mutex here
 800c7a6:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 800c7a8:	b672      	cpsid	i
}
 800c7aa:	bf00      	nop
  FIFO_ENTER_CRITICAL();
  _usb_tx_need_flushing = value;
 800c7ac:	4a06      	ldr	r2, [pc, #24]	; (800c7c8 <set_usb_tx_need_flushing+0x34>)
 800c7ae:	79fb      	ldrb	r3, [r7, #7]
 800c7b0:	7013      	strb	r3, [r2, #0]
 800c7b2:	60fc      	str	r4, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	f383 8810 	msr	PRIMASK, r3
}
 800c7ba:	bf00      	nop
  FIFO_RESTORE_CPU_SR(cpu_sr);
}
 800c7bc:	bf00      	nop
 800c7be:	3710      	adds	r7, #16
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	bc90      	pop	{r4, r7}
 800c7c4:	4770      	bx	lr
 800c7c6:	bf00      	nop
 800c7c8:	200113f0 	.word	0x200113f0

0800c7cc <usb_tx_flush>:

int32_t usb_tx_flush(void *argc) {
 800c7cc:	b590      	push	{r4, r7, lr}
 800c7ce:	b089      	sub	sp, #36	; 0x24
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
  uint8_t result = USBD_OK;
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	77fb      	strb	r3, [r7, #31]
  USBD_CDC_HandleTypeDef *hcdc =
 800c7d8:	4b1a      	ldr	r3, [pc, #104]	; (800c844 <usb_tx_flush+0x78>)
 800c7da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c7de:	61bb      	str	r3, [r7, #24]
      (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassData;

  if (hcdc->TxState != 0) {
 800c7e0:	69bb      	ldr	r3, [r7, #24]
 800c7e2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d004      	beq.n	800c7f4 <usb_tx_flush+0x28>
    set_usb_tx_need_flushing(true);
 800c7ea:	2001      	movs	r0, #1
 800c7ec:	f7ff ffd2 	bl	800c794 <set_usb_tx_need_flushing>
    return USBD_BUSY;
 800c7f0:	2301      	movs	r3, #1
 800c7f2:	e022      	b.n	800c83a <usb_tx_flush+0x6e>
  } else {
    set_usb_tx_need_flushing(false);
 800c7f4:	2000      	movs	r0, #0
 800c7f6:	f7ff ffcd 	bl	800c794 <set_usb_tx_need_flushing>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800c7fa:	f3ef 8310 	mrs	r3, PRIMASK
 800c7fe:	60fb      	str	r3, [r7, #12]
  return(result);
 800c800:	68fb      	ldr	r3, [r7, #12]
    uint32_t send_num;

    FIFO_CPU_SR_TYPE cpu_sr = FIFO_GET_CPU_SR();
 800c802:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 800c804:	b672      	cpsid	i
}
 800c806:	bf00      	nop
    FIFO_ENTER_CRITICAL();
    send_num = usb_tx_fifo.used_num;
 800c808:	4b0f      	ldr	r3, [pc, #60]	; (800c848 <usb_tx_flush+0x7c>)
 800c80a:	68db      	ldr	r3, [r3, #12]
 800c80c:	617b      	str	r3, [r7, #20]
    fifo_s_gets_noprotect(&usb_tx_fifo, (char *)UserTxBufferFS, send_num);
 800c80e:	697b      	ldr	r3, [r7, #20]
 800c810:	461a      	mov	r2, r3
 800c812:	490e      	ldr	r1, [pc, #56]	; (800c84c <usb_tx_flush+0x80>)
 800c814:	480c      	ldr	r0, [pc, #48]	; (800c848 <usb_tx_flush+0x7c>)
 800c816:	f7ff fd9a 	bl	800c34e <fifo_s_gets_noprotect>
 800c81a:	613c      	str	r4, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c81c:	693b      	ldr	r3, [r7, #16]
 800c81e:	f383 8810 	msr	PRIMASK, r3
}
 800c822:	bf00      	nop
    FIFO_RESTORE_CPU_SR(cpu_sr);

    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, send_num);
 800c824:	697a      	ldr	r2, [r7, #20]
 800c826:	4909      	ldr	r1, [pc, #36]	; (800c84c <usb_tx_flush+0x80>)
 800c828:	4806      	ldr	r0, [pc, #24]	; (800c844 <usb_tx_flush+0x78>)
 800c82a:	f7fb ff27 	bl	800867c <USBD_CDC_SetTxBuffer>
    result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c82e:	4805      	ldr	r0, [pc, #20]	; (800c844 <usb_tx_flush+0x78>)
 800c830:	f7fb ff64 	bl	80086fc <USBD_CDC_TransmitPacket>
 800c834:	4603      	mov	r3, r0
 800c836:	77fb      	strb	r3, [r7, #31]
    return result;
 800c838:	7ffb      	ldrb	r3, [r7, #31]
  }
}
 800c83a:	4618      	mov	r0, r3
 800c83c:	3724      	adds	r7, #36	; 0x24
 800c83e:	46bd      	mov	sp, r7
 800c840:	bd90      	pop	{r4, r7, pc}
 800c842:	bf00      	nop
 800c844:	2000f630 	.word	0x2000f630
 800c848:	200113f4 	.word	0x200113f4
 800c84c:	2001010c 	.word	0x2001010c

0800c850 <usb_tx_flush_run>:

int32_t usb_tx_flush_run(void *argc) {
 800c850:	b580      	push	{r7, lr}
 800c852:	b082      	sub	sp, #8
 800c854:	af00      	add	r7, sp, #0
 800c856:	6078      	str	r0, [r7, #4]
  if (_usb_tx_need_flushing) {
 800c858:	4b05      	ldr	r3, [pc, #20]	; (800c870 <usb_tx_flush_run+0x20>)
 800c85a:	781b      	ldrb	r3, [r3, #0]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d002      	beq.n	800c866 <usb_tx_flush_run+0x16>
    usb_tx_flush(NULL);
 800c860:	2000      	movs	r0, #0
 800c862:	f7ff ffb3 	bl	800c7cc <usb_tx_flush>
  }
  return 0;
 800c866:	2300      	movs	r3, #0
}
 800c868:	4618      	mov	r0, r3
 800c86a:	3708      	adds	r7, #8
 800c86c:	46bd      	mov	sp, r7
 800c86e:	bd80      	pop	{r7, pc}
 800c870:	200113f0 	.word	0x200113f0

0800c874 <__malloc_lock>:
 800c874:	4801      	ldr	r0, [pc, #4]	; (800c87c <__malloc_lock+0x8>)
 800c876:	f000 b88b 	b.w	800c990 <__retarget_lock_acquire_recursive>
 800c87a:	bf00      	nop
 800c87c:	20012560 	.word	0x20012560

0800c880 <__malloc_unlock>:
 800c880:	4801      	ldr	r0, [pc, #4]	; (800c888 <__malloc_unlock+0x8>)
 800c882:	f000 b886 	b.w	800c992 <__retarget_lock_release_recursive>
 800c886:	bf00      	nop
 800c888:	20012560 	.word	0x20012560

0800c88c <memset>:
 800c88c:	4402      	add	r2, r0
 800c88e:	4603      	mov	r3, r0
 800c890:	4293      	cmp	r3, r2
 800c892:	d100      	bne.n	800c896 <memset+0xa>
 800c894:	4770      	bx	lr
 800c896:	f803 1b01 	strb.w	r1, [r3], #1
 800c89a:	e7f9      	b.n	800c890 <memset+0x4>

0800c89c <_reclaim_reent>:
 800c89c:	4b29      	ldr	r3, [pc, #164]	; (800c944 <_reclaim_reent+0xa8>)
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	4283      	cmp	r3, r0
 800c8a2:	b570      	push	{r4, r5, r6, lr}
 800c8a4:	4604      	mov	r4, r0
 800c8a6:	d04b      	beq.n	800c940 <_reclaim_reent+0xa4>
 800c8a8:	69c3      	ldr	r3, [r0, #28]
 800c8aa:	b143      	cbz	r3, 800c8be <_reclaim_reent+0x22>
 800c8ac:	68db      	ldr	r3, [r3, #12]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d144      	bne.n	800c93c <_reclaim_reent+0xa0>
 800c8b2:	69e3      	ldr	r3, [r4, #28]
 800c8b4:	6819      	ldr	r1, [r3, #0]
 800c8b6:	b111      	cbz	r1, 800c8be <_reclaim_reent+0x22>
 800c8b8:	4620      	mov	r0, r4
 800c8ba:	f000 f879 	bl	800c9b0 <_free_r>
 800c8be:	6961      	ldr	r1, [r4, #20]
 800c8c0:	b111      	cbz	r1, 800c8c8 <_reclaim_reent+0x2c>
 800c8c2:	4620      	mov	r0, r4
 800c8c4:	f000 f874 	bl	800c9b0 <_free_r>
 800c8c8:	69e1      	ldr	r1, [r4, #28]
 800c8ca:	b111      	cbz	r1, 800c8d2 <_reclaim_reent+0x36>
 800c8cc:	4620      	mov	r0, r4
 800c8ce:	f000 f86f 	bl	800c9b0 <_free_r>
 800c8d2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c8d4:	b111      	cbz	r1, 800c8dc <_reclaim_reent+0x40>
 800c8d6:	4620      	mov	r0, r4
 800c8d8:	f000 f86a 	bl	800c9b0 <_free_r>
 800c8dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c8de:	b111      	cbz	r1, 800c8e6 <_reclaim_reent+0x4a>
 800c8e0:	4620      	mov	r0, r4
 800c8e2:	f000 f865 	bl	800c9b0 <_free_r>
 800c8e6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c8e8:	b111      	cbz	r1, 800c8f0 <_reclaim_reent+0x54>
 800c8ea:	4620      	mov	r0, r4
 800c8ec:	f000 f860 	bl	800c9b0 <_free_r>
 800c8f0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c8f2:	b111      	cbz	r1, 800c8fa <_reclaim_reent+0x5e>
 800c8f4:	4620      	mov	r0, r4
 800c8f6:	f000 f85b 	bl	800c9b0 <_free_r>
 800c8fa:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800c8fc:	b111      	cbz	r1, 800c904 <_reclaim_reent+0x68>
 800c8fe:	4620      	mov	r0, r4
 800c900:	f000 f856 	bl	800c9b0 <_free_r>
 800c904:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800c906:	b111      	cbz	r1, 800c90e <_reclaim_reent+0x72>
 800c908:	4620      	mov	r0, r4
 800c90a:	f000 f851 	bl	800c9b0 <_free_r>
 800c90e:	6a23      	ldr	r3, [r4, #32]
 800c910:	b1b3      	cbz	r3, 800c940 <_reclaim_reent+0xa4>
 800c912:	4620      	mov	r0, r4
 800c914:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c918:	4718      	bx	r3
 800c91a:	5949      	ldr	r1, [r1, r5]
 800c91c:	b941      	cbnz	r1, 800c930 <_reclaim_reent+0x94>
 800c91e:	3504      	adds	r5, #4
 800c920:	69e3      	ldr	r3, [r4, #28]
 800c922:	2d80      	cmp	r5, #128	; 0x80
 800c924:	68d9      	ldr	r1, [r3, #12]
 800c926:	d1f8      	bne.n	800c91a <_reclaim_reent+0x7e>
 800c928:	4620      	mov	r0, r4
 800c92a:	f000 f841 	bl	800c9b0 <_free_r>
 800c92e:	e7c0      	b.n	800c8b2 <_reclaim_reent+0x16>
 800c930:	680e      	ldr	r6, [r1, #0]
 800c932:	4620      	mov	r0, r4
 800c934:	f000 f83c 	bl	800c9b0 <_free_r>
 800c938:	4631      	mov	r1, r6
 800c93a:	e7ef      	b.n	800c91c <_reclaim_reent+0x80>
 800c93c:	2500      	movs	r5, #0
 800c93e:	e7ef      	b.n	800c920 <_reclaim_reent+0x84>
 800c940:	bd70      	pop	{r4, r5, r6, pc}
 800c942:	bf00      	nop
 800c944:	2000014c 	.word	0x2000014c

0800c948 <__libc_init_array>:
 800c948:	b570      	push	{r4, r5, r6, lr}
 800c94a:	4d0d      	ldr	r5, [pc, #52]	; (800c980 <__libc_init_array+0x38>)
 800c94c:	4c0d      	ldr	r4, [pc, #52]	; (800c984 <__libc_init_array+0x3c>)
 800c94e:	1b64      	subs	r4, r4, r5
 800c950:	10a4      	asrs	r4, r4, #2
 800c952:	2600      	movs	r6, #0
 800c954:	42a6      	cmp	r6, r4
 800c956:	d109      	bne.n	800c96c <__libc_init_array+0x24>
 800c958:	4d0b      	ldr	r5, [pc, #44]	; (800c988 <__libc_init_array+0x40>)
 800c95a:	4c0c      	ldr	r4, [pc, #48]	; (800c98c <__libc_init_array+0x44>)
 800c95c:	f000 f874 	bl	800ca48 <_init>
 800c960:	1b64      	subs	r4, r4, r5
 800c962:	10a4      	asrs	r4, r4, #2
 800c964:	2600      	movs	r6, #0
 800c966:	42a6      	cmp	r6, r4
 800c968:	d105      	bne.n	800c976 <__libc_init_array+0x2e>
 800c96a:	bd70      	pop	{r4, r5, r6, pc}
 800c96c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c970:	4798      	blx	r3
 800c972:	3601      	adds	r6, #1
 800c974:	e7ee      	b.n	800c954 <__libc_init_array+0xc>
 800c976:	f855 3b04 	ldr.w	r3, [r5], #4
 800c97a:	4798      	blx	r3
 800c97c:	3601      	adds	r6, #1
 800c97e:	e7f2      	b.n	800c966 <__libc_init_array+0x1e>
 800c980:	0800cb5c 	.word	0x0800cb5c
 800c984:	0800cb5c 	.word	0x0800cb5c
 800c988:	0800cb5c 	.word	0x0800cb5c
 800c98c:	0800cb60 	.word	0x0800cb60

0800c990 <__retarget_lock_acquire_recursive>:
 800c990:	4770      	bx	lr

0800c992 <__retarget_lock_release_recursive>:
 800c992:	4770      	bx	lr

0800c994 <memcpy>:
 800c994:	440a      	add	r2, r1
 800c996:	4291      	cmp	r1, r2
 800c998:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c99c:	d100      	bne.n	800c9a0 <memcpy+0xc>
 800c99e:	4770      	bx	lr
 800c9a0:	b510      	push	{r4, lr}
 800c9a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c9a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c9aa:	4291      	cmp	r1, r2
 800c9ac:	d1f9      	bne.n	800c9a2 <memcpy+0xe>
 800c9ae:	bd10      	pop	{r4, pc}

0800c9b0 <_free_r>:
 800c9b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c9b2:	2900      	cmp	r1, #0
 800c9b4:	d044      	beq.n	800ca40 <_free_r+0x90>
 800c9b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c9ba:	9001      	str	r0, [sp, #4]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	f1a1 0404 	sub.w	r4, r1, #4
 800c9c2:	bfb8      	it	lt
 800c9c4:	18e4      	addlt	r4, r4, r3
 800c9c6:	f7ff ff55 	bl	800c874 <__malloc_lock>
 800c9ca:	4a1e      	ldr	r2, [pc, #120]	; (800ca44 <_free_r+0x94>)
 800c9cc:	9801      	ldr	r0, [sp, #4]
 800c9ce:	6813      	ldr	r3, [r2, #0]
 800c9d0:	b933      	cbnz	r3, 800c9e0 <_free_r+0x30>
 800c9d2:	6063      	str	r3, [r4, #4]
 800c9d4:	6014      	str	r4, [r2, #0]
 800c9d6:	b003      	add	sp, #12
 800c9d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c9dc:	f7ff bf50 	b.w	800c880 <__malloc_unlock>
 800c9e0:	42a3      	cmp	r3, r4
 800c9e2:	d908      	bls.n	800c9f6 <_free_r+0x46>
 800c9e4:	6825      	ldr	r5, [r4, #0]
 800c9e6:	1961      	adds	r1, r4, r5
 800c9e8:	428b      	cmp	r3, r1
 800c9ea:	bf01      	itttt	eq
 800c9ec:	6819      	ldreq	r1, [r3, #0]
 800c9ee:	685b      	ldreq	r3, [r3, #4]
 800c9f0:	1949      	addeq	r1, r1, r5
 800c9f2:	6021      	streq	r1, [r4, #0]
 800c9f4:	e7ed      	b.n	800c9d2 <_free_r+0x22>
 800c9f6:	461a      	mov	r2, r3
 800c9f8:	685b      	ldr	r3, [r3, #4]
 800c9fa:	b10b      	cbz	r3, 800ca00 <_free_r+0x50>
 800c9fc:	42a3      	cmp	r3, r4
 800c9fe:	d9fa      	bls.n	800c9f6 <_free_r+0x46>
 800ca00:	6811      	ldr	r1, [r2, #0]
 800ca02:	1855      	adds	r5, r2, r1
 800ca04:	42a5      	cmp	r5, r4
 800ca06:	d10b      	bne.n	800ca20 <_free_r+0x70>
 800ca08:	6824      	ldr	r4, [r4, #0]
 800ca0a:	4421      	add	r1, r4
 800ca0c:	1854      	adds	r4, r2, r1
 800ca0e:	42a3      	cmp	r3, r4
 800ca10:	6011      	str	r1, [r2, #0]
 800ca12:	d1e0      	bne.n	800c9d6 <_free_r+0x26>
 800ca14:	681c      	ldr	r4, [r3, #0]
 800ca16:	685b      	ldr	r3, [r3, #4]
 800ca18:	6053      	str	r3, [r2, #4]
 800ca1a:	440c      	add	r4, r1
 800ca1c:	6014      	str	r4, [r2, #0]
 800ca1e:	e7da      	b.n	800c9d6 <_free_r+0x26>
 800ca20:	d902      	bls.n	800ca28 <_free_r+0x78>
 800ca22:	230c      	movs	r3, #12
 800ca24:	6003      	str	r3, [r0, #0]
 800ca26:	e7d6      	b.n	800c9d6 <_free_r+0x26>
 800ca28:	6825      	ldr	r5, [r4, #0]
 800ca2a:	1961      	adds	r1, r4, r5
 800ca2c:	428b      	cmp	r3, r1
 800ca2e:	bf04      	itt	eq
 800ca30:	6819      	ldreq	r1, [r3, #0]
 800ca32:	685b      	ldreq	r3, [r3, #4]
 800ca34:	6063      	str	r3, [r4, #4]
 800ca36:	bf04      	itt	eq
 800ca38:	1949      	addeq	r1, r1, r5
 800ca3a:	6021      	streq	r1, [r4, #0]
 800ca3c:	6054      	str	r4, [r2, #4]
 800ca3e:	e7ca      	b.n	800c9d6 <_free_r+0x26>
 800ca40:	b003      	add	sp, #12
 800ca42:	bd30      	pop	{r4, r5, pc}
 800ca44:	20012424 	.word	0x20012424

0800ca48 <_init>:
 800ca48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca4a:	bf00      	nop
 800ca4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca4e:	bc08      	pop	{r3}
 800ca50:	469e      	mov	lr, r3
 800ca52:	4770      	bx	lr

0800ca54 <_fini>:
 800ca54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca56:	bf00      	nop
 800ca58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca5a:	bc08      	pop	{r3}
 800ca5c:	469e      	mov	lr, r3
 800ca5e:	4770      	bx	lr
