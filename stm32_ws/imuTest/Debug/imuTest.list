
imuTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d170  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  0800d320  0800d320  0001d320  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d470  0800d470  00020170  2**0
                  CONTENTS
  4 .ARM          00000008  0800d470  0800d470  0001d470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d478  0800d478  00020170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d478  0800d478  0001d478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d47c  0800d47c  0001d47c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000170  20000000  0800d480  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020170  2**0
                  CONTENTS
 10 .bss          00005d20  20000170  20000170  00020170  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20005e90  20005e90  00020170  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020170  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001e6ed  00000000  00000000  000201e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005555  00000000  00000000  0003e8d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001ad0  00000000  00000000  00043e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000144d  00000000  00000000  000458f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002a41a  00000000  00000000  00046d45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002359e  00000000  00000000  0007115f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e8714  00000000  00000000  000946fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000073b8  00000000  00000000  0017ce14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000080  00000000  00000000  001841cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000170 	.word	0x20000170
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800d308 	.word	0x0800d308

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000174 	.word	0x20000174
 80001ec:	0800d308 	.word	0x0800d308

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpun>:
 8000a9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x10>
 8000aa6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aaa:	d10a      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	d102      	bne.n	8000abc <__aeabi_dcmpun+0x20>
 8000ab6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0001 	mov.w	r0, #1
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_uldivmod>:
 8000b68:	b953      	cbnz	r3, 8000b80 <__aeabi_uldivmod+0x18>
 8000b6a:	b94a      	cbnz	r2, 8000b80 <__aeabi_uldivmod+0x18>
 8000b6c:	2900      	cmp	r1, #0
 8000b6e:	bf08      	it	eq
 8000b70:	2800      	cmpeq	r0, #0
 8000b72:	bf1c      	itt	ne
 8000b74:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b78:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b7c:	f000 b970 	b.w	8000e60 <__aeabi_idiv0>
 8000b80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b88:	f000 f806 	bl	8000b98 <__udivmoddi4>
 8000b8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b94:	b004      	add	sp, #16
 8000b96:	4770      	bx	lr

08000b98 <__udivmoddi4>:
 8000b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b9c:	9e08      	ldr	r6, [sp, #32]
 8000b9e:	460d      	mov	r5, r1
 8000ba0:	4604      	mov	r4, r0
 8000ba2:	460f      	mov	r7, r1
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d14a      	bne.n	8000c3e <__udivmoddi4+0xa6>
 8000ba8:	428a      	cmp	r2, r1
 8000baa:	4694      	mov	ip, r2
 8000bac:	d965      	bls.n	8000c7a <__udivmoddi4+0xe2>
 8000bae:	fab2 f382 	clz	r3, r2
 8000bb2:	b143      	cbz	r3, 8000bc6 <__udivmoddi4+0x2e>
 8000bb4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bb8:	f1c3 0220 	rsb	r2, r3, #32
 8000bbc:	409f      	lsls	r7, r3
 8000bbe:	fa20 f202 	lsr.w	r2, r0, r2
 8000bc2:	4317      	orrs	r7, r2
 8000bc4:	409c      	lsls	r4, r3
 8000bc6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bca:	fa1f f58c 	uxth.w	r5, ip
 8000bce:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bd2:	0c22      	lsrs	r2, r4, #16
 8000bd4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bd8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bdc:	fb01 f005 	mul.w	r0, r1, r5
 8000be0:	4290      	cmp	r0, r2
 8000be2:	d90a      	bls.n	8000bfa <__udivmoddi4+0x62>
 8000be4:	eb1c 0202 	adds.w	r2, ip, r2
 8000be8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000bec:	f080 811c 	bcs.w	8000e28 <__udivmoddi4+0x290>
 8000bf0:	4290      	cmp	r0, r2
 8000bf2:	f240 8119 	bls.w	8000e28 <__udivmoddi4+0x290>
 8000bf6:	3902      	subs	r1, #2
 8000bf8:	4462      	add	r2, ip
 8000bfa:	1a12      	subs	r2, r2, r0
 8000bfc:	b2a4      	uxth	r4, r4
 8000bfe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c02:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c06:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c0a:	fb00 f505 	mul.w	r5, r0, r5
 8000c0e:	42a5      	cmp	r5, r4
 8000c10:	d90a      	bls.n	8000c28 <__udivmoddi4+0x90>
 8000c12:	eb1c 0404 	adds.w	r4, ip, r4
 8000c16:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c1a:	f080 8107 	bcs.w	8000e2c <__udivmoddi4+0x294>
 8000c1e:	42a5      	cmp	r5, r4
 8000c20:	f240 8104 	bls.w	8000e2c <__udivmoddi4+0x294>
 8000c24:	4464      	add	r4, ip
 8000c26:	3802      	subs	r0, #2
 8000c28:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c2c:	1b64      	subs	r4, r4, r5
 8000c2e:	2100      	movs	r1, #0
 8000c30:	b11e      	cbz	r6, 8000c3a <__udivmoddi4+0xa2>
 8000c32:	40dc      	lsrs	r4, r3
 8000c34:	2300      	movs	r3, #0
 8000c36:	e9c6 4300 	strd	r4, r3, [r6]
 8000c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3e:	428b      	cmp	r3, r1
 8000c40:	d908      	bls.n	8000c54 <__udivmoddi4+0xbc>
 8000c42:	2e00      	cmp	r6, #0
 8000c44:	f000 80ed 	beq.w	8000e22 <__udivmoddi4+0x28a>
 8000c48:	2100      	movs	r1, #0
 8000c4a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c4e:	4608      	mov	r0, r1
 8000c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c54:	fab3 f183 	clz	r1, r3
 8000c58:	2900      	cmp	r1, #0
 8000c5a:	d149      	bne.n	8000cf0 <__udivmoddi4+0x158>
 8000c5c:	42ab      	cmp	r3, r5
 8000c5e:	d302      	bcc.n	8000c66 <__udivmoddi4+0xce>
 8000c60:	4282      	cmp	r2, r0
 8000c62:	f200 80f8 	bhi.w	8000e56 <__udivmoddi4+0x2be>
 8000c66:	1a84      	subs	r4, r0, r2
 8000c68:	eb65 0203 	sbc.w	r2, r5, r3
 8000c6c:	2001      	movs	r0, #1
 8000c6e:	4617      	mov	r7, r2
 8000c70:	2e00      	cmp	r6, #0
 8000c72:	d0e2      	beq.n	8000c3a <__udivmoddi4+0xa2>
 8000c74:	e9c6 4700 	strd	r4, r7, [r6]
 8000c78:	e7df      	b.n	8000c3a <__udivmoddi4+0xa2>
 8000c7a:	b902      	cbnz	r2, 8000c7e <__udivmoddi4+0xe6>
 8000c7c:	deff      	udf	#255	; 0xff
 8000c7e:	fab2 f382 	clz	r3, r2
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 8090 	bne.w	8000da8 <__udivmoddi4+0x210>
 8000c88:	1a8a      	subs	r2, r1, r2
 8000c8a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c8e:	fa1f fe8c 	uxth.w	lr, ip
 8000c92:	2101      	movs	r1, #1
 8000c94:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c98:	fb07 2015 	mls	r0, r7, r5, r2
 8000c9c:	0c22      	lsrs	r2, r4, #16
 8000c9e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ca2:	fb0e f005 	mul.w	r0, lr, r5
 8000ca6:	4290      	cmp	r0, r2
 8000ca8:	d908      	bls.n	8000cbc <__udivmoddi4+0x124>
 8000caa:	eb1c 0202 	adds.w	r2, ip, r2
 8000cae:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0x122>
 8000cb4:	4290      	cmp	r0, r2
 8000cb6:	f200 80cb 	bhi.w	8000e50 <__udivmoddi4+0x2b8>
 8000cba:	4645      	mov	r5, r8
 8000cbc:	1a12      	subs	r2, r2, r0
 8000cbe:	b2a4      	uxth	r4, r4
 8000cc0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cc4:	fb07 2210 	mls	r2, r7, r0, r2
 8000cc8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ccc:	fb0e fe00 	mul.w	lr, lr, r0
 8000cd0:	45a6      	cmp	lr, r4
 8000cd2:	d908      	bls.n	8000ce6 <__udivmoddi4+0x14e>
 8000cd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000cdc:	d202      	bcs.n	8000ce4 <__udivmoddi4+0x14c>
 8000cde:	45a6      	cmp	lr, r4
 8000ce0:	f200 80bb 	bhi.w	8000e5a <__udivmoddi4+0x2c2>
 8000ce4:	4610      	mov	r0, r2
 8000ce6:	eba4 040e 	sub.w	r4, r4, lr
 8000cea:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cee:	e79f      	b.n	8000c30 <__udivmoddi4+0x98>
 8000cf0:	f1c1 0720 	rsb	r7, r1, #32
 8000cf4:	408b      	lsls	r3, r1
 8000cf6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cfa:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cfe:	fa05 f401 	lsl.w	r4, r5, r1
 8000d02:	fa20 f307 	lsr.w	r3, r0, r7
 8000d06:	40fd      	lsrs	r5, r7
 8000d08:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d0c:	4323      	orrs	r3, r4
 8000d0e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d12:	fa1f fe8c 	uxth.w	lr, ip
 8000d16:	fb09 5518 	mls	r5, r9, r8, r5
 8000d1a:	0c1c      	lsrs	r4, r3, #16
 8000d1c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d20:	fb08 f50e 	mul.w	r5, r8, lr
 8000d24:	42a5      	cmp	r5, r4
 8000d26:	fa02 f201 	lsl.w	r2, r2, r1
 8000d2a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d2e:	d90b      	bls.n	8000d48 <__udivmoddi4+0x1b0>
 8000d30:	eb1c 0404 	adds.w	r4, ip, r4
 8000d34:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d38:	f080 8088 	bcs.w	8000e4c <__udivmoddi4+0x2b4>
 8000d3c:	42a5      	cmp	r5, r4
 8000d3e:	f240 8085 	bls.w	8000e4c <__udivmoddi4+0x2b4>
 8000d42:	f1a8 0802 	sub.w	r8, r8, #2
 8000d46:	4464      	add	r4, ip
 8000d48:	1b64      	subs	r4, r4, r5
 8000d4a:	b29d      	uxth	r5, r3
 8000d4c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d50:	fb09 4413 	mls	r4, r9, r3, r4
 8000d54:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d58:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	d908      	bls.n	8000d72 <__udivmoddi4+0x1da>
 8000d60:	eb1c 0404 	adds.w	r4, ip, r4
 8000d64:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000d68:	d26c      	bcs.n	8000e44 <__udivmoddi4+0x2ac>
 8000d6a:	45a6      	cmp	lr, r4
 8000d6c:	d96a      	bls.n	8000e44 <__udivmoddi4+0x2ac>
 8000d6e:	3b02      	subs	r3, #2
 8000d70:	4464      	add	r4, ip
 8000d72:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d76:	fba3 9502 	umull	r9, r5, r3, r2
 8000d7a:	eba4 040e 	sub.w	r4, r4, lr
 8000d7e:	42ac      	cmp	r4, r5
 8000d80:	46c8      	mov	r8, r9
 8000d82:	46ae      	mov	lr, r5
 8000d84:	d356      	bcc.n	8000e34 <__udivmoddi4+0x29c>
 8000d86:	d053      	beq.n	8000e30 <__udivmoddi4+0x298>
 8000d88:	b156      	cbz	r6, 8000da0 <__udivmoddi4+0x208>
 8000d8a:	ebb0 0208 	subs.w	r2, r0, r8
 8000d8e:	eb64 040e 	sbc.w	r4, r4, lr
 8000d92:	fa04 f707 	lsl.w	r7, r4, r7
 8000d96:	40ca      	lsrs	r2, r1
 8000d98:	40cc      	lsrs	r4, r1
 8000d9a:	4317      	orrs	r7, r2
 8000d9c:	e9c6 7400 	strd	r7, r4, [r6]
 8000da0:	4618      	mov	r0, r3
 8000da2:	2100      	movs	r1, #0
 8000da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da8:	f1c3 0120 	rsb	r1, r3, #32
 8000dac:	fa02 fc03 	lsl.w	ip, r2, r3
 8000db0:	fa20 f201 	lsr.w	r2, r0, r1
 8000db4:	fa25 f101 	lsr.w	r1, r5, r1
 8000db8:	409d      	lsls	r5, r3
 8000dba:	432a      	orrs	r2, r5
 8000dbc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc0:	fa1f fe8c 	uxth.w	lr, ip
 8000dc4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dc8:	fb07 1510 	mls	r5, r7, r0, r1
 8000dcc:	0c11      	lsrs	r1, r2, #16
 8000dce:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000dd2:	fb00 f50e 	mul.w	r5, r0, lr
 8000dd6:	428d      	cmp	r5, r1
 8000dd8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0x258>
 8000dde:	eb1c 0101 	adds.w	r1, ip, r1
 8000de2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000de6:	d22f      	bcs.n	8000e48 <__udivmoddi4+0x2b0>
 8000de8:	428d      	cmp	r5, r1
 8000dea:	d92d      	bls.n	8000e48 <__udivmoddi4+0x2b0>
 8000dec:	3802      	subs	r0, #2
 8000dee:	4461      	add	r1, ip
 8000df0:	1b49      	subs	r1, r1, r5
 8000df2:	b292      	uxth	r2, r2
 8000df4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000df8:	fb07 1115 	mls	r1, r7, r5, r1
 8000dfc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e00:	fb05 f10e 	mul.w	r1, r5, lr
 8000e04:	4291      	cmp	r1, r2
 8000e06:	d908      	bls.n	8000e1a <__udivmoddi4+0x282>
 8000e08:	eb1c 0202 	adds.w	r2, ip, r2
 8000e0c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e10:	d216      	bcs.n	8000e40 <__udivmoddi4+0x2a8>
 8000e12:	4291      	cmp	r1, r2
 8000e14:	d914      	bls.n	8000e40 <__udivmoddi4+0x2a8>
 8000e16:	3d02      	subs	r5, #2
 8000e18:	4462      	add	r2, ip
 8000e1a:	1a52      	subs	r2, r2, r1
 8000e1c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e20:	e738      	b.n	8000c94 <__udivmoddi4+0xfc>
 8000e22:	4631      	mov	r1, r6
 8000e24:	4630      	mov	r0, r6
 8000e26:	e708      	b.n	8000c3a <__udivmoddi4+0xa2>
 8000e28:	4639      	mov	r1, r7
 8000e2a:	e6e6      	b.n	8000bfa <__udivmoddi4+0x62>
 8000e2c:	4610      	mov	r0, r2
 8000e2e:	e6fb      	b.n	8000c28 <__udivmoddi4+0x90>
 8000e30:	4548      	cmp	r0, r9
 8000e32:	d2a9      	bcs.n	8000d88 <__udivmoddi4+0x1f0>
 8000e34:	ebb9 0802 	subs.w	r8, r9, r2
 8000e38:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e3c:	3b01      	subs	r3, #1
 8000e3e:	e7a3      	b.n	8000d88 <__udivmoddi4+0x1f0>
 8000e40:	4645      	mov	r5, r8
 8000e42:	e7ea      	b.n	8000e1a <__udivmoddi4+0x282>
 8000e44:	462b      	mov	r3, r5
 8000e46:	e794      	b.n	8000d72 <__udivmoddi4+0x1da>
 8000e48:	4640      	mov	r0, r8
 8000e4a:	e7d1      	b.n	8000df0 <__udivmoddi4+0x258>
 8000e4c:	46d0      	mov	r8, sl
 8000e4e:	e77b      	b.n	8000d48 <__udivmoddi4+0x1b0>
 8000e50:	3d02      	subs	r5, #2
 8000e52:	4462      	add	r2, ip
 8000e54:	e732      	b.n	8000cbc <__udivmoddi4+0x124>
 8000e56:	4608      	mov	r0, r1
 8000e58:	e70a      	b.n	8000c70 <__udivmoddi4+0xd8>
 8000e5a:	4464      	add	r4, ip
 8000e5c:	3802      	subs	r0, #2
 8000e5e:	e742      	b.n	8000ce6 <__udivmoddi4+0x14e>

08000e60 <__aeabi_idiv0>:
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop

08000e64 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000e68:	4b17      	ldr	r3, [pc, #92]	; (8000ec8 <MX_CAN1_Init+0x64>)
 8000e6a:	4a18      	ldr	r2, [pc, #96]	; (8000ecc <MX_CAN1_Init+0x68>)
 8000e6c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 7;
 8000e6e:	4b16      	ldr	r3, [pc, #88]	; (8000ec8 <MX_CAN1_Init+0x64>)
 8000e70:	2207      	movs	r2, #7
 8000e72:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000e74:	4b14      	ldr	r3, [pc, #80]	; (8000ec8 <MX_CAN1_Init+0x64>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000e7a:	4b13      	ldr	r3, [pc, #76]	; (8000ec8 <MX_CAN1_Init+0x64>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000e80:	4b11      	ldr	r3, [pc, #68]	; (8000ec8 <MX_CAN1_Init+0x64>)
 8000e82:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e86:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000e88:	4b0f      	ldr	r3, [pc, #60]	; (8000ec8 <MX_CAN1_Init+0x64>)
 8000e8a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000e8e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000e90:	4b0d      	ldr	r3, [pc, #52]	; (8000ec8 <MX_CAN1_Init+0x64>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000e96:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <MX_CAN1_Init+0x64>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000e9c:	4b0a      	ldr	r3, [pc, #40]	; (8000ec8 <MX_CAN1_Init+0x64>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000ea2:	4b09      	ldr	r3, [pc, #36]	; (8000ec8 <MX_CAN1_Init+0x64>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000ea8:	4b07      	ldr	r3, [pc, #28]	; (8000ec8 <MX_CAN1_Init+0x64>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 8000eae:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <MX_CAN1_Init+0x64>)
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000eb4:	4804      	ldr	r0, [pc, #16]	; (8000ec8 <MX_CAN1_Init+0x64>)
 8000eb6:	f000 ffa7 	bl	8001e08 <HAL_CAN_Init>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000ec0:	f000 faf0 	bl	80014a4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000ec4:	bf00      	nop
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	2000018c 	.word	0x2000018c
 8000ecc:	40006400 	.word	0x40006400

08000ed0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b08a      	sub	sp, #40	; 0x28
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]
 8000ee6:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a21      	ldr	r2, [pc, #132]	; (8000f74 <HAL_CAN_MspInit+0xa4>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d13b      	bne.n	8000f6a <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	613b      	str	r3, [r7, #16]
 8000ef6:	4b20      	ldr	r3, [pc, #128]	; (8000f78 <HAL_CAN_MspInit+0xa8>)
 8000ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efa:	4a1f      	ldr	r2, [pc, #124]	; (8000f78 <HAL_CAN_MspInit+0xa8>)
 8000efc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f00:	6413      	str	r3, [r2, #64]	; 0x40
 8000f02:	4b1d      	ldr	r3, [pc, #116]	; (8000f78 <HAL_CAN_MspInit+0xa8>)
 8000f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f0a:	613b      	str	r3, [r7, #16]
 8000f0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	4b19      	ldr	r3, [pc, #100]	; (8000f78 <HAL_CAN_MspInit+0xa8>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	4a18      	ldr	r2, [pc, #96]	; (8000f78 <HAL_CAN_MspInit+0xa8>)
 8000f18:	f043 0308 	orr.w	r3, r3, #8
 8000f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1e:	4b16      	ldr	r3, [pc, #88]	; (8000f78 <HAL_CAN_MspInit+0xa8>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	f003 0308 	and.w	r3, r3, #8
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f36:	2303      	movs	r3, #3
 8000f38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000f3a:	2309      	movs	r3, #9
 8000f3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f3e:	f107 0314 	add.w	r3, r7, #20
 8000f42:	4619      	mov	r1, r3
 8000f44:	480d      	ldr	r0, [pc, #52]	; (8000f7c <HAL_CAN_MspInit+0xac>)
 8000f46:	f001 fb75 	bl	8002634 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2105      	movs	r1, #5
 8000f4e:	2013      	movs	r0, #19
 8000f50:	f001 fb46 	bl	80025e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000f54:	2013      	movs	r0, #19
 8000f56:	f001 fb5f 	bl	8002618 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2105      	movs	r1, #5
 8000f5e:	2014      	movs	r0, #20
 8000f60:	f001 fb3e 	bl	80025e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000f64:	2014      	movs	r0, #20
 8000f66:	f001 fb57 	bl	8002618 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000f6a:	bf00      	nop
 8000f6c:	3728      	adds	r7, #40	; 0x28
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40006400 	.word	0x40006400
 8000f78:	40023800 	.word	0x40023800
 8000f7c:	40020c00 	.word	0x40020c00

08000f80 <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000f8a:	bf00      	nop
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr

08000f96 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000f9a:	bf00      	nop
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000fa4:	b5b0      	push	{r4, r5, r7, lr}
 8000fa6:	b086      	sub	sp, #24
 8000fa8:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000faa:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <MX_FREERTOS_Init+0x2c>)
 8000fac:	1d3c      	adds	r4, r7, #4
 8000fae:	461d      	mov	r5, r3
 8000fb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fb4:	682b      	ldr	r3, [r5, #0]
 8000fb6:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000fb8:	1d3b      	adds	r3, r7, #4
 8000fba:	2100      	movs	r1, #0
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f008 f98a 	bl	80092d6 <osThreadCreate>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	4a03      	ldr	r2, [pc, #12]	; (8000fd4 <MX_FREERTOS_Init+0x30>)
 8000fc6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000fc8:	bf00      	nop
 8000fca:	3718      	adds	r7, #24
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bdb0      	pop	{r4, r5, r7, pc}
 8000fd0:	0800d32c 	.word	0x0800d32c
 8000fd4:	200001b4 	.word	0x200001b4

08000fd8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000fe0:	f009 fc40 	bl	800a864 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000fe4:	2001      	movs	r0, #1
 8000fe6:	f008 f99d 	bl	8009324 <osDelay>
 8000fea:	e7fb      	b.n	8000fe4 <StartDefaultTask+0xc>

08000fec <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b08e      	sub	sp, #56	; 0x38
 8000ff0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	605a      	str	r2, [r3, #4]
 8000ffc:	609a      	str	r2, [r3, #8]
 8000ffe:	60da      	str	r2, [r3, #12]
 8001000:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	623b      	str	r3, [r7, #32]
 8001006:	4bb3      	ldr	r3, [pc, #716]	; (80012d4 <MX_GPIO_Init+0x2e8>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	4ab2      	ldr	r2, [pc, #712]	; (80012d4 <MX_GPIO_Init+0x2e8>)
 800100c:	f043 0310 	orr.w	r3, r3, #16
 8001010:	6313      	str	r3, [r2, #48]	; 0x30
 8001012:	4bb0      	ldr	r3, [pc, #704]	; (80012d4 <MX_GPIO_Init+0x2e8>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	f003 0310 	and.w	r3, r3, #16
 800101a:	623b      	str	r3, [r7, #32]
 800101c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	61fb      	str	r3, [r7, #28]
 8001022:	4bac      	ldr	r3, [pc, #688]	; (80012d4 <MX_GPIO_Init+0x2e8>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	4aab      	ldr	r2, [pc, #684]	; (80012d4 <MX_GPIO_Init+0x2e8>)
 8001028:	f043 0302 	orr.w	r3, r3, #2
 800102c:	6313      	str	r3, [r2, #48]	; 0x30
 800102e:	4ba9      	ldr	r3, [pc, #676]	; (80012d4 <MX_GPIO_Init+0x2e8>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	f003 0302 	and.w	r3, r3, #2
 8001036:	61fb      	str	r3, [r7, #28]
 8001038:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	61bb      	str	r3, [r7, #24]
 800103e:	4ba5      	ldr	r3, [pc, #660]	; (80012d4 <MX_GPIO_Init+0x2e8>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	4aa4      	ldr	r2, [pc, #656]	; (80012d4 <MX_GPIO_Init+0x2e8>)
 8001044:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001048:	6313      	str	r3, [r2, #48]	; 0x30
 800104a:	4ba2      	ldr	r3, [pc, #648]	; (80012d4 <MX_GPIO_Init+0x2e8>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001052:	61bb      	str	r3, [r7, #24]
 8001054:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	617b      	str	r3, [r7, #20]
 800105a:	4b9e      	ldr	r3, [pc, #632]	; (80012d4 <MX_GPIO_Init+0x2e8>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	4a9d      	ldr	r2, [pc, #628]	; (80012d4 <MX_GPIO_Init+0x2e8>)
 8001060:	f043 0308 	orr.w	r3, r3, #8
 8001064:	6313      	str	r3, [r2, #48]	; 0x30
 8001066:	4b9b      	ldr	r3, [pc, #620]	; (80012d4 <MX_GPIO_Init+0x2e8>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	f003 0308 	and.w	r3, r3, #8
 800106e:	617b      	str	r3, [r7, #20]
 8001070:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	613b      	str	r3, [r7, #16]
 8001076:	4b97      	ldr	r3, [pc, #604]	; (80012d4 <MX_GPIO_Init+0x2e8>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	4a96      	ldr	r2, [pc, #600]	; (80012d4 <MX_GPIO_Init+0x2e8>)
 800107c:	f043 0304 	orr.w	r3, r3, #4
 8001080:	6313      	str	r3, [r2, #48]	; 0x30
 8001082:	4b94      	ldr	r3, [pc, #592]	; (80012d4 <MX_GPIO_Init+0x2e8>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	f003 0304 	and.w	r3, r3, #4
 800108a:	613b      	str	r3, [r7, #16]
 800108c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	60fb      	str	r3, [r7, #12]
 8001092:	4b90      	ldr	r3, [pc, #576]	; (80012d4 <MX_GPIO_Init+0x2e8>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	4a8f      	ldr	r2, [pc, #572]	; (80012d4 <MX_GPIO_Init+0x2e8>)
 8001098:	f043 0301 	orr.w	r3, r3, #1
 800109c:	6313      	str	r3, [r2, #48]	; 0x30
 800109e:	4b8d      	ldr	r3, [pc, #564]	; (80012d4 <MX_GPIO_Init+0x2e8>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	f003 0301 	and.w	r3, r3, #1
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	60bb      	str	r3, [r7, #8]
 80010ae:	4b89      	ldr	r3, [pc, #548]	; (80012d4 <MX_GPIO_Init+0x2e8>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	4a88      	ldr	r2, [pc, #544]	; (80012d4 <MX_GPIO_Init+0x2e8>)
 80010b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010b8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ba:	4b86      	ldr	r3, [pc, #536]	; (80012d4 <MX_GPIO_Init+0x2e8>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010c2:	60bb      	str	r3, [r7, #8]
 80010c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	607b      	str	r3, [r7, #4]
 80010ca:	4b82      	ldr	r3, [pc, #520]	; (80012d4 <MX_GPIO_Init+0x2e8>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	4a81      	ldr	r2, [pc, #516]	; (80012d4 <MX_GPIO_Init+0x2e8>)
 80010d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010d4:	6313      	str	r3, [r2, #48]	; 0x30
 80010d6:	4b7f      	ldr	r3, [pc, #508]	; (80012d4 <MX_GPIO_Init+0x2e8>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010de:	607b      	str	r3, [r7, #4]
 80010e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	603b      	str	r3, [r7, #0]
 80010e6:	4b7b      	ldr	r3, [pc, #492]	; (80012d4 <MX_GPIO_Init+0x2e8>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	4a7a      	ldr	r2, [pc, #488]	; (80012d4 <MX_GPIO_Init+0x2e8>)
 80010ec:	f043 0320 	orr.w	r3, r3, #32
 80010f0:	6313      	str	r3, [r2, #48]	; 0x30
 80010f2:	4b78      	ldr	r3, [pc, #480]	; (80012d4 <MX_GPIO_Init+0x2e8>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	f003 0320 	and.w	r3, r3, #32
 80010fa:	603b      	str	r3, [r7, #0]
 80010fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, IST_RESET_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 80010fe:	2200      	movs	r2, #0
 8001100:	f640 0104 	movw	r1, #2052	; 0x804
 8001104:	4874      	ldr	r0, [pc, #464]	; (80012d8 <MX_GPIO_Init+0x2ec>)
 8001106:	f001 fc41 	bl	800298c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, POWER1_CTRL_Pin|POWER2_CTRL_Pin|POWER3_CTRL_Pin|POWER4_CTRL_Pin, GPIO_PIN_RESET);
 800110a:	2200      	movs	r2, #0
 800110c:	213c      	movs	r1, #60	; 0x3c
 800110e:	4873      	ldr	r0, [pc, #460]	; (80012dc <MX_GPIO_Init+0x2f0>)
 8001110:	f001 fc3c 	bl	800298c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED_A_Pin|LED_B_Pin|LED_C_Pin|LED_D_Pin
 8001114:	2200      	movs	r2, #0
 8001116:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 800111a:	4871      	ldr	r0, [pc, #452]	; (80012e0 <MX_GPIO_Init+0x2f4>)
 800111c:	f001 fc36 	bl	800298c <HAL_GPIO_WritePin>
                          |LED_E_Pin|LED_F_Pin|LED_G_Pin|LED_H_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SPI5_NSS_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 8001120:	2200      	movs	r2, #0
 8001122:	f244 0140 	movw	r1, #16448	; 0x4040
 8001126:	486f      	ldr	r0, [pc, #444]	; (80012e4 <MX_GPIO_Init+0x2f8>)
 8001128:	f001 fc30 	bl	800298c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IO_PROBE_GPIO_Port, IO_PROBE_Pin, GPIO_PIN_RESET);
 800112c:	2200      	movs	r2, #0
 800112e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001132:	486d      	ldr	r0, [pc, #436]	; (80012e8 <MX_GPIO_Init+0x2fc>)
 8001134:	f001 fc2a 	bl	800298c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE1 PE0 PE4
                           PE5 PE6 PE13 PE8
                           PE9 PE7 PE10 PE12
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_4
 8001138:	f24b 73fb 	movw	r3, #47099	; 0xb7fb
 800113c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_13|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800113e:	2303      	movs	r3, #3
 8001140:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	2300      	movs	r3, #0
 8001144:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001146:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800114a:	4619      	mov	r1, r3
 800114c:	4862      	ldr	r0, [pc, #392]	; (80012d8 <MX_GPIO_Init+0x2ec>)
 800114e:	f001 fa71 	bl	8002634 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = IST_RESET_Pin|LED_RED_Pin;
 8001152:	f640 0304 	movw	r3, #2052	; 0x804
 8001156:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001158:	2301      	movs	r3, #1
 800115a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001160:	2300      	movs	r3, #0
 8001162:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001164:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001168:	4619      	mov	r1, r3
 800116a:	485b      	ldr	r0, [pc, #364]	; (80012d8 <MX_GPIO_Init+0x2ec>)
 800116c:	f001 fa62 	bl	8002634 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB4 PB3 PB9
                           PB7 PB6 PB12 PB13
                           PB1 PB0 PB10 PB11
                           PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_9
 8001170:	f64f 73db 	movw	r3, #65499	; 0xffdb
 8001174:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001176:	2303      	movs	r3, #3
 8001178:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800117e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001182:	4619      	mov	r1, r3
 8001184:	4859      	ldr	r0, [pc, #356]	; (80012ec <MX_GPIO_Init+0x300>)
 8001186:	f001 fa55 	bl	8002634 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG14 PG13 PG15 PG12
                           PG11 PG10 PG9 PG0 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_12
 800118a:	f64f 6301 	movw	r3, #65025	; 0xfe01
 800118e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001190:	2303      	movs	r3, #3
 8001192:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001194:	2300      	movs	r3, #0
 8001196:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001198:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800119c:	4619      	mov	r1, r3
 800119e:	4850      	ldr	r0, [pc, #320]	; (80012e0 <MX_GPIO_Init+0x2f4>)
 80011a0:	f001 fa48 	bl	8002634 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD7 PD5 PD4 PD3
                           PD2 PD15 PD14 PD13
                           PD11 PD10 PD9 PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3
 80011a4:	f64e 73bc 	movw	r3, #61372	; 0xefbc
 80011a8:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_2|GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011aa:	2303      	movs	r3, #3
 80011ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011b6:	4619      	mov	r1, r3
 80011b8:	484b      	ldr	r0, [pc, #300]	; (80012e8 <MX_GPIO_Init+0x2fc>)
 80011ba:	f001 fa3b 	bl	8002634 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC12 PC11 PC10 PC13
                           PC14 PC15 PC9 PC8
                           PC7 PC6 PC0 PC1
                           PC2 PC3 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_13
 80011be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011c2:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011c4:	2303      	movs	r3, #3
 80011c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c8:	2300      	movs	r3, #0
 80011ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011d0:	4619      	mov	r1, r3
 80011d2:	4847      	ldr	r0, [pc, #284]	; (80012f0 <MX_GPIO_Init+0x304>)
 80011d4:	f001 fa2e 	bl	8002634 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA15 PA10 PA9 PA4
                           PA6 PA5 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_4
 80011d8:	f248 63f0 	movw	r3, #34544	; 0x86f0
 80011dc:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011de:	2303      	movs	r3, #3
 80011e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ea:	4619      	mov	r1, r3
 80011ec:	4841      	ldr	r0, [pc, #260]	; (80012f4 <MX_GPIO_Init+0x308>)
 80011ee:	f001 fa21 	bl	8002634 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SYS_CFG_Pin;
 80011f2:	2340      	movs	r3, #64	; 0x40
 80011f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011f6:	2300      	movs	r3, #0
 80011f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fa:	2300      	movs	r3, #0
 80011fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SYS_CFG_GPIO_Port, &GPIO_InitStruct);
 80011fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001202:	4619      	mov	r1, r3
 8001204:	4838      	ldr	r0, [pc, #224]	; (80012e8 <MX_GPIO_Init+0x2fc>)
 8001206:	f001 fa15 	bl	8002634 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = PIN_Y_Pin|PIN_X_Pin|PIN_V_Pin|PIN_Z_Pin;
 800120a:	23e4      	movs	r3, #228	; 0xe4
 800120c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800120e:	2300      	movs	r3, #0
 8001210:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001216:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800121a:	4619      	mov	r1, r3
 800121c:	4836      	ldr	r0, [pc, #216]	; (80012f8 <MX_GPIO_Init+0x30c>)
 800121e:	f001 fa09 	bl	8002634 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI3 PI8 PI9 PI4
                           PI1 PI10 PI11 PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_4
 8001222:	f640 731b 	movw	r3, #3867	; 0xf1b
 8001226:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001228:	2303      	movs	r3, #3
 800122a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122c:	2300      	movs	r3, #0
 800122e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001230:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001234:	4619      	mov	r1, r3
 8001236:	4830      	ldr	r0, [pc, #192]	; (80012f8 <MX_GPIO_Init+0x30c>)
 8001238:	f001 f9fc 	bl	8002634 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH15 PH13 PH14 PH12
                           PH11 PH10 PH8 PH9
                           PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_12
 800123c:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001240:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001242:	2303      	movs	r3, #3
 8001244:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	2300      	movs	r3, #0
 8001248:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800124a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800124e:	4619      	mov	r1, r3
 8001250:	4822      	ldr	r0, [pc, #136]	; (80012dc <MX_GPIO_Init+0x2f0>)
 8001252:	f001 f9ef 	bl	8002634 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF2 PF1 PF3
                           PF4 PF5 PF13 PF12
                           PF15 PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_3
 8001256:	f64b 033f 	movw	r3, #47167	; 0xb83f
 800125a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_13|GPIO_PIN_12
                          |GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800125c:	2303      	movs	r3, #3
 800125e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	2300      	movs	r3, #0
 8001262:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001264:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001268:	4619      	mov	r1, r3
 800126a:	481e      	ldr	r0, [pc, #120]	; (80012e4 <MX_GPIO_Init+0x2f8>)
 800126c:	f001 f9e2 	bl	8002634 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = POWER1_CTRL_Pin|POWER2_CTRL_Pin|POWER3_CTRL_Pin|POWER4_CTRL_Pin;
 8001270:	233c      	movs	r3, #60	; 0x3c
 8001272:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001274:	2301      	movs	r3, #1
 8001276:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127c:	2300      	movs	r3, #0
 800127e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001280:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001284:	4619      	mov	r1, r3
 8001286:	4815      	ldr	r0, [pc, #84]	; (80012dc <MX_GPIO_Init+0x2f0>)
 8001288:	f001 f9d4 	bl	8002634 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LED_A_Pin|LED_B_Pin|LED_C_Pin|LED_D_Pin
 800128c:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 8001290:	627b      	str	r3, [r7, #36]	; 0x24
                          |LED_E_Pin|LED_F_Pin|LED_G_Pin|LED_H_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001292:	2301      	movs	r3, #1
 8001294:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129a:	2300      	movs	r3, #0
 800129c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800129e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a2:	4619      	mov	r1, r3
 80012a4:	480e      	ldr	r0, [pc, #56]	; (80012e0 <MX_GPIO_Init+0x2f4>)
 80012a6:	f001 f9c5 	bl	8002634 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = SPI5_NSS_Pin|LED_GREEN_Pin;
 80012aa:	f244 0340 	movw	r3, #16448	; 0x4040
 80012ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b0:	2301      	movs	r3, #1
 80012b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b8:	2300      	movs	r3, #0
 80012ba:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012c0:	4619      	mov	r1, r3
 80012c2:	4808      	ldr	r0, [pc, #32]	; (80012e4 <MX_GPIO_Init+0x2f8>)
 80012c4:	f001 f9b6 	bl	8002634 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 80012c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012ce:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012d2:	e013      	b.n	80012fc <MX_GPIO_Init+0x310>
 80012d4:	40023800 	.word	0x40023800
 80012d8:	40021000 	.word	0x40021000
 80012dc:	40021c00 	.word	0x40021c00
 80012e0:	40021800 	.word	0x40021800
 80012e4:	40021400 	.word	0x40021400
 80012e8:	40020c00 	.word	0x40020c00
 80012ec:	40020400 	.word	0x40020400
 80012f0:	40020800 	.word	0x40020800
 80012f4:	40020000 	.word	0x40020000
 80012f8:	40022000 	.word	0x40022000
 80012fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012fe:	2301      	movs	r3, #1
 8001300:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 8001302:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001306:	4619      	mov	r1, r3
 8001308:	4816      	ldr	r0, [pc, #88]	; (8001364 <MX_GPIO_Init+0x378>)
 800130a:	f001 f993 	bl	8002634 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_Pin;
 800130e:	2304      	movs	r3, #4
 8001310:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001312:	2300      	movs	r3, #0
 8001314:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 800131a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800131e:	4619      	mov	r1, r3
 8001320:	4811      	ldr	r0, [pc, #68]	; (8001368 <MX_GPIO_Init+0x37c>)
 8001322:	f001 f987 	bl	8002634 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = PIN_YA1_Pin|PIN_ZA0_Pin|PIN_XA2_Pin|PIN_W_Pin;
 8001326:	230f      	movs	r3, #15
 8001328:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800132a:	2300      	movs	r3, #0
 800132c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132e:	2300      	movs	r3, #0
 8001330:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001332:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001336:	4619      	mov	r1, r3
 8001338:	480c      	ldr	r0, [pc, #48]	; (800136c <MX_GPIO_Init+0x380>)
 800133a:	f001 f97b 	bl	8002634 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IO_PROBE_Pin;
 800133e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001342:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001344:	2301      	movs	r3, #1
 8001346:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134c:	2300      	movs	r3, #0
 800134e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(IO_PROBE_GPIO_Port, &GPIO_InitStruct);
 8001350:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001354:	4619      	mov	r1, r3
 8001356:	4806      	ldr	r0, [pc, #24]	; (8001370 <MX_GPIO_Init+0x384>)
 8001358:	f001 f96c 	bl	8002634 <HAL_GPIO_Init>

}
 800135c:	bf00      	nop
 800135e:	3738      	adds	r7, #56	; 0x38
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	40021400 	.word	0x40021400
 8001368:	40020400 	.word	0x40020400
 800136c:	40020000 	.word	0x40020000
 8001370:	40020c00 	.word	0x40020c00

08001374 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001378:	f000 fce0 	bl	8001d3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800137c:	f000 f816 	bl	80013ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001380:	f7ff fe34 	bl	8000fec <MX_GPIO_Init>
  MX_SPI5_Init();
 8001384:	f000 f894 	bl	80014b0 <MX_SPI5_Init>
  MX_CAN1_Init();
 8001388:	f7ff fd6c 	bl	8000e64 <MX_CAN1_Init>
  MX_TIM1_Init();
 800138c:	f000 fa10 	bl	80017b0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001390:	f000 fa9e 	bl	80018d0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001394:	f000 fae8 	bl	8001968 <MX_TIM3_Init>
  MX_TIM12_Init();
 8001398:	f000 fb40 	bl	8001a1c <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */
  init_task();
 800139c:	f009 ffb4 	bl	800b308 <init_task>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80013a0:	f7ff fe00 	bl	8000fa4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80013a4:	f007 ff80 	bl	80092a8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013a8:	e7fe      	b.n	80013a8 <main+0x34>
	...

080013ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b094      	sub	sp, #80	; 0x50
 80013b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013b2:	f107 0320 	add.w	r3, r7, #32
 80013b6:	2230      	movs	r2, #48	; 0x30
 80013b8:	2100      	movs	r1, #0
 80013ba:	4618      	mov	r0, r3
 80013bc:	f00b f924 	bl	800c608 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013c0:	f107 030c 	add.w	r3, r7, #12
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013d0:	2300      	movs	r3, #0
 80013d2:	60bb      	str	r3, [r7, #8]
 80013d4:	4b28      	ldr	r3, [pc, #160]	; (8001478 <SystemClock_Config+0xcc>)
 80013d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d8:	4a27      	ldr	r2, [pc, #156]	; (8001478 <SystemClock_Config+0xcc>)
 80013da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013de:	6413      	str	r3, [r2, #64]	; 0x40
 80013e0:	4b25      	ldr	r3, [pc, #148]	; (8001478 <SystemClock_Config+0xcc>)
 80013e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e8:	60bb      	str	r3, [r7, #8]
 80013ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013ec:	2300      	movs	r3, #0
 80013ee:	607b      	str	r3, [r7, #4]
 80013f0:	4b22      	ldr	r3, [pc, #136]	; (800147c <SystemClock_Config+0xd0>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a21      	ldr	r2, [pc, #132]	; (800147c <SystemClock_Config+0xd0>)
 80013f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013fa:	6013      	str	r3, [r2, #0]
 80013fc:	4b1f      	ldr	r3, [pc, #124]	; (800147c <SystemClock_Config+0xd0>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001404:	607b      	str	r3, [r7, #4]
 8001406:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001408:	2301      	movs	r3, #1
 800140a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800140c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001410:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001412:	2302      	movs	r3, #2
 8001414:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001416:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800141a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 800141c:	2306      	movs	r3, #6
 800141e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001420:	23a8      	movs	r3, #168	; 0xa8
 8001422:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001424:	2302      	movs	r3, #2
 8001426:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001428:	2307      	movs	r3, #7
 800142a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800142c:	f107 0320 	add.w	r3, r7, #32
 8001430:	4618      	mov	r0, r3
 8001432:	f002 fd2f 	bl	8003e94 <HAL_RCC_OscConfig>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800143c:	f000 f832 	bl	80014a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001440:	230f      	movs	r3, #15
 8001442:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001444:	2302      	movs	r3, #2
 8001446:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001448:	2300      	movs	r3, #0
 800144a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800144c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001450:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001452:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001456:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001458:	f107 030c 	add.w	r3, r7, #12
 800145c:	2105      	movs	r1, #5
 800145e:	4618      	mov	r0, r3
 8001460:	f002 ff90 	bl	8004384 <HAL_RCC_ClockConfig>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800146a:	f000 f81b 	bl	80014a4 <Error_Handler>
  }
}
 800146e:	bf00      	nop
 8001470:	3750      	adds	r7, #80	; 0x50
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40023800 	.word	0x40023800
 800147c:	40007000 	.word	0x40007000

08001480 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a04      	ldr	r2, [pc, #16]	; (80014a0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d101      	bne.n	8001496 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001492:	f000 fc75 	bl	8001d80 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001496:	bf00      	nop
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40000c00 	.word	0x40000c00

080014a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014a8:	b672      	cpsid	i
}
 80014aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014ac:	e7fe      	b.n	80014ac <Error_Handler+0x8>
	...

080014b0 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 80014b4:	4b17      	ldr	r3, [pc, #92]	; (8001514 <MX_SPI5_Init+0x64>)
 80014b6:	4a18      	ldr	r2, [pc, #96]	; (8001518 <MX_SPI5_Init+0x68>)
 80014b8:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80014ba:	4b16      	ldr	r3, [pc, #88]	; (8001514 <MX_SPI5_Init+0x64>)
 80014bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014c0:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80014c2:	4b14      	ldr	r3, [pc, #80]	; (8001514 <MX_SPI5_Init+0x64>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80014c8:	4b12      	ldr	r3, [pc, #72]	; (8001514 <MX_SPI5_Init+0x64>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014ce:	4b11      	ldr	r3, [pc, #68]	; (8001514 <MX_SPI5_Init+0x64>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014d4:	4b0f      	ldr	r3, [pc, #60]	; (8001514 <MX_SPI5_Init+0x64>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80014da:	4b0e      	ldr	r3, [pc, #56]	; (8001514 <MX_SPI5_Init+0x64>)
 80014dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014e0:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80014e2:	4b0c      	ldr	r3, [pc, #48]	; (8001514 <MX_SPI5_Init+0x64>)
 80014e4:	2230      	movs	r2, #48	; 0x30
 80014e6:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014e8:	4b0a      	ldr	r3, [pc, #40]	; (8001514 <MX_SPI5_Init+0x64>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80014ee:	4b09      	ldr	r3, [pc, #36]	; (8001514 <MX_SPI5_Init+0x64>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014f4:	4b07      	ldr	r3, [pc, #28]	; (8001514 <MX_SPI5_Init+0x64>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80014fa:	4b06      	ldr	r3, [pc, #24]	; (8001514 <MX_SPI5_Init+0x64>)
 80014fc:	220a      	movs	r2, #10
 80014fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001500:	4804      	ldr	r0, [pc, #16]	; (8001514 <MX_SPI5_Init+0x64>)
 8001502:	f003 f93d 	bl	8004780 <HAL_SPI_Init>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 800150c:	f7ff ffca 	bl	80014a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001510:	bf00      	nop
 8001512:	bd80      	pop	{r7, pc}
 8001514:	200001b8 	.word	0x200001b8
 8001518:	40015000 	.word	0x40015000

0800151c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08a      	sub	sp, #40	; 0x28
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001524:	f107 0314 	add.w	r3, r7, #20
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]
 8001532:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a19      	ldr	r2, [pc, #100]	; (80015a0 <HAL_SPI_MspInit+0x84>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d12c      	bne.n	8001598 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	613b      	str	r3, [r7, #16]
 8001542:	4b18      	ldr	r3, [pc, #96]	; (80015a4 <HAL_SPI_MspInit+0x88>)
 8001544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001546:	4a17      	ldr	r2, [pc, #92]	; (80015a4 <HAL_SPI_MspInit+0x88>)
 8001548:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800154c:	6453      	str	r3, [r2, #68]	; 0x44
 800154e:	4b15      	ldr	r3, [pc, #84]	; (80015a4 <HAL_SPI_MspInit+0x88>)
 8001550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001552:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001556:	613b      	str	r3, [r7, #16]
 8001558:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	4b11      	ldr	r3, [pc, #68]	; (80015a4 <HAL_SPI_MspInit+0x88>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	4a10      	ldr	r2, [pc, #64]	; (80015a4 <HAL_SPI_MspInit+0x88>)
 8001564:	f043 0320 	orr.w	r3, r3, #32
 8001568:	6313      	str	r3, [r2, #48]	; 0x30
 800156a:	4b0e      	ldr	r3, [pc, #56]	; (80015a4 <HAL_SPI_MspInit+0x88>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	f003 0320 	and.w	r3, r3, #32
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF9     ------> SPI5_MOSI
    PF8     ------> SPI5_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_8;
 8001576:	f44f 7360 	mov.w	r3, #896	; 0x380
 800157a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157c:	2302      	movs	r3, #2
 800157e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001584:	2303      	movs	r3, #3
 8001586:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001588:	2305      	movs	r3, #5
 800158a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800158c:	f107 0314 	add.w	r3, r7, #20
 8001590:	4619      	mov	r1, r3
 8001592:	4805      	ldr	r0, [pc, #20]	; (80015a8 <HAL_SPI_MspInit+0x8c>)
 8001594:	f001 f84e 	bl	8002634 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8001598:	bf00      	nop
 800159a:	3728      	adds	r7, #40	; 0x28
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40015000 	.word	0x40015000
 80015a4:	40023800 	.word	0x40023800
 80015a8:	40021400 	.word	0x40021400

080015ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	607b      	str	r3, [r7, #4]
 80015b6:	4b12      	ldr	r3, [pc, #72]	; (8001600 <HAL_MspInit+0x54>)
 80015b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ba:	4a11      	ldr	r2, [pc, #68]	; (8001600 <HAL_MspInit+0x54>)
 80015bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015c0:	6453      	str	r3, [r2, #68]	; 0x44
 80015c2:	4b0f      	ldr	r3, [pc, #60]	; (8001600 <HAL_MspInit+0x54>)
 80015c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ca:	607b      	str	r3, [r7, #4]
 80015cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	603b      	str	r3, [r7, #0]
 80015d2:	4b0b      	ldr	r3, [pc, #44]	; (8001600 <HAL_MspInit+0x54>)
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d6:	4a0a      	ldr	r2, [pc, #40]	; (8001600 <HAL_MspInit+0x54>)
 80015d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015dc:	6413      	str	r3, [r2, #64]	; 0x40
 80015de:	4b08      	ldr	r3, [pc, #32]	; (8001600 <HAL_MspInit+0x54>)
 80015e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e6:	603b      	str	r3, [r7, #0]
 80015e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80015ea:	2200      	movs	r2, #0
 80015ec:	210f      	movs	r1, #15
 80015ee:	f06f 0001 	mvn.w	r0, #1
 80015f2:	f000 fff5 	bl	80025e0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015f6:	bf00      	nop
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40023800 	.word	0x40023800

08001604 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b08e      	sub	sp, #56	; 0x38
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800160c:	2300      	movs	r3, #0
 800160e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001610:	2300      	movs	r3, #0
 8001612:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8001614:	2300      	movs	r3, #0
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	4b33      	ldr	r3, [pc, #204]	; (80016e8 <HAL_InitTick+0xe4>)
 800161a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161c:	4a32      	ldr	r2, [pc, #200]	; (80016e8 <HAL_InitTick+0xe4>)
 800161e:	f043 0308 	orr.w	r3, r3, #8
 8001622:	6413      	str	r3, [r2, #64]	; 0x40
 8001624:	4b30      	ldr	r3, [pc, #192]	; (80016e8 <HAL_InitTick+0xe4>)
 8001626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001628:	f003 0308 	and.w	r3, r3, #8
 800162c:	60fb      	str	r3, [r7, #12]
 800162e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001630:	f107 0210 	add.w	r2, r7, #16
 8001634:	f107 0314 	add.w	r3, r7, #20
 8001638:	4611      	mov	r1, r2
 800163a:	4618      	mov	r0, r3
 800163c:	f003 f86e 	bl	800471c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001640:	6a3b      	ldr	r3, [r7, #32]
 8001642:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001646:	2b00      	cmp	r3, #0
 8001648:	d103      	bne.n	8001652 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800164a:	f003 f853 	bl	80046f4 <HAL_RCC_GetPCLK1Freq>
 800164e:	6378      	str	r0, [r7, #52]	; 0x34
 8001650:	e004      	b.n	800165c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001652:	f003 f84f 	bl	80046f4 <HAL_RCC_GetPCLK1Freq>
 8001656:	4603      	mov	r3, r0
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800165c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800165e:	4a23      	ldr	r2, [pc, #140]	; (80016ec <HAL_InitTick+0xe8>)
 8001660:	fba2 2303 	umull	r2, r3, r2, r3
 8001664:	0c9b      	lsrs	r3, r3, #18
 8001666:	3b01      	subs	r3, #1
 8001668:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 800166a:	4b21      	ldr	r3, [pc, #132]	; (80016f0 <HAL_InitTick+0xec>)
 800166c:	4a21      	ldr	r2, [pc, #132]	; (80016f4 <HAL_InitTick+0xf0>)
 800166e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8001670:	4b1f      	ldr	r3, [pc, #124]	; (80016f0 <HAL_InitTick+0xec>)
 8001672:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001676:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8001678:	4a1d      	ldr	r2, [pc, #116]	; (80016f0 <HAL_InitTick+0xec>)
 800167a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800167c:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 800167e:	4b1c      	ldr	r3, [pc, #112]	; (80016f0 <HAL_InitTick+0xec>)
 8001680:	2200      	movs	r2, #0
 8001682:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001684:	4b1a      	ldr	r3, [pc, #104]	; (80016f0 <HAL_InitTick+0xec>)
 8001686:	2200      	movs	r2, #0
 8001688:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800168a:	4b19      	ldr	r3, [pc, #100]	; (80016f0 <HAL_InitTick+0xec>)
 800168c:	2200      	movs	r2, #0
 800168e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8001690:	4817      	ldr	r0, [pc, #92]	; (80016f0 <HAL_InitTick+0xec>)
 8001692:	f003 fb8b 	bl	8004dac <HAL_TIM_Base_Init>
 8001696:	4603      	mov	r3, r0
 8001698:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800169c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d11b      	bne.n	80016dc <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 80016a4:	4812      	ldr	r0, [pc, #72]	; (80016f0 <HAL_InitTick+0xec>)
 80016a6:	f003 fbd1 	bl	8004e4c <HAL_TIM_Base_Start_IT>
 80016aa:	4603      	mov	r3, r0
 80016ac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80016b0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d111      	bne.n	80016dc <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80016b8:	2032      	movs	r0, #50	; 0x32
 80016ba:	f000 ffad 	bl	8002618 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2b0f      	cmp	r3, #15
 80016c2:	d808      	bhi.n	80016d6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 80016c4:	2200      	movs	r2, #0
 80016c6:	6879      	ldr	r1, [r7, #4]
 80016c8:	2032      	movs	r0, #50	; 0x32
 80016ca:	f000 ff89 	bl	80025e0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016ce:	4a0a      	ldr	r2, [pc, #40]	; (80016f8 <HAL_InitTick+0xf4>)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6013      	str	r3, [r2, #0]
 80016d4:	e002      	b.n	80016dc <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80016dc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3738      	adds	r7, #56	; 0x38
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	40023800 	.word	0x40023800
 80016ec:	431bde83 	.word	0x431bde83
 80016f0:	20000210 	.word	0x20000210
 80016f4:	40000c00 	.word	0x40000c00
 80016f8:	20000004 	.word	0x20000004

080016fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001700:	e7fe      	b.n	8001700 <NMI_Handler+0x4>

08001702 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001702:	b480      	push	{r7}
 8001704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001706:	e7fe      	b.n	8001706 <HardFault_Handler+0x4>

08001708 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800170c:	e7fe      	b.n	800170c <MemManage_Handler+0x4>

0800170e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800170e:	b480      	push	{r7}
 8001710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001712:	e7fe      	b.n	8001712 <BusFault_Handler+0x4>

08001714 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001718:	e7fe      	b.n	8001718 <UsageFault_Handler+0x4>

0800171a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800171a:	b480      	push	{r7}
 800171c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800172c:	4802      	ldr	r0, [pc, #8]	; (8001738 <CAN1_TX_IRQHandler+0x10>)
 800172e:	f000 fc66 	bl	8001ffe <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	2000018c 	.word	0x2000018c

0800173c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001740:	4802      	ldr	r0, [pc, #8]	; (800174c <CAN1_RX0_IRQHandler+0x10>)
 8001742:	f000 fc5c 	bl	8001ffe <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	2000018c 	.word	0x2000018c

08001750 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001754:	4802      	ldr	r0, [pc, #8]	; (8001760 <TIM2_IRQHandler+0x10>)
 8001756:	f003 fc38 	bl	8004fca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	200002a0 	.word	0x200002a0

08001764 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001768:	4802      	ldr	r0, [pc, #8]	; (8001774 <TIM5_IRQHandler+0x10>)
 800176a:	f003 fc2e 	bl	8004fca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	20000210 	.word	0x20000210

08001778 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800177c:	4802      	ldr	r0, [pc, #8]	; (8001788 <OTG_FS_IRQHandler+0x10>)
 800177e:	f001 fa7c 	bl	8002c7a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	200055b0 	.word	0x200055b0

0800178c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001790:	4b06      	ldr	r3, [pc, #24]	; (80017ac <SystemInit+0x20>)
 8001792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001796:	4a05      	ldr	r2, [pc, #20]	; (80017ac <SystemInit+0x20>)
 8001798:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800179c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017a0:	bf00      	nop
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	e000ed00 	.word	0xe000ed00

080017b0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b092      	sub	sp, #72	; 0x48
 80017b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017b6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80017ba:	2200      	movs	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	605a      	str	r2, [r3, #4]
 80017ca:	609a      	str	r2, [r3, #8]
 80017cc:	60da      	str	r2, [r3, #12]
 80017ce:	611a      	str	r2, [r3, #16]
 80017d0:	615a      	str	r2, [r3, #20]
 80017d2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017d4:	1d3b      	adds	r3, r7, #4
 80017d6:	2220      	movs	r2, #32
 80017d8:	2100      	movs	r1, #0
 80017da:	4618      	mov	r0, r3
 80017dc:	f00a ff14 	bl	800c608 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017e0:	4b39      	ldr	r3, [pc, #228]	; (80018c8 <MX_TIM1_Init+0x118>)
 80017e2:	4a3a      	ldr	r2, [pc, #232]	; (80018cc <MX_TIM1_Init+0x11c>)
 80017e4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16;
 80017e6:	4b38      	ldr	r3, [pc, #224]	; (80018c8 <MX_TIM1_Init+0x118>)
 80017e8:	2210      	movs	r2, #16
 80017ea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ec:	4b36      	ldr	r3, [pc, #216]	; (80018c8 <MX_TIM1_Init+0x118>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 80017f2:	4b35      	ldr	r3, [pc, #212]	; (80018c8 <MX_TIM1_Init+0x118>)
 80017f4:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80017f8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017fa:	4b33      	ldr	r3, [pc, #204]	; (80018c8 <MX_TIM1_Init+0x118>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001800:	4b31      	ldr	r3, [pc, #196]	; (80018c8 <MX_TIM1_Init+0x118>)
 8001802:	2200      	movs	r2, #0
 8001804:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001806:	4b30      	ldr	r3, [pc, #192]	; (80018c8 <MX_TIM1_Init+0x118>)
 8001808:	2200      	movs	r2, #0
 800180a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800180c:	482e      	ldr	r0, [pc, #184]	; (80018c8 <MX_TIM1_Init+0x118>)
 800180e:	f003 fb8d 	bl	8004f2c <HAL_TIM_PWM_Init>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001818:	f7ff fe44 	bl	80014a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800181c:	2300      	movs	r3, #0
 800181e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001820:	2300      	movs	r3, #0
 8001822:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001824:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001828:	4619      	mov	r1, r3
 800182a:	4827      	ldr	r0, [pc, #156]	; (80018c8 <MX_TIM1_Init+0x118>)
 800182c:	f004 f966 	bl	8005afc <HAL_TIMEx_MasterConfigSynchronization>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001836:	f7ff fe35 	bl	80014a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800183a:	2360      	movs	r3, #96	; 0x60
 800183c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1000;
 800183e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001842:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001844:	2300      	movs	r3, #0
 8001846:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001848:	2300      	movs	r3, #0
 800184a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800184c:	2300      	movs	r3, #0
 800184e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001850:	2300      	movs	r3, #0
 8001852:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001854:	2300      	movs	r3, #0
 8001856:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001858:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800185c:	2200      	movs	r2, #0
 800185e:	4619      	mov	r1, r3
 8001860:	4819      	ldr	r0, [pc, #100]	; (80018c8 <MX_TIM1_Init+0x118>)
 8001862:	f003 fca3 	bl	80051ac <HAL_TIM_PWM_ConfigChannel>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 800186c:	f7ff fe1a 	bl	80014a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001870:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001874:	220c      	movs	r2, #12
 8001876:	4619      	mov	r1, r3
 8001878:	4813      	ldr	r0, [pc, #76]	; (80018c8 <MX_TIM1_Init+0x118>)
 800187a:	f003 fc97 	bl	80051ac <HAL_TIM_PWM_ConfigChannel>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8001884:	f7ff fe0e 	bl	80014a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001888:	2300      	movs	r3, #0
 800188a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800188c:	2300      	movs	r3, #0
 800188e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001890:	2300      	movs	r3, #0
 8001892:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001894:	2300      	movs	r3, #0
 8001896:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001898:	2300      	movs	r3, #0
 800189a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800189c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018a0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018a2:	2300      	movs	r3, #0
 80018a4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80018a6:	1d3b      	adds	r3, r7, #4
 80018a8:	4619      	mov	r1, r3
 80018aa:	4807      	ldr	r0, [pc, #28]	; (80018c8 <MX_TIM1_Init+0x118>)
 80018ac:	f004 f9a2 	bl	8005bf4 <HAL_TIMEx_ConfigBreakDeadTime>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 80018b6:	f7ff fdf5 	bl	80014a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80018ba:	4803      	ldr	r0, [pc, #12]	; (80018c8 <MX_TIM1_Init+0x118>)
 80018bc:	f000 f968 	bl	8001b90 <HAL_TIM_MspPostInit>

}
 80018c0:	bf00      	nop
 80018c2:	3748      	adds	r7, #72	; 0x48
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	20000258 	.word	0x20000258
 80018cc:	40010000 	.word	0x40010000

080018d0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018d6:	f107 0308 	add.w	r3, r7, #8
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	605a      	str	r2, [r3, #4]
 80018e0:	609a      	str	r2, [r3, #8]
 80018e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018e4:	463b      	mov	r3, r7
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018ec:	4b1d      	ldr	r3, [pc, #116]	; (8001964 <MX_TIM2_Init+0x94>)
 80018ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018f2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 80018f4:	4b1b      	ldr	r3, [pc, #108]	; (8001964 <MX_TIM2_Init+0x94>)
 80018f6:	2253      	movs	r2, #83	; 0x53
 80018f8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018fa:	4b1a      	ldr	r3, [pc, #104]	; (8001964 <MX_TIM2_Init+0x94>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001900:	4b18      	ldr	r3, [pc, #96]	; (8001964 <MX_TIM2_Init+0x94>)
 8001902:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001906:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001908:	4b16      	ldr	r3, [pc, #88]	; (8001964 <MX_TIM2_Init+0x94>)
 800190a:	2200      	movs	r2, #0
 800190c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800190e:	4b15      	ldr	r3, [pc, #84]	; (8001964 <MX_TIM2_Init+0x94>)
 8001910:	2200      	movs	r2, #0
 8001912:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001914:	4813      	ldr	r0, [pc, #76]	; (8001964 <MX_TIM2_Init+0x94>)
 8001916:	f003 fa49 	bl	8004dac <HAL_TIM_Base_Init>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001920:	f7ff fdc0 	bl	80014a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001924:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001928:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800192a:	f107 0308 	add.w	r3, r7, #8
 800192e:	4619      	mov	r1, r3
 8001930:	480c      	ldr	r0, [pc, #48]	; (8001964 <MX_TIM2_Init+0x94>)
 8001932:	f003 fcfd 	bl	8005330 <HAL_TIM_ConfigClockSource>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800193c:	f7ff fdb2 	bl	80014a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001940:	2300      	movs	r3, #0
 8001942:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001944:	2300      	movs	r3, #0
 8001946:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001948:	463b      	mov	r3, r7
 800194a:	4619      	mov	r1, r3
 800194c:	4805      	ldr	r0, [pc, #20]	; (8001964 <MX_TIM2_Init+0x94>)
 800194e:	f004 f8d5 	bl	8005afc <HAL_TIMEx_MasterConfigSynchronization>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001958:	f7ff fda4 	bl	80014a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800195c:	bf00      	nop
 800195e:	3718      	adds	r7, #24
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	200002a0 	.word	0x200002a0

08001968 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b08a      	sub	sp, #40	; 0x28
 800196c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800196e:	f107 0320 	add.w	r3, r7, #32
 8001972:	2200      	movs	r2, #0
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001978:	1d3b      	adds	r3, r7, #4
 800197a:	2200      	movs	r2, #0
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	605a      	str	r2, [r3, #4]
 8001980:	609a      	str	r2, [r3, #8]
 8001982:	60da      	str	r2, [r3, #12]
 8001984:	611a      	str	r2, [r3, #16]
 8001986:	615a      	str	r2, [r3, #20]
 8001988:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800198a:	4b22      	ldr	r3, [pc, #136]	; (8001a14 <MX_TIM3_Init+0xac>)
 800198c:	4a22      	ldr	r2, [pc, #136]	; (8001a18 <MX_TIM3_Init+0xb0>)
 800198e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8001990:	4b20      	ldr	r3, [pc, #128]	; (8001a14 <MX_TIM3_Init+0xac>)
 8001992:	2253      	movs	r2, #83	; 0x53
 8001994:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001996:	4b1f      	ldr	r3, [pc, #124]	; (8001a14 <MX_TIM3_Init+0xac>)
 8001998:	2200      	movs	r2, #0
 800199a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000-1;
 800199c:	4b1d      	ldr	r3, [pc, #116]	; (8001a14 <MX_TIM3_Init+0xac>)
 800199e:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80019a2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019a4:	4b1b      	ldr	r3, [pc, #108]	; (8001a14 <MX_TIM3_Init+0xac>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019aa:	4b1a      	ldr	r3, [pc, #104]	; (8001a14 <MX_TIM3_Init+0xac>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80019b0:	4818      	ldr	r0, [pc, #96]	; (8001a14 <MX_TIM3_Init+0xac>)
 80019b2:	f003 fabb 	bl	8004f2c <HAL_TIM_PWM_Init>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80019bc:	f7ff fd72 	bl	80014a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019c0:	2300      	movs	r3, #0
 80019c2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019c4:	2300      	movs	r3, #0
 80019c6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019c8:	f107 0320 	add.w	r3, r7, #32
 80019cc:	4619      	mov	r1, r3
 80019ce:	4811      	ldr	r0, [pc, #68]	; (8001a14 <MX_TIM3_Init+0xac>)
 80019d0:	f004 f894 	bl	8005afc <HAL_TIMEx_MasterConfigSynchronization>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80019da:	f7ff fd63 	bl	80014a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019de:	2360      	movs	r3, #96	; 0x60
 80019e0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80019e2:	2300      	movs	r3, #0
 80019e4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019e6:	2300      	movs	r3, #0
 80019e8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019ea:	2300      	movs	r3, #0
 80019ec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019ee:	1d3b      	adds	r3, r7, #4
 80019f0:	2204      	movs	r2, #4
 80019f2:	4619      	mov	r1, r3
 80019f4:	4807      	ldr	r0, [pc, #28]	; (8001a14 <MX_TIM3_Init+0xac>)
 80019f6:	f003 fbd9 	bl	80051ac <HAL_TIM_PWM_ConfigChannel>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001a00:	f7ff fd50 	bl	80014a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001a04:	4803      	ldr	r0, [pc, #12]	; (8001a14 <MX_TIM3_Init+0xac>)
 8001a06:	f000 f8c3 	bl	8001b90 <HAL_TIM_MspPostInit>

}
 8001a0a:	bf00      	nop
 8001a0c:	3728      	adds	r7, #40	; 0x28
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	200002e8 	.word	0x200002e8
 8001a18:	40000400 	.word	0x40000400

08001a1c <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b088      	sub	sp, #32
 8001a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a22:	1d3b      	adds	r3, r7, #4
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	605a      	str	r2, [r3, #4]
 8001a2a:	609a      	str	r2, [r3, #8]
 8001a2c:	60da      	str	r2, [r3, #12]
 8001a2e:	611a      	str	r2, [r3, #16]
 8001a30:	615a      	str	r2, [r3, #20]
 8001a32:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001a34:	4b1a      	ldr	r3, [pc, #104]	; (8001aa0 <MX_TIM12_Init+0x84>)
 8001a36:	4a1b      	ldr	r2, [pc, #108]	; (8001aa4 <MX_TIM12_Init+0x88>)
 8001a38:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 83;
 8001a3a:	4b19      	ldr	r3, [pc, #100]	; (8001aa0 <MX_TIM12_Init+0x84>)
 8001a3c:	2253      	movs	r2, #83	; 0x53
 8001a3e:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a40:	4b17      	ldr	r3, [pc, #92]	; (8001aa0 <MX_TIM12_Init+0x84>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 20000-1;
 8001a46:	4b16      	ldr	r3, [pc, #88]	; (8001aa0 <MX_TIM12_Init+0x84>)
 8001a48:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001a4c:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a4e:	4b14      	ldr	r3, [pc, #80]	; (8001aa0 <MX_TIM12_Init+0x84>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a54:	4b12      	ldr	r3, [pc, #72]	; (8001aa0 <MX_TIM12_Init+0x84>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001a5a:	4811      	ldr	r0, [pc, #68]	; (8001aa0 <MX_TIM12_Init+0x84>)
 8001a5c:	f003 fa66 	bl	8004f2c <HAL_TIM_PWM_Init>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8001a66:	f7ff fd1d 	bl	80014a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a6a:	2360      	movs	r3, #96	; 0x60
 8001a6c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a72:	2300      	movs	r3, #0
 8001a74:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a76:	2300      	movs	r3, #0
 8001a78:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a7a:	1d3b      	adds	r3, r7, #4
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4807      	ldr	r0, [pc, #28]	; (8001aa0 <MX_TIM12_Init+0x84>)
 8001a82:	f003 fb93 	bl	80051ac <HAL_TIM_PWM_ConfigChannel>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8001a8c:	f7ff fd0a 	bl	80014a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001a90:	4803      	ldr	r0, [pc, #12]	; (8001aa0 <MX_TIM12_Init+0x84>)
 8001a92:	f000 f87d 	bl	8001b90 <HAL_TIM_MspPostInit>

}
 8001a96:	bf00      	nop
 8001a98:	3720      	adds	r7, #32
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	20000330 	.word	0x20000330
 8001aa4:	40001800 	.word	0x40001800

08001aa8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b087      	sub	sp, #28
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a1f      	ldr	r2, [pc, #124]	; (8001b34 <HAL_TIM_PWM_MspInit+0x8c>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d10e      	bne.n	8001ad8 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	617b      	str	r3, [r7, #20]
 8001abe:	4b1e      	ldr	r3, [pc, #120]	; (8001b38 <HAL_TIM_PWM_MspInit+0x90>)
 8001ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac2:	4a1d      	ldr	r2, [pc, #116]	; (8001b38 <HAL_TIM_PWM_MspInit+0x90>)
 8001ac4:	f043 0301 	orr.w	r3, r3, #1
 8001ac8:	6453      	str	r3, [r2, #68]	; 0x44
 8001aca:	4b1b      	ldr	r3, [pc, #108]	; (8001b38 <HAL_TIM_PWM_MspInit+0x90>)
 8001acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	617b      	str	r3, [r7, #20]
 8001ad4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8001ad6:	e026      	b.n	8001b26 <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM3)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a17      	ldr	r2, [pc, #92]	; (8001b3c <HAL_TIM_PWM_MspInit+0x94>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d10e      	bne.n	8001b00 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	613b      	str	r3, [r7, #16]
 8001ae6:	4b14      	ldr	r3, [pc, #80]	; (8001b38 <HAL_TIM_PWM_MspInit+0x90>)
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	4a13      	ldr	r2, [pc, #76]	; (8001b38 <HAL_TIM_PWM_MspInit+0x90>)
 8001aec:	f043 0302 	orr.w	r3, r3, #2
 8001af0:	6413      	str	r3, [r2, #64]	; 0x40
 8001af2:	4b11      	ldr	r3, [pc, #68]	; (8001b38 <HAL_TIM_PWM_MspInit+0x90>)
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	613b      	str	r3, [r7, #16]
 8001afc:	693b      	ldr	r3, [r7, #16]
}
 8001afe:	e012      	b.n	8001b26 <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM12)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a0e      	ldr	r2, [pc, #56]	; (8001b40 <HAL_TIM_PWM_MspInit+0x98>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d10d      	bne.n	8001b26 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	60fb      	str	r3, [r7, #12]
 8001b0e:	4b0a      	ldr	r3, [pc, #40]	; (8001b38 <HAL_TIM_PWM_MspInit+0x90>)
 8001b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b12:	4a09      	ldr	r2, [pc, #36]	; (8001b38 <HAL_TIM_PWM_MspInit+0x90>)
 8001b14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b18:	6413      	str	r3, [r2, #64]	; 0x40
 8001b1a:	4b07      	ldr	r3, [pc, #28]	; (8001b38 <HAL_TIM_PWM_MspInit+0x90>)
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	68fb      	ldr	r3, [r7, #12]
}
 8001b26:	bf00      	nop
 8001b28:	371c      	adds	r7, #28
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	40010000 	.word	0x40010000
 8001b38:	40023800 	.word	0x40023800
 8001b3c:	40000400 	.word	0x40000400
 8001b40:	40001800 	.word	0x40001800

08001b44 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b54:	d115      	bne.n	8001b82 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b56:	2300      	movs	r3, #0
 8001b58:	60fb      	str	r3, [r7, #12]
 8001b5a:	4b0c      	ldr	r3, [pc, #48]	; (8001b8c <HAL_TIM_Base_MspInit+0x48>)
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5e:	4a0b      	ldr	r2, [pc, #44]	; (8001b8c <HAL_TIM_Base_MspInit+0x48>)
 8001b60:	f043 0301 	orr.w	r3, r3, #1
 8001b64:	6413      	str	r3, [r2, #64]	; 0x40
 8001b66:	4b09      	ldr	r3, [pc, #36]	; (8001b8c <HAL_TIM_Base_MspInit+0x48>)
 8001b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	60fb      	str	r3, [r7, #12]
 8001b70:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001b72:	2200      	movs	r2, #0
 8001b74:	2105      	movs	r1, #5
 8001b76:	201c      	movs	r0, #28
 8001b78:	f000 fd32 	bl	80025e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b7c:	201c      	movs	r0, #28
 8001b7e:	f000 fd4b 	bl	8002618 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001b82:	bf00      	nop
 8001b84:	3710      	adds	r7, #16
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	40023800 	.word	0x40023800

08001b90 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b08c      	sub	sp, #48	; 0x30
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b98:	f107 031c 	add.w	r3, r7, #28
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	605a      	str	r2, [r3, #4]
 8001ba2:	609a      	str	r2, [r3, #8]
 8001ba4:	60da      	str	r2, [r3, #12]
 8001ba6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a46      	ldr	r2, [pc, #280]	; (8001cc8 <HAL_TIM_MspPostInit+0x138>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d13e      	bne.n	8001c30 <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	61bb      	str	r3, [r7, #24]
 8001bb6:	4b45      	ldr	r3, [pc, #276]	; (8001ccc <HAL_TIM_MspPostInit+0x13c>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bba:	4a44      	ldr	r2, [pc, #272]	; (8001ccc <HAL_TIM_MspPostInit+0x13c>)
 8001bbc:	f043 0301 	orr.w	r3, r3, #1
 8001bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc2:	4b42      	ldr	r3, [pc, #264]	; (8001ccc <HAL_TIM_MspPostInit+0x13c>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	61bb      	str	r3, [r7, #24]
 8001bcc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bce:	2300      	movs	r3, #0
 8001bd0:	617b      	str	r3, [r7, #20]
 8001bd2:	4b3e      	ldr	r3, [pc, #248]	; (8001ccc <HAL_TIM_MspPostInit+0x13c>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd6:	4a3d      	ldr	r2, [pc, #244]	; (8001ccc <HAL_TIM_MspPostInit+0x13c>)
 8001bd8:	f043 0310 	orr.w	r3, r3, #16
 8001bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bde:	4b3b      	ldr	r3, [pc, #236]	; (8001ccc <HAL_TIM_MspPostInit+0x13c>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be2:	f003 0310 	and.w	r3, r3, #16
 8001be6:	617b      	str	r3, [r7, #20]
 8001be8:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001bea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c00:	f107 031c 	add.w	r3, r7, #28
 8001c04:	4619      	mov	r1, r3
 8001c06:	4832      	ldr	r0, [pc, #200]	; (8001cd0 <HAL_TIM_MspPostInit+0x140>)
 8001c08:	f000 fd14 	bl	8002634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001c0c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c12:	2302      	movs	r3, #2
 8001c14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c16:	2300      	movs	r3, #0
 8001c18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c22:	f107 031c 	add.w	r3, r7, #28
 8001c26:	4619      	mov	r1, r3
 8001c28:	482a      	ldr	r0, [pc, #168]	; (8001cd4 <HAL_TIM_MspPostInit+0x144>)
 8001c2a:	f000 fd03 	bl	8002634 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8001c2e:	e046      	b.n	8001cbe <HAL_TIM_MspPostInit+0x12e>
  else if(timHandle->Instance==TIM3)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a28      	ldr	r2, [pc, #160]	; (8001cd8 <HAL_TIM_MspPostInit+0x148>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d11e      	bne.n	8001c78 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	613b      	str	r3, [r7, #16]
 8001c3e:	4b23      	ldr	r3, [pc, #140]	; (8001ccc <HAL_TIM_MspPostInit+0x13c>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c42:	4a22      	ldr	r2, [pc, #136]	; (8001ccc <HAL_TIM_MspPostInit+0x13c>)
 8001c44:	f043 0302 	orr.w	r3, r3, #2
 8001c48:	6313      	str	r3, [r2, #48]	; 0x30
 8001c4a:	4b20      	ldr	r3, [pc, #128]	; (8001ccc <HAL_TIM_MspPostInit+0x13c>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	613b      	str	r3, [r7, #16]
 8001c54:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001c56:	2320      	movs	r3, #32
 8001c58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c62:	2300      	movs	r3, #0
 8001c64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c66:	2302      	movs	r3, #2
 8001c68:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c6a:	f107 031c 	add.w	r3, r7, #28
 8001c6e:	4619      	mov	r1, r3
 8001c70:	481a      	ldr	r0, [pc, #104]	; (8001cdc <HAL_TIM_MspPostInit+0x14c>)
 8001c72:	f000 fcdf 	bl	8002634 <HAL_GPIO_Init>
}
 8001c76:	e022      	b.n	8001cbe <HAL_TIM_MspPostInit+0x12e>
  else if(timHandle->Instance==TIM12)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a18      	ldr	r2, [pc, #96]	; (8001ce0 <HAL_TIM_MspPostInit+0x150>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d11d      	bne.n	8001cbe <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c82:	2300      	movs	r3, #0
 8001c84:	60fb      	str	r3, [r7, #12]
 8001c86:	4b11      	ldr	r3, [pc, #68]	; (8001ccc <HAL_TIM_MspPostInit+0x13c>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	4a10      	ldr	r2, [pc, #64]	; (8001ccc <HAL_TIM_MspPostInit+0x13c>)
 8001c8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c90:	6313      	str	r3, [r2, #48]	; 0x30
 8001c92:	4b0e      	ldr	r3, [pc, #56]	; (8001ccc <HAL_TIM_MspPostInit+0x13c>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c9a:	60fb      	str	r3, [r7, #12]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c9e:	2340      	movs	r3, #64	; 0x40
 8001ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001caa:	2300      	movs	r3, #0
 8001cac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001cae:	2309      	movs	r3, #9
 8001cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001cb2:	f107 031c 	add.w	r3, r7, #28
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	480a      	ldr	r0, [pc, #40]	; (8001ce4 <HAL_TIM_MspPostInit+0x154>)
 8001cba:	f000 fcbb 	bl	8002634 <HAL_GPIO_Init>
}
 8001cbe:	bf00      	nop
 8001cc0:	3730      	adds	r7, #48	; 0x30
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40010000 	.word	0x40010000
 8001ccc:	40023800 	.word	0x40023800
 8001cd0:	40020000 	.word	0x40020000
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	40000400 	.word	0x40000400
 8001cdc:	40020400 	.word	0x40020400
 8001ce0:	40001800 	.word	0x40001800
 8001ce4:	40021c00 	.word	0x40021c00

08001ce8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ce8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d20 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001cec:	f7ff fd4e 	bl	800178c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cf0:	480c      	ldr	r0, [pc, #48]	; (8001d24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cf2:	490d      	ldr	r1, [pc, #52]	; (8001d28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001cf4:	4a0d      	ldr	r2, [pc, #52]	; (8001d2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cf8:	e002      	b.n	8001d00 <LoopCopyDataInit>

08001cfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cfe:	3304      	adds	r3, #4

08001d00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d04:	d3f9      	bcc.n	8001cfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d06:	4a0a      	ldr	r2, [pc, #40]	; (8001d30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d08:	4c0a      	ldr	r4, [pc, #40]	; (8001d34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d0c:	e001      	b.n	8001d12 <LoopFillZerobss>

08001d0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d10:	3204      	adds	r2, #4

08001d12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d14:	d3fb      	bcc.n	8001d0e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001d16:	f00a fcdb 	bl	800c6d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d1a:	f7ff fb2b 	bl	8001374 <main>
  bx  lr    
 8001d1e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d20:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001d24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d28:	20000170 	.word	0x20000170
  ldr r2, =_sidata
 8001d2c:	0800d480 	.word	0x0800d480
  ldr r2, =_sbss
 8001d30:	20000170 	.word	0x20000170
  ldr r4, =_ebss
 8001d34:	20005e90 	.word	0x20005e90

08001d38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d38:	e7fe      	b.n	8001d38 <ADC_IRQHandler>
	...

08001d3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d40:	4b0e      	ldr	r3, [pc, #56]	; (8001d7c <HAL_Init+0x40>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a0d      	ldr	r2, [pc, #52]	; (8001d7c <HAL_Init+0x40>)
 8001d46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d4c:	4b0b      	ldr	r3, [pc, #44]	; (8001d7c <HAL_Init+0x40>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a0a      	ldr	r2, [pc, #40]	; (8001d7c <HAL_Init+0x40>)
 8001d52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d58:	4b08      	ldr	r3, [pc, #32]	; (8001d7c <HAL_Init+0x40>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a07      	ldr	r2, [pc, #28]	; (8001d7c <HAL_Init+0x40>)
 8001d5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d64:	2003      	movs	r0, #3
 8001d66:	f000 fc30 	bl	80025ca <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d6a:	200f      	movs	r0, #15
 8001d6c:	f7ff fc4a 	bl	8001604 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d70:	f7ff fc1c 	bl	80015ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40023c00 	.word	0x40023c00

08001d80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d84:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <HAL_IncTick+0x20>)
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	461a      	mov	r2, r3
 8001d8a:	4b06      	ldr	r3, [pc, #24]	; (8001da4 <HAL_IncTick+0x24>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4413      	add	r3, r2
 8001d90:	4a04      	ldr	r2, [pc, #16]	; (8001da4 <HAL_IncTick+0x24>)
 8001d92:	6013      	str	r3, [r2, #0]
}
 8001d94:	bf00      	nop
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	20000008 	.word	0x20000008
 8001da4:	20000378 	.word	0x20000378

08001da8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  return uwTick;
 8001dac:	4b03      	ldr	r3, [pc, #12]	; (8001dbc <HAL_GetTick+0x14>)
 8001dae:	681b      	ldr	r3, [r3, #0]
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	20000378 	.word	0x20000378

08001dc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dc8:	f7ff ffee 	bl	8001da8 <HAL_GetTick>
 8001dcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001dd8:	d005      	beq.n	8001de6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dda:	4b0a      	ldr	r3, [pc, #40]	; (8001e04 <HAL_Delay+0x44>)
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	461a      	mov	r2, r3
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	4413      	add	r3, r2
 8001de4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001de6:	bf00      	nop
 8001de8:	f7ff ffde 	bl	8001da8 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	68fa      	ldr	r2, [r7, #12]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d8f7      	bhi.n	8001de8 <HAL_Delay+0x28>
  {
  }
}
 8001df8:	bf00      	nop
 8001dfa:	bf00      	nop
 8001dfc:	3710      	adds	r7, #16
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	20000008 	.word	0x20000008

08001e08 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d101      	bne.n	8001e1a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e0ed      	b.n	8001ff6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d102      	bne.n	8001e2c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f7ff f852 	bl	8000ed0 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f042 0201 	orr.w	r2, r2, #1
 8001e3a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e3c:	f7ff ffb4 	bl	8001da8 <HAL_GetTick>
 8001e40:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001e42:	e012      	b.n	8001e6a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e44:	f7ff ffb0 	bl	8001da8 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b0a      	cmp	r3, #10
 8001e50:	d90b      	bls.n	8001e6a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e56:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2205      	movs	r2, #5
 8001e62:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e0c5      	b.n	8001ff6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d0e5      	beq.n	8001e44 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f022 0202 	bic.w	r2, r2, #2
 8001e86:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e88:	f7ff ff8e 	bl	8001da8 <HAL_GetTick>
 8001e8c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001e8e:	e012      	b.n	8001eb6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e90:	f7ff ff8a 	bl	8001da8 <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b0a      	cmp	r3, #10
 8001e9c:	d90b      	bls.n	8001eb6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2205      	movs	r2, #5
 8001eae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e09f      	b.n	8001ff6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f003 0302 	and.w	r3, r3, #2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d1e5      	bne.n	8001e90 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	7e1b      	ldrb	r3, [r3, #24]
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d108      	bne.n	8001ede <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001eda:	601a      	str	r2, [r3, #0]
 8001edc:	e007      	b.n	8001eee <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001eec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	7e5b      	ldrb	r3, [r3, #25]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d108      	bne.n	8001f08 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f04:	601a      	str	r2, [r3, #0]
 8001f06:	e007      	b.n	8001f18 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f16:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	7e9b      	ldrb	r3, [r3, #26]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d108      	bne.n	8001f32 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f042 0220 	orr.w	r2, r2, #32
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	e007      	b.n	8001f42 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f022 0220 	bic.w	r2, r2, #32
 8001f40:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	7edb      	ldrb	r3, [r3, #27]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d108      	bne.n	8001f5c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f022 0210 	bic.w	r2, r2, #16
 8001f58:	601a      	str	r2, [r3, #0]
 8001f5a:	e007      	b.n	8001f6c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f042 0210 	orr.w	r2, r2, #16
 8001f6a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	7f1b      	ldrb	r3, [r3, #28]
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d108      	bne.n	8001f86 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f042 0208 	orr.w	r2, r2, #8
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	e007      	b.n	8001f96 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f022 0208 	bic.w	r2, r2, #8
 8001f94:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	7f5b      	ldrb	r3, [r3, #29]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d108      	bne.n	8001fb0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f042 0204 	orr.w	r2, r2, #4
 8001fac:	601a      	str	r2, [r3, #0]
 8001fae:	e007      	b.n	8001fc0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f022 0204 	bic.w	r2, r2, #4
 8001fbe:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	689a      	ldr	r2, [r3, #8]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	431a      	orrs	r2, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	431a      	orrs	r2, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	695b      	ldr	r3, [r3, #20]
 8001fd4:	ea42 0103 	orr.w	r1, r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	1e5a      	subs	r2, r3, #1
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3710      	adds	r7, #16
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b08a      	sub	sp, #40	; 0x28
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002006:	2300      	movs	r3, #0
 8002008:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	695b      	ldr	r3, [r3, #20]
 8002010:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	691b      	ldr	r3, [r3, #16]
 8002030:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800203a:	6a3b      	ldr	r3, [r7, #32]
 800203c:	f003 0301 	and.w	r3, r3, #1
 8002040:	2b00      	cmp	r3, #0
 8002042:	d07c      	beq.n	800213e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	2b00      	cmp	r3, #0
 800204c:	d023      	beq.n	8002096 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2201      	movs	r2, #1
 8002054:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	f003 0302 	and.w	r3, r3, #2
 800205c:	2b00      	cmp	r3, #0
 800205e:	d003      	beq.n	8002068 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f000 f983 	bl	800236c <HAL_CAN_TxMailbox0CompleteCallback>
 8002066:	e016      	b.n	8002096 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	f003 0304 	and.w	r3, r3, #4
 800206e:	2b00      	cmp	r3, #0
 8002070:	d004      	beq.n	800207c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002074:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002078:	627b      	str	r3, [r7, #36]	; 0x24
 800207a:	e00c      	b.n	8002096 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	f003 0308 	and.w	r3, r3, #8
 8002082:	2b00      	cmp	r3, #0
 8002084:	d004      	beq.n	8002090 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002088:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800208c:	627b      	str	r3, [r7, #36]	; 0x24
 800208e:	e002      	b.n	8002096 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f000 f989 	bl	80023a8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800209c:	2b00      	cmp	r3, #0
 800209e:	d024      	beq.n	80020ea <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020a8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d003      	beq.n	80020bc <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f000 f963 	bl	8002380 <HAL_CAN_TxMailbox1CompleteCallback>
 80020ba:	e016      	b.n	80020ea <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d004      	beq.n	80020d0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80020c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80020cc:	627b      	str	r3, [r7, #36]	; 0x24
 80020ce:	e00c      	b.n	80020ea <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d004      	beq.n	80020e4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80020da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020e0:	627b      	str	r3, [r7, #36]	; 0x24
 80020e2:	e002      	b.n	80020ea <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f000 f969 	bl	80023bc <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d024      	beq.n	800213e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80020fc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d003      	beq.n	8002110 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f000 f943 	bl	8002394 <HAL_CAN_TxMailbox2CompleteCallback>
 800210e:	e016      	b.n	800213e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d004      	beq.n	8002124 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800211a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002120:	627b      	str	r3, [r7, #36]	; 0x24
 8002122:	e00c      	b.n	800213e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d004      	beq.n	8002138 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800212e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002134:	627b      	str	r3, [r7, #36]	; 0x24
 8002136:	e002      	b.n	800213e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f000 f949 	bl	80023d0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800213e:	6a3b      	ldr	r3, [r7, #32]
 8002140:	f003 0308 	and.w	r3, r3, #8
 8002144:	2b00      	cmp	r3, #0
 8002146:	d00c      	beq.n	8002162 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	f003 0310 	and.w	r3, r3, #16
 800214e:	2b00      	cmp	r3, #0
 8002150:	d007      	beq.n	8002162 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002154:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002158:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	2210      	movs	r2, #16
 8002160:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002162:	6a3b      	ldr	r3, [r7, #32]
 8002164:	f003 0304 	and.w	r3, r3, #4
 8002168:	2b00      	cmp	r3, #0
 800216a:	d00b      	beq.n	8002184 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	f003 0308 	and.w	r3, r3, #8
 8002172:	2b00      	cmp	r3, #0
 8002174:	d006      	beq.n	8002184 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2208      	movs	r2, #8
 800217c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f000 f93a 	bl	80023f8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002184:	6a3b      	ldr	r3, [r7, #32]
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d009      	beq.n	80021a2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	f003 0303 	and.w	r3, r3, #3
 8002198:	2b00      	cmp	r3, #0
 800219a:	d002      	beq.n	80021a2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f000 f921 	bl	80023e4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80021a2:	6a3b      	ldr	r3, [r7, #32]
 80021a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d00c      	beq.n	80021c6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	f003 0310 	and.w	r3, r3, #16
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d007      	beq.n	80021c6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80021b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021bc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2210      	movs	r2, #16
 80021c4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80021c6:	6a3b      	ldr	r3, [r7, #32]
 80021c8:	f003 0320 	and.w	r3, r3, #32
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d00b      	beq.n	80021e8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	f003 0308 	and.w	r3, r3, #8
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d006      	beq.n	80021e8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2208      	movs	r2, #8
 80021e0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f000 f91c 	bl	8002420 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80021e8:	6a3b      	ldr	r3, [r7, #32]
 80021ea:	f003 0310 	and.w	r3, r3, #16
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d009      	beq.n	8002206 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	691b      	ldr	r3, [r3, #16]
 80021f8:	f003 0303 	and.w	r3, r3, #3
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d002      	beq.n	8002206 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f000 f903 	bl	800240c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002206:	6a3b      	ldr	r3, [r7, #32]
 8002208:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d00b      	beq.n	8002228 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	f003 0310 	and.w	r3, r3, #16
 8002216:	2b00      	cmp	r3, #0
 8002218:	d006      	beq.n	8002228 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2210      	movs	r2, #16
 8002220:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f000 f906 	bl	8002434 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002228:	6a3b      	ldr	r3, [r7, #32]
 800222a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d00b      	beq.n	800224a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	f003 0308 	and.w	r3, r3, #8
 8002238:	2b00      	cmp	r3, #0
 800223a:	d006      	beq.n	800224a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2208      	movs	r2, #8
 8002242:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f000 f8ff 	bl	8002448 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800224a:	6a3b      	ldr	r3, [r7, #32]
 800224c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d07b      	beq.n	800234c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	f003 0304 	and.w	r3, r3, #4
 800225a:	2b00      	cmp	r3, #0
 800225c:	d072      	beq.n	8002344 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800225e:	6a3b      	ldr	r3, [r7, #32]
 8002260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002264:	2b00      	cmp	r3, #0
 8002266:	d008      	beq.n	800227a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800226e:	2b00      	cmp	r3, #0
 8002270:	d003      	beq.n	800227a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002274:	f043 0301 	orr.w	r3, r3, #1
 8002278:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800227a:	6a3b      	ldr	r3, [r7, #32]
 800227c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002280:	2b00      	cmp	r3, #0
 8002282:	d008      	beq.n	8002296 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800228a:	2b00      	cmp	r3, #0
 800228c:	d003      	beq.n	8002296 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800228e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002290:	f043 0302 	orr.w	r3, r3, #2
 8002294:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002296:	6a3b      	ldr	r3, [r7, #32]
 8002298:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800229c:	2b00      	cmp	r3, #0
 800229e:	d008      	beq.n	80022b2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d003      	beq.n	80022b2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80022aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ac:	f043 0304 	orr.w	r3, r3, #4
 80022b0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80022b2:	6a3b      	ldr	r3, [r7, #32]
 80022b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d043      	beq.n	8002344 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d03e      	beq.n	8002344 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022cc:	2b60      	cmp	r3, #96	; 0x60
 80022ce:	d02b      	beq.n	8002328 <HAL_CAN_IRQHandler+0x32a>
 80022d0:	2b60      	cmp	r3, #96	; 0x60
 80022d2:	d82e      	bhi.n	8002332 <HAL_CAN_IRQHandler+0x334>
 80022d4:	2b50      	cmp	r3, #80	; 0x50
 80022d6:	d022      	beq.n	800231e <HAL_CAN_IRQHandler+0x320>
 80022d8:	2b50      	cmp	r3, #80	; 0x50
 80022da:	d82a      	bhi.n	8002332 <HAL_CAN_IRQHandler+0x334>
 80022dc:	2b40      	cmp	r3, #64	; 0x40
 80022de:	d019      	beq.n	8002314 <HAL_CAN_IRQHandler+0x316>
 80022e0:	2b40      	cmp	r3, #64	; 0x40
 80022e2:	d826      	bhi.n	8002332 <HAL_CAN_IRQHandler+0x334>
 80022e4:	2b30      	cmp	r3, #48	; 0x30
 80022e6:	d010      	beq.n	800230a <HAL_CAN_IRQHandler+0x30c>
 80022e8:	2b30      	cmp	r3, #48	; 0x30
 80022ea:	d822      	bhi.n	8002332 <HAL_CAN_IRQHandler+0x334>
 80022ec:	2b10      	cmp	r3, #16
 80022ee:	d002      	beq.n	80022f6 <HAL_CAN_IRQHandler+0x2f8>
 80022f0:	2b20      	cmp	r3, #32
 80022f2:	d005      	beq.n	8002300 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80022f4:	e01d      	b.n	8002332 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80022f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f8:	f043 0308 	orr.w	r3, r3, #8
 80022fc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80022fe:	e019      	b.n	8002334 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002302:	f043 0310 	orr.w	r3, r3, #16
 8002306:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002308:	e014      	b.n	8002334 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800230a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230c:	f043 0320 	orr.w	r3, r3, #32
 8002310:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002312:	e00f      	b.n	8002334 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002316:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800231a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800231c:	e00a      	b.n	8002334 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800231e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002324:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002326:	e005      	b.n	8002334 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800232e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002330:	e000      	b.n	8002334 <HAL_CAN_IRQHandler+0x336>
            break;
 8002332:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	699a      	ldr	r2, [r3, #24]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002342:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2204      	movs	r2, #4
 800234a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800234c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234e:	2b00      	cmp	r3, #0
 8002350:	d008      	beq.n	8002364 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002358:	431a      	orrs	r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f000 f87c 	bl	800245c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002364:	bf00      	nop
 8002366:	3728      	adds	r7, #40	; 0x28
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}

0800236c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002388:	bf00      	nop
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800239c:	bf00      	nop
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80023b0:	bf00      	nop
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80023d8:	bf00      	nop
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80023ec:	bf00      	nop
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002400:	bf00      	nop
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002414:	bf00      	nop
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002428:	bf00      	nop
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800243c:	bf00      	nop
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002450:	bf00      	nop
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002470:	b480      	push	{r7}
 8002472:	b085      	sub	sp, #20
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f003 0307 	and.w	r3, r3, #7
 800247e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002480:	4b0c      	ldr	r3, [pc, #48]	; (80024b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002486:	68ba      	ldr	r2, [r7, #8]
 8002488:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800248c:	4013      	ands	r3, r2
 800248e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002498:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800249c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024a2:	4a04      	ldr	r2, [pc, #16]	; (80024b4 <__NVIC_SetPriorityGrouping+0x44>)
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	60d3      	str	r3, [r2, #12]
}
 80024a8:	bf00      	nop
 80024aa:	3714      	adds	r7, #20
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr
 80024b4:	e000ed00 	.word	0xe000ed00

080024b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024bc:	4b04      	ldr	r3, [pc, #16]	; (80024d0 <__NVIC_GetPriorityGrouping+0x18>)
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	0a1b      	lsrs	r3, r3, #8
 80024c2:	f003 0307 	and.w	r3, r3, #7
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr
 80024d0:	e000ed00 	.word	0xe000ed00

080024d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	4603      	mov	r3, r0
 80024dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	db0b      	blt.n	80024fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024e6:	79fb      	ldrb	r3, [r7, #7]
 80024e8:	f003 021f 	and.w	r2, r3, #31
 80024ec:	4907      	ldr	r1, [pc, #28]	; (800250c <__NVIC_EnableIRQ+0x38>)
 80024ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f2:	095b      	lsrs	r3, r3, #5
 80024f4:	2001      	movs	r0, #1
 80024f6:	fa00 f202 	lsl.w	r2, r0, r2
 80024fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80024fe:	bf00      	nop
 8002500:	370c      	adds	r7, #12
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	e000e100 	.word	0xe000e100

08002510 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	4603      	mov	r3, r0
 8002518:	6039      	str	r1, [r7, #0]
 800251a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800251c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002520:	2b00      	cmp	r3, #0
 8002522:	db0a      	blt.n	800253a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	b2da      	uxtb	r2, r3
 8002528:	490c      	ldr	r1, [pc, #48]	; (800255c <__NVIC_SetPriority+0x4c>)
 800252a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252e:	0112      	lsls	r2, r2, #4
 8002530:	b2d2      	uxtb	r2, r2
 8002532:	440b      	add	r3, r1
 8002534:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002538:	e00a      	b.n	8002550 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	b2da      	uxtb	r2, r3
 800253e:	4908      	ldr	r1, [pc, #32]	; (8002560 <__NVIC_SetPriority+0x50>)
 8002540:	79fb      	ldrb	r3, [r7, #7]
 8002542:	f003 030f 	and.w	r3, r3, #15
 8002546:	3b04      	subs	r3, #4
 8002548:	0112      	lsls	r2, r2, #4
 800254a:	b2d2      	uxtb	r2, r2
 800254c:	440b      	add	r3, r1
 800254e:	761a      	strb	r2, [r3, #24]
}
 8002550:	bf00      	nop
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr
 800255c:	e000e100 	.word	0xe000e100
 8002560:	e000ed00 	.word	0xe000ed00

08002564 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002564:	b480      	push	{r7}
 8002566:	b089      	sub	sp, #36	; 0x24
 8002568:	af00      	add	r7, sp, #0
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	60b9      	str	r1, [r7, #8]
 800256e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f003 0307 	and.w	r3, r3, #7
 8002576:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	f1c3 0307 	rsb	r3, r3, #7
 800257e:	2b04      	cmp	r3, #4
 8002580:	bf28      	it	cs
 8002582:	2304      	movcs	r3, #4
 8002584:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	3304      	adds	r3, #4
 800258a:	2b06      	cmp	r3, #6
 800258c:	d902      	bls.n	8002594 <NVIC_EncodePriority+0x30>
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	3b03      	subs	r3, #3
 8002592:	e000      	b.n	8002596 <NVIC_EncodePriority+0x32>
 8002594:	2300      	movs	r3, #0
 8002596:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002598:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	fa02 f303 	lsl.w	r3, r2, r3
 80025a2:	43da      	mvns	r2, r3
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	401a      	ands	r2, r3
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	fa01 f303 	lsl.w	r3, r1, r3
 80025b6:	43d9      	mvns	r1, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025bc:	4313      	orrs	r3, r2
         );
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3724      	adds	r7, #36	; 0x24
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr

080025ca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025ca:	b580      	push	{r7, lr}
 80025cc:	b082      	sub	sp, #8
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f7ff ff4c 	bl	8002470 <__NVIC_SetPriorityGrouping>
}
 80025d8:	bf00      	nop
 80025da:	3708      	adds	r7, #8
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}

080025e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b086      	sub	sp, #24
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	4603      	mov	r3, r0
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	607a      	str	r2, [r7, #4]
 80025ec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025ee:	2300      	movs	r3, #0
 80025f0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025f2:	f7ff ff61 	bl	80024b8 <__NVIC_GetPriorityGrouping>
 80025f6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	68b9      	ldr	r1, [r7, #8]
 80025fc:	6978      	ldr	r0, [r7, #20]
 80025fe:	f7ff ffb1 	bl	8002564 <NVIC_EncodePriority>
 8002602:	4602      	mov	r2, r0
 8002604:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002608:	4611      	mov	r1, r2
 800260a:	4618      	mov	r0, r3
 800260c:	f7ff ff80 	bl	8002510 <__NVIC_SetPriority>
}
 8002610:	bf00      	nop
 8002612:	3718      	adds	r7, #24
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	4603      	mov	r3, r0
 8002620:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002626:	4618      	mov	r0, r3
 8002628:	f7ff ff54 	bl	80024d4 <__NVIC_EnableIRQ>
}
 800262c:	bf00      	nop
 800262e:	3708      	adds	r7, #8
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002634:	b480      	push	{r7}
 8002636:	b089      	sub	sp, #36	; 0x24
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800263e:	2300      	movs	r3, #0
 8002640:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002642:	2300      	movs	r3, #0
 8002644:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002646:	2300      	movs	r3, #0
 8002648:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800264a:	2300      	movs	r3, #0
 800264c:	61fb      	str	r3, [r7, #28]
 800264e:	e177      	b.n	8002940 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002650:	2201      	movs	r2, #1
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	697a      	ldr	r2, [r7, #20]
 8002660:	4013      	ands	r3, r2
 8002662:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002664:	693a      	ldr	r2, [r7, #16]
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	429a      	cmp	r2, r3
 800266a:	f040 8166 	bne.w	800293a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f003 0303 	and.w	r3, r3, #3
 8002676:	2b01      	cmp	r3, #1
 8002678:	d005      	beq.n	8002686 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002682:	2b02      	cmp	r3, #2
 8002684:	d130      	bne.n	80026e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	2203      	movs	r2, #3
 8002692:	fa02 f303 	lsl.w	r3, r2, r3
 8002696:	43db      	mvns	r3, r3
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	4013      	ands	r3, r2
 800269c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	68da      	ldr	r2, [r3, #12]
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	005b      	lsls	r3, r3, #1
 80026a6:	fa02 f303 	lsl.w	r3, r2, r3
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026bc:	2201      	movs	r2, #1
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	43db      	mvns	r3, r3
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	4013      	ands	r3, r2
 80026ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	091b      	lsrs	r3, r3, #4
 80026d2:	f003 0201 	and.w	r2, r3, #1
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	fa02 f303 	lsl.w	r3, r2, r3
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	4313      	orrs	r3, r2
 80026e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f003 0303 	and.w	r3, r3, #3
 80026f0:	2b03      	cmp	r3, #3
 80026f2:	d017      	beq.n	8002724 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	2203      	movs	r2, #3
 8002700:	fa02 f303 	lsl.w	r3, r2, r3
 8002704:	43db      	mvns	r3, r3
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	4013      	ands	r3, r2
 800270a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	689a      	ldr	r2, [r3, #8]
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	005b      	lsls	r3, r3, #1
 8002714:	fa02 f303 	lsl.w	r3, r2, r3
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	4313      	orrs	r3, r2
 800271c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f003 0303 	and.w	r3, r3, #3
 800272c:	2b02      	cmp	r3, #2
 800272e:	d123      	bne.n	8002778 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	08da      	lsrs	r2, r3, #3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	3208      	adds	r2, #8
 8002738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800273c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	f003 0307 	and.w	r3, r3, #7
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	220f      	movs	r2, #15
 8002748:	fa02 f303 	lsl.w	r3, r2, r3
 800274c:	43db      	mvns	r3, r3
 800274e:	69ba      	ldr	r2, [r7, #24]
 8002750:	4013      	ands	r3, r2
 8002752:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	691a      	ldr	r2, [r3, #16]
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	f003 0307 	and.w	r3, r3, #7
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	4313      	orrs	r3, r2
 8002768:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	08da      	lsrs	r2, r3, #3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	3208      	adds	r2, #8
 8002772:	69b9      	ldr	r1, [r7, #24]
 8002774:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	2203      	movs	r2, #3
 8002784:	fa02 f303 	lsl.w	r3, r2, r3
 8002788:	43db      	mvns	r3, r3
 800278a:	69ba      	ldr	r2, [r7, #24]
 800278c:	4013      	ands	r3, r2
 800278e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f003 0203 	and.w	r2, r3, #3
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	005b      	lsls	r3, r3, #1
 800279c:	fa02 f303 	lsl.w	r3, r2, r3
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	f000 80c0 	beq.w	800293a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027ba:	2300      	movs	r3, #0
 80027bc:	60fb      	str	r3, [r7, #12]
 80027be:	4b66      	ldr	r3, [pc, #408]	; (8002958 <HAL_GPIO_Init+0x324>)
 80027c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c2:	4a65      	ldr	r2, [pc, #404]	; (8002958 <HAL_GPIO_Init+0x324>)
 80027c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027c8:	6453      	str	r3, [r2, #68]	; 0x44
 80027ca:	4b63      	ldr	r3, [pc, #396]	; (8002958 <HAL_GPIO_Init+0x324>)
 80027cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027d2:	60fb      	str	r3, [r7, #12]
 80027d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027d6:	4a61      	ldr	r2, [pc, #388]	; (800295c <HAL_GPIO_Init+0x328>)
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	089b      	lsrs	r3, r3, #2
 80027dc:	3302      	adds	r3, #2
 80027de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	f003 0303 	and.w	r3, r3, #3
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	220f      	movs	r2, #15
 80027ee:	fa02 f303 	lsl.w	r3, r2, r3
 80027f2:	43db      	mvns	r3, r3
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	4013      	ands	r3, r2
 80027f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a58      	ldr	r2, [pc, #352]	; (8002960 <HAL_GPIO_Init+0x32c>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d037      	beq.n	8002872 <HAL_GPIO_Init+0x23e>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a57      	ldr	r2, [pc, #348]	; (8002964 <HAL_GPIO_Init+0x330>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d031      	beq.n	800286e <HAL_GPIO_Init+0x23a>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a56      	ldr	r2, [pc, #344]	; (8002968 <HAL_GPIO_Init+0x334>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d02b      	beq.n	800286a <HAL_GPIO_Init+0x236>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a55      	ldr	r2, [pc, #340]	; (800296c <HAL_GPIO_Init+0x338>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d025      	beq.n	8002866 <HAL_GPIO_Init+0x232>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a54      	ldr	r2, [pc, #336]	; (8002970 <HAL_GPIO_Init+0x33c>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d01f      	beq.n	8002862 <HAL_GPIO_Init+0x22e>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a53      	ldr	r2, [pc, #332]	; (8002974 <HAL_GPIO_Init+0x340>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d019      	beq.n	800285e <HAL_GPIO_Init+0x22a>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a52      	ldr	r2, [pc, #328]	; (8002978 <HAL_GPIO_Init+0x344>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d013      	beq.n	800285a <HAL_GPIO_Init+0x226>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a51      	ldr	r2, [pc, #324]	; (800297c <HAL_GPIO_Init+0x348>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d00d      	beq.n	8002856 <HAL_GPIO_Init+0x222>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a50      	ldr	r2, [pc, #320]	; (8002980 <HAL_GPIO_Init+0x34c>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d007      	beq.n	8002852 <HAL_GPIO_Init+0x21e>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a4f      	ldr	r2, [pc, #316]	; (8002984 <HAL_GPIO_Init+0x350>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d101      	bne.n	800284e <HAL_GPIO_Init+0x21a>
 800284a:	2309      	movs	r3, #9
 800284c:	e012      	b.n	8002874 <HAL_GPIO_Init+0x240>
 800284e:	230a      	movs	r3, #10
 8002850:	e010      	b.n	8002874 <HAL_GPIO_Init+0x240>
 8002852:	2308      	movs	r3, #8
 8002854:	e00e      	b.n	8002874 <HAL_GPIO_Init+0x240>
 8002856:	2307      	movs	r3, #7
 8002858:	e00c      	b.n	8002874 <HAL_GPIO_Init+0x240>
 800285a:	2306      	movs	r3, #6
 800285c:	e00a      	b.n	8002874 <HAL_GPIO_Init+0x240>
 800285e:	2305      	movs	r3, #5
 8002860:	e008      	b.n	8002874 <HAL_GPIO_Init+0x240>
 8002862:	2304      	movs	r3, #4
 8002864:	e006      	b.n	8002874 <HAL_GPIO_Init+0x240>
 8002866:	2303      	movs	r3, #3
 8002868:	e004      	b.n	8002874 <HAL_GPIO_Init+0x240>
 800286a:	2302      	movs	r3, #2
 800286c:	e002      	b.n	8002874 <HAL_GPIO_Init+0x240>
 800286e:	2301      	movs	r3, #1
 8002870:	e000      	b.n	8002874 <HAL_GPIO_Init+0x240>
 8002872:	2300      	movs	r3, #0
 8002874:	69fa      	ldr	r2, [r7, #28]
 8002876:	f002 0203 	and.w	r2, r2, #3
 800287a:	0092      	lsls	r2, r2, #2
 800287c:	4093      	lsls	r3, r2
 800287e:	69ba      	ldr	r2, [r7, #24]
 8002880:	4313      	orrs	r3, r2
 8002882:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002884:	4935      	ldr	r1, [pc, #212]	; (800295c <HAL_GPIO_Init+0x328>)
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	089b      	lsrs	r3, r3, #2
 800288a:	3302      	adds	r3, #2
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002892:	4b3d      	ldr	r3, [pc, #244]	; (8002988 <HAL_GPIO_Init+0x354>)
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	43db      	mvns	r3, r3
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	4013      	ands	r3, r2
 80028a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d003      	beq.n	80028b6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028b6:	4a34      	ldr	r2, [pc, #208]	; (8002988 <HAL_GPIO_Init+0x354>)
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028bc:	4b32      	ldr	r3, [pc, #200]	; (8002988 <HAL_GPIO_Init+0x354>)
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	43db      	mvns	r3, r3
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	4013      	ands	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d003      	beq.n	80028e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	4313      	orrs	r3, r2
 80028de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028e0:	4a29      	ldr	r2, [pc, #164]	; (8002988 <HAL_GPIO_Init+0x354>)
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028e6:	4b28      	ldr	r3, [pc, #160]	; (8002988 <HAL_GPIO_Init+0x354>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	43db      	mvns	r3, r3
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	4013      	ands	r3, r2
 80028f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d003      	beq.n	800290a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002902:	69ba      	ldr	r2, [r7, #24]
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	4313      	orrs	r3, r2
 8002908:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800290a:	4a1f      	ldr	r2, [pc, #124]	; (8002988 <HAL_GPIO_Init+0x354>)
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002910:	4b1d      	ldr	r3, [pc, #116]	; (8002988 <HAL_GPIO_Init+0x354>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	43db      	mvns	r3, r3
 800291a:	69ba      	ldr	r2, [r7, #24]
 800291c:	4013      	ands	r3, r2
 800291e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d003      	beq.n	8002934 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	4313      	orrs	r3, r2
 8002932:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002934:	4a14      	ldr	r2, [pc, #80]	; (8002988 <HAL_GPIO_Init+0x354>)
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	3301      	adds	r3, #1
 800293e:	61fb      	str	r3, [r7, #28]
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	2b0f      	cmp	r3, #15
 8002944:	f67f ae84 	bls.w	8002650 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002948:	bf00      	nop
 800294a:	bf00      	nop
 800294c:	3724      	adds	r7, #36	; 0x24
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	40023800 	.word	0x40023800
 800295c:	40013800 	.word	0x40013800
 8002960:	40020000 	.word	0x40020000
 8002964:	40020400 	.word	0x40020400
 8002968:	40020800 	.word	0x40020800
 800296c:	40020c00 	.word	0x40020c00
 8002970:	40021000 	.word	0x40021000
 8002974:	40021400 	.word	0x40021400
 8002978:	40021800 	.word	0x40021800
 800297c:	40021c00 	.word	0x40021c00
 8002980:	40022000 	.word	0x40022000
 8002984:	40022400 	.word	0x40022400
 8002988:	40013c00 	.word	0x40013c00

0800298c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	460b      	mov	r3, r1
 8002996:	807b      	strh	r3, [r7, #2]
 8002998:	4613      	mov	r3, r2
 800299a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800299c:	787b      	ldrb	r3, [r7, #1]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d003      	beq.n	80029aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029a2:	887a      	ldrh	r2, [r7, #2]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029a8:	e003      	b.n	80029b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029aa:	887b      	ldrh	r3, [r7, #2]
 80029ac:	041a      	lsls	r2, r3, #16
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	619a      	str	r2, [r3, #24]
}
 80029b2:	bf00      	nop
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr

080029be <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029be:	b480      	push	{r7}
 80029c0:	b085      	sub	sp, #20
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
 80029c6:	460b      	mov	r3, r1
 80029c8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	695b      	ldr	r3, [r3, #20]
 80029ce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80029d0:	887a      	ldrh	r2, [r7, #2]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	4013      	ands	r3, r2
 80029d6:	041a      	lsls	r2, r3, #16
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	43d9      	mvns	r1, r3
 80029dc:	887b      	ldrh	r3, [r7, #2]
 80029de:	400b      	ands	r3, r1
 80029e0:	431a      	orrs	r2, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	619a      	str	r2, [r3, #24]
}
 80029e6:	bf00      	nop
 80029e8:	3714      	adds	r7, #20
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr

080029f2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b086      	sub	sp, #24
 80029f6:	af02      	add	r7, sp, #8
 80029f8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d101      	bne.n	8002a04 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e101      	b.n	8002c08 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d106      	bne.n	8002a24 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f008 f900 	bl	800ac24 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2203      	movs	r2, #3
 8002a28:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a32:	d102      	bne.n	8002a3a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f003 fa55 	bl	8005eee <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6818      	ldr	r0, [r3, #0]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	7c1a      	ldrb	r2, [r3, #16]
 8002a4c:	f88d 2000 	strb.w	r2, [sp]
 8002a50:	3304      	adds	r3, #4
 8002a52:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a54:	f003 f934 	bl	8005cc0 <USB_CoreInit>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d005      	beq.n	8002a6a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2202      	movs	r2, #2
 8002a62:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e0ce      	b.n	8002c08 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	2100      	movs	r1, #0
 8002a70:	4618      	mov	r0, r3
 8002a72:	f003 fa4d 	bl	8005f10 <USB_SetCurrentMode>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d005      	beq.n	8002a88 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2202      	movs	r2, #2
 8002a80:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e0bf      	b.n	8002c08 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a88:	2300      	movs	r3, #0
 8002a8a:	73fb      	strb	r3, [r7, #15]
 8002a8c:	e04a      	b.n	8002b24 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002a8e:	7bfa      	ldrb	r2, [r7, #15]
 8002a90:	6879      	ldr	r1, [r7, #4]
 8002a92:	4613      	mov	r3, r2
 8002a94:	00db      	lsls	r3, r3, #3
 8002a96:	4413      	add	r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	440b      	add	r3, r1
 8002a9c:	3315      	adds	r3, #21
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002aa2:	7bfa      	ldrb	r2, [r7, #15]
 8002aa4:	6879      	ldr	r1, [r7, #4]
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	00db      	lsls	r3, r3, #3
 8002aaa:	4413      	add	r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	440b      	add	r3, r1
 8002ab0:	3314      	adds	r3, #20
 8002ab2:	7bfa      	ldrb	r2, [r7, #15]
 8002ab4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002ab6:	7bfa      	ldrb	r2, [r7, #15]
 8002ab8:	7bfb      	ldrb	r3, [r7, #15]
 8002aba:	b298      	uxth	r0, r3
 8002abc:	6879      	ldr	r1, [r7, #4]
 8002abe:	4613      	mov	r3, r2
 8002ac0:	00db      	lsls	r3, r3, #3
 8002ac2:	4413      	add	r3, r2
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	440b      	add	r3, r1
 8002ac8:	332e      	adds	r3, #46	; 0x2e
 8002aca:	4602      	mov	r2, r0
 8002acc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002ace:	7bfa      	ldrb	r2, [r7, #15]
 8002ad0:	6879      	ldr	r1, [r7, #4]
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	00db      	lsls	r3, r3, #3
 8002ad6:	4413      	add	r3, r2
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	440b      	add	r3, r1
 8002adc:	3318      	adds	r3, #24
 8002ade:	2200      	movs	r2, #0
 8002ae0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002ae2:	7bfa      	ldrb	r2, [r7, #15]
 8002ae4:	6879      	ldr	r1, [r7, #4]
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	00db      	lsls	r3, r3, #3
 8002aea:	4413      	add	r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	440b      	add	r3, r1
 8002af0:	331c      	adds	r3, #28
 8002af2:	2200      	movs	r2, #0
 8002af4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002af6:	7bfa      	ldrb	r2, [r7, #15]
 8002af8:	6879      	ldr	r1, [r7, #4]
 8002afa:	4613      	mov	r3, r2
 8002afc:	00db      	lsls	r3, r3, #3
 8002afe:	4413      	add	r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	440b      	add	r3, r1
 8002b04:	3320      	adds	r3, #32
 8002b06:	2200      	movs	r2, #0
 8002b08:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b0a:	7bfa      	ldrb	r2, [r7, #15]
 8002b0c:	6879      	ldr	r1, [r7, #4]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	00db      	lsls	r3, r3, #3
 8002b12:	4413      	add	r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	440b      	add	r3, r1
 8002b18:	3324      	adds	r3, #36	; 0x24
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b1e:	7bfb      	ldrb	r3, [r7, #15]
 8002b20:	3301      	adds	r3, #1
 8002b22:	73fb      	strb	r3, [r7, #15]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	791b      	ldrb	r3, [r3, #4]
 8002b28:	7bfa      	ldrb	r2, [r7, #15]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d3af      	bcc.n	8002a8e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b2e:	2300      	movs	r3, #0
 8002b30:	73fb      	strb	r3, [r7, #15]
 8002b32:	e044      	b.n	8002bbe <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b34:	7bfa      	ldrb	r2, [r7, #15]
 8002b36:	6879      	ldr	r1, [r7, #4]
 8002b38:	4613      	mov	r3, r2
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	4413      	add	r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	440b      	add	r3, r1
 8002b42:	f203 2355 	addw	r3, r3, #597	; 0x255
 8002b46:	2200      	movs	r2, #0
 8002b48:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b4a:	7bfa      	ldrb	r2, [r7, #15]
 8002b4c:	6879      	ldr	r1, [r7, #4]
 8002b4e:	4613      	mov	r3, r2
 8002b50:	00db      	lsls	r3, r3, #3
 8002b52:	4413      	add	r3, r2
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	440b      	add	r3, r1
 8002b58:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8002b5c:	7bfa      	ldrb	r2, [r7, #15]
 8002b5e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b60:	7bfa      	ldrb	r2, [r7, #15]
 8002b62:	6879      	ldr	r1, [r7, #4]
 8002b64:	4613      	mov	r3, r2
 8002b66:	00db      	lsls	r3, r3, #3
 8002b68:	4413      	add	r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	440b      	add	r3, r1
 8002b6e:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8002b72:	2200      	movs	r2, #0
 8002b74:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002b76:	7bfa      	ldrb	r2, [r7, #15]
 8002b78:	6879      	ldr	r1, [r7, #4]
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	00db      	lsls	r3, r3, #3
 8002b7e:	4413      	add	r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	440b      	add	r3, r1
 8002b84:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8002b88:	2200      	movs	r2, #0
 8002b8a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002b8c:	7bfa      	ldrb	r2, [r7, #15]
 8002b8e:	6879      	ldr	r1, [r7, #4]
 8002b90:	4613      	mov	r3, r2
 8002b92:	00db      	lsls	r3, r3, #3
 8002b94:	4413      	add	r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	440b      	add	r3, r1
 8002b9a:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002ba2:	7bfa      	ldrb	r2, [r7, #15]
 8002ba4:	6879      	ldr	r1, [r7, #4]
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	00db      	lsls	r3, r3, #3
 8002baa:	4413      	add	r3, r2
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	440b      	add	r3, r1
 8002bb0:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bb8:	7bfb      	ldrb	r3, [r7, #15]
 8002bba:	3301      	adds	r3, #1
 8002bbc:	73fb      	strb	r3, [r7, #15]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	791b      	ldrb	r3, [r3, #4]
 8002bc2:	7bfa      	ldrb	r2, [r7, #15]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d3b5      	bcc.n	8002b34 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6818      	ldr	r0, [r3, #0]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	7c1a      	ldrb	r2, [r3, #16]
 8002bd0:	f88d 2000 	strb.w	r2, [sp]
 8002bd4:	3304      	adds	r3, #4
 8002bd6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bd8:	f003 f9e6 	bl	8005fa8 <USB_DevInit>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d005      	beq.n	8002bee <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2202      	movs	r2, #2
 8002be6:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e00c      	b.n	8002c08 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4618      	mov	r0, r3
 8002c02:	f004 fa2a 	bl	800705a <USB_DevDisconnect>

  return HAL_OK;
 8002c06:	2300      	movs	r3, #0
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3710      	adds	r7, #16
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d101      	bne.n	8002c2c <HAL_PCD_Start+0x1c>
 8002c28:	2302      	movs	r3, #2
 8002c2a:	e022      	b.n	8002c72 <HAL_PCD_Start+0x62>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d009      	beq.n	8002c54 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d105      	bne.n	8002c54 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c4c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f003 f937 	bl	8005ecc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f004 f9d8 	bl	8007018 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}

08002c7a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002c7a:	b590      	push	{r4, r7, lr}
 8002c7c:	b08d      	sub	sp, #52	; 0x34
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c88:	6a3b      	ldr	r3, [r7, #32]
 8002c8a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f004 fa96 	bl	80071c2 <USB_GetMode>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	f040 848c 	bne.w	80035b6 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f004 f9fa 	bl	800709c <USB_ReadInterrupts>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	f000 8482 	beq.w	80035b4 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	0a1b      	lsrs	r3, r3, #8
 8002cba:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f004 f9e7 	bl	800709c <USB_ReadInterrupts>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	f003 0302 	and.w	r3, r3, #2
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d107      	bne.n	8002ce8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	695a      	ldr	r2, [r3, #20]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f002 0202 	and.w	r2, r2, #2
 8002ce6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f004 f9d5 	bl	800709c <USB_ReadInterrupts>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	f003 0310 	and.w	r3, r3, #16
 8002cf8:	2b10      	cmp	r3, #16
 8002cfa:	d161      	bne.n	8002dc0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	699a      	ldr	r2, [r3, #24]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f022 0210 	bic.w	r2, r2, #16
 8002d0a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002d0c:	6a3b      	ldr	r3, [r7, #32]
 8002d0e:	6a1b      	ldr	r3, [r3, #32]
 8002d10:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	f003 020f 	and.w	r2, r3, #15
 8002d18:	4613      	mov	r3, r2
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	4413      	add	r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	4413      	add	r3, r2
 8002d28:	3304      	adds	r3, #4
 8002d2a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	0c5b      	lsrs	r3, r3, #17
 8002d30:	f003 030f 	and.w	r3, r3, #15
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d124      	bne.n	8002d82 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002d3e:	4013      	ands	r3, r2
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d035      	beq.n	8002db0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	091b      	lsrs	r3, r3, #4
 8002d4c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002d4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	461a      	mov	r2, r3
 8002d56:	6a38      	ldr	r0, [r7, #32]
 8002d58:	f004 f80c 	bl	8006d74 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	68da      	ldr	r2, [r3, #12]
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	091b      	lsrs	r3, r3, #4
 8002d64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d68:	441a      	add	r2, r3
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	695a      	ldr	r2, [r3, #20]
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	091b      	lsrs	r3, r3, #4
 8002d76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d7a:	441a      	add	r2, r3
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	615a      	str	r2, [r3, #20]
 8002d80:	e016      	b.n	8002db0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	0c5b      	lsrs	r3, r3, #17
 8002d86:	f003 030f 	and.w	r3, r3, #15
 8002d8a:	2b06      	cmp	r3, #6
 8002d8c:	d110      	bne.n	8002db0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002d94:	2208      	movs	r2, #8
 8002d96:	4619      	mov	r1, r3
 8002d98:	6a38      	ldr	r0, [r7, #32]
 8002d9a:	f003 ffeb 	bl	8006d74 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	695a      	ldr	r2, [r3, #20]
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	091b      	lsrs	r3, r3, #4
 8002da6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002daa:	441a      	add	r2, r3
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	699a      	ldr	r2, [r3, #24]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f042 0210 	orr.w	r2, r2, #16
 8002dbe:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f004 f969 	bl	800709c <USB_ReadInterrupts>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dd0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002dd4:	f040 80a7 	bne.w	8002f26 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f004 f96e 	bl	80070c2 <USB_ReadDevAllOutEpInterrupt>
 8002de6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002de8:	e099      	b.n	8002f1e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dec:	f003 0301 	and.w	r3, r3, #1
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	f000 808e 	beq.w	8002f12 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dfc:	b2d2      	uxtb	r2, r2
 8002dfe:	4611      	mov	r1, r2
 8002e00:	4618      	mov	r0, r3
 8002e02:	f004 f992 	bl	800712a <USB_ReadDevOutEPInterrupt>
 8002e06:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00c      	beq.n	8002e2c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e14:	015a      	lsls	r2, r3, #5
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	4413      	add	r3, r2
 8002e1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e1e:	461a      	mov	r2, r3
 8002e20:	2301      	movs	r3, #1
 8002e22:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002e24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 fea2 	bl	8003b70 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	f003 0308 	and.w	r3, r3, #8
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d00c      	beq.n	8002e50 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e38:	015a      	lsls	r2, r3, #5
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	4413      	add	r3, r2
 8002e3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e42:	461a      	mov	r2, r3
 8002e44:	2308      	movs	r3, #8
 8002e46:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002e48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f000 ff78 	bl	8003d40 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	f003 0310 	and.w	r3, r3, #16
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d008      	beq.n	8002e6c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5c:	015a      	lsls	r2, r3, #5
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	4413      	add	r3, r2
 8002e62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e66:	461a      	mov	r2, r3
 8002e68:	2310      	movs	r3, #16
 8002e6a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d030      	beq.n	8002ed8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002e76:	6a3b      	ldr	r3, [r7, #32]
 8002e78:	695b      	ldr	r3, [r3, #20]
 8002e7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e7e:	2b80      	cmp	r3, #128	; 0x80
 8002e80:	d109      	bne.n	8002e96 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	69fa      	ldr	r2, [r7, #28]
 8002e8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e90:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e94:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002e96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e98:	4613      	mov	r3, r2
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	4413      	add	r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	3304      	adds	r3, #4
 8002eaa:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	78db      	ldrb	r3, [r3, #3]
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d108      	bne.n	8002ec6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f007 ffb5 	bl	800ae30 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec8:	015a      	lsls	r2, r3, #5
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	4413      	add	r3, r2
 8002ece:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	2302      	movs	r3, #2
 8002ed6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	f003 0320 	and.w	r3, r3, #32
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d008      	beq.n	8002ef4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee4:	015a      	lsls	r2, r3, #5
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	4413      	add	r3, r2
 8002eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eee:	461a      	mov	r2, r3
 8002ef0:	2320      	movs	r3, #32
 8002ef2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d009      	beq.n	8002f12 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f00:	015a      	lsls	r2, r3, #5
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	4413      	add	r3, r2
 8002f06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f10:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f14:	3301      	adds	r3, #1
 8002f16:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f1a:	085b      	lsrs	r3, r3, #1
 8002f1c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	f47f af62 	bne.w	8002dea <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f004 f8b6 	bl	800709c <USB_ReadInterrupts>
 8002f30:	4603      	mov	r3, r0
 8002f32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f36:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f3a:	f040 80db 	bne.w	80030f4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4618      	mov	r0, r3
 8002f44:	f004 f8d7 	bl	80070f6 <USB_ReadDevAllInEpInterrupt>
 8002f48:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002f4e:	e0cd      	b.n	80030ec <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f52:	f003 0301 	and.w	r3, r3, #1
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	f000 80c2 	beq.w	80030e0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f62:	b2d2      	uxtb	r2, r2
 8002f64:	4611      	mov	r1, r2
 8002f66:	4618      	mov	r0, r3
 8002f68:	f004 f8fd 	bl	8007166 <USB_ReadDevInEPInterrupt>
 8002f6c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	f003 0301 	and.w	r3, r3, #1
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d057      	beq.n	8003028 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7a:	f003 030f 	and.w	r3, r3, #15
 8002f7e:	2201      	movs	r2, #1
 8002f80:	fa02 f303 	lsl.w	r3, r2, r3
 8002f84:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	43db      	mvns	r3, r3
 8002f92:	69f9      	ldr	r1, [r7, #28]
 8002f94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002f98:	4013      	ands	r3, r2
 8002f9a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9e:	015a      	lsls	r2, r3, #5
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fa8:	461a      	mov	r2, r3
 8002faa:	2301      	movs	r3, #1
 8002fac:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	799b      	ldrb	r3, [r3, #6]
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d132      	bne.n	800301c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002fb6:	6879      	ldr	r1, [r7, #4]
 8002fb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fba:	4613      	mov	r3, r2
 8002fbc:	00db      	lsls	r3, r3, #3
 8002fbe:	4413      	add	r3, r2
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	440b      	add	r3, r1
 8002fc4:	3320      	adds	r3, #32
 8002fc6:	6819      	ldr	r1, [r3, #0]
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fcc:	4613      	mov	r3, r2
 8002fce:	00db      	lsls	r3, r3, #3
 8002fd0:	4413      	add	r3, r2
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	4403      	add	r3, r0
 8002fd6:	331c      	adds	r3, #28
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4419      	add	r1, r3
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	00db      	lsls	r3, r3, #3
 8002fe4:	4413      	add	r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	4403      	add	r3, r0
 8002fea:	3320      	adds	r3, #32
 8002fec:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d113      	bne.n	800301c <HAL_PCD_IRQHandler+0x3a2>
 8002ff4:	6879      	ldr	r1, [r7, #4]
 8002ff6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	00db      	lsls	r3, r3, #3
 8002ffc:	4413      	add	r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	440b      	add	r3, r1
 8003002:	3324      	adds	r3, #36	; 0x24
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d108      	bne.n	800301c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6818      	ldr	r0, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003014:	461a      	mov	r2, r3
 8003016:	2101      	movs	r1, #1
 8003018:	f004 f904 	bl	8007224 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800301c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301e:	b2db      	uxtb	r3, r3
 8003020:	4619      	mov	r1, r3
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f007 fe7f 	bl	800ad26 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	f003 0308 	and.w	r3, r3, #8
 800302e:	2b00      	cmp	r3, #0
 8003030:	d008      	beq.n	8003044 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003034:	015a      	lsls	r2, r3, #5
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	4413      	add	r3, r2
 800303a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800303e:	461a      	mov	r2, r3
 8003040:	2308      	movs	r3, #8
 8003042:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	f003 0310 	and.w	r3, r3, #16
 800304a:	2b00      	cmp	r3, #0
 800304c:	d008      	beq.n	8003060 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800304e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003050:	015a      	lsls	r2, r3, #5
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	4413      	add	r3, r2
 8003056:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800305a:	461a      	mov	r2, r3
 800305c:	2310      	movs	r3, #16
 800305e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003066:	2b00      	cmp	r3, #0
 8003068:	d008      	beq.n	800307c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800306a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306c:	015a      	lsls	r2, r3, #5
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	4413      	add	r3, r2
 8003072:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003076:	461a      	mov	r2, r3
 8003078:	2340      	movs	r3, #64	; 0x40
 800307a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	2b00      	cmp	r3, #0
 8003084:	d023      	beq.n	80030ce <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003086:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003088:	6a38      	ldr	r0, [r7, #32]
 800308a:	f003 f8f1 	bl	8006270 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800308e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003090:	4613      	mov	r3, r2
 8003092:	00db      	lsls	r3, r3, #3
 8003094:	4413      	add	r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	3310      	adds	r3, #16
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	4413      	add	r3, r2
 800309e:	3304      	adds	r3, #4
 80030a0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	78db      	ldrb	r3, [r3, #3]
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d108      	bne.n	80030bc <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	2200      	movs	r2, #0
 80030ae:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80030b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	4619      	mov	r1, r3
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f007 fecc 	bl	800ae54 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80030bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030be:	015a      	lsls	r2, r3, #5
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	4413      	add	r3, r2
 80030c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030c8:	461a      	mov	r2, r3
 80030ca:	2302      	movs	r3, #2
 80030cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d003      	beq.n	80030e0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80030d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 fcbb 	bl	8003a56 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80030e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e2:	3301      	adds	r3, #1
 80030e4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80030e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e8:	085b      	lsrs	r3, r3, #1
 80030ea:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80030ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	f47f af2e 	bne.w	8002f50 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4618      	mov	r0, r3
 80030fa:	f003 ffcf 	bl	800709c <USB_ReadInterrupts>
 80030fe:	4603      	mov	r3, r0
 8003100:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003104:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003108:	d122      	bne.n	8003150 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	69fa      	ldr	r2, [r7, #28]
 8003114:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003118:	f023 0301 	bic.w	r3, r3, #1
 800311c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8003124:	2b01      	cmp	r3, #1
 8003126:	d108      	bne.n	800313a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003130:	2100      	movs	r1, #0
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 fea2 	bl	8003e7c <HAL_PCDEx_LPM_Callback>
 8003138:	e002      	b.n	8003140 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f007 fe6a 	bl	800ae14 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	695a      	ldr	r2, [r3, #20]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800314e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4618      	mov	r0, r3
 8003156:	f003 ffa1 	bl	800709c <USB_ReadInterrupts>
 800315a:	4603      	mov	r3, r0
 800315c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003160:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003164:	d112      	bne.n	800318c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f003 0301 	and.w	r3, r3, #1
 8003172:	2b01      	cmp	r3, #1
 8003174:	d102      	bne.n	800317c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f007 fe26 	bl	800adc8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	695a      	ldr	r2, [r3, #20]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800318a:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4618      	mov	r0, r3
 8003192:	f003 ff83 	bl	800709c <USB_ReadInterrupts>
 8003196:	4603      	mov	r3, r0
 8003198:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800319c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031a0:	f040 80b7 	bne.w	8003312 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	69fa      	ldr	r2, [r7, #28]
 80031ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031b2:	f023 0301 	bic.w	r3, r3, #1
 80031b6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2110      	movs	r1, #16
 80031be:	4618      	mov	r0, r3
 80031c0:	f003 f856 	bl	8006270 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031c4:	2300      	movs	r3, #0
 80031c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031c8:	e046      	b.n	8003258 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80031ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031cc:	015a      	lsls	r2, r3, #5
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	4413      	add	r3, r2
 80031d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031d6:	461a      	mov	r2, r3
 80031d8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80031dc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80031de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031e0:	015a      	lsls	r2, r3, #5
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	4413      	add	r3, r2
 80031e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031ee:	0151      	lsls	r1, r2, #5
 80031f0:	69fa      	ldr	r2, [r7, #28]
 80031f2:	440a      	add	r2, r1
 80031f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80031f8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80031fc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80031fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003200:	015a      	lsls	r2, r3, #5
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	4413      	add	r3, r2
 8003206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800320a:	461a      	mov	r2, r3
 800320c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003210:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003214:	015a      	lsls	r2, r3, #5
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	4413      	add	r3, r2
 800321a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003222:	0151      	lsls	r1, r2, #5
 8003224:	69fa      	ldr	r2, [r7, #28]
 8003226:	440a      	add	r2, r1
 8003228:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800322c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003230:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003234:	015a      	lsls	r2, r3, #5
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	4413      	add	r3, r2
 800323a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003242:	0151      	lsls	r1, r2, #5
 8003244:	69fa      	ldr	r2, [r7, #28]
 8003246:	440a      	add	r2, r1
 8003248:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800324c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003250:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003254:	3301      	adds	r3, #1
 8003256:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	791b      	ldrb	r3, [r3, #4]
 800325c:	461a      	mov	r2, r3
 800325e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003260:	4293      	cmp	r3, r2
 8003262:	d3b2      	bcc.n	80031ca <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800326a:	69db      	ldr	r3, [r3, #28]
 800326c:	69fa      	ldr	r2, [r7, #28]
 800326e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003272:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003276:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	7bdb      	ldrb	r3, [r3, #15]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d016      	beq.n	80032ae <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003286:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800328a:	69fa      	ldr	r2, [r7, #28]
 800328c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003290:	f043 030b 	orr.w	r3, r3, #11
 8003294:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800329e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a0:	69fa      	ldr	r2, [r7, #28]
 80032a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032a6:	f043 030b 	orr.w	r3, r3, #11
 80032aa:	6453      	str	r3, [r2, #68]	; 0x44
 80032ac:	e015      	b.n	80032da <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032b4:	695b      	ldr	r3, [r3, #20]
 80032b6:	69fa      	ldr	r2, [r7, #28]
 80032b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80032c0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80032c4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032cc:	691b      	ldr	r3, [r3, #16]
 80032ce:	69fa      	ldr	r2, [r7, #28]
 80032d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032d4:	f043 030b 	orr.w	r3, r3, #11
 80032d8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	69fa      	ldr	r2, [r7, #28]
 80032e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032e8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80032ec:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6818      	ldr	r0, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80032fc:	461a      	mov	r2, r3
 80032fe:	f003 ff91 	bl	8007224 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	695a      	ldr	r2, [r3, #20]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003310:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4618      	mov	r0, r3
 8003318:	f003 fec0 	bl	800709c <USB_ReadInterrupts>
 800331c:	4603      	mov	r3, r0
 800331e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003322:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003326:	d123      	bne.n	8003370 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4618      	mov	r0, r3
 800332e:	f003 ff56 	bl	80071de <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4618      	mov	r0, r3
 8003338:	f003 f813 	bl	8006362 <USB_GetDevSpeed>
 800333c:	4603      	mov	r3, r0
 800333e:	461a      	mov	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681c      	ldr	r4, [r3, #0]
 8003348:	f001 f9c8 	bl	80046dc <HAL_RCC_GetHCLKFreq>
 800334c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003352:	461a      	mov	r2, r3
 8003354:	4620      	mov	r0, r4
 8003356:	f002 fd17 	bl	8005d88 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f007 fd0b 	bl	800ad76 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	695a      	ldr	r2, [r3, #20]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800336e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4618      	mov	r0, r3
 8003376:	f003 fe91 	bl	800709c <USB_ReadInterrupts>
 800337a:	4603      	mov	r3, r0
 800337c:	f003 0308 	and.w	r3, r3, #8
 8003380:	2b08      	cmp	r3, #8
 8003382:	d10a      	bne.n	800339a <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f007 fce8 	bl	800ad5a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	695a      	ldr	r2, [r3, #20]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f002 0208 	and.w	r2, r2, #8
 8003398:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4618      	mov	r0, r3
 80033a0:	f003 fe7c 	bl	800709c <USB_ReadInterrupts>
 80033a4:	4603      	mov	r3, r0
 80033a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033aa:	2b80      	cmp	r3, #128	; 0x80
 80033ac:	d123      	bne.n	80033f6 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80033ae:	6a3b      	ldr	r3, [r7, #32]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033b6:	6a3b      	ldr	r3, [r7, #32]
 80033b8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80033ba:	2301      	movs	r3, #1
 80033bc:	627b      	str	r3, [r7, #36]	; 0x24
 80033be:	e014      	b.n	80033ea <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80033c0:	6879      	ldr	r1, [r7, #4]
 80033c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033c4:	4613      	mov	r3, r2
 80033c6:	00db      	lsls	r3, r3, #3
 80033c8:	4413      	add	r3, r2
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	440b      	add	r3, r1
 80033ce:	f203 2357 	addw	r3, r3, #599	; 0x257
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d105      	bne.n	80033e4 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80033d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	4619      	mov	r1, r3
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 fb08 	bl	80039f4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80033e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e6:	3301      	adds	r3, #1
 80033e8:	627b      	str	r3, [r7, #36]	; 0x24
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	791b      	ldrb	r3, [r3, #4]
 80033ee:	461a      	mov	r2, r3
 80033f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d3e4      	bcc.n	80033c0 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f003 fe4e 	bl	800709c <USB_ReadInterrupts>
 8003400:	4603      	mov	r3, r0
 8003402:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003406:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800340a:	d13c      	bne.n	8003486 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800340c:	2301      	movs	r3, #1
 800340e:	627b      	str	r3, [r7, #36]	; 0x24
 8003410:	e02b      	b.n	800346a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003414:	015a      	lsls	r2, r3, #5
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	4413      	add	r3, r2
 800341a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003422:	6879      	ldr	r1, [r7, #4]
 8003424:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003426:	4613      	mov	r3, r2
 8003428:	00db      	lsls	r3, r3, #3
 800342a:	4413      	add	r3, r2
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	440b      	add	r3, r1
 8003430:	3318      	adds	r3, #24
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	2b01      	cmp	r3, #1
 8003436:	d115      	bne.n	8003464 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003438:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800343a:	2b00      	cmp	r3, #0
 800343c:	da12      	bge.n	8003464 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800343e:	6879      	ldr	r1, [r7, #4]
 8003440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003442:	4613      	mov	r3, r2
 8003444:	00db      	lsls	r3, r3, #3
 8003446:	4413      	add	r3, r2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	440b      	add	r3, r1
 800344c:	3317      	adds	r3, #23
 800344e:	2201      	movs	r2, #1
 8003450:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003454:	b2db      	uxtb	r3, r3
 8003456:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800345a:	b2db      	uxtb	r3, r3
 800345c:	4619      	mov	r1, r3
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 fac8 	bl	80039f4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003466:	3301      	adds	r3, #1
 8003468:	627b      	str	r3, [r7, #36]	; 0x24
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	791b      	ldrb	r3, [r3, #4]
 800346e:	461a      	mov	r2, r3
 8003470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003472:	4293      	cmp	r3, r2
 8003474:	d3cd      	bcc.n	8003412 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	695a      	ldr	r2, [r3, #20]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003484:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4618      	mov	r0, r3
 800348c:	f003 fe06 	bl	800709c <USB_ReadInterrupts>
 8003490:	4603      	mov	r3, r0
 8003492:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003496:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800349a:	d156      	bne.n	800354a <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800349c:	2301      	movs	r3, #1
 800349e:	627b      	str	r3, [r7, #36]	; 0x24
 80034a0:	e045      	b.n	800352e <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80034a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a4:	015a      	lsls	r2, r3, #5
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	4413      	add	r3, r2
 80034aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80034b2:	6879      	ldr	r1, [r7, #4]
 80034b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034b6:	4613      	mov	r3, r2
 80034b8:	00db      	lsls	r3, r3, #3
 80034ba:	4413      	add	r3, r2
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	440b      	add	r3, r1
 80034c0:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d12e      	bne.n	8003528 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80034ca:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	da2b      	bge.n	8003528 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 80034dc:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d121      	bne.n	8003528 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80034e4:	6879      	ldr	r1, [r7, #4]
 80034e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034e8:	4613      	mov	r3, r2
 80034ea:	00db      	lsls	r3, r3, #3
 80034ec:	4413      	add	r3, r2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	440b      	add	r3, r1
 80034f2:	f203 2357 	addw	r3, r3, #599	; 0x257
 80034f6:	2201      	movs	r2, #1
 80034f8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80034fa:	6a3b      	ldr	r3, [r7, #32]
 80034fc:	699b      	ldr	r3, [r3, #24]
 80034fe:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003502:	6a3b      	ldr	r3, [r7, #32]
 8003504:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003506:	6a3b      	ldr	r3, [r7, #32]
 8003508:	695b      	ldr	r3, [r3, #20]
 800350a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800350e:	2b00      	cmp	r3, #0
 8003510:	d10a      	bne.n	8003528 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	69fa      	ldr	r2, [r7, #28]
 800351c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003520:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003524:	6053      	str	r3, [r2, #4]
            break;
 8003526:	e008      	b.n	800353a <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352a:	3301      	adds	r3, #1
 800352c:	627b      	str	r3, [r7, #36]	; 0x24
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	791b      	ldrb	r3, [r3, #4]
 8003532:	461a      	mov	r2, r3
 8003534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003536:	4293      	cmp	r3, r2
 8003538:	d3b3      	bcc.n	80034a2 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	695a      	ldr	r2, [r3, #20]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003548:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4618      	mov	r0, r3
 8003550:	f003 fda4 	bl	800709c <USB_ReadInterrupts>
 8003554:	4603      	mov	r3, r0
 8003556:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800355a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800355e:	d10a      	bne.n	8003576 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f007 fc89 	bl	800ae78 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	695a      	ldr	r2, [r3, #20]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003574:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4618      	mov	r0, r3
 800357c:	f003 fd8e 	bl	800709c <USB_ReadInterrupts>
 8003580:	4603      	mov	r3, r0
 8003582:	f003 0304 	and.w	r3, r3, #4
 8003586:	2b04      	cmp	r3, #4
 8003588:	d115      	bne.n	80035b6 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	f003 0304 	and.w	r3, r3, #4
 8003598:	2b00      	cmp	r3, #0
 800359a:	d002      	beq.n	80035a2 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f007 fc79 	bl	800ae94 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	6859      	ldr	r1, [r3, #4]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	69ba      	ldr	r2, [r7, #24]
 80035ae:	430a      	orrs	r2, r1
 80035b0:	605a      	str	r2, [r3, #4]
 80035b2:	e000      	b.n	80035b6 <HAL_PCD_IRQHandler+0x93c>
      return;
 80035b4:	bf00      	nop
    }
  }
}
 80035b6:	3734      	adds	r7, #52	; 0x34
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd90      	pop	{r4, r7, pc}

080035bc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	460b      	mov	r3, r1
 80035c6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d101      	bne.n	80035d6 <HAL_PCD_SetAddress+0x1a>
 80035d2:	2302      	movs	r3, #2
 80035d4:	e012      	b.n	80035fc <HAL_PCD_SetAddress+0x40>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2201      	movs	r2, #1
 80035da:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	78fa      	ldrb	r2, [r7, #3]
 80035e2:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	78fa      	ldrb	r2, [r7, #3]
 80035ea:	4611      	mov	r1, r2
 80035ec:	4618      	mov	r0, r3
 80035ee:	f003 fced 	bl	8006fcc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80035fa:	2300      	movs	r3, #0
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3708      	adds	r7, #8
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	4608      	mov	r0, r1
 800360e:	4611      	mov	r1, r2
 8003610:	461a      	mov	r2, r3
 8003612:	4603      	mov	r3, r0
 8003614:	70fb      	strb	r3, [r7, #3]
 8003616:	460b      	mov	r3, r1
 8003618:	803b      	strh	r3, [r7, #0]
 800361a:	4613      	mov	r3, r2
 800361c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800361e:	2300      	movs	r3, #0
 8003620:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003622:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003626:	2b00      	cmp	r3, #0
 8003628:	da0f      	bge.n	800364a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800362a:	78fb      	ldrb	r3, [r7, #3]
 800362c:	f003 020f 	and.w	r2, r3, #15
 8003630:	4613      	mov	r3, r2
 8003632:	00db      	lsls	r3, r3, #3
 8003634:	4413      	add	r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	3310      	adds	r3, #16
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	4413      	add	r3, r2
 800363e:	3304      	adds	r3, #4
 8003640:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2201      	movs	r2, #1
 8003646:	705a      	strb	r2, [r3, #1]
 8003648:	e00f      	b.n	800366a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800364a:	78fb      	ldrb	r3, [r7, #3]
 800364c:	f003 020f 	and.w	r2, r3, #15
 8003650:	4613      	mov	r3, r2
 8003652:	00db      	lsls	r3, r3, #3
 8003654:	4413      	add	r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	4413      	add	r3, r2
 8003660:	3304      	adds	r3, #4
 8003662:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2200      	movs	r2, #0
 8003668:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800366a:	78fb      	ldrb	r3, [r7, #3]
 800366c:	f003 030f 	and.w	r3, r3, #15
 8003670:	b2da      	uxtb	r2, r3
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003676:	883a      	ldrh	r2, [r7, #0]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	78ba      	ldrb	r2, [r7, #2]
 8003680:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	785b      	ldrb	r3, [r3, #1]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d004      	beq.n	8003694 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	b29a      	uxth	r2, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003694:	78bb      	ldrb	r3, [r7, #2]
 8003696:	2b02      	cmp	r3, #2
 8003698:	d102      	bne.n	80036a0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2200      	movs	r2, #0
 800369e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d101      	bne.n	80036ae <HAL_PCD_EP_Open+0xaa>
 80036aa:	2302      	movs	r3, #2
 80036ac:	e00e      	b.n	80036cc <HAL_PCD_EP_Open+0xc8>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2201      	movs	r2, #1
 80036b2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68f9      	ldr	r1, [r7, #12]
 80036bc:	4618      	mov	r0, r3
 80036be:	f002 fe75 	bl	80063ac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 80036ca:	7afb      	ldrb	r3, [r7, #11]
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3710      	adds	r7, #16
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	460b      	mov	r3, r1
 80036de:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80036e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	da0f      	bge.n	8003708 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036e8:	78fb      	ldrb	r3, [r7, #3]
 80036ea:	f003 020f 	and.w	r2, r3, #15
 80036ee:	4613      	mov	r3, r2
 80036f0:	00db      	lsls	r3, r3, #3
 80036f2:	4413      	add	r3, r2
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	3310      	adds	r3, #16
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	4413      	add	r3, r2
 80036fc:	3304      	adds	r3, #4
 80036fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2201      	movs	r2, #1
 8003704:	705a      	strb	r2, [r3, #1]
 8003706:	e00f      	b.n	8003728 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003708:	78fb      	ldrb	r3, [r7, #3]
 800370a:	f003 020f 	and.w	r2, r3, #15
 800370e:	4613      	mov	r3, r2
 8003710:	00db      	lsls	r3, r3, #3
 8003712:	4413      	add	r3, r2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	4413      	add	r3, r2
 800371e:	3304      	adds	r3, #4
 8003720:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2200      	movs	r2, #0
 8003726:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003728:	78fb      	ldrb	r3, [r7, #3]
 800372a:	f003 030f 	and.w	r3, r3, #15
 800372e:	b2da      	uxtb	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800373a:	2b01      	cmp	r3, #1
 800373c:	d101      	bne.n	8003742 <HAL_PCD_EP_Close+0x6e>
 800373e:	2302      	movs	r3, #2
 8003740:	e00e      	b.n	8003760 <HAL_PCD_EP_Close+0x8c>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	68f9      	ldr	r1, [r7, #12]
 8003750:	4618      	mov	r0, r3
 8003752:	f002 feb3 	bl	80064bc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 800375e:	2300      	movs	r3, #0
}
 8003760:	4618      	mov	r0, r3
 8003762:	3710      	adds	r7, #16
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b086      	sub	sp, #24
 800376c:	af00      	add	r7, sp, #0
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	607a      	str	r2, [r7, #4]
 8003772:	603b      	str	r3, [r7, #0]
 8003774:	460b      	mov	r3, r1
 8003776:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003778:	7afb      	ldrb	r3, [r7, #11]
 800377a:	f003 020f 	and.w	r2, r3, #15
 800377e:	4613      	mov	r3, r2
 8003780:	00db      	lsls	r3, r3, #3
 8003782:	4413      	add	r3, r2
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	4413      	add	r3, r2
 800378e:	3304      	adds	r3, #4
 8003790:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	683a      	ldr	r2, [r7, #0]
 800379c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	2200      	movs	r2, #0
 80037a2:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	2200      	movs	r2, #0
 80037a8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037aa:	7afb      	ldrb	r3, [r7, #11]
 80037ac:	f003 030f 	and.w	r3, r3, #15
 80037b0:	b2da      	uxtb	r2, r3
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	799b      	ldrb	r3, [r3, #6]
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d102      	bne.n	80037c4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6818      	ldr	r0, [r3, #0]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	799b      	ldrb	r3, [r3, #6]
 80037cc:	461a      	mov	r2, r3
 80037ce:	6979      	ldr	r1, [r7, #20]
 80037d0:	f002 ff50 	bl	8006674 <USB_EPStartXfer>

  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3718      	adds	r7, #24
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}

080037de <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80037de:	b480      	push	{r7}
 80037e0:	b083      	sub	sp, #12
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
 80037e6:	460b      	mov	r3, r1
 80037e8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80037ea:	78fb      	ldrb	r3, [r7, #3]
 80037ec:	f003 020f 	and.w	r2, r3, #15
 80037f0:	6879      	ldr	r1, [r7, #4]
 80037f2:	4613      	mov	r3, r2
 80037f4:	00db      	lsls	r3, r3, #3
 80037f6:	4413      	add	r3, r2
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	440b      	add	r3, r1
 80037fc:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8003800:	681b      	ldr	r3, [r3, #0]
}
 8003802:	4618      	mov	r0, r3
 8003804:	370c      	adds	r7, #12
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr

0800380e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800380e:	b580      	push	{r7, lr}
 8003810:	b086      	sub	sp, #24
 8003812:	af00      	add	r7, sp, #0
 8003814:	60f8      	str	r0, [r7, #12]
 8003816:	607a      	str	r2, [r7, #4]
 8003818:	603b      	str	r3, [r7, #0]
 800381a:	460b      	mov	r3, r1
 800381c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800381e:	7afb      	ldrb	r3, [r7, #11]
 8003820:	f003 020f 	and.w	r2, r3, #15
 8003824:	4613      	mov	r3, r2
 8003826:	00db      	lsls	r3, r3, #3
 8003828:	4413      	add	r3, r2
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	3310      	adds	r3, #16
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	4413      	add	r3, r2
 8003832:	3304      	adds	r3, #4
 8003834:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	683a      	ldr	r2, [r7, #0]
 8003840:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	2200      	movs	r2, #0
 8003846:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	2201      	movs	r2, #1
 800384c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800384e:	7afb      	ldrb	r3, [r7, #11]
 8003850:	f003 030f 	and.w	r3, r3, #15
 8003854:	b2da      	uxtb	r2, r3
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	799b      	ldrb	r3, [r3, #6]
 800385e:	2b01      	cmp	r3, #1
 8003860:	d102      	bne.n	8003868 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	6818      	ldr	r0, [r3, #0]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	799b      	ldrb	r3, [r3, #6]
 8003870:	461a      	mov	r2, r3
 8003872:	6979      	ldr	r1, [r7, #20]
 8003874:	f002 fefe 	bl	8006674 <USB_EPStartXfer>

  return HAL_OK;
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	3718      	adds	r7, #24
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}

08003882 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003882:	b580      	push	{r7, lr}
 8003884:	b084      	sub	sp, #16
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
 800388a:	460b      	mov	r3, r1
 800388c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800388e:	78fb      	ldrb	r3, [r7, #3]
 8003890:	f003 030f 	and.w	r3, r3, #15
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	7912      	ldrb	r2, [r2, #4]
 8003898:	4293      	cmp	r3, r2
 800389a:	d901      	bls.n	80038a0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e04f      	b.n	8003940 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80038a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	da0f      	bge.n	80038c8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038a8:	78fb      	ldrb	r3, [r7, #3]
 80038aa:	f003 020f 	and.w	r2, r3, #15
 80038ae:	4613      	mov	r3, r2
 80038b0:	00db      	lsls	r3, r3, #3
 80038b2:	4413      	add	r3, r2
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	3310      	adds	r3, #16
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	4413      	add	r3, r2
 80038bc:	3304      	adds	r3, #4
 80038be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2201      	movs	r2, #1
 80038c4:	705a      	strb	r2, [r3, #1]
 80038c6:	e00d      	b.n	80038e4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80038c8:	78fa      	ldrb	r2, [r7, #3]
 80038ca:	4613      	mov	r3, r2
 80038cc:	00db      	lsls	r3, r3, #3
 80038ce:	4413      	add	r3, r2
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	4413      	add	r3, r2
 80038da:	3304      	adds	r3, #4
 80038dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2200      	movs	r2, #0
 80038e2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2201      	movs	r2, #1
 80038e8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038ea:	78fb      	ldrb	r3, [r7, #3]
 80038ec:	f003 030f 	and.w	r3, r3, #15
 80038f0:	b2da      	uxtb	r2, r3
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d101      	bne.n	8003904 <HAL_PCD_EP_SetStall+0x82>
 8003900:	2302      	movs	r3, #2
 8003902:	e01d      	b.n	8003940 <HAL_PCD_EP_SetStall+0xbe>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	68f9      	ldr	r1, [r7, #12]
 8003912:	4618      	mov	r0, r3
 8003914:	f003 fa86 	bl	8006e24 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003918:	78fb      	ldrb	r3, [r7, #3]
 800391a:	f003 030f 	and.w	r3, r3, #15
 800391e:	2b00      	cmp	r3, #0
 8003920:	d109      	bne.n	8003936 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6818      	ldr	r0, [r3, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	7999      	ldrb	r1, [r3, #6]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003930:	461a      	mov	r2, r3
 8003932:	f003 fc77 	bl	8007224 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800393e:	2300      	movs	r3, #0
}
 8003940:	4618      	mov	r0, r3
 8003942:	3710      	adds	r7, #16
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	460b      	mov	r3, r1
 8003952:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003954:	78fb      	ldrb	r3, [r7, #3]
 8003956:	f003 030f 	and.w	r3, r3, #15
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	7912      	ldrb	r2, [r2, #4]
 800395e:	4293      	cmp	r3, r2
 8003960:	d901      	bls.n	8003966 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e042      	b.n	80039ec <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003966:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800396a:	2b00      	cmp	r3, #0
 800396c:	da0f      	bge.n	800398e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800396e:	78fb      	ldrb	r3, [r7, #3]
 8003970:	f003 020f 	and.w	r2, r3, #15
 8003974:	4613      	mov	r3, r2
 8003976:	00db      	lsls	r3, r3, #3
 8003978:	4413      	add	r3, r2
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	3310      	adds	r3, #16
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	4413      	add	r3, r2
 8003982:	3304      	adds	r3, #4
 8003984:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2201      	movs	r2, #1
 800398a:	705a      	strb	r2, [r3, #1]
 800398c:	e00f      	b.n	80039ae <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800398e:	78fb      	ldrb	r3, [r7, #3]
 8003990:	f003 020f 	and.w	r2, r3, #15
 8003994:	4613      	mov	r3, r2
 8003996:	00db      	lsls	r3, r3, #3
 8003998:	4413      	add	r3, r2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	4413      	add	r3, r2
 80039a4:	3304      	adds	r3, #4
 80039a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2200      	movs	r2, #0
 80039ac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2200      	movs	r2, #0
 80039b2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039b4:	78fb      	ldrb	r3, [r7, #3]
 80039b6:	f003 030f 	and.w	r3, r3, #15
 80039ba:	b2da      	uxtb	r2, r3
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d101      	bne.n	80039ce <HAL_PCD_EP_ClrStall+0x86>
 80039ca:	2302      	movs	r3, #2
 80039cc:	e00e      	b.n	80039ec <HAL_PCD_EP_ClrStall+0xa4>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2201      	movs	r2, #1
 80039d2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	68f9      	ldr	r1, [r7, #12]
 80039dc:	4618      	mov	r0, r3
 80039de:	f003 fa8f 	bl	8006f00 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80039ea:	2300      	movs	r3, #0
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3710      	adds	r7, #16
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	460b      	mov	r3, r1
 80039fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003a00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	da0c      	bge.n	8003a22 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a08:	78fb      	ldrb	r3, [r7, #3]
 8003a0a:	f003 020f 	and.w	r2, r3, #15
 8003a0e:	4613      	mov	r3, r2
 8003a10:	00db      	lsls	r3, r3, #3
 8003a12:	4413      	add	r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	3310      	adds	r3, #16
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	4413      	add	r3, r2
 8003a1c:	3304      	adds	r3, #4
 8003a1e:	60fb      	str	r3, [r7, #12]
 8003a20:	e00c      	b.n	8003a3c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a22:	78fb      	ldrb	r3, [r7, #3]
 8003a24:	f003 020f 	and.w	r2, r3, #15
 8003a28:	4613      	mov	r3, r2
 8003a2a:	00db      	lsls	r3, r3, #3
 8003a2c:	4413      	add	r3, r2
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	4413      	add	r3, r2
 8003a38:	3304      	adds	r3, #4
 8003a3a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	68f9      	ldr	r1, [r7, #12]
 8003a42:	4618      	mov	r0, r3
 8003a44:	f003 f8ae 	bl	8006ba4 <USB_EPStopXfer>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003a4c:	7afb      	ldrb	r3, [r7, #11]
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3710      	adds	r7, #16
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b08a      	sub	sp, #40	; 0x28
 8003a5a:	af02      	add	r7, sp, #8
 8003a5c:	6078      	str	r0, [r7, #4]
 8003a5e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003a6a:	683a      	ldr	r2, [r7, #0]
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	00db      	lsls	r3, r3, #3
 8003a70:	4413      	add	r3, r2
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	3310      	adds	r3, #16
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	4413      	add	r3, r2
 8003a7a:	3304      	adds	r3, #4
 8003a7c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	695a      	ldr	r2, [r3, #20]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d901      	bls.n	8003a8e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e06b      	b.n	8003b66 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	691a      	ldr	r2, [r3, #16]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	695b      	ldr	r3, [r3, #20]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	69fa      	ldr	r2, [r7, #28]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d902      	bls.n	8003aaa <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	3303      	adds	r3, #3
 8003aae:	089b      	lsrs	r3, r3, #2
 8003ab0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ab2:	e02a      	b.n	8003b0a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	691a      	ldr	r2, [r3, #16]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	695b      	ldr	r3, [r3, #20]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	69fa      	ldr	r2, [r7, #28]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d902      	bls.n	8003ad0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	3303      	adds	r3, #3
 8003ad4:	089b      	lsrs	r3, r3, #2
 8003ad6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	68d9      	ldr	r1, [r3, #12]
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	b2da      	uxtb	r2, r3
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003ae8:	9300      	str	r3, [sp, #0]
 8003aea:	4603      	mov	r3, r0
 8003aec:	6978      	ldr	r0, [r7, #20]
 8003aee:	f003 f903 	bl	8006cf8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	68da      	ldr	r2, [r3, #12]
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	441a      	add	r2, r3
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	695a      	ldr	r2, [r3, #20]
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	441a      	add	r2, r3
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	015a      	lsls	r2, r3, #5
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	4413      	add	r3, r2
 8003b12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b16:	699b      	ldr	r3, [r3, #24]
 8003b18:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003b1a:	69ba      	ldr	r2, [r7, #24]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d809      	bhi.n	8003b34 <PCD_WriteEmptyTxFifo+0xde>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	695a      	ldr	r2, [r3, #20]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d203      	bcs.n	8003b34 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	691b      	ldr	r3, [r3, #16]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d1bf      	bne.n	8003ab4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	691a      	ldr	r2, [r3, #16]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	695b      	ldr	r3, [r3, #20]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d811      	bhi.n	8003b64 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	f003 030f 	and.w	r3, r3, #15
 8003b46:	2201      	movs	r2, #1
 8003b48:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	43db      	mvns	r3, r3
 8003b5a:	6939      	ldr	r1, [r7, #16]
 8003b5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b60:	4013      	ands	r3, r2
 8003b62:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3720      	adds	r7, #32
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
	...

08003b70 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b088      	sub	sp, #32
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	333c      	adds	r3, #60	; 0x3c
 8003b88:	3304      	adds	r3, #4
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	015a      	lsls	r2, r3, #5
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	4413      	add	r3, r2
 8003b96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	799b      	ldrb	r3, [r3, #6]
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d17b      	bne.n	8003c9e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	f003 0308 	and.w	r3, r3, #8
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d015      	beq.n	8003bdc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	4a61      	ldr	r2, [pc, #388]	; (8003d38 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	f240 80b9 	bls.w	8003d2c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f000 80b3 	beq.w	8003d2c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	015a      	lsls	r2, r3, #5
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	4413      	add	r3, r2
 8003bce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bd8:	6093      	str	r3, [r2, #8]
 8003bda:	e0a7      	b.n	8003d2c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	f003 0320 	and.w	r3, r3, #32
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d009      	beq.n	8003bfa <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	015a      	lsls	r2, r3, #5
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	4413      	add	r3, r2
 8003bee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	2320      	movs	r3, #32
 8003bf6:	6093      	str	r3, [r2, #8]
 8003bf8:	e098      	b.n	8003d2c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	f040 8093 	bne.w	8003d2c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	4a4b      	ldr	r2, [pc, #300]	; (8003d38 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d90f      	bls.n	8003c2e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d00a      	beq.n	8003c2e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	015a      	lsls	r2, r3, #5
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	4413      	add	r3, r2
 8003c20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c24:	461a      	mov	r2, r3
 8003c26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c2a:	6093      	str	r3, [r2, #8]
 8003c2c:	e07e      	b.n	8003d2c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003c2e:	683a      	ldr	r2, [r7, #0]
 8003c30:	4613      	mov	r3, r2
 8003c32:	00db      	lsls	r3, r3, #3
 8003c34:	4413      	add	r3, r2
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	4413      	add	r3, r2
 8003c40:	3304      	adds	r3, #4
 8003c42:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6a1a      	ldr	r2, [r3, #32]
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	0159      	lsls	r1, r3, #5
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	440b      	add	r3, r1
 8003c50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c5a:	1ad2      	subs	r2, r2, r3
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d114      	bne.n	8003c90 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	691b      	ldr	r3, [r3, #16]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d109      	bne.n	8003c82 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6818      	ldr	r0, [r3, #0]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003c78:	461a      	mov	r2, r3
 8003c7a:	2101      	movs	r1, #1
 8003c7c:	f003 fad2 	bl	8007224 <USB_EP0_OutStart>
 8003c80:	e006      	b.n	8003c90 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	68da      	ldr	r2, [r3, #12]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	695b      	ldr	r3, [r3, #20]
 8003c8a:	441a      	add	r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	4619      	mov	r1, r3
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f007 f82a 	bl	800acf0 <HAL_PCD_DataOutStageCallback>
 8003c9c:	e046      	b.n	8003d2c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	4a26      	ldr	r2, [pc, #152]	; (8003d3c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d124      	bne.n	8003cf0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d00a      	beq.n	8003cc6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	015a      	lsls	r2, r3, #5
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	4413      	add	r3, r2
 8003cb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cc2:	6093      	str	r3, [r2, #8]
 8003cc4:	e032      	b.n	8003d2c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	f003 0320 	and.w	r3, r3, #32
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d008      	beq.n	8003ce2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	015a      	lsls	r2, r3, #5
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cdc:	461a      	mov	r2, r3
 8003cde:	2320      	movs	r3, #32
 8003ce0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f007 f801 	bl	800acf0 <HAL_PCD_DataOutStageCallback>
 8003cee:	e01d      	b.n	8003d2c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d114      	bne.n	8003d20 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003cf6:	6879      	ldr	r1, [r7, #4]
 8003cf8:	683a      	ldr	r2, [r7, #0]
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	00db      	lsls	r3, r3, #3
 8003cfe:	4413      	add	r3, r2
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	440b      	add	r3, r1
 8003d04:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d108      	bne.n	8003d20 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6818      	ldr	r0, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003d18:	461a      	mov	r2, r3
 8003d1a:	2100      	movs	r1, #0
 8003d1c:	f003 fa82 	bl	8007224 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	4619      	mov	r1, r3
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f006 ffe2 	bl	800acf0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3720      	adds	r7, #32
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	4f54300a 	.word	0x4f54300a
 8003d3c:	4f54310a 	.word	0x4f54310a

08003d40 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b086      	sub	sp, #24
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	333c      	adds	r3, #60	; 0x3c
 8003d58:	3304      	adds	r3, #4
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	015a      	lsls	r2, r3, #5
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	4413      	add	r3, r2
 8003d66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	4a15      	ldr	r2, [pc, #84]	; (8003dc8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d90e      	bls.n	8003d94 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d009      	beq.n	8003d94 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	015a      	lsls	r2, r3, #5
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	4413      	add	r3, r2
 8003d88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d92:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f006 ff99 	bl	800accc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	4a0a      	ldr	r2, [pc, #40]	; (8003dc8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d90c      	bls.n	8003dbc <PCD_EP_OutSetupPacket_int+0x7c>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	799b      	ldrb	r3, [r3, #6]
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d108      	bne.n	8003dbc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6818      	ldr	r0, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003db4:	461a      	mov	r2, r3
 8003db6:	2101      	movs	r1, #1
 8003db8:	f003 fa34 	bl	8007224 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003dbc:	2300      	movs	r3, #0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3718      	adds	r7, #24
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	4f54300a 	.word	0x4f54300a

08003dcc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b085      	sub	sp, #20
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	70fb      	strb	r3, [r7, #3]
 8003dd8:	4613      	mov	r3, r2
 8003dda:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003de4:	78fb      	ldrb	r3, [r7, #3]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d107      	bne.n	8003dfa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003dea:	883b      	ldrh	r3, [r7, #0]
 8003dec:	0419      	lsls	r1, r3, #16
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	68ba      	ldr	r2, [r7, #8]
 8003df4:	430a      	orrs	r2, r1
 8003df6:	629a      	str	r2, [r3, #40]	; 0x28
 8003df8:	e028      	b.n	8003e4c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e00:	0c1b      	lsrs	r3, r3, #16
 8003e02:	68ba      	ldr	r2, [r7, #8]
 8003e04:	4413      	add	r3, r2
 8003e06:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003e08:	2300      	movs	r3, #0
 8003e0a:	73fb      	strb	r3, [r7, #15]
 8003e0c:	e00d      	b.n	8003e2a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	7bfb      	ldrb	r3, [r7, #15]
 8003e14:	3340      	adds	r3, #64	; 0x40
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	4413      	add	r3, r2
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	0c1b      	lsrs	r3, r3, #16
 8003e1e:	68ba      	ldr	r2, [r7, #8]
 8003e20:	4413      	add	r3, r2
 8003e22:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003e24:	7bfb      	ldrb	r3, [r7, #15]
 8003e26:	3301      	adds	r3, #1
 8003e28:	73fb      	strb	r3, [r7, #15]
 8003e2a:	7bfa      	ldrb	r2, [r7, #15]
 8003e2c:	78fb      	ldrb	r3, [r7, #3]
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d3ec      	bcc.n	8003e0e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003e34:	883b      	ldrh	r3, [r7, #0]
 8003e36:	0418      	lsls	r0, r3, #16
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6819      	ldr	r1, [r3, #0]
 8003e3c:	78fb      	ldrb	r3, [r7, #3]
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	68ba      	ldr	r2, [r7, #8]
 8003e42:	4302      	orrs	r2, r0
 8003e44:	3340      	adds	r3, #64	; 0x40
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	440b      	add	r3, r1
 8003e4a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3714      	adds	r7, #20
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr

08003e5a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003e5a:	b480      	push	{r7}
 8003e5c:	b083      	sub	sp, #12
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
 8003e62:	460b      	mov	r3, r1
 8003e64:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	887a      	ldrh	r2, [r7, #2]
 8003e6c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003e6e:	2300      	movs	r3, #0
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	460b      	mov	r3, r1
 8003e86:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003e88:	bf00      	nop
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b086      	sub	sp, #24
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d101      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e267      	b.n	8004376 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0301 	and.w	r3, r3, #1
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d075      	beq.n	8003f9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003eb2:	4b88      	ldr	r3, [pc, #544]	; (80040d4 <HAL_RCC_OscConfig+0x240>)
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f003 030c 	and.w	r3, r3, #12
 8003eba:	2b04      	cmp	r3, #4
 8003ebc:	d00c      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ebe:	4b85      	ldr	r3, [pc, #532]	; (80040d4 <HAL_RCC_OscConfig+0x240>)
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ec6:	2b08      	cmp	r3, #8
 8003ec8:	d112      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003eca:	4b82      	ldr	r3, [pc, #520]	; (80040d4 <HAL_RCC_OscConfig+0x240>)
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ed2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ed6:	d10b      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ed8:	4b7e      	ldr	r3, [pc, #504]	; (80040d4 <HAL_RCC_OscConfig+0x240>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d05b      	beq.n	8003f9c <HAL_RCC_OscConfig+0x108>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d157      	bne.n	8003f9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e242      	b.n	8004376 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ef8:	d106      	bne.n	8003f08 <HAL_RCC_OscConfig+0x74>
 8003efa:	4b76      	ldr	r3, [pc, #472]	; (80040d4 <HAL_RCC_OscConfig+0x240>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a75      	ldr	r2, [pc, #468]	; (80040d4 <HAL_RCC_OscConfig+0x240>)
 8003f00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f04:	6013      	str	r3, [r2, #0]
 8003f06:	e01d      	b.n	8003f44 <HAL_RCC_OscConfig+0xb0>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f10:	d10c      	bne.n	8003f2c <HAL_RCC_OscConfig+0x98>
 8003f12:	4b70      	ldr	r3, [pc, #448]	; (80040d4 <HAL_RCC_OscConfig+0x240>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a6f      	ldr	r2, [pc, #444]	; (80040d4 <HAL_RCC_OscConfig+0x240>)
 8003f18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f1c:	6013      	str	r3, [r2, #0]
 8003f1e:	4b6d      	ldr	r3, [pc, #436]	; (80040d4 <HAL_RCC_OscConfig+0x240>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a6c      	ldr	r2, [pc, #432]	; (80040d4 <HAL_RCC_OscConfig+0x240>)
 8003f24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f28:	6013      	str	r3, [r2, #0]
 8003f2a:	e00b      	b.n	8003f44 <HAL_RCC_OscConfig+0xb0>
 8003f2c:	4b69      	ldr	r3, [pc, #420]	; (80040d4 <HAL_RCC_OscConfig+0x240>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a68      	ldr	r2, [pc, #416]	; (80040d4 <HAL_RCC_OscConfig+0x240>)
 8003f32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f36:	6013      	str	r3, [r2, #0]
 8003f38:	4b66      	ldr	r3, [pc, #408]	; (80040d4 <HAL_RCC_OscConfig+0x240>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a65      	ldr	r2, [pc, #404]	; (80040d4 <HAL_RCC_OscConfig+0x240>)
 8003f3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d013      	beq.n	8003f74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f4c:	f7fd ff2c 	bl	8001da8 <HAL_GetTick>
 8003f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f52:	e008      	b.n	8003f66 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f54:	f7fd ff28 	bl	8001da8 <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	2b64      	cmp	r3, #100	; 0x64
 8003f60:	d901      	bls.n	8003f66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e207      	b.n	8004376 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f66:	4b5b      	ldr	r3, [pc, #364]	; (80040d4 <HAL_RCC_OscConfig+0x240>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d0f0      	beq.n	8003f54 <HAL_RCC_OscConfig+0xc0>
 8003f72:	e014      	b.n	8003f9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f74:	f7fd ff18 	bl	8001da8 <HAL_GetTick>
 8003f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f7a:	e008      	b.n	8003f8e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f7c:	f7fd ff14 	bl	8001da8 <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	2b64      	cmp	r3, #100	; 0x64
 8003f88:	d901      	bls.n	8003f8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e1f3      	b.n	8004376 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f8e:	4b51      	ldr	r3, [pc, #324]	; (80040d4 <HAL_RCC_OscConfig+0x240>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d1f0      	bne.n	8003f7c <HAL_RCC_OscConfig+0xe8>
 8003f9a:	e000      	b.n	8003f9e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0302 	and.w	r3, r3, #2
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d063      	beq.n	8004072 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003faa:	4b4a      	ldr	r3, [pc, #296]	; (80040d4 <HAL_RCC_OscConfig+0x240>)
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	f003 030c 	and.w	r3, r3, #12
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00b      	beq.n	8003fce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fb6:	4b47      	ldr	r3, [pc, #284]	; (80040d4 <HAL_RCC_OscConfig+0x240>)
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003fbe:	2b08      	cmp	r3, #8
 8003fc0:	d11c      	bne.n	8003ffc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fc2:	4b44      	ldr	r3, [pc, #272]	; (80040d4 <HAL_RCC_OscConfig+0x240>)
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d116      	bne.n	8003ffc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fce:	4b41      	ldr	r3, [pc, #260]	; (80040d4 <HAL_RCC_OscConfig+0x240>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0302 	and.w	r3, r3, #2
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d005      	beq.n	8003fe6 <HAL_RCC_OscConfig+0x152>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d001      	beq.n	8003fe6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e1c7      	b.n	8004376 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fe6:	4b3b      	ldr	r3, [pc, #236]	; (80040d4 <HAL_RCC_OscConfig+0x240>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	00db      	lsls	r3, r3, #3
 8003ff4:	4937      	ldr	r1, [pc, #220]	; (80040d4 <HAL_RCC_OscConfig+0x240>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ffa:	e03a      	b.n	8004072 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d020      	beq.n	8004046 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004004:	4b34      	ldr	r3, [pc, #208]	; (80040d8 <HAL_RCC_OscConfig+0x244>)
 8004006:	2201      	movs	r2, #1
 8004008:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800400a:	f7fd fecd 	bl	8001da8 <HAL_GetTick>
 800400e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004010:	e008      	b.n	8004024 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004012:	f7fd fec9 	bl	8001da8 <HAL_GetTick>
 8004016:	4602      	mov	r2, r0
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	2b02      	cmp	r3, #2
 800401e:	d901      	bls.n	8004024 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004020:	2303      	movs	r3, #3
 8004022:	e1a8      	b.n	8004376 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004024:	4b2b      	ldr	r3, [pc, #172]	; (80040d4 <HAL_RCC_OscConfig+0x240>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0302 	and.w	r3, r3, #2
 800402c:	2b00      	cmp	r3, #0
 800402e:	d0f0      	beq.n	8004012 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004030:	4b28      	ldr	r3, [pc, #160]	; (80040d4 <HAL_RCC_OscConfig+0x240>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	691b      	ldr	r3, [r3, #16]
 800403c:	00db      	lsls	r3, r3, #3
 800403e:	4925      	ldr	r1, [pc, #148]	; (80040d4 <HAL_RCC_OscConfig+0x240>)
 8004040:	4313      	orrs	r3, r2
 8004042:	600b      	str	r3, [r1, #0]
 8004044:	e015      	b.n	8004072 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004046:	4b24      	ldr	r3, [pc, #144]	; (80040d8 <HAL_RCC_OscConfig+0x244>)
 8004048:	2200      	movs	r2, #0
 800404a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800404c:	f7fd feac 	bl	8001da8 <HAL_GetTick>
 8004050:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004052:	e008      	b.n	8004066 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004054:	f7fd fea8 	bl	8001da8 <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	2b02      	cmp	r3, #2
 8004060:	d901      	bls.n	8004066 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e187      	b.n	8004376 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004066:	4b1b      	ldr	r3, [pc, #108]	; (80040d4 <HAL_RCC_OscConfig+0x240>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0302 	and.w	r3, r3, #2
 800406e:	2b00      	cmp	r3, #0
 8004070:	d1f0      	bne.n	8004054 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0308 	and.w	r3, r3, #8
 800407a:	2b00      	cmp	r3, #0
 800407c:	d036      	beq.n	80040ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	695b      	ldr	r3, [r3, #20]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d016      	beq.n	80040b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004086:	4b15      	ldr	r3, [pc, #84]	; (80040dc <HAL_RCC_OscConfig+0x248>)
 8004088:	2201      	movs	r2, #1
 800408a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800408c:	f7fd fe8c 	bl	8001da8 <HAL_GetTick>
 8004090:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004092:	e008      	b.n	80040a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004094:	f7fd fe88 	bl	8001da8 <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d901      	bls.n	80040a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e167      	b.n	8004376 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040a6:	4b0b      	ldr	r3, [pc, #44]	; (80040d4 <HAL_RCC_OscConfig+0x240>)
 80040a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040aa:	f003 0302 	and.w	r3, r3, #2
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d0f0      	beq.n	8004094 <HAL_RCC_OscConfig+0x200>
 80040b2:	e01b      	b.n	80040ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040b4:	4b09      	ldr	r3, [pc, #36]	; (80040dc <HAL_RCC_OscConfig+0x248>)
 80040b6:	2200      	movs	r2, #0
 80040b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040ba:	f7fd fe75 	bl	8001da8 <HAL_GetTick>
 80040be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040c0:	e00e      	b.n	80040e0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040c2:	f7fd fe71 	bl	8001da8 <HAL_GetTick>
 80040c6:	4602      	mov	r2, r0
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d907      	bls.n	80040e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80040d0:	2303      	movs	r3, #3
 80040d2:	e150      	b.n	8004376 <HAL_RCC_OscConfig+0x4e2>
 80040d4:	40023800 	.word	0x40023800
 80040d8:	42470000 	.word	0x42470000
 80040dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040e0:	4b88      	ldr	r3, [pc, #544]	; (8004304 <HAL_RCC_OscConfig+0x470>)
 80040e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040e4:	f003 0302 	and.w	r3, r3, #2
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d1ea      	bne.n	80040c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0304 	and.w	r3, r3, #4
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	f000 8097 	beq.w	8004228 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040fa:	2300      	movs	r3, #0
 80040fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040fe:	4b81      	ldr	r3, [pc, #516]	; (8004304 <HAL_RCC_OscConfig+0x470>)
 8004100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d10f      	bne.n	800412a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800410a:	2300      	movs	r3, #0
 800410c:	60bb      	str	r3, [r7, #8]
 800410e:	4b7d      	ldr	r3, [pc, #500]	; (8004304 <HAL_RCC_OscConfig+0x470>)
 8004110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004112:	4a7c      	ldr	r2, [pc, #496]	; (8004304 <HAL_RCC_OscConfig+0x470>)
 8004114:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004118:	6413      	str	r3, [r2, #64]	; 0x40
 800411a:	4b7a      	ldr	r3, [pc, #488]	; (8004304 <HAL_RCC_OscConfig+0x470>)
 800411c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004122:	60bb      	str	r3, [r7, #8]
 8004124:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004126:	2301      	movs	r3, #1
 8004128:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800412a:	4b77      	ldr	r3, [pc, #476]	; (8004308 <HAL_RCC_OscConfig+0x474>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004132:	2b00      	cmp	r3, #0
 8004134:	d118      	bne.n	8004168 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004136:	4b74      	ldr	r3, [pc, #464]	; (8004308 <HAL_RCC_OscConfig+0x474>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a73      	ldr	r2, [pc, #460]	; (8004308 <HAL_RCC_OscConfig+0x474>)
 800413c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004140:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004142:	f7fd fe31 	bl	8001da8 <HAL_GetTick>
 8004146:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004148:	e008      	b.n	800415c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800414a:	f7fd fe2d 	bl	8001da8 <HAL_GetTick>
 800414e:	4602      	mov	r2, r0
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	2b02      	cmp	r3, #2
 8004156:	d901      	bls.n	800415c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	e10c      	b.n	8004376 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800415c:	4b6a      	ldr	r3, [pc, #424]	; (8004308 <HAL_RCC_OscConfig+0x474>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004164:	2b00      	cmp	r3, #0
 8004166:	d0f0      	beq.n	800414a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	2b01      	cmp	r3, #1
 800416e:	d106      	bne.n	800417e <HAL_RCC_OscConfig+0x2ea>
 8004170:	4b64      	ldr	r3, [pc, #400]	; (8004304 <HAL_RCC_OscConfig+0x470>)
 8004172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004174:	4a63      	ldr	r2, [pc, #396]	; (8004304 <HAL_RCC_OscConfig+0x470>)
 8004176:	f043 0301 	orr.w	r3, r3, #1
 800417a:	6713      	str	r3, [r2, #112]	; 0x70
 800417c:	e01c      	b.n	80041b8 <HAL_RCC_OscConfig+0x324>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	2b05      	cmp	r3, #5
 8004184:	d10c      	bne.n	80041a0 <HAL_RCC_OscConfig+0x30c>
 8004186:	4b5f      	ldr	r3, [pc, #380]	; (8004304 <HAL_RCC_OscConfig+0x470>)
 8004188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800418a:	4a5e      	ldr	r2, [pc, #376]	; (8004304 <HAL_RCC_OscConfig+0x470>)
 800418c:	f043 0304 	orr.w	r3, r3, #4
 8004190:	6713      	str	r3, [r2, #112]	; 0x70
 8004192:	4b5c      	ldr	r3, [pc, #368]	; (8004304 <HAL_RCC_OscConfig+0x470>)
 8004194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004196:	4a5b      	ldr	r2, [pc, #364]	; (8004304 <HAL_RCC_OscConfig+0x470>)
 8004198:	f043 0301 	orr.w	r3, r3, #1
 800419c:	6713      	str	r3, [r2, #112]	; 0x70
 800419e:	e00b      	b.n	80041b8 <HAL_RCC_OscConfig+0x324>
 80041a0:	4b58      	ldr	r3, [pc, #352]	; (8004304 <HAL_RCC_OscConfig+0x470>)
 80041a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a4:	4a57      	ldr	r2, [pc, #348]	; (8004304 <HAL_RCC_OscConfig+0x470>)
 80041a6:	f023 0301 	bic.w	r3, r3, #1
 80041aa:	6713      	str	r3, [r2, #112]	; 0x70
 80041ac:	4b55      	ldr	r3, [pc, #340]	; (8004304 <HAL_RCC_OscConfig+0x470>)
 80041ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041b0:	4a54      	ldr	r2, [pc, #336]	; (8004304 <HAL_RCC_OscConfig+0x470>)
 80041b2:	f023 0304 	bic.w	r3, r3, #4
 80041b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d015      	beq.n	80041ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041c0:	f7fd fdf2 	bl	8001da8 <HAL_GetTick>
 80041c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041c6:	e00a      	b.n	80041de <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041c8:	f7fd fdee 	bl	8001da8 <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d901      	bls.n	80041de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e0cb      	b.n	8004376 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041de:	4b49      	ldr	r3, [pc, #292]	; (8004304 <HAL_RCC_OscConfig+0x470>)
 80041e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e2:	f003 0302 	and.w	r3, r3, #2
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d0ee      	beq.n	80041c8 <HAL_RCC_OscConfig+0x334>
 80041ea:	e014      	b.n	8004216 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041ec:	f7fd fddc 	bl	8001da8 <HAL_GetTick>
 80041f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041f2:	e00a      	b.n	800420a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041f4:	f7fd fdd8 	bl	8001da8 <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004202:	4293      	cmp	r3, r2
 8004204:	d901      	bls.n	800420a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e0b5      	b.n	8004376 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800420a:	4b3e      	ldr	r3, [pc, #248]	; (8004304 <HAL_RCC_OscConfig+0x470>)
 800420c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800420e:	f003 0302 	and.w	r3, r3, #2
 8004212:	2b00      	cmp	r3, #0
 8004214:	d1ee      	bne.n	80041f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004216:	7dfb      	ldrb	r3, [r7, #23]
 8004218:	2b01      	cmp	r3, #1
 800421a:	d105      	bne.n	8004228 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800421c:	4b39      	ldr	r3, [pc, #228]	; (8004304 <HAL_RCC_OscConfig+0x470>)
 800421e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004220:	4a38      	ldr	r2, [pc, #224]	; (8004304 <HAL_RCC_OscConfig+0x470>)
 8004222:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004226:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	699b      	ldr	r3, [r3, #24]
 800422c:	2b00      	cmp	r3, #0
 800422e:	f000 80a1 	beq.w	8004374 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004232:	4b34      	ldr	r3, [pc, #208]	; (8004304 <HAL_RCC_OscConfig+0x470>)
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	f003 030c 	and.w	r3, r3, #12
 800423a:	2b08      	cmp	r3, #8
 800423c:	d05c      	beq.n	80042f8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	699b      	ldr	r3, [r3, #24]
 8004242:	2b02      	cmp	r3, #2
 8004244:	d141      	bne.n	80042ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004246:	4b31      	ldr	r3, [pc, #196]	; (800430c <HAL_RCC_OscConfig+0x478>)
 8004248:	2200      	movs	r2, #0
 800424a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800424c:	f7fd fdac 	bl	8001da8 <HAL_GetTick>
 8004250:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004252:	e008      	b.n	8004266 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004254:	f7fd fda8 	bl	8001da8 <HAL_GetTick>
 8004258:	4602      	mov	r2, r0
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	2b02      	cmp	r3, #2
 8004260:	d901      	bls.n	8004266 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e087      	b.n	8004376 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004266:	4b27      	ldr	r3, [pc, #156]	; (8004304 <HAL_RCC_OscConfig+0x470>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d1f0      	bne.n	8004254 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	69da      	ldr	r2, [r3, #28]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a1b      	ldr	r3, [r3, #32]
 800427a:	431a      	orrs	r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004280:	019b      	lsls	r3, r3, #6
 8004282:	431a      	orrs	r2, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004288:	085b      	lsrs	r3, r3, #1
 800428a:	3b01      	subs	r3, #1
 800428c:	041b      	lsls	r3, r3, #16
 800428e:	431a      	orrs	r2, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004294:	061b      	lsls	r3, r3, #24
 8004296:	491b      	ldr	r1, [pc, #108]	; (8004304 <HAL_RCC_OscConfig+0x470>)
 8004298:	4313      	orrs	r3, r2
 800429a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800429c:	4b1b      	ldr	r3, [pc, #108]	; (800430c <HAL_RCC_OscConfig+0x478>)
 800429e:	2201      	movs	r2, #1
 80042a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042a2:	f7fd fd81 	bl	8001da8 <HAL_GetTick>
 80042a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042a8:	e008      	b.n	80042bc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042aa:	f7fd fd7d 	bl	8001da8 <HAL_GetTick>
 80042ae:	4602      	mov	r2, r0
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	2b02      	cmp	r3, #2
 80042b6:	d901      	bls.n	80042bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80042b8:	2303      	movs	r3, #3
 80042ba:	e05c      	b.n	8004376 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042bc:	4b11      	ldr	r3, [pc, #68]	; (8004304 <HAL_RCC_OscConfig+0x470>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d0f0      	beq.n	80042aa <HAL_RCC_OscConfig+0x416>
 80042c8:	e054      	b.n	8004374 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042ca:	4b10      	ldr	r3, [pc, #64]	; (800430c <HAL_RCC_OscConfig+0x478>)
 80042cc:	2200      	movs	r2, #0
 80042ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042d0:	f7fd fd6a 	bl	8001da8 <HAL_GetTick>
 80042d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042d6:	e008      	b.n	80042ea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042d8:	f7fd fd66 	bl	8001da8 <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d901      	bls.n	80042ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e045      	b.n	8004376 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042ea:	4b06      	ldr	r3, [pc, #24]	; (8004304 <HAL_RCC_OscConfig+0x470>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d1f0      	bne.n	80042d8 <HAL_RCC_OscConfig+0x444>
 80042f6:	e03d      	b.n	8004374 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	699b      	ldr	r3, [r3, #24]
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d107      	bne.n	8004310 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e038      	b.n	8004376 <HAL_RCC_OscConfig+0x4e2>
 8004304:	40023800 	.word	0x40023800
 8004308:	40007000 	.word	0x40007000
 800430c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004310:	4b1b      	ldr	r3, [pc, #108]	; (8004380 <HAL_RCC_OscConfig+0x4ec>)
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	2b01      	cmp	r3, #1
 800431c:	d028      	beq.n	8004370 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004328:	429a      	cmp	r2, r3
 800432a:	d121      	bne.n	8004370 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004336:	429a      	cmp	r2, r3
 8004338:	d11a      	bne.n	8004370 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800433a:	68fa      	ldr	r2, [r7, #12]
 800433c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004340:	4013      	ands	r3, r2
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004346:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004348:	4293      	cmp	r3, r2
 800434a:	d111      	bne.n	8004370 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004356:	085b      	lsrs	r3, r3, #1
 8004358:	3b01      	subs	r3, #1
 800435a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800435c:	429a      	cmp	r2, r3
 800435e:	d107      	bne.n	8004370 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800436a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800436c:	429a      	cmp	r2, r3
 800436e:	d001      	beq.n	8004374 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e000      	b.n	8004376 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	3718      	adds	r7, #24
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	40023800 	.word	0x40023800

08004384 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d101      	bne.n	8004398 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e0cc      	b.n	8004532 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004398:	4b68      	ldr	r3, [pc, #416]	; (800453c <HAL_RCC_ClockConfig+0x1b8>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 030f 	and.w	r3, r3, #15
 80043a0:	683a      	ldr	r2, [r7, #0]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d90c      	bls.n	80043c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043a6:	4b65      	ldr	r3, [pc, #404]	; (800453c <HAL_RCC_ClockConfig+0x1b8>)
 80043a8:	683a      	ldr	r2, [r7, #0]
 80043aa:	b2d2      	uxtb	r2, r2
 80043ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ae:	4b63      	ldr	r3, [pc, #396]	; (800453c <HAL_RCC_ClockConfig+0x1b8>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 030f 	and.w	r3, r3, #15
 80043b6:	683a      	ldr	r2, [r7, #0]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d001      	beq.n	80043c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e0b8      	b.n	8004532 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0302 	and.w	r3, r3, #2
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d020      	beq.n	800440e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0304 	and.w	r3, r3, #4
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d005      	beq.n	80043e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043d8:	4b59      	ldr	r3, [pc, #356]	; (8004540 <HAL_RCC_ClockConfig+0x1bc>)
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	4a58      	ldr	r2, [pc, #352]	; (8004540 <HAL_RCC_ClockConfig+0x1bc>)
 80043de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80043e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 0308 	and.w	r3, r3, #8
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d005      	beq.n	80043fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043f0:	4b53      	ldr	r3, [pc, #332]	; (8004540 <HAL_RCC_ClockConfig+0x1bc>)
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	4a52      	ldr	r2, [pc, #328]	; (8004540 <HAL_RCC_ClockConfig+0x1bc>)
 80043f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80043fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043fc:	4b50      	ldr	r3, [pc, #320]	; (8004540 <HAL_RCC_ClockConfig+0x1bc>)
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	494d      	ldr	r1, [pc, #308]	; (8004540 <HAL_RCC_ClockConfig+0x1bc>)
 800440a:	4313      	orrs	r3, r2
 800440c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	2b00      	cmp	r3, #0
 8004418:	d044      	beq.n	80044a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	2b01      	cmp	r3, #1
 8004420:	d107      	bne.n	8004432 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004422:	4b47      	ldr	r3, [pc, #284]	; (8004540 <HAL_RCC_ClockConfig+0x1bc>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d119      	bne.n	8004462 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e07f      	b.n	8004532 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	2b02      	cmp	r3, #2
 8004438:	d003      	beq.n	8004442 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800443e:	2b03      	cmp	r3, #3
 8004440:	d107      	bne.n	8004452 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004442:	4b3f      	ldr	r3, [pc, #252]	; (8004540 <HAL_RCC_ClockConfig+0x1bc>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d109      	bne.n	8004462 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e06f      	b.n	8004532 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004452:	4b3b      	ldr	r3, [pc, #236]	; (8004540 <HAL_RCC_ClockConfig+0x1bc>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0302 	and.w	r3, r3, #2
 800445a:	2b00      	cmp	r3, #0
 800445c:	d101      	bne.n	8004462 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e067      	b.n	8004532 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004462:	4b37      	ldr	r3, [pc, #220]	; (8004540 <HAL_RCC_ClockConfig+0x1bc>)
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	f023 0203 	bic.w	r2, r3, #3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	4934      	ldr	r1, [pc, #208]	; (8004540 <HAL_RCC_ClockConfig+0x1bc>)
 8004470:	4313      	orrs	r3, r2
 8004472:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004474:	f7fd fc98 	bl	8001da8 <HAL_GetTick>
 8004478:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800447a:	e00a      	b.n	8004492 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800447c:	f7fd fc94 	bl	8001da8 <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	f241 3288 	movw	r2, #5000	; 0x1388
 800448a:	4293      	cmp	r3, r2
 800448c:	d901      	bls.n	8004492 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e04f      	b.n	8004532 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004492:	4b2b      	ldr	r3, [pc, #172]	; (8004540 <HAL_RCC_ClockConfig+0x1bc>)
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	f003 020c 	and.w	r2, r3, #12
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d1eb      	bne.n	800447c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044a4:	4b25      	ldr	r3, [pc, #148]	; (800453c <HAL_RCC_ClockConfig+0x1b8>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 030f 	and.w	r3, r3, #15
 80044ac:	683a      	ldr	r2, [r7, #0]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d20c      	bcs.n	80044cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044b2:	4b22      	ldr	r3, [pc, #136]	; (800453c <HAL_RCC_ClockConfig+0x1b8>)
 80044b4:	683a      	ldr	r2, [r7, #0]
 80044b6:	b2d2      	uxtb	r2, r2
 80044b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ba:	4b20      	ldr	r3, [pc, #128]	; (800453c <HAL_RCC_ClockConfig+0x1b8>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 030f 	and.w	r3, r3, #15
 80044c2:	683a      	ldr	r2, [r7, #0]
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d001      	beq.n	80044cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e032      	b.n	8004532 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0304 	and.w	r3, r3, #4
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d008      	beq.n	80044ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044d8:	4b19      	ldr	r3, [pc, #100]	; (8004540 <HAL_RCC_ClockConfig+0x1bc>)
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	4916      	ldr	r1, [pc, #88]	; (8004540 <HAL_RCC_ClockConfig+0x1bc>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0308 	and.w	r3, r3, #8
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d009      	beq.n	800450a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044f6:	4b12      	ldr	r3, [pc, #72]	; (8004540 <HAL_RCC_ClockConfig+0x1bc>)
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	00db      	lsls	r3, r3, #3
 8004504:	490e      	ldr	r1, [pc, #56]	; (8004540 <HAL_RCC_ClockConfig+0x1bc>)
 8004506:	4313      	orrs	r3, r2
 8004508:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800450a:	f000 f821 	bl	8004550 <HAL_RCC_GetSysClockFreq>
 800450e:	4602      	mov	r2, r0
 8004510:	4b0b      	ldr	r3, [pc, #44]	; (8004540 <HAL_RCC_ClockConfig+0x1bc>)
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	091b      	lsrs	r3, r3, #4
 8004516:	f003 030f 	and.w	r3, r3, #15
 800451a:	490a      	ldr	r1, [pc, #40]	; (8004544 <HAL_RCC_ClockConfig+0x1c0>)
 800451c:	5ccb      	ldrb	r3, [r1, r3]
 800451e:	fa22 f303 	lsr.w	r3, r2, r3
 8004522:	4a09      	ldr	r2, [pc, #36]	; (8004548 <HAL_RCC_ClockConfig+0x1c4>)
 8004524:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004526:	4b09      	ldr	r3, [pc, #36]	; (800454c <HAL_RCC_ClockConfig+0x1c8>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4618      	mov	r0, r3
 800452c:	f7fd f86a 	bl	8001604 <HAL_InitTick>

  return HAL_OK;
 8004530:	2300      	movs	r3, #0
}
 8004532:	4618      	mov	r0, r3
 8004534:	3710      	adds	r7, #16
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	40023c00 	.word	0x40023c00
 8004540:	40023800 	.word	0x40023800
 8004544:	0800d3e0 	.word	0x0800d3e0
 8004548:	20000000 	.word	0x20000000
 800454c:	20000004 	.word	0x20000004

08004550 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004550:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004554:	b090      	sub	sp, #64	; 0x40
 8004556:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004558:	2300      	movs	r3, #0
 800455a:	637b      	str	r3, [r7, #52]	; 0x34
 800455c:	2300      	movs	r3, #0
 800455e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004560:	2300      	movs	r3, #0
 8004562:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004564:	2300      	movs	r3, #0
 8004566:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004568:	4b59      	ldr	r3, [pc, #356]	; (80046d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	f003 030c 	and.w	r3, r3, #12
 8004570:	2b08      	cmp	r3, #8
 8004572:	d00d      	beq.n	8004590 <HAL_RCC_GetSysClockFreq+0x40>
 8004574:	2b08      	cmp	r3, #8
 8004576:	f200 80a1 	bhi.w	80046bc <HAL_RCC_GetSysClockFreq+0x16c>
 800457a:	2b00      	cmp	r3, #0
 800457c:	d002      	beq.n	8004584 <HAL_RCC_GetSysClockFreq+0x34>
 800457e:	2b04      	cmp	r3, #4
 8004580:	d003      	beq.n	800458a <HAL_RCC_GetSysClockFreq+0x3a>
 8004582:	e09b      	b.n	80046bc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004584:	4b53      	ldr	r3, [pc, #332]	; (80046d4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004586:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004588:	e09b      	b.n	80046c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800458a:	4b53      	ldr	r3, [pc, #332]	; (80046d8 <HAL_RCC_GetSysClockFreq+0x188>)
 800458c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800458e:	e098      	b.n	80046c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004590:	4b4f      	ldr	r3, [pc, #316]	; (80046d0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004598:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800459a:	4b4d      	ldr	r3, [pc, #308]	; (80046d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d028      	beq.n	80045f8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045a6:	4b4a      	ldr	r3, [pc, #296]	; (80046d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	099b      	lsrs	r3, r3, #6
 80045ac:	2200      	movs	r2, #0
 80045ae:	623b      	str	r3, [r7, #32]
 80045b0:	627a      	str	r2, [r7, #36]	; 0x24
 80045b2:	6a3b      	ldr	r3, [r7, #32]
 80045b4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80045b8:	2100      	movs	r1, #0
 80045ba:	4b47      	ldr	r3, [pc, #284]	; (80046d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80045bc:	fb03 f201 	mul.w	r2, r3, r1
 80045c0:	2300      	movs	r3, #0
 80045c2:	fb00 f303 	mul.w	r3, r0, r3
 80045c6:	4413      	add	r3, r2
 80045c8:	4a43      	ldr	r2, [pc, #268]	; (80046d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80045ca:	fba0 1202 	umull	r1, r2, r0, r2
 80045ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045d0:	460a      	mov	r2, r1
 80045d2:	62ba      	str	r2, [r7, #40]	; 0x28
 80045d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045d6:	4413      	add	r3, r2
 80045d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045dc:	2200      	movs	r2, #0
 80045de:	61bb      	str	r3, [r7, #24]
 80045e0:	61fa      	str	r2, [r7, #28]
 80045e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045e6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80045ea:	f7fc fabd 	bl	8000b68 <__aeabi_uldivmod>
 80045ee:	4602      	mov	r2, r0
 80045f0:	460b      	mov	r3, r1
 80045f2:	4613      	mov	r3, r2
 80045f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045f6:	e053      	b.n	80046a0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045f8:	4b35      	ldr	r3, [pc, #212]	; (80046d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	099b      	lsrs	r3, r3, #6
 80045fe:	2200      	movs	r2, #0
 8004600:	613b      	str	r3, [r7, #16]
 8004602:	617a      	str	r2, [r7, #20]
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800460a:	f04f 0b00 	mov.w	fp, #0
 800460e:	4652      	mov	r2, sl
 8004610:	465b      	mov	r3, fp
 8004612:	f04f 0000 	mov.w	r0, #0
 8004616:	f04f 0100 	mov.w	r1, #0
 800461a:	0159      	lsls	r1, r3, #5
 800461c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004620:	0150      	lsls	r0, r2, #5
 8004622:	4602      	mov	r2, r0
 8004624:	460b      	mov	r3, r1
 8004626:	ebb2 080a 	subs.w	r8, r2, sl
 800462a:	eb63 090b 	sbc.w	r9, r3, fp
 800462e:	f04f 0200 	mov.w	r2, #0
 8004632:	f04f 0300 	mov.w	r3, #0
 8004636:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800463a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800463e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004642:	ebb2 0408 	subs.w	r4, r2, r8
 8004646:	eb63 0509 	sbc.w	r5, r3, r9
 800464a:	f04f 0200 	mov.w	r2, #0
 800464e:	f04f 0300 	mov.w	r3, #0
 8004652:	00eb      	lsls	r3, r5, #3
 8004654:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004658:	00e2      	lsls	r2, r4, #3
 800465a:	4614      	mov	r4, r2
 800465c:	461d      	mov	r5, r3
 800465e:	eb14 030a 	adds.w	r3, r4, sl
 8004662:	603b      	str	r3, [r7, #0]
 8004664:	eb45 030b 	adc.w	r3, r5, fp
 8004668:	607b      	str	r3, [r7, #4]
 800466a:	f04f 0200 	mov.w	r2, #0
 800466e:	f04f 0300 	mov.w	r3, #0
 8004672:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004676:	4629      	mov	r1, r5
 8004678:	028b      	lsls	r3, r1, #10
 800467a:	4621      	mov	r1, r4
 800467c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004680:	4621      	mov	r1, r4
 8004682:	028a      	lsls	r2, r1, #10
 8004684:	4610      	mov	r0, r2
 8004686:	4619      	mov	r1, r3
 8004688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800468a:	2200      	movs	r2, #0
 800468c:	60bb      	str	r3, [r7, #8]
 800468e:	60fa      	str	r2, [r7, #12]
 8004690:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004694:	f7fc fa68 	bl	8000b68 <__aeabi_uldivmod>
 8004698:	4602      	mov	r2, r0
 800469a:	460b      	mov	r3, r1
 800469c:	4613      	mov	r3, r2
 800469e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80046a0:	4b0b      	ldr	r3, [pc, #44]	; (80046d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	0c1b      	lsrs	r3, r3, #16
 80046a6:	f003 0303 	and.w	r3, r3, #3
 80046aa:	3301      	adds	r3, #1
 80046ac:	005b      	lsls	r3, r3, #1
 80046ae:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80046b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80046b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046b8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80046ba:	e002      	b.n	80046c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046bc:	4b05      	ldr	r3, [pc, #20]	; (80046d4 <HAL_RCC_GetSysClockFreq+0x184>)
 80046be:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80046c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3740      	adds	r7, #64	; 0x40
 80046c8:	46bd      	mov	sp, r7
 80046ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046ce:	bf00      	nop
 80046d0:	40023800 	.word	0x40023800
 80046d4:	00f42400 	.word	0x00f42400
 80046d8:	00b71b00 	.word	0x00b71b00

080046dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046dc:	b480      	push	{r7}
 80046de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046e0:	4b03      	ldr	r3, [pc, #12]	; (80046f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80046e2:	681b      	ldr	r3, [r3, #0]
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr
 80046ee:	bf00      	nop
 80046f0:	20000000 	.word	0x20000000

080046f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80046f8:	f7ff fff0 	bl	80046dc <HAL_RCC_GetHCLKFreq>
 80046fc:	4602      	mov	r2, r0
 80046fe:	4b05      	ldr	r3, [pc, #20]	; (8004714 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	0a9b      	lsrs	r3, r3, #10
 8004704:	f003 0307 	and.w	r3, r3, #7
 8004708:	4903      	ldr	r1, [pc, #12]	; (8004718 <HAL_RCC_GetPCLK1Freq+0x24>)
 800470a:	5ccb      	ldrb	r3, [r1, r3]
 800470c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004710:	4618      	mov	r0, r3
 8004712:	bd80      	pop	{r7, pc}
 8004714:	40023800 	.word	0x40023800
 8004718:	0800d3f0 	.word	0x0800d3f0

0800471c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	220f      	movs	r2, #15
 800472a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800472c:	4b12      	ldr	r3, [pc, #72]	; (8004778 <HAL_RCC_GetClockConfig+0x5c>)
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	f003 0203 	and.w	r2, r3, #3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004738:	4b0f      	ldr	r3, [pc, #60]	; (8004778 <HAL_RCC_GetClockConfig+0x5c>)
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004744:	4b0c      	ldr	r3, [pc, #48]	; (8004778 <HAL_RCC_GetClockConfig+0x5c>)
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004750:	4b09      	ldr	r3, [pc, #36]	; (8004778 <HAL_RCC_GetClockConfig+0x5c>)
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	08db      	lsrs	r3, r3, #3
 8004756:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800475e:	4b07      	ldr	r3, [pc, #28]	; (800477c <HAL_RCC_GetClockConfig+0x60>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 020f 	and.w	r2, r3, #15
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	601a      	str	r2, [r3, #0]
}
 800476a:	bf00      	nop
 800476c:	370c      	adds	r7, #12
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr
 8004776:	bf00      	nop
 8004778:	40023800 	.word	0x40023800
 800477c:	40023c00 	.word	0x40023c00

08004780 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b082      	sub	sp, #8
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d101      	bne.n	8004792 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e07b      	b.n	800488a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004796:	2b00      	cmp	r3, #0
 8004798:	d108      	bne.n	80047ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047a2:	d009      	beq.n	80047b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	61da      	str	r2, [r3, #28]
 80047aa:	e005      	b.n	80047b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d106      	bne.n	80047d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f7fc fea2 	bl	800151c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2202      	movs	r2, #2
 80047dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047ee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004800:	431a      	orrs	r2, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800480a:	431a      	orrs	r2, r3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	f003 0302 	and.w	r3, r3, #2
 8004814:	431a      	orrs	r2, r3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	695b      	ldr	r3, [r3, #20]
 800481a:	f003 0301 	and.w	r3, r3, #1
 800481e:	431a      	orrs	r2, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	699b      	ldr	r3, [r3, #24]
 8004824:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004828:	431a      	orrs	r2, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	69db      	ldr	r3, [r3, #28]
 800482e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004832:	431a      	orrs	r2, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6a1b      	ldr	r3, [r3, #32]
 8004838:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800483c:	ea42 0103 	orr.w	r1, r2, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004844:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	430a      	orrs	r2, r1
 800484e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	699b      	ldr	r3, [r3, #24]
 8004854:	0c1b      	lsrs	r3, r3, #16
 8004856:	f003 0104 	and.w	r1, r3, #4
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485e:	f003 0210 	and.w	r2, r3, #16
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	430a      	orrs	r2, r1
 8004868:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	69da      	ldr	r2, [r3, #28]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004878:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004888:	2300      	movs	r3, #0
}
 800488a:	4618      	mov	r0, r3
 800488c:	3708      	adds	r7, #8
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}

08004892 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004892:	b580      	push	{r7, lr}
 8004894:	b08c      	sub	sp, #48	; 0x30
 8004896:	af00      	add	r7, sp, #0
 8004898:	60f8      	str	r0, [r7, #12]
 800489a:	60b9      	str	r1, [r7, #8]
 800489c:	607a      	str	r2, [r7, #4]
 800489e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80048a0:	2301      	movs	r3, #1
 80048a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80048a4:	2300      	movs	r3, #0
 80048a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d101      	bne.n	80048b8 <HAL_SPI_TransmitReceive+0x26>
 80048b4:	2302      	movs	r3, #2
 80048b6:	e198      	b.n	8004bea <HAL_SPI_TransmitReceive+0x358>
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80048c0:	f7fd fa72 	bl	8001da8 <HAL_GetTick>
 80048c4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80048d6:	887b      	ldrh	r3, [r7, #2]
 80048d8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80048da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d00f      	beq.n	8004902 <HAL_SPI_TransmitReceive+0x70>
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048e8:	d107      	bne.n	80048fa <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d103      	bne.n	80048fa <HAL_SPI_TransmitReceive+0x68>
 80048f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80048f6:	2b04      	cmp	r3, #4
 80048f8:	d003      	beq.n	8004902 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80048fa:	2302      	movs	r3, #2
 80048fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004900:	e16d      	b.n	8004bde <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d005      	beq.n	8004914 <HAL_SPI_TransmitReceive+0x82>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d002      	beq.n	8004914 <HAL_SPI_TransmitReceive+0x82>
 800490e:	887b      	ldrh	r3, [r7, #2]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d103      	bne.n	800491c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800491a:	e160      	b.n	8004bde <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004922:	b2db      	uxtb	r3, r3
 8004924:	2b04      	cmp	r3, #4
 8004926:	d003      	beq.n	8004930 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2205      	movs	r2, #5
 800492c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2200      	movs	r2, #0
 8004934:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	887a      	ldrh	r2, [r7, #2]
 8004940:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	887a      	ldrh	r2, [r7, #2]
 8004946:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	68ba      	ldr	r2, [r7, #8]
 800494c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	887a      	ldrh	r2, [r7, #2]
 8004952:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	887a      	ldrh	r2, [r7, #2]
 8004958:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2200      	movs	r2, #0
 800495e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2200      	movs	r2, #0
 8004964:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004970:	2b40      	cmp	r3, #64	; 0x40
 8004972:	d007      	beq.n	8004984 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004982:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800498c:	d17c      	bne.n	8004a88 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d002      	beq.n	800499c <HAL_SPI_TransmitReceive+0x10a>
 8004996:	8b7b      	ldrh	r3, [r7, #26]
 8004998:	2b01      	cmp	r3, #1
 800499a:	d16a      	bne.n	8004a72 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a0:	881a      	ldrh	r2, [r3, #0]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ac:	1c9a      	adds	r2, r3, #2
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	3b01      	subs	r3, #1
 80049ba:	b29a      	uxth	r2, r3
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049c0:	e057      	b.n	8004a72 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	f003 0302 	and.w	r3, r3, #2
 80049cc:	2b02      	cmp	r3, #2
 80049ce:	d11b      	bne.n	8004a08 <HAL_SPI_TransmitReceive+0x176>
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d016      	beq.n	8004a08 <HAL_SPI_TransmitReceive+0x176>
 80049da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d113      	bne.n	8004a08 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e4:	881a      	ldrh	r2, [r3, #0]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f0:	1c9a      	adds	r2, r3, #2
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	3b01      	subs	r3, #1
 80049fe:	b29a      	uxth	r2, r3
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004a04:	2300      	movs	r3, #0
 8004a06:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f003 0301 	and.w	r3, r3, #1
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d119      	bne.n	8004a4a <HAL_SPI_TransmitReceive+0x1b8>
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d014      	beq.n	8004a4a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	68da      	ldr	r2, [r3, #12]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a2a:	b292      	uxth	r2, r2
 8004a2c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a32:	1c9a      	adds	r2, r3, #2
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	3b01      	subs	r3, #1
 8004a40:	b29a      	uxth	r2, r3
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004a46:	2301      	movs	r3, #1
 8004a48:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004a4a:	f7fd f9ad 	bl	8001da8 <HAL_GetTick>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d80b      	bhi.n	8004a72 <HAL_SPI_TransmitReceive+0x1e0>
 8004a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a60:	d007      	beq.n	8004a72 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004a70:	e0b5      	b.n	8004bde <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d1a2      	bne.n	80049c2 <HAL_SPI_TransmitReceive+0x130>
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d19d      	bne.n	80049c2 <HAL_SPI_TransmitReceive+0x130>
 8004a86:	e080      	b.n	8004b8a <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d002      	beq.n	8004a96 <HAL_SPI_TransmitReceive+0x204>
 8004a90:	8b7b      	ldrh	r3, [r7, #26]
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d16f      	bne.n	8004b76 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	330c      	adds	r3, #12
 8004aa0:	7812      	ldrb	r2, [r2, #0]
 8004aa2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa8:	1c5a      	adds	r2, r3, #1
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	3b01      	subs	r3, #1
 8004ab6:	b29a      	uxth	r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004abc:	e05b      	b.n	8004b76 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f003 0302 	and.w	r3, r3, #2
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	d11c      	bne.n	8004b06 <HAL_SPI_TransmitReceive+0x274>
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d017      	beq.n	8004b06 <HAL_SPI_TransmitReceive+0x274>
 8004ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d114      	bne.n	8004b06 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	330c      	adds	r3, #12
 8004ae6:	7812      	ldrb	r2, [r2, #0]
 8004ae8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aee:	1c5a      	adds	r2, r3, #1
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	3b01      	subs	r3, #1
 8004afc:	b29a      	uxth	r2, r3
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004b02:	2300      	movs	r3, #0
 8004b04:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	f003 0301 	and.w	r3, r3, #1
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d119      	bne.n	8004b48 <HAL_SPI_TransmitReceive+0x2b6>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d014      	beq.n	8004b48 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	68da      	ldr	r2, [r3, #12]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b28:	b2d2      	uxtb	r2, r2
 8004b2a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b30:	1c5a      	adds	r2, r3, #1
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	3b01      	subs	r3, #1
 8004b3e:	b29a      	uxth	r2, r3
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004b44:	2301      	movs	r3, #1
 8004b46:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004b48:	f7fd f92e 	bl	8001da8 <HAL_GetTick>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d803      	bhi.n	8004b60 <HAL_SPI_TransmitReceive+0x2ce>
 8004b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b5e:	d102      	bne.n	8004b66 <HAL_SPI_TransmitReceive+0x2d4>
 8004b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d107      	bne.n	8004b76 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004b74:	e033      	b.n	8004bde <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d19e      	bne.n	8004abe <HAL_SPI_TransmitReceive+0x22c>
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d199      	bne.n	8004abe <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b8c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004b8e:	68f8      	ldr	r0, [r7, #12]
 8004b90:	f000 f8b8 	bl	8004d04 <SPI_EndRxTxTransaction>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d006      	beq.n	8004ba8 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2220      	movs	r2, #32
 8004ba4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004ba6:	e01a      	b.n	8004bde <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d10a      	bne.n	8004bc6 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	617b      	str	r3, [r7, #20]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	617b      	str	r3, [r7, #20]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	617b      	str	r3, [r7, #20]
 8004bc4:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d003      	beq.n	8004bd6 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bd4:	e003      	b.n	8004bde <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2200      	movs	r2, #0
 8004be2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004be6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3730      	adds	r7, #48	; 0x30
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
	...

08004bf4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b088      	sub	sp, #32
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	603b      	str	r3, [r7, #0]
 8004c00:	4613      	mov	r3, r2
 8004c02:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004c04:	f7fd f8d0 	bl	8001da8 <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c0c:	1a9b      	subs	r3, r3, r2
 8004c0e:	683a      	ldr	r2, [r7, #0]
 8004c10:	4413      	add	r3, r2
 8004c12:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004c14:	f7fd f8c8 	bl	8001da8 <HAL_GetTick>
 8004c18:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004c1a:	4b39      	ldr	r3, [pc, #228]	; (8004d00 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	015b      	lsls	r3, r3, #5
 8004c20:	0d1b      	lsrs	r3, r3, #20
 8004c22:	69fa      	ldr	r2, [r7, #28]
 8004c24:	fb02 f303 	mul.w	r3, r2, r3
 8004c28:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c2a:	e054      	b.n	8004cd6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c32:	d050      	beq.n	8004cd6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004c34:	f7fd f8b8 	bl	8001da8 <HAL_GetTick>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	69bb      	ldr	r3, [r7, #24]
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	69fa      	ldr	r2, [r7, #28]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d902      	bls.n	8004c4a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d13d      	bne.n	8004cc6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	685a      	ldr	r2, [r3, #4]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004c58:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c62:	d111      	bne.n	8004c88 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c6c:	d004      	beq.n	8004c78 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c76:	d107      	bne.n	8004c88 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c86:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c90:	d10f      	bne.n	8004cb2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ca0:	601a      	str	r2, [r3, #0]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004cb0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	e017      	b.n	8004cf6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d101      	bne.n	8004cd0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	3b01      	subs	r3, #1
 8004cd4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	689a      	ldr	r2, [r3, #8]
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	4013      	ands	r3, r2
 8004ce0:	68ba      	ldr	r2, [r7, #8]
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	bf0c      	ite	eq
 8004ce6:	2301      	moveq	r3, #1
 8004ce8:	2300      	movne	r3, #0
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	461a      	mov	r2, r3
 8004cee:	79fb      	ldrb	r3, [r7, #7]
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d19b      	bne.n	8004c2c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004cf4:	2300      	movs	r3, #0
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3720      	adds	r7, #32
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	20000000 	.word	0x20000000

08004d04 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b088      	sub	sp, #32
 8004d08:	af02      	add	r7, sp, #8
 8004d0a:	60f8      	str	r0, [r7, #12]
 8004d0c:	60b9      	str	r1, [r7, #8]
 8004d0e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	9300      	str	r3, [sp, #0]
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	2201      	movs	r2, #1
 8004d18:	2102      	movs	r1, #2
 8004d1a:	68f8      	ldr	r0, [r7, #12]
 8004d1c:	f7ff ff6a 	bl	8004bf4 <SPI_WaitFlagStateUntilTimeout>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d007      	beq.n	8004d36 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d2a:	f043 0220 	orr.w	r2, r3, #32
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	e032      	b.n	8004d9c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004d36:	4b1b      	ldr	r3, [pc, #108]	; (8004da4 <SPI_EndRxTxTransaction+0xa0>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a1b      	ldr	r2, [pc, #108]	; (8004da8 <SPI_EndRxTxTransaction+0xa4>)
 8004d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d40:	0d5b      	lsrs	r3, r3, #21
 8004d42:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004d46:	fb02 f303 	mul.w	r3, r2, r3
 8004d4a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d54:	d112      	bne.n	8004d7c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	9300      	str	r3, [sp, #0]
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	2180      	movs	r1, #128	; 0x80
 8004d60:	68f8      	ldr	r0, [r7, #12]
 8004d62:	f7ff ff47 	bl	8004bf4 <SPI_WaitFlagStateUntilTimeout>
 8004d66:	4603      	mov	r3, r0
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d016      	beq.n	8004d9a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d70:	f043 0220 	orr.w	r2, r3, #32
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004d78:	2303      	movs	r3, #3
 8004d7a:	e00f      	b.n	8004d9c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d00a      	beq.n	8004d98 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	3b01      	subs	r3, #1
 8004d86:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d92:	2b80      	cmp	r3, #128	; 0x80
 8004d94:	d0f2      	beq.n	8004d7c <SPI_EndRxTxTransaction+0x78>
 8004d96:	e000      	b.n	8004d9a <SPI_EndRxTxTransaction+0x96>
        break;
 8004d98:	bf00      	nop
  }

  return HAL_OK;
 8004d9a:	2300      	movs	r3, #0
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3718      	adds	r7, #24
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}
 8004da4:	20000000 	.word	0x20000000
 8004da8:	165e9f81 	.word	0x165e9f81

08004dac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d101      	bne.n	8004dbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e041      	b.n	8004e42 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d106      	bne.n	8004dd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f7fc feb6 	bl	8001b44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2202      	movs	r2, #2
 8004ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	3304      	adds	r3, #4
 8004de8:	4619      	mov	r1, r3
 8004dea:	4610      	mov	r0, r2
 8004dec:	f000 fb90 	bl	8005510 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e40:	2300      	movs	r3, #0
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3708      	adds	r7, #8
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
	...

08004e4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b085      	sub	sp, #20
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d001      	beq.n	8004e64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e04e      	b.n	8004f02 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2202      	movs	r2, #2
 8004e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	68da      	ldr	r2, [r3, #12]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f042 0201 	orr.w	r2, r2, #1
 8004e7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a23      	ldr	r2, [pc, #140]	; (8004f10 <HAL_TIM_Base_Start_IT+0xc4>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d022      	beq.n	8004ecc <HAL_TIM_Base_Start_IT+0x80>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e8e:	d01d      	beq.n	8004ecc <HAL_TIM_Base_Start_IT+0x80>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a1f      	ldr	r2, [pc, #124]	; (8004f14 <HAL_TIM_Base_Start_IT+0xc8>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d018      	beq.n	8004ecc <HAL_TIM_Base_Start_IT+0x80>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a1e      	ldr	r2, [pc, #120]	; (8004f18 <HAL_TIM_Base_Start_IT+0xcc>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d013      	beq.n	8004ecc <HAL_TIM_Base_Start_IT+0x80>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a1c      	ldr	r2, [pc, #112]	; (8004f1c <HAL_TIM_Base_Start_IT+0xd0>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d00e      	beq.n	8004ecc <HAL_TIM_Base_Start_IT+0x80>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a1b      	ldr	r2, [pc, #108]	; (8004f20 <HAL_TIM_Base_Start_IT+0xd4>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d009      	beq.n	8004ecc <HAL_TIM_Base_Start_IT+0x80>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a19      	ldr	r2, [pc, #100]	; (8004f24 <HAL_TIM_Base_Start_IT+0xd8>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d004      	beq.n	8004ecc <HAL_TIM_Base_Start_IT+0x80>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a18      	ldr	r2, [pc, #96]	; (8004f28 <HAL_TIM_Base_Start_IT+0xdc>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d111      	bne.n	8004ef0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	f003 0307 	and.w	r3, r3, #7
 8004ed6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2b06      	cmp	r3, #6
 8004edc:	d010      	beq.n	8004f00 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f042 0201 	orr.w	r2, r2, #1
 8004eec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eee:	e007      	b.n	8004f00 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f042 0201 	orr.w	r2, r2, #1
 8004efe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f00:	2300      	movs	r3, #0
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3714      	adds	r7, #20
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr
 8004f0e:	bf00      	nop
 8004f10:	40010000 	.word	0x40010000
 8004f14:	40000400 	.word	0x40000400
 8004f18:	40000800 	.word	0x40000800
 8004f1c:	40000c00 	.word	0x40000c00
 8004f20:	40010400 	.word	0x40010400
 8004f24:	40014000 	.word	0x40014000
 8004f28:	40001800 	.word	0x40001800

08004f2c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b082      	sub	sp, #8
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d101      	bne.n	8004f3e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e041      	b.n	8004fc2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d106      	bne.n	8004f58 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f7fc fda8 	bl	8001aa8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2202      	movs	r2, #2
 8004f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	3304      	adds	r3, #4
 8004f68:	4619      	mov	r1, r3
 8004f6a:	4610      	mov	r0, r2
 8004f6c:	f000 fad0 	bl	8005510 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fc0:	2300      	movs	r3, #0
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3708      	adds	r7, #8
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}

08004fca <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004fca:	b580      	push	{r7, lr}
 8004fcc:	b084      	sub	sp, #16
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	691b      	ldr	r3, [r3, #16]
 8004fe0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	f003 0302 	and.w	r3, r3, #2
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d020      	beq.n	800502e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f003 0302 	and.w	r3, r3, #2
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d01b      	beq.n	800502e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f06f 0202 	mvn.w	r2, #2
 8004ffe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	699b      	ldr	r3, [r3, #24]
 800500c:	f003 0303 	and.w	r3, r3, #3
 8005010:	2b00      	cmp	r3, #0
 8005012:	d003      	beq.n	800501c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f000 fa5c 	bl	80054d2 <HAL_TIM_IC_CaptureCallback>
 800501a:	e005      	b.n	8005028 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f000 fa4e 	bl	80054be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f000 fa5f 	bl	80054e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	f003 0304 	and.w	r3, r3, #4
 8005034:	2b00      	cmp	r3, #0
 8005036:	d020      	beq.n	800507a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f003 0304 	and.w	r3, r3, #4
 800503e:	2b00      	cmp	r3, #0
 8005040:	d01b      	beq.n	800507a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f06f 0204 	mvn.w	r2, #4
 800504a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2202      	movs	r2, #2
 8005050:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	699b      	ldr	r3, [r3, #24]
 8005058:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800505c:	2b00      	cmp	r3, #0
 800505e:	d003      	beq.n	8005068 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f000 fa36 	bl	80054d2 <HAL_TIM_IC_CaptureCallback>
 8005066:	e005      	b.n	8005074 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f000 fa28 	bl	80054be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 fa39 	bl	80054e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	f003 0308 	and.w	r3, r3, #8
 8005080:	2b00      	cmp	r3, #0
 8005082:	d020      	beq.n	80050c6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f003 0308 	and.w	r3, r3, #8
 800508a:	2b00      	cmp	r3, #0
 800508c:	d01b      	beq.n	80050c6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f06f 0208 	mvn.w	r2, #8
 8005096:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2204      	movs	r2, #4
 800509c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	69db      	ldr	r3, [r3, #28]
 80050a4:	f003 0303 	and.w	r3, r3, #3
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d003      	beq.n	80050b4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f000 fa10 	bl	80054d2 <HAL_TIM_IC_CaptureCallback>
 80050b2:	e005      	b.n	80050c0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f000 fa02 	bl	80054be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 fa13 	bl	80054e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2200      	movs	r2, #0
 80050c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	f003 0310 	and.w	r3, r3, #16
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d020      	beq.n	8005112 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f003 0310 	and.w	r3, r3, #16
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d01b      	beq.n	8005112 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f06f 0210 	mvn.w	r2, #16
 80050e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2208      	movs	r2, #8
 80050e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	69db      	ldr	r3, [r3, #28]
 80050f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d003      	beq.n	8005100 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f000 f9ea 	bl	80054d2 <HAL_TIM_IC_CaptureCallback>
 80050fe:	e005      	b.n	800510c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f000 f9dc 	bl	80054be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f000 f9ed 	bl	80054e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	f003 0301 	and.w	r3, r3, #1
 8005118:	2b00      	cmp	r3, #0
 800511a:	d00c      	beq.n	8005136 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f003 0301 	and.w	r3, r3, #1
 8005122:	2b00      	cmp	r3, #0
 8005124:	d007      	beq.n	8005136 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f06f 0201 	mvn.w	r2, #1
 800512e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f7fc f9a5 	bl	8001480 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800513c:	2b00      	cmp	r3, #0
 800513e:	d00c      	beq.n	800515a <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005146:	2b00      	cmp	r3, #0
 8005148:	d007      	beq.n	800515a <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005152:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f000 fda9 	bl	8005cac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005160:	2b00      	cmp	r3, #0
 8005162:	d00c      	beq.n	800517e <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800516a:	2b00      	cmp	r3, #0
 800516c:	d007      	beq.n	800517e <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005176:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f000 f9be 	bl	80054fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	f003 0320 	and.w	r3, r3, #32
 8005184:	2b00      	cmp	r3, #0
 8005186:	d00c      	beq.n	80051a2 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f003 0320 	and.w	r3, r3, #32
 800518e:	2b00      	cmp	r3, #0
 8005190:	d007      	beq.n	80051a2 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f06f 0220 	mvn.w	r2, #32
 800519a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f000 fd7b 	bl	8005c98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051a2:	bf00      	nop
 80051a4:	3710      	adds	r7, #16
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
	...

080051ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b086      	sub	sp, #24
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	60b9      	str	r1, [r7, #8]
 80051b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051b8:	2300      	movs	r3, #0
 80051ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d101      	bne.n	80051ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80051c6:	2302      	movs	r3, #2
 80051c8:	e0ae      	b.n	8005328 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2201      	movs	r2, #1
 80051ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2b0c      	cmp	r3, #12
 80051d6:	f200 809f 	bhi.w	8005318 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80051da:	a201      	add	r2, pc, #4	; (adr r2, 80051e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80051dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e0:	08005215 	.word	0x08005215
 80051e4:	08005319 	.word	0x08005319
 80051e8:	08005319 	.word	0x08005319
 80051ec:	08005319 	.word	0x08005319
 80051f0:	08005255 	.word	0x08005255
 80051f4:	08005319 	.word	0x08005319
 80051f8:	08005319 	.word	0x08005319
 80051fc:	08005319 	.word	0x08005319
 8005200:	08005297 	.word	0x08005297
 8005204:	08005319 	.word	0x08005319
 8005208:	08005319 	.word	0x08005319
 800520c:	08005319 	.word	0x08005319
 8005210:	080052d7 	.word	0x080052d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	68b9      	ldr	r1, [r7, #8]
 800521a:	4618      	mov	r0, r3
 800521c:	f000 fa24 	bl	8005668 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	699a      	ldr	r2, [r3, #24]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f042 0208 	orr.w	r2, r2, #8
 800522e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	699a      	ldr	r2, [r3, #24]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f022 0204 	bic.w	r2, r2, #4
 800523e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	6999      	ldr	r1, [r3, #24]
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	691a      	ldr	r2, [r3, #16]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	430a      	orrs	r2, r1
 8005250:	619a      	str	r2, [r3, #24]
      break;
 8005252:	e064      	b.n	800531e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	68b9      	ldr	r1, [r7, #8]
 800525a:	4618      	mov	r0, r3
 800525c:	f000 fa74 	bl	8005748 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	699a      	ldr	r2, [r3, #24]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800526e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	699a      	ldr	r2, [r3, #24]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800527e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	6999      	ldr	r1, [r3, #24]
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	691b      	ldr	r3, [r3, #16]
 800528a:	021a      	lsls	r2, r3, #8
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	430a      	orrs	r2, r1
 8005292:	619a      	str	r2, [r3, #24]
      break;
 8005294:	e043      	b.n	800531e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	68b9      	ldr	r1, [r7, #8]
 800529c:	4618      	mov	r0, r3
 800529e:	f000 fac9 	bl	8005834 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	69da      	ldr	r2, [r3, #28]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f042 0208 	orr.w	r2, r2, #8
 80052b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	69da      	ldr	r2, [r3, #28]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f022 0204 	bic.w	r2, r2, #4
 80052c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	69d9      	ldr	r1, [r3, #28]
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	691a      	ldr	r2, [r3, #16]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	430a      	orrs	r2, r1
 80052d2:	61da      	str	r2, [r3, #28]
      break;
 80052d4:	e023      	b.n	800531e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	68b9      	ldr	r1, [r7, #8]
 80052dc:	4618      	mov	r0, r3
 80052de:	f000 fb1d 	bl	800591c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	69da      	ldr	r2, [r3, #28]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	69da      	ldr	r2, [r3, #28]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005300:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	69d9      	ldr	r1, [r3, #28]
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	691b      	ldr	r3, [r3, #16]
 800530c:	021a      	lsls	r2, r3, #8
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	430a      	orrs	r2, r1
 8005314:	61da      	str	r2, [r3, #28]
      break;
 8005316:	e002      	b.n	800531e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	75fb      	strb	r3, [r7, #23]
      break;
 800531c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2200      	movs	r2, #0
 8005322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005326:	7dfb      	ldrb	r3, [r7, #23]
}
 8005328:	4618      	mov	r0, r3
 800532a:	3718      	adds	r7, #24
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}

08005330 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b084      	sub	sp, #16
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800533a:	2300      	movs	r3, #0
 800533c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005344:	2b01      	cmp	r3, #1
 8005346:	d101      	bne.n	800534c <HAL_TIM_ConfigClockSource+0x1c>
 8005348:	2302      	movs	r3, #2
 800534a:	e0b4      	b.n	80054b6 <HAL_TIM_ConfigClockSource+0x186>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2202      	movs	r2, #2
 8005358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800536a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005372:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	68ba      	ldr	r2, [r7, #8]
 800537a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005384:	d03e      	beq.n	8005404 <HAL_TIM_ConfigClockSource+0xd4>
 8005386:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800538a:	f200 8087 	bhi.w	800549c <HAL_TIM_ConfigClockSource+0x16c>
 800538e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005392:	f000 8086 	beq.w	80054a2 <HAL_TIM_ConfigClockSource+0x172>
 8005396:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800539a:	d87f      	bhi.n	800549c <HAL_TIM_ConfigClockSource+0x16c>
 800539c:	2b70      	cmp	r3, #112	; 0x70
 800539e:	d01a      	beq.n	80053d6 <HAL_TIM_ConfigClockSource+0xa6>
 80053a0:	2b70      	cmp	r3, #112	; 0x70
 80053a2:	d87b      	bhi.n	800549c <HAL_TIM_ConfigClockSource+0x16c>
 80053a4:	2b60      	cmp	r3, #96	; 0x60
 80053a6:	d050      	beq.n	800544a <HAL_TIM_ConfigClockSource+0x11a>
 80053a8:	2b60      	cmp	r3, #96	; 0x60
 80053aa:	d877      	bhi.n	800549c <HAL_TIM_ConfigClockSource+0x16c>
 80053ac:	2b50      	cmp	r3, #80	; 0x50
 80053ae:	d03c      	beq.n	800542a <HAL_TIM_ConfigClockSource+0xfa>
 80053b0:	2b50      	cmp	r3, #80	; 0x50
 80053b2:	d873      	bhi.n	800549c <HAL_TIM_ConfigClockSource+0x16c>
 80053b4:	2b40      	cmp	r3, #64	; 0x40
 80053b6:	d058      	beq.n	800546a <HAL_TIM_ConfigClockSource+0x13a>
 80053b8:	2b40      	cmp	r3, #64	; 0x40
 80053ba:	d86f      	bhi.n	800549c <HAL_TIM_ConfigClockSource+0x16c>
 80053bc:	2b30      	cmp	r3, #48	; 0x30
 80053be:	d064      	beq.n	800548a <HAL_TIM_ConfigClockSource+0x15a>
 80053c0:	2b30      	cmp	r3, #48	; 0x30
 80053c2:	d86b      	bhi.n	800549c <HAL_TIM_ConfigClockSource+0x16c>
 80053c4:	2b20      	cmp	r3, #32
 80053c6:	d060      	beq.n	800548a <HAL_TIM_ConfigClockSource+0x15a>
 80053c8:	2b20      	cmp	r3, #32
 80053ca:	d867      	bhi.n	800549c <HAL_TIM_ConfigClockSource+0x16c>
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d05c      	beq.n	800548a <HAL_TIM_ConfigClockSource+0x15a>
 80053d0:	2b10      	cmp	r3, #16
 80053d2:	d05a      	beq.n	800548a <HAL_TIM_ConfigClockSource+0x15a>
 80053d4:	e062      	b.n	800549c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80053e6:	f000 fb69 	bl	8005abc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80053f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	68ba      	ldr	r2, [r7, #8]
 8005400:	609a      	str	r2, [r3, #8]
      break;
 8005402:	e04f      	b.n	80054a4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005414:	f000 fb52 	bl	8005abc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	689a      	ldr	r2, [r3, #8]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005426:	609a      	str	r2, [r3, #8]
      break;
 8005428:	e03c      	b.n	80054a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005436:	461a      	mov	r2, r3
 8005438:	f000 fac6 	bl	80059c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	2150      	movs	r1, #80	; 0x50
 8005442:	4618      	mov	r0, r3
 8005444:	f000 fb1f 	bl	8005a86 <TIM_ITRx_SetConfig>
      break;
 8005448:	e02c      	b.n	80054a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005456:	461a      	mov	r2, r3
 8005458:	f000 fae5 	bl	8005a26 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	2160      	movs	r1, #96	; 0x60
 8005462:	4618      	mov	r0, r3
 8005464:	f000 fb0f 	bl	8005a86 <TIM_ITRx_SetConfig>
      break;
 8005468:	e01c      	b.n	80054a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005476:	461a      	mov	r2, r3
 8005478:	f000 faa6 	bl	80059c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2140      	movs	r1, #64	; 0x40
 8005482:	4618      	mov	r0, r3
 8005484:	f000 faff 	bl	8005a86 <TIM_ITRx_SetConfig>
      break;
 8005488:	e00c      	b.n	80054a4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4619      	mov	r1, r3
 8005494:	4610      	mov	r0, r2
 8005496:	f000 faf6 	bl	8005a86 <TIM_ITRx_SetConfig>
      break;
 800549a:	e003      	b.n	80054a4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	73fb      	strb	r3, [r7, #15]
      break;
 80054a0:	e000      	b.n	80054a4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80054a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80054b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3710      	adds	r7, #16
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}

080054be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054be:	b480      	push	{r7}
 80054c0:	b083      	sub	sp, #12
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054c6:	bf00      	nop
 80054c8:	370c      	adds	r7, #12
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr

080054d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054d2:	b480      	push	{r7}
 80054d4:	b083      	sub	sp, #12
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054da:	bf00      	nop
 80054dc:	370c      	adds	r7, #12
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr

080054e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054e6:	b480      	push	{r7}
 80054e8:	b083      	sub	sp, #12
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054ee:	bf00      	nop
 80054f0:	370c      	adds	r7, #12
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr

080054fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054fa:	b480      	push	{r7}
 80054fc:	b083      	sub	sp, #12
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005502:	bf00      	nop
 8005504:	370c      	adds	r7, #12
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr
	...

08005510 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005510:	b480      	push	{r7}
 8005512:	b085      	sub	sp, #20
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	4a46      	ldr	r2, [pc, #280]	; (800563c <TIM_Base_SetConfig+0x12c>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d013      	beq.n	8005550 <TIM_Base_SetConfig+0x40>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800552e:	d00f      	beq.n	8005550 <TIM_Base_SetConfig+0x40>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4a43      	ldr	r2, [pc, #268]	; (8005640 <TIM_Base_SetConfig+0x130>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d00b      	beq.n	8005550 <TIM_Base_SetConfig+0x40>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4a42      	ldr	r2, [pc, #264]	; (8005644 <TIM_Base_SetConfig+0x134>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d007      	beq.n	8005550 <TIM_Base_SetConfig+0x40>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	4a41      	ldr	r2, [pc, #260]	; (8005648 <TIM_Base_SetConfig+0x138>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d003      	beq.n	8005550 <TIM_Base_SetConfig+0x40>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	4a40      	ldr	r2, [pc, #256]	; (800564c <TIM_Base_SetConfig+0x13c>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d108      	bne.n	8005562 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005556:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	68fa      	ldr	r2, [r7, #12]
 800555e:	4313      	orrs	r3, r2
 8005560:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a35      	ldr	r2, [pc, #212]	; (800563c <TIM_Base_SetConfig+0x12c>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d02b      	beq.n	80055c2 <TIM_Base_SetConfig+0xb2>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005570:	d027      	beq.n	80055c2 <TIM_Base_SetConfig+0xb2>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a32      	ldr	r2, [pc, #200]	; (8005640 <TIM_Base_SetConfig+0x130>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d023      	beq.n	80055c2 <TIM_Base_SetConfig+0xb2>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a31      	ldr	r2, [pc, #196]	; (8005644 <TIM_Base_SetConfig+0x134>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d01f      	beq.n	80055c2 <TIM_Base_SetConfig+0xb2>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a30      	ldr	r2, [pc, #192]	; (8005648 <TIM_Base_SetConfig+0x138>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d01b      	beq.n	80055c2 <TIM_Base_SetConfig+0xb2>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a2f      	ldr	r2, [pc, #188]	; (800564c <TIM_Base_SetConfig+0x13c>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d017      	beq.n	80055c2 <TIM_Base_SetConfig+0xb2>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a2e      	ldr	r2, [pc, #184]	; (8005650 <TIM_Base_SetConfig+0x140>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d013      	beq.n	80055c2 <TIM_Base_SetConfig+0xb2>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4a2d      	ldr	r2, [pc, #180]	; (8005654 <TIM_Base_SetConfig+0x144>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d00f      	beq.n	80055c2 <TIM_Base_SetConfig+0xb2>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a2c      	ldr	r2, [pc, #176]	; (8005658 <TIM_Base_SetConfig+0x148>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d00b      	beq.n	80055c2 <TIM_Base_SetConfig+0xb2>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a2b      	ldr	r2, [pc, #172]	; (800565c <TIM_Base_SetConfig+0x14c>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d007      	beq.n	80055c2 <TIM_Base_SetConfig+0xb2>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a2a      	ldr	r2, [pc, #168]	; (8005660 <TIM_Base_SetConfig+0x150>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d003      	beq.n	80055c2 <TIM_Base_SetConfig+0xb2>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a29      	ldr	r2, [pc, #164]	; (8005664 <TIM_Base_SetConfig+0x154>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d108      	bne.n	80055d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	68fa      	ldr	r2, [r7, #12]
 80055d0:	4313      	orrs	r3, r2
 80055d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	695b      	ldr	r3, [r3, #20]
 80055de:	4313      	orrs	r3, r2
 80055e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	68fa      	ldr	r2, [r7, #12]
 80055e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	689a      	ldr	r2, [r3, #8]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4a10      	ldr	r2, [pc, #64]	; (800563c <TIM_Base_SetConfig+0x12c>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d003      	beq.n	8005608 <TIM_Base_SetConfig+0xf8>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4a12      	ldr	r2, [pc, #72]	; (800564c <TIM_Base_SetConfig+0x13c>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d103      	bne.n	8005610 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	691a      	ldr	r2, [r3, #16]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	f003 0301 	and.w	r3, r3, #1
 800561e:	2b01      	cmp	r3, #1
 8005620:	d105      	bne.n	800562e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	691b      	ldr	r3, [r3, #16]
 8005626:	f023 0201 	bic.w	r2, r3, #1
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	611a      	str	r2, [r3, #16]
  }
}
 800562e:	bf00      	nop
 8005630:	3714      	adds	r7, #20
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr
 800563a:	bf00      	nop
 800563c:	40010000 	.word	0x40010000
 8005640:	40000400 	.word	0x40000400
 8005644:	40000800 	.word	0x40000800
 8005648:	40000c00 	.word	0x40000c00
 800564c:	40010400 	.word	0x40010400
 8005650:	40014000 	.word	0x40014000
 8005654:	40014400 	.word	0x40014400
 8005658:	40014800 	.word	0x40014800
 800565c:	40001800 	.word	0x40001800
 8005660:	40001c00 	.word	0x40001c00
 8005664:	40002000 	.word	0x40002000

08005668 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005668:	b480      	push	{r7}
 800566a:	b087      	sub	sp, #28
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6a1b      	ldr	r3, [r3, #32]
 8005676:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6a1b      	ldr	r3, [r3, #32]
 800567c:	f023 0201 	bic.w	r2, r3, #1
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	699b      	ldr	r3, [r3, #24]
 800568e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005696:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f023 0303 	bic.w	r3, r3, #3
 800569e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	68fa      	ldr	r2, [r7, #12]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	f023 0302 	bic.w	r3, r3, #2
 80056b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	697a      	ldr	r2, [r7, #20]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4a20      	ldr	r2, [pc, #128]	; (8005740 <TIM_OC1_SetConfig+0xd8>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d003      	beq.n	80056cc <TIM_OC1_SetConfig+0x64>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	4a1f      	ldr	r2, [pc, #124]	; (8005744 <TIM_OC1_SetConfig+0xdc>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d10c      	bne.n	80056e6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	f023 0308 	bic.w	r3, r3, #8
 80056d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	697a      	ldr	r2, [r7, #20]
 80056da:	4313      	orrs	r3, r2
 80056dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	f023 0304 	bic.w	r3, r3, #4
 80056e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a15      	ldr	r2, [pc, #84]	; (8005740 <TIM_OC1_SetConfig+0xd8>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d003      	beq.n	80056f6 <TIM_OC1_SetConfig+0x8e>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a14      	ldr	r2, [pc, #80]	; (8005744 <TIM_OC1_SetConfig+0xdc>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d111      	bne.n	800571a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005704:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	695b      	ldr	r3, [r3, #20]
 800570a:	693a      	ldr	r2, [r7, #16]
 800570c:	4313      	orrs	r3, r2
 800570e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	699b      	ldr	r3, [r3, #24]
 8005714:	693a      	ldr	r2, [r7, #16]
 8005716:	4313      	orrs	r3, r2
 8005718:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	693a      	ldr	r2, [r7, #16]
 800571e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	68fa      	ldr	r2, [r7, #12]
 8005724:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	685a      	ldr	r2, [r3, #4]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	697a      	ldr	r2, [r7, #20]
 8005732:	621a      	str	r2, [r3, #32]
}
 8005734:	bf00      	nop
 8005736:	371c      	adds	r7, #28
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr
 8005740:	40010000 	.word	0x40010000
 8005744:	40010400 	.word	0x40010400

08005748 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005748:	b480      	push	{r7}
 800574a:	b087      	sub	sp, #28
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6a1b      	ldr	r3, [r3, #32]
 8005756:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6a1b      	ldr	r3, [r3, #32]
 800575c:	f023 0210 	bic.w	r2, r3, #16
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	699b      	ldr	r3, [r3, #24]
 800576e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005776:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800577e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	021b      	lsls	r3, r3, #8
 8005786:	68fa      	ldr	r2, [r7, #12]
 8005788:	4313      	orrs	r3, r2
 800578a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	f023 0320 	bic.w	r3, r3, #32
 8005792:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	011b      	lsls	r3, r3, #4
 800579a:	697a      	ldr	r2, [r7, #20]
 800579c:	4313      	orrs	r3, r2
 800579e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4a22      	ldr	r2, [pc, #136]	; (800582c <TIM_OC2_SetConfig+0xe4>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d003      	beq.n	80057b0 <TIM_OC2_SetConfig+0x68>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4a21      	ldr	r2, [pc, #132]	; (8005830 <TIM_OC2_SetConfig+0xe8>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d10d      	bne.n	80057cc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	011b      	lsls	r3, r3, #4
 80057be:	697a      	ldr	r2, [r7, #20]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4a17      	ldr	r2, [pc, #92]	; (800582c <TIM_OC2_SetConfig+0xe4>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d003      	beq.n	80057dc <TIM_OC2_SetConfig+0x94>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4a16      	ldr	r2, [pc, #88]	; (8005830 <TIM_OC2_SetConfig+0xe8>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d113      	bne.n	8005804 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80057ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	695b      	ldr	r3, [r3, #20]
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	693a      	ldr	r2, [r7, #16]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	699b      	ldr	r3, [r3, #24]
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	693a      	ldr	r2, [r7, #16]
 8005800:	4313      	orrs	r3, r2
 8005802:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	693a      	ldr	r2, [r7, #16]
 8005808:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	68fa      	ldr	r2, [r7, #12]
 800580e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	685a      	ldr	r2, [r3, #4]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	697a      	ldr	r2, [r7, #20]
 800581c:	621a      	str	r2, [r3, #32]
}
 800581e:	bf00      	nop
 8005820:	371c      	adds	r7, #28
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr
 800582a:	bf00      	nop
 800582c:	40010000 	.word	0x40010000
 8005830:	40010400 	.word	0x40010400

08005834 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005834:	b480      	push	{r7}
 8005836:	b087      	sub	sp, #28
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a1b      	ldr	r3, [r3, #32]
 8005842:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6a1b      	ldr	r3, [r3, #32]
 8005848:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	69db      	ldr	r3, [r3, #28]
 800585a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005862:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f023 0303 	bic.w	r3, r3, #3
 800586a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	68fa      	ldr	r2, [r7, #12]
 8005872:	4313      	orrs	r3, r2
 8005874:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800587c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	021b      	lsls	r3, r3, #8
 8005884:	697a      	ldr	r2, [r7, #20]
 8005886:	4313      	orrs	r3, r2
 8005888:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a21      	ldr	r2, [pc, #132]	; (8005914 <TIM_OC3_SetConfig+0xe0>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d003      	beq.n	800589a <TIM_OC3_SetConfig+0x66>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a20      	ldr	r2, [pc, #128]	; (8005918 <TIM_OC3_SetConfig+0xe4>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d10d      	bne.n	80058b6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80058a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	021b      	lsls	r3, r3, #8
 80058a8:	697a      	ldr	r2, [r7, #20]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80058b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a16      	ldr	r2, [pc, #88]	; (8005914 <TIM_OC3_SetConfig+0xe0>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d003      	beq.n	80058c6 <TIM_OC3_SetConfig+0x92>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a15      	ldr	r2, [pc, #84]	; (8005918 <TIM_OC3_SetConfig+0xe4>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d113      	bne.n	80058ee <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80058d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	695b      	ldr	r3, [r3, #20]
 80058da:	011b      	lsls	r3, r3, #4
 80058dc:	693a      	ldr	r2, [r7, #16]
 80058de:	4313      	orrs	r3, r2
 80058e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	699b      	ldr	r3, [r3, #24]
 80058e6:	011b      	lsls	r3, r3, #4
 80058e8:	693a      	ldr	r2, [r7, #16]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	693a      	ldr	r2, [r7, #16]
 80058f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	68fa      	ldr	r2, [r7, #12]
 80058f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	685a      	ldr	r2, [r3, #4]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	697a      	ldr	r2, [r7, #20]
 8005906:	621a      	str	r2, [r3, #32]
}
 8005908:	bf00      	nop
 800590a:	371c      	adds	r7, #28
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr
 8005914:	40010000 	.word	0x40010000
 8005918:	40010400 	.word	0x40010400

0800591c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800591c:	b480      	push	{r7}
 800591e:	b087      	sub	sp, #28
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6a1b      	ldr	r3, [r3, #32]
 800592a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6a1b      	ldr	r3, [r3, #32]
 8005930:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	69db      	ldr	r3, [r3, #28]
 8005942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800594a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005952:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	021b      	lsls	r3, r3, #8
 800595a:	68fa      	ldr	r2, [r7, #12]
 800595c:	4313      	orrs	r3, r2
 800595e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005966:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	031b      	lsls	r3, r3, #12
 800596e:	693a      	ldr	r2, [r7, #16]
 8005970:	4313      	orrs	r3, r2
 8005972:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4a12      	ldr	r2, [pc, #72]	; (80059c0 <TIM_OC4_SetConfig+0xa4>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d003      	beq.n	8005984 <TIM_OC4_SetConfig+0x68>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4a11      	ldr	r2, [pc, #68]	; (80059c4 <TIM_OC4_SetConfig+0xa8>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d109      	bne.n	8005998 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800598a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	695b      	ldr	r3, [r3, #20]
 8005990:	019b      	lsls	r3, r3, #6
 8005992:	697a      	ldr	r2, [r7, #20]
 8005994:	4313      	orrs	r3, r2
 8005996:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	697a      	ldr	r2, [r7, #20]
 800599c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	68fa      	ldr	r2, [r7, #12]
 80059a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	685a      	ldr	r2, [r3, #4]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	693a      	ldr	r2, [r7, #16]
 80059b0:	621a      	str	r2, [r3, #32]
}
 80059b2:	bf00      	nop
 80059b4:	371c      	adds	r7, #28
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr
 80059be:	bf00      	nop
 80059c0:	40010000 	.word	0x40010000
 80059c4:	40010400 	.word	0x40010400

080059c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b087      	sub	sp, #28
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	60f8      	str	r0, [r7, #12]
 80059d0:	60b9      	str	r1, [r7, #8]
 80059d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	6a1b      	ldr	r3, [r3, #32]
 80059d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	6a1b      	ldr	r3, [r3, #32]
 80059de:	f023 0201 	bic.w	r2, r3, #1
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	699b      	ldr	r3, [r3, #24]
 80059ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	011b      	lsls	r3, r3, #4
 80059f8:	693a      	ldr	r2, [r7, #16]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	f023 030a 	bic.w	r3, r3, #10
 8005a04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a06:	697a      	ldr	r2, [r7, #20]
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	693a      	ldr	r2, [r7, #16]
 8005a12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	697a      	ldr	r2, [r7, #20]
 8005a18:	621a      	str	r2, [r3, #32]
}
 8005a1a:	bf00      	nop
 8005a1c:	371c      	adds	r7, #28
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr

08005a26 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a26:	b480      	push	{r7}
 8005a28:	b087      	sub	sp, #28
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	60f8      	str	r0, [r7, #12]
 8005a2e:	60b9      	str	r1, [r7, #8]
 8005a30:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	6a1b      	ldr	r3, [r3, #32]
 8005a36:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6a1b      	ldr	r3, [r3, #32]
 8005a3c:	f023 0210 	bic.w	r2, r3, #16
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	699b      	ldr	r3, [r3, #24]
 8005a48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a50:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	031b      	lsls	r3, r3, #12
 8005a56:	693a      	ldr	r2, [r7, #16]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005a62:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	011b      	lsls	r3, r3, #4
 8005a68:	697a      	ldr	r2, [r7, #20]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	693a      	ldr	r2, [r7, #16]
 8005a72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	697a      	ldr	r2, [r7, #20]
 8005a78:	621a      	str	r2, [r3, #32]
}
 8005a7a:	bf00      	nop
 8005a7c:	371c      	adds	r7, #28
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr

08005a86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a86:	b480      	push	{r7}
 8005a88:	b085      	sub	sp, #20
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
 8005a8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a9e:	683a      	ldr	r2, [r7, #0]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	f043 0307 	orr.w	r3, r3, #7
 8005aa8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	609a      	str	r2, [r3, #8]
}
 8005ab0:	bf00      	nop
 8005ab2:	3714      	adds	r7, #20
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr

08005abc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b087      	sub	sp, #28
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	60f8      	str	r0, [r7, #12]
 8005ac4:	60b9      	str	r1, [r7, #8]
 8005ac6:	607a      	str	r2, [r7, #4]
 8005ac8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ad6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	021a      	lsls	r2, r3, #8
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	431a      	orrs	r2, r3
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	697a      	ldr	r2, [r7, #20]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	697a      	ldr	r2, [r7, #20]
 8005aee:	609a      	str	r2, [r3, #8]
}
 8005af0:	bf00      	nop
 8005af2:	371c      	adds	r7, #28
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b085      	sub	sp, #20
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d101      	bne.n	8005b14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b10:	2302      	movs	r3, #2
 8005b12:	e05a      	b.n	8005bca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2202      	movs	r2, #2
 8005b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	68fa      	ldr	r2, [r7, #12]
 8005b42:	4313      	orrs	r3, r2
 8005b44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	68fa      	ldr	r2, [r7, #12]
 8005b4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a21      	ldr	r2, [pc, #132]	; (8005bd8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d022      	beq.n	8005b9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b60:	d01d      	beq.n	8005b9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a1d      	ldr	r2, [pc, #116]	; (8005bdc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d018      	beq.n	8005b9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a1b      	ldr	r2, [pc, #108]	; (8005be0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d013      	beq.n	8005b9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a1a      	ldr	r2, [pc, #104]	; (8005be4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d00e      	beq.n	8005b9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a18      	ldr	r2, [pc, #96]	; (8005be8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d009      	beq.n	8005b9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a17      	ldr	r2, [pc, #92]	; (8005bec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d004      	beq.n	8005b9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a15      	ldr	r2, [pc, #84]	; (8005bf0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d10c      	bne.n	8005bb8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ba4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	68ba      	ldr	r2, [r7, #8]
 8005bac:	4313      	orrs	r3, r2
 8005bae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	68ba      	ldr	r2, [r7, #8]
 8005bb6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005bc8:	2300      	movs	r3, #0
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3714      	adds	r7, #20
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr
 8005bd6:	bf00      	nop
 8005bd8:	40010000 	.word	0x40010000
 8005bdc:	40000400 	.word	0x40000400
 8005be0:	40000800 	.word	0x40000800
 8005be4:	40000c00 	.word	0x40000c00
 8005be8:	40010400 	.word	0x40010400
 8005bec:	40014000 	.word	0x40014000
 8005bf0:	40001800 	.word	0x40001800

08005bf4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b085      	sub	sp, #20
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d101      	bne.n	8005c10 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005c0c:	2302      	movs	r3, #2
 8005c0e:	e03d      	b.n	8005c8c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	691b      	ldr	r3, [r3, #16]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	695b      	ldr	r3, [r3, #20]
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	69db      	ldr	r3, [r3, #28]
 8005c76:	4313      	orrs	r3, r2
 8005c78:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	68fa      	ldr	r2, [r7, #12]
 8005c80:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c8a:	2300      	movs	r3, #0
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3714      	adds	r7, #20
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr

08005c98 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b083      	sub	sp, #12
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ca0:	bf00      	nop
 8005ca2:	370c      	adds	r7, #12
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr

08005cac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b083      	sub	sp, #12
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005cb4:	bf00      	nop
 8005cb6:	370c      	adds	r7, #12
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr

08005cc0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005cc0:	b084      	sub	sp, #16
 8005cc2:	b580      	push	{r7, lr}
 8005cc4:	b084      	sub	sp, #16
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	6078      	str	r0, [r7, #4]
 8005cca:	f107 001c 	add.w	r0, r7, #28
 8005cce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005cd2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d123      	bne.n	8005d22 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cde:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	68db      	ldr	r3, [r3, #12]
 8005cea:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005cee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005d02:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d105      	bne.n	8005d16 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f001 fae2 	bl	80072e0 <USB_CoreReset>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	73fb      	strb	r3, [r7, #15]
 8005d20:	e01b      	b.n	8005d5a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f001 fad6 	bl	80072e0 <USB_CoreReset>
 8005d34:	4603      	mov	r3, r0
 8005d36:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005d38:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d106      	bne.n	8005d4e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d44:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	639a      	str	r2, [r3, #56]	; 0x38
 8005d4c:	e005      	b.n	8005d5a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d52:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005d5a:	7fbb      	ldrb	r3, [r7, #30]
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d10b      	bne.n	8005d78 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	f043 0206 	orr.w	r2, r3, #6
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	f043 0220 	orr.w	r2, r3, #32
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3710      	adds	r7, #16
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d84:	b004      	add	sp, #16
 8005d86:	4770      	bx	lr

08005d88 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b087      	sub	sp, #28
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	60b9      	str	r1, [r7, #8]
 8005d92:	4613      	mov	r3, r2
 8005d94:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005d96:	79fb      	ldrb	r3, [r7, #7]
 8005d98:	2b02      	cmp	r3, #2
 8005d9a:	d165      	bne.n	8005e68 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	4a41      	ldr	r2, [pc, #260]	; (8005ea4 <USB_SetTurnaroundTime+0x11c>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d906      	bls.n	8005db2 <USB_SetTurnaroundTime+0x2a>
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	4a40      	ldr	r2, [pc, #256]	; (8005ea8 <USB_SetTurnaroundTime+0x120>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d202      	bcs.n	8005db2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005dac:	230f      	movs	r3, #15
 8005dae:	617b      	str	r3, [r7, #20]
 8005db0:	e062      	b.n	8005e78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	4a3c      	ldr	r2, [pc, #240]	; (8005ea8 <USB_SetTurnaroundTime+0x120>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d306      	bcc.n	8005dc8 <USB_SetTurnaroundTime+0x40>
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	4a3b      	ldr	r2, [pc, #236]	; (8005eac <USB_SetTurnaroundTime+0x124>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d202      	bcs.n	8005dc8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005dc2:	230e      	movs	r3, #14
 8005dc4:	617b      	str	r3, [r7, #20]
 8005dc6:	e057      	b.n	8005e78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	4a38      	ldr	r2, [pc, #224]	; (8005eac <USB_SetTurnaroundTime+0x124>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d306      	bcc.n	8005dde <USB_SetTurnaroundTime+0x56>
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	4a37      	ldr	r2, [pc, #220]	; (8005eb0 <USB_SetTurnaroundTime+0x128>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d202      	bcs.n	8005dde <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005dd8:	230d      	movs	r3, #13
 8005dda:	617b      	str	r3, [r7, #20]
 8005ddc:	e04c      	b.n	8005e78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	4a33      	ldr	r2, [pc, #204]	; (8005eb0 <USB_SetTurnaroundTime+0x128>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d306      	bcc.n	8005df4 <USB_SetTurnaroundTime+0x6c>
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	4a32      	ldr	r2, [pc, #200]	; (8005eb4 <USB_SetTurnaroundTime+0x12c>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d802      	bhi.n	8005df4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005dee:	230c      	movs	r3, #12
 8005df0:	617b      	str	r3, [r7, #20]
 8005df2:	e041      	b.n	8005e78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	4a2f      	ldr	r2, [pc, #188]	; (8005eb4 <USB_SetTurnaroundTime+0x12c>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d906      	bls.n	8005e0a <USB_SetTurnaroundTime+0x82>
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	4a2e      	ldr	r2, [pc, #184]	; (8005eb8 <USB_SetTurnaroundTime+0x130>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d802      	bhi.n	8005e0a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005e04:	230b      	movs	r3, #11
 8005e06:	617b      	str	r3, [r7, #20]
 8005e08:	e036      	b.n	8005e78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	4a2a      	ldr	r2, [pc, #168]	; (8005eb8 <USB_SetTurnaroundTime+0x130>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d906      	bls.n	8005e20 <USB_SetTurnaroundTime+0x98>
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	4a29      	ldr	r2, [pc, #164]	; (8005ebc <USB_SetTurnaroundTime+0x134>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d802      	bhi.n	8005e20 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005e1a:	230a      	movs	r3, #10
 8005e1c:	617b      	str	r3, [r7, #20]
 8005e1e:	e02b      	b.n	8005e78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	4a26      	ldr	r2, [pc, #152]	; (8005ebc <USB_SetTurnaroundTime+0x134>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d906      	bls.n	8005e36 <USB_SetTurnaroundTime+0xae>
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	4a25      	ldr	r2, [pc, #148]	; (8005ec0 <USB_SetTurnaroundTime+0x138>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d202      	bcs.n	8005e36 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005e30:	2309      	movs	r3, #9
 8005e32:	617b      	str	r3, [r7, #20]
 8005e34:	e020      	b.n	8005e78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	4a21      	ldr	r2, [pc, #132]	; (8005ec0 <USB_SetTurnaroundTime+0x138>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d306      	bcc.n	8005e4c <USB_SetTurnaroundTime+0xc4>
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	4a20      	ldr	r2, [pc, #128]	; (8005ec4 <USB_SetTurnaroundTime+0x13c>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d802      	bhi.n	8005e4c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005e46:	2308      	movs	r3, #8
 8005e48:	617b      	str	r3, [r7, #20]
 8005e4a:	e015      	b.n	8005e78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	4a1d      	ldr	r2, [pc, #116]	; (8005ec4 <USB_SetTurnaroundTime+0x13c>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d906      	bls.n	8005e62 <USB_SetTurnaroundTime+0xda>
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	4a1c      	ldr	r2, [pc, #112]	; (8005ec8 <USB_SetTurnaroundTime+0x140>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d202      	bcs.n	8005e62 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005e5c:	2307      	movs	r3, #7
 8005e5e:	617b      	str	r3, [r7, #20]
 8005e60:	e00a      	b.n	8005e78 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005e62:	2306      	movs	r3, #6
 8005e64:	617b      	str	r3, [r7, #20]
 8005e66:	e007      	b.n	8005e78 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005e68:	79fb      	ldrb	r3, [r7, #7]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d102      	bne.n	8005e74 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005e6e:	2309      	movs	r3, #9
 8005e70:	617b      	str	r3, [r7, #20]
 8005e72:	e001      	b.n	8005e78 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005e74:	2309      	movs	r3, #9
 8005e76:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	68da      	ldr	r2, [r3, #12]
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	029b      	lsls	r3, r3, #10
 8005e8c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005e90:	431a      	orrs	r2, r3
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005e96:	2300      	movs	r3, #0
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	371c      	adds	r7, #28
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr
 8005ea4:	00d8acbf 	.word	0x00d8acbf
 8005ea8:	00e4e1c0 	.word	0x00e4e1c0
 8005eac:	00f42400 	.word	0x00f42400
 8005eb0:	01067380 	.word	0x01067380
 8005eb4:	011a499f 	.word	0x011a499f
 8005eb8:	01312cff 	.word	0x01312cff
 8005ebc:	014ca43f 	.word	0x014ca43f
 8005ec0:	016e3600 	.word	0x016e3600
 8005ec4:	01a6ab1f 	.word	0x01a6ab1f
 8005ec8:	01e84800 	.word	0x01e84800

08005ecc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b083      	sub	sp, #12
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	f043 0201 	orr.w	r2, r3, #1
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005ee0:	2300      	movs	r3, #0
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	370c      	adds	r7, #12
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr

08005eee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005eee:	b480      	push	{r7}
 8005ef0:	b083      	sub	sp, #12
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	f023 0201 	bic.w	r2, r3, #1
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005f02:	2300      	movs	r3, #0
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	370c      	adds	r7, #12
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr

08005f10 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b084      	sub	sp, #16
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	460b      	mov	r3, r1
 8005f1a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005f2c:	78fb      	ldrb	r3, [r7, #3]
 8005f2e:	2b01      	cmp	r3, #1
 8005f30:	d115      	bne.n	8005f5e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005f3e:	200a      	movs	r0, #10
 8005f40:	f7fb ff3e 	bl	8001dc0 <HAL_Delay>
      ms += 10U;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	330a      	adds	r3, #10
 8005f48:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f001 f939 	bl	80071c2 <USB_GetMode>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d01e      	beq.n	8005f94 <USB_SetCurrentMode+0x84>
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2bc7      	cmp	r3, #199	; 0xc7
 8005f5a:	d9f0      	bls.n	8005f3e <USB_SetCurrentMode+0x2e>
 8005f5c:	e01a      	b.n	8005f94 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005f5e:	78fb      	ldrb	r3, [r7, #3]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d115      	bne.n	8005f90 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005f70:	200a      	movs	r0, #10
 8005f72:	f7fb ff25 	bl	8001dc0 <HAL_Delay>
      ms += 10U;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	330a      	adds	r3, #10
 8005f7a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f001 f920 	bl	80071c2 <USB_GetMode>
 8005f82:	4603      	mov	r3, r0
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d005      	beq.n	8005f94 <USB_SetCurrentMode+0x84>
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2bc7      	cmp	r3, #199	; 0xc7
 8005f8c:	d9f0      	bls.n	8005f70 <USB_SetCurrentMode+0x60>
 8005f8e:	e001      	b.n	8005f94 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	e005      	b.n	8005fa0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2bc8      	cmp	r3, #200	; 0xc8
 8005f98:	d101      	bne.n	8005f9e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e000      	b.n	8005fa0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005f9e:	2300      	movs	r3, #0
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3710      	adds	r7, #16
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005fa8:	b084      	sub	sp, #16
 8005faa:	b580      	push	{r7, lr}
 8005fac:	b086      	sub	sp, #24
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
 8005fb2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005fb6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	613b      	str	r3, [r7, #16]
 8005fc6:	e009      	b.n	8005fdc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	3340      	adds	r3, #64	; 0x40
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	4413      	add	r3, r2
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	3301      	adds	r3, #1
 8005fda:	613b      	str	r3, [r7, #16]
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	2b0e      	cmp	r3, #14
 8005fe0:	d9f2      	bls.n	8005fc8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005fe2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d11c      	bne.n	8006024 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	68fa      	ldr	r2, [r7, #12]
 8005ff4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ff8:	f043 0302 	orr.w	r3, r3, #2
 8005ffc:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006002:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800600e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800601a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	639a      	str	r2, [r3, #56]	; 0x38
 8006022:	e00b      	b.n	800603c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006028:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006034:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006042:	461a      	mov	r2, r3
 8006044:	2300      	movs	r3, #0
 8006046:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006048:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800604c:	2b01      	cmp	r3, #1
 800604e:	d10d      	bne.n	800606c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006050:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006054:	2b00      	cmp	r3, #0
 8006056:	d104      	bne.n	8006062 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006058:	2100      	movs	r1, #0
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f000 f968 	bl	8006330 <USB_SetDevSpeed>
 8006060:	e008      	b.n	8006074 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006062:	2101      	movs	r1, #1
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f000 f963 	bl	8006330 <USB_SetDevSpeed>
 800606a:	e003      	b.n	8006074 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800606c:	2103      	movs	r1, #3
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f000 f95e 	bl	8006330 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006074:	2110      	movs	r1, #16
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f000 f8fa 	bl	8006270 <USB_FlushTxFifo>
 800607c:	4603      	mov	r3, r0
 800607e:	2b00      	cmp	r3, #0
 8006080:	d001      	beq.n	8006086 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 f924 	bl	80062d4 <USB_FlushRxFifo>
 800608c:	4603      	mov	r3, r0
 800608e:	2b00      	cmp	r3, #0
 8006090:	d001      	beq.n	8006096 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800609c:	461a      	mov	r2, r3
 800609e:	2300      	movs	r3, #0
 80060a0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060a8:	461a      	mov	r2, r3
 80060aa:	2300      	movs	r3, #0
 80060ac:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060b4:	461a      	mov	r2, r3
 80060b6:	2300      	movs	r3, #0
 80060b8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80060ba:	2300      	movs	r3, #0
 80060bc:	613b      	str	r3, [r7, #16]
 80060be:	e043      	b.n	8006148 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	015a      	lsls	r2, r3, #5
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	4413      	add	r3, r2
 80060c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060d6:	d118      	bne.n	800610a <USB_DevInit+0x162>
    {
      if (i == 0U)
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d10a      	bne.n	80060f4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	015a      	lsls	r2, r3, #5
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	4413      	add	r3, r2
 80060e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060ea:	461a      	mov	r2, r3
 80060ec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80060f0:	6013      	str	r3, [r2, #0]
 80060f2:	e013      	b.n	800611c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	015a      	lsls	r2, r3, #5
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	4413      	add	r3, r2
 80060fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006100:	461a      	mov	r2, r3
 8006102:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006106:	6013      	str	r3, [r2, #0]
 8006108:	e008      	b.n	800611c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	015a      	lsls	r2, r3, #5
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	4413      	add	r3, r2
 8006112:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006116:	461a      	mov	r2, r3
 8006118:	2300      	movs	r3, #0
 800611a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	015a      	lsls	r2, r3, #5
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	4413      	add	r3, r2
 8006124:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006128:	461a      	mov	r2, r3
 800612a:	2300      	movs	r3, #0
 800612c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	015a      	lsls	r2, r3, #5
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	4413      	add	r3, r2
 8006136:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800613a:	461a      	mov	r2, r3
 800613c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006140:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	3301      	adds	r3, #1
 8006146:	613b      	str	r3, [r7, #16]
 8006148:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800614c:	461a      	mov	r2, r3
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	4293      	cmp	r3, r2
 8006152:	d3b5      	bcc.n	80060c0 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006154:	2300      	movs	r3, #0
 8006156:	613b      	str	r3, [r7, #16]
 8006158:	e043      	b.n	80061e2 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	015a      	lsls	r2, r3, #5
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	4413      	add	r3, r2
 8006162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800616c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006170:	d118      	bne.n	80061a4 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d10a      	bne.n	800618e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	015a      	lsls	r2, r3, #5
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	4413      	add	r3, r2
 8006180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006184:	461a      	mov	r2, r3
 8006186:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800618a:	6013      	str	r3, [r2, #0]
 800618c:	e013      	b.n	80061b6 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	015a      	lsls	r2, r3, #5
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	4413      	add	r3, r2
 8006196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800619a:	461a      	mov	r2, r3
 800619c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80061a0:	6013      	str	r3, [r2, #0]
 80061a2:	e008      	b.n	80061b6 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	015a      	lsls	r2, r3, #5
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	4413      	add	r3, r2
 80061ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061b0:	461a      	mov	r2, r3
 80061b2:	2300      	movs	r3, #0
 80061b4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	015a      	lsls	r2, r3, #5
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	4413      	add	r3, r2
 80061be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061c2:	461a      	mov	r2, r3
 80061c4:	2300      	movs	r3, #0
 80061c6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	015a      	lsls	r2, r3, #5
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	4413      	add	r3, r2
 80061d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061d4:	461a      	mov	r2, r3
 80061d6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80061da:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	3301      	adds	r3, #1
 80061e0:	613b      	str	r3, [r7, #16]
 80061e2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80061e6:	461a      	mov	r2, r3
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d3b5      	bcc.n	800615a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061f4:	691b      	ldr	r3, [r3, #16]
 80061f6:	68fa      	ldr	r2, [r7, #12]
 80061f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006200:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800620e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006210:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006214:	2b00      	cmp	r3, #0
 8006216:	d105      	bne.n	8006224 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	699b      	ldr	r3, [r3, #24]
 800621c:	f043 0210 	orr.w	r2, r3, #16
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	699a      	ldr	r2, [r3, #24]
 8006228:	4b10      	ldr	r3, [pc, #64]	; (800626c <USB_DevInit+0x2c4>)
 800622a:	4313      	orrs	r3, r2
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006230:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8006234:	2b00      	cmp	r3, #0
 8006236:	d005      	beq.n	8006244 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	699b      	ldr	r3, [r3, #24]
 800623c:	f043 0208 	orr.w	r2, r3, #8
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006244:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006248:	2b01      	cmp	r3, #1
 800624a:	d107      	bne.n	800625c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	699b      	ldr	r3, [r3, #24]
 8006250:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006254:	f043 0304 	orr.w	r3, r3, #4
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800625c:	7dfb      	ldrb	r3, [r7, #23]
}
 800625e:	4618      	mov	r0, r3
 8006260:	3718      	adds	r7, #24
 8006262:	46bd      	mov	sp, r7
 8006264:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006268:	b004      	add	sp, #16
 800626a:	4770      	bx	lr
 800626c:	803c3800 	.word	0x803c3800

08006270 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006270:	b480      	push	{r7}
 8006272:	b085      	sub	sp, #20
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800627a:	2300      	movs	r3, #0
 800627c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	3301      	adds	r3, #1
 8006282:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800628a:	d901      	bls.n	8006290 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800628c:	2303      	movs	r3, #3
 800628e:	e01b      	b.n	80062c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	691b      	ldr	r3, [r3, #16]
 8006294:	2b00      	cmp	r3, #0
 8006296:	daf2      	bge.n	800627e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006298:	2300      	movs	r3, #0
 800629a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	019b      	lsls	r3, r3, #6
 80062a0:	f043 0220 	orr.w	r2, r3, #32
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	3301      	adds	r3, #1
 80062ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80062b4:	d901      	bls.n	80062ba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80062b6:	2303      	movs	r3, #3
 80062b8:	e006      	b.n	80062c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	691b      	ldr	r3, [r3, #16]
 80062be:	f003 0320 	and.w	r3, r3, #32
 80062c2:	2b20      	cmp	r3, #32
 80062c4:	d0f0      	beq.n	80062a8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80062c6:	2300      	movs	r3, #0
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3714      	adds	r7, #20
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr

080062d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b085      	sub	sp, #20
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80062dc:	2300      	movs	r3, #0
 80062de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	3301      	adds	r3, #1
 80062e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80062ec:	d901      	bls.n	80062f2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80062ee:	2303      	movs	r3, #3
 80062f0:	e018      	b.n	8006324 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	691b      	ldr	r3, [r3, #16]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	daf2      	bge.n	80062e0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80062fa:	2300      	movs	r3, #0
 80062fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2210      	movs	r2, #16
 8006302:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	3301      	adds	r3, #1
 8006308:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006310:	d901      	bls.n	8006316 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006312:	2303      	movs	r3, #3
 8006314:	e006      	b.n	8006324 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	691b      	ldr	r3, [r3, #16]
 800631a:	f003 0310 	and.w	r3, r3, #16
 800631e:	2b10      	cmp	r3, #16
 8006320:	d0f0      	beq.n	8006304 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006322:	2300      	movs	r3, #0
}
 8006324:	4618      	mov	r0, r3
 8006326:	3714      	adds	r7, #20
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr

08006330 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006330:	b480      	push	{r7}
 8006332:	b085      	sub	sp, #20
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	460b      	mov	r3, r1
 800633a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	78fb      	ldrb	r3, [r7, #3]
 800634a:	68f9      	ldr	r1, [r7, #12]
 800634c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006350:	4313      	orrs	r3, r2
 8006352:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006354:	2300      	movs	r3, #0
}
 8006356:	4618      	mov	r0, r3
 8006358:	3714      	adds	r7, #20
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr

08006362 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8006362:	b480      	push	{r7}
 8006364:	b087      	sub	sp, #28
 8006366:	af00      	add	r7, sp, #0
 8006368:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	f003 0306 	and.w	r3, r3, #6
 800637a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d102      	bne.n	8006388 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006382:	2300      	movs	r3, #0
 8006384:	75fb      	strb	r3, [r7, #23]
 8006386:	e00a      	b.n	800639e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2b02      	cmp	r3, #2
 800638c:	d002      	beq.n	8006394 <USB_GetDevSpeed+0x32>
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2b06      	cmp	r3, #6
 8006392:	d102      	bne.n	800639a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006394:	2302      	movs	r3, #2
 8006396:	75fb      	strb	r3, [r7, #23]
 8006398:	e001      	b.n	800639e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800639a:	230f      	movs	r3, #15
 800639c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800639e:	7dfb      	ldrb	r3, [r7, #23]
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	371c      	adds	r7, #28
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr

080063ac <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b085      	sub	sp, #20
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	785b      	ldrb	r3, [r3, #1]
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d13a      	bne.n	800643e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063ce:	69da      	ldr	r2, [r3, #28]
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	f003 030f 	and.w	r3, r3, #15
 80063d8:	2101      	movs	r1, #1
 80063da:	fa01 f303 	lsl.w	r3, r1, r3
 80063de:	b29b      	uxth	r3, r3
 80063e0:	68f9      	ldr	r1, [r7, #12]
 80063e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063e6:	4313      	orrs	r3, r2
 80063e8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	015a      	lsls	r2, r3, #5
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	4413      	add	r3, r2
 80063f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d155      	bne.n	80064ac <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	015a      	lsls	r2, r3, #5
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	4413      	add	r3, r2
 8006408:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	791b      	ldrb	r3, [r3, #4]
 800641a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800641c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	059b      	lsls	r3, r3, #22
 8006422:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006424:	4313      	orrs	r3, r2
 8006426:	68ba      	ldr	r2, [r7, #8]
 8006428:	0151      	lsls	r1, r2, #5
 800642a:	68fa      	ldr	r2, [r7, #12]
 800642c:	440a      	add	r2, r1
 800642e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006432:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006436:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800643a:	6013      	str	r3, [r2, #0]
 800643c:	e036      	b.n	80064ac <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006444:	69da      	ldr	r2, [r3, #28]
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	f003 030f 	and.w	r3, r3, #15
 800644e:	2101      	movs	r1, #1
 8006450:	fa01 f303 	lsl.w	r3, r1, r3
 8006454:	041b      	lsls	r3, r3, #16
 8006456:	68f9      	ldr	r1, [r7, #12]
 8006458:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800645c:	4313      	orrs	r3, r2
 800645e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	015a      	lsls	r2, r3, #5
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	4413      	add	r3, r2
 8006468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006472:	2b00      	cmp	r3, #0
 8006474:	d11a      	bne.n	80064ac <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	015a      	lsls	r2, r3, #5
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	4413      	add	r3, r2
 800647e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006482:	681a      	ldr	r2, [r3, #0]
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	791b      	ldrb	r3, [r3, #4]
 8006490:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006492:	430b      	orrs	r3, r1
 8006494:	4313      	orrs	r3, r2
 8006496:	68ba      	ldr	r2, [r7, #8]
 8006498:	0151      	lsls	r1, r2, #5
 800649a:	68fa      	ldr	r2, [r7, #12]
 800649c:	440a      	add	r2, r1
 800649e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064aa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80064ac:	2300      	movs	r3, #0
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3714      	adds	r7, #20
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr
	...

080064bc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80064bc:	b480      	push	{r7}
 80064be:	b085      	sub	sp, #20
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	781b      	ldrb	r3, [r3, #0]
 80064ce:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	785b      	ldrb	r3, [r3, #1]
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d161      	bne.n	800659c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	015a      	lsls	r2, r3, #5
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	4413      	add	r3, r2
 80064e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064ee:	d11f      	bne.n	8006530 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	015a      	lsls	r2, r3, #5
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	4413      	add	r3, r2
 80064f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	68ba      	ldr	r2, [r7, #8]
 8006500:	0151      	lsls	r1, r2, #5
 8006502:	68fa      	ldr	r2, [r7, #12]
 8006504:	440a      	add	r2, r1
 8006506:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800650a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800650e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	015a      	lsls	r2, r3, #5
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	4413      	add	r3, r2
 8006518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	68ba      	ldr	r2, [r7, #8]
 8006520:	0151      	lsls	r1, r2, #5
 8006522:	68fa      	ldr	r2, [r7, #12]
 8006524:	440a      	add	r2, r1
 8006526:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800652a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800652e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006536:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	781b      	ldrb	r3, [r3, #0]
 800653c:	f003 030f 	and.w	r3, r3, #15
 8006540:	2101      	movs	r1, #1
 8006542:	fa01 f303 	lsl.w	r3, r1, r3
 8006546:	b29b      	uxth	r3, r3
 8006548:	43db      	mvns	r3, r3
 800654a:	68f9      	ldr	r1, [r7, #12]
 800654c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006550:	4013      	ands	r3, r2
 8006552:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800655a:	69da      	ldr	r2, [r3, #28]
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	f003 030f 	and.w	r3, r3, #15
 8006564:	2101      	movs	r1, #1
 8006566:	fa01 f303 	lsl.w	r3, r1, r3
 800656a:	b29b      	uxth	r3, r3
 800656c:	43db      	mvns	r3, r3
 800656e:	68f9      	ldr	r1, [r7, #12]
 8006570:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006574:	4013      	ands	r3, r2
 8006576:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	015a      	lsls	r2, r3, #5
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	4413      	add	r3, r2
 8006580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	0159      	lsls	r1, r3, #5
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	440b      	add	r3, r1
 800658e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006592:	4619      	mov	r1, r3
 8006594:	4b35      	ldr	r3, [pc, #212]	; (800666c <USB_DeactivateEndpoint+0x1b0>)
 8006596:	4013      	ands	r3, r2
 8006598:	600b      	str	r3, [r1, #0]
 800659a:	e060      	b.n	800665e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	015a      	lsls	r2, r3, #5
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	4413      	add	r3, r2
 80065a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065b2:	d11f      	bne.n	80065f4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	015a      	lsls	r2, r3, #5
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	4413      	add	r3, r2
 80065bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	68ba      	ldr	r2, [r7, #8]
 80065c4:	0151      	lsls	r1, r2, #5
 80065c6:	68fa      	ldr	r2, [r7, #12]
 80065c8:	440a      	add	r2, r1
 80065ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80065d2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	015a      	lsls	r2, r3, #5
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	4413      	add	r3, r2
 80065dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	68ba      	ldr	r2, [r7, #8]
 80065e4:	0151      	lsls	r1, r2, #5
 80065e6:	68fa      	ldr	r2, [r7, #12]
 80065e8:	440a      	add	r2, r1
 80065ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80065f2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	f003 030f 	and.w	r3, r3, #15
 8006604:	2101      	movs	r1, #1
 8006606:	fa01 f303 	lsl.w	r3, r1, r3
 800660a:	041b      	lsls	r3, r3, #16
 800660c:	43db      	mvns	r3, r3
 800660e:	68f9      	ldr	r1, [r7, #12]
 8006610:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006614:	4013      	ands	r3, r2
 8006616:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800661e:	69da      	ldr	r2, [r3, #28]
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	f003 030f 	and.w	r3, r3, #15
 8006628:	2101      	movs	r1, #1
 800662a:	fa01 f303 	lsl.w	r3, r1, r3
 800662e:	041b      	lsls	r3, r3, #16
 8006630:	43db      	mvns	r3, r3
 8006632:	68f9      	ldr	r1, [r7, #12]
 8006634:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006638:	4013      	ands	r3, r2
 800663a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	015a      	lsls	r2, r3, #5
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	4413      	add	r3, r2
 8006644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	0159      	lsls	r1, r3, #5
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	440b      	add	r3, r1
 8006652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006656:	4619      	mov	r1, r3
 8006658:	4b05      	ldr	r3, [pc, #20]	; (8006670 <USB_DeactivateEndpoint+0x1b4>)
 800665a:	4013      	ands	r3, r2
 800665c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800665e:	2300      	movs	r3, #0
}
 8006660:	4618      	mov	r0, r3
 8006662:	3714      	adds	r7, #20
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr
 800666c:	ec337800 	.word	0xec337800
 8006670:	eff37800 	.word	0xeff37800

08006674 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b08a      	sub	sp, #40	; 0x28
 8006678:	af02      	add	r7, sp, #8
 800667a:	60f8      	str	r0, [r7, #12]
 800667c:	60b9      	str	r1, [r7, #8]
 800667e:	4613      	mov	r3, r2
 8006680:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	781b      	ldrb	r3, [r3, #0]
 800668a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	785b      	ldrb	r3, [r3, #1]
 8006690:	2b01      	cmp	r3, #1
 8006692:	f040 817a 	bne.w	800698a <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	691b      	ldr	r3, [r3, #16]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d132      	bne.n	8006704 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800669e:	69bb      	ldr	r3, [r7, #24]
 80066a0:	015a      	lsls	r2, r3, #5
 80066a2:	69fb      	ldr	r3, [r7, #28]
 80066a4:	4413      	add	r3, r2
 80066a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066aa:	691b      	ldr	r3, [r3, #16]
 80066ac:	69ba      	ldr	r2, [r7, #24]
 80066ae:	0151      	lsls	r1, r2, #5
 80066b0:	69fa      	ldr	r2, [r7, #28]
 80066b2:	440a      	add	r2, r1
 80066b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80066bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80066c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80066c2:	69bb      	ldr	r3, [r7, #24]
 80066c4:	015a      	lsls	r2, r3, #5
 80066c6:	69fb      	ldr	r3, [r7, #28]
 80066c8:	4413      	add	r3, r2
 80066ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066ce:	691b      	ldr	r3, [r3, #16]
 80066d0:	69ba      	ldr	r2, [r7, #24]
 80066d2:	0151      	lsls	r1, r2, #5
 80066d4:	69fa      	ldr	r2, [r7, #28]
 80066d6:	440a      	add	r2, r1
 80066d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80066e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80066e2:	69bb      	ldr	r3, [r7, #24]
 80066e4:	015a      	lsls	r2, r3, #5
 80066e6:	69fb      	ldr	r3, [r7, #28]
 80066e8:	4413      	add	r3, r2
 80066ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066ee:	691b      	ldr	r3, [r3, #16]
 80066f0:	69ba      	ldr	r2, [r7, #24]
 80066f2:	0151      	lsls	r1, r2, #5
 80066f4:	69fa      	ldr	r2, [r7, #28]
 80066f6:	440a      	add	r2, r1
 80066f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066fc:	0cdb      	lsrs	r3, r3, #19
 80066fe:	04db      	lsls	r3, r3, #19
 8006700:	6113      	str	r3, [r2, #16]
 8006702:	e092      	b.n	800682a <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006704:	69bb      	ldr	r3, [r7, #24]
 8006706:	015a      	lsls	r2, r3, #5
 8006708:	69fb      	ldr	r3, [r7, #28]
 800670a:	4413      	add	r3, r2
 800670c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006710:	691b      	ldr	r3, [r3, #16]
 8006712:	69ba      	ldr	r2, [r7, #24]
 8006714:	0151      	lsls	r1, r2, #5
 8006716:	69fa      	ldr	r2, [r7, #28]
 8006718:	440a      	add	r2, r1
 800671a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800671e:	0cdb      	lsrs	r3, r3, #19
 8006720:	04db      	lsls	r3, r3, #19
 8006722:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006724:	69bb      	ldr	r3, [r7, #24]
 8006726:	015a      	lsls	r2, r3, #5
 8006728:	69fb      	ldr	r3, [r7, #28]
 800672a:	4413      	add	r3, r2
 800672c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006730:	691b      	ldr	r3, [r3, #16]
 8006732:	69ba      	ldr	r2, [r7, #24]
 8006734:	0151      	lsls	r1, r2, #5
 8006736:	69fa      	ldr	r2, [r7, #28]
 8006738:	440a      	add	r2, r1
 800673a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800673e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006742:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006746:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006748:	69bb      	ldr	r3, [r7, #24]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d11a      	bne.n	8006784 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	691a      	ldr	r2, [r3, #16]
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	429a      	cmp	r2, r3
 8006758:	d903      	bls.n	8006762 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	689a      	ldr	r2, [r3, #8]
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006762:	69bb      	ldr	r3, [r7, #24]
 8006764:	015a      	lsls	r2, r3, #5
 8006766:	69fb      	ldr	r3, [r7, #28]
 8006768:	4413      	add	r3, r2
 800676a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800676e:	691b      	ldr	r3, [r3, #16]
 8006770:	69ba      	ldr	r2, [r7, #24]
 8006772:	0151      	lsls	r1, r2, #5
 8006774:	69fa      	ldr	r2, [r7, #28]
 8006776:	440a      	add	r2, r1
 8006778:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800677c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006780:	6113      	str	r3, [r2, #16]
 8006782:	e01b      	b.n	80067bc <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006784:	69bb      	ldr	r3, [r7, #24]
 8006786:	015a      	lsls	r2, r3, #5
 8006788:	69fb      	ldr	r3, [r7, #28]
 800678a:	4413      	add	r3, r2
 800678c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006790:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	6919      	ldr	r1, [r3, #16]
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	440b      	add	r3, r1
 800679c:	1e59      	subs	r1, r3, #1
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80067a6:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80067a8:	4ba2      	ldr	r3, [pc, #648]	; (8006a34 <USB_EPStartXfer+0x3c0>)
 80067aa:	400b      	ands	r3, r1
 80067ac:	69b9      	ldr	r1, [r7, #24]
 80067ae:	0148      	lsls	r0, r1, #5
 80067b0:	69f9      	ldr	r1, [r7, #28]
 80067b2:	4401      	add	r1, r0
 80067b4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80067b8:	4313      	orrs	r3, r2
 80067ba:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80067bc:	69bb      	ldr	r3, [r7, #24]
 80067be:	015a      	lsls	r2, r3, #5
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	4413      	add	r3, r2
 80067c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067c8:	691a      	ldr	r2, [r3, #16]
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	691b      	ldr	r3, [r3, #16]
 80067ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067d2:	69b9      	ldr	r1, [r7, #24]
 80067d4:	0148      	lsls	r0, r1, #5
 80067d6:	69f9      	ldr	r1, [r7, #28]
 80067d8:	4401      	add	r1, r0
 80067da:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80067de:	4313      	orrs	r3, r2
 80067e0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	791b      	ldrb	r3, [r3, #4]
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d11f      	bne.n	800682a <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80067ea:	69bb      	ldr	r3, [r7, #24]
 80067ec:	015a      	lsls	r2, r3, #5
 80067ee:	69fb      	ldr	r3, [r7, #28]
 80067f0:	4413      	add	r3, r2
 80067f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067f6:	691b      	ldr	r3, [r3, #16]
 80067f8:	69ba      	ldr	r2, [r7, #24]
 80067fa:	0151      	lsls	r1, r2, #5
 80067fc:	69fa      	ldr	r2, [r7, #28]
 80067fe:	440a      	add	r2, r1
 8006800:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006804:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006808:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800680a:	69bb      	ldr	r3, [r7, #24]
 800680c:	015a      	lsls	r2, r3, #5
 800680e:	69fb      	ldr	r3, [r7, #28]
 8006810:	4413      	add	r3, r2
 8006812:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006816:	691b      	ldr	r3, [r3, #16]
 8006818:	69ba      	ldr	r2, [r7, #24]
 800681a:	0151      	lsls	r1, r2, #5
 800681c:	69fa      	ldr	r2, [r7, #28]
 800681e:	440a      	add	r2, r1
 8006820:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006824:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006828:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800682a:	79fb      	ldrb	r3, [r7, #7]
 800682c:	2b01      	cmp	r3, #1
 800682e:	d14b      	bne.n	80068c8 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	69db      	ldr	r3, [r3, #28]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d009      	beq.n	800684c <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006838:	69bb      	ldr	r3, [r7, #24]
 800683a:	015a      	lsls	r2, r3, #5
 800683c:	69fb      	ldr	r3, [r7, #28]
 800683e:	4413      	add	r3, r2
 8006840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006844:	461a      	mov	r2, r3
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	69db      	ldr	r3, [r3, #28]
 800684a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	791b      	ldrb	r3, [r3, #4]
 8006850:	2b01      	cmp	r3, #1
 8006852:	d128      	bne.n	80068a6 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006854:	69fb      	ldr	r3, [r7, #28]
 8006856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006860:	2b00      	cmp	r3, #0
 8006862:	d110      	bne.n	8006886 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006864:	69bb      	ldr	r3, [r7, #24]
 8006866:	015a      	lsls	r2, r3, #5
 8006868:	69fb      	ldr	r3, [r7, #28]
 800686a:	4413      	add	r3, r2
 800686c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	69ba      	ldr	r2, [r7, #24]
 8006874:	0151      	lsls	r1, r2, #5
 8006876:	69fa      	ldr	r2, [r7, #28]
 8006878:	440a      	add	r2, r1
 800687a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800687e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006882:	6013      	str	r3, [r2, #0]
 8006884:	e00f      	b.n	80068a6 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006886:	69bb      	ldr	r3, [r7, #24]
 8006888:	015a      	lsls	r2, r3, #5
 800688a:	69fb      	ldr	r3, [r7, #28]
 800688c:	4413      	add	r3, r2
 800688e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	69ba      	ldr	r2, [r7, #24]
 8006896:	0151      	lsls	r1, r2, #5
 8006898:	69fa      	ldr	r2, [r7, #28]
 800689a:	440a      	add	r2, r1
 800689c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068a4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80068a6:	69bb      	ldr	r3, [r7, #24]
 80068a8:	015a      	lsls	r2, r3, #5
 80068aa:	69fb      	ldr	r3, [r7, #28]
 80068ac:	4413      	add	r3, r2
 80068ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	69ba      	ldr	r2, [r7, #24]
 80068b6:	0151      	lsls	r1, r2, #5
 80068b8:	69fa      	ldr	r2, [r7, #28]
 80068ba:	440a      	add	r2, r1
 80068bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068c0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80068c4:	6013      	str	r3, [r2, #0]
 80068c6:	e165      	b.n	8006b94 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80068c8:	69bb      	ldr	r3, [r7, #24]
 80068ca:	015a      	lsls	r2, r3, #5
 80068cc:	69fb      	ldr	r3, [r7, #28]
 80068ce:	4413      	add	r3, r2
 80068d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	69ba      	ldr	r2, [r7, #24]
 80068d8:	0151      	lsls	r1, r2, #5
 80068da:	69fa      	ldr	r2, [r7, #28]
 80068dc:	440a      	add	r2, r1
 80068de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068e2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80068e6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	791b      	ldrb	r3, [r3, #4]
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d015      	beq.n	800691c <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	691b      	ldr	r3, [r3, #16]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	f000 814d 	beq.w	8006b94 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80068fa:	69fb      	ldr	r3, [r7, #28]
 80068fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006900:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	781b      	ldrb	r3, [r3, #0]
 8006906:	f003 030f 	and.w	r3, r3, #15
 800690a:	2101      	movs	r1, #1
 800690c:	fa01 f303 	lsl.w	r3, r1, r3
 8006910:	69f9      	ldr	r1, [r7, #28]
 8006912:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006916:	4313      	orrs	r3, r2
 8006918:	634b      	str	r3, [r1, #52]	; 0x34
 800691a:	e13b      	b.n	8006b94 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800691c:	69fb      	ldr	r3, [r7, #28]
 800691e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006928:	2b00      	cmp	r3, #0
 800692a:	d110      	bne.n	800694e <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800692c:	69bb      	ldr	r3, [r7, #24]
 800692e:	015a      	lsls	r2, r3, #5
 8006930:	69fb      	ldr	r3, [r7, #28]
 8006932:	4413      	add	r3, r2
 8006934:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	69ba      	ldr	r2, [r7, #24]
 800693c:	0151      	lsls	r1, r2, #5
 800693e:	69fa      	ldr	r2, [r7, #28]
 8006940:	440a      	add	r2, r1
 8006942:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006946:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800694a:	6013      	str	r3, [r2, #0]
 800694c:	e00f      	b.n	800696e <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800694e:	69bb      	ldr	r3, [r7, #24]
 8006950:	015a      	lsls	r2, r3, #5
 8006952:	69fb      	ldr	r3, [r7, #28]
 8006954:	4413      	add	r3, r2
 8006956:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	69ba      	ldr	r2, [r7, #24]
 800695e:	0151      	lsls	r1, r2, #5
 8006960:	69fa      	ldr	r2, [r7, #28]
 8006962:	440a      	add	r2, r1
 8006964:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800696c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	68d9      	ldr	r1, [r3, #12]
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	781a      	ldrb	r2, [r3, #0]
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	691b      	ldr	r3, [r3, #16]
 800697a:	b298      	uxth	r0, r3
 800697c:	79fb      	ldrb	r3, [r7, #7]
 800697e:	9300      	str	r3, [sp, #0]
 8006980:	4603      	mov	r3, r0
 8006982:	68f8      	ldr	r0, [r7, #12]
 8006984:	f000 f9b8 	bl	8006cf8 <USB_WritePacket>
 8006988:	e104      	b.n	8006b94 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800698a:	69bb      	ldr	r3, [r7, #24]
 800698c:	015a      	lsls	r2, r3, #5
 800698e:	69fb      	ldr	r3, [r7, #28]
 8006990:	4413      	add	r3, r2
 8006992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006996:	691b      	ldr	r3, [r3, #16]
 8006998:	69ba      	ldr	r2, [r7, #24]
 800699a:	0151      	lsls	r1, r2, #5
 800699c:	69fa      	ldr	r2, [r7, #28]
 800699e:	440a      	add	r2, r1
 80069a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069a4:	0cdb      	lsrs	r3, r3, #19
 80069a6:	04db      	lsls	r3, r3, #19
 80069a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80069aa:	69bb      	ldr	r3, [r7, #24]
 80069ac:	015a      	lsls	r2, r3, #5
 80069ae:	69fb      	ldr	r3, [r7, #28]
 80069b0:	4413      	add	r3, r2
 80069b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069b6:	691b      	ldr	r3, [r3, #16]
 80069b8:	69ba      	ldr	r2, [r7, #24]
 80069ba:	0151      	lsls	r1, r2, #5
 80069bc:	69fa      	ldr	r2, [r7, #28]
 80069be:	440a      	add	r2, r1
 80069c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069c4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80069c8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80069cc:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80069ce:	69bb      	ldr	r3, [r7, #24]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d131      	bne.n	8006a38 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	691b      	ldr	r3, [r3, #16]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d003      	beq.n	80069e4 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	689a      	ldr	r2, [r3, #8]
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	689a      	ldr	r2, [r3, #8]
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80069ec:	69bb      	ldr	r3, [r7, #24]
 80069ee:	015a      	lsls	r2, r3, #5
 80069f0:	69fb      	ldr	r3, [r7, #28]
 80069f2:	4413      	add	r3, r2
 80069f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069f8:	691a      	ldr	r2, [r3, #16]
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	6a1b      	ldr	r3, [r3, #32]
 80069fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a02:	69b9      	ldr	r1, [r7, #24]
 8006a04:	0148      	lsls	r0, r1, #5
 8006a06:	69f9      	ldr	r1, [r7, #28]
 8006a08:	4401      	add	r1, r0
 8006a0a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006a12:	69bb      	ldr	r3, [r7, #24]
 8006a14:	015a      	lsls	r2, r3, #5
 8006a16:	69fb      	ldr	r3, [r7, #28]
 8006a18:	4413      	add	r3, r2
 8006a1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a1e:	691b      	ldr	r3, [r3, #16]
 8006a20:	69ba      	ldr	r2, [r7, #24]
 8006a22:	0151      	lsls	r1, r2, #5
 8006a24:	69fa      	ldr	r2, [r7, #28]
 8006a26:	440a      	add	r2, r1
 8006a28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a2c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a30:	6113      	str	r3, [r2, #16]
 8006a32:	e061      	b.n	8006af8 <USB_EPStartXfer+0x484>
 8006a34:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	691b      	ldr	r3, [r3, #16]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d123      	bne.n	8006a88 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006a40:	69bb      	ldr	r3, [r7, #24]
 8006a42:	015a      	lsls	r2, r3, #5
 8006a44:	69fb      	ldr	r3, [r7, #28]
 8006a46:	4413      	add	r3, r2
 8006a48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a4c:	691a      	ldr	r2, [r3, #16]
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a56:	69b9      	ldr	r1, [r7, #24]
 8006a58:	0148      	lsls	r0, r1, #5
 8006a5a:	69f9      	ldr	r1, [r7, #28]
 8006a5c:	4401      	add	r1, r0
 8006a5e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006a62:	4313      	orrs	r3, r2
 8006a64:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006a66:	69bb      	ldr	r3, [r7, #24]
 8006a68:	015a      	lsls	r2, r3, #5
 8006a6a:	69fb      	ldr	r3, [r7, #28]
 8006a6c:	4413      	add	r3, r2
 8006a6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a72:	691b      	ldr	r3, [r3, #16]
 8006a74:	69ba      	ldr	r2, [r7, #24]
 8006a76:	0151      	lsls	r1, r2, #5
 8006a78:	69fa      	ldr	r2, [r7, #28]
 8006a7a:	440a      	add	r2, r1
 8006a7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a80:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a84:	6113      	str	r3, [r2, #16]
 8006a86:	e037      	b.n	8006af8 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	691a      	ldr	r2, [r3, #16]
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	4413      	add	r3, r2
 8006a92:	1e5a      	subs	r2, r3, #1
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a9c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	8afa      	ldrh	r2, [r7, #22]
 8006aa4:	fb03 f202 	mul.w	r2, r3, r2
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006aac:	69bb      	ldr	r3, [r7, #24]
 8006aae:	015a      	lsls	r2, r3, #5
 8006ab0:	69fb      	ldr	r3, [r7, #28]
 8006ab2:	4413      	add	r3, r2
 8006ab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ab8:	691a      	ldr	r2, [r3, #16]
 8006aba:	8afb      	ldrh	r3, [r7, #22]
 8006abc:	04d9      	lsls	r1, r3, #19
 8006abe:	4b38      	ldr	r3, [pc, #224]	; (8006ba0 <USB_EPStartXfer+0x52c>)
 8006ac0:	400b      	ands	r3, r1
 8006ac2:	69b9      	ldr	r1, [r7, #24]
 8006ac4:	0148      	lsls	r0, r1, #5
 8006ac6:	69f9      	ldr	r1, [r7, #28]
 8006ac8:	4401      	add	r1, r0
 8006aca:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006ad2:	69bb      	ldr	r3, [r7, #24]
 8006ad4:	015a      	lsls	r2, r3, #5
 8006ad6:	69fb      	ldr	r3, [r7, #28]
 8006ad8:	4413      	add	r3, r2
 8006ada:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ade:	691a      	ldr	r2, [r3, #16]
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	6a1b      	ldr	r3, [r3, #32]
 8006ae4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ae8:	69b9      	ldr	r1, [r7, #24]
 8006aea:	0148      	lsls	r0, r1, #5
 8006aec:	69f9      	ldr	r1, [r7, #28]
 8006aee:	4401      	add	r1, r0
 8006af0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006af4:	4313      	orrs	r3, r2
 8006af6:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006af8:	79fb      	ldrb	r3, [r7, #7]
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	d10d      	bne.n	8006b1a <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	68db      	ldr	r3, [r3, #12]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d009      	beq.n	8006b1a <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	68d9      	ldr	r1, [r3, #12]
 8006b0a:	69bb      	ldr	r3, [r7, #24]
 8006b0c:	015a      	lsls	r2, r3, #5
 8006b0e:	69fb      	ldr	r3, [r7, #28]
 8006b10:	4413      	add	r3, r2
 8006b12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b16:	460a      	mov	r2, r1
 8006b18:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	791b      	ldrb	r3, [r3, #4]
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	d128      	bne.n	8006b74 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006b22:	69fb      	ldr	r3, [r7, #28]
 8006b24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b28:	689b      	ldr	r3, [r3, #8]
 8006b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d110      	bne.n	8006b54 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006b32:	69bb      	ldr	r3, [r7, #24]
 8006b34:	015a      	lsls	r2, r3, #5
 8006b36:	69fb      	ldr	r3, [r7, #28]
 8006b38:	4413      	add	r3, r2
 8006b3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	69ba      	ldr	r2, [r7, #24]
 8006b42:	0151      	lsls	r1, r2, #5
 8006b44:	69fa      	ldr	r2, [r7, #28]
 8006b46:	440a      	add	r2, r1
 8006b48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b4c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006b50:	6013      	str	r3, [r2, #0]
 8006b52:	e00f      	b.n	8006b74 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006b54:	69bb      	ldr	r3, [r7, #24]
 8006b56:	015a      	lsls	r2, r3, #5
 8006b58:	69fb      	ldr	r3, [r7, #28]
 8006b5a:	4413      	add	r3, r2
 8006b5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	69ba      	ldr	r2, [r7, #24]
 8006b64:	0151      	lsls	r1, r2, #5
 8006b66:	69fa      	ldr	r2, [r7, #28]
 8006b68:	440a      	add	r2, r1
 8006b6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b72:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006b74:	69bb      	ldr	r3, [r7, #24]
 8006b76:	015a      	lsls	r2, r3, #5
 8006b78:	69fb      	ldr	r3, [r7, #28]
 8006b7a:	4413      	add	r3, r2
 8006b7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	69ba      	ldr	r2, [r7, #24]
 8006b84:	0151      	lsls	r1, r2, #5
 8006b86:	69fa      	ldr	r2, [r7, #28]
 8006b88:	440a      	add	r2, r1
 8006b8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b8e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006b92:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006b94:	2300      	movs	r3, #0
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3720      	adds	r7, #32
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}
 8006b9e:	bf00      	nop
 8006ba0:	1ff80000 	.word	0x1ff80000

08006ba4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b087      	sub	sp, #28
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	785b      	ldrb	r3, [r3, #1]
 8006bbe:	2b01      	cmp	r3, #1
 8006bc0:	d14a      	bne.n	8006c58 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	781b      	ldrb	r3, [r3, #0]
 8006bc6:	015a      	lsls	r2, r3, #5
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	4413      	add	r3, r2
 8006bcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006bd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006bda:	f040 8086 	bne.w	8006cea <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	015a      	lsls	r2, r3, #5
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	4413      	add	r3, r2
 8006be8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	683a      	ldr	r2, [r7, #0]
 8006bf0:	7812      	ldrb	r2, [r2, #0]
 8006bf2:	0151      	lsls	r1, r2, #5
 8006bf4:	693a      	ldr	r2, [r7, #16]
 8006bf6:	440a      	add	r2, r1
 8006bf8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bfc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006c00:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	015a      	lsls	r2, r3, #5
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	4413      	add	r3, r2
 8006c0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	683a      	ldr	r2, [r7, #0]
 8006c14:	7812      	ldrb	r2, [r2, #0]
 8006c16:	0151      	lsls	r1, r2, #5
 8006c18:	693a      	ldr	r2, [r7, #16]
 8006c1a:	440a      	add	r2, r1
 8006c1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c20:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c24:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	3301      	adds	r3, #1
 8006c2a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f242 7210 	movw	r2, #10000	; 0x2710
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d902      	bls.n	8006c3c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006c36:	2301      	movs	r3, #1
 8006c38:	75fb      	strb	r3, [r7, #23]
          break;
 8006c3a:	e056      	b.n	8006cea <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	781b      	ldrb	r3, [r3, #0]
 8006c40:	015a      	lsls	r2, r3, #5
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	4413      	add	r3, r2
 8006c46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c54:	d0e7      	beq.n	8006c26 <USB_EPStopXfer+0x82>
 8006c56:	e048      	b.n	8006cea <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	015a      	lsls	r2, r3, #5
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	4413      	add	r3, r2
 8006c62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c70:	d13b      	bne.n	8006cea <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	781b      	ldrb	r3, [r3, #0]
 8006c76:	015a      	lsls	r2, r3, #5
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	4413      	add	r3, r2
 8006c7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	683a      	ldr	r2, [r7, #0]
 8006c84:	7812      	ldrb	r2, [r2, #0]
 8006c86:	0151      	lsls	r1, r2, #5
 8006c88:	693a      	ldr	r2, [r7, #16]
 8006c8a:	440a      	add	r2, r1
 8006c8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c90:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006c94:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	781b      	ldrb	r3, [r3, #0]
 8006c9a:	015a      	lsls	r2, r3, #5
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	4413      	add	r3, r2
 8006ca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	683a      	ldr	r2, [r7, #0]
 8006ca8:	7812      	ldrb	r2, [r2, #0]
 8006caa:	0151      	lsls	r1, r2, #5
 8006cac:	693a      	ldr	r2, [r7, #16]
 8006cae:	440a      	add	r2, r1
 8006cb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cb4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006cb8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	3301      	adds	r3, #1
 8006cbe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f242 7210 	movw	r2, #10000	; 0x2710
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d902      	bls.n	8006cd0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	75fb      	strb	r3, [r7, #23]
          break;
 8006cce:	e00c      	b.n	8006cea <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	015a      	lsls	r2, r3, #5
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	4413      	add	r3, r2
 8006cda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ce4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ce8:	d0e7      	beq.n	8006cba <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006cea:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	371c      	adds	r7, #28
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr

08006cf8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b089      	sub	sp, #36	; 0x24
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	60f8      	str	r0, [r7, #12]
 8006d00:	60b9      	str	r1, [r7, #8]
 8006d02:	4611      	mov	r1, r2
 8006d04:	461a      	mov	r2, r3
 8006d06:	460b      	mov	r3, r1
 8006d08:	71fb      	strb	r3, [r7, #7]
 8006d0a:	4613      	mov	r3, r2
 8006d0c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006d16:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d123      	bne.n	8006d66 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006d1e:	88bb      	ldrh	r3, [r7, #4]
 8006d20:	3303      	adds	r3, #3
 8006d22:	089b      	lsrs	r3, r3, #2
 8006d24:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006d26:	2300      	movs	r3, #0
 8006d28:	61bb      	str	r3, [r7, #24]
 8006d2a:	e018      	b.n	8006d5e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006d2c:	79fb      	ldrb	r3, [r7, #7]
 8006d2e:	031a      	lsls	r2, r3, #12
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	4413      	add	r3, r2
 8006d34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d38:	461a      	mov	r2, r3
 8006d3a:	69fb      	ldr	r3, [r7, #28]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006d40:	69fb      	ldr	r3, [r7, #28]
 8006d42:	3301      	adds	r3, #1
 8006d44:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006d46:	69fb      	ldr	r3, [r7, #28]
 8006d48:	3301      	adds	r3, #1
 8006d4a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006d4c:	69fb      	ldr	r3, [r7, #28]
 8006d4e:	3301      	adds	r3, #1
 8006d50:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006d52:	69fb      	ldr	r3, [r7, #28]
 8006d54:	3301      	adds	r3, #1
 8006d56:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006d58:	69bb      	ldr	r3, [r7, #24]
 8006d5a:	3301      	adds	r3, #1
 8006d5c:	61bb      	str	r3, [r7, #24]
 8006d5e:	69ba      	ldr	r2, [r7, #24]
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d3e2      	bcc.n	8006d2c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006d66:	2300      	movs	r3, #0
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3724      	adds	r7, #36	; 0x24
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr

08006d74 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b08b      	sub	sp, #44	; 0x2c
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	60f8      	str	r0, [r7, #12]
 8006d7c:	60b9      	str	r1, [r7, #8]
 8006d7e:	4613      	mov	r3, r2
 8006d80:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006d8a:	88fb      	ldrh	r3, [r7, #6]
 8006d8c:	089b      	lsrs	r3, r3, #2
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006d92:	88fb      	ldrh	r3, [r7, #6]
 8006d94:	f003 0303 	and.w	r3, r3, #3
 8006d98:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	623b      	str	r3, [r7, #32]
 8006d9e:	e014      	b.n	8006dca <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006da0:	69bb      	ldr	r3, [r7, #24]
 8006da2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006da6:	681a      	ldr	r2, [r3, #0]
 8006da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006daa:	601a      	str	r2, [r3, #0]
    pDest++;
 8006dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dae:	3301      	adds	r3, #1
 8006db0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db4:	3301      	adds	r3, #1
 8006db6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dba:	3301      	adds	r3, #1
 8006dbc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc0:	3301      	adds	r3, #1
 8006dc2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006dc4:	6a3b      	ldr	r3, [r7, #32]
 8006dc6:	3301      	adds	r3, #1
 8006dc8:	623b      	str	r3, [r7, #32]
 8006dca:	6a3a      	ldr	r2, [r7, #32]
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d3e6      	bcc.n	8006da0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006dd2:	8bfb      	ldrh	r3, [r7, #30]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d01e      	beq.n	8006e16 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006ddc:	69bb      	ldr	r3, [r7, #24]
 8006dde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006de2:	461a      	mov	r2, r3
 8006de4:	f107 0310 	add.w	r3, r7, #16
 8006de8:	6812      	ldr	r2, [r2, #0]
 8006dea:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006dec:	693a      	ldr	r2, [r7, #16]
 8006dee:	6a3b      	ldr	r3, [r7, #32]
 8006df0:	b2db      	uxtb	r3, r3
 8006df2:	00db      	lsls	r3, r3, #3
 8006df4:	fa22 f303 	lsr.w	r3, r2, r3
 8006df8:	b2da      	uxtb	r2, r3
 8006dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dfc:	701a      	strb	r2, [r3, #0]
      i++;
 8006dfe:	6a3b      	ldr	r3, [r7, #32]
 8006e00:	3301      	adds	r3, #1
 8006e02:	623b      	str	r3, [r7, #32]
      pDest++;
 8006e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e06:	3301      	adds	r3, #1
 8006e08:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006e0a:	8bfb      	ldrh	r3, [r7, #30]
 8006e0c:	3b01      	subs	r3, #1
 8006e0e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006e10:	8bfb      	ldrh	r3, [r7, #30]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d1ea      	bne.n	8006dec <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	372c      	adds	r7, #44	; 0x2c
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr

08006e24 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b085      	sub	sp, #20
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
 8006e2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	785b      	ldrb	r3, [r3, #1]
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	d12c      	bne.n	8006e9a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	015a      	lsls	r2, r3, #5
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	4413      	add	r3, r2
 8006e48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	db12      	blt.n	8006e78 <USB_EPSetStall+0x54>
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d00f      	beq.n	8006e78 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	015a      	lsls	r2, r3, #5
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	4413      	add	r3, r2
 8006e60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	68ba      	ldr	r2, [r7, #8]
 8006e68:	0151      	lsls	r1, r2, #5
 8006e6a:	68fa      	ldr	r2, [r7, #12]
 8006e6c:	440a      	add	r2, r1
 8006e6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e72:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006e76:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	015a      	lsls	r2, r3, #5
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	4413      	add	r3, r2
 8006e80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	68ba      	ldr	r2, [r7, #8]
 8006e88:	0151      	lsls	r1, r2, #5
 8006e8a:	68fa      	ldr	r2, [r7, #12]
 8006e8c:	440a      	add	r2, r1
 8006e8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e92:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006e96:	6013      	str	r3, [r2, #0]
 8006e98:	e02b      	b.n	8006ef2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	015a      	lsls	r2, r3, #5
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	4413      	add	r3, r2
 8006ea2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	db12      	blt.n	8006ed2 <USB_EPSetStall+0xae>
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d00f      	beq.n	8006ed2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	015a      	lsls	r2, r3, #5
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	4413      	add	r3, r2
 8006eba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	68ba      	ldr	r2, [r7, #8]
 8006ec2:	0151      	lsls	r1, r2, #5
 8006ec4:	68fa      	ldr	r2, [r7, #12]
 8006ec6:	440a      	add	r2, r1
 8006ec8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ecc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006ed0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	015a      	lsls	r2, r3, #5
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	4413      	add	r3, r2
 8006eda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	68ba      	ldr	r2, [r7, #8]
 8006ee2:	0151      	lsls	r1, r2, #5
 8006ee4:	68fa      	ldr	r2, [r7, #12]
 8006ee6:	440a      	add	r2, r1
 8006ee8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006eec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006ef0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006ef2:	2300      	movs	r3, #0
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3714      	adds	r7, #20
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr

08006f00 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b085      	sub	sp, #20
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	785b      	ldrb	r3, [r3, #1]
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d128      	bne.n	8006f6e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	015a      	lsls	r2, r3, #5
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	4413      	add	r3, r2
 8006f24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	68ba      	ldr	r2, [r7, #8]
 8006f2c:	0151      	lsls	r1, r2, #5
 8006f2e:	68fa      	ldr	r2, [r7, #12]
 8006f30:	440a      	add	r2, r1
 8006f32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f36:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006f3a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	791b      	ldrb	r3, [r3, #4]
 8006f40:	2b03      	cmp	r3, #3
 8006f42:	d003      	beq.n	8006f4c <USB_EPClearStall+0x4c>
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	791b      	ldrb	r3, [r3, #4]
 8006f48:	2b02      	cmp	r3, #2
 8006f4a:	d138      	bne.n	8006fbe <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	015a      	lsls	r2, r3, #5
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	4413      	add	r3, r2
 8006f54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	68ba      	ldr	r2, [r7, #8]
 8006f5c:	0151      	lsls	r1, r2, #5
 8006f5e:	68fa      	ldr	r2, [r7, #12]
 8006f60:	440a      	add	r2, r1
 8006f62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f6a:	6013      	str	r3, [r2, #0]
 8006f6c:	e027      	b.n	8006fbe <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	015a      	lsls	r2, r3, #5
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	4413      	add	r3, r2
 8006f76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	68ba      	ldr	r2, [r7, #8]
 8006f7e:	0151      	lsls	r1, r2, #5
 8006f80:	68fa      	ldr	r2, [r7, #12]
 8006f82:	440a      	add	r2, r1
 8006f84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f88:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006f8c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	791b      	ldrb	r3, [r3, #4]
 8006f92:	2b03      	cmp	r3, #3
 8006f94:	d003      	beq.n	8006f9e <USB_EPClearStall+0x9e>
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	791b      	ldrb	r3, [r3, #4]
 8006f9a:	2b02      	cmp	r3, #2
 8006f9c:	d10f      	bne.n	8006fbe <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	015a      	lsls	r2, r3, #5
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	4413      	add	r3, r2
 8006fa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	68ba      	ldr	r2, [r7, #8]
 8006fae:	0151      	lsls	r1, r2, #5
 8006fb0:	68fa      	ldr	r2, [r7, #12]
 8006fb2:	440a      	add	r2, r1
 8006fb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fbc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006fbe:	2300      	movs	r3, #0
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3714      	adds	r7, #20
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr

08006fcc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b085      	sub	sp, #20
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	460b      	mov	r3, r1
 8006fd6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	68fa      	ldr	r2, [r7, #12]
 8006fe6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006fea:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006fee:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ff6:	681a      	ldr	r2, [r3, #0]
 8006ff8:	78fb      	ldrb	r3, [r7, #3]
 8006ffa:	011b      	lsls	r3, r3, #4
 8006ffc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007000:	68f9      	ldr	r1, [r7, #12]
 8007002:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007006:	4313      	orrs	r3, r2
 8007008:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800700a:	2300      	movs	r3, #0
}
 800700c:	4618      	mov	r0, r3
 800700e:	3714      	adds	r7, #20
 8007010:	46bd      	mov	sp, r7
 8007012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007016:	4770      	bx	lr

08007018 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007018:	b480      	push	{r7}
 800701a:	b085      	sub	sp, #20
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	68fa      	ldr	r2, [r7, #12]
 800702e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007032:	f023 0303 	bic.w	r3, r3, #3
 8007036:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	68fa      	ldr	r2, [r7, #12]
 8007042:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007046:	f023 0302 	bic.w	r3, r3, #2
 800704a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800704c:	2300      	movs	r3, #0
}
 800704e:	4618      	mov	r0, r3
 8007050:	3714      	adds	r7, #20
 8007052:	46bd      	mov	sp, r7
 8007054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007058:	4770      	bx	lr

0800705a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800705a:	b480      	push	{r7}
 800705c:	b085      	sub	sp, #20
 800705e:	af00      	add	r7, sp, #0
 8007060:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	68fa      	ldr	r2, [r7, #12]
 8007070:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007074:	f023 0303 	bic.w	r3, r3, #3
 8007078:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	68fa      	ldr	r2, [r7, #12]
 8007084:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007088:	f043 0302 	orr.w	r3, r3, #2
 800708c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800708e:	2300      	movs	r3, #0
}
 8007090:	4618      	mov	r0, r3
 8007092:	3714      	adds	r7, #20
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr

0800709c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800709c:	b480      	push	{r7}
 800709e:	b085      	sub	sp, #20
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	695b      	ldr	r3, [r3, #20]
 80070a8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	699b      	ldr	r3, [r3, #24]
 80070ae:	68fa      	ldr	r2, [r7, #12]
 80070b0:	4013      	ands	r3, r2
 80070b2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80070b4:	68fb      	ldr	r3, [r7, #12]
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3714      	adds	r7, #20
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr

080070c2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80070c2:	b480      	push	{r7}
 80070c4:	b085      	sub	sp, #20
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070d4:	699b      	ldr	r3, [r3, #24]
 80070d6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070de:	69db      	ldr	r3, [r3, #28]
 80070e0:	68ba      	ldr	r2, [r7, #8]
 80070e2:	4013      	ands	r3, r2
 80070e4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	0c1b      	lsrs	r3, r3, #16
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3714      	adds	r7, #20
 80070ee:	46bd      	mov	sp, r7
 80070f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f4:	4770      	bx	lr

080070f6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80070f6:	b480      	push	{r7}
 80070f8:	b085      	sub	sp, #20
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007108:	699b      	ldr	r3, [r3, #24]
 800710a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007112:	69db      	ldr	r3, [r3, #28]
 8007114:	68ba      	ldr	r2, [r7, #8]
 8007116:	4013      	ands	r3, r2
 8007118:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	b29b      	uxth	r3, r3
}
 800711e:	4618      	mov	r0, r3
 8007120:	3714      	adds	r7, #20
 8007122:	46bd      	mov	sp, r7
 8007124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007128:	4770      	bx	lr

0800712a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800712a:	b480      	push	{r7}
 800712c:	b085      	sub	sp, #20
 800712e:	af00      	add	r7, sp, #0
 8007130:	6078      	str	r0, [r7, #4]
 8007132:	460b      	mov	r3, r1
 8007134:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800713a:	78fb      	ldrb	r3, [r7, #3]
 800713c:	015a      	lsls	r2, r3, #5
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	4413      	add	r3, r2
 8007142:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007150:	695b      	ldr	r3, [r3, #20]
 8007152:	68ba      	ldr	r2, [r7, #8]
 8007154:	4013      	ands	r3, r2
 8007156:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007158:	68bb      	ldr	r3, [r7, #8]
}
 800715a:	4618      	mov	r0, r3
 800715c:	3714      	adds	r7, #20
 800715e:	46bd      	mov	sp, r7
 8007160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007164:	4770      	bx	lr

08007166 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007166:	b480      	push	{r7}
 8007168:	b087      	sub	sp, #28
 800716a:	af00      	add	r7, sp, #0
 800716c:	6078      	str	r0, [r7, #4]
 800716e:	460b      	mov	r3, r1
 8007170:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800717c:	691b      	ldr	r3, [r3, #16]
 800717e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007186:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007188:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800718a:	78fb      	ldrb	r3, [r7, #3]
 800718c:	f003 030f 	and.w	r3, r3, #15
 8007190:	68fa      	ldr	r2, [r7, #12]
 8007192:	fa22 f303 	lsr.w	r3, r2, r3
 8007196:	01db      	lsls	r3, r3, #7
 8007198:	b2db      	uxtb	r3, r3
 800719a:	693a      	ldr	r2, [r7, #16]
 800719c:	4313      	orrs	r3, r2
 800719e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80071a0:	78fb      	ldrb	r3, [r7, #3]
 80071a2:	015a      	lsls	r2, r3, #5
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	4413      	add	r3, r2
 80071a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071ac:	689b      	ldr	r3, [r3, #8]
 80071ae:	693a      	ldr	r2, [r7, #16]
 80071b0:	4013      	ands	r3, r2
 80071b2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80071b4:	68bb      	ldr	r3, [r7, #8]
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	371c      	adds	r7, #28
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr

080071c2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80071c2:	b480      	push	{r7}
 80071c4:	b083      	sub	sp, #12
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	695b      	ldr	r3, [r3, #20]
 80071ce:	f003 0301 	and.w	r3, r3, #1
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	370c      	adds	r7, #12
 80071d6:	46bd      	mov	sp, r7
 80071d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071dc:	4770      	bx	lr

080071de <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80071de:	b480      	push	{r7}
 80071e0:	b085      	sub	sp, #20
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	68fa      	ldr	r2, [r7, #12]
 80071f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071f8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80071fc:	f023 0307 	bic.w	r3, r3, #7
 8007200:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	68fa      	ldr	r2, [r7, #12]
 800720c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007210:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007214:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007216:	2300      	movs	r3, #0
}
 8007218:	4618      	mov	r0, r3
 800721a:	3714      	adds	r7, #20
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr

08007224 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8007224:	b480      	push	{r7}
 8007226:	b087      	sub	sp, #28
 8007228:	af00      	add	r7, sp, #0
 800722a:	60f8      	str	r0, [r7, #12]
 800722c:	460b      	mov	r3, r1
 800722e:	607a      	str	r2, [r7, #4]
 8007230:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	333c      	adds	r3, #60	; 0x3c
 800723a:	3304      	adds	r3, #4
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	4a26      	ldr	r2, [pc, #152]	; (80072dc <USB_EP0_OutStart+0xb8>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d90a      	bls.n	800725e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007254:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007258:	d101      	bne.n	800725e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800725a:	2300      	movs	r3, #0
 800725c:	e037      	b.n	80072ce <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007264:	461a      	mov	r2, r3
 8007266:	2300      	movs	r3, #0
 8007268:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007270:	691b      	ldr	r3, [r3, #16]
 8007272:	697a      	ldr	r2, [r7, #20]
 8007274:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007278:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800727c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007284:	691b      	ldr	r3, [r3, #16]
 8007286:	697a      	ldr	r2, [r7, #20]
 8007288:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800728c:	f043 0318 	orr.w	r3, r3, #24
 8007290:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007298:	691b      	ldr	r3, [r3, #16]
 800729a:	697a      	ldr	r2, [r7, #20]
 800729c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072a0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80072a4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80072a6:	7afb      	ldrb	r3, [r7, #11]
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d10f      	bne.n	80072cc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072b2:	461a      	mov	r2, r3
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	697a      	ldr	r2, [r7, #20]
 80072c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072c6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80072ca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80072cc:	2300      	movs	r3, #0
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	371c      	adds	r7, #28
 80072d2:	46bd      	mov	sp, r7
 80072d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d8:	4770      	bx	lr
 80072da:	bf00      	nop
 80072dc:	4f54300a 	.word	0x4f54300a

080072e0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b085      	sub	sp, #20
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80072e8:	2300      	movs	r3, #0
 80072ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	3301      	adds	r3, #1
 80072f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80072f8:	d901      	bls.n	80072fe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80072fa:	2303      	movs	r3, #3
 80072fc:	e01b      	b.n	8007336 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	691b      	ldr	r3, [r3, #16]
 8007302:	2b00      	cmp	r3, #0
 8007304:	daf2      	bge.n	80072ec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007306:	2300      	movs	r3, #0
 8007308:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	691b      	ldr	r3, [r3, #16]
 800730e:	f043 0201 	orr.w	r2, r3, #1
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	3301      	adds	r3, #1
 800731a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007322:	d901      	bls.n	8007328 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007324:	2303      	movs	r3, #3
 8007326:	e006      	b.n	8007336 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	691b      	ldr	r3, [r3, #16]
 800732c:	f003 0301 	and.w	r3, r3, #1
 8007330:	2b01      	cmp	r3, #1
 8007332:	d0f0      	beq.n	8007316 <USB_CoreReset+0x36>

  return HAL_OK;
 8007334:	2300      	movs	r3, #0
}
 8007336:	4618      	mov	r0, r3
 8007338:	3714      	adds	r7, #20
 800733a:	46bd      	mov	sp, r7
 800733c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007340:	4770      	bx	lr
	...

08007344 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b084      	sub	sp, #16
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	460b      	mov	r3, r1
 800734e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007350:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007354:	f003 ff36 	bl	800b1c4 <USBD_static_malloc>
 8007358:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d109      	bne.n	8007374 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	32b0      	adds	r2, #176	; 0xb0
 800736a:	2100      	movs	r1, #0
 800736c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007370:	2302      	movs	r3, #2
 8007372:	e0d4      	b.n	800751e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007374:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007378:	2100      	movs	r1, #0
 800737a:	68f8      	ldr	r0, [r7, #12]
 800737c:	f005 f944 	bl	800c608 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	32b0      	adds	r2, #176	; 0xb0
 800738a:	68f9      	ldr	r1, [r7, #12]
 800738c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	32b0      	adds	r2, #176	; 0xb0
 800739a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	7c1b      	ldrb	r3, [r3, #16]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d138      	bne.n	800741e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80073ac:	4b5e      	ldr	r3, [pc, #376]	; (8007528 <USBD_CDC_Init+0x1e4>)
 80073ae:	7819      	ldrb	r1, [r3, #0]
 80073b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073b4:	2202      	movs	r2, #2
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f003 fde1 	bl	800af7e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80073bc:	4b5a      	ldr	r3, [pc, #360]	; (8007528 <USBD_CDC_Init+0x1e4>)
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	f003 020f 	and.w	r2, r3, #15
 80073c4:	6879      	ldr	r1, [r7, #4]
 80073c6:	4613      	mov	r3, r2
 80073c8:	009b      	lsls	r3, r3, #2
 80073ca:	4413      	add	r3, r2
 80073cc:	009b      	lsls	r3, r3, #2
 80073ce:	440b      	add	r3, r1
 80073d0:	3324      	adds	r3, #36	; 0x24
 80073d2:	2201      	movs	r2, #1
 80073d4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80073d6:	4b55      	ldr	r3, [pc, #340]	; (800752c <USBD_CDC_Init+0x1e8>)
 80073d8:	7819      	ldrb	r1, [r3, #0]
 80073da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073de:	2202      	movs	r2, #2
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f003 fdcc 	bl	800af7e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80073e6:	4b51      	ldr	r3, [pc, #324]	; (800752c <USBD_CDC_Init+0x1e8>)
 80073e8:	781b      	ldrb	r3, [r3, #0]
 80073ea:	f003 020f 	and.w	r2, r3, #15
 80073ee:	6879      	ldr	r1, [r7, #4]
 80073f0:	4613      	mov	r3, r2
 80073f2:	009b      	lsls	r3, r3, #2
 80073f4:	4413      	add	r3, r2
 80073f6:	009b      	lsls	r3, r3, #2
 80073f8:	440b      	add	r3, r1
 80073fa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80073fe:	2201      	movs	r2, #1
 8007400:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007402:	4b4b      	ldr	r3, [pc, #300]	; (8007530 <USBD_CDC_Init+0x1ec>)
 8007404:	781b      	ldrb	r3, [r3, #0]
 8007406:	f003 020f 	and.w	r2, r3, #15
 800740a:	6879      	ldr	r1, [r7, #4]
 800740c:	4613      	mov	r3, r2
 800740e:	009b      	lsls	r3, r3, #2
 8007410:	4413      	add	r3, r2
 8007412:	009b      	lsls	r3, r3, #2
 8007414:	440b      	add	r3, r1
 8007416:	3326      	adds	r3, #38	; 0x26
 8007418:	2210      	movs	r2, #16
 800741a:	801a      	strh	r2, [r3, #0]
 800741c:	e035      	b.n	800748a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800741e:	4b42      	ldr	r3, [pc, #264]	; (8007528 <USBD_CDC_Init+0x1e4>)
 8007420:	7819      	ldrb	r1, [r3, #0]
 8007422:	2340      	movs	r3, #64	; 0x40
 8007424:	2202      	movs	r2, #2
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f003 fda9 	bl	800af7e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800742c:	4b3e      	ldr	r3, [pc, #248]	; (8007528 <USBD_CDC_Init+0x1e4>)
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	f003 020f 	and.w	r2, r3, #15
 8007434:	6879      	ldr	r1, [r7, #4]
 8007436:	4613      	mov	r3, r2
 8007438:	009b      	lsls	r3, r3, #2
 800743a:	4413      	add	r3, r2
 800743c:	009b      	lsls	r3, r3, #2
 800743e:	440b      	add	r3, r1
 8007440:	3324      	adds	r3, #36	; 0x24
 8007442:	2201      	movs	r2, #1
 8007444:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007446:	4b39      	ldr	r3, [pc, #228]	; (800752c <USBD_CDC_Init+0x1e8>)
 8007448:	7819      	ldrb	r1, [r3, #0]
 800744a:	2340      	movs	r3, #64	; 0x40
 800744c:	2202      	movs	r2, #2
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f003 fd95 	bl	800af7e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007454:	4b35      	ldr	r3, [pc, #212]	; (800752c <USBD_CDC_Init+0x1e8>)
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	f003 020f 	and.w	r2, r3, #15
 800745c:	6879      	ldr	r1, [r7, #4]
 800745e:	4613      	mov	r3, r2
 8007460:	009b      	lsls	r3, r3, #2
 8007462:	4413      	add	r3, r2
 8007464:	009b      	lsls	r3, r3, #2
 8007466:	440b      	add	r3, r1
 8007468:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800746c:	2201      	movs	r2, #1
 800746e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007470:	4b2f      	ldr	r3, [pc, #188]	; (8007530 <USBD_CDC_Init+0x1ec>)
 8007472:	781b      	ldrb	r3, [r3, #0]
 8007474:	f003 020f 	and.w	r2, r3, #15
 8007478:	6879      	ldr	r1, [r7, #4]
 800747a:	4613      	mov	r3, r2
 800747c:	009b      	lsls	r3, r3, #2
 800747e:	4413      	add	r3, r2
 8007480:	009b      	lsls	r3, r3, #2
 8007482:	440b      	add	r3, r1
 8007484:	3326      	adds	r3, #38	; 0x26
 8007486:	2210      	movs	r2, #16
 8007488:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800748a:	4b29      	ldr	r3, [pc, #164]	; (8007530 <USBD_CDC_Init+0x1ec>)
 800748c:	7819      	ldrb	r1, [r3, #0]
 800748e:	2308      	movs	r3, #8
 8007490:	2203      	movs	r2, #3
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f003 fd73 	bl	800af7e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007498:	4b25      	ldr	r3, [pc, #148]	; (8007530 <USBD_CDC_Init+0x1ec>)
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	f003 020f 	and.w	r2, r3, #15
 80074a0:	6879      	ldr	r1, [r7, #4]
 80074a2:	4613      	mov	r3, r2
 80074a4:	009b      	lsls	r3, r3, #2
 80074a6:	4413      	add	r3, r2
 80074a8:	009b      	lsls	r3, r3, #2
 80074aa:	440b      	add	r3, r1
 80074ac:	3324      	adds	r3, #36	; 0x24
 80074ae:	2201      	movs	r2, #1
 80074b0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2200      	movs	r2, #0
 80074b6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80074c0:	687a      	ldr	r2, [r7, #4]
 80074c2:	33b0      	adds	r3, #176	; 0xb0
 80074c4:	009b      	lsls	r3, r3, #2
 80074c6:	4413      	add	r3, r2
 80074c8:	685b      	ldr	r3, [r3, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2200      	movs	r2, #0
 80074d2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2200      	movs	r2, #0
 80074da:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d101      	bne.n	80074ec <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80074e8:	2302      	movs	r3, #2
 80074ea:	e018      	b.n	800751e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	7c1b      	ldrb	r3, [r3, #16]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d10a      	bne.n	800750a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80074f4:	4b0d      	ldr	r3, [pc, #52]	; (800752c <USBD_CDC_Init+0x1e8>)
 80074f6:	7819      	ldrb	r1, [r3, #0]
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80074fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f003 fe2a 	bl	800b15c <USBD_LL_PrepareReceive>
 8007508:	e008      	b.n	800751c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800750a:	4b08      	ldr	r3, [pc, #32]	; (800752c <USBD_CDC_Init+0x1e8>)
 800750c:	7819      	ldrb	r1, [r3, #0]
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007514:	2340      	movs	r3, #64	; 0x40
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f003 fe20 	bl	800b15c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800751c:	2300      	movs	r3, #0
}
 800751e:	4618      	mov	r0, r3
 8007520:	3710      	adds	r7, #16
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}
 8007526:	bf00      	nop
 8007528:	20000093 	.word	0x20000093
 800752c:	20000094 	.word	0x20000094
 8007530:	20000095 	.word	0x20000095

08007534 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b082      	sub	sp, #8
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
 800753c:	460b      	mov	r3, r1
 800753e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007540:	4b3a      	ldr	r3, [pc, #232]	; (800762c <USBD_CDC_DeInit+0xf8>)
 8007542:	781b      	ldrb	r3, [r3, #0]
 8007544:	4619      	mov	r1, r3
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f003 fd3f 	bl	800afca <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800754c:	4b37      	ldr	r3, [pc, #220]	; (800762c <USBD_CDC_DeInit+0xf8>)
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	f003 020f 	and.w	r2, r3, #15
 8007554:	6879      	ldr	r1, [r7, #4]
 8007556:	4613      	mov	r3, r2
 8007558:	009b      	lsls	r3, r3, #2
 800755a:	4413      	add	r3, r2
 800755c:	009b      	lsls	r3, r3, #2
 800755e:	440b      	add	r3, r1
 8007560:	3324      	adds	r3, #36	; 0x24
 8007562:	2200      	movs	r2, #0
 8007564:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007566:	4b32      	ldr	r3, [pc, #200]	; (8007630 <USBD_CDC_DeInit+0xfc>)
 8007568:	781b      	ldrb	r3, [r3, #0]
 800756a:	4619      	mov	r1, r3
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f003 fd2c 	bl	800afca <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007572:	4b2f      	ldr	r3, [pc, #188]	; (8007630 <USBD_CDC_DeInit+0xfc>)
 8007574:	781b      	ldrb	r3, [r3, #0]
 8007576:	f003 020f 	and.w	r2, r3, #15
 800757a:	6879      	ldr	r1, [r7, #4]
 800757c:	4613      	mov	r3, r2
 800757e:	009b      	lsls	r3, r3, #2
 8007580:	4413      	add	r3, r2
 8007582:	009b      	lsls	r3, r3, #2
 8007584:	440b      	add	r3, r1
 8007586:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800758a:	2200      	movs	r2, #0
 800758c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800758e:	4b29      	ldr	r3, [pc, #164]	; (8007634 <USBD_CDC_DeInit+0x100>)
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	4619      	mov	r1, r3
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f003 fd18 	bl	800afca <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800759a:	4b26      	ldr	r3, [pc, #152]	; (8007634 <USBD_CDC_DeInit+0x100>)
 800759c:	781b      	ldrb	r3, [r3, #0]
 800759e:	f003 020f 	and.w	r2, r3, #15
 80075a2:	6879      	ldr	r1, [r7, #4]
 80075a4:	4613      	mov	r3, r2
 80075a6:	009b      	lsls	r3, r3, #2
 80075a8:	4413      	add	r3, r2
 80075aa:	009b      	lsls	r3, r3, #2
 80075ac:	440b      	add	r3, r1
 80075ae:	3324      	adds	r3, #36	; 0x24
 80075b0:	2200      	movs	r2, #0
 80075b2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80075b4:	4b1f      	ldr	r3, [pc, #124]	; (8007634 <USBD_CDC_DeInit+0x100>)
 80075b6:	781b      	ldrb	r3, [r3, #0]
 80075b8:	f003 020f 	and.w	r2, r3, #15
 80075bc:	6879      	ldr	r1, [r7, #4]
 80075be:	4613      	mov	r3, r2
 80075c0:	009b      	lsls	r3, r3, #2
 80075c2:	4413      	add	r3, r2
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	440b      	add	r3, r1
 80075c8:	3326      	adds	r3, #38	; 0x26
 80075ca:	2200      	movs	r2, #0
 80075cc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	32b0      	adds	r2, #176	; 0xb0
 80075d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d01f      	beq.n	8007620 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80075e6:	687a      	ldr	r2, [r7, #4]
 80075e8:	33b0      	adds	r3, #176	; 0xb0
 80075ea:	009b      	lsls	r3, r3, #2
 80075ec:	4413      	add	r3, r2
 80075ee:	685b      	ldr	r3, [r3, #4]
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	32b0      	adds	r2, #176	; 0xb0
 80075fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007602:	4618      	mov	r0, r3
 8007604:	f003 fdec 	bl	800b1e0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	32b0      	adds	r2, #176	; 0xb0
 8007612:	2100      	movs	r1, #0
 8007614:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2200      	movs	r2, #0
 800761c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007620:	2300      	movs	r3, #0
}
 8007622:	4618      	mov	r0, r3
 8007624:	3708      	adds	r7, #8
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}
 800762a:	bf00      	nop
 800762c:	20000093 	.word	0x20000093
 8007630:	20000094 	.word	0x20000094
 8007634:	20000095 	.word	0x20000095

08007638 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b086      	sub	sp, #24
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	32b0      	adds	r2, #176	; 0xb0
 800764c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007650:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007652:	2300      	movs	r3, #0
 8007654:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007656:	2300      	movs	r3, #0
 8007658:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800765a:	2300      	movs	r3, #0
 800765c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d101      	bne.n	8007668 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007664:	2303      	movs	r3, #3
 8007666:	e0bf      	b.n	80077e8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	781b      	ldrb	r3, [r3, #0]
 800766c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007670:	2b00      	cmp	r3, #0
 8007672:	d050      	beq.n	8007716 <USBD_CDC_Setup+0xde>
 8007674:	2b20      	cmp	r3, #32
 8007676:	f040 80af 	bne.w	80077d8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	88db      	ldrh	r3, [r3, #6]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d03a      	beq.n	80076f8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	781b      	ldrb	r3, [r3, #0]
 8007686:	b25b      	sxtb	r3, r3
 8007688:	2b00      	cmp	r3, #0
 800768a:	da1b      	bge.n	80076c4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007692:	687a      	ldr	r2, [r7, #4]
 8007694:	33b0      	adds	r3, #176	; 0xb0
 8007696:	009b      	lsls	r3, r3, #2
 8007698:	4413      	add	r3, r2
 800769a:	685b      	ldr	r3, [r3, #4]
 800769c:	689b      	ldr	r3, [r3, #8]
 800769e:	683a      	ldr	r2, [r7, #0]
 80076a0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80076a2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80076a4:	683a      	ldr	r2, [r7, #0]
 80076a6:	88d2      	ldrh	r2, [r2, #6]
 80076a8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	88db      	ldrh	r3, [r3, #6]
 80076ae:	2b07      	cmp	r3, #7
 80076b0:	bf28      	it	cs
 80076b2:	2307      	movcs	r3, #7
 80076b4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	89fa      	ldrh	r2, [r7, #14]
 80076ba:	4619      	mov	r1, r3
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f001 fd49 	bl	8009154 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80076c2:	e090      	b.n	80077e6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	785a      	ldrb	r2, [r3, #1]
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	88db      	ldrh	r3, [r3, #6]
 80076d2:	2b3f      	cmp	r3, #63	; 0x3f
 80076d4:	d803      	bhi.n	80076de <USBD_CDC_Setup+0xa6>
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	88db      	ldrh	r3, [r3, #6]
 80076da:	b2da      	uxtb	r2, r3
 80076dc:	e000      	b.n	80076e0 <USBD_CDC_Setup+0xa8>
 80076de:	2240      	movs	r2, #64	; 0x40
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80076e6:	6939      	ldr	r1, [r7, #16]
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80076ee:	461a      	mov	r2, r3
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f001 fd5b 	bl	80091ac <USBD_CtlPrepareRx>
      break;
 80076f6:	e076      	b.n	80077e6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80076fe:	687a      	ldr	r2, [r7, #4]
 8007700:	33b0      	adds	r3, #176	; 0xb0
 8007702:	009b      	lsls	r3, r3, #2
 8007704:	4413      	add	r3, r2
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	689b      	ldr	r3, [r3, #8]
 800770a:	683a      	ldr	r2, [r7, #0]
 800770c:	7850      	ldrb	r0, [r2, #1]
 800770e:	2200      	movs	r2, #0
 8007710:	6839      	ldr	r1, [r7, #0]
 8007712:	4798      	blx	r3
      break;
 8007714:	e067      	b.n	80077e6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	785b      	ldrb	r3, [r3, #1]
 800771a:	2b0b      	cmp	r3, #11
 800771c:	d851      	bhi.n	80077c2 <USBD_CDC_Setup+0x18a>
 800771e:	a201      	add	r2, pc, #4	; (adr r2, 8007724 <USBD_CDC_Setup+0xec>)
 8007720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007724:	08007755 	.word	0x08007755
 8007728:	080077d1 	.word	0x080077d1
 800772c:	080077c3 	.word	0x080077c3
 8007730:	080077c3 	.word	0x080077c3
 8007734:	080077c3 	.word	0x080077c3
 8007738:	080077c3 	.word	0x080077c3
 800773c:	080077c3 	.word	0x080077c3
 8007740:	080077c3 	.word	0x080077c3
 8007744:	080077c3 	.word	0x080077c3
 8007748:	080077c3 	.word	0x080077c3
 800774c:	0800777f 	.word	0x0800777f
 8007750:	080077a9 	.word	0x080077a9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800775a:	b2db      	uxtb	r3, r3
 800775c:	2b03      	cmp	r3, #3
 800775e:	d107      	bne.n	8007770 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007760:	f107 030a 	add.w	r3, r7, #10
 8007764:	2202      	movs	r2, #2
 8007766:	4619      	mov	r1, r3
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f001 fcf3 	bl	8009154 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800776e:	e032      	b.n	80077d6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007770:	6839      	ldr	r1, [r7, #0]
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f001 fc7d 	bl	8009072 <USBD_CtlError>
            ret = USBD_FAIL;
 8007778:	2303      	movs	r3, #3
 800777a:	75fb      	strb	r3, [r7, #23]
          break;
 800777c:	e02b      	b.n	80077d6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007784:	b2db      	uxtb	r3, r3
 8007786:	2b03      	cmp	r3, #3
 8007788:	d107      	bne.n	800779a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800778a:	f107 030d 	add.w	r3, r7, #13
 800778e:	2201      	movs	r2, #1
 8007790:	4619      	mov	r1, r3
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f001 fcde 	bl	8009154 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007798:	e01d      	b.n	80077d6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800779a:	6839      	ldr	r1, [r7, #0]
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f001 fc68 	bl	8009072 <USBD_CtlError>
            ret = USBD_FAIL;
 80077a2:	2303      	movs	r3, #3
 80077a4:	75fb      	strb	r3, [r7, #23]
          break;
 80077a6:	e016      	b.n	80077d6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077ae:	b2db      	uxtb	r3, r3
 80077b0:	2b03      	cmp	r3, #3
 80077b2:	d00f      	beq.n	80077d4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80077b4:	6839      	ldr	r1, [r7, #0]
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f001 fc5b 	bl	8009072 <USBD_CtlError>
            ret = USBD_FAIL;
 80077bc:	2303      	movs	r3, #3
 80077be:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80077c0:	e008      	b.n	80077d4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80077c2:	6839      	ldr	r1, [r7, #0]
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f001 fc54 	bl	8009072 <USBD_CtlError>
          ret = USBD_FAIL;
 80077ca:	2303      	movs	r3, #3
 80077cc:	75fb      	strb	r3, [r7, #23]
          break;
 80077ce:	e002      	b.n	80077d6 <USBD_CDC_Setup+0x19e>
          break;
 80077d0:	bf00      	nop
 80077d2:	e008      	b.n	80077e6 <USBD_CDC_Setup+0x1ae>
          break;
 80077d4:	bf00      	nop
      }
      break;
 80077d6:	e006      	b.n	80077e6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80077d8:	6839      	ldr	r1, [r7, #0]
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f001 fc49 	bl	8009072 <USBD_CtlError>
      ret = USBD_FAIL;
 80077e0:	2303      	movs	r3, #3
 80077e2:	75fb      	strb	r3, [r7, #23]
      break;
 80077e4:	bf00      	nop
  }

  return (uint8_t)ret;
 80077e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3718      	adds	r7, #24
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}

080077f0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b084      	sub	sp, #16
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	460b      	mov	r3, r1
 80077fa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007802:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	32b0      	adds	r2, #176	; 0xb0
 800780e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d101      	bne.n	800781a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007816:	2303      	movs	r3, #3
 8007818:	e065      	b.n	80078e6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	32b0      	adds	r2, #176	; 0xb0
 8007824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007828:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800782a:	78fb      	ldrb	r3, [r7, #3]
 800782c:	f003 020f 	and.w	r2, r3, #15
 8007830:	6879      	ldr	r1, [r7, #4]
 8007832:	4613      	mov	r3, r2
 8007834:	009b      	lsls	r3, r3, #2
 8007836:	4413      	add	r3, r2
 8007838:	009b      	lsls	r3, r3, #2
 800783a:	440b      	add	r3, r1
 800783c:	3318      	adds	r3, #24
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d02f      	beq.n	80078a4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007844:	78fb      	ldrb	r3, [r7, #3]
 8007846:	f003 020f 	and.w	r2, r3, #15
 800784a:	6879      	ldr	r1, [r7, #4]
 800784c:	4613      	mov	r3, r2
 800784e:	009b      	lsls	r3, r3, #2
 8007850:	4413      	add	r3, r2
 8007852:	009b      	lsls	r3, r3, #2
 8007854:	440b      	add	r3, r1
 8007856:	3318      	adds	r3, #24
 8007858:	681a      	ldr	r2, [r3, #0]
 800785a:	78fb      	ldrb	r3, [r7, #3]
 800785c:	f003 010f 	and.w	r1, r3, #15
 8007860:	68f8      	ldr	r0, [r7, #12]
 8007862:	460b      	mov	r3, r1
 8007864:	00db      	lsls	r3, r3, #3
 8007866:	440b      	add	r3, r1
 8007868:	009b      	lsls	r3, r3, #2
 800786a:	4403      	add	r3, r0
 800786c:	331c      	adds	r3, #28
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	fbb2 f1f3 	udiv	r1, r2, r3
 8007874:	fb01 f303 	mul.w	r3, r1, r3
 8007878:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800787a:	2b00      	cmp	r3, #0
 800787c:	d112      	bne.n	80078a4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800787e:	78fb      	ldrb	r3, [r7, #3]
 8007880:	f003 020f 	and.w	r2, r3, #15
 8007884:	6879      	ldr	r1, [r7, #4]
 8007886:	4613      	mov	r3, r2
 8007888:	009b      	lsls	r3, r3, #2
 800788a:	4413      	add	r3, r2
 800788c:	009b      	lsls	r3, r3, #2
 800788e:	440b      	add	r3, r1
 8007890:	3318      	adds	r3, #24
 8007892:	2200      	movs	r2, #0
 8007894:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007896:	78f9      	ldrb	r1, [r7, #3]
 8007898:	2300      	movs	r3, #0
 800789a:	2200      	movs	r2, #0
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f003 fc3c 	bl	800b11a <USBD_LL_Transmit>
 80078a2:	e01f      	b.n	80078e4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	2200      	movs	r2, #0
 80078a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80078b2:	687a      	ldr	r2, [r7, #4]
 80078b4:	33b0      	adds	r3, #176	; 0xb0
 80078b6:	009b      	lsls	r3, r3, #2
 80078b8:	4413      	add	r3, r2
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	691b      	ldr	r3, [r3, #16]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d010      	beq.n	80078e4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80078c8:	687a      	ldr	r2, [r7, #4]
 80078ca:	33b0      	adds	r3, #176	; 0xb0
 80078cc:	009b      	lsls	r3, r3, #2
 80078ce:	4413      	add	r3, r2
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	691b      	ldr	r3, [r3, #16]
 80078d4:	68ba      	ldr	r2, [r7, #8]
 80078d6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80078da:	68ba      	ldr	r2, [r7, #8]
 80078dc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80078e0:	78fa      	ldrb	r2, [r7, #3]
 80078e2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80078e4:	2300      	movs	r3, #0
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3710      	adds	r7, #16
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}

080078ee <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80078ee:	b580      	push	{r7, lr}
 80078f0:	b084      	sub	sp, #16
 80078f2:	af00      	add	r7, sp, #0
 80078f4:	6078      	str	r0, [r7, #4]
 80078f6:	460b      	mov	r3, r1
 80078f8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	32b0      	adds	r2, #176	; 0xb0
 8007904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007908:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	32b0      	adds	r2, #176	; 0xb0
 8007914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d101      	bne.n	8007920 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800791c:	2303      	movs	r3, #3
 800791e:	e01a      	b.n	8007956 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007920:	78fb      	ldrb	r3, [r7, #3]
 8007922:	4619      	mov	r1, r3
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f003 fc3a 	bl	800b19e <USBD_LL_GetRxDataSize>
 800792a:	4602      	mov	r2, r0
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007938:	687a      	ldr	r2, [r7, #4]
 800793a:	33b0      	adds	r3, #176	; 0xb0
 800793c:	009b      	lsls	r3, r3, #2
 800793e:	4413      	add	r3, r2
 8007940:	685b      	ldr	r3, [r3, #4]
 8007942:	68db      	ldr	r3, [r3, #12]
 8007944:	68fa      	ldr	r2, [r7, #12]
 8007946:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800794a:	68fa      	ldr	r2, [r7, #12]
 800794c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007950:	4611      	mov	r1, r2
 8007952:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007954:	2300      	movs	r3, #0
}
 8007956:	4618      	mov	r0, r3
 8007958:	3710      	adds	r7, #16
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}

0800795e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800795e:	b580      	push	{r7, lr}
 8007960:	b084      	sub	sp, #16
 8007962:	af00      	add	r7, sp, #0
 8007964:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	32b0      	adds	r2, #176	; 0xb0
 8007970:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007974:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d101      	bne.n	8007980 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800797c:	2303      	movs	r3, #3
 800797e:	e025      	b.n	80079cc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007986:	687a      	ldr	r2, [r7, #4]
 8007988:	33b0      	adds	r3, #176	; 0xb0
 800798a:	009b      	lsls	r3, r3, #2
 800798c:	4413      	add	r3, r2
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d01a      	beq.n	80079ca <USBD_CDC_EP0_RxReady+0x6c>
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800799a:	2bff      	cmp	r3, #255	; 0xff
 800799c:	d015      	beq.n	80079ca <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80079a4:	687a      	ldr	r2, [r7, #4]
 80079a6:	33b0      	adds	r3, #176	; 0xb0
 80079a8:	009b      	lsls	r3, r3, #2
 80079aa:	4413      	add	r3, r2
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	689b      	ldr	r3, [r3, #8]
 80079b0:	68fa      	ldr	r2, [r7, #12]
 80079b2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80079b6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80079b8:	68fa      	ldr	r2, [r7, #12]
 80079ba:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80079be:	b292      	uxth	r2, r2
 80079c0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	22ff      	movs	r2, #255	; 0xff
 80079c6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80079ca:	2300      	movs	r3, #0
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3710      	adds	r7, #16
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b086      	sub	sp, #24
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80079dc:	2182      	movs	r1, #130	; 0x82
 80079de:	4818      	ldr	r0, [pc, #96]	; (8007a40 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80079e0:	f000 fd0f 	bl	8008402 <USBD_GetEpDesc>
 80079e4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80079e6:	2101      	movs	r1, #1
 80079e8:	4815      	ldr	r0, [pc, #84]	; (8007a40 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80079ea:	f000 fd0a 	bl	8008402 <USBD_GetEpDesc>
 80079ee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80079f0:	2181      	movs	r1, #129	; 0x81
 80079f2:	4813      	ldr	r0, [pc, #76]	; (8007a40 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80079f4:	f000 fd05 	bl	8008402 <USBD_GetEpDesc>
 80079f8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d002      	beq.n	8007a06 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	2210      	movs	r2, #16
 8007a04:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d006      	beq.n	8007a1a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a14:	711a      	strb	r2, [r3, #4]
 8007a16:	2200      	movs	r2, #0
 8007a18:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d006      	beq.n	8007a2e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	2200      	movs	r2, #0
 8007a24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a28:	711a      	strb	r2, [r3, #4]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2243      	movs	r2, #67	; 0x43
 8007a32:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007a34:	4b02      	ldr	r3, [pc, #8]	; (8007a40 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3718      	adds	r7, #24
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}
 8007a3e:	bf00      	nop
 8007a40:	20000050 	.word	0x20000050

08007a44 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b086      	sub	sp, #24
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007a4c:	2182      	movs	r1, #130	; 0x82
 8007a4e:	4818      	ldr	r0, [pc, #96]	; (8007ab0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007a50:	f000 fcd7 	bl	8008402 <USBD_GetEpDesc>
 8007a54:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007a56:	2101      	movs	r1, #1
 8007a58:	4815      	ldr	r0, [pc, #84]	; (8007ab0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007a5a:	f000 fcd2 	bl	8008402 <USBD_GetEpDesc>
 8007a5e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007a60:	2181      	movs	r1, #129	; 0x81
 8007a62:	4813      	ldr	r0, [pc, #76]	; (8007ab0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007a64:	f000 fccd 	bl	8008402 <USBD_GetEpDesc>
 8007a68:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d002      	beq.n	8007a76 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	2210      	movs	r2, #16
 8007a74:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d006      	beq.n	8007a8a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	711a      	strb	r2, [r3, #4]
 8007a82:	2200      	movs	r2, #0
 8007a84:	f042 0202 	orr.w	r2, r2, #2
 8007a88:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d006      	beq.n	8007a9e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	2200      	movs	r2, #0
 8007a94:	711a      	strb	r2, [r3, #4]
 8007a96:	2200      	movs	r2, #0
 8007a98:	f042 0202 	orr.w	r2, r2, #2
 8007a9c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2243      	movs	r2, #67	; 0x43
 8007aa2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007aa4:	4b02      	ldr	r3, [pc, #8]	; (8007ab0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	3718      	adds	r7, #24
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}
 8007aae:	bf00      	nop
 8007ab0:	20000050 	.word	0x20000050

08007ab4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b086      	sub	sp, #24
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007abc:	2182      	movs	r1, #130	; 0x82
 8007abe:	4818      	ldr	r0, [pc, #96]	; (8007b20 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007ac0:	f000 fc9f 	bl	8008402 <USBD_GetEpDesc>
 8007ac4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007ac6:	2101      	movs	r1, #1
 8007ac8:	4815      	ldr	r0, [pc, #84]	; (8007b20 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007aca:	f000 fc9a 	bl	8008402 <USBD_GetEpDesc>
 8007ace:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007ad0:	2181      	movs	r1, #129	; 0x81
 8007ad2:	4813      	ldr	r0, [pc, #76]	; (8007b20 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007ad4:	f000 fc95 	bl	8008402 <USBD_GetEpDesc>
 8007ad8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d002      	beq.n	8007ae6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	2210      	movs	r2, #16
 8007ae4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d006      	beq.n	8007afa <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	2200      	movs	r2, #0
 8007af0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007af4:	711a      	strb	r2, [r3, #4]
 8007af6:	2200      	movs	r2, #0
 8007af8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d006      	beq.n	8007b0e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2200      	movs	r2, #0
 8007b04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b08:	711a      	strb	r2, [r3, #4]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2243      	movs	r2, #67	; 0x43
 8007b12:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007b14:	4b02      	ldr	r3, [pc, #8]	; (8007b20 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3718      	adds	r7, #24
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}
 8007b1e:	bf00      	nop
 8007b20:	20000050 	.word	0x20000050

08007b24 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b083      	sub	sp, #12
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	220a      	movs	r2, #10
 8007b30:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007b32:	4b03      	ldr	r3, [pc, #12]	; (8007b40 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	370c      	adds	r7, #12
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr
 8007b40:	2000000c 	.word	0x2000000c

08007b44 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b083      	sub	sp, #12
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d101      	bne.n	8007b58 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007b54:	2303      	movs	r3, #3
 8007b56:	e009      	b.n	8007b6c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007b5e:	687a      	ldr	r2, [r7, #4]
 8007b60:	33b0      	adds	r3, #176	; 0xb0
 8007b62:	009b      	lsls	r3, r3, #2
 8007b64:	4413      	add	r3, r2
 8007b66:	683a      	ldr	r2, [r7, #0]
 8007b68:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007b6a:	2300      	movs	r3, #0
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	370c      	adds	r7, #12
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr

08007b78 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b087      	sub	sp, #28
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	60f8      	str	r0, [r7, #12]
 8007b80:	60b9      	str	r1, [r7, #8]
 8007b82:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	32b0      	adds	r2, #176	; 0xb0
 8007b8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b92:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d101      	bne.n	8007b9e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007b9a:	2303      	movs	r3, #3
 8007b9c:	e008      	b.n	8007bb0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	68ba      	ldr	r2, [r7, #8]
 8007ba2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	687a      	ldr	r2, [r7, #4]
 8007baa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007bae:	2300      	movs	r3, #0
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	371c      	adds	r7, #28
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bba:	4770      	bx	lr

08007bbc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b085      	sub	sp, #20
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	32b0      	adds	r2, #176	; 0xb0
 8007bd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bd4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d101      	bne.n	8007be0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007bdc:	2303      	movs	r3, #3
 8007bde:	e004      	b.n	8007bea <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	683a      	ldr	r2, [r7, #0]
 8007be4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007be8:	2300      	movs	r3, #0
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3714      	adds	r7, #20
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf4:	4770      	bx	lr
	...

08007bf8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b084      	sub	sp, #16
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	32b0      	adds	r2, #176	; 0xb0
 8007c0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c0e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	32b0      	adds	r2, #176	; 0xb0
 8007c1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d101      	bne.n	8007c26 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007c22:	2303      	movs	r3, #3
 8007c24:	e018      	b.n	8007c58 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	7c1b      	ldrb	r3, [r3, #16]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d10a      	bne.n	8007c44 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007c2e:	4b0c      	ldr	r3, [pc, #48]	; (8007c60 <USBD_CDC_ReceivePacket+0x68>)
 8007c30:	7819      	ldrb	r1, [r3, #0]
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007c38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f003 fa8d 	bl	800b15c <USBD_LL_PrepareReceive>
 8007c42:	e008      	b.n	8007c56 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007c44:	4b06      	ldr	r3, [pc, #24]	; (8007c60 <USBD_CDC_ReceivePacket+0x68>)
 8007c46:	7819      	ldrb	r1, [r3, #0]
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007c4e:	2340      	movs	r3, #64	; 0x40
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f003 fa83 	bl	800b15c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007c56:	2300      	movs	r3, #0
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3710      	adds	r7, #16
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}
 8007c60:	20000094 	.word	0x20000094

08007c64 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b086      	sub	sp, #24
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	60f8      	str	r0, [r7, #12]
 8007c6c:	60b9      	str	r1, [r7, #8]
 8007c6e:	4613      	mov	r3, r2
 8007c70:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d101      	bne.n	8007c7c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007c78:	2303      	movs	r3, #3
 8007c7a:	e01f      	b.n	8007cbc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2200      	movs	r2, #0
 8007c88:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d003      	beq.n	8007ca2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	68ba      	ldr	r2, [r7, #8]
 8007c9e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	2201      	movs	r2, #1
 8007ca6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	79fa      	ldrb	r2, [r7, #7]
 8007cae:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007cb0:	68f8      	ldr	r0, [r7, #12]
 8007cb2:	f003 f8fd 	bl	800aeb0 <USBD_LL_Init>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007cba:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3718      	adds	r7, #24
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}

08007cc4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b084      	sub	sp, #16
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d101      	bne.n	8007cdc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007cd8:	2303      	movs	r3, #3
 8007cda:	e025      	b.n	8007d28 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	683a      	ldr	r2, [r7, #0]
 8007ce0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	32ae      	adds	r2, #174	; 0xae
 8007cee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d00f      	beq.n	8007d18 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	32ae      	adds	r2, #174	; 0xae
 8007d02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d08:	f107 020e 	add.w	r2, r7, #14
 8007d0c:	4610      	mov	r0, r2
 8007d0e:	4798      	blx	r3
 8007d10:	4602      	mov	r2, r0
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007d1e:	1c5a      	adds	r2, r3, #1
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007d26:	2300      	movs	r3, #0
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3710      	adds	r7, #16
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}

08007d30 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b082      	sub	sp, #8
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f003 f905 	bl	800af48 <USBD_LL_Start>
 8007d3e:	4603      	mov	r3, r0
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3708      	adds	r7, #8
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}

08007d48 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b083      	sub	sp, #12
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007d50:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	370c      	adds	r7, #12
 8007d56:	46bd      	mov	sp, r7
 8007d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5c:	4770      	bx	lr

08007d5e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007d5e:	b580      	push	{r7, lr}
 8007d60:	b084      	sub	sp, #16
 8007d62:	af00      	add	r7, sp, #0
 8007d64:	6078      	str	r0, [r7, #4]
 8007d66:	460b      	mov	r3, r1
 8007d68:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d009      	beq.n	8007d8c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	78fa      	ldrb	r2, [r7, #3]
 8007d82:	4611      	mov	r1, r2
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	4798      	blx	r3
 8007d88:	4603      	mov	r3, r0
 8007d8a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	3710      	adds	r7, #16
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}

08007d96 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007d96:	b580      	push	{r7, lr}
 8007d98:	b084      	sub	sp, #16
 8007d9a:	af00      	add	r7, sp, #0
 8007d9c:	6078      	str	r0, [r7, #4]
 8007d9e:	460b      	mov	r3, r1
 8007da0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007da2:	2300      	movs	r3, #0
 8007da4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	78fa      	ldrb	r2, [r7, #3]
 8007db0:	4611      	mov	r1, r2
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	4798      	blx	r3
 8007db6:	4603      	mov	r3, r0
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d001      	beq.n	8007dc0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007dbc:	2303      	movs	r3, #3
 8007dbe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3710      	adds	r7, #16
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}

08007dca <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007dca:	b580      	push	{r7, lr}
 8007dcc:	b084      	sub	sp, #16
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	6078      	str	r0, [r7, #4]
 8007dd2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007dda:	6839      	ldr	r1, [r7, #0]
 8007ddc:	4618      	mov	r0, r3
 8007dde:	f001 f90e 	bl	8008ffe <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2201      	movs	r2, #1
 8007de6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007df0:	461a      	mov	r2, r3
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007dfe:	f003 031f 	and.w	r3, r3, #31
 8007e02:	2b02      	cmp	r3, #2
 8007e04:	d01a      	beq.n	8007e3c <USBD_LL_SetupStage+0x72>
 8007e06:	2b02      	cmp	r3, #2
 8007e08:	d822      	bhi.n	8007e50 <USBD_LL_SetupStage+0x86>
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d002      	beq.n	8007e14 <USBD_LL_SetupStage+0x4a>
 8007e0e:	2b01      	cmp	r3, #1
 8007e10:	d00a      	beq.n	8007e28 <USBD_LL_SetupStage+0x5e>
 8007e12:	e01d      	b.n	8007e50 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007e1a:	4619      	mov	r1, r3
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f000 fb65 	bl	80084ec <USBD_StdDevReq>
 8007e22:	4603      	mov	r3, r0
 8007e24:	73fb      	strb	r3, [r7, #15]
      break;
 8007e26:	e020      	b.n	8007e6a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007e2e:	4619      	mov	r1, r3
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f000 fbcd 	bl	80085d0 <USBD_StdItfReq>
 8007e36:	4603      	mov	r3, r0
 8007e38:	73fb      	strb	r3, [r7, #15]
      break;
 8007e3a:	e016      	b.n	8007e6a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007e42:	4619      	mov	r1, r3
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f000 fc2f 	bl	80086a8 <USBD_StdEPReq>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	73fb      	strb	r3, [r7, #15]
      break;
 8007e4e:	e00c      	b.n	8007e6a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007e56:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007e5a:	b2db      	uxtb	r3, r3
 8007e5c:	4619      	mov	r1, r3
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f003 f8d2 	bl	800b008 <USBD_LL_StallEP>
 8007e64:	4603      	mov	r3, r0
 8007e66:	73fb      	strb	r3, [r7, #15]
      break;
 8007e68:	bf00      	nop
  }

  return ret;
 8007e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3710      	adds	r7, #16
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}

08007e74 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b086      	sub	sp, #24
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	60f8      	str	r0, [r7, #12]
 8007e7c:	460b      	mov	r3, r1
 8007e7e:	607a      	str	r2, [r7, #4]
 8007e80:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007e82:	2300      	movs	r3, #0
 8007e84:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007e86:	7afb      	ldrb	r3, [r7, #11]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d16e      	bne.n	8007f6a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007e92:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007e9a:	2b03      	cmp	r3, #3
 8007e9c:	f040 8098 	bne.w	8007fd0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	689a      	ldr	r2, [r3, #8]
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	68db      	ldr	r3, [r3, #12]
 8007ea8:	429a      	cmp	r2, r3
 8007eaa:	d913      	bls.n	8007ed4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	689a      	ldr	r2, [r3, #8]
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	68db      	ldr	r3, [r3, #12]
 8007eb4:	1ad2      	subs	r2, r2, r3
 8007eb6:	693b      	ldr	r3, [r7, #16]
 8007eb8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	68da      	ldr	r2, [r3, #12]
 8007ebe:	693b      	ldr	r3, [r7, #16]
 8007ec0:	689b      	ldr	r3, [r3, #8]
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	bf28      	it	cs
 8007ec6:	4613      	movcs	r3, r2
 8007ec8:	461a      	mov	r2, r3
 8007eca:	6879      	ldr	r1, [r7, #4]
 8007ecc:	68f8      	ldr	r0, [r7, #12]
 8007ece:	f001 f98a 	bl	80091e6 <USBD_CtlContinueRx>
 8007ed2:	e07d      	b.n	8007fd0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007eda:	f003 031f 	and.w	r3, r3, #31
 8007ede:	2b02      	cmp	r3, #2
 8007ee0:	d014      	beq.n	8007f0c <USBD_LL_DataOutStage+0x98>
 8007ee2:	2b02      	cmp	r3, #2
 8007ee4:	d81d      	bhi.n	8007f22 <USBD_LL_DataOutStage+0xae>
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d002      	beq.n	8007ef0 <USBD_LL_DataOutStage+0x7c>
 8007eea:	2b01      	cmp	r3, #1
 8007eec:	d003      	beq.n	8007ef6 <USBD_LL_DataOutStage+0x82>
 8007eee:	e018      	b.n	8007f22 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	75bb      	strb	r3, [r7, #22]
            break;
 8007ef4:	e018      	b.n	8007f28 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007efc:	b2db      	uxtb	r3, r3
 8007efe:	4619      	mov	r1, r3
 8007f00:	68f8      	ldr	r0, [r7, #12]
 8007f02:	f000 fa64 	bl	80083ce <USBD_CoreFindIF>
 8007f06:	4603      	mov	r3, r0
 8007f08:	75bb      	strb	r3, [r7, #22]
            break;
 8007f0a:	e00d      	b.n	8007f28 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007f12:	b2db      	uxtb	r3, r3
 8007f14:	4619      	mov	r1, r3
 8007f16:	68f8      	ldr	r0, [r7, #12]
 8007f18:	f000 fa66 	bl	80083e8 <USBD_CoreFindEP>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	75bb      	strb	r3, [r7, #22]
            break;
 8007f20:	e002      	b.n	8007f28 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007f22:	2300      	movs	r3, #0
 8007f24:	75bb      	strb	r3, [r7, #22]
            break;
 8007f26:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007f28:	7dbb      	ldrb	r3, [r7, #22]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d119      	bne.n	8007f62 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f34:	b2db      	uxtb	r3, r3
 8007f36:	2b03      	cmp	r3, #3
 8007f38:	d113      	bne.n	8007f62 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007f3a:	7dba      	ldrb	r2, [r7, #22]
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	32ae      	adds	r2, #174	; 0xae
 8007f40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f44:	691b      	ldr	r3, [r3, #16]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d00b      	beq.n	8007f62 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007f4a:	7dba      	ldrb	r2, [r7, #22]
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007f52:	7dba      	ldrb	r2, [r7, #22]
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	32ae      	adds	r2, #174	; 0xae
 8007f58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f5c:	691b      	ldr	r3, [r3, #16]
 8007f5e:	68f8      	ldr	r0, [r7, #12]
 8007f60:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007f62:	68f8      	ldr	r0, [r7, #12]
 8007f64:	f001 f950 	bl	8009208 <USBD_CtlSendStatus>
 8007f68:	e032      	b.n	8007fd0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007f6a:	7afb      	ldrb	r3, [r7, #11]
 8007f6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f70:	b2db      	uxtb	r3, r3
 8007f72:	4619      	mov	r1, r3
 8007f74:	68f8      	ldr	r0, [r7, #12]
 8007f76:	f000 fa37 	bl	80083e8 <USBD_CoreFindEP>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007f7e:	7dbb      	ldrb	r3, [r7, #22]
 8007f80:	2bff      	cmp	r3, #255	; 0xff
 8007f82:	d025      	beq.n	8007fd0 <USBD_LL_DataOutStage+0x15c>
 8007f84:	7dbb      	ldrb	r3, [r7, #22]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d122      	bne.n	8007fd0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f90:	b2db      	uxtb	r3, r3
 8007f92:	2b03      	cmp	r3, #3
 8007f94:	d117      	bne.n	8007fc6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007f96:	7dba      	ldrb	r2, [r7, #22]
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	32ae      	adds	r2, #174	; 0xae
 8007f9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fa0:	699b      	ldr	r3, [r3, #24]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d00f      	beq.n	8007fc6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007fa6:	7dba      	ldrb	r2, [r7, #22]
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007fae:	7dba      	ldrb	r2, [r7, #22]
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	32ae      	adds	r2, #174	; 0xae
 8007fb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fb8:	699b      	ldr	r3, [r3, #24]
 8007fba:	7afa      	ldrb	r2, [r7, #11]
 8007fbc:	4611      	mov	r1, r2
 8007fbe:	68f8      	ldr	r0, [r7, #12]
 8007fc0:	4798      	blx	r3
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007fc6:	7dfb      	ldrb	r3, [r7, #23]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d001      	beq.n	8007fd0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007fcc:	7dfb      	ldrb	r3, [r7, #23]
 8007fce:	e000      	b.n	8007fd2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007fd0:	2300      	movs	r3, #0
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3718      	adds	r7, #24
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}

08007fda <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007fda:	b580      	push	{r7, lr}
 8007fdc:	b086      	sub	sp, #24
 8007fde:	af00      	add	r7, sp, #0
 8007fe0:	60f8      	str	r0, [r7, #12]
 8007fe2:	460b      	mov	r3, r1
 8007fe4:	607a      	str	r2, [r7, #4]
 8007fe6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007fe8:	7afb      	ldrb	r3, [r7, #11]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d16f      	bne.n	80080ce <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	3314      	adds	r3, #20
 8007ff2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007ffa:	2b02      	cmp	r3, #2
 8007ffc:	d15a      	bne.n	80080b4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	689a      	ldr	r2, [r3, #8]
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	68db      	ldr	r3, [r3, #12]
 8008006:	429a      	cmp	r2, r3
 8008008:	d914      	bls.n	8008034 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	689a      	ldr	r2, [r3, #8]
 800800e:	693b      	ldr	r3, [r7, #16]
 8008010:	68db      	ldr	r3, [r3, #12]
 8008012:	1ad2      	subs	r2, r2, r3
 8008014:	693b      	ldr	r3, [r7, #16]
 8008016:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	689b      	ldr	r3, [r3, #8]
 800801c:	461a      	mov	r2, r3
 800801e:	6879      	ldr	r1, [r7, #4]
 8008020:	68f8      	ldr	r0, [r7, #12]
 8008022:	f001 f8b2 	bl	800918a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008026:	2300      	movs	r3, #0
 8008028:	2200      	movs	r2, #0
 800802a:	2100      	movs	r1, #0
 800802c:	68f8      	ldr	r0, [r7, #12]
 800802e:	f003 f895 	bl	800b15c <USBD_LL_PrepareReceive>
 8008032:	e03f      	b.n	80080b4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008034:	693b      	ldr	r3, [r7, #16]
 8008036:	68da      	ldr	r2, [r3, #12]
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	689b      	ldr	r3, [r3, #8]
 800803c:	429a      	cmp	r2, r3
 800803e:	d11c      	bne.n	800807a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	685a      	ldr	r2, [r3, #4]
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008048:	429a      	cmp	r2, r3
 800804a:	d316      	bcc.n	800807a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800804c:	693b      	ldr	r3, [r7, #16]
 800804e:	685a      	ldr	r2, [r3, #4]
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008056:	429a      	cmp	r2, r3
 8008058:	d20f      	bcs.n	800807a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800805a:	2200      	movs	r2, #0
 800805c:	2100      	movs	r1, #0
 800805e:	68f8      	ldr	r0, [r7, #12]
 8008060:	f001 f893 	bl	800918a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	2200      	movs	r2, #0
 8008068:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800806c:	2300      	movs	r3, #0
 800806e:	2200      	movs	r2, #0
 8008070:	2100      	movs	r1, #0
 8008072:	68f8      	ldr	r0, [r7, #12]
 8008074:	f003 f872 	bl	800b15c <USBD_LL_PrepareReceive>
 8008078:	e01c      	b.n	80080b4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008080:	b2db      	uxtb	r3, r3
 8008082:	2b03      	cmp	r3, #3
 8008084:	d10f      	bne.n	80080a6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800808c:	68db      	ldr	r3, [r3, #12]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d009      	beq.n	80080a6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	2200      	movs	r2, #0
 8008096:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080a0:	68db      	ldr	r3, [r3, #12]
 80080a2:	68f8      	ldr	r0, [r7, #12]
 80080a4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80080a6:	2180      	movs	r1, #128	; 0x80
 80080a8:	68f8      	ldr	r0, [r7, #12]
 80080aa:	f002 ffad 	bl	800b008 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80080ae:	68f8      	ldr	r0, [r7, #12]
 80080b0:	f001 f8bd 	bl	800922e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d03a      	beq.n	8008134 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80080be:	68f8      	ldr	r0, [r7, #12]
 80080c0:	f7ff fe42 	bl	8007d48 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	2200      	movs	r2, #0
 80080c8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80080cc:	e032      	b.n	8008134 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80080ce:	7afb      	ldrb	r3, [r7, #11]
 80080d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80080d4:	b2db      	uxtb	r3, r3
 80080d6:	4619      	mov	r1, r3
 80080d8:	68f8      	ldr	r0, [r7, #12]
 80080da:	f000 f985 	bl	80083e8 <USBD_CoreFindEP>
 80080de:	4603      	mov	r3, r0
 80080e0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80080e2:	7dfb      	ldrb	r3, [r7, #23]
 80080e4:	2bff      	cmp	r3, #255	; 0xff
 80080e6:	d025      	beq.n	8008134 <USBD_LL_DataInStage+0x15a>
 80080e8:	7dfb      	ldrb	r3, [r7, #23]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d122      	bne.n	8008134 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080f4:	b2db      	uxtb	r3, r3
 80080f6:	2b03      	cmp	r3, #3
 80080f8:	d11c      	bne.n	8008134 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80080fa:	7dfa      	ldrb	r2, [r7, #23]
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	32ae      	adds	r2, #174	; 0xae
 8008100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008104:	695b      	ldr	r3, [r3, #20]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d014      	beq.n	8008134 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800810a:	7dfa      	ldrb	r2, [r7, #23]
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008112:	7dfa      	ldrb	r2, [r7, #23]
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	32ae      	adds	r2, #174	; 0xae
 8008118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800811c:	695b      	ldr	r3, [r3, #20]
 800811e:	7afa      	ldrb	r2, [r7, #11]
 8008120:	4611      	mov	r1, r2
 8008122:	68f8      	ldr	r0, [r7, #12]
 8008124:	4798      	blx	r3
 8008126:	4603      	mov	r3, r0
 8008128:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800812a:	7dbb      	ldrb	r3, [r7, #22]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d001      	beq.n	8008134 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008130:	7dbb      	ldrb	r3, [r7, #22]
 8008132:	e000      	b.n	8008136 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008134:	2300      	movs	r3, #0
}
 8008136:	4618      	mov	r0, r3
 8008138:	3718      	adds	r7, #24
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}

0800813e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800813e:	b580      	push	{r7, lr}
 8008140:	b084      	sub	sp, #16
 8008142:	af00      	add	r7, sp, #0
 8008144:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008146:	2300      	movs	r3, #0
 8008148:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2201      	movs	r2, #1
 800814e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2200      	movs	r2, #0
 8008156:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2200      	movs	r2, #0
 800815e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2200      	movs	r2, #0
 8008164:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2200      	movs	r2, #0
 800816c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008176:	2b00      	cmp	r3, #0
 8008178:	d014      	beq.n	80081a4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008180:	685b      	ldr	r3, [r3, #4]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d00e      	beq.n	80081a4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800818c:	685b      	ldr	r3, [r3, #4]
 800818e:	687a      	ldr	r2, [r7, #4]
 8008190:	6852      	ldr	r2, [r2, #4]
 8008192:	b2d2      	uxtb	r2, r2
 8008194:	4611      	mov	r1, r2
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	4798      	blx	r3
 800819a:	4603      	mov	r3, r0
 800819c:	2b00      	cmp	r3, #0
 800819e:	d001      	beq.n	80081a4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80081a0:	2303      	movs	r3, #3
 80081a2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80081a4:	2340      	movs	r3, #64	; 0x40
 80081a6:	2200      	movs	r2, #0
 80081a8:	2100      	movs	r1, #0
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f002 fee7 	bl	800af7e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2201      	movs	r2, #1
 80081b4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2240      	movs	r2, #64	; 0x40
 80081bc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80081c0:	2340      	movs	r3, #64	; 0x40
 80081c2:	2200      	movs	r2, #0
 80081c4:	2180      	movs	r1, #128	; 0x80
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f002 fed9 	bl	800af7e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2201      	movs	r2, #1
 80081d0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2240      	movs	r2, #64	; 0x40
 80081d6:	621a      	str	r2, [r3, #32]

  return ret;
 80081d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3710      	adds	r7, #16
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}

080081e2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80081e2:	b480      	push	{r7}
 80081e4:	b083      	sub	sp, #12
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	6078      	str	r0, [r7, #4]
 80081ea:	460b      	mov	r3, r1
 80081ec:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	78fa      	ldrb	r2, [r7, #3]
 80081f2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80081f4:	2300      	movs	r3, #0
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	370c      	adds	r7, #12
 80081fa:	46bd      	mov	sp, r7
 80081fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008200:	4770      	bx	lr

08008202 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008202:	b480      	push	{r7}
 8008204:	b083      	sub	sp, #12
 8008206:	af00      	add	r7, sp, #0
 8008208:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008210:	b2db      	uxtb	r3, r3
 8008212:	2b04      	cmp	r3, #4
 8008214:	d006      	beq.n	8008224 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800821c:	b2da      	uxtb	r2, r3
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2204      	movs	r2, #4
 8008228:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800822c:	2300      	movs	r3, #0
}
 800822e:	4618      	mov	r0, r3
 8008230:	370c      	adds	r7, #12
 8008232:	46bd      	mov	sp, r7
 8008234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008238:	4770      	bx	lr

0800823a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800823a:	b480      	push	{r7}
 800823c:	b083      	sub	sp, #12
 800823e:	af00      	add	r7, sp, #0
 8008240:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008248:	b2db      	uxtb	r3, r3
 800824a:	2b04      	cmp	r3, #4
 800824c:	d106      	bne.n	800825c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008254:	b2da      	uxtb	r2, r3
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800825c:	2300      	movs	r3, #0
}
 800825e:	4618      	mov	r0, r3
 8008260:	370c      	adds	r7, #12
 8008262:	46bd      	mov	sp, r7
 8008264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008268:	4770      	bx	lr

0800826a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800826a:	b580      	push	{r7, lr}
 800826c:	b082      	sub	sp, #8
 800826e:	af00      	add	r7, sp, #0
 8008270:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008278:	b2db      	uxtb	r3, r3
 800827a:	2b03      	cmp	r3, #3
 800827c:	d110      	bne.n	80082a0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008284:	2b00      	cmp	r3, #0
 8008286:	d00b      	beq.n	80082a0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800828e:	69db      	ldr	r3, [r3, #28]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d005      	beq.n	80082a0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800829a:	69db      	ldr	r3, [r3, #28]
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80082a0:	2300      	movs	r3, #0
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	3708      	adds	r7, #8
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}

080082aa <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80082aa:	b580      	push	{r7, lr}
 80082ac:	b082      	sub	sp, #8
 80082ae:	af00      	add	r7, sp, #0
 80082b0:	6078      	str	r0, [r7, #4]
 80082b2:	460b      	mov	r3, r1
 80082b4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	32ae      	adds	r2, #174	; 0xae
 80082c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d101      	bne.n	80082cc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80082c8:	2303      	movs	r3, #3
 80082ca:	e01c      	b.n	8008306 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082d2:	b2db      	uxtb	r3, r3
 80082d4:	2b03      	cmp	r3, #3
 80082d6:	d115      	bne.n	8008304 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	32ae      	adds	r2, #174	; 0xae
 80082e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082e6:	6a1b      	ldr	r3, [r3, #32]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d00b      	beq.n	8008304 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	32ae      	adds	r2, #174	; 0xae
 80082f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082fa:	6a1b      	ldr	r3, [r3, #32]
 80082fc:	78fa      	ldrb	r2, [r7, #3]
 80082fe:	4611      	mov	r1, r2
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008304:	2300      	movs	r3, #0
}
 8008306:	4618      	mov	r0, r3
 8008308:	3708      	adds	r7, #8
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}

0800830e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800830e:	b580      	push	{r7, lr}
 8008310:	b082      	sub	sp, #8
 8008312:	af00      	add	r7, sp, #0
 8008314:	6078      	str	r0, [r7, #4]
 8008316:	460b      	mov	r3, r1
 8008318:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	32ae      	adds	r2, #174	; 0xae
 8008324:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d101      	bne.n	8008330 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800832c:	2303      	movs	r3, #3
 800832e:	e01c      	b.n	800836a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008336:	b2db      	uxtb	r3, r3
 8008338:	2b03      	cmp	r3, #3
 800833a:	d115      	bne.n	8008368 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	32ae      	adds	r2, #174	; 0xae
 8008346:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800834a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800834c:	2b00      	cmp	r3, #0
 800834e:	d00b      	beq.n	8008368 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	32ae      	adds	r2, #174	; 0xae
 800835a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800835e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008360:	78fa      	ldrb	r2, [r7, #3]
 8008362:	4611      	mov	r1, r2
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008368:	2300      	movs	r3, #0
}
 800836a:	4618      	mov	r0, r3
 800836c:	3708      	adds	r7, #8
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}

08008372 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008372:	b480      	push	{r7}
 8008374:	b083      	sub	sp, #12
 8008376:	af00      	add	r7, sp, #0
 8008378:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800837a:	2300      	movs	r3, #0
}
 800837c:	4618      	mov	r0, r3
 800837e:	370c      	adds	r7, #12
 8008380:	46bd      	mov	sp, r7
 8008382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008386:	4770      	bx	lr

08008388 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b084      	sub	sp, #16
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008390:	2300      	movs	r3, #0
 8008392:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2201      	movs	r2, #1
 8008398:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d00e      	beq.n	80083c4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083ac:	685b      	ldr	r3, [r3, #4]
 80083ae:	687a      	ldr	r2, [r7, #4]
 80083b0:	6852      	ldr	r2, [r2, #4]
 80083b2:	b2d2      	uxtb	r2, r2
 80083b4:	4611      	mov	r1, r2
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	4798      	blx	r3
 80083ba:	4603      	mov	r3, r0
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d001      	beq.n	80083c4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80083c0:	2303      	movs	r3, #3
 80083c2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80083c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3710      	adds	r7, #16
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}

080083ce <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80083ce:	b480      	push	{r7}
 80083d0:	b083      	sub	sp, #12
 80083d2:	af00      	add	r7, sp, #0
 80083d4:	6078      	str	r0, [r7, #4]
 80083d6:	460b      	mov	r3, r1
 80083d8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80083da:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80083dc:	4618      	mov	r0, r3
 80083de:	370c      	adds	r7, #12
 80083e0:	46bd      	mov	sp, r7
 80083e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e6:	4770      	bx	lr

080083e8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80083e8:	b480      	push	{r7}
 80083ea:	b083      	sub	sp, #12
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
 80083f0:	460b      	mov	r3, r1
 80083f2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80083f4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	370c      	adds	r7, #12
 80083fa:	46bd      	mov	sp, r7
 80083fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008400:	4770      	bx	lr

08008402 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008402:	b580      	push	{r7, lr}
 8008404:	b086      	sub	sp, #24
 8008406:	af00      	add	r7, sp, #0
 8008408:	6078      	str	r0, [r7, #4]
 800840a:	460b      	mov	r3, r1
 800840c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008416:	2300      	movs	r3, #0
 8008418:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	885b      	ldrh	r3, [r3, #2]
 800841e:	b29a      	uxth	r2, r3
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	781b      	ldrb	r3, [r3, #0]
 8008424:	b29b      	uxth	r3, r3
 8008426:	429a      	cmp	r2, r3
 8008428:	d920      	bls.n	800846c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	781b      	ldrb	r3, [r3, #0]
 800842e:	b29b      	uxth	r3, r3
 8008430:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008432:	e013      	b.n	800845c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008434:	f107 030a 	add.w	r3, r7, #10
 8008438:	4619      	mov	r1, r3
 800843a:	6978      	ldr	r0, [r7, #20]
 800843c:	f000 f81b 	bl	8008476 <USBD_GetNextDesc>
 8008440:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	785b      	ldrb	r3, [r3, #1]
 8008446:	2b05      	cmp	r3, #5
 8008448:	d108      	bne.n	800845c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800844a:	697b      	ldr	r3, [r7, #20]
 800844c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800844e:	693b      	ldr	r3, [r7, #16]
 8008450:	789b      	ldrb	r3, [r3, #2]
 8008452:	78fa      	ldrb	r2, [r7, #3]
 8008454:	429a      	cmp	r2, r3
 8008456:	d008      	beq.n	800846a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008458:	2300      	movs	r3, #0
 800845a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	885b      	ldrh	r3, [r3, #2]
 8008460:	b29a      	uxth	r2, r3
 8008462:	897b      	ldrh	r3, [r7, #10]
 8008464:	429a      	cmp	r2, r3
 8008466:	d8e5      	bhi.n	8008434 <USBD_GetEpDesc+0x32>
 8008468:	e000      	b.n	800846c <USBD_GetEpDesc+0x6a>
          break;
 800846a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800846c:	693b      	ldr	r3, [r7, #16]
}
 800846e:	4618      	mov	r0, r3
 8008470:	3718      	adds	r7, #24
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}

08008476 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008476:	b480      	push	{r7}
 8008478:	b085      	sub	sp, #20
 800847a:	af00      	add	r7, sp, #0
 800847c:	6078      	str	r0, [r7, #4]
 800847e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	881a      	ldrh	r2, [r3, #0]
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	781b      	ldrb	r3, [r3, #0]
 800848c:	b29b      	uxth	r3, r3
 800848e:	4413      	add	r3, r2
 8008490:	b29a      	uxth	r2, r3
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	781b      	ldrb	r3, [r3, #0]
 800849a:	461a      	mov	r2, r3
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	4413      	add	r3, r2
 80084a0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80084a2:	68fb      	ldr	r3, [r7, #12]
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	3714      	adds	r7, #20
 80084a8:	46bd      	mov	sp, r7
 80084aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ae:	4770      	bx	lr

080084b0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80084b0:	b480      	push	{r7}
 80084b2:	b087      	sub	sp, #28
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	781b      	ldrb	r3, [r3, #0]
 80084c0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	3301      	adds	r3, #1
 80084c6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	781b      	ldrb	r3, [r3, #0]
 80084cc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80084ce:	8a3b      	ldrh	r3, [r7, #16]
 80084d0:	021b      	lsls	r3, r3, #8
 80084d2:	b21a      	sxth	r2, r3
 80084d4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80084d8:	4313      	orrs	r3, r2
 80084da:	b21b      	sxth	r3, r3
 80084dc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80084de:	89fb      	ldrh	r3, [r7, #14]
}
 80084e0:	4618      	mov	r0, r3
 80084e2:	371c      	adds	r7, #28
 80084e4:	46bd      	mov	sp, r7
 80084e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ea:	4770      	bx	lr

080084ec <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b084      	sub	sp, #16
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
 80084f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80084f6:	2300      	movs	r3, #0
 80084f8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	781b      	ldrb	r3, [r3, #0]
 80084fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008502:	2b40      	cmp	r3, #64	; 0x40
 8008504:	d005      	beq.n	8008512 <USBD_StdDevReq+0x26>
 8008506:	2b40      	cmp	r3, #64	; 0x40
 8008508:	d857      	bhi.n	80085ba <USBD_StdDevReq+0xce>
 800850a:	2b00      	cmp	r3, #0
 800850c:	d00f      	beq.n	800852e <USBD_StdDevReq+0x42>
 800850e:	2b20      	cmp	r3, #32
 8008510:	d153      	bne.n	80085ba <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	32ae      	adds	r2, #174	; 0xae
 800851c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008520:	689b      	ldr	r3, [r3, #8]
 8008522:	6839      	ldr	r1, [r7, #0]
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	4798      	blx	r3
 8008528:	4603      	mov	r3, r0
 800852a:	73fb      	strb	r3, [r7, #15]
      break;
 800852c:	e04a      	b.n	80085c4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	785b      	ldrb	r3, [r3, #1]
 8008532:	2b09      	cmp	r3, #9
 8008534:	d83b      	bhi.n	80085ae <USBD_StdDevReq+0xc2>
 8008536:	a201      	add	r2, pc, #4	; (adr r2, 800853c <USBD_StdDevReq+0x50>)
 8008538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800853c:	08008591 	.word	0x08008591
 8008540:	080085a5 	.word	0x080085a5
 8008544:	080085af 	.word	0x080085af
 8008548:	0800859b 	.word	0x0800859b
 800854c:	080085af 	.word	0x080085af
 8008550:	0800856f 	.word	0x0800856f
 8008554:	08008565 	.word	0x08008565
 8008558:	080085af 	.word	0x080085af
 800855c:	08008587 	.word	0x08008587
 8008560:	08008579 	.word	0x08008579
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008564:	6839      	ldr	r1, [r7, #0]
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f000 fa3c 	bl	80089e4 <USBD_GetDescriptor>
          break;
 800856c:	e024      	b.n	80085b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800856e:	6839      	ldr	r1, [r7, #0]
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f000 fba1 	bl	8008cb8 <USBD_SetAddress>
          break;
 8008576:	e01f      	b.n	80085b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008578:	6839      	ldr	r1, [r7, #0]
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f000 fbe0 	bl	8008d40 <USBD_SetConfig>
 8008580:	4603      	mov	r3, r0
 8008582:	73fb      	strb	r3, [r7, #15]
          break;
 8008584:	e018      	b.n	80085b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008586:	6839      	ldr	r1, [r7, #0]
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f000 fc83 	bl	8008e94 <USBD_GetConfig>
          break;
 800858e:	e013      	b.n	80085b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008590:	6839      	ldr	r1, [r7, #0]
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f000 fcb4 	bl	8008f00 <USBD_GetStatus>
          break;
 8008598:	e00e      	b.n	80085b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800859a:	6839      	ldr	r1, [r7, #0]
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f000 fce3 	bl	8008f68 <USBD_SetFeature>
          break;
 80085a2:	e009      	b.n	80085b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80085a4:	6839      	ldr	r1, [r7, #0]
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f000 fd07 	bl	8008fba <USBD_ClrFeature>
          break;
 80085ac:	e004      	b.n	80085b8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80085ae:	6839      	ldr	r1, [r7, #0]
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f000 fd5e 	bl	8009072 <USBD_CtlError>
          break;
 80085b6:	bf00      	nop
      }
      break;
 80085b8:	e004      	b.n	80085c4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80085ba:	6839      	ldr	r1, [r7, #0]
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f000 fd58 	bl	8009072 <USBD_CtlError>
      break;
 80085c2:	bf00      	nop
  }

  return ret;
 80085c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3710      	adds	r7, #16
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}
 80085ce:	bf00      	nop

080085d0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b084      	sub	sp, #16
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
 80085d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80085da:	2300      	movs	r3, #0
 80085dc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	781b      	ldrb	r3, [r3, #0]
 80085e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80085e6:	2b40      	cmp	r3, #64	; 0x40
 80085e8:	d005      	beq.n	80085f6 <USBD_StdItfReq+0x26>
 80085ea:	2b40      	cmp	r3, #64	; 0x40
 80085ec:	d852      	bhi.n	8008694 <USBD_StdItfReq+0xc4>
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d001      	beq.n	80085f6 <USBD_StdItfReq+0x26>
 80085f2:	2b20      	cmp	r3, #32
 80085f4:	d14e      	bne.n	8008694 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085fc:	b2db      	uxtb	r3, r3
 80085fe:	3b01      	subs	r3, #1
 8008600:	2b02      	cmp	r3, #2
 8008602:	d840      	bhi.n	8008686 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	889b      	ldrh	r3, [r3, #4]
 8008608:	b2db      	uxtb	r3, r3
 800860a:	2b01      	cmp	r3, #1
 800860c:	d836      	bhi.n	800867c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	889b      	ldrh	r3, [r3, #4]
 8008612:	b2db      	uxtb	r3, r3
 8008614:	4619      	mov	r1, r3
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f7ff fed9 	bl	80083ce <USBD_CoreFindIF>
 800861c:	4603      	mov	r3, r0
 800861e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008620:	7bbb      	ldrb	r3, [r7, #14]
 8008622:	2bff      	cmp	r3, #255	; 0xff
 8008624:	d01d      	beq.n	8008662 <USBD_StdItfReq+0x92>
 8008626:	7bbb      	ldrb	r3, [r7, #14]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d11a      	bne.n	8008662 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800862c:	7bba      	ldrb	r2, [r7, #14]
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	32ae      	adds	r2, #174	; 0xae
 8008632:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008636:	689b      	ldr	r3, [r3, #8]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d00f      	beq.n	800865c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800863c:	7bba      	ldrb	r2, [r7, #14]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008644:	7bba      	ldrb	r2, [r7, #14]
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	32ae      	adds	r2, #174	; 0xae
 800864a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800864e:	689b      	ldr	r3, [r3, #8]
 8008650:	6839      	ldr	r1, [r7, #0]
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	4798      	blx	r3
 8008656:	4603      	mov	r3, r0
 8008658:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800865a:	e004      	b.n	8008666 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800865c:	2303      	movs	r3, #3
 800865e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008660:	e001      	b.n	8008666 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008662:	2303      	movs	r3, #3
 8008664:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	88db      	ldrh	r3, [r3, #6]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d110      	bne.n	8008690 <USBD_StdItfReq+0xc0>
 800866e:	7bfb      	ldrb	r3, [r7, #15]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d10d      	bne.n	8008690 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f000 fdc7 	bl	8009208 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800867a:	e009      	b.n	8008690 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800867c:	6839      	ldr	r1, [r7, #0]
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f000 fcf7 	bl	8009072 <USBD_CtlError>
          break;
 8008684:	e004      	b.n	8008690 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008686:	6839      	ldr	r1, [r7, #0]
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	f000 fcf2 	bl	8009072 <USBD_CtlError>
          break;
 800868e:	e000      	b.n	8008692 <USBD_StdItfReq+0xc2>
          break;
 8008690:	bf00      	nop
      }
      break;
 8008692:	e004      	b.n	800869e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008694:	6839      	ldr	r1, [r7, #0]
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f000 fceb 	bl	8009072 <USBD_CtlError>
      break;
 800869c:	bf00      	nop
  }

  return ret;
 800869e:	7bfb      	ldrb	r3, [r7, #15]
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	3710      	adds	r7, #16
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}

080086a8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b084      	sub	sp, #16
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
 80086b0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80086b2:	2300      	movs	r3, #0
 80086b4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	889b      	ldrh	r3, [r3, #4]
 80086ba:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	781b      	ldrb	r3, [r3, #0]
 80086c0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80086c4:	2b40      	cmp	r3, #64	; 0x40
 80086c6:	d007      	beq.n	80086d8 <USBD_StdEPReq+0x30>
 80086c8:	2b40      	cmp	r3, #64	; 0x40
 80086ca:	f200 817f 	bhi.w	80089cc <USBD_StdEPReq+0x324>
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d02a      	beq.n	8008728 <USBD_StdEPReq+0x80>
 80086d2:	2b20      	cmp	r3, #32
 80086d4:	f040 817a 	bne.w	80089cc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80086d8:	7bbb      	ldrb	r3, [r7, #14]
 80086da:	4619      	mov	r1, r3
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f7ff fe83 	bl	80083e8 <USBD_CoreFindEP>
 80086e2:	4603      	mov	r3, r0
 80086e4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80086e6:	7b7b      	ldrb	r3, [r7, #13]
 80086e8:	2bff      	cmp	r3, #255	; 0xff
 80086ea:	f000 8174 	beq.w	80089d6 <USBD_StdEPReq+0x32e>
 80086ee:	7b7b      	ldrb	r3, [r7, #13]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	f040 8170 	bne.w	80089d6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80086f6:	7b7a      	ldrb	r2, [r7, #13]
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80086fe:	7b7a      	ldrb	r2, [r7, #13]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	32ae      	adds	r2, #174	; 0xae
 8008704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008708:	689b      	ldr	r3, [r3, #8]
 800870a:	2b00      	cmp	r3, #0
 800870c:	f000 8163 	beq.w	80089d6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008710:	7b7a      	ldrb	r2, [r7, #13]
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	32ae      	adds	r2, #174	; 0xae
 8008716:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800871a:	689b      	ldr	r3, [r3, #8]
 800871c:	6839      	ldr	r1, [r7, #0]
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	4798      	blx	r3
 8008722:	4603      	mov	r3, r0
 8008724:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008726:	e156      	b.n	80089d6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	785b      	ldrb	r3, [r3, #1]
 800872c:	2b03      	cmp	r3, #3
 800872e:	d008      	beq.n	8008742 <USBD_StdEPReq+0x9a>
 8008730:	2b03      	cmp	r3, #3
 8008732:	f300 8145 	bgt.w	80089c0 <USBD_StdEPReq+0x318>
 8008736:	2b00      	cmp	r3, #0
 8008738:	f000 809b 	beq.w	8008872 <USBD_StdEPReq+0x1ca>
 800873c:	2b01      	cmp	r3, #1
 800873e:	d03c      	beq.n	80087ba <USBD_StdEPReq+0x112>
 8008740:	e13e      	b.n	80089c0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008748:	b2db      	uxtb	r3, r3
 800874a:	2b02      	cmp	r3, #2
 800874c:	d002      	beq.n	8008754 <USBD_StdEPReq+0xac>
 800874e:	2b03      	cmp	r3, #3
 8008750:	d016      	beq.n	8008780 <USBD_StdEPReq+0xd8>
 8008752:	e02c      	b.n	80087ae <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008754:	7bbb      	ldrb	r3, [r7, #14]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d00d      	beq.n	8008776 <USBD_StdEPReq+0xce>
 800875a:	7bbb      	ldrb	r3, [r7, #14]
 800875c:	2b80      	cmp	r3, #128	; 0x80
 800875e:	d00a      	beq.n	8008776 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008760:	7bbb      	ldrb	r3, [r7, #14]
 8008762:	4619      	mov	r1, r3
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f002 fc4f 	bl	800b008 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800876a:	2180      	movs	r1, #128	; 0x80
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f002 fc4b 	bl	800b008 <USBD_LL_StallEP>
 8008772:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008774:	e020      	b.n	80087b8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008776:	6839      	ldr	r1, [r7, #0]
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f000 fc7a 	bl	8009072 <USBD_CtlError>
              break;
 800877e:	e01b      	b.n	80087b8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	885b      	ldrh	r3, [r3, #2]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d10e      	bne.n	80087a6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008788:	7bbb      	ldrb	r3, [r7, #14]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d00b      	beq.n	80087a6 <USBD_StdEPReq+0xfe>
 800878e:	7bbb      	ldrb	r3, [r7, #14]
 8008790:	2b80      	cmp	r3, #128	; 0x80
 8008792:	d008      	beq.n	80087a6 <USBD_StdEPReq+0xfe>
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	88db      	ldrh	r3, [r3, #6]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d104      	bne.n	80087a6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800879c:	7bbb      	ldrb	r3, [r7, #14]
 800879e:	4619      	mov	r1, r3
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f002 fc31 	bl	800b008 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f000 fd2e 	bl	8009208 <USBD_CtlSendStatus>

              break;
 80087ac:	e004      	b.n	80087b8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80087ae:	6839      	ldr	r1, [r7, #0]
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f000 fc5e 	bl	8009072 <USBD_CtlError>
              break;
 80087b6:	bf00      	nop
          }
          break;
 80087b8:	e107      	b.n	80089ca <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087c0:	b2db      	uxtb	r3, r3
 80087c2:	2b02      	cmp	r3, #2
 80087c4:	d002      	beq.n	80087cc <USBD_StdEPReq+0x124>
 80087c6:	2b03      	cmp	r3, #3
 80087c8:	d016      	beq.n	80087f8 <USBD_StdEPReq+0x150>
 80087ca:	e04b      	b.n	8008864 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80087cc:	7bbb      	ldrb	r3, [r7, #14]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d00d      	beq.n	80087ee <USBD_StdEPReq+0x146>
 80087d2:	7bbb      	ldrb	r3, [r7, #14]
 80087d4:	2b80      	cmp	r3, #128	; 0x80
 80087d6:	d00a      	beq.n	80087ee <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80087d8:	7bbb      	ldrb	r3, [r7, #14]
 80087da:	4619      	mov	r1, r3
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f002 fc13 	bl	800b008 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80087e2:	2180      	movs	r1, #128	; 0x80
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	f002 fc0f 	bl	800b008 <USBD_LL_StallEP>
 80087ea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80087ec:	e040      	b.n	8008870 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80087ee:	6839      	ldr	r1, [r7, #0]
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	f000 fc3e 	bl	8009072 <USBD_CtlError>
              break;
 80087f6:	e03b      	b.n	8008870 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	885b      	ldrh	r3, [r3, #2]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d136      	bne.n	800886e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008800:	7bbb      	ldrb	r3, [r7, #14]
 8008802:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008806:	2b00      	cmp	r3, #0
 8008808:	d004      	beq.n	8008814 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800880a:	7bbb      	ldrb	r3, [r7, #14]
 800880c:	4619      	mov	r1, r3
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f002 fc19 	bl	800b046 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f000 fcf7 	bl	8009208 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800881a:	7bbb      	ldrb	r3, [r7, #14]
 800881c:	4619      	mov	r1, r3
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f7ff fde2 	bl	80083e8 <USBD_CoreFindEP>
 8008824:	4603      	mov	r3, r0
 8008826:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008828:	7b7b      	ldrb	r3, [r7, #13]
 800882a:	2bff      	cmp	r3, #255	; 0xff
 800882c:	d01f      	beq.n	800886e <USBD_StdEPReq+0x1c6>
 800882e:	7b7b      	ldrb	r3, [r7, #13]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d11c      	bne.n	800886e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008834:	7b7a      	ldrb	r2, [r7, #13]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800883c:	7b7a      	ldrb	r2, [r7, #13]
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	32ae      	adds	r2, #174	; 0xae
 8008842:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008846:	689b      	ldr	r3, [r3, #8]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d010      	beq.n	800886e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800884c:	7b7a      	ldrb	r2, [r7, #13]
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	32ae      	adds	r2, #174	; 0xae
 8008852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008856:	689b      	ldr	r3, [r3, #8]
 8008858:	6839      	ldr	r1, [r7, #0]
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	4798      	blx	r3
 800885e:	4603      	mov	r3, r0
 8008860:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008862:	e004      	b.n	800886e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008864:	6839      	ldr	r1, [r7, #0]
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f000 fc03 	bl	8009072 <USBD_CtlError>
              break;
 800886c:	e000      	b.n	8008870 <USBD_StdEPReq+0x1c8>
              break;
 800886e:	bf00      	nop
          }
          break;
 8008870:	e0ab      	b.n	80089ca <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008878:	b2db      	uxtb	r3, r3
 800887a:	2b02      	cmp	r3, #2
 800887c:	d002      	beq.n	8008884 <USBD_StdEPReq+0x1dc>
 800887e:	2b03      	cmp	r3, #3
 8008880:	d032      	beq.n	80088e8 <USBD_StdEPReq+0x240>
 8008882:	e097      	b.n	80089b4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008884:	7bbb      	ldrb	r3, [r7, #14]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d007      	beq.n	800889a <USBD_StdEPReq+0x1f2>
 800888a:	7bbb      	ldrb	r3, [r7, #14]
 800888c:	2b80      	cmp	r3, #128	; 0x80
 800888e:	d004      	beq.n	800889a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008890:	6839      	ldr	r1, [r7, #0]
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f000 fbed 	bl	8009072 <USBD_CtlError>
                break;
 8008898:	e091      	b.n	80089be <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800889a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	da0b      	bge.n	80088ba <USBD_StdEPReq+0x212>
 80088a2:	7bbb      	ldrb	r3, [r7, #14]
 80088a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80088a8:	4613      	mov	r3, r2
 80088aa:	009b      	lsls	r3, r3, #2
 80088ac:	4413      	add	r3, r2
 80088ae:	009b      	lsls	r3, r3, #2
 80088b0:	3310      	adds	r3, #16
 80088b2:	687a      	ldr	r2, [r7, #4]
 80088b4:	4413      	add	r3, r2
 80088b6:	3304      	adds	r3, #4
 80088b8:	e00b      	b.n	80088d2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80088ba:	7bbb      	ldrb	r3, [r7, #14]
 80088bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80088c0:	4613      	mov	r3, r2
 80088c2:	009b      	lsls	r3, r3, #2
 80088c4:	4413      	add	r3, r2
 80088c6:	009b      	lsls	r3, r3, #2
 80088c8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80088cc:	687a      	ldr	r2, [r7, #4]
 80088ce:	4413      	add	r3, r2
 80088d0:	3304      	adds	r3, #4
 80088d2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	2200      	movs	r2, #0
 80088d8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	2202      	movs	r2, #2
 80088de:	4619      	mov	r1, r3
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f000 fc37 	bl	8009154 <USBD_CtlSendData>
              break;
 80088e6:	e06a      	b.n	80089be <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80088e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	da11      	bge.n	8008914 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80088f0:	7bbb      	ldrb	r3, [r7, #14]
 80088f2:	f003 020f 	and.w	r2, r3, #15
 80088f6:	6879      	ldr	r1, [r7, #4]
 80088f8:	4613      	mov	r3, r2
 80088fa:	009b      	lsls	r3, r3, #2
 80088fc:	4413      	add	r3, r2
 80088fe:	009b      	lsls	r3, r3, #2
 8008900:	440b      	add	r3, r1
 8008902:	3324      	adds	r3, #36	; 0x24
 8008904:	881b      	ldrh	r3, [r3, #0]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d117      	bne.n	800893a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800890a:	6839      	ldr	r1, [r7, #0]
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f000 fbb0 	bl	8009072 <USBD_CtlError>
                  break;
 8008912:	e054      	b.n	80089be <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008914:	7bbb      	ldrb	r3, [r7, #14]
 8008916:	f003 020f 	and.w	r2, r3, #15
 800891a:	6879      	ldr	r1, [r7, #4]
 800891c:	4613      	mov	r3, r2
 800891e:	009b      	lsls	r3, r3, #2
 8008920:	4413      	add	r3, r2
 8008922:	009b      	lsls	r3, r3, #2
 8008924:	440b      	add	r3, r1
 8008926:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800892a:	881b      	ldrh	r3, [r3, #0]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d104      	bne.n	800893a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008930:	6839      	ldr	r1, [r7, #0]
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f000 fb9d 	bl	8009072 <USBD_CtlError>
                  break;
 8008938:	e041      	b.n	80089be <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800893a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800893e:	2b00      	cmp	r3, #0
 8008940:	da0b      	bge.n	800895a <USBD_StdEPReq+0x2b2>
 8008942:	7bbb      	ldrb	r3, [r7, #14]
 8008944:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008948:	4613      	mov	r3, r2
 800894a:	009b      	lsls	r3, r3, #2
 800894c:	4413      	add	r3, r2
 800894e:	009b      	lsls	r3, r3, #2
 8008950:	3310      	adds	r3, #16
 8008952:	687a      	ldr	r2, [r7, #4]
 8008954:	4413      	add	r3, r2
 8008956:	3304      	adds	r3, #4
 8008958:	e00b      	b.n	8008972 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800895a:	7bbb      	ldrb	r3, [r7, #14]
 800895c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008960:	4613      	mov	r3, r2
 8008962:	009b      	lsls	r3, r3, #2
 8008964:	4413      	add	r3, r2
 8008966:	009b      	lsls	r3, r3, #2
 8008968:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800896c:	687a      	ldr	r2, [r7, #4]
 800896e:	4413      	add	r3, r2
 8008970:	3304      	adds	r3, #4
 8008972:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008974:	7bbb      	ldrb	r3, [r7, #14]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d002      	beq.n	8008980 <USBD_StdEPReq+0x2d8>
 800897a:	7bbb      	ldrb	r3, [r7, #14]
 800897c:	2b80      	cmp	r3, #128	; 0x80
 800897e:	d103      	bne.n	8008988 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	2200      	movs	r2, #0
 8008984:	601a      	str	r2, [r3, #0]
 8008986:	e00e      	b.n	80089a6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008988:	7bbb      	ldrb	r3, [r7, #14]
 800898a:	4619      	mov	r1, r3
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f002 fb79 	bl	800b084 <USBD_LL_IsStallEP>
 8008992:	4603      	mov	r3, r0
 8008994:	2b00      	cmp	r3, #0
 8008996:	d003      	beq.n	80089a0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	2201      	movs	r2, #1
 800899c:	601a      	str	r2, [r3, #0]
 800899e:	e002      	b.n	80089a6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	2200      	movs	r2, #0
 80089a4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	2202      	movs	r2, #2
 80089aa:	4619      	mov	r1, r3
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f000 fbd1 	bl	8009154 <USBD_CtlSendData>
              break;
 80089b2:	e004      	b.n	80089be <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80089b4:	6839      	ldr	r1, [r7, #0]
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f000 fb5b 	bl	8009072 <USBD_CtlError>
              break;
 80089bc:	bf00      	nop
          }
          break;
 80089be:	e004      	b.n	80089ca <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80089c0:	6839      	ldr	r1, [r7, #0]
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f000 fb55 	bl	8009072 <USBD_CtlError>
          break;
 80089c8:	bf00      	nop
      }
      break;
 80089ca:	e005      	b.n	80089d8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80089cc:	6839      	ldr	r1, [r7, #0]
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f000 fb4f 	bl	8009072 <USBD_CtlError>
      break;
 80089d4:	e000      	b.n	80089d8 <USBD_StdEPReq+0x330>
      break;
 80089d6:	bf00      	nop
  }

  return ret;
 80089d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80089da:	4618      	mov	r0, r3
 80089dc:	3710      	adds	r7, #16
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}
	...

080089e4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b084      	sub	sp, #16
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
 80089ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80089ee:	2300      	movs	r3, #0
 80089f0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80089f2:	2300      	movs	r3, #0
 80089f4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80089f6:	2300      	movs	r3, #0
 80089f8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	885b      	ldrh	r3, [r3, #2]
 80089fe:	0a1b      	lsrs	r3, r3, #8
 8008a00:	b29b      	uxth	r3, r3
 8008a02:	3b01      	subs	r3, #1
 8008a04:	2b06      	cmp	r3, #6
 8008a06:	f200 8128 	bhi.w	8008c5a <USBD_GetDescriptor+0x276>
 8008a0a:	a201      	add	r2, pc, #4	; (adr r2, 8008a10 <USBD_GetDescriptor+0x2c>)
 8008a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a10:	08008a2d 	.word	0x08008a2d
 8008a14:	08008a45 	.word	0x08008a45
 8008a18:	08008a85 	.word	0x08008a85
 8008a1c:	08008c5b 	.word	0x08008c5b
 8008a20:	08008c5b 	.word	0x08008c5b
 8008a24:	08008bfb 	.word	0x08008bfb
 8008a28:	08008c27 	.word	0x08008c27
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	687a      	ldr	r2, [r7, #4]
 8008a36:	7c12      	ldrb	r2, [r2, #16]
 8008a38:	f107 0108 	add.w	r1, r7, #8
 8008a3c:	4610      	mov	r0, r2
 8008a3e:	4798      	blx	r3
 8008a40:	60f8      	str	r0, [r7, #12]
      break;
 8008a42:	e112      	b.n	8008c6a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	7c1b      	ldrb	r3, [r3, #16]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d10d      	bne.n	8008a68 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a54:	f107 0208 	add.w	r2, r7, #8
 8008a58:	4610      	mov	r0, r2
 8008a5a:	4798      	blx	r3
 8008a5c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	3301      	adds	r3, #1
 8008a62:	2202      	movs	r2, #2
 8008a64:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008a66:	e100      	b.n	8008c6a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a70:	f107 0208 	add.w	r2, r7, #8
 8008a74:	4610      	mov	r0, r2
 8008a76:	4798      	blx	r3
 8008a78:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	3301      	adds	r3, #1
 8008a7e:	2202      	movs	r2, #2
 8008a80:	701a      	strb	r2, [r3, #0]
      break;
 8008a82:	e0f2      	b.n	8008c6a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	885b      	ldrh	r3, [r3, #2]
 8008a88:	b2db      	uxtb	r3, r3
 8008a8a:	2b05      	cmp	r3, #5
 8008a8c:	f200 80ac 	bhi.w	8008be8 <USBD_GetDescriptor+0x204>
 8008a90:	a201      	add	r2, pc, #4	; (adr r2, 8008a98 <USBD_GetDescriptor+0xb4>)
 8008a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a96:	bf00      	nop
 8008a98:	08008ab1 	.word	0x08008ab1
 8008a9c:	08008ae5 	.word	0x08008ae5
 8008aa0:	08008b19 	.word	0x08008b19
 8008aa4:	08008b4d 	.word	0x08008b4d
 8008aa8:	08008b81 	.word	0x08008b81
 8008aac:	08008bb5 	.word	0x08008bb5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ab6:	685b      	ldr	r3, [r3, #4]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d00b      	beq.n	8008ad4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ac2:	685b      	ldr	r3, [r3, #4]
 8008ac4:	687a      	ldr	r2, [r7, #4]
 8008ac6:	7c12      	ldrb	r2, [r2, #16]
 8008ac8:	f107 0108 	add.w	r1, r7, #8
 8008acc:	4610      	mov	r0, r2
 8008ace:	4798      	blx	r3
 8008ad0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ad2:	e091      	b.n	8008bf8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ad4:	6839      	ldr	r1, [r7, #0]
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f000 facb 	bl	8009072 <USBD_CtlError>
            err++;
 8008adc:	7afb      	ldrb	r3, [r7, #11]
 8008ade:	3301      	adds	r3, #1
 8008ae0:	72fb      	strb	r3, [r7, #11]
          break;
 8008ae2:	e089      	b.n	8008bf8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008aea:	689b      	ldr	r3, [r3, #8]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d00b      	beq.n	8008b08 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008af6:	689b      	ldr	r3, [r3, #8]
 8008af8:	687a      	ldr	r2, [r7, #4]
 8008afa:	7c12      	ldrb	r2, [r2, #16]
 8008afc:	f107 0108 	add.w	r1, r7, #8
 8008b00:	4610      	mov	r0, r2
 8008b02:	4798      	blx	r3
 8008b04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b06:	e077      	b.n	8008bf8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b08:	6839      	ldr	r1, [r7, #0]
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f000 fab1 	bl	8009072 <USBD_CtlError>
            err++;
 8008b10:	7afb      	ldrb	r3, [r7, #11]
 8008b12:	3301      	adds	r3, #1
 8008b14:	72fb      	strb	r3, [r7, #11]
          break;
 8008b16:	e06f      	b.n	8008bf8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b1e:	68db      	ldr	r3, [r3, #12]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d00b      	beq.n	8008b3c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b2a:	68db      	ldr	r3, [r3, #12]
 8008b2c:	687a      	ldr	r2, [r7, #4]
 8008b2e:	7c12      	ldrb	r2, [r2, #16]
 8008b30:	f107 0108 	add.w	r1, r7, #8
 8008b34:	4610      	mov	r0, r2
 8008b36:	4798      	blx	r3
 8008b38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b3a:	e05d      	b.n	8008bf8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b3c:	6839      	ldr	r1, [r7, #0]
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f000 fa97 	bl	8009072 <USBD_CtlError>
            err++;
 8008b44:	7afb      	ldrb	r3, [r7, #11]
 8008b46:	3301      	adds	r3, #1
 8008b48:	72fb      	strb	r3, [r7, #11]
          break;
 8008b4a:	e055      	b.n	8008bf8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b52:	691b      	ldr	r3, [r3, #16]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d00b      	beq.n	8008b70 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b5e:	691b      	ldr	r3, [r3, #16]
 8008b60:	687a      	ldr	r2, [r7, #4]
 8008b62:	7c12      	ldrb	r2, [r2, #16]
 8008b64:	f107 0108 	add.w	r1, r7, #8
 8008b68:	4610      	mov	r0, r2
 8008b6a:	4798      	blx	r3
 8008b6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b6e:	e043      	b.n	8008bf8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b70:	6839      	ldr	r1, [r7, #0]
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f000 fa7d 	bl	8009072 <USBD_CtlError>
            err++;
 8008b78:	7afb      	ldrb	r3, [r7, #11]
 8008b7a:	3301      	adds	r3, #1
 8008b7c:	72fb      	strb	r3, [r7, #11]
          break;
 8008b7e:	e03b      	b.n	8008bf8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b86:	695b      	ldr	r3, [r3, #20]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d00b      	beq.n	8008ba4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b92:	695b      	ldr	r3, [r3, #20]
 8008b94:	687a      	ldr	r2, [r7, #4]
 8008b96:	7c12      	ldrb	r2, [r2, #16]
 8008b98:	f107 0108 	add.w	r1, r7, #8
 8008b9c:	4610      	mov	r0, r2
 8008b9e:	4798      	blx	r3
 8008ba0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ba2:	e029      	b.n	8008bf8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ba4:	6839      	ldr	r1, [r7, #0]
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f000 fa63 	bl	8009072 <USBD_CtlError>
            err++;
 8008bac:	7afb      	ldrb	r3, [r7, #11]
 8008bae:	3301      	adds	r3, #1
 8008bb0:	72fb      	strb	r3, [r7, #11]
          break;
 8008bb2:	e021      	b.n	8008bf8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bba:	699b      	ldr	r3, [r3, #24]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d00b      	beq.n	8008bd8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bc6:	699b      	ldr	r3, [r3, #24]
 8008bc8:	687a      	ldr	r2, [r7, #4]
 8008bca:	7c12      	ldrb	r2, [r2, #16]
 8008bcc:	f107 0108 	add.w	r1, r7, #8
 8008bd0:	4610      	mov	r0, r2
 8008bd2:	4798      	blx	r3
 8008bd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008bd6:	e00f      	b.n	8008bf8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008bd8:	6839      	ldr	r1, [r7, #0]
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f000 fa49 	bl	8009072 <USBD_CtlError>
            err++;
 8008be0:	7afb      	ldrb	r3, [r7, #11]
 8008be2:	3301      	adds	r3, #1
 8008be4:	72fb      	strb	r3, [r7, #11]
          break;
 8008be6:	e007      	b.n	8008bf8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008be8:	6839      	ldr	r1, [r7, #0]
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f000 fa41 	bl	8009072 <USBD_CtlError>
          err++;
 8008bf0:	7afb      	ldrb	r3, [r7, #11]
 8008bf2:	3301      	adds	r3, #1
 8008bf4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008bf6:	bf00      	nop
      }
      break;
 8008bf8:	e037      	b.n	8008c6a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	7c1b      	ldrb	r3, [r3, #16]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d109      	bne.n	8008c16 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c0a:	f107 0208 	add.w	r2, r7, #8
 8008c0e:	4610      	mov	r0, r2
 8008c10:	4798      	blx	r3
 8008c12:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008c14:	e029      	b.n	8008c6a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008c16:	6839      	ldr	r1, [r7, #0]
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f000 fa2a 	bl	8009072 <USBD_CtlError>
        err++;
 8008c1e:	7afb      	ldrb	r3, [r7, #11]
 8008c20:	3301      	adds	r3, #1
 8008c22:	72fb      	strb	r3, [r7, #11]
      break;
 8008c24:	e021      	b.n	8008c6a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	7c1b      	ldrb	r3, [r3, #16]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d10d      	bne.n	8008c4a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c36:	f107 0208 	add.w	r2, r7, #8
 8008c3a:	4610      	mov	r0, r2
 8008c3c:	4798      	blx	r3
 8008c3e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	3301      	adds	r3, #1
 8008c44:	2207      	movs	r2, #7
 8008c46:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008c48:	e00f      	b.n	8008c6a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008c4a:	6839      	ldr	r1, [r7, #0]
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f000 fa10 	bl	8009072 <USBD_CtlError>
        err++;
 8008c52:	7afb      	ldrb	r3, [r7, #11]
 8008c54:	3301      	adds	r3, #1
 8008c56:	72fb      	strb	r3, [r7, #11]
      break;
 8008c58:	e007      	b.n	8008c6a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008c5a:	6839      	ldr	r1, [r7, #0]
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f000 fa08 	bl	8009072 <USBD_CtlError>
      err++;
 8008c62:	7afb      	ldrb	r3, [r7, #11]
 8008c64:	3301      	adds	r3, #1
 8008c66:	72fb      	strb	r3, [r7, #11]
      break;
 8008c68:	bf00      	nop
  }

  if (err != 0U)
 8008c6a:	7afb      	ldrb	r3, [r7, #11]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d11e      	bne.n	8008cae <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	88db      	ldrh	r3, [r3, #6]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d016      	beq.n	8008ca6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008c78:	893b      	ldrh	r3, [r7, #8]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d00e      	beq.n	8008c9c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	88da      	ldrh	r2, [r3, #6]
 8008c82:	893b      	ldrh	r3, [r7, #8]
 8008c84:	4293      	cmp	r3, r2
 8008c86:	bf28      	it	cs
 8008c88:	4613      	movcs	r3, r2
 8008c8a:	b29b      	uxth	r3, r3
 8008c8c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008c8e:	893b      	ldrh	r3, [r7, #8]
 8008c90:	461a      	mov	r2, r3
 8008c92:	68f9      	ldr	r1, [r7, #12]
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f000 fa5d 	bl	8009154 <USBD_CtlSendData>
 8008c9a:	e009      	b.n	8008cb0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008c9c:	6839      	ldr	r1, [r7, #0]
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f000 f9e7 	bl	8009072 <USBD_CtlError>
 8008ca4:	e004      	b.n	8008cb0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f000 faae 	bl	8009208 <USBD_CtlSendStatus>
 8008cac:	e000      	b.n	8008cb0 <USBD_GetDescriptor+0x2cc>
    return;
 8008cae:	bf00      	nop
  }
}
 8008cb0:	3710      	adds	r7, #16
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}
 8008cb6:	bf00      	nop

08008cb8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b084      	sub	sp, #16
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
 8008cc0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	889b      	ldrh	r3, [r3, #4]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d131      	bne.n	8008d2e <USBD_SetAddress+0x76>
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	88db      	ldrh	r3, [r3, #6]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d12d      	bne.n	8008d2e <USBD_SetAddress+0x76>
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	885b      	ldrh	r3, [r3, #2]
 8008cd6:	2b7f      	cmp	r3, #127	; 0x7f
 8008cd8:	d829      	bhi.n	8008d2e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	885b      	ldrh	r3, [r3, #2]
 8008cde:	b2db      	uxtb	r3, r3
 8008ce0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ce4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cec:	b2db      	uxtb	r3, r3
 8008cee:	2b03      	cmp	r3, #3
 8008cf0:	d104      	bne.n	8008cfc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008cf2:	6839      	ldr	r1, [r7, #0]
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f000 f9bc 	bl	8009072 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cfa:	e01d      	b.n	8008d38 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	7bfa      	ldrb	r2, [r7, #15]
 8008d00:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008d04:	7bfb      	ldrb	r3, [r7, #15]
 8008d06:	4619      	mov	r1, r3
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f002 f9e7 	bl	800b0dc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f000 fa7a 	bl	8009208 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008d14:	7bfb      	ldrb	r3, [r7, #15]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d004      	beq.n	8008d24 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2202      	movs	r2, #2
 8008d1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d22:	e009      	b.n	8008d38 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2201      	movs	r2, #1
 8008d28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d2c:	e004      	b.n	8008d38 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008d2e:	6839      	ldr	r1, [r7, #0]
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f000 f99e 	bl	8009072 <USBD_CtlError>
  }
}
 8008d36:	bf00      	nop
 8008d38:	bf00      	nop
 8008d3a:	3710      	adds	r7, #16
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}

08008d40 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b084      	sub	sp, #16
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	885b      	ldrh	r3, [r3, #2]
 8008d52:	b2da      	uxtb	r2, r3
 8008d54:	4b4e      	ldr	r3, [pc, #312]	; (8008e90 <USBD_SetConfig+0x150>)
 8008d56:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008d58:	4b4d      	ldr	r3, [pc, #308]	; (8008e90 <USBD_SetConfig+0x150>)
 8008d5a:	781b      	ldrb	r3, [r3, #0]
 8008d5c:	2b01      	cmp	r3, #1
 8008d5e:	d905      	bls.n	8008d6c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008d60:	6839      	ldr	r1, [r7, #0]
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f000 f985 	bl	8009072 <USBD_CtlError>
    return USBD_FAIL;
 8008d68:	2303      	movs	r3, #3
 8008d6a:	e08c      	b.n	8008e86 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d72:	b2db      	uxtb	r3, r3
 8008d74:	2b02      	cmp	r3, #2
 8008d76:	d002      	beq.n	8008d7e <USBD_SetConfig+0x3e>
 8008d78:	2b03      	cmp	r3, #3
 8008d7a:	d029      	beq.n	8008dd0 <USBD_SetConfig+0x90>
 8008d7c:	e075      	b.n	8008e6a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008d7e:	4b44      	ldr	r3, [pc, #272]	; (8008e90 <USBD_SetConfig+0x150>)
 8008d80:	781b      	ldrb	r3, [r3, #0]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d020      	beq.n	8008dc8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008d86:	4b42      	ldr	r3, [pc, #264]	; (8008e90 <USBD_SetConfig+0x150>)
 8008d88:	781b      	ldrb	r3, [r3, #0]
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008d90:	4b3f      	ldr	r3, [pc, #252]	; (8008e90 <USBD_SetConfig+0x150>)
 8008d92:	781b      	ldrb	r3, [r3, #0]
 8008d94:	4619      	mov	r1, r3
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f7fe ffe1 	bl	8007d5e <USBD_SetClassConfig>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008da0:	7bfb      	ldrb	r3, [r7, #15]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d008      	beq.n	8008db8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008da6:	6839      	ldr	r1, [r7, #0]
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f000 f962 	bl	8009072 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2202      	movs	r2, #2
 8008db2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008db6:	e065      	b.n	8008e84 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f000 fa25 	bl	8009208 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2203      	movs	r2, #3
 8008dc2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008dc6:	e05d      	b.n	8008e84 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f000 fa1d 	bl	8009208 <USBD_CtlSendStatus>
      break;
 8008dce:	e059      	b.n	8008e84 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008dd0:	4b2f      	ldr	r3, [pc, #188]	; (8008e90 <USBD_SetConfig+0x150>)
 8008dd2:	781b      	ldrb	r3, [r3, #0]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d112      	bne.n	8008dfe <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2202      	movs	r2, #2
 8008ddc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008de0:	4b2b      	ldr	r3, [pc, #172]	; (8008e90 <USBD_SetConfig+0x150>)
 8008de2:	781b      	ldrb	r3, [r3, #0]
 8008de4:	461a      	mov	r2, r3
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008dea:	4b29      	ldr	r3, [pc, #164]	; (8008e90 <USBD_SetConfig+0x150>)
 8008dec:	781b      	ldrb	r3, [r3, #0]
 8008dee:	4619      	mov	r1, r3
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	f7fe ffd0 	bl	8007d96 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f000 fa06 	bl	8009208 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008dfc:	e042      	b.n	8008e84 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008dfe:	4b24      	ldr	r3, [pc, #144]	; (8008e90 <USBD_SetConfig+0x150>)
 8008e00:	781b      	ldrb	r3, [r3, #0]
 8008e02:	461a      	mov	r2, r3
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	685b      	ldr	r3, [r3, #4]
 8008e08:	429a      	cmp	r2, r3
 8008e0a:	d02a      	beq.n	8008e62 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	685b      	ldr	r3, [r3, #4]
 8008e10:	b2db      	uxtb	r3, r3
 8008e12:	4619      	mov	r1, r3
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f7fe ffbe 	bl	8007d96 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008e1a:	4b1d      	ldr	r3, [pc, #116]	; (8008e90 <USBD_SetConfig+0x150>)
 8008e1c:	781b      	ldrb	r3, [r3, #0]
 8008e1e:	461a      	mov	r2, r3
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008e24:	4b1a      	ldr	r3, [pc, #104]	; (8008e90 <USBD_SetConfig+0x150>)
 8008e26:	781b      	ldrb	r3, [r3, #0]
 8008e28:	4619      	mov	r1, r3
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f7fe ff97 	bl	8007d5e <USBD_SetClassConfig>
 8008e30:	4603      	mov	r3, r0
 8008e32:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008e34:	7bfb      	ldrb	r3, [r7, #15]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d00f      	beq.n	8008e5a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008e3a:	6839      	ldr	r1, [r7, #0]
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f000 f918 	bl	8009072 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	685b      	ldr	r3, [r3, #4]
 8008e46:	b2db      	uxtb	r3, r3
 8008e48:	4619      	mov	r1, r3
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f7fe ffa3 	bl	8007d96 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2202      	movs	r2, #2
 8008e54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008e58:	e014      	b.n	8008e84 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f000 f9d4 	bl	8009208 <USBD_CtlSendStatus>
      break;
 8008e60:	e010      	b.n	8008e84 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f000 f9d0 	bl	8009208 <USBD_CtlSendStatus>
      break;
 8008e68:	e00c      	b.n	8008e84 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008e6a:	6839      	ldr	r1, [r7, #0]
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f000 f900 	bl	8009072 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008e72:	4b07      	ldr	r3, [pc, #28]	; (8008e90 <USBD_SetConfig+0x150>)
 8008e74:	781b      	ldrb	r3, [r3, #0]
 8008e76:	4619      	mov	r1, r3
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f7fe ff8c 	bl	8007d96 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008e7e:	2303      	movs	r3, #3
 8008e80:	73fb      	strb	r3, [r7, #15]
      break;
 8008e82:	bf00      	nop
  }

  return ret;
 8008e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	3710      	adds	r7, #16
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}
 8008e8e:	bf00      	nop
 8008e90:	2000037c 	.word	0x2000037c

08008e94 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b082      	sub	sp, #8
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	88db      	ldrh	r3, [r3, #6]
 8008ea2:	2b01      	cmp	r3, #1
 8008ea4:	d004      	beq.n	8008eb0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008ea6:	6839      	ldr	r1, [r7, #0]
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f000 f8e2 	bl	8009072 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008eae:	e023      	b.n	8008ef8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008eb6:	b2db      	uxtb	r3, r3
 8008eb8:	2b02      	cmp	r3, #2
 8008eba:	dc02      	bgt.n	8008ec2 <USBD_GetConfig+0x2e>
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	dc03      	bgt.n	8008ec8 <USBD_GetConfig+0x34>
 8008ec0:	e015      	b.n	8008eee <USBD_GetConfig+0x5a>
 8008ec2:	2b03      	cmp	r3, #3
 8008ec4:	d00b      	beq.n	8008ede <USBD_GetConfig+0x4a>
 8008ec6:	e012      	b.n	8008eee <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	3308      	adds	r3, #8
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	4619      	mov	r1, r3
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f000 f93c 	bl	8009154 <USBD_CtlSendData>
        break;
 8008edc:	e00c      	b.n	8008ef8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	3304      	adds	r3, #4
 8008ee2:	2201      	movs	r2, #1
 8008ee4:	4619      	mov	r1, r3
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f000 f934 	bl	8009154 <USBD_CtlSendData>
        break;
 8008eec:	e004      	b.n	8008ef8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008eee:	6839      	ldr	r1, [r7, #0]
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f000 f8be 	bl	8009072 <USBD_CtlError>
        break;
 8008ef6:	bf00      	nop
}
 8008ef8:	bf00      	nop
 8008efa:	3708      	adds	r7, #8
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}

08008f00 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b082      	sub	sp, #8
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
 8008f08:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f10:	b2db      	uxtb	r3, r3
 8008f12:	3b01      	subs	r3, #1
 8008f14:	2b02      	cmp	r3, #2
 8008f16:	d81e      	bhi.n	8008f56 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	88db      	ldrh	r3, [r3, #6]
 8008f1c:	2b02      	cmp	r3, #2
 8008f1e:	d004      	beq.n	8008f2a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008f20:	6839      	ldr	r1, [r7, #0]
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f000 f8a5 	bl	8009072 <USBD_CtlError>
        break;
 8008f28:	e01a      	b.n	8008f60 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2201      	movs	r2, #1
 8008f2e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d005      	beq.n	8008f46 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	68db      	ldr	r3, [r3, #12]
 8008f3e:	f043 0202 	orr.w	r2, r3, #2
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	330c      	adds	r3, #12
 8008f4a:	2202      	movs	r2, #2
 8008f4c:	4619      	mov	r1, r3
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f000 f900 	bl	8009154 <USBD_CtlSendData>
      break;
 8008f54:	e004      	b.n	8008f60 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008f56:	6839      	ldr	r1, [r7, #0]
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f000 f88a 	bl	8009072 <USBD_CtlError>
      break;
 8008f5e:	bf00      	nop
  }
}
 8008f60:	bf00      	nop
 8008f62:	3708      	adds	r7, #8
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}

08008f68 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b082      	sub	sp, #8
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
 8008f70:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	885b      	ldrh	r3, [r3, #2]
 8008f76:	2b01      	cmp	r3, #1
 8008f78:	d107      	bne.n	8008f8a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2201      	movs	r2, #1
 8008f7e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f000 f940 	bl	8009208 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008f88:	e013      	b.n	8008fb2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	885b      	ldrh	r3, [r3, #2]
 8008f8e:	2b02      	cmp	r3, #2
 8008f90:	d10b      	bne.n	8008faa <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	889b      	ldrh	r3, [r3, #4]
 8008f96:	0a1b      	lsrs	r3, r3, #8
 8008f98:	b29b      	uxth	r3, r3
 8008f9a:	b2da      	uxtb	r2, r3
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	f000 f930 	bl	8009208 <USBD_CtlSendStatus>
}
 8008fa8:	e003      	b.n	8008fb2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008faa:	6839      	ldr	r1, [r7, #0]
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	f000 f860 	bl	8009072 <USBD_CtlError>
}
 8008fb2:	bf00      	nop
 8008fb4:	3708      	adds	r7, #8
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}

08008fba <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fba:	b580      	push	{r7, lr}
 8008fbc:	b082      	sub	sp, #8
 8008fbe:	af00      	add	r7, sp, #0
 8008fc0:	6078      	str	r0, [r7, #4]
 8008fc2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fca:	b2db      	uxtb	r3, r3
 8008fcc:	3b01      	subs	r3, #1
 8008fce:	2b02      	cmp	r3, #2
 8008fd0:	d80b      	bhi.n	8008fea <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	885b      	ldrh	r3, [r3, #2]
 8008fd6:	2b01      	cmp	r3, #1
 8008fd8:	d10c      	bne.n	8008ff4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2200      	movs	r2, #0
 8008fde:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f000 f910 	bl	8009208 <USBD_CtlSendStatus>
      }
      break;
 8008fe8:	e004      	b.n	8008ff4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008fea:	6839      	ldr	r1, [r7, #0]
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f000 f840 	bl	8009072 <USBD_CtlError>
      break;
 8008ff2:	e000      	b.n	8008ff6 <USBD_ClrFeature+0x3c>
      break;
 8008ff4:	bf00      	nop
  }
}
 8008ff6:	bf00      	nop
 8008ff8:	3708      	adds	r7, #8
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}

08008ffe <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008ffe:	b580      	push	{r7, lr}
 8009000:	b084      	sub	sp, #16
 8009002:	af00      	add	r7, sp, #0
 8009004:	6078      	str	r0, [r7, #4]
 8009006:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	781a      	ldrb	r2, [r3, #0]
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	3301      	adds	r3, #1
 8009018:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	781a      	ldrb	r2, [r3, #0]
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	3301      	adds	r3, #1
 8009026:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009028:	68f8      	ldr	r0, [r7, #12]
 800902a:	f7ff fa41 	bl	80084b0 <SWAPBYTE>
 800902e:	4603      	mov	r3, r0
 8009030:	461a      	mov	r2, r3
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	3301      	adds	r3, #1
 800903a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	3301      	adds	r3, #1
 8009040:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009042:	68f8      	ldr	r0, [r7, #12]
 8009044:	f7ff fa34 	bl	80084b0 <SWAPBYTE>
 8009048:	4603      	mov	r3, r0
 800904a:	461a      	mov	r2, r3
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	3301      	adds	r3, #1
 8009054:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	3301      	adds	r3, #1
 800905a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800905c:	68f8      	ldr	r0, [r7, #12]
 800905e:	f7ff fa27 	bl	80084b0 <SWAPBYTE>
 8009062:	4603      	mov	r3, r0
 8009064:	461a      	mov	r2, r3
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	80da      	strh	r2, [r3, #6]
}
 800906a:	bf00      	nop
 800906c:	3710      	adds	r7, #16
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}

08009072 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009072:	b580      	push	{r7, lr}
 8009074:	b082      	sub	sp, #8
 8009076:	af00      	add	r7, sp, #0
 8009078:	6078      	str	r0, [r7, #4]
 800907a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800907c:	2180      	movs	r1, #128	; 0x80
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f001 ffc2 	bl	800b008 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009084:	2100      	movs	r1, #0
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f001 ffbe 	bl	800b008 <USBD_LL_StallEP>
}
 800908c:	bf00      	nop
 800908e:	3708      	adds	r7, #8
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}

08009094 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b086      	sub	sp, #24
 8009098:	af00      	add	r7, sp, #0
 800909a:	60f8      	str	r0, [r7, #12]
 800909c:	60b9      	str	r1, [r7, #8]
 800909e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80090a0:	2300      	movs	r3, #0
 80090a2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d036      	beq.n	8009118 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80090ae:	6938      	ldr	r0, [r7, #16]
 80090b0:	f000 f836 	bl	8009120 <USBD_GetLen>
 80090b4:	4603      	mov	r3, r0
 80090b6:	3301      	adds	r3, #1
 80090b8:	b29b      	uxth	r3, r3
 80090ba:	005b      	lsls	r3, r3, #1
 80090bc:	b29a      	uxth	r2, r3
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80090c2:	7dfb      	ldrb	r3, [r7, #23]
 80090c4:	68ba      	ldr	r2, [r7, #8]
 80090c6:	4413      	add	r3, r2
 80090c8:	687a      	ldr	r2, [r7, #4]
 80090ca:	7812      	ldrb	r2, [r2, #0]
 80090cc:	701a      	strb	r2, [r3, #0]
  idx++;
 80090ce:	7dfb      	ldrb	r3, [r7, #23]
 80090d0:	3301      	adds	r3, #1
 80090d2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80090d4:	7dfb      	ldrb	r3, [r7, #23]
 80090d6:	68ba      	ldr	r2, [r7, #8]
 80090d8:	4413      	add	r3, r2
 80090da:	2203      	movs	r2, #3
 80090dc:	701a      	strb	r2, [r3, #0]
  idx++;
 80090de:	7dfb      	ldrb	r3, [r7, #23]
 80090e0:	3301      	adds	r3, #1
 80090e2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80090e4:	e013      	b.n	800910e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80090e6:	7dfb      	ldrb	r3, [r7, #23]
 80090e8:	68ba      	ldr	r2, [r7, #8]
 80090ea:	4413      	add	r3, r2
 80090ec:	693a      	ldr	r2, [r7, #16]
 80090ee:	7812      	ldrb	r2, [r2, #0]
 80090f0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80090f2:	693b      	ldr	r3, [r7, #16]
 80090f4:	3301      	adds	r3, #1
 80090f6:	613b      	str	r3, [r7, #16]
    idx++;
 80090f8:	7dfb      	ldrb	r3, [r7, #23]
 80090fa:	3301      	adds	r3, #1
 80090fc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80090fe:	7dfb      	ldrb	r3, [r7, #23]
 8009100:	68ba      	ldr	r2, [r7, #8]
 8009102:	4413      	add	r3, r2
 8009104:	2200      	movs	r2, #0
 8009106:	701a      	strb	r2, [r3, #0]
    idx++;
 8009108:	7dfb      	ldrb	r3, [r7, #23]
 800910a:	3301      	adds	r3, #1
 800910c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800910e:	693b      	ldr	r3, [r7, #16]
 8009110:	781b      	ldrb	r3, [r3, #0]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d1e7      	bne.n	80090e6 <USBD_GetString+0x52>
 8009116:	e000      	b.n	800911a <USBD_GetString+0x86>
    return;
 8009118:	bf00      	nop
  }
}
 800911a:	3718      	adds	r7, #24
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}

08009120 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009120:	b480      	push	{r7}
 8009122:	b085      	sub	sp, #20
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009128:	2300      	movs	r3, #0
 800912a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009130:	e005      	b.n	800913e <USBD_GetLen+0x1e>
  {
    len++;
 8009132:	7bfb      	ldrb	r3, [r7, #15]
 8009134:	3301      	adds	r3, #1
 8009136:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	3301      	adds	r3, #1
 800913c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	781b      	ldrb	r3, [r3, #0]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d1f5      	bne.n	8009132 <USBD_GetLen+0x12>
  }

  return len;
 8009146:	7bfb      	ldrb	r3, [r7, #15]
}
 8009148:	4618      	mov	r0, r3
 800914a:	3714      	adds	r7, #20
 800914c:	46bd      	mov	sp, r7
 800914e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009152:	4770      	bx	lr

08009154 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b084      	sub	sp, #16
 8009158:	af00      	add	r7, sp, #0
 800915a:	60f8      	str	r0, [r7, #12]
 800915c:	60b9      	str	r1, [r7, #8]
 800915e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	2202      	movs	r2, #2
 8009164:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	687a      	ldr	r2, [r7, #4]
 800916c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	687a      	ldr	r2, [r7, #4]
 8009172:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	68ba      	ldr	r2, [r7, #8]
 8009178:	2100      	movs	r1, #0
 800917a:	68f8      	ldr	r0, [r7, #12]
 800917c:	f001 ffcd 	bl	800b11a <USBD_LL_Transmit>

  return USBD_OK;
 8009180:	2300      	movs	r3, #0
}
 8009182:	4618      	mov	r0, r3
 8009184:	3710      	adds	r7, #16
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}

0800918a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800918a:	b580      	push	{r7, lr}
 800918c:	b084      	sub	sp, #16
 800918e:	af00      	add	r7, sp, #0
 8009190:	60f8      	str	r0, [r7, #12]
 8009192:	60b9      	str	r1, [r7, #8]
 8009194:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	68ba      	ldr	r2, [r7, #8]
 800919a:	2100      	movs	r1, #0
 800919c:	68f8      	ldr	r0, [r7, #12]
 800919e:	f001 ffbc 	bl	800b11a <USBD_LL_Transmit>

  return USBD_OK;
 80091a2:	2300      	movs	r3, #0
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	3710      	adds	r7, #16
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}

080091ac <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b084      	sub	sp, #16
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	60f8      	str	r0, [r7, #12]
 80091b4:	60b9      	str	r1, [r7, #8]
 80091b6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	2203      	movs	r2, #3
 80091bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	687a      	ldr	r2, [r7, #4]
 80091c4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	687a      	ldr	r2, [r7, #4]
 80091cc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	68ba      	ldr	r2, [r7, #8]
 80091d4:	2100      	movs	r1, #0
 80091d6:	68f8      	ldr	r0, [r7, #12]
 80091d8:	f001 ffc0 	bl	800b15c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80091dc:	2300      	movs	r3, #0
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3710      	adds	r7, #16
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}

080091e6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80091e6:	b580      	push	{r7, lr}
 80091e8:	b084      	sub	sp, #16
 80091ea:	af00      	add	r7, sp, #0
 80091ec:	60f8      	str	r0, [r7, #12]
 80091ee:	60b9      	str	r1, [r7, #8]
 80091f0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	68ba      	ldr	r2, [r7, #8]
 80091f6:	2100      	movs	r1, #0
 80091f8:	68f8      	ldr	r0, [r7, #12]
 80091fa:	f001 ffaf 	bl	800b15c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80091fe:	2300      	movs	r3, #0
}
 8009200:	4618      	mov	r0, r3
 8009202:	3710      	adds	r7, #16
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}

08009208 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b082      	sub	sp, #8
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2204      	movs	r2, #4
 8009214:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009218:	2300      	movs	r3, #0
 800921a:	2200      	movs	r2, #0
 800921c:	2100      	movs	r1, #0
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f001 ff7b 	bl	800b11a <USBD_LL_Transmit>

  return USBD_OK;
 8009224:	2300      	movs	r3, #0
}
 8009226:	4618      	mov	r0, r3
 8009228:	3708      	adds	r7, #8
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}

0800922e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800922e:	b580      	push	{r7, lr}
 8009230:	b082      	sub	sp, #8
 8009232:	af00      	add	r7, sp, #0
 8009234:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2205      	movs	r2, #5
 800923a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800923e:	2300      	movs	r3, #0
 8009240:	2200      	movs	r2, #0
 8009242:	2100      	movs	r1, #0
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f001 ff89 	bl	800b15c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800924a:	2300      	movs	r3, #0
}
 800924c:	4618      	mov	r0, r3
 800924e:	3708      	adds	r7, #8
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}

08009254 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009254:	b480      	push	{r7}
 8009256:	b085      	sub	sp, #20
 8009258:	af00      	add	r7, sp, #0
 800925a:	4603      	mov	r3, r0
 800925c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800925e:	2300      	movs	r3, #0
 8009260:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009262:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009266:	2b84      	cmp	r3, #132	; 0x84
 8009268:	d005      	beq.n	8009276 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800926a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	4413      	add	r3, r2
 8009272:	3303      	adds	r3, #3
 8009274:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009276:	68fb      	ldr	r3, [r7, #12]
}
 8009278:	4618      	mov	r0, r3
 800927a:	3714      	adds	r7, #20
 800927c:	46bd      	mov	sp, r7
 800927e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009282:	4770      	bx	lr

08009284 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8009284:	b480      	push	{r7}
 8009286:	b083      	sub	sp, #12
 8009288:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800928a:	f3ef 8305 	mrs	r3, IPSR
 800928e:	607b      	str	r3, [r7, #4]
  return(result);
 8009290:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8009292:	2b00      	cmp	r3, #0
 8009294:	bf14      	ite	ne
 8009296:	2301      	movne	r3, #1
 8009298:	2300      	moveq	r3, #0
 800929a:	b2db      	uxtb	r3, r3
}
 800929c:	4618      	mov	r0, r3
 800929e:	370c      	adds	r7, #12
 80092a0:	46bd      	mov	sp, r7
 80092a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a6:	4770      	bx	lr

080092a8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80092ac:	f000 fb1c 	bl	80098e8 <vTaskStartScheduler>
  
  return osOK;
 80092b0:	2300      	movs	r3, #0
}
 80092b2:	4618      	mov	r0, r3
 80092b4:	bd80      	pop	{r7, pc}

080092b6 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80092b6:	b580      	push	{r7, lr}
 80092b8:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80092ba:	f7ff ffe3 	bl	8009284 <inHandlerMode>
 80092be:	4603      	mov	r3, r0
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d003      	beq.n	80092cc <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80092c4:	f000 fc1a 	bl	8009afc <xTaskGetTickCountFromISR>
 80092c8:	4603      	mov	r3, r0
 80092ca:	e002      	b.n	80092d2 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80092cc:	f000 fc06 	bl	8009adc <xTaskGetTickCount>
 80092d0:	4603      	mov	r3, r0
  }
}
 80092d2:	4618      	mov	r0, r3
 80092d4:	bd80      	pop	{r7, pc}

080092d6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80092d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092d8:	b087      	sub	sp, #28
 80092da:	af02      	add	r7, sp, #8
 80092dc:	6078      	str	r0, [r7, #4]
 80092de:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	685c      	ldr	r4, [r3, #4]
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80092ec:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80092f4:	4618      	mov	r0, r3
 80092f6:	f7ff ffad 	bl	8009254 <makeFreeRtosPriority>
 80092fa:	4602      	mov	r2, r0
 80092fc:	f107 030c 	add.w	r3, r7, #12
 8009300:	9301      	str	r3, [sp, #4]
 8009302:	9200      	str	r2, [sp, #0]
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	4632      	mov	r2, r6
 8009308:	4629      	mov	r1, r5
 800930a:	4620      	mov	r0, r4
 800930c:	f000 f8e8 	bl	80094e0 <xTaskCreate>
 8009310:	4603      	mov	r3, r0
 8009312:	2b01      	cmp	r3, #1
 8009314:	d001      	beq.n	800931a <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8009316:	2300      	movs	r3, #0
 8009318:	e000      	b.n	800931c <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800931a:	68fb      	ldr	r3, [r7, #12]
}
 800931c:	4618      	mov	r0, r3
 800931e:	3714      	adds	r7, #20
 8009320:	46bd      	mov	sp, r7
 8009322:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009324 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b084      	sub	sp, #16
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d001      	beq.n	800933a <osDelay+0x16>
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	e000      	b.n	800933c <osDelay+0x18>
 800933a:	2301      	movs	r3, #1
 800933c:	4618      	mov	r0, r3
 800933e:	f000 fa9f 	bl	8009880 <vTaskDelay>
  
  return osOK;
 8009342:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009344:	4618      	mov	r0, r3
 8009346:	3710      	adds	r7, #16
 8009348:	46bd      	mov	sp, r7
 800934a:	bd80      	pop	{r7, pc}

0800934c <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b084      	sub	sp, #16
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
 8009354:	6039      	str	r1, [r7, #0]
#if INCLUDE_vTaskDelayUntil
  TickType_t ticks = (millisec / portTICK_PERIOD_MS);
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	60fb      	str	r3, [r7, #12]
  vTaskDelayUntil((TickType_t *) PreviousWakeTime, ticks ? ticks : 1);
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d001      	beq.n	8009364 <osDelayUntil+0x18>
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	e000      	b.n	8009366 <osDelayUntil+0x1a>
 8009364:	2301      	movs	r3, #1
 8009366:	4619      	mov	r1, r3
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f000 fa0b 	bl	8009784 <vTaskDelayUntil>
  
  return osOK;
 800936e:	2300      	movs	r3, #0
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
#endif
}
 8009370:	4618      	mov	r0, r3
 8009372:	3710      	adds	r7, #16
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}

08009378 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009378:	b480      	push	{r7}
 800937a:	b083      	sub	sp, #12
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f103 0208 	add.w	r2, r3, #8
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009390:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	f103 0208 	add.w	r2, r3, #8
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f103 0208 	add.w	r2, r3, #8
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2200      	movs	r2, #0
 80093aa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80093ac:	bf00      	nop
 80093ae:	370c      	adds	r7, #12
 80093b0:	46bd      	mov	sp, r7
 80093b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b6:	4770      	bx	lr

080093b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80093b8:	b480      	push	{r7}
 80093ba:	b083      	sub	sp, #12
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2200      	movs	r2, #0
 80093c4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80093c6:	bf00      	nop
 80093c8:	370c      	adds	r7, #12
 80093ca:	46bd      	mov	sp, r7
 80093cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d0:	4770      	bx	lr

080093d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80093d2:	b480      	push	{r7}
 80093d4:	b085      	sub	sp, #20
 80093d6:	af00      	add	r7, sp, #0
 80093d8:	6078      	str	r0, [r7, #4]
 80093da:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	685b      	ldr	r3, [r3, #4]
 80093e0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	68fa      	ldr	r2, [r7, #12]
 80093e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	689a      	ldr	r2, [r3, #8]
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	689b      	ldr	r3, [r3, #8]
 80093f4:	683a      	ldr	r2, [r7, #0]
 80093f6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	683a      	ldr	r2, [r7, #0]
 80093fc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	687a      	ldr	r2, [r7, #4]
 8009402:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	1c5a      	adds	r2, r3, #1
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	601a      	str	r2, [r3, #0]
}
 800940e:	bf00      	nop
 8009410:	3714      	adds	r7, #20
 8009412:	46bd      	mov	sp, r7
 8009414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009418:	4770      	bx	lr

0800941a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800941a:	b480      	push	{r7}
 800941c:	b085      	sub	sp, #20
 800941e:	af00      	add	r7, sp, #0
 8009420:	6078      	str	r0, [r7, #4]
 8009422:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800942a:	68bb      	ldr	r3, [r7, #8]
 800942c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009430:	d103      	bne.n	800943a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	691b      	ldr	r3, [r3, #16]
 8009436:	60fb      	str	r3, [r7, #12]
 8009438:	e00c      	b.n	8009454 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	3308      	adds	r3, #8
 800943e:	60fb      	str	r3, [r7, #12]
 8009440:	e002      	b.n	8009448 <vListInsert+0x2e>
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	685b      	ldr	r3, [r3, #4]
 8009446:	60fb      	str	r3, [r7, #12]
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	685b      	ldr	r3, [r3, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	68ba      	ldr	r2, [r7, #8]
 8009450:	429a      	cmp	r2, r3
 8009452:	d2f6      	bcs.n	8009442 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	685a      	ldr	r2, [r3, #4]
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	685b      	ldr	r3, [r3, #4]
 8009460:	683a      	ldr	r2, [r7, #0]
 8009462:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	68fa      	ldr	r2, [r7, #12]
 8009468:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	683a      	ldr	r2, [r7, #0]
 800946e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	687a      	ldr	r2, [r7, #4]
 8009474:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	1c5a      	adds	r2, r3, #1
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	601a      	str	r2, [r3, #0]
}
 8009480:	bf00      	nop
 8009482:	3714      	adds	r7, #20
 8009484:	46bd      	mov	sp, r7
 8009486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948a:	4770      	bx	lr

0800948c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800948c:	b480      	push	{r7}
 800948e:	b085      	sub	sp, #20
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	691b      	ldr	r3, [r3, #16]
 8009498:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	685b      	ldr	r3, [r3, #4]
 800949e:	687a      	ldr	r2, [r7, #4]
 80094a0:	6892      	ldr	r2, [r2, #8]
 80094a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	689b      	ldr	r3, [r3, #8]
 80094a8:	687a      	ldr	r2, [r7, #4]
 80094aa:	6852      	ldr	r2, [r2, #4]
 80094ac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	685b      	ldr	r3, [r3, #4]
 80094b2:	687a      	ldr	r2, [r7, #4]
 80094b4:	429a      	cmp	r2, r3
 80094b6:	d103      	bne.n	80094c0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	689a      	ldr	r2, [r3, #8]
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2200      	movs	r2, #0
 80094c4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	1e5a      	subs	r2, r3, #1
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	681b      	ldr	r3, [r3, #0]
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	3714      	adds	r7, #20
 80094d8:	46bd      	mov	sp, r7
 80094da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094de:	4770      	bx	lr

080094e0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b08c      	sub	sp, #48	; 0x30
 80094e4:	af04      	add	r7, sp, #16
 80094e6:	60f8      	str	r0, [r7, #12]
 80094e8:	60b9      	str	r1, [r7, #8]
 80094ea:	603b      	str	r3, [r7, #0]
 80094ec:	4613      	mov	r3, r2
 80094ee:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80094f0:	88fb      	ldrh	r3, [r7, #6]
 80094f2:	009b      	lsls	r3, r3, #2
 80094f4:	4618      	mov	r0, r3
 80094f6:	f000 ffc7 	bl	800a488 <pvPortMalloc>
 80094fa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80094fc:	697b      	ldr	r3, [r7, #20]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d00e      	beq.n	8009520 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009502:	20a0      	movs	r0, #160	; 0xa0
 8009504:	f000 ffc0 	bl	800a488 <pvPortMalloc>
 8009508:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800950a:	69fb      	ldr	r3, [r7, #28]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d003      	beq.n	8009518 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009510:	69fb      	ldr	r3, [r7, #28]
 8009512:	697a      	ldr	r2, [r7, #20]
 8009514:	631a      	str	r2, [r3, #48]	; 0x30
 8009516:	e005      	b.n	8009524 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009518:	6978      	ldr	r0, [r7, #20]
 800951a:	f001 f885 	bl	800a628 <vPortFree>
 800951e:	e001      	b.n	8009524 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009520:	2300      	movs	r3, #0
 8009522:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009524:	69fb      	ldr	r3, [r7, #28]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d013      	beq.n	8009552 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800952a:	88fa      	ldrh	r2, [r7, #6]
 800952c:	2300      	movs	r3, #0
 800952e:	9303      	str	r3, [sp, #12]
 8009530:	69fb      	ldr	r3, [r7, #28]
 8009532:	9302      	str	r3, [sp, #8]
 8009534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009536:	9301      	str	r3, [sp, #4]
 8009538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800953a:	9300      	str	r3, [sp, #0]
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	68b9      	ldr	r1, [r7, #8]
 8009540:	68f8      	ldr	r0, [r7, #12]
 8009542:	f000 f80f 	bl	8009564 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009546:	69f8      	ldr	r0, [r7, #28]
 8009548:	f000 f8b2 	bl	80096b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800954c:	2301      	movs	r3, #1
 800954e:	61bb      	str	r3, [r7, #24]
 8009550:	e002      	b.n	8009558 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009552:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009556:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009558:	69bb      	ldr	r3, [r7, #24]
	}
 800955a:	4618      	mov	r0, r3
 800955c:	3720      	adds	r7, #32
 800955e:	46bd      	mov	sp, r7
 8009560:	bd80      	pop	{r7, pc}
	...

08009564 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b088      	sub	sp, #32
 8009568:	af00      	add	r7, sp, #0
 800956a:	60f8      	str	r0, [r7, #12]
 800956c:	60b9      	str	r1, [r7, #8]
 800956e:	607a      	str	r2, [r7, #4]
 8009570:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009574:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	009b      	lsls	r3, r3, #2
 800957a:	461a      	mov	r2, r3
 800957c:	21a5      	movs	r1, #165	; 0xa5
 800957e:	f003 f843 	bl	800c608 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009584:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800958c:	3b01      	subs	r3, #1
 800958e:	009b      	lsls	r3, r3, #2
 8009590:	4413      	add	r3, r2
 8009592:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009594:	69bb      	ldr	r3, [r7, #24]
 8009596:	f023 0307 	bic.w	r3, r3, #7
 800959a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800959c:	69bb      	ldr	r3, [r7, #24]
 800959e:	f003 0307 	and.w	r3, r3, #7
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d00a      	beq.n	80095bc <prvInitialiseNewTask+0x58>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80095a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095aa:	f383 8811 	msr	BASEPRI, r3
 80095ae:	f3bf 8f6f 	isb	sy
 80095b2:	f3bf 8f4f 	dsb	sy
 80095b6:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80095b8:	bf00      	nop
 80095ba:	e7fe      	b.n	80095ba <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d01f      	beq.n	8009602 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80095c2:	2300      	movs	r3, #0
 80095c4:	61fb      	str	r3, [r7, #28]
 80095c6:	e012      	b.n	80095ee <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80095c8:	68ba      	ldr	r2, [r7, #8]
 80095ca:	69fb      	ldr	r3, [r7, #28]
 80095cc:	4413      	add	r3, r2
 80095ce:	7819      	ldrb	r1, [r3, #0]
 80095d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095d2:	69fb      	ldr	r3, [r7, #28]
 80095d4:	4413      	add	r3, r2
 80095d6:	3334      	adds	r3, #52	; 0x34
 80095d8:	460a      	mov	r2, r1
 80095da:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80095dc:	68ba      	ldr	r2, [r7, #8]
 80095de:	69fb      	ldr	r3, [r7, #28]
 80095e0:	4413      	add	r3, r2
 80095e2:	781b      	ldrb	r3, [r3, #0]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d006      	beq.n	80095f6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80095e8:	69fb      	ldr	r3, [r7, #28]
 80095ea:	3301      	adds	r3, #1
 80095ec:	61fb      	str	r3, [r7, #28]
 80095ee:	69fb      	ldr	r3, [r7, #28]
 80095f0:	2b0f      	cmp	r3, #15
 80095f2:	d9e9      	bls.n	80095c8 <prvInitialiseNewTask+0x64>
 80095f4:	e000      	b.n	80095f8 <prvInitialiseNewTask+0x94>
			{
				break;
 80095f6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80095f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095fa:	2200      	movs	r2, #0
 80095fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009600:	e003      	b.n	800960a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009604:	2200      	movs	r2, #0
 8009606:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800960a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800960c:	2b06      	cmp	r3, #6
 800960e:	d901      	bls.n	8009614 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009610:	2306      	movs	r3, #6
 8009612:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009616:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009618:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800961a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800961c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800961e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8009620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009622:	2200      	movs	r2, #0
 8009624:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009628:	3304      	adds	r3, #4
 800962a:	4618      	mov	r0, r3
 800962c:	f7ff fec4 	bl	80093b8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009632:	3318      	adds	r3, #24
 8009634:	4618      	mov	r0, r3
 8009636:	f7ff febf 	bl	80093b8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800963a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800963c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800963e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009642:	f1c3 0207 	rsb	r2, r3, #7
 8009646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009648:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800964a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800964c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800964e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009652:	2200      	movs	r2, #0
 8009654:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800965a:	2200      	movs	r2, #0
 800965c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009662:	334c      	adds	r3, #76	; 0x4c
 8009664:	224c      	movs	r2, #76	; 0x4c
 8009666:	2100      	movs	r1, #0
 8009668:	4618      	mov	r0, r3
 800966a:	f002 ffcd 	bl	800c608 <memset>
 800966e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009670:	4a0c      	ldr	r2, [pc, #48]	; (80096a4 <prvInitialiseNewTask+0x140>)
 8009672:	651a      	str	r2, [r3, #80]	; 0x50
 8009674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009676:	4a0c      	ldr	r2, [pc, #48]	; (80096a8 <prvInitialiseNewTask+0x144>)
 8009678:	655a      	str	r2, [r3, #84]	; 0x54
 800967a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800967c:	4a0b      	ldr	r2, [pc, #44]	; (80096ac <prvInitialiseNewTask+0x148>)
 800967e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009680:	683a      	ldr	r2, [r7, #0]
 8009682:	68f9      	ldr	r1, [r7, #12]
 8009684:	69b8      	ldr	r0, [r7, #24]
 8009686:	f000 fcad 	bl	8009fe4 <pxPortInitialiseStack>
 800968a:	4602      	mov	r2, r0
 800968c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800968e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009692:	2b00      	cmp	r3, #0
 8009694:	d002      	beq.n	800969c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009698:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800969a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800969c:	bf00      	nop
 800969e:	3720      	adds	r7, #32
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}
 80096a4:	20005d50 	.word	0x20005d50
 80096a8:	20005db8 	.word	0x20005db8
 80096ac:	20005e20 	.word	0x20005e20

080096b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b082      	sub	sp, #8
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80096b8:	f000 fdc4 	bl	800a244 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80096bc:	4b2a      	ldr	r3, [pc, #168]	; (8009768 <prvAddNewTaskToReadyList+0xb8>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	3301      	adds	r3, #1
 80096c2:	4a29      	ldr	r2, [pc, #164]	; (8009768 <prvAddNewTaskToReadyList+0xb8>)
 80096c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80096c6:	4b29      	ldr	r3, [pc, #164]	; (800976c <prvAddNewTaskToReadyList+0xbc>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d109      	bne.n	80096e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80096ce:	4a27      	ldr	r2, [pc, #156]	; (800976c <prvAddNewTaskToReadyList+0xbc>)
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80096d4:	4b24      	ldr	r3, [pc, #144]	; (8009768 <prvAddNewTaskToReadyList+0xb8>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	2b01      	cmp	r3, #1
 80096da:	d110      	bne.n	80096fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80096dc:	f000 fb78 	bl	8009dd0 <prvInitialiseTaskLists>
 80096e0:	e00d      	b.n	80096fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80096e2:	4b23      	ldr	r3, [pc, #140]	; (8009770 <prvAddNewTaskToReadyList+0xc0>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d109      	bne.n	80096fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80096ea:	4b20      	ldr	r3, [pc, #128]	; (800976c <prvAddNewTaskToReadyList+0xbc>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096f4:	429a      	cmp	r2, r3
 80096f6:	d802      	bhi.n	80096fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80096f8:	4a1c      	ldr	r2, [pc, #112]	; (800976c <prvAddNewTaskToReadyList+0xbc>)
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80096fe:	4b1d      	ldr	r3, [pc, #116]	; (8009774 <prvAddNewTaskToReadyList+0xc4>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	3301      	adds	r3, #1
 8009704:	4a1b      	ldr	r2, [pc, #108]	; (8009774 <prvAddNewTaskToReadyList+0xc4>)
 8009706:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800970c:	2201      	movs	r2, #1
 800970e:	409a      	lsls	r2, r3
 8009710:	4b19      	ldr	r3, [pc, #100]	; (8009778 <prvAddNewTaskToReadyList+0xc8>)
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	4313      	orrs	r3, r2
 8009716:	4a18      	ldr	r2, [pc, #96]	; (8009778 <prvAddNewTaskToReadyList+0xc8>)
 8009718:	6013      	str	r3, [r2, #0]
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800971e:	4613      	mov	r3, r2
 8009720:	009b      	lsls	r3, r3, #2
 8009722:	4413      	add	r3, r2
 8009724:	009b      	lsls	r3, r3, #2
 8009726:	4a15      	ldr	r2, [pc, #84]	; (800977c <prvAddNewTaskToReadyList+0xcc>)
 8009728:	441a      	add	r2, r3
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	3304      	adds	r3, #4
 800972e:	4619      	mov	r1, r3
 8009730:	4610      	mov	r0, r2
 8009732:	f7ff fe4e 	bl	80093d2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009736:	f000 fdb5 	bl	800a2a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800973a:	4b0d      	ldr	r3, [pc, #52]	; (8009770 <prvAddNewTaskToReadyList+0xc0>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d00e      	beq.n	8009760 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009742:	4b0a      	ldr	r3, [pc, #40]	; (800976c <prvAddNewTaskToReadyList+0xbc>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800974c:	429a      	cmp	r2, r3
 800974e:	d207      	bcs.n	8009760 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009750:	4b0b      	ldr	r3, [pc, #44]	; (8009780 <prvAddNewTaskToReadyList+0xd0>)
 8009752:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009756:	601a      	str	r2, [r3, #0]
 8009758:	f3bf 8f4f 	dsb	sy
 800975c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009760:	bf00      	nop
 8009762:	3708      	adds	r7, #8
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}
 8009768:	20000480 	.word	0x20000480
 800976c:	20000380 	.word	0x20000380
 8009770:	2000048c 	.word	0x2000048c
 8009774:	2000049c 	.word	0x2000049c
 8009778:	20000488 	.word	0x20000488
 800977c:	20000384 	.word	0x20000384
 8009780:	e000ed04 	.word	0xe000ed04

08009784 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8009784:	b580      	push	{r7, lr}
 8009786:	b08a      	sub	sp, #40	; 0x28
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
 800978c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800978e:	2300      	movs	r3, #0
 8009790:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d10a      	bne.n	80097ae <vTaskDelayUntil+0x2a>
	__asm volatile
 8009798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800979c:	f383 8811 	msr	BASEPRI, r3
 80097a0:	f3bf 8f6f 	isb	sy
 80097a4:	f3bf 8f4f 	dsb	sy
 80097a8:	617b      	str	r3, [r7, #20]
}
 80097aa:	bf00      	nop
 80097ac:	e7fe      	b.n	80097ac <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d10a      	bne.n	80097ca <vTaskDelayUntil+0x46>
	__asm volatile
 80097b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097b8:	f383 8811 	msr	BASEPRI, r3
 80097bc:	f3bf 8f6f 	isb	sy
 80097c0:	f3bf 8f4f 	dsb	sy
 80097c4:	613b      	str	r3, [r7, #16]
}
 80097c6:	bf00      	nop
 80097c8:	e7fe      	b.n	80097c8 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 80097ca:	4b2a      	ldr	r3, [pc, #168]	; (8009874 <vTaskDelayUntil+0xf0>)
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d00a      	beq.n	80097e8 <vTaskDelayUntil+0x64>
	__asm volatile
 80097d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097d6:	f383 8811 	msr	BASEPRI, r3
 80097da:	f3bf 8f6f 	isb	sy
 80097de:	f3bf 8f4f 	dsb	sy
 80097e2:	60fb      	str	r3, [r7, #12]
}
 80097e4:	bf00      	nop
 80097e6:	e7fe      	b.n	80097e6 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 80097e8:	f000 f8ce 	bl	8009988 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80097ec:	4b22      	ldr	r3, [pc, #136]	; (8009878 <vTaskDelayUntil+0xf4>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	683a      	ldr	r2, [r7, #0]
 80097f8:	4413      	add	r3, r2
 80097fa:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	6a3a      	ldr	r2, [r7, #32]
 8009802:	429a      	cmp	r2, r3
 8009804:	d20b      	bcs.n	800981e <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	69fa      	ldr	r2, [r7, #28]
 800980c:	429a      	cmp	r2, r3
 800980e:	d211      	bcs.n	8009834 <vTaskDelayUntil+0xb0>
 8009810:	69fa      	ldr	r2, [r7, #28]
 8009812:	6a3b      	ldr	r3, [r7, #32]
 8009814:	429a      	cmp	r2, r3
 8009816:	d90d      	bls.n	8009834 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8009818:	2301      	movs	r3, #1
 800981a:	627b      	str	r3, [r7, #36]	; 0x24
 800981c:	e00a      	b.n	8009834 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	69fa      	ldr	r2, [r7, #28]
 8009824:	429a      	cmp	r2, r3
 8009826:	d303      	bcc.n	8009830 <vTaskDelayUntil+0xac>
 8009828:	69fa      	ldr	r2, [r7, #28]
 800982a:	6a3b      	ldr	r3, [r7, #32]
 800982c:	429a      	cmp	r2, r3
 800982e:	d901      	bls.n	8009834 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8009830:	2301      	movs	r3, #1
 8009832:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	69fa      	ldr	r2, [r7, #28]
 8009838:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800983a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800983c:	2b00      	cmp	r3, #0
 800983e:	d006      	beq.n	800984e <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8009840:	69fa      	ldr	r2, [r7, #28]
 8009842:	6a3b      	ldr	r3, [r7, #32]
 8009844:	1ad3      	subs	r3, r2, r3
 8009846:	2100      	movs	r1, #0
 8009848:	4618      	mov	r0, r3
 800984a:	f000 fb65 	bl	8009f18 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800984e:	f000 f8a9 	bl	80099a4 <xTaskResumeAll>
 8009852:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009854:	69bb      	ldr	r3, [r7, #24]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d107      	bne.n	800986a <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800985a:	4b08      	ldr	r3, [pc, #32]	; (800987c <vTaskDelayUntil+0xf8>)
 800985c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009860:	601a      	str	r2, [r3, #0]
 8009862:	f3bf 8f4f 	dsb	sy
 8009866:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800986a:	bf00      	nop
 800986c:	3728      	adds	r7, #40	; 0x28
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}
 8009872:	bf00      	nop
 8009874:	200004a8 	.word	0x200004a8
 8009878:	20000484 	.word	0x20000484
 800987c:	e000ed04 	.word	0xe000ed04

08009880 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009880:	b580      	push	{r7, lr}
 8009882:	b084      	sub	sp, #16
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009888:	2300      	movs	r3, #0
 800988a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d017      	beq.n	80098c2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009892:	4b13      	ldr	r3, [pc, #76]	; (80098e0 <vTaskDelay+0x60>)
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d00a      	beq.n	80098b0 <vTaskDelay+0x30>
	__asm volatile
 800989a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800989e:	f383 8811 	msr	BASEPRI, r3
 80098a2:	f3bf 8f6f 	isb	sy
 80098a6:	f3bf 8f4f 	dsb	sy
 80098aa:	60bb      	str	r3, [r7, #8]
}
 80098ac:	bf00      	nop
 80098ae:	e7fe      	b.n	80098ae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80098b0:	f000 f86a 	bl	8009988 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80098b4:	2100      	movs	r1, #0
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f000 fb2e 	bl	8009f18 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80098bc:	f000 f872 	bl	80099a4 <xTaskResumeAll>
 80098c0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d107      	bne.n	80098d8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80098c8:	4b06      	ldr	r3, [pc, #24]	; (80098e4 <vTaskDelay+0x64>)
 80098ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098ce:	601a      	str	r2, [r3, #0]
 80098d0:	f3bf 8f4f 	dsb	sy
 80098d4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80098d8:	bf00      	nop
 80098da:	3710      	adds	r7, #16
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}
 80098e0:	200004a8 	.word	0x200004a8
 80098e4:	e000ed04 	.word	0xe000ed04

080098e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b086      	sub	sp, #24
 80098ec:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80098ee:	4b1e      	ldr	r3, [pc, #120]	; (8009968 <vTaskStartScheduler+0x80>)
 80098f0:	9301      	str	r3, [sp, #4]
 80098f2:	2300      	movs	r3, #0
 80098f4:	9300      	str	r3, [sp, #0]
 80098f6:	2300      	movs	r3, #0
 80098f8:	2280      	movs	r2, #128	; 0x80
 80098fa:	491c      	ldr	r1, [pc, #112]	; (800996c <vTaskStartScheduler+0x84>)
 80098fc:	481c      	ldr	r0, [pc, #112]	; (8009970 <vTaskStartScheduler+0x88>)
 80098fe:	f7ff fdef 	bl	80094e0 <xTaskCreate>
 8009902:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	2b01      	cmp	r3, #1
 8009908:	d11b      	bne.n	8009942 <vTaskStartScheduler+0x5a>
	__asm volatile
 800990a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800990e:	f383 8811 	msr	BASEPRI, r3
 8009912:	f3bf 8f6f 	isb	sy
 8009916:	f3bf 8f4f 	dsb	sy
 800991a:	60bb      	str	r3, [r7, #8]
}
 800991c:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800991e:	4b15      	ldr	r3, [pc, #84]	; (8009974 <vTaskStartScheduler+0x8c>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	334c      	adds	r3, #76	; 0x4c
 8009924:	4a14      	ldr	r2, [pc, #80]	; (8009978 <vTaskStartScheduler+0x90>)
 8009926:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009928:	4b14      	ldr	r3, [pc, #80]	; (800997c <vTaskStartScheduler+0x94>)
 800992a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800992e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009930:	4b13      	ldr	r3, [pc, #76]	; (8009980 <vTaskStartScheduler+0x98>)
 8009932:	2201      	movs	r2, #1
 8009934:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009936:	4b13      	ldr	r3, [pc, #76]	; (8009984 <vTaskStartScheduler+0x9c>)
 8009938:	2200      	movs	r2, #0
 800993a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800993c:	f000 fbe0 	bl	800a100 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009940:	e00e      	b.n	8009960 <vTaskStartScheduler+0x78>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009948:	d10a      	bne.n	8009960 <vTaskStartScheduler+0x78>
	__asm volatile
 800994a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800994e:	f383 8811 	msr	BASEPRI, r3
 8009952:	f3bf 8f6f 	isb	sy
 8009956:	f3bf 8f4f 	dsb	sy
 800995a:	607b      	str	r3, [r7, #4]
}
 800995c:	bf00      	nop
 800995e:	e7fe      	b.n	800995e <vTaskStartScheduler+0x76>
}
 8009960:	bf00      	nop
 8009962:	3710      	adds	r7, #16
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}
 8009968:	200004a4 	.word	0x200004a4
 800996c:	0800d340 	.word	0x0800d340
 8009970:	08009da1 	.word	0x08009da1
 8009974:	20000380 	.word	0x20000380
 8009978:	2000015c 	.word	0x2000015c
 800997c:	200004a0 	.word	0x200004a0
 8009980:	2000048c 	.word	0x2000048c
 8009984:	20000484 	.word	0x20000484

08009988 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009988:	b480      	push	{r7}
 800998a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800998c:	4b04      	ldr	r3, [pc, #16]	; (80099a0 <vTaskSuspendAll+0x18>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	3301      	adds	r3, #1
 8009992:	4a03      	ldr	r2, [pc, #12]	; (80099a0 <vTaskSuspendAll+0x18>)
 8009994:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009996:	bf00      	nop
 8009998:	46bd      	mov	sp, r7
 800999a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999e:	4770      	bx	lr
 80099a0:	200004a8 	.word	0x200004a8

080099a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b084      	sub	sp, #16
 80099a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80099aa:	2300      	movs	r3, #0
 80099ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80099ae:	2300      	movs	r3, #0
 80099b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80099b2:	4b41      	ldr	r3, [pc, #260]	; (8009ab8 <xTaskResumeAll+0x114>)
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d10a      	bne.n	80099d0 <xTaskResumeAll+0x2c>
	__asm volatile
 80099ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099be:	f383 8811 	msr	BASEPRI, r3
 80099c2:	f3bf 8f6f 	isb	sy
 80099c6:	f3bf 8f4f 	dsb	sy
 80099ca:	603b      	str	r3, [r7, #0]
}
 80099cc:	bf00      	nop
 80099ce:	e7fe      	b.n	80099ce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80099d0:	f000 fc38 	bl	800a244 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80099d4:	4b38      	ldr	r3, [pc, #224]	; (8009ab8 <xTaskResumeAll+0x114>)
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	3b01      	subs	r3, #1
 80099da:	4a37      	ldr	r2, [pc, #220]	; (8009ab8 <xTaskResumeAll+0x114>)
 80099dc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80099de:	4b36      	ldr	r3, [pc, #216]	; (8009ab8 <xTaskResumeAll+0x114>)
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d161      	bne.n	8009aaa <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80099e6:	4b35      	ldr	r3, [pc, #212]	; (8009abc <xTaskResumeAll+0x118>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d05d      	beq.n	8009aaa <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80099ee:	e02e      	b.n	8009a4e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099f0:	4b33      	ldr	r3, [pc, #204]	; (8009ac0 <xTaskResumeAll+0x11c>)
 80099f2:	68db      	ldr	r3, [r3, #12]
 80099f4:	68db      	ldr	r3, [r3, #12]
 80099f6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	3318      	adds	r3, #24
 80099fc:	4618      	mov	r0, r3
 80099fe:	f7ff fd45 	bl	800948c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	3304      	adds	r3, #4
 8009a06:	4618      	mov	r0, r3
 8009a08:	f7ff fd40 	bl	800948c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a10:	2201      	movs	r2, #1
 8009a12:	409a      	lsls	r2, r3
 8009a14:	4b2b      	ldr	r3, [pc, #172]	; (8009ac4 <xTaskResumeAll+0x120>)
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	4313      	orrs	r3, r2
 8009a1a:	4a2a      	ldr	r2, [pc, #168]	; (8009ac4 <xTaskResumeAll+0x120>)
 8009a1c:	6013      	str	r3, [r2, #0]
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a22:	4613      	mov	r3, r2
 8009a24:	009b      	lsls	r3, r3, #2
 8009a26:	4413      	add	r3, r2
 8009a28:	009b      	lsls	r3, r3, #2
 8009a2a:	4a27      	ldr	r2, [pc, #156]	; (8009ac8 <xTaskResumeAll+0x124>)
 8009a2c:	441a      	add	r2, r3
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	3304      	adds	r3, #4
 8009a32:	4619      	mov	r1, r3
 8009a34:	4610      	mov	r0, r2
 8009a36:	f7ff fccc 	bl	80093d2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a3e:	4b23      	ldr	r3, [pc, #140]	; (8009acc <xTaskResumeAll+0x128>)
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a44:	429a      	cmp	r2, r3
 8009a46:	d302      	bcc.n	8009a4e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8009a48:	4b21      	ldr	r3, [pc, #132]	; (8009ad0 <xTaskResumeAll+0x12c>)
 8009a4a:	2201      	movs	r2, #1
 8009a4c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009a4e:	4b1c      	ldr	r3, [pc, #112]	; (8009ac0 <xTaskResumeAll+0x11c>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d1cc      	bne.n	80099f0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d001      	beq.n	8009a60 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009a5c:	f000 fa3c 	bl	8009ed8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009a60:	4b1c      	ldr	r3, [pc, #112]	; (8009ad4 <xTaskResumeAll+0x130>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d010      	beq.n	8009a8e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009a6c:	f000 f858 	bl	8009b20 <xTaskIncrementTick>
 8009a70:	4603      	mov	r3, r0
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d002      	beq.n	8009a7c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8009a76:	4b16      	ldr	r3, [pc, #88]	; (8009ad0 <xTaskResumeAll+0x12c>)
 8009a78:	2201      	movs	r2, #1
 8009a7a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	3b01      	subs	r3, #1
 8009a80:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d1f1      	bne.n	8009a6c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8009a88:	4b12      	ldr	r3, [pc, #72]	; (8009ad4 <xTaskResumeAll+0x130>)
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009a8e:	4b10      	ldr	r3, [pc, #64]	; (8009ad0 <xTaskResumeAll+0x12c>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d009      	beq.n	8009aaa <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009a96:	2301      	movs	r3, #1
 8009a98:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009a9a:	4b0f      	ldr	r3, [pc, #60]	; (8009ad8 <xTaskResumeAll+0x134>)
 8009a9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009aa0:	601a      	str	r2, [r3, #0]
 8009aa2:	f3bf 8f4f 	dsb	sy
 8009aa6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009aaa:	f000 fbfb 	bl	800a2a4 <vPortExitCritical>

	return xAlreadyYielded;
 8009aae:	68bb      	ldr	r3, [r7, #8]
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	3710      	adds	r7, #16
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bd80      	pop	{r7, pc}
 8009ab8:	200004a8 	.word	0x200004a8
 8009abc:	20000480 	.word	0x20000480
 8009ac0:	20000440 	.word	0x20000440
 8009ac4:	20000488 	.word	0x20000488
 8009ac8:	20000384 	.word	0x20000384
 8009acc:	20000380 	.word	0x20000380
 8009ad0:	20000494 	.word	0x20000494
 8009ad4:	20000490 	.word	0x20000490
 8009ad8:	e000ed04 	.word	0xe000ed04

08009adc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009adc:	b480      	push	{r7}
 8009ade:	b083      	sub	sp, #12
 8009ae0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009ae2:	4b05      	ldr	r3, [pc, #20]	; (8009af8 <xTaskGetTickCount+0x1c>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009ae8:	687b      	ldr	r3, [r7, #4]
}
 8009aea:	4618      	mov	r0, r3
 8009aec:	370c      	adds	r7, #12
 8009aee:	46bd      	mov	sp, r7
 8009af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af4:	4770      	bx	lr
 8009af6:	bf00      	nop
 8009af8:	20000484 	.word	0x20000484

08009afc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b082      	sub	sp, #8
 8009b00:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009b02:	f000 fc81 	bl	800a408 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8009b06:	2300      	movs	r3, #0
 8009b08:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8009b0a:	4b04      	ldr	r3, [pc, #16]	; (8009b1c <xTaskGetTickCountFromISR+0x20>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009b10:	683b      	ldr	r3, [r7, #0]
}
 8009b12:	4618      	mov	r0, r3
 8009b14:	3708      	adds	r7, #8
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd80      	pop	{r7, pc}
 8009b1a:	bf00      	nop
 8009b1c:	20000484 	.word	0x20000484

08009b20 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b086      	sub	sp, #24
 8009b24:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009b26:	2300      	movs	r3, #0
 8009b28:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b2a:	4b4e      	ldr	r3, [pc, #312]	; (8009c64 <xTaskIncrementTick+0x144>)
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	f040 808e 	bne.w	8009c50 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009b34:	4b4c      	ldr	r3, [pc, #304]	; (8009c68 <xTaskIncrementTick+0x148>)
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	3301      	adds	r3, #1
 8009b3a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009b3c:	4a4a      	ldr	r2, [pc, #296]	; (8009c68 <xTaskIncrementTick+0x148>)
 8009b3e:	693b      	ldr	r3, [r7, #16]
 8009b40:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009b42:	693b      	ldr	r3, [r7, #16]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d120      	bne.n	8009b8a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009b48:	4b48      	ldr	r3, [pc, #288]	; (8009c6c <xTaskIncrementTick+0x14c>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d00a      	beq.n	8009b68 <xTaskIncrementTick+0x48>
	__asm volatile
 8009b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b56:	f383 8811 	msr	BASEPRI, r3
 8009b5a:	f3bf 8f6f 	isb	sy
 8009b5e:	f3bf 8f4f 	dsb	sy
 8009b62:	603b      	str	r3, [r7, #0]
}
 8009b64:	bf00      	nop
 8009b66:	e7fe      	b.n	8009b66 <xTaskIncrementTick+0x46>
 8009b68:	4b40      	ldr	r3, [pc, #256]	; (8009c6c <xTaskIncrementTick+0x14c>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	60fb      	str	r3, [r7, #12]
 8009b6e:	4b40      	ldr	r3, [pc, #256]	; (8009c70 <xTaskIncrementTick+0x150>)
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	4a3e      	ldr	r2, [pc, #248]	; (8009c6c <xTaskIncrementTick+0x14c>)
 8009b74:	6013      	str	r3, [r2, #0]
 8009b76:	4a3e      	ldr	r2, [pc, #248]	; (8009c70 <xTaskIncrementTick+0x150>)
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	6013      	str	r3, [r2, #0]
 8009b7c:	4b3d      	ldr	r3, [pc, #244]	; (8009c74 <xTaskIncrementTick+0x154>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	3301      	adds	r3, #1
 8009b82:	4a3c      	ldr	r2, [pc, #240]	; (8009c74 <xTaskIncrementTick+0x154>)
 8009b84:	6013      	str	r3, [r2, #0]
 8009b86:	f000 f9a7 	bl	8009ed8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009b8a:	4b3b      	ldr	r3, [pc, #236]	; (8009c78 <xTaskIncrementTick+0x158>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	693a      	ldr	r2, [r7, #16]
 8009b90:	429a      	cmp	r2, r3
 8009b92:	d348      	bcc.n	8009c26 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009b94:	4b35      	ldr	r3, [pc, #212]	; (8009c6c <xTaskIncrementTick+0x14c>)
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d104      	bne.n	8009ba8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b9e:	4b36      	ldr	r3, [pc, #216]	; (8009c78 <xTaskIncrementTick+0x158>)
 8009ba0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009ba4:	601a      	str	r2, [r3, #0]
					break;
 8009ba6:	e03e      	b.n	8009c26 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ba8:	4b30      	ldr	r3, [pc, #192]	; (8009c6c <xTaskIncrementTick+0x14c>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	68db      	ldr	r3, [r3, #12]
 8009bae:	68db      	ldr	r3, [r3, #12]
 8009bb0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	685b      	ldr	r3, [r3, #4]
 8009bb6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009bb8:	693a      	ldr	r2, [r7, #16]
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	429a      	cmp	r2, r3
 8009bbe:	d203      	bcs.n	8009bc8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009bc0:	4a2d      	ldr	r2, [pc, #180]	; (8009c78 <xTaskIncrementTick+0x158>)
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009bc6:	e02e      	b.n	8009c26 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	3304      	adds	r3, #4
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f7ff fc5d 	bl	800948c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d004      	beq.n	8009be4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	3318      	adds	r3, #24
 8009bde:	4618      	mov	r0, r3
 8009be0:	f7ff fc54 	bl	800948c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009be8:	2201      	movs	r2, #1
 8009bea:	409a      	lsls	r2, r3
 8009bec:	4b23      	ldr	r3, [pc, #140]	; (8009c7c <xTaskIncrementTick+0x15c>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	4313      	orrs	r3, r2
 8009bf2:	4a22      	ldr	r2, [pc, #136]	; (8009c7c <xTaskIncrementTick+0x15c>)
 8009bf4:	6013      	str	r3, [r2, #0]
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bfa:	4613      	mov	r3, r2
 8009bfc:	009b      	lsls	r3, r3, #2
 8009bfe:	4413      	add	r3, r2
 8009c00:	009b      	lsls	r3, r3, #2
 8009c02:	4a1f      	ldr	r2, [pc, #124]	; (8009c80 <xTaskIncrementTick+0x160>)
 8009c04:	441a      	add	r2, r3
 8009c06:	68bb      	ldr	r3, [r7, #8]
 8009c08:	3304      	adds	r3, #4
 8009c0a:	4619      	mov	r1, r3
 8009c0c:	4610      	mov	r0, r2
 8009c0e:	f7ff fbe0 	bl	80093d2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c16:	4b1b      	ldr	r3, [pc, #108]	; (8009c84 <xTaskIncrementTick+0x164>)
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c1c:	429a      	cmp	r2, r3
 8009c1e:	d3b9      	bcc.n	8009b94 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009c20:	2301      	movs	r3, #1
 8009c22:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009c24:	e7b6      	b.n	8009b94 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009c26:	4b17      	ldr	r3, [pc, #92]	; (8009c84 <xTaskIncrementTick+0x164>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c2c:	4914      	ldr	r1, [pc, #80]	; (8009c80 <xTaskIncrementTick+0x160>)
 8009c2e:	4613      	mov	r3, r2
 8009c30:	009b      	lsls	r3, r3, #2
 8009c32:	4413      	add	r3, r2
 8009c34:	009b      	lsls	r3, r3, #2
 8009c36:	440b      	add	r3, r1
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	2b01      	cmp	r3, #1
 8009c3c:	d901      	bls.n	8009c42 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8009c3e:	2301      	movs	r3, #1
 8009c40:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009c42:	4b11      	ldr	r3, [pc, #68]	; (8009c88 <xTaskIncrementTick+0x168>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d007      	beq.n	8009c5a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	617b      	str	r3, [r7, #20]
 8009c4e:	e004      	b.n	8009c5a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009c50:	4b0e      	ldr	r3, [pc, #56]	; (8009c8c <xTaskIncrementTick+0x16c>)
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	3301      	adds	r3, #1
 8009c56:	4a0d      	ldr	r2, [pc, #52]	; (8009c8c <xTaskIncrementTick+0x16c>)
 8009c58:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009c5a:	697b      	ldr	r3, [r7, #20]
}
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	3718      	adds	r7, #24
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bd80      	pop	{r7, pc}
 8009c64:	200004a8 	.word	0x200004a8
 8009c68:	20000484 	.word	0x20000484
 8009c6c:	20000438 	.word	0x20000438
 8009c70:	2000043c 	.word	0x2000043c
 8009c74:	20000498 	.word	0x20000498
 8009c78:	200004a0 	.word	0x200004a0
 8009c7c:	20000488 	.word	0x20000488
 8009c80:	20000384 	.word	0x20000384
 8009c84:	20000380 	.word	0x20000380
 8009c88:	20000494 	.word	0x20000494
 8009c8c:	20000490 	.word	0x20000490

08009c90 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b088      	sub	sp, #32
 8009c94:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009c96:	4b3c      	ldr	r3, [pc, #240]	; (8009d88 <vTaskSwitchContext+0xf8>)
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d003      	beq.n	8009ca6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009c9e:	4b3b      	ldr	r3, [pc, #236]	; (8009d8c <vTaskSwitchContext+0xfc>)
 8009ca0:	2201      	movs	r2, #1
 8009ca2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009ca4:	e06b      	b.n	8009d7e <vTaskSwitchContext+0xee>
		xYieldPending = pdFALSE;
 8009ca6:	4b39      	ldr	r3, [pc, #228]	; (8009d8c <vTaskSwitchContext+0xfc>)
 8009ca8:	2200      	movs	r2, #0
 8009caa:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8009cac:	4b38      	ldr	r3, [pc, #224]	; (8009d90 <vTaskSwitchContext+0x100>)
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cb2:	61fb      	str	r3, [r7, #28]
 8009cb4:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8009cb8:	61bb      	str	r3, [r7, #24]
 8009cba:	69fb      	ldr	r3, [r7, #28]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	69ba      	ldr	r2, [r7, #24]
 8009cc0:	429a      	cmp	r2, r3
 8009cc2:	d111      	bne.n	8009ce8 <vTaskSwitchContext+0x58>
 8009cc4:	69fb      	ldr	r3, [r7, #28]
 8009cc6:	3304      	adds	r3, #4
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	69ba      	ldr	r2, [r7, #24]
 8009ccc:	429a      	cmp	r2, r3
 8009cce:	d10b      	bne.n	8009ce8 <vTaskSwitchContext+0x58>
 8009cd0:	69fb      	ldr	r3, [r7, #28]
 8009cd2:	3308      	adds	r3, #8
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	69ba      	ldr	r2, [r7, #24]
 8009cd8:	429a      	cmp	r2, r3
 8009cda:	d105      	bne.n	8009ce8 <vTaskSwitchContext+0x58>
 8009cdc:	69fb      	ldr	r3, [r7, #28]
 8009cde:	330c      	adds	r3, #12
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	69ba      	ldr	r2, [r7, #24]
 8009ce4:	429a      	cmp	r2, r3
 8009ce6:	d008      	beq.n	8009cfa <vTaskSwitchContext+0x6a>
 8009ce8:	4b29      	ldr	r3, [pc, #164]	; (8009d90 <vTaskSwitchContext+0x100>)
 8009cea:	681a      	ldr	r2, [r3, #0]
 8009cec:	4b28      	ldr	r3, [pc, #160]	; (8009d90 <vTaskSwitchContext+0x100>)
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	3334      	adds	r3, #52	; 0x34
 8009cf2:	4619      	mov	r1, r3
 8009cf4:	4610      	mov	r0, r2
 8009cf6:	f7f7 f943 	bl	8000f80 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cfa:	4b26      	ldr	r3, [pc, #152]	; (8009d94 <vTaskSwitchContext+0x104>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	fab3 f383 	clz	r3, r3
 8009d06:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009d08:	7afb      	ldrb	r3, [r7, #11]
 8009d0a:	f1c3 031f 	rsb	r3, r3, #31
 8009d0e:	617b      	str	r3, [r7, #20]
 8009d10:	4921      	ldr	r1, [pc, #132]	; (8009d98 <vTaskSwitchContext+0x108>)
 8009d12:	697a      	ldr	r2, [r7, #20]
 8009d14:	4613      	mov	r3, r2
 8009d16:	009b      	lsls	r3, r3, #2
 8009d18:	4413      	add	r3, r2
 8009d1a:	009b      	lsls	r3, r3, #2
 8009d1c:	440b      	add	r3, r1
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d10a      	bne.n	8009d3a <vTaskSwitchContext+0xaa>
	__asm volatile
 8009d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d28:	f383 8811 	msr	BASEPRI, r3
 8009d2c:	f3bf 8f6f 	isb	sy
 8009d30:	f3bf 8f4f 	dsb	sy
 8009d34:	607b      	str	r3, [r7, #4]
}
 8009d36:	bf00      	nop
 8009d38:	e7fe      	b.n	8009d38 <vTaskSwitchContext+0xa8>
 8009d3a:	697a      	ldr	r2, [r7, #20]
 8009d3c:	4613      	mov	r3, r2
 8009d3e:	009b      	lsls	r3, r3, #2
 8009d40:	4413      	add	r3, r2
 8009d42:	009b      	lsls	r3, r3, #2
 8009d44:	4a14      	ldr	r2, [pc, #80]	; (8009d98 <vTaskSwitchContext+0x108>)
 8009d46:	4413      	add	r3, r2
 8009d48:	613b      	str	r3, [r7, #16]
 8009d4a:	693b      	ldr	r3, [r7, #16]
 8009d4c:	685b      	ldr	r3, [r3, #4]
 8009d4e:	685a      	ldr	r2, [r3, #4]
 8009d50:	693b      	ldr	r3, [r7, #16]
 8009d52:	605a      	str	r2, [r3, #4]
 8009d54:	693b      	ldr	r3, [r7, #16]
 8009d56:	685a      	ldr	r2, [r3, #4]
 8009d58:	693b      	ldr	r3, [r7, #16]
 8009d5a:	3308      	adds	r3, #8
 8009d5c:	429a      	cmp	r2, r3
 8009d5e:	d104      	bne.n	8009d6a <vTaskSwitchContext+0xda>
 8009d60:	693b      	ldr	r3, [r7, #16]
 8009d62:	685b      	ldr	r3, [r3, #4]
 8009d64:	685a      	ldr	r2, [r3, #4]
 8009d66:	693b      	ldr	r3, [r7, #16]
 8009d68:	605a      	str	r2, [r3, #4]
 8009d6a:	693b      	ldr	r3, [r7, #16]
 8009d6c:	685b      	ldr	r3, [r3, #4]
 8009d6e:	68db      	ldr	r3, [r3, #12]
 8009d70:	4a07      	ldr	r2, [pc, #28]	; (8009d90 <vTaskSwitchContext+0x100>)
 8009d72:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009d74:	4b06      	ldr	r3, [pc, #24]	; (8009d90 <vTaskSwitchContext+0x100>)
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	334c      	adds	r3, #76	; 0x4c
 8009d7a:	4a08      	ldr	r2, [pc, #32]	; (8009d9c <vTaskSwitchContext+0x10c>)
 8009d7c:	6013      	str	r3, [r2, #0]
}
 8009d7e:	bf00      	nop
 8009d80:	3720      	adds	r7, #32
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}
 8009d86:	bf00      	nop
 8009d88:	200004a8 	.word	0x200004a8
 8009d8c:	20000494 	.word	0x20000494
 8009d90:	20000380 	.word	0x20000380
 8009d94:	20000488 	.word	0x20000488
 8009d98:	20000384 	.word	0x20000384
 8009d9c:	2000015c 	.word	0x2000015c

08009da0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b082      	sub	sp, #8
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009da8:	f000 f852 	bl	8009e50 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009dac:	4b06      	ldr	r3, [pc, #24]	; (8009dc8 <prvIdleTask+0x28>)
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	2b01      	cmp	r3, #1
 8009db2:	d9f9      	bls.n	8009da8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009db4:	4b05      	ldr	r3, [pc, #20]	; (8009dcc <prvIdleTask+0x2c>)
 8009db6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009dba:	601a      	str	r2, [r3, #0]
 8009dbc:	f3bf 8f4f 	dsb	sy
 8009dc0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009dc4:	e7f0      	b.n	8009da8 <prvIdleTask+0x8>
 8009dc6:	bf00      	nop
 8009dc8:	20000384 	.word	0x20000384
 8009dcc:	e000ed04 	.word	0xe000ed04

08009dd0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b082      	sub	sp, #8
 8009dd4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	607b      	str	r3, [r7, #4]
 8009dda:	e00c      	b.n	8009df6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009ddc:	687a      	ldr	r2, [r7, #4]
 8009dde:	4613      	mov	r3, r2
 8009de0:	009b      	lsls	r3, r3, #2
 8009de2:	4413      	add	r3, r2
 8009de4:	009b      	lsls	r3, r3, #2
 8009de6:	4a12      	ldr	r2, [pc, #72]	; (8009e30 <prvInitialiseTaskLists+0x60>)
 8009de8:	4413      	add	r3, r2
 8009dea:	4618      	mov	r0, r3
 8009dec:	f7ff fac4 	bl	8009378 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	3301      	adds	r3, #1
 8009df4:	607b      	str	r3, [r7, #4]
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	2b06      	cmp	r3, #6
 8009dfa:	d9ef      	bls.n	8009ddc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009dfc:	480d      	ldr	r0, [pc, #52]	; (8009e34 <prvInitialiseTaskLists+0x64>)
 8009dfe:	f7ff fabb 	bl	8009378 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009e02:	480d      	ldr	r0, [pc, #52]	; (8009e38 <prvInitialiseTaskLists+0x68>)
 8009e04:	f7ff fab8 	bl	8009378 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009e08:	480c      	ldr	r0, [pc, #48]	; (8009e3c <prvInitialiseTaskLists+0x6c>)
 8009e0a:	f7ff fab5 	bl	8009378 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009e0e:	480c      	ldr	r0, [pc, #48]	; (8009e40 <prvInitialiseTaskLists+0x70>)
 8009e10:	f7ff fab2 	bl	8009378 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009e14:	480b      	ldr	r0, [pc, #44]	; (8009e44 <prvInitialiseTaskLists+0x74>)
 8009e16:	f7ff faaf 	bl	8009378 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009e1a:	4b0b      	ldr	r3, [pc, #44]	; (8009e48 <prvInitialiseTaskLists+0x78>)
 8009e1c:	4a05      	ldr	r2, [pc, #20]	; (8009e34 <prvInitialiseTaskLists+0x64>)
 8009e1e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009e20:	4b0a      	ldr	r3, [pc, #40]	; (8009e4c <prvInitialiseTaskLists+0x7c>)
 8009e22:	4a05      	ldr	r2, [pc, #20]	; (8009e38 <prvInitialiseTaskLists+0x68>)
 8009e24:	601a      	str	r2, [r3, #0]
}
 8009e26:	bf00      	nop
 8009e28:	3708      	adds	r7, #8
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	bd80      	pop	{r7, pc}
 8009e2e:	bf00      	nop
 8009e30:	20000384 	.word	0x20000384
 8009e34:	20000410 	.word	0x20000410
 8009e38:	20000424 	.word	0x20000424
 8009e3c:	20000440 	.word	0x20000440
 8009e40:	20000454 	.word	0x20000454
 8009e44:	2000046c 	.word	0x2000046c
 8009e48:	20000438 	.word	0x20000438
 8009e4c:	2000043c 	.word	0x2000043c

08009e50 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b082      	sub	sp, #8
 8009e54:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009e56:	e019      	b.n	8009e8c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009e58:	f000 f9f4 	bl	800a244 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e5c:	4b10      	ldr	r3, [pc, #64]	; (8009ea0 <prvCheckTasksWaitingTermination+0x50>)
 8009e5e:	68db      	ldr	r3, [r3, #12]
 8009e60:	68db      	ldr	r3, [r3, #12]
 8009e62:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	3304      	adds	r3, #4
 8009e68:	4618      	mov	r0, r3
 8009e6a:	f7ff fb0f 	bl	800948c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009e6e:	4b0d      	ldr	r3, [pc, #52]	; (8009ea4 <prvCheckTasksWaitingTermination+0x54>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	3b01      	subs	r3, #1
 8009e74:	4a0b      	ldr	r2, [pc, #44]	; (8009ea4 <prvCheckTasksWaitingTermination+0x54>)
 8009e76:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009e78:	4b0b      	ldr	r3, [pc, #44]	; (8009ea8 <prvCheckTasksWaitingTermination+0x58>)
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	3b01      	subs	r3, #1
 8009e7e:	4a0a      	ldr	r2, [pc, #40]	; (8009ea8 <prvCheckTasksWaitingTermination+0x58>)
 8009e80:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009e82:	f000 fa0f 	bl	800a2a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f000 f810 	bl	8009eac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009e8c:	4b06      	ldr	r3, [pc, #24]	; (8009ea8 <prvCheckTasksWaitingTermination+0x58>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d1e1      	bne.n	8009e58 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009e94:	bf00      	nop
 8009e96:	bf00      	nop
 8009e98:	3708      	adds	r7, #8
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}
 8009e9e:	bf00      	nop
 8009ea0:	20000454 	.word	0x20000454
 8009ea4:	20000480 	.word	0x20000480
 8009ea8:	20000468 	.word	0x20000468

08009eac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b082      	sub	sp, #8
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	334c      	adds	r3, #76	; 0x4c
 8009eb8:	4618      	mov	r0, r3
 8009eba:	f002 fbad 	bl	800c618 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	f000 fbb0 	bl	800a628 <vPortFree>
			vPortFree( pxTCB );
 8009ec8:	6878      	ldr	r0, [r7, #4]
 8009eca:	f000 fbad 	bl	800a628 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009ece:	bf00      	nop
 8009ed0:	3708      	adds	r7, #8
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}
	...

08009ed8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009ed8:	b480      	push	{r7}
 8009eda:	b083      	sub	sp, #12
 8009edc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009ede:	4b0c      	ldr	r3, [pc, #48]	; (8009f10 <prvResetNextTaskUnblockTime+0x38>)
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d104      	bne.n	8009ef2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009ee8:	4b0a      	ldr	r3, [pc, #40]	; (8009f14 <prvResetNextTaskUnblockTime+0x3c>)
 8009eea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009eee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009ef0:	e008      	b.n	8009f04 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ef2:	4b07      	ldr	r3, [pc, #28]	; (8009f10 <prvResetNextTaskUnblockTime+0x38>)
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	68db      	ldr	r3, [r3, #12]
 8009ef8:	68db      	ldr	r3, [r3, #12]
 8009efa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	685b      	ldr	r3, [r3, #4]
 8009f00:	4a04      	ldr	r2, [pc, #16]	; (8009f14 <prvResetNextTaskUnblockTime+0x3c>)
 8009f02:	6013      	str	r3, [r2, #0]
}
 8009f04:	bf00      	nop
 8009f06:	370c      	adds	r7, #12
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0e:	4770      	bx	lr
 8009f10:	20000438 	.word	0x20000438
 8009f14:	200004a0 	.word	0x200004a0

08009f18 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b084      	sub	sp, #16
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
 8009f20:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009f22:	4b29      	ldr	r3, [pc, #164]	; (8009fc8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009f28:	4b28      	ldr	r3, [pc, #160]	; (8009fcc <prvAddCurrentTaskToDelayedList+0xb4>)
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	3304      	adds	r3, #4
 8009f2e:	4618      	mov	r0, r3
 8009f30:	f7ff faac 	bl	800948c <uxListRemove>
 8009f34:	4603      	mov	r3, r0
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d10b      	bne.n	8009f52 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009f3a:	4b24      	ldr	r3, [pc, #144]	; (8009fcc <prvAddCurrentTaskToDelayedList+0xb4>)
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f40:	2201      	movs	r2, #1
 8009f42:	fa02 f303 	lsl.w	r3, r2, r3
 8009f46:	43da      	mvns	r2, r3
 8009f48:	4b21      	ldr	r3, [pc, #132]	; (8009fd0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	4013      	ands	r3, r2
 8009f4e:	4a20      	ldr	r2, [pc, #128]	; (8009fd0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009f50:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f58:	d10a      	bne.n	8009f70 <prvAddCurrentTaskToDelayedList+0x58>
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d007      	beq.n	8009f70 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f60:	4b1a      	ldr	r3, [pc, #104]	; (8009fcc <prvAddCurrentTaskToDelayedList+0xb4>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	3304      	adds	r3, #4
 8009f66:	4619      	mov	r1, r3
 8009f68:	481a      	ldr	r0, [pc, #104]	; (8009fd4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009f6a:	f7ff fa32 	bl	80093d2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009f6e:	e026      	b.n	8009fbe <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009f70:	68fa      	ldr	r2, [r7, #12]
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	4413      	add	r3, r2
 8009f76:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009f78:	4b14      	ldr	r3, [pc, #80]	; (8009fcc <prvAddCurrentTaskToDelayedList+0xb4>)
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	68ba      	ldr	r2, [r7, #8]
 8009f7e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009f80:	68ba      	ldr	r2, [r7, #8]
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	429a      	cmp	r2, r3
 8009f86:	d209      	bcs.n	8009f9c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f88:	4b13      	ldr	r3, [pc, #76]	; (8009fd8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009f8a:	681a      	ldr	r2, [r3, #0]
 8009f8c:	4b0f      	ldr	r3, [pc, #60]	; (8009fcc <prvAddCurrentTaskToDelayedList+0xb4>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	3304      	adds	r3, #4
 8009f92:	4619      	mov	r1, r3
 8009f94:	4610      	mov	r0, r2
 8009f96:	f7ff fa40 	bl	800941a <vListInsert>
}
 8009f9a:	e010      	b.n	8009fbe <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f9c:	4b0f      	ldr	r3, [pc, #60]	; (8009fdc <prvAddCurrentTaskToDelayedList+0xc4>)
 8009f9e:	681a      	ldr	r2, [r3, #0]
 8009fa0:	4b0a      	ldr	r3, [pc, #40]	; (8009fcc <prvAddCurrentTaskToDelayedList+0xb4>)
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	3304      	adds	r3, #4
 8009fa6:	4619      	mov	r1, r3
 8009fa8:	4610      	mov	r0, r2
 8009faa:	f7ff fa36 	bl	800941a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009fae:	4b0c      	ldr	r3, [pc, #48]	; (8009fe0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	68ba      	ldr	r2, [r7, #8]
 8009fb4:	429a      	cmp	r2, r3
 8009fb6:	d202      	bcs.n	8009fbe <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009fb8:	4a09      	ldr	r2, [pc, #36]	; (8009fe0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	6013      	str	r3, [r2, #0]
}
 8009fbe:	bf00      	nop
 8009fc0:	3710      	adds	r7, #16
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bd80      	pop	{r7, pc}
 8009fc6:	bf00      	nop
 8009fc8:	20000484 	.word	0x20000484
 8009fcc:	20000380 	.word	0x20000380
 8009fd0:	20000488 	.word	0x20000488
 8009fd4:	2000046c 	.word	0x2000046c
 8009fd8:	2000043c 	.word	0x2000043c
 8009fdc:	20000438 	.word	0x20000438
 8009fe0:	200004a0 	.word	0x200004a0

08009fe4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009fe4:	b480      	push	{r7}
 8009fe6:	b085      	sub	sp, #20
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	60f8      	str	r0, [r7, #12]
 8009fec:	60b9      	str	r1, [r7, #8]
 8009fee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	3b04      	subs	r3, #4
 8009ff4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009ffc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	3b04      	subs	r3, #4
 800a002:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a004:	68bb      	ldr	r3, [r7, #8]
 800a006:	f023 0201 	bic.w	r2, r3, #1
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	3b04      	subs	r3, #4
 800a012:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a014:	4a0c      	ldr	r2, [pc, #48]	; (800a048 <pxPortInitialiseStack+0x64>)
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	3b14      	subs	r3, #20
 800a01e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a020:	687a      	ldr	r2, [r7, #4]
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	3b04      	subs	r3, #4
 800a02a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	f06f 0202 	mvn.w	r2, #2
 800a032:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	3b20      	subs	r3, #32
 800a038:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a03a:	68fb      	ldr	r3, [r7, #12]
}
 800a03c:	4618      	mov	r0, r3
 800a03e:	3714      	adds	r7, #20
 800a040:	46bd      	mov	sp, r7
 800a042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a046:	4770      	bx	lr
 800a048:	0800a04d 	.word	0x0800a04d

0800a04c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a04c:	b480      	push	{r7}
 800a04e:	b085      	sub	sp, #20
 800a050:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a052:	2300      	movs	r3, #0
 800a054:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a056:	4b12      	ldr	r3, [pc, #72]	; (800a0a0 <prvTaskExitError+0x54>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a05e:	d00a      	beq.n	800a076 <prvTaskExitError+0x2a>
	__asm volatile
 800a060:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a064:	f383 8811 	msr	BASEPRI, r3
 800a068:	f3bf 8f6f 	isb	sy
 800a06c:	f3bf 8f4f 	dsb	sy
 800a070:	60fb      	str	r3, [r7, #12]
}
 800a072:	bf00      	nop
 800a074:	e7fe      	b.n	800a074 <prvTaskExitError+0x28>
	__asm volatile
 800a076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a07a:	f383 8811 	msr	BASEPRI, r3
 800a07e:	f3bf 8f6f 	isb	sy
 800a082:	f3bf 8f4f 	dsb	sy
 800a086:	60bb      	str	r3, [r7, #8]
}
 800a088:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a08a:	bf00      	nop
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d0fc      	beq.n	800a08c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a092:	bf00      	nop
 800a094:	bf00      	nop
 800a096:	3714      	adds	r7, #20
 800a098:	46bd      	mov	sp, r7
 800a09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09e:	4770      	bx	lr
 800a0a0:	20000098 	.word	0x20000098
	...

0800a0b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a0b0:	4b07      	ldr	r3, [pc, #28]	; (800a0d0 <pxCurrentTCBConst2>)
 800a0b2:	6819      	ldr	r1, [r3, #0]
 800a0b4:	6808      	ldr	r0, [r1, #0]
 800a0b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0ba:	f380 8809 	msr	PSP, r0
 800a0be:	f3bf 8f6f 	isb	sy
 800a0c2:	f04f 0000 	mov.w	r0, #0
 800a0c6:	f380 8811 	msr	BASEPRI, r0
 800a0ca:	4770      	bx	lr
 800a0cc:	f3af 8000 	nop.w

0800a0d0 <pxCurrentTCBConst2>:
 800a0d0:	20000380 	.word	0x20000380
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a0d4:	bf00      	nop
 800a0d6:	bf00      	nop

0800a0d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a0d8:	4808      	ldr	r0, [pc, #32]	; (800a0fc <prvPortStartFirstTask+0x24>)
 800a0da:	6800      	ldr	r0, [r0, #0]
 800a0dc:	6800      	ldr	r0, [r0, #0]
 800a0de:	f380 8808 	msr	MSP, r0
 800a0e2:	f04f 0000 	mov.w	r0, #0
 800a0e6:	f380 8814 	msr	CONTROL, r0
 800a0ea:	b662      	cpsie	i
 800a0ec:	b661      	cpsie	f
 800a0ee:	f3bf 8f4f 	dsb	sy
 800a0f2:	f3bf 8f6f 	isb	sy
 800a0f6:	df00      	svc	0
 800a0f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a0fa:	bf00      	nop
 800a0fc:	e000ed08 	.word	0xe000ed08

0800a100 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b086      	sub	sp, #24
 800a104:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a106:	4b46      	ldr	r3, [pc, #280]	; (800a220 <xPortStartScheduler+0x120>)
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	4a46      	ldr	r2, [pc, #280]	; (800a224 <xPortStartScheduler+0x124>)
 800a10c:	4293      	cmp	r3, r2
 800a10e:	d10a      	bne.n	800a126 <xPortStartScheduler+0x26>
	__asm volatile
 800a110:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a114:	f383 8811 	msr	BASEPRI, r3
 800a118:	f3bf 8f6f 	isb	sy
 800a11c:	f3bf 8f4f 	dsb	sy
 800a120:	613b      	str	r3, [r7, #16]
}
 800a122:	bf00      	nop
 800a124:	e7fe      	b.n	800a124 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a126:	4b3e      	ldr	r3, [pc, #248]	; (800a220 <xPortStartScheduler+0x120>)
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	4a3f      	ldr	r2, [pc, #252]	; (800a228 <xPortStartScheduler+0x128>)
 800a12c:	4293      	cmp	r3, r2
 800a12e:	d10a      	bne.n	800a146 <xPortStartScheduler+0x46>
	__asm volatile
 800a130:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a134:	f383 8811 	msr	BASEPRI, r3
 800a138:	f3bf 8f6f 	isb	sy
 800a13c:	f3bf 8f4f 	dsb	sy
 800a140:	60fb      	str	r3, [r7, #12]
}
 800a142:	bf00      	nop
 800a144:	e7fe      	b.n	800a144 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a146:	4b39      	ldr	r3, [pc, #228]	; (800a22c <xPortStartScheduler+0x12c>)
 800a148:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a14a:	697b      	ldr	r3, [r7, #20]
 800a14c:	781b      	ldrb	r3, [r3, #0]
 800a14e:	b2db      	uxtb	r3, r3
 800a150:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a152:	697b      	ldr	r3, [r7, #20]
 800a154:	22ff      	movs	r2, #255	; 0xff
 800a156:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a158:	697b      	ldr	r3, [r7, #20]
 800a15a:	781b      	ldrb	r3, [r3, #0]
 800a15c:	b2db      	uxtb	r3, r3
 800a15e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a160:	78fb      	ldrb	r3, [r7, #3]
 800a162:	b2db      	uxtb	r3, r3
 800a164:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a168:	b2da      	uxtb	r2, r3
 800a16a:	4b31      	ldr	r3, [pc, #196]	; (800a230 <xPortStartScheduler+0x130>)
 800a16c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a16e:	4b31      	ldr	r3, [pc, #196]	; (800a234 <xPortStartScheduler+0x134>)
 800a170:	2207      	movs	r2, #7
 800a172:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a174:	e009      	b.n	800a18a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a176:	4b2f      	ldr	r3, [pc, #188]	; (800a234 <xPortStartScheduler+0x134>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	3b01      	subs	r3, #1
 800a17c:	4a2d      	ldr	r2, [pc, #180]	; (800a234 <xPortStartScheduler+0x134>)
 800a17e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a180:	78fb      	ldrb	r3, [r7, #3]
 800a182:	b2db      	uxtb	r3, r3
 800a184:	005b      	lsls	r3, r3, #1
 800a186:	b2db      	uxtb	r3, r3
 800a188:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a18a:	78fb      	ldrb	r3, [r7, #3]
 800a18c:	b2db      	uxtb	r3, r3
 800a18e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a192:	2b80      	cmp	r3, #128	; 0x80
 800a194:	d0ef      	beq.n	800a176 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a196:	4b27      	ldr	r3, [pc, #156]	; (800a234 <xPortStartScheduler+0x134>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	f1c3 0307 	rsb	r3, r3, #7
 800a19e:	2b04      	cmp	r3, #4
 800a1a0:	d00a      	beq.n	800a1b8 <xPortStartScheduler+0xb8>
	__asm volatile
 800a1a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1a6:	f383 8811 	msr	BASEPRI, r3
 800a1aa:	f3bf 8f6f 	isb	sy
 800a1ae:	f3bf 8f4f 	dsb	sy
 800a1b2:	60bb      	str	r3, [r7, #8]
}
 800a1b4:	bf00      	nop
 800a1b6:	e7fe      	b.n	800a1b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a1b8:	4b1e      	ldr	r3, [pc, #120]	; (800a234 <xPortStartScheduler+0x134>)
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	021b      	lsls	r3, r3, #8
 800a1be:	4a1d      	ldr	r2, [pc, #116]	; (800a234 <xPortStartScheduler+0x134>)
 800a1c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a1c2:	4b1c      	ldr	r3, [pc, #112]	; (800a234 <xPortStartScheduler+0x134>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a1ca:	4a1a      	ldr	r2, [pc, #104]	; (800a234 <xPortStartScheduler+0x134>)
 800a1cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	b2da      	uxtb	r2, r3
 800a1d2:	697b      	ldr	r3, [r7, #20]
 800a1d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a1d6:	4b18      	ldr	r3, [pc, #96]	; (800a238 <xPortStartScheduler+0x138>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	4a17      	ldr	r2, [pc, #92]	; (800a238 <xPortStartScheduler+0x138>)
 800a1dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a1e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a1e2:	4b15      	ldr	r3, [pc, #84]	; (800a238 <xPortStartScheduler+0x138>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	4a14      	ldr	r2, [pc, #80]	; (800a238 <xPortStartScheduler+0x138>)
 800a1e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a1ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a1ee:	f000 f8dd 	bl	800a3ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a1f2:	4b12      	ldr	r3, [pc, #72]	; (800a23c <xPortStartScheduler+0x13c>)
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a1f8:	f000 f8fc 	bl	800a3f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a1fc:	4b10      	ldr	r3, [pc, #64]	; (800a240 <xPortStartScheduler+0x140>)
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	4a0f      	ldr	r2, [pc, #60]	; (800a240 <xPortStartScheduler+0x140>)
 800a202:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a206:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a208:	f7ff ff66 	bl	800a0d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a20c:	f7ff fd40 	bl	8009c90 <vTaskSwitchContext>
	prvTaskExitError();
 800a210:	f7ff ff1c 	bl	800a04c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a214:	2300      	movs	r3, #0
}
 800a216:	4618      	mov	r0, r3
 800a218:	3718      	adds	r7, #24
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}
 800a21e:	bf00      	nop
 800a220:	e000ed00 	.word	0xe000ed00
 800a224:	410fc271 	.word	0x410fc271
 800a228:	410fc270 	.word	0x410fc270
 800a22c:	e000e400 	.word	0xe000e400
 800a230:	200004ac 	.word	0x200004ac
 800a234:	200004b0 	.word	0x200004b0
 800a238:	e000ed20 	.word	0xe000ed20
 800a23c:	20000098 	.word	0x20000098
 800a240:	e000ef34 	.word	0xe000ef34

0800a244 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a244:	b480      	push	{r7}
 800a246:	b083      	sub	sp, #12
 800a248:	af00      	add	r7, sp, #0
	__asm volatile
 800a24a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a24e:	f383 8811 	msr	BASEPRI, r3
 800a252:	f3bf 8f6f 	isb	sy
 800a256:	f3bf 8f4f 	dsb	sy
 800a25a:	607b      	str	r3, [r7, #4]
}
 800a25c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a25e:	4b0f      	ldr	r3, [pc, #60]	; (800a29c <vPortEnterCritical+0x58>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	3301      	adds	r3, #1
 800a264:	4a0d      	ldr	r2, [pc, #52]	; (800a29c <vPortEnterCritical+0x58>)
 800a266:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a268:	4b0c      	ldr	r3, [pc, #48]	; (800a29c <vPortEnterCritical+0x58>)
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	2b01      	cmp	r3, #1
 800a26e:	d10f      	bne.n	800a290 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a270:	4b0b      	ldr	r3, [pc, #44]	; (800a2a0 <vPortEnterCritical+0x5c>)
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	b2db      	uxtb	r3, r3
 800a276:	2b00      	cmp	r3, #0
 800a278:	d00a      	beq.n	800a290 <vPortEnterCritical+0x4c>
	__asm volatile
 800a27a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a27e:	f383 8811 	msr	BASEPRI, r3
 800a282:	f3bf 8f6f 	isb	sy
 800a286:	f3bf 8f4f 	dsb	sy
 800a28a:	603b      	str	r3, [r7, #0]
}
 800a28c:	bf00      	nop
 800a28e:	e7fe      	b.n	800a28e <vPortEnterCritical+0x4a>
	}
}
 800a290:	bf00      	nop
 800a292:	370c      	adds	r7, #12
 800a294:	46bd      	mov	sp, r7
 800a296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29a:	4770      	bx	lr
 800a29c:	20000098 	.word	0x20000098
 800a2a0:	e000ed04 	.word	0xe000ed04

0800a2a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	b083      	sub	sp, #12
 800a2a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a2aa:	4b12      	ldr	r3, [pc, #72]	; (800a2f4 <vPortExitCritical+0x50>)
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d10a      	bne.n	800a2c8 <vPortExitCritical+0x24>
	__asm volatile
 800a2b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2b6:	f383 8811 	msr	BASEPRI, r3
 800a2ba:	f3bf 8f6f 	isb	sy
 800a2be:	f3bf 8f4f 	dsb	sy
 800a2c2:	607b      	str	r3, [r7, #4]
}
 800a2c4:	bf00      	nop
 800a2c6:	e7fe      	b.n	800a2c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a2c8:	4b0a      	ldr	r3, [pc, #40]	; (800a2f4 <vPortExitCritical+0x50>)
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	3b01      	subs	r3, #1
 800a2ce:	4a09      	ldr	r2, [pc, #36]	; (800a2f4 <vPortExitCritical+0x50>)
 800a2d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a2d2:	4b08      	ldr	r3, [pc, #32]	; (800a2f4 <vPortExitCritical+0x50>)
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d105      	bne.n	800a2e6 <vPortExitCritical+0x42>
 800a2da:	2300      	movs	r3, #0
 800a2dc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a2e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a2e6:	bf00      	nop
 800a2e8:	370c      	adds	r7, #12
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f0:	4770      	bx	lr
 800a2f2:	bf00      	nop
 800a2f4:	20000098 	.word	0x20000098
	...

0800a300 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a300:	f3ef 8009 	mrs	r0, PSP
 800a304:	f3bf 8f6f 	isb	sy
 800a308:	4b15      	ldr	r3, [pc, #84]	; (800a360 <pxCurrentTCBConst>)
 800a30a:	681a      	ldr	r2, [r3, #0]
 800a30c:	f01e 0f10 	tst.w	lr, #16
 800a310:	bf08      	it	eq
 800a312:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a316:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a31a:	6010      	str	r0, [r2, #0]
 800a31c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a320:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a324:	f380 8811 	msr	BASEPRI, r0
 800a328:	f3bf 8f4f 	dsb	sy
 800a32c:	f3bf 8f6f 	isb	sy
 800a330:	f7ff fcae 	bl	8009c90 <vTaskSwitchContext>
 800a334:	f04f 0000 	mov.w	r0, #0
 800a338:	f380 8811 	msr	BASEPRI, r0
 800a33c:	bc09      	pop	{r0, r3}
 800a33e:	6819      	ldr	r1, [r3, #0]
 800a340:	6808      	ldr	r0, [r1, #0]
 800a342:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a346:	f01e 0f10 	tst.w	lr, #16
 800a34a:	bf08      	it	eq
 800a34c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a350:	f380 8809 	msr	PSP, r0
 800a354:	f3bf 8f6f 	isb	sy
 800a358:	4770      	bx	lr
 800a35a:	bf00      	nop
 800a35c:	f3af 8000 	nop.w

0800a360 <pxCurrentTCBConst>:
 800a360:	20000380 	.word	0x20000380
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a364:	bf00      	nop
 800a366:	bf00      	nop

0800a368 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b082      	sub	sp, #8
 800a36c:	af00      	add	r7, sp, #0
	__asm volatile
 800a36e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a372:	f383 8811 	msr	BASEPRI, r3
 800a376:	f3bf 8f6f 	isb	sy
 800a37a:	f3bf 8f4f 	dsb	sy
 800a37e:	607b      	str	r3, [r7, #4]
}
 800a380:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a382:	f7ff fbcd 	bl	8009b20 <xTaskIncrementTick>
 800a386:	4603      	mov	r3, r0
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d003      	beq.n	800a394 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a38c:	4b06      	ldr	r3, [pc, #24]	; (800a3a8 <SysTick_Handler+0x40>)
 800a38e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a392:	601a      	str	r2, [r3, #0]
 800a394:	2300      	movs	r3, #0
 800a396:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	f383 8811 	msr	BASEPRI, r3
}
 800a39e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a3a0:	bf00      	nop
 800a3a2:	3708      	adds	r7, #8
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bd80      	pop	{r7, pc}
 800a3a8:	e000ed04 	.word	0xe000ed04

0800a3ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a3ac:	b480      	push	{r7}
 800a3ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a3b0:	4b0b      	ldr	r3, [pc, #44]	; (800a3e0 <vPortSetupTimerInterrupt+0x34>)
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a3b6:	4b0b      	ldr	r3, [pc, #44]	; (800a3e4 <vPortSetupTimerInterrupt+0x38>)
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a3bc:	4b0a      	ldr	r3, [pc, #40]	; (800a3e8 <vPortSetupTimerInterrupt+0x3c>)
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	4a0a      	ldr	r2, [pc, #40]	; (800a3ec <vPortSetupTimerInterrupt+0x40>)
 800a3c2:	fba2 2303 	umull	r2, r3, r2, r3
 800a3c6:	099b      	lsrs	r3, r3, #6
 800a3c8:	4a09      	ldr	r2, [pc, #36]	; (800a3f0 <vPortSetupTimerInterrupt+0x44>)
 800a3ca:	3b01      	subs	r3, #1
 800a3cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a3ce:	4b04      	ldr	r3, [pc, #16]	; (800a3e0 <vPortSetupTimerInterrupt+0x34>)
 800a3d0:	2207      	movs	r2, #7
 800a3d2:	601a      	str	r2, [r3, #0]
}
 800a3d4:	bf00      	nop
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3dc:	4770      	bx	lr
 800a3de:	bf00      	nop
 800a3e0:	e000e010 	.word	0xe000e010
 800a3e4:	e000e018 	.word	0xe000e018
 800a3e8:	20000000 	.word	0x20000000
 800a3ec:	10624dd3 	.word	0x10624dd3
 800a3f0:	e000e014 	.word	0xe000e014

0800a3f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a3f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a404 <vPortEnableVFP+0x10>
 800a3f8:	6801      	ldr	r1, [r0, #0]
 800a3fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a3fe:	6001      	str	r1, [r0, #0]
 800a400:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a402:	bf00      	nop
 800a404:	e000ed88 	.word	0xe000ed88

0800a408 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a408:	b480      	push	{r7}
 800a40a:	b085      	sub	sp, #20
 800a40c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a40e:	f3ef 8305 	mrs	r3, IPSR
 800a412:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	2b0f      	cmp	r3, #15
 800a418:	d914      	bls.n	800a444 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a41a:	4a17      	ldr	r2, [pc, #92]	; (800a478 <vPortValidateInterruptPriority+0x70>)
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	4413      	add	r3, r2
 800a420:	781b      	ldrb	r3, [r3, #0]
 800a422:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a424:	4b15      	ldr	r3, [pc, #84]	; (800a47c <vPortValidateInterruptPriority+0x74>)
 800a426:	781b      	ldrb	r3, [r3, #0]
 800a428:	7afa      	ldrb	r2, [r7, #11]
 800a42a:	429a      	cmp	r2, r3
 800a42c:	d20a      	bcs.n	800a444 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a42e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a432:	f383 8811 	msr	BASEPRI, r3
 800a436:	f3bf 8f6f 	isb	sy
 800a43a:	f3bf 8f4f 	dsb	sy
 800a43e:	607b      	str	r3, [r7, #4]
}
 800a440:	bf00      	nop
 800a442:	e7fe      	b.n	800a442 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a444:	4b0e      	ldr	r3, [pc, #56]	; (800a480 <vPortValidateInterruptPriority+0x78>)
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a44c:	4b0d      	ldr	r3, [pc, #52]	; (800a484 <vPortValidateInterruptPriority+0x7c>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	429a      	cmp	r2, r3
 800a452:	d90a      	bls.n	800a46a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a454:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a458:	f383 8811 	msr	BASEPRI, r3
 800a45c:	f3bf 8f6f 	isb	sy
 800a460:	f3bf 8f4f 	dsb	sy
 800a464:	603b      	str	r3, [r7, #0]
}
 800a466:	bf00      	nop
 800a468:	e7fe      	b.n	800a468 <vPortValidateInterruptPriority+0x60>
	}
 800a46a:	bf00      	nop
 800a46c:	3714      	adds	r7, #20
 800a46e:	46bd      	mov	sp, r7
 800a470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a474:	4770      	bx	lr
 800a476:	bf00      	nop
 800a478:	e000e3f0 	.word	0xe000e3f0
 800a47c:	200004ac 	.word	0x200004ac
 800a480:	e000ed0c 	.word	0xe000ed0c
 800a484:	200004b0 	.word	0x200004b0

0800a488 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b08a      	sub	sp, #40	; 0x28
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a490:	2300      	movs	r3, #0
 800a492:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a494:	f7ff fa78 	bl	8009988 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a498:	4b5d      	ldr	r3, [pc, #372]	; (800a610 <pvPortMalloc+0x188>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d101      	bne.n	800a4a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a4a0:	f000 f924 	bl	800a6ec <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a4a4:	4b5b      	ldr	r3, [pc, #364]	; (800a614 <pvPortMalloc+0x18c>)
 800a4a6:	681a      	ldr	r2, [r3, #0]
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	4013      	ands	r3, r2
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	f040 8093 	bne.w	800a5d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d01d      	beq.n	800a4f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a4b8:	2208      	movs	r2, #8
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	4413      	add	r3, r2
 800a4be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	f003 0307 	and.w	r3, r3, #7
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d014      	beq.n	800a4f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	f023 0307 	bic.w	r3, r3, #7
 800a4d0:	3308      	adds	r3, #8
 800a4d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	f003 0307 	and.w	r3, r3, #7
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d00a      	beq.n	800a4f4 <pvPortMalloc+0x6c>
	__asm volatile
 800a4de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4e2:	f383 8811 	msr	BASEPRI, r3
 800a4e6:	f3bf 8f6f 	isb	sy
 800a4ea:	f3bf 8f4f 	dsb	sy
 800a4ee:	617b      	str	r3, [r7, #20]
}
 800a4f0:	bf00      	nop
 800a4f2:	e7fe      	b.n	800a4f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d06e      	beq.n	800a5d8 <pvPortMalloc+0x150>
 800a4fa:	4b47      	ldr	r3, [pc, #284]	; (800a618 <pvPortMalloc+0x190>)
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	687a      	ldr	r2, [r7, #4]
 800a500:	429a      	cmp	r2, r3
 800a502:	d869      	bhi.n	800a5d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a504:	4b45      	ldr	r3, [pc, #276]	; (800a61c <pvPortMalloc+0x194>)
 800a506:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a508:	4b44      	ldr	r3, [pc, #272]	; (800a61c <pvPortMalloc+0x194>)
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a50e:	e004      	b.n	800a51a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a512:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a51a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a51c:	685b      	ldr	r3, [r3, #4]
 800a51e:	687a      	ldr	r2, [r7, #4]
 800a520:	429a      	cmp	r2, r3
 800a522:	d903      	bls.n	800a52c <pvPortMalloc+0xa4>
 800a524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d1f1      	bne.n	800a510 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a52c:	4b38      	ldr	r3, [pc, #224]	; (800a610 <pvPortMalloc+0x188>)
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a532:	429a      	cmp	r2, r3
 800a534:	d050      	beq.n	800a5d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a536:	6a3b      	ldr	r3, [r7, #32]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	2208      	movs	r2, #8
 800a53c:	4413      	add	r3, r2
 800a53e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a542:	681a      	ldr	r2, [r3, #0]
 800a544:	6a3b      	ldr	r3, [r7, #32]
 800a546:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a54a:	685a      	ldr	r2, [r3, #4]
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	1ad2      	subs	r2, r2, r3
 800a550:	2308      	movs	r3, #8
 800a552:	005b      	lsls	r3, r3, #1
 800a554:	429a      	cmp	r2, r3
 800a556:	d91f      	bls.n	800a598 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	4413      	add	r3, r2
 800a55e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a560:	69bb      	ldr	r3, [r7, #24]
 800a562:	f003 0307 	and.w	r3, r3, #7
 800a566:	2b00      	cmp	r3, #0
 800a568:	d00a      	beq.n	800a580 <pvPortMalloc+0xf8>
	__asm volatile
 800a56a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a56e:	f383 8811 	msr	BASEPRI, r3
 800a572:	f3bf 8f6f 	isb	sy
 800a576:	f3bf 8f4f 	dsb	sy
 800a57a:	613b      	str	r3, [r7, #16]
}
 800a57c:	bf00      	nop
 800a57e:	e7fe      	b.n	800a57e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a582:	685a      	ldr	r2, [r3, #4]
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	1ad2      	subs	r2, r2, r3
 800a588:	69bb      	ldr	r3, [r7, #24]
 800a58a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a58c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a58e:	687a      	ldr	r2, [r7, #4]
 800a590:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a592:	69b8      	ldr	r0, [r7, #24]
 800a594:	f000 f90c 	bl	800a7b0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a598:	4b1f      	ldr	r3, [pc, #124]	; (800a618 <pvPortMalloc+0x190>)
 800a59a:	681a      	ldr	r2, [r3, #0]
 800a59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a59e:	685b      	ldr	r3, [r3, #4]
 800a5a0:	1ad3      	subs	r3, r2, r3
 800a5a2:	4a1d      	ldr	r2, [pc, #116]	; (800a618 <pvPortMalloc+0x190>)
 800a5a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a5a6:	4b1c      	ldr	r3, [pc, #112]	; (800a618 <pvPortMalloc+0x190>)
 800a5a8:	681a      	ldr	r2, [r3, #0]
 800a5aa:	4b1d      	ldr	r3, [pc, #116]	; (800a620 <pvPortMalloc+0x198>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	429a      	cmp	r2, r3
 800a5b0:	d203      	bcs.n	800a5ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a5b2:	4b19      	ldr	r3, [pc, #100]	; (800a618 <pvPortMalloc+0x190>)
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	4a1a      	ldr	r2, [pc, #104]	; (800a620 <pvPortMalloc+0x198>)
 800a5b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a5ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5bc:	685a      	ldr	r2, [r3, #4]
 800a5be:	4b15      	ldr	r3, [pc, #84]	; (800a614 <pvPortMalloc+0x18c>)
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	431a      	orrs	r2, r3
 800a5c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a5c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a5ce:	4b15      	ldr	r3, [pc, #84]	; (800a624 <pvPortMalloc+0x19c>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	3301      	adds	r3, #1
 800a5d4:	4a13      	ldr	r2, [pc, #76]	; (800a624 <pvPortMalloc+0x19c>)
 800a5d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a5d8:	f7ff f9e4 	bl	80099a4 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800a5dc:	69fb      	ldr	r3, [r7, #28]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d101      	bne.n	800a5e6 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800a5e2:	f7f6 fcd8 	bl	8000f96 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a5e6:	69fb      	ldr	r3, [r7, #28]
 800a5e8:	f003 0307 	and.w	r3, r3, #7
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d00a      	beq.n	800a606 <pvPortMalloc+0x17e>
	__asm volatile
 800a5f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5f4:	f383 8811 	msr	BASEPRI, r3
 800a5f8:	f3bf 8f6f 	isb	sy
 800a5fc:	f3bf 8f4f 	dsb	sy
 800a600:	60fb      	str	r3, [r7, #12]
}
 800a602:	bf00      	nop
 800a604:	e7fe      	b.n	800a604 <pvPortMalloc+0x17c>
	return pvReturn;
 800a606:	69fb      	ldr	r3, [r7, #28]
}
 800a608:	4618      	mov	r0, r3
 800a60a:	3728      	adds	r7, #40	; 0x28
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bd80      	pop	{r7, pc}
 800a610:	200040bc 	.word	0x200040bc
 800a614:	200040d0 	.word	0x200040d0
 800a618:	200040c0 	.word	0x200040c0
 800a61c:	200040b4 	.word	0x200040b4
 800a620:	200040c4 	.word	0x200040c4
 800a624:	200040c8 	.word	0x200040c8

0800a628 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b086      	sub	sp, #24
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d04d      	beq.n	800a6d6 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a63a:	2308      	movs	r3, #8
 800a63c:	425b      	negs	r3, r3
 800a63e:	697a      	ldr	r2, [r7, #20]
 800a640:	4413      	add	r3, r2
 800a642:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a644:	697b      	ldr	r3, [r7, #20]
 800a646:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a648:	693b      	ldr	r3, [r7, #16]
 800a64a:	685a      	ldr	r2, [r3, #4]
 800a64c:	4b24      	ldr	r3, [pc, #144]	; (800a6e0 <vPortFree+0xb8>)
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	4013      	ands	r3, r2
 800a652:	2b00      	cmp	r3, #0
 800a654:	d10a      	bne.n	800a66c <vPortFree+0x44>
	__asm volatile
 800a656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a65a:	f383 8811 	msr	BASEPRI, r3
 800a65e:	f3bf 8f6f 	isb	sy
 800a662:	f3bf 8f4f 	dsb	sy
 800a666:	60fb      	str	r3, [r7, #12]
}
 800a668:	bf00      	nop
 800a66a:	e7fe      	b.n	800a66a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a66c:	693b      	ldr	r3, [r7, #16]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d00a      	beq.n	800a68a <vPortFree+0x62>
	__asm volatile
 800a674:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a678:	f383 8811 	msr	BASEPRI, r3
 800a67c:	f3bf 8f6f 	isb	sy
 800a680:	f3bf 8f4f 	dsb	sy
 800a684:	60bb      	str	r3, [r7, #8]
}
 800a686:	bf00      	nop
 800a688:	e7fe      	b.n	800a688 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a68a:	693b      	ldr	r3, [r7, #16]
 800a68c:	685a      	ldr	r2, [r3, #4]
 800a68e:	4b14      	ldr	r3, [pc, #80]	; (800a6e0 <vPortFree+0xb8>)
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	4013      	ands	r3, r2
 800a694:	2b00      	cmp	r3, #0
 800a696:	d01e      	beq.n	800a6d6 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a698:	693b      	ldr	r3, [r7, #16]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d11a      	bne.n	800a6d6 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a6a0:	693b      	ldr	r3, [r7, #16]
 800a6a2:	685a      	ldr	r2, [r3, #4]
 800a6a4:	4b0e      	ldr	r3, [pc, #56]	; (800a6e0 <vPortFree+0xb8>)
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	43db      	mvns	r3, r3
 800a6aa:	401a      	ands	r2, r3
 800a6ac:	693b      	ldr	r3, [r7, #16]
 800a6ae:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a6b0:	f7ff f96a 	bl	8009988 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a6b4:	693b      	ldr	r3, [r7, #16]
 800a6b6:	685a      	ldr	r2, [r3, #4]
 800a6b8:	4b0a      	ldr	r3, [pc, #40]	; (800a6e4 <vPortFree+0xbc>)
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	4413      	add	r3, r2
 800a6be:	4a09      	ldr	r2, [pc, #36]	; (800a6e4 <vPortFree+0xbc>)
 800a6c0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a6c2:	6938      	ldr	r0, [r7, #16]
 800a6c4:	f000 f874 	bl	800a7b0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a6c8:	4b07      	ldr	r3, [pc, #28]	; (800a6e8 <vPortFree+0xc0>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	3301      	adds	r3, #1
 800a6ce:	4a06      	ldr	r2, [pc, #24]	; (800a6e8 <vPortFree+0xc0>)
 800a6d0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a6d2:	f7ff f967 	bl	80099a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a6d6:	bf00      	nop
 800a6d8:	3718      	adds	r7, #24
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	bd80      	pop	{r7, pc}
 800a6de:	bf00      	nop
 800a6e0:	200040d0 	.word	0x200040d0
 800a6e4:	200040c0 	.word	0x200040c0
 800a6e8:	200040cc 	.word	0x200040cc

0800a6ec <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a6ec:	b480      	push	{r7}
 800a6ee:	b085      	sub	sp, #20
 800a6f0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a6f2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a6f6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a6f8:	4b27      	ldr	r3, [pc, #156]	; (800a798 <prvHeapInit+0xac>)
 800a6fa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	f003 0307 	and.w	r3, r3, #7
 800a702:	2b00      	cmp	r3, #0
 800a704:	d00c      	beq.n	800a720 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	3307      	adds	r3, #7
 800a70a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	f023 0307 	bic.w	r3, r3, #7
 800a712:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a714:	68ba      	ldr	r2, [r7, #8]
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	1ad3      	subs	r3, r2, r3
 800a71a:	4a1f      	ldr	r2, [pc, #124]	; (800a798 <prvHeapInit+0xac>)
 800a71c:	4413      	add	r3, r2
 800a71e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a724:	4a1d      	ldr	r2, [pc, #116]	; (800a79c <prvHeapInit+0xb0>)
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a72a:	4b1c      	ldr	r3, [pc, #112]	; (800a79c <prvHeapInit+0xb0>)
 800a72c:	2200      	movs	r2, #0
 800a72e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	68ba      	ldr	r2, [r7, #8]
 800a734:	4413      	add	r3, r2
 800a736:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a738:	2208      	movs	r2, #8
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	1a9b      	subs	r3, r3, r2
 800a73e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	f023 0307 	bic.w	r3, r3, #7
 800a746:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	4a15      	ldr	r2, [pc, #84]	; (800a7a0 <prvHeapInit+0xb4>)
 800a74c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a74e:	4b14      	ldr	r3, [pc, #80]	; (800a7a0 <prvHeapInit+0xb4>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	2200      	movs	r2, #0
 800a754:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a756:	4b12      	ldr	r3, [pc, #72]	; (800a7a0 <prvHeapInit+0xb4>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	2200      	movs	r2, #0
 800a75c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	68fa      	ldr	r2, [r7, #12]
 800a766:	1ad2      	subs	r2, r2, r3
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a76c:	4b0c      	ldr	r3, [pc, #48]	; (800a7a0 <prvHeapInit+0xb4>)
 800a76e:	681a      	ldr	r2, [r3, #0]
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	685b      	ldr	r3, [r3, #4]
 800a778:	4a0a      	ldr	r2, [pc, #40]	; (800a7a4 <prvHeapInit+0xb8>)
 800a77a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	685b      	ldr	r3, [r3, #4]
 800a780:	4a09      	ldr	r2, [pc, #36]	; (800a7a8 <prvHeapInit+0xbc>)
 800a782:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a784:	4b09      	ldr	r3, [pc, #36]	; (800a7ac <prvHeapInit+0xc0>)
 800a786:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a78a:	601a      	str	r2, [r3, #0]
}
 800a78c:	bf00      	nop
 800a78e:	3714      	adds	r7, #20
 800a790:	46bd      	mov	sp, r7
 800a792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a796:	4770      	bx	lr
 800a798:	200004b4 	.word	0x200004b4
 800a79c:	200040b4 	.word	0x200040b4
 800a7a0:	200040bc 	.word	0x200040bc
 800a7a4:	200040c4 	.word	0x200040c4
 800a7a8:	200040c0 	.word	0x200040c0
 800a7ac:	200040d0 	.word	0x200040d0

0800a7b0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a7b0:	b480      	push	{r7}
 800a7b2:	b085      	sub	sp, #20
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a7b8:	4b28      	ldr	r3, [pc, #160]	; (800a85c <prvInsertBlockIntoFreeList+0xac>)
 800a7ba:	60fb      	str	r3, [r7, #12]
 800a7bc:	e002      	b.n	800a7c4 <prvInsertBlockIntoFreeList+0x14>
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	60fb      	str	r3, [r7, #12]
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	687a      	ldr	r2, [r7, #4]
 800a7ca:	429a      	cmp	r2, r3
 800a7cc:	d8f7      	bhi.n	800a7be <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	685b      	ldr	r3, [r3, #4]
 800a7d6:	68ba      	ldr	r2, [r7, #8]
 800a7d8:	4413      	add	r3, r2
 800a7da:	687a      	ldr	r2, [r7, #4]
 800a7dc:	429a      	cmp	r2, r3
 800a7de:	d108      	bne.n	800a7f2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	685a      	ldr	r2, [r3, #4]
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	685b      	ldr	r3, [r3, #4]
 800a7e8:	441a      	add	r2, r3
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	685b      	ldr	r3, [r3, #4]
 800a7fa:	68ba      	ldr	r2, [r7, #8]
 800a7fc:	441a      	add	r2, r3
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	429a      	cmp	r2, r3
 800a804:	d118      	bne.n	800a838 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	681a      	ldr	r2, [r3, #0]
 800a80a:	4b15      	ldr	r3, [pc, #84]	; (800a860 <prvInsertBlockIntoFreeList+0xb0>)
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	429a      	cmp	r2, r3
 800a810:	d00d      	beq.n	800a82e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	685a      	ldr	r2, [r3, #4]
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	685b      	ldr	r3, [r3, #4]
 800a81c:	441a      	add	r2, r3
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	681a      	ldr	r2, [r3, #0]
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	601a      	str	r2, [r3, #0]
 800a82c:	e008      	b.n	800a840 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a82e:	4b0c      	ldr	r3, [pc, #48]	; (800a860 <prvInsertBlockIntoFreeList+0xb0>)
 800a830:	681a      	ldr	r2, [r3, #0]
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	601a      	str	r2, [r3, #0]
 800a836:	e003      	b.n	800a840 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	681a      	ldr	r2, [r3, #0]
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a840:	68fa      	ldr	r2, [r7, #12]
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	429a      	cmp	r2, r3
 800a846:	d002      	beq.n	800a84e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	687a      	ldr	r2, [r7, #4]
 800a84c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a84e:	bf00      	nop
 800a850:	3714      	adds	r7, #20
 800a852:	46bd      	mov	sp, r7
 800a854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a858:	4770      	bx	lr
 800a85a:	bf00      	nop
 800a85c:	200040b4 	.word	0x200040b4
 800a860:	200040bc 	.word	0x200040bc

0800a864 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a864:	b580      	push	{r7, lr}
 800a866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a868:	2200      	movs	r2, #0
 800a86a:	4912      	ldr	r1, [pc, #72]	; (800a8b4 <MX_USB_DEVICE_Init+0x50>)
 800a86c:	4812      	ldr	r0, [pc, #72]	; (800a8b8 <MX_USB_DEVICE_Init+0x54>)
 800a86e:	f7fd f9f9 	bl	8007c64 <USBD_Init>
 800a872:	4603      	mov	r3, r0
 800a874:	2b00      	cmp	r3, #0
 800a876:	d001      	beq.n	800a87c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a878:	f7f6 fe14 	bl	80014a4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a87c:	490f      	ldr	r1, [pc, #60]	; (800a8bc <MX_USB_DEVICE_Init+0x58>)
 800a87e:	480e      	ldr	r0, [pc, #56]	; (800a8b8 <MX_USB_DEVICE_Init+0x54>)
 800a880:	f7fd fa20 	bl	8007cc4 <USBD_RegisterClass>
 800a884:	4603      	mov	r3, r0
 800a886:	2b00      	cmp	r3, #0
 800a888:	d001      	beq.n	800a88e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a88a:	f7f6 fe0b 	bl	80014a4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a88e:	490c      	ldr	r1, [pc, #48]	; (800a8c0 <MX_USB_DEVICE_Init+0x5c>)
 800a890:	4809      	ldr	r0, [pc, #36]	; (800a8b8 <MX_USB_DEVICE_Init+0x54>)
 800a892:	f7fd f957 	bl	8007b44 <USBD_CDC_RegisterInterface>
 800a896:	4603      	mov	r3, r0
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d001      	beq.n	800a8a0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a89c:	f7f6 fe02 	bl	80014a4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a8a0:	4805      	ldr	r0, [pc, #20]	; (800a8b8 <MX_USB_DEVICE_Init+0x54>)
 800a8a2:	f7fd fa45 	bl	8007d30 <USBD_Start>
 800a8a6:	4603      	mov	r3, r0
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d001      	beq.n	800a8b0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a8ac:	f7f6 fdfa 	bl	80014a4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a8b0:	bf00      	nop
 800a8b2:	bd80      	pop	{r7, pc}
 800a8b4:	200000b0 	.word	0x200000b0
 800a8b8:	200040d4 	.word	0x200040d4
 800a8bc:	20000018 	.word	0x20000018
 800a8c0:	2000009c 	.word	0x2000009c

0800a8c4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	4905      	ldr	r1, [pc, #20]	; (800a8e0 <CDC_Init_FS+0x1c>)
 800a8cc:	4805      	ldr	r0, [pc, #20]	; (800a8e4 <CDC_Init_FS+0x20>)
 800a8ce:	f7fd f953 	bl	8007b78 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a8d2:	4905      	ldr	r1, [pc, #20]	; (800a8e8 <CDC_Init_FS+0x24>)
 800a8d4:	4803      	ldr	r0, [pc, #12]	; (800a8e4 <CDC_Init_FS+0x20>)
 800a8d6:	f7fd f971 	bl	8007bbc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a8da:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a8dc:	4618      	mov	r0, r3
 800a8de:	bd80      	pop	{r7, pc}
 800a8e0:	20004bb0 	.word	0x20004bb0
 800a8e4:	200040d4 	.word	0x200040d4
 800a8e8:	200043b0 	.word	0x200043b0

0800a8ec <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a8ec:	b480      	push	{r7}
 800a8ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a8f0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fa:	4770      	bx	lr

0800a8fc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a8fc:	b480      	push	{r7}
 800a8fe:	b083      	sub	sp, #12
 800a900:	af00      	add	r7, sp, #0
 800a902:	4603      	mov	r3, r0
 800a904:	6039      	str	r1, [r7, #0]
 800a906:	71fb      	strb	r3, [r7, #7]
 800a908:	4613      	mov	r3, r2
 800a90a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a90c:	79fb      	ldrb	r3, [r7, #7]
 800a90e:	2b23      	cmp	r3, #35	; 0x23
 800a910:	d84a      	bhi.n	800a9a8 <CDC_Control_FS+0xac>
 800a912:	a201      	add	r2, pc, #4	; (adr r2, 800a918 <CDC_Control_FS+0x1c>)
 800a914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a918:	0800a9a9 	.word	0x0800a9a9
 800a91c:	0800a9a9 	.word	0x0800a9a9
 800a920:	0800a9a9 	.word	0x0800a9a9
 800a924:	0800a9a9 	.word	0x0800a9a9
 800a928:	0800a9a9 	.word	0x0800a9a9
 800a92c:	0800a9a9 	.word	0x0800a9a9
 800a930:	0800a9a9 	.word	0x0800a9a9
 800a934:	0800a9a9 	.word	0x0800a9a9
 800a938:	0800a9a9 	.word	0x0800a9a9
 800a93c:	0800a9a9 	.word	0x0800a9a9
 800a940:	0800a9a9 	.word	0x0800a9a9
 800a944:	0800a9a9 	.word	0x0800a9a9
 800a948:	0800a9a9 	.word	0x0800a9a9
 800a94c:	0800a9a9 	.word	0x0800a9a9
 800a950:	0800a9a9 	.word	0x0800a9a9
 800a954:	0800a9a9 	.word	0x0800a9a9
 800a958:	0800a9a9 	.word	0x0800a9a9
 800a95c:	0800a9a9 	.word	0x0800a9a9
 800a960:	0800a9a9 	.word	0x0800a9a9
 800a964:	0800a9a9 	.word	0x0800a9a9
 800a968:	0800a9a9 	.word	0x0800a9a9
 800a96c:	0800a9a9 	.word	0x0800a9a9
 800a970:	0800a9a9 	.word	0x0800a9a9
 800a974:	0800a9a9 	.word	0x0800a9a9
 800a978:	0800a9a9 	.word	0x0800a9a9
 800a97c:	0800a9a9 	.word	0x0800a9a9
 800a980:	0800a9a9 	.word	0x0800a9a9
 800a984:	0800a9a9 	.word	0x0800a9a9
 800a988:	0800a9a9 	.word	0x0800a9a9
 800a98c:	0800a9a9 	.word	0x0800a9a9
 800a990:	0800a9a9 	.word	0x0800a9a9
 800a994:	0800a9a9 	.word	0x0800a9a9
 800a998:	0800a9a9 	.word	0x0800a9a9
 800a99c:	0800a9a9 	.word	0x0800a9a9
 800a9a0:	0800a9a9 	.word	0x0800a9a9
 800a9a4:	0800a9a9 	.word	0x0800a9a9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a9a8:	bf00      	nop
  }

  return (USBD_OK);
 800a9aa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	370c      	adds	r7, #12
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b6:	4770      	bx	lr

0800a9b8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b082      	sub	sp, #8
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
 800a9c0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a9c2:	6879      	ldr	r1, [r7, #4]
 800a9c4:	4805      	ldr	r0, [pc, #20]	; (800a9dc <CDC_Receive_FS+0x24>)
 800a9c6:	f7fd f8f9 	bl	8007bbc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a9ca:	4804      	ldr	r0, [pc, #16]	; (800a9dc <CDC_Receive_FS+0x24>)
 800a9cc:	f7fd f914 	bl	8007bf8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a9d0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	3708      	adds	r7, #8
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	bd80      	pop	{r7, pc}
 800a9da:	bf00      	nop
 800a9dc:	200040d4 	.word	0x200040d4

0800a9e0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a9e0:	b480      	push	{r7}
 800a9e2:	b087      	sub	sp, #28
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	60f8      	str	r0, [r7, #12]
 800a9e8:	60b9      	str	r1, [r7, #8]
 800a9ea:	4613      	mov	r3, r2
 800a9ec:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a9f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	371c      	adds	r7, #28
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa00:	4770      	bx	lr
	...

0800aa04 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa04:	b480      	push	{r7}
 800aa06:	b083      	sub	sp, #12
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	6039      	str	r1, [r7, #0]
 800aa0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	2212      	movs	r2, #18
 800aa14:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800aa16:	4b03      	ldr	r3, [pc, #12]	; (800aa24 <USBD_FS_DeviceDescriptor+0x20>)
}
 800aa18:	4618      	mov	r0, r3
 800aa1a:	370c      	adds	r7, #12
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa22:	4770      	bx	lr
 800aa24:	200000cc 	.word	0x200000cc

0800aa28 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa28:	b480      	push	{r7}
 800aa2a:	b083      	sub	sp, #12
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	4603      	mov	r3, r0
 800aa30:	6039      	str	r1, [r7, #0]
 800aa32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800aa34:	683b      	ldr	r3, [r7, #0]
 800aa36:	2204      	movs	r2, #4
 800aa38:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800aa3a:	4b03      	ldr	r3, [pc, #12]	; (800aa48 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	370c      	adds	r7, #12
 800aa40:	46bd      	mov	sp, r7
 800aa42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa46:	4770      	bx	lr
 800aa48:	200000e0 	.word	0x200000e0

0800aa4c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b082      	sub	sp, #8
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	4603      	mov	r3, r0
 800aa54:	6039      	str	r1, [r7, #0]
 800aa56:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aa58:	79fb      	ldrb	r3, [r7, #7]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d105      	bne.n	800aa6a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800aa5e:	683a      	ldr	r2, [r7, #0]
 800aa60:	4907      	ldr	r1, [pc, #28]	; (800aa80 <USBD_FS_ProductStrDescriptor+0x34>)
 800aa62:	4808      	ldr	r0, [pc, #32]	; (800aa84 <USBD_FS_ProductStrDescriptor+0x38>)
 800aa64:	f7fe fb16 	bl	8009094 <USBD_GetString>
 800aa68:	e004      	b.n	800aa74 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800aa6a:	683a      	ldr	r2, [r7, #0]
 800aa6c:	4904      	ldr	r1, [pc, #16]	; (800aa80 <USBD_FS_ProductStrDescriptor+0x34>)
 800aa6e:	4805      	ldr	r0, [pc, #20]	; (800aa84 <USBD_FS_ProductStrDescriptor+0x38>)
 800aa70:	f7fe fb10 	bl	8009094 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aa74:	4b02      	ldr	r3, [pc, #8]	; (800aa80 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800aa76:	4618      	mov	r0, r3
 800aa78:	3708      	adds	r7, #8
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bd80      	pop	{r7, pc}
 800aa7e:	bf00      	nop
 800aa80:	200053b0 	.word	0x200053b0
 800aa84:	0800d348 	.word	0x0800d348

0800aa88 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b082      	sub	sp, #8
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	4603      	mov	r3, r0
 800aa90:	6039      	str	r1, [r7, #0]
 800aa92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800aa94:	683a      	ldr	r2, [r7, #0]
 800aa96:	4904      	ldr	r1, [pc, #16]	; (800aaa8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800aa98:	4804      	ldr	r0, [pc, #16]	; (800aaac <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800aa9a:	f7fe fafb 	bl	8009094 <USBD_GetString>
  return USBD_StrDesc;
 800aa9e:	4b02      	ldr	r3, [pc, #8]	; (800aaa8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	3708      	adds	r7, #8
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	bd80      	pop	{r7, pc}
 800aaa8:	200053b0 	.word	0x200053b0
 800aaac:	0800d360 	.word	0x0800d360

0800aab0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b082      	sub	sp, #8
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	4603      	mov	r3, r0
 800aab8:	6039      	str	r1, [r7, #0]
 800aaba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800aabc:	683b      	ldr	r3, [r7, #0]
 800aabe:	221a      	movs	r2, #26
 800aac0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800aac2:	f000 f843 	bl	800ab4c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800aac6:	4b02      	ldr	r3, [pc, #8]	; (800aad0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800aac8:	4618      	mov	r0, r3
 800aaca:	3708      	adds	r7, #8
 800aacc:	46bd      	mov	sp, r7
 800aace:	bd80      	pop	{r7, pc}
 800aad0:	200000e4 	.word	0x200000e4

0800aad4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b082      	sub	sp, #8
 800aad8:	af00      	add	r7, sp, #0
 800aada:	4603      	mov	r3, r0
 800aadc:	6039      	str	r1, [r7, #0]
 800aade:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800aae0:	79fb      	ldrb	r3, [r7, #7]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d105      	bne.n	800aaf2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800aae6:	683a      	ldr	r2, [r7, #0]
 800aae8:	4907      	ldr	r1, [pc, #28]	; (800ab08 <USBD_FS_ConfigStrDescriptor+0x34>)
 800aaea:	4808      	ldr	r0, [pc, #32]	; (800ab0c <USBD_FS_ConfigStrDescriptor+0x38>)
 800aaec:	f7fe fad2 	bl	8009094 <USBD_GetString>
 800aaf0:	e004      	b.n	800aafc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800aaf2:	683a      	ldr	r2, [r7, #0]
 800aaf4:	4904      	ldr	r1, [pc, #16]	; (800ab08 <USBD_FS_ConfigStrDescriptor+0x34>)
 800aaf6:	4805      	ldr	r0, [pc, #20]	; (800ab0c <USBD_FS_ConfigStrDescriptor+0x38>)
 800aaf8:	f7fe facc 	bl	8009094 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aafc:	4b02      	ldr	r3, [pc, #8]	; (800ab08 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800aafe:	4618      	mov	r0, r3
 800ab00:	3708      	adds	r7, #8
 800ab02:	46bd      	mov	sp, r7
 800ab04:	bd80      	pop	{r7, pc}
 800ab06:	bf00      	nop
 800ab08:	200053b0 	.word	0x200053b0
 800ab0c:	0800d374 	.word	0x0800d374

0800ab10 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b082      	sub	sp, #8
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	4603      	mov	r3, r0
 800ab18:	6039      	str	r1, [r7, #0]
 800ab1a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ab1c:	79fb      	ldrb	r3, [r7, #7]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d105      	bne.n	800ab2e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ab22:	683a      	ldr	r2, [r7, #0]
 800ab24:	4907      	ldr	r1, [pc, #28]	; (800ab44 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ab26:	4808      	ldr	r0, [pc, #32]	; (800ab48 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ab28:	f7fe fab4 	bl	8009094 <USBD_GetString>
 800ab2c:	e004      	b.n	800ab38 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ab2e:	683a      	ldr	r2, [r7, #0]
 800ab30:	4904      	ldr	r1, [pc, #16]	; (800ab44 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ab32:	4805      	ldr	r0, [pc, #20]	; (800ab48 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ab34:	f7fe faae 	bl	8009094 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ab38:	4b02      	ldr	r3, [pc, #8]	; (800ab44 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	3708      	adds	r7, #8
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bd80      	pop	{r7, pc}
 800ab42:	bf00      	nop
 800ab44:	200053b0 	.word	0x200053b0
 800ab48:	0800d380 	.word	0x0800d380

0800ab4c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b084      	sub	sp, #16
 800ab50:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ab52:	4b0f      	ldr	r3, [pc, #60]	; (800ab90 <Get_SerialNum+0x44>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ab58:	4b0e      	ldr	r3, [pc, #56]	; (800ab94 <Get_SerialNum+0x48>)
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ab5e:	4b0e      	ldr	r3, [pc, #56]	; (800ab98 <Get_SerialNum+0x4c>)
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ab64:	68fa      	ldr	r2, [r7, #12]
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	4413      	add	r3, r2
 800ab6a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d009      	beq.n	800ab86 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ab72:	2208      	movs	r2, #8
 800ab74:	4909      	ldr	r1, [pc, #36]	; (800ab9c <Get_SerialNum+0x50>)
 800ab76:	68f8      	ldr	r0, [r7, #12]
 800ab78:	f000 f814 	bl	800aba4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ab7c:	2204      	movs	r2, #4
 800ab7e:	4908      	ldr	r1, [pc, #32]	; (800aba0 <Get_SerialNum+0x54>)
 800ab80:	68b8      	ldr	r0, [r7, #8]
 800ab82:	f000 f80f 	bl	800aba4 <IntToUnicode>
  }
}
 800ab86:	bf00      	nop
 800ab88:	3710      	adds	r7, #16
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	bd80      	pop	{r7, pc}
 800ab8e:	bf00      	nop
 800ab90:	1fff7a10 	.word	0x1fff7a10
 800ab94:	1fff7a14 	.word	0x1fff7a14
 800ab98:	1fff7a18 	.word	0x1fff7a18
 800ab9c:	200000e6 	.word	0x200000e6
 800aba0:	200000f6 	.word	0x200000f6

0800aba4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800aba4:	b480      	push	{r7}
 800aba6:	b087      	sub	sp, #28
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	60f8      	str	r0, [r7, #12]
 800abac:	60b9      	str	r1, [r7, #8]
 800abae:	4613      	mov	r3, r2
 800abb0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800abb2:	2300      	movs	r3, #0
 800abb4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800abb6:	2300      	movs	r3, #0
 800abb8:	75fb      	strb	r3, [r7, #23]
 800abba:	e027      	b.n	800ac0c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	0f1b      	lsrs	r3, r3, #28
 800abc0:	2b09      	cmp	r3, #9
 800abc2:	d80b      	bhi.n	800abdc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	0f1b      	lsrs	r3, r3, #28
 800abc8:	b2da      	uxtb	r2, r3
 800abca:	7dfb      	ldrb	r3, [r7, #23]
 800abcc:	005b      	lsls	r3, r3, #1
 800abce:	4619      	mov	r1, r3
 800abd0:	68bb      	ldr	r3, [r7, #8]
 800abd2:	440b      	add	r3, r1
 800abd4:	3230      	adds	r2, #48	; 0x30
 800abd6:	b2d2      	uxtb	r2, r2
 800abd8:	701a      	strb	r2, [r3, #0]
 800abda:	e00a      	b.n	800abf2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	0f1b      	lsrs	r3, r3, #28
 800abe0:	b2da      	uxtb	r2, r3
 800abe2:	7dfb      	ldrb	r3, [r7, #23]
 800abe4:	005b      	lsls	r3, r3, #1
 800abe6:	4619      	mov	r1, r3
 800abe8:	68bb      	ldr	r3, [r7, #8]
 800abea:	440b      	add	r3, r1
 800abec:	3237      	adds	r2, #55	; 0x37
 800abee:	b2d2      	uxtb	r2, r2
 800abf0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	011b      	lsls	r3, r3, #4
 800abf6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800abf8:	7dfb      	ldrb	r3, [r7, #23]
 800abfa:	005b      	lsls	r3, r3, #1
 800abfc:	3301      	adds	r3, #1
 800abfe:	68ba      	ldr	r2, [r7, #8]
 800ac00:	4413      	add	r3, r2
 800ac02:	2200      	movs	r2, #0
 800ac04:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ac06:	7dfb      	ldrb	r3, [r7, #23]
 800ac08:	3301      	adds	r3, #1
 800ac0a:	75fb      	strb	r3, [r7, #23]
 800ac0c:	7dfa      	ldrb	r2, [r7, #23]
 800ac0e:	79fb      	ldrb	r3, [r7, #7]
 800ac10:	429a      	cmp	r2, r3
 800ac12:	d3d3      	bcc.n	800abbc <IntToUnicode+0x18>
  }
}
 800ac14:	bf00      	nop
 800ac16:	bf00      	nop
 800ac18:	371c      	adds	r7, #28
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac20:	4770      	bx	lr
	...

0800ac24 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b08a      	sub	sp, #40	; 0x28
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ac2c:	f107 0314 	add.w	r3, r7, #20
 800ac30:	2200      	movs	r2, #0
 800ac32:	601a      	str	r2, [r3, #0]
 800ac34:	605a      	str	r2, [r3, #4]
 800ac36:	609a      	str	r2, [r3, #8]
 800ac38:	60da      	str	r2, [r3, #12]
 800ac3a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ac44:	d13a      	bne.n	800acbc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ac46:	2300      	movs	r3, #0
 800ac48:	613b      	str	r3, [r7, #16]
 800ac4a:	4b1e      	ldr	r3, [pc, #120]	; (800acc4 <HAL_PCD_MspInit+0xa0>)
 800ac4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac4e:	4a1d      	ldr	r2, [pc, #116]	; (800acc4 <HAL_PCD_MspInit+0xa0>)
 800ac50:	f043 0301 	orr.w	r3, r3, #1
 800ac54:	6313      	str	r3, [r2, #48]	; 0x30
 800ac56:	4b1b      	ldr	r3, [pc, #108]	; (800acc4 <HAL_PCD_MspInit+0xa0>)
 800ac58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac5a:	f003 0301 	and.w	r3, r3, #1
 800ac5e:	613b      	str	r3, [r7, #16]
 800ac60:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 800ac62:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ac66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ac68:	2302      	movs	r3, #2
 800ac6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ac70:	2303      	movs	r3, #3
 800ac72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ac74:	230a      	movs	r3, #10
 800ac76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ac78:	f107 0314 	add.w	r3, r7, #20
 800ac7c:	4619      	mov	r1, r3
 800ac7e:	4812      	ldr	r0, [pc, #72]	; (800acc8 <HAL_PCD_MspInit+0xa4>)
 800ac80:	f7f7 fcd8 	bl	8002634 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ac84:	4b0f      	ldr	r3, [pc, #60]	; (800acc4 <HAL_PCD_MspInit+0xa0>)
 800ac86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac88:	4a0e      	ldr	r2, [pc, #56]	; (800acc4 <HAL_PCD_MspInit+0xa0>)
 800ac8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac8e:	6353      	str	r3, [r2, #52]	; 0x34
 800ac90:	2300      	movs	r3, #0
 800ac92:	60fb      	str	r3, [r7, #12]
 800ac94:	4b0b      	ldr	r3, [pc, #44]	; (800acc4 <HAL_PCD_MspInit+0xa0>)
 800ac96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac98:	4a0a      	ldr	r2, [pc, #40]	; (800acc4 <HAL_PCD_MspInit+0xa0>)
 800ac9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ac9e:	6453      	str	r3, [r2, #68]	; 0x44
 800aca0:	4b08      	ldr	r3, [pc, #32]	; (800acc4 <HAL_PCD_MspInit+0xa0>)
 800aca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aca4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aca8:	60fb      	str	r3, [r7, #12]
 800acaa:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800acac:	2200      	movs	r2, #0
 800acae:	2105      	movs	r1, #5
 800acb0:	2043      	movs	r0, #67	; 0x43
 800acb2:	f7f7 fc95 	bl	80025e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800acb6:	2043      	movs	r0, #67	; 0x43
 800acb8:	f7f7 fcae 	bl	8002618 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800acbc:	bf00      	nop
 800acbe:	3728      	adds	r7, #40	; 0x28
 800acc0:	46bd      	mov	sp, r7
 800acc2:	bd80      	pop	{r7, pc}
 800acc4:	40023800 	.word	0x40023800
 800acc8:	40020000 	.word	0x40020000

0800accc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b082      	sub	sp, #8
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800ace0:	4619      	mov	r1, r3
 800ace2:	4610      	mov	r0, r2
 800ace4:	f7fd f871 	bl	8007dca <USBD_LL_SetupStage>
}
 800ace8:	bf00      	nop
 800acea:	3708      	adds	r7, #8
 800acec:	46bd      	mov	sp, r7
 800acee:	bd80      	pop	{r7, pc}

0800acf0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b082      	sub	sp, #8
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
 800acf8:	460b      	mov	r3, r1
 800acfa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800ad02:	78fa      	ldrb	r2, [r7, #3]
 800ad04:	6879      	ldr	r1, [r7, #4]
 800ad06:	4613      	mov	r3, r2
 800ad08:	00db      	lsls	r3, r3, #3
 800ad0a:	4413      	add	r3, r2
 800ad0c:	009b      	lsls	r3, r3, #2
 800ad0e:	440b      	add	r3, r1
 800ad10:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800ad14:	681a      	ldr	r2, [r3, #0]
 800ad16:	78fb      	ldrb	r3, [r7, #3]
 800ad18:	4619      	mov	r1, r3
 800ad1a:	f7fd f8ab 	bl	8007e74 <USBD_LL_DataOutStage>
}
 800ad1e:	bf00      	nop
 800ad20:	3708      	adds	r7, #8
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}

0800ad26 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad26:	b580      	push	{r7, lr}
 800ad28:	b082      	sub	sp, #8
 800ad2a:	af00      	add	r7, sp, #0
 800ad2c:	6078      	str	r0, [r7, #4]
 800ad2e:	460b      	mov	r3, r1
 800ad30:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800ad38:	78fa      	ldrb	r2, [r7, #3]
 800ad3a:	6879      	ldr	r1, [r7, #4]
 800ad3c:	4613      	mov	r3, r2
 800ad3e:	00db      	lsls	r3, r3, #3
 800ad40:	4413      	add	r3, r2
 800ad42:	009b      	lsls	r3, r3, #2
 800ad44:	440b      	add	r3, r1
 800ad46:	3320      	adds	r3, #32
 800ad48:	681a      	ldr	r2, [r3, #0]
 800ad4a:	78fb      	ldrb	r3, [r7, #3]
 800ad4c:	4619      	mov	r1, r3
 800ad4e:	f7fd f944 	bl	8007fda <USBD_LL_DataInStage>
}
 800ad52:	bf00      	nop
 800ad54:	3708      	adds	r7, #8
 800ad56:	46bd      	mov	sp, r7
 800ad58:	bd80      	pop	{r7, pc}

0800ad5a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad5a:	b580      	push	{r7, lr}
 800ad5c:	b082      	sub	sp, #8
 800ad5e:	af00      	add	r7, sp, #0
 800ad60:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800ad68:	4618      	mov	r0, r3
 800ad6a:	f7fd fa7e 	bl	800826a <USBD_LL_SOF>
}
 800ad6e:	bf00      	nop
 800ad70:	3708      	adds	r7, #8
 800ad72:	46bd      	mov	sp, r7
 800ad74:	bd80      	pop	{r7, pc}

0800ad76 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad76:	b580      	push	{r7, lr}
 800ad78:	b084      	sub	sp, #16
 800ad7a:	af00      	add	r7, sp, #0
 800ad7c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ad7e:	2301      	movs	r3, #1
 800ad80:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	79db      	ldrb	r3, [r3, #7]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d102      	bne.n	800ad90 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	73fb      	strb	r3, [r7, #15]
 800ad8e:	e008      	b.n	800ada2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	79db      	ldrb	r3, [r3, #7]
 800ad94:	2b02      	cmp	r3, #2
 800ad96:	d102      	bne.n	800ad9e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800ad98:	2301      	movs	r3, #1
 800ad9a:	73fb      	strb	r3, [r7, #15]
 800ad9c:	e001      	b.n	800ada2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800ad9e:	f7f6 fb81 	bl	80014a4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800ada8:	7bfa      	ldrb	r2, [r7, #15]
 800adaa:	4611      	mov	r1, r2
 800adac:	4618      	mov	r0, r3
 800adae:	f7fd fa18 	bl	80081e2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800adb8:	4618      	mov	r0, r3
 800adba:	f7fd f9c0 	bl	800813e <USBD_LL_Reset>
}
 800adbe:	bf00      	nop
 800adc0:	3710      	adds	r7, #16
 800adc2:	46bd      	mov	sp, r7
 800adc4:	bd80      	pop	{r7, pc}
	...

0800adc8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b082      	sub	sp, #8
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800add6:	4618      	mov	r0, r3
 800add8:	f7fd fa13 	bl	8008202 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	687a      	ldr	r2, [r7, #4]
 800ade8:	6812      	ldr	r2, [r2, #0]
 800adea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800adee:	f043 0301 	orr.w	r3, r3, #1
 800adf2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	7adb      	ldrb	r3, [r3, #11]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d005      	beq.n	800ae08 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800adfc:	4b04      	ldr	r3, [pc, #16]	; (800ae10 <HAL_PCD_SuspendCallback+0x48>)
 800adfe:	691b      	ldr	r3, [r3, #16]
 800ae00:	4a03      	ldr	r2, [pc, #12]	; (800ae10 <HAL_PCD_SuspendCallback+0x48>)
 800ae02:	f043 0306 	orr.w	r3, r3, #6
 800ae06:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ae08:	bf00      	nop
 800ae0a:	3708      	adds	r7, #8
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	bd80      	pop	{r7, pc}
 800ae10:	e000ed00 	.word	0xe000ed00

0800ae14 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b082      	sub	sp, #8
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800ae22:	4618      	mov	r0, r3
 800ae24:	f7fd fa09 	bl	800823a <USBD_LL_Resume>
}
 800ae28:	bf00      	nop
 800ae2a:	3708      	adds	r7, #8
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	bd80      	pop	{r7, pc}

0800ae30 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b082      	sub	sp, #8
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
 800ae38:	460b      	mov	r3, r1
 800ae3a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800ae42:	78fa      	ldrb	r2, [r7, #3]
 800ae44:	4611      	mov	r1, r2
 800ae46:	4618      	mov	r0, r3
 800ae48:	f7fd fa61 	bl	800830e <USBD_LL_IsoOUTIncomplete>
}
 800ae4c:	bf00      	nop
 800ae4e:	3708      	adds	r7, #8
 800ae50:	46bd      	mov	sp, r7
 800ae52:	bd80      	pop	{r7, pc}

0800ae54 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b082      	sub	sp, #8
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
 800ae5c:	460b      	mov	r3, r1
 800ae5e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800ae66:	78fa      	ldrb	r2, [r7, #3]
 800ae68:	4611      	mov	r1, r2
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	f7fd fa1d 	bl	80082aa <USBD_LL_IsoINIncomplete>
}
 800ae70:	bf00      	nop
 800ae72:	3708      	adds	r7, #8
 800ae74:	46bd      	mov	sp, r7
 800ae76:	bd80      	pop	{r7, pc}

0800ae78 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b082      	sub	sp, #8
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800ae86:	4618      	mov	r0, r3
 800ae88:	f7fd fa73 	bl	8008372 <USBD_LL_DevConnected>
}
 800ae8c:	bf00      	nop
 800ae8e:	3708      	adds	r7, #8
 800ae90:	46bd      	mov	sp, r7
 800ae92:	bd80      	pop	{r7, pc}

0800ae94 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b082      	sub	sp, #8
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800aea2:	4618      	mov	r0, r3
 800aea4:	f7fd fa70 	bl	8008388 <USBD_LL_DevDisconnected>
}
 800aea8:	bf00      	nop
 800aeaa:	3708      	adds	r7, #8
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bd80      	pop	{r7, pc}

0800aeb0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b082      	sub	sp, #8
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	781b      	ldrb	r3, [r3, #0]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d13c      	bne.n	800af3a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800aec0:	4a20      	ldr	r2, [pc, #128]	; (800af44 <USBD_LL_Init+0x94>)
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	4a1e      	ldr	r2, [pc, #120]	; (800af44 <USBD_LL_Init+0x94>)
 800aecc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800aed0:	4b1c      	ldr	r3, [pc, #112]	; (800af44 <USBD_LL_Init+0x94>)
 800aed2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800aed6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800aed8:	4b1a      	ldr	r3, [pc, #104]	; (800af44 <USBD_LL_Init+0x94>)
 800aeda:	2204      	movs	r2, #4
 800aedc:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800aede:	4b19      	ldr	r3, [pc, #100]	; (800af44 <USBD_LL_Init+0x94>)
 800aee0:	2202      	movs	r2, #2
 800aee2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800aee4:	4b17      	ldr	r3, [pc, #92]	; (800af44 <USBD_LL_Init+0x94>)
 800aee6:	2200      	movs	r2, #0
 800aee8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800aeea:	4b16      	ldr	r3, [pc, #88]	; (800af44 <USBD_LL_Init+0x94>)
 800aeec:	2202      	movs	r2, #2
 800aeee:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800aef0:	4b14      	ldr	r3, [pc, #80]	; (800af44 <USBD_LL_Init+0x94>)
 800aef2:	2200      	movs	r2, #0
 800aef4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800aef6:	4b13      	ldr	r3, [pc, #76]	; (800af44 <USBD_LL_Init+0x94>)
 800aef8:	2200      	movs	r2, #0
 800aefa:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800aefc:	4b11      	ldr	r3, [pc, #68]	; (800af44 <USBD_LL_Init+0x94>)
 800aefe:	2200      	movs	r2, #0
 800af00:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800af02:	4b10      	ldr	r3, [pc, #64]	; (800af44 <USBD_LL_Init+0x94>)
 800af04:	2200      	movs	r2, #0
 800af06:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800af08:	4b0e      	ldr	r3, [pc, #56]	; (800af44 <USBD_LL_Init+0x94>)
 800af0a:	2200      	movs	r2, #0
 800af0c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800af0e:	480d      	ldr	r0, [pc, #52]	; (800af44 <USBD_LL_Init+0x94>)
 800af10:	f7f7 fd6f 	bl	80029f2 <HAL_PCD_Init>
 800af14:	4603      	mov	r3, r0
 800af16:	2b00      	cmp	r3, #0
 800af18:	d001      	beq.n	800af1e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800af1a:	f7f6 fac3 	bl	80014a4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800af1e:	2180      	movs	r1, #128	; 0x80
 800af20:	4808      	ldr	r0, [pc, #32]	; (800af44 <USBD_LL_Init+0x94>)
 800af22:	f7f8 ff9a 	bl	8003e5a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800af26:	2240      	movs	r2, #64	; 0x40
 800af28:	2100      	movs	r1, #0
 800af2a:	4806      	ldr	r0, [pc, #24]	; (800af44 <USBD_LL_Init+0x94>)
 800af2c:	f7f8 ff4e 	bl	8003dcc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800af30:	2280      	movs	r2, #128	; 0x80
 800af32:	2101      	movs	r1, #1
 800af34:	4803      	ldr	r0, [pc, #12]	; (800af44 <USBD_LL_Init+0x94>)
 800af36:	f7f8 ff49 	bl	8003dcc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800af3a:	2300      	movs	r3, #0
}
 800af3c:	4618      	mov	r0, r3
 800af3e:	3708      	adds	r7, #8
 800af40:	46bd      	mov	sp, r7
 800af42:	bd80      	pop	{r7, pc}
 800af44:	200055b0 	.word	0x200055b0

0800af48 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b084      	sub	sp, #16
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af50:	2300      	movs	r3, #0
 800af52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af54:	2300      	movs	r3, #0
 800af56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800af5e:	4618      	mov	r0, r3
 800af60:	f7f7 fe56 	bl	8002c10 <HAL_PCD_Start>
 800af64:	4603      	mov	r3, r0
 800af66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af68:	7bfb      	ldrb	r3, [r7, #15]
 800af6a:	4618      	mov	r0, r3
 800af6c:	f000 f942 	bl	800b1f4 <USBD_Get_USB_Status>
 800af70:	4603      	mov	r3, r0
 800af72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af74:	7bbb      	ldrb	r3, [r7, #14]
}
 800af76:	4618      	mov	r0, r3
 800af78:	3710      	adds	r7, #16
 800af7a:	46bd      	mov	sp, r7
 800af7c:	bd80      	pop	{r7, pc}

0800af7e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800af7e:	b580      	push	{r7, lr}
 800af80:	b084      	sub	sp, #16
 800af82:	af00      	add	r7, sp, #0
 800af84:	6078      	str	r0, [r7, #4]
 800af86:	4608      	mov	r0, r1
 800af88:	4611      	mov	r1, r2
 800af8a:	461a      	mov	r2, r3
 800af8c:	4603      	mov	r3, r0
 800af8e:	70fb      	strb	r3, [r7, #3]
 800af90:	460b      	mov	r3, r1
 800af92:	70bb      	strb	r3, [r7, #2]
 800af94:	4613      	mov	r3, r2
 800af96:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af98:	2300      	movs	r3, #0
 800af9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af9c:	2300      	movs	r3, #0
 800af9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800afa6:	78bb      	ldrb	r3, [r7, #2]
 800afa8:	883a      	ldrh	r2, [r7, #0]
 800afaa:	78f9      	ldrb	r1, [r7, #3]
 800afac:	f7f8 fb2a 	bl	8003604 <HAL_PCD_EP_Open>
 800afb0:	4603      	mov	r3, r0
 800afb2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800afb4:	7bfb      	ldrb	r3, [r7, #15]
 800afb6:	4618      	mov	r0, r3
 800afb8:	f000 f91c 	bl	800b1f4 <USBD_Get_USB_Status>
 800afbc:	4603      	mov	r3, r0
 800afbe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800afc0:	7bbb      	ldrb	r3, [r7, #14]
}
 800afc2:	4618      	mov	r0, r3
 800afc4:	3710      	adds	r7, #16
 800afc6:	46bd      	mov	sp, r7
 800afc8:	bd80      	pop	{r7, pc}

0800afca <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800afca:	b580      	push	{r7, lr}
 800afcc:	b084      	sub	sp, #16
 800afce:	af00      	add	r7, sp, #0
 800afd0:	6078      	str	r0, [r7, #4]
 800afd2:	460b      	mov	r3, r1
 800afd4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afd6:	2300      	movs	r3, #0
 800afd8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afda:	2300      	movs	r3, #0
 800afdc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800afe4:	78fa      	ldrb	r2, [r7, #3]
 800afe6:	4611      	mov	r1, r2
 800afe8:	4618      	mov	r0, r3
 800afea:	f7f8 fb73 	bl	80036d4 <HAL_PCD_EP_Close>
 800afee:	4603      	mov	r3, r0
 800aff0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aff2:	7bfb      	ldrb	r3, [r7, #15]
 800aff4:	4618      	mov	r0, r3
 800aff6:	f000 f8fd 	bl	800b1f4 <USBD_Get_USB_Status>
 800affa:	4603      	mov	r3, r0
 800affc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800affe:	7bbb      	ldrb	r3, [r7, #14]
}
 800b000:	4618      	mov	r0, r3
 800b002:	3710      	adds	r7, #16
 800b004:	46bd      	mov	sp, r7
 800b006:	bd80      	pop	{r7, pc}

0800b008 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	b084      	sub	sp, #16
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
 800b010:	460b      	mov	r3, r1
 800b012:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b014:	2300      	movs	r3, #0
 800b016:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b018:	2300      	movs	r3, #0
 800b01a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b022:	78fa      	ldrb	r2, [r7, #3]
 800b024:	4611      	mov	r1, r2
 800b026:	4618      	mov	r0, r3
 800b028:	f7f8 fc2b 	bl	8003882 <HAL_PCD_EP_SetStall>
 800b02c:	4603      	mov	r3, r0
 800b02e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b030:	7bfb      	ldrb	r3, [r7, #15]
 800b032:	4618      	mov	r0, r3
 800b034:	f000 f8de 	bl	800b1f4 <USBD_Get_USB_Status>
 800b038:	4603      	mov	r3, r0
 800b03a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b03c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b03e:	4618      	mov	r0, r3
 800b040:	3710      	adds	r7, #16
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}

0800b046 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b046:	b580      	push	{r7, lr}
 800b048:	b084      	sub	sp, #16
 800b04a:	af00      	add	r7, sp, #0
 800b04c:	6078      	str	r0, [r7, #4]
 800b04e:	460b      	mov	r3, r1
 800b050:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b052:	2300      	movs	r3, #0
 800b054:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b056:	2300      	movs	r3, #0
 800b058:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b060:	78fa      	ldrb	r2, [r7, #3]
 800b062:	4611      	mov	r1, r2
 800b064:	4618      	mov	r0, r3
 800b066:	f7f8 fc6f 	bl	8003948 <HAL_PCD_EP_ClrStall>
 800b06a:	4603      	mov	r3, r0
 800b06c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b06e:	7bfb      	ldrb	r3, [r7, #15]
 800b070:	4618      	mov	r0, r3
 800b072:	f000 f8bf 	bl	800b1f4 <USBD_Get_USB_Status>
 800b076:	4603      	mov	r3, r0
 800b078:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b07a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b07c:	4618      	mov	r0, r3
 800b07e:	3710      	adds	r7, #16
 800b080:	46bd      	mov	sp, r7
 800b082:	bd80      	pop	{r7, pc}

0800b084 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b084:	b480      	push	{r7}
 800b086:	b085      	sub	sp, #20
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
 800b08c:	460b      	mov	r3, r1
 800b08e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b096:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b098:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	da0b      	bge.n	800b0b8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b0a0:	78fb      	ldrb	r3, [r7, #3]
 800b0a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b0a6:	68f9      	ldr	r1, [r7, #12]
 800b0a8:	4613      	mov	r3, r2
 800b0aa:	00db      	lsls	r3, r3, #3
 800b0ac:	4413      	add	r3, r2
 800b0ae:	009b      	lsls	r3, r3, #2
 800b0b0:	440b      	add	r3, r1
 800b0b2:	3316      	adds	r3, #22
 800b0b4:	781b      	ldrb	r3, [r3, #0]
 800b0b6:	e00b      	b.n	800b0d0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b0b8:	78fb      	ldrb	r3, [r7, #3]
 800b0ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b0be:	68f9      	ldr	r1, [r7, #12]
 800b0c0:	4613      	mov	r3, r2
 800b0c2:	00db      	lsls	r3, r3, #3
 800b0c4:	4413      	add	r3, r2
 800b0c6:	009b      	lsls	r3, r3, #2
 800b0c8:	440b      	add	r3, r1
 800b0ca:	f203 2356 	addw	r3, r3, #598	; 0x256
 800b0ce:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	3714      	adds	r7, #20
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0da:	4770      	bx	lr

0800b0dc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b084      	sub	sp, #16
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
 800b0e4:	460b      	mov	r3, r1
 800b0e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b0f6:	78fa      	ldrb	r2, [r7, #3]
 800b0f8:	4611      	mov	r1, r2
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	f7f8 fa5e 	bl	80035bc <HAL_PCD_SetAddress>
 800b100:	4603      	mov	r3, r0
 800b102:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b104:	7bfb      	ldrb	r3, [r7, #15]
 800b106:	4618      	mov	r0, r3
 800b108:	f000 f874 	bl	800b1f4 <USBD_Get_USB_Status>
 800b10c:	4603      	mov	r3, r0
 800b10e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b110:	7bbb      	ldrb	r3, [r7, #14]
}
 800b112:	4618      	mov	r0, r3
 800b114:	3710      	adds	r7, #16
 800b116:	46bd      	mov	sp, r7
 800b118:	bd80      	pop	{r7, pc}

0800b11a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b11a:	b580      	push	{r7, lr}
 800b11c:	b086      	sub	sp, #24
 800b11e:	af00      	add	r7, sp, #0
 800b120:	60f8      	str	r0, [r7, #12]
 800b122:	607a      	str	r2, [r7, #4]
 800b124:	603b      	str	r3, [r7, #0]
 800b126:	460b      	mov	r3, r1
 800b128:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b12a:	2300      	movs	r3, #0
 800b12c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b12e:	2300      	movs	r3, #0
 800b130:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b138:	7af9      	ldrb	r1, [r7, #11]
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	687a      	ldr	r2, [r7, #4]
 800b13e:	f7f8 fb66 	bl	800380e <HAL_PCD_EP_Transmit>
 800b142:	4603      	mov	r3, r0
 800b144:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b146:	7dfb      	ldrb	r3, [r7, #23]
 800b148:	4618      	mov	r0, r3
 800b14a:	f000 f853 	bl	800b1f4 <USBD_Get_USB_Status>
 800b14e:	4603      	mov	r3, r0
 800b150:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b152:	7dbb      	ldrb	r3, [r7, #22]
}
 800b154:	4618      	mov	r0, r3
 800b156:	3718      	adds	r7, #24
 800b158:	46bd      	mov	sp, r7
 800b15a:	bd80      	pop	{r7, pc}

0800b15c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b086      	sub	sp, #24
 800b160:	af00      	add	r7, sp, #0
 800b162:	60f8      	str	r0, [r7, #12]
 800b164:	607a      	str	r2, [r7, #4]
 800b166:	603b      	str	r3, [r7, #0]
 800b168:	460b      	mov	r3, r1
 800b16a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b16c:	2300      	movs	r3, #0
 800b16e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b170:	2300      	movs	r3, #0
 800b172:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b17a:	7af9      	ldrb	r1, [r7, #11]
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	687a      	ldr	r2, [r7, #4]
 800b180:	f7f8 faf2 	bl	8003768 <HAL_PCD_EP_Receive>
 800b184:	4603      	mov	r3, r0
 800b186:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b188:	7dfb      	ldrb	r3, [r7, #23]
 800b18a:	4618      	mov	r0, r3
 800b18c:	f000 f832 	bl	800b1f4 <USBD_Get_USB_Status>
 800b190:	4603      	mov	r3, r0
 800b192:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b194:	7dbb      	ldrb	r3, [r7, #22]
}
 800b196:	4618      	mov	r0, r3
 800b198:	3718      	adds	r7, #24
 800b19a:	46bd      	mov	sp, r7
 800b19c:	bd80      	pop	{r7, pc}

0800b19e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b19e:	b580      	push	{r7, lr}
 800b1a0:	b082      	sub	sp, #8
 800b1a2:	af00      	add	r7, sp, #0
 800b1a4:	6078      	str	r0, [r7, #4]
 800b1a6:	460b      	mov	r3, r1
 800b1a8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b1b0:	78fa      	ldrb	r2, [r7, #3]
 800b1b2:	4611      	mov	r1, r2
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	f7f8 fb12 	bl	80037de <HAL_PCD_EP_GetRxCount>
 800b1ba:	4603      	mov	r3, r0
}
 800b1bc:	4618      	mov	r0, r3
 800b1be:	3708      	adds	r7, #8
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	bd80      	pop	{r7, pc}

0800b1c4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b1c4:	b480      	push	{r7}
 800b1c6:	b083      	sub	sp, #12
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b1cc:	4b03      	ldr	r3, [pc, #12]	; (800b1dc <USBD_static_malloc+0x18>)
}
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	370c      	adds	r7, #12
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d8:	4770      	bx	lr
 800b1da:	bf00      	nop
 800b1dc:	20005a94 	.word	0x20005a94

0800b1e0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b1e0:	b480      	push	{r7}
 800b1e2:	b083      	sub	sp, #12
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]

}
 800b1e8:	bf00      	nop
 800b1ea:	370c      	adds	r7, #12
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f2:	4770      	bx	lr

0800b1f4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b1f4:	b480      	push	{r7}
 800b1f6:	b085      	sub	sp, #20
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	4603      	mov	r3, r0
 800b1fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b1fe:	2300      	movs	r3, #0
 800b200:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b202:	79fb      	ldrb	r3, [r7, #7]
 800b204:	2b03      	cmp	r3, #3
 800b206:	d817      	bhi.n	800b238 <USBD_Get_USB_Status+0x44>
 800b208:	a201      	add	r2, pc, #4	; (adr r2, 800b210 <USBD_Get_USB_Status+0x1c>)
 800b20a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b20e:	bf00      	nop
 800b210:	0800b221 	.word	0x0800b221
 800b214:	0800b227 	.word	0x0800b227
 800b218:	0800b22d 	.word	0x0800b22d
 800b21c:	0800b233 	.word	0x0800b233
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b220:	2300      	movs	r3, #0
 800b222:	73fb      	strb	r3, [r7, #15]
    break;
 800b224:	e00b      	b.n	800b23e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b226:	2303      	movs	r3, #3
 800b228:	73fb      	strb	r3, [r7, #15]
    break;
 800b22a:	e008      	b.n	800b23e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b22c:	2301      	movs	r3, #1
 800b22e:	73fb      	strb	r3, [r7, #15]
    break;
 800b230:	e005      	b.n	800b23e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b232:	2303      	movs	r3, #3
 800b234:	73fb      	strb	r3, [r7, #15]
    break;
 800b236:	e002      	b.n	800b23e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b238:	2303      	movs	r3, #3
 800b23a:	73fb      	strb	r3, [r7, #15]
    break;
 800b23c:	bf00      	nop
  }
  return usb_status;
 800b23e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b240:	4618      	mov	r0, r3
 800b242:	3714      	adds	r7, #20
 800b244:	46bd      	mov	sp, r7
 800b246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24a:	4770      	bx	lr

0800b24c <blinky_task>:
#include "blinky_task.h"

#include "main.h"

void blinky_task (void const *argument){
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b084      	sub	sp, #16
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
	uint32_t t = osKernelSysTick();
 800b254:	f7fe f82f 	bl	80092b6 <osKernelSysTick>
 800b258:	4603      	mov	r3, r0
 800b25a:	60bb      	str	r3, [r7, #8]
	uint32_t period = 100;
 800b25c:	2364      	movs	r3, #100	; 0x64
 800b25e:	60fb      	str	r3, [r7, #12]

	 for(;;){
		HAL_GPIO_TogglePin(LED_A_GPIO_Port, LED_A_Pin);
 800b260:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b264:	4827      	ldr	r0, [pc, #156]	; (800b304 <blinky_task+0xb8>)
 800b266:	f7f7 fbaa 	bl	80029be <HAL_GPIO_TogglePin>
		osDelayUntil(&t, period);
 800b26a:	f107 0308 	add.w	r3, r7, #8
 800b26e:	68f9      	ldr	r1, [r7, #12]
 800b270:	4618      	mov	r0, r3
 800b272:	f7fe f86b 	bl	800934c <osDelayUntil>

		HAL_GPIO_TogglePin(LED_B_GPIO_Port, LED_B_Pin);
 800b276:	2180      	movs	r1, #128	; 0x80
 800b278:	4822      	ldr	r0, [pc, #136]	; (800b304 <blinky_task+0xb8>)
 800b27a:	f7f7 fba0 	bl	80029be <HAL_GPIO_TogglePin>
		osDelayUntil(&t, period);
 800b27e:	f107 0308 	add.w	r3, r7, #8
 800b282:	68f9      	ldr	r1, [r7, #12]
 800b284:	4618      	mov	r0, r3
 800b286:	f7fe f861 	bl	800934c <osDelayUntil>

		HAL_GPIO_TogglePin(LED_C_GPIO_Port, LED_C_Pin);
 800b28a:	2140      	movs	r1, #64	; 0x40
 800b28c:	481d      	ldr	r0, [pc, #116]	; (800b304 <blinky_task+0xb8>)
 800b28e:	f7f7 fb96 	bl	80029be <HAL_GPIO_TogglePin>
		osDelayUntil(&t, period);
 800b292:	f107 0308 	add.w	r3, r7, #8
 800b296:	68f9      	ldr	r1, [r7, #12]
 800b298:	4618      	mov	r0, r3
 800b29a:	f7fe f857 	bl	800934c <osDelayUntil>

		HAL_GPIO_TogglePin(LED_D_GPIO_Port, LED_D_Pin);
 800b29e:	2120      	movs	r1, #32
 800b2a0:	4818      	ldr	r0, [pc, #96]	; (800b304 <blinky_task+0xb8>)
 800b2a2:	f7f7 fb8c 	bl	80029be <HAL_GPIO_TogglePin>
		osDelayUntil(&t, period);
 800b2a6:	f107 0308 	add.w	r3, r7, #8
 800b2aa:	68f9      	ldr	r1, [r7, #12]
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	f7fe f84d 	bl	800934c <osDelayUntil>

		HAL_GPIO_TogglePin(LED_E_GPIO_Port, LED_E_Pin);
 800b2b2:	2110      	movs	r1, #16
 800b2b4:	4813      	ldr	r0, [pc, #76]	; (800b304 <blinky_task+0xb8>)
 800b2b6:	f7f7 fb82 	bl	80029be <HAL_GPIO_TogglePin>
		osDelayUntil(&t, period);
 800b2ba:	f107 0308 	add.w	r3, r7, #8
 800b2be:	68f9      	ldr	r1, [r7, #12]
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	f7fe f843 	bl	800934c <osDelayUntil>

		HAL_GPIO_TogglePin(LED_F_GPIO_Port, LED_F_Pin);
 800b2c6:	2108      	movs	r1, #8
 800b2c8:	480e      	ldr	r0, [pc, #56]	; (800b304 <blinky_task+0xb8>)
 800b2ca:	f7f7 fb78 	bl	80029be <HAL_GPIO_TogglePin>
		osDelayUntil(&t, period);
 800b2ce:	f107 0308 	add.w	r3, r7, #8
 800b2d2:	68f9      	ldr	r1, [r7, #12]
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	f7fe f839 	bl	800934c <osDelayUntil>

		HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
 800b2da:	2104      	movs	r1, #4
 800b2dc:	4809      	ldr	r0, [pc, #36]	; (800b304 <blinky_task+0xb8>)
 800b2de:	f7f7 fb6e 	bl	80029be <HAL_GPIO_TogglePin>
		osDelayUntil(&t, period);
 800b2e2:	f107 0308 	add.w	r3, r7, #8
 800b2e6:	68f9      	ldr	r1, [r7, #12]
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	f7fe f82f 	bl	800934c <osDelayUntil>

		HAL_GPIO_TogglePin(LED_H_GPIO_Port, LED_H_Pin);
 800b2ee:	2102      	movs	r1, #2
 800b2f0:	4804      	ldr	r0, [pc, #16]	; (800b304 <blinky_task+0xb8>)
 800b2f2:	f7f7 fb64 	bl	80029be <HAL_GPIO_TogglePin>
		osDelayUntil(&t, period);
 800b2f6:	f107 0308 	add.w	r3, r7, #8
 800b2fa:	68f9      	ldr	r1, [r7, #12]
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	f7fe f825 	bl	800934c <osDelayUntil>
		HAL_GPIO_TogglePin(LED_A_GPIO_Port, LED_A_Pin);
 800b302:	e7ad      	b.n	800b260 <blinky_task+0x14>
 800b304:	40021800 	.word	0x40021800

0800b308 <init_task>:
#include "imuTest.h"

osThreadId blinky_task_t;
osThreadId imu_task_t;

void init_task(){
 800b308:	b5b0      	push	{r4, r5, r7, lr}
 800b30a:	b08a      	sub	sp, #40	; 0x28
 800b30c:	af00      	add	r7, sp, #0
	osThreadDef(BLINKY_TASK, blinky_task, osPriorityLow, 0, 64);
 800b30e:	4b12      	ldr	r3, [pc, #72]	; (800b358 <init_task+0x50>)
 800b310:	f107 0414 	add.w	r4, r7, #20
 800b314:	461d      	mov	r5, r3
 800b316:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b318:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b31a:	682b      	ldr	r3, [r5, #0]
 800b31c:	6023      	str	r3, [r4, #0]
	blinky_task_t = osThreadCreate(osThread(BLINKY_TASK), NULL);
 800b31e:	f107 0314 	add.w	r3, r7, #20
 800b322:	2100      	movs	r1, #0
 800b324:	4618      	mov	r0, r3
 800b326:	f7fd ffd6 	bl	80092d6 <osThreadCreate>
 800b32a:	4603      	mov	r3, r0
 800b32c:	4a0b      	ldr	r2, [pc, #44]	; (800b35c <init_task+0x54>)
 800b32e:	6013      	str	r3, [r2, #0]

	osThreadDef(IMU_TASK, imu_task, osPriorityNormal, 0, 128);
 800b330:	4b0b      	ldr	r3, [pc, #44]	; (800b360 <init_task+0x58>)
 800b332:	463c      	mov	r4, r7
 800b334:	461d      	mov	r5, r3
 800b336:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b338:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b33a:	682b      	ldr	r3, [r5, #0]
 800b33c:	6023      	str	r3, [r4, #0]
	imu_task_t = osThreadCreate(osThread(IMU_TASK), NULL);
 800b33e:	463b      	mov	r3, r7
 800b340:	2100      	movs	r1, #0
 800b342:	4618      	mov	r0, r3
 800b344:	f7fd ffc7 	bl	80092d6 <osThreadCreate>
 800b348:	4603      	mov	r3, r0
 800b34a:	4a06      	ldr	r2, [pc, #24]	; (800b364 <init_task+0x5c>)
 800b34c:	6013      	str	r3, [r2, #0]
}
 800b34e:	bf00      	nop
 800b350:	3728      	adds	r7, #40	; 0x28
 800b352:	46bd      	mov	sp, r7
 800b354:	bdb0      	pop	{r4, r5, r7, pc}
 800b356:	bf00      	nop
 800b358:	0800d39c 	.word	0x0800d39c
 800b35c:	20005cb4 	.word	0x20005cb4
 800b360:	0800d3bc 	.word	0x0800d3bc
 800b364:	20005cb8 	.word	0x20005cb8

0800b368 <imu_update>:
#include "imu_task.h"

struct attitude mahony_atti;

int32_t imu_update()
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b08a      	sub	sp, #40	; 0x28
 800b36c:	af00      	add	r7, sp, #0
  struct ahrs_sensor mpu_sensor;
//  struct attitude mahony_atti;
  mpu_get_data(&mpu_sensor);
 800b36e:	1d3b      	adds	r3, r7, #4
 800b370:	4618      	mov	r0, r3
 800b372:	f000 f9fd 	bl	800b770 <mpu_get_data>
  mahony_ahrs_updateIMU(&mpu_sensor, &mahony_atti);
 800b376:	1d3b      	adds	r3, r7, #4
 800b378:	4904      	ldr	r1, [pc, #16]	; (800b38c <imu_update+0x24>)
 800b37a:	4618      	mov	r0, r3
 800b37c:	f000 fd7c 	bl	800be78 <mahony_ahrs_updateIMU>
  return 0;
 800b380:	2300      	movs	r3, #0
}
 800b382:	4618      	mov	r0, r3
 800b384:	3728      	adds	r7, #40	; 0x28
 800b386:	46bd      	mov	sp, r7
 800b388:	bd80      	pop	{r7, pc}
 800b38a:	bf00      	nop
 800b38c:	20005cbc 	.word	0x20005cbc

0800b390 <imu_task>:

void imu_task(void const * argument){
 800b390:	b580      	push	{r7, lr}
 800b392:	b082      	sub	sp, #8
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
	mpu_device_init();
 800b398:	f000 fb10 	bl	800b9bc <mpu_device_init>
	while (1)
	{
		imu_update();
 800b39c:	f7ff ffe4 	bl	800b368 <imu_update>
		osDelay(10);
 800b3a0:	200a      	movs	r0, #10
 800b3a2:	f7fd ffbf 	bl	8009324 <osDelay>
		imu_update();
 800b3a6:	e7f9      	b.n	800b39c <imu_task+0xc>

0800b3a8 <mpu_write_reg>:
static void get_mpu_gyro_offset(void);
static void get_mpu_acc_offset(void);
static void get_ist_mag_offset(void);

uint8_t mpu_write_reg(uint8_t const reg, uint8_t const data)
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b084      	sub	sp, #16
 800b3ac:	af02      	add	r7, sp, #8
 800b3ae:	4603      	mov	r3, r0
 800b3b0:	460a      	mov	r2, r1
 800b3b2:	71fb      	strb	r3, [r7, #7]
 800b3b4:	4613      	mov	r3, r2
 800b3b6:	71bb      	strb	r3, [r7, #6]
  MPU_NSS_LOW();
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	2140      	movs	r1, #64	; 0x40
 800b3bc:	4812      	ldr	r0, [pc, #72]	; (800b408 <mpu_write_reg+0x60>)
 800b3be:	f7f7 fae5 	bl	800298c <HAL_GPIO_WritePin>
  tx = reg & 0x7F;
 800b3c2:	79fb      	ldrb	r3, [r7, #7]
 800b3c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b3c8:	b2da      	uxtb	r2, r3
 800b3ca:	4b10      	ldr	r3, [pc, #64]	; (800b40c <mpu_write_reg+0x64>)
 800b3cc:	701a      	strb	r2, [r3, #0]
  HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800b3ce:	2337      	movs	r3, #55	; 0x37
 800b3d0:	9300      	str	r3, [sp, #0]
 800b3d2:	2301      	movs	r3, #1
 800b3d4:	4a0e      	ldr	r2, [pc, #56]	; (800b410 <mpu_write_reg+0x68>)
 800b3d6:	490d      	ldr	r1, [pc, #52]	; (800b40c <mpu_write_reg+0x64>)
 800b3d8:	480e      	ldr	r0, [pc, #56]	; (800b414 <mpu_write_reg+0x6c>)
 800b3da:	f7f9 fa5a 	bl	8004892 <HAL_SPI_TransmitReceive>
  tx = data;
 800b3de:	4a0b      	ldr	r2, [pc, #44]	; (800b40c <mpu_write_reg+0x64>)
 800b3e0:	79bb      	ldrb	r3, [r7, #6]
 800b3e2:	7013      	strb	r3, [r2, #0]
  HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800b3e4:	2337      	movs	r3, #55	; 0x37
 800b3e6:	9300      	str	r3, [sp, #0]
 800b3e8:	2301      	movs	r3, #1
 800b3ea:	4a09      	ldr	r2, [pc, #36]	; (800b410 <mpu_write_reg+0x68>)
 800b3ec:	4907      	ldr	r1, [pc, #28]	; (800b40c <mpu_write_reg+0x64>)
 800b3ee:	4809      	ldr	r0, [pc, #36]	; (800b414 <mpu_write_reg+0x6c>)
 800b3f0:	f7f9 fa4f 	bl	8004892 <HAL_SPI_TransmitReceive>
  MPU_NSS_HIGH();
 800b3f4:	2201      	movs	r2, #1
 800b3f6:	2140      	movs	r1, #64	; 0x40
 800b3f8:	4803      	ldr	r0, [pc, #12]	; (800b408 <mpu_write_reg+0x60>)
 800b3fa:	f7f7 fac7 	bl	800298c <HAL_GPIO_WritePin>
  return 0;
 800b3fe:	2300      	movs	r3, #0
}
 800b400:	4618      	mov	r0, r3
 800b402:	3708      	adds	r7, #8
 800b404:	46bd      	mov	sp, r7
 800b406:	bd80      	pop	{r7, pc}
 800b408:	40021400 	.word	0x40021400
 800b40c:	20005cc8 	.word	0x20005cc8
 800b410:	20005cc9 	.word	0x20005cc9
 800b414:	200001b8 	.word	0x200001b8

0800b418 <mpu_read_reg>:

uint8_t mpu_read_reg(uint8_t const reg)
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b084      	sub	sp, #16
 800b41c:	af02      	add	r7, sp, #8
 800b41e:	4603      	mov	r3, r0
 800b420:	71fb      	strb	r3, [r7, #7]
  MPU_NSS_LOW();
 800b422:	2200      	movs	r2, #0
 800b424:	2140      	movs	r1, #64	; 0x40
 800b426:	4812      	ldr	r0, [pc, #72]	; (800b470 <mpu_read_reg+0x58>)
 800b428:	f7f7 fab0 	bl	800298c <HAL_GPIO_WritePin>
  tx = reg | 0x80;
 800b42c:	79fb      	ldrb	r3, [r7, #7]
 800b42e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b432:	b2da      	uxtb	r2, r3
 800b434:	4b0f      	ldr	r3, [pc, #60]	; (800b474 <mpu_read_reg+0x5c>)
 800b436:	701a      	strb	r2, [r3, #0]
  HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800b438:	2337      	movs	r3, #55	; 0x37
 800b43a:	9300      	str	r3, [sp, #0]
 800b43c:	2301      	movs	r3, #1
 800b43e:	4a0e      	ldr	r2, [pc, #56]	; (800b478 <mpu_read_reg+0x60>)
 800b440:	490c      	ldr	r1, [pc, #48]	; (800b474 <mpu_read_reg+0x5c>)
 800b442:	480e      	ldr	r0, [pc, #56]	; (800b47c <mpu_read_reg+0x64>)
 800b444:	f7f9 fa25 	bl	8004892 <HAL_SPI_TransmitReceive>
  HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800b448:	2337      	movs	r3, #55	; 0x37
 800b44a:	9300      	str	r3, [sp, #0]
 800b44c:	2301      	movs	r3, #1
 800b44e:	4a0a      	ldr	r2, [pc, #40]	; (800b478 <mpu_read_reg+0x60>)
 800b450:	4908      	ldr	r1, [pc, #32]	; (800b474 <mpu_read_reg+0x5c>)
 800b452:	480a      	ldr	r0, [pc, #40]	; (800b47c <mpu_read_reg+0x64>)
 800b454:	f7f9 fa1d 	bl	8004892 <HAL_SPI_TransmitReceive>
  MPU_NSS_HIGH();
 800b458:	2201      	movs	r2, #1
 800b45a:	2140      	movs	r1, #64	; 0x40
 800b45c:	4804      	ldr	r0, [pc, #16]	; (800b470 <mpu_read_reg+0x58>)
 800b45e:	f7f7 fa95 	bl	800298c <HAL_GPIO_WritePin>
  return rx;
 800b462:	4b05      	ldr	r3, [pc, #20]	; (800b478 <mpu_read_reg+0x60>)
 800b464:	781b      	ldrb	r3, [r3, #0]
}
 800b466:	4618      	mov	r0, r3
 800b468:	3708      	adds	r7, #8
 800b46a:	46bd      	mov	sp, r7
 800b46c:	bd80      	pop	{r7, pc}
 800b46e:	bf00      	nop
 800b470:	40021400 	.word	0x40021400
 800b474:	20005cc8 	.word	0x20005cc8
 800b478:	20005cc9 	.word	0x20005cc9
 800b47c:	200001b8 	.word	0x200001b8

0800b480 <mpu_read_regs>:

uint8_t mpu_read_regs(uint8_t const regAddr, uint8_t *pData, uint8_t len)
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b084      	sub	sp, #16
 800b484:	af02      	add	r7, sp, #8
 800b486:	4603      	mov	r3, r0
 800b488:	6039      	str	r1, [r7, #0]
 800b48a:	71fb      	strb	r3, [r7, #7]
 800b48c:	4613      	mov	r3, r2
 800b48e:	71bb      	strb	r3, [r7, #6]
  MPU_NSS_LOW();
 800b490:	2200      	movs	r2, #0
 800b492:	2140      	movs	r1, #64	; 0x40
 800b494:	4813      	ldr	r0, [pc, #76]	; (800b4e4 <mpu_read_regs+0x64>)
 800b496:	f7f7 fa79 	bl	800298c <HAL_GPIO_WritePin>
  tx = regAddr | 0x80;
 800b49a:	79fb      	ldrb	r3, [r7, #7]
 800b49c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b4a0:	b2da      	uxtb	r2, r3
 800b4a2:	4b11      	ldr	r3, [pc, #68]	; (800b4e8 <mpu_read_regs+0x68>)
 800b4a4:	701a      	strb	r2, [r3, #0]
  tx_buff[0] = tx;
 800b4a6:	4b10      	ldr	r3, [pc, #64]	; (800b4e8 <mpu_read_regs+0x68>)
 800b4a8:	781a      	ldrb	r2, [r3, #0]
 800b4aa:	4b10      	ldr	r3, [pc, #64]	; (800b4ec <mpu_read_regs+0x6c>)
 800b4ac:	701a      	strb	r2, [r3, #0]
  HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800b4ae:	2337      	movs	r3, #55	; 0x37
 800b4b0:	9300      	str	r3, [sp, #0]
 800b4b2:	2301      	movs	r3, #1
 800b4b4:	4a0e      	ldr	r2, [pc, #56]	; (800b4f0 <mpu_read_regs+0x70>)
 800b4b6:	490c      	ldr	r1, [pc, #48]	; (800b4e8 <mpu_read_regs+0x68>)
 800b4b8:	480e      	ldr	r0, [pc, #56]	; (800b4f4 <mpu_read_regs+0x74>)
 800b4ba:	f7f9 f9ea 	bl	8004892 <HAL_SPI_TransmitReceive>
  HAL_SPI_TransmitReceive(&MPU_HSPI, tx_buff, pData, len, 55);
 800b4be:	79bb      	ldrb	r3, [r7, #6]
 800b4c0:	b29b      	uxth	r3, r3
 800b4c2:	2237      	movs	r2, #55	; 0x37
 800b4c4:	9200      	str	r2, [sp, #0]
 800b4c6:	683a      	ldr	r2, [r7, #0]
 800b4c8:	4908      	ldr	r1, [pc, #32]	; (800b4ec <mpu_read_regs+0x6c>)
 800b4ca:	480a      	ldr	r0, [pc, #40]	; (800b4f4 <mpu_read_regs+0x74>)
 800b4cc:	f7f9 f9e1 	bl	8004892 <HAL_SPI_TransmitReceive>
  MPU_NSS_HIGH();
 800b4d0:	2201      	movs	r2, #1
 800b4d2:	2140      	movs	r1, #64	; 0x40
 800b4d4:	4803      	ldr	r0, [pc, #12]	; (800b4e4 <mpu_read_regs+0x64>)
 800b4d6:	f7f7 fa59 	bl	800298c <HAL_GPIO_WritePin>
  return 0;
 800b4da:	2300      	movs	r3, #0
}
 800b4dc:	4618      	mov	r0, r3
 800b4de:	3708      	adds	r7, #8
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	bd80      	pop	{r7, pc}
 800b4e4:	40021400 	.word	0x40021400
 800b4e8:	20005cc8 	.word	0x20005cc8
 800b4ec:	20005ccc 	.word	0x20005ccc
 800b4f0:	20005cc9 	.word	0x20005cc9
 800b4f4:	200001b8 	.word	0x200001b8

0800b4f8 <ist_reg_write_by_mpu>:

static void ist_reg_write_by_mpu(uint8_t addr, uint8_t data)
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b082      	sub	sp, #8
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	4603      	mov	r3, r0
 800b500:	460a      	mov	r2, r1
 800b502:	71fb      	strb	r3, [r7, #7]
 800b504:	4613      	mov	r3, r2
 800b506:	71bb      	strb	r3, [r7, #6]
  //turn off slave 1 at first
  mpu_write_reg(MPU6500_I2C_SLV1_CTRL, 0x00);
 800b508:	2100      	movs	r1, #0
 800b50a:	202a      	movs	r0, #42	; 0x2a
 800b50c:	f7ff ff4c 	bl	800b3a8 <mpu_write_reg>
  MPU_DELAY(2);
 800b510:	2002      	movs	r0, #2
 800b512:	f7f6 fc55 	bl	8001dc0 <HAL_Delay>
  mpu_write_reg(MPU6500_I2C_SLV1_REG, addr);
 800b516:	79fb      	ldrb	r3, [r7, #7]
 800b518:	4619      	mov	r1, r3
 800b51a:	2029      	movs	r0, #41	; 0x29
 800b51c:	f7ff ff44 	bl	800b3a8 <mpu_write_reg>
  MPU_DELAY(2);
 800b520:	2002      	movs	r0, #2
 800b522:	f7f6 fc4d 	bl	8001dc0 <HAL_Delay>
  mpu_write_reg(MPU6500_I2C_SLV1_DO, data);
 800b526:	79bb      	ldrb	r3, [r7, #6]
 800b528:	4619      	mov	r1, r3
 800b52a:	2064      	movs	r0, #100	; 0x64
 800b52c:	f7ff ff3c 	bl	800b3a8 <mpu_write_reg>
  MPU_DELAY(2);
 800b530:	2002      	movs	r0, #2
 800b532:	f7f6 fc45 	bl	8001dc0 <HAL_Delay>
  //turn on slave 1 with one byte transmitting
  mpu_write_reg(MPU6500_I2C_SLV1_CTRL, 0x80 | 0x01);
 800b536:	2181      	movs	r1, #129	; 0x81
 800b538:	202a      	movs	r0, #42	; 0x2a
 800b53a:	f7ff ff35 	bl	800b3a8 <mpu_write_reg>
  MPU_DELAY(10);
 800b53e:	200a      	movs	r0, #10
 800b540:	f7f6 fc3e 	bl	8001dc0 <HAL_Delay>
}
 800b544:	bf00      	nop
 800b546:	3708      	adds	r7, #8
 800b548:	46bd      	mov	sp, r7
 800b54a:	bd80      	pop	{r7, pc}

0800b54c <ist_reg_read_by_mpu>:

static uint8_t ist_reg_read_by_mpu(uint8_t addr)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b084      	sub	sp, #16
 800b550:	af00      	add	r7, sp, #0
 800b552:	4603      	mov	r3, r0
 800b554:	71fb      	strb	r3, [r7, #7]
  uint8_t retval;
  mpu_write_reg(MPU6500_I2C_SLV4_REG, addr);
 800b556:	79fb      	ldrb	r3, [r7, #7]
 800b558:	4619      	mov	r1, r3
 800b55a:	2032      	movs	r0, #50	; 0x32
 800b55c:	f7ff ff24 	bl	800b3a8 <mpu_write_reg>
  MPU_DELAY(10);
 800b560:	200a      	movs	r0, #10
 800b562:	f7f6 fc2d 	bl	8001dc0 <HAL_Delay>
  mpu_write_reg(MPU6500_I2C_SLV4_CTRL, 0x80);
 800b566:	2180      	movs	r1, #128	; 0x80
 800b568:	2034      	movs	r0, #52	; 0x34
 800b56a:	f7ff ff1d 	bl	800b3a8 <mpu_write_reg>
  MPU_DELAY(10);
 800b56e:	200a      	movs	r0, #10
 800b570:	f7f6 fc26 	bl	8001dc0 <HAL_Delay>
  retval = mpu_read_reg(MPU6500_I2C_SLV4_DI);
 800b574:	2035      	movs	r0, #53	; 0x35
 800b576:	f7ff ff4f 	bl	800b418 <mpu_read_reg>
 800b57a:	4603      	mov	r3, r0
 800b57c:	73fb      	strb	r3, [r7, #15]
  //turn off slave4 after read
  mpu_write_reg(MPU6500_I2C_SLV4_CTRL, 0x00);
 800b57e:	2100      	movs	r1, #0
 800b580:	2034      	movs	r0, #52	; 0x34
 800b582:	f7ff ff11 	bl	800b3a8 <mpu_write_reg>
  MPU_DELAY(10);
 800b586:	200a      	movs	r0, #10
 800b588:	f7f6 fc1a 	bl	8001dc0 <HAL_Delay>
  return retval;
 800b58c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b58e:	4618      	mov	r0, r3
 800b590:	3710      	adds	r7, #16
 800b592:	46bd      	mov	sp, r7
 800b594:	bd80      	pop	{r7, pc}

0800b596 <mpu_mst_i2c_auto_read_config>:

static void mpu_mst_i2c_auto_read_config(uint8_t device_address, uint8_t reg_base_addr, uint8_t data_num)
{
 800b596:	b580      	push	{r7, lr}
 800b598:	b082      	sub	sp, #8
 800b59a:	af00      	add	r7, sp, #0
 800b59c:	4603      	mov	r3, r0
 800b59e:	71fb      	strb	r3, [r7, #7]
 800b5a0:	460b      	mov	r3, r1
 800b5a2:	71bb      	strb	r3, [r7, #6]
 800b5a4:	4613      	mov	r3, r2
 800b5a6:	717b      	strb	r3, [r7, #5]
  //configure the device address of the IST8310
  //use slave1,auto transmit single measure mode.
  mpu_write_reg(MPU6500_I2C_SLV1_ADDR, device_address);
 800b5a8:	79fb      	ldrb	r3, [r7, #7]
 800b5aa:	4619      	mov	r1, r3
 800b5ac:	2028      	movs	r0, #40	; 0x28
 800b5ae:	f7ff fefb 	bl	800b3a8 <mpu_write_reg>
  MPU_DELAY(2);
 800b5b2:	2002      	movs	r0, #2
 800b5b4:	f7f6 fc04 	bl	8001dc0 <HAL_Delay>
  mpu_write_reg(MPU6500_I2C_SLV1_REG, IST8310_R_CONFA);
 800b5b8:	210a      	movs	r1, #10
 800b5ba:	2029      	movs	r0, #41	; 0x29
 800b5bc:	f7ff fef4 	bl	800b3a8 <mpu_write_reg>
  MPU_DELAY(2);
 800b5c0:	2002      	movs	r0, #2
 800b5c2:	f7f6 fbfd 	bl	8001dc0 <HAL_Delay>
  mpu_write_reg(MPU6500_I2C_SLV1_DO, IST8310_ODR_MODE);
 800b5c6:	2101      	movs	r1, #1
 800b5c8:	2064      	movs	r0, #100	; 0x64
 800b5ca:	f7ff feed 	bl	800b3a8 <mpu_write_reg>
  MPU_DELAY(2);
 800b5ce:	2002      	movs	r0, #2
 800b5d0:	f7f6 fbf6 	bl	8001dc0 <HAL_Delay>

  //use slave0,auto read data
  mpu_write_reg(MPU6500_I2C_SLV0_ADDR, 0x80 | device_address);
 800b5d4:	79fb      	ldrb	r3, [r7, #7]
 800b5d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b5da:	b2db      	uxtb	r3, r3
 800b5dc:	4619      	mov	r1, r3
 800b5de:	2025      	movs	r0, #37	; 0x25
 800b5e0:	f7ff fee2 	bl	800b3a8 <mpu_write_reg>
  MPU_DELAY(2);
 800b5e4:	2002      	movs	r0, #2
 800b5e6:	f7f6 fbeb 	bl	8001dc0 <HAL_Delay>
  mpu_write_reg(MPU6500_I2C_SLV0_REG, reg_base_addr);
 800b5ea:	79bb      	ldrb	r3, [r7, #6]
 800b5ec:	4619      	mov	r1, r3
 800b5ee:	2026      	movs	r0, #38	; 0x26
 800b5f0:	f7ff feda 	bl	800b3a8 <mpu_write_reg>
  MPU_DELAY(2);
 800b5f4:	2002      	movs	r0, #2
 800b5f6:	f7f6 fbe3 	bl	8001dc0 <HAL_Delay>

  //every eight mpu6500 internal samples one i2c master read
  mpu_write_reg(MPU6500_I2C_SLV4_CTRL, 0x03);
 800b5fa:	2103      	movs	r1, #3
 800b5fc:	2034      	movs	r0, #52	; 0x34
 800b5fe:	f7ff fed3 	bl	800b3a8 <mpu_write_reg>
  MPU_DELAY(2);
 800b602:	2002      	movs	r0, #2
 800b604:	f7f6 fbdc 	bl	8001dc0 <HAL_Delay>
  //enable slave 0 and 1 access delay
  mpu_write_reg(MPU6500_I2C_MST_DELAY_CTRL, 0x01 | 0x02);
 800b608:	2103      	movs	r1, #3
 800b60a:	2067      	movs	r0, #103	; 0x67
 800b60c:	f7ff fecc 	bl	800b3a8 <mpu_write_reg>
  MPU_DELAY(2);
 800b610:	2002      	movs	r0, #2
 800b612:	f7f6 fbd5 	bl	8001dc0 <HAL_Delay>
  //enable slave 1 auto transmit
  mpu_write_reg(MPU6500_I2C_SLV1_CTRL, 0x80 | 0x01);
 800b616:	2181      	movs	r1, #129	; 0x81
 800b618:	202a      	movs	r0, #42	; 0x2a
 800b61a:	f7ff fec5 	bl	800b3a8 <mpu_write_reg>
  MPU_DELAY(6); //Wait 6ms (minimum waiting time for 16 times internal average setup)
 800b61e:	2006      	movs	r0, #6
 800b620:	f7f6 fbce 	bl	8001dc0 <HAL_Delay>
  //enable slave 0 with data_num bytes reading
  mpu_write_reg(MPU6500_I2C_SLV0_CTRL, 0x80 | data_num);
 800b624:	797b      	ldrb	r3, [r7, #5]
 800b626:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b62a:	b2db      	uxtb	r3, r3
 800b62c:	4619      	mov	r1, r3
 800b62e:	2027      	movs	r0, #39	; 0x27
 800b630:	f7ff feba 	bl	800b3a8 <mpu_write_reg>
  MPU_DELAY(2);
 800b634:	2002      	movs	r0, #2
 800b636:	f7f6 fbc3 	bl	8001dc0 <HAL_Delay>
}
 800b63a:	bf00      	nop
 800b63c:	3708      	adds	r7, #8
 800b63e:	46bd      	mov	sp, r7
 800b640:	bd80      	pop	{r7, pc}

0800b642 <ist8310_init>:

uint8_t ist8310_init(void)
{
 800b642:	b580      	push	{r7, lr}
 800b644:	af00      	add	r7, sp, #0
  //Enable I2C master mode, Reset I2C Slave module
  mpu_write_reg(MPU6500_USER_CTRL, 0x30);
 800b646:	2130      	movs	r1, #48	; 0x30
 800b648:	206a      	movs	r0, #106	; 0x6a
 800b64a:	f7ff fead 	bl	800b3a8 <mpu_write_reg>
  MPU_DELAY(10);
 800b64e:	200a      	movs	r0, #10
 800b650:	f7f6 fbb6 	bl	8001dc0 <HAL_Delay>
  //I2C master clock 400kHz
  mpu_write_reg(MPU6500_I2C_MST_CTRL, 0x0d);
 800b654:	210d      	movs	r1, #13
 800b656:	2024      	movs	r0, #36	; 0x24
 800b658:	f7ff fea6 	bl	800b3a8 <mpu_write_reg>
  MPU_DELAY(10);
 800b65c:	200a      	movs	r0, #10
 800b65e:	f7f6 fbaf 	bl	8001dc0 <HAL_Delay>

  //turn on slave 1 for ist write and slave 4 for ist read
  mpu_write_reg(MPU6500_I2C_SLV1_ADDR, IST8310_ADDRESS); //write ist
 800b662:	210e      	movs	r1, #14
 800b664:	2028      	movs	r0, #40	; 0x28
 800b666:	f7ff fe9f 	bl	800b3a8 <mpu_write_reg>
  MPU_DELAY(10);
 800b66a:	200a      	movs	r0, #10
 800b66c:	f7f6 fba8 	bl	8001dc0 <HAL_Delay>
  mpu_write_reg(MPU6500_I2C_SLV4_ADDR, 0x80 | IST8310_ADDRESS); //read ist
 800b670:	218e      	movs	r1, #142	; 0x8e
 800b672:	2031      	movs	r0, #49	; 0x31
 800b674:	f7ff fe98 	bl	800b3a8 <mpu_write_reg>
  MPU_DELAY(10);
 800b678:	200a      	movs	r0, #10
 800b67a:	f7f6 fba1 	bl	8001dc0 <HAL_Delay>

  //reset ist8310
  ist_reg_write_by_mpu(IST8310_R_CONFB, 0x01);
 800b67e:	2101      	movs	r1, #1
 800b680:	200b      	movs	r0, #11
 800b682:	f7ff ff39 	bl	800b4f8 <ist_reg_write_by_mpu>
  MPU_DELAY(10);
 800b686:	200a      	movs	r0, #10
 800b688:	f7f6 fb9a 	bl	8001dc0 <HAL_Delay>

  if (IST8310_DEVICE_ID_A != ist_reg_read_by_mpu(IST8310_WHO_AM_I))
 800b68c:	2000      	movs	r0, #0
 800b68e:	f7ff ff5d 	bl	800b54c <ist_reg_read_by_mpu>
 800b692:	4603      	mov	r3, r0
 800b694:	2b10      	cmp	r3, #16
 800b696:	d001      	beq.n	800b69c <ist8310_init+0x5a>
    return 1;
 800b698:	2301      	movs	r3, #1
 800b69a:	e059      	b.n	800b750 <ist8310_init+0x10e>

  ist_reg_write_by_mpu(IST8310_R_CONFB, 0x01);
 800b69c:	2101      	movs	r1, #1
 800b69e:	200b      	movs	r0, #11
 800b6a0:	f7ff ff2a 	bl	800b4f8 <ist_reg_write_by_mpu>
  MPU_DELAY(10);
 800b6a4:	200a      	movs	r0, #10
 800b6a6:	f7f6 fb8b 	bl	8001dc0 <HAL_Delay>

  //config as ready mode to access reg
  ist_reg_write_by_mpu(IST8310_R_CONFA, 0x00);
 800b6aa:	2100      	movs	r1, #0
 800b6ac:	200a      	movs	r0, #10
 800b6ae:	f7ff ff23 	bl	800b4f8 <ist_reg_write_by_mpu>
  if (ist_reg_read_by_mpu(IST8310_R_CONFA) != 0x00)
 800b6b2:	200a      	movs	r0, #10
 800b6b4:	f7ff ff4a 	bl	800b54c <ist_reg_read_by_mpu>
 800b6b8:	4603      	mov	r3, r0
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d001      	beq.n	800b6c2 <ist8310_init+0x80>
    return 2;
 800b6be:	2302      	movs	r3, #2
 800b6c0:	e046      	b.n	800b750 <ist8310_init+0x10e>
  MPU_DELAY(10);
 800b6c2:	200a      	movs	r0, #10
 800b6c4:	f7f6 fb7c 	bl	8001dc0 <HAL_Delay>

  //normal state, no int
  ist_reg_write_by_mpu(IST8310_R_CONFB, 0x00);
 800b6c8:	2100      	movs	r1, #0
 800b6ca:	200b      	movs	r0, #11
 800b6cc:	f7ff ff14 	bl	800b4f8 <ist_reg_write_by_mpu>
  if (ist_reg_read_by_mpu(IST8310_R_CONFB) != 0x00)
 800b6d0:	200b      	movs	r0, #11
 800b6d2:	f7ff ff3b 	bl	800b54c <ist_reg_read_by_mpu>
 800b6d6:	4603      	mov	r3, r0
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d001      	beq.n	800b6e0 <ist8310_init+0x9e>
    return 3;
 800b6dc:	2303      	movs	r3, #3
 800b6de:	e037      	b.n	800b750 <ist8310_init+0x10e>
  MPU_DELAY(10);
 800b6e0:	200a      	movs	r0, #10
 800b6e2:	f7f6 fb6d 	bl	8001dc0 <HAL_Delay>

  //config  low noise mode, x,y,z axis 16 time 1 avg,
  ist_reg_write_by_mpu(IST8310_AVGCNTL, 0x24); //100100
 800b6e6:	2124      	movs	r1, #36	; 0x24
 800b6e8:	2041      	movs	r0, #65	; 0x41
 800b6ea:	f7ff ff05 	bl	800b4f8 <ist_reg_write_by_mpu>
  if (ist_reg_read_by_mpu(IST8310_AVGCNTL) != 0x24)
 800b6ee:	2041      	movs	r0, #65	; 0x41
 800b6f0:	f7ff ff2c 	bl	800b54c <ist_reg_read_by_mpu>
 800b6f4:	4603      	mov	r3, r0
 800b6f6:	2b24      	cmp	r3, #36	; 0x24
 800b6f8:	d001      	beq.n	800b6fe <ist8310_init+0xbc>
    return 4;
 800b6fa:	2304      	movs	r3, #4
 800b6fc:	e028      	b.n	800b750 <ist8310_init+0x10e>
  MPU_DELAY(10);
 800b6fe:	200a      	movs	r0, #10
 800b700:	f7f6 fb5e 	bl	8001dc0 <HAL_Delay>

  //Set/Reset pulse duration setup, normal mode
  ist_reg_write_by_mpu(IST8310_PDCNTL, 0xc0);
 800b704:	21c0      	movs	r1, #192	; 0xc0
 800b706:	2042      	movs	r0, #66	; 0x42
 800b708:	f7ff fef6 	bl	800b4f8 <ist_reg_write_by_mpu>
  if (ist_reg_read_by_mpu(IST8310_PDCNTL) != 0xc0)
 800b70c:	2042      	movs	r0, #66	; 0x42
 800b70e:	f7ff ff1d 	bl	800b54c <ist_reg_read_by_mpu>
 800b712:	4603      	mov	r3, r0
 800b714:	2bc0      	cmp	r3, #192	; 0xc0
 800b716:	d001      	beq.n	800b71c <ist8310_init+0xda>
    return 5;
 800b718:	2305      	movs	r3, #5
 800b71a:	e019      	b.n	800b750 <ist8310_init+0x10e>
  MPU_DELAY(10);
 800b71c:	200a      	movs	r0, #10
 800b71e:	f7f6 fb4f 	bl	8001dc0 <HAL_Delay>

  //turn off slave1 & slave 4
  mpu_write_reg(MPU6500_I2C_SLV1_CTRL, 0x00);
 800b722:	2100      	movs	r1, #0
 800b724:	202a      	movs	r0, #42	; 0x2a
 800b726:	f7ff fe3f 	bl	800b3a8 <mpu_write_reg>
  MPU_DELAY(10);
 800b72a:	200a      	movs	r0, #10
 800b72c:	f7f6 fb48 	bl	8001dc0 <HAL_Delay>
  mpu_write_reg(MPU6500_I2C_SLV4_CTRL, 0x00);
 800b730:	2100      	movs	r1, #0
 800b732:	2034      	movs	r0, #52	; 0x34
 800b734:	f7ff fe38 	bl	800b3a8 <mpu_write_reg>
  MPU_DELAY(10);
 800b738:	200a      	movs	r0, #10
 800b73a:	f7f6 fb41 	bl	8001dc0 <HAL_Delay>

  //configure and turn on slave 0
  mpu_mst_i2c_auto_read_config(IST8310_ADDRESS, IST8310_R_XL, 0x06);
 800b73e:	2206      	movs	r2, #6
 800b740:	2103      	movs	r1, #3
 800b742:	200e      	movs	r0, #14
 800b744:	f7ff ff27 	bl	800b596 <mpu_mst_i2c_auto_read_config>
  MPU_DELAY(100);
 800b748:	2064      	movs	r0, #100	; 0x64
 800b74a:	f7f6 fb39 	bl	8001dc0 <HAL_Delay>
  return 0;
 800b74e:	2300      	movs	r3, #0
}
 800b750:	4618      	mov	r0, r3
 800b752:	bd80      	pop	{r7, pc}

0800b754 <ist8310_get_data>:

void ist8310_get_data(uint8_t *buff)
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b082      	sub	sp, #8
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
  mpu_read_regs(MPU6500_EXT_SENS_DATA_00, buff, 6);
 800b75c:	2206      	movs	r2, #6
 800b75e:	6879      	ldr	r1, [r7, #4]
 800b760:	2049      	movs	r0, #73	; 0x49
 800b762:	f7ff fe8d 	bl	800b480 <mpu_read_regs>
}
 800b766:	bf00      	nop
 800b768:	3708      	adds	r7, #8
 800b76a:	46bd      	mov	sp, r7
 800b76c:	bd80      	pop	{r7, pc}
	...

0800b770 <mpu_get_data>:

//this function takes 24.6us.(42M spi)
void mpu_get_data(struct ahrs_sensor *sensor)
{
 800b770:	b580      	push	{r7, lr}
 800b772:	b082      	sub	sp, #8
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
  MPU_IO_PROBE();

  mpu_read_regs(MPU6500_ACCEL_XOUT_H, mpu_buff, 14);
 800b778:	220e      	movs	r2, #14
 800b77a:	498a      	ldr	r1, [pc, #552]	; (800b9a4 <mpu_get_data+0x234>)
 800b77c:	203b      	movs	r0, #59	; 0x3b
 800b77e:	f7ff fe7f 	bl	800b480 <mpu_read_regs>

  mpu_data.ax = (mpu_buff[0] << 8 | mpu_buff[1]) - mpu_data.ax_offset;
 800b782:	4b88      	ldr	r3, [pc, #544]	; (800b9a4 <mpu_get_data+0x234>)
 800b784:	781b      	ldrb	r3, [r3, #0]
 800b786:	021b      	lsls	r3, r3, #8
 800b788:	b21a      	sxth	r2, r3
 800b78a:	4b86      	ldr	r3, [pc, #536]	; (800b9a4 <mpu_get_data+0x234>)
 800b78c:	785b      	ldrb	r3, [r3, #1]
 800b78e:	b21b      	sxth	r3, r3
 800b790:	4313      	orrs	r3, r2
 800b792:	b21b      	sxth	r3, r3
 800b794:	b29a      	uxth	r2, r3
 800b796:	4b84      	ldr	r3, [pc, #528]	; (800b9a8 <mpu_get_data+0x238>)
 800b798:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800b79c:	b29b      	uxth	r3, r3
 800b79e:	1ad3      	subs	r3, r2, r3
 800b7a0:	b29b      	uxth	r3, r3
 800b7a2:	b21a      	sxth	r2, r3
 800b7a4:	4b80      	ldr	r3, [pc, #512]	; (800b9a8 <mpu_get_data+0x238>)
 800b7a6:	801a      	strh	r2, [r3, #0]
  mpu_data.ay = (mpu_buff[2] << 8 | mpu_buff[3]) - mpu_data.ay_offset;
 800b7a8:	4b7e      	ldr	r3, [pc, #504]	; (800b9a4 <mpu_get_data+0x234>)
 800b7aa:	789b      	ldrb	r3, [r3, #2]
 800b7ac:	021b      	lsls	r3, r3, #8
 800b7ae:	b21a      	sxth	r2, r3
 800b7b0:	4b7c      	ldr	r3, [pc, #496]	; (800b9a4 <mpu_get_data+0x234>)
 800b7b2:	78db      	ldrb	r3, [r3, #3]
 800b7b4:	b21b      	sxth	r3, r3
 800b7b6:	4313      	orrs	r3, r2
 800b7b8:	b21b      	sxth	r3, r3
 800b7ba:	b29a      	uxth	r2, r3
 800b7bc:	4b7a      	ldr	r3, [pc, #488]	; (800b9a8 <mpu_get_data+0x238>)
 800b7be:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800b7c2:	b29b      	uxth	r3, r3
 800b7c4:	1ad3      	subs	r3, r2, r3
 800b7c6:	b29b      	uxth	r3, r3
 800b7c8:	b21a      	sxth	r2, r3
 800b7ca:	4b77      	ldr	r3, [pc, #476]	; (800b9a8 <mpu_get_data+0x238>)
 800b7cc:	805a      	strh	r2, [r3, #2]
  mpu_data.az = (mpu_buff[4] << 8 | mpu_buff[5]) - mpu_data.az_offset;
 800b7ce:	4b75      	ldr	r3, [pc, #468]	; (800b9a4 <mpu_get_data+0x234>)
 800b7d0:	791b      	ldrb	r3, [r3, #4]
 800b7d2:	021b      	lsls	r3, r3, #8
 800b7d4:	b21a      	sxth	r2, r3
 800b7d6:	4b73      	ldr	r3, [pc, #460]	; (800b9a4 <mpu_get_data+0x234>)
 800b7d8:	795b      	ldrb	r3, [r3, #5]
 800b7da:	b21b      	sxth	r3, r3
 800b7dc:	4313      	orrs	r3, r2
 800b7de:	b21b      	sxth	r3, r3
 800b7e0:	b29a      	uxth	r2, r3
 800b7e2:	4b71      	ldr	r3, [pc, #452]	; (800b9a8 <mpu_get_data+0x238>)
 800b7e4:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800b7e8:	b29b      	uxth	r3, r3
 800b7ea:	1ad3      	subs	r3, r2, r3
 800b7ec:	b29b      	uxth	r3, r3
 800b7ee:	b21a      	sxth	r2, r3
 800b7f0:	4b6d      	ldr	r3, [pc, #436]	; (800b9a8 <mpu_get_data+0x238>)
 800b7f2:	809a      	strh	r2, [r3, #4]
  mpu_data.temp = mpu_buff[6] << 8 | mpu_buff[7];
 800b7f4:	4b6b      	ldr	r3, [pc, #428]	; (800b9a4 <mpu_get_data+0x234>)
 800b7f6:	799b      	ldrb	r3, [r3, #6]
 800b7f8:	021b      	lsls	r3, r3, #8
 800b7fa:	b21a      	sxth	r2, r3
 800b7fc:	4b69      	ldr	r3, [pc, #420]	; (800b9a4 <mpu_get_data+0x234>)
 800b7fe:	79db      	ldrb	r3, [r3, #7]
 800b800:	b21b      	sxth	r3, r3
 800b802:	4313      	orrs	r3, r2
 800b804:	b21a      	sxth	r2, r3
 800b806:	4b68      	ldr	r3, [pc, #416]	; (800b9a8 <mpu_get_data+0x238>)
 800b808:	825a      	strh	r2, [r3, #18]

  mpu_data.gx = ((mpu_buff[8] << 8 | mpu_buff[9]) - mpu_data.gx_offset);
 800b80a:	4b66      	ldr	r3, [pc, #408]	; (800b9a4 <mpu_get_data+0x234>)
 800b80c:	7a1b      	ldrb	r3, [r3, #8]
 800b80e:	021b      	lsls	r3, r3, #8
 800b810:	b21a      	sxth	r2, r3
 800b812:	4b64      	ldr	r3, [pc, #400]	; (800b9a4 <mpu_get_data+0x234>)
 800b814:	7a5b      	ldrb	r3, [r3, #9]
 800b816:	b21b      	sxth	r3, r3
 800b818:	4313      	orrs	r3, r2
 800b81a:	b21b      	sxth	r3, r3
 800b81c:	b29a      	uxth	r2, r3
 800b81e:	4b62      	ldr	r3, [pc, #392]	; (800b9a8 <mpu_get_data+0x238>)
 800b820:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800b824:	b29b      	uxth	r3, r3
 800b826:	1ad3      	subs	r3, r2, r3
 800b828:	b29b      	uxth	r3, r3
 800b82a:	b21a      	sxth	r2, r3
 800b82c:	4b5e      	ldr	r3, [pc, #376]	; (800b9a8 <mpu_get_data+0x238>)
 800b82e:	80da      	strh	r2, [r3, #6]
  mpu_data.gy = ((mpu_buff[10] << 8 | mpu_buff[11]) - mpu_data.gy_offset);
 800b830:	4b5c      	ldr	r3, [pc, #368]	; (800b9a4 <mpu_get_data+0x234>)
 800b832:	7a9b      	ldrb	r3, [r3, #10]
 800b834:	021b      	lsls	r3, r3, #8
 800b836:	b21a      	sxth	r2, r3
 800b838:	4b5a      	ldr	r3, [pc, #360]	; (800b9a4 <mpu_get_data+0x234>)
 800b83a:	7adb      	ldrb	r3, [r3, #11]
 800b83c:	b21b      	sxth	r3, r3
 800b83e:	4313      	orrs	r3, r2
 800b840:	b21b      	sxth	r3, r3
 800b842:	b29a      	uxth	r2, r3
 800b844:	4b58      	ldr	r3, [pc, #352]	; (800b9a8 <mpu_get_data+0x238>)
 800b846:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800b84a:	b29b      	uxth	r3, r3
 800b84c:	1ad3      	subs	r3, r2, r3
 800b84e:	b29b      	uxth	r3, r3
 800b850:	b21a      	sxth	r2, r3
 800b852:	4b55      	ldr	r3, [pc, #340]	; (800b9a8 <mpu_get_data+0x238>)
 800b854:	811a      	strh	r2, [r3, #8]
  mpu_data.gz = ((mpu_buff[12] << 8 | mpu_buff[13]) - mpu_data.gz_offset);
 800b856:	4b53      	ldr	r3, [pc, #332]	; (800b9a4 <mpu_get_data+0x234>)
 800b858:	7b1b      	ldrb	r3, [r3, #12]
 800b85a:	021b      	lsls	r3, r3, #8
 800b85c:	b21a      	sxth	r2, r3
 800b85e:	4b51      	ldr	r3, [pc, #324]	; (800b9a4 <mpu_get_data+0x234>)
 800b860:	7b5b      	ldrb	r3, [r3, #13]
 800b862:	b21b      	sxth	r3, r3
 800b864:	4313      	orrs	r3, r2
 800b866:	b21b      	sxth	r3, r3
 800b868:	b29a      	uxth	r2, r3
 800b86a:	4b4f      	ldr	r3, [pc, #316]	; (800b9a8 <mpu_get_data+0x238>)
 800b86c:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800b870:	b29b      	uxth	r3, r3
 800b872:	1ad3      	subs	r3, r2, r3
 800b874:	b29b      	uxth	r3, r3
 800b876:	b21a      	sxth	r2, r3
 800b878:	4b4b      	ldr	r3, [pc, #300]	; (800b9a8 <mpu_get_data+0x238>)
 800b87a:	815a      	strh	r2, [r3, #10]

  ist8310_get_data((uint8_t *)&mpu_data.mx);
 800b87c:	484b      	ldr	r0, [pc, #300]	; (800b9ac <mpu_get_data+0x23c>)
 800b87e:	f7ff ff69 	bl	800b754 <ist8310_get_data>

  sensor->ax = mpu_data.ax / (4096.0f / 9.80665f); //8g -> m/s^2
 800b882:	4b49      	ldr	r3, [pc, #292]	; (800b9a8 <mpu_get_data+0x238>)
 800b884:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b888:	ee07 3a90 	vmov	s15, r3
 800b88c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b890:	eddf 6a47 	vldr	s13, [pc, #284]	; 800b9b0 <mpu_get_data+0x240>
 800b894:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	edc3 7a00 	vstr	s15, [r3]
  sensor->ay = mpu_data.ay / (4096.0f / 9.80665f); //8g -> m/s^2
 800b89e:	4b42      	ldr	r3, [pc, #264]	; (800b9a8 <mpu_get_data+0x238>)
 800b8a0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b8a4:	ee07 3a90 	vmov	s15, r3
 800b8a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b8ac:	eddf 6a40 	vldr	s13, [pc, #256]	; 800b9b0 <mpu_get_data+0x240>
 800b8b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	edc3 7a01 	vstr	s15, [r3, #4]
  sensor->az = mpu_data.az / (4096.0f / 9.80665f); //8g -> m/s^2
 800b8ba:	4b3b      	ldr	r3, [pc, #236]	; (800b9a8 <mpu_get_data+0x238>)
 800b8bc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b8c0:	ee07 3a90 	vmov	s15, r3
 800b8c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b8c8:	eddf 6a39 	vldr	s13, [pc, #228]	; 800b9b0 <mpu_get_data+0x240>
 800b8cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	edc3 7a02 	vstr	s15, [r3, #8]

  sensor->wx = mpu_data.gx / 16.384f / 57.3f; //2000dps -> rad/s
 800b8d6:	4b34      	ldr	r3, [pc, #208]	; (800b9a8 <mpu_get_data+0x238>)
 800b8d8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b8dc:	ee07 3a90 	vmov	s15, r3
 800b8e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b8e4:	eddf 6a33 	vldr	s13, [pc, #204]	; 800b9b4 <mpu_get_data+0x244>
 800b8e8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800b8ec:	eddf 6a32 	vldr	s13, [pc, #200]	; 800b9b8 <mpu_get_data+0x248>
 800b8f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	edc3 7a03 	vstr	s15, [r3, #12]
  sensor->wy = mpu_data.gy / 16.384f / 57.3f; //2000dps -> rad/s
 800b8fa:	4b2b      	ldr	r3, [pc, #172]	; (800b9a8 <mpu_get_data+0x238>)
 800b8fc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b900:	ee07 3a90 	vmov	s15, r3
 800b904:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b908:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800b9b4 <mpu_get_data+0x244>
 800b90c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800b910:	eddf 6a29 	vldr	s13, [pc, #164]	; 800b9b8 <mpu_get_data+0x248>
 800b914:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	edc3 7a04 	vstr	s15, [r3, #16]
  sensor->wz = mpu_data.gz / 16.384f / 57.3f; //2000dps -> rad/s
 800b91e:	4b22      	ldr	r3, [pc, #136]	; (800b9a8 <mpu_get_data+0x238>)
 800b920:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b924:	ee07 3a90 	vmov	s15, r3
 800b928:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b92c:	eddf 6a21 	vldr	s13, [pc, #132]	; 800b9b4 <mpu_get_data+0x244>
 800b930:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800b934:	eddf 6a20 	vldr	s13, [pc, #128]	; 800b9b8 <mpu_get_data+0x248>
 800b938:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	edc3 7a05 	vstr	s15, [r3, #20]

  sensor->mx = (mpu_data.my - mpu_data.my_offset);
 800b942:	4b19      	ldr	r3, [pc, #100]	; (800b9a8 <mpu_get_data+0x238>)
 800b944:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800b948:	461a      	mov	r2, r3
 800b94a:	4b17      	ldr	r3, [pc, #92]	; (800b9a8 <mpu_get_data+0x238>)
 800b94c:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800b950:	1ad3      	subs	r3, r2, r3
 800b952:	ee07 3a90 	vmov	s15, r3
 800b956:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	edc3 7a06 	vstr	s15, [r3, #24]
  sensor->my = -(mpu_data.mx - mpu_data.mx_offset);
 800b960:	4b11      	ldr	r3, [pc, #68]	; (800b9a8 <mpu_get_data+0x238>)
 800b962:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800b966:	461a      	mov	r2, r3
 800b968:	4b0f      	ldr	r3, [pc, #60]	; (800b9a8 <mpu_get_data+0x238>)
 800b96a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800b96e:	1ad3      	subs	r3, r2, r3
 800b970:	ee07 3a90 	vmov	s15, r3
 800b974:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	edc3 7a07 	vstr	s15, [r3, #28]
  sensor->mz = -(mpu_data.mz - mpu_data.mz_offset);
 800b97e:	4b0a      	ldr	r3, [pc, #40]	; (800b9a8 <mpu_get_data+0x238>)
 800b980:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800b984:	461a      	mov	r2, r3
 800b986:	4b08      	ldr	r3, [pc, #32]	; (800b9a8 <mpu_get_data+0x238>)
 800b988:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800b98c:	1ad3      	subs	r3, r2, r3
 800b98e:	ee07 3a90 	vmov	s15, r3
 800b992:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	edc3 7a08 	vstr	s15, [r3, #32]

  MPU_IO_PROBE();
}
 800b99c:	bf00      	nop
 800b99e:	3708      	adds	r7, #8
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	bd80      	pop	{r7, pc}
 800b9a4:	20005cdc 	.word	0x20005cdc
 800b9a8:	20005cec 	.word	0x20005cec
 800b9ac:	20005cf8 	.word	0x20005cf8
 800b9b0:	43d0d67f 	.word	0x43d0d67f
 800b9b4:	4183126f 	.word	0x4183126f
 800b9b8:	42653333 	.word	0x42653333

0800b9bc <mpu_device_init>:
{
  *tmp = 21 + mpu_data.temp / 333.87f;;
}

uint8_t mpu_device_init(void)
{
 800b9bc:	b590      	push	{r4, r7, lr}
 800b9be:	b087      	sub	sp, #28
 800b9c0:	af00      	add	r7, sp, #0
  // Reset the internal registers
  IST_ENABLE();
 800b9c2:	2201      	movs	r2, #1
 800b9c4:	2104      	movs	r1, #4
 800b9c6:	4829      	ldr	r0, [pc, #164]	; (800ba6c <mpu_device_init+0xb0>)
 800b9c8:	f7f6 ffe0 	bl	800298c <HAL_GPIO_WritePin>

  mpu_write_reg(MPU6500_PWR_MGMT_1, 0x80);
 800b9cc:	2180      	movs	r1, #128	; 0x80
 800b9ce:	206b      	movs	r0, #107	; 0x6b
 800b9d0:	f7ff fcea 	bl	800b3a8 <mpu_write_reg>
  MPU_DELAY(100);
 800b9d4:	2064      	movs	r0, #100	; 0x64
 800b9d6:	f7f6 f9f3 	bl	8001dc0 <HAL_Delay>
  // Reset gyro/accel/temp digital signal path
  mpu_write_reg(MPU6500_SIGNAL_PATH_RESET, 0x07);
 800b9da:	2107      	movs	r1, #7
 800b9dc:	2068      	movs	r0, #104	; 0x68
 800b9de:	f7ff fce3 	bl	800b3a8 <mpu_write_reg>
  MPU_DELAY(100);
 800b9e2:	2064      	movs	r0, #100	; 0x64
 800b9e4:	f7f6 f9ec 	bl	8001dc0 <HAL_Delay>

  if (MPU6500_ID != mpu_read_reg(MPU6500_WHO_AM_I))
 800b9e8:	2075      	movs	r0, #117	; 0x75
 800b9ea:	f7ff fd15 	bl	800b418 <mpu_read_reg>
 800b9ee:	4603      	mov	r3, r0
 800b9f0:	2b70      	cmp	r3, #112	; 0x70
 800b9f2:	d001      	beq.n	800b9f8 <mpu_device_init+0x3c>
    return 1;
 800b9f4:	2301      	movs	r3, #1
 800b9f6:	e035      	b.n	800ba64 <mpu_device_init+0xa8>
  //0: 250hz; 1: 184hz; 2: 92hz; 3: 41hz; 4: 20hz; 5: 10hz; 6: 5hz; 7: 3600hz
  uint8_t MPU6500_Init_Data[7][2] = {
 800b9f8:	4b1d      	ldr	r3, [pc, #116]	; (800ba70 <mpu_device_init+0xb4>)
 800b9fa:	1d3c      	adds	r4, r7, #4
 800b9fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b9fe:	c407      	stmia	r4!, {r0, r1, r2}
 800ba00:	8023      	strh	r3, [r4, #0]
      {MPU6500_USER_CTRL, 0x20},      // Enable the I2C Master I/F module
                                      // pins ES_DA and ES_SCL are isolated from
                                      // pins SDA/SDI and SCL/SCLK.
  };

  for (int i = 0; i < 7; i++)
 800ba02:	2300      	movs	r3, #0
 800ba04:	617b      	str	r3, [r7, #20]
 800ba06:	e015      	b.n	800ba34 <mpu_device_init+0x78>
  {
    mpu_write_reg(MPU6500_Init_Data[i][0], MPU6500_Init_Data[i][1]);
 800ba08:	697b      	ldr	r3, [r7, #20]
 800ba0a:	005b      	lsls	r3, r3, #1
 800ba0c:	3318      	adds	r3, #24
 800ba0e:	443b      	add	r3, r7
 800ba10:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 800ba14:	697b      	ldr	r3, [r7, #20]
 800ba16:	005b      	lsls	r3, r3, #1
 800ba18:	3318      	adds	r3, #24
 800ba1a:	443b      	add	r3, r7
 800ba1c:	f813 3c13 	ldrb.w	r3, [r3, #-19]
 800ba20:	4619      	mov	r1, r3
 800ba22:	4610      	mov	r0, r2
 800ba24:	f7ff fcc0 	bl	800b3a8 <mpu_write_reg>
    MPU_DELAY(1);
 800ba28:	2001      	movs	r0, #1
 800ba2a:	f7f6 f9c9 	bl	8001dc0 <HAL_Delay>
  for (int i = 0; i < 7; i++)
 800ba2e:	697b      	ldr	r3, [r7, #20]
 800ba30:	3301      	adds	r3, #1
 800ba32:	617b      	str	r3, [r7, #20]
 800ba34:	697b      	ldr	r3, [r7, #20]
 800ba36:	2b06      	cmp	r3, #6
 800ba38:	dde6      	ble.n	800ba08 <mpu_device_init+0x4c>
  }

  ist8310_init();
 800ba3a:	f7ff fe02 	bl	800b642 <ist8310_init>

  if (imu_cali.gyro_flag == 1)
 800ba3e:	4b0d      	ldr	r3, [pc, #52]	; (800ba74 <mpu_device_init+0xb8>)
 800ba40:	781b      	ldrb	r3, [r3, #0]
 800ba42:	2b01      	cmp	r3, #1
 800ba44:	d101      	bne.n	800ba4a <mpu_device_init+0x8e>
  {
    get_mpu_gyro_offset();
 800ba46:	f000 f817 	bl	800ba78 <get_mpu_gyro_offset>
  }

  if (imu_cali.acc_flag == 1)
 800ba4a:	4b0a      	ldr	r3, [pc, #40]	; (800ba74 <mpu_device_init+0xb8>)
 800ba4c:	785b      	ldrb	r3, [r3, #1]
 800ba4e:	2b01      	cmp	r3, #1
 800ba50:	d101      	bne.n	800ba56 <mpu_device_init+0x9a>
  {
    get_mpu_acc_offset();
 800ba52:	f000 f893 	bl	800bb7c <get_mpu_acc_offset>
  }

  if (imu_cali.mag_flag == 1)
 800ba56:	4b07      	ldr	r3, [pc, #28]	; (800ba74 <mpu_device_init+0xb8>)
 800ba58:	789b      	ldrb	r3, [r3, #2]
 800ba5a:	2b01      	cmp	r3, #1
 800ba5c:	d101      	bne.n	800ba62 <mpu_device_init+0xa6>
  {
    get_ist_mag_offset();
 800ba5e:	f000 f913 	bl	800bc88 <get_ist_mag_offset>
  }

  return 0;
 800ba62:	2300      	movs	r3, #0
}
 800ba64:	4618      	mov	r0, r3
 800ba66:	371c      	adds	r7, #28
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	bd90      	pop	{r4, r7, pc}
 800ba6c:	40021000 	.word	0x40021000
 800ba70:	0800d3d0 	.word	0x0800d3d0
 800ba74:	20000100 	.word	0x20000100

0800ba78 <get_mpu_gyro_offset>:

static void get_mpu_gyro_offset(void)
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b082      	sub	sp, #8
 800ba7c:	af00      	add	r7, sp, #0
  int i;
  for (i = 0; i < 300; i++)
 800ba7e:	2300      	movs	r3, #0
 800ba80:	607b      	str	r3, [r7, #4]
 800ba82:	e043      	b.n	800bb0c <get_mpu_gyro_offset+0x94>
  {
    mpu_read_regs(MPU6500_ACCEL_XOUT_H, mpu_buff, 14);
 800ba84:	220e      	movs	r2, #14
 800ba86:	4939      	ldr	r1, [pc, #228]	; (800bb6c <get_mpu_gyro_offset+0xf4>)
 800ba88:	203b      	movs	r0, #59	; 0x3b
 800ba8a:	f7ff fcf9 	bl	800b480 <mpu_read_regs>

    mpu_data.gx_offset += mpu_buff[8] << 8 | mpu_buff[9];
 800ba8e:	4b38      	ldr	r3, [pc, #224]	; (800bb70 <get_mpu_gyro_offset+0xf8>)
 800ba90:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800ba94:	b29a      	uxth	r2, r3
 800ba96:	4b35      	ldr	r3, [pc, #212]	; (800bb6c <get_mpu_gyro_offset+0xf4>)
 800ba98:	7a1b      	ldrb	r3, [r3, #8]
 800ba9a:	021b      	lsls	r3, r3, #8
 800ba9c:	b219      	sxth	r1, r3
 800ba9e:	4b33      	ldr	r3, [pc, #204]	; (800bb6c <get_mpu_gyro_offset+0xf4>)
 800baa0:	7a5b      	ldrb	r3, [r3, #9]
 800baa2:	b21b      	sxth	r3, r3
 800baa4:	430b      	orrs	r3, r1
 800baa6:	b21b      	sxth	r3, r3
 800baa8:	b29b      	uxth	r3, r3
 800baaa:	4413      	add	r3, r2
 800baac:	b29b      	uxth	r3, r3
 800baae:	b21a      	sxth	r2, r3
 800bab0:	4b2f      	ldr	r3, [pc, #188]	; (800bb70 <get_mpu_gyro_offset+0xf8>)
 800bab2:	835a      	strh	r2, [r3, #26]
    mpu_data.gy_offset += mpu_buff[10] << 8 | mpu_buff[11];
 800bab4:	4b2e      	ldr	r3, [pc, #184]	; (800bb70 <get_mpu_gyro_offset+0xf8>)
 800bab6:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800baba:	b29a      	uxth	r2, r3
 800babc:	4b2b      	ldr	r3, [pc, #172]	; (800bb6c <get_mpu_gyro_offset+0xf4>)
 800babe:	7a9b      	ldrb	r3, [r3, #10]
 800bac0:	021b      	lsls	r3, r3, #8
 800bac2:	b219      	sxth	r1, r3
 800bac4:	4b29      	ldr	r3, [pc, #164]	; (800bb6c <get_mpu_gyro_offset+0xf4>)
 800bac6:	7adb      	ldrb	r3, [r3, #11]
 800bac8:	b21b      	sxth	r3, r3
 800baca:	430b      	orrs	r3, r1
 800bacc:	b21b      	sxth	r3, r3
 800bace:	b29b      	uxth	r3, r3
 800bad0:	4413      	add	r3, r2
 800bad2:	b29b      	uxth	r3, r3
 800bad4:	b21a      	sxth	r2, r3
 800bad6:	4b26      	ldr	r3, [pc, #152]	; (800bb70 <get_mpu_gyro_offset+0xf8>)
 800bad8:	839a      	strh	r2, [r3, #28]
    mpu_data.gz_offset += mpu_buff[12] << 8 | mpu_buff[13];
 800bada:	4b25      	ldr	r3, [pc, #148]	; (800bb70 <get_mpu_gyro_offset+0xf8>)
 800badc:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800bae0:	b29a      	uxth	r2, r3
 800bae2:	4b22      	ldr	r3, [pc, #136]	; (800bb6c <get_mpu_gyro_offset+0xf4>)
 800bae4:	7b1b      	ldrb	r3, [r3, #12]
 800bae6:	021b      	lsls	r3, r3, #8
 800bae8:	b219      	sxth	r1, r3
 800baea:	4b20      	ldr	r3, [pc, #128]	; (800bb6c <get_mpu_gyro_offset+0xf4>)
 800baec:	7b5b      	ldrb	r3, [r3, #13]
 800baee:	b21b      	sxth	r3, r3
 800baf0:	430b      	orrs	r3, r1
 800baf2:	b21b      	sxth	r3, r3
 800baf4:	b29b      	uxth	r3, r3
 800baf6:	4413      	add	r3, r2
 800baf8:	b29b      	uxth	r3, r3
 800bafa:	b21a      	sxth	r2, r3
 800bafc:	4b1c      	ldr	r3, [pc, #112]	; (800bb70 <get_mpu_gyro_offset+0xf8>)
 800bafe:	83da      	strh	r2, [r3, #30]

    MPU_DELAY(2);
 800bb00:	2002      	movs	r0, #2
 800bb02:	f7f6 f95d 	bl	8001dc0 <HAL_Delay>
  for (i = 0; i < 300; i++)
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	3301      	adds	r3, #1
 800bb0a:	607b      	str	r3, [r7, #4]
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800bb12:	dbb7      	blt.n	800ba84 <get_mpu_gyro_offset+0xc>
  }

  mpu_data.gx_offset = mpu_data.gx_offset / 300;
 800bb14:	4b16      	ldr	r3, [pc, #88]	; (800bb70 <get_mpu_gyro_offset+0xf8>)
 800bb16:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800bb1a:	4a16      	ldr	r2, [pc, #88]	; (800bb74 <get_mpu_gyro_offset+0xfc>)
 800bb1c:	fb82 1203 	smull	r1, r2, r2, r3
 800bb20:	1152      	asrs	r2, r2, #5
 800bb22:	17db      	asrs	r3, r3, #31
 800bb24:	1ad3      	subs	r3, r2, r3
 800bb26:	b21a      	sxth	r2, r3
 800bb28:	4b11      	ldr	r3, [pc, #68]	; (800bb70 <get_mpu_gyro_offset+0xf8>)
 800bb2a:	835a      	strh	r2, [r3, #26]
  mpu_data.gy_offset = mpu_data.gy_offset / 300;
 800bb2c:	4b10      	ldr	r3, [pc, #64]	; (800bb70 <get_mpu_gyro_offset+0xf8>)
 800bb2e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800bb32:	4a10      	ldr	r2, [pc, #64]	; (800bb74 <get_mpu_gyro_offset+0xfc>)
 800bb34:	fb82 1203 	smull	r1, r2, r2, r3
 800bb38:	1152      	asrs	r2, r2, #5
 800bb3a:	17db      	asrs	r3, r3, #31
 800bb3c:	1ad3      	subs	r3, r2, r3
 800bb3e:	b21a      	sxth	r2, r3
 800bb40:	4b0b      	ldr	r3, [pc, #44]	; (800bb70 <get_mpu_gyro_offset+0xf8>)
 800bb42:	839a      	strh	r2, [r3, #28]
  mpu_data.gz_offset = mpu_data.gz_offset / 300;
 800bb44:	4b0a      	ldr	r3, [pc, #40]	; (800bb70 <get_mpu_gyro_offset+0xf8>)
 800bb46:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800bb4a:	4a0a      	ldr	r2, [pc, #40]	; (800bb74 <get_mpu_gyro_offset+0xfc>)
 800bb4c:	fb82 1203 	smull	r1, r2, r2, r3
 800bb50:	1152      	asrs	r2, r2, #5
 800bb52:	17db      	asrs	r3, r3, #31
 800bb54:	1ad3      	subs	r3, r2, r3
 800bb56:	b21a      	sxth	r2, r3
 800bb58:	4b05      	ldr	r3, [pc, #20]	; (800bb70 <get_mpu_gyro_offset+0xf8>)
 800bb5a:	83da      	strh	r2, [r3, #30]
  imu_cali.gyro_flag = 0;
 800bb5c:	4b06      	ldr	r3, [pc, #24]	; (800bb78 <get_mpu_gyro_offset+0x100>)
 800bb5e:	2200      	movs	r2, #0
 800bb60:	701a      	strb	r2, [r3, #0]
}
 800bb62:	bf00      	nop
 800bb64:	3708      	adds	r7, #8
 800bb66:	46bd      	mov	sp, r7
 800bb68:	bd80      	pop	{r7, pc}
 800bb6a:	bf00      	nop
 800bb6c:	20005cdc 	.word	0x20005cdc
 800bb70:	20005cec 	.word	0x20005cec
 800bb74:	1b4e81b5 	.word	0x1b4e81b5
 800bb78:	20000100 	.word	0x20000100

0800bb7c <get_mpu_acc_offset>:

static void get_mpu_acc_offset(void)
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b082      	sub	sp, #8
 800bb80:	af00      	add	r7, sp, #0
  int i;
  for (i = 0; i < 300; i++)
 800bb82:	2300      	movs	r3, #0
 800bb84:	607b      	str	r3, [r7, #4]
 800bb86:	e047      	b.n	800bc18 <get_mpu_acc_offset+0x9c>
  {
    mpu_read_regs(MPU6500_ACCEL_XOUT_H, mpu_buff, 14);
 800bb88:	220e      	movs	r2, #14
 800bb8a:	493b      	ldr	r1, [pc, #236]	; (800bc78 <get_mpu_acc_offset+0xfc>)
 800bb8c:	203b      	movs	r0, #59	; 0x3b
 800bb8e:	f7ff fc77 	bl	800b480 <mpu_read_regs>

    mpu_data.ax_offset += mpu_buff[0] << 8 | mpu_buff[1];
 800bb92:	4b3a      	ldr	r3, [pc, #232]	; (800bc7c <get_mpu_acc_offset+0x100>)
 800bb94:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800bb98:	b29a      	uxth	r2, r3
 800bb9a:	4b37      	ldr	r3, [pc, #220]	; (800bc78 <get_mpu_acc_offset+0xfc>)
 800bb9c:	781b      	ldrb	r3, [r3, #0]
 800bb9e:	021b      	lsls	r3, r3, #8
 800bba0:	b219      	sxth	r1, r3
 800bba2:	4b35      	ldr	r3, [pc, #212]	; (800bc78 <get_mpu_acc_offset+0xfc>)
 800bba4:	785b      	ldrb	r3, [r3, #1]
 800bba6:	b21b      	sxth	r3, r3
 800bba8:	430b      	orrs	r3, r1
 800bbaa:	b21b      	sxth	r3, r3
 800bbac:	b29b      	uxth	r3, r3
 800bbae:	4413      	add	r3, r2
 800bbb0:	b29b      	uxth	r3, r3
 800bbb2:	b21a      	sxth	r2, r3
 800bbb4:	4b31      	ldr	r3, [pc, #196]	; (800bc7c <get_mpu_acc_offset+0x100>)
 800bbb6:	829a      	strh	r2, [r3, #20]
    mpu_data.ay_offset += mpu_buff[2] << 8 | mpu_buff[3];
 800bbb8:	4b30      	ldr	r3, [pc, #192]	; (800bc7c <get_mpu_acc_offset+0x100>)
 800bbba:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800bbbe:	b29a      	uxth	r2, r3
 800bbc0:	4b2d      	ldr	r3, [pc, #180]	; (800bc78 <get_mpu_acc_offset+0xfc>)
 800bbc2:	789b      	ldrb	r3, [r3, #2]
 800bbc4:	021b      	lsls	r3, r3, #8
 800bbc6:	b219      	sxth	r1, r3
 800bbc8:	4b2b      	ldr	r3, [pc, #172]	; (800bc78 <get_mpu_acc_offset+0xfc>)
 800bbca:	78db      	ldrb	r3, [r3, #3]
 800bbcc:	b21b      	sxth	r3, r3
 800bbce:	430b      	orrs	r3, r1
 800bbd0:	b21b      	sxth	r3, r3
 800bbd2:	b29b      	uxth	r3, r3
 800bbd4:	4413      	add	r3, r2
 800bbd6:	b29b      	uxth	r3, r3
 800bbd8:	b21a      	sxth	r2, r3
 800bbda:	4b28      	ldr	r3, [pc, #160]	; (800bc7c <get_mpu_acc_offset+0x100>)
 800bbdc:	82da      	strh	r2, [r3, #22]
    mpu_data.az_offset += mpu_buff[4] << 8 | mpu_buff[5] - 4096;
 800bbde:	4b27      	ldr	r3, [pc, #156]	; (800bc7c <get_mpu_acc_offset+0x100>)
 800bbe0:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800bbe4:	b29a      	uxth	r2, r3
 800bbe6:	4b24      	ldr	r3, [pc, #144]	; (800bc78 <get_mpu_acc_offset+0xfc>)
 800bbe8:	791b      	ldrb	r3, [r3, #4]
 800bbea:	021b      	lsls	r3, r3, #8
 800bbec:	b219      	sxth	r1, r3
 800bbee:	4b22      	ldr	r3, [pc, #136]	; (800bc78 <get_mpu_acc_offset+0xfc>)
 800bbf0:	795b      	ldrb	r3, [r3, #5]
 800bbf2:	b29b      	uxth	r3, r3
 800bbf4:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 800bbf8:	b29b      	uxth	r3, r3
 800bbfa:	b21b      	sxth	r3, r3
 800bbfc:	430b      	orrs	r3, r1
 800bbfe:	b21b      	sxth	r3, r3
 800bc00:	b29b      	uxth	r3, r3
 800bc02:	4413      	add	r3, r2
 800bc04:	b29b      	uxth	r3, r3
 800bc06:	b21a      	sxth	r2, r3
 800bc08:	4b1c      	ldr	r3, [pc, #112]	; (800bc7c <get_mpu_acc_offset+0x100>)
 800bc0a:	831a      	strh	r2, [r3, #24]

    MPU_DELAY(2);
 800bc0c:	2002      	movs	r0, #2
 800bc0e:	f7f6 f8d7 	bl	8001dc0 <HAL_Delay>
  for (i = 0; i < 300; i++)
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	3301      	adds	r3, #1
 800bc16:	607b      	str	r3, [r7, #4]
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800bc1e:	dbb3      	blt.n	800bb88 <get_mpu_acc_offset+0xc>
  }

  mpu_data.ax_offset = mpu_data.ax_offset / 300;
 800bc20:	4b16      	ldr	r3, [pc, #88]	; (800bc7c <get_mpu_acc_offset+0x100>)
 800bc22:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800bc26:	4a16      	ldr	r2, [pc, #88]	; (800bc80 <get_mpu_acc_offset+0x104>)
 800bc28:	fb82 1203 	smull	r1, r2, r2, r3
 800bc2c:	1152      	asrs	r2, r2, #5
 800bc2e:	17db      	asrs	r3, r3, #31
 800bc30:	1ad3      	subs	r3, r2, r3
 800bc32:	b21a      	sxth	r2, r3
 800bc34:	4b11      	ldr	r3, [pc, #68]	; (800bc7c <get_mpu_acc_offset+0x100>)
 800bc36:	829a      	strh	r2, [r3, #20]
  mpu_data.ay_offset = mpu_data.ay_offset / 300;
 800bc38:	4b10      	ldr	r3, [pc, #64]	; (800bc7c <get_mpu_acc_offset+0x100>)
 800bc3a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800bc3e:	4a10      	ldr	r2, [pc, #64]	; (800bc80 <get_mpu_acc_offset+0x104>)
 800bc40:	fb82 1203 	smull	r1, r2, r2, r3
 800bc44:	1152      	asrs	r2, r2, #5
 800bc46:	17db      	asrs	r3, r3, #31
 800bc48:	1ad3      	subs	r3, r2, r3
 800bc4a:	b21a      	sxth	r2, r3
 800bc4c:	4b0b      	ldr	r3, [pc, #44]	; (800bc7c <get_mpu_acc_offset+0x100>)
 800bc4e:	82da      	strh	r2, [r3, #22]
  mpu_data.az_offset = mpu_data.az_offset / 300;
 800bc50:	4b0a      	ldr	r3, [pc, #40]	; (800bc7c <get_mpu_acc_offset+0x100>)
 800bc52:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800bc56:	4a0a      	ldr	r2, [pc, #40]	; (800bc80 <get_mpu_acc_offset+0x104>)
 800bc58:	fb82 1203 	smull	r1, r2, r2, r3
 800bc5c:	1152      	asrs	r2, r2, #5
 800bc5e:	17db      	asrs	r3, r3, #31
 800bc60:	1ad3      	subs	r3, r2, r3
 800bc62:	b21a      	sxth	r2, r3
 800bc64:	4b05      	ldr	r3, [pc, #20]	; (800bc7c <get_mpu_acc_offset+0x100>)
 800bc66:	831a      	strh	r2, [r3, #24]

  imu_cali.acc_flag = 0;
 800bc68:	4b06      	ldr	r3, [pc, #24]	; (800bc84 <get_mpu_acc_offset+0x108>)
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	705a      	strb	r2, [r3, #1]
}
 800bc6e:	bf00      	nop
 800bc70:	3708      	adds	r7, #8
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bd80      	pop	{r7, pc}
 800bc76:	bf00      	nop
 800bc78:	20005cdc 	.word	0x20005cdc
 800bc7c:	20005cec 	.word	0x20005cec
 800bc80:	1b4e81b5 	.word	0x1b4e81b5
 800bc84:	20000100 	.word	0x20000100

0800bc88 <get_ist_mag_offset>:

static void get_ist_mag_offset(void)
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b086      	sub	sp, #24
 800bc8c:	af00      	add	r7, sp, #0
  int16_t mag_max[3], mag_min[3];
  int i;
  for (i = 0; i < 5000; i++)
 800bc8e:	2300      	movs	r3, #0
 800bc90:	617b      	str	r3, [r7, #20]
 800bc92:	e062      	b.n	800bd5a <get_ist_mag_offset+0xd2>
  {
    ist8310_get_data((uint8_t *)&mpu_data.mx);
 800bc94:	4856      	ldr	r0, [pc, #344]	; (800bdf0 <get_ist_mag_offset+0x168>)
 800bc96:	f7ff fd5d 	bl	800b754 <ist8310_get_data>
    if ((abs(mpu_data.mx) < 400) && (abs(mpu_data.my) < 400) && (abs(mpu_data.mz) < 400))
 800bc9a:	4b56      	ldr	r3, [pc, #344]	; (800bdf4 <get_ist_mag_offset+0x16c>)
 800bc9c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	bfb8      	it	lt
 800bca4:	425b      	neglt	r3, r3
 800bca6:	b29b      	uxth	r3, r3
 800bca8:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800bcac:	d24f      	bcs.n	800bd4e <get_ist_mag_offset+0xc6>
 800bcae:	4b51      	ldr	r3, [pc, #324]	; (800bdf4 <get_ist_mag_offset+0x16c>)
 800bcb0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	bfb8      	it	lt
 800bcb8:	425b      	neglt	r3, r3
 800bcba:	b29b      	uxth	r3, r3
 800bcbc:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800bcc0:	d245      	bcs.n	800bd4e <get_ist_mag_offset+0xc6>
 800bcc2:	4b4c      	ldr	r3, [pc, #304]	; (800bdf4 <get_ist_mag_offset+0x16c>)
 800bcc4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	bfb8      	it	lt
 800bccc:	425b      	neglt	r3, r3
 800bcce:	b29b      	uxth	r3, r3
 800bcd0:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800bcd4:	d23b      	bcs.n	800bd4e <get_ist_mag_offset+0xc6>
    {
      mag_max[0] = VAL_MAX(mag_max[0], mpu_data.mx);
 800bcd6:	4b47      	ldr	r3, [pc, #284]	; (800bdf4 <get_ist_mag_offset+0x16c>)
 800bcd8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 800bcdc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800bce0:	4293      	cmp	r3, r2
 800bce2:	bfb8      	it	lt
 800bce4:	4613      	movlt	r3, r2
 800bce6:	b21b      	sxth	r3, r3
 800bce8:	81bb      	strh	r3, [r7, #12]
      mag_min[0] = VAL_MIN(mag_min[0], mpu_data.mx);
 800bcea:	4b42      	ldr	r3, [pc, #264]	; (800bdf4 <get_ist_mag_offset+0x16c>)
 800bcec:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 800bcf0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800bcf4:	4293      	cmp	r3, r2
 800bcf6:	bfa8      	it	ge
 800bcf8:	4613      	movge	r3, r2
 800bcfa:	b21b      	sxth	r3, r3
 800bcfc:	80bb      	strh	r3, [r7, #4]

      mag_max[1] = VAL_MAX(mag_max[1], mpu_data.my);
 800bcfe:	4b3d      	ldr	r3, [pc, #244]	; (800bdf4 <get_ist_mag_offset+0x16c>)
 800bd00:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 800bd04:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800bd08:	4293      	cmp	r3, r2
 800bd0a:	bfb8      	it	lt
 800bd0c:	4613      	movlt	r3, r2
 800bd0e:	b21b      	sxth	r3, r3
 800bd10:	81fb      	strh	r3, [r7, #14]
      mag_min[1] = VAL_MIN(mag_min[1], mpu_data.my);
 800bd12:	4b38      	ldr	r3, [pc, #224]	; (800bdf4 <get_ist_mag_offset+0x16c>)
 800bd14:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 800bd18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bd1c:	4293      	cmp	r3, r2
 800bd1e:	bfa8      	it	ge
 800bd20:	4613      	movge	r3, r2
 800bd22:	b21b      	sxth	r3, r3
 800bd24:	80fb      	strh	r3, [r7, #6]

      mag_max[2] = VAL_MAX(mag_max[2], mpu_data.mz);
 800bd26:	4b33      	ldr	r3, [pc, #204]	; (800bdf4 <get_ist_mag_offset+0x16c>)
 800bd28:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 800bd2c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800bd30:	4293      	cmp	r3, r2
 800bd32:	bfb8      	it	lt
 800bd34:	4613      	movlt	r3, r2
 800bd36:	b21b      	sxth	r3, r3
 800bd38:	823b      	strh	r3, [r7, #16]
      mag_min[2] = VAL_MIN(mag_min[2], mpu_data.mz);
 800bd3a:	4b2e      	ldr	r3, [pc, #184]	; (800bdf4 <get_ist_mag_offset+0x16c>)
 800bd3c:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 800bd40:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800bd44:	4293      	cmp	r3, r2
 800bd46:	bfa8      	it	ge
 800bd48:	4613      	movge	r3, r2
 800bd4a:	b21b      	sxth	r3, r3
 800bd4c:	813b      	strh	r3, [r7, #8]
    }
    MPU_DELAY(2);
 800bd4e:	2002      	movs	r0, #2
 800bd50:	f7f6 f836 	bl	8001dc0 <HAL_Delay>
  for (i = 0; i < 5000; i++)
 800bd54:	697b      	ldr	r3, [r7, #20]
 800bd56:	3301      	adds	r3, #1
 800bd58:	617b      	str	r3, [r7, #20]
 800bd5a:	697b      	ldr	r3, [r7, #20]
 800bd5c:	f241 3287 	movw	r2, #4999	; 0x1387
 800bd60:	4293      	cmp	r3, r2
 800bd62:	dd97      	ble.n	800bc94 <get_ist_mag_offset+0xc>
  }
  mpu_data.mx_offset = (int16_t)((mag_max[0] + mag_min[0]) * 0.5f);
 800bd64:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800bd68:	461a      	mov	r2, r3
 800bd6a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800bd6e:	4413      	add	r3, r2
 800bd70:	ee07 3a90 	vmov	s15, r3
 800bd74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bd78:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800bd7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bd80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bd84:	ee17 3a90 	vmov	r3, s15
 800bd88:	b21a      	sxth	r2, r3
 800bd8a:	4b1a      	ldr	r3, [pc, #104]	; (800bdf4 <get_ist_mag_offset+0x16c>)
 800bd8c:	841a      	strh	r2, [r3, #32]
  mpu_data.my_offset = (int16_t)((mag_max[1] + mag_min[1]) * 0.5f);
 800bd8e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800bd92:	461a      	mov	r2, r3
 800bd94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bd98:	4413      	add	r3, r2
 800bd9a:	ee07 3a90 	vmov	s15, r3
 800bd9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bda2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800bda6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bdaa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bdae:	ee17 3a90 	vmov	r3, s15
 800bdb2:	b21a      	sxth	r2, r3
 800bdb4:	4b0f      	ldr	r3, [pc, #60]	; (800bdf4 <get_ist_mag_offset+0x16c>)
 800bdb6:	845a      	strh	r2, [r3, #34]	; 0x22
  mpu_data.mz_offset = (int16_t)((mag_max[2] + mag_min[2]) * 0.5f);
 800bdb8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800bdbc:	461a      	mov	r2, r3
 800bdbe:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800bdc2:	4413      	add	r3, r2
 800bdc4:	ee07 3a90 	vmov	s15, r3
 800bdc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bdcc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800bdd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bdd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bdd8:	ee17 3a90 	vmov	r3, s15
 800bddc:	b21a      	sxth	r2, r3
 800bdde:	4b05      	ldr	r3, [pc, #20]	; (800bdf4 <get_ist_mag_offset+0x16c>)
 800bde0:	849a      	strh	r2, [r3, #36]	; 0x24

  imu_cali.mag_flag = 0;
 800bde2:	4b05      	ldr	r3, [pc, #20]	; (800bdf8 <get_ist_mag_offset+0x170>)
 800bde4:	2200      	movs	r2, #0
 800bde6:	709a      	strb	r2, [r3, #2]
}
 800bde8:	bf00      	nop
 800bdea:	3718      	adds	r7, #24
 800bdec:	46bd      	mov	sp, r7
 800bdee:	bd80      	pop	{r7, pc}
 800bdf0:	20005cf8 	.word	0x20005cf8
 800bdf4:	20005cec 	.word	0x20005cec
 800bdf8:	20000100 	.word	0x20000100

0800bdfc <invSqrt>:
               sizeof(long) must be 4 bytes.
  * @param[in] input:x
  * @retval    1/Sqrt(x)
  */
float invSqrt(float x)
{
 800bdfc:	b480      	push	{r7}
 800bdfe:	b087      	sub	sp, #28
 800be00:	af00      	add	r7, sp, #0
 800be02:	ed87 0a01 	vstr	s0, [r7, #4]
  float halfx = 0.5f * x;
 800be06:	edd7 7a01 	vldr	s15, [r7, #4]
 800be0a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800be0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800be12:	edc7 7a05 	vstr	s15, [r7, #20]
  float y = x;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	613b      	str	r3, [r7, #16]
  long i = *(long *)&y;
 800be1a:	f107 0310 	add.w	r3, r7, #16
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	60fb      	str	r3, [r7, #12]
  i = 0x5f3759df - (i >> 1);
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	105a      	asrs	r2, r3, #1
 800be26:	4b12      	ldr	r3, [pc, #72]	; (800be70 <invSqrt+0x74>)
 800be28:	1a9b      	subs	r3, r3, r2
 800be2a:	60fb      	str	r3, [r7, #12]
  y = *(float *)&i;
 800be2c:	f107 030c 	add.w	r3, r7, #12
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	613b      	str	r3, [r7, #16]
  y = y * (1.5f - (halfx * y * y));
 800be34:	ed97 7a04 	vldr	s14, [r7, #16]
 800be38:	edd7 7a05 	vldr	s15, [r7, #20]
 800be3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800be40:	edd7 7a04 	vldr	s15, [r7, #16]
 800be44:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be48:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800be4c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800be50:	edd7 7a04 	vldr	s15, [r7, #16]
 800be54:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be58:	edc7 7a04 	vstr	s15, [r7, #16]
  return y;
 800be5c:	693b      	ldr	r3, [r7, #16]
 800be5e:	ee07 3a90 	vmov	s15, r3
}
 800be62:	eeb0 0a67 	vmov.f32	s0, s15
 800be66:	371c      	adds	r7, #28
 800be68:	46bd      	mov	sp, r7
 800be6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6e:	4770      	bx	lr
 800be70:	5f3759df 	.word	0x5f3759df
 800be74:	00000000 	.word	0x00000000

0800be78 <mahony_ahrs_updateIMU>:
  atti->pitch = asin(-2 * q1 * q3 + 2 * q0 * q2) * 57.3;                                // pitch    -pi/2----pi/2
  atti->yaw = atan2(2 * q1 * q2 + 2 * q0 * q3, -2 * q2 * q2 - 2 * q3 * q3 + 1) * 57.3;  // yaw      -pi----pi
}

void mahony_ahrs_updateIMU(struct ahrs_sensor *sensor, struct attitude *atti)
{
 800be78:	b5b0      	push	{r4, r5, r7, lr}
 800be7a:	b08c      	sub	sp, #48	; 0x30
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
 800be80:	6039      	str	r1, [r7, #0]
  float recipNorm;
  float halfvx, halfvy, halfvz;
  float halfex, halfey, halfez;
  float qa, qb, qc;

  gx = sensor->wx;
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	68db      	ldr	r3, [r3, #12]
 800be86:	4aaa      	ldr	r2, [pc, #680]	; (800c130 <mahony_ahrs_updateIMU+0x2b8>)
 800be88:	6013      	str	r3, [r2, #0]
  gy = sensor->wy;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	691b      	ldr	r3, [r3, #16]
 800be8e:	4aa9      	ldr	r2, [pc, #676]	; (800c134 <mahony_ahrs_updateIMU+0x2bc>)
 800be90:	6013      	str	r3, [r2, #0]
  gz = sensor->wz;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	695b      	ldr	r3, [r3, #20]
 800be96:	4aa8      	ldr	r2, [pc, #672]	; (800c138 <mahony_ahrs_updateIMU+0x2c0>)
 800be98:	6013      	str	r3, [r2, #0]
  ax = sensor->ax;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	4aa7      	ldr	r2, [pc, #668]	; (800c13c <mahony_ahrs_updateIMU+0x2c4>)
 800bea0:	6013      	str	r3, [r2, #0]
  ay = sensor->ay;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	685b      	ldr	r3, [r3, #4]
 800bea6:	4aa6      	ldr	r2, [pc, #664]	; (800c140 <mahony_ahrs_updateIMU+0x2c8>)
 800bea8:	6013      	str	r3, [r2, #0]
  az = sensor->az;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	689b      	ldr	r3, [r3, #8]
 800beae:	4aa5      	ldr	r2, [pc, #660]	; (800c144 <mahony_ahrs_updateIMU+0x2cc>)
 800beb0:	6013      	str	r3, [r2, #0]
  mx = sensor->mx;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	699b      	ldr	r3, [r3, #24]
 800beb6:	4aa4      	ldr	r2, [pc, #656]	; (800c148 <mahony_ahrs_updateIMU+0x2d0>)
 800beb8:	6013      	str	r3, [r2, #0]
  my = sensor->my;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	69db      	ldr	r3, [r3, #28]
 800bebe:	4aa3      	ldr	r2, [pc, #652]	; (800c14c <mahony_ahrs_updateIMU+0x2d4>)
 800bec0:	6013      	str	r3, [r2, #0]
  mz = sensor->mz;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	6a1b      	ldr	r3, [r3, #32]
 800bec6:	4aa2      	ldr	r2, [pc, #648]	; (800c150 <mahony_ahrs_updateIMU+0x2d8>)
 800bec8:	6013      	str	r3, [r2, #0]
  // Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
  if (!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f)))
 800beca:	4b9c      	ldr	r3, [pc, #624]	; (800c13c <mahony_ahrs_updateIMU+0x2c4>)
 800becc:	edd3 7a00 	vldr	s15, [r3]
 800bed0:	eef5 7a40 	vcmp.f32	s15, #0.0
 800bed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bed8:	d110      	bne.n	800befc <mahony_ahrs_updateIMU+0x84>
 800beda:	4b99      	ldr	r3, [pc, #612]	; (800c140 <mahony_ahrs_updateIMU+0x2c8>)
 800bedc:	edd3 7a00 	vldr	s15, [r3]
 800bee0:	eef5 7a40 	vcmp.f32	s15, #0.0
 800bee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bee8:	d108      	bne.n	800befc <mahony_ahrs_updateIMU+0x84>
 800beea:	4b96      	ldr	r3, [pc, #600]	; (800c144 <mahony_ahrs_updateIMU+0x2cc>)
 800beec:	edd3 7a00 	vldr	s15, [r3]
 800bef0:	eef5 7a40 	vcmp.f32	s15, #0.0
 800bef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bef8:	f000 8177 	beq.w	800c1ea <mahony_ahrs_updateIMU+0x372>
  {

    // Normalise accelerometer measurement
    recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 800befc:	4b8f      	ldr	r3, [pc, #572]	; (800c13c <mahony_ahrs_updateIMU+0x2c4>)
 800befe:	ed93 7a00 	vldr	s14, [r3]
 800bf02:	4b8e      	ldr	r3, [pc, #568]	; (800c13c <mahony_ahrs_updateIMU+0x2c4>)
 800bf04:	edd3 7a00 	vldr	s15, [r3]
 800bf08:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bf0c:	4b8c      	ldr	r3, [pc, #560]	; (800c140 <mahony_ahrs_updateIMU+0x2c8>)
 800bf0e:	edd3 6a00 	vldr	s13, [r3]
 800bf12:	4b8b      	ldr	r3, [pc, #556]	; (800c140 <mahony_ahrs_updateIMU+0x2c8>)
 800bf14:	edd3 7a00 	vldr	s15, [r3]
 800bf18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bf1c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bf20:	4b88      	ldr	r3, [pc, #544]	; (800c144 <mahony_ahrs_updateIMU+0x2cc>)
 800bf22:	edd3 6a00 	vldr	s13, [r3]
 800bf26:	4b87      	ldr	r3, [pc, #540]	; (800c144 <mahony_ahrs_updateIMU+0x2cc>)
 800bf28:	edd3 7a00 	vldr	s15, [r3]
 800bf2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bf30:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bf34:	eeb0 0a67 	vmov.f32	s0, s15
 800bf38:	f7ff ff60 	bl	800bdfc <invSqrt>
 800bf3c:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
    ax *= recipNorm;
 800bf40:	4b7e      	ldr	r3, [pc, #504]	; (800c13c <mahony_ahrs_updateIMU+0x2c4>)
 800bf42:	ed93 7a00 	vldr	s14, [r3]
 800bf46:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800bf4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf4e:	4b7b      	ldr	r3, [pc, #492]	; (800c13c <mahony_ahrs_updateIMU+0x2c4>)
 800bf50:	edc3 7a00 	vstr	s15, [r3]
    ay *= recipNorm;
 800bf54:	4b7a      	ldr	r3, [pc, #488]	; (800c140 <mahony_ahrs_updateIMU+0x2c8>)
 800bf56:	ed93 7a00 	vldr	s14, [r3]
 800bf5a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800bf5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf62:	4b77      	ldr	r3, [pc, #476]	; (800c140 <mahony_ahrs_updateIMU+0x2c8>)
 800bf64:	edc3 7a00 	vstr	s15, [r3]
    az *= recipNorm;
 800bf68:	4b76      	ldr	r3, [pc, #472]	; (800c144 <mahony_ahrs_updateIMU+0x2cc>)
 800bf6a:	ed93 7a00 	vldr	s14, [r3]
 800bf6e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800bf72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf76:	4b73      	ldr	r3, [pc, #460]	; (800c144 <mahony_ahrs_updateIMU+0x2cc>)
 800bf78:	edc3 7a00 	vstr	s15, [r3]

    // Estimated direction of gravity and vector perpendicular to magnetic flux
    halfvx = q1 * q3 - q0 * q2;
 800bf7c:	4b75      	ldr	r3, [pc, #468]	; (800c154 <mahony_ahrs_updateIMU+0x2dc>)
 800bf7e:	ed93 7a00 	vldr	s14, [r3]
 800bf82:	4b75      	ldr	r3, [pc, #468]	; (800c158 <mahony_ahrs_updateIMU+0x2e0>)
 800bf84:	edd3 7a00 	vldr	s15, [r3]
 800bf88:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bf8c:	4b73      	ldr	r3, [pc, #460]	; (800c15c <mahony_ahrs_updateIMU+0x2e4>)
 800bf8e:	edd3 6a00 	vldr	s13, [r3]
 800bf92:	4b73      	ldr	r3, [pc, #460]	; (800c160 <mahony_ahrs_updateIMU+0x2e8>)
 800bf94:	edd3 7a00 	vldr	s15, [r3]
 800bf98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bf9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bfa0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    halfvy = q0 * q1 + q2 * q3;
 800bfa4:	4b6d      	ldr	r3, [pc, #436]	; (800c15c <mahony_ahrs_updateIMU+0x2e4>)
 800bfa6:	ed93 7a00 	vldr	s14, [r3]
 800bfaa:	4b6a      	ldr	r3, [pc, #424]	; (800c154 <mahony_ahrs_updateIMU+0x2dc>)
 800bfac:	edd3 7a00 	vldr	s15, [r3]
 800bfb0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bfb4:	4b6a      	ldr	r3, [pc, #424]	; (800c160 <mahony_ahrs_updateIMU+0x2e8>)
 800bfb6:	edd3 6a00 	vldr	s13, [r3]
 800bfba:	4b67      	ldr	r3, [pc, #412]	; (800c158 <mahony_ahrs_updateIMU+0x2e0>)
 800bfbc:	edd3 7a00 	vldr	s15, [r3]
 800bfc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bfc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bfc8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    halfvz = q0 * q0 - 0.5f + q3 * q3;
 800bfcc:	4b63      	ldr	r3, [pc, #396]	; (800c15c <mahony_ahrs_updateIMU+0x2e4>)
 800bfce:	ed93 7a00 	vldr	s14, [r3]
 800bfd2:	4b62      	ldr	r3, [pc, #392]	; (800c15c <mahony_ahrs_updateIMU+0x2e4>)
 800bfd4:	edd3 7a00 	vldr	s15, [r3]
 800bfd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfdc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800bfe0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800bfe4:	4b5c      	ldr	r3, [pc, #368]	; (800c158 <mahony_ahrs_updateIMU+0x2e0>)
 800bfe6:	edd3 6a00 	vldr	s13, [r3]
 800bfea:	4b5b      	ldr	r3, [pc, #364]	; (800c158 <mahony_ahrs_updateIMU+0x2e0>)
 800bfec:	edd3 7a00 	vldr	s15, [r3]
 800bff0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bff4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bff8:	edc7 7a08 	vstr	s15, [r7, #32]

    // Error is sum of cross product between estimated and measured direction of gravity
    halfex = (ay * halfvz - az * halfvy);
 800bffc:	4b50      	ldr	r3, [pc, #320]	; (800c140 <mahony_ahrs_updateIMU+0x2c8>)
 800bffe:	ed93 7a00 	vldr	s14, [r3]
 800c002:	edd7 7a08 	vldr	s15, [r7, #32]
 800c006:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c00a:	4b4e      	ldr	r3, [pc, #312]	; (800c144 <mahony_ahrs_updateIMU+0x2cc>)
 800c00c:	edd3 6a00 	vldr	s13, [r3]
 800c010:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800c014:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c018:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c01c:	edc7 7a07 	vstr	s15, [r7, #28]
    halfey = (az * halfvx - ax * halfvz);
 800c020:	4b48      	ldr	r3, [pc, #288]	; (800c144 <mahony_ahrs_updateIMU+0x2cc>)
 800c022:	ed93 7a00 	vldr	s14, [r3]
 800c026:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c02a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c02e:	4b43      	ldr	r3, [pc, #268]	; (800c13c <mahony_ahrs_updateIMU+0x2c4>)
 800c030:	edd3 6a00 	vldr	s13, [r3]
 800c034:	edd7 7a08 	vldr	s15, [r7, #32]
 800c038:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c03c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c040:	edc7 7a06 	vstr	s15, [r7, #24]
    halfez = (ax * halfvy - ay * halfvx);
 800c044:	4b3d      	ldr	r3, [pc, #244]	; (800c13c <mahony_ahrs_updateIMU+0x2c4>)
 800c046:	ed93 7a00 	vldr	s14, [r3]
 800c04a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800c04e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c052:	4b3b      	ldr	r3, [pc, #236]	; (800c140 <mahony_ahrs_updateIMU+0x2c8>)
 800c054:	edd3 6a00 	vldr	s13, [r3]
 800c058:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c05c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c060:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c064:	edc7 7a05 	vstr	s15, [r7, #20]

    // Compute and apply integral feedback if enabled
    if (twoKi > 0.0f)
 800c068:	4b3e      	ldr	r3, [pc, #248]	; (800c164 <mahony_ahrs_updateIMU+0x2ec>)
 800c06a:	edd3 7a00 	vldr	s15, [r3]
 800c06e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c076:	dd7f      	ble.n	800c178 <mahony_ahrs_updateIMU+0x300>
    {
      integralFBx += twoKi * halfex * (1.0f / sampleFreq); // integral error scaled by Ki
 800c078:	4b3a      	ldr	r3, [pc, #232]	; (800c164 <mahony_ahrs_updateIMU+0x2ec>)
 800c07a:	ed93 7a00 	vldr	s14, [r3]
 800c07e:	edd7 7a07 	vldr	s15, [r7, #28]
 800c082:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c086:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800c168 <mahony_ahrs_updateIMU+0x2f0>
 800c08a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c08e:	4b37      	ldr	r3, [pc, #220]	; (800c16c <mahony_ahrs_updateIMU+0x2f4>)
 800c090:	edd3 7a00 	vldr	s15, [r3]
 800c094:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c098:	4b34      	ldr	r3, [pc, #208]	; (800c16c <mahony_ahrs_updateIMU+0x2f4>)
 800c09a:	edc3 7a00 	vstr	s15, [r3]
      integralFBy += twoKi * halfey * (1.0f / sampleFreq);
 800c09e:	4b31      	ldr	r3, [pc, #196]	; (800c164 <mahony_ahrs_updateIMU+0x2ec>)
 800c0a0:	ed93 7a00 	vldr	s14, [r3]
 800c0a4:	edd7 7a06 	vldr	s15, [r7, #24]
 800c0a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0ac:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800c168 <mahony_ahrs_updateIMU+0x2f0>
 800c0b0:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c0b4:	4b2e      	ldr	r3, [pc, #184]	; (800c170 <mahony_ahrs_updateIMU+0x2f8>)
 800c0b6:	edd3 7a00 	vldr	s15, [r3]
 800c0ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c0be:	4b2c      	ldr	r3, [pc, #176]	; (800c170 <mahony_ahrs_updateIMU+0x2f8>)
 800c0c0:	edc3 7a00 	vstr	s15, [r3]
      integralFBz += twoKi * halfez * (1.0f / sampleFreq);
 800c0c4:	4b27      	ldr	r3, [pc, #156]	; (800c164 <mahony_ahrs_updateIMU+0x2ec>)
 800c0c6:	ed93 7a00 	vldr	s14, [r3]
 800c0ca:	edd7 7a05 	vldr	s15, [r7, #20]
 800c0ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0d2:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800c168 <mahony_ahrs_updateIMU+0x2f0>
 800c0d6:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c0da:	4b26      	ldr	r3, [pc, #152]	; (800c174 <mahony_ahrs_updateIMU+0x2fc>)
 800c0dc:	edd3 7a00 	vldr	s15, [r3]
 800c0e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c0e4:	4b23      	ldr	r3, [pc, #140]	; (800c174 <mahony_ahrs_updateIMU+0x2fc>)
 800c0e6:	edc3 7a00 	vstr	s15, [r3]
      gx += integralFBx; // apply integral feedback
 800c0ea:	4b20      	ldr	r3, [pc, #128]	; (800c16c <mahony_ahrs_updateIMU+0x2f4>)
 800c0ec:	ed93 7a00 	vldr	s14, [r3]
 800c0f0:	4b0f      	ldr	r3, [pc, #60]	; (800c130 <mahony_ahrs_updateIMU+0x2b8>)
 800c0f2:	edd3 7a00 	vldr	s15, [r3]
 800c0f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c0fa:	4b0d      	ldr	r3, [pc, #52]	; (800c130 <mahony_ahrs_updateIMU+0x2b8>)
 800c0fc:	edc3 7a00 	vstr	s15, [r3]
      gy += integralFBy;
 800c100:	4b1b      	ldr	r3, [pc, #108]	; (800c170 <mahony_ahrs_updateIMU+0x2f8>)
 800c102:	ed93 7a00 	vldr	s14, [r3]
 800c106:	4b0b      	ldr	r3, [pc, #44]	; (800c134 <mahony_ahrs_updateIMU+0x2bc>)
 800c108:	edd3 7a00 	vldr	s15, [r3]
 800c10c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c110:	4b08      	ldr	r3, [pc, #32]	; (800c134 <mahony_ahrs_updateIMU+0x2bc>)
 800c112:	edc3 7a00 	vstr	s15, [r3]
      gz += integralFBz;
 800c116:	4b17      	ldr	r3, [pc, #92]	; (800c174 <mahony_ahrs_updateIMU+0x2fc>)
 800c118:	ed93 7a00 	vldr	s14, [r3]
 800c11c:	4b06      	ldr	r3, [pc, #24]	; (800c138 <mahony_ahrs_updateIMU+0x2c0>)
 800c11e:	edd3 7a00 	vldr	s15, [r3]
 800c122:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c126:	4b04      	ldr	r3, [pc, #16]	; (800c138 <mahony_ahrs_updateIMU+0x2c0>)
 800c128:	edc3 7a00 	vstr	s15, [r3]
 800c12c:	e030      	b.n	800c190 <mahony_ahrs_updateIMU+0x318>
 800c12e:	bf00      	nop
 800c130:	20005d2c 	.word	0x20005d2c
 800c134:	20005d30 	.word	0x20005d30
 800c138:	20005d34 	.word	0x20005d34
 800c13c:	20005d38 	.word	0x20005d38
 800c140:	20005d3c 	.word	0x20005d3c
 800c144:	20005d40 	.word	0x20005d40
 800c148:	20005d44 	.word	0x20005d44
 800c14c:	20005d48 	.word	0x20005d48
 800c150:	20005d4c 	.word	0x20005d4c
 800c154:	20005d14 	.word	0x20005d14
 800c158:	20005d1c 	.word	0x20005d1c
 800c15c:	2000010c 	.word	0x2000010c
 800c160:	20005d18 	.word	0x20005d18
 800c164:	20000108 	.word	0x20000108
 800c168:	3b03126f 	.word	0x3b03126f
 800c16c:	20005d20 	.word	0x20005d20
 800c170:	20005d24 	.word	0x20005d24
 800c174:	20005d28 	.word	0x20005d28
    }
    else
    {
      integralFBx = 0.0f; // prevent integral windup
 800c178:	4bd3      	ldr	r3, [pc, #844]	; (800c4c8 <mahony_ahrs_updateIMU+0x650>)
 800c17a:	f04f 0200 	mov.w	r2, #0
 800c17e:	601a      	str	r2, [r3, #0]
      integralFBy = 0.0f;
 800c180:	4bd2      	ldr	r3, [pc, #840]	; (800c4cc <mahony_ahrs_updateIMU+0x654>)
 800c182:	f04f 0200 	mov.w	r2, #0
 800c186:	601a      	str	r2, [r3, #0]
      integralFBz = 0.0f;
 800c188:	4bd1      	ldr	r3, [pc, #836]	; (800c4d0 <mahony_ahrs_updateIMU+0x658>)
 800c18a:	f04f 0200 	mov.w	r2, #0
 800c18e:	601a      	str	r2, [r3, #0]
    }

    // Apply proportional feedback
    gx += twoKp * halfex;
 800c190:	4bd0      	ldr	r3, [pc, #832]	; (800c4d4 <mahony_ahrs_updateIMU+0x65c>)
 800c192:	ed93 7a00 	vldr	s14, [r3]
 800c196:	edd7 7a07 	vldr	s15, [r7, #28]
 800c19a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c19e:	4bce      	ldr	r3, [pc, #824]	; (800c4d8 <mahony_ahrs_updateIMU+0x660>)
 800c1a0:	edd3 7a00 	vldr	s15, [r3]
 800c1a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c1a8:	4bcb      	ldr	r3, [pc, #812]	; (800c4d8 <mahony_ahrs_updateIMU+0x660>)
 800c1aa:	edc3 7a00 	vstr	s15, [r3]
    gy += twoKp * halfey;
 800c1ae:	4bc9      	ldr	r3, [pc, #804]	; (800c4d4 <mahony_ahrs_updateIMU+0x65c>)
 800c1b0:	ed93 7a00 	vldr	s14, [r3]
 800c1b4:	edd7 7a06 	vldr	s15, [r7, #24]
 800c1b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c1bc:	4bc7      	ldr	r3, [pc, #796]	; (800c4dc <mahony_ahrs_updateIMU+0x664>)
 800c1be:	edd3 7a00 	vldr	s15, [r3]
 800c1c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c1c6:	4bc5      	ldr	r3, [pc, #788]	; (800c4dc <mahony_ahrs_updateIMU+0x664>)
 800c1c8:	edc3 7a00 	vstr	s15, [r3]
    gz += twoKp * halfez;
 800c1cc:	4bc1      	ldr	r3, [pc, #772]	; (800c4d4 <mahony_ahrs_updateIMU+0x65c>)
 800c1ce:	ed93 7a00 	vldr	s14, [r3]
 800c1d2:	edd7 7a05 	vldr	s15, [r7, #20]
 800c1d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c1da:	4bc1      	ldr	r3, [pc, #772]	; (800c4e0 <mahony_ahrs_updateIMU+0x668>)
 800c1dc:	edd3 7a00 	vldr	s15, [r3]
 800c1e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c1e4:	4bbe      	ldr	r3, [pc, #760]	; (800c4e0 <mahony_ahrs_updateIMU+0x668>)
 800c1e6:	edc3 7a00 	vstr	s15, [r3]
  }

  // Integrate rate of change of quaternion
  gx *= (0.5f * (1.0f / sampleFreq)); // pre-multiply common factors
 800c1ea:	4bbb      	ldr	r3, [pc, #748]	; (800c4d8 <mahony_ahrs_updateIMU+0x660>)
 800c1ec:	edd3 7a00 	vldr	s15, [r3]
 800c1f0:	ed9f 7abc 	vldr	s14, [pc, #752]	; 800c4e4 <mahony_ahrs_updateIMU+0x66c>
 800c1f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c1f8:	4bb7      	ldr	r3, [pc, #732]	; (800c4d8 <mahony_ahrs_updateIMU+0x660>)
 800c1fa:	edc3 7a00 	vstr	s15, [r3]
  gy *= (0.5f * (1.0f / sampleFreq));
 800c1fe:	4bb7      	ldr	r3, [pc, #732]	; (800c4dc <mahony_ahrs_updateIMU+0x664>)
 800c200:	edd3 7a00 	vldr	s15, [r3]
 800c204:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 800c4e4 <mahony_ahrs_updateIMU+0x66c>
 800c208:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c20c:	4bb3      	ldr	r3, [pc, #716]	; (800c4dc <mahony_ahrs_updateIMU+0x664>)
 800c20e:	edc3 7a00 	vstr	s15, [r3]
  gz *= (0.5f * (1.0f / sampleFreq));
 800c212:	4bb3      	ldr	r3, [pc, #716]	; (800c4e0 <mahony_ahrs_updateIMU+0x668>)
 800c214:	edd3 7a00 	vldr	s15, [r3]
 800c218:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 800c4e4 <mahony_ahrs_updateIMU+0x66c>
 800c21c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c220:	4baf      	ldr	r3, [pc, #700]	; (800c4e0 <mahony_ahrs_updateIMU+0x668>)
 800c222:	edc3 7a00 	vstr	s15, [r3]
  qa = q0;
 800c226:	4bb0      	ldr	r3, [pc, #704]	; (800c4e8 <mahony_ahrs_updateIMU+0x670>)
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	613b      	str	r3, [r7, #16]
  qb = q1;
 800c22c:	4baf      	ldr	r3, [pc, #700]	; (800c4ec <mahony_ahrs_updateIMU+0x674>)
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	60fb      	str	r3, [r7, #12]
  qc = q2;
 800c232:	4baf      	ldr	r3, [pc, #700]	; (800c4f0 <mahony_ahrs_updateIMU+0x678>)
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	60bb      	str	r3, [r7, #8]
  q0 += (-qb * gx - qc * gy - q3 * gz);
 800c238:	edd7 7a03 	vldr	s15, [r7, #12]
 800c23c:	eeb1 7a67 	vneg.f32	s14, s15
 800c240:	4ba5      	ldr	r3, [pc, #660]	; (800c4d8 <mahony_ahrs_updateIMU+0x660>)
 800c242:	edd3 7a00 	vldr	s15, [r3]
 800c246:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c24a:	4ba4      	ldr	r3, [pc, #656]	; (800c4dc <mahony_ahrs_updateIMU+0x664>)
 800c24c:	edd3 6a00 	vldr	s13, [r3]
 800c250:	edd7 7a02 	vldr	s15, [r7, #8]
 800c254:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c258:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c25c:	4ba5      	ldr	r3, [pc, #660]	; (800c4f4 <mahony_ahrs_updateIMU+0x67c>)
 800c25e:	edd3 6a00 	vldr	s13, [r3]
 800c262:	4b9f      	ldr	r3, [pc, #636]	; (800c4e0 <mahony_ahrs_updateIMU+0x668>)
 800c264:	edd3 7a00 	vldr	s15, [r3]
 800c268:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c26c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c270:	4b9d      	ldr	r3, [pc, #628]	; (800c4e8 <mahony_ahrs_updateIMU+0x670>)
 800c272:	edd3 7a00 	vldr	s15, [r3]
 800c276:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c27a:	4b9b      	ldr	r3, [pc, #620]	; (800c4e8 <mahony_ahrs_updateIMU+0x670>)
 800c27c:	edc3 7a00 	vstr	s15, [r3]
  q1 += (qa * gx + qc * gz - q3 * gy);
 800c280:	4b95      	ldr	r3, [pc, #596]	; (800c4d8 <mahony_ahrs_updateIMU+0x660>)
 800c282:	ed93 7a00 	vldr	s14, [r3]
 800c286:	edd7 7a04 	vldr	s15, [r7, #16]
 800c28a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c28e:	4b94      	ldr	r3, [pc, #592]	; (800c4e0 <mahony_ahrs_updateIMU+0x668>)
 800c290:	edd3 6a00 	vldr	s13, [r3]
 800c294:	edd7 7a02 	vldr	s15, [r7, #8]
 800c298:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c29c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c2a0:	4b94      	ldr	r3, [pc, #592]	; (800c4f4 <mahony_ahrs_updateIMU+0x67c>)
 800c2a2:	edd3 6a00 	vldr	s13, [r3]
 800c2a6:	4b8d      	ldr	r3, [pc, #564]	; (800c4dc <mahony_ahrs_updateIMU+0x664>)
 800c2a8:	edd3 7a00 	vldr	s15, [r3]
 800c2ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c2b0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c2b4:	4b8d      	ldr	r3, [pc, #564]	; (800c4ec <mahony_ahrs_updateIMU+0x674>)
 800c2b6:	edd3 7a00 	vldr	s15, [r3]
 800c2ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c2be:	4b8b      	ldr	r3, [pc, #556]	; (800c4ec <mahony_ahrs_updateIMU+0x674>)
 800c2c0:	edc3 7a00 	vstr	s15, [r3]
  q2 += (qa * gy - qb * gz + q3 * gx);
 800c2c4:	4b85      	ldr	r3, [pc, #532]	; (800c4dc <mahony_ahrs_updateIMU+0x664>)
 800c2c6:	ed93 7a00 	vldr	s14, [r3]
 800c2ca:	edd7 7a04 	vldr	s15, [r7, #16]
 800c2ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c2d2:	4b83      	ldr	r3, [pc, #524]	; (800c4e0 <mahony_ahrs_updateIMU+0x668>)
 800c2d4:	edd3 6a00 	vldr	s13, [r3]
 800c2d8:	edd7 7a03 	vldr	s15, [r7, #12]
 800c2dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c2e0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c2e4:	4b83      	ldr	r3, [pc, #524]	; (800c4f4 <mahony_ahrs_updateIMU+0x67c>)
 800c2e6:	edd3 6a00 	vldr	s13, [r3]
 800c2ea:	4b7b      	ldr	r3, [pc, #492]	; (800c4d8 <mahony_ahrs_updateIMU+0x660>)
 800c2ec:	edd3 7a00 	vldr	s15, [r3]
 800c2f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c2f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c2f8:	4b7d      	ldr	r3, [pc, #500]	; (800c4f0 <mahony_ahrs_updateIMU+0x678>)
 800c2fa:	edd3 7a00 	vldr	s15, [r3]
 800c2fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c302:	4b7b      	ldr	r3, [pc, #492]	; (800c4f0 <mahony_ahrs_updateIMU+0x678>)
 800c304:	edc3 7a00 	vstr	s15, [r3]
  q3 += (qa * gz + qb * gy - qc * gx);
 800c308:	4b75      	ldr	r3, [pc, #468]	; (800c4e0 <mahony_ahrs_updateIMU+0x668>)
 800c30a:	ed93 7a00 	vldr	s14, [r3]
 800c30e:	edd7 7a04 	vldr	s15, [r7, #16]
 800c312:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c316:	4b71      	ldr	r3, [pc, #452]	; (800c4dc <mahony_ahrs_updateIMU+0x664>)
 800c318:	edd3 6a00 	vldr	s13, [r3]
 800c31c:	edd7 7a03 	vldr	s15, [r7, #12]
 800c320:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c324:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c328:	4b6b      	ldr	r3, [pc, #428]	; (800c4d8 <mahony_ahrs_updateIMU+0x660>)
 800c32a:	edd3 6a00 	vldr	s13, [r3]
 800c32e:	edd7 7a02 	vldr	s15, [r7, #8]
 800c332:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c336:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c33a:	4b6e      	ldr	r3, [pc, #440]	; (800c4f4 <mahony_ahrs_updateIMU+0x67c>)
 800c33c:	edd3 7a00 	vldr	s15, [r3]
 800c340:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c344:	4b6b      	ldr	r3, [pc, #428]	; (800c4f4 <mahony_ahrs_updateIMU+0x67c>)
 800c346:	edc3 7a00 	vstr	s15, [r3]

  // Normalise quaternion
  recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 800c34a:	4b67      	ldr	r3, [pc, #412]	; (800c4e8 <mahony_ahrs_updateIMU+0x670>)
 800c34c:	ed93 7a00 	vldr	s14, [r3]
 800c350:	4b65      	ldr	r3, [pc, #404]	; (800c4e8 <mahony_ahrs_updateIMU+0x670>)
 800c352:	edd3 7a00 	vldr	s15, [r3]
 800c356:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c35a:	4b64      	ldr	r3, [pc, #400]	; (800c4ec <mahony_ahrs_updateIMU+0x674>)
 800c35c:	edd3 6a00 	vldr	s13, [r3]
 800c360:	4b62      	ldr	r3, [pc, #392]	; (800c4ec <mahony_ahrs_updateIMU+0x674>)
 800c362:	edd3 7a00 	vldr	s15, [r3]
 800c366:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c36a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c36e:	4b60      	ldr	r3, [pc, #384]	; (800c4f0 <mahony_ahrs_updateIMU+0x678>)
 800c370:	edd3 6a00 	vldr	s13, [r3]
 800c374:	4b5e      	ldr	r3, [pc, #376]	; (800c4f0 <mahony_ahrs_updateIMU+0x678>)
 800c376:	edd3 7a00 	vldr	s15, [r3]
 800c37a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c37e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c382:	4b5c      	ldr	r3, [pc, #368]	; (800c4f4 <mahony_ahrs_updateIMU+0x67c>)
 800c384:	edd3 6a00 	vldr	s13, [r3]
 800c388:	4b5a      	ldr	r3, [pc, #360]	; (800c4f4 <mahony_ahrs_updateIMU+0x67c>)
 800c38a:	edd3 7a00 	vldr	s15, [r3]
 800c38e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c392:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c396:	eeb0 0a67 	vmov.f32	s0, s15
 800c39a:	f7ff fd2f 	bl	800bdfc <invSqrt>
 800c39e:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
  q0 *= recipNorm;
 800c3a2:	4b51      	ldr	r3, [pc, #324]	; (800c4e8 <mahony_ahrs_updateIMU+0x670>)
 800c3a4:	ed93 7a00 	vldr	s14, [r3]
 800c3a8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800c3ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3b0:	4b4d      	ldr	r3, [pc, #308]	; (800c4e8 <mahony_ahrs_updateIMU+0x670>)
 800c3b2:	edc3 7a00 	vstr	s15, [r3]
  q1 *= recipNorm;
 800c3b6:	4b4d      	ldr	r3, [pc, #308]	; (800c4ec <mahony_ahrs_updateIMU+0x674>)
 800c3b8:	ed93 7a00 	vldr	s14, [r3]
 800c3bc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800c3c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3c4:	4b49      	ldr	r3, [pc, #292]	; (800c4ec <mahony_ahrs_updateIMU+0x674>)
 800c3c6:	edc3 7a00 	vstr	s15, [r3]
  q2 *= recipNorm;
 800c3ca:	4b49      	ldr	r3, [pc, #292]	; (800c4f0 <mahony_ahrs_updateIMU+0x678>)
 800c3cc:	ed93 7a00 	vldr	s14, [r3]
 800c3d0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800c3d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3d8:	4b45      	ldr	r3, [pc, #276]	; (800c4f0 <mahony_ahrs_updateIMU+0x678>)
 800c3da:	edc3 7a00 	vstr	s15, [r3]
  q3 *= recipNorm;
 800c3de:	4b45      	ldr	r3, [pc, #276]	; (800c4f4 <mahony_ahrs_updateIMU+0x67c>)
 800c3e0:	ed93 7a00 	vldr	s14, [r3]
 800c3e4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800c3e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3ec:	4b41      	ldr	r3, [pc, #260]	; (800c4f4 <mahony_ahrs_updateIMU+0x67c>)
 800c3ee:	edc3 7a00 	vstr	s15, [r3]
  atti->roll = atan2(2 * q2 * q3 + 2 * q0 * q1, -2 * q1 * q1 - 2 * q2 * q2 + 1) * 57.3; // roll     -pi----pi
 800c3f2:	4b3f      	ldr	r3, [pc, #252]	; (800c4f0 <mahony_ahrs_updateIMU+0x678>)
 800c3f4:	edd3 7a00 	vldr	s15, [r3]
 800c3f8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800c3fc:	4b3d      	ldr	r3, [pc, #244]	; (800c4f4 <mahony_ahrs_updateIMU+0x67c>)
 800c3fe:	edd3 7a00 	vldr	s15, [r3]
 800c402:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c406:	4b38      	ldr	r3, [pc, #224]	; (800c4e8 <mahony_ahrs_updateIMU+0x670>)
 800c408:	edd3 7a00 	vldr	s15, [r3]
 800c40c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800c410:	4b36      	ldr	r3, [pc, #216]	; (800c4ec <mahony_ahrs_updateIMU+0x674>)
 800c412:	edd3 7a00 	vldr	s15, [r3]
 800c416:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c41a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c41e:	ee17 0a90 	vmov	r0, s15
 800c422:	f7f4 f849 	bl	80004b8 <__aeabi_f2d>
 800c426:	4604      	mov	r4, r0
 800c428:	460d      	mov	r5, r1
 800c42a:	4b30      	ldr	r3, [pc, #192]	; (800c4ec <mahony_ahrs_updateIMU+0x674>)
 800c42c:	edd3 7a00 	vldr	s15, [r3]
 800c430:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 800c434:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c438:	4b2c      	ldr	r3, [pc, #176]	; (800c4ec <mahony_ahrs_updateIMU+0x674>)
 800c43a:	edd3 7a00 	vldr	s15, [r3]
 800c43e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c442:	4b2b      	ldr	r3, [pc, #172]	; (800c4f0 <mahony_ahrs_updateIMU+0x678>)
 800c444:	edd3 7a00 	vldr	s15, [r3]
 800c448:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800c44c:	4b28      	ldr	r3, [pc, #160]	; (800c4f0 <mahony_ahrs_updateIMU+0x678>)
 800c44e:	edd3 7a00 	vldr	s15, [r3]
 800c452:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c456:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c45a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c45e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c462:	ee17 0a90 	vmov	r0, s15
 800c466:	f7f4 f827 	bl	80004b8 <__aeabi_f2d>
 800c46a:	4602      	mov	r2, r0
 800c46c:	460b      	mov	r3, r1
 800c46e:	ec43 2b11 	vmov	d1, r2, r3
 800c472:	ec45 4b10 	vmov	d0, r4, r5
 800c476:	f000 f9dd 	bl	800c834 <atan2>
 800c47a:	ec51 0b10 	vmov	r0, r1, d0
 800c47e:	a310      	add	r3, pc, #64	; (adr r3, 800c4c0 <mahony_ahrs_updateIMU+0x648>)
 800c480:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c484:	f7f4 f870 	bl	8000568 <__aeabi_dmul>
 800c488:	4602      	mov	r2, r0
 800c48a:	460b      	mov	r3, r1
 800c48c:	4610      	mov	r0, r2
 800c48e:	4619      	mov	r1, r3
 800c490:	f7f4 fb1a 	bl	8000ac8 <__aeabi_d2f>
 800c494:	4602      	mov	r2, r0
 800c496:	683b      	ldr	r3, [r7, #0]
 800c498:	601a      	str	r2, [r3, #0]
  atti->pitch = asin(-2 * q1 * q3 + 2 * q0 * q2) * 57.3;                                // pitch    -pi/2----pi/2
 800c49a:	4b14      	ldr	r3, [pc, #80]	; (800c4ec <mahony_ahrs_updateIMU+0x674>)
 800c49c:	edd3 7a00 	vldr	s15, [r3]
 800c4a0:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 800c4a4:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c4a8:	4b12      	ldr	r3, [pc, #72]	; (800c4f4 <mahony_ahrs_updateIMU+0x67c>)
 800c4aa:	edd3 7a00 	vldr	s15, [r3]
 800c4ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c4b2:	4b0d      	ldr	r3, [pc, #52]	; (800c4e8 <mahony_ahrs_updateIMU+0x670>)
 800c4b4:	edd3 7a00 	vldr	s15, [r3]
 800c4b8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800c4bc:	e01c      	b.n	800c4f8 <mahony_ahrs_updateIMU+0x680>
 800c4be:	bf00      	nop
 800c4c0:	66666666 	.word	0x66666666
 800c4c4:	404ca666 	.word	0x404ca666
 800c4c8:	20005d20 	.word	0x20005d20
 800c4cc:	20005d24 	.word	0x20005d24
 800c4d0:	20005d28 	.word	0x20005d28
 800c4d4:	20000104 	.word	0x20000104
 800c4d8:	20005d2c 	.word	0x20005d2c
 800c4dc:	20005d30 	.word	0x20005d30
 800c4e0:	20005d34 	.word	0x20005d34
 800c4e4:	3a83126f 	.word	0x3a83126f
 800c4e8:	2000010c 	.word	0x2000010c
 800c4ec:	20005d14 	.word	0x20005d14
 800c4f0:	20005d18 	.word	0x20005d18
 800c4f4:	20005d1c 	.word	0x20005d1c
 800c4f8:	4b3f      	ldr	r3, [pc, #252]	; (800c5f8 <mahony_ahrs_updateIMU+0x780>)
 800c4fa:	edd3 7a00 	vldr	s15, [r3]
 800c4fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c502:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c506:	ee17 0a90 	vmov	r0, s15
 800c50a:	f7f3 ffd5 	bl	80004b8 <__aeabi_f2d>
 800c50e:	4602      	mov	r2, r0
 800c510:	460b      	mov	r3, r1
 800c512:	ec43 2b10 	vmov	d0, r2, r3
 800c516:	f000 f959 	bl	800c7cc <asin>
 800c51a:	ec51 0b10 	vmov	r0, r1, d0
 800c51e:	a334      	add	r3, pc, #208	; (adr r3, 800c5f0 <mahony_ahrs_updateIMU+0x778>)
 800c520:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c524:	f7f4 f820 	bl	8000568 <__aeabi_dmul>
 800c528:	4602      	mov	r2, r0
 800c52a:	460b      	mov	r3, r1
 800c52c:	4610      	mov	r0, r2
 800c52e:	4619      	mov	r1, r3
 800c530:	f7f4 faca 	bl	8000ac8 <__aeabi_d2f>
 800c534:	4602      	mov	r2, r0
 800c536:	683b      	ldr	r3, [r7, #0]
 800c538:	605a      	str	r2, [r3, #4]
  atti->yaw = atan2(2 * q1 * q2 + 2 * q0 * q3, -2 * q2 * q2 - 2 * q3 * q3 + 1) * 57.3;  // yaw      -pi----pi
 800c53a:	4b30      	ldr	r3, [pc, #192]	; (800c5fc <mahony_ahrs_updateIMU+0x784>)
 800c53c:	edd3 7a00 	vldr	s15, [r3]
 800c540:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800c544:	4b2c      	ldr	r3, [pc, #176]	; (800c5f8 <mahony_ahrs_updateIMU+0x780>)
 800c546:	edd3 7a00 	vldr	s15, [r3]
 800c54a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c54e:	4b2c      	ldr	r3, [pc, #176]	; (800c600 <mahony_ahrs_updateIMU+0x788>)
 800c550:	edd3 7a00 	vldr	s15, [r3]
 800c554:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800c558:	4b2a      	ldr	r3, [pc, #168]	; (800c604 <mahony_ahrs_updateIMU+0x78c>)
 800c55a:	edd3 7a00 	vldr	s15, [r3]
 800c55e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c562:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c566:	ee17 0a90 	vmov	r0, s15
 800c56a:	f7f3 ffa5 	bl	80004b8 <__aeabi_f2d>
 800c56e:	4604      	mov	r4, r0
 800c570:	460d      	mov	r5, r1
 800c572:	4b21      	ldr	r3, [pc, #132]	; (800c5f8 <mahony_ahrs_updateIMU+0x780>)
 800c574:	edd3 7a00 	vldr	s15, [r3]
 800c578:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 800c57c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c580:	4b1d      	ldr	r3, [pc, #116]	; (800c5f8 <mahony_ahrs_updateIMU+0x780>)
 800c582:	edd3 7a00 	vldr	s15, [r3]
 800c586:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c58a:	4b1e      	ldr	r3, [pc, #120]	; (800c604 <mahony_ahrs_updateIMU+0x78c>)
 800c58c:	edd3 7a00 	vldr	s15, [r3]
 800c590:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800c594:	4b1b      	ldr	r3, [pc, #108]	; (800c604 <mahony_ahrs_updateIMU+0x78c>)
 800c596:	edd3 7a00 	vldr	s15, [r3]
 800c59a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c59e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c5a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c5a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c5aa:	ee17 0a90 	vmov	r0, s15
 800c5ae:	f7f3 ff83 	bl	80004b8 <__aeabi_f2d>
 800c5b2:	4602      	mov	r2, r0
 800c5b4:	460b      	mov	r3, r1
 800c5b6:	ec43 2b11 	vmov	d1, r2, r3
 800c5ba:	ec45 4b10 	vmov	d0, r4, r5
 800c5be:	f000 f939 	bl	800c834 <atan2>
 800c5c2:	ec51 0b10 	vmov	r0, r1, d0
 800c5c6:	a30a      	add	r3, pc, #40	; (adr r3, 800c5f0 <mahony_ahrs_updateIMU+0x778>)
 800c5c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5cc:	f7f3 ffcc 	bl	8000568 <__aeabi_dmul>
 800c5d0:	4602      	mov	r2, r0
 800c5d2:	460b      	mov	r3, r1
 800c5d4:	4610      	mov	r0, r2
 800c5d6:	4619      	mov	r1, r3
 800c5d8:	f7f4 fa76 	bl	8000ac8 <__aeabi_d2f>
 800c5dc:	4602      	mov	r2, r0
 800c5de:	683b      	ldr	r3, [r7, #0]
 800c5e0:	609a      	str	r2, [r3, #8]
}
 800c5e2:	bf00      	nop
 800c5e4:	3730      	adds	r7, #48	; 0x30
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	bdb0      	pop	{r4, r5, r7, pc}
 800c5ea:	bf00      	nop
 800c5ec:	f3af 8000 	nop.w
 800c5f0:	66666666 	.word	0x66666666
 800c5f4:	404ca666 	.word	0x404ca666
 800c5f8:	20005d18 	.word	0x20005d18
 800c5fc:	20005d14 	.word	0x20005d14
 800c600:	2000010c 	.word	0x2000010c
 800c604:	20005d1c 	.word	0x20005d1c

0800c608 <memset>:
 800c608:	4402      	add	r2, r0
 800c60a:	4603      	mov	r3, r0
 800c60c:	4293      	cmp	r3, r2
 800c60e:	d100      	bne.n	800c612 <memset+0xa>
 800c610:	4770      	bx	lr
 800c612:	f803 1b01 	strb.w	r1, [r3], #1
 800c616:	e7f9      	b.n	800c60c <memset+0x4>

0800c618 <_reclaim_reent>:
 800c618:	4b29      	ldr	r3, [pc, #164]	; (800c6c0 <_reclaim_reent+0xa8>)
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	4283      	cmp	r3, r0
 800c61e:	b570      	push	{r4, r5, r6, lr}
 800c620:	4604      	mov	r4, r0
 800c622:	d04b      	beq.n	800c6bc <_reclaim_reent+0xa4>
 800c624:	69c3      	ldr	r3, [r0, #28]
 800c626:	b143      	cbz	r3, 800c63a <_reclaim_reent+0x22>
 800c628:	68db      	ldr	r3, [r3, #12]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d144      	bne.n	800c6b8 <_reclaim_reent+0xa0>
 800c62e:	69e3      	ldr	r3, [r4, #28]
 800c630:	6819      	ldr	r1, [r3, #0]
 800c632:	b111      	cbz	r1, 800c63a <_reclaim_reent+0x22>
 800c634:	4620      	mov	r0, r4
 800c636:	f000 f871 	bl	800c71c <_free_r>
 800c63a:	6961      	ldr	r1, [r4, #20]
 800c63c:	b111      	cbz	r1, 800c644 <_reclaim_reent+0x2c>
 800c63e:	4620      	mov	r0, r4
 800c640:	f000 f86c 	bl	800c71c <_free_r>
 800c644:	69e1      	ldr	r1, [r4, #28]
 800c646:	b111      	cbz	r1, 800c64e <_reclaim_reent+0x36>
 800c648:	4620      	mov	r0, r4
 800c64a:	f000 f867 	bl	800c71c <_free_r>
 800c64e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c650:	b111      	cbz	r1, 800c658 <_reclaim_reent+0x40>
 800c652:	4620      	mov	r0, r4
 800c654:	f000 f862 	bl	800c71c <_free_r>
 800c658:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c65a:	b111      	cbz	r1, 800c662 <_reclaim_reent+0x4a>
 800c65c:	4620      	mov	r0, r4
 800c65e:	f000 f85d 	bl	800c71c <_free_r>
 800c662:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c664:	b111      	cbz	r1, 800c66c <_reclaim_reent+0x54>
 800c666:	4620      	mov	r0, r4
 800c668:	f000 f858 	bl	800c71c <_free_r>
 800c66c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c66e:	b111      	cbz	r1, 800c676 <_reclaim_reent+0x5e>
 800c670:	4620      	mov	r0, r4
 800c672:	f000 f853 	bl	800c71c <_free_r>
 800c676:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800c678:	b111      	cbz	r1, 800c680 <_reclaim_reent+0x68>
 800c67a:	4620      	mov	r0, r4
 800c67c:	f000 f84e 	bl	800c71c <_free_r>
 800c680:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800c682:	b111      	cbz	r1, 800c68a <_reclaim_reent+0x72>
 800c684:	4620      	mov	r0, r4
 800c686:	f000 f849 	bl	800c71c <_free_r>
 800c68a:	6a23      	ldr	r3, [r4, #32]
 800c68c:	b1b3      	cbz	r3, 800c6bc <_reclaim_reent+0xa4>
 800c68e:	4620      	mov	r0, r4
 800c690:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c694:	4718      	bx	r3
 800c696:	5949      	ldr	r1, [r1, r5]
 800c698:	b941      	cbnz	r1, 800c6ac <_reclaim_reent+0x94>
 800c69a:	3504      	adds	r5, #4
 800c69c:	69e3      	ldr	r3, [r4, #28]
 800c69e:	2d80      	cmp	r5, #128	; 0x80
 800c6a0:	68d9      	ldr	r1, [r3, #12]
 800c6a2:	d1f8      	bne.n	800c696 <_reclaim_reent+0x7e>
 800c6a4:	4620      	mov	r0, r4
 800c6a6:	f000 f839 	bl	800c71c <_free_r>
 800c6aa:	e7c0      	b.n	800c62e <_reclaim_reent+0x16>
 800c6ac:	680e      	ldr	r6, [r1, #0]
 800c6ae:	4620      	mov	r0, r4
 800c6b0:	f000 f834 	bl	800c71c <_free_r>
 800c6b4:	4631      	mov	r1, r6
 800c6b6:	e7ef      	b.n	800c698 <_reclaim_reent+0x80>
 800c6b8:	2500      	movs	r5, #0
 800c6ba:	e7ef      	b.n	800c69c <_reclaim_reent+0x84>
 800c6bc:	bd70      	pop	{r4, r5, r6, pc}
 800c6be:	bf00      	nop
 800c6c0:	2000015c 	.word	0x2000015c

0800c6c4 <__errno>:
 800c6c4:	4b01      	ldr	r3, [pc, #4]	; (800c6cc <__errno+0x8>)
 800c6c6:	6818      	ldr	r0, [r3, #0]
 800c6c8:	4770      	bx	lr
 800c6ca:	bf00      	nop
 800c6cc:	2000015c 	.word	0x2000015c

0800c6d0 <__libc_init_array>:
 800c6d0:	b570      	push	{r4, r5, r6, lr}
 800c6d2:	4d0d      	ldr	r5, [pc, #52]	; (800c708 <__libc_init_array+0x38>)
 800c6d4:	4c0d      	ldr	r4, [pc, #52]	; (800c70c <__libc_init_array+0x3c>)
 800c6d6:	1b64      	subs	r4, r4, r5
 800c6d8:	10a4      	asrs	r4, r4, #2
 800c6da:	2600      	movs	r6, #0
 800c6dc:	42a6      	cmp	r6, r4
 800c6de:	d109      	bne.n	800c6f4 <__libc_init_array+0x24>
 800c6e0:	4d0b      	ldr	r5, [pc, #44]	; (800c710 <__libc_init_array+0x40>)
 800c6e2:	4c0c      	ldr	r4, [pc, #48]	; (800c714 <__libc_init_array+0x44>)
 800c6e4:	f000 fe10 	bl	800d308 <_init>
 800c6e8:	1b64      	subs	r4, r4, r5
 800c6ea:	10a4      	asrs	r4, r4, #2
 800c6ec:	2600      	movs	r6, #0
 800c6ee:	42a6      	cmp	r6, r4
 800c6f0:	d105      	bne.n	800c6fe <__libc_init_array+0x2e>
 800c6f2:	bd70      	pop	{r4, r5, r6, pc}
 800c6f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800c6f8:	4798      	blx	r3
 800c6fa:	3601      	adds	r6, #1
 800c6fc:	e7ee      	b.n	800c6dc <__libc_init_array+0xc>
 800c6fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800c702:	4798      	blx	r3
 800c704:	3601      	adds	r6, #1
 800c706:	e7f2      	b.n	800c6ee <__libc_init_array+0x1e>
 800c708:	0800d478 	.word	0x0800d478
 800c70c:	0800d478 	.word	0x0800d478
 800c710:	0800d478 	.word	0x0800d478
 800c714:	0800d47c 	.word	0x0800d47c

0800c718 <__retarget_lock_acquire_recursive>:
 800c718:	4770      	bx	lr

0800c71a <__retarget_lock_release_recursive>:
 800c71a:	4770      	bx	lr

0800c71c <_free_r>:
 800c71c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c71e:	2900      	cmp	r1, #0
 800c720:	d044      	beq.n	800c7ac <_free_r+0x90>
 800c722:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c726:	9001      	str	r0, [sp, #4]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	f1a1 0404 	sub.w	r4, r1, #4
 800c72e:	bfb8      	it	lt
 800c730:	18e4      	addlt	r4, r4, r3
 800c732:	f000 f83f 	bl	800c7b4 <__malloc_lock>
 800c736:	4a1e      	ldr	r2, [pc, #120]	; (800c7b0 <_free_r+0x94>)
 800c738:	9801      	ldr	r0, [sp, #4]
 800c73a:	6813      	ldr	r3, [r2, #0]
 800c73c:	b933      	cbnz	r3, 800c74c <_free_r+0x30>
 800c73e:	6063      	str	r3, [r4, #4]
 800c740:	6014      	str	r4, [r2, #0]
 800c742:	b003      	add	sp, #12
 800c744:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c748:	f000 b83a 	b.w	800c7c0 <__malloc_unlock>
 800c74c:	42a3      	cmp	r3, r4
 800c74e:	d908      	bls.n	800c762 <_free_r+0x46>
 800c750:	6825      	ldr	r5, [r4, #0]
 800c752:	1961      	adds	r1, r4, r5
 800c754:	428b      	cmp	r3, r1
 800c756:	bf01      	itttt	eq
 800c758:	6819      	ldreq	r1, [r3, #0]
 800c75a:	685b      	ldreq	r3, [r3, #4]
 800c75c:	1949      	addeq	r1, r1, r5
 800c75e:	6021      	streq	r1, [r4, #0]
 800c760:	e7ed      	b.n	800c73e <_free_r+0x22>
 800c762:	461a      	mov	r2, r3
 800c764:	685b      	ldr	r3, [r3, #4]
 800c766:	b10b      	cbz	r3, 800c76c <_free_r+0x50>
 800c768:	42a3      	cmp	r3, r4
 800c76a:	d9fa      	bls.n	800c762 <_free_r+0x46>
 800c76c:	6811      	ldr	r1, [r2, #0]
 800c76e:	1855      	adds	r5, r2, r1
 800c770:	42a5      	cmp	r5, r4
 800c772:	d10b      	bne.n	800c78c <_free_r+0x70>
 800c774:	6824      	ldr	r4, [r4, #0]
 800c776:	4421      	add	r1, r4
 800c778:	1854      	adds	r4, r2, r1
 800c77a:	42a3      	cmp	r3, r4
 800c77c:	6011      	str	r1, [r2, #0]
 800c77e:	d1e0      	bne.n	800c742 <_free_r+0x26>
 800c780:	681c      	ldr	r4, [r3, #0]
 800c782:	685b      	ldr	r3, [r3, #4]
 800c784:	6053      	str	r3, [r2, #4]
 800c786:	440c      	add	r4, r1
 800c788:	6014      	str	r4, [r2, #0]
 800c78a:	e7da      	b.n	800c742 <_free_r+0x26>
 800c78c:	d902      	bls.n	800c794 <_free_r+0x78>
 800c78e:	230c      	movs	r3, #12
 800c790:	6003      	str	r3, [r0, #0]
 800c792:	e7d6      	b.n	800c742 <_free_r+0x26>
 800c794:	6825      	ldr	r5, [r4, #0]
 800c796:	1961      	adds	r1, r4, r5
 800c798:	428b      	cmp	r3, r1
 800c79a:	bf04      	itt	eq
 800c79c:	6819      	ldreq	r1, [r3, #0]
 800c79e:	685b      	ldreq	r3, [r3, #4]
 800c7a0:	6063      	str	r3, [r4, #4]
 800c7a2:	bf04      	itt	eq
 800c7a4:	1949      	addeq	r1, r1, r5
 800c7a6:	6021      	streq	r1, [r4, #0]
 800c7a8:	6054      	str	r4, [r2, #4]
 800c7aa:	e7ca      	b.n	800c742 <_free_r+0x26>
 800c7ac:	b003      	add	sp, #12
 800c7ae:	bd30      	pop	{r4, r5, pc}
 800c7b0:	20005e8c 	.word	0x20005e8c

0800c7b4 <__malloc_lock>:
 800c7b4:	4801      	ldr	r0, [pc, #4]	; (800c7bc <__malloc_lock+0x8>)
 800c7b6:	f7ff bfaf 	b.w	800c718 <__retarget_lock_acquire_recursive>
 800c7ba:	bf00      	nop
 800c7bc:	20005e88 	.word	0x20005e88

0800c7c0 <__malloc_unlock>:
 800c7c0:	4801      	ldr	r0, [pc, #4]	; (800c7c8 <__malloc_unlock+0x8>)
 800c7c2:	f7ff bfaa 	b.w	800c71a <__retarget_lock_release_recursive>
 800c7c6:	bf00      	nop
 800c7c8:	20005e88 	.word	0x20005e88

0800c7cc <asin>:
 800c7cc:	b538      	push	{r3, r4, r5, lr}
 800c7ce:	ed2d 8b02 	vpush	{d8}
 800c7d2:	ec55 4b10 	vmov	r4, r5, d0
 800c7d6:	f000 f82f 	bl	800c838 <__ieee754_asin>
 800c7da:	4622      	mov	r2, r4
 800c7dc:	462b      	mov	r3, r5
 800c7de:	4620      	mov	r0, r4
 800c7e0:	4629      	mov	r1, r5
 800c7e2:	eeb0 8a40 	vmov.f32	s16, s0
 800c7e6:	eef0 8a60 	vmov.f32	s17, s1
 800c7ea:	f7f4 f957 	bl	8000a9c <__aeabi_dcmpun>
 800c7ee:	b9a8      	cbnz	r0, 800c81c <asin+0x50>
 800c7f0:	ec45 4b10 	vmov	d0, r4, r5
 800c7f4:	f000 fc9c 	bl	800d130 <fabs>
 800c7f8:	4b0c      	ldr	r3, [pc, #48]	; (800c82c <asin+0x60>)
 800c7fa:	ec51 0b10 	vmov	r0, r1, d0
 800c7fe:	2200      	movs	r2, #0
 800c800:	f7f4 f942 	bl	8000a88 <__aeabi_dcmpgt>
 800c804:	b150      	cbz	r0, 800c81c <asin+0x50>
 800c806:	f7ff ff5d 	bl	800c6c4 <__errno>
 800c80a:	ecbd 8b02 	vpop	{d8}
 800c80e:	2321      	movs	r3, #33	; 0x21
 800c810:	6003      	str	r3, [r0, #0]
 800c812:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c816:	4806      	ldr	r0, [pc, #24]	; (800c830 <asin+0x64>)
 800c818:	f000 bd6e 	b.w	800d2f8 <nan>
 800c81c:	eeb0 0a48 	vmov.f32	s0, s16
 800c820:	eef0 0a68 	vmov.f32	s1, s17
 800c824:	ecbd 8b02 	vpop	{d8}
 800c828:	bd38      	pop	{r3, r4, r5, pc}
 800c82a:	bf00      	nop
 800c82c:	3ff00000 	.word	0x3ff00000
 800c830:	0800d3f8 	.word	0x0800d3f8

0800c834 <atan2>:
 800c834:	f000 ba14 	b.w	800cc60 <__ieee754_atan2>

0800c838 <__ieee754_asin>:
 800c838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c83c:	ed2d 8b04 	vpush	{d8-d9}
 800c840:	ec55 4b10 	vmov	r4, r5, d0
 800c844:	4bcc      	ldr	r3, [pc, #816]	; (800cb78 <__ieee754_asin+0x340>)
 800c846:	b083      	sub	sp, #12
 800c848:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800c84c:	4598      	cmp	r8, r3
 800c84e:	9501      	str	r5, [sp, #4]
 800c850:	dd33      	ble.n	800c8ba <__ieee754_asin+0x82>
 800c852:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 800c856:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 800c85a:	ea58 0804 	orrs.w	r8, r8, r4
 800c85e:	d117      	bne.n	800c890 <__ieee754_asin+0x58>
 800c860:	a3ab      	add	r3, pc, #684	; (adr r3, 800cb10 <__ieee754_asin+0x2d8>)
 800c862:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c866:	ee10 0a10 	vmov	r0, s0
 800c86a:	4629      	mov	r1, r5
 800c86c:	f7f3 fe7c 	bl	8000568 <__aeabi_dmul>
 800c870:	a3a9      	add	r3, pc, #676	; (adr r3, 800cb18 <__ieee754_asin+0x2e0>)
 800c872:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c876:	4606      	mov	r6, r0
 800c878:	460f      	mov	r7, r1
 800c87a:	4620      	mov	r0, r4
 800c87c:	4629      	mov	r1, r5
 800c87e:	f7f3 fe73 	bl	8000568 <__aeabi_dmul>
 800c882:	4602      	mov	r2, r0
 800c884:	460b      	mov	r3, r1
 800c886:	4630      	mov	r0, r6
 800c888:	4639      	mov	r1, r7
 800c88a:	f7f3 fcb7 	bl	80001fc <__adddf3>
 800c88e:	e00b      	b.n	800c8a8 <__ieee754_asin+0x70>
 800c890:	ee10 2a10 	vmov	r2, s0
 800c894:	462b      	mov	r3, r5
 800c896:	ee10 0a10 	vmov	r0, s0
 800c89a:	4629      	mov	r1, r5
 800c89c:	f7f3 fcac 	bl	80001f8 <__aeabi_dsub>
 800c8a0:	4602      	mov	r2, r0
 800c8a2:	460b      	mov	r3, r1
 800c8a4:	f7f3 ff8a 	bl	80007bc <__aeabi_ddiv>
 800c8a8:	4604      	mov	r4, r0
 800c8aa:	460d      	mov	r5, r1
 800c8ac:	ec45 4b10 	vmov	d0, r4, r5
 800c8b0:	b003      	add	sp, #12
 800c8b2:	ecbd 8b04 	vpop	{d8-d9}
 800c8b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8ba:	4bb0      	ldr	r3, [pc, #704]	; (800cb7c <__ieee754_asin+0x344>)
 800c8bc:	4598      	cmp	r8, r3
 800c8be:	dc11      	bgt.n	800c8e4 <__ieee754_asin+0xac>
 800c8c0:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800c8c4:	f280 80ae 	bge.w	800ca24 <__ieee754_asin+0x1ec>
 800c8c8:	a395      	add	r3, pc, #596	; (adr r3, 800cb20 <__ieee754_asin+0x2e8>)
 800c8ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ce:	ee10 0a10 	vmov	r0, s0
 800c8d2:	4629      	mov	r1, r5
 800c8d4:	f7f3 fc92 	bl	80001fc <__adddf3>
 800c8d8:	4ba9      	ldr	r3, [pc, #676]	; (800cb80 <__ieee754_asin+0x348>)
 800c8da:	2200      	movs	r2, #0
 800c8dc:	f7f4 f8d4 	bl	8000a88 <__aeabi_dcmpgt>
 800c8e0:	2800      	cmp	r0, #0
 800c8e2:	d1e3      	bne.n	800c8ac <__ieee754_asin+0x74>
 800c8e4:	ec45 4b10 	vmov	d0, r4, r5
 800c8e8:	f000 fc22 	bl	800d130 <fabs>
 800c8ec:	49a4      	ldr	r1, [pc, #656]	; (800cb80 <__ieee754_asin+0x348>)
 800c8ee:	ec53 2b10 	vmov	r2, r3, d0
 800c8f2:	2000      	movs	r0, #0
 800c8f4:	f7f3 fc80 	bl	80001f8 <__aeabi_dsub>
 800c8f8:	4ba2      	ldr	r3, [pc, #648]	; (800cb84 <__ieee754_asin+0x34c>)
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	f7f3 fe34 	bl	8000568 <__aeabi_dmul>
 800c900:	a389      	add	r3, pc, #548	; (adr r3, 800cb28 <__ieee754_asin+0x2f0>)
 800c902:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c906:	4604      	mov	r4, r0
 800c908:	460d      	mov	r5, r1
 800c90a:	f7f3 fe2d 	bl	8000568 <__aeabi_dmul>
 800c90e:	a388      	add	r3, pc, #544	; (adr r3, 800cb30 <__ieee754_asin+0x2f8>)
 800c910:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c914:	f7f3 fc72 	bl	80001fc <__adddf3>
 800c918:	4622      	mov	r2, r4
 800c91a:	462b      	mov	r3, r5
 800c91c:	f7f3 fe24 	bl	8000568 <__aeabi_dmul>
 800c920:	a385      	add	r3, pc, #532	; (adr r3, 800cb38 <__ieee754_asin+0x300>)
 800c922:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c926:	f7f3 fc67 	bl	80001f8 <__aeabi_dsub>
 800c92a:	4622      	mov	r2, r4
 800c92c:	462b      	mov	r3, r5
 800c92e:	f7f3 fe1b 	bl	8000568 <__aeabi_dmul>
 800c932:	a383      	add	r3, pc, #524	; (adr r3, 800cb40 <__ieee754_asin+0x308>)
 800c934:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c938:	f7f3 fc60 	bl	80001fc <__adddf3>
 800c93c:	4622      	mov	r2, r4
 800c93e:	462b      	mov	r3, r5
 800c940:	f7f3 fe12 	bl	8000568 <__aeabi_dmul>
 800c944:	a380      	add	r3, pc, #512	; (adr r3, 800cb48 <__ieee754_asin+0x310>)
 800c946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c94a:	f7f3 fc55 	bl	80001f8 <__aeabi_dsub>
 800c94e:	4622      	mov	r2, r4
 800c950:	462b      	mov	r3, r5
 800c952:	f7f3 fe09 	bl	8000568 <__aeabi_dmul>
 800c956:	a37e      	add	r3, pc, #504	; (adr r3, 800cb50 <__ieee754_asin+0x318>)
 800c958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c95c:	f7f3 fc4e 	bl	80001fc <__adddf3>
 800c960:	4622      	mov	r2, r4
 800c962:	462b      	mov	r3, r5
 800c964:	f7f3 fe00 	bl	8000568 <__aeabi_dmul>
 800c968:	a37b      	add	r3, pc, #492	; (adr r3, 800cb58 <__ieee754_asin+0x320>)
 800c96a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c96e:	ec41 0b18 	vmov	d8, r0, r1
 800c972:	4620      	mov	r0, r4
 800c974:	4629      	mov	r1, r5
 800c976:	f7f3 fdf7 	bl	8000568 <__aeabi_dmul>
 800c97a:	a379      	add	r3, pc, #484	; (adr r3, 800cb60 <__ieee754_asin+0x328>)
 800c97c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c980:	f7f3 fc3a 	bl	80001f8 <__aeabi_dsub>
 800c984:	4622      	mov	r2, r4
 800c986:	462b      	mov	r3, r5
 800c988:	f7f3 fdee 	bl	8000568 <__aeabi_dmul>
 800c98c:	a376      	add	r3, pc, #472	; (adr r3, 800cb68 <__ieee754_asin+0x330>)
 800c98e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c992:	f7f3 fc33 	bl	80001fc <__adddf3>
 800c996:	4622      	mov	r2, r4
 800c998:	462b      	mov	r3, r5
 800c99a:	f7f3 fde5 	bl	8000568 <__aeabi_dmul>
 800c99e:	a374      	add	r3, pc, #464	; (adr r3, 800cb70 <__ieee754_asin+0x338>)
 800c9a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9a4:	f7f3 fc28 	bl	80001f8 <__aeabi_dsub>
 800c9a8:	4622      	mov	r2, r4
 800c9aa:	462b      	mov	r3, r5
 800c9ac:	f7f3 fddc 	bl	8000568 <__aeabi_dmul>
 800c9b0:	4b73      	ldr	r3, [pc, #460]	; (800cb80 <__ieee754_asin+0x348>)
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	f7f3 fc22 	bl	80001fc <__adddf3>
 800c9b8:	ec45 4b10 	vmov	d0, r4, r5
 800c9bc:	4606      	mov	r6, r0
 800c9be:	460f      	mov	r7, r1
 800c9c0:	f000 fbc0 	bl	800d144 <__ieee754_sqrt>
 800c9c4:	4b70      	ldr	r3, [pc, #448]	; (800cb88 <__ieee754_asin+0x350>)
 800c9c6:	4598      	cmp	r8, r3
 800c9c8:	ec5b ab10 	vmov	sl, fp, d0
 800c9cc:	f340 80de 	ble.w	800cb8c <__ieee754_asin+0x354>
 800c9d0:	4632      	mov	r2, r6
 800c9d2:	463b      	mov	r3, r7
 800c9d4:	ec51 0b18 	vmov	r0, r1, d8
 800c9d8:	f7f3 fef0 	bl	80007bc <__aeabi_ddiv>
 800c9dc:	4652      	mov	r2, sl
 800c9de:	465b      	mov	r3, fp
 800c9e0:	f7f3 fdc2 	bl	8000568 <__aeabi_dmul>
 800c9e4:	4652      	mov	r2, sl
 800c9e6:	465b      	mov	r3, fp
 800c9e8:	f7f3 fc08 	bl	80001fc <__adddf3>
 800c9ec:	4602      	mov	r2, r0
 800c9ee:	460b      	mov	r3, r1
 800c9f0:	f7f3 fc04 	bl	80001fc <__adddf3>
 800c9f4:	a348      	add	r3, pc, #288	; (adr r3, 800cb18 <__ieee754_asin+0x2e0>)
 800c9f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9fa:	f7f3 fbfd 	bl	80001f8 <__aeabi_dsub>
 800c9fe:	4602      	mov	r2, r0
 800ca00:	460b      	mov	r3, r1
 800ca02:	a143      	add	r1, pc, #268	; (adr r1, 800cb10 <__ieee754_asin+0x2d8>)
 800ca04:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca08:	f7f3 fbf6 	bl	80001f8 <__aeabi_dsub>
 800ca0c:	9b01      	ldr	r3, [sp, #4]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	bfdc      	itt	le
 800ca12:	4602      	movle	r2, r0
 800ca14:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 800ca18:	4604      	mov	r4, r0
 800ca1a:	460d      	mov	r5, r1
 800ca1c:	bfdc      	itt	le
 800ca1e:	4614      	movle	r4, r2
 800ca20:	461d      	movle	r5, r3
 800ca22:	e743      	b.n	800c8ac <__ieee754_asin+0x74>
 800ca24:	ee10 2a10 	vmov	r2, s0
 800ca28:	ee10 0a10 	vmov	r0, s0
 800ca2c:	462b      	mov	r3, r5
 800ca2e:	4629      	mov	r1, r5
 800ca30:	f7f3 fd9a 	bl	8000568 <__aeabi_dmul>
 800ca34:	a33c      	add	r3, pc, #240	; (adr r3, 800cb28 <__ieee754_asin+0x2f0>)
 800ca36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca3a:	4606      	mov	r6, r0
 800ca3c:	460f      	mov	r7, r1
 800ca3e:	f7f3 fd93 	bl	8000568 <__aeabi_dmul>
 800ca42:	a33b      	add	r3, pc, #236	; (adr r3, 800cb30 <__ieee754_asin+0x2f8>)
 800ca44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca48:	f7f3 fbd8 	bl	80001fc <__adddf3>
 800ca4c:	4632      	mov	r2, r6
 800ca4e:	463b      	mov	r3, r7
 800ca50:	f7f3 fd8a 	bl	8000568 <__aeabi_dmul>
 800ca54:	a338      	add	r3, pc, #224	; (adr r3, 800cb38 <__ieee754_asin+0x300>)
 800ca56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca5a:	f7f3 fbcd 	bl	80001f8 <__aeabi_dsub>
 800ca5e:	4632      	mov	r2, r6
 800ca60:	463b      	mov	r3, r7
 800ca62:	f7f3 fd81 	bl	8000568 <__aeabi_dmul>
 800ca66:	a336      	add	r3, pc, #216	; (adr r3, 800cb40 <__ieee754_asin+0x308>)
 800ca68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca6c:	f7f3 fbc6 	bl	80001fc <__adddf3>
 800ca70:	4632      	mov	r2, r6
 800ca72:	463b      	mov	r3, r7
 800ca74:	f7f3 fd78 	bl	8000568 <__aeabi_dmul>
 800ca78:	a333      	add	r3, pc, #204	; (adr r3, 800cb48 <__ieee754_asin+0x310>)
 800ca7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca7e:	f7f3 fbbb 	bl	80001f8 <__aeabi_dsub>
 800ca82:	4632      	mov	r2, r6
 800ca84:	463b      	mov	r3, r7
 800ca86:	f7f3 fd6f 	bl	8000568 <__aeabi_dmul>
 800ca8a:	a331      	add	r3, pc, #196	; (adr r3, 800cb50 <__ieee754_asin+0x318>)
 800ca8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca90:	f7f3 fbb4 	bl	80001fc <__adddf3>
 800ca94:	4632      	mov	r2, r6
 800ca96:	463b      	mov	r3, r7
 800ca98:	f7f3 fd66 	bl	8000568 <__aeabi_dmul>
 800ca9c:	a32e      	add	r3, pc, #184	; (adr r3, 800cb58 <__ieee754_asin+0x320>)
 800ca9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caa2:	4680      	mov	r8, r0
 800caa4:	4689      	mov	r9, r1
 800caa6:	4630      	mov	r0, r6
 800caa8:	4639      	mov	r1, r7
 800caaa:	f7f3 fd5d 	bl	8000568 <__aeabi_dmul>
 800caae:	a32c      	add	r3, pc, #176	; (adr r3, 800cb60 <__ieee754_asin+0x328>)
 800cab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cab4:	f7f3 fba0 	bl	80001f8 <__aeabi_dsub>
 800cab8:	4632      	mov	r2, r6
 800caba:	463b      	mov	r3, r7
 800cabc:	f7f3 fd54 	bl	8000568 <__aeabi_dmul>
 800cac0:	a329      	add	r3, pc, #164	; (adr r3, 800cb68 <__ieee754_asin+0x330>)
 800cac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cac6:	f7f3 fb99 	bl	80001fc <__adddf3>
 800caca:	4632      	mov	r2, r6
 800cacc:	463b      	mov	r3, r7
 800cace:	f7f3 fd4b 	bl	8000568 <__aeabi_dmul>
 800cad2:	a327      	add	r3, pc, #156	; (adr r3, 800cb70 <__ieee754_asin+0x338>)
 800cad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cad8:	f7f3 fb8e 	bl	80001f8 <__aeabi_dsub>
 800cadc:	4632      	mov	r2, r6
 800cade:	463b      	mov	r3, r7
 800cae0:	f7f3 fd42 	bl	8000568 <__aeabi_dmul>
 800cae4:	4b26      	ldr	r3, [pc, #152]	; (800cb80 <__ieee754_asin+0x348>)
 800cae6:	2200      	movs	r2, #0
 800cae8:	f7f3 fb88 	bl	80001fc <__adddf3>
 800caec:	4602      	mov	r2, r0
 800caee:	460b      	mov	r3, r1
 800caf0:	4640      	mov	r0, r8
 800caf2:	4649      	mov	r1, r9
 800caf4:	f7f3 fe62 	bl	80007bc <__aeabi_ddiv>
 800caf8:	4622      	mov	r2, r4
 800cafa:	462b      	mov	r3, r5
 800cafc:	f7f3 fd34 	bl	8000568 <__aeabi_dmul>
 800cb00:	4602      	mov	r2, r0
 800cb02:	460b      	mov	r3, r1
 800cb04:	4620      	mov	r0, r4
 800cb06:	4629      	mov	r1, r5
 800cb08:	e6bf      	b.n	800c88a <__ieee754_asin+0x52>
 800cb0a:	bf00      	nop
 800cb0c:	f3af 8000 	nop.w
 800cb10:	54442d18 	.word	0x54442d18
 800cb14:	3ff921fb 	.word	0x3ff921fb
 800cb18:	33145c07 	.word	0x33145c07
 800cb1c:	3c91a626 	.word	0x3c91a626
 800cb20:	8800759c 	.word	0x8800759c
 800cb24:	7e37e43c 	.word	0x7e37e43c
 800cb28:	0dfdf709 	.word	0x0dfdf709
 800cb2c:	3f023de1 	.word	0x3f023de1
 800cb30:	7501b288 	.word	0x7501b288
 800cb34:	3f49efe0 	.word	0x3f49efe0
 800cb38:	b5688f3b 	.word	0xb5688f3b
 800cb3c:	3fa48228 	.word	0x3fa48228
 800cb40:	0e884455 	.word	0x0e884455
 800cb44:	3fc9c155 	.word	0x3fc9c155
 800cb48:	03eb6f7d 	.word	0x03eb6f7d
 800cb4c:	3fd4d612 	.word	0x3fd4d612
 800cb50:	55555555 	.word	0x55555555
 800cb54:	3fc55555 	.word	0x3fc55555
 800cb58:	b12e9282 	.word	0xb12e9282
 800cb5c:	3fb3b8c5 	.word	0x3fb3b8c5
 800cb60:	1b8d0159 	.word	0x1b8d0159
 800cb64:	3fe6066c 	.word	0x3fe6066c
 800cb68:	9c598ac8 	.word	0x9c598ac8
 800cb6c:	40002ae5 	.word	0x40002ae5
 800cb70:	1c8a2d4b 	.word	0x1c8a2d4b
 800cb74:	40033a27 	.word	0x40033a27
 800cb78:	3fefffff 	.word	0x3fefffff
 800cb7c:	3fdfffff 	.word	0x3fdfffff
 800cb80:	3ff00000 	.word	0x3ff00000
 800cb84:	3fe00000 	.word	0x3fe00000
 800cb88:	3fef3332 	.word	0x3fef3332
 800cb8c:	ee10 2a10 	vmov	r2, s0
 800cb90:	ee10 0a10 	vmov	r0, s0
 800cb94:	465b      	mov	r3, fp
 800cb96:	4659      	mov	r1, fp
 800cb98:	f7f3 fb30 	bl	80001fc <__adddf3>
 800cb9c:	4632      	mov	r2, r6
 800cb9e:	463b      	mov	r3, r7
 800cba0:	ec41 0b19 	vmov	d9, r0, r1
 800cba4:	ec51 0b18 	vmov	r0, r1, d8
 800cba8:	f7f3 fe08 	bl	80007bc <__aeabi_ddiv>
 800cbac:	4602      	mov	r2, r0
 800cbae:	460b      	mov	r3, r1
 800cbb0:	ec51 0b19 	vmov	r0, r1, d9
 800cbb4:	f7f3 fcd8 	bl	8000568 <__aeabi_dmul>
 800cbb8:	f04f 0800 	mov.w	r8, #0
 800cbbc:	4606      	mov	r6, r0
 800cbbe:	460f      	mov	r7, r1
 800cbc0:	4642      	mov	r2, r8
 800cbc2:	465b      	mov	r3, fp
 800cbc4:	4640      	mov	r0, r8
 800cbc6:	4659      	mov	r1, fp
 800cbc8:	f7f3 fcce 	bl	8000568 <__aeabi_dmul>
 800cbcc:	4602      	mov	r2, r0
 800cbce:	460b      	mov	r3, r1
 800cbd0:	4620      	mov	r0, r4
 800cbd2:	4629      	mov	r1, r5
 800cbd4:	f7f3 fb10 	bl	80001f8 <__aeabi_dsub>
 800cbd8:	4642      	mov	r2, r8
 800cbda:	4604      	mov	r4, r0
 800cbdc:	460d      	mov	r5, r1
 800cbde:	465b      	mov	r3, fp
 800cbe0:	4650      	mov	r0, sl
 800cbe2:	4659      	mov	r1, fp
 800cbe4:	f7f3 fb0a 	bl	80001fc <__adddf3>
 800cbe8:	4602      	mov	r2, r0
 800cbea:	460b      	mov	r3, r1
 800cbec:	4620      	mov	r0, r4
 800cbee:	4629      	mov	r1, r5
 800cbf0:	f7f3 fde4 	bl	80007bc <__aeabi_ddiv>
 800cbf4:	4602      	mov	r2, r0
 800cbf6:	460b      	mov	r3, r1
 800cbf8:	f7f3 fb00 	bl	80001fc <__adddf3>
 800cbfc:	4602      	mov	r2, r0
 800cbfe:	460b      	mov	r3, r1
 800cc00:	a113      	add	r1, pc, #76	; (adr r1, 800cc50 <__ieee754_asin+0x418>)
 800cc02:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cc06:	f7f3 faf7 	bl	80001f8 <__aeabi_dsub>
 800cc0a:	4602      	mov	r2, r0
 800cc0c:	460b      	mov	r3, r1
 800cc0e:	4630      	mov	r0, r6
 800cc10:	4639      	mov	r1, r7
 800cc12:	f7f3 faf1 	bl	80001f8 <__aeabi_dsub>
 800cc16:	4642      	mov	r2, r8
 800cc18:	4604      	mov	r4, r0
 800cc1a:	460d      	mov	r5, r1
 800cc1c:	465b      	mov	r3, fp
 800cc1e:	4640      	mov	r0, r8
 800cc20:	4659      	mov	r1, fp
 800cc22:	f7f3 faeb 	bl	80001fc <__adddf3>
 800cc26:	4602      	mov	r2, r0
 800cc28:	460b      	mov	r3, r1
 800cc2a:	a10b      	add	r1, pc, #44	; (adr r1, 800cc58 <__ieee754_asin+0x420>)
 800cc2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cc30:	f7f3 fae2 	bl	80001f8 <__aeabi_dsub>
 800cc34:	4602      	mov	r2, r0
 800cc36:	460b      	mov	r3, r1
 800cc38:	4620      	mov	r0, r4
 800cc3a:	4629      	mov	r1, r5
 800cc3c:	f7f3 fadc 	bl	80001f8 <__aeabi_dsub>
 800cc40:	4602      	mov	r2, r0
 800cc42:	460b      	mov	r3, r1
 800cc44:	a104      	add	r1, pc, #16	; (adr r1, 800cc58 <__ieee754_asin+0x420>)
 800cc46:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cc4a:	e6dd      	b.n	800ca08 <__ieee754_asin+0x1d0>
 800cc4c:	f3af 8000 	nop.w
 800cc50:	33145c07 	.word	0x33145c07
 800cc54:	3c91a626 	.word	0x3c91a626
 800cc58:	54442d18 	.word	0x54442d18
 800cc5c:	3fe921fb 	.word	0x3fe921fb

0800cc60 <__ieee754_atan2>:
 800cc60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc64:	ec57 6b11 	vmov	r6, r7, d1
 800cc68:	4273      	negs	r3, r6
 800cc6a:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800cde8 <__ieee754_atan2+0x188>
 800cc6e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800cc72:	4333      	orrs	r3, r6
 800cc74:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800cc78:	4543      	cmp	r3, r8
 800cc7a:	ec51 0b10 	vmov	r0, r1, d0
 800cc7e:	ee11 5a10 	vmov	r5, s2
 800cc82:	d80a      	bhi.n	800cc9a <__ieee754_atan2+0x3a>
 800cc84:	4244      	negs	r4, r0
 800cc86:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cc8a:	4304      	orrs	r4, r0
 800cc8c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800cc90:	4544      	cmp	r4, r8
 800cc92:	ee10 9a10 	vmov	r9, s0
 800cc96:	468e      	mov	lr, r1
 800cc98:	d907      	bls.n	800ccaa <__ieee754_atan2+0x4a>
 800cc9a:	4632      	mov	r2, r6
 800cc9c:	463b      	mov	r3, r7
 800cc9e:	f7f3 faad 	bl	80001fc <__adddf3>
 800cca2:	ec41 0b10 	vmov	d0, r0, r1
 800cca6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ccaa:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800ccae:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ccb2:	4334      	orrs	r4, r6
 800ccb4:	d103      	bne.n	800ccbe <__ieee754_atan2+0x5e>
 800ccb6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ccba:	f000 b899 	b.w	800cdf0 <atan>
 800ccbe:	17bc      	asrs	r4, r7, #30
 800ccc0:	f004 0402 	and.w	r4, r4, #2
 800ccc4:	ea53 0909 	orrs.w	r9, r3, r9
 800ccc8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800cccc:	d107      	bne.n	800ccde <__ieee754_atan2+0x7e>
 800ccce:	2c02      	cmp	r4, #2
 800ccd0:	d05f      	beq.n	800cd92 <__ieee754_atan2+0x132>
 800ccd2:	2c03      	cmp	r4, #3
 800ccd4:	d1e5      	bne.n	800cca2 <__ieee754_atan2+0x42>
 800ccd6:	a140      	add	r1, pc, #256	; (adr r1, 800cdd8 <__ieee754_atan2+0x178>)
 800ccd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ccdc:	e7e1      	b.n	800cca2 <__ieee754_atan2+0x42>
 800ccde:	4315      	orrs	r5, r2
 800cce0:	d106      	bne.n	800ccf0 <__ieee754_atan2+0x90>
 800cce2:	f1be 0f00 	cmp.w	lr, #0
 800cce6:	da5f      	bge.n	800cda8 <__ieee754_atan2+0x148>
 800cce8:	a13d      	add	r1, pc, #244	; (adr r1, 800cde0 <__ieee754_atan2+0x180>)
 800ccea:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ccee:	e7d8      	b.n	800cca2 <__ieee754_atan2+0x42>
 800ccf0:	4542      	cmp	r2, r8
 800ccf2:	d10f      	bne.n	800cd14 <__ieee754_atan2+0xb4>
 800ccf4:	4293      	cmp	r3, r2
 800ccf6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800ccfa:	d107      	bne.n	800cd0c <__ieee754_atan2+0xac>
 800ccfc:	2c02      	cmp	r4, #2
 800ccfe:	d84c      	bhi.n	800cd9a <__ieee754_atan2+0x13a>
 800cd00:	4b33      	ldr	r3, [pc, #204]	; (800cdd0 <__ieee754_atan2+0x170>)
 800cd02:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cd06:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cd0a:	e7ca      	b.n	800cca2 <__ieee754_atan2+0x42>
 800cd0c:	2c02      	cmp	r4, #2
 800cd0e:	d848      	bhi.n	800cda2 <__ieee754_atan2+0x142>
 800cd10:	4b30      	ldr	r3, [pc, #192]	; (800cdd4 <__ieee754_atan2+0x174>)
 800cd12:	e7f6      	b.n	800cd02 <__ieee754_atan2+0xa2>
 800cd14:	4543      	cmp	r3, r8
 800cd16:	d0e4      	beq.n	800cce2 <__ieee754_atan2+0x82>
 800cd18:	1a9b      	subs	r3, r3, r2
 800cd1a:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800cd1e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800cd22:	da1e      	bge.n	800cd62 <__ieee754_atan2+0x102>
 800cd24:	2f00      	cmp	r7, #0
 800cd26:	da01      	bge.n	800cd2c <__ieee754_atan2+0xcc>
 800cd28:	323c      	adds	r2, #60	; 0x3c
 800cd2a:	db1e      	blt.n	800cd6a <__ieee754_atan2+0x10a>
 800cd2c:	4632      	mov	r2, r6
 800cd2e:	463b      	mov	r3, r7
 800cd30:	f7f3 fd44 	bl	80007bc <__aeabi_ddiv>
 800cd34:	ec41 0b10 	vmov	d0, r0, r1
 800cd38:	f000 f9fa 	bl	800d130 <fabs>
 800cd3c:	f000 f858 	bl	800cdf0 <atan>
 800cd40:	ec51 0b10 	vmov	r0, r1, d0
 800cd44:	2c01      	cmp	r4, #1
 800cd46:	d013      	beq.n	800cd70 <__ieee754_atan2+0x110>
 800cd48:	2c02      	cmp	r4, #2
 800cd4a:	d015      	beq.n	800cd78 <__ieee754_atan2+0x118>
 800cd4c:	2c00      	cmp	r4, #0
 800cd4e:	d0a8      	beq.n	800cca2 <__ieee754_atan2+0x42>
 800cd50:	a317      	add	r3, pc, #92	; (adr r3, 800cdb0 <__ieee754_atan2+0x150>)
 800cd52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd56:	f7f3 fa4f 	bl	80001f8 <__aeabi_dsub>
 800cd5a:	a317      	add	r3, pc, #92	; (adr r3, 800cdb8 <__ieee754_atan2+0x158>)
 800cd5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd60:	e014      	b.n	800cd8c <__ieee754_atan2+0x12c>
 800cd62:	a117      	add	r1, pc, #92	; (adr r1, 800cdc0 <__ieee754_atan2+0x160>)
 800cd64:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cd68:	e7ec      	b.n	800cd44 <__ieee754_atan2+0xe4>
 800cd6a:	2000      	movs	r0, #0
 800cd6c:	2100      	movs	r1, #0
 800cd6e:	e7e9      	b.n	800cd44 <__ieee754_atan2+0xe4>
 800cd70:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cd74:	4619      	mov	r1, r3
 800cd76:	e794      	b.n	800cca2 <__ieee754_atan2+0x42>
 800cd78:	a30d      	add	r3, pc, #52	; (adr r3, 800cdb0 <__ieee754_atan2+0x150>)
 800cd7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd7e:	f7f3 fa3b 	bl	80001f8 <__aeabi_dsub>
 800cd82:	4602      	mov	r2, r0
 800cd84:	460b      	mov	r3, r1
 800cd86:	a10c      	add	r1, pc, #48	; (adr r1, 800cdb8 <__ieee754_atan2+0x158>)
 800cd88:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cd8c:	f7f3 fa34 	bl	80001f8 <__aeabi_dsub>
 800cd90:	e787      	b.n	800cca2 <__ieee754_atan2+0x42>
 800cd92:	a109      	add	r1, pc, #36	; (adr r1, 800cdb8 <__ieee754_atan2+0x158>)
 800cd94:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cd98:	e783      	b.n	800cca2 <__ieee754_atan2+0x42>
 800cd9a:	a10b      	add	r1, pc, #44	; (adr r1, 800cdc8 <__ieee754_atan2+0x168>)
 800cd9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cda0:	e77f      	b.n	800cca2 <__ieee754_atan2+0x42>
 800cda2:	2000      	movs	r0, #0
 800cda4:	2100      	movs	r1, #0
 800cda6:	e77c      	b.n	800cca2 <__ieee754_atan2+0x42>
 800cda8:	a105      	add	r1, pc, #20	; (adr r1, 800cdc0 <__ieee754_atan2+0x160>)
 800cdaa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cdae:	e778      	b.n	800cca2 <__ieee754_atan2+0x42>
 800cdb0:	33145c07 	.word	0x33145c07
 800cdb4:	3ca1a626 	.word	0x3ca1a626
 800cdb8:	54442d18 	.word	0x54442d18
 800cdbc:	400921fb 	.word	0x400921fb
 800cdc0:	54442d18 	.word	0x54442d18
 800cdc4:	3ff921fb 	.word	0x3ff921fb
 800cdc8:	54442d18 	.word	0x54442d18
 800cdcc:	3fe921fb 	.word	0x3fe921fb
 800cdd0:	0800d400 	.word	0x0800d400
 800cdd4:	0800d418 	.word	0x0800d418
 800cdd8:	54442d18 	.word	0x54442d18
 800cddc:	c00921fb 	.word	0xc00921fb
 800cde0:	54442d18 	.word	0x54442d18
 800cde4:	bff921fb 	.word	0xbff921fb
 800cde8:	7ff00000 	.word	0x7ff00000
 800cdec:	00000000 	.word	0x00000000

0800cdf0 <atan>:
 800cdf0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdf4:	ec55 4b10 	vmov	r4, r5, d0
 800cdf8:	4bc3      	ldr	r3, [pc, #780]	; (800d108 <atan+0x318>)
 800cdfa:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800cdfe:	429e      	cmp	r6, r3
 800ce00:	46ab      	mov	fp, r5
 800ce02:	dd18      	ble.n	800ce36 <atan+0x46>
 800ce04:	4bc1      	ldr	r3, [pc, #772]	; (800d10c <atan+0x31c>)
 800ce06:	429e      	cmp	r6, r3
 800ce08:	dc01      	bgt.n	800ce0e <atan+0x1e>
 800ce0a:	d109      	bne.n	800ce20 <atan+0x30>
 800ce0c:	b144      	cbz	r4, 800ce20 <atan+0x30>
 800ce0e:	4622      	mov	r2, r4
 800ce10:	462b      	mov	r3, r5
 800ce12:	4620      	mov	r0, r4
 800ce14:	4629      	mov	r1, r5
 800ce16:	f7f3 f9f1 	bl	80001fc <__adddf3>
 800ce1a:	4604      	mov	r4, r0
 800ce1c:	460d      	mov	r5, r1
 800ce1e:	e006      	b.n	800ce2e <atan+0x3e>
 800ce20:	f1bb 0f00 	cmp.w	fp, #0
 800ce24:	f300 8131 	bgt.w	800d08a <atan+0x29a>
 800ce28:	a59b      	add	r5, pc, #620	; (adr r5, 800d098 <atan+0x2a8>)
 800ce2a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ce2e:	ec45 4b10 	vmov	d0, r4, r5
 800ce32:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce36:	4bb6      	ldr	r3, [pc, #728]	; (800d110 <atan+0x320>)
 800ce38:	429e      	cmp	r6, r3
 800ce3a:	dc14      	bgt.n	800ce66 <atan+0x76>
 800ce3c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800ce40:	429e      	cmp	r6, r3
 800ce42:	dc0d      	bgt.n	800ce60 <atan+0x70>
 800ce44:	a396      	add	r3, pc, #600	; (adr r3, 800d0a0 <atan+0x2b0>)
 800ce46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce4a:	ee10 0a10 	vmov	r0, s0
 800ce4e:	4629      	mov	r1, r5
 800ce50:	f7f3 f9d4 	bl	80001fc <__adddf3>
 800ce54:	4baf      	ldr	r3, [pc, #700]	; (800d114 <atan+0x324>)
 800ce56:	2200      	movs	r2, #0
 800ce58:	f7f3 fe16 	bl	8000a88 <__aeabi_dcmpgt>
 800ce5c:	2800      	cmp	r0, #0
 800ce5e:	d1e6      	bne.n	800ce2e <atan+0x3e>
 800ce60:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800ce64:	e02b      	b.n	800cebe <atan+0xce>
 800ce66:	f000 f963 	bl	800d130 <fabs>
 800ce6a:	4bab      	ldr	r3, [pc, #684]	; (800d118 <atan+0x328>)
 800ce6c:	429e      	cmp	r6, r3
 800ce6e:	ec55 4b10 	vmov	r4, r5, d0
 800ce72:	f300 80bf 	bgt.w	800cff4 <atan+0x204>
 800ce76:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800ce7a:	429e      	cmp	r6, r3
 800ce7c:	f300 80a0 	bgt.w	800cfc0 <atan+0x1d0>
 800ce80:	ee10 2a10 	vmov	r2, s0
 800ce84:	ee10 0a10 	vmov	r0, s0
 800ce88:	462b      	mov	r3, r5
 800ce8a:	4629      	mov	r1, r5
 800ce8c:	f7f3 f9b6 	bl	80001fc <__adddf3>
 800ce90:	4ba0      	ldr	r3, [pc, #640]	; (800d114 <atan+0x324>)
 800ce92:	2200      	movs	r2, #0
 800ce94:	f7f3 f9b0 	bl	80001f8 <__aeabi_dsub>
 800ce98:	2200      	movs	r2, #0
 800ce9a:	4606      	mov	r6, r0
 800ce9c:	460f      	mov	r7, r1
 800ce9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cea2:	4620      	mov	r0, r4
 800cea4:	4629      	mov	r1, r5
 800cea6:	f7f3 f9a9 	bl	80001fc <__adddf3>
 800ceaa:	4602      	mov	r2, r0
 800ceac:	460b      	mov	r3, r1
 800ceae:	4630      	mov	r0, r6
 800ceb0:	4639      	mov	r1, r7
 800ceb2:	f7f3 fc83 	bl	80007bc <__aeabi_ddiv>
 800ceb6:	f04f 0a00 	mov.w	sl, #0
 800ceba:	4604      	mov	r4, r0
 800cebc:	460d      	mov	r5, r1
 800cebe:	4622      	mov	r2, r4
 800cec0:	462b      	mov	r3, r5
 800cec2:	4620      	mov	r0, r4
 800cec4:	4629      	mov	r1, r5
 800cec6:	f7f3 fb4f 	bl	8000568 <__aeabi_dmul>
 800ceca:	4602      	mov	r2, r0
 800cecc:	460b      	mov	r3, r1
 800cece:	4680      	mov	r8, r0
 800ced0:	4689      	mov	r9, r1
 800ced2:	f7f3 fb49 	bl	8000568 <__aeabi_dmul>
 800ced6:	a374      	add	r3, pc, #464	; (adr r3, 800d0a8 <atan+0x2b8>)
 800ced8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cedc:	4606      	mov	r6, r0
 800cede:	460f      	mov	r7, r1
 800cee0:	f7f3 fb42 	bl	8000568 <__aeabi_dmul>
 800cee4:	a372      	add	r3, pc, #456	; (adr r3, 800d0b0 <atan+0x2c0>)
 800cee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceea:	f7f3 f987 	bl	80001fc <__adddf3>
 800ceee:	4632      	mov	r2, r6
 800cef0:	463b      	mov	r3, r7
 800cef2:	f7f3 fb39 	bl	8000568 <__aeabi_dmul>
 800cef6:	a370      	add	r3, pc, #448	; (adr r3, 800d0b8 <atan+0x2c8>)
 800cef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cefc:	f7f3 f97e 	bl	80001fc <__adddf3>
 800cf00:	4632      	mov	r2, r6
 800cf02:	463b      	mov	r3, r7
 800cf04:	f7f3 fb30 	bl	8000568 <__aeabi_dmul>
 800cf08:	a36d      	add	r3, pc, #436	; (adr r3, 800d0c0 <atan+0x2d0>)
 800cf0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf0e:	f7f3 f975 	bl	80001fc <__adddf3>
 800cf12:	4632      	mov	r2, r6
 800cf14:	463b      	mov	r3, r7
 800cf16:	f7f3 fb27 	bl	8000568 <__aeabi_dmul>
 800cf1a:	a36b      	add	r3, pc, #428	; (adr r3, 800d0c8 <atan+0x2d8>)
 800cf1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf20:	f7f3 f96c 	bl	80001fc <__adddf3>
 800cf24:	4632      	mov	r2, r6
 800cf26:	463b      	mov	r3, r7
 800cf28:	f7f3 fb1e 	bl	8000568 <__aeabi_dmul>
 800cf2c:	a368      	add	r3, pc, #416	; (adr r3, 800d0d0 <atan+0x2e0>)
 800cf2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf32:	f7f3 f963 	bl	80001fc <__adddf3>
 800cf36:	4642      	mov	r2, r8
 800cf38:	464b      	mov	r3, r9
 800cf3a:	f7f3 fb15 	bl	8000568 <__aeabi_dmul>
 800cf3e:	a366      	add	r3, pc, #408	; (adr r3, 800d0d8 <atan+0x2e8>)
 800cf40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf44:	4680      	mov	r8, r0
 800cf46:	4689      	mov	r9, r1
 800cf48:	4630      	mov	r0, r6
 800cf4a:	4639      	mov	r1, r7
 800cf4c:	f7f3 fb0c 	bl	8000568 <__aeabi_dmul>
 800cf50:	a363      	add	r3, pc, #396	; (adr r3, 800d0e0 <atan+0x2f0>)
 800cf52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf56:	f7f3 f94f 	bl	80001f8 <__aeabi_dsub>
 800cf5a:	4632      	mov	r2, r6
 800cf5c:	463b      	mov	r3, r7
 800cf5e:	f7f3 fb03 	bl	8000568 <__aeabi_dmul>
 800cf62:	a361      	add	r3, pc, #388	; (adr r3, 800d0e8 <atan+0x2f8>)
 800cf64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf68:	f7f3 f946 	bl	80001f8 <__aeabi_dsub>
 800cf6c:	4632      	mov	r2, r6
 800cf6e:	463b      	mov	r3, r7
 800cf70:	f7f3 fafa 	bl	8000568 <__aeabi_dmul>
 800cf74:	a35e      	add	r3, pc, #376	; (adr r3, 800d0f0 <atan+0x300>)
 800cf76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf7a:	f7f3 f93d 	bl	80001f8 <__aeabi_dsub>
 800cf7e:	4632      	mov	r2, r6
 800cf80:	463b      	mov	r3, r7
 800cf82:	f7f3 faf1 	bl	8000568 <__aeabi_dmul>
 800cf86:	a35c      	add	r3, pc, #368	; (adr r3, 800d0f8 <atan+0x308>)
 800cf88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf8c:	f7f3 f934 	bl	80001f8 <__aeabi_dsub>
 800cf90:	4632      	mov	r2, r6
 800cf92:	463b      	mov	r3, r7
 800cf94:	f7f3 fae8 	bl	8000568 <__aeabi_dmul>
 800cf98:	4602      	mov	r2, r0
 800cf9a:	460b      	mov	r3, r1
 800cf9c:	4640      	mov	r0, r8
 800cf9e:	4649      	mov	r1, r9
 800cfa0:	f7f3 f92c 	bl	80001fc <__adddf3>
 800cfa4:	4622      	mov	r2, r4
 800cfa6:	462b      	mov	r3, r5
 800cfa8:	f7f3 fade 	bl	8000568 <__aeabi_dmul>
 800cfac:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800cfb0:	4602      	mov	r2, r0
 800cfb2:	460b      	mov	r3, r1
 800cfb4:	d14b      	bne.n	800d04e <atan+0x25e>
 800cfb6:	4620      	mov	r0, r4
 800cfb8:	4629      	mov	r1, r5
 800cfba:	f7f3 f91d 	bl	80001f8 <__aeabi_dsub>
 800cfbe:	e72c      	b.n	800ce1a <atan+0x2a>
 800cfc0:	ee10 0a10 	vmov	r0, s0
 800cfc4:	4b53      	ldr	r3, [pc, #332]	; (800d114 <atan+0x324>)
 800cfc6:	2200      	movs	r2, #0
 800cfc8:	4629      	mov	r1, r5
 800cfca:	f7f3 f915 	bl	80001f8 <__aeabi_dsub>
 800cfce:	4b51      	ldr	r3, [pc, #324]	; (800d114 <atan+0x324>)
 800cfd0:	4606      	mov	r6, r0
 800cfd2:	460f      	mov	r7, r1
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	4620      	mov	r0, r4
 800cfd8:	4629      	mov	r1, r5
 800cfda:	f7f3 f90f 	bl	80001fc <__adddf3>
 800cfde:	4602      	mov	r2, r0
 800cfe0:	460b      	mov	r3, r1
 800cfe2:	4630      	mov	r0, r6
 800cfe4:	4639      	mov	r1, r7
 800cfe6:	f7f3 fbe9 	bl	80007bc <__aeabi_ddiv>
 800cfea:	f04f 0a01 	mov.w	sl, #1
 800cfee:	4604      	mov	r4, r0
 800cff0:	460d      	mov	r5, r1
 800cff2:	e764      	b.n	800cebe <atan+0xce>
 800cff4:	4b49      	ldr	r3, [pc, #292]	; (800d11c <atan+0x32c>)
 800cff6:	429e      	cmp	r6, r3
 800cff8:	da1d      	bge.n	800d036 <atan+0x246>
 800cffa:	ee10 0a10 	vmov	r0, s0
 800cffe:	4b48      	ldr	r3, [pc, #288]	; (800d120 <atan+0x330>)
 800d000:	2200      	movs	r2, #0
 800d002:	4629      	mov	r1, r5
 800d004:	f7f3 f8f8 	bl	80001f8 <__aeabi_dsub>
 800d008:	4b45      	ldr	r3, [pc, #276]	; (800d120 <atan+0x330>)
 800d00a:	4606      	mov	r6, r0
 800d00c:	460f      	mov	r7, r1
 800d00e:	2200      	movs	r2, #0
 800d010:	4620      	mov	r0, r4
 800d012:	4629      	mov	r1, r5
 800d014:	f7f3 faa8 	bl	8000568 <__aeabi_dmul>
 800d018:	4b3e      	ldr	r3, [pc, #248]	; (800d114 <atan+0x324>)
 800d01a:	2200      	movs	r2, #0
 800d01c:	f7f3 f8ee 	bl	80001fc <__adddf3>
 800d020:	4602      	mov	r2, r0
 800d022:	460b      	mov	r3, r1
 800d024:	4630      	mov	r0, r6
 800d026:	4639      	mov	r1, r7
 800d028:	f7f3 fbc8 	bl	80007bc <__aeabi_ddiv>
 800d02c:	f04f 0a02 	mov.w	sl, #2
 800d030:	4604      	mov	r4, r0
 800d032:	460d      	mov	r5, r1
 800d034:	e743      	b.n	800cebe <atan+0xce>
 800d036:	462b      	mov	r3, r5
 800d038:	ee10 2a10 	vmov	r2, s0
 800d03c:	4939      	ldr	r1, [pc, #228]	; (800d124 <atan+0x334>)
 800d03e:	2000      	movs	r0, #0
 800d040:	f7f3 fbbc 	bl	80007bc <__aeabi_ddiv>
 800d044:	f04f 0a03 	mov.w	sl, #3
 800d048:	4604      	mov	r4, r0
 800d04a:	460d      	mov	r5, r1
 800d04c:	e737      	b.n	800cebe <atan+0xce>
 800d04e:	4b36      	ldr	r3, [pc, #216]	; (800d128 <atan+0x338>)
 800d050:	4e36      	ldr	r6, [pc, #216]	; (800d12c <atan+0x33c>)
 800d052:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d05a:	f7f3 f8cd 	bl	80001f8 <__aeabi_dsub>
 800d05e:	4622      	mov	r2, r4
 800d060:	462b      	mov	r3, r5
 800d062:	f7f3 f8c9 	bl	80001f8 <__aeabi_dsub>
 800d066:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800d06a:	4602      	mov	r2, r0
 800d06c:	460b      	mov	r3, r1
 800d06e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800d072:	f7f3 f8c1 	bl	80001f8 <__aeabi_dsub>
 800d076:	f1bb 0f00 	cmp.w	fp, #0
 800d07a:	4604      	mov	r4, r0
 800d07c:	460d      	mov	r5, r1
 800d07e:	f6bf aed6 	bge.w	800ce2e <atan+0x3e>
 800d082:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d086:	461d      	mov	r5, r3
 800d088:	e6d1      	b.n	800ce2e <atan+0x3e>
 800d08a:	a51d      	add	r5, pc, #116	; (adr r5, 800d100 <atan+0x310>)
 800d08c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d090:	e6cd      	b.n	800ce2e <atan+0x3e>
 800d092:	bf00      	nop
 800d094:	f3af 8000 	nop.w
 800d098:	54442d18 	.word	0x54442d18
 800d09c:	bff921fb 	.word	0xbff921fb
 800d0a0:	8800759c 	.word	0x8800759c
 800d0a4:	7e37e43c 	.word	0x7e37e43c
 800d0a8:	e322da11 	.word	0xe322da11
 800d0ac:	3f90ad3a 	.word	0x3f90ad3a
 800d0b0:	24760deb 	.word	0x24760deb
 800d0b4:	3fa97b4b 	.word	0x3fa97b4b
 800d0b8:	a0d03d51 	.word	0xa0d03d51
 800d0bc:	3fb10d66 	.word	0x3fb10d66
 800d0c0:	c54c206e 	.word	0xc54c206e
 800d0c4:	3fb745cd 	.word	0x3fb745cd
 800d0c8:	920083ff 	.word	0x920083ff
 800d0cc:	3fc24924 	.word	0x3fc24924
 800d0d0:	5555550d 	.word	0x5555550d
 800d0d4:	3fd55555 	.word	0x3fd55555
 800d0d8:	2c6a6c2f 	.word	0x2c6a6c2f
 800d0dc:	bfa2b444 	.word	0xbfa2b444
 800d0e0:	52defd9a 	.word	0x52defd9a
 800d0e4:	3fadde2d 	.word	0x3fadde2d
 800d0e8:	af749a6d 	.word	0xaf749a6d
 800d0ec:	3fb3b0f2 	.word	0x3fb3b0f2
 800d0f0:	fe231671 	.word	0xfe231671
 800d0f4:	3fbc71c6 	.word	0x3fbc71c6
 800d0f8:	9998ebc4 	.word	0x9998ebc4
 800d0fc:	3fc99999 	.word	0x3fc99999
 800d100:	54442d18 	.word	0x54442d18
 800d104:	3ff921fb 	.word	0x3ff921fb
 800d108:	440fffff 	.word	0x440fffff
 800d10c:	7ff00000 	.word	0x7ff00000
 800d110:	3fdbffff 	.word	0x3fdbffff
 800d114:	3ff00000 	.word	0x3ff00000
 800d118:	3ff2ffff 	.word	0x3ff2ffff
 800d11c:	40038000 	.word	0x40038000
 800d120:	3ff80000 	.word	0x3ff80000
 800d124:	bff00000 	.word	0xbff00000
 800d128:	0800d450 	.word	0x0800d450
 800d12c:	0800d430 	.word	0x0800d430

0800d130 <fabs>:
 800d130:	ec51 0b10 	vmov	r0, r1, d0
 800d134:	ee10 2a10 	vmov	r2, s0
 800d138:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d13c:	ec43 2b10 	vmov	d0, r2, r3
 800d140:	4770      	bx	lr
	...

0800d144 <__ieee754_sqrt>:
 800d144:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d148:	ec55 4b10 	vmov	r4, r5, d0
 800d14c:	4e67      	ldr	r6, [pc, #412]	; (800d2ec <__ieee754_sqrt+0x1a8>)
 800d14e:	43ae      	bics	r6, r5
 800d150:	ee10 0a10 	vmov	r0, s0
 800d154:	ee10 2a10 	vmov	r2, s0
 800d158:	4629      	mov	r1, r5
 800d15a:	462b      	mov	r3, r5
 800d15c:	d10d      	bne.n	800d17a <__ieee754_sqrt+0x36>
 800d15e:	f7f3 fa03 	bl	8000568 <__aeabi_dmul>
 800d162:	4602      	mov	r2, r0
 800d164:	460b      	mov	r3, r1
 800d166:	4620      	mov	r0, r4
 800d168:	4629      	mov	r1, r5
 800d16a:	f7f3 f847 	bl	80001fc <__adddf3>
 800d16e:	4604      	mov	r4, r0
 800d170:	460d      	mov	r5, r1
 800d172:	ec45 4b10 	vmov	d0, r4, r5
 800d176:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d17a:	2d00      	cmp	r5, #0
 800d17c:	dc0b      	bgt.n	800d196 <__ieee754_sqrt+0x52>
 800d17e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d182:	4326      	orrs	r6, r4
 800d184:	d0f5      	beq.n	800d172 <__ieee754_sqrt+0x2e>
 800d186:	b135      	cbz	r5, 800d196 <__ieee754_sqrt+0x52>
 800d188:	f7f3 f836 	bl	80001f8 <__aeabi_dsub>
 800d18c:	4602      	mov	r2, r0
 800d18e:	460b      	mov	r3, r1
 800d190:	f7f3 fb14 	bl	80007bc <__aeabi_ddiv>
 800d194:	e7eb      	b.n	800d16e <__ieee754_sqrt+0x2a>
 800d196:	1509      	asrs	r1, r1, #20
 800d198:	f000 808d 	beq.w	800d2b6 <__ieee754_sqrt+0x172>
 800d19c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d1a0:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800d1a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d1a8:	07c9      	lsls	r1, r1, #31
 800d1aa:	bf5c      	itt	pl
 800d1ac:	005b      	lslpl	r3, r3, #1
 800d1ae:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800d1b2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d1b6:	bf58      	it	pl
 800d1b8:	0052      	lslpl	r2, r2, #1
 800d1ba:	2500      	movs	r5, #0
 800d1bc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800d1c0:	1076      	asrs	r6, r6, #1
 800d1c2:	0052      	lsls	r2, r2, #1
 800d1c4:	f04f 0e16 	mov.w	lr, #22
 800d1c8:	46ac      	mov	ip, r5
 800d1ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d1ce:	eb0c 0001 	add.w	r0, ip, r1
 800d1d2:	4298      	cmp	r0, r3
 800d1d4:	bfde      	ittt	le
 800d1d6:	1a1b      	suble	r3, r3, r0
 800d1d8:	eb00 0c01 	addle.w	ip, r0, r1
 800d1dc:	186d      	addle	r5, r5, r1
 800d1de:	005b      	lsls	r3, r3, #1
 800d1e0:	f1be 0e01 	subs.w	lr, lr, #1
 800d1e4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800d1e8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800d1ec:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800d1f0:	d1ed      	bne.n	800d1ce <__ieee754_sqrt+0x8a>
 800d1f2:	4674      	mov	r4, lr
 800d1f4:	2720      	movs	r7, #32
 800d1f6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800d1fa:	4563      	cmp	r3, ip
 800d1fc:	eb01 000e 	add.w	r0, r1, lr
 800d200:	dc02      	bgt.n	800d208 <__ieee754_sqrt+0xc4>
 800d202:	d113      	bne.n	800d22c <__ieee754_sqrt+0xe8>
 800d204:	4290      	cmp	r0, r2
 800d206:	d811      	bhi.n	800d22c <__ieee754_sqrt+0xe8>
 800d208:	2800      	cmp	r0, #0
 800d20a:	eb00 0e01 	add.w	lr, r0, r1
 800d20e:	da57      	bge.n	800d2c0 <__ieee754_sqrt+0x17c>
 800d210:	f1be 0f00 	cmp.w	lr, #0
 800d214:	db54      	blt.n	800d2c0 <__ieee754_sqrt+0x17c>
 800d216:	f10c 0801 	add.w	r8, ip, #1
 800d21a:	eba3 030c 	sub.w	r3, r3, ip
 800d21e:	4290      	cmp	r0, r2
 800d220:	bf88      	it	hi
 800d222:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 800d226:	1a12      	subs	r2, r2, r0
 800d228:	440c      	add	r4, r1
 800d22a:	46c4      	mov	ip, r8
 800d22c:	005b      	lsls	r3, r3, #1
 800d22e:	3f01      	subs	r7, #1
 800d230:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800d234:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800d238:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800d23c:	d1dd      	bne.n	800d1fa <__ieee754_sqrt+0xb6>
 800d23e:	4313      	orrs	r3, r2
 800d240:	d01b      	beq.n	800d27a <__ieee754_sqrt+0x136>
 800d242:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800d2f0 <__ieee754_sqrt+0x1ac>
 800d246:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800d2f4 <__ieee754_sqrt+0x1b0>
 800d24a:	e9da 0100 	ldrd	r0, r1, [sl]
 800d24e:	e9db 2300 	ldrd	r2, r3, [fp]
 800d252:	f7f2 ffd1 	bl	80001f8 <__aeabi_dsub>
 800d256:	e9da 8900 	ldrd	r8, r9, [sl]
 800d25a:	4602      	mov	r2, r0
 800d25c:	460b      	mov	r3, r1
 800d25e:	4640      	mov	r0, r8
 800d260:	4649      	mov	r1, r9
 800d262:	f7f3 fbfd 	bl	8000a60 <__aeabi_dcmple>
 800d266:	b140      	cbz	r0, 800d27a <__ieee754_sqrt+0x136>
 800d268:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800d26c:	e9da 0100 	ldrd	r0, r1, [sl]
 800d270:	e9db 2300 	ldrd	r2, r3, [fp]
 800d274:	d126      	bne.n	800d2c4 <__ieee754_sqrt+0x180>
 800d276:	3501      	adds	r5, #1
 800d278:	463c      	mov	r4, r7
 800d27a:	106a      	asrs	r2, r5, #1
 800d27c:	0863      	lsrs	r3, r4, #1
 800d27e:	07e9      	lsls	r1, r5, #31
 800d280:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800d284:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800d288:	bf48      	it	mi
 800d28a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800d28e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800d292:	461c      	mov	r4, r3
 800d294:	e76d      	b.n	800d172 <__ieee754_sqrt+0x2e>
 800d296:	0ad3      	lsrs	r3, r2, #11
 800d298:	3815      	subs	r0, #21
 800d29a:	0552      	lsls	r2, r2, #21
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d0fa      	beq.n	800d296 <__ieee754_sqrt+0x152>
 800d2a0:	02dc      	lsls	r4, r3, #11
 800d2a2:	d50a      	bpl.n	800d2ba <__ieee754_sqrt+0x176>
 800d2a4:	f1c1 0420 	rsb	r4, r1, #32
 800d2a8:	fa22 f404 	lsr.w	r4, r2, r4
 800d2ac:	1e4d      	subs	r5, r1, #1
 800d2ae:	408a      	lsls	r2, r1
 800d2b0:	4323      	orrs	r3, r4
 800d2b2:	1b41      	subs	r1, r0, r5
 800d2b4:	e772      	b.n	800d19c <__ieee754_sqrt+0x58>
 800d2b6:	4608      	mov	r0, r1
 800d2b8:	e7f0      	b.n	800d29c <__ieee754_sqrt+0x158>
 800d2ba:	005b      	lsls	r3, r3, #1
 800d2bc:	3101      	adds	r1, #1
 800d2be:	e7ef      	b.n	800d2a0 <__ieee754_sqrt+0x15c>
 800d2c0:	46e0      	mov	r8, ip
 800d2c2:	e7aa      	b.n	800d21a <__ieee754_sqrt+0xd6>
 800d2c4:	f7f2 ff9a 	bl	80001fc <__adddf3>
 800d2c8:	e9da 8900 	ldrd	r8, r9, [sl]
 800d2cc:	4602      	mov	r2, r0
 800d2ce:	460b      	mov	r3, r1
 800d2d0:	4640      	mov	r0, r8
 800d2d2:	4649      	mov	r1, r9
 800d2d4:	f7f3 fbba 	bl	8000a4c <__aeabi_dcmplt>
 800d2d8:	b120      	cbz	r0, 800d2e4 <__ieee754_sqrt+0x1a0>
 800d2da:	1ca0      	adds	r0, r4, #2
 800d2dc:	bf08      	it	eq
 800d2de:	3501      	addeq	r5, #1
 800d2e0:	3402      	adds	r4, #2
 800d2e2:	e7ca      	b.n	800d27a <__ieee754_sqrt+0x136>
 800d2e4:	3401      	adds	r4, #1
 800d2e6:	f024 0401 	bic.w	r4, r4, #1
 800d2ea:	e7c6      	b.n	800d27a <__ieee754_sqrt+0x136>
 800d2ec:	7ff00000 	.word	0x7ff00000
 800d2f0:	20000160 	.word	0x20000160
 800d2f4:	20000168 	.word	0x20000168

0800d2f8 <nan>:
 800d2f8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d300 <nan+0x8>
 800d2fc:	4770      	bx	lr
 800d2fe:	bf00      	nop
 800d300:	00000000 	.word	0x00000000
 800d304:	7ff80000 	.word	0x7ff80000

0800d308 <_init>:
 800d308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d30a:	bf00      	nop
 800d30c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d30e:	bc08      	pop	{r3}
 800d310:	469e      	mov	lr, r3
 800d312:	4770      	bx	lr

0800d314 <_fini>:
 800d314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d316:	bf00      	nop
 800d318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d31a:	bc08      	pop	{r3}
 800d31c:	469e      	mov	lr, r3
 800d31e:	4770      	bx	lr
