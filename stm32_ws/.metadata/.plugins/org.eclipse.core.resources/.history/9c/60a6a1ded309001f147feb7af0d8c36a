#include "mb_protocol.h"

uint8_t ready2send;

uint8_t expecting_start = 1;
uint8_t expecting_cmd = 0;
uint8_t expecting_data = 0;
uint8_t expecting_end = 0;
uint8_t receive_fail = 0;

int32_t read_buffer[MAX_PACKET_SIZE];

void set_to_zero(int32_t arr[], uint8_t size);

void process_request(uint8_t *buf) {
  uint8_t cmd_len = 0;
  uint8_t data_count = 1;
  if (sizeof(buf) == 4) {
    int32_t rcv_value = bytes_to_int32(buf, LITTLE_ENDIAN);
    if (expecting_start == 1) {
      if (rcv_value == START_PACKET) {
        set_to_zero(read_buffer, MAX_PACKET_SIZE);
        expecting_start = 0;
        expecting_cmd = 1;
      } else {
        receive_fail = 1;
      }
    } else if (expecting_cmd == 1) {
      expecting_cmd = 0;
      read_buffer[0] = rcv_value;
      if (rcv_value == CMD_VEL) {
        cmd_len = CMD_VEL_LEN;
        expecting_data = 1;
      } else {
        expecting_data = 0;
        cmd_len = 0;
      }
    } else if (expecting_data == 1) {
      read_buffer[data_count] = rcv_value;
      data_count++;
      if (data_count == cmd_len) {
        expecting_data = 0;
        expecting_end = 1;
        data_count = 1;
      }
    } else if (expecting_end == 1) {
      if (rcv_value == END_PACKET) {
        expecting_start = 1;
        expecting_end = 0;
      } else {
        receive_fail = 1;
      }
    } else {
      return;
    }
  }
}

void set_to_zero(int32_t arr[], uint8_t size) {
  for (int i = 0; i < size; i++) {
    arr[i] = 0;
  }
}

uint8_t int32_to_bytes(int32_t value, uint8_t *bytes, int8_t is_big_endian) {
  // Converts an int32_t value to a byte array.
  if (is_big_endian) {
    bytes[0] = (value >> 24) & 0xFF;
    bytes[1] = (value >> 16) & 0xFF;
    bytes[2] = (value >> 8) & 0xFF;
    bytes[3] = value & 0xFF;
  } else {
    bytes[0] = value & 0xFF;
    bytes[1] = (value >> 8) & 0xFF;
    bytes[2] = (value >> 16) & 0xFF;
    bytes[3] = (value >> 24) & 0xFF;
  }
  return 0;
}

int32_t bytes_to_int32(uint8_t *bytes, int8_t is_big_endian) {
  //  Converts a byte array to an int32_t value.

  int32_t value = 0;
  if (is_big_endian) {
    // Big-endian: most significant byte first
    value = (bytes[0] << 24) | (bytes[1] << 16) | (bytes[2] << 8) | bytes[3];
  } else {
    // Little-endian: least significant byte first
    value = (bytes[3] << 24) | (bytes[2] << 16) | (bytes[1] << 8) | bytes[0];
  }
  return value;
}
