
motorsTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aec0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  0800b070  0800b070  0001b070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b0f8  0800b0f8  00020150  2**0
                  CONTENTS
  4 .ARM          00000008  0800b0f8  0800b0f8  0001b0f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b100  0800b100  00020150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b100  0800b100  0001b100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b104  0800b104  0001b104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000150  20000000  0800b108  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020150  2**0
                  CONTENTS
 10 .bss          00005d04  20000150  20000150  00020150  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20005e54  20005e54  00020150  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001d872  00000000  00000000  000201c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004fac  00000000  00000000  0003da35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a08  00000000  00000000  000429e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000013c5  00000000  00000000  000443f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00029077  00000000  00000000  000457b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001fca7  00000000  00000000  0006e82c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e7142  00000000  00000000  0008e4d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006db4  00000000  00000000  00175618  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000083  00000000  00000000  0017c3cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000150 	.word	0x20000150
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800b058 	.word	0x0800b058

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000154 	.word	0x20000154
 80001ec:	0800b058 	.word	0x0800b058

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000200:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000204:	f000 b970 	b.w	80004e8 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	460d      	mov	r5, r1
 8000228:	4604      	mov	r4, r0
 800022a:	460f      	mov	r7, r1
 800022c:	2b00      	cmp	r3, #0
 800022e:	d14a      	bne.n	80002c6 <__udivmoddi4+0xa6>
 8000230:	428a      	cmp	r2, r1
 8000232:	4694      	mov	ip, r2
 8000234:	d965      	bls.n	8000302 <__udivmoddi4+0xe2>
 8000236:	fab2 f382 	clz	r3, r2
 800023a:	b143      	cbz	r3, 800024e <__udivmoddi4+0x2e>
 800023c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000240:	f1c3 0220 	rsb	r2, r3, #32
 8000244:	409f      	lsls	r7, r3
 8000246:	fa20 f202 	lsr.w	r2, r0, r2
 800024a:	4317      	orrs	r7, r2
 800024c:	409c      	lsls	r4, r3
 800024e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000252:	fa1f f58c 	uxth.w	r5, ip
 8000256:	fbb7 f1fe 	udiv	r1, r7, lr
 800025a:	0c22      	lsrs	r2, r4, #16
 800025c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000260:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000264:	fb01 f005 	mul.w	r0, r1, r5
 8000268:	4290      	cmp	r0, r2
 800026a:	d90a      	bls.n	8000282 <__udivmoddi4+0x62>
 800026c:	eb1c 0202 	adds.w	r2, ip, r2
 8000270:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000274:	f080 811c 	bcs.w	80004b0 <__udivmoddi4+0x290>
 8000278:	4290      	cmp	r0, r2
 800027a:	f240 8119 	bls.w	80004b0 <__udivmoddi4+0x290>
 800027e:	3902      	subs	r1, #2
 8000280:	4462      	add	r2, ip
 8000282:	1a12      	subs	r2, r2, r0
 8000284:	b2a4      	uxth	r4, r4
 8000286:	fbb2 f0fe 	udiv	r0, r2, lr
 800028a:	fb0e 2210 	mls	r2, lr, r0, r2
 800028e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000292:	fb00 f505 	mul.w	r5, r0, r5
 8000296:	42a5      	cmp	r5, r4
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x90>
 800029a:	eb1c 0404 	adds.w	r4, ip, r4
 800029e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002a2:	f080 8107 	bcs.w	80004b4 <__udivmoddi4+0x294>
 80002a6:	42a5      	cmp	r5, r4
 80002a8:	f240 8104 	bls.w	80004b4 <__udivmoddi4+0x294>
 80002ac:	4464      	add	r4, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b4:	1b64      	subs	r4, r4, r5
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11e      	cbz	r6, 80002c2 <__udivmoddi4+0xa2>
 80002ba:	40dc      	lsrs	r4, r3
 80002bc:	2300      	movs	r3, #0
 80002be:	e9c6 4300 	strd	r4, r3, [r6]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d908      	bls.n	80002dc <__udivmoddi4+0xbc>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80ed 	beq.w	80004aa <__udivmoddi4+0x28a>
 80002d0:	2100      	movs	r1, #0
 80002d2:	e9c6 0500 	strd	r0, r5, [r6]
 80002d6:	4608      	mov	r0, r1
 80002d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002dc:	fab3 f183 	clz	r1, r3
 80002e0:	2900      	cmp	r1, #0
 80002e2:	d149      	bne.n	8000378 <__udivmoddi4+0x158>
 80002e4:	42ab      	cmp	r3, r5
 80002e6:	d302      	bcc.n	80002ee <__udivmoddi4+0xce>
 80002e8:	4282      	cmp	r2, r0
 80002ea:	f200 80f8 	bhi.w	80004de <__udivmoddi4+0x2be>
 80002ee:	1a84      	subs	r4, r0, r2
 80002f0:	eb65 0203 	sbc.w	r2, r5, r3
 80002f4:	2001      	movs	r0, #1
 80002f6:	4617      	mov	r7, r2
 80002f8:	2e00      	cmp	r6, #0
 80002fa:	d0e2      	beq.n	80002c2 <__udivmoddi4+0xa2>
 80002fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000300:	e7df      	b.n	80002c2 <__udivmoddi4+0xa2>
 8000302:	b902      	cbnz	r2, 8000306 <__udivmoddi4+0xe6>
 8000304:	deff      	udf	#255	; 0xff
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	2b00      	cmp	r3, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x210>
 8000310:	1a8a      	subs	r2, r1, r2
 8000312:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000316:	fa1f fe8c 	uxth.w	lr, ip
 800031a:	2101      	movs	r1, #1
 800031c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000320:	fb07 2015 	mls	r0, r7, r5, r2
 8000324:	0c22      	lsrs	r2, r4, #16
 8000326:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800032a:	fb0e f005 	mul.w	r0, lr, r5
 800032e:	4290      	cmp	r0, r2
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x124>
 8000332:	eb1c 0202 	adds.w	r2, ip, r2
 8000336:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4290      	cmp	r0, r2
 800033e:	f200 80cb 	bhi.w	80004d8 <__udivmoddi4+0x2b8>
 8000342:	4645      	mov	r5, r8
 8000344:	1a12      	subs	r2, r2, r0
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb2 f0f7 	udiv	r0, r2, r7
 800034c:	fb07 2210 	mls	r2, r7, r0, r2
 8000350:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000354:	fb0e fe00 	mul.w	lr, lr, r0
 8000358:	45a6      	cmp	lr, r4
 800035a:	d908      	bls.n	800036e <__udivmoddi4+0x14e>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x14c>
 8000366:	45a6      	cmp	lr, r4
 8000368:	f200 80bb 	bhi.w	80004e2 <__udivmoddi4+0x2c2>
 800036c:	4610      	mov	r0, r2
 800036e:	eba4 040e 	sub.w	r4, r4, lr
 8000372:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000376:	e79f      	b.n	80002b8 <__udivmoddi4+0x98>
 8000378:	f1c1 0720 	rsb	r7, r1, #32
 800037c:	408b      	lsls	r3, r1
 800037e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000382:	ea4c 0c03 	orr.w	ip, ip, r3
 8000386:	fa05 f401 	lsl.w	r4, r5, r1
 800038a:	fa20 f307 	lsr.w	r3, r0, r7
 800038e:	40fd      	lsrs	r5, r7
 8000390:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000394:	4323      	orrs	r3, r4
 8000396:	fbb5 f8f9 	udiv	r8, r5, r9
 800039a:	fa1f fe8c 	uxth.w	lr, ip
 800039e:	fb09 5518 	mls	r5, r9, r8, r5
 80003a2:	0c1c      	lsrs	r4, r3, #16
 80003a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a8:	fb08 f50e 	mul.w	r5, r8, lr
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	fa02 f201 	lsl.w	r2, r2, r1
 80003b2:	fa00 f001 	lsl.w	r0, r0, r1
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1c 0404 	adds.w	r4, ip, r4
 80003bc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003c0:	f080 8088 	bcs.w	80004d4 <__udivmoddi4+0x2b4>
 80003c4:	42a5      	cmp	r5, r4
 80003c6:	f240 8085 	bls.w	80004d4 <__udivmoddi4+0x2b4>
 80003ca:	f1a8 0802 	sub.w	r8, r8, #2
 80003ce:	4464      	add	r4, ip
 80003d0:	1b64      	subs	r4, r4, r5
 80003d2:	b29d      	uxth	r5, r3
 80003d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d8:	fb09 4413 	mls	r4, r9, r3, r4
 80003dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e4:	45a6      	cmp	lr, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003f0:	d26c      	bcs.n	80004cc <__udivmoddi4+0x2ac>
 80003f2:	45a6      	cmp	lr, r4
 80003f4:	d96a      	bls.n	80004cc <__udivmoddi4+0x2ac>
 80003f6:	3b02      	subs	r3, #2
 80003f8:	4464      	add	r4, ip
 80003fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000402:	eba4 040e 	sub.w	r4, r4, lr
 8000406:	42ac      	cmp	r4, r5
 8000408:	46c8      	mov	r8, r9
 800040a:	46ae      	mov	lr, r5
 800040c:	d356      	bcc.n	80004bc <__udivmoddi4+0x29c>
 800040e:	d053      	beq.n	80004b8 <__udivmoddi4+0x298>
 8000410:	b156      	cbz	r6, 8000428 <__udivmoddi4+0x208>
 8000412:	ebb0 0208 	subs.w	r2, r0, r8
 8000416:	eb64 040e 	sbc.w	r4, r4, lr
 800041a:	fa04 f707 	lsl.w	r7, r4, r7
 800041e:	40ca      	lsrs	r2, r1
 8000420:	40cc      	lsrs	r4, r1
 8000422:	4317      	orrs	r7, r2
 8000424:	e9c6 7400 	strd	r7, r4, [r6]
 8000428:	4618      	mov	r0, r3
 800042a:	2100      	movs	r1, #0
 800042c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000430:	f1c3 0120 	rsb	r1, r3, #32
 8000434:	fa02 fc03 	lsl.w	ip, r2, r3
 8000438:	fa20 f201 	lsr.w	r2, r0, r1
 800043c:	fa25 f101 	lsr.w	r1, r5, r1
 8000440:	409d      	lsls	r5, r3
 8000442:	432a      	orrs	r2, r5
 8000444:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000450:	fb07 1510 	mls	r5, r7, r0, r1
 8000454:	0c11      	lsrs	r1, r2, #16
 8000456:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800045a:	fb00 f50e 	mul.w	r5, r0, lr
 800045e:	428d      	cmp	r5, r1
 8000460:	fa04 f403 	lsl.w	r4, r4, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x258>
 8000466:	eb1c 0101 	adds.w	r1, ip, r1
 800046a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800046e:	d22f      	bcs.n	80004d0 <__udivmoddi4+0x2b0>
 8000470:	428d      	cmp	r5, r1
 8000472:	d92d      	bls.n	80004d0 <__udivmoddi4+0x2b0>
 8000474:	3802      	subs	r0, #2
 8000476:	4461      	add	r1, ip
 8000478:	1b49      	subs	r1, r1, r5
 800047a:	b292      	uxth	r2, r2
 800047c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000480:	fb07 1115 	mls	r1, r7, r5, r1
 8000484:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000488:	fb05 f10e 	mul.w	r1, r5, lr
 800048c:	4291      	cmp	r1, r2
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x282>
 8000490:	eb1c 0202 	adds.w	r2, ip, r2
 8000494:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000498:	d216      	bcs.n	80004c8 <__udivmoddi4+0x2a8>
 800049a:	4291      	cmp	r1, r2
 800049c:	d914      	bls.n	80004c8 <__udivmoddi4+0x2a8>
 800049e:	3d02      	subs	r5, #2
 80004a0:	4462      	add	r2, ip
 80004a2:	1a52      	subs	r2, r2, r1
 80004a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a8:	e738      	b.n	800031c <__udivmoddi4+0xfc>
 80004aa:	4631      	mov	r1, r6
 80004ac:	4630      	mov	r0, r6
 80004ae:	e708      	b.n	80002c2 <__udivmoddi4+0xa2>
 80004b0:	4639      	mov	r1, r7
 80004b2:	e6e6      	b.n	8000282 <__udivmoddi4+0x62>
 80004b4:	4610      	mov	r0, r2
 80004b6:	e6fb      	b.n	80002b0 <__udivmoddi4+0x90>
 80004b8:	4548      	cmp	r0, r9
 80004ba:	d2a9      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004bc:	ebb9 0802 	subs.w	r8, r9, r2
 80004c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c4:	3b01      	subs	r3, #1
 80004c6:	e7a3      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c8:	4645      	mov	r5, r8
 80004ca:	e7ea      	b.n	80004a2 <__udivmoddi4+0x282>
 80004cc:	462b      	mov	r3, r5
 80004ce:	e794      	b.n	80003fa <__udivmoddi4+0x1da>
 80004d0:	4640      	mov	r0, r8
 80004d2:	e7d1      	b.n	8000478 <__udivmoddi4+0x258>
 80004d4:	46d0      	mov	r8, sl
 80004d6:	e77b      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d8:	3d02      	subs	r5, #2
 80004da:	4462      	add	r2, ip
 80004dc:	e732      	b.n	8000344 <__udivmoddi4+0x124>
 80004de:	4608      	mov	r0, r1
 80004e0:	e70a      	b.n	80002f8 <__udivmoddi4+0xd8>
 80004e2:	4464      	add	r4, ip
 80004e4:	3802      	subs	r0, #2
 80004e6:	e742      	b.n	800036e <__udivmoddi4+0x14e>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80004f0:	4b17      	ldr	r3, [pc, #92]	; (8000550 <MX_CAN1_Init+0x64>)
 80004f2:	4a18      	ldr	r2, [pc, #96]	; (8000554 <MX_CAN1_Init+0x68>)
 80004f4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 7;
 80004f6:	4b16      	ldr	r3, [pc, #88]	; (8000550 <MX_CAN1_Init+0x64>)
 80004f8:	2207      	movs	r2, #7
 80004fa:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80004fc:	4b14      	ldr	r3, [pc, #80]	; (8000550 <MX_CAN1_Init+0x64>)
 80004fe:	2200      	movs	r2, #0
 8000500:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000502:	4b13      	ldr	r3, [pc, #76]	; (8000550 <MX_CAN1_Init+0x64>)
 8000504:	2200      	movs	r2, #0
 8000506:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000508:	4b11      	ldr	r3, [pc, #68]	; (8000550 <MX_CAN1_Init+0x64>)
 800050a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800050e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000510:	4b0f      	ldr	r3, [pc, #60]	; (8000550 <MX_CAN1_Init+0x64>)
 8000512:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000516:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000518:	4b0d      	ldr	r3, [pc, #52]	; (8000550 <MX_CAN1_Init+0x64>)
 800051a:	2200      	movs	r2, #0
 800051c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800051e:	4b0c      	ldr	r3, [pc, #48]	; (8000550 <MX_CAN1_Init+0x64>)
 8000520:	2200      	movs	r2, #0
 8000522:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000524:	4b0a      	ldr	r3, [pc, #40]	; (8000550 <MX_CAN1_Init+0x64>)
 8000526:	2200      	movs	r2, #0
 8000528:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800052a:	4b09      	ldr	r3, [pc, #36]	; (8000550 <MX_CAN1_Init+0x64>)
 800052c:	2200      	movs	r2, #0
 800052e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000530:	4b07      	ldr	r3, [pc, #28]	; (8000550 <MX_CAN1_Init+0x64>)
 8000532:	2200      	movs	r2, #0
 8000534:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 8000536:	4b06      	ldr	r3, [pc, #24]	; (8000550 <MX_CAN1_Init+0x64>)
 8000538:	2201      	movs	r2, #1
 800053a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800053c:	4804      	ldr	r0, [pc, #16]	; (8000550 <MX_CAN1_Init+0x64>)
 800053e:	f000 ffd3 	bl	80014e8 <HAL_CAN_Init>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000548:	f000 fb12 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800054c:	bf00      	nop
 800054e:	bd80      	pop	{r7, pc}
 8000550:	2000016c 	.word	0x2000016c
 8000554:	40006400 	.word	0x40006400

08000558 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b08a      	sub	sp, #40	; 0x28
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000560:	f107 0314 	add.w	r3, r7, #20
 8000564:	2200      	movs	r2, #0
 8000566:	601a      	str	r2, [r3, #0]
 8000568:	605a      	str	r2, [r3, #4]
 800056a:	609a      	str	r2, [r3, #8]
 800056c:	60da      	str	r2, [r3, #12]
 800056e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a21      	ldr	r2, [pc, #132]	; (80005fc <HAL_CAN_MspInit+0xa4>)
 8000576:	4293      	cmp	r3, r2
 8000578:	d13b      	bne.n	80005f2 <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800057a:	2300      	movs	r3, #0
 800057c:	613b      	str	r3, [r7, #16]
 800057e:	4b20      	ldr	r3, [pc, #128]	; (8000600 <HAL_CAN_MspInit+0xa8>)
 8000580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000582:	4a1f      	ldr	r2, [pc, #124]	; (8000600 <HAL_CAN_MspInit+0xa8>)
 8000584:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000588:	6413      	str	r3, [r2, #64]	; 0x40
 800058a:	4b1d      	ldr	r3, [pc, #116]	; (8000600 <HAL_CAN_MspInit+0xa8>)
 800058c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800058e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000592:	613b      	str	r3, [r7, #16]
 8000594:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000596:	2300      	movs	r3, #0
 8000598:	60fb      	str	r3, [r7, #12]
 800059a:	4b19      	ldr	r3, [pc, #100]	; (8000600 <HAL_CAN_MspInit+0xa8>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059e:	4a18      	ldr	r2, [pc, #96]	; (8000600 <HAL_CAN_MspInit+0xa8>)
 80005a0:	f043 0308 	orr.w	r3, r3, #8
 80005a4:	6313      	str	r3, [r2, #48]	; 0x30
 80005a6:	4b16      	ldr	r3, [pc, #88]	; (8000600 <HAL_CAN_MspInit+0xa8>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	f003 0308 	and.w	r3, r3, #8
 80005ae:	60fb      	str	r3, [r7, #12]
 80005b0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80005b2:	2303      	movs	r3, #3
 80005b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005b6:	2302      	movs	r3, #2
 80005b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ba:	2300      	movs	r3, #0
 80005bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005be:	2303      	movs	r3, #3
 80005c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80005c2:	2309      	movs	r3, #9
 80005c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005c6:	f107 0314 	add.w	r3, r7, #20
 80005ca:	4619      	mov	r1, r3
 80005cc:	480d      	ldr	r0, [pc, #52]	; (8000604 <HAL_CAN_MspInit+0xac>)
 80005ce:	f001 fed5 	bl	800237c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 80005d2:	2200      	movs	r2, #0
 80005d4:	2105      	movs	r1, #5
 80005d6:	2013      	movs	r0, #19
 80005d8:	f001 fea6 	bl	8002328 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80005dc:	2013      	movs	r0, #19
 80005de:	f001 febf 	bl	8002360 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80005e2:	2200      	movs	r2, #0
 80005e4:	2105      	movs	r1, #5
 80005e6:	2014      	movs	r0, #20
 80005e8:	f001 fe9e 	bl	8002328 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80005ec:	2014      	movs	r0, #20
 80005ee:	f001 feb7 	bl	8002360 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80005f2:	bf00      	nop
 80005f4:	3728      	adds	r7, #40	; 0x28
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	40006400 	.word	0x40006400
 8000600:	40023800 	.word	0x40023800
 8000604:	40020c00 	.word	0x40020c00

08000608 <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000612:	bf00      	nop
 8000614:	370c      	adds	r7, #12
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr

0800061e <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 800061e:	b480      	push	{r7}
 8000620:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000622:	bf00      	nop
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr

0800062c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800062c:	b5b0      	push	{r4, r5, r7, lr}
 800062e:	b086      	sub	sp, #24
 8000630:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000632:	4b09      	ldr	r3, [pc, #36]	; (8000658 <MX_FREERTOS_Init+0x2c>)
 8000634:	1d3c      	adds	r4, r7, #4
 8000636:	461d      	mov	r5, r3
 8000638:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800063a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800063c:	682b      	ldr	r3, [r5, #0]
 800063e:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000640:	1d3b      	adds	r3, r7, #4
 8000642:	2100      	movs	r1, #0
 8000644:	4618      	mov	r0, r3
 8000646:	f008 fa3a 	bl	8008abe <osThreadCreate>
 800064a:	4603      	mov	r3, r0
 800064c:	4a03      	ldr	r2, [pc, #12]	; (800065c <MX_FREERTOS_Init+0x30>)
 800064e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000650:	bf00      	nop
 8000652:	3718      	adds	r7, #24
 8000654:	46bd      	mov	sp, r7
 8000656:	bdb0      	pop	{r4, r5, r7, pc}
 8000658:	0800b07c 	.word	0x0800b07c
 800065c:	20000194 	.word	0x20000194

08000660 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000668:	f009 fbf4 	bl	8009e54 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800066c:	2001      	movs	r0, #1
 800066e:	f008 fa4d 	bl	8008b0c <osDelay>
 8000672:	e7fb      	b.n	800066c <StartDefaultTask+0xc>

08000674 <MX_GPIO_Init>:
     PB13   ------> CAN2_TX
     PD9   ------> USART3_RX
     PD8   ------> USART3_TX
*/
void MX_GPIO_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b08e      	sub	sp, #56	; 0x38
 8000678:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	605a      	str	r2, [r3, #4]
 8000684:	609a      	str	r2, [r3, #8]
 8000686:	60da      	str	r2, [r3, #12]
 8000688:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800068a:	2300      	movs	r3, #0
 800068c:	623b      	str	r3, [r7, #32]
 800068e:	4bb3      	ldr	r3, [pc, #716]	; (800095c <MX_GPIO_Init+0x2e8>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	4ab2      	ldr	r2, [pc, #712]	; (800095c <MX_GPIO_Init+0x2e8>)
 8000694:	f043 0310 	orr.w	r3, r3, #16
 8000698:	6313      	str	r3, [r2, #48]	; 0x30
 800069a:	4bb0      	ldr	r3, [pc, #704]	; (800095c <MX_GPIO_Init+0x2e8>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	f003 0310 	and.w	r3, r3, #16
 80006a2:	623b      	str	r3, [r7, #32]
 80006a4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	61fb      	str	r3, [r7, #28]
 80006aa:	4bac      	ldr	r3, [pc, #688]	; (800095c <MX_GPIO_Init+0x2e8>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	4aab      	ldr	r2, [pc, #684]	; (800095c <MX_GPIO_Init+0x2e8>)
 80006b0:	f043 0302 	orr.w	r3, r3, #2
 80006b4:	6313      	str	r3, [r2, #48]	; 0x30
 80006b6:	4ba9      	ldr	r3, [pc, #676]	; (800095c <MX_GPIO_Init+0x2e8>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	f003 0302 	and.w	r3, r3, #2
 80006be:	61fb      	str	r3, [r7, #28]
 80006c0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	61bb      	str	r3, [r7, #24]
 80006c6:	4ba5      	ldr	r3, [pc, #660]	; (800095c <MX_GPIO_Init+0x2e8>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	4aa4      	ldr	r2, [pc, #656]	; (800095c <MX_GPIO_Init+0x2e8>)
 80006cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006d0:	6313      	str	r3, [r2, #48]	; 0x30
 80006d2:	4ba2      	ldr	r3, [pc, #648]	; (800095c <MX_GPIO_Init+0x2e8>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006da:	61bb      	str	r3, [r7, #24]
 80006dc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	617b      	str	r3, [r7, #20]
 80006e2:	4b9e      	ldr	r3, [pc, #632]	; (800095c <MX_GPIO_Init+0x2e8>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	4a9d      	ldr	r2, [pc, #628]	; (800095c <MX_GPIO_Init+0x2e8>)
 80006e8:	f043 0308 	orr.w	r3, r3, #8
 80006ec:	6313      	str	r3, [r2, #48]	; 0x30
 80006ee:	4b9b      	ldr	r3, [pc, #620]	; (800095c <MX_GPIO_Init+0x2e8>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	617b      	str	r3, [r7, #20]
 80006f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	613b      	str	r3, [r7, #16]
 80006fe:	4b97      	ldr	r3, [pc, #604]	; (800095c <MX_GPIO_Init+0x2e8>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	4a96      	ldr	r2, [pc, #600]	; (800095c <MX_GPIO_Init+0x2e8>)
 8000704:	f043 0304 	orr.w	r3, r3, #4
 8000708:	6313      	str	r3, [r2, #48]	; 0x30
 800070a:	4b94      	ldr	r3, [pc, #592]	; (800095c <MX_GPIO_Init+0x2e8>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	f003 0304 	and.w	r3, r3, #4
 8000712:	613b      	str	r3, [r7, #16]
 8000714:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	60fb      	str	r3, [r7, #12]
 800071a:	4b90      	ldr	r3, [pc, #576]	; (800095c <MX_GPIO_Init+0x2e8>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4a8f      	ldr	r2, [pc, #572]	; (800095c <MX_GPIO_Init+0x2e8>)
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
 8000726:	4b8d      	ldr	r3, [pc, #564]	; (800095c <MX_GPIO_Init+0x2e8>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	f003 0301 	and.w	r3, r3, #1
 800072e:	60fb      	str	r3, [r7, #12]
 8000730:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	60bb      	str	r3, [r7, #8]
 8000736:	4b89      	ldr	r3, [pc, #548]	; (800095c <MX_GPIO_Init+0x2e8>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a88      	ldr	r2, [pc, #544]	; (800095c <MX_GPIO_Init+0x2e8>)
 800073c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b86      	ldr	r3, [pc, #536]	; (800095c <MX_GPIO_Init+0x2e8>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800074a:	60bb      	str	r3, [r7, #8]
 800074c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	607b      	str	r3, [r7, #4]
 8000752:	4b82      	ldr	r3, [pc, #520]	; (800095c <MX_GPIO_Init+0x2e8>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4a81      	ldr	r2, [pc, #516]	; (800095c <MX_GPIO_Init+0x2e8>)
 8000758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
 800075e:	4b7f      	ldr	r3, [pc, #508]	; (800095c <MX_GPIO_Init+0x2e8>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	603b      	str	r3, [r7, #0]
 800076e:	4b7b      	ldr	r3, [pc, #492]	; (800095c <MX_GPIO_Init+0x2e8>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a7a      	ldr	r2, [pc, #488]	; (800095c <MX_GPIO_Init+0x2e8>)
 8000774:	f043 0320 	orr.w	r3, r3, #32
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b78      	ldr	r3, [pc, #480]	; (800095c <MX_GPIO_Init+0x2e8>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0320 	and.w	r3, r3, #32
 8000782:	603b      	str	r3, [r7, #0]
 8000784:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, IST_RESET_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000786:	2200      	movs	r2, #0
 8000788:	f640 0104 	movw	r1, #2052	; 0x804
 800078c:	4874      	ldr	r0, [pc, #464]	; (8000960 <MX_GPIO_Init+0x2ec>)
 800078e:	f001 ffa1 	bl	80026d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, POWER1_CTRL_Pin|POWER2_CTRL_Pin|POWER3_CTRL_Pin|POWER4_CTRL_Pin, GPIO_PIN_RESET);
 8000792:	2200      	movs	r2, #0
 8000794:	213c      	movs	r1, #60	; 0x3c
 8000796:	4873      	ldr	r0, [pc, #460]	; (8000964 <MX_GPIO_Init+0x2f0>)
 8000798:	f001 ff9c 	bl	80026d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED_A_Pin|LED_B_Pin|LED_C_Pin|LED_D_Pin
 800079c:	2200      	movs	r2, #0
 800079e:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 80007a2:	4871      	ldr	r0, [pc, #452]	; (8000968 <MX_GPIO_Init+0x2f4>)
 80007a4:	f001 ff96 	bl	80026d4 <HAL_GPIO_WritePin>
                          |LED_E_Pin|LED_F_Pin|LED_G_Pin|LED_H_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SPI5_NSS_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 80007a8:	2200      	movs	r2, #0
 80007aa:	f244 0140 	movw	r1, #16448	; 0x4040
 80007ae:	486f      	ldr	r0, [pc, #444]	; (800096c <MX_GPIO_Init+0x2f8>)
 80007b0:	f001 ff90 	bl	80026d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IO_PROBE_GPIO_Port, IO_PROBE_Pin, GPIO_PIN_RESET);
 80007b4:	2200      	movs	r2, #0
 80007b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007ba:	486d      	ldr	r0, [pc, #436]	; (8000970 <MX_GPIO_Init+0x2fc>)
 80007bc:	f001 ff8a 	bl	80026d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE1 PE0 PE4
                           PE5 PE6 PE13 PE8
                           PE9 PE7 PE10 PE12
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_4
 80007c0:	f24b 73fb 	movw	r3, #47099	; 0xb7fb
 80007c4:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_13|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007c6:	2303      	movs	r3, #3
 80007c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007d2:	4619      	mov	r1, r3
 80007d4:	4862      	ldr	r0, [pc, #392]	; (8000960 <MX_GPIO_Init+0x2ec>)
 80007d6:	f001 fdd1 	bl	800237c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = IST_RESET_Pin|LED_RED_Pin;
 80007da:	f640 0304 	movw	r3, #2052	; 0x804
 80007de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e0:	2301      	movs	r3, #1
 80007e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	2300      	movs	r3, #0
 80007e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e8:	2300      	movs	r3, #0
 80007ea:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007f0:	4619      	mov	r1, r3
 80007f2:	485b      	ldr	r0, [pc, #364]	; (8000960 <MX_GPIO_Init+0x2ec>)
 80007f4:	f001 fdc2 	bl	800237c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB4 PB3 PB9
                           PB7 PB6 PB12 PB1
                           PB0 PB10 PB11 PB14
                           PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_9
 80007f8:	f64d 73db 	movw	r3, #57307	; 0xdfdb
 80007fc:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_12|GPIO_PIN_1
                          |GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007fe:	2303      	movs	r3, #3
 8000800:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000806:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800080a:	4619      	mov	r1, r3
 800080c:	4859      	ldr	r0, [pc, #356]	; (8000974 <MX_GPIO_Init+0x300>)
 800080e:	f001 fdb5 	bl	800237c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG14 PG13 PG15 PG12
                           PG11 PG10 PG9 PG0 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_12
 8000812:	f64f 6301 	movw	r3, #65025	; 0xfe01
 8000816:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000818:	2303      	movs	r3, #3
 800081a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000820:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000824:	4619      	mov	r1, r3
 8000826:	4850      	ldr	r0, [pc, #320]	; (8000968 <MX_GPIO_Init+0x2f4>)
 8000828:	f001 fda8 	bl	800237c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD7 PD5 PD4 PD3
                           PD2 PD15 PD14 PD13
                           PD11 PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3
 800082c:	f64e 43bc 	movw	r3, #60604	; 0xecbc
 8000830:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_2|GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13
                          |GPIO_PIN_11|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000832:	2303      	movs	r3, #3
 8000834:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800083a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800083e:	4619      	mov	r1, r3
 8000840:	484b      	ldr	r0, [pc, #300]	; (8000970 <MX_GPIO_Init+0x2fc>)
 8000842:	f001 fd9b 	bl	800237c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC12 PC11 PC10 PC13
                           PC14 PC15 PC9 PC8
                           PC7 PC6 PC0 PC1
                           PC2 PC3 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_13
 8000846:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800084a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800084c:	2303      	movs	r3, #3
 800084e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000854:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000858:	4619      	mov	r1, r3
 800085a:	4847      	ldr	r0, [pc, #284]	; (8000978 <MX_GPIO_Init+0x304>)
 800085c:	f001 fd8e 	bl	800237c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA15 PA10 PA9 PA4
                           PA6 PA5 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_4
 8000860:	f248 63f0 	movw	r3, #34544	; 0x86f0
 8000864:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000866:	2303      	movs	r3, #3
 8000868:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000872:	4619      	mov	r1, r3
 8000874:	4841      	ldr	r0, [pc, #260]	; (800097c <MX_GPIO_Init+0x308>)
 8000876:	f001 fd81 	bl	800237c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SYS_CFG_Pin;
 800087a:	2340      	movs	r3, #64	; 0x40
 800087c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800087e:	2300      	movs	r3, #0
 8000880:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SYS_CFG_GPIO_Port, &GPIO_InitStruct);
 8000886:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800088a:	4619      	mov	r1, r3
 800088c:	4838      	ldr	r0, [pc, #224]	; (8000970 <MX_GPIO_Init+0x2fc>)
 800088e:	f001 fd75 	bl	800237c <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = PIN_Y_Pin|PIN_X_Pin|PIN_V_Pin|PIN_Z_Pin;
 8000892:	23e4      	movs	r3, #228	; 0xe4
 8000894:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000896:	2300      	movs	r3, #0
 8000898:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800089e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008a2:	4619      	mov	r1, r3
 80008a4:	4836      	ldr	r0, [pc, #216]	; (8000980 <MX_GPIO_Init+0x30c>)
 80008a6:	f001 fd69 	bl	800237c <HAL_GPIO_Init>

  /*Configure GPIO pins : PI3 PI8 PI9 PI4
                           PI1 PI10 PI11 PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_4
 80008aa:	f640 731b 	movw	r3, #3867	; 0xf1b
 80008ae:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008b0:	2303      	movs	r3, #3
 80008b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80008b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008bc:	4619      	mov	r1, r3
 80008be:	4830      	ldr	r0, [pc, #192]	; (8000980 <MX_GPIO_Init+0x30c>)
 80008c0:	f001 fd5c 	bl	800237c <HAL_GPIO_Init>

  /*Configure GPIO pins : PH15 PH13 PH14 PH12
                           PH11 PH10 PH8 PH9
                           PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_12
 80008c4:	f64f 7380 	movw	r3, #65408	; 0xff80
 80008c8:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008ca:	2303      	movs	r3, #3
 80008cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80008d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008d6:	4619      	mov	r1, r3
 80008d8:	4822      	ldr	r0, [pc, #136]	; (8000964 <MX_GPIO_Init+0x2f0>)
 80008da:	f001 fd4f 	bl	800237c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF2 PF1 PF3
                           PF4 PF5 PF13 PF12
                           PF15 PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_3
 80008de:	f64b 033f 	movw	r3, #47167	; 0xb83f
 80008e2:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_13|GPIO_PIN_12
                          |GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008e4:	2303      	movs	r3, #3
 80008e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80008ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f0:	4619      	mov	r1, r3
 80008f2:	481e      	ldr	r0, [pc, #120]	; (800096c <MX_GPIO_Init+0x2f8>)
 80008f4:	f001 fd42 	bl	800237c <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = POWER1_CTRL_Pin|POWER2_CTRL_Pin|POWER3_CTRL_Pin|POWER4_CTRL_Pin;
 80008f8:	233c      	movs	r3, #60	; 0x3c
 80008fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fc:	2301      	movs	r3, #1
 80008fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000904:	2300      	movs	r3, #0
 8000906:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000908:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800090c:	4619      	mov	r1, r3
 800090e:	4815      	ldr	r0, [pc, #84]	; (8000964 <MX_GPIO_Init+0x2f0>)
 8000910:	f001 fd34 	bl	800237c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LED_A_Pin|LED_B_Pin|LED_C_Pin|LED_D_Pin
 8000914:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
                          |LED_E_Pin|LED_F_Pin|LED_G_Pin|LED_H_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091a:	2301      	movs	r3, #1
 800091c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000922:	2300      	movs	r3, #0
 8000924:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000926:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800092a:	4619      	mov	r1, r3
 800092c:	480e      	ldr	r0, [pc, #56]	; (8000968 <MX_GPIO_Init+0x2f4>)
 800092e:	f001 fd25 	bl	800237c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = SPI5_NSS_Pin|LED_GREEN_Pin;
 8000932:	f244 0340 	movw	r3, #16448	; 0x4040
 8000936:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000938:	2301      	movs	r3, #1
 800093a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000940:	2300      	movs	r3, #0
 8000942:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000944:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000948:	4619      	mov	r1, r3
 800094a:	4808      	ldr	r0, [pc, #32]	; (800096c <MX_GPIO_Init+0x2f8>)
 800094c:	f001 fd16 	bl	800237c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 8000950:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000954:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000956:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800095a:	e013      	b.n	8000984 <MX_GPIO_Init+0x310>
 800095c:	40023800 	.word	0x40023800
 8000960:	40021000 	.word	0x40021000
 8000964:	40021c00 	.word	0x40021c00
 8000968:	40021800 	.word	0x40021800
 800096c:	40021400 	.word	0x40021400
 8000970:	40020c00 	.word	0x40020c00
 8000974:	40020400 	.word	0x40020400
 8000978:	40020800 	.word	0x40020800
 800097c:	40020000 	.word	0x40020000
 8000980:	40022000 	.word	0x40022000
 8000984:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000986:	2301      	movs	r3, #1
 8000988:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 800098a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800098e:	4619      	mov	r1, r3
 8000990:	4827      	ldr	r0, [pc, #156]	; (8000a30 <MX_GPIO_Init+0x3bc>)
 8000992:	f001 fcf3 	bl	800237c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8000996:	2304      	movs	r3, #4
 8000998:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800099a:	2300      	movs	r3, #0
 800099c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 80009a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a6:	4619      	mov	r1, r3
 80009a8:	4822      	ldr	r0, [pc, #136]	; (8000a34 <MX_GPIO_Init+0x3c0>)
 80009aa:	f001 fce7 	bl	800237c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = PIN_YA1_Pin|PIN_ZA0_Pin|PIN_XA2_Pin|PIN_W_Pin;
 80009ae:	230f      	movs	r3, #15
 80009b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b2:	2300      	movs	r3, #0
 80009b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009be:	4619      	mov	r1, r3
 80009c0:	481d      	ldr	r0, [pc, #116]	; (8000a38 <MX_GPIO_Init+0x3c4>)
 80009c2:	f001 fcdb 	bl	800237c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IO_PROBE_Pin;
 80009c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009cc:	2301      	movs	r3, #1
 80009ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d4:	2300      	movs	r3, #0
 80009d6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(IO_PROBE_GPIO_Port, &GPIO_InitStruct);
 80009d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009dc:	4619      	mov	r1, r3
 80009de:	4817      	ldr	r0, [pc, #92]	; (8000a3c <MX_GPIO_Init+0x3c8>)
 80009e0:	f001 fccc 	bl	800237c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80009e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ea:	2302      	movs	r3, #2
 80009ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f2:	2303      	movs	r3, #3
 80009f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80009f6:	2309      	movs	r3, #9
 80009f8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009fe:	4619      	mov	r1, r3
 8000a00:	480c      	ldr	r0, [pc, #48]	; (8000a34 <MX_GPIO_Init+0x3c0>)
 8000a02:	f001 fcbb 	bl	800237c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8000a06:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a10:	2301      	movs	r3, #1
 8000a12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a14:	2303      	movs	r3, #3
 8000a16:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a18:	2307      	movs	r3, #7
 8000a1a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a20:	4619      	mov	r1, r3
 8000a22:	4806      	ldr	r0, [pc, #24]	; (8000a3c <MX_GPIO_Init+0x3c8>)
 8000a24:	f001 fcaa 	bl	800237c <HAL_GPIO_Init>

}
 8000a28:	bf00      	nop
 8000a2a:	3738      	adds	r7, #56	; 0x38
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	40021400 	.word	0x40021400
 8000a34:	40020400 	.word	0x40020400
 8000a38:	40020000 	.word	0x40020000
 8000a3c:	40020c00 	.word	0x40020c00

08000a40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a44:	f000 fcea 	bl	800141c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a48:	f000 f816 	bl	8000a78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a4c:	f7ff fe12 	bl	8000674 <MX_GPIO_Init>
  MX_SPI5_Init();
 8000a50:	f000 f89e 	bl	8000b90 <MX_SPI5_Init>
  MX_CAN1_Init();
 8000a54:	f7ff fd4a 	bl	80004ec <MX_CAN1_Init>
  MX_TIM1_Init();
 8000a58:	f000 fa1a 	bl	8000e90 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000a5c:	f000 faa8 	bl	8000fb0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a60:	f000 faf2 	bl	8001048 <MX_TIM3_Init>
  MX_TIM12_Init();
 8000a64:	f000 fb4a 	bl	80010fc <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */
  motor_test();
 8000a68:	f00a f976 	bl	800ad58 <motor_test>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000a6c:	f7ff fdde 	bl	800062c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000a70:	f008 f81e 	bl	8008ab0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <main+0x34>
	...

08000a78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b094      	sub	sp, #80	; 0x50
 8000a7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a7e:	f107 0320 	add.w	r3, r7, #32
 8000a82:	2230      	movs	r2, #48	; 0x30
 8000a84:	2100      	movs	r1, #0
 8000a86:	4618      	mov	r0, r3
 8000a88:	f00a fa0a 	bl	800aea0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a8c:	f107 030c 	add.w	r3, r7, #12
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]
 8000a9a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	60bb      	str	r3, [r7, #8]
 8000aa0:	4b28      	ldr	r3, [pc, #160]	; (8000b44 <SystemClock_Config+0xcc>)
 8000aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa4:	4a27      	ldr	r2, [pc, #156]	; (8000b44 <SystemClock_Config+0xcc>)
 8000aa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aaa:	6413      	str	r3, [r2, #64]	; 0x40
 8000aac:	4b25      	ldr	r3, [pc, #148]	; (8000b44 <SystemClock_Config+0xcc>)
 8000aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab4:	60bb      	str	r3, [r7, #8]
 8000ab6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ab8:	2300      	movs	r3, #0
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	4b22      	ldr	r3, [pc, #136]	; (8000b48 <SystemClock_Config+0xd0>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a21      	ldr	r2, [pc, #132]	; (8000b48 <SystemClock_Config+0xd0>)
 8000ac2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ac6:	6013      	str	r3, [r2, #0]
 8000ac8:	4b1f      	ldr	r3, [pc, #124]	; (8000b48 <SystemClock_Config+0xd0>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ad0:	607b      	str	r3, [r7, #4]
 8000ad2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ad8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000adc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ae2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8000ae8:	2306      	movs	r3, #6
 8000aea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000aec:	23a8      	movs	r3, #168	; 0xa8
 8000aee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000af0:	2302      	movs	r3, #2
 8000af2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000af4:	2307      	movs	r3, #7
 8000af6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af8:	f107 0320 	add.w	r3, r7, #32
 8000afc:	4618      	mov	r0, r3
 8000afe:	f003 f86d 	bl	8003bdc <HAL_RCC_OscConfig>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b08:	f000 f832 	bl	8000b70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b0c:	230f      	movs	r3, #15
 8000b0e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b10:	2302      	movs	r3, #2
 8000b12:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b14:	2300      	movs	r3, #0
 8000b16:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b18:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b1c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b22:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b24:	f107 030c 	add.w	r3, r7, #12
 8000b28:	2105      	movs	r1, #5
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f003 face 	bl	80040cc <HAL_RCC_ClockConfig>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000b36:	f000 f81b 	bl	8000b70 <Error_Handler>
  }
}
 8000b3a:	bf00      	nop
 8000b3c:	3750      	adds	r7, #80	; 0x50
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40023800 	.word	0x40023800
 8000b48:	40007000 	.word	0x40007000

08000b4c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a04      	ldr	r2, [pc, #16]	; (8000b6c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d101      	bne.n	8000b62 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b5e:	f000 fc7f 	bl	8001460 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40000c00 	.word	0x40000c00

08000b70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b74:	b672      	cpsid	i
}
 8000b76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
		HAL_GPIO_TogglePin(LED_A_GPIO_Port, LED_A_Pin);
 8000b78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b7c:	4803      	ldr	r0, [pc, #12]	; (8000b8c <Error_Handler+0x1c>)
 8000b7e:	f001 fdc2 	bl	8002706 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000b82:	2064      	movs	r0, #100	; 0x64
 8000b84:	f000 fc8c 	bl	80014a0 <HAL_Delay>
		HAL_GPIO_TogglePin(LED_A_GPIO_Port, LED_A_Pin);
 8000b88:	e7f6      	b.n	8000b78 <Error_Handler+0x8>
 8000b8a:	bf00      	nop
 8000b8c:	40021800 	.word	0x40021800

08000b90 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8000b94:	4b17      	ldr	r3, [pc, #92]	; (8000bf4 <MX_SPI5_Init+0x64>)
 8000b96:	4a18      	ldr	r2, [pc, #96]	; (8000bf8 <MX_SPI5_Init+0x68>)
 8000b98:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000b9a:	4b16      	ldr	r3, [pc, #88]	; (8000bf4 <MX_SPI5_Init+0x64>)
 8000b9c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ba0:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000ba2:	4b14      	ldr	r3, [pc, #80]	; (8000bf4 <MX_SPI5_Init+0x64>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ba8:	4b12      	ldr	r3, [pc, #72]	; (8000bf4 <MX_SPI5_Init+0x64>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bae:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <MX_SPI5_Init+0x64>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bb4:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <MX_SPI5_Init+0x64>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000bba:	4b0e      	ldr	r3, [pc, #56]	; (8000bf4 <MX_SPI5_Init+0x64>)
 8000bbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bc0:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000bc2:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <MX_SPI5_Init+0x64>)
 8000bc4:	2230      	movs	r2, #48	; 0x30
 8000bc6:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bc8:	4b0a      	ldr	r3, [pc, #40]	; (8000bf4 <MX_SPI5_Init+0x64>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bce:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <MX_SPI5_Init+0x64>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bd4:	4b07      	ldr	r3, [pc, #28]	; (8000bf4 <MX_SPI5_Init+0x64>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000bda:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <MX_SPI5_Init+0x64>)
 8000bdc:	220a      	movs	r2, #10
 8000bde:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000be0:	4804      	ldr	r0, [pc, #16]	; (8000bf4 <MX_SPI5_Init+0x64>)
 8000be2:	f003 fc71 	bl	80044c8 <HAL_SPI_Init>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000bec:	f7ff ffc0 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000bf0:	bf00      	nop
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	20000198 	.word	0x20000198
 8000bf8:	40015000 	.word	0x40015000

08000bfc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08a      	sub	sp, #40	; 0x28
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
 8000c12:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a19      	ldr	r2, [pc, #100]	; (8000c80 <HAL_SPI_MspInit+0x84>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d12c      	bne.n	8000c78 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	4b18      	ldr	r3, [pc, #96]	; (8000c84 <HAL_SPI_MspInit+0x88>)
 8000c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c26:	4a17      	ldr	r2, [pc, #92]	; (8000c84 <HAL_SPI_MspInit+0x88>)
 8000c28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000c2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c2e:	4b15      	ldr	r3, [pc, #84]	; (8000c84 <HAL_SPI_MspInit+0x88>)
 8000c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c36:	613b      	str	r3, [r7, #16]
 8000c38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <HAL_SPI_MspInit+0x88>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	4a10      	ldr	r2, [pc, #64]	; (8000c84 <HAL_SPI_MspInit+0x88>)
 8000c44:	f043 0320 	orr.w	r3, r3, #32
 8000c48:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4a:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <HAL_SPI_MspInit+0x88>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	f003 0320 	and.w	r3, r3, #32
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF9     ------> SPI5_MOSI
    PF8     ------> SPI5_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_8;
 8000c56:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000c5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c64:	2303      	movs	r3, #3
 8000c66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000c68:	2305      	movs	r3, #5
 8000c6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c6c:	f107 0314 	add.w	r3, r7, #20
 8000c70:	4619      	mov	r1, r3
 8000c72:	4805      	ldr	r0, [pc, #20]	; (8000c88 <HAL_SPI_MspInit+0x8c>)
 8000c74:	f001 fb82 	bl	800237c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8000c78:	bf00      	nop
 8000c7a:	3728      	adds	r7, #40	; 0x28
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	40015000 	.word	0x40015000
 8000c84:	40023800 	.word	0x40023800
 8000c88:	40021400 	.word	0x40021400

08000c8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	607b      	str	r3, [r7, #4]
 8000c96:	4b12      	ldr	r3, [pc, #72]	; (8000ce0 <HAL_MspInit+0x54>)
 8000c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9a:	4a11      	ldr	r2, [pc, #68]	; (8000ce0 <HAL_MspInit+0x54>)
 8000c9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ca0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ca2:	4b0f      	ldr	r3, [pc, #60]	; (8000ce0 <HAL_MspInit+0x54>)
 8000ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	603b      	str	r3, [r7, #0]
 8000cb2:	4b0b      	ldr	r3, [pc, #44]	; (8000ce0 <HAL_MspInit+0x54>)
 8000cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb6:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <HAL_MspInit+0x54>)
 8000cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cbc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cbe:	4b08      	ldr	r3, [pc, #32]	; (8000ce0 <HAL_MspInit+0x54>)
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cc6:	603b      	str	r3, [r7, #0]
 8000cc8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	210f      	movs	r1, #15
 8000cce:	f06f 0001 	mvn.w	r0, #1
 8000cd2:	f001 fb29 	bl	8002328 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40023800 	.word	0x40023800

08000ce4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08e      	sub	sp, #56	; 0x38
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000cec:	2300      	movs	r3, #0
 8000cee:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	4b33      	ldr	r3, [pc, #204]	; (8000dc8 <HAL_InitTick+0xe4>)
 8000cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfc:	4a32      	ldr	r2, [pc, #200]	; (8000dc8 <HAL_InitTick+0xe4>)
 8000cfe:	f043 0308 	orr.w	r3, r3, #8
 8000d02:	6413      	str	r3, [r2, #64]	; 0x40
 8000d04:	4b30      	ldr	r3, [pc, #192]	; (8000dc8 <HAL_InitTick+0xe4>)
 8000d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d08:	f003 0308 	and.w	r3, r3, #8
 8000d0c:	60fb      	str	r3, [r7, #12]
 8000d0e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d10:	f107 0210 	add.w	r2, r7, #16
 8000d14:	f107 0314 	add.w	r3, r7, #20
 8000d18:	4611      	mov	r1, r2
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f003 fba2 	bl	8004464 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000d20:	6a3b      	ldr	r3, [r7, #32]
 8000d22:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d103      	bne.n	8000d32 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d2a:	f003 fb87 	bl	800443c <HAL_RCC_GetPCLK1Freq>
 8000d2e:	6378      	str	r0, [r7, #52]	; 0x34
 8000d30:	e004      	b.n	8000d3c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000d32:	f003 fb83 	bl	800443c <HAL_RCC_GetPCLK1Freq>
 8000d36:	4603      	mov	r3, r0
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d3e:	4a23      	ldr	r2, [pc, #140]	; (8000dcc <HAL_InitTick+0xe8>)
 8000d40:	fba2 2303 	umull	r2, r3, r2, r3
 8000d44:	0c9b      	lsrs	r3, r3, #18
 8000d46:	3b01      	subs	r3, #1
 8000d48:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000d4a:	4b21      	ldr	r3, [pc, #132]	; (8000dd0 <HAL_InitTick+0xec>)
 8000d4c:	4a21      	ldr	r2, [pc, #132]	; (8000dd4 <HAL_InitTick+0xf0>)
 8000d4e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000d50:	4b1f      	ldr	r3, [pc, #124]	; (8000dd0 <HAL_InitTick+0xec>)
 8000d52:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d56:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000d58:	4a1d      	ldr	r2, [pc, #116]	; (8000dd0 <HAL_InitTick+0xec>)
 8000d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d5c:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000d5e:	4b1c      	ldr	r3, [pc, #112]	; (8000dd0 <HAL_InitTick+0xec>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d64:	4b1a      	ldr	r3, [pc, #104]	; (8000dd0 <HAL_InitTick+0xec>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d6a:	4b19      	ldr	r3, [pc, #100]	; (8000dd0 <HAL_InitTick+0xec>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8000d70:	4817      	ldr	r0, [pc, #92]	; (8000dd0 <HAL_InitTick+0xec>)
 8000d72:	f003 fc32 	bl	80045da <HAL_TIM_Base_Init>
 8000d76:	4603      	mov	r3, r0
 8000d78:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000d7c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d11b      	bne.n	8000dbc <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8000d84:	4812      	ldr	r0, [pc, #72]	; (8000dd0 <HAL_InitTick+0xec>)
 8000d86:	f003 fc77 	bl	8004678 <HAL_TIM_Base_Start_IT>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000d90:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d111      	bne.n	8000dbc <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000d98:	2032      	movs	r0, #50	; 0x32
 8000d9a:	f001 fae1 	bl	8002360 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2b0f      	cmp	r3, #15
 8000da2:	d808      	bhi.n	8000db6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8000da4:	2200      	movs	r2, #0
 8000da6:	6879      	ldr	r1, [r7, #4]
 8000da8:	2032      	movs	r0, #50	; 0x32
 8000daa:	f001 fabd 	bl	8002328 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dae:	4a0a      	ldr	r2, [pc, #40]	; (8000dd8 <HAL_InitTick+0xf4>)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6013      	str	r3, [r2, #0]
 8000db4:	e002      	b.n	8000dbc <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000dbc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3738      	adds	r7, #56	; 0x38
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40023800 	.word	0x40023800
 8000dcc:	431bde83 	.word	0x431bde83
 8000dd0:	200001f0 	.word	0x200001f0
 8000dd4:	40000c00 	.word	0x40000c00
 8000dd8:	20000004 	.word	0x20000004

08000ddc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000de0:	e7fe      	b.n	8000de0 <NMI_Handler+0x4>

08000de2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000de2:	b480      	push	{r7}
 8000de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000de6:	e7fe      	b.n	8000de6 <HardFault_Handler+0x4>

08000de8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dec:	e7fe      	b.n	8000dec <MemManage_Handler+0x4>

08000dee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dee:	b480      	push	{r7}
 8000df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000df2:	e7fe      	b.n	8000df2 <BusFault_Handler+0x4>

08000df4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000df8:	e7fe      	b.n	8000df8 <UsageFault_Handler+0x4>

08000dfa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr

08000e08 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000e0c:	4802      	ldr	r0, [pc, #8]	; (8000e18 <CAN1_TX_IRQHandler+0x10>)
 8000e0e:	f000 ffa3 	bl	8001d58 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	2000016c 	.word	0x2000016c

08000e1c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000e20:	4802      	ldr	r0, [pc, #8]	; (8000e2c <CAN1_RX0_IRQHandler+0x10>)
 8000e22:	f000 ff99 	bl	8001d58 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	2000016c 	.word	0x2000016c

08000e30 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e34:	4802      	ldr	r0, [pc, #8]	; (8000e40 <TIM2_IRQHandler+0x10>)
 8000e36:	f003 fcde 	bl	80047f6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20000280 	.word	0x20000280

08000e44 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000e48:	4802      	ldr	r0, [pc, #8]	; (8000e54 <TIM5_IRQHandler+0x10>)
 8000e4a:	f003 fcd4 	bl	80047f6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	200001f0 	.word	0x200001f0

08000e58 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000e5c:	4802      	ldr	r0, [pc, #8]	; (8000e68 <OTG_FS_IRQHandler+0x10>)
 8000e5e:	f001 fdb0 	bl	80029c2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	20005590 	.word	0x20005590

08000e6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e70:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <SystemInit+0x20>)
 8000e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e76:	4a05      	ldr	r2, [pc, #20]	; (8000e8c <SystemInit+0x20>)
 8000e78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b092      	sub	sp, #72	; 0x48
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e96:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ea0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
 8000eac:	60da      	str	r2, [r3, #12]
 8000eae:	611a      	str	r2, [r3, #16]
 8000eb0:	615a      	str	r2, [r3, #20]
 8000eb2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000eb4:	1d3b      	adds	r3, r7, #4
 8000eb6:	2220      	movs	r2, #32
 8000eb8:	2100      	movs	r1, #0
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f009 fff0 	bl	800aea0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ec0:	4b39      	ldr	r3, [pc, #228]	; (8000fa8 <MX_TIM1_Init+0x118>)
 8000ec2:	4a3a      	ldr	r2, [pc, #232]	; (8000fac <MX_TIM1_Init+0x11c>)
 8000ec4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16;
 8000ec6:	4b38      	ldr	r3, [pc, #224]	; (8000fa8 <MX_TIM1_Init+0x118>)
 8000ec8:	2210      	movs	r2, #16
 8000eca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ecc:	4b36      	ldr	r3, [pc, #216]	; (8000fa8 <MX_TIM1_Init+0x118>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 8000ed2:	4b35      	ldr	r3, [pc, #212]	; (8000fa8 <MX_TIM1_Init+0x118>)
 8000ed4:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000ed8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eda:	4b33      	ldr	r3, [pc, #204]	; (8000fa8 <MX_TIM1_Init+0x118>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ee0:	4b31      	ldr	r3, [pc, #196]	; (8000fa8 <MX_TIM1_Init+0x118>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ee6:	4b30      	ldr	r3, [pc, #192]	; (8000fa8 <MX_TIM1_Init+0x118>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000eec:	482e      	ldr	r0, [pc, #184]	; (8000fa8 <MX_TIM1_Init+0x118>)
 8000eee:	f003 fc33 	bl	8004758 <HAL_TIM_PWM_Init>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000ef8:	f7ff fe3a 	bl	8000b70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000efc:	2300      	movs	r3, #0
 8000efe:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f00:	2300      	movs	r3, #0
 8000f02:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f04:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4827      	ldr	r0, [pc, #156]	; (8000fa8 <MX_TIM1_Init+0x118>)
 8000f0c:	f004 fa0c 	bl	8005328 <HAL_TIMEx_MasterConfigSynchronization>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000f16:	f7ff fe2b 	bl	8000b70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f1a:	2360      	movs	r3, #96	; 0x60
 8000f1c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1000;
 8000f1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f22:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f24:	2300      	movs	r3, #0
 8000f26:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f30:	2300      	movs	r3, #0
 8000f32:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f34:	2300      	movs	r3, #0
 8000f36:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4819      	ldr	r0, [pc, #100]	; (8000fa8 <MX_TIM1_Init+0x118>)
 8000f42:	f003 fd49 	bl	80049d8 <HAL_TIM_PWM_ConfigChannel>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8000f4c:	f7ff fe10 	bl	8000b70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f54:	220c      	movs	r2, #12
 8000f56:	4619      	mov	r1, r3
 8000f58:	4813      	ldr	r0, [pc, #76]	; (8000fa8 <MX_TIM1_Init+0x118>)
 8000f5a:	f003 fd3d 	bl	80049d8 <HAL_TIM_PWM_ConfigChannel>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8000f64:	f7ff fe04 	bl	8000b70 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f70:	2300      	movs	r3, #0
 8000f72:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f74:	2300      	movs	r3, #0
 8000f76:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f80:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f82:	2300      	movs	r3, #0
 8000f84:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f86:	1d3b      	adds	r3, r7, #4
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4807      	ldr	r0, [pc, #28]	; (8000fa8 <MX_TIM1_Init+0x118>)
 8000f8c:	f004 fa48 	bl	8005420 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8000f96:	f7ff fdeb 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000f9a:	4803      	ldr	r0, [pc, #12]	; (8000fa8 <MX_TIM1_Init+0x118>)
 8000f9c:	f000 f968 	bl	8001270 <HAL_TIM_MspPostInit>

}
 8000fa0:	bf00      	nop
 8000fa2:	3748      	adds	r7, #72	; 0x48
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	20000238 	.word	0x20000238
 8000fac:	40010000 	.word	0x40010000

08000fb0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fb6:	f107 0308 	add.w	r3, r7, #8
 8000fba:	2200      	movs	r2, #0
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	605a      	str	r2, [r3, #4]
 8000fc0:	609a      	str	r2, [r3, #8]
 8000fc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fc4:	463b      	mov	r3, r7
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]
 8000fca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fcc:	4b1d      	ldr	r3, [pc, #116]	; (8001044 <MX_TIM2_Init+0x94>)
 8000fce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fd2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8000fd4:	4b1b      	ldr	r3, [pc, #108]	; (8001044 <MX_TIM2_Init+0x94>)
 8000fd6:	2253      	movs	r2, #83	; 0x53
 8000fd8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fda:	4b1a      	ldr	r3, [pc, #104]	; (8001044 <MX_TIM2_Init+0x94>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000fe0:	4b18      	ldr	r3, [pc, #96]	; (8001044 <MX_TIM2_Init+0x94>)
 8000fe2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fe6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fe8:	4b16      	ldr	r3, [pc, #88]	; (8001044 <MX_TIM2_Init+0x94>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fee:	4b15      	ldr	r3, [pc, #84]	; (8001044 <MX_TIM2_Init+0x94>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ff4:	4813      	ldr	r0, [pc, #76]	; (8001044 <MX_TIM2_Init+0x94>)
 8000ff6:	f003 faf0 	bl	80045da <HAL_TIM_Base_Init>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001000:	f7ff fdb6 	bl	8000b70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001004:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001008:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800100a:	f107 0308 	add.w	r3, r7, #8
 800100e:	4619      	mov	r1, r3
 8001010:	480c      	ldr	r0, [pc, #48]	; (8001044 <MX_TIM2_Init+0x94>)
 8001012:	f003 fda3 	bl	8004b5c <HAL_TIM_ConfigClockSource>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800101c:	f7ff fda8 	bl	8000b70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001020:	2300      	movs	r3, #0
 8001022:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001024:	2300      	movs	r3, #0
 8001026:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001028:	463b      	mov	r3, r7
 800102a:	4619      	mov	r1, r3
 800102c:	4805      	ldr	r0, [pc, #20]	; (8001044 <MX_TIM2_Init+0x94>)
 800102e:	f004 f97b 	bl	8005328 <HAL_TIMEx_MasterConfigSynchronization>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001038:	f7ff fd9a 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800103c:	bf00      	nop
 800103e:	3718      	adds	r7, #24
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	20000280 	.word	0x20000280

08001048 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b08a      	sub	sp, #40	; 0x28
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800104e:	f107 0320 	add.w	r3, r7, #32
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001058:	1d3b      	adds	r3, r7, #4
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	605a      	str	r2, [r3, #4]
 8001060:	609a      	str	r2, [r3, #8]
 8001062:	60da      	str	r2, [r3, #12]
 8001064:	611a      	str	r2, [r3, #16]
 8001066:	615a      	str	r2, [r3, #20]
 8001068:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800106a:	4b22      	ldr	r3, [pc, #136]	; (80010f4 <MX_TIM3_Init+0xac>)
 800106c:	4a22      	ldr	r2, [pc, #136]	; (80010f8 <MX_TIM3_Init+0xb0>)
 800106e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8001070:	4b20      	ldr	r3, [pc, #128]	; (80010f4 <MX_TIM3_Init+0xac>)
 8001072:	2253      	movs	r2, #83	; 0x53
 8001074:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001076:	4b1f      	ldr	r3, [pc, #124]	; (80010f4 <MX_TIM3_Init+0xac>)
 8001078:	2200      	movs	r2, #0
 800107a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000-1;
 800107c:	4b1d      	ldr	r3, [pc, #116]	; (80010f4 <MX_TIM3_Init+0xac>)
 800107e:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001082:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001084:	4b1b      	ldr	r3, [pc, #108]	; (80010f4 <MX_TIM3_Init+0xac>)
 8001086:	2200      	movs	r2, #0
 8001088:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800108a:	4b1a      	ldr	r3, [pc, #104]	; (80010f4 <MX_TIM3_Init+0xac>)
 800108c:	2200      	movs	r2, #0
 800108e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001090:	4818      	ldr	r0, [pc, #96]	; (80010f4 <MX_TIM3_Init+0xac>)
 8001092:	f003 fb61 	bl	8004758 <HAL_TIM_PWM_Init>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800109c:	f7ff fd68 	bl	8000b70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010a0:	2300      	movs	r3, #0
 80010a2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010a4:	2300      	movs	r3, #0
 80010a6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010a8:	f107 0320 	add.w	r3, r7, #32
 80010ac:	4619      	mov	r1, r3
 80010ae:	4811      	ldr	r0, [pc, #68]	; (80010f4 <MX_TIM3_Init+0xac>)
 80010b0:	f004 f93a 	bl	8005328 <HAL_TIMEx_MasterConfigSynchronization>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80010ba:	f7ff fd59 	bl	8000b70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010be:	2360      	movs	r3, #96	; 0x60
 80010c0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010c6:	2300      	movs	r3, #0
 80010c8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010ca:	2300      	movs	r3, #0
 80010cc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010ce:	1d3b      	adds	r3, r7, #4
 80010d0:	2204      	movs	r2, #4
 80010d2:	4619      	mov	r1, r3
 80010d4:	4807      	ldr	r0, [pc, #28]	; (80010f4 <MX_TIM3_Init+0xac>)
 80010d6:	f003 fc7f 	bl	80049d8 <HAL_TIM_PWM_ConfigChannel>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80010e0:	f7ff fd46 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80010e4:	4803      	ldr	r0, [pc, #12]	; (80010f4 <MX_TIM3_Init+0xac>)
 80010e6:	f000 f8c3 	bl	8001270 <HAL_TIM_MspPostInit>

}
 80010ea:	bf00      	nop
 80010ec:	3728      	adds	r7, #40	; 0x28
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	200002c8 	.word	0x200002c8
 80010f8:	40000400 	.word	0x40000400

080010fc <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b088      	sub	sp, #32
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001102:	1d3b      	adds	r3, r7, #4
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]
 8001110:	615a      	str	r2, [r3, #20]
 8001112:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001114:	4b1a      	ldr	r3, [pc, #104]	; (8001180 <MX_TIM12_Init+0x84>)
 8001116:	4a1b      	ldr	r2, [pc, #108]	; (8001184 <MX_TIM12_Init+0x88>)
 8001118:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 83;
 800111a:	4b19      	ldr	r3, [pc, #100]	; (8001180 <MX_TIM12_Init+0x84>)
 800111c:	2253      	movs	r2, #83	; 0x53
 800111e:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001120:	4b17      	ldr	r3, [pc, #92]	; (8001180 <MX_TIM12_Init+0x84>)
 8001122:	2200      	movs	r2, #0
 8001124:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 20000-1;
 8001126:	4b16      	ldr	r3, [pc, #88]	; (8001180 <MX_TIM12_Init+0x84>)
 8001128:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800112c:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800112e:	4b14      	ldr	r3, [pc, #80]	; (8001180 <MX_TIM12_Init+0x84>)
 8001130:	2200      	movs	r2, #0
 8001132:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001134:	4b12      	ldr	r3, [pc, #72]	; (8001180 <MX_TIM12_Init+0x84>)
 8001136:	2200      	movs	r2, #0
 8001138:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800113a:	4811      	ldr	r0, [pc, #68]	; (8001180 <MX_TIM12_Init+0x84>)
 800113c:	f003 fb0c 	bl	8004758 <HAL_TIM_PWM_Init>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8001146:	f7ff fd13 	bl	8000b70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800114a:	2360      	movs	r3, #96	; 0x60
 800114c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800114e:	2300      	movs	r3, #0
 8001150:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001152:	2300      	movs	r3, #0
 8001154:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001156:	2300      	movs	r3, #0
 8001158:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800115a:	1d3b      	adds	r3, r7, #4
 800115c:	2200      	movs	r2, #0
 800115e:	4619      	mov	r1, r3
 8001160:	4807      	ldr	r0, [pc, #28]	; (8001180 <MX_TIM12_Init+0x84>)
 8001162:	f003 fc39 	bl	80049d8 <HAL_TIM_PWM_ConfigChannel>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 800116c:	f7ff fd00 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001170:	4803      	ldr	r0, [pc, #12]	; (8001180 <MX_TIM12_Init+0x84>)
 8001172:	f000 f87d 	bl	8001270 <HAL_TIM_MspPostInit>

}
 8001176:	bf00      	nop
 8001178:	3720      	adds	r7, #32
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20000310 	.word	0x20000310
 8001184:	40001800 	.word	0x40001800

08001188 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001188:	b480      	push	{r7}
 800118a:	b087      	sub	sp, #28
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a1f      	ldr	r2, [pc, #124]	; (8001214 <HAL_TIM_PWM_MspInit+0x8c>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d10e      	bne.n	80011b8 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	617b      	str	r3, [r7, #20]
 800119e:	4b1e      	ldr	r3, [pc, #120]	; (8001218 <HAL_TIM_PWM_MspInit+0x90>)
 80011a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a2:	4a1d      	ldr	r2, [pc, #116]	; (8001218 <HAL_TIM_PWM_MspInit+0x90>)
 80011a4:	f043 0301 	orr.w	r3, r3, #1
 80011a8:	6453      	str	r3, [r2, #68]	; 0x44
 80011aa:	4b1b      	ldr	r3, [pc, #108]	; (8001218 <HAL_TIM_PWM_MspInit+0x90>)
 80011ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ae:	f003 0301 	and.w	r3, r3, #1
 80011b2:	617b      	str	r3, [r7, #20]
 80011b4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 80011b6:	e026      	b.n	8001206 <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM3)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a17      	ldr	r2, [pc, #92]	; (800121c <HAL_TIM_PWM_MspInit+0x94>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d10e      	bne.n	80011e0 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	613b      	str	r3, [r7, #16]
 80011c6:	4b14      	ldr	r3, [pc, #80]	; (8001218 <HAL_TIM_PWM_MspInit+0x90>)
 80011c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ca:	4a13      	ldr	r2, [pc, #76]	; (8001218 <HAL_TIM_PWM_MspInit+0x90>)
 80011cc:	f043 0302 	orr.w	r3, r3, #2
 80011d0:	6413      	str	r3, [r2, #64]	; 0x40
 80011d2:	4b11      	ldr	r3, [pc, #68]	; (8001218 <HAL_TIM_PWM_MspInit+0x90>)
 80011d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	613b      	str	r3, [r7, #16]
 80011dc:	693b      	ldr	r3, [r7, #16]
}
 80011de:	e012      	b.n	8001206 <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM12)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a0e      	ldr	r2, [pc, #56]	; (8001220 <HAL_TIM_PWM_MspInit+0x98>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d10d      	bne.n	8001206 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	4b0a      	ldr	r3, [pc, #40]	; (8001218 <HAL_TIM_PWM_MspInit+0x90>)
 80011f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f2:	4a09      	ldr	r2, [pc, #36]	; (8001218 <HAL_TIM_PWM_MspInit+0x90>)
 80011f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011f8:	6413      	str	r3, [r2, #64]	; 0x40
 80011fa:	4b07      	ldr	r3, [pc, #28]	; (8001218 <HAL_TIM_PWM_MspInit+0x90>)
 80011fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]
}
 8001206:	bf00      	nop
 8001208:	371c      	adds	r7, #28
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	40010000 	.word	0x40010000
 8001218:	40023800 	.word	0x40023800
 800121c:	40000400 	.word	0x40000400
 8001220:	40001800 	.word	0x40001800

08001224 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001234:	d115      	bne.n	8001262 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	60fb      	str	r3, [r7, #12]
 800123a:	4b0c      	ldr	r3, [pc, #48]	; (800126c <HAL_TIM_Base_MspInit+0x48>)
 800123c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123e:	4a0b      	ldr	r2, [pc, #44]	; (800126c <HAL_TIM_Base_MspInit+0x48>)
 8001240:	f043 0301 	orr.w	r3, r3, #1
 8001244:	6413      	str	r3, [r2, #64]	; 0x40
 8001246:	4b09      	ldr	r3, [pc, #36]	; (800126c <HAL_TIM_Base_MspInit+0x48>)
 8001248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001252:	2200      	movs	r2, #0
 8001254:	2105      	movs	r1, #5
 8001256:	201c      	movs	r0, #28
 8001258:	f001 f866 	bl	8002328 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800125c:	201c      	movs	r0, #28
 800125e:	f001 f87f 	bl	8002360 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001262:	bf00      	nop
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40023800 	.word	0x40023800

08001270 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b08c      	sub	sp, #48	; 0x30
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001278:	f107 031c 	add.w	r3, r7, #28
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	60da      	str	r2, [r3, #12]
 8001286:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a46      	ldr	r2, [pc, #280]	; (80013a8 <HAL_TIM_MspPostInit+0x138>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d13e      	bne.n	8001310 <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	61bb      	str	r3, [r7, #24]
 8001296:	4b45      	ldr	r3, [pc, #276]	; (80013ac <HAL_TIM_MspPostInit+0x13c>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	4a44      	ldr	r2, [pc, #272]	; (80013ac <HAL_TIM_MspPostInit+0x13c>)
 800129c:	f043 0301 	orr.w	r3, r3, #1
 80012a0:	6313      	str	r3, [r2, #48]	; 0x30
 80012a2:	4b42      	ldr	r3, [pc, #264]	; (80013ac <HAL_TIM_MspPostInit+0x13c>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	61bb      	str	r3, [r7, #24]
 80012ac:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	617b      	str	r3, [r7, #20]
 80012b2:	4b3e      	ldr	r3, [pc, #248]	; (80013ac <HAL_TIM_MspPostInit+0x13c>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	4a3d      	ldr	r2, [pc, #244]	; (80013ac <HAL_TIM_MspPostInit+0x13c>)
 80012b8:	f043 0310 	orr.w	r3, r3, #16
 80012bc:	6313      	str	r3, [r2, #48]	; 0x30
 80012be:	4b3b      	ldr	r3, [pc, #236]	; (80013ac <HAL_TIM_MspPostInit+0x13c>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	f003 0310 	and.w	r3, r3, #16
 80012c6:	617b      	str	r3, [r7, #20]
 80012c8:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80012ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d0:	2302      	movs	r3, #2
 80012d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d8:	2300      	movs	r3, #0
 80012da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80012dc:	2301      	movs	r3, #1
 80012de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e0:	f107 031c 	add.w	r3, r7, #28
 80012e4:	4619      	mov	r1, r3
 80012e6:	4832      	ldr	r0, [pc, #200]	; (80013b0 <HAL_TIM_MspPostInit+0x140>)
 80012e8:	f001 f848 	bl	800237c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80012ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f2:	2302      	movs	r3, #2
 80012f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f6:	2300      	movs	r3, #0
 80012f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fa:	2300      	movs	r3, #0
 80012fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80012fe:	2301      	movs	r3, #1
 8001300:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001302:	f107 031c 	add.w	r3, r7, #28
 8001306:	4619      	mov	r1, r3
 8001308:	482a      	ldr	r0, [pc, #168]	; (80013b4 <HAL_TIM_MspPostInit+0x144>)
 800130a:	f001 f837 	bl	800237c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800130e:	e046      	b.n	800139e <HAL_TIM_MspPostInit+0x12e>
  else if(timHandle->Instance==TIM3)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a28      	ldr	r2, [pc, #160]	; (80013b8 <HAL_TIM_MspPostInit+0x148>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d11e      	bne.n	8001358 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	613b      	str	r3, [r7, #16]
 800131e:	4b23      	ldr	r3, [pc, #140]	; (80013ac <HAL_TIM_MspPostInit+0x13c>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	4a22      	ldr	r2, [pc, #136]	; (80013ac <HAL_TIM_MspPostInit+0x13c>)
 8001324:	f043 0302 	orr.w	r3, r3, #2
 8001328:	6313      	str	r3, [r2, #48]	; 0x30
 800132a:	4b20      	ldr	r3, [pc, #128]	; (80013ac <HAL_TIM_MspPostInit+0x13c>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	613b      	str	r3, [r7, #16]
 8001334:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001336:	2320      	movs	r3, #32
 8001338:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133a:	2302      	movs	r3, #2
 800133c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133e:	2300      	movs	r3, #0
 8001340:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001342:	2300      	movs	r3, #0
 8001344:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001346:	2302      	movs	r3, #2
 8001348:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800134a:	f107 031c 	add.w	r3, r7, #28
 800134e:	4619      	mov	r1, r3
 8001350:	481a      	ldr	r0, [pc, #104]	; (80013bc <HAL_TIM_MspPostInit+0x14c>)
 8001352:	f001 f813 	bl	800237c <HAL_GPIO_Init>
}
 8001356:	e022      	b.n	800139e <HAL_TIM_MspPostInit+0x12e>
  else if(timHandle->Instance==TIM12)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a18      	ldr	r2, [pc, #96]	; (80013c0 <HAL_TIM_MspPostInit+0x150>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d11d      	bne.n	800139e <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	60fb      	str	r3, [r7, #12]
 8001366:	4b11      	ldr	r3, [pc, #68]	; (80013ac <HAL_TIM_MspPostInit+0x13c>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	4a10      	ldr	r2, [pc, #64]	; (80013ac <HAL_TIM_MspPostInit+0x13c>)
 800136c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001370:	6313      	str	r3, [r2, #48]	; 0x30
 8001372:	4b0e      	ldr	r3, [pc, #56]	; (80013ac <HAL_TIM_MspPostInit+0x13c>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800137e:	2340      	movs	r3, #64	; 0x40
 8001380:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001382:	2302      	movs	r3, #2
 8001384:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138a:	2300      	movs	r3, #0
 800138c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800138e:	2309      	movs	r3, #9
 8001390:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001392:	f107 031c 	add.w	r3, r7, #28
 8001396:	4619      	mov	r1, r3
 8001398:	480a      	ldr	r0, [pc, #40]	; (80013c4 <HAL_TIM_MspPostInit+0x154>)
 800139a:	f000 ffef 	bl	800237c <HAL_GPIO_Init>
}
 800139e:	bf00      	nop
 80013a0:	3730      	adds	r7, #48	; 0x30
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40010000 	.word	0x40010000
 80013ac:	40023800 	.word	0x40023800
 80013b0:	40020000 	.word	0x40020000
 80013b4:	40021000 	.word	0x40021000
 80013b8:	40000400 	.word	0x40000400
 80013bc:	40020400 	.word	0x40020400
 80013c0:	40001800 	.word	0x40001800
 80013c4:	40021c00 	.word	0x40021c00

080013c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001400 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013cc:	f7ff fd4e 	bl	8000e6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013d0:	480c      	ldr	r0, [pc, #48]	; (8001404 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013d2:	490d      	ldr	r1, [pc, #52]	; (8001408 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013d4:	4a0d      	ldr	r2, [pc, #52]	; (800140c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013d8:	e002      	b.n	80013e0 <LoopCopyDataInit>

080013da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013de:	3304      	adds	r3, #4

080013e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013e4:	d3f9      	bcc.n	80013da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013e6:	4a0a      	ldr	r2, [pc, #40]	; (8001410 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013e8:	4c0a      	ldr	r4, [pc, #40]	; (8001414 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013ec:	e001      	b.n	80013f2 <LoopFillZerobss>

080013ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013f0:	3204      	adds	r2, #4

080013f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013f4:	d3fb      	bcc.n	80013ee <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80013f6:	f009 fdb1 	bl	800af5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013fa:	f7ff fb21 	bl	8000a40 <main>
  bx  lr    
 80013fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001400:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001404:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001408:	20000150 	.word	0x20000150
  ldr r2, =_sidata
 800140c:	0800b108 	.word	0x0800b108
  ldr r2, =_sbss
 8001410:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 8001414:	20005e54 	.word	0x20005e54

08001418 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001418:	e7fe      	b.n	8001418 <ADC_IRQHandler>
	...

0800141c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001420:	4b0e      	ldr	r3, [pc, #56]	; (800145c <HAL_Init+0x40>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a0d      	ldr	r2, [pc, #52]	; (800145c <HAL_Init+0x40>)
 8001426:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800142a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800142c:	4b0b      	ldr	r3, [pc, #44]	; (800145c <HAL_Init+0x40>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a0a      	ldr	r2, [pc, #40]	; (800145c <HAL_Init+0x40>)
 8001432:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001436:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001438:	4b08      	ldr	r3, [pc, #32]	; (800145c <HAL_Init+0x40>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a07      	ldr	r2, [pc, #28]	; (800145c <HAL_Init+0x40>)
 800143e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001442:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001444:	2003      	movs	r0, #3
 8001446:	f000 ff64 	bl	8002312 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800144a:	200f      	movs	r0, #15
 800144c:	f7ff fc4a 	bl	8000ce4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001450:	f7ff fc1c 	bl	8000c8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	40023c00 	.word	0x40023c00

08001460 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001464:	4b06      	ldr	r3, [pc, #24]	; (8001480 <HAL_IncTick+0x20>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	461a      	mov	r2, r3
 800146a:	4b06      	ldr	r3, [pc, #24]	; (8001484 <HAL_IncTick+0x24>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4413      	add	r3, r2
 8001470:	4a04      	ldr	r2, [pc, #16]	; (8001484 <HAL_IncTick+0x24>)
 8001472:	6013      	str	r3, [r2, #0]
}
 8001474:	bf00      	nop
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	20000008 	.word	0x20000008
 8001484:	20000358 	.word	0x20000358

08001488 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  return uwTick;
 800148c:	4b03      	ldr	r3, [pc, #12]	; (800149c <HAL_GetTick+0x14>)
 800148e:	681b      	ldr	r3, [r3, #0]
}
 8001490:	4618      	mov	r0, r3
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	20000358 	.word	0x20000358

080014a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014a8:	f7ff ffee 	bl	8001488 <HAL_GetTick>
 80014ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80014b8:	d005      	beq.n	80014c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014ba:	4b0a      	ldr	r3, [pc, #40]	; (80014e4 <HAL_Delay+0x44>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	461a      	mov	r2, r3
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	4413      	add	r3, r2
 80014c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014c6:	bf00      	nop
 80014c8:	f7ff ffde 	bl	8001488 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	68fa      	ldr	r2, [r7, #12]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d8f7      	bhi.n	80014c8 <HAL_Delay+0x28>
  {
  }
}
 80014d8:	bf00      	nop
 80014da:	bf00      	nop
 80014dc:	3710      	adds	r7, #16
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20000008 	.word	0x20000008

080014e8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d101      	bne.n	80014fa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e0ed      	b.n	80016d6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001500:	b2db      	uxtb	r3, r3
 8001502:	2b00      	cmp	r3, #0
 8001504:	d102      	bne.n	800150c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f7ff f826 	bl	8000558 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f042 0201 	orr.w	r2, r2, #1
 800151a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800151c:	f7ff ffb4 	bl	8001488 <HAL_GetTick>
 8001520:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001522:	e012      	b.n	800154a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001524:	f7ff ffb0 	bl	8001488 <HAL_GetTick>
 8001528:	4602      	mov	r2, r0
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	2b0a      	cmp	r3, #10
 8001530:	d90b      	bls.n	800154a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001536:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2205      	movs	r2, #5
 8001542:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e0c5      	b.n	80016d6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f003 0301 	and.w	r3, r3, #1
 8001554:	2b00      	cmp	r3, #0
 8001556:	d0e5      	beq.n	8001524 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f022 0202 	bic.w	r2, r2, #2
 8001566:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001568:	f7ff ff8e 	bl	8001488 <HAL_GetTick>
 800156c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800156e:	e012      	b.n	8001596 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001570:	f7ff ff8a 	bl	8001488 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	2b0a      	cmp	r3, #10
 800157c:	d90b      	bls.n	8001596 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001582:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2205      	movs	r2, #5
 800158e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e09f      	b.n	80016d6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f003 0302 	and.w	r3, r3, #2
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d1e5      	bne.n	8001570 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	7e1b      	ldrb	r3, [r3, #24]
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d108      	bne.n	80015be <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	e007      	b.n	80015ce <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	7e5b      	ldrb	r3, [r3, #25]
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d108      	bne.n	80015e8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	e007      	b.n	80015f8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80015f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	7e9b      	ldrb	r3, [r3, #26]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d108      	bne.n	8001612 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f042 0220 	orr.w	r2, r2, #32
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	e007      	b.n	8001622 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f022 0220 	bic.w	r2, r2, #32
 8001620:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	7edb      	ldrb	r3, [r3, #27]
 8001626:	2b01      	cmp	r3, #1
 8001628:	d108      	bne.n	800163c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f022 0210 	bic.w	r2, r2, #16
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	e007      	b.n	800164c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f042 0210 	orr.w	r2, r2, #16
 800164a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	7f1b      	ldrb	r3, [r3, #28]
 8001650:	2b01      	cmp	r3, #1
 8001652:	d108      	bne.n	8001666 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f042 0208 	orr.w	r2, r2, #8
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	e007      	b.n	8001676 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f022 0208 	bic.w	r2, r2, #8
 8001674:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	7f5b      	ldrb	r3, [r3, #29]
 800167a:	2b01      	cmp	r3, #1
 800167c:	d108      	bne.n	8001690 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f042 0204 	orr.w	r2, r2, #4
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	e007      	b.n	80016a0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f022 0204 	bic.w	r2, r2, #4
 800169e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	689a      	ldr	r2, [r3, #8]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	431a      	orrs	r2, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	691b      	ldr	r3, [r3, #16]
 80016ae:	431a      	orrs	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	695b      	ldr	r3, [r3, #20]
 80016b4:	ea42 0103 	orr.w	r1, r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	1e5a      	subs	r2, r3, #1
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	430a      	orrs	r2, r1
 80016c4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2200      	movs	r2, #0
 80016ca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2201      	movs	r2, #1
 80016d0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3710      	adds	r7, #16
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
	...

080016e0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b087      	sub	sp, #28
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016f6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80016f8:	7cfb      	ldrb	r3, [r7, #19]
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d003      	beq.n	8001706 <HAL_CAN_ConfigFilter+0x26>
 80016fe:	7cfb      	ldrb	r3, [r7, #19]
 8001700:	2b02      	cmp	r3, #2
 8001702:	f040 80be 	bne.w	8001882 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001706:	4b65      	ldr	r3, [pc, #404]	; (800189c <HAL_CAN_ConfigFilter+0x1bc>)
 8001708:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001710:	f043 0201 	orr.w	r2, r3, #1
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001720:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001734:	021b      	lsls	r3, r3, #8
 8001736:	431a      	orrs	r2, r3
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	695b      	ldr	r3, [r3, #20]
 8001742:	f003 031f 	and.w	r3, r3, #31
 8001746:	2201      	movs	r2, #1
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	43db      	mvns	r3, r3
 8001758:	401a      	ands	r2, r3
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	69db      	ldr	r3, [r3, #28]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d123      	bne.n	80017b0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	43db      	mvns	r3, r3
 8001772:	401a      	ands	r2, r3
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001786:	683a      	ldr	r2, [r7, #0]
 8001788:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800178a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	3248      	adds	r2, #72	; 0x48
 8001790:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80017a4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80017a6:	6979      	ldr	r1, [r7, #20]
 80017a8:	3348      	adds	r3, #72	; 0x48
 80017aa:	00db      	lsls	r3, r3, #3
 80017ac:	440b      	add	r3, r1
 80017ae:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	69db      	ldr	r3, [r3, #28]
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d122      	bne.n	80017fe <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	431a      	orrs	r2, r3
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80017d4:	683a      	ldr	r2, [r7, #0]
 80017d6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80017d8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	3248      	adds	r2, #72	; 0x48
 80017de:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80017f2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80017f4:	6979      	ldr	r1, [r7, #20]
 80017f6:	3348      	adds	r3, #72	; 0x48
 80017f8:	00db      	lsls	r3, r3, #3
 80017fa:	440b      	add	r3, r1
 80017fc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	699b      	ldr	r3, [r3, #24]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d109      	bne.n	800181a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	43db      	mvns	r3, r3
 8001810:	401a      	ands	r2, r3
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001818:	e007      	b.n	800182a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	431a      	orrs	r2, r3
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	691b      	ldr	r3, [r3, #16]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d109      	bne.n	8001846 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	43db      	mvns	r3, r3
 800183c:	401a      	ands	r2, r3
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001844:	e007      	b.n	8001856 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	431a      	orrs	r2, r3
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	6a1b      	ldr	r3, [r3, #32]
 800185a:	2b01      	cmp	r3, #1
 800185c:	d107      	bne.n	800186e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	431a      	orrs	r2, r3
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001874:	f023 0201 	bic.w	r2, r3, #1
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800187e:	2300      	movs	r3, #0
 8001880:	e006      	b.n	8001890 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001886:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
  }
}
 8001890:	4618      	mov	r0, r3
 8001892:	371c      	adds	r7, #28
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	40006400 	.word	0x40006400

080018a0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d12e      	bne.n	8001912 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2202      	movs	r2, #2
 80018b8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f022 0201 	bic.w	r2, r2, #1
 80018ca:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80018cc:	f7ff fddc 	bl	8001488 <HAL_GetTick>
 80018d0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80018d2:	e012      	b.n	80018fa <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80018d4:	f7ff fdd8 	bl	8001488 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b0a      	cmp	r3, #10
 80018e0:	d90b      	bls.n	80018fa <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2205      	movs	r2, #5
 80018f2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e012      	b.n	8001920 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f003 0301 	and.w	r3, r3, #1
 8001904:	2b00      	cmp	r3, #0
 8001906:	d1e5      	bne.n	80018d4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2200      	movs	r2, #0
 800190c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800190e:	2300      	movs	r3, #0
 8001910:	e006      	b.n	8001920 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001916:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
  }
}
 8001920:	4618      	mov	r0, r3
 8001922:	3710      	adds	r7, #16
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}

08001928 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001928:	b480      	push	{r7}
 800192a:	b089      	sub	sp, #36	; 0x24
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	607a      	str	r2, [r7, #4]
 8001934:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	f893 3020 	ldrb.w	r3, [r3, #32]
 800193c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001946:	7ffb      	ldrb	r3, [r7, #31]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d003      	beq.n	8001954 <HAL_CAN_AddTxMessage+0x2c>
 800194c:	7ffb      	ldrb	r3, [r7, #31]
 800194e:	2b02      	cmp	r3, #2
 8001950:	f040 80ad 	bne.w	8001aae <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d10a      	bne.n	8001974 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001964:	2b00      	cmp	r3, #0
 8001966:	d105      	bne.n	8001974 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800196e:	2b00      	cmp	r3, #0
 8001970:	f000 8095 	beq.w	8001a9e <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	0e1b      	lsrs	r3, r3, #24
 8001978:	f003 0303 	and.w	r3, r3, #3
 800197c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800197e:	2201      	movs	r2, #1
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	409a      	lsls	r2, r3
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d10d      	bne.n	80019ac <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800199a:	68f9      	ldr	r1, [r7, #12]
 800199c:	6809      	ldr	r1, [r1, #0]
 800199e:	431a      	orrs	r2, r3
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	3318      	adds	r3, #24
 80019a4:	011b      	lsls	r3, r3, #4
 80019a6:	440b      	add	r3, r1
 80019a8:	601a      	str	r2, [r3, #0]
 80019aa:	e00f      	b.n	80019cc <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80019b6:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80019bc:	68f9      	ldr	r1, [r7, #12]
 80019be:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80019c0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	3318      	adds	r3, #24
 80019c6:	011b      	lsls	r3, r3, #4
 80019c8:	440b      	add	r3, r1
 80019ca:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	6819      	ldr	r1, [r3, #0]
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	691a      	ldr	r2, [r3, #16]
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	3318      	adds	r3, #24
 80019d8:	011b      	lsls	r3, r3, #4
 80019da:	440b      	add	r3, r1
 80019dc:	3304      	adds	r3, #4
 80019de:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	7d1b      	ldrb	r3, [r3, #20]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d111      	bne.n	8001a0c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	3318      	adds	r3, #24
 80019f0:	011b      	lsls	r3, r3, #4
 80019f2:	4413      	add	r3, r2
 80019f4:	3304      	adds	r3, #4
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	68fa      	ldr	r2, [r7, #12]
 80019fa:	6811      	ldr	r1, [r2, #0]
 80019fc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	3318      	adds	r3, #24
 8001a04:	011b      	lsls	r3, r3, #4
 8001a06:	440b      	add	r3, r1
 8001a08:	3304      	adds	r3, #4
 8001a0a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	3307      	adds	r3, #7
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	061a      	lsls	r2, r3, #24
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	3306      	adds	r3, #6
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	041b      	lsls	r3, r3, #16
 8001a1c:	431a      	orrs	r2, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	3305      	adds	r3, #5
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	021b      	lsls	r3, r3, #8
 8001a26:	4313      	orrs	r3, r2
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	3204      	adds	r2, #4
 8001a2c:	7812      	ldrb	r2, [r2, #0]
 8001a2e:	4610      	mov	r0, r2
 8001a30:	68fa      	ldr	r2, [r7, #12]
 8001a32:	6811      	ldr	r1, [r2, #0]
 8001a34:	ea43 0200 	orr.w	r2, r3, r0
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	011b      	lsls	r3, r3, #4
 8001a3c:	440b      	add	r3, r1
 8001a3e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001a42:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	3303      	adds	r3, #3
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	061a      	lsls	r2, r3, #24
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	3302      	adds	r3, #2
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	041b      	lsls	r3, r3, #16
 8001a54:	431a      	orrs	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	021b      	lsls	r3, r3, #8
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	7812      	ldrb	r2, [r2, #0]
 8001a64:	4610      	mov	r0, r2
 8001a66:	68fa      	ldr	r2, [r7, #12]
 8001a68:	6811      	ldr	r1, [r2, #0]
 8001a6a:	ea43 0200 	orr.w	r2, r3, r0
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	011b      	lsls	r3, r3, #4
 8001a72:	440b      	add	r3, r1
 8001a74:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001a78:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	3318      	adds	r3, #24
 8001a82:	011b      	lsls	r3, r3, #4
 8001a84:	4413      	add	r3, r2
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	68fa      	ldr	r2, [r7, #12]
 8001a8a:	6811      	ldr	r1, [r2, #0]
 8001a8c:	f043 0201 	orr.w	r2, r3, #1
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	3318      	adds	r3, #24
 8001a94:	011b      	lsls	r3, r3, #4
 8001a96:	440b      	add	r3, r1
 8001a98:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	e00e      	b.n	8001abc <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e006      	b.n	8001abc <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
  }
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3724      	adds	r7, #36	; 0x24
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b087      	sub	sp, #28
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
 8001ad4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001adc:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ade:	7dfb      	ldrb	r3, [r7, #23]
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d003      	beq.n	8001aec <HAL_CAN_GetRxMessage+0x24>
 8001ae4:	7dfb      	ldrb	r3, [r7, #23]
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	f040 8103 	bne.w	8001cf2 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d10e      	bne.n	8001b10 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	f003 0303 	and.w	r3, r3, #3
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d116      	bne.n	8001b2e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b04:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e0f7      	b.n	8001d00 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	691b      	ldr	r3, [r3, #16]
 8001b16:	f003 0303 	and.w	r3, r3, #3
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d107      	bne.n	8001b2e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b22:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e0e8      	b.n	8001d00 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	331b      	adds	r3, #27
 8001b36:	011b      	lsls	r3, r3, #4
 8001b38:	4413      	add	r3, r2
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0204 	and.w	r2, r3, #4
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d10c      	bne.n	8001b66 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	331b      	adds	r3, #27
 8001b54:	011b      	lsls	r3, r3, #4
 8001b56:	4413      	add	r3, r2
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	0d5b      	lsrs	r3, r3, #21
 8001b5c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	e00b      	b.n	8001b7e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	331b      	adds	r3, #27
 8001b6e:	011b      	lsls	r3, r3, #4
 8001b70:	4413      	add	r3, r2
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	08db      	lsrs	r3, r3, #3
 8001b76:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	331b      	adds	r3, #27
 8001b86:	011b      	lsls	r3, r3, #4
 8001b88:	4413      	add	r3, r2
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0202 	and.w	r2, r3, #2
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	331b      	adds	r3, #27
 8001b9c:	011b      	lsls	r3, r3, #4
 8001b9e:	4413      	add	r3, r2
 8001ba0:	3304      	adds	r3, #4
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0308 	and.w	r3, r3, #8
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d003      	beq.n	8001bb4 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2208      	movs	r2, #8
 8001bb0:	611a      	str	r2, [r3, #16]
 8001bb2:	e00b      	b.n	8001bcc <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	331b      	adds	r3, #27
 8001bbc:	011b      	lsls	r3, r3, #4
 8001bbe:	4413      	add	r3, r2
 8001bc0:	3304      	adds	r3, #4
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 020f 	and.w	r2, r3, #15
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	331b      	adds	r3, #27
 8001bd4:	011b      	lsls	r3, r3, #4
 8001bd6:	4413      	add	r3, r2
 8001bd8:	3304      	adds	r3, #4
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	0a1b      	lsrs	r3, r3, #8
 8001bde:	b2da      	uxtb	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	331b      	adds	r3, #27
 8001bec:	011b      	lsls	r3, r3, #4
 8001bee:	4413      	add	r3, r2
 8001bf0:	3304      	adds	r3, #4
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	0c1b      	lsrs	r3, r3, #16
 8001bf6:	b29a      	uxth	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	011b      	lsls	r3, r3, #4
 8001c04:	4413      	add	r3, r2
 8001c06:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	b2da      	uxtb	r2, r3
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	011b      	lsls	r3, r3, #4
 8001c1a:	4413      	add	r3, r2
 8001c1c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	0a1a      	lsrs	r2, r3, #8
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	3301      	adds	r3, #1
 8001c28:	b2d2      	uxtb	r2, r2
 8001c2a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	011b      	lsls	r3, r3, #4
 8001c34:	4413      	add	r3, r2
 8001c36:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	0c1a      	lsrs	r2, r3, #16
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	3302      	adds	r3, #2
 8001c42:	b2d2      	uxtb	r2, r2
 8001c44:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	011b      	lsls	r3, r3, #4
 8001c4e:	4413      	add	r3, r2
 8001c50:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	0e1a      	lsrs	r2, r3, #24
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	3303      	adds	r3, #3
 8001c5c:	b2d2      	uxtb	r2, r2
 8001c5e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	011b      	lsls	r3, r3, #4
 8001c68:	4413      	add	r3, r2
 8001c6a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	3304      	adds	r3, #4
 8001c74:	b2d2      	uxtb	r2, r2
 8001c76:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	011b      	lsls	r3, r3, #4
 8001c80:	4413      	add	r3, r2
 8001c82:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	0a1a      	lsrs	r2, r3, #8
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	3305      	adds	r3, #5
 8001c8e:	b2d2      	uxtb	r2, r2
 8001c90:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	011b      	lsls	r3, r3, #4
 8001c9a:	4413      	add	r3, r2
 8001c9c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	0c1a      	lsrs	r2, r3, #16
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	3306      	adds	r3, #6
 8001ca8:	b2d2      	uxtb	r2, r2
 8001caa:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	011b      	lsls	r3, r3, #4
 8001cb4:	4413      	add	r3, r2
 8001cb6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	0e1a      	lsrs	r2, r3, #24
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	3307      	adds	r3, #7
 8001cc2:	b2d2      	uxtb	r2, r2
 8001cc4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d108      	bne.n	8001cde <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	68da      	ldr	r2, [r3, #12]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f042 0220 	orr.w	r2, r2, #32
 8001cda:	60da      	str	r2, [r3, #12]
 8001cdc:	e007      	b.n	8001cee <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	691a      	ldr	r2, [r3, #16]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f042 0220 	orr.w	r2, r2, #32
 8001cec:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	e006      	b.n	8001d00 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
  }
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	371c      	adds	r7, #28
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b085      	sub	sp, #20
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d1c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d1e:	7bfb      	ldrb	r3, [r7, #15]
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d002      	beq.n	8001d2a <HAL_CAN_ActivateNotification+0x1e>
 8001d24:	7bfb      	ldrb	r3, [r7, #15]
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d109      	bne.n	8001d3e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	6959      	ldr	r1, [r3, #20]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	683a      	ldr	r2, [r7, #0]
 8001d36:	430a      	orrs	r2, r1
 8001d38:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	e006      	b.n	8001d4c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d42:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
  }
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3714      	adds	r7, #20
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b08a      	sub	sp, #40	; 0x28
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001d60:	2300      	movs	r3, #0
 8001d62:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	695b      	ldr	r3, [r3, #20]
 8001d6a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	699b      	ldr	r3, [r3, #24]
 8001d92:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001d94:	6a3b      	ldr	r3, [r7, #32]
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d07c      	beq.n	8001e98 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	f003 0301 	and.w	r3, r3, #1
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d023      	beq.n	8001df0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2201      	movs	r2, #1
 8001dae:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d003      	beq.n	8001dc2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 f983 	bl	80020c6 <HAL_CAN_TxMailbox0CompleteCallback>
 8001dc0:	e016      	b.n	8001df0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	f003 0304 	and.w	r3, r3, #4
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d004      	beq.n	8001dd6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001dd2:	627b      	str	r3, [r7, #36]	; 0x24
 8001dd4:	e00c      	b.n	8001df0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	f003 0308 	and.w	r3, r3, #8
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d004      	beq.n	8001dea <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001de6:	627b      	str	r3, [r7, #36]	; 0x24
 8001de8:	e002      	b.n	8001df0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f000 f989 	bl	8002102 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d024      	beq.n	8001e44 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e02:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d003      	beq.n	8001e16 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f000 f963 	bl	80020da <HAL_CAN_TxMailbox1CompleteCallback>
 8001e14:	e016      	b.n	8001e44 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d004      	beq.n	8001e2a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e22:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e26:	627b      	str	r3, [r7, #36]	; 0x24
 8001e28:	e00c      	b.n	8001e44 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d004      	beq.n	8001e3e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e3a:	627b      	str	r3, [r7, #36]	; 0x24
 8001e3c:	e002      	b.n	8001e44 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 f969 	bl	8002116 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d024      	beq.n	8001e98 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e56:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d003      	beq.n	8001e6a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 f943 	bl	80020ee <HAL_CAN_TxMailbox2CompleteCallback>
 8001e68:	e016      	b.n	8001e98 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d004      	beq.n	8001e7e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e7a:	627b      	str	r3, [r7, #36]	; 0x24
 8001e7c:	e00c      	b.n	8001e98 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d004      	beq.n	8001e92 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e8e:	627b      	str	r3, [r7, #36]	; 0x24
 8001e90:	e002      	b.n	8001e98 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f000 f949 	bl	800212a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001e98:	6a3b      	ldr	r3, [r7, #32]
 8001e9a:	f003 0308 	and.w	r3, r3, #8
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d00c      	beq.n	8001ebc <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	f003 0310 	and.w	r3, r3, #16
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d007      	beq.n	8001ebc <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001eb2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2210      	movs	r2, #16
 8001eba:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001ebc:	6a3b      	ldr	r3, [r7, #32]
 8001ebe:	f003 0304 	and.w	r3, r3, #4
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d00b      	beq.n	8001ede <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	f003 0308 	and.w	r3, r3, #8
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d006      	beq.n	8001ede <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2208      	movs	r2, #8
 8001ed6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f000 f930 	bl	800213e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001ede:	6a3b      	ldr	r3, [r7, #32]
 8001ee0:	f003 0302 	and.w	r3, r3, #2
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d009      	beq.n	8001efc <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	f003 0303 	and.w	r3, r3, #3
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d002      	beq.n	8001efc <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f008 feb2 	bl	800ac60 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001efc:	6a3b      	ldr	r3, [r7, #32]
 8001efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d00c      	beq.n	8001f20 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	f003 0310 	and.w	r3, r3, #16
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d007      	beq.n	8001f20 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f16:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2210      	movs	r2, #16
 8001f1e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001f20:	6a3b      	ldr	r3, [r7, #32]
 8001f22:	f003 0320 	and.w	r3, r3, #32
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d00b      	beq.n	8001f42 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	f003 0308 	and.w	r3, r3, #8
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d006      	beq.n	8001f42 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2208      	movs	r2, #8
 8001f3a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f000 f912 	bl	8002166 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001f42:	6a3b      	ldr	r3, [r7, #32]
 8001f44:	f003 0310 	and.w	r3, r3, #16
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d009      	beq.n	8001f60 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	691b      	ldr	r3, [r3, #16]
 8001f52:	f003 0303 	and.w	r3, r3, #3
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d002      	beq.n	8001f60 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 f8f9 	bl	8002152 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001f60:	6a3b      	ldr	r3, [r7, #32]
 8001f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d00b      	beq.n	8001f82 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	f003 0310 	and.w	r3, r3, #16
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d006      	beq.n	8001f82 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2210      	movs	r2, #16
 8001f7a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f000 f8fc 	bl	800217a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001f82:	6a3b      	ldr	r3, [r7, #32]
 8001f84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d00b      	beq.n	8001fa4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	f003 0308 	and.w	r3, r3, #8
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d006      	beq.n	8001fa4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2208      	movs	r2, #8
 8001f9c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f000 f8f5 	bl	800218e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001fa4:	6a3b      	ldr	r3, [r7, #32]
 8001fa6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d07b      	beq.n	80020a6 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	f003 0304 	and.w	r3, r3, #4
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d072      	beq.n	800209e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001fb8:	6a3b      	ldr	r3, [r7, #32]
 8001fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d008      	beq.n	8001fd4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d003      	beq.n	8001fd4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fce:	f043 0301 	orr.w	r3, r3, #1
 8001fd2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001fd4:	6a3b      	ldr	r3, [r7, #32]
 8001fd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d008      	beq.n	8001ff0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d003      	beq.n	8001ff0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fea:	f043 0302 	orr.w	r3, r3, #2
 8001fee:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001ff0:	6a3b      	ldr	r3, [r7, #32]
 8001ff2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d008      	beq.n	800200c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002000:	2b00      	cmp	r3, #0
 8002002:	d003      	beq.n	800200c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002006:	f043 0304 	orr.w	r3, r3, #4
 800200a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800200c:	6a3b      	ldr	r3, [r7, #32]
 800200e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002012:	2b00      	cmp	r3, #0
 8002014:	d043      	beq.n	800209e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800201c:	2b00      	cmp	r3, #0
 800201e:	d03e      	beq.n	800209e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002026:	2b60      	cmp	r3, #96	; 0x60
 8002028:	d02b      	beq.n	8002082 <HAL_CAN_IRQHandler+0x32a>
 800202a:	2b60      	cmp	r3, #96	; 0x60
 800202c:	d82e      	bhi.n	800208c <HAL_CAN_IRQHandler+0x334>
 800202e:	2b50      	cmp	r3, #80	; 0x50
 8002030:	d022      	beq.n	8002078 <HAL_CAN_IRQHandler+0x320>
 8002032:	2b50      	cmp	r3, #80	; 0x50
 8002034:	d82a      	bhi.n	800208c <HAL_CAN_IRQHandler+0x334>
 8002036:	2b40      	cmp	r3, #64	; 0x40
 8002038:	d019      	beq.n	800206e <HAL_CAN_IRQHandler+0x316>
 800203a:	2b40      	cmp	r3, #64	; 0x40
 800203c:	d826      	bhi.n	800208c <HAL_CAN_IRQHandler+0x334>
 800203e:	2b30      	cmp	r3, #48	; 0x30
 8002040:	d010      	beq.n	8002064 <HAL_CAN_IRQHandler+0x30c>
 8002042:	2b30      	cmp	r3, #48	; 0x30
 8002044:	d822      	bhi.n	800208c <HAL_CAN_IRQHandler+0x334>
 8002046:	2b10      	cmp	r3, #16
 8002048:	d002      	beq.n	8002050 <HAL_CAN_IRQHandler+0x2f8>
 800204a:	2b20      	cmp	r3, #32
 800204c:	d005      	beq.n	800205a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800204e:	e01d      	b.n	800208c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002052:	f043 0308 	orr.w	r3, r3, #8
 8002056:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002058:	e019      	b.n	800208e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800205a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205c:	f043 0310 	orr.w	r3, r3, #16
 8002060:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002062:	e014      	b.n	800208e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002066:	f043 0320 	orr.w	r3, r3, #32
 800206a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800206c:	e00f      	b.n	800208e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800206e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002070:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002074:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002076:	e00a      	b.n	800208e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800207e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002080:	e005      	b.n	800208e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002084:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002088:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800208a:	e000      	b.n	800208e <HAL_CAN_IRQHandler+0x336>
            break;
 800208c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	699a      	ldr	r2, [r3, #24]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800209c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2204      	movs	r2, #4
 80020a4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80020a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d008      	beq.n	80020be <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b2:	431a      	orrs	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f000 f872 	bl	80021a2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80020be:	bf00      	nop
 80020c0:	3728      	adds	r7, #40	; 0x28
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80020c6:	b480      	push	{r7}
 80020c8:	b083      	sub	sp, #12
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80020ce:	bf00      	nop
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80020da:	b480      	push	{r7}
 80020dc:	b083      	sub	sp, #12
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80020e2:	bf00      	nop
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr

080020ee <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80020ee:	b480      	push	{r7}
 80020f0:	b083      	sub	sp, #12
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80020f6:	bf00      	nop
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr

08002102 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002102:	b480      	push	{r7}
 8002104:	b083      	sub	sp, #12
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800210a:	bf00      	nop
 800210c:	370c      	adds	r7, #12
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr

08002116 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002116:	b480      	push	{r7}
 8002118:	b083      	sub	sp, #12
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800211e:	bf00      	nop
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr

0800212a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800212a:	b480      	push	{r7}
 800212c:	b083      	sub	sp, #12
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002132:	bf00      	nop
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr

0800213e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800213e:	b480      	push	{r7}
 8002140:	b083      	sub	sp, #12
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002146:	bf00      	nop
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr

08002152 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002152:	b480      	push	{r7}
 8002154:	b083      	sub	sp, #12
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800215a:	bf00      	nop
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr

08002166 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002166:	b480      	push	{r7}
 8002168:	b083      	sub	sp, #12
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800216e:	bf00      	nop
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr

0800217a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800217a:	b480      	push	{r7}
 800217c:	b083      	sub	sp, #12
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002182:	bf00      	nop
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr

0800218e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800218e:	b480      	push	{r7}
 8002190:	b083      	sub	sp, #12
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002196:	bf00      	nop
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr

080021a2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80021a2:	b480      	push	{r7}
 80021a4:	b083      	sub	sp, #12
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80021aa:	bf00      	nop
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
	...

080021b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f003 0307 	and.w	r3, r3, #7
 80021c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021c8:	4b0c      	ldr	r3, [pc, #48]	; (80021fc <__NVIC_SetPriorityGrouping+0x44>)
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021ce:	68ba      	ldr	r2, [r7, #8]
 80021d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021d4:	4013      	ands	r3, r2
 80021d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021ea:	4a04      	ldr	r2, [pc, #16]	; (80021fc <__NVIC_SetPriorityGrouping+0x44>)
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	60d3      	str	r3, [r2, #12]
}
 80021f0:	bf00      	nop
 80021f2:	3714      	adds	r7, #20
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr
 80021fc:	e000ed00 	.word	0xe000ed00

08002200 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002204:	4b04      	ldr	r3, [pc, #16]	; (8002218 <__NVIC_GetPriorityGrouping+0x18>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	0a1b      	lsrs	r3, r3, #8
 800220a:	f003 0307 	and.w	r3, r3, #7
}
 800220e:	4618      	mov	r0, r3
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr
 8002218:	e000ed00 	.word	0xe000ed00

0800221c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	4603      	mov	r3, r0
 8002224:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222a:	2b00      	cmp	r3, #0
 800222c:	db0b      	blt.n	8002246 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800222e:	79fb      	ldrb	r3, [r7, #7]
 8002230:	f003 021f 	and.w	r2, r3, #31
 8002234:	4907      	ldr	r1, [pc, #28]	; (8002254 <__NVIC_EnableIRQ+0x38>)
 8002236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223a:	095b      	lsrs	r3, r3, #5
 800223c:	2001      	movs	r0, #1
 800223e:	fa00 f202 	lsl.w	r2, r0, r2
 8002242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002246:	bf00      	nop
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	e000e100 	.word	0xe000e100

08002258 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	4603      	mov	r3, r0
 8002260:	6039      	str	r1, [r7, #0]
 8002262:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002268:	2b00      	cmp	r3, #0
 800226a:	db0a      	blt.n	8002282 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	b2da      	uxtb	r2, r3
 8002270:	490c      	ldr	r1, [pc, #48]	; (80022a4 <__NVIC_SetPriority+0x4c>)
 8002272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002276:	0112      	lsls	r2, r2, #4
 8002278:	b2d2      	uxtb	r2, r2
 800227a:	440b      	add	r3, r1
 800227c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002280:	e00a      	b.n	8002298 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	b2da      	uxtb	r2, r3
 8002286:	4908      	ldr	r1, [pc, #32]	; (80022a8 <__NVIC_SetPriority+0x50>)
 8002288:	79fb      	ldrb	r3, [r7, #7]
 800228a:	f003 030f 	and.w	r3, r3, #15
 800228e:	3b04      	subs	r3, #4
 8002290:	0112      	lsls	r2, r2, #4
 8002292:	b2d2      	uxtb	r2, r2
 8002294:	440b      	add	r3, r1
 8002296:	761a      	strb	r2, [r3, #24]
}
 8002298:	bf00      	nop
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr
 80022a4:	e000e100 	.word	0xe000e100
 80022a8:	e000ed00 	.word	0xe000ed00

080022ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b089      	sub	sp, #36	; 0x24
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f003 0307 	and.w	r3, r3, #7
 80022be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	f1c3 0307 	rsb	r3, r3, #7
 80022c6:	2b04      	cmp	r3, #4
 80022c8:	bf28      	it	cs
 80022ca:	2304      	movcs	r3, #4
 80022cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	3304      	adds	r3, #4
 80022d2:	2b06      	cmp	r3, #6
 80022d4:	d902      	bls.n	80022dc <NVIC_EncodePriority+0x30>
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	3b03      	subs	r3, #3
 80022da:	e000      	b.n	80022de <NVIC_EncodePriority+0x32>
 80022dc:	2300      	movs	r3, #0
 80022de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	43da      	mvns	r2, r3
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	401a      	ands	r2, r3
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	fa01 f303 	lsl.w	r3, r1, r3
 80022fe:	43d9      	mvns	r1, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002304:	4313      	orrs	r3, r2
         );
}
 8002306:	4618      	mov	r0, r3
 8002308:	3724      	adds	r7, #36	; 0x24
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr

08002312 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b082      	sub	sp, #8
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f7ff ff4c 	bl	80021b8 <__NVIC_SetPriorityGrouping>
}
 8002320:	bf00      	nop
 8002322:	3708      	adds	r7, #8
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002328:	b580      	push	{r7, lr}
 800232a:	b086      	sub	sp, #24
 800232c:	af00      	add	r7, sp, #0
 800232e:	4603      	mov	r3, r0
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
 8002334:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002336:	2300      	movs	r3, #0
 8002338:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800233a:	f7ff ff61 	bl	8002200 <__NVIC_GetPriorityGrouping>
 800233e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	68b9      	ldr	r1, [r7, #8]
 8002344:	6978      	ldr	r0, [r7, #20]
 8002346:	f7ff ffb1 	bl	80022ac <NVIC_EncodePriority>
 800234a:	4602      	mov	r2, r0
 800234c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002350:	4611      	mov	r1, r2
 8002352:	4618      	mov	r0, r3
 8002354:	f7ff ff80 	bl	8002258 <__NVIC_SetPriority>
}
 8002358:	bf00      	nop
 800235a:	3718      	adds	r7, #24
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	4603      	mov	r3, r0
 8002368:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800236a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff ff54 	bl	800221c <__NVIC_EnableIRQ>
}
 8002374:	bf00      	nop
 8002376:	3708      	adds	r7, #8
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800237c:	b480      	push	{r7}
 800237e:	b089      	sub	sp, #36	; 0x24
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002386:	2300      	movs	r3, #0
 8002388:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800238a:	2300      	movs	r3, #0
 800238c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800238e:	2300      	movs	r3, #0
 8002390:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002392:	2300      	movs	r3, #0
 8002394:	61fb      	str	r3, [r7, #28]
 8002396:	e177      	b.n	8002688 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002398:	2201      	movs	r2, #1
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	697a      	ldr	r2, [r7, #20]
 80023a8:	4013      	ands	r3, r2
 80023aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023ac:	693a      	ldr	r2, [r7, #16]
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	f040 8166 	bne.w	8002682 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f003 0303 	and.w	r3, r3, #3
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d005      	beq.n	80023ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d130      	bne.n	8002430 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	2203      	movs	r2, #3
 80023da:	fa02 f303 	lsl.w	r3, r2, r3
 80023de:	43db      	mvns	r3, r3
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	4013      	ands	r3, r2
 80023e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	68da      	ldr	r2, [r3, #12]
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	fa02 f303 	lsl.w	r3, r2, r3
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002404:	2201      	movs	r2, #1
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	43db      	mvns	r3, r3
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	4013      	ands	r3, r2
 8002412:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	091b      	lsrs	r3, r3, #4
 800241a:	f003 0201 	and.w	r2, r3, #1
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	4313      	orrs	r3, r2
 8002428:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f003 0303 	and.w	r3, r3, #3
 8002438:	2b03      	cmp	r3, #3
 800243a:	d017      	beq.n	800246c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	2203      	movs	r2, #3
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	43db      	mvns	r3, r3
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	4013      	ands	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	689a      	ldr	r2, [r3, #8]
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	005b      	lsls	r3, r3, #1
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	4313      	orrs	r3, r2
 8002464:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f003 0303 	and.w	r3, r3, #3
 8002474:	2b02      	cmp	r3, #2
 8002476:	d123      	bne.n	80024c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	08da      	lsrs	r2, r3, #3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	3208      	adds	r2, #8
 8002480:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002484:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	f003 0307 	and.w	r3, r3, #7
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	220f      	movs	r2, #15
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	43db      	mvns	r3, r3
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	4013      	ands	r3, r2
 800249a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	691a      	ldr	r2, [r3, #16]
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	f003 0307 	and.w	r3, r3, #7
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	08da      	lsrs	r2, r3, #3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	3208      	adds	r2, #8
 80024ba:	69b9      	ldr	r1, [r7, #24]
 80024bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	2203      	movs	r2, #3
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	43db      	mvns	r3, r3
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	4013      	ands	r3, r2
 80024d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f003 0203 	and.w	r2, r3, #3
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f000 80c0 	beq.w	8002682 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002502:	2300      	movs	r3, #0
 8002504:	60fb      	str	r3, [r7, #12]
 8002506:	4b66      	ldr	r3, [pc, #408]	; (80026a0 <HAL_GPIO_Init+0x324>)
 8002508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250a:	4a65      	ldr	r2, [pc, #404]	; (80026a0 <HAL_GPIO_Init+0x324>)
 800250c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002510:	6453      	str	r3, [r2, #68]	; 0x44
 8002512:	4b63      	ldr	r3, [pc, #396]	; (80026a0 <HAL_GPIO_Init+0x324>)
 8002514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002516:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800251a:	60fb      	str	r3, [r7, #12]
 800251c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800251e:	4a61      	ldr	r2, [pc, #388]	; (80026a4 <HAL_GPIO_Init+0x328>)
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	089b      	lsrs	r3, r3, #2
 8002524:	3302      	adds	r3, #2
 8002526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800252a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	f003 0303 	and.w	r3, r3, #3
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	220f      	movs	r2, #15
 8002536:	fa02 f303 	lsl.w	r3, r2, r3
 800253a:	43db      	mvns	r3, r3
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	4013      	ands	r3, r2
 8002540:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a58      	ldr	r2, [pc, #352]	; (80026a8 <HAL_GPIO_Init+0x32c>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d037      	beq.n	80025ba <HAL_GPIO_Init+0x23e>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a57      	ldr	r2, [pc, #348]	; (80026ac <HAL_GPIO_Init+0x330>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d031      	beq.n	80025b6 <HAL_GPIO_Init+0x23a>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a56      	ldr	r2, [pc, #344]	; (80026b0 <HAL_GPIO_Init+0x334>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d02b      	beq.n	80025b2 <HAL_GPIO_Init+0x236>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a55      	ldr	r2, [pc, #340]	; (80026b4 <HAL_GPIO_Init+0x338>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d025      	beq.n	80025ae <HAL_GPIO_Init+0x232>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a54      	ldr	r2, [pc, #336]	; (80026b8 <HAL_GPIO_Init+0x33c>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d01f      	beq.n	80025aa <HAL_GPIO_Init+0x22e>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a53      	ldr	r2, [pc, #332]	; (80026bc <HAL_GPIO_Init+0x340>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d019      	beq.n	80025a6 <HAL_GPIO_Init+0x22a>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a52      	ldr	r2, [pc, #328]	; (80026c0 <HAL_GPIO_Init+0x344>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d013      	beq.n	80025a2 <HAL_GPIO_Init+0x226>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a51      	ldr	r2, [pc, #324]	; (80026c4 <HAL_GPIO_Init+0x348>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d00d      	beq.n	800259e <HAL_GPIO_Init+0x222>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a50      	ldr	r2, [pc, #320]	; (80026c8 <HAL_GPIO_Init+0x34c>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d007      	beq.n	800259a <HAL_GPIO_Init+0x21e>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a4f      	ldr	r2, [pc, #316]	; (80026cc <HAL_GPIO_Init+0x350>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d101      	bne.n	8002596 <HAL_GPIO_Init+0x21a>
 8002592:	2309      	movs	r3, #9
 8002594:	e012      	b.n	80025bc <HAL_GPIO_Init+0x240>
 8002596:	230a      	movs	r3, #10
 8002598:	e010      	b.n	80025bc <HAL_GPIO_Init+0x240>
 800259a:	2308      	movs	r3, #8
 800259c:	e00e      	b.n	80025bc <HAL_GPIO_Init+0x240>
 800259e:	2307      	movs	r3, #7
 80025a0:	e00c      	b.n	80025bc <HAL_GPIO_Init+0x240>
 80025a2:	2306      	movs	r3, #6
 80025a4:	e00a      	b.n	80025bc <HAL_GPIO_Init+0x240>
 80025a6:	2305      	movs	r3, #5
 80025a8:	e008      	b.n	80025bc <HAL_GPIO_Init+0x240>
 80025aa:	2304      	movs	r3, #4
 80025ac:	e006      	b.n	80025bc <HAL_GPIO_Init+0x240>
 80025ae:	2303      	movs	r3, #3
 80025b0:	e004      	b.n	80025bc <HAL_GPIO_Init+0x240>
 80025b2:	2302      	movs	r3, #2
 80025b4:	e002      	b.n	80025bc <HAL_GPIO_Init+0x240>
 80025b6:	2301      	movs	r3, #1
 80025b8:	e000      	b.n	80025bc <HAL_GPIO_Init+0x240>
 80025ba:	2300      	movs	r3, #0
 80025bc:	69fa      	ldr	r2, [r7, #28]
 80025be:	f002 0203 	and.w	r2, r2, #3
 80025c2:	0092      	lsls	r2, r2, #2
 80025c4:	4093      	lsls	r3, r2
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025cc:	4935      	ldr	r1, [pc, #212]	; (80026a4 <HAL_GPIO_Init+0x328>)
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	089b      	lsrs	r3, r3, #2
 80025d2:	3302      	adds	r3, #2
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025da:	4b3d      	ldr	r3, [pc, #244]	; (80026d0 <HAL_GPIO_Init+0x354>)
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	43db      	mvns	r3, r3
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	4013      	ands	r3, r2
 80025e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d003      	beq.n	80025fe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025fe:	4a34      	ldr	r2, [pc, #208]	; (80026d0 <HAL_GPIO_Init+0x354>)
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002604:	4b32      	ldr	r3, [pc, #200]	; (80026d0 <HAL_GPIO_Init+0x354>)
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	43db      	mvns	r3, r3
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	4013      	ands	r3, r2
 8002612:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d003      	beq.n	8002628 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	4313      	orrs	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002628:	4a29      	ldr	r2, [pc, #164]	; (80026d0 <HAL_GPIO_Init+0x354>)
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800262e:	4b28      	ldr	r3, [pc, #160]	; (80026d0 <HAL_GPIO_Init+0x354>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	43db      	mvns	r3, r3
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	4013      	ands	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d003      	beq.n	8002652 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	4313      	orrs	r3, r2
 8002650:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002652:	4a1f      	ldr	r2, [pc, #124]	; (80026d0 <HAL_GPIO_Init+0x354>)
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002658:	4b1d      	ldr	r3, [pc, #116]	; (80026d0 <HAL_GPIO_Init+0x354>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	43db      	mvns	r3, r3
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	4013      	ands	r3, r2
 8002666:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d003      	beq.n	800267c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	4313      	orrs	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800267c:	4a14      	ldr	r2, [pc, #80]	; (80026d0 <HAL_GPIO_Init+0x354>)
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	3301      	adds	r3, #1
 8002686:	61fb      	str	r3, [r7, #28]
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	2b0f      	cmp	r3, #15
 800268c:	f67f ae84 	bls.w	8002398 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002690:	bf00      	nop
 8002692:	bf00      	nop
 8002694:	3724      	adds	r7, #36	; 0x24
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	40023800 	.word	0x40023800
 80026a4:	40013800 	.word	0x40013800
 80026a8:	40020000 	.word	0x40020000
 80026ac:	40020400 	.word	0x40020400
 80026b0:	40020800 	.word	0x40020800
 80026b4:	40020c00 	.word	0x40020c00
 80026b8:	40021000 	.word	0x40021000
 80026bc:	40021400 	.word	0x40021400
 80026c0:	40021800 	.word	0x40021800
 80026c4:	40021c00 	.word	0x40021c00
 80026c8:	40022000 	.word	0x40022000
 80026cc:	40022400 	.word	0x40022400
 80026d0:	40013c00 	.word	0x40013c00

080026d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	460b      	mov	r3, r1
 80026de:	807b      	strh	r3, [r7, #2]
 80026e0:	4613      	mov	r3, r2
 80026e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026e4:	787b      	ldrb	r3, [r7, #1]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d003      	beq.n	80026f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026ea:	887a      	ldrh	r2, [r7, #2]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80026f0:	e003      	b.n	80026fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026f2:	887b      	ldrh	r3, [r7, #2]
 80026f4:	041a      	lsls	r2, r3, #16
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	619a      	str	r2, [r3, #24]
}
 80026fa:	bf00      	nop
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr

08002706 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002706:	b480      	push	{r7}
 8002708:	b085      	sub	sp, #20
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
 800270e:	460b      	mov	r3, r1
 8002710:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	695b      	ldr	r3, [r3, #20]
 8002716:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002718:	887a      	ldrh	r2, [r7, #2]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	4013      	ands	r3, r2
 800271e:	041a      	lsls	r2, r3, #16
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	43d9      	mvns	r1, r3
 8002724:	887b      	ldrh	r3, [r7, #2]
 8002726:	400b      	ands	r3, r1
 8002728:	431a      	orrs	r2, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	619a      	str	r2, [r3, #24]
}
 800272e:	bf00      	nop
 8002730:	3714      	adds	r7, #20
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr

0800273a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	b086      	sub	sp, #24
 800273e:	af02      	add	r7, sp, #8
 8002740:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d101      	bne.n	800274c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e101      	b.n	8002950 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d106      	bne.n	800276c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f007 fd54 	bl	800a214 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2203      	movs	r2, #3
 8002770:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800277a:	d102      	bne.n	8002782 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4618      	mov	r0, r3
 8002788:	f002 ffc7 	bl	800571a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6818      	ldr	r0, [r3, #0]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	7c1a      	ldrb	r2, [r3, #16]
 8002794:	f88d 2000 	strb.w	r2, [sp]
 8002798:	3304      	adds	r3, #4
 800279a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800279c:	f002 fea6 	bl	80054ec <USB_CoreInit>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d005      	beq.n	80027b2 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2202      	movs	r2, #2
 80027aa:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e0ce      	b.n	8002950 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2100      	movs	r1, #0
 80027b8:	4618      	mov	r0, r3
 80027ba:	f002 ffbf 	bl	800573c <USB_SetCurrentMode>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d005      	beq.n	80027d0 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2202      	movs	r2, #2
 80027c8:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e0bf      	b.n	8002950 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027d0:	2300      	movs	r3, #0
 80027d2:	73fb      	strb	r3, [r7, #15]
 80027d4:	e04a      	b.n	800286c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80027d6:	7bfa      	ldrb	r2, [r7, #15]
 80027d8:	6879      	ldr	r1, [r7, #4]
 80027da:	4613      	mov	r3, r2
 80027dc:	00db      	lsls	r3, r3, #3
 80027de:	4413      	add	r3, r2
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	440b      	add	r3, r1
 80027e4:	3315      	adds	r3, #21
 80027e6:	2201      	movs	r2, #1
 80027e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80027ea:	7bfa      	ldrb	r2, [r7, #15]
 80027ec:	6879      	ldr	r1, [r7, #4]
 80027ee:	4613      	mov	r3, r2
 80027f0:	00db      	lsls	r3, r3, #3
 80027f2:	4413      	add	r3, r2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	440b      	add	r3, r1
 80027f8:	3314      	adds	r3, #20
 80027fa:	7bfa      	ldrb	r2, [r7, #15]
 80027fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80027fe:	7bfa      	ldrb	r2, [r7, #15]
 8002800:	7bfb      	ldrb	r3, [r7, #15]
 8002802:	b298      	uxth	r0, r3
 8002804:	6879      	ldr	r1, [r7, #4]
 8002806:	4613      	mov	r3, r2
 8002808:	00db      	lsls	r3, r3, #3
 800280a:	4413      	add	r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	440b      	add	r3, r1
 8002810:	332e      	adds	r3, #46	; 0x2e
 8002812:	4602      	mov	r2, r0
 8002814:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002816:	7bfa      	ldrb	r2, [r7, #15]
 8002818:	6879      	ldr	r1, [r7, #4]
 800281a:	4613      	mov	r3, r2
 800281c:	00db      	lsls	r3, r3, #3
 800281e:	4413      	add	r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	440b      	add	r3, r1
 8002824:	3318      	adds	r3, #24
 8002826:	2200      	movs	r2, #0
 8002828:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800282a:	7bfa      	ldrb	r2, [r7, #15]
 800282c:	6879      	ldr	r1, [r7, #4]
 800282e:	4613      	mov	r3, r2
 8002830:	00db      	lsls	r3, r3, #3
 8002832:	4413      	add	r3, r2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	440b      	add	r3, r1
 8002838:	331c      	adds	r3, #28
 800283a:	2200      	movs	r2, #0
 800283c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800283e:	7bfa      	ldrb	r2, [r7, #15]
 8002840:	6879      	ldr	r1, [r7, #4]
 8002842:	4613      	mov	r3, r2
 8002844:	00db      	lsls	r3, r3, #3
 8002846:	4413      	add	r3, r2
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	440b      	add	r3, r1
 800284c:	3320      	adds	r3, #32
 800284e:	2200      	movs	r2, #0
 8002850:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002852:	7bfa      	ldrb	r2, [r7, #15]
 8002854:	6879      	ldr	r1, [r7, #4]
 8002856:	4613      	mov	r3, r2
 8002858:	00db      	lsls	r3, r3, #3
 800285a:	4413      	add	r3, r2
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	440b      	add	r3, r1
 8002860:	3324      	adds	r3, #36	; 0x24
 8002862:	2200      	movs	r2, #0
 8002864:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002866:	7bfb      	ldrb	r3, [r7, #15]
 8002868:	3301      	adds	r3, #1
 800286a:	73fb      	strb	r3, [r7, #15]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	791b      	ldrb	r3, [r3, #4]
 8002870:	7bfa      	ldrb	r2, [r7, #15]
 8002872:	429a      	cmp	r2, r3
 8002874:	d3af      	bcc.n	80027d6 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002876:	2300      	movs	r3, #0
 8002878:	73fb      	strb	r3, [r7, #15]
 800287a:	e044      	b.n	8002906 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800287c:	7bfa      	ldrb	r2, [r7, #15]
 800287e:	6879      	ldr	r1, [r7, #4]
 8002880:	4613      	mov	r3, r2
 8002882:	00db      	lsls	r3, r3, #3
 8002884:	4413      	add	r3, r2
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	440b      	add	r3, r1
 800288a:	f203 2355 	addw	r3, r3, #597	; 0x255
 800288e:	2200      	movs	r2, #0
 8002890:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002892:	7bfa      	ldrb	r2, [r7, #15]
 8002894:	6879      	ldr	r1, [r7, #4]
 8002896:	4613      	mov	r3, r2
 8002898:	00db      	lsls	r3, r3, #3
 800289a:	4413      	add	r3, r2
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	440b      	add	r3, r1
 80028a0:	f503 7315 	add.w	r3, r3, #596	; 0x254
 80028a4:	7bfa      	ldrb	r2, [r7, #15]
 80028a6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80028a8:	7bfa      	ldrb	r2, [r7, #15]
 80028aa:	6879      	ldr	r1, [r7, #4]
 80028ac:	4613      	mov	r3, r2
 80028ae:	00db      	lsls	r3, r3, #3
 80028b0:	4413      	add	r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	440b      	add	r3, r1
 80028b6:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80028ba:	2200      	movs	r2, #0
 80028bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80028be:	7bfa      	ldrb	r2, [r7, #15]
 80028c0:	6879      	ldr	r1, [r7, #4]
 80028c2:	4613      	mov	r3, r2
 80028c4:	00db      	lsls	r3, r3, #3
 80028c6:	4413      	add	r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	440b      	add	r3, r1
 80028cc:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 80028d0:	2200      	movs	r2, #0
 80028d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80028d4:	7bfa      	ldrb	r2, [r7, #15]
 80028d6:	6879      	ldr	r1, [r7, #4]
 80028d8:	4613      	mov	r3, r2
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	4413      	add	r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	440b      	add	r3, r1
 80028e2:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80028e6:	2200      	movs	r2, #0
 80028e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80028ea:	7bfa      	ldrb	r2, [r7, #15]
 80028ec:	6879      	ldr	r1, [r7, #4]
 80028ee:	4613      	mov	r3, r2
 80028f0:	00db      	lsls	r3, r3, #3
 80028f2:	4413      	add	r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	440b      	add	r3, r1
 80028f8:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80028fc:	2200      	movs	r2, #0
 80028fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002900:	7bfb      	ldrb	r3, [r7, #15]
 8002902:	3301      	adds	r3, #1
 8002904:	73fb      	strb	r3, [r7, #15]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	791b      	ldrb	r3, [r3, #4]
 800290a:	7bfa      	ldrb	r2, [r7, #15]
 800290c:	429a      	cmp	r2, r3
 800290e:	d3b5      	bcc.n	800287c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6818      	ldr	r0, [r3, #0]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	7c1a      	ldrb	r2, [r3, #16]
 8002918:	f88d 2000 	strb.w	r2, [sp]
 800291c:	3304      	adds	r3, #4
 800291e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002920:	f002 ff58 	bl	80057d4 <USB_DevInit>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d005      	beq.n	8002936 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2202      	movs	r2, #2
 800292e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e00c      	b.n	8002950 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4618      	mov	r0, r3
 800294a:	f003 ff9c 	bl	8006886 <USB_DevDisconnect>

  return HAL_OK;
 800294e:	2300      	movs	r3, #0
}
 8002950:	4618      	mov	r0, r3
 8002952:	3710      	adds	r7, #16
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800296c:	2b01      	cmp	r3, #1
 800296e:	d101      	bne.n	8002974 <HAL_PCD_Start+0x1c>
 8002970:	2302      	movs	r3, #2
 8002972:	e022      	b.n	80029ba <HAL_PCD_Start+0x62>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002984:	2b00      	cmp	r3, #0
 8002986:	d009      	beq.n	800299c <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800298c:	2b01      	cmp	r3, #1
 800298e:	d105      	bne.n	800299c <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002994:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4618      	mov	r0, r3
 80029a2:	f002 fea9 	bl	80056f8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f003 ff4a 	bl	8006844 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3710      	adds	r7, #16
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}

080029c2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80029c2:	b590      	push	{r4, r7, lr}
 80029c4:	b08d      	sub	sp, #52	; 0x34
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029d0:	6a3b      	ldr	r3, [r7, #32]
 80029d2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4618      	mov	r0, r3
 80029da:	f004 f808 	bl	80069ee <USB_GetMode>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	f040 848c 	bne.w	80032fe <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f003 ff6c 	bl	80068c8 <USB_ReadInterrupts>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	f000 8482 	beq.w	80032fc <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	0a1b      	lsrs	r3, r3, #8
 8002a02:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f003 ff59 	bl	80068c8 <USB_ReadInterrupts>
 8002a16:	4603      	mov	r3, r0
 8002a18:	f003 0302 	and.w	r3, r3, #2
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d107      	bne.n	8002a30 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	695a      	ldr	r2, [r3, #20]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f002 0202 	and.w	r2, r2, #2
 8002a2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f003 ff47 	bl	80068c8 <USB_ReadInterrupts>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	f003 0310 	and.w	r3, r3, #16
 8002a40:	2b10      	cmp	r3, #16
 8002a42:	d161      	bne.n	8002b08 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	699a      	ldr	r2, [r3, #24]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f022 0210 	bic.w	r2, r2, #16
 8002a52:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002a54:	6a3b      	ldr	r3, [r7, #32]
 8002a56:	6a1b      	ldr	r3, [r3, #32]
 8002a58:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	f003 020f 	and.w	r2, r3, #15
 8002a60:	4613      	mov	r3, r2
 8002a62:	00db      	lsls	r3, r3, #3
 8002a64:	4413      	add	r3, r2
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	4413      	add	r3, r2
 8002a70:	3304      	adds	r3, #4
 8002a72:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	0c5b      	lsrs	r3, r3, #17
 8002a78:	f003 030f 	and.w	r3, r3, #15
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d124      	bne.n	8002aca <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002a86:	4013      	ands	r3, r2
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d035      	beq.n	8002af8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	091b      	lsrs	r3, r3, #4
 8002a94:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002a96:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	6a38      	ldr	r0, [r7, #32]
 8002aa0:	f003 fd7e 	bl	80065a0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	68da      	ldr	r2, [r3, #12]
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	091b      	lsrs	r3, r3, #4
 8002aac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ab0:	441a      	add	r2, r3
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	695a      	ldr	r2, [r3, #20]
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	091b      	lsrs	r3, r3, #4
 8002abe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ac2:	441a      	add	r2, r3
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	615a      	str	r2, [r3, #20]
 8002ac8:	e016      	b.n	8002af8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	0c5b      	lsrs	r3, r3, #17
 8002ace:	f003 030f 	and.w	r3, r3, #15
 8002ad2:	2b06      	cmp	r3, #6
 8002ad4:	d110      	bne.n	8002af8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002adc:	2208      	movs	r2, #8
 8002ade:	4619      	mov	r1, r3
 8002ae0:	6a38      	ldr	r0, [r7, #32]
 8002ae2:	f003 fd5d 	bl	80065a0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	695a      	ldr	r2, [r3, #20]
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	091b      	lsrs	r3, r3, #4
 8002aee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002af2:	441a      	add	r2, r3
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	699a      	ldr	r2, [r3, #24]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f042 0210 	orr.w	r2, r2, #16
 8002b06:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f003 fedb 	bl	80068c8 <USB_ReadInterrupts>
 8002b12:	4603      	mov	r3, r0
 8002b14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b18:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002b1c:	f040 80a7 	bne.w	8002c6e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002b20:	2300      	movs	r3, #0
 8002b22:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f003 fee0 	bl	80068ee <USB_ReadDevAllOutEpInterrupt>
 8002b2e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002b30:	e099      	b.n	8002c66 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b34:	f003 0301 	and.w	r3, r3, #1
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	f000 808e 	beq.w	8002c5a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b44:	b2d2      	uxtb	r2, r2
 8002b46:	4611      	mov	r1, r2
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f003 ff04 	bl	8006956 <USB_ReadDevOutEPInterrupt>
 8002b4e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00c      	beq.n	8002b74 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5c:	015a      	lsls	r2, r3, #5
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	4413      	add	r3, r2
 8002b62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b66:	461a      	mov	r2, r3
 8002b68:	2301      	movs	r3, #1
 8002b6a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002b6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f000 fea2 	bl	80038b8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	f003 0308 	and.w	r3, r3, #8
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d00c      	beq.n	8002b98 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b80:	015a      	lsls	r2, r3, #5
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	4413      	add	r3, r2
 8002b86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	2308      	movs	r3, #8
 8002b8e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002b90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 ff78 	bl	8003a88 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	f003 0310 	and.w	r3, r3, #16
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d008      	beq.n	8002bb4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba4:	015a      	lsls	r2, r3, #5
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	4413      	add	r3, r2
 8002baa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bae:	461a      	mov	r2, r3
 8002bb0:	2310      	movs	r3, #16
 8002bb2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d030      	beq.n	8002c20 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002bbe:	6a3b      	ldr	r3, [r7, #32]
 8002bc0:	695b      	ldr	r3, [r3, #20]
 8002bc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bc6:	2b80      	cmp	r3, #128	; 0x80
 8002bc8:	d109      	bne.n	8002bde <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	69fa      	ldr	r2, [r7, #28]
 8002bd4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002bd8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bdc:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002bde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002be0:	4613      	mov	r3, r2
 8002be2:	00db      	lsls	r3, r3, #3
 8002be4:	4413      	add	r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	4413      	add	r3, r2
 8002bf0:	3304      	adds	r3, #4
 8002bf2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	78db      	ldrb	r3, [r3, #3]
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d108      	bne.n	8002c0e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	4619      	mov	r1, r3
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f007 fc09 	bl	800a420 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c10:	015a      	lsls	r2, r3, #5
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	4413      	add	r3, r2
 8002c16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	f003 0320 	and.w	r3, r3, #32
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d008      	beq.n	8002c3c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2c:	015a      	lsls	r2, r3, #5
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	4413      	add	r3, r2
 8002c32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c36:	461a      	mov	r2, r3
 8002c38:	2320      	movs	r3, #32
 8002c3a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d009      	beq.n	8002c5a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c48:	015a      	lsls	r2, r3, #5
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c52:	461a      	mov	r2, r3
 8002c54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c58:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c62:	085b      	lsrs	r3, r3, #1
 8002c64:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	f47f af62 	bne.w	8002b32 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f003 fe28 	bl	80068c8 <USB_ReadInterrupts>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c7e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c82:	f040 80db 	bne.w	8002e3c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f003 fe49 	bl	8006922 <USB_ReadDevAllInEpInterrupt>
 8002c90:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002c92:	2300      	movs	r3, #0
 8002c94:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002c96:	e0cd      	b.n	8002e34 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	f000 80c2 	beq.w	8002e28 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002caa:	b2d2      	uxtb	r2, r2
 8002cac:	4611      	mov	r1, r2
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f003 fe6f 	bl	8006992 <USB_ReadDevInEPInterrupt>
 8002cb4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	f003 0301 	and.w	r3, r3, #1
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d057      	beq.n	8002d70 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc2:	f003 030f 	and.w	r3, r3, #15
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	43db      	mvns	r3, r3
 8002cda:	69f9      	ldr	r1, [r7, #28]
 8002cdc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce6:	015a      	lsls	r2, r3, #5
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	4413      	add	r3, r2
 8002cec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	799b      	ldrb	r3, [r3, #6]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d132      	bne.n	8002d64 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002cfe:	6879      	ldr	r1, [r7, #4]
 8002d00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d02:	4613      	mov	r3, r2
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	4413      	add	r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	440b      	add	r3, r1
 8002d0c:	3320      	adds	r3, #32
 8002d0e:	6819      	ldr	r1, [r3, #0]
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d14:	4613      	mov	r3, r2
 8002d16:	00db      	lsls	r3, r3, #3
 8002d18:	4413      	add	r3, r2
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	4403      	add	r3, r0
 8002d1e:	331c      	adds	r3, #28
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4419      	add	r1, r3
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d28:	4613      	mov	r3, r2
 8002d2a:	00db      	lsls	r3, r3, #3
 8002d2c:	4413      	add	r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	4403      	add	r3, r0
 8002d32:	3320      	adds	r3, #32
 8002d34:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d113      	bne.n	8002d64 <HAL_PCD_IRQHandler+0x3a2>
 8002d3c:	6879      	ldr	r1, [r7, #4]
 8002d3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d40:	4613      	mov	r3, r2
 8002d42:	00db      	lsls	r3, r3, #3
 8002d44:	4413      	add	r3, r2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	440b      	add	r3, r1
 8002d4a:	3324      	adds	r3, #36	; 0x24
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d108      	bne.n	8002d64 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6818      	ldr	r0, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	2101      	movs	r1, #1
 8002d60:	f003 fe76 	bl	8006a50 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	4619      	mov	r1, r3
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f007 fad3 	bl	800a316 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	f003 0308 	and.w	r3, r3, #8
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d008      	beq.n	8002d8c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7c:	015a      	lsls	r2, r3, #5
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	4413      	add	r3, r2
 8002d82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d86:	461a      	mov	r2, r3
 8002d88:	2308      	movs	r3, #8
 8002d8a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	f003 0310 	and.w	r3, r3, #16
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d008      	beq.n	8002da8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d98:	015a      	lsls	r2, r3, #5
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	4413      	add	r3, r2
 8002d9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002da2:	461a      	mov	r2, r3
 8002da4:	2310      	movs	r3, #16
 8002da6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d008      	beq.n	8002dc4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db4:	015a      	lsls	r2, r3, #5
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	4413      	add	r3, r2
 8002dba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	2340      	movs	r3, #64	; 0x40
 8002dc2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	f003 0302 	and.w	r3, r3, #2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d023      	beq.n	8002e16 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002dce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002dd0:	6a38      	ldr	r0, [r7, #32]
 8002dd2:	f002 fe63 	bl	8005a9c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002dd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dd8:	4613      	mov	r3, r2
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	4413      	add	r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	3310      	adds	r3, #16
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	4413      	add	r3, r2
 8002de6:	3304      	adds	r3, #4
 8002de8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	78db      	ldrb	r3, [r3, #3]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d108      	bne.n	8002e04 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	2200      	movs	r2, #0
 8002df6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f007 fb20 	bl	800a444 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e06:	015a      	lsls	r2, r3, #5
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e10:	461a      	mov	r2, r3
 8002e12:	2302      	movs	r3, #2
 8002e14:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d003      	beq.n	8002e28 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002e20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f000 fcbb 	bl	800379e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e30:	085b      	lsrs	r3, r3, #1
 8002e32:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	f47f af2e 	bne.w	8002c98 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4618      	mov	r0, r3
 8002e42:	f003 fd41 	bl	80068c8 <USB_ReadInterrupts>
 8002e46:	4603      	mov	r3, r0
 8002e48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e50:	d122      	bne.n	8002e98 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	69fa      	ldr	r2, [r7, #28]
 8002e5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e60:	f023 0301 	bic.w	r3, r3, #1
 8002e64:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d108      	bne.n	8002e82 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002e78:	2100      	movs	r1, #0
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f000 fea2 	bl	8003bc4 <HAL_PCDEx_LPM_Callback>
 8002e80:	e002      	b.n	8002e88 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f007 fabe 	bl	800a404 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	695a      	ldr	r2, [r3, #20]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002e96:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f003 fd13 	bl	80068c8 <USB_ReadInterrupts>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ea8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002eac:	d112      	bne.n	8002ed4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	f003 0301 	and.w	r3, r3, #1
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d102      	bne.n	8002ec4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f007 fa7a 	bl	800a3b8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	695a      	ldr	r2, [r3, #20]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002ed2:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f003 fcf5 	bl	80068c8 <USB_ReadInterrupts>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ee4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ee8:	f040 80b7 	bne.w	800305a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	69fa      	ldr	r2, [r7, #28]
 8002ef6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002efa:	f023 0301 	bic.w	r3, r3, #1
 8002efe:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2110      	movs	r1, #16
 8002f06:	4618      	mov	r0, r3
 8002f08:	f002 fdc8 	bl	8005a9c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f10:	e046      	b.n	8002fa0 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f14:	015a      	lsls	r2, r3, #5
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	4413      	add	r3, r2
 8002f1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f1e:	461a      	mov	r2, r3
 8002f20:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002f24:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f28:	015a      	lsls	r2, r3, #5
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f36:	0151      	lsls	r1, r2, #5
 8002f38:	69fa      	ldr	r2, [r7, #28]
 8002f3a:	440a      	add	r2, r1
 8002f3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002f40:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002f44:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f48:	015a      	lsls	r2, r3, #5
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f52:	461a      	mov	r2, r3
 8002f54:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002f58:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f5c:	015a      	lsls	r2, r3, #5
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	4413      	add	r3, r2
 8002f62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f6a:	0151      	lsls	r1, r2, #5
 8002f6c:	69fa      	ldr	r2, [r7, #28]
 8002f6e:	440a      	add	r2, r1
 8002f70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002f74:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002f78:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f7c:	015a      	lsls	r2, r3, #5
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	4413      	add	r3, r2
 8002f82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f8a:	0151      	lsls	r1, r2, #5
 8002f8c:	69fa      	ldr	r2, [r7, #28]
 8002f8e:	440a      	add	r2, r1
 8002f90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002f94:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002f98:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	791b      	ldrb	r3, [r3, #4]
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d3b2      	bcc.n	8002f12 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fb2:	69db      	ldr	r3, [r3, #28]
 8002fb4:	69fa      	ldr	r2, [r7, #28]
 8002fb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fba:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002fbe:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	7bdb      	ldrb	r3, [r3, #15]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d016      	beq.n	8002ff6 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fd2:	69fa      	ldr	r2, [r7, #28]
 8002fd4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fd8:	f043 030b 	orr.w	r3, r3, #11
 8002fdc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe8:	69fa      	ldr	r2, [r7, #28]
 8002fea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fee:	f043 030b 	orr.w	r3, r3, #11
 8002ff2:	6453      	str	r3, [r2, #68]	; 0x44
 8002ff4:	e015      	b.n	8003022 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ffc:	695b      	ldr	r3, [r3, #20]
 8002ffe:	69fa      	ldr	r2, [r7, #28]
 8003000:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003004:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003008:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800300c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	69fa      	ldr	r2, [r7, #28]
 8003018:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800301c:	f043 030b 	orr.w	r3, r3, #11
 8003020:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	69fa      	ldr	r2, [r7, #28]
 800302c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003030:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003034:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6818      	ldr	r0, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003044:	461a      	mov	r2, r3
 8003046:	f003 fd03 	bl	8006a50 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	695a      	ldr	r2, [r3, #20]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003058:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4618      	mov	r0, r3
 8003060:	f003 fc32 	bl	80068c8 <USB_ReadInterrupts>
 8003064:	4603      	mov	r3, r0
 8003066:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800306a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800306e:	d123      	bne.n	80030b8 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4618      	mov	r0, r3
 8003076:	f003 fcc8 	bl	8006a0a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4618      	mov	r0, r3
 8003080:	f002 fd85 	bl	8005b8e <USB_GetDevSpeed>
 8003084:	4603      	mov	r3, r0
 8003086:	461a      	mov	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681c      	ldr	r4, [r3, #0]
 8003090:	f001 f9c8 	bl	8004424 <HAL_RCC_GetHCLKFreq>
 8003094:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800309a:	461a      	mov	r2, r3
 800309c:	4620      	mov	r0, r4
 800309e:	f002 fa89 	bl	80055b4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f007 f95f 	bl	800a366 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	695a      	ldr	r2, [r3, #20]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80030b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4618      	mov	r0, r3
 80030be:	f003 fc03 	bl	80068c8 <USB_ReadInterrupts>
 80030c2:	4603      	mov	r3, r0
 80030c4:	f003 0308 	and.w	r3, r3, #8
 80030c8:	2b08      	cmp	r3, #8
 80030ca:	d10a      	bne.n	80030e2 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f007 f93c 	bl	800a34a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	695a      	ldr	r2, [r3, #20]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f002 0208 	and.w	r2, r2, #8
 80030e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4618      	mov	r0, r3
 80030e8:	f003 fbee 	bl	80068c8 <USB_ReadInterrupts>
 80030ec:	4603      	mov	r3, r0
 80030ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030f2:	2b80      	cmp	r3, #128	; 0x80
 80030f4:	d123      	bne.n	800313e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80030f6:	6a3b      	ldr	r3, [r7, #32]
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030fe:	6a3b      	ldr	r3, [r7, #32]
 8003100:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003102:	2301      	movs	r3, #1
 8003104:	627b      	str	r3, [r7, #36]	; 0x24
 8003106:	e014      	b.n	8003132 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003108:	6879      	ldr	r1, [r7, #4]
 800310a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800310c:	4613      	mov	r3, r2
 800310e:	00db      	lsls	r3, r3, #3
 8003110:	4413      	add	r3, r2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	440b      	add	r3, r1
 8003116:	f203 2357 	addw	r3, r3, #599	; 0x257
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	2b01      	cmp	r3, #1
 800311e:	d105      	bne.n	800312c <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003122:	b2db      	uxtb	r3, r3
 8003124:	4619      	mov	r1, r3
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 fb08 	bl	800373c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800312c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312e:	3301      	adds	r3, #1
 8003130:	627b      	str	r3, [r7, #36]	; 0x24
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	791b      	ldrb	r3, [r3, #4]
 8003136:	461a      	mov	r2, r3
 8003138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313a:	4293      	cmp	r3, r2
 800313c:	d3e4      	bcc.n	8003108 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4618      	mov	r0, r3
 8003144:	f003 fbc0 	bl	80068c8 <USB_ReadInterrupts>
 8003148:	4603      	mov	r3, r0
 800314a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800314e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003152:	d13c      	bne.n	80031ce <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003154:	2301      	movs	r3, #1
 8003156:	627b      	str	r3, [r7, #36]	; 0x24
 8003158:	e02b      	b.n	80031b2 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800315a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315c:	015a      	lsls	r2, r3, #5
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	4413      	add	r3, r2
 8003162:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800316a:	6879      	ldr	r1, [r7, #4]
 800316c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800316e:	4613      	mov	r3, r2
 8003170:	00db      	lsls	r3, r3, #3
 8003172:	4413      	add	r3, r2
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	440b      	add	r3, r1
 8003178:	3318      	adds	r3, #24
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	2b01      	cmp	r3, #1
 800317e:	d115      	bne.n	80031ac <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003180:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003182:	2b00      	cmp	r3, #0
 8003184:	da12      	bge.n	80031ac <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003186:	6879      	ldr	r1, [r7, #4]
 8003188:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800318a:	4613      	mov	r3, r2
 800318c:	00db      	lsls	r3, r3, #3
 800318e:	4413      	add	r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	440b      	add	r3, r1
 8003194:	3317      	adds	r3, #23
 8003196:	2201      	movs	r2, #1
 8003198:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800319a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319c:	b2db      	uxtb	r3, r3
 800319e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	4619      	mov	r1, r3
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f000 fac8 	bl	800373c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80031ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ae:	3301      	adds	r3, #1
 80031b0:	627b      	str	r3, [r7, #36]	; 0x24
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	791b      	ldrb	r3, [r3, #4]
 80031b6:	461a      	mov	r2, r3
 80031b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d3cd      	bcc.n	800315a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	695a      	ldr	r2, [r3, #20]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80031cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f003 fb78 	bl	80068c8 <USB_ReadInterrupts>
 80031d8:	4603      	mov	r3, r0
 80031da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031e2:	d156      	bne.n	8003292 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80031e4:	2301      	movs	r3, #1
 80031e6:	627b      	str	r3, [r7, #36]	; 0x24
 80031e8:	e045      	b.n	8003276 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80031ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ec:	015a      	lsls	r2, r3, #5
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	4413      	add	r3, r2
 80031f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80031fa:	6879      	ldr	r1, [r7, #4]
 80031fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031fe:	4613      	mov	r3, r2
 8003200:	00db      	lsls	r3, r3, #3
 8003202:	4413      	add	r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	440b      	add	r3, r1
 8003208:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	2b01      	cmp	r3, #1
 8003210:	d12e      	bne.n	8003270 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003212:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003214:	2b00      	cmp	r3, #0
 8003216:	da2b      	bge.n	8003270 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8003224:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003228:	429a      	cmp	r2, r3
 800322a:	d121      	bne.n	8003270 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800322c:	6879      	ldr	r1, [r7, #4]
 800322e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003230:	4613      	mov	r3, r2
 8003232:	00db      	lsls	r3, r3, #3
 8003234:	4413      	add	r3, r2
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	440b      	add	r3, r1
 800323a:	f203 2357 	addw	r3, r3, #599	; 0x257
 800323e:	2201      	movs	r2, #1
 8003240:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003242:	6a3b      	ldr	r3, [r7, #32]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800324a:	6a3b      	ldr	r3, [r7, #32]
 800324c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800324e:	6a3b      	ldr	r3, [r7, #32]
 8003250:	695b      	ldr	r3, [r3, #20]
 8003252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003256:	2b00      	cmp	r3, #0
 8003258:	d10a      	bne.n	8003270 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	69fa      	ldr	r2, [r7, #28]
 8003264:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003268:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800326c:	6053      	str	r3, [r2, #4]
            break;
 800326e:	e008      	b.n	8003282 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003272:	3301      	adds	r3, #1
 8003274:	627b      	str	r3, [r7, #36]	; 0x24
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	791b      	ldrb	r3, [r3, #4]
 800327a:	461a      	mov	r2, r3
 800327c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327e:	4293      	cmp	r3, r2
 8003280:	d3b3      	bcc.n	80031ea <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	695a      	ldr	r2, [r3, #20]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003290:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4618      	mov	r0, r3
 8003298:	f003 fb16 	bl	80068c8 <USB_ReadInterrupts>
 800329c:	4603      	mov	r3, r0
 800329e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80032a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032a6:	d10a      	bne.n	80032be <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f007 f8dd 	bl	800a468 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	695a      	ldr	r2, [r3, #20]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80032bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f003 fb00 	bl	80068c8 <USB_ReadInterrupts>
 80032c8:	4603      	mov	r3, r0
 80032ca:	f003 0304 	and.w	r3, r3, #4
 80032ce:	2b04      	cmp	r3, #4
 80032d0:	d115      	bne.n	80032fe <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	f003 0304 	and.w	r3, r3, #4
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d002      	beq.n	80032ea <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f007 f8cd 	bl	800a484 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	6859      	ldr	r1, [r3, #4]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	69ba      	ldr	r2, [r7, #24]
 80032f6:	430a      	orrs	r2, r1
 80032f8:	605a      	str	r2, [r3, #4]
 80032fa:	e000      	b.n	80032fe <HAL_PCD_IRQHandler+0x93c>
      return;
 80032fc:	bf00      	nop
    }
  }
}
 80032fe:	3734      	adds	r7, #52	; 0x34
 8003300:	46bd      	mov	sp, r7
 8003302:	bd90      	pop	{r4, r7, pc}

08003304 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	460b      	mov	r3, r1
 800330e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003316:	2b01      	cmp	r3, #1
 8003318:	d101      	bne.n	800331e <HAL_PCD_SetAddress+0x1a>
 800331a:	2302      	movs	r3, #2
 800331c:	e012      	b.n	8003344 <HAL_PCD_SetAddress+0x40>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2201      	movs	r2, #1
 8003322:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	78fa      	ldrb	r2, [r7, #3]
 800332a:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	78fa      	ldrb	r2, [r7, #3]
 8003332:	4611      	mov	r1, r2
 8003334:	4618      	mov	r0, r3
 8003336:	f003 fa5f 	bl	80067f8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003342:	2300      	movs	r3, #0
}
 8003344:	4618      	mov	r0, r3
 8003346:	3708      	adds	r7, #8
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	4608      	mov	r0, r1
 8003356:	4611      	mov	r1, r2
 8003358:	461a      	mov	r2, r3
 800335a:	4603      	mov	r3, r0
 800335c:	70fb      	strb	r3, [r7, #3]
 800335e:	460b      	mov	r3, r1
 8003360:	803b      	strh	r3, [r7, #0]
 8003362:	4613      	mov	r3, r2
 8003364:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003366:	2300      	movs	r3, #0
 8003368:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800336a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800336e:	2b00      	cmp	r3, #0
 8003370:	da0f      	bge.n	8003392 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003372:	78fb      	ldrb	r3, [r7, #3]
 8003374:	f003 020f 	and.w	r2, r3, #15
 8003378:	4613      	mov	r3, r2
 800337a:	00db      	lsls	r3, r3, #3
 800337c:	4413      	add	r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	3310      	adds	r3, #16
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	4413      	add	r3, r2
 8003386:	3304      	adds	r3, #4
 8003388:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2201      	movs	r2, #1
 800338e:	705a      	strb	r2, [r3, #1]
 8003390:	e00f      	b.n	80033b2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003392:	78fb      	ldrb	r3, [r7, #3]
 8003394:	f003 020f 	and.w	r2, r3, #15
 8003398:	4613      	mov	r3, r2
 800339a:	00db      	lsls	r3, r3, #3
 800339c:	4413      	add	r3, r2
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	4413      	add	r3, r2
 80033a8:	3304      	adds	r3, #4
 80033aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2200      	movs	r2, #0
 80033b0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80033b2:	78fb      	ldrb	r3, [r7, #3]
 80033b4:	f003 030f 	and.w	r3, r3, #15
 80033b8:	b2da      	uxtb	r2, r3
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80033be:	883a      	ldrh	r2, [r7, #0]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	78ba      	ldrb	r2, [r7, #2]
 80033c8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	785b      	ldrb	r3, [r3, #1]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d004      	beq.n	80033dc <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	b29a      	uxth	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80033dc:	78bb      	ldrb	r3, [r7, #2]
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d102      	bne.n	80033e8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2200      	movs	r2, #0
 80033e6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d101      	bne.n	80033f6 <HAL_PCD_EP_Open+0xaa>
 80033f2:	2302      	movs	r3, #2
 80033f4:	e00e      	b.n	8003414 <HAL_PCD_EP_Open+0xc8>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2201      	movs	r2, #1
 80033fa:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68f9      	ldr	r1, [r7, #12]
 8003404:	4618      	mov	r0, r3
 8003406:	f002 fbe7 	bl	8005bd8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8003412:	7afb      	ldrb	r3, [r7, #11]
}
 8003414:	4618      	mov	r0, r3
 8003416:	3710      	adds	r7, #16
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	460b      	mov	r3, r1
 8003426:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003428:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800342c:	2b00      	cmp	r3, #0
 800342e:	da0f      	bge.n	8003450 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003430:	78fb      	ldrb	r3, [r7, #3]
 8003432:	f003 020f 	and.w	r2, r3, #15
 8003436:	4613      	mov	r3, r2
 8003438:	00db      	lsls	r3, r3, #3
 800343a:	4413      	add	r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	3310      	adds	r3, #16
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	4413      	add	r3, r2
 8003444:	3304      	adds	r3, #4
 8003446:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2201      	movs	r2, #1
 800344c:	705a      	strb	r2, [r3, #1]
 800344e:	e00f      	b.n	8003470 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003450:	78fb      	ldrb	r3, [r7, #3]
 8003452:	f003 020f 	and.w	r2, r3, #15
 8003456:	4613      	mov	r3, r2
 8003458:	00db      	lsls	r3, r3, #3
 800345a:	4413      	add	r3, r2
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	4413      	add	r3, r2
 8003466:	3304      	adds	r3, #4
 8003468:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2200      	movs	r2, #0
 800346e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003470:	78fb      	ldrb	r3, [r7, #3]
 8003472:	f003 030f 	and.w	r3, r3, #15
 8003476:	b2da      	uxtb	r2, r3
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003482:	2b01      	cmp	r3, #1
 8003484:	d101      	bne.n	800348a <HAL_PCD_EP_Close+0x6e>
 8003486:	2302      	movs	r3, #2
 8003488:	e00e      	b.n	80034a8 <HAL_PCD_EP_Close+0x8c>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2201      	movs	r2, #1
 800348e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	68f9      	ldr	r1, [r7, #12]
 8003498:	4618      	mov	r0, r3
 800349a:	f002 fc25 	bl	8005ce8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 80034a6:	2300      	movs	r3, #0
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3710      	adds	r7, #16
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b086      	sub	sp, #24
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	607a      	str	r2, [r7, #4]
 80034ba:	603b      	str	r3, [r7, #0]
 80034bc:	460b      	mov	r3, r1
 80034be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034c0:	7afb      	ldrb	r3, [r7, #11]
 80034c2:	f003 020f 	and.w	r2, r3, #15
 80034c6:	4613      	mov	r3, r2
 80034c8:	00db      	lsls	r3, r3, #3
 80034ca:	4413      	add	r3, r2
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80034d2:	68fa      	ldr	r2, [r7, #12]
 80034d4:	4413      	add	r3, r2
 80034d6:	3304      	adds	r3, #4
 80034d8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	683a      	ldr	r2, [r7, #0]
 80034e4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	2200      	movs	r2, #0
 80034ea:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	2200      	movs	r2, #0
 80034f0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034f2:	7afb      	ldrb	r3, [r7, #11]
 80034f4:	f003 030f 	and.w	r3, r3, #15
 80034f8:	b2da      	uxtb	r2, r3
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	799b      	ldrb	r3, [r3, #6]
 8003502:	2b01      	cmp	r3, #1
 8003504:	d102      	bne.n	800350c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6818      	ldr	r0, [r3, #0]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	799b      	ldrb	r3, [r3, #6]
 8003514:	461a      	mov	r2, r3
 8003516:	6979      	ldr	r1, [r7, #20]
 8003518:	f002 fcc2 	bl	8005ea0 <USB_EPStartXfer>

  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3718      	adds	r7, #24
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003526:	b480      	push	{r7}
 8003528:	b083      	sub	sp, #12
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
 800352e:	460b      	mov	r3, r1
 8003530:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003532:	78fb      	ldrb	r3, [r7, #3]
 8003534:	f003 020f 	and.w	r2, r3, #15
 8003538:	6879      	ldr	r1, [r7, #4]
 800353a:	4613      	mov	r3, r2
 800353c:	00db      	lsls	r3, r3, #3
 800353e:	4413      	add	r3, r2
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	440b      	add	r3, r1
 8003544:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8003548:	681b      	ldr	r3, [r3, #0]
}
 800354a:	4618      	mov	r0, r3
 800354c:	370c      	adds	r7, #12
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr

08003556 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003556:	b580      	push	{r7, lr}
 8003558:	b086      	sub	sp, #24
 800355a:	af00      	add	r7, sp, #0
 800355c:	60f8      	str	r0, [r7, #12]
 800355e:	607a      	str	r2, [r7, #4]
 8003560:	603b      	str	r3, [r7, #0]
 8003562:	460b      	mov	r3, r1
 8003564:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003566:	7afb      	ldrb	r3, [r7, #11]
 8003568:	f003 020f 	and.w	r2, r3, #15
 800356c:	4613      	mov	r3, r2
 800356e:	00db      	lsls	r3, r3, #3
 8003570:	4413      	add	r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	3310      	adds	r3, #16
 8003576:	68fa      	ldr	r2, [r7, #12]
 8003578:	4413      	add	r3, r2
 800357a:	3304      	adds	r3, #4
 800357c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	683a      	ldr	r2, [r7, #0]
 8003588:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	2200      	movs	r2, #0
 800358e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	2201      	movs	r2, #1
 8003594:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003596:	7afb      	ldrb	r3, [r7, #11]
 8003598:	f003 030f 	and.w	r3, r3, #15
 800359c:	b2da      	uxtb	r2, r3
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	799b      	ldrb	r3, [r3, #6]
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d102      	bne.n	80035b0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6818      	ldr	r0, [r3, #0]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	799b      	ldrb	r3, [r3, #6]
 80035b8:	461a      	mov	r2, r3
 80035ba:	6979      	ldr	r1, [r7, #20]
 80035bc:	f002 fc70 	bl	8005ea0 <USB_EPStartXfer>

  return HAL_OK;
 80035c0:	2300      	movs	r3, #0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3718      	adds	r7, #24
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}

080035ca <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b084      	sub	sp, #16
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
 80035d2:	460b      	mov	r3, r1
 80035d4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80035d6:	78fb      	ldrb	r3, [r7, #3]
 80035d8:	f003 030f 	and.w	r3, r3, #15
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	7912      	ldrb	r2, [r2, #4]
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d901      	bls.n	80035e8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e04f      	b.n	8003688 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80035e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	da0f      	bge.n	8003610 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035f0:	78fb      	ldrb	r3, [r7, #3]
 80035f2:	f003 020f 	and.w	r2, r3, #15
 80035f6:	4613      	mov	r3, r2
 80035f8:	00db      	lsls	r3, r3, #3
 80035fa:	4413      	add	r3, r2
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	3310      	adds	r3, #16
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	4413      	add	r3, r2
 8003604:	3304      	adds	r3, #4
 8003606:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2201      	movs	r2, #1
 800360c:	705a      	strb	r2, [r3, #1]
 800360e:	e00d      	b.n	800362c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003610:	78fa      	ldrb	r2, [r7, #3]
 8003612:	4613      	mov	r3, r2
 8003614:	00db      	lsls	r3, r3, #3
 8003616:	4413      	add	r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	4413      	add	r3, r2
 8003622:	3304      	adds	r3, #4
 8003624:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2200      	movs	r2, #0
 800362a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2201      	movs	r2, #1
 8003630:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003632:	78fb      	ldrb	r3, [r7, #3]
 8003634:	f003 030f 	and.w	r3, r3, #15
 8003638:	b2da      	uxtb	r2, r3
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003644:	2b01      	cmp	r3, #1
 8003646:	d101      	bne.n	800364c <HAL_PCD_EP_SetStall+0x82>
 8003648:	2302      	movs	r3, #2
 800364a:	e01d      	b.n	8003688 <HAL_PCD_EP_SetStall+0xbe>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	68f9      	ldr	r1, [r7, #12]
 800365a:	4618      	mov	r0, r3
 800365c:	f002 fff8 	bl	8006650 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003660:	78fb      	ldrb	r3, [r7, #3]
 8003662:	f003 030f 	and.w	r3, r3, #15
 8003666:	2b00      	cmp	r3, #0
 8003668:	d109      	bne.n	800367e <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6818      	ldr	r0, [r3, #0]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	7999      	ldrb	r1, [r3, #6]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003678:	461a      	mov	r2, r3
 800367a:	f003 f9e9 	bl	8006a50 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003686:	2300      	movs	r3, #0
}
 8003688:	4618      	mov	r0, r3
 800368a:	3710      	adds	r7, #16
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	460b      	mov	r3, r1
 800369a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800369c:	78fb      	ldrb	r3, [r7, #3]
 800369e:	f003 030f 	and.w	r3, r3, #15
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	7912      	ldrb	r2, [r2, #4]
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d901      	bls.n	80036ae <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e042      	b.n	8003734 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80036ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	da0f      	bge.n	80036d6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036b6:	78fb      	ldrb	r3, [r7, #3]
 80036b8:	f003 020f 	and.w	r2, r3, #15
 80036bc:	4613      	mov	r3, r2
 80036be:	00db      	lsls	r3, r3, #3
 80036c0:	4413      	add	r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	3310      	adds	r3, #16
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	4413      	add	r3, r2
 80036ca:	3304      	adds	r3, #4
 80036cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2201      	movs	r2, #1
 80036d2:	705a      	strb	r2, [r3, #1]
 80036d4:	e00f      	b.n	80036f6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036d6:	78fb      	ldrb	r3, [r7, #3]
 80036d8:	f003 020f 	and.w	r2, r3, #15
 80036dc:	4613      	mov	r3, r2
 80036de:	00db      	lsls	r3, r3, #3
 80036e0:	4413      	add	r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	4413      	add	r3, r2
 80036ec:	3304      	adds	r3, #4
 80036ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2200      	movs	r2, #0
 80036f4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2200      	movs	r2, #0
 80036fa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036fc:	78fb      	ldrb	r3, [r7, #3]
 80036fe:	f003 030f 	and.w	r3, r3, #15
 8003702:	b2da      	uxtb	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800370e:	2b01      	cmp	r3, #1
 8003710:	d101      	bne.n	8003716 <HAL_PCD_EP_ClrStall+0x86>
 8003712:	2302      	movs	r3, #2
 8003714:	e00e      	b.n	8003734 <HAL_PCD_EP_ClrStall+0xa4>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	68f9      	ldr	r1, [r7, #12]
 8003724:	4618      	mov	r0, r3
 8003726:	f003 f801 	bl	800672c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003732:	2300      	movs	r3, #0
}
 8003734:	4618      	mov	r0, r3
 8003736:	3710      	adds	r7, #16
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}

0800373c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	460b      	mov	r3, r1
 8003746:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003748:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800374c:	2b00      	cmp	r3, #0
 800374e:	da0c      	bge.n	800376a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003750:	78fb      	ldrb	r3, [r7, #3]
 8003752:	f003 020f 	and.w	r2, r3, #15
 8003756:	4613      	mov	r3, r2
 8003758:	00db      	lsls	r3, r3, #3
 800375a:	4413      	add	r3, r2
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	3310      	adds	r3, #16
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	4413      	add	r3, r2
 8003764:	3304      	adds	r3, #4
 8003766:	60fb      	str	r3, [r7, #12]
 8003768:	e00c      	b.n	8003784 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800376a:	78fb      	ldrb	r3, [r7, #3]
 800376c:	f003 020f 	and.w	r2, r3, #15
 8003770:	4613      	mov	r3, r2
 8003772:	00db      	lsls	r3, r3, #3
 8003774:	4413      	add	r3, r2
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	4413      	add	r3, r2
 8003780:	3304      	adds	r3, #4
 8003782:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68f9      	ldr	r1, [r7, #12]
 800378a:	4618      	mov	r0, r3
 800378c:	f002 fe20 	bl	80063d0 <USB_EPStopXfer>
 8003790:	4603      	mov	r3, r0
 8003792:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003794:	7afb      	ldrb	r3, [r7, #11]
}
 8003796:	4618      	mov	r0, r3
 8003798:	3710      	adds	r7, #16
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}

0800379e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800379e:	b580      	push	{r7, lr}
 80037a0:	b08a      	sub	sp, #40	; 0x28
 80037a2:	af02      	add	r7, sp, #8
 80037a4:	6078      	str	r0, [r7, #4]
 80037a6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80037b2:	683a      	ldr	r2, [r7, #0]
 80037b4:	4613      	mov	r3, r2
 80037b6:	00db      	lsls	r3, r3, #3
 80037b8:	4413      	add	r3, r2
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	3310      	adds	r3, #16
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	4413      	add	r3, r2
 80037c2:	3304      	adds	r3, #4
 80037c4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	695a      	ldr	r2, [r3, #20]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d901      	bls.n	80037d6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e06b      	b.n	80038ae <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	691a      	ldr	r2, [r3, #16]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	695b      	ldr	r3, [r3, #20]
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	69fa      	ldr	r2, [r7, #28]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d902      	bls.n	80037f2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	3303      	adds	r3, #3
 80037f6:	089b      	lsrs	r3, r3, #2
 80037f8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80037fa:	e02a      	b.n	8003852 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	691a      	ldr	r2, [r3, #16]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	695b      	ldr	r3, [r3, #20]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	69fa      	ldr	r2, [r7, #28]
 800380e:	429a      	cmp	r2, r3
 8003810:	d902      	bls.n	8003818 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	3303      	adds	r3, #3
 800381c:	089b      	lsrs	r3, r3, #2
 800381e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	68d9      	ldr	r1, [r3, #12]
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	b2da      	uxtb	r2, r3
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003830:	9300      	str	r3, [sp, #0]
 8003832:	4603      	mov	r3, r0
 8003834:	6978      	ldr	r0, [r7, #20]
 8003836:	f002 fe75 	bl	8006524 <USB_WritePacket>

    ep->xfer_buff  += len;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	68da      	ldr	r2, [r3, #12]
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	441a      	add	r2, r3
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	695a      	ldr	r2, [r3, #20]
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	441a      	add	r2, r3
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	015a      	lsls	r2, r3, #5
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	4413      	add	r3, r2
 800385a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800385e:	699b      	ldr	r3, [r3, #24]
 8003860:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003862:	69ba      	ldr	r2, [r7, #24]
 8003864:	429a      	cmp	r2, r3
 8003866:	d809      	bhi.n	800387c <PCD_WriteEmptyTxFifo+0xde>
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	695a      	ldr	r2, [r3, #20]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003870:	429a      	cmp	r2, r3
 8003872:	d203      	bcs.n	800387c <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d1bf      	bne.n	80037fc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	691a      	ldr	r2, [r3, #16]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	695b      	ldr	r3, [r3, #20]
 8003884:	429a      	cmp	r2, r3
 8003886:	d811      	bhi.n	80038ac <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	f003 030f 	and.w	r3, r3, #15
 800388e:	2201      	movs	r2, #1
 8003890:	fa02 f303 	lsl.w	r3, r2, r3
 8003894:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800389c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	43db      	mvns	r3, r3
 80038a2:	6939      	ldr	r1, [r7, #16]
 80038a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80038a8:	4013      	ands	r3, r2
 80038aa:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3720      	adds	r7, #32
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
	...

080038b8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b088      	sub	sp, #32
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	333c      	adds	r3, #60	; 0x3c
 80038d0:	3304      	adds	r3, #4
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	015a      	lsls	r2, r3, #5
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	4413      	add	r3, r2
 80038de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	799b      	ldrb	r3, [r3, #6]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d17b      	bne.n	80039e6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	f003 0308 	and.w	r3, r3, #8
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d015      	beq.n	8003924 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	4a61      	ldr	r2, [pc, #388]	; (8003a80 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	f240 80b9 	bls.w	8003a74 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003908:	2b00      	cmp	r3, #0
 800390a:	f000 80b3 	beq.w	8003a74 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	015a      	lsls	r2, r3, #5
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	4413      	add	r3, r2
 8003916:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800391a:	461a      	mov	r2, r3
 800391c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003920:	6093      	str	r3, [r2, #8]
 8003922:	e0a7      	b.n	8003a74 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	f003 0320 	and.w	r3, r3, #32
 800392a:	2b00      	cmp	r3, #0
 800392c:	d009      	beq.n	8003942 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	015a      	lsls	r2, r3, #5
 8003932:	69bb      	ldr	r3, [r7, #24]
 8003934:	4413      	add	r3, r2
 8003936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800393a:	461a      	mov	r2, r3
 800393c:	2320      	movs	r3, #32
 800393e:	6093      	str	r3, [r2, #8]
 8003940:	e098      	b.n	8003a74 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003948:	2b00      	cmp	r3, #0
 800394a:	f040 8093 	bne.w	8003a74 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	4a4b      	ldr	r2, [pc, #300]	; (8003a80 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d90f      	bls.n	8003976 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800395c:	2b00      	cmp	r3, #0
 800395e:	d00a      	beq.n	8003976 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	015a      	lsls	r2, r3, #5
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	4413      	add	r3, r2
 8003968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800396c:	461a      	mov	r2, r3
 800396e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003972:	6093      	str	r3, [r2, #8]
 8003974:	e07e      	b.n	8003a74 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003976:	683a      	ldr	r2, [r7, #0]
 8003978:	4613      	mov	r3, r2
 800397a:	00db      	lsls	r3, r3, #3
 800397c:	4413      	add	r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	4413      	add	r3, r2
 8003988:	3304      	adds	r3, #4
 800398a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6a1a      	ldr	r2, [r3, #32]
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	0159      	lsls	r1, r3, #5
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	440b      	add	r3, r1
 8003998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039a2:	1ad2      	subs	r2, r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d114      	bne.n	80039d8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d109      	bne.n	80039ca <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6818      	ldr	r0, [r3, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80039c0:	461a      	mov	r2, r3
 80039c2:	2101      	movs	r1, #1
 80039c4:	f003 f844 	bl	8006a50 <USB_EP0_OutStart>
 80039c8:	e006      	b.n	80039d8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	68da      	ldr	r2, [r3, #12]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	695b      	ldr	r3, [r3, #20]
 80039d2:	441a      	add	r2, r3
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	4619      	mov	r1, r3
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f006 fc7e 	bl	800a2e0 <HAL_PCD_DataOutStageCallback>
 80039e4:	e046      	b.n	8003a74 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	4a26      	ldr	r2, [pc, #152]	; (8003a84 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d124      	bne.n	8003a38 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d00a      	beq.n	8003a0e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	015a      	lsls	r2, r3, #5
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	4413      	add	r3, r2
 8003a00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a04:	461a      	mov	r2, r3
 8003a06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a0a:	6093      	str	r3, [r2, #8]
 8003a0c:	e032      	b.n	8003a74 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	f003 0320 	and.w	r3, r3, #32
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d008      	beq.n	8003a2a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	015a      	lsls	r2, r3, #5
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	4413      	add	r3, r2
 8003a20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a24:	461a      	mov	r2, r3
 8003a26:	2320      	movs	r3, #32
 8003a28:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	4619      	mov	r1, r3
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f006 fc55 	bl	800a2e0 <HAL_PCD_DataOutStageCallback>
 8003a36:	e01d      	b.n	8003a74 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d114      	bne.n	8003a68 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003a3e:	6879      	ldr	r1, [r7, #4]
 8003a40:	683a      	ldr	r2, [r7, #0]
 8003a42:	4613      	mov	r3, r2
 8003a44:	00db      	lsls	r3, r3, #3
 8003a46:	4413      	add	r3, r2
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	440b      	add	r3, r1
 8003a4c:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d108      	bne.n	8003a68 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6818      	ldr	r0, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003a60:	461a      	mov	r2, r3
 8003a62:	2100      	movs	r1, #0
 8003a64:	f002 fff4 	bl	8006a50 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f006 fc36 	bl	800a2e0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3720      	adds	r7, #32
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	4f54300a 	.word	0x4f54300a
 8003a84:	4f54310a 	.word	0x4f54310a

08003a88 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	333c      	adds	r3, #60	; 0x3c
 8003aa0:	3304      	adds	r3, #4
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	015a      	lsls	r2, r3, #5
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	4413      	add	r3, r2
 8003aae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	4a15      	ldr	r2, [pc, #84]	; (8003b10 <PCD_EP_OutSetupPacket_int+0x88>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d90e      	bls.n	8003adc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d009      	beq.n	8003adc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	015a      	lsls	r2, r3, #5
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	4413      	add	r3, r2
 8003ad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ada:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f006 fbed 	bl	800a2bc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	4a0a      	ldr	r2, [pc, #40]	; (8003b10 <PCD_EP_OutSetupPacket_int+0x88>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d90c      	bls.n	8003b04 <PCD_EP_OutSetupPacket_int+0x7c>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	799b      	ldrb	r3, [r3, #6]
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d108      	bne.n	8003b04 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6818      	ldr	r0, [r3, #0]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003afc:	461a      	mov	r2, r3
 8003afe:	2101      	movs	r1, #1
 8003b00:	f002 ffa6 	bl	8006a50 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3718      	adds	r7, #24
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	4f54300a 	.word	0x4f54300a

08003b14 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b085      	sub	sp, #20
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	460b      	mov	r3, r1
 8003b1e:	70fb      	strb	r3, [r7, #3]
 8003b20:	4613      	mov	r3, r2
 8003b22:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003b2c:	78fb      	ldrb	r3, [r7, #3]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d107      	bne.n	8003b42 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003b32:	883b      	ldrh	r3, [r7, #0]
 8003b34:	0419      	lsls	r1, r3, #16
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	68ba      	ldr	r2, [r7, #8]
 8003b3c:	430a      	orrs	r2, r1
 8003b3e:	629a      	str	r2, [r3, #40]	; 0x28
 8003b40:	e028      	b.n	8003b94 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b48:	0c1b      	lsrs	r3, r3, #16
 8003b4a:	68ba      	ldr	r2, [r7, #8]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003b50:	2300      	movs	r3, #0
 8003b52:	73fb      	strb	r3, [r7, #15]
 8003b54:	e00d      	b.n	8003b72 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	7bfb      	ldrb	r3, [r7, #15]
 8003b5c:	3340      	adds	r3, #64	; 0x40
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	4413      	add	r3, r2
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	0c1b      	lsrs	r3, r3, #16
 8003b66:	68ba      	ldr	r2, [r7, #8]
 8003b68:	4413      	add	r3, r2
 8003b6a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003b6c:	7bfb      	ldrb	r3, [r7, #15]
 8003b6e:	3301      	adds	r3, #1
 8003b70:	73fb      	strb	r3, [r7, #15]
 8003b72:	7bfa      	ldrb	r2, [r7, #15]
 8003b74:	78fb      	ldrb	r3, [r7, #3]
 8003b76:	3b01      	subs	r3, #1
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d3ec      	bcc.n	8003b56 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003b7c:	883b      	ldrh	r3, [r7, #0]
 8003b7e:	0418      	lsls	r0, r3, #16
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6819      	ldr	r1, [r3, #0]
 8003b84:	78fb      	ldrb	r3, [r7, #3]
 8003b86:	3b01      	subs	r3, #1
 8003b88:	68ba      	ldr	r2, [r7, #8]
 8003b8a:	4302      	orrs	r2, r0
 8003b8c:	3340      	adds	r3, #64	; 0x40
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	440b      	add	r3, r1
 8003b92:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3714      	adds	r7, #20
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr

08003ba2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003ba2:	b480      	push	{r7}
 8003ba4:	b083      	sub	sp, #12
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
 8003baa:	460b      	mov	r3, r1
 8003bac:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	887a      	ldrh	r2, [r7, #2]
 8003bb4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003bb6:	2300      	movs	r3, #0
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	460b      	mov	r3, r1
 8003bce:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003bd0:	bf00      	nop
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b086      	sub	sp, #24
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d101      	bne.n	8003bee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e267      	b.n	80040be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0301 	and.w	r3, r3, #1
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d075      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bfa:	4b88      	ldr	r3, [pc, #544]	; (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	f003 030c 	and.w	r3, r3, #12
 8003c02:	2b04      	cmp	r3, #4
 8003c04:	d00c      	beq.n	8003c20 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c06:	4b85      	ldr	r3, [pc, #532]	; (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c0e:	2b08      	cmp	r3, #8
 8003c10:	d112      	bne.n	8003c38 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c12:	4b82      	ldr	r3, [pc, #520]	; (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c1e:	d10b      	bne.n	8003c38 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c20:	4b7e      	ldr	r3, [pc, #504]	; (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d05b      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x108>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d157      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e242      	b.n	80040be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c40:	d106      	bne.n	8003c50 <HAL_RCC_OscConfig+0x74>
 8003c42:	4b76      	ldr	r3, [pc, #472]	; (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a75      	ldr	r2, [pc, #468]	; (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003c48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c4c:	6013      	str	r3, [r2, #0]
 8003c4e:	e01d      	b.n	8003c8c <HAL_RCC_OscConfig+0xb0>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c58:	d10c      	bne.n	8003c74 <HAL_RCC_OscConfig+0x98>
 8003c5a:	4b70      	ldr	r3, [pc, #448]	; (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a6f      	ldr	r2, [pc, #444]	; (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003c60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c64:	6013      	str	r3, [r2, #0]
 8003c66:	4b6d      	ldr	r3, [pc, #436]	; (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a6c      	ldr	r2, [pc, #432]	; (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003c6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c70:	6013      	str	r3, [r2, #0]
 8003c72:	e00b      	b.n	8003c8c <HAL_RCC_OscConfig+0xb0>
 8003c74:	4b69      	ldr	r3, [pc, #420]	; (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a68      	ldr	r2, [pc, #416]	; (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003c7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c7e:	6013      	str	r3, [r2, #0]
 8003c80:	4b66      	ldr	r3, [pc, #408]	; (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a65      	ldr	r2, [pc, #404]	; (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003c86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d013      	beq.n	8003cbc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c94:	f7fd fbf8 	bl	8001488 <HAL_GetTick>
 8003c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c9a:	e008      	b.n	8003cae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c9c:	f7fd fbf4 	bl	8001488 <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	2b64      	cmp	r3, #100	; 0x64
 8003ca8:	d901      	bls.n	8003cae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e207      	b.n	80040be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cae:	4b5b      	ldr	r3, [pc, #364]	; (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d0f0      	beq.n	8003c9c <HAL_RCC_OscConfig+0xc0>
 8003cba:	e014      	b.n	8003ce6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cbc:	f7fd fbe4 	bl	8001488 <HAL_GetTick>
 8003cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cc2:	e008      	b.n	8003cd6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cc4:	f7fd fbe0 	bl	8001488 <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	2b64      	cmp	r3, #100	; 0x64
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e1f3      	b.n	80040be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cd6:	4b51      	ldr	r3, [pc, #324]	; (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1f0      	bne.n	8003cc4 <HAL_RCC_OscConfig+0xe8>
 8003ce2:	e000      	b.n	8003ce6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ce4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0302 	and.w	r3, r3, #2
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d063      	beq.n	8003dba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cf2:	4b4a      	ldr	r3, [pc, #296]	; (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	f003 030c 	and.w	r3, r3, #12
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00b      	beq.n	8003d16 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cfe:	4b47      	ldr	r3, [pc, #284]	; (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d06:	2b08      	cmp	r3, #8
 8003d08:	d11c      	bne.n	8003d44 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d0a:	4b44      	ldr	r3, [pc, #272]	; (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d116      	bne.n	8003d44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d16:	4b41      	ldr	r3, [pc, #260]	; (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0302 	and.w	r3, r3, #2
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d005      	beq.n	8003d2e <HAL_RCC_OscConfig+0x152>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d001      	beq.n	8003d2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e1c7      	b.n	80040be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d2e:	4b3b      	ldr	r3, [pc, #236]	; (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	00db      	lsls	r3, r3, #3
 8003d3c:	4937      	ldr	r1, [pc, #220]	; (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d42:	e03a      	b.n	8003dba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d020      	beq.n	8003d8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d4c:	4b34      	ldr	r3, [pc, #208]	; (8003e20 <HAL_RCC_OscConfig+0x244>)
 8003d4e:	2201      	movs	r2, #1
 8003d50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d52:	f7fd fb99 	bl	8001488 <HAL_GetTick>
 8003d56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d58:	e008      	b.n	8003d6c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d5a:	f7fd fb95 	bl	8001488 <HAL_GetTick>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d901      	bls.n	8003d6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	e1a8      	b.n	80040be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d6c:	4b2b      	ldr	r3, [pc, #172]	; (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0302 	and.w	r3, r3, #2
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d0f0      	beq.n	8003d5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d78:	4b28      	ldr	r3, [pc, #160]	; (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	00db      	lsls	r3, r3, #3
 8003d86:	4925      	ldr	r1, [pc, #148]	; (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	600b      	str	r3, [r1, #0]
 8003d8c:	e015      	b.n	8003dba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d8e:	4b24      	ldr	r3, [pc, #144]	; (8003e20 <HAL_RCC_OscConfig+0x244>)
 8003d90:	2200      	movs	r2, #0
 8003d92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d94:	f7fd fb78 	bl	8001488 <HAL_GetTick>
 8003d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d9a:	e008      	b.n	8003dae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d9c:	f7fd fb74 	bl	8001488 <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d901      	bls.n	8003dae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e187      	b.n	80040be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dae:	4b1b      	ldr	r3, [pc, #108]	; (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0302 	and.w	r3, r3, #2
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d1f0      	bne.n	8003d9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0308 	and.w	r3, r3, #8
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d036      	beq.n	8003e34 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d016      	beq.n	8003dfc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dce:	4b15      	ldr	r3, [pc, #84]	; (8003e24 <HAL_RCC_OscConfig+0x248>)
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dd4:	f7fd fb58 	bl	8001488 <HAL_GetTick>
 8003dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dda:	e008      	b.n	8003dee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ddc:	f7fd fb54 	bl	8001488 <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d901      	bls.n	8003dee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e167      	b.n	80040be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dee:	4b0b      	ldr	r3, [pc, #44]	; (8003e1c <HAL_RCC_OscConfig+0x240>)
 8003df0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003df2:	f003 0302 	and.w	r3, r3, #2
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d0f0      	beq.n	8003ddc <HAL_RCC_OscConfig+0x200>
 8003dfa:	e01b      	b.n	8003e34 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dfc:	4b09      	ldr	r3, [pc, #36]	; (8003e24 <HAL_RCC_OscConfig+0x248>)
 8003dfe:	2200      	movs	r2, #0
 8003e00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e02:	f7fd fb41 	bl	8001488 <HAL_GetTick>
 8003e06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e08:	e00e      	b.n	8003e28 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e0a:	f7fd fb3d 	bl	8001488 <HAL_GetTick>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d907      	bls.n	8003e28 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	e150      	b.n	80040be <HAL_RCC_OscConfig+0x4e2>
 8003e1c:	40023800 	.word	0x40023800
 8003e20:	42470000 	.word	0x42470000
 8003e24:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e28:	4b88      	ldr	r3, [pc, #544]	; (800404c <HAL_RCC_OscConfig+0x470>)
 8003e2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e2c:	f003 0302 	and.w	r3, r3, #2
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d1ea      	bne.n	8003e0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0304 	and.w	r3, r3, #4
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	f000 8097 	beq.w	8003f70 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e42:	2300      	movs	r3, #0
 8003e44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e46:	4b81      	ldr	r3, [pc, #516]	; (800404c <HAL_RCC_OscConfig+0x470>)
 8003e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d10f      	bne.n	8003e72 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e52:	2300      	movs	r3, #0
 8003e54:	60bb      	str	r3, [r7, #8]
 8003e56:	4b7d      	ldr	r3, [pc, #500]	; (800404c <HAL_RCC_OscConfig+0x470>)
 8003e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5a:	4a7c      	ldr	r2, [pc, #496]	; (800404c <HAL_RCC_OscConfig+0x470>)
 8003e5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e60:	6413      	str	r3, [r2, #64]	; 0x40
 8003e62:	4b7a      	ldr	r3, [pc, #488]	; (800404c <HAL_RCC_OscConfig+0x470>)
 8003e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e6a:	60bb      	str	r3, [r7, #8]
 8003e6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e72:	4b77      	ldr	r3, [pc, #476]	; (8004050 <HAL_RCC_OscConfig+0x474>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d118      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e7e:	4b74      	ldr	r3, [pc, #464]	; (8004050 <HAL_RCC_OscConfig+0x474>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a73      	ldr	r2, [pc, #460]	; (8004050 <HAL_RCC_OscConfig+0x474>)
 8003e84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e8a:	f7fd fafd 	bl	8001488 <HAL_GetTick>
 8003e8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e90:	e008      	b.n	8003ea4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e92:	f7fd faf9 	bl	8001488 <HAL_GetTick>
 8003e96:	4602      	mov	r2, r0
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d901      	bls.n	8003ea4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e10c      	b.n	80040be <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ea4:	4b6a      	ldr	r3, [pc, #424]	; (8004050 <HAL_RCC_OscConfig+0x474>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d0f0      	beq.n	8003e92 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d106      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x2ea>
 8003eb8:	4b64      	ldr	r3, [pc, #400]	; (800404c <HAL_RCC_OscConfig+0x470>)
 8003eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ebc:	4a63      	ldr	r2, [pc, #396]	; (800404c <HAL_RCC_OscConfig+0x470>)
 8003ebe:	f043 0301 	orr.w	r3, r3, #1
 8003ec2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ec4:	e01c      	b.n	8003f00 <HAL_RCC_OscConfig+0x324>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	2b05      	cmp	r3, #5
 8003ecc:	d10c      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x30c>
 8003ece:	4b5f      	ldr	r3, [pc, #380]	; (800404c <HAL_RCC_OscConfig+0x470>)
 8003ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed2:	4a5e      	ldr	r2, [pc, #376]	; (800404c <HAL_RCC_OscConfig+0x470>)
 8003ed4:	f043 0304 	orr.w	r3, r3, #4
 8003ed8:	6713      	str	r3, [r2, #112]	; 0x70
 8003eda:	4b5c      	ldr	r3, [pc, #368]	; (800404c <HAL_RCC_OscConfig+0x470>)
 8003edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ede:	4a5b      	ldr	r2, [pc, #364]	; (800404c <HAL_RCC_OscConfig+0x470>)
 8003ee0:	f043 0301 	orr.w	r3, r3, #1
 8003ee4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ee6:	e00b      	b.n	8003f00 <HAL_RCC_OscConfig+0x324>
 8003ee8:	4b58      	ldr	r3, [pc, #352]	; (800404c <HAL_RCC_OscConfig+0x470>)
 8003eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eec:	4a57      	ldr	r2, [pc, #348]	; (800404c <HAL_RCC_OscConfig+0x470>)
 8003eee:	f023 0301 	bic.w	r3, r3, #1
 8003ef2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ef4:	4b55      	ldr	r3, [pc, #340]	; (800404c <HAL_RCC_OscConfig+0x470>)
 8003ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef8:	4a54      	ldr	r2, [pc, #336]	; (800404c <HAL_RCC_OscConfig+0x470>)
 8003efa:	f023 0304 	bic.w	r3, r3, #4
 8003efe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d015      	beq.n	8003f34 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f08:	f7fd fabe 	bl	8001488 <HAL_GetTick>
 8003f0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f0e:	e00a      	b.n	8003f26 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f10:	f7fd faba 	bl	8001488 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e0cb      	b.n	80040be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f26:	4b49      	ldr	r3, [pc, #292]	; (800404c <HAL_RCC_OscConfig+0x470>)
 8003f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f2a:	f003 0302 	and.w	r3, r3, #2
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d0ee      	beq.n	8003f10 <HAL_RCC_OscConfig+0x334>
 8003f32:	e014      	b.n	8003f5e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f34:	f7fd faa8 	bl	8001488 <HAL_GetTick>
 8003f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f3a:	e00a      	b.n	8003f52 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f3c:	f7fd faa4 	bl	8001488 <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d901      	bls.n	8003f52 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e0b5      	b.n	80040be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f52:	4b3e      	ldr	r3, [pc, #248]	; (800404c <HAL_RCC_OscConfig+0x470>)
 8003f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f56:	f003 0302 	and.w	r3, r3, #2
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1ee      	bne.n	8003f3c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f5e:	7dfb      	ldrb	r3, [r7, #23]
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d105      	bne.n	8003f70 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f64:	4b39      	ldr	r3, [pc, #228]	; (800404c <HAL_RCC_OscConfig+0x470>)
 8003f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f68:	4a38      	ldr	r2, [pc, #224]	; (800404c <HAL_RCC_OscConfig+0x470>)
 8003f6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f6e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	699b      	ldr	r3, [r3, #24]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	f000 80a1 	beq.w	80040bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f7a:	4b34      	ldr	r3, [pc, #208]	; (800404c <HAL_RCC_OscConfig+0x470>)
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f003 030c 	and.w	r3, r3, #12
 8003f82:	2b08      	cmp	r3, #8
 8003f84:	d05c      	beq.n	8004040 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	699b      	ldr	r3, [r3, #24]
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d141      	bne.n	8004012 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f8e:	4b31      	ldr	r3, [pc, #196]	; (8004054 <HAL_RCC_OscConfig+0x478>)
 8003f90:	2200      	movs	r2, #0
 8003f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f94:	f7fd fa78 	bl	8001488 <HAL_GetTick>
 8003f98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f9a:	e008      	b.n	8003fae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f9c:	f7fd fa74 	bl	8001488 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d901      	bls.n	8003fae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e087      	b.n	80040be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fae:	4b27      	ldr	r3, [pc, #156]	; (800404c <HAL_RCC_OscConfig+0x470>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1f0      	bne.n	8003f9c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	69da      	ldr	r2, [r3, #28]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a1b      	ldr	r3, [r3, #32]
 8003fc2:	431a      	orrs	r2, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc8:	019b      	lsls	r3, r3, #6
 8003fca:	431a      	orrs	r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd0:	085b      	lsrs	r3, r3, #1
 8003fd2:	3b01      	subs	r3, #1
 8003fd4:	041b      	lsls	r3, r3, #16
 8003fd6:	431a      	orrs	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fdc:	061b      	lsls	r3, r3, #24
 8003fde:	491b      	ldr	r1, [pc, #108]	; (800404c <HAL_RCC_OscConfig+0x470>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fe4:	4b1b      	ldr	r3, [pc, #108]	; (8004054 <HAL_RCC_OscConfig+0x478>)
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fea:	f7fd fa4d 	bl	8001488 <HAL_GetTick>
 8003fee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ff0:	e008      	b.n	8004004 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ff2:	f7fd fa49 	bl	8001488 <HAL_GetTick>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d901      	bls.n	8004004 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	e05c      	b.n	80040be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004004:	4b11      	ldr	r3, [pc, #68]	; (800404c <HAL_RCC_OscConfig+0x470>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d0f0      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x416>
 8004010:	e054      	b.n	80040bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004012:	4b10      	ldr	r3, [pc, #64]	; (8004054 <HAL_RCC_OscConfig+0x478>)
 8004014:	2200      	movs	r2, #0
 8004016:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004018:	f7fd fa36 	bl	8001488 <HAL_GetTick>
 800401c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800401e:	e008      	b.n	8004032 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004020:	f7fd fa32 	bl	8001488 <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	2b02      	cmp	r3, #2
 800402c:	d901      	bls.n	8004032 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e045      	b.n	80040be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004032:	4b06      	ldr	r3, [pc, #24]	; (800404c <HAL_RCC_OscConfig+0x470>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d1f0      	bne.n	8004020 <HAL_RCC_OscConfig+0x444>
 800403e:	e03d      	b.n	80040bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	699b      	ldr	r3, [r3, #24]
 8004044:	2b01      	cmp	r3, #1
 8004046:	d107      	bne.n	8004058 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e038      	b.n	80040be <HAL_RCC_OscConfig+0x4e2>
 800404c:	40023800 	.word	0x40023800
 8004050:	40007000 	.word	0x40007000
 8004054:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004058:	4b1b      	ldr	r3, [pc, #108]	; (80040c8 <HAL_RCC_OscConfig+0x4ec>)
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	699b      	ldr	r3, [r3, #24]
 8004062:	2b01      	cmp	r3, #1
 8004064:	d028      	beq.n	80040b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004070:	429a      	cmp	r2, r3
 8004072:	d121      	bne.n	80040b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800407e:	429a      	cmp	r2, r3
 8004080:	d11a      	bne.n	80040b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004082:	68fa      	ldr	r2, [r7, #12]
 8004084:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004088:	4013      	ands	r3, r2
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800408e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004090:	4293      	cmp	r3, r2
 8004092:	d111      	bne.n	80040b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800409e:	085b      	lsrs	r3, r3, #1
 80040a0:	3b01      	subs	r3, #1
 80040a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d107      	bne.n	80040b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d001      	beq.n	80040bc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e000      	b.n	80040be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3718      	adds	r7, #24
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	40023800 	.word	0x40023800

080040cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d101      	bne.n	80040e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e0cc      	b.n	800427a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040e0:	4b68      	ldr	r3, [pc, #416]	; (8004284 <HAL_RCC_ClockConfig+0x1b8>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 030f 	and.w	r3, r3, #15
 80040e8:	683a      	ldr	r2, [r7, #0]
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d90c      	bls.n	8004108 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ee:	4b65      	ldr	r3, [pc, #404]	; (8004284 <HAL_RCC_ClockConfig+0x1b8>)
 80040f0:	683a      	ldr	r2, [r7, #0]
 80040f2:	b2d2      	uxtb	r2, r2
 80040f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040f6:	4b63      	ldr	r3, [pc, #396]	; (8004284 <HAL_RCC_ClockConfig+0x1b8>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 030f 	and.w	r3, r3, #15
 80040fe:	683a      	ldr	r2, [r7, #0]
 8004100:	429a      	cmp	r2, r3
 8004102:	d001      	beq.n	8004108 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e0b8      	b.n	800427a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0302 	and.w	r3, r3, #2
 8004110:	2b00      	cmp	r3, #0
 8004112:	d020      	beq.n	8004156 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0304 	and.w	r3, r3, #4
 800411c:	2b00      	cmp	r3, #0
 800411e:	d005      	beq.n	800412c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004120:	4b59      	ldr	r3, [pc, #356]	; (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	4a58      	ldr	r2, [pc, #352]	; (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 8004126:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800412a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0308 	and.w	r3, r3, #8
 8004134:	2b00      	cmp	r3, #0
 8004136:	d005      	beq.n	8004144 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004138:	4b53      	ldr	r3, [pc, #332]	; (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	4a52      	ldr	r2, [pc, #328]	; (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 800413e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004142:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004144:	4b50      	ldr	r3, [pc, #320]	; (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	494d      	ldr	r1, [pc, #308]	; (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 8004152:	4313      	orrs	r3, r2
 8004154:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0301 	and.w	r3, r3, #1
 800415e:	2b00      	cmp	r3, #0
 8004160:	d044      	beq.n	80041ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	2b01      	cmp	r3, #1
 8004168:	d107      	bne.n	800417a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800416a:	4b47      	ldr	r3, [pc, #284]	; (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d119      	bne.n	80041aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e07f      	b.n	800427a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	2b02      	cmp	r3, #2
 8004180:	d003      	beq.n	800418a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004186:	2b03      	cmp	r3, #3
 8004188:	d107      	bne.n	800419a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800418a:	4b3f      	ldr	r3, [pc, #252]	; (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d109      	bne.n	80041aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e06f      	b.n	800427a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800419a:	4b3b      	ldr	r3, [pc, #236]	; (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0302 	and.w	r3, r3, #2
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d101      	bne.n	80041aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e067      	b.n	800427a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041aa:	4b37      	ldr	r3, [pc, #220]	; (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f023 0203 	bic.w	r2, r3, #3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	4934      	ldr	r1, [pc, #208]	; (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041bc:	f7fd f964 	bl	8001488 <HAL_GetTick>
 80041c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041c2:	e00a      	b.n	80041da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041c4:	f7fd f960 	bl	8001488 <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d901      	bls.n	80041da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e04f      	b.n	800427a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041da:	4b2b      	ldr	r3, [pc, #172]	; (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	f003 020c 	and.w	r2, r3, #12
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d1eb      	bne.n	80041c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041ec:	4b25      	ldr	r3, [pc, #148]	; (8004284 <HAL_RCC_ClockConfig+0x1b8>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 030f 	and.w	r3, r3, #15
 80041f4:	683a      	ldr	r2, [r7, #0]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d20c      	bcs.n	8004214 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041fa:	4b22      	ldr	r3, [pc, #136]	; (8004284 <HAL_RCC_ClockConfig+0x1b8>)
 80041fc:	683a      	ldr	r2, [r7, #0]
 80041fe:	b2d2      	uxtb	r2, r2
 8004200:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004202:	4b20      	ldr	r3, [pc, #128]	; (8004284 <HAL_RCC_ClockConfig+0x1b8>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 030f 	and.w	r3, r3, #15
 800420a:	683a      	ldr	r2, [r7, #0]
 800420c:	429a      	cmp	r2, r3
 800420e:	d001      	beq.n	8004214 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e032      	b.n	800427a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0304 	and.w	r3, r3, #4
 800421c:	2b00      	cmp	r3, #0
 800421e:	d008      	beq.n	8004232 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004220:	4b19      	ldr	r3, [pc, #100]	; (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	4916      	ldr	r1, [pc, #88]	; (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 800422e:	4313      	orrs	r3, r2
 8004230:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0308 	and.w	r3, r3, #8
 800423a:	2b00      	cmp	r3, #0
 800423c:	d009      	beq.n	8004252 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800423e:	4b12      	ldr	r3, [pc, #72]	; (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	00db      	lsls	r3, r3, #3
 800424c:	490e      	ldr	r1, [pc, #56]	; (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 800424e:	4313      	orrs	r3, r2
 8004250:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004252:	f000 f821 	bl	8004298 <HAL_RCC_GetSysClockFreq>
 8004256:	4602      	mov	r2, r0
 8004258:	4b0b      	ldr	r3, [pc, #44]	; (8004288 <HAL_RCC_ClockConfig+0x1bc>)
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	091b      	lsrs	r3, r3, #4
 800425e:	f003 030f 	and.w	r3, r3, #15
 8004262:	490a      	ldr	r1, [pc, #40]	; (800428c <HAL_RCC_ClockConfig+0x1c0>)
 8004264:	5ccb      	ldrb	r3, [r1, r3]
 8004266:	fa22 f303 	lsr.w	r3, r2, r3
 800426a:	4a09      	ldr	r2, [pc, #36]	; (8004290 <HAL_RCC_ClockConfig+0x1c4>)
 800426c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800426e:	4b09      	ldr	r3, [pc, #36]	; (8004294 <HAL_RCC_ClockConfig+0x1c8>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4618      	mov	r0, r3
 8004274:	f7fc fd36 	bl	8000ce4 <HAL_InitTick>

  return HAL_OK;
 8004278:	2300      	movs	r3, #0
}
 800427a:	4618      	mov	r0, r3
 800427c:	3710      	adds	r7, #16
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	40023c00 	.word	0x40023c00
 8004288:	40023800 	.word	0x40023800
 800428c:	0800b0e0 	.word	0x0800b0e0
 8004290:	20000000 	.word	0x20000000
 8004294:	20000004 	.word	0x20000004

08004298 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004298:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800429c:	b090      	sub	sp, #64	; 0x40
 800429e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80042a0:	2300      	movs	r3, #0
 80042a2:	637b      	str	r3, [r7, #52]	; 0x34
 80042a4:	2300      	movs	r3, #0
 80042a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042a8:	2300      	movs	r3, #0
 80042aa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80042ac:	2300      	movs	r3, #0
 80042ae:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042b0:	4b59      	ldr	r3, [pc, #356]	; (8004418 <HAL_RCC_GetSysClockFreq+0x180>)
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	f003 030c 	and.w	r3, r3, #12
 80042b8:	2b08      	cmp	r3, #8
 80042ba:	d00d      	beq.n	80042d8 <HAL_RCC_GetSysClockFreq+0x40>
 80042bc:	2b08      	cmp	r3, #8
 80042be:	f200 80a1 	bhi.w	8004404 <HAL_RCC_GetSysClockFreq+0x16c>
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d002      	beq.n	80042cc <HAL_RCC_GetSysClockFreq+0x34>
 80042c6:	2b04      	cmp	r3, #4
 80042c8:	d003      	beq.n	80042d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80042ca:	e09b      	b.n	8004404 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042cc:	4b53      	ldr	r3, [pc, #332]	; (800441c <HAL_RCC_GetSysClockFreq+0x184>)
 80042ce:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80042d0:	e09b      	b.n	800440a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042d2:	4b53      	ldr	r3, [pc, #332]	; (8004420 <HAL_RCC_GetSysClockFreq+0x188>)
 80042d4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80042d6:	e098      	b.n	800440a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042d8:	4b4f      	ldr	r3, [pc, #316]	; (8004418 <HAL_RCC_GetSysClockFreq+0x180>)
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042e0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042e2:	4b4d      	ldr	r3, [pc, #308]	; (8004418 <HAL_RCC_GetSysClockFreq+0x180>)
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d028      	beq.n	8004340 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042ee:	4b4a      	ldr	r3, [pc, #296]	; (8004418 <HAL_RCC_GetSysClockFreq+0x180>)
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	099b      	lsrs	r3, r3, #6
 80042f4:	2200      	movs	r2, #0
 80042f6:	623b      	str	r3, [r7, #32]
 80042f8:	627a      	str	r2, [r7, #36]	; 0x24
 80042fa:	6a3b      	ldr	r3, [r7, #32]
 80042fc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004300:	2100      	movs	r1, #0
 8004302:	4b47      	ldr	r3, [pc, #284]	; (8004420 <HAL_RCC_GetSysClockFreq+0x188>)
 8004304:	fb03 f201 	mul.w	r2, r3, r1
 8004308:	2300      	movs	r3, #0
 800430a:	fb00 f303 	mul.w	r3, r0, r3
 800430e:	4413      	add	r3, r2
 8004310:	4a43      	ldr	r2, [pc, #268]	; (8004420 <HAL_RCC_GetSysClockFreq+0x188>)
 8004312:	fba0 1202 	umull	r1, r2, r0, r2
 8004316:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004318:	460a      	mov	r2, r1
 800431a:	62ba      	str	r2, [r7, #40]	; 0x28
 800431c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800431e:	4413      	add	r3, r2
 8004320:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004324:	2200      	movs	r2, #0
 8004326:	61bb      	str	r3, [r7, #24]
 8004328:	61fa      	str	r2, [r7, #28]
 800432a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800432e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004332:	f7fb ff5d 	bl	80001f0 <__aeabi_uldivmod>
 8004336:	4602      	mov	r2, r0
 8004338:	460b      	mov	r3, r1
 800433a:	4613      	mov	r3, r2
 800433c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800433e:	e053      	b.n	80043e8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004340:	4b35      	ldr	r3, [pc, #212]	; (8004418 <HAL_RCC_GetSysClockFreq+0x180>)
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	099b      	lsrs	r3, r3, #6
 8004346:	2200      	movs	r2, #0
 8004348:	613b      	str	r3, [r7, #16]
 800434a:	617a      	str	r2, [r7, #20]
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004352:	f04f 0b00 	mov.w	fp, #0
 8004356:	4652      	mov	r2, sl
 8004358:	465b      	mov	r3, fp
 800435a:	f04f 0000 	mov.w	r0, #0
 800435e:	f04f 0100 	mov.w	r1, #0
 8004362:	0159      	lsls	r1, r3, #5
 8004364:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004368:	0150      	lsls	r0, r2, #5
 800436a:	4602      	mov	r2, r0
 800436c:	460b      	mov	r3, r1
 800436e:	ebb2 080a 	subs.w	r8, r2, sl
 8004372:	eb63 090b 	sbc.w	r9, r3, fp
 8004376:	f04f 0200 	mov.w	r2, #0
 800437a:	f04f 0300 	mov.w	r3, #0
 800437e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004382:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004386:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800438a:	ebb2 0408 	subs.w	r4, r2, r8
 800438e:	eb63 0509 	sbc.w	r5, r3, r9
 8004392:	f04f 0200 	mov.w	r2, #0
 8004396:	f04f 0300 	mov.w	r3, #0
 800439a:	00eb      	lsls	r3, r5, #3
 800439c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043a0:	00e2      	lsls	r2, r4, #3
 80043a2:	4614      	mov	r4, r2
 80043a4:	461d      	mov	r5, r3
 80043a6:	eb14 030a 	adds.w	r3, r4, sl
 80043aa:	603b      	str	r3, [r7, #0]
 80043ac:	eb45 030b 	adc.w	r3, r5, fp
 80043b0:	607b      	str	r3, [r7, #4]
 80043b2:	f04f 0200 	mov.w	r2, #0
 80043b6:	f04f 0300 	mov.w	r3, #0
 80043ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80043be:	4629      	mov	r1, r5
 80043c0:	028b      	lsls	r3, r1, #10
 80043c2:	4621      	mov	r1, r4
 80043c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80043c8:	4621      	mov	r1, r4
 80043ca:	028a      	lsls	r2, r1, #10
 80043cc:	4610      	mov	r0, r2
 80043ce:	4619      	mov	r1, r3
 80043d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043d2:	2200      	movs	r2, #0
 80043d4:	60bb      	str	r3, [r7, #8]
 80043d6:	60fa      	str	r2, [r7, #12]
 80043d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80043dc:	f7fb ff08 	bl	80001f0 <__aeabi_uldivmod>
 80043e0:	4602      	mov	r2, r0
 80043e2:	460b      	mov	r3, r1
 80043e4:	4613      	mov	r3, r2
 80043e6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80043e8:	4b0b      	ldr	r3, [pc, #44]	; (8004418 <HAL_RCC_GetSysClockFreq+0x180>)
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	0c1b      	lsrs	r3, r3, #16
 80043ee:	f003 0303 	and.w	r3, r3, #3
 80043f2:	3301      	adds	r3, #1
 80043f4:	005b      	lsls	r3, r3, #1
 80043f6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80043f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80043fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004400:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004402:	e002      	b.n	800440a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004404:	4b05      	ldr	r3, [pc, #20]	; (800441c <HAL_RCC_GetSysClockFreq+0x184>)
 8004406:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004408:	bf00      	nop
    }
  }
  return sysclockfreq;
 800440a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800440c:	4618      	mov	r0, r3
 800440e:	3740      	adds	r7, #64	; 0x40
 8004410:	46bd      	mov	sp, r7
 8004412:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004416:	bf00      	nop
 8004418:	40023800 	.word	0x40023800
 800441c:	00f42400 	.word	0x00f42400
 8004420:	00b71b00 	.word	0x00b71b00

08004424 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004424:	b480      	push	{r7}
 8004426:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004428:	4b03      	ldr	r3, [pc, #12]	; (8004438 <HAL_RCC_GetHCLKFreq+0x14>)
 800442a:	681b      	ldr	r3, [r3, #0]
}
 800442c:	4618      	mov	r0, r3
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	20000000 	.word	0x20000000

0800443c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004440:	f7ff fff0 	bl	8004424 <HAL_RCC_GetHCLKFreq>
 8004444:	4602      	mov	r2, r0
 8004446:	4b05      	ldr	r3, [pc, #20]	; (800445c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	0a9b      	lsrs	r3, r3, #10
 800444c:	f003 0307 	and.w	r3, r3, #7
 8004450:	4903      	ldr	r1, [pc, #12]	; (8004460 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004452:	5ccb      	ldrb	r3, [r1, r3]
 8004454:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004458:	4618      	mov	r0, r3
 800445a:	bd80      	pop	{r7, pc}
 800445c:	40023800 	.word	0x40023800
 8004460:	0800b0f0 	.word	0x0800b0f0

08004464 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	220f      	movs	r2, #15
 8004472:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004474:	4b12      	ldr	r3, [pc, #72]	; (80044c0 <HAL_RCC_GetClockConfig+0x5c>)
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	f003 0203 	and.w	r2, r3, #3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004480:	4b0f      	ldr	r3, [pc, #60]	; (80044c0 <HAL_RCC_GetClockConfig+0x5c>)
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800448c:	4b0c      	ldr	r3, [pc, #48]	; (80044c0 <HAL_RCC_GetClockConfig+0x5c>)
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004498:	4b09      	ldr	r3, [pc, #36]	; (80044c0 <HAL_RCC_GetClockConfig+0x5c>)
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	08db      	lsrs	r3, r3, #3
 800449e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80044a6:	4b07      	ldr	r3, [pc, #28]	; (80044c4 <HAL_RCC_GetClockConfig+0x60>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 020f 	and.w	r2, r3, #15
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	601a      	str	r2, [r3, #0]
}
 80044b2:	bf00      	nop
 80044b4:	370c      	adds	r7, #12
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop
 80044c0:	40023800 	.word	0x40023800
 80044c4:	40023c00 	.word	0x40023c00

080044c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d101      	bne.n	80044da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e07b      	b.n	80045d2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d108      	bne.n	80044f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044ea:	d009      	beq.n	8004500 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	61da      	str	r2, [r3, #28]
 80044f2:	e005      	b.n	8004500 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800450c:	b2db      	uxtb	r3, r3
 800450e:	2b00      	cmp	r3, #0
 8004510:	d106      	bne.n	8004520 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f7fc fb6e 	bl	8000bfc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2202      	movs	r2, #2
 8004524:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004536:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004548:	431a      	orrs	r2, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004552:	431a      	orrs	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	691b      	ldr	r3, [r3, #16]
 8004558:	f003 0302 	and.w	r3, r3, #2
 800455c:	431a      	orrs	r2, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	695b      	ldr	r3, [r3, #20]
 8004562:	f003 0301 	and.w	r3, r3, #1
 8004566:	431a      	orrs	r2, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	699b      	ldr	r3, [r3, #24]
 800456c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004570:	431a      	orrs	r2, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	69db      	ldr	r3, [r3, #28]
 8004576:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800457a:	431a      	orrs	r2, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a1b      	ldr	r3, [r3, #32]
 8004580:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004584:	ea42 0103 	orr.w	r1, r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800458c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	430a      	orrs	r2, r1
 8004596:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	699b      	ldr	r3, [r3, #24]
 800459c:	0c1b      	lsrs	r3, r3, #16
 800459e:	f003 0104 	and.w	r1, r3, #4
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a6:	f003 0210 	and.w	r2, r3, #16
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	430a      	orrs	r2, r1
 80045b0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	69da      	ldr	r2, [r3, #28]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045c0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3708      	adds	r7, #8
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}

080045da <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045da:	b580      	push	{r7, lr}
 80045dc:	b082      	sub	sp, #8
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d101      	bne.n	80045ec <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e041      	b.n	8004670 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d106      	bne.n	8004606 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f7fc fe0f 	bl	8001224 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2202      	movs	r2, #2
 800460a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	3304      	adds	r3, #4
 8004616:	4619      	mov	r1, r3
 8004618:	4610      	mov	r0, r2
 800461a:	f000 fb8f 	bl	8004d3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2201      	movs	r2, #1
 8004622:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2201      	movs	r2, #1
 800462a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2201      	movs	r2, #1
 8004632:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2201      	movs	r2, #1
 800463a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2201      	movs	r2, #1
 8004642:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2201      	movs	r2, #1
 800464a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2201      	movs	r2, #1
 8004652:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2201      	movs	r2, #1
 800465a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2201      	movs	r2, #1
 8004662:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2201      	movs	r2, #1
 800466a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800466e:	2300      	movs	r3, #0
}
 8004670:	4618      	mov	r0, r3
 8004672:	3708      	adds	r7, #8
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004678:	b480      	push	{r7}
 800467a:	b085      	sub	sp, #20
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004686:	b2db      	uxtb	r3, r3
 8004688:	2b01      	cmp	r3, #1
 800468a:	d001      	beq.n	8004690 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e04e      	b.n	800472e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2202      	movs	r2, #2
 8004694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	68da      	ldr	r2, [r3, #12]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f042 0201 	orr.w	r2, r2, #1
 80046a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a23      	ldr	r2, [pc, #140]	; (800473c <HAL_TIM_Base_Start_IT+0xc4>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d022      	beq.n	80046f8 <HAL_TIM_Base_Start_IT+0x80>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046ba:	d01d      	beq.n	80046f8 <HAL_TIM_Base_Start_IT+0x80>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a1f      	ldr	r2, [pc, #124]	; (8004740 <HAL_TIM_Base_Start_IT+0xc8>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d018      	beq.n	80046f8 <HAL_TIM_Base_Start_IT+0x80>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a1e      	ldr	r2, [pc, #120]	; (8004744 <HAL_TIM_Base_Start_IT+0xcc>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d013      	beq.n	80046f8 <HAL_TIM_Base_Start_IT+0x80>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a1c      	ldr	r2, [pc, #112]	; (8004748 <HAL_TIM_Base_Start_IT+0xd0>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d00e      	beq.n	80046f8 <HAL_TIM_Base_Start_IT+0x80>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a1b      	ldr	r2, [pc, #108]	; (800474c <HAL_TIM_Base_Start_IT+0xd4>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d009      	beq.n	80046f8 <HAL_TIM_Base_Start_IT+0x80>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a19      	ldr	r2, [pc, #100]	; (8004750 <HAL_TIM_Base_Start_IT+0xd8>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d004      	beq.n	80046f8 <HAL_TIM_Base_Start_IT+0x80>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a18      	ldr	r2, [pc, #96]	; (8004754 <HAL_TIM_Base_Start_IT+0xdc>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d111      	bne.n	800471c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	f003 0307 	and.w	r3, r3, #7
 8004702:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2b06      	cmp	r3, #6
 8004708:	d010      	beq.n	800472c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f042 0201 	orr.w	r2, r2, #1
 8004718:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800471a:	e007      	b.n	800472c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f042 0201 	orr.w	r2, r2, #1
 800472a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3714      	adds	r7, #20
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	40010000 	.word	0x40010000
 8004740:	40000400 	.word	0x40000400
 8004744:	40000800 	.word	0x40000800
 8004748:	40000c00 	.word	0x40000c00
 800474c:	40010400 	.word	0x40010400
 8004750:	40014000 	.word	0x40014000
 8004754:	40001800 	.word	0x40001800

08004758 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b082      	sub	sp, #8
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d101      	bne.n	800476a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e041      	b.n	80047ee <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004770:	b2db      	uxtb	r3, r3
 8004772:	2b00      	cmp	r3, #0
 8004774:	d106      	bne.n	8004784 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f7fc fd02 	bl	8001188 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2202      	movs	r2, #2
 8004788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	3304      	adds	r3, #4
 8004794:	4619      	mov	r1, r3
 8004796:	4610      	mov	r0, r2
 8004798:	f000 fad0 	bl	8004d3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047ec:	2300      	movs	r3, #0
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3708      	adds	r7, #8
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}

080047f6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047f6:	b580      	push	{r7, lr}
 80047f8:	b084      	sub	sp, #16
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	691b      	ldr	r3, [r3, #16]
 800480c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	f003 0302 	and.w	r3, r3, #2
 8004814:	2b00      	cmp	r3, #0
 8004816:	d020      	beq.n	800485a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f003 0302 	and.w	r3, r3, #2
 800481e:	2b00      	cmp	r3, #0
 8004820:	d01b      	beq.n	800485a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f06f 0202 	mvn.w	r2, #2
 800482a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	699b      	ldr	r3, [r3, #24]
 8004838:	f003 0303 	and.w	r3, r3, #3
 800483c:	2b00      	cmp	r3, #0
 800483e:	d003      	beq.n	8004848 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f000 fa5c 	bl	8004cfe <HAL_TIM_IC_CaptureCallback>
 8004846:	e005      	b.n	8004854 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f000 fa4e 	bl	8004cea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f000 fa5f 	bl	8004d12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	f003 0304 	and.w	r3, r3, #4
 8004860:	2b00      	cmp	r3, #0
 8004862:	d020      	beq.n	80048a6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f003 0304 	and.w	r3, r3, #4
 800486a:	2b00      	cmp	r3, #0
 800486c:	d01b      	beq.n	80048a6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f06f 0204 	mvn.w	r2, #4
 8004876:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2202      	movs	r2, #2
 800487c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	699b      	ldr	r3, [r3, #24]
 8004884:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004888:	2b00      	cmp	r3, #0
 800488a:	d003      	beq.n	8004894 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f000 fa36 	bl	8004cfe <HAL_TIM_IC_CaptureCallback>
 8004892:	e005      	b.n	80048a0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f000 fa28 	bl	8004cea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f000 fa39 	bl	8004d12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	f003 0308 	and.w	r3, r3, #8
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d020      	beq.n	80048f2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f003 0308 	and.w	r3, r3, #8
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d01b      	beq.n	80048f2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f06f 0208 	mvn.w	r2, #8
 80048c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2204      	movs	r2, #4
 80048c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	69db      	ldr	r3, [r3, #28]
 80048d0:	f003 0303 	and.w	r3, r3, #3
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d003      	beq.n	80048e0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f000 fa10 	bl	8004cfe <HAL_TIM_IC_CaptureCallback>
 80048de:	e005      	b.n	80048ec <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f000 fa02 	bl	8004cea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 fa13 	bl	8004d12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	f003 0310 	and.w	r3, r3, #16
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d020      	beq.n	800493e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f003 0310 	and.w	r3, r3, #16
 8004902:	2b00      	cmp	r3, #0
 8004904:	d01b      	beq.n	800493e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f06f 0210 	mvn.w	r2, #16
 800490e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2208      	movs	r2, #8
 8004914:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	69db      	ldr	r3, [r3, #28]
 800491c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004920:	2b00      	cmp	r3, #0
 8004922:	d003      	beq.n	800492c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f000 f9ea 	bl	8004cfe <HAL_TIM_IC_CaptureCallback>
 800492a:	e005      	b.n	8004938 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f000 f9dc 	bl	8004cea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 f9ed 	bl	8004d12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	f003 0301 	and.w	r3, r3, #1
 8004944:	2b00      	cmp	r3, #0
 8004946:	d00c      	beq.n	8004962 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f003 0301 	and.w	r3, r3, #1
 800494e:	2b00      	cmp	r3, #0
 8004950:	d007      	beq.n	8004962 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f06f 0201 	mvn.w	r2, #1
 800495a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f7fc f8f5 	bl	8000b4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004968:	2b00      	cmp	r3, #0
 800496a:	d00c      	beq.n	8004986 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004972:	2b00      	cmp	r3, #0
 8004974:	d007      	beq.n	8004986 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800497e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f000 fda9 	bl	80054d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800498c:	2b00      	cmp	r3, #0
 800498e:	d00c      	beq.n	80049aa <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004996:	2b00      	cmp	r3, #0
 8004998:	d007      	beq.n	80049aa <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80049a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f000 f9be 	bl	8004d26 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	f003 0320 	and.w	r3, r3, #32
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d00c      	beq.n	80049ce <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f003 0320 	and.w	r3, r3, #32
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d007      	beq.n	80049ce <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f06f 0220 	mvn.w	r2, #32
 80049c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f000 fd7b 	bl	80054c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049ce:	bf00      	nop
 80049d0:	3710      	adds	r7, #16
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
	...

080049d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b086      	sub	sp, #24
 80049dc:	af00      	add	r7, sp, #0
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	60b9      	str	r1, [r7, #8]
 80049e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049e4:	2300      	movs	r3, #0
 80049e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d101      	bne.n	80049f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80049f2:	2302      	movs	r3, #2
 80049f4:	e0ae      	b.n	8004b54 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2201      	movs	r2, #1
 80049fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2b0c      	cmp	r3, #12
 8004a02:	f200 809f 	bhi.w	8004b44 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004a06:	a201      	add	r2, pc, #4	; (adr r2, 8004a0c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a0c:	08004a41 	.word	0x08004a41
 8004a10:	08004b45 	.word	0x08004b45
 8004a14:	08004b45 	.word	0x08004b45
 8004a18:	08004b45 	.word	0x08004b45
 8004a1c:	08004a81 	.word	0x08004a81
 8004a20:	08004b45 	.word	0x08004b45
 8004a24:	08004b45 	.word	0x08004b45
 8004a28:	08004b45 	.word	0x08004b45
 8004a2c:	08004ac3 	.word	0x08004ac3
 8004a30:	08004b45 	.word	0x08004b45
 8004a34:	08004b45 	.word	0x08004b45
 8004a38:	08004b45 	.word	0x08004b45
 8004a3c:	08004b03 	.word	0x08004b03
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	68b9      	ldr	r1, [r7, #8]
 8004a46:	4618      	mov	r0, r3
 8004a48:	f000 fa24 	bl	8004e94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	699a      	ldr	r2, [r3, #24]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f042 0208 	orr.w	r2, r2, #8
 8004a5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	699a      	ldr	r2, [r3, #24]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f022 0204 	bic.w	r2, r2, #4
 8004a6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	6999      	ldr	r1, [r3, #24]
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	691a      	ldr	r2, [r3, #16]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	430a      	orrs	r2, r1
 8004a7c:	619a      	str	r2, [r3, #24]
      break;
 8004a7e:	e064      	b.n	8004b4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	68b9      	ldr	r1, [r7, #8]
 8004a86:	4618      	mov	r0, r3
 8004a88:	f000 fa74 	bl	8004f74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	699a      	ldr	r2, [r3, #24]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	699a      	ldr	r2, [r3, #24]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004aaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	6999      	ldr	r1, [r3, #24]
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	021a      	lsls	r2, r3, #8
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	430a      	orrs	r2, r1
 8004abe:	619a      	str	r2, [r3, #24]
      break;
 8004ac0:	e043      	b.n	8004b4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	68b9      	ldr	r1, [r7, #8]
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f000 fac9 	bl	8005060 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	69da      	ldr	r2, [r3, #28]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f042 0208 	orr.w	r2, r2, #8
 8004adc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	69da      	ldr	r2, [r3, #28]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f022 0204 	bic.w	r2, r2, #4
 8004aec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	69d9      	ldr	r1, [r3, #28]
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	691a      	ldr	r2, [r3, #16]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	430a      	orrs	r2, r1
 8004afe:	61da      	str	r2, [r3, #28]
      break;
 8004b00:	e023      	b.n	8004b4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68b9      	ldr	r1, [r7, #8]
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f000 fb1d 	bl	8005148 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	69da      	ldr	r2, [r3, #28]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	69da      	ldr	r2, [r3, #28]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	69d9      	ldr	r1, [r3, #28]
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	691b      	ldr	r3, [r3, #16]
 8004b38:	021a      	lsls	r2, r3, #8
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	430a      	orrs	r2, r1
 8004b40:	61da      	str	r2, [r3, #28]
      break;
 8004b42:	e002      	b.n	8004b4a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	75fb      	strb	r3, [r7, #23]
      break;
 8004b48:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b52:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3718      	adds	r7, #24
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b084      	sub	sp, #16
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b66:	2300      	movs	r3, #0
 8004b68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d101      	bne.n	8004b78 <HAL_TIM_ConfigClockSource+0x1c>
 8004b74:	2302      	movs	r3, #2
 8004b76:	e0b4      	b.n	8004ce2 <HAL_TIM_ConfigClockSource+0x186>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2202      	movs	r2, #2
 8004b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004b96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b9e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	68ba      	ldr	r2, [r7, #8]
 8004ba6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bb0:	d03e      	beq.n	8004c30 <HAL_TIM_ConfigClockSource+0xd4>
 8004bb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bb6:	f200 8087 	bhi.w	8004cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8004bba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bbe:	f000 8086 	beq.w	8004cce <HAL_TIM_ConfigClockSource+0x172>
 8004bc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bc6:	d87f      	bhi.n	8004cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8004bc8:	2b70      	cmp	r3, #112	; 0x70
 8004bca:	d01a      	beq.n	8004c02 <HAL_TIM_ConfigClockSource+0xa6>
 8004bcc:	2b70      	cmp	r3, #112	; 0x70
 8004bce:	d87b      	bhi.n	8004cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8004bd0:	2b60      	cmp	r3, #96	; 0x60
 8004bd2:	d050      	beq.n	8004c76 <HAL_TIM_ConfigClockSource+0x11a>
 8004bd4:	2b60      	cmp	r3, #96	; 0x60
 8004bd6:	d877      	bhi.n	8004cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8004bd8:	2b50      	cmp	r3, #80	; 0x50
 8004bda:	d03c      	beq.n	8004c56 <HAL_TIM_ConfigClockSource+0xfa>
 8004bdc:	2b50      	cmp	r3, #80	; 0x50
 8004bde:	d873      	bhi.n	8004cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8004be0:	2b40      	cmp	r3, #64	; 0x40
 8004be2:	d058      	beq.n	8004c96 <HAL_TIM_ConfigClockSource+0x13a>
 8004be4:	2b40      	cmp	r3, #64	; 0x40
 8004be6:	d86f      	bhi.n	8004cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8004be8:	2b30      	cmp	r3, #48	; 0x30
 8004bea:	d064      	beq.n	8004cb6 <HAL_TIM_ConfigClockSource+0x15a>
 8004bec:	2b30      	cmp	r3, #48	; 0x30
 8004bee:	d86b      	bhi.n	8004cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8004bf0:	2b20      	cmp	r3, #32
 8004bf2:	d060      	beq.n	8004cb6 <HAL_TIM_ConfigClockSource+0x15a>
 8004bf4:	2b20      	cmp	r3, #32
 8004bf6:	d867      	bhi.n	8004cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d05c      	beq.n	8004cb6 <HAL_TIM_ConfigClockSource+0x15a>
 8004bfc:	2b10      	cmp	r3, #16
 8004bfe:	d05a      	beq.n	8004cb6 <HAL_TIM_ConfigClockSource+0x15a>
 8004c00:	e062      	b.n	8004cc8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c12:	f000 fb69 	bl	80052e8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c24:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	68ba      	ldr	r2, [r7, #8]
 8004c2c:	609a      	str	r2, [r3, #8]
      break;
 8004c2e:	e04f      	b.n	8004cd0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c40:	f000 fb52 	bl	80052e8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	689a      	ldr	r2, [r3, #8]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c52:	609a      	str	r2, [r3, #8]
      break;
 8004c54:	e03c      	b.n	8004cd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c62:	461a      	mov	r2, r3
 8004c64:	f000 fac6 	bl	80051f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2150      	movs	r1, #80	; 0x50
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f000 fb1f 	bl	80052b2 <TIM_ITRx_SetConfig>
      break;
 8004c74:	e02c      	b.n	8004cd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c82:	461a      	mov	r2, r3
 8004c84:	f000 fae5 	bl	8005252 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	2160      	movs	r1, #96	; 0x60
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f000 fb0f 	bl	80052b2 <TIM_ITRx_SetConfig>
      break;
 8004c94:	e01c      	b.n	8004cd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	f000 faa6 	bl	80051f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2140      	movs	r1, #64	; 0x40
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f000 faff 	bl	80052b2 <TIM_ITRx_SetConfig>
      break;
 8004cb4:	e00c      	b.n	8004cd0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4619      	mov	r1, r3
 8004cc0:	4610      	mov	r0, r2
 8004cc2:	f000 faf6 	bl	80052b2 <TIM_ITRx_SetConfig>
      break;
 8004cc6:	e003      	b.n	8004cd0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	73fb      	strb	r3, [r7, #15]
      break;
 8004ccc:	e000      	b.n	8004cd0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004cce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3710      	adds	r7, #16
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}

08004cea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cea:	b480      	push	{r7}
 8004cec:	b083      	sub	sp, #12
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004cf2:	bf00      	nop
 8004cf4:	370c      	adds	r7, #12
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr

08004cfe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004cfe:	b480      	push	{r7}
 8004d00:	b083      	sub	sp, #12
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d06:	bf00      	nop
 8004d08:	370c      	adds	r7, #12
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr

08004d12 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d12:	b480      	push	{r7}
 8004d14:	b083      	sub	sp, #12
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d1a:	bf00      	nop
 8004d1c:	370c      	adds	r7, #12
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr

08004d26 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d26:	b480      	push	{r7}
 8004d28:	b083      	sub	sp, #12
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d2e:	bf00      	nop
 8004d30:	370c      	adds	r7, #12
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr
	...

08004d3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b085      	sub	sp, #20
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	4a46      	ldr	r2, [pc, #280]	; (8004e68 <TIM_Base_SetConfig+0x12c>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d013      	beq.n	8004d7c <TIM_Base_SetConfig+0x40>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d5a:	d00f      	beq.n	8004d7c <TIM_Base_SetConfig+0x40>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	4a43      	ldr	r2, [pc, #268]	; (8004e6c <TIM_Base_SetConfig+0x130>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d00b      	beq.n	8004d7c <TIM_Base_SetConfig+0x40>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	4a42      	ldr	r2, [pc, #264]	; (8004e70 <TIM_Base_SetConfig+0x134>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d007      	beq.n	8004d7c <TIM_Base_SetConfig+0x40>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	4a41      	ldr	r2, [pc, #260]	; (8004e74 <TIM_Base_SetConfig+0x138>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d003      	beq.n	8004d7c <TIM_Base_SetConfig+0x40>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	4a40      	ldr	r2, [pc, #256]	; (8004e78 <TIM_Base_SetConfig+0x13c>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d108      	bne.n	8004d8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	68fa      	ldr	r2, [r7, #12]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a35      	ldr	r2, [pc, #212]	; (8004e68 <TIM_Base_SetConfig+0x12c>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d02b      	beq.n	8004dee <TIM_Base_SetConfig+0xb2>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d9c:	d027      	beq.n	8004dee <TIM_Base_SetConfig+0xb2>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a32      	ldr	r2, [pc, #200]	; (8004e6c <TIM_Base_SetConfig+0x130>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d023      	beq.n	8004dee <TIM_Base_SetConfig+0xb2>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a31      	ldr	r2, [pc, #196]	; (8004e70 <TIM_Base_SetConfig+0x134>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d01f      	beq.n	8004dee <TIM_Base_SetConfig+0xb2>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a30      	ldr	r2, [pc, #192]	; (8004e74 <TIM_Base_SetConfig+0x138>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d01b      	beq.n	8004dee <TIM_Base_SetConfig+0xb2>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a2f      	ldr	r2, [pc, #188]	; (8004e78 <TIM_Base_SetConfig+0x13c>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d017      	beq.n	8004dee <TIM_Base_SetConfig+0xb2>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a2e      	ldr	r2, [pc, #184]	; (8004e7c <TIM_Base_SetConfig+0x140>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d013      	beq.n	8004dee <TIM_Base_SetConfig+0xb2>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a2d      	ldr	r2, [pc, #180]	; (8004e80 <TIM_Base_SetConfig+0x144>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d00f      	beq.n	8004dee <TIM_Base_SetConfig+0xb2>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a2c      	ldr	r2, [pc, #176]	; (8004e84 <TIM_Base_SetConfig+0x148>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d00b      	beq.n	8004dee <TIM_Base_SetConfig+0xb2>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4a2b      	ldr	r2, [pc, #172]	; (8004e88 <TIM_Base_SetConfig+0x14c>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d007      	beq.n	8004dee <TIM_Base_SetConfig+0xb2>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a2a      	ldr	r2, [pc, #168]	; (8004e8c <TIM_Base_SetConfig+0x150>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d003      	beq.n	8004dee <TIM_Base_SetConfig+0xb2>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a29      	ldr	r2, [pc, #164]	; (8004e90 <TIM_Base_SetConfig+0x154>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d108      	bne.n	8004e00 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004df4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	68fa      	ldr	r2, [r7, #12]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	695b      	ldr	r3, [r3, #20]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	68fa      	ldr	r2, [r7, #12]
 8004e12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	689a      	ldr	r2, [r3, #8]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	4a10      	ldr	r2, [pc, #64]	; (8004e68 <TIM_Base_SetConfig+0x12c>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d003      	beq.n	8004e34 <TIM_Base_SetConfig+0xf8>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4a12      	ldr	r2, [pc, #72]	; (8004e78 <TIM_Base_SetConfig+0x13c>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d103      	bne.n	8004e3c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	691a      	ldr	r2, [r3, #16]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	691b      	ldr	r3, [r3, #16]
 8004e46:	f003 0301 	and.w	r3, r3, #1
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d105      	bne.n	8004e5a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	f023 0201 	bic.w	r2, r3, #1
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	611a      	str	r2, [r3, #16]
  }
}
 8004e5a:	bf00      	nop
 8004e5c:	3714      	adds	r7, #20
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
 8004e66:	bf00      	nop
 8004e68:	40010000 	.word	0x40010000
 8004e6c:	40000400 	.word	0x40000400
 8004e70:	40000800 	.word	0x40000800
 8004e74:	40000c00 	.word	0x40000c00
 8004e78:	40010400 	.word	0x40010400
 8004e7c:	40014000 	.word	0x40014000
 8004e80:	40014400 	.word	0x40014400
 8004e84:	40014800 	.word	0x40014800
 8004e88:	40001800 	.word	0x40001800
 8004e8c:	40001c00 	.word	0x40001c00
 8004e90:	40002000 	.word	0x40002000

08004e94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b087      	sub	sp, #28
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6a1b      	ldr	r3, [r3, #32]
 8004ea2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6a1b      	ldr	r3, [r3, #32]
 8004ea8:	f023 0201 	bic.w	r2, r3, #1
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	699b      	ldr	r3, [r3, #24]
 8004eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ec2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f023 0303 	bic.w	r3, r3, #3
 8004eca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	68fa      	ldr	r2, [r7, #12]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	f023 0302 	bic.w	r3, r3, #2
 8004edc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	697a      	ldr	r2, [r7, #20]
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4a20      	ldr	r2, [pc, #128]	; (8004f6c <TIM_OC1_SetConfig+0xd8>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d003      	beq.n	8004ef8 <TIM_OC1_SetConfig+0x64>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4a1f      	ldr	r2, [pc, #124]	; (8004f70 <TIM_OC1_SetConfig+0xdc>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d10c      	bne.n	8004f12 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	f023 0308 	bic.w	r3, r3, #8
 8004efe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	697a      	ldr	r2, [r7, #20]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	f023 0304 	bic.w	r3, r3, #4
 8004f10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4a15      	ldr	r2, [pc, #84]	; (8004f6c <TIM_OC1_SetConfig+0xd8>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d003      	beq.n	8004f22 <TIM_OC1_SetConfig+0x8e>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4a14      	ldr	r2, [pc, #80]	; (8004f70 <TIM_OC1_SetConfig+0xdc>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d111      	bne.n	8004f46 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	695b      	ldr	r3, [r3, #20]
 8004f36:	693a      	ldr	r2, [r7, #16]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	699b      	ldr	r3, [r3, #24]
 8004f40:	693a      	ldr	r2, [r7, #16]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	693a      	ldr	r2, [r7, #16]
 8004f4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	68fa      	ldr	r2, [r7, #12]
 8004f50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	685a      	ldr	r2, [r3, #4]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	697a      	ldr	r2, [r7, #20]
 8004f5e:	621a      	str	r2, [r3, #32]
}
 8004f60:	bf00      	nop
 8004f62:	371c      	adds	r7, #28
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr
 8004f6c:	40010000 	.word	0x40010000
 8004f70:	40010400 	.word	0x40010400

08004f74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b087      	sub	sp, #28
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6a1b      	ldr	r3, [r3, #32]
 8004f82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a1b      	ldr	r3, [r3, #32]
 8004f88:	f023 0210 	bic.w	r2, r3, #16
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	699b      	ldr	r3, [r3, #24]
 8004f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004faa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	021b      	lsls	r3, r3, #8
 8004fb2:	68fa      	ldr	r2, [r7, #12]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	f023 0320 	bic.w	r3, r3, #32
 8004fbe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	011b      	lsls	r3, r3, #4
 8004fc6:	697a      	ldr	r2, [r7, #20]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	4a22      	ldr	r2, [pc, #136]	; (8005058 <TIM_OC2_SetConfig+0xe4>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d003      	beq.n	8004fdc <TIM_OC2_SetConfig+0x68>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	4a21      	ldr	r2, [pc, #132]	; (800505c <TIM_OC2_SetConfig+0xe8>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d10d      	bne.n	8004ff8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fe2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	011b      	lsls	r3, r3, #4
 8004fea:	697a      	ldr	r2, [r7, #20]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ff6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	4a17      	ldr	r2, [pc, #92]	; (8005058 <TIM_OC2_SetConfig+0xe4>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d003      	beq.n	8005008 <TIM_OC2_SetConfig+0x94>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4a16      	ldr	r2, [pc, #88]	; (800505c <TIM_OC2_SetConfig+0xe8>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d113      	bne.n	8005030 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800500e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005016:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	695b      	ldr	r3, [r3, #20]
 800501c:	009b      	lsls	r3, r3, #2
 800501e:	693a      	ldr	r2, [r7, #16]
 8005020:	4313      	orrs	r3, r2
 8005022:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	699b      	ldr	r3, [r3, #24]
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	693a      	ldr	r2, [r7, #16]
 800502c:	4313      	orrs	r3, r2
 800502e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	693a      	ldr	r2, [r7, #16]
 8005034:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	68fa      	ldr	r2, [r7, #12]
 800503a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	685a      	ldr	r2, [r3, #4]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	697a      	ldr	r2, [r7, #20]
 8005048:	621a      	str	r2, [r3, #32]
}
 800504a:	bf00      	nop
 800504c:	371c      	adds	r7, #28
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr
 8005056:	bf00      	nop
 8005058:	40010000 	.word	0x40010000
 800505c:	40010400 	.word	0x40010400

08005060 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005060:	b480      	push	{r7}
 8005062:	b087      	sub	sp, #28
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a1b      	ldr	r3, [r3, #32]
 800506e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6a1b      	ldr	r3, [r3, #32]
 8005074:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	69db      	ldr	r3, [r3, #28]
 8005086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800508e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f023 0303 	bic.w	r3, r3, #3
 8005096:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	68fa      	ldr	r2, [r7, #12]
 800509e:	4313      	orrs	r3, r2
 80050a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	021b      	lsls	r3, r3, #8
 80050b0:	697a      	ldr	r2, [r7, #20]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4a21      	ldr	r2, [pc, #132]	; (8005140 <TIM_OC3_SetConfig+0xe0>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d003      	beq.n	80050c6 <TIM_OC3_SetConfig+0x66>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4a20      	ldr	r2, [pc, #128]	; (8005144 <TIM_OC3_SetConfig+0xe4>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d10d      	bne.n	80050e2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	021b      	lsls	r3, r3, #8
 80050d4:	697a      	ldr	r2, [r7, #20]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a16      	ldr	r2, [pc, #88]	; (8005140 <TIM_OC3_SetConfig+0xe0>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d003      	beq.n	80050f2 <TIM_OC3_SetConfig+0x92>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a15      	ldr	r2, [pc, #84]	; (8005144 <TIM_OC3_SetConfig+0xe4>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d113      	bne.n	800511a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005100:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	695b      	ldr	r3, [r3, #20]
 8005106:	011b      	lsls	r3, r3, #4
 8005108:	693a      	ldr	r2, [r7, #16]
 800510a:	4313      	orrs	r3, r2
 800510c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	699b      	ldr	r3, [r3, #24]
 8005112:	011b      	lsls	r3, r3, #4
 8005114:	693a      	ldr	r2, [r7, #16]
 8005116:	4313      	orrs	r3, r2
 8005118:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	693a      	ldr	r2, [r7, #16]
 800511e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	68fa      	ldr	r2, [r7, #12]
 8005124:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	685a      	ldr	r2, [r3, #4]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	697a      	ldr	r2, [r7, #20]
 8005132:	621a      	str	r2, [r3, #32]
}
 8005134:	bf00      	nop
 8005136:	371c      	adds	r7, #28
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr
 8005140:	40010000 	.word	0x40010000
 8005144:	40010400 	.word	0x40010400

08005148 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005148:	b480      	push	{r7}
 800514a:	b087      	sub	sp, #28
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a1b      	ldr	r3, [r3, #32]
 8005156:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6a1b      	ldr	r3, [r3, #32]
 800515c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	69db      	ldr	r3, [r3, #28]
 800516e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005176:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800517e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	021b      	lsls	r3, r3, #8
 8005186:	68fa      	ldr	r2, [r7, #12]
 8005188:	4313      	orrs	r3, r2
 800518a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005192:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	031b      	lsls	r3, r3, #12
 800519a:	693a      	ldr	r2, [r7, #16]
 800519c:	4313      	orrs	r3, r2
 800519e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	4a12      	ldr	r2, [pc, #72]	; (80051ec <TIM_OC4_SetConfig+0xa4>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d003      	beq.n	80051b0 <TIM_OC4_SetConfig+0x68>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	4a11      	ldr	r2, [pc, #68]	; (80051f0 <TIM_OC4_SetConfig+0xa8>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d109      	bne.n	80051c4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	695b      	ldr	r3, [r3, #20]
 80051bc:	019b      	lsls	r3, r3, #6
 80051be:	697a      	ldr	r2, [r7, #20]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	697a      	ldr	r2, [r7, #20]
 80051c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	68fa      	ldr	r2, [r7, #12]
 80051ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	685a      	ldr	r2, [r3, #4]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	693a      	ldr	r2, [r7, #16]
 80051dc:	621a      	str	r2, [r3, #32]
}
 80051de:	bf00      	nop
 80051e0:	371c      	adds	r7, #28
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr
 80051ea:	bf00      	nop
 80051ec:	40010000 	.word	0x40010000
 80051f0:	40010400 	.word	0x40010400

080051f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b087      	sub	sp, #28
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	6a1b      	ldr	r3, [r3, #32]
 8005204:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6a1b      	ldr	r3, [r3, #32]
 800520a:	f023 0201 	bic.w	r2, r3, #1
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	699b      	ldr	r3, [r3, #24]
 8005216:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800521e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	011b      	lsls	r3, r3, #4
 8005224:	693a      	ldr	r2, [r7, #16]
 8005226:	4313      	orrs	r3, r2
 8005228:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	f023 030a 	bic.w	r3, r3, #10
 8005230:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005232:	697a      	ldr	r2, [r7, #20]
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	4313      	orrs	r3, r2
 8005238:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	693a      	ldr	r2, [r7, #16]
 800523e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	697a      	ldr	r2, [r7, #20]
 8005244:	621a      	str	r2, [r3, #32]
}
 8005246:	bf00      	nop
 8005248:	371c      	adds	r7, #28
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr

08005252 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005252:	b480      	push	{r7}
 8005254:	b087      	sub	sp, #28
 8005256:	af00      	add	r7, sp, #0
 8005258:	60f8      	str	r0, [r7, #12]
 800525a:	60b9      	str	r1, [r7, #8]
 800525c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6a1b      	ldr	r3, [r3, #32]
 8005262:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6a1b      	ldr	r3, [r3, #32]
 8005268:	f023 0210 	bic.w	r2, r3, #16
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	699b      	ldr	r3, [r3, #24]
 8005274:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800527c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	031b      	lsls	r3, r3, #12
 8005282:	693a      	ldr	r2, [r7, #16]
 8005284:	4313      	orrs	r3, r2
 8005286:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800528e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	011b      	lsls	r3, r3, #4
 8005294:	697a      	ldr	r2, [r7, #20]
 8005296:	4313      	orrs	r3, r2
 8005298:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	693a      	ldr	r2, [r7, #16]
 800529e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	697a      	ldr	r2, [r7, #20]
 80052a4:	621a      	str	r2, [r3, #32]
}
 80052a6:	bf00      	nop
 80052a8:	371c      	adds	r7, #28
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr

080052b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052b2:	b480      	push	{r7}
 80052b4:	b085      	sub	sp, #20
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
 80052ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052ca:	683a      	ldr	r2, [r7, #0]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	f043 0307 	orr.w	r3, r3, #7
 80052d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	68fa      	ldr	r2, [r7, #12]
 80052da:	609a      	str	r2, [r3, #8]
}
 80052dc:	bf00      	nop
 80052de:	3714      	adds	r7, #20
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b087      	sub	sp, #28
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	60f8      	str	r0, [r7, #12]
 80052f0:	60b9      	str	r1, [r7, #8]
 80052f2:	607a      	str	r2, [r7, #4]
 80052f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005302:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	021a      	lsls	r2, r3, #8
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	431a      	orrs	r2, r3
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	4313      	orrs	r3, r2
 8005310:	697a      	ldr	r2, [r7, #20]
 8005312:	4313      	orrs	r3, r2
 8005314:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	697a      	ldr	r2, [r7, #20]
 800531a:	609a      	str	r2, [r3, #8]
}
 800531c:	bf00      	nop
 800531e:	371c      	adds	r7, #28
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005328:	b480      	push	{r7}
 800532a:	b085      	sub	sp, #20
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005338:	2b01      	cmp	r3, #1
 800533a:	d101      	bne.n	8005340 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800533c:	2302      	movs	r3, #2
 800533e:	e05a      	b.n	80053f6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2202      	movs	r2, #2
 800534c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005366:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	4313      	orrs	r3, r2
 8005370:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a21      	ldr	r2, [pc, #132]	; (8005404 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d022      	beq.n	80053ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800538c:	d01d      	beq.n	80053ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a1d      	ldr	r2, [pc, #116]	; (8005408 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d018      	beq.n	80053ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a1b      	ldr	r2, [pc, #108]	; (800540c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d013      	beq.n	80053ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a1a      	ldr	r2, [pc, #104]	; (8005410 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d00e      	beq.n	80053ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a18      	ldr	r2, [pc, #96]	; (8005414 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d009      	beq.n	80053ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a17      	ldr	r2, [pc, #92]	; (8005418 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d004      	beq.n	80053ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a15      	ldr	r2, [pc, #84]	; (800541c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d10c      	bne.n	80053e4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	68ba      	ldr	r2, [r7, #8]
 80053d8:	4313      	orrs	r3, r2
 80053da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	68ba      	ldr	r2, [r7, #8]
 80053e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053f4:	2300      	movs	r3, #0
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3714      	adds	r7, #20
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr
 8005402:	bf00      	nop
 8005404:	40010000 	.word	0x40010000
 8005408:	40000400 	.word	0x40000400
 800540c:	40000800 	.word	0x40000800
 8005410:	40000c00 	.word	0x40000c00
 8005414:	40010400 	.word	0x40010400
 8005418:	40014000 	.word	0x40014000
 800541c:	40001800 	.word	0x40001800

08005420 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005420:	b480      	push	{r7}
 8005422:	b085      	sub	sp, #20
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800542a:	2300      	movs	r3, #0
 800542c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005434:	2b01      	cmp	r3, #1
 8005436:	d101      	bne.n	800543c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005438:	2302      	movs	r3, #2
 800543a:	e03d      	b.n	80054b8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	4313      	orrs	r3, r2
 8005450:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	4313      	orrs	r3, r2
 800545e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	4313      	orrs	r3, r2
 800546c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4313      	orrs	r3, r2
 800547a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	4313      	orrs	r3, r2
 8005488:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	695b      	ldr	r3, [r3, #20]
 8005494:	4313      	orrs	r3, r2
 8005496:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	69db      	ldr	r3, [r3, #28]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	68fa      	ldr	r2, [r7, #12]
 80054ac:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054b6:	2300      	movs	r3, #0
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3714      	adds	r7, #20
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr

080054c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054cc:	bf00      	nop
 80054ce:	370c      	adds	r7, #12
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr

080054d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054d8:	b480      	push	{r7}
 80054da:	b083      	sub	sp, #12
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054e0:	bf00      	nop
 80054e2:	370c      	adds	r7, #12
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80054ec:	b084      	sub	sp, #16
 80054ee:	b580      	push	{r7, lr}
 80054f0:	b084      	sub	sp, #16
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
 80054f6:	f107 001c 	add.w	r0, r7, #28
 80054fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80054fe:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8005502:	2b01      	cmp	r3, #1
 8005504:	d123      	bne.n	800554e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800550a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800551a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800552e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005532:	2b01      	cmp	r3, #1
 8005534:	d105      	bne.n	8005542 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f001 fae2 	bl	8006b0c <USB_CoreReset>
 8005548:	4603      	mov	r3, r0
 800554a:	73fb      	strb	r3, [r7, #15]
 800554c:	e01b      	b.n	8005586 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f001 fad6 	bl	8006b0c <USB_CoreReset>
 8005560:	4603      	mov	r3, r0
 8005562:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005564:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005568:	2b00      	cmp	r3, #0
 800556a:	d106      	bne.n	800557a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005570:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	639a      	str	r2, [r3, #56]	; 0x38
 8005578:	e005      	b.n	8005586 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800557e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005586:	7fbb      	ldrb	r3, [r7, #30]
 8005588:	2b01      	cmp	r3, #1
 800558a:	d10b      	bne.n	80055a4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	f043 0206 	orr.w	r2, r3, #6
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	f043 0220 	orr.w	r2, r3, #32
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80055a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3710      	adds	r7, #16
 80055aa:	46bd      	mov	sp, r7
 80055ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80055b0:	b004      	add	sp, #16
 80055b2:	4770      	bx	lr

080055b4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b087      	sub	sp, #28
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	60f8      	str	r0, [r7, #12]
 80055bc:	60b9      	str	r1, [r7, #8]
 80055be:	4613      	mov	r3, r2
 80055c0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80055c2:	79fb      	ldrb	r3, [r7, #7]
 80055c4:	2b02      	cmp	r3, #2
 80055c6:	d165      	bne.n	8005694 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	4a41      	ldr	r2, [pc, #260]	; (80056d0 <USB_SetTurnaroundTime+0x11c>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d906      	bls.n	80055de <USB_SetTurnaroundTime+0x2a>
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	4a40      	ldr	r2, [pc, #256]	; (80056d4 <USB_SetTurnaroundTime+0x120>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d202      	bcs.n	80055de <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80055d8:	230f      	movs	r3, #15
 80055da:	617b      	str	r3, [r7, #20]
 80055dc:	e062      	b.n	80056a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	4a3c      	ldr	r2, [pc, #240]	; (80056d4 <USB_SetTurnaroundTime+0x120>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d306      	bcc.n	80055f4 <USB_SetTurnaroundTime+0x40>
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	4a3b      	ldr	r2, [pc, #236]	; (80056d8 <USB_SetTurnaroundTime+0x124>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d202      	bcs.n	80055f4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80055ee:	230e      	movs	r3, #14
 80055f0:	617b      	str	r3, [r7, #20]
 80055f2:	e057      	b.n	80056a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	4a38      	ldr	r2, [pc, #224]	; (80056d8 <USB_SetTurnaroundTime+0x124>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d306      	bcc.n	800560a <USB_SetTurnaroundTime+0x56>
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	4a37      	ldr	r2, [pc, #220]	; (80056dc <USB_SetTurnaroundTime+0x128>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d202      	bcs.n	800560a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005604:	230d      	movs	r3, #13
 8005606:	617b      	str	r3, [r7, #20]
 8005608:	e04c      	b.n	80056a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	4a33      	ldr	r2, [pc, #204]	; (80056dc <USB_SetTurnaroundTime+0x128>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d306      	bcc.n	8005620 <USB_SetTurnaroundTime+0x6c>
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	4a32      	ldr	r2, [pc, #200]	; (80056e0 <USB_SetTurnaroundTime+0x12c>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d802      	bhi.n	8005620 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800561a:	230c      	movs	r3, #12
 800561c:	617b      	str	r3, [r7, #20]
 800561e:	e041      	b.n	80056a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	4a2f      	ldr	r2, [pc, #188]	; (80056e0 <USB_SetTurnaroundTime+0x12c>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d906      	bls.n	8005636 <USB_SetTurnaroundTime+0x82>
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	4a2e      	ldr	r2, [pc, #184]	; (80056e4 <USB_SetTurnaroundTime+0x130>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d802      	bhi.n	8005636 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005630:	230b      	movs	r3, #11
 8005632:	617b      	str	r3, [r7, #20]
 8005634:	e036      	b.n	80056a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	4a2a      	ldr	r2, [pc, #168]	; (80056e4 <USB_SetTurnaroundTime+0x130>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d906      	bls.n	800564c <USB_SetTurnaroundTime+0x98>
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	4a29      	ldr	r2, [pc, #164]	; (80056e8 <USB_SetTurnaroundTime+0x134>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d802      	bhi.n	800564c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005646:	230a      	movs	r3, #10
 8005648:	617b      	str	r3, [r7, #20]
 800564a:	e02b      	b.n	80056a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	4a26      	ldr	r2, [pc, #152]	; (80056e8 <USB_SetTurnaroundTime+0x134>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d906      	bls.n	8005662 <USB_SetTurnaroundTime+0xae>
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	4a25      	ldr	r2, [pc, #148]	; (80056ec <USB_SetTurnaroundTime+0x138>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d202      	bcs.n	8005662 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800565c:	2309      	movs	r3, #9
 800565e:	617b      	str	r3, [r7, #20]
 8005660:	e020      	b.n	80056a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	4a21      	ldr	r2, [pc, #132]	; (80056ec <USB_SetTurnaroundTime+0x138>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d306      	bcc.n	8005678 <USB_SetTurnaroundTime+0xc4>
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	4a20      	ldr	r2, [pc, #128]	; (80056f0 <USB_SetTurnaroundTime+0x13c>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d802      	bhi.n	8005678 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005672:	2308      	movs	r3, #8
 8005674:	617b      	str	r3, [r7, #20]
 8005676:	e015      	b.n	80056a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	4a1d      	ldr	r2, [pc, #116]	; (80056f0 <USB_SetTurnaroundTime+0x13c>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d906      	bls.n	800568e <USB_SetTurnaroundTime+0xda>
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	4a1c      	ldr	r2, [pc, #112]	; (80056f4 <USB_SetTurnaroundTime+0x140>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d202      	bcs.n	800568e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005688:	2307      	movs	r3, #7
 800568a:	617b      	str	r3, [r7, #20]
 800568c:	e00a      	b.n	80056a4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800568e:	2306      	movs	r3, #6
 8005690:	617b      	str	r3, [r7, #20]
 8005692:	e007      	b.n	80056a4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005694:	79fb      	ldrb	r3, [r7, #7]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d102      	bne.n	80056a0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800569a:	2309      	movs	r3, #9
 800569c:	617b      	str	r3, [r7, #20]
 800569e:	e001      	b.n	80056a4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80056a0:	2309      	movs	r3, #9
 80056a2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	68da      	ldr	r2, [r3, #12]
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	029b      	lsls	r3, r3, #10
 80056b8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80056bc:	431a      	orrs	r2, r3
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80056c2:	2300      	movs	r3, #0
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	371c      	adds	r7, #28
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr
 80056d0:	00d8acbf 	.word	0x00d8acbf
 80056d4:	00e4e1c0 	.word	0x00e4e1c0
 80056d8:	00f42400 	.word	0x00f42400
 80056dc:	01067380 	.word	0x01067380
 80056e0:	011a499f 	.word	0x011a499f
 80056e4:	01312cff 	.word	0x01312cff
 80056e8:	014ca43f 	.word	0x014ca43f
 80056ec:	016e3600 	.word	0x016e3600
 80056f0:	01a6ab1f 	.word	0x01a6ab1f
 80056f4:	01e84800 	.word	0x01e84800

080056f8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b083      	sub	sp, #12
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	f043 0201 	orr.w	r2, r3, #1
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800570c:	2300      	movs	r3, #0
}
 800570e:	4618      	mov	r0, r3
 8005710:	370c      	adds	r7, #12
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr

0800571a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800571a:	b480      	push	{r7}
 800571c:	b083      	sub	sp, #12
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	f023 0201 	bic.w	r2, r3, #1
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800572e:	2300      	movs	r3, #0
}
 8005730:	4618      	mov	r0, r3
 8005732:	370c      	adds	r7, #12
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr

0800573c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	460b      	mov	r3, r1
 8005746:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005748:	2300      	movs	r3, #0
 800574a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005758:	78fb      	ldrb	r3, [r7, #3]
 800575a:	2b01      	cmp	r3, #1
 800575c:	d115      	bne.n	800578a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800576a:	200a      	movs	r0, #10
 800576c:	f7fb fe98 	bl	80014a0 <HAL_Delay>
      ms += 10U;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	330a      	adds	r3, #10
 8005774:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f001 f939 	bl	80069ee <USB_GetMode>
 800577c:	4603      	mov	r3, r0
 800577e:	2b01      	cmp	r3, #1
 8005780:	d01e      	beq.n	80057c0 <USB_SetCurrentMode+0x84>
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2bc7      	cmp	r3, #199	; 0xc7
 8005786:	d9f0      	bls.n	800576a <USB_SetCurrentMode+0x2e>
 8005788:	e01a      	b.n	80057c0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800578a:	78fb      	ldrb	r3, [r7, #3]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d115      	bne.n	80057bc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800579c:	200a      	movs	r0, #10
 800579e:	f7fb fe7f 	bl	80014a0 <HAL_Delay>
      ms += 10U;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	330a      	adds	r3, #10
 80057a6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f001 f920 	bl	80069ee <USB_GetMode>
 80057ae:	4603      	mov	r3, r0
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d005      	beq.n	80057c0 <USB_SetCurrentMode+0x84>
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2bc7      	cmp	r3, #199	; 0xc7
 80057b8:	d9f0      	bls.n	800579c <USB_SetCurrentMode+0x60>
 80057ba:	e001      	b.n	80057c0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	e005      	b.n	80057cc <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2bc8      	cmp	r3, #200	; 0xc8
 80057c4:	d101      	bne.n	80057ca <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	e000      	b.n	80057cc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80057ca:	2300      	movs	r3, #0
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3710      	adds	r7, #16
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}

080057d4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80057d4:	b084      	sub	sp, #16
 80057d6:	b580      	push	{r7, lr}
 80057d8:	b086      	sub	sp, #24
 80057da:	af00      	add	r7, sp, #0
 80057dc:	6078      	str	r0, [r7, #4]
 80057de:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80057e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80057e6:	2300      	movs	r3, #0
 80057e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80057ee:	2300      	movs	r3, #0
 80057f0:	613b      	str	r3, [r7, #16]
 80057f2:	e009      	b.n	8005808 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	3340      	adds	r3, #64	; 0x40
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	4413      	add	r3, r2
 80057fe:	2200      	movs	r2, #0
 8005800:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	3301      	adds	r3, #1
 8005806:	613b      	str	r3, [r7, #16]
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	2b0e      	cmp	r3, #14
 800580c:	d9f2      	bls.n	80057f4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800580e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005812:	2b00      	cmp	r3, #0
 8005814:	d11c      	bne.n	8005850 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	68fa      	ldr	r2, [r7, #12]
 8005820:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005824:	f043 0302 	orr.w	r3, r3, #2
 8005828:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800582e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800583a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005846:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	639a      	str	r2, [r3, #56]	; 0x38
 800584e:	e00b      	b.n	8005868 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005854:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005860:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800586e:	461a      	mov	r2, r3
 8005870:	2300      	movs	r3, #0
 8005872:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005874:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005878:	2b01      	cmp	r3, #1
 800587a:	d10d      	bne.n	8005898 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800587c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005880:	2b00      	cmp	r3, #0
 8005882:	d104      	bne.n	800588e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005884:	2100      	movs	r1, #0
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f000 f968 	bl	8005b5c <USB_SetDevSpeed>
 800588c:	e008      	b.n	80058a0 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800588e:	2101      	movs	r1, #1
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f000 f963 	bl	8005b5c <USB_SetDevSpeed>
 8005896:	e003      	b.n	80058a0 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005898:	2103      	movs	r1, #3
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 f95e 	bl	8005b5c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80058a0:	2110      	movs	r1, #16
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f000 f8fa 	bl	8005a9c <USB_FlushTxFifo>
 80058a8:	4603      	mov	r3, r0
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d001      	beq.n	80058b2 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f000 f924 	bl	8005b00 <USB_FlushRxFifo>
 80058b8:	4603      	mov	r3, r0
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d001      	beq.n	80058c2 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058c8:	461a      	mov	r2, r3
 80058ca:	2300      	movs	r3, #0
 80058cc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058d4:	461a      	mov	r2, r3
 80058d6:	2300      	movs	r3, #0
 80058d8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058e0:	461a      	mov	r2, r3
 80058e2:	2300      	movs	r3, #0
 80058e4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058e6:	2300      	movs	r3, #0
 80058e8:	613b      	str	r3, [r7, #16]
 80058ea:	e043      	b.n	8005974 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	015a      	lsls	r2, r3, #5
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	4413      	add	r3, r2
 80058f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005902:	d118      	bne.n	8005936 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d10a      	bne.n	8005920 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	015a      	lsls	r2, r3, #5
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	4413      	add	r3, r2
 8005912:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005916:	461a      	mov	r2, r3
 8005918:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800591c:	6013      	str	r3, [r2, #0]
 800591e:	e013      	b.n	8005948 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	015a      	lsls	r2, r3, #5
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	4413      	add	r3, r2
 8005928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800592c:	461a      	mov	r2, r3
 800592e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005932:	6013      	str	r3, [r2, #0]
 8005934:	e008      	b.n	8005948 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	015a      	lsls	r2, r3, #5
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	4413      	add	r3, r2
 800593e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005942:	461a      	mov	r2, r3
 8005944:	2300      	movs	r3, #0
 8005946:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	015a      	lsls	r2, r3, #5
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	4413      	add	r3, r2
 8005950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005954:	461a      	mov	r2, r3
 8005956:	2300      	movs	r3, #0
 8005958:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	015a      	lsls	r2, r3, #5
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	4413      	add	r3, r2
 8005962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005966:	461a      	mov	r2, r3
 8005968:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800596c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	3301      	adds	r3, #1
 8005972:	613b      	str	r3, [r7, #16]
 8005974:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005978:	461a      	mov	r2, r3
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	4293      	cmp	r3, r2
 800597e:	d3b5      	bcc.n	80058ec <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005980:	2300      	movs	r3, #0
 8005982:	613b      	str	r3, [r7, #16]
 8005984:	e043      	b.n	8005a0e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	015a      	lsls	r2, r3, #5
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	4413      	add	r3, r2
 800598e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005998:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800599c:	d118      	bne.n	80059d0 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d10a      	bne.n	80059ba <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	015a      	lsls	r2, r3, #5
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	4413      	add	r3, r2
 80059ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059b0:	461a      	mov	r2, r3
 80059b2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80059b6:	6013      	str	r3, [r2, #0]
 80059b8:	e013      	b.n	80059e2 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	015a      	lsls	r2, r3, #5
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	4413      	add	r3, r2
 80059c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059c6:	461a      	mov	r2, r3
 80059c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80059cc:	6013      	str	r3, [r2, #0]
 80059ce:	e008      	b.n	80059e2 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	015a      	lsls	r2, r3, #5
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	4413      	add	r3, r2
 80059d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059dc:	461a      	mov	r2, r3
 80059de:	2300      	movs	r3, #0
 80059e0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	015a      	lsls	r2, r3, #5
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	4413      	add	r3, r2
 80059ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ee:	461a      	mov	r2, r3
 80059f0:	2300      	movs	r3, #0
 80059f2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	015a      	lsls	r2, r3, #5
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	4413      	add	r3, r2
 80059fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a00:	461a      	mov	r2, r3
 8005a02:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005a06:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	613b      	str	r3, [r7, #16]
 8005a0e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005a12:	461a      	mov	r2, r3
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d3b5      	bcc.n	8005986 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a20:	691b      	ldr	r3, [r3, #16]
 8005a22:	68fa      	ldr	r2, [r7, #12]
 8005a24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a2c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005a3a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005a3c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d105      	bne.n	8005a50 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	699b      	ldr	r3, [r3, #24]
 8005a48:	f043 0210 	orr.w	r2, r3, #16
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	699a      	ldr	r2, [r3, #24]
 8005a54:	4b10      	ldr	r3, [pc, #64]	; (8005a98 <USB_DevInit+0x2c4>)
 8005a56:	4313      	orrs	r3, r2
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005a5c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d005      	beq.n	8005a70 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	699b      	ldr	r3, [r3, #24]
 8005a68:	f043 0208 	orr.w	r2, r3, #8
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005a70:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d107      	bne.n	8005a88 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	699b      	ldr	r3, [r3, #24]
 8005a7c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a80:	f043 0304 	orr.w	r3, r3, #4
 8005a84:	687a      	ldr	r2, [r7, #4]
 8005a86:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005a88:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3718      	adds	r7, #24
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a94:	b004      	add	sp, #16
 8005a96:	4770      	bx	lr
 8005a98:	803c3800 	.word	0x803c3800

08005a9c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b085      	sub	sp, #20
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	3301      	adds	r3, #1
 8005aae:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005ab6:	d901      	bls.n	8005abc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005ab8:	2303      	movs	r3, #3
 8005aba:	e01b      	b.n	8005af4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	691b      	ldr	r3, [r3, #16]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	daf2      	bge.n	8005aaa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	019b      	lsls	r3, r3, #6
 8005acc:	f043 0220 	orr.w	r2, r3, #32
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	3301      	adds	r3, #1
 8005ad8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005ae0:	d901      	bls.n	8005ae6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005ae2:	2303      	movs	r3, #3
 8005ae4:	e006      	b.n	8005af4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	f003 0320 	and.w	r3, r3, #32
 8005aee:	2b20      	cmp	r3, #32
 8005af0:	d0f0      	beq.n	8005ad4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005af2:	2300      	movs	r3, #0
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3714      	adds	r7, #20
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr

08005b00 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b085      	sub	sp, #20
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	3301      	adds	r3, #1
 8005b10:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005b18:	d901      	bls.n	8005b1e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	e018      	b.n	8005b50 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	691b      	ldr	r3, [r3, #16]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	daf2      	bge.n	8005b0c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005b26:	2300      	movs	r3, #0
 8005b28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2210      	movs	r2, #16
 8005b2e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	3301      	adds	r3, #1
 8005b34:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005b3c:	d901      	bls.n	8005b42 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005b3e:	2303      	movs	r3, #3
 8005b40:	e006      	b.n	8005b50 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	691b      	ldr	r3, [r3, #16]
 8005b46:	f003 0310 	and.w	r3, r3, #16
 8005b4a:	2b10      	cmp	r3, #16
 8005b4c:	d0f0      	beq.n	8005b30 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005b4e:	2300      	movs	r3, #0
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3714      	adds	r7, #20
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr

08005b5c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b085      	sub	sp, #20
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	460b      	mov	r3, r1
 8005b66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	78fb      	ldrb	r3, [r7, #3]
 8005b76:	68f9      	ldr	r1, [r7, #12]
 8005b78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005b80:	2300      	movs	r3, #0
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3714      	adds	r7, #20
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr

08005b8e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005b8e:	b480      	push	{r7}
 8005b90:	b087      	sub	sp, #28
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	f003 0306 	and.w	r3, r3, #6
 8005ba6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d102      	bne.n	8005bb4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	75fb      	strb	r3, [r7, #23]
 8005bb2:	e00a      	b.n	8005bca <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2b02      	cmp	r3, #2
 8005bb8:	d002      	beq.n	8005bc0 <USB_GetDevSpeed+0x32>
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2b06      	cmp	r3, #6
 8005bbe:	d102      	bne.n	8005bc6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005bc0:	2302      	movs	r3, #2
 8005bc2:	75fb      	strb	r3, [r7, #23]
 8005bc4:	e001      	b.n	8005bca <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005bc6:	230f      	movs	r3, #15
 8005bc8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005bca:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	371c      	adds	r7, #28
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr

08005bd8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b085      	sub	sp, #20
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	785b      	ldrb	r3, [r3, #1]
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d13a      	bne.n	8005c6a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bfa:	69da      	ldr	r2, [r3, #28]
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	f003 030f 	and.w	r3, r3, #15
 8005c04:	2101      	movs	r1, #1
 8005c06:	fa01 f303 	lsl.w	r3, r1, r3
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	68f9      	ldr	r1, [r7, #12]
 8005c0e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c12:	4313      	orrs	r3, r2
 8005c14:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	015a      	lsls	r2, r3, #5
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	4413      	add	r3, r2
 8005c1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d155      	bne.n	8005cd8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	015a      	lsls	r2, r3, #5
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	4413      	add	r3, r2
 8005c34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	791b      	ldrb	r3, [r3, #4]
 8005c46:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005c48:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	059b      	lsls	r3, r3, #22
 8005c4e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005c50:	4313      	orrs	r3, r2
 8005c52:	68ba      	ldr	r2, [r7, #8]
 8005c54:	0151      	lsls	r1, r2, #5
 8005c56:	68fa      	ldr	r2, [r7, #12]
 8005c58:	440a      	add	r2, r1
 8005c5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c66:	6013      	str	r3, [r2, #0]
 8005c68:	e036      	b.n	8005cd8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c70:	69da      	ldr	r2, [r3, #28]
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	f003 030f 	and.w	r3, r3, #15
 8005c7a:	2101      	movs	r1, #1
 8005c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8005c80:	041b      	lsls	r3, r3, #16
 8005c82:	68f9      	ldr	r1, [r7, #12]
 8005c84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	015a      	lsls	r2, r3, #5
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	4413      	add	r3, r2
 8005c94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d11a      	bne.n	8005cd8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	015a      	lsls	r2, r3, #5
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	4413      	add	r3, r2
 8005caa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	791b      	ldrb	r3, [r3, #4]
 8005cbc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005cbe:	430b      	orrs	r3, r1
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	68ba      	ldr	r2, [r7, #8]
 8005cc4:	0151      	lsls	r1, r2, #5
 8005cc6:	68fa      	ldr	r2, [r7, #12]
 8005cc8:	440a      	add	r2, r1
 8005cca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cd6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005cd8:	2300      	movs	r3, #0
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3714      	adds	r7, #20
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce4:	4770      	bx	lr
	...

08005ce8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b085      	sub	sp, #20
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	781b      	ldrb	r3, [r3, #0]
 8005cfa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	785b      	ldrb	r3, [r3, #1]
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d161      	bne.n	8005dc8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	015a      	lsls	r2, r3, #5
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d1a:	d11f      	bne.n	8005d5c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	015a      	lsls	r2, r3, #5
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	4413      	add	r3, r2
 8005d24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	68ba      	ldr	r2, [r7, #8]
 8005d2c:	0151      	lsls	r1, r2, #5
 8005d2e:	68fa      	ldr	r2, [r7, #12]
 8005d30:	440a      	add	r2, r1
 8005d32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d36:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005d3a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	015a      	lsls	r2, r3, #5
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	4413      	add	r3, r2
 8005d44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	68ba      	ldr	r2, [r7, #8]
 8005d4c:	0151      	lsls	r1, r2, #5
 8005d4e:	68fa      	ldr	r2, [r7, #12]
 8005d50:	440a      	add	r2, r1
 8005d52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d56:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d5a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	f003 030f 	and.w	r3, r3, #15
 8005d6c:	2101      	movs	r1, #1
 8005d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	43db      	mvns	r3, r3
 8005d76:	68f9      	ldr	r1, [r7, #12]
 8005d78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d86:	69da      	ldr	r2, [r3, #28]
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	781b      	ldrb	r3, [r3, #0]
 8005d8c:	f003 030f 	and.w	r3, r3, #15
 8005d90:	2101      	movs	r1, #1
 8005d92:	fa01 f303 	lsl.w	r3, r1, r3
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	43db      	mvns	r3, r3
 8005d9a:	68f9      	ldr	r1, [r7, #12]
 8005d9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005da0:	4013      	ands	r3, r2
 8005da2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	015a      	lsls	r2, r3, #5
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	4413      	add	r3, r2
 8005dac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	0159      	lsls	r1, r3, #5
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	440b      	add	r3, r1
 8005dba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dbe:	4619      	mov	r1, r3
 8005dc0:	4b35      	ldr	r3, [pc, #212]	; (8005e98 <USB_DeactivateEndpoint+0x1b0>)
 8005dc2:	4013      	ands	r3, r2
 8005dc4:	600b      	str	r3, [r1, #0]
 8005dc6:	e060      	b.n	8005e8a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	015a      	lsls	r2, r3, #5
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	4413      	add	r3, r2
 8005dd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005dde:	d11f      	bne.n	8005e20 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	015a      	lsls	r2, r3, #5
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	4413      	add	r3, r2
 8005de8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	68ba      	ldr	r2, [r7, #8]
 8005df0:	0151      	lsls	r1, r2, #5
 8005df2:	68fa      	ldr	r2, [r7, #12]
 8005df4:	440a      	add	r2, r1
 8005df6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dfa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005dfe:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	015a      	lsls	r2, r3, #5
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	4413      	add	r3, r2
 8005e08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	68ba      	ldr	r2, [r7, #8]
 8005e10:	0151      	lsls	r1, r2, #5
 8005e12:	68fa      	ldr	r2, [r7, #12]
 8005e14:	440a      	add	r2, r1
 8005e16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e1a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e1e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	f003 030f 	and.w	r3, r3, #15
 8005e30:	2101      	movs	r1, #1
 8005e32:	fa01 f303 	lsl.w	r3, r1, r3
 8005e36:	041b      	lsls	r3, r3, #16
 8005e38:	43db      	mvns	r3, r3
 8005e3a:	68f9      	ldr	r1, [r7, #12]
 8005e3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e40:	4013      	ands	r3, r2
 8005e42:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e4a:	69da      	ldr	r2, [r3, #28]
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	f003 030f 	and.w	r3, r3, #15
 8005e54:	2101      	movs	r1, #1
 8005e56:	fa01 f303 	lsl.w	r3, r1, r3
 8005e5a:	041b      	lsls	r3, r3, #16
 8005e5c:	43db      	mvns	r3, r3
 8005e5e:	68f9      	ldr	r1, [r7, #12]
 8005e60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e64:	4013      	ands	r3, r2
 8005e66:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	015a      	lsls	r2, r3, #5
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	4413      	add	r3, r2
 8005e70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	0159      	lsls	r1, r3, #5
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	440b      	add	r3, r1
 8005e7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e82:	4619      	mov	r1, r3
 8005e84:	4b05      	ldr	r3, [pc, #20]	; (8005e9c <USB_DeactivateEndpoint+0x1b4>)
 8005e86:	4013      	ands	r3, r2
 8005e88:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005e8a:	2300      	movs	r3, #0
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3714      	adds	r7, #20
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr
 8005e98:	ec337800 	.word	0xec337800
 8005e9c:	eff37800 	.word	0xeff37800

08005ea0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b08a      	sub	sp, #40	; 0x28
 8005ea4:	af02      	add	r7, sp, #8
 8005ea6:	60f8      	str	r0, [r7, #12]
 8005ea8:	60b9      	str	r1, [r7, #8]
 8005eaa:	4613      	mov	r3, r2
 8005eac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	785b      	ldrb	r3, [r3, #1]
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	f040 817a 	bne.w	80061b6 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	691b      	ldr	r3, [r3, #16]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d132      	bne.n	8005f30 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005eca:	69bb      	ldr	r3, [r7, #24]
 8005ecc:	015a      	lsls	r2, r3, #5
 8005ece:	69fb      	ldr	r3, [r7, #28]
 8005ed0:	4413      	add	r3, r2
 8005ed2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ed6:	691b      	ldr	r3, [r3, #16]
 8005ed8:	69ba      	ldr	r2, [r7, #24]
 8005eda:	0151      	lsls	r1, r2, #5
 8005edc:	69fa      	ldr	r2, [r7, #28]
 8005ede:	440a      	add	r2, r1
 8005ee0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ee4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ee8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005eec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005eee:	69bb      	ldr	r3, [r7, #24]
 8005ef0:	015a      	lsls	r2, r3, #5
 8005ef2:	69fb      	ldr	r3, [r7, #28]
 8005ef4:	4413      	add	r3, r2
 8005ef6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005efa:	691b      	ldr	r3, [r3, #16]
 8005efc:	69ba      	ldr	r2, [r7, #24]
 8005efe:	0151      	lsls	r1, r2, #5
 8005f00:	69fa      	ldr	r2, [r7, #28]
 8005f02:	440a      	add	r2, r1
 8005f04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f08:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f0c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005f0e:	69bb      	ldr	r3, [r7, #24]
 8005f10:	015a      	lsls	r2, r3, #5
 8005f12:	69fb      	ldr	r3, [r7, #28]
 8005f14:	4413      	add	r3, r2
 8005f16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f1a:	691b      	ldr	r3, [r3, #16]
 8005f1c:	69ba      	ldr	r2, [r7, #24]
 8005f1e:	0151      	lsls	r1, r2, #5
 8005f20:	69fa      	ldr	r2, [r7, #28]
 8005f22:	440a      	add	r2, r1
 8005f24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f28:	0cdb      	lsrs	r3, r3, #19
 8005f2a:	04db      	lsls	r3, r3, #19
 8005f2c:	6113      	str	r3, [r2, #16]
 8005f2e:	e092      	b.n	8006056 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005f30:	69bb      	ldr	r3, [r7, #24]
 8005f32:	015a      	lsls	r2, r3, #5
 8005f34:	69fb      	ldr	r3, [r7, #28]
 8005f36:	4413      	add	r3, r2
 8005f38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f3c:	691b      	ldr	r3, [r3, #16]
 8005f3e:	69ba      	ldr	r2, [r7, #24]
 8005f40:	0151      	lsls	r1, r2, #5
 8005f42:	69fa      	ldr	r2, [r7, #28]
 8005f44:	440a      	add	r2, r1
 8005f46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f4a:	0cdb      	lsrs	r3, r3, #19
 8005f4c:	04db      	lsls	r3, r3, #19
 8005f4e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005f50:	69bb      	ldr	r3, [r7, #24]
 8005f52:	015a      	lsls	r2, r3, #5
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	4413      	add	r3, r2
 8005f58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f5c:	691b      	ldr	r3, [r3, #16]
 8005f5e:	69ba      	ldr	r2, [r7, #24]
 8005f60:	0151      	lsls	r1, r2, #5
 8005f62:	69fa      	ldr	r2, [r7, #28]
 8005f64:	440a      	add	r2, r1
 8005f66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f6a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f6e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f72:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005f74:	69bb      	ldr	r3, [r7, #24]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d11a      	bne.n	8005fb0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	691a      	ldr	r2, [r3, #16]
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d903      	bls.n	8005f8e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	689a      	ldr	r2, [r3, #8]
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005f8e:	69bb      	ldr	r3, [r7, #24]
 8005f90:	015a      	lsls	r2, r3, #5
 8005f92:	69fb      	ldr	r3, [r7, #28]
 8005f94:	4413      	add	r3, r2
 8005f96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f9a:	691b      	ldr	r3, [r3, #16]
 8005f9c:	69ba      	ldr	r2, [r7, #24]
 8005f9e:	0151      	lsls	r1, r2, #5
 8005fa0:	69fa      	ldr	r2, [r7, #28]
 8005fa2:	440a      	add	r2, r1
 8005fa4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fa8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005fac:	6113      	str	r3, [r2, #16]
 8005fae:	e01b      	b.n	8005fe8 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005fb0:	69bb      	ldr	r3, [r7, #24]
 8005fb2:	015a      	lsls	r2, r3, #5
 8005fb4:	69fb      	ldr	r3, [r7, #28]
 8005fb6:	4413      	add	r3, r2
 8005fb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fbc:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	6919      	ldr	r1, [r3, #16]
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	440b      	add	r3, r1
 8005fc8:	1e59      	subs	r1, r3, #1
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	fbb1 f3f3 	udiv	r3, r1, r3
 8005fd2:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005fd4:	4ba2      	ldr	r3, [pc, #648]	; (8006260 <USB_EPStartXfer+0x3c0>)
 8005fd6:	400b      	ands	r3, r1
 8005fd8:	69b9      	ldr	r1, [r7, #24]
 8005fda:	0148      	lsls	r0, r1, #5
 8005fdc:	69f9      	ldr	r1, [r7, #28]
 8005fde:	4401      	add	r1, r0
 8005fe0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005fe8:	69bb      	ldr	r3, [r7, #24]
 8005fea:	015a      	lsls	r2, r3, #5
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	4413      	add	r3, r2
 8005ff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ff4:	691a      	ldr	r2, [r3, #16]
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	691b      	ldr	r3, [r3, #16]
 8005ffa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ffe:	69b9      	ldr	r1, [r7, #24]
 8006000:	0148      	lsls	r0, r1, #5
 8006002:	69f9      	ldr	r1, [r7, #28]
 8006004:	4401      	add	r1, r0
 8006006:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800600a:	4313      	orrs	r3, r2
 800600c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	791b      	ldrb	r3, [r3, #4]
 8006012:	2b01      	cmp	r3, #1
 8006014:	d11f      	bne.n	8006056 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006016:	69bb      	ldr	r3, [r7, #24]
 8006018:	015a      	lsls	r2, r3, #5
 800601a:	69fb      	ldr	r3, [r7, #28]
 800601c:	4413      	add	r3, r2
 800601e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006022:	691b      	ldr	r3, [r3, #16]
 8006024:	69ba      	ldr	r2, [r7, #24]
 8006026:	0151      	lsls	r1, r2, #5
 8006028:	69fa      	ldr	r2, [r7, #28]
 800602a:	440a      	add	r2, r1
 800602c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006030:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006034:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006036:	69bb      	ldr	r3, [r7, #24]
 8006038:	015a      	lsls	r2, r3, #5
 800603a:	69fb      	ldr	r3, [r7, #28]
 800603c:	4413      	add	r3, r2
 800603e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006042:	691b      	ldr	r3, [r3, #16]
 8006044:	69ba      	ldr	r2, [r7, #24]
 8006046:	0151      	lsls	r1, r2, #5
 8006048:	69fa      	ldr	r2, [r7, #28]
 800604a:	440a      	add	r2, r1
 800604c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006050:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006054:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006056:	79fb      	ldrb	r3, [r7, #7]
 8006058:	2b01      	cmp	r3, #1
 800605a:	d14b      	bne.n	80060f4 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	69db      	ldr	r3, [r3, #28]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d009      	beq.n	8006078 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006064:	69bb      	ldr	r3, [r7, #24]
 8006066:	015a      	lsls	r2, r3, #5
 8006068:	69fb      	ldr	r3, [r7, #28]
 800606a:	4413      	add	r3, r2
 800606c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006070:	461a      	mov	r2, r3
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	69db      	ldr	r3, [r3, #28]
 8006076:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	791b      	ldrb	r3, [r3, #4]
 800607c:	2b01      	cmp	r3, #1
 800607e:	d128      	bne.n	80060d2 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006080:	69fb      	ldr	r3, [r7, #28]
 8006082:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800608c:	2b00      	cmp	r3, #0
 800608e:	d110      	bne.n	80060b2 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006090:	69bb      	ldr	r3, [r7, #24]
 8006092:	015a      	lsls	r2, r3, #5
 8006094:	69fb      	ldr	r3, [r7, #28]
 8006096:	4413      	add	r3, r2
 8006098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	69ba      	ldr	r2, [r7, #24]
 80060a0:	0151      	lsls	r1, r2, #5
 80060a2:	69fa      	ldr	r2, [r7, #28]
 80060a4:	440a      	add	r2, r1
 80060a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80060ae:	6013      	str	r3, [r2, #0]
 80060b0:	e00f      	b.n	80060d2 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80060b2:	69bb      	ldr	r3, [r7, #24]
 80060b4:	015a      	lsls	r2, r3, #5
 80060b6:	69fb      	ldr	r3, [r7, #28]
 80060b8:	4413      	add	r3, r2
 80060ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	69ba      	ldr	r2, [r7, #24]
 80060c2:	0151      	lsls	r1, r2, #5
 80060c4:	69fa      	ldr	r2, [r7, #28]
 80060c6:	440a      	add	r2, r1
 80060c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060d0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80060d2:	69bb      	ldr	r3, [r7, #24]
 80060d4:	015a      	lsls	r2, r3, #5
 80060d6:	69fb      	ldr	r3, [r7, #28]
 80060d8:	4413      	add	r3, r2
 80060da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	69ba      	ldr	r2, [r7, #24]
 80060e2:	0151      	lsls	r1, r2, #5
 80060e4:	69fa      	ldr	r2, [r7, #28]
 80060e6:	440a      	add	r2, r1
 80060e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060ec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80060f0:	6013      	str	r3, [r2, #0]
 80060f2:	e165      	b.n	80063c0 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80060f4:	69bb      	ldr	r3, [r7, #24]
 80060f6:	015a      	lsls	r2, r3, #5
 80060f8:	69fb      	ldr	r3, [r7, #28]
 80060fa:	4413      	add	r3, r2
 80060fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	69ba      	ldr	r2, [r7, #24]
 8006104:	0151      	lsls	r1, r2, #5
 8006106:	69fa      	ldr	r2, [r7, #28]
 8006108:	440a      	add	r2, r1
 800610a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800610e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006112:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	791b      	ldrb	r3, [r3, #4]
 8006118:	2b01      	cmp	r3, #1
 800611a:	d015      	beq.n	8006148 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	691b      	ldr	r3, [r3, #16]
 8006120:	2b00      	cmp	r3, #0
 8006122:	f000 814d 	beq.w	80063c0 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006126:	69fb      	ldr	r3, [r7, #28]
 8006128:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800612c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	781b      	ldrb	r3, [r3, #0]
 8006132:	f003 030f 	and.w	r3, r3, #15
 8006136:	2101      	movs	r1, #1
 8006138:	fa01 f303 	lsl.w	r3, r1, r3
 800613c:	69f9      	ldr	r1, [r7, #28]
 800613e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006142:	4313      	orrs	r3, r2
 8006144:	634b      	str	r3, [r1, #52]	; 0x34
 8006146:	e13b      	b.n	80063c0 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006148:	69fb      	ldr	r3, [r7, #28]
 800614a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006154:	2b00      	cmp	r3, #0
 8006156:	d110      	bne.n	800617a <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006158:	69bb      	ldr	r3, [r7, #24]
 800615a:	015a      	lsls	r2, r3, #5
 800615c:	69fb      	ldr	r3, [r7, #28]
 800615e:	4413      	add	r3, r2
 8006160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	69ba      	ldr	r2, [r7, #24]
 8006168:	0151      	lsls	r1, r2, #5
 800616a:	69fa      	ldr	r2, [r7, #28]
 800616c:	440a      	add	r2, r1
 800616e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006172:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006176:	6013      	str	r3, [r2, #0]
 8006178:	e00f      	b.n	800619a <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800617a:	69bb      	ldr	r3, [r7, #24]
 800617c:	015a      	lsls	r2, r3, #5
 800617e:	69fb      	ldr	r3, [r7, #28]
 8006180:	4413      	add	r3, r2
 8006182:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	69ba      	ldr	r2, [r7, #24]
 800618a:	0151      	lsls	r1, r2, #5
 800618c:	69fa      	ldr	r2, [r7, #28]
 800618e:	440a      	add	r2, r1
 8006190:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006194:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006198:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	68d9      	ldr	r1, [r3, #12]
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	781a      	ldrb	r2, [r3, #0]
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	691b      	ldr	r3, [r3, #16]
 80061a6:	b298      	uxth	r0, r3
 80061a8:	79fb      	ldrb	r3, [r7, #7]
 80061aa:	9300      	str	r3, [sp, #0]
 80061ac:	4603      	mov	r3, r0
 80061ae:	68f8      	ldr	r0, [r7, #12]
 80061b0:	f000 f9b8 	bl	8006524 <USB_WritePacket>
 80061b4:	e104      	b.n	80063c0 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80061b6:	69bb      	ldr	r3, [r7, #24]
 80061b8:	015a      	lsls	r2, r3, #5
 80061ba:	69fb      	ldr	r3, [r7, #28]
 80061bc:	4413      	add	r3, r2
 80061be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061c2:	691b      	ldr	r3, [r3, #16]
 80061c4:	69ba      	ldr	r2, [r7, #24]
 80061c6:	0151      	lsls	r1, r2, #5
 80061c8:	69fa      	ldr	r2, [r7, #28]
 80061ca:	440a      	add	r2, r1
 80061cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061d0:	0cdb      	lsrs	r3, r3, #19
 80061d2:	04db      	lsls	r3, r3, #19
 80061d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80061d6:	69bb      	ldr	r3, [r7, #24]
 80061d8:	015a      	lsls	r2, r3, #5
 80061da:	69fb      	ldr	r3, [r7, #28]
 80061dc:	4413      	add	r3, r2
 80061de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061e2:	691b      	ldr	r3, [r3, #16]
 80061e4:	69ba      	ldr	r2, [r7, #24]
 80061e6:	0151      	lsls	r1, r2, #5
 80061e8:	69fa      	ldr	r2, [r7, #28]
 80061ea:	440a      	add	r2, r1
 80061ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061f0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80061f4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80061f8:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80061fa:	69bb      	ldr	r3, [r7, #24]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d131      	bne.n	8006264 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	691b      	ldr	r3, [r3, #16]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d003      	beq.n	8006210 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	689a      	ldr	r2, [r3, #8]
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	689a      	ldr	r2, [r3, #8]
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006218:	69bb      	ldr	r3, [r7, #24]
 800621a:	015a      	lsls	r2, r3, #5
 800621c:	69fb      	ldr	r3, [r7, #28]
 800621e:	4413      	add	r3, r2
 8006220:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006224:	691a      	ldr	r2, [r3, #16]
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	6a1b      	ldr	r3, [r3, #32]
 800622a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800622e:	69b9      	ldr	r1, [r7, #24]
 8006230:	0148      	lsls	r0, r1, #5
 8006232:	69f9      	ldr	r1, [r7, #28]
 8006234:	4401      	add	r1, r0
 8006236:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800623a:	4313      	orrs	r3, r2
 800623c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800623e:	69bb      	ldr	r3, [r7, #24]
 8006240:	015a      	lsls	r2, r3, #5
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	4413      	add	r3, r2
 8006246:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800624a:	691b      	ldr	r3, [r3, #16]
 800624c:	69ba      	ldr	r2, [r7, #24]
 800624e:	0151      	lsls	r1, r2, #5
 8006250:	69fa      	ldr	r2, [r7, #28]
 8006252:	440a      	add	r2, r1
 8006254:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006258:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800625c:	6113      	str	r3, [r2, #16]
 800625e:	e061      	b.n	8006324 <USB_EPStartXfer+0x484>
 8006260:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	691b      	ldr	r3, [r3, #16]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d123      	bne.n	80062b4 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800626c:	69bb      	ldr	r3, [r7, #24]
 800626e:	015a      	lsls	r2, r3, #5
 8006270:	69fb      	ldr	r3, [r7, #28]
 8006272:	4413      	add	r3, r2
 8006274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006278:	691a      	ldr	r2, [r3, #16]
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006282:	69b9      	ldr	r1, [r7, #24]
 8006284:	0148      	lsls	r0, r1, #5
 8006286:	69f9      	ldr	r1, [r7, #28]
 8006288:	4401      	add	r1, r0
 800628a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800628e:	4313      	orrs	r3, r2
 8006290:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006292:	69bb      	ldr	r3, [r7, #24]
 8006294:	015a      	lsls	r2, r3, #5
 8006296:	69fb      	ldr	r3, [r7, #28]
 8006298:	4413      	add	r3, r2
 800629a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800629e:	691b      	ldr	r3, [r3, #16]
 80062a0:	69ba      	ldr	r2, [r7, #24]
 80062a2:	0151      	lsls	r1, r2, #5
 80062a4:	69fa      	ldr	r2, [r7, #28]
 80062a6:	440a      	add	r2, r1
 80062a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80062b0:	6113      	str	r3, [r2, #16]
 80062b2:	e037      	b.n	8006324 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	691a      	ldr	r2, [r3, #16]
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	4413      	add	r3, r2
 80062be:	1e5a      	subs	r2, r3, #1
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80062c8:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	8afa      	ldrh	r2, [r7, #22]
 80062d0:	fb03 f202 	mul.w	r2, r3, r2
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80062d8:	69bb      	ldr	r3, [r7, #24]
 80062da:	015a      	lsls	r2, r3, #5
 80062dc:	69fb      	ldr	r3, [r7, #28]
 80062de:	4413      	add	r3, r2
 80062e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062e4:	691a      	ldr	r2, [r3, #16]
 80062e6:	8afb      	ldrh	r3, [r7, #22]
 80062e8:	04d9      	lsls	r1, r3, #19
 80062ea:	4b38      	ldr	r3, [pc, #224]	; (80063cc <USB_EPStartXfer+0x52c>)
 80062ec:	400b      	ands	r3, r1
 80062ee:	69b9      	ldr	r1, [r7, #24]
 80062f0:	0148      	lsls	r0, r1, #5
 80062f2:	69f9      	ldr	r1, [r7, #28]
 80062f4:	4401      	add	r1, r0
 80062f6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80062fa:	4313      	orrs	r3, r2
 80062fc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80062fe:	69bb      	ldr	r3, [r7, #24]
 8006300:	015a      	lsls	r2, r3, #5
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	4413      	add	r3, r2
 8006306:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800630a:	691a      	ldr	r2, [r3, #16]
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	6a1b      	ldr	r3, [r3, #32]
 8006310:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006314:	69b9      	ldr	r1, [r7, #24]
 8006316:	0148      	lsls	r0, r1, #5
 8006318:	69f9      	ldr	r1, [r7, #28]
 800631a:	4401      	add	r1, r0
 800631c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006320:	4313      	orrs	r3, r2
 8006322:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006324:	79fb      	ldrb	r3, [r7, #7]
 8006326:	2b01      	cmp	r3, #1
 8006328:	d10d      	bne.n	8006346 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	68db      	ldr	r3, [r3, #12]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d009      	beq.n	8006346 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	68d9      	ldr	r1, [r3, #12]
 8006336:	69bb      	ldr	r3, [r7, #24]
 8006338:	015a      	lsls	r2, r3, #5
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	4413      	add	r3, r2
 800633e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006342:	460a      	mov	r2, r1
 8006344:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	791b      	ldrb	r3, [r3, #4]
 800634a:	2b01      	cmp	r3, #1
 800634c:	d128      	bne.n	80063a0 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800634e:	69fb      	ldr	r3, [r7, #28]
 8006350:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800635a:	2b00      	cmp	r3, #0
 800635c:	d110      	bne.n	8006380 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800635e:	69bb      	ldr	r3, [r7, #24]
 8006360:	015a      	lsls	r2, r3, #5
 8006362:	69fb      	ldr	r3, [r7, #28]
 8006364:	4413      	add	r3, r2
 8006366:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	69ba      	ldr	r2, [r7, #24]
 800636e:	0151      	lsls	r1, r2, #5
 8006370:	69fa      	ldr	r2, [r7, #28]
 8006372:	440a      	add	r2, r1
 8006374:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006378:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800637c:	6013      	str	r3, [r2, #0]
 800637e:	e00f      	b.n	80063a0 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006380:	69bb      	ldr	r3, [r7, #24]
 8006382:	015a      	lsls	r2, r3, #5
 8006384:	69fb      	ldr	r3, [r7, #28]
 8006386:	4413      	add	r3, r2
 8006388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	69ba      	ldr	r2, [r7, #24]
 8006390:	0151      	lsls	r1, r2, #5
 8006392:	69fa      	ldr	r2, [r7, #28]
 8006394:	440a      	add	r2, r1
 8006396:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800639a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800639e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80063a0:	69bb      	ldr	r3, [r7, #24]
 80063a2:	015a      	lsls	r2, r3, #5
 80063a4:	69fb      	ldr	r3, [r7, #28]
 80063a6:	4413      	add	r3, r2
 80063a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	69ba      	ldr	r2, [r7, #24]
 80063b0:	0151      	lsls	r1, r2, #5
 80063b2:	69fa      	ldr	r2, [r7, #28]
 80063b4:	440a      	add	r2, r1
 80063b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063ba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80063be:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80063c0:	2300      	movs	r3, #0
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3720      	adds	r7, #32
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}
 80063ca:	bf00      	nop
 80063cc:	1ff80000 	.word	0x1ff80000

080063d0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b087      	sub	sp, #28
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80063da:	2300      	movs	r3, #0
 80063dc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80063de:	2300      	movs	r3, #0
 80063e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	785b      	ldrb	r3, [r3, #1]
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d14a      	bne.n	8006484 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	015a      	lsls	r2, r3, #5
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	4413      	add	r3, r2
 80063f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006402:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006406:	f040 8086 	bne.w	8006516 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	781b      	ldrb	r3, [r3, #0]
 800640e:	015a      	lsls	r2, r3, #5
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	4413      	add	r3, r2
 8006414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	683a      	ldr	r2, [r7, #0]
 800641c:	7812      	ldrb	r2, [r2, #0]
 800641e:	0151      	lsls	r1, r2, #5
 8006420:	693a      	ldr	r2, [r7, #16]
 8006422:	440a      	add	r2, r1
 8006424:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006428:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800642c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	781b      	ldrb	r3, [r3, #0]
 8006432:	015a      	lsls	r2, r3, #5
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	4413      	add	r3, r2
 8006438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	683a      	ldr	r2, [r7, #0]
 8006440:	7812      	ldrb	r2, [r2, #0]
 8006442:	0151      	lsls	r1, r2, #5
 8006444:	693a      	ldr	r2, [r7, #16]
 8006446:	440a      	add	r2, r1
 8006448:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800644c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006450:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	3301      	adds	r3, #1
 8006456:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f242 7210 	movw	r2, #10000	; 0x2710
 800645e:	4293      	cmp	r3, r2
 8006460:	d902      	bls.n	8006468 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	75fb      	strb	r3, [r7, #23]
          break;
 8006466:	e056      	b.n	8006516 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	015a      	lsls	r2, r3, #5
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	4413      	add	r3, r2
 8006472:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800647c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006480:	d0e7      	beq.n	8006452 <USB_EPStopXfer+0x82>
 8006482:	e048      	b.n	8006516 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	015a      	lsls	r2, r3, #5
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	4413      	add	r3, r2
 800648e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006498:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800649c:	d13b      	bne.n	8006516 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	015a      	lsls	r2, r3, #5
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	4413      	add	r3, r2
 80064a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	683a      	ldr	r2, [r7, #0]
 80064b0:	7812      	ldrb	r2, [r2, #0]
 80064b2:	0151      	lsls	r1, r2, #5
 80064b4:	693a      	ldr	r2, [r7, #16]
 80064b6:	440a      	add	r2, r1
 80064b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064bc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80064c0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	015a      	lsls	r2, r3, #5
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	4413      	add	r3, r2
 80064cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	683a      	ldr	r2, [r7, #0]
 80064d4:	7812      	ldrb	r2, [r2, #0]
 80064d6:	0151      	lsls	r1, r2, #5
 80064d8:	693a      	ldr	r2, [r7, #16]
 80064da:	440a      	add	r2, r1
 80064dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80064e4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	3301      	adds	r3, #1
 80064ea:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f242 7210 	movw	r2, #10000	; 0x2710
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d902      	bls.n	80064fc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	75fb      	strb	r3, [r7, #23]
          break;
 80064fa:	e00c      	b.n	8006516 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	781b      	ldrb	r3, [r3, #0]
 8006500:	015a      	lsls	r2, r3, #5
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	4413      	add	r3, r2
 8006506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006510:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006514:	d0e7      	beq.n	80064e6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006516:	7dfb      	ldrb	r3, [r7, #23]
}
 8006518:	4618      	mov	r0, r3
 800651a:	371c      	adds	r7, #28
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr

08006524 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006524:	b480      	push	{r7}
 8006526:	b089      	sub	sp, #36	; 0x24
 8006528:	af00      	add	r7, sp, #0
 800652a:	60f8      	str	r0, [r7, #12]
 800652c:	60b9      	str	r1, [r7, #8]
 800652e:	4611      	mov	r1, r2
 8006530:	461a      	mov	r2, r3
 8006532:	460b      	mov	r3, r1
 8006534:	71fb      	strb	r3, [r7, #7]
 8006536:	4613      	mov	r3, r2
 8006538:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006542:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006546:	2b00      	cmp	r3, #0
 8006548:	d123      	bne.n	8006592 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800654a:	88bb      	ldrh	r3, [r7, #4]
 800654c:	3303      	adds	r3, #3
 800654e:	089b      	lsrs	r3, r3, #2
 8006550:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006552:	2300      	movs	r3, #0
 8006554:	61bb      	str	r3, [r7, #24]
 8006556:	e018      	b.n	800658a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006558:	79fb      	ldrb	r3, [r7, #7]
 800655a:	031a      	lsls	r2, r3, #12
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	4413      	add	r3, r2
 8006560:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006564:	461a      	mov	r2, r3
 8006566:	69fb      	ldr	r3, [r7, #28]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800656c:	69fb      	ldr	r3, [r7, #28]
 800656e:	3301      	adds	r3, #1
 8006570:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006572:	69fb      	ldr	r3, [r7, #28]
 8006574:	3301      	adds	r3, #1
 8006576:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006578:	69fb      	ldr	r3, [r7, #28]
 800657a:	3301      	adds	r3, #1
 800657c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800657e:	69fb      	ldr	r3, [r7, #28]
 8006580:	3301      	adds	r3, #1
 8006582:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006584:	69bb      	ldr	r3, [r7, #24]
 8006586:	3301      	adds	r3, #1
 8006588:	61bb      	str	r3, [r7, #24]
 800658a:	69ba      	ldr	r2, [r7, #24]
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	429a      	cmp	r2, r3
 8006590:	d3e2      	bcc.n	8006558 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006592:	2300      	movs	r3, #0
}
 8006594:	4618      	mov	r0, r3
 8006596:	3724      	adds	r7, #36	; 0x24
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr

080065a0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b08b      	sub	sp, #44	; 0x2c
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	60f8      	str	r0, [r7, #12]
 80065a8:	60b9      	str	r1, [r7, #8]
 80065aa:	4613      	mov	r3, r2
 80065ac:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80065b6:	88fb      	ldrh	r3, [r7, #6]
 80065b8:	089b      	lsrs	r3, r3, #2
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80065be:	88fb      	ldrh	r3, [r7, #6]
 80065c0:	f003 0303 	and.w	r3, r3, #3
 80065c4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80065c6:	2300      	movs	r3, #0
 80065c8:	623b      	str	r3, [r7, #32]
 80065ca:	e014      	b.n	80065f6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80065cc:	69bb      	ldr	r3, [r7, #24]
 80065ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065d2:	681a      	ldr	r2, [r3, #0]
 80065d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d6:	601a      	str	r2, [r3, #0]
    pDest++;
 80065d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065da:	3301      	adds	r3, #1
 80065dc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80065de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e0:	3301      	adds	r3, #1
 80065e2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80065e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e6:	3301      	adds	r3, #1
 80065e8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80065ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ec:	3301      	adds	r3, #1
 80065ee:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80065f0:	6a3b      	ldr	r3, [r7, #32]
 80065f2:	3301      	adds	r3, #1
 80065f4:	623b      	str	r3, [r7, #32]
 80065f6:	6a3a      	ldr	r2, [r7, #32]
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d3e6      	bcc.n	80065cc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80065fe:	8bfb      	ldrh	r3, [r7, #30]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d01e      	beq.n	8006642 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006604:	2300      	movs	r3, #0
 8006606:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006608:	69bb      	ldr	r3, [r7, #24]
 800660a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800660e:	461a      	mov	r2, r3
 8006610:	f107 0310 	add.w	r3, r7, #16
 8006614:	6812      	ldr	r2, [r2, #0]
 8006616:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006618:	693a      	ldr	r2, [r7, #16]
 800661a:	6a3b      	ldr	r3, [r7, #32]
 800661c:	b2db      	uxtb	r3, r3
 800661e:	00db      	lsls	r3, r3, #3
 8006620:	fa22 f303 	lsr.w	r3, r2, r3
 8006624:	b2da      	uxtb	r2, r3
 8006626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006628:	701a      	strb	r2, [r3, #0]
      i++;
 800662a:	6a3b      	ldr	r3, [r7, #32]
 800662c:	3301      	adds	r3, #1
 800662e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006632:	3301      	adds	r3, #1
 8006634:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006636:	8bfb      	ldrh	r3, [r7, #30]
 8006638:	3b01      	subs	r3, #1
 800663a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800663c:	8bfb      	ldrh	r3, [r7, #30]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d1ea      	bne.n	8006618 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006644:	4618      	mov	r0, r3
 8006646:	372c      	adds	r7, #44	; 0x2c
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr

08006650 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006650:	b480      	push	{r7}
 8006652:	b085      	sub	sp, #20
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
 8006658:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	781b      	ldrb	r3, [r3, #0]
 8006662:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	785b      	ldrb	r3, [r3, #1]
 8006668:	2b01      	cmp	r3, #1
 800666a:	d12c      	bne.n	80066c6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	015a      	lsls	r2, r3, #5
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	4413      	add	r3, r2
 8006674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	2b00      	cmp	r3, #0
 800667c:	db12      	blt.n	80066a4 <USB_EPSetStall+0x54>
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d00f      	beq.n	80066a4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	015a      	lsls	r2, r3, #5
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	4413      	add	r3, r2
 800668c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	68ba      	ldr	r2, [r7, #8]
 8006694:	0151      	lsls	r1, r2, #5
 8006696:	68fa      	ldr	r2, [r7, #12]
 8006698:	440a      	add	r2, r1
 800669a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800669e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80066a2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	015a      	lsls	r2, r3, #5
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	4413      	add	r3, r2
 80066ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	68ba      	ldr	r2, [r7, #8]
 80066b4:	0151      	lsls	r1, r2, #5
 80066b6:	68fa      	ldr	r2, [r7, #12]
 80066b8:	440a      	add	r2, r1
 80066ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80066c2:	6013      	str	r3, [r2, #0]
 80066c4:	e02b      	b.n	800671e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	015a      	lsls	r2, r3, #5
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	4413      	add	r3, r2
 80066ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	db12      	blt.n	80066fe <USB_EPSetStall+0xae>
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d00f      	beq.n	80066fe <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	015a      	lsls	r2, r3, #5
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	4413      	add	r3, r2
 80066e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	68ba      	ldr	r2, [r7, #8]
 80066ee:	0151      	lsls	r1, r2, #5
 80066f0:	68fa      	ldr	r2, [r7, #12]
 80066f2:	440a      	add	r2, r1
 80066f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066f8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80066fc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	015a      	lsls	r2, r3, #5
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	4413      	add	r3, r2
 8006706:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	68ba      	ldr	r2, [r7, #8]
 800670e:	0151      	lsls	r1, r2, #5
 8006710:	68fa      	ldr	r2, [r7, #12]
 8006712:	440a      	add	r2, r1
 8006714:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006718:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800671c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800671e:	2300      	movs	r3, #0
}
 8006720:	4618      	mov	r0, r3
 8006722:	3714      	adds	r7, #20
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr

0800672c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800672c:	b480      	push	{r7}
 800672e:	b085      	sub	sp, #20
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	781b      	ldrb	r3, [r3, #0]
 800673e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	785b      	ldrb	r3, [r3, #1]
 8006744:	2b01      	cmp	r3, #1
 8006746:	d128      	bne.n	800679a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	015a      	lsls	r2, r3, #5
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	4413      	add	r3, r2
 8006750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	68ba      	ldr	r2, [r7, #8]
 8006758:	0151      	lsls	r1, r2, #5
 800675a:	68fa      	ldr	r2, [r7, #12]
 800675c:	440a      	add	r2, r1
 800675e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006762:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006766:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	791b      	ldrb	r3, [r3, #4]
 800676c:	2b03      	cmp	r3, #3
 800676e:	d003      	beq.n	8006778 <USB_EPClearStall+0x4c>
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	791b      	ldrb	r3, [r3, #4]
 8006774:	2b02      	cmp	r3, #2
 8006776:	d138      	bne.n	80067ea <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	015a      	lsls	r2, r3, #5
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	4413      	add	r3, r2
 8006780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	68ba      	ldr	r2, [r7, #8]
 8006788:	0151      	lsls	r1, r2, #5
 800678a:	68fa      	ldr	r2, [r7, #12]
 800678c:	440a      	add	r2, r1
 800678e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006792:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006796:	6013      	str	r3, [r2, #0]
 8006798:	e027      	b.n	80067ea <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	015a      	lsls	r2, r3, #5
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	4413      	add	r3, r2
 80067a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	68ba      	ldr	r2, [r7, #8]
 80067aa:	0151      	lsls	r1, r2, #5
 80067ac:	68fa      	ldr	r2, [r7, #12]
 80067ae:	440a      	add	r2, r1
 80067b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067b4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80067b8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	791b      	ldrb	r3, [r3, #4]
 80067be:	2b03      	cmp	r3, #3
 80067c0:	d003      	beq.n	80067ca <USB_EPClearStall+0x9e>
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	791b      	ldrb	r3, [r3, #4]
 80067c6:	2b02      	cmp	r3, #2
 80067c8:	d10f      	bne.n	80067ea <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	015a      	lsls	r2, r3, #5
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	4413      	add	r3, r2
 80067d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	68ba      	ldr	r2, [r7, #8]
 80067da:	0151      	lsls	r1, r2, #5
 80067dc:	68fa      	ldr	r2, [r7, #12]
 80067de:	440a      	add	r2, r1
 80067e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067e8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80067ea:	2300      	movs	r3, #0
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3714      	adds	r7, #20
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr

080067f8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b085      	sub	sp, #20
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	460b      	mov	r3, r1
 8006802:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	68fa      	ldr	r2, [r7, #12]
 8006812:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006816:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800681a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	78fb      	ldrb	r3, [r7, #3]
 8006826:	011b      	lsls	r3, r3, #4
 8006828:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800682c:	68f9      	ldr	r1, [r7, #12]
 800682e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006832:	4313      	orrs	r3, r2
 8006834:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006836:	2300      	movs	r3, #0
}
 8006838:	4618      	mov	r0, r3
 800683a:	3714      	adds	r7, #20
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr

08006844 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006844:	b480      	push	{r7}
 8006846:	b085      	sub	sp, #20
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	68fa      	ldr	r2, [r7, #12]
 800685a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800685e:	f023 0303 	bic.w	r3, r3, #3
 8006862:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	68fa      	ldr	r2, [r7, #12]
 800686e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006872:	f023 0302 	bic.w	r3, r3, #2
 8006876:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006878:	2300      	movs	r3, #0
}
 800687a:	4618      	mov	r0, r3
 800687c:	3714      	adds	r7, #20
 800687e:	46bd      	mov	sp, r7
 8006880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006884:	4770      	bx	lr

08006886 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006886:	b480      	push	{r7}
 8006888:	b085      	sub	sp, #20
 800688a:	af00      	add	r7, sp, #0
 800688c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	68fa      	ldr	r2, [r7, #12]
 800689c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80068a0:	f023 0303 	bic.w	r3, r3, #3
 80068a4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	68fa      	ldr	r2, [r7, #12]
 80068b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068b4:	f043 0302 	orr.w	r3, r3, #2
 80068b8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80068ba:	2300      	movs	r3, #0
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3714      	adds	r7, #20
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr

080068c8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b085      	sub	sp, #20
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	695b      	ldr	r3, [r3, #20]
 80068d4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	699b      	ldr	r3, [r3, #24]
 80068da:	68fa      	ldr	r2, [r7, #12]
 80068dc:	4013      	ands	r3, r2
 80068de:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80068e0:	68fb      	ldr	r3, [r7, #12]
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3714      	adds	r7, #20
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr

080068ee <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80068ee:	b480      	push	{r7}
 80068f0:	b085      	sub	sp, #20
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006900:	699b      	ldr	r3, [r3, #24]
 8006902:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800690a:	69db      	ldr	r3, [r3, #28]
 800690c:	68ba      	ldr	r2, [r7, #8]
 800690e:	4013      	ands	r3, r2
 8006910:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	0c1b      	lsrs	r3, r3, #16
}
 8006916:	4618      	mov	r0, r3
 8006918:	3714      	adds	r7, #20
 800691a:	46bd      	mov	sp, r7
 800691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006920:	4770      	bx	lr

08006922 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006922:	b480      	push	{r7}
 8006924:	b085      	sub	sp, #20
 8006926:	af00      	add	r7, sp, #0
 8006928:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006934:	699b      	ldr	r3, [r3, #24]
 8006936:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800693e:	69db      	ldr	r3, [r3, #28]
 8006940:	68ba      	ldr	r2, [r7, #8]
 8006942:	4013      	ands	r3, r2
 8006944:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	b29b      	uxth	r3, r3
}
 800694a:	4618      	mov	r0, r3
 800694c:	3714      	adds	r7, #20
 800694e:	46bd      	mov	sp, r7
 8006950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006954:	4770      	bx	lr

08006956 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006956:	b480      	push	{r7}
 8006958:	b085      	sub	sp, #20
 800695a:	af00      	add	r7, sp, #0
 800695c:	6078      	str	r0, [r7, #4]
 800695e:	460b      	mov	r3, r1
 8006960:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006966:	78fb      	ldrb	r3, [r7, #3]
 8006968:	015a      	lsls	r2, r3, #5
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	4413      	add	r3, r2
 800696e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800697c:	695b      	ldr	r3, [r3, #20]
 800697e:	68ba      	ldr	r2, [r7, #8]
 8006980:	4013      	ands	r3, r2
 8006982:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006984:	68bb      	ldr	r3, [r7, #8]
}
 8006986:	4618      	mov	r0, r3
 8006988:	3714      	adds	r7, #20
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr

08006992 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006992:	b480      	push	{r7}
 8006994:	b087      	sub	sp, #28
 8006996:	af00      	add	r7, sp, #0
 8006998:	6078      	str	r0, [r7, #4]
 800699a:	460b      	mov	r3, r1
 800699c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069a8:	691b      	ldr	r3, [r3, #16]
 80069aa:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069b4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80069b6:	78fb      	ldrb	r3, [r7, #3]
 80069b8:	f003 030f 	and.w	r3, r3, #15
 80069bc:	68fa      	ldr	r2, [r7, #12]
 80069be:	fa22 f303 	lsr.w	r3, r2, r3
 80069c2:	01db      	lsls	r3, r3, #7
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	693a      	ldr	r2, [r7, #16]
 80069c8:	4313      	orrs	r3, r2
 80069ca:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80069cc:	78fb      	ldrb	r3, [r7, #3]
 80069ce:	015a      	lsls	r2, r3, #5
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	4413      	add	r3, r2
 80069d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	693a      	ldr	r2, [r7, #16]
 80069dc:	4013      	ands	r3, r2
 80069de:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80069e0:	68bb      	ldr	r3, [r7, #8]
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	371c      	adds	r7, #28
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr

080069ee <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80069ee:	b480      	push	{r7}
 80069f0:	b083      	sub	sp, #12
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	695b      	ldr	r3, [r3, #20]
 80069fa:	f003 0301 	and.w	r3, r3, #1
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	370c      	adds	r7, #12
 8006a02:	46bd      	mov	sp, r7
 8006a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a08:	4770      	bx	lr

08006a0a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006a0a:	b480      	push	{r7}
 8006a0c:	b085      	sub	sp, #20
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	68fa      	ldr	r2, [r7, #12]
 8006a20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a24:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006a28:	f023 0307 	bic.w	r3, r3, #7
 8006a2c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	68fa      	ldr	r2, [r7, #12]
 8006a38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a40:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006a42:	2300      	movs	r3, #0
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3714      	adds	r7, #20
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr

08006a50 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b087      	sub	sp, #28
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	60f8      	str	r0, [r7, #12]
 8006a58:	460b      	mov	r3, r1
 8006a5a:	607a      	str	r2, [r7, #4]
 8006a5c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	333c      	adds	r3, #60	; 0x3c
 8006a66:	3304      	adds	r3, #4
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	4a26      	ldr	r2, [pc, #152]	; (8006b08 <USB_EP0_OutStart+0xb8>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d90a      	bls.n	8006a8a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a84:	d101      	bne.n	8006a8a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006a86:	2300      	movs	r3, #0
 8006a88:	e037      	b.n	8006afa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a90:	461a      	mov	r2, r3
 8006a92:	2300      	movs	r3, #0
 8006a94:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a9c:	691b      	ldr	r3, [r3, #16]
 8006a9e:	697a      	ldr	r2, [r7, #20]
 8006aa0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006aa4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006aa8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ab0:	691b      	ldr	r3, [r3, #16]
 8006ab2:	697a      	ldr	r2, [r7, #20]
 8006ab4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ab8:	f043 0318 	orr.w	r3, r3, #24
 8006abc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ac4:	691b      	ldr	r3, [r3, #16]
 8006ac6:	697a      	ldr	r2, [r7, #20]
 8006ac8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006acc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006ad0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006ad2:	7afb      	ldrb	r3, [r7, #11]
 8006ad4:	2b01      	cmp	r3, #1
 8006ad6:	d10f      	bne.n	8006af8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ade:	461a      	mov	r2, r3
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	697a      	ldr	r2, [r7, #20]
 8006aee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006af2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006af6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006af8:	2300      	movs	r3, #0
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	371c      	adds	r7, #28
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr
 8006b06:	bf00      	nop
 8006b08:	4f54300a 	.word	0x4f54300a

08006b0c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b085      	sub	sp, #20
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006b14:	2300      	movs	r3, #0
 8006b16:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	3301      	adds	r3, #1
 8006b1c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006b24:	d901      	bls.n	8006b2a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006b26:	2303      	movs	r3, #3
 8006b28:	e01b      	b.n	8006b62 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	691b      	ldr	r3, [r3, #16]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	daf2      	bge.n	8006b18 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006b32:	2300      	movs	r3, #0
 8006b34:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	691b      	ldr	r3, [r3, #16]
 8006b3a:	f043 0201 	orr.w	r2, r3, #1
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	3301      	adds	r3, #1
 8006b46:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006b4e:	d901      	bls.n	8006b54 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006b50:	2303      	movs	r3, #3
 8006b52:	e006      	b.n	8006b62 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	691b      	ldr	r3, [r3, #16]
 8006b58:	f003 0301 	and.w	r3, r3, #1
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d0f0      	beq.n	8006b42 <USB_CoreReset+0x36>

  return HAL_OK;
 8006b60:	2300      	movs	r3, #0
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3714      	adds	r7, #20
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr
	...

08006b70 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b084      	sub	sp, #16
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	460b      	mov	r3, r1
 8006b7a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006b7c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006b80:	f003 fe18 	bl	800a7b4 <USBD_static_malloc>
 8006b84:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d109      	bne.n	8006ba0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	32b0      	adds	r2, #176	; 0xb0
 8006b96:	2100      	movs	r1, #0
 8006b98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006b9c:	2302      	movs	r3, #2
 8006b9e:	e0d4      	b.n	8006d4a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006ba0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006ba4:	2100      	movs	r1, #0
 8006ba6:	68f8      	ldr	r0, [r7, #12]
 8006ba8:	f004 f97a 	bl	800aea0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	32b0      	adds	r2, #176	; 0xb0
 8006bb6:	68f9      	ldr	r1, [r7, #12]
 8006bb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	32b0      	adds	r2, #176	; 0xb0
 8006bc6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	7c1b      	ldrb	r3, [r3, #16]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d138      	bne.n	8006c4a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006bd8:	4b5e      	ldr	r3, [pc, #376]	; (8006d54 <USBD_CDC_Init+0x1e4>)
 8006bda:	7819      	ldrb	r1, [r3, #0]
 8006bdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006be0:	2202      	movs	r2, #2
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f003 fcc3 	bl	800a56e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006be8:	4b5a      	ldr	r3, [pc, #360]	; (8006d54 <USBD_CDC_Init+0x1e4>)
 8006bea:	781b      	ldrb	r3, [r3, #0]
 8006bec:	f003 020f 	and.w	r2, r3, #15
 8006bf0:	6879      	ldr	r1, [r7, #4]
 8006bf2:	4613      	mov	r3, r2
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	4413      	add	r3, r2
 8006bf8:	009b      	lsls	r3, r3, #2
 8006bfa:	440b      	add	r3, r1
 8006bfc:	3324      	adds	r3, #36	; 0x24
 8006bfe:	2201      	movs	r2, #1
 8006c00:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006c02:	4b55      	ldr	r3, [pc, #340]	; (8006d58 <USBD_CDC_Init+0x1e8>)
 8006c04:	7819      	ldrb	r1, [r3, #0]
 8006c06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c0a:	2202      	movs	r2, #2
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f003 fcae 	bl	800a56e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006c12:	4b51      	ldr	r3, [pc, #324]	; (8006d58 <USBD_CDC_Init+0x1e8>)
 8006c14:	781b      	ldrb	r3, [r3, #0]
 8006c16:	f003 020f 	and.w	r2, r3, #15
 8006c1a:	6879      	ldr	r1, [r7, #4]
 8006c1c:	4613      	mov	r3, r2
 8006c1e:	009b      	lsls	r3, r3, #2
 8006c20:	4413      	add	r3, r2
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	440b      	add	r3, r1
 8006c26:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006c2e:	4b4b      	ldr	r3, [pc, #300]	; (8006d5c <USBD_CDC_Init+0x1ec>)
 8006c30:	781b      	ldrb	r3, [r3, #0]
 8006c32:	f003 020f 	and.w	r2, r3, #15
 8006c36:	6879      	ldr	r1, [r7, #4]
 8006c38:	4613      	mov	r3, r2
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	4413      	add	r3, r2
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	440b      	add	r3, r1
 8006c42:	3326      	adds	r3, #38	; 0x26
 8006c44:	2210      	movs	r2, #16
 8006c46:	801a      	strh	r2, [r3, #0]
 8006c48:	e035      	b.n	8006cb6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006c4a:	4b42      	ldr	r3, [pc, #264]	; (8006d54 <USBD_CDC_Init+0x1e4>)
 8006c4c:	7819      	ldrb	r1, [r3, #0]
 8006c4e:	2340      	movs	r3, #64	; 0x40
 8006c50:	2202      	movs	r2, #2
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f003 fc8b 	bl	800a56e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006c58:	4b3e      	ldr	r3, [pc, #248]	; (8006d54 <USBD_CDC_Init+0x1e4>)
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	f003 020f 	and.w	r2, r3, #15
 8006c60:	6879      	ldr	r1, [r7, #4]
 8006c62:	4613      	mov	r3, r2
 8006c64:	009b      	lsls	r3, r3, #2
 8006c66:	4413      	add	r3, r2
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	440b      	add	r3, r1
 8006c6c:	3324      	adds	r3, #36	; 0x24
 8006c6e:	2201      	movs	r2, #1
 8006c70:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006c72:	4b39      	ldr	r3, [pc, #228]	; (8006d58 <USBD_CDC_Init+0x1e8>)
 8006c74:	7819      	ldrb	r1, [r3, #0]
 8006c76:	2340      	movs	r3, #64	; 0x40
 8006c78:	2202      	movs	r2, #2
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f003 fc77 	bl	800a56e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006c80:	4b35      	ldr	r3, [pc, #212]	; (8006d58 <USBD_CDC_Init+0x1e8>)
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	f003 020f 	and.w	r2, r3, #15
 8006c88:	6879      	ldr	r1, [r7, #4]
 8006c8a:	4613      	mov	r3, r2
 8006c8c:	009b      	lsls	r3, r3, #2
 8006c8e:	4413      	add	r3, r2
 8006c90:	009b      	lsls	r3, r3, #2
 8006c92:	440b      	add	r3, r1
 8006c94:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006c98:	2201      	movs	r2, #1
 8006c9a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006c9c:	4b2f      	ldr	r3, [pc, #188]	; (8006d5c <USBD_CDC_Init+0x1ec>)
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	f003 020f 	and.w	r2, r3, #15
 8006ca4:	6879      	ldr	r1, [r7, #4]
 8006ca6:	4613      	mov	r3, r2
 8006ca8:	009b      	lsls	r3, r3, #2
 8006caa:	4413      	add	r3, r2
 8006cac:	009b      	lsls	r3, r3, #2
 8006cae:	440b      	add	r3, r1
 8006cb0:	3326      	adds	r3, #38	; 0x26
 8006cb2:	2210      	movs	r2, #16
 8006cb4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006cb6:	4b29      	ldr	r3, [pc, #164]	; (8006d5c <USBD_CDC_Init+0x1ec>)
 8006cb8:	7819      	ldrb	r1, [r3, #0]
 8006cba:	2308      	movs	r3, #8
 8006cbc:	2203      	movs	r2, #3
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f003 fc55 	bl	800a56e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006cc4:	4b25      	ldr	r3, [pc, #148]	; (8006d5c <USBD_CDC_Init+0x1ec>)
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	f003 020f 	and.w	r2, r3, #15
 8006ccc:	6879      	ldr	r1, [r7, #4]
 8006cce:	4613      	mov	r3, r2
 8006cd0:	009b      	lsls	r3, r3, #2
 8006cd2:	4413      	add	r3, r2
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	440b      	add	r3, r1
 8006cd8:	3324      	adds	r3, #36	; 0x24
 8006cda:	2201      	movs	r2, #1
 8006cdc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006cec:	687a      	ldr	r2, [r7, #4]
 8006cee:	33b0      	adds	r3, #176	; 0xb0
 8006cf0:	009b      	lsls	r3, r3, #2
 8006cf2:	4413      	add	r3, r2
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2200      	movs	r2, #0
 8006d06:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d101      	bne.n	8006d18 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006d14:	2302      	movs	r3, #2
 8006d16:	e018      	b.n	8006d4a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	7c1b      	ldrb	r3, [r3, #16]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d10a      	bne.n	8006d36 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006d20:	4b0d      	ldr	r3, [pc, #52]	; (8006d58 <USBD_CDC_Init+0x1e8>)
 8006d22:	7819      	ldrb	r1, [r3, #0]
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f003 fd0c 	bl	800a74c <USBD_LL_PrepareReceive>
 8006d34:	e008      	b.n	8006d48 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006d36:	4b08      	ldr	r3, [pc, #32]	; (8006d58 <USBD_CDC_Init+0x1e8>)
 8006d38:	7819      	ldrb	r1, [r3, #0]
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d40:	2340      	movs	r3, #64	; 0x40
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f003 fd02 	bl	800a74c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006d48:	2300      	movs	r3, #0
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3710      	adds	r7, #16
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}
 8006d52:	bf00      	nop
 8006d54:	20000093 	.word	0x20000093
 8006d58:	20000094 	.word	0x20000094
 8006d5c:	20000095 	.word	0x20000095

08006d60 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b082      	sub	sp, #8
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	460b      	mov	r3, r1
 8006d6a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006d6c:	4b3a      	ldr	r3, [pc, #232]	; (8006e58 <USBD_CDC_DeInit+0xf8>)
 8006d6e:	781b      	ldrb	r3, [r3, #0]
 8006d70:	4619      	mov	r1, r3
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f003 fc21 	bl	800a5ba <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006d78:	4b37      	ldr	r3, [pc, #220]	; (8006e58 <USBD_CDC_DeInit+0xf8>)
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	f003 020f 	and.w	r2, r3, #15
 8006d80:	6879      	ldr	r1, [r7, #4]
 8006d82:	4613      	mov	r3, r2
 8006d84:	009b      	lsls	r3, r3, #2
 8006d86:	4413      	add	r3, r2
 8006d88:	009b      	lsls	r3, r3, #2
 8006d8a:	440b      	add	r3, r1
 8006d8c:	3324      	adds	r3, #36	; 0x24
 8006d8e:	2200      	movs	r2, #0
 8006d90:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006d92:	4b32      	ldr	r3, [pc, #200]	; (8006e5c <USBD_CDC_DeInit+0xfc>)
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	4619      	mov	r1, r3
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f003 fc0e 	bl	800a5ba <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006d9e:	4b2f      	ldr	r3, [pc, #188]	; (8006e5c <USBD_CDC_DeInit+0xfc>)
 8006da0:	781b      	ldrb	r3, [r3, #0]
 8006da2:	f003 020f 	and.w	r2, r3, #15
 8006da6:	6879      	ldr	r1, [r7, #4]
 8006da8:	4613      	mov	r3, r2
 8006daa:	009b      	lsls	r3, r3, #2
 8006dac:	4413      	add	r3, r2
 8006dae:	009b      	lsls	r3, r3, #2
 8006db0:	440b      	add	r3, r1
 8006db2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006db6:	2200      	movs	r2, #0
 8006db8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006dba:	4b29      	ldr	r3, [pc, #164]	; (8006e60 <USBD_CDC_DeInit+0x100>)
 8006dbc:	781b      	ldrb	r3, [r3, #0]
 8006dbe:	4619      	mov	r1, r3
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f003 fbfa 	bl	800a5ba <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006dc6:	4b26      	ldr	r3, [pc, #152]	; (8006e60 <USBD_CDC_DeInit+0x100>)
 8006dc8:	781b      	ldrb	r3, [r3, #0]
 8006dca:	f003 020f 	and.w	r2, r3, #15
 8006dce:	6879      	ldr	r1, [r7, #4]
 8006dd0:	4613      	mov	r3, r2
 8006dd2:	009b      	lsls	r3, r3, #2
 8006dd4:	4413      	add	r3, r2
 8006dd6:	009b      	lsls	r3, r3, #2
 8006dd8:	440b      	add	r3, r1
 8006dda:	3324      	adds	r3, #36	; 0x24
 8006ddc:	2200      	movs	r2, #0
 8006dde:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006de0:	4b1f      	ldr	r3, [pc, #124]	; (8006e60 <USBD_CDC_DeInit+0x100>)
 8006de2:	781b      	ldrb	r3, [r3, #0]
 8006de4:	f003 020f 	and.w	r2, r3, #15
 8006de8:	6879      	ldr	r1, [r7, #4]
 8006dea:	4613      	mov	r3, r2
 8006dec:	009b      	lsls	r3, r3, #2
 8006dee:	4413      	add	r3, r2
 8006df0:	009b      	lsls	r3, r3, #2
 8006df2:	440b      	add	r3, r1
 8006df4:	3326      	adds	r3, #38	; 0x26
 8006df6:	2200      	movs	r2, #0
 8006df8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	32b0      	adds	r2, #176	; 0xb0
 8006e04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d01f      	beq.n	8006e4c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	33b0      	adds	r3, #176	; 0xb0
 8006e16:	009b      	lsls	r3, r3, #2
 8006e18:	4413      	add	r3, r2
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	32b0      	adds	r2, #176	; 0xb0
 8006e2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f003 fcce 	bl	800a7d0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	32b0      	adds	r2, #176	; 0xb0
 8006e3e:	2100      	movs	r1, #0
 8006e40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2200      	movs	r2, #0
 8006e48:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006e4c:	2300      	movs	r3, #0
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3708      	adds	r7, #8
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}
 8006e56:	bf00      	nop
 8006e58:	20000093 	.word	0x20000093
 8006e5c:	20000094 	.word	0x20000094
 8006e60:	20000095 	.word	0x20000095

08006e64 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b086      	sub	sp, #24
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	32b0      	adds	r2, #176	; 0xb0
 8006e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e7c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006e82:	2300      	movs	r3, #0
 8006e84:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e86:	2300      	movs	r3, #0
 8006e88:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d101      	bne.n	8006e94 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006e90:	2303      	movs	r3, #3
 8006e92:	e0bf      	b.n	8007014 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	781b      	ldrb	r3, [r3, #0]
 8006e98:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d050      	beq.n	8006f42 <USBD_CDC_Setup+0xde>
 8006ea0:	2b20      	cmp	r3, #32
 8006ea2:	f040 80af 	bne.w	8007004 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	88db      	ldrh	r3, [r3, #6]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d03a      	beq.n	8006f24 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	781b      	ldrb	r3, [r3, #0]
 8006eb2:	b25b      	sxtb	r3, r3
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	da1b      	bge.n	8006ef0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	33b0      	adds	r3, #176	; 0xb0
 8006ec2:	009b      	lsls	r3, r3, #2
 8006ec4:	4413      	add	r3, r2
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	689b      	ldr	r3, [r3, #8]
 8006eca:	683a      	ldr	r2, [r7, #0]
 8006ecc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006ece:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006ed0:	683a      	ldr	r2, [r7, #0]
 8006ed2:	88d2      	ldrh	r2, [r2, #6]
 8006ed4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	88db      	ldrh	r3, [r3, #6]
 8006eda:	2b07      	cmp	r3, #7
 8006edc:	bf28      	it	cs
 8006ede:	2307      	movcs	r3, #7
 8006ee0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	89fa      	ldrh	r2, [r7, #14]
 8006ee6:	4619      	mov	r1, r3
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f001 fd49 	bl	8008980 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006eee:	e090      	b.n	8007012 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	785a      	ldrb	r2, [r3, #1]
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	88db      	ldrh	r3, [r3, #6]
 8006efe:	2b3f      	cmp	r3, #63	; 0x3f
 8006f00:	d803      	bhi.n	8006f0a <USBD_CDC_Setup+0xa6>
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	88db      	ldrh	r3, [r3, #6]
 8006f06:	b2da      	uxtb	r2, r3
 8006f08:	e000      	b.n	8006f0c <USBD_CDC_Setup+0xa8>
 8006f0a:	2240      	movs	r2, #64	; 0x40
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006f12:	6939      	ldr	r1, [r7, #16]
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f001 fd5b 	bl	80089d8 <USBD_CtlPrepareRx>
      break;
 8006f22:	e076      	b.n	8007012 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006f2a:	687a      	ldr	r2, [r7, #4]
 8006f2c:	33b0      	adds	r3, #176	; 0xb0
 8006f2e:	009b      	lsls	r3, r3, #2
 8006f30:	4413      	add	r3, r2
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	683a      	ldr	r2, [r7, #0]
 8006f38:	7850      	ldrb	r0, [r2, #1]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	6839      	ldr	r1, [r7, #0]
 8006f3e:	4798      	blx	r3
      break;
 8006f40:	e067      	b.n	8007012 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	785b      	ldrb	r3, [r3, #1]
 8006f46:	2b0b      	cmp	r3, #11
 8006f48:	d851      	bhi.n	8006fee <USBD_CDC_Setup+0x18a>
 8006f4a:	a201      	add	r2, pc, #4	; (adr r2, 8006f50 <USBD_CDC_Setup+0xec>)
 8006f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f50:	08006f81 	.word	0x08006f81
 8006f54:	08006ffd 	.word	0x08006ffd
 8006f58:	08006fef 	.word	0x08006fef
 8006f5c:	08006fef 	.word	0x08006fef
 8006f60:	08006fef 	.word	0x08006fef
 8006f64:	08006fef 	.word	0x08006fef
 8006f68:	08006fef 	.word	0x08006fef
 8006f6c:	08006fef 	.word	0x08006fef
 8006f70:	08006fef 	.word	0x08006fef
 8006f74:	08006fef 	.word	0x08006fef
 8006f78:	08006fab 	.word	0x08006fab
 8006f7c:	08006fd5 	.word	0x08006fd5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	2b03      	cmp	r3, #3
 8006f8a:	d107      	bne.n	8006f9c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006f8c:	f107 030a 	add.w	r3, r7, #10
 8006f90:	2202      	movs	r2, #2
 8006f92:	4619      	mov	r1, r3
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f001 fcf3 	bl	8008980 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006f9a:	e032      	b.n	8007002 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006f9c:	6839      	ldr	r1, [r7, #0]
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f001 fc7d 	bl	800889e <USBD_CtlError>
            ret = USBD_FAIL;
 8006fa4:	2303      	movs	r3, #3
 8006fa6:	75fb      	strb	r3, [r7, #23]
          break;
 8006fa8:	e02b      	b.n	8007002 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fb0:	b2db      	uxtb	r3, r3
 8006fb2:	2b03      	cmp	r3, #3
 8006fb4:	d107      	bne.n	8006fc6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006fb6:	f107 030d 	add.w	r3, r7, #13
 8006fba:	2201      	movs	r2, #1
 8006fbc:	4619      	mov	r1, r3
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f001 fcde 	bl	8008980 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006fc4:	e01d      	b.n	8007002 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006fc6:	6839      	ldr	r1, [r7, #0]
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f001 fc68 	bl	800889e <USBD_CtlError>
            ret = USBD_FAIL;
 8006fce:	2303      	movs	r3, #3
 8006fd0:	75fb      	strb	r3, [r7, #23]
          break;
 8006fd2:	e016      	b.n	8007002 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fda:	b2db      	uxtb	r3, r3
 8006fdc:	2b03      	cmp	r3, #3
 8006fde:	d00f      	beq.n	8007000 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006fe0:	6839      	ldr	r1, [r7, #0]
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f001 fc5b 	bl	800889e <USBD_CtlError>
            ret = USBD_FAIL;
 8006fe8:	2303      	movs	r3, #3
 8006fea:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006fec:	e008      	b.n	8007000 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006fee:	6839      	ldr	r1, [r7, #0]
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f001 fc54 	bl	800889e <USBD_CtlError>
          ret = USBD_FAIL;
 8006ff6:	2303      	movs	r3, #3
 8006ff8:	75fb      	strb	r3, [r7, #23]
          break;
 8006ffa:	e002      	b.n	8007002 <USBD_CDC_Setup+0x19e>
          break;
 8006ffc:	bf00      	nop
 8006ffe:	e008      	b.n	8007012 <USBD_CDC_Setup+0x1ae>
          break;
 8007000:	bf00      	nop
      }
      break;
 8007002:	e006      	b.n	8007012 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007004:	6839      	ldr	r1, [r7, #0]
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f001 fc49 	bl	800889e <USBD_CtlError>
      ret = USBD_FAIL;
 800700c:	2303      	movs	r3, #3
 800700e:	75fb      	strb	r3, [r7, #23]
      break;
 8007010:	bf00      	nop
  }

  return (uint8_t)ret;
 8007012:	7dfb      	ldrb	r3, [r7, #23]
}
 8007014:	4618      	mov	r0, r3
 8007016:	3718      	adds	r7, #24
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}

0800701c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b084      	sub	sp, #16
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	460b      	mov	r3, r1
 8007026:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800702e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	32b0      	adds	r2, #176	; 0xb0
 800703a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d101      	bne.n	8007046 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007042:	2303      	movs	r3, #3
 8007044:	e065      	b.n	8007112 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	32b0      	adds	r2, #176	; 0xb0
 8007050:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007054:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007056:	78fb      	ldrb	r3, [r7, #3]
 8007058:	f003 020f 	and.w	r2, r3, #15
 800705c:	6879      	ldr	r1, [r7, #4]
 800705e:	4613      	mov	r3, r2
 8007060:	009b      	lsls	r3, r3, #2
 8007062:	4413      	add	r3, r2
 8007064:	009b      	lsls	r3, r3, #2
 8007066:	440b      	add	r3, r1
 8007068:	3318      	adds	r3, #24
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d02f      	beq.n	80070d0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007070:	78fb      	ldrb	r3, [r7, #3]
 8007072:	f003 020f 	and.w	r2, r3, #15
 8007076:	6879      	ldr	r1, [r7, #4]
 8007078:	4613      	mov	r3, r2
 800707a:	009b      	lsls	r3, r3, #2
 800707c:	4413      	add	r3, r2
 800707e:	009b      	lsls	r3, r3, #2
 8007080:	440b      	add	r3, r1
 8007082:	3318      	adds	r3, #24
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	78fb      	ldrb	r3, [r7, #3]
 8007088:	f003 010f 	and.w	r1, r3, #15
 800708c:	68f8      	ldr	r0, [r7, #12]
 800708e:	460b      	mov	r3, r1
 8007090:	00db      	lsls	r3, r3, #3
 8007092:	440b      	add	r3, r1
 8007094:	009b      	lsls	r3, r3, #2
 8007096:	4403      	add	r3, r0
 8007098:	331c      	adds	r3, #28
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	fbb2 f1f3 	udiv	r1, r2, r3
 80070a0:	fb01 f303 	mul.w	r3, r1, r3
 80070a4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d112      	bne.n	80070d0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80070aa:	78fb      	ldrb	r3, [r7, #3]
 80070ac:	f003 020f 	and.w	r2, r3, #15
 80070b0:	6879      	ldr	r1, [r7, #4]
 80070b2:	4613      	mov	r3, r2
 80070b4:	009b      	lsls	r3, r3, #2
 80070b6:	4413      	add	r3, r2
 80070b8:	009b      	lsls	r3, r3, #2
 80070ba:	440b      	add	r3, r1
 80070bc:	3318      	adds	r3, #24
 80070be:	2200      	movs	r2, #0
 80070c0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80070c2:	78f9      	ldrb	r1, [r7, #3]
 80070c4:	2300      	movs	r3, #0
 80070c6:	2200      	movs	r2, #0
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f003 fb1e 	bl	800a70a <USBD_LL_Transmit>
 80070ce:	e01f      	b.n	8007110 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	2200      	movs	r2, #0
 80070d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	33b0      	adds	r3, #176	; 0xb0
 80070e2:	009b      	lsls	r3, r3, #2
 80070e4:	4413      	add	r3, r2
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	691b      	ldr	r3, [r3, #16]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d010      	beq.n	8007110 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80070f4:	687a      	ldr	r2, [r7, #4]
 80070f6:	33b0      	adds	r3, #176	; 0xb0
 80070f8:	009b      	lsls	r3, r3, #2
 80070fa:	4413      	add	r3, r2
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	691b      	ldr	r3, [r3, #16]
 8007100:	68ba      	ldr	r2, [r7, #8]
 8007102:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007106:	68ba      	ldr	r2, [r7, #8]
 8007108:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800710c:	78fa      	ldrb	r2, [r7, #3]
 800710e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007110:	2300      	movs	r3, #0
}
 8007112:	4618      	mov	r0, r3
 8007114:	3710      	adds	r7, #16
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}

0800711a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800711a:	b580      	push	{r7, lr}
 800711c:	b084      	sub	sp, #16
 800711e:	af00      	add	r7, sp, #0
 8007120:	6078      	str	r0, [r7, #4]
 8007122:	460b      	mov	r3, r1
 8007124:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	32b0      	adds	r2, #176	; 0xb0
 8007130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007134:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	32b0      	adds	r2, #176	; 0xb0
 8007140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d101      	bne.n	800714c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007148:	2303      	movs	r3, #3
 800714a:	e01a      	b.n	8007182 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800714c:	78fb      	ldrb	r3, [r7, #3]
 800714e:	4619      	mov	r1, r3
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f003 fb1c 	bl	800a78e <USBD_LL_GetRxDataSize>
 8007156:	4602      	mov	r2, r0
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007164:	687a      	ldr	r2, [r7, #4]
 8007166:	33b0      	adds	r3, #176	; 0xb0
 8007168:	009b      	lsls	r3, r3, #2
 800716a:	4413      	add	r3, r2
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	68db      	ldr	r3, [r3, #12]
 8007170:	68fa      	ldr	r2, [r7, #12]
 8007172:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007176:	68fa      	ldr	r2, [r7, #12]
 8007178:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800717c:	4611      	mov	r1, r2
 800717e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007180:	2300      	movs	r3, #0
}
 8007182:	4618      	mov	r0, r3
 8007184:	3710      	adds	r7, #16
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}

0800718a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800718a:	b580      	push	{r7, lr}
 800718c:	b084      	sub	sp, #16
 800718e:	af00      	add	r7, sp, #0
 8007190:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	32b0      	adds	r2, #176	; 0xb0
 800719c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071a0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d101      	bne.n	80071ac <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80071a8:	2303      	movs	r3, #3
 80071aa:	e025      	b.n	80071f8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	33b0      	adds	r3, #176	; 0xb0
 80071b6:	009b      	lsls	r3, r3, #2
 80071b8:	4413      	add	r3, r2
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d01a      	beq.n	80071f6 <USBD_CDC_EP0_RxReady+0x6c>
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80071c6:	2bff      	cmp	r3, #255	; 0xff
 80071c8:	d015      	beq.n	80071f6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80071d0:	687a      	ldr	r2, [r7, #4]
 80071d2:	33b0      	adds	r3, #176	; 0xb0
 80071d4:	009b      	lsls	r3, r3, #2
 80071d6:	4413      	add	r3, r2
 80071d8:	685b      	ldr	r3, [r3, #4]
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	68fa      	ldr	r2, [r7, #12]
 80071de:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80071e2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80071e4:	68fa      	ldr	r2, [r7, #12]
 80071e6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80071ea:	b292      	uxth	r2, r2
 80071ec:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	22ff      	movs	r2, #255	; 0xff
 80071f2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80071f6:	2300      	movs	r3, #0
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3710      	adds	r7, #16
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}

08007200 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b086      	sub	sp, #24
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007208:	2182      	movs	r1, #130	; 0x82
 800720a:	4818      	ldr	r0, [pc, #96]	; (800726c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800720c:	f000 fd0f 	bl	8007c2e <USBD_GetEpDesc>
 8007210:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007212:	2101      	movs	r1, #1
 8007214:	4815      	ldr	r0, [pc, #84]	; (800726c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007216:	f000 fd0a 	bl	8007c2e <USBD_GetEpDesc>
 800721a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800721c:	2181      	movs	r1, #129	; 0x81
 800721e:	4813      	ldr	r0, [pc, #76]	; (800726c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007220:	f000 fd05 	bl	8007c2e <USBD_GetEpDesc>
 8007224:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d002      	beq.n	8007232 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	2210      	movs	r2, #16
 8007230:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d006      	beq.n	8007246 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	2200      	movs	r2, #0
 800723c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007240:	711a      	strb	r2, [r3, #4]
 8007242:	2200      	movs	r2, #0
 8007244:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d006      	beq.n	800725a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2200      	movs	r2, #0
 8007250:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007254:	711a      	strb	r2, [r3, #4]
 8007256:	2200      	movs	r2, #0
 8007258:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2243      	movs	r2, #67	; 0x43
 800725e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007260:	4b02      	ldr	r3, [pc, #8]	; (800726c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007262:	4618      	mov	r0, r3
 8007264:	3718      	adds	r7, #24
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}
 800726a:	bf00      	nop
 800726c:	20000050 	.word	0x20000050

08007270 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b086      	sub	sp, #24
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007278:	2182      	movs	r1, #130	; 0x82
 800727a:	4818      	ldr	r0, [pc, #96]	; (80072dc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800727c:	f000 fcd7 	bl	8007c2e <USBD_GetEpDesc>
 8007280:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007282:	2101      	movs	r1, #1
 8007284:	4815      	ldr	r0, [pc, #84]	; (80072dc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007286:	f000 fcd2 	bl	8007c2e <USBD_GetEpDesc>
 800728a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800728c:	2181      	movs	r1, #129	; 0x81
 800728e:	4813      	ldr	r0, [pc, #76]	; (80072dc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007290:	f000 fccd 	bl	8007c2e <USBD_GetEpDesc>
 8007294:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d002      	beq.n	80072a2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	2210      	movs	r2, #16
 80072a0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d006      	beq.n	80072b6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	2200      	movs	r2, #0
 80072ac:	711a      	strb	r2, [r3, #4]
 80072ae:	2200      	movs	r2, #0
 80072b0:	f042 0202 	orr.w	r2, r2, #2
 80072b4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d006      	beq.n	80072ca <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2200      	movs	r2, #0
 80072c0:	711a      	strb	r2, [r3, #4]
 80072c2:	2200      	movs	r2, #0
 80072c4:	f042 0202 	orr.w	r2, r2, #2
 80072c8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2243      	movs	r2, #67	; 0x43
 80072ce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80072d0:	4b02      	ldr	r3, [pc, #8]	; (80072dc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3718      	adds	r7, #24
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}
 80072da:	bf00      	nop
 80072dc:	20000050 	.word	0x20000050

080072e0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b086      	sub	sp, #24
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80072e8:	2182      	movs	r1, #130	; 0x82
 80072ea:	4818      	ldr	r0, [pc, #96]	; (800734c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80072ec:	f000 fc9f 	bl	8007c2e <USBD_GetEpDesc>
 80072f0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80072f2:	2101      	movs	r1, #1
 80072f4:	4815      	ldr	r0, [pc, #84]	; (800734c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80072f6:	f000 fc9a 	bl	8007c2e <USBD_GetEpDesc>
 80072fa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80072fc:	2181      	movs	r1, #129	; 0x81
 80072fe:	4813      	ldr	r0, [pc, #76]	; (800734c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007300:	f000 fc95 	bl	8007c2e <USBD_GetEpDesc>
 8007304:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d002      	beq.n	8007312 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	2210      	movs	r2, #16
 8007310:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d006      	beq.n	8007326 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	2200      	movs	r2, #0
 800731c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007320:	711a      	strb	r2, [r3, #4]
 8007322:	2200      	movs	r2, #0
 8007324:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d006      	beq.n	800733a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2200      	movs	r2, #0
 8007330:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007334:	711a      	strb	r2, [r3, #4]
 8007336:	2200      	movs	r2, #0
 8007338:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2243      	movs	r2, #67	; 0x43
 800733e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007340:	4b02      	ldr	r3, [pc, #8]	; (800734c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007342:	4618      	mov	r0, r3
 8007344:	3718      	adds	r7, #24
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}
 800734a:	bf00      	nop
 800734c:	20000050 	.word	0x20000050

08007350 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007350:	b480      	push	{r7}
 8007352:	b083      	sub	sp, #12
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	220a      	movs	r2, #10
 800735c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800735e:	4b03      	ldr	r3, [pc, #12]	; (800736c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007360:	4618      	mov	r0, r3
 8007362:	370c      	adds	r7, #12
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr
 800736c:	2000000c 	.word	0x2000000c

08007370 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007370:	b480      	push	{r7}
 8007372:	b083      	sub	sp, #12
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d101      	bne.n	8007384 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007380:	2303      	movs	r3, #3
 8007382:	e009      	b.n	8007398 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800738a:	687a      	ldr	r2, [r7, #4]
 800738c:	33b0      	adds	r3, #176	; 0xb0
 800738e:	009b      	lsls	r3, r3, #2
 8007390:	4413      	add	r3, r2
 8007392:	683a      	ldr	r2, [r7, #0]
 8007394:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007396:	2300      	movs	r3, #0
}
 8007398:	4618      	mov	r0, r3
 800739a:	370c      	adds	r7, #12
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr

080073a4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b087      	sub	sp, #28
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	60f8      	str	r0, [r7, #12]
 80073ac:	60b9      	str	r1, [r7, #8]
 80073ae:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	32b0      	adds	r2, #176	; 0xb0
 80073ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073be:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d101      	bne.n	80073ca <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80073c6:	2303      	movs	r3, #3
 80073c8:	e008      	b.n	80073dc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	68ba      	ldr	r2, [r7, #8]
 80073ce:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	687a      	ldr	r2, [r7, #4]
 80073d6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80073da:	2300      	movs	r3, #0
}
 80073dc:	4618      	mov	r0, r3
 80073de:	371c      	adds	r7, #28
 80073e0:	46bd      	mov	sp, r7
 80073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e6:	4770      	bx	lr

080073e8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b085      	sub	sp, #20
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	32b0      	adds	r2, #176	; 0xb0
 80073fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007400:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d101      	bne.n	800740c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007408:	2303      	movs	r3, #3
 800740a:	e004      	b.n	8007416 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	683a      	ldr	r2, [r7, #0]
 8007410:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007414:	2300      	movs	r3, #0
}
 8007416:	4618      	mov	r0, r3
 8007418:	3714      	adds	r7, #20
 800741a:	46bd      	mov	sp, r7
 800741c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007420:	4770      	bx	lr
	...

08007424 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b084      	sub	sp, #16
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	32b0      	adds	r2, #176	; 0xb0
 8007436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800743a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	32b0      	adds	r2, #176	; 0xb0
 8007446:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d101      	bne.n	8007452 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800744e:	2303      	movs	r3, #3
 8007450:	e018      	b.n	8007484 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	7c1b      	ldrb	r3, [r3, #16]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d10a      	bne.n	8007470 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800745a:	4b0c      	ldr	r3, [pc, #48]	; (800748c <USBD_CDC_ReceivePacket+0x68>)
 800745c:	7819      	ldrb	r1, [r3, #0]
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007464:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f003 f96f 	bl	800a74c <USBD_LL_PrepareReceive>
 800746e:	e008      	b.n	8007482 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007470:	4b06      	ldr	r3, [pc, #24]	; (800748c <USBD_CDC_ReceivePacket+0x68>)
 8007472:	7819      	ldrb	r1, [r3, #0]
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800747a:	2340      	movs	r3, #64	; 0x40
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f003 f965 	bl	800a74c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007482:	2300      	movs	r3, #0
}
 8007484:	4618      	mov	r0, r3
 8007486:	3710      	adds	r7, #16
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}
 800748c:	20000094 	.word	0x20000094

08007490 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b086      	sub	sp, #24
 8007494:	af00      	add	r7, sp, #0
 8007496:	60f8      	str	r0, [r7, #12]
 8007498:	60b9      	str	r1, [r7, #8]
 800749a:	4613      	mov	r3, r2
 800749c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d101      	bne.n	80074a8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80074a4:	2303      	movs	r3, #3
 80074a6:	e01f      	b.n	80074e8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	2200      	movs	r2, #0
 80074ac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2200      	movs	r2, #0
 80074b4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2200      	movs	r2, #0
 80074bc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d003      	beq.n	80074ce <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	68ba      	ldr	r2, [r7, #8]
 80074ca:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2201      	movs	r2, #1
 80074d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	79fa      	ldrb	r2, [r7, #7]
 80074da:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80074dc:	68f8      	ldr	r0, [r7, #12]
 80074de:	f002 ffdf 	bl	800a4a0 <USBD_LL_Init>
 80074e2:	4603      	mov	r3, r0
 80074e4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80074e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3718      	adds	r7, #24
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b084      	sub	sp, #16
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80074fa:	2300      	movs	r3, #0
 80074fc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d101      	bne.n	8007508 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007504:	2303      	movs	r3, #3
 8007506:	e025      	b.n	8007554 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	683a      	ldr	r2, [r7, #0]
 800750c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	32ae      	adds	r2, #174	; 0xae
 800751a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800751e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007520:	2b00      	cmp	r3, #0
 8007522:	d00f      	beq.n	8007544 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	32ae      	adds	r2, #174	; 0xae
 800752e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007534:	f107 020e 	add.w	r2, r7, #14
 8007538:	4610      	mov	r0, r2
 800753a:	4798      	blx	r3
 800753c:	4602      	mov	r2, r0
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800754a:	1c5a      	adds	r2, r3, #1
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007552:	2300      	movs	r3, #0
}
 8007554:	4618      	mov	r0, r3
 8007556:	3710      	adds	r7, #16
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}

0800755c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b082      	sub	sp, #8
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f002 ffe7 	bl	800a538 <USBD_LL_Start>
 800756a:	4603      	mov	r3, r0
}
 800756c:	4618      	mov	r0, r3
 800756e:	3708      	adds	r7, #8
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}

08007574 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007574:	b480      	push	{r7}
 8007576:	b083      	sub	sp, #12
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800757c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800757e:	4618      	mov	r0, r3
 8007580:	370c      	adds	r7, #12
 8007582:	46bd      	mov	sp, r7
 8007584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007588:	4770      	bx	lr

0800758a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800758a:	b580      	push	{r7, lr}
 800758c:	b084      	sub	sp, #16
 800758e:	af00      	add	r7, sp, #0
 8007590:	6078      	str	r0, [r7, #4]
 8007592:	460b      	mov	r3, r1
 8007594:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007596:	2300      	movs	r3, #0
 8007598:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d009      	beq.n	80075b8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	78fa      	ldrb	r2, [r7, #3]
 80075ae:	4611      	mov	r1, r2
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	4798      	blx	r3
 80075b4:	4603      	mov	r3, r0
 80075b6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80075b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3710      	adds	r7, #16
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}

080075c2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80075c2:	b580      	push	{r7, lr}
 80075c4:	b084      	sub	sp, #16
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	6078      	str	r0, [r7, #4]
 80075ca:	460b      	mov	r3, r1
 80075cc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80075ce:	2300      	movs	r3, #0
 80075d0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075d8:	685b      	ldr	r3, [r3, #4]
 80075da:	78fa      	ldrb	r2, [r7, #3]
 80075dc:	4611      	mov	r1, r2
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	4798      	blx	r3
 80075e2:	4603      	mov	r3, r0
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d001      	beq.n	80075ec <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80075e8:	2303      	movs	r3, #3
 80075ea:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80075ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3710      	adds	r7, #16
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}

080075f6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80075f6:	b580      	push	{r7, lr}
 80075f8:	b084      	sub	sp, #16
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
 80075fe:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007606:	6839      	ldr	r1, [r7, #0]
 8007608:	4618      	mov	r0, r3
 800760a:	f001 f90e 	bl	800882a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2201      	movs	r2, #1
 8007612:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800761c:	461a      	mov	r2, r3
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800762a:	f003 031f 	and.w	r3, r3, #31
 800762e:	2b02      	cmp	r3, #2
 8007630:	d01a      	beq.n	8007668 <USBD_LL_SetupStage+0x72>
 8007632:	2b02      	cmp	r3, #2
 8007634:	d822      	bhi.n	800767c <USBD_LL_SetupStage+0x86>
 8007636:	2b00      	cmp	r3, #0
 8007638:	d002      	beq.n	8007640 <USBD_LL_SetupStage+0x4a>
 800763a:	2b01      	cmp	r3, #1
 800763c:	d00a      	beq.n	8007654 <USBD_LL_SetupStage+0x5e>
 800763e:	e01d      	b.n	800767c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007646:	4619      	mov	r1, r3
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f000 fb65 	bl	8007d18 <USBD_StdDevReq>
 800764e:	4603      	mov	r3, r0
 8007650:	73fb      	strb	r3, [r7, #15]
      break;
 8007652:	e020      	b.n	8007696 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800765a:	4619      	mov	r1, r3
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f000 fbcd 	bl	8007dfc <USBD_StdItfReq>
 8007662:	4603      	mov	r3, r0
 8007664:	73fb      	strb	r3, [r7, #15]
      break;
 8007666:	e016      	b.n	8007696 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800766e:	4619      	mov	r1, r3
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f000 fc2f 	bl	8007ed4 <USBD_StdEPReq>
 8007676:	4603      	mov	r3, r0
 8007678:	73fb      	strb	r3, [r7, #15]
      break;
 800767a:	e00c      	b.n	8007696 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007682:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007686:	b2db      	uxtb	r3, r3
 8007688:	4619      	mov	r1, r3
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f002 ffb4 	bl	800a5f8 <USBD_LL_StallEP>
 8007690:	4603      	mov	r3, r0
 8007692:	73fb      	strb	r3, [r7, #15]
      break;
 8007694:	bf00      	nop
  }

  return ret;
 8007696:	7bfb      	ldrb	r3, [r7, #15]
}
 8007698:	4618      	mov	r0, r3
 800769a:	3710      	adds	r7, #16
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}

080076a0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b086      	sub	sp, #24
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	60f8      	str	r0, [r7, #12]
 80076a8:	460b      	mov	r3, r1
 80076aa:	607a      	str	r2, [r7, #4]
 80076ac:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80076ae:	2300      	movs	r3, #0
 80076b0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80076b2:	7afb      	ldrb	r3, [r7, #11]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d16e      	bne.n	8007796 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80076be:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80076c6:	2b03      	cmp	r3, #3
 80076c8:	f040 8098 	bne.w	80077fc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	689a      	ldr	r2, [r3, #8]
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	68db      	ldr	r3, [r3, #12]
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d913      	bls.n	8007700 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	689a      	ldr	r2, [r3, #8]
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	68db      	ldr	r3, [r3, #12]
 80076e0:	1ad2      	subs	r2, r2, r3
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	68da      	ldr	r2, [r3, #12]
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	4293      	cmp	r3, r2
 80076f0:	bf28      	it	cs
 80076f2:	4613      	movcs	r3, r2
 80076f4:	461a      	mov	r2, r3
 80076f6:	6879      	ldr	r1, [r7, #4]
 80076f8:	68f8      	ldr	r0, [r7, #12]
 80076fa:	f001 f98a 	bl	8008a12 <USBD_CtlContinueRx>
 80076fe:	e07d      	b.n	80077fc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007706:	f003 031f 	and.w	r3, r3, #31
 800770a:	2b02      	cmp	r3, #2
 800770c:	d014      	beq.n	8007738 <USBD_LL_DataOutStage+0x98>
 800770e:	2b02      	cmp	r3, #2
 8007710:	d81d      	bhi.n	800774e <USBD_LL_DataOutStage+0xae>
 8007712:	2b00      	cmp	r3, #0
 8007714:	d002      	beq.n	800771c <USBD_LL_DataOutStage+0x7c>
 8007716:	2b01      	cmp	r3, #1
 8007718:	d003      	beq.n	8007722 <USBD_LL_DataOutStage+0x82>
 800771a:	e018      	b.n	800774e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800771c:	2300      	movs	r3, #0
 800771e:	75bb      	strb	r3, [r7, #22]
            break;
 8007720:	e018      	b.n	8007754 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007728:	b2db      	uxtb	r3, r3
 800772a:	4619      	mov	r1, r3
 800772c:	68f8      	ldr	r0, [r7, #12]
 800772e:	f000 fa64 	bl	8007bfa <USBD_CoreFindIF>
 8007732:	4603      	mov	r3, r0
 8007734:	75bb      	strb	r3, [r7, #22]
            break;
 8007736:	e00d      	b.n	8007754 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800773e:	b2db      	uxtb	r3, r3
 8007740:	4619      	mov	r1, r3
 8007742:	68f8      	ldr	r0, [r7, #12]
 8007744:	f000 fa66 	bl	8007c14 <USBD_CoreFindEP>
 8007748:	4603      	mov	r3, r0
 800774a:	75bb      	strb	r3, [r7, #22]
            break;
 800774c:	e002      	b.n	8007754 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800774e:	2300      	movs	r3, #0
 8007750:	75bb      	strb	r3, [r7, #22]
            break;
 8007752:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007754:	7dbb      	ldrb	r3, [r7, #22]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d119      	bne.n	800778e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007760:	b2db      	uxtb	r3, r3
 8007762:	2b03      	cmp	r3, #3
 8007764:	d113      	bne.n	800778e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007766:	7dba      	ldrb	r2, [r7, #22]
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	32ae      	adds	r2, #174	; 0xae
 800776c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007770:	691b      	ldr	r3, [r3, #16]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d00b      	beq.n	800778e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007776:	7dba      	ldrb	r2, [r7, #22]
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800777e:	7dba      	ldrb	r2, [r7, #22]
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	32ae      	adds	r2, #174	; 0xae
 8007784:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007788:	691b      	ldr	r3, [r3, #16]
 800778a:	68f8      	ldr	r0, [r7, #12]
 800778c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800778e:	68f8      	ldr	r0, [r7, #12]
 8007790:	f001 f950 	bl	8008a34 <USBD_CtlSendStatus>
 8007794:	e032      	b.n	80077fc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007796:	7afb      	ldrb	r3, [r7, #11]
 8007798:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800779c:	b2db      	uxtb	r3, r3
 800779e:	4619      	mov	r1, r3
 80077a0:	68f8      	ldr	r0, [r7, #12]
 80077a2:	f000 fa37 	bl	8007c14 <USBD_CoreFindEP>
 80077a6:	4603      	mov	r3, r0
 80077a8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80077aa:	7dbb      	ldrb	r3, [r7, #22]
 80077ac:	2bff      	cmp	r3, #255	; 0xff
 80077ae:	d025      	beq.n	80077fc <USBD_LL_DataOutStage+0x15c>
 80077b0:	7dbb      	ldrb	r3, [r7, #22]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d122      	bne.n	80077fc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077bc:	b2db      	uxtb	r3, r3
 80077be:	2b03      	cmp	r3, #3
 80077c0:	d117      	bne.n	80077f2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80077c2:	7dba      	ldrb	r2, [r7, #22]
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	32ae      	adds	r2, #174	; 0xae
 80077c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077cc:	699b      	ldr	r3, [r3, #24]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d00f      	beq.n	80077f2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80077d2:	7dba      	ldrb	r2, [r7, #22]
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80077da:	7dba      	ldrb	r2, [r7, #22]
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	32ae      	adds	r2, #174	; 0xae
 80077e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077e4:	699b      	ldr	r3, [r3, #24]
 80077e6:	7afa      	ldrb	r2, [r7, #11]
 80077e8:	4611      	mov	r1, r2
 80077ea:	68f8      	ldr	r0, [r7, #12]
 80077ec:	4798      	blx	r3
 80077ee:	4603      	mov	r3, r0
 80077f0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80077f2:	7dfb      	ldrb	r3, [r7, #23]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d001      	beq.n	80077fc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80077f8:	7dfb      	ldrb	r3, [r7, #23]
 80077fa:	e000      	b.n	80077fe <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80077fc:	2300      	movs	r3, #0
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3718      	adds	r7, #24
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}

08007806 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007806:	b580      	push	{r7, lr}
 8007808:	b086      	sub	sp, #24
 800780a:	af00      	add	r7, sp, #0
 800780c:	60f8      	str	r0, [r7, #12]
 800780e:	460b      	mov	r3, r1
 8007810:	607a      	str	r2, [r7, #4]
 8007812:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007814:	7afb      	ldrb	r3, [r7, #11]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d16f      	bne.n	80078fa <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	3314      	adds	r3, #20
 800781e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007826:	2b02      	cmp	r3, #2
 8007828:	d15a      	bne.n	80078e0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	689a      	ldr	r2, [r3, #8]
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	68db      	ldr	r3, [r3, #12]
 8007832:	429a      	cmp	r2, r3
 8007834:	d914      	bls.n	8007860 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	689a      	ldr	r2, [r3, #8]
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	68db      	ldr	r3, [r3, #12]
 800783e:	1ad2      	subs	r2, r2, r3
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007844:	693b      	ldr	r3, [r7, #16]
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	461a      	mov	r2, r3
 800784a:	6879      	ldr	r1, [r7, #4]
 800784c:	68f8      	ldr	r0, [r7, #12]
 800784e:	f001 f8b2 	bl	80089b6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007852:	2300      	movs	r3, #0
 8007854:	2200      	movs	r2, #0
 8007856:	2100      	movs	r1, #0
 8007858:	68f8      	ldr	r0, [r7, #12]
 800785a:	f002 ff77 	bl	800a74c <USBD_LL_PrepareReceive>
 800785e:	e03f      	b.n	80078e0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	68da      	ldr	r2, [r3, #12]
 8007864:	693b      	ldr	r3, [r7, #16]
 8007866:	689b      	ldr	r3, [r3, #8]
 8007868:	429a      	cmp	r2, r3
 800786a:	d11c      	bne.n	80078a6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	685a      	ldr	r2, [r3, #4]
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007874:	429a      	cmp	r2, r3
 8007876:	d316      	bcc.n	80078a6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	685a      	ldr	r2, [r3, #4]
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007882:	429a      	cmp	r2, r3
 8007884:	d20f      	bcs.n	80078a6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007886:	2200      	movs	r2, #0
 8007888:	2100      	movs	r1, #0
 800788a:	68f8      	ldr	r0, [r7, #12]
 800788c:	f001 f893 	bl	80089b6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2200      	movs	r2, #0
 8007894:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007898:	2300      	movs	r3, #0
 800789a:	2200      	movs	r2, #0
 800789c:	2100      	movs	r1, #0
 800789e:	68f8      	ldr	r0, [r7, #12]
 80078a0:	f002 ff54 	bl	800a74c <USBD_LL_PrepareReceive>
 80078a4:	e01c      	b.n	80078e0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078ac:	b2db      	uxtb	r3, r3
 80078ae:	2b03      	cmp	r3, #3
 80078b0:	d10f      	bne.n	80078d2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078b8:	68db      	ldr	r3, [r3, #12]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d009      	beq.n	80078d2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2200      	movs	r2, #0
 80078c2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078cc:	68db      	ldr	r3, [r3, #12]
 80078ce:	68f8      	ldr	r0, [r7, #12]
 80078d0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80078d2:	2180      	movs	r1, #128	; 0x80
 80078d4:	68f8      	ldr	r0, [r7, #12]
 80078d6:	f002 fe8f 	bl	800a5f8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80078da:	68f8      	ldr	r0, [r7, #12]
 80078dc:	f001 f8bd 	bl	8008a5a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d03a      	beq.n	8007960 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80078ea:	68f8      	ldr	r0, [r7, #12]
 80078ec:	f7ff fe42 	bl	8007574 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2200      	movs	r2, #0
 80078f4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80078f8:	e032      	b.n	8007960 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80078fa:	7afb      	ldrb	r3, [r7, #11]
 80078fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007900:	b2db      	uxtb	r3, r3
 8007902:	4619      	mov	r1, r3
 8007904:	68f8      	ldr	r0, [r7, #12]
 8007906:	f000 f985 	bl	8007c14 <USBD_CoreFindEP>
 800790a:	4603      	mov	r3, r0
 800790c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800790e:	7dfb      	ldrb	r3, [r7, #23]
 8007910:	2bff      	cmp	r3, #255	; 0xff
 8007912:	d025      	beq.n	8007960 <USBD_LL_DataInStage+0x15a>
 8007914:	7dfb      	ldrb	r3, [r7, #23]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d122      	bne.n	8007960 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007920:	b2db      	uxtb	r3, r3
 8007922:	2b03      	cmp	r3, #3
 8007924:	d11c      	bne.n	8007960 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007926:	7dfa      	ldrb	r2, [r7, #23]
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	32ae      	adds	r2, #174	; 0xae
 800792c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007930:	695b      	ldr	r3, [r3, #20]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d014      	beq.n	8007960 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007936:	7dfa      	ldrb	r2, [r7, #23]
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800793e:	7dfa      	ldrb	r2, [r7, #23]
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	32ae      	adds	r2, #174	; 0xae
 8007944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007948:	695b      	ldr	r3, [r3, #20]
 800794a:	7afa      	ldrb	r2, [r7, #11]
 800794c:	4611      	mov	r1, r2
 800794e:	68f8      	ldr	r0, [r7, #12]
 8007950:	4798      	blx	r3
 8007952:	4603      	mov	r3, r0
 8007954:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007956:	7dbb      	ldrb	r3, [r7, #22]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d001      	beq.n	8007960 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800795c:	7dbb      	ldrb	r3, [r7, #22]
 800795e:	e000      	b.n	8007962 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007960:	2300      	movs	r3, #0
}
 8007962:	4618      	mov	r0, r3
 8007964:	3718      	adds	r7, #24
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}

0800796a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800796a:	b580      	push	{r7, lr}
 800796c:	b084      	sub	sp, #16
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007972:	2300      	movs	r3, #0
 8007974:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2201      	movs	r2, #1
 800797a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2200      	movs	r2, #0
 8007982:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2200      	movs	r2, #0
 800798a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2200      	movs	r2, #0
 8007990:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2200      	movs	r2, #0
 8007998:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d014      	beq.n	80079d0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d00e      	beq.n	80079d0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079b8:	685b      	ldr	r3, [r3, #4]
 80079ba:	687a      	ldr	r2, [r7, #4]
 80079bc:	6852      	ldr	r2, [r2, #4]
 80079be:	b2d2      	uxtb	r2, r2
 80079c0:	4611      	mov	r1, r2
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	4798      	blx	r3
 80079c6:	4603      	mov	r3, r0
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d001      	beq.n	80079d0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80079cc:	2303      	movs	r3, #3
 80079ce:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80079d0:	2340      	movs	r3, #64	; 0x40
 80079d2:	2200      	movs	r2, #0
 80079d4:	2100      	movs	r1, #0
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f002 fdc9 	bl	800a56e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2201      	movs	r2, #1
 80079e0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2240      	movs	r2, #64	; 0x40
 80079e8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80079ec:	2340      	movs	r3, #64	; 0x40
 80079ee:	2200      	movs	r2, #0
 80079f0:	2180      	movs	r1, #128	; 0x80
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f002 fdbb 	bl	800a56e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2201      	movs	r2, #1
 80079fc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2240      	movs	r2, #64	; 0x40
 8007a02:	621a      	str	r2, [r3, #32]

  return ret;
 8007a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	3710      	adds	r7, #16
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}

08007a0e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007a0e:	b480      	push	{r7}
 8007a10:	b083      	sub	sp, #12
 8007a12:	af00      	add	r7, sp, #0
 8007a14:	6078      	str	r0, [r7, #4]
 8007a16:	460b      	mov	r3, r1
 8007a18:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	78fa      	ldrb	r2, [r7, #3]
 8007a1e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007a20:	2300      	movs	r3, #0
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	370c      	adds	r7, #12
 8007a26:	46bd      	mov	sp, r7
 8007a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2c:	4770      	bx	lr

08007a2e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007a2e:	b480      	push	{r7}
 8007a30:	b083      	sub	sp, #12
 8007a32:	af00      	add	r7, sp, #0
 8007a34:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a3c:	b2db      	uxtb	r3, r3
 8007a3e:	2b04      	cmp	r3, #4
 8007a40:	d006      	beq.n	8007a50 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a48:	b2da      	uxtb	r2, r3
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2204      	movs	r2, #4
 8007a54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007a58:	2300      	movs	r3, #0
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	370c      	adds	r7, #12
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a64:	4770      	bx	lr

08007a66 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007a66:	b480      	push	{r7}
 8007a68:	b083      	sub	sp, #12
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a74:	b2db      	uxtb	r3, r3
 8007a76:	2b04      	cmp	r3, #4
 8007a78:	d106      	bne.n	8007a88 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007a80:	b2da      	uxtb	r2, r3
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007a88:	2300      	movs	r3, #0
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	370c      	adds	r7, #12
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a94:	4770      	bx	lr

08007a96 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007a96:	b580      	push	{r7, lr}
 8007a98:	b082      	sub	sp, #8
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007aa4:	b2db      	uxtb	r3, r3
 8007aa6:	2b03      	cmp	r3, #3
 8007aa8:	d110      	bne.n	8007acc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d00b      	beq.n	8007acc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007aba:	69db      	ldr	r3, [r3, #28]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d005      	beq.n	8007acc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ac6:	69db      	ldr	r3, [r3, #28]
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007acc:	2300      	movs	r3, #0
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3708      	adds	r7, #8
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}

08007ad6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007ad6:	b580      	push	{r7, lr}
 8007ad8:	b082      	sub	sp, #8
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	6078      	str	r0, [r7, #4]
 8007ade:	460b      	mov	r3, r1
 8007ae0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	32ae      	adds	r2, #174	; 0xae
 8007aec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d101      	bne.n	8007af8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007af4:	2303      	movs	r3, #3
 8007af6:	e01c      	b.n	8007b32 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007afe:	b2db      	uxtb	r3, r3
 8007b00:	2b03      	cmp	r3, #3
 8007b02:	d115      	bne.n	8007b30 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	32ae      	adds	r2, #174	; 0xae
 8007b0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b12:	6a1b      	ldr	r3, [r3, #32]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d00b      	beq.n	8007b30 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	32ae      	adds	r2, #174	; 0xae
 8007b22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b26:	6a1b      	ldr	r3, [r3, #32]
 8007b28:	78fa      	ldrb	r2, [r7, #3]
 8007b2a:	4611      	mov	r1, r2
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007b30:	2300      	movs	r3, #0
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3708      	adds	r7, #8
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}

08007b3a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007b3a:	b580      	push	{r7, lr}
 8007b3c:	b082      	sub	sp, #8
 8007b3e:	af00      	add	r7, sp, #0
 8007b40:	6078      	str	r0, [r7, #4]
 8007b42:	460b      	mov	r3, r1
 8007b44:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	32ae      	adds	r2, #174	; 0xae
 8007b50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d101      	bne.n	8007b5c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007b58:	2303      	movs	r3, #3
 8007b5a:	e01c      	b.n	8007b96 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b62:	b2db      	uxtb	r3, r3
 8007b64:	2b03      	cmp	r3, #3
 8007b66:	d115      	bne.n	8007b94 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	32ae      	adds	r2, #174	; 0xae
 8007b72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d00b      	beq.n	8007b94 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	32ae      	adds	r2, #174	; 0xae
 8007b86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b8c:	78fa      	ldrb	r2, [r7, #3]
 8007b8e:	4611      	mov	r1, r2
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007b94:	2300      	movs	r3, #0
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3708      	adds	r7, #8
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}

08007b9e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007b9e:	b480      	push	{r7}
 8007ba0:	b083      	sub	sp, #12
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007ba6:	2300      	movs	r3, #0
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	370c      	adds	r7, #12
 8007bac:	46bd      	mov	sp, r7
 8007bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb2:	4770      	bx	lr

08007bb4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b084      	sub	sp, #16
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d00e      	beq.n	8007bf0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	687a      	ldr	r2, [r7, #4]
 8007bdc:	6852      	ldr	r2, [r2, #4]
 8007bde:	b2d2      	uxtb	r2, r2
 8007be0:	4611      	mov	r1, r2
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	4798      	blx	r3
 8007be6:	4603      	mov	r3, r0
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d001      	beq.n	8007bf0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007bec:	2303      	movs	r3, #3
 8007bee:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3710      	adds	r7, #16
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}

08007bfa <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007bfa:	b480      	push	{r7}
 8007bfc:	b083      	sub	sp, #12
 8007bfe:	af00      	add	r7, sp, #0
 8007c00:	6078      	str	r0, [r7, #4]
 8007c02:	460b      	mov	r3, r1
 8007c04:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007c06:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	370c      	adds	r7, #12
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c12:	4770      	bx	lr

08007c14 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b083      	sub	sp, #12
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
 8007c1c:	460b      	mov	r3, r1
 8007c1e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007c20:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	370c      	adds	r7, #12
 8007c26:	46bd      	mov	sp, r7
 8007c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2c:	4770      	bx	lr

08007c2e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007c2e:	b580      	push	{r7, lr}
 8007c30:	b086      	sub	sp, #24
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	6078      	str	r0, [r7, #4]
 8007c36:	460b      	mov	r3, r1
 8007c38:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007c42:	2300      	movs	r3, #0
 8007c44:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	885b      	ldrh	r3, [r3, #2]
 8007c4a:	b29a      	uxth	r2, r3
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	781b      	ldrb	r3, [r3, #0]
 8007c50:	b29b      	uxth	r3, r3
 8007c52:	429a      	cmp	r2, r3
 8007c54:	d920      	bls.n	8007c98 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	781b      	ldrb	r3, [r3, #0]
 8007c5a:	b29b      	uxth	r3, r3
 8007c5c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007c5e:	e013      	b.n	8007c88 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007c60:	f107 030a 	add.w	r3, r7, #10
 8007c64:	4619      	mov	r1, r3
 8007c66:	6978      	ldr	r0, [r7, #20]
 8007c68:	f000 f81b 	bl	8007ca2 <USBD_GetNextDesc>
 8007c6c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	785b      	ldrb	r3, [r3, #1]
 8007c72:	2b05      	cmp	r3, #5
 8007c74:	d108      	bne.n	8007c88 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	789b      	ldrb	r3, [r3, #2]
 8007c7e:	78fa      	ldrb	r2, [r7, #3]
 8007c80:	429a      	cmp	r2, r3
 8007c82:	d008      	beq.n	8007c96 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007c84:	2300      	movs	r3, #0
 8007c86:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	885b      	ldrh	r3, [r3, #2]
 8007c8c:	b29a      	uxth	r2, r3
 8007c8e:	897b      	ldrh	r3, [r7, #10]
 8007c90:	429a      	cmp	r2, r3
 8007c92:	d8e5      	bhi.n	8007c60 <USBD_GetEpDesc+0x32>
 8007c94:	e000      	b.n	8007c98 <USBD_GetEpDesc+0x6a>
          break;
 8007c96:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007c98:	693b      	ldr	r3, [r7, #16]
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3718      	adds	r7, #24
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}

08007ca2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007ca2:	b480      	push	{r7}
 8007ca4:	b085      	sub	sp, #20
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6078      	str	r0, [r7, #4]
 8007caa:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	881a      	ldrh	r2, [r3, #0]
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	781b      	ldrb	r3, [r3, #0]
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	4413      	add	r3, r2
 8007cbc:	b29a      	uxth	r2, r3
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	781b      	ldrb	r3, [r3, #0]
 8007cc6:	461a      	mov	r2, r3
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	4413      	add	r3, r2
 8007ccc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007cce:	68fb      	ldr	r3, [r7, #12]
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3714      	adds	r7, #20
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cda:	4770      	bx	lr

08007cdc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b087      	sub	sp, #28
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	781b      	ldrb	r3, [r3, #0]
 8007cec:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	3301      	adds	r3, #1
 8007cf2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	781b      	ldrb	r3, [r3, #0]
 8007cf8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007cfa:	8a3b      	ldrh	r3, [r7, #16]
 8007cfc:	021b      	lsls	r3, r3, #8
 8007cfe:	b21a      	sxth	r2, r3
 8007d00:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007d04:	4313      	orrs	r3, r2
 8007d06:	b21b      	sxth	r3, r3
 8007d08:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007d0a:	89fb      	ldrh	r3, [r7, #14]
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	371c      	adds	r7, #28
 8007d10:	46bd      	mov	sp, r7
 8007d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d16:	4770      	bx	lr

08007d18 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b084      	sub	sp, #16
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d22:	2300      	movs	r3, #0
 8007d24:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	781b      	ldrb	r3, [r3, #0]
 8007d2a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d2e:	2b40      	cmp	r3, #64	; 0x40
 8007d30:	d005      	beq.n	8007d3e <USBD_StdDevReq+0x26>
 8007d32:	2b40      	cmp	r3, #64	; 0x40
 8007d34:	d857      	bhi.n	8007de6 <USBD_StdDevReq+0xce>
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d00f      	beq.n	8007d5a <USBD_StdDevReq+0x42>
 8007d3a:	2b20      	cmp	r3, #32
 8007d3c:	d153      	bne.n	8007de6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	32ae      	adds	r2, #174	; 0xae
 8007d48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d4c:	689b      	ldr	r3, [r3, #8]
 8007d4e:	6839      	ldr	r1, [r7, #0]
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	4798      	blx	r3
 8007d54:	4603      	mov	r3, r0
 8007d56:	73fb      	strb	r3, [r7, #15]
      break;
 8007d58:	e04a      	b.n	8007df0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	785b      	ldrb	r3, [r3, #1]
 8007d5e:	2b09      	cmp	r3, #9
 8007d60:	d83b      	bhi.n	8007dda <USBD_StdDevReq+0xc2>
 8007d62:	a201      	add	r2, pc, #4	; (adr r2, 8007d68 <USBD_StdDevReq+0x50>)
 8007d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d68:	08007dbd 	.word	0x08007dbd
 8007d6c:	08007dd1 	.word	0x08007dd1
 8007d70:	08007ddb 	.word	0x08007ddb
 8007d74:	08007dc7 	.word	0x08007dc7
 8007d78:	08007ddb 	.word	0x08007ddb
 8007d7c:	08007d9b 	.word	0x08007d9b
 8007d80:	08007d91 	.word	0x08007d91
 8007d84:	08007ddb 	.word	0x08007ddb
 8007d88:	08007db3 	.word	0x08007db3
 8007d8c:	08007da5 	.word	0x08007da5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007d90:	6839      	ldr	r1, [r7, #0]
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f000 fa3c 	bl	8008210 <USBD_GetDescriptor>
          break;
 8007d98:	e024      	b.n	8007de4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007d9a:	6839      	ldr	r1, [r7, #0]
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f000 fba1 	bl	80084e4 <USBD_SetAddress>
          break;
 8007da2:	e01f      	b.n	8007de4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007da4:	6839      	ldr	r1, [r7, #0]
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f000 fbe0 	bl	800856c <USBD_SetConfig>
 8007dac:	4603      	mov	r3, r0
 8007dae:	73fb      	strb	r3, [r7, #15]
          break;
 8007db0:	e018      	b.n	8007de4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007db2:	6839      	ldr	r1, [r7, #0]
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f000 fc83 	bl	80086c0 <USBD_GetConfig>
          break;
 8007dba:	e013      	b.n	8007de4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007dbc:	6839      	ldr	r1, [r7, #0]
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f000 fcb4 	bl	800872c <USBD_GetStatus>
          break;
 8007dc4:	e00e      	b.n	8007de4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007dc6:	6839      	ldr	r1, [r7, #0]
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f000 fce3 	bl	8008794 <USBD_SetFeature>
          break;
 8007dce:	e009      	b.n	8007de4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007dd0:	6839      	ldr	r1, [r7, #0]
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 fd07 	bl	80087e6 <USBD_ClrFeature>
          break;
 8007dd8:	e004      	b.n	8007de4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007dda:	6839      	ldr	r1, [r7, #0]
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f000 fd5e 	bl	800889e <USBD_CtlError>
          break;
 8007de2:	bf00      	nop
      }
      break;
 8007de4:	e004      	b.n	8007df0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007de6:	6839      	ldr	r1, [r7, #0]
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f000 fd58 	bl	800889e <USBD_CtlError>
      break;
 8007dee:	bf00      	nop
  }

  return ret;
 8007df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3710      	adds	r7, #16
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}
 8007dfa:	bf00      	nop

08007dfc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b084      	sub	sp, #16
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e06:	2300      	movs	r3, #0
 8007e08:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e12:	2b40      	cmp	r3, #64	; 0x40
 8007e14:	d005      	beq.n	8007e22 <USBD_StdItfReq+0x26>
 8007e16:	2b40      	cmp	r3, #64	; 0x40
 8007e18:	d852      	bhi.n	8007ec0 <USBD_StdItfReq+0xc4>
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d001      	beq.n	8007e22 <USBD_StdItfReq+0x26>
 8007e1e:	2b20      	cmp	r3, #32
 8007e20:	d14e      	bne.n	8007ec0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e28:	b2db      	uxtb	r3, r3
 8007e2a:	3b01      	subs	r3, #1
 8007e2c:	2b02      	cmp	r3, #2
 8007e2e:	d840      	bhi.n	8007eb2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	889b      	ldrh	r3, [r3, #4]
 8007e34:	b2db      	uxtb	r3, r3
 8007e36:	2b01      	cmp	r3, #1
 8007e38:	d836      	bhi.n	8007ea8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	889b      	ldrh	r3, [r3, #4]
 8007e3e:	b2db      	uxtb	r3, r3
 8007e40:	4619      	mov	r1, r3
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f7ff fed9 	bl	8007bfa <USBD_CoreFindIF>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007e4c:	7bbb      	ldrb	r3, [r7, #14]
 8007e4e:	2bff      	cmp	r3, #255	; 0xff
 8007e50:	d01d      	beq.n	8007e8e <USBD_StdItfReq+0x92>
 8007e52:	7bbb      	ldrb	r3, [r7, #14]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d11a      	bne.n	8007e8e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007e58:	7bba      	ldrb	r2, [r7, #14]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	32ae      	adds	r2, #174	; 0xae
 8007e5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e62:	689b      	ldr	r3, [r3, #8]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d00f      	beq.n	8007e88 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007e68:	7bba      	ldrb	r2, [r7, #14]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007e70:	7bba      	ldrb	r2, [r7, #14]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	32ae      	adds	r2, #174	; 0xae
 8007e76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e7a:	689b      	ldr	r3, [r3, #8]
 8007e7c:	6839      	ldr	r1, [r7, #0]
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	4798      	blx	r3
 8007e82:	4603      	mov	r3, r0
 8007e84:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007e86:	e004      	b.n	8007e92 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007e88:	2303      	movs	r3, #3
 8007e8a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007e8c:	e001      	b.n	8007e92 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007e8e:	2303      	movs	r3, #3
 8007e90:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	88db      	ldrh	r3, [r3, #6]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d110      	bne.n	8007ebc <USBD_StdItfReq+0xc0>
 8007e9a:	7bfb      	ldrb	r3, [r7, #15]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d10d      	bne.n	8007ebc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f000 fdc7 	bl	8008a34 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007ea6:	e009      	b.n	8007ebc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007ea8:	6839      	ldr	r1, [r7, #0]
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 fcf7 	bl	800889e <USBD_CtlError>
          break;
 8007eb0:	e004      	b.n	8007ebc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007eb2:	6839      	ldr	r1, [r7, #0]
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f000 fcf2 	bl	800889e <USBD_CtlError>
          break;
 8007eba:	e000      	b.n	8007ebe <USBD_StdItfReq+0xc2>
          break;
 8007ebc:	bf00      	nop
      }
      break;
 8007ebe:	e004      	b.n	8007eca <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007ec0:	6839      	ldr	r1, [r7, #0]
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f000 fceb 	bl	800889e <USBD_CtlError>
      break;
 8007ec8:	bf00      	nop
  }

  return ret;
 8007eca:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3710      	adds	r7, #16
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}

08007ed4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b084      	sub	sp, #16
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
 8007edc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	889b      	ldrh	r3, [r3, #4]
 8007ee6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	781b      	ldrb	r3, [r3, #0]
 8007eec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ef0:	2b40      	cmp	r3, #64	; 0x40
 8007ef2:	d007      	beq.n	8007f04 <USBD_StdEPReq+0x30>
 8007ef4:	2b40      	cmp	r3, #64	; 0x40
 8007ef6:	f200 817f 	bhi.w	80081f8 <USBD_StdEPReq+0x324>
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d02a      	beq.n	8007f54 <USBD_StdEPReq+0x80>
 8007efe:	2b20      	cmp	r3, #32
 8007f00:	f040 817a 	bne.w	80081f8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007f04:	7bbb      	ldrb	r3, [r7, #14]
 8007f06:	4619      	mov	r1, r3
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f7ff fe83 	bl	8007c14 <USBD_CoreFindEP>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007f12:	7b7b      	ldrb	r3, [r7, #13]
 8007f14:	2bff      	cmp	r3, #255	; 0xff
 8007f16:	f000 8174 	beq.w	8008202 <USBD_StdEPReq+0x32e>
 8007f1a:	7b7b      	ldrb	r3, [r7, #13]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	f040 8170 	bne.w	8008202 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007f22:	7b7a      	ldrb	r2, [r7, #13]
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007f2a:	7b7a      	ldrb	r2, [r7, #13]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	32ae      	adds	r2, #174	; 0xae
 8007f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f34:	689b      	ldr	r3, [r3, #8]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	f000 8163 	beq.w	8008202 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007f3c:	7b7a      	ldrb	r2, [r7, #13]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	32ae      	adds	r2, #174	; 0xae
 8007f42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f46:	689b      	ldr	r3, [r3, #8]
 8007f48:	6839      	ldr	r1, [r7, #0]
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	4798      	blx	r3
 8007f4e:	4603      	mov	r3, r0
 8007f50:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007f52:	e156      	b.n	8008202 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	785b      	ldrb	r3, [r3, #1]
 8007f58:	2b03      	cmp	r3, #3
 8007f5a:	d008      	beq.n	8007f6e <USBD_StdEPReq+0x9a>
 8007f5c:	2b03      	cmp	r3, #3
 8007f5e:	f300 8145 	bgt.w	80081ec <USBD_StdEPReq+0x318>
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	f000 809b 	beq.w	800809e <USBD_StdEPReq+0x1ca>
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	d03c      	beq.n	8007fe6 <USBD_StdEPReq+0x112>
 8007f6c:	e13e      	b.n	80081ec <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f74:	b2db      	uxtb	r3, r3
 8007f76:	2b02      	cmp	r3, #2
 8007f78:	d002      	beq.n	8007f80 <USBD_StdEPReq+0xac>
 8007f7a:	2b03      	cmp	r3, #3
 8007f7c:	d016      	beq.n	8007fac <USBD_StdEPReq+0xd8>
 8007f7e:	e02c      	b.n	8007fda <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f80:	7bbb      	ldrb	r3, [r7, #14]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d00d      	beq.n	8007fa2 <USBD_StdEPReq+0xce>
 8007f86:	7bbb      	ldrb	r3, [r7, #14]
 8007f88:	2b80      	cmp	r3, #128	; 0x80
 8007f8a:	d00a      	beq.n	8007fa2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007f8c:	7bbb      	ldrb	r3, [r7, #14]
 8007f8e:	4619      	mov	r1, r3
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f002 fb31 	bl	800a5f8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f96:	2180      	movs	r1, #128	; 0x80
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f002 fb2d 	bl	800a5f8 <USBD_LL_StallEP>
 8007f9e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007fa0:	e020      	b.n	8007fe4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007fa2:	6839      	ldr	r1, [r7, #0]
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f000 fc7a 	bl	800889e <USBD_CtlError>
              break;
 8007faa:	e01b      	b.n	8007fe4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	885b      	ldrh	r3, [r3, #2]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d10e      	bne.n	8007fd2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007fb4:	7bbb      	ldrb	r3, [r7, #14]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d00b      	beq.n	8007fd2 <USBD_StdEPReq+0xfe>
 8007fba:	7bbb      	ldrb	r3, [r7, #14]
 8007fbc:	2b80      	cmp	r3, #128	; 0x80
 8007fbe:	d008      	beq.n	8007fd2 <USBD_StdEPReq+0xfe>
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	88db      	ldrh	r3, [r3, #6]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d104      	bne.n	8007fd2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007fc8:	7bbb      	ldrb	r3, [r7, #14]
 8007fca:	4619      	mov	r1, r3
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f002 fb13 	bl	800a5f8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f000 fd2e 	bl	8008a34 <USBD_CtlSendStatus>

              break;
 8007fd8:	e004      	b.n	8007fe4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007fda:	6839      	ldr	r1, [r7, #0]
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f000 fc5e 	bl	800889e <USBD_CtlError>
              break;
 8007fe2:	bf00      	nop
          }
          break;
 8007fe4:	e107      	b.n	80081f6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fec:	b2db      	uxtb	r3, r3
 8007fee:	2b02      	cmp	r3, #2
 8007ff0:	d002      	beq.n	8007ff8 <USBD_StdEPReq+0x124>
 8007ff2:	2b03      	cmp	r3, #3
 8007ff4:	d016      	beq.n	8008024 <USBD_StdEPReq+0x150>
 8007ff6:	e04b      	b.n	8008090 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ff8:	7bbb      	ldrb	r3, [r7, #14]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d00d      	beq.n	800801a <USBD_StdEPReq+0x146>
 8007ffe:	7bbb      	ldrb	r3, [r7, #14]
 8008000:	2b80      	cmp	r3, #128	; 0x80
 8008002:	d00a      	beq.n	800801a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008004:	7bbb      	ldrb	r3, [r7, #14]
 8008006:	4619      	mov	r1, r3
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f002 faf5 	bl	800a5f8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800800e:	2180      	movs	r1, #128	; 0x80
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f002 faf1 	bl	800a5f8 <USBD_LL_StallEP>
 8008016:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008018:	e040      	b.n	800809c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800801a:	6839      	ldr	r1, [r7, #0]
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f000 fc3e 	bl	800889e <USBD_CtlError>
              break;
 8008022:	e03b      	b.n	800809c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	885b      	ldrh	r3, [r3, #2]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d136      	bne.n	800809a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800802c:	7bbb      	ldrb	r3, [r7, #14]
 800802e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008032:	2b00      	cmp	r3, #0
 8008034:	d004      	beq.n	8008040 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008036:	7bbb      	ldrb	r3, [r7, #14]
 8008038:	4619      	mov	r1, r3
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f002 fafb 	bl	800a636 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f000 fcf7 	bl	8008a34 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008046:	7bbb      	ldrb	r3, [r7, #14]
 8008048:	4619      	mov	r1, r3
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f7ff fde2 	bl	8007c14 <USBD_CoreFindEP>
 8008050:	4603      	mov	r3, r0
 8008052:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008054:	7b7b      	ldrb	r3, [r7, #13]
 8008056:	2bff      	cmp	r3, #255	; 0xff
 8008058:	d01f      	beq.n	800809a <USBD_StdEPReq+0x1c6>
 800805a:	7b7b      	ldrb	r3, [r7, #13]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d11c      	bne.n	800809a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008060:	7b7a      	ldrb	r2, [r7, #13]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008068:	7b7a      	ldrb	r2, [r7, #13]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	32ae      	adds	r2, #174	; 0xae
 800806e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008072:	689b      	ldr	r3, [r3, #8]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d010      	beq.n	800809a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008078:	7b7a      	ldrb	r2, [r7, #13]
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	32ae      	adds	r2, #174	; 0xae
 800807e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008082:	689b      	ldr	r3, [r3, #8]
 8008084:	6839      	ldr	r1, [r7, #0]
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	4798      	blx	r3
 800808a:	4603      	mov	r3, r0
 800808c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800808e:	e004      	b.n	800809a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008090:	6839      	ldr	r1, [r7, #0]
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f000 fc03 	bl	800889e <USBD_CtlError>
              break;
 8008098:	e000      	b.n	800809c <USBD_StdEPReq+0x1c8>
              break;
 800809a:	bf00      	nop
          }
          break;
 800809c:	e0ab      	b.n	80081f6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080a4:	b2db      	uxtb	r3, r3
 80080a6:	2b02      	cmp	r3, #2
 80080a8:	d002      	beq.n	80080b0 <USBD_StdEPReq+0x1dc>
 80080aa:	2b03      	cmp	r3, #3
 80080ac:	d032      	beq.n	8008114 <USBD_StdEPReq+0x240>
 80080ae:	e097      	b.n	80081e0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80080b0:	7bbb      	ldrb	r3, [r7, #14]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d007      	beq.n	80080c6 <USBD_StdEPReq+0x1f2>
 80080b6:	7bbb      	ldrb	r3, [r7, #14]
 80080b8:	2b80      	cmp	r3, #128	; 0x80
 80080ba:	d004      	beq.n	80080c6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80080bc:	6839      	ldr	r1, [r7, #0]
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f000 fbed 	bl	800889e <USBD_CtlError>
                break;
 80080c4:	e091      	b.n	80081ea <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80080c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	da0b      	bge.n	80080e6 <USBD_StdEPReq+0x212>
 80080ce:	7bbb      	ldrb	r3, [r7, #14]
 80080d0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80080d4:	4613      	mov	r3, r2
 80080d6:	009b      	lsls	r3, r3, #2
 80080d8:	4413      	add	r3, r2
 80080da:	009b      	lsls	r3, r3, #2
 80080dc:	3310      	adds	r3, #16
 80080de:	687a      	ldr	r2, [r7, #4]
 80080e0:	4413      	add	r3, r2
 80080e2:	3304      	adds	r3, #4
 80080e4:	e00b      	b.n	80080fe <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80080e6:	7bbb      	ldrb	r3, [r7, #14]
 80080e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80080ec:	4613      	mov	r3, r2
 80080ee:	009b      	lsls	r3, r3, #2
 80080f0:	4413      	add	r3, r2
 80080f2:	009b      	lsls	r3, r3, #2
 80080f4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80080f8:	687a      	ldr	r2, [r7, #4]
 80080fa:	4413      	add	r3, r2
 80080fc:	3304      	adds	r3, #4
 80080fe:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	2200      	movs	r2, #0
 8008104:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	2202      	movs	r2, #2
 800810a:	4619      	mov	r1, r3
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f000 fc37 	bl	8008980 <USBD_CtlSendData>
              break;
 8008112:	e06a      	b.n	80081ea <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008114:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008118:	2b00      	cmp	r3, #0
 800811a:	da11      	bge.n	8008140 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800811c:	7bbb      	ldrb	r3, [r7, #14]
 800811e:	f003 020f 	and.w	r2, r3, #15
 8008122:	6879      	ldr	r1, [r7, #4]
 8008124:	4613      	mov	r3, r2
 8008126:	009b      	lsls	r3, r3, #2
 8008128:	4413      	add	r3, r2
 800812a:	009b      	lsls	r3, r3, #2
 800812c:	440b      	add	r3, r1
 800812e:	3324      	adds	r3, #36	; 0x24
 8008130:	881b      	ldrh	r3, [r3, #0]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d117      	bne.n	8008166 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008136:	6839      	ldr	r1, [r7, #0]
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f000 fbb0 	bl	800889e <USBD_CtlError>
                  break;
 800813e:	e054      	b.n	80081ea <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008140:	7bbb      	ldrb	r3, [r7, #14]
 8008142:	f003 020f 	and.w	r2, r3, #15
 8008146:	6879      	ldr	r1, [r7, #4]
 8008148:	4613      	mov	r3, r2
 800814a:	009b      	lsls	r3, r3, #2
 800814c:	4413      	add	r3, r2
 800814e:	009b      	lsls	r3, r3, #2
 8008150:	440b      	add	r3, r1
 8008152:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008156:	881b      	ldrh	r3, [r3, #0]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d104      	bne.n	8008166 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800815c:	6839      	ldr	r1, [r7, #0]
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f000 fb9d 	bl	800889e <USBD_CtlError>
                  break;
 8008164:	e041      	b.n	80081ea <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008166:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800816a:	2b00      	cmp	r3, #0
 800816c:	da0b      	bge.n	8008186 <USBD_StdEPReq+0x2b2>
 800816e:	7bbb      	ldrb	r3, [r7, #14]
 8008170:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008174:	4613      	mov	r3, r2
 8008176:	009b      	lsls	r3, r3, #2
 8008178:	4413      	add	r3, r2
 800817a:	009b      	lsls	r3, r3, #2
 800817c:	3310      	adds	r3, #16
 800817e:	687a      	ldr	r2, [r7, #4]
 8008180:	4413      	add	r3, r2
 8008182:	3304      	adds	r3, #4
 8008184:	e00b      	b.n	800819e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008186:	7bbb      	ldrb	r3, [r7, #14]
 8008188:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800818c:	4613      	mov	r3, r2
 800818e:	009b      	lsls	r3, r3, #2
 8008190:	4413      	add	r3, r2
 8008192:	009b      	lsls	r3, r3, #2
 8008194:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008198:	687a      	ldr	r2, [r7, #4]
 800819a:	4413      	add	r3, r2
 800819c:	3304      	adds	r3, #4
 800819e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80081a0:	7bbb      	ldrb	r3, [r7, #14]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d002      	beq.n	80081ac <USBD_StdEPReq+0x2d8>
 80081a6:	7bbb      	ldrb	r3, [r7, #14]
 80081a8:	2b80      	cmp	r3, #128	; 0x80
 80081aa:	d103      	bne.n	80081b4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	2200      	movs	r2, #0
 80081b0:	601a      	str	r2, [r3, #0]
 80081b2:	e00e      	b.n	80081d2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80081b4:	7bbb      	ldrb	r3, [r7, #14]
 80081b6:	4619      	mov	r1, r3
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f002 fa5b 	bl	800a674 <USBD_LL_IsStallEP>
 80081be:	4603      	mov	r3, r0
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d003      	beq.n	80081cc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	2201      	movs	r2, #1
 80081c8:	601a      	str	r2, [r3, #0]
 80081ca:	e002      	b.n	80081d2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	2200      	movs	r2, #0
 80081d0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	2202      	movs	r2, #2
 80081d6:	4619      	mov	r1, r3
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f000 fbd1 	bl	8008980 <USBD_CtlSendData>
              break;
 80081de:	e004      	b.n	80081ea <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80081e0:	6839      	ldr	r1, [r7, #0]
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f000 fb5b 	bl	800889e <USBD_CtlError>
              break;
 80081e8:	bf00      	nop
          }
          break;
 80081ea:	e004      	b.n	80081f6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80081ec:	6839      	ldr	r1, [r7, #0]
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f000 fb55 	bl	800889e <USBD_CtlError>
          break;
 80081f4:	bf00      	nop
      }
      break;
 80081f6:	e005      	b.n	8008204 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80081f8:	6839      	ldr	r1, [r7, #0]
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f000 fb4f 	bl	800889e <USBD_CtlError>
      break;
 8008200:	e000      	b.n	8008204 <USBD_StdEPReq+0x330>
      break;
 8008202:	bf00      	nop
  }

  return ret;
 8008204:	7bfb      	ldrb	r3, [r7, #15]
}
 8008206:	4618      	mov	r0, r3
 8008208:	3710      	adds	r7, #16
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}
	...

08008210 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b084      	sub	sp, #16
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800821a:	2300      	movs	r3, #0
 800821c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800821e:	2300      	movs	r3, #0
 8008220:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008222:	2300      	movs	r3, #0
 8008224:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	885b      	ldrh	r3, [r3, #2]
 800822a:	0a1b      	lsrs	r3, r3, #8
 800822c:	b29b      	uxth	r3, r3
 800822e:	3b01      	subs	r3, #1
 8008230:	2b06      	cmp	r3, #6
 8008232:	f200 8128 	bhi.w	8008486 <USBD_GetDescriptor+0x276>
 8008236:	a201      	add	r2, pc, #4	; (adr r2, 800823c <USBD_GetDescriptor+0x2c>)
 8008238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800823c:	08008259 	.word	0x08008259
 8008240:	08008271 	.word	0x08008271
 8008244:	080082b1 	.word	0x080082b1
 8008248:	08008487 	.word	0x08008487
 800824c:	08008487 	.word	0x08008487
 8008250:	08008427 	.word	0x08008427
 8008254:	08008453 	.word	0x08008453
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	687a      	ldr	r2, [r7, #4]
 8008262:	7c12      	ldrb	r2, [r2, #16]
 8008264:	f107 0108 	add.w	r1, r7, #8
 8008268:	4610      	mov	r0, r2
 800826a:	4798      	blx	r3
 800826c:	60f8      	str	r0, [r7, #12]
      break;
 800826e:	e112      	b.n	8008496 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	7c1b      	ldrb	r3, [r3, #16]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d10d      	bne.n	8008294 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800827e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008280:	f107 0208 	add.w	r2, r7, #8
 8008284:	4610      	mov	r0, r2
 8008286:	4798      	blx	r3
 8008288:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	3301      	adds	r3, #1
 800828e:	2202      	movs	r2, #2
 8008290:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008292:	e100      	b.n	8008496 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800829a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800829c:	f107 0208 	add.w	r2, r7, #8
 80082a0:	4610      	mov	r0, r2
 80082a2:	4798      	blx	r3
 80082a4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	3301      	adds	r3, #1
 80082aa:	2202      	movs	r2, #2
 80082ac:	701a      	strb	r2, [r3, #0]
      break;
 80082ae:	e0f2      	b.n	8008496 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	885b      	ldrh	r3, [r3, #2]
 80082b4:	b2db      	uxtb	r3, r3
 80082b6:	2b05      	cmp	r3, #5
 80082b8:	f200 80ac 	bhi.w	8008414 <USBD_GetDescriptor+0x204>
 80082bc:	a201      	add	r2, pc, #4	; (adr r2, 80082c4 <USBD_GetDescriptor+0xb4>)
 80082be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082c2:	bf00      	nop
 80082c4:	080082dd 	.word	0x080082dd
 80082c8:	08008311 	.word	0x08008311
 80082cc:	08008345 	.word	0x08008345
 80082d0:	08008379 	.word	0x08008379
 80082d4:	080083ad 	.word	0x080083ad
 80082d8:	080083e1 	.word	0x080083e1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d00b      	beq.n	8008300 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082ee:	685b      	ldr	r3, [r3, #4]
 80082f0:	687a      	ldr	r2, [r7, #4]
 80082f2:	7c12      	ldrb	r2, [r2, #16]
 80082f4:	f107 0108 	add.w	r1, r7, #8
 80082f8:	4610      	mov	r0, r2
 80082fa:	4798      	blx	r3
 80082fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082fe:	e091      	b.n	8008424 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008300:	6839      	ldr	r1, [r7, #0]
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f000 facb 	bl	800889e <USBD_CtlError>
            err++;
 8008308:	7afb      	ldrb	r3, [r7, #11]
 800830a:	3301      	adds	r3, #1
 800830c:	72fb      	strb	r3, [r7, #11]
          break;
 800830e:	e089      	b.n	8008424 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008316:	689b      	ldr	r3, [r3, #8]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d00b      	beq.n	8008334 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008322:	689b      	ldr	r3, [r3, #8]
 8008324:	687a      	ldr	r2, [r7, #4]
 8008326:	7c12      	ldrb	r2, [r2, #16]
 8008328:	f107 0108 	add.w	r1, r7, #8
 800832c:	4610      	mov	r0, r2
 800832e:	4798      	blx	r3
 8008330:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008332:	e077      	b.n	8008424 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008334:	6839      	ldr	r1, [r7, #0]
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f000 fab1 	bl	800889e <USBD_CtlError>
            err++;
 800833c:	7afb      	ldrb	r3, [r7, #11]
 800833e:	3301      	adds	r3, #1
 8008340:	72fb      	strb	r3, [r7, #11]
          break;
 8008342:	e06f      	b.n	8008424 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800834a:	68db      	ldr	r3, [r3, #12]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d00b      	beq.n	8008368 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008356:	68db      	ldr	r3, [r3, #12]
 8008358:	687a      	ldr	r2, [r7, #4]
 800835a:	7c12      	ldrb	r2, [r2, #16]
 800835c:	f107 0108 	add.w	r1, r7, #8
 8008360:	4610      	mov	r0, r2
 8008362:	4798      	blx	r3
 8008364:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008366:	e05d      	b.n	8008424 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008368:	6839      	ldr	r1, [r7, #0]
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 fa97 	bl	800889e <USBD_CtlError>
            err++;
 8008370:	7afb      	ldrb	r3, [r7, #11]
 8008372:	3301      	adds	r3, #1
 8008374:	72fb      	strb	r3, [r7, #11]
          break;
 8008376:	e055      	b.n	8008424 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800837e:	691b      	ldr	r3, [r3, #16]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d00b      	beq.n	800839c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800838a:	691b      	ldr	r3, [r3, #16]
 800838c:	687a      	ldr	r2, [r7, #4]
 800838e:	7c12      	ldrb	r2, [r2, #16]
 8008390:	f107 0108 	add.w	r1, r7, #8
 8008394:	4610      	mov	r0, r2
 8008396:	4798      	blx	r3
 8008398:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800839a:	e043      	b.n	8008424 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800839c:	6839      	ldr	r1, [r7, #0]
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f000 fa7d 	bl	800889e <USBD_CtlError>
            err++;
 80083a4:	7afb      	ldrb	r3, [r7, #11]
 80083a6:	3301      	adds	r3, #1
 80083a8:	72fb      	strb	r3, [r7, #11]
          break;
 80083aa:	e03b      	b.n	8008424 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083b2:	695b      	ldr	r3, [r3, #20]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d00b      	beq.n	80083d0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083be:	695b      	ldr	r3, [r3, #20]
 80083c0:	687a      	ldr	r2, [r7, #4]
 80083c2:	7c12      	ldrb	r2, [r2, #16]
 80083c4:	f107 0108 	add.w	r1, r7, #8
 80083c8:	4610      	mov	r0, r2
 80083ca:	4798      	blx	r3
 80083cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083ce:	e029      	b.n	8008424 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083d0:	6839      	ldr	r1, [r7, #0]
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f000 fa63 	bl	800889e <USBD_CtlError>
            err++;
 80083d8:	7afb      	ldrb	r3, [r7, #11]
 80083da:	3301      	adds	r3, #1
 80083dc:	72fb      	strb	r3, [r7, #11]
          break;
 80083de:	e021      	b.n	8008424 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083e6:	699b      	ldr	r3, [r3, #24]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d00b      	beq.n	8008404 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083f2:	699b      	ldr	r3, [r3, #24]
 80083f4:	687a      	ldr	r2, [r7, #4]
 80083f6:	7c12      	ldrb	r2, [r2, #16]
 80083f8:	f107 0108 	add.w	r1, r7, #8
 80083fc:	4610      	mov	r0, r2
 80083fe:	4798      	blx	r3
 8008400:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008402:	e00f      	b.n	8008424 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008404:	6839      	ldr	r1, [r7, #0]
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f000 fa49 	bl	800889e <USBD_CtlError>
            err++;
 800840c:	7afb      	ldrb	r3, [r7, #11]
 800840e:	3301      	adds	r3, #1
 8008410:	72fb      	strb	r3, [r7, #11]
          break;
 8008412:	e007      	b.n	8008424 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008414:	6839      	ldr	r1, [r7, #0]
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f000 fa41 	bl	800889e <USBD_CtlError>
          err++;
 800841c:	7afb      	ldrb	r3, [r7, #11]
 800841e:	3301      	adds	r3, #1
 8008420:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008422:	bf00      	nop
      }
      break;
 8008424:	e037      	b.n	8008496 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	7c1b      	ldrb	r3, [r3, #16]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d109      	bne.n	8008442 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008436:	f107 0208 	add.w	r2, r7, #8
 800843a:	4610      	mov	r0, r2
 800843c:	4798      	blx	r3
 800843e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008440:	e029      	b.n	8008496 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008442:	6839      	ldr	r1, [r7, #0]
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f000 fa2a 	bl	800889e <USBD_CtlError>
        err++;
 800844a:	7afb      	ldrb	r3, [r7, #11]
 800844c:	3301      	adds	r3, #1
 800844e:	72fb      	strb	r3, [r7, #11]
      break;
 8008450:	e021      	b.n	8008496 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	7c1b      	ldrb	r3, [r3, #16]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d10d      	bne.n	8008476 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008462:	f107 0208 	add.w	r2, r7, #8
 8008466:	4610      	mov	r0, r2
 8008468:	4798      	blx	r3
 800846a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	3301      	adds	r3, #1
 8008470:	2207      	movs	r2, #7
 8008472:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008474:	e00f      	b.n	8008496 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008476:	6839      	ldr	r1, [r7, #0]
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f000 fa10 	bl	800889e <USBD_CtlError>
        err++;
 800847e:	7afb      	ldrb	r3, [r7, #11]
 8008480:	3301      	adds	r3, #1
 8008482:	72fb      	strb	r3, [r7, #11]
      break;
 8008484:	e007      	b.n	8008496 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008486:	6839      	ldr	r1, [r7, #0]
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f000 fa08 	bl	800889e <USBD_CtlError>
      err++;
 800848e:	7afb      	ldrb	r3, [r7, #11]
 8008490:	3301      	adds	r3, #1
 8008492:	72fb      	strb	r3, [r7, #11]
      break;
 8008494:	bf00      	nop
  }

  if (err != 0U)
 8008496:	7afb      	ldrb	r3, [r7, #11]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d11e      	bne.n	80084da <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	88db      	ldrh	r3, [r3, #6]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d016      	beq.n	80084d2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80084a4:	893b      	ldrh	r3, [r7, #8]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d00e      	beq.n	80084c8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	88da      	ldrh	r2, [r3, #6]
 80084ae:	893b      	ldrh	r3, [r7, #8]
 80084b0:	4293      	cmp	r3, r2
 80084b2:	bf28      	it	cs
 80084b4:	4613      	movcs	r3, r2
 80084b6:	b29b      	uxth	r3, r3
 80084b8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80084ba:	893b      	ldrh	r3, [r7, #8]
 80084bc:	461a      	mov	r2, r3
 80084be:	68f9      	ldr	r1, [r7, #12]
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f000 fa5d 	bl	8008980 <USBD_CtlSendData>
 80084c6:	e009      	b.n	80084dc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80084c8:	6839      	ldr	r1, [r7, #0]
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f000 f9e7 	bl	800889e <USBD_CtlError>
 80084d0:	e004      	b.n	80084dc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f000 faae 	bl	8008a34 <USBD_CtlSendStatus>
 80084d8:	e000      	b.n	80084dc <USBD_GetDescriptor+0x2cc>
    return;
 80084da:	bf00      	nop
  }
}
 80084dc:	3710      	adds	r7, #16
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}
 80084e2:	bf00      	nop

080084e4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b084      	sub	sp, #16
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
 80084ec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	889b      	ldrh	r3, [r3, #4]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d131      	bne.n	800855a <USBD_SetAddress+0x76>
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	88db      	ldrh	r3, [r3, #6]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d12d      	bne.n	800855a <USBD_SetAddress+0x76>
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	885b      	ldrh	r3, [r3, #2]
 8008502:	2b7f      	cmp	r3, #127	; 0x7f
 8008504:	d829      	bhi.n	800855a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	885b      	ldrh	r3, [r3, #2]
 800850a:	b2db      	uxtb	r3, r3
 800850c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008510:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008518:	b2db      	uxtb	r3, r3
 800851a:	2b03      	cmp	r3, #3
 800851c:	d104      	bne.n	8008528 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800851e:	6839      	ldr	r1, [r7, #0]
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f000 f9bc 	bl	800889e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008526:	e01d      	b.n	8008564 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	7bfa      	ldrb	r2, [r7, #15]
 800852c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008530:	7bfb      	ldrb	r3, [r7, #15]
 8008532:	4619      	mov	r1, r3
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f002 f8c9 	bl	800a6cc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f000 fa7a 	bl	8008a34 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008540:	7bfb      	ldrb	r3, [r7, #15]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d004      	beq.n	8008550 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2202      	movs	r2, #2
 800854a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800854e:	e009      	b.n	8008564 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2201      	movs	r2, #1
 8008554:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008558:	e004      	b.n	8008564 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800855a:	6839      	ldr	r1, [r7, #0]
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f000 f99e 	bl	800889e <USBD_CtlError>
  }
}
 8008562:	bf00      	nop
 8008564:	bf00      	nop
 8008566:	3710      	adds	r7, #16
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}

0800856c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b084      	sub	sp, #16
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008576:	2300      	movs	r3, #0
 8008578:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	885b      	ldrh	r3, [r3, #2]
 800857e:	b2da      	uxtb	r2, r3
 8008580:	4b4e      	ldr	r3, [pc, #312]	; (80086bc <USBD_SetConfig+0x150>)
 8008582:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008584:	4b4d      	ldr	r3, [pc, #308]	; (80086bc <USBD_SetConfig+0x150>)
 8008586:	781b      	ldrb	r3, [r3, #0]
 8008588:	2b01      	cmp	r3, #1
 800858a:	d905      	bls.n	8008598 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800858c:	6839      	ldr	r1, [r7, #0]
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f000 f985 	bl	800889e <USBD_CtlError>
    return USBD_FAIL;
 8008594:	2303      	movs	r3, #3
 8008596:	e08c      	b.n	80086b2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800859e:	b2db      	uxtb	r3, r3
 80085a0:	2b02      	cmp	r3, #2
 80085a2:	d002      	beq.n	80085aa <USBD_SetConfig+0x3e>
 80085a4:	2b03      	cmp	r3, #3
 80085a6:	d029      	beq.n	80085fc <USBD_SetConfig+0x90>
 80085a8:	e075      	b.n	8008696 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80085aa:	4b44      	ldr	r3, [pc, #272]	; (80086bc <USBD_SetConfig+0x150>)
 80085ac:	781b      	ldrb	r3, [r3, #0]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d020      	beq.n	80085f4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80085b2:	4b42      	ldr	r3, [pc, #264]	; (80086bc <USBD_SetConfig+0x150>)
 80085b4:	781b      	ldrb	r3, [r3, #0]
 80085b6:	461a      	mov	r2, r3
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80085bc:	4b3f      	ldr	r3, [pc, #252]	; (80086bc <USBD_SetConfig+0x150>)
 80085be:	781b      	ldrb	r3, [r3, #0]
 80085c0:	4619      	mov	r1, r3
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f7fe ffe1 	bl	800758a <USBD_SetClassConfig>
 80085c8:	4603      	mov	r3, r0
 80085ca:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80085cc:	7bfb      	ldrb	r3, [r7, #15]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d008      	beq.n	80085e4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80085d2:	6839      	ldr	r1, [r7, #0]
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	f000 f962 	bl	800889e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2202      	movs	r2, #2
 80085de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80085e2:	e065      	b.n	80086b0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f000 fa25 	bl	8008a34 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2203      	movs	r2, #3
 80085ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80085f2:	e05d      	b.n	80086b0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f000 fa1d 	bl	8008a34 <USBD_CtlSendStatus>
      break;
 80085fa:	e059      	b.n	80086b0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80085fc:	4b2f      	ldr	r3, [pc, #188]	; (80086bc <USBD_SetConfig+0x150>)
 80085fe:	781b      	ldrb	r3, [r3, #0]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d112      	bne.n	800862a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2202      	movs	r2, #2
 8008608:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800860c:	4b2b      	ldr	r3, [pc, #172]	; (80086bc <USBD_SetConfig+0x150>)
 800860e:	781b      	ldrb	r3, [r3, #0]
 8008610:	461a      	mov	r2, r3
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008616:	4b29      	ldr	r3, [pc, #164]	; (80086bc <USBD_SetConfig+0x150>)
 8008618:	781b      	ldrb	r3, [r3, #0]
 800861a:	4619      	mov	r1, r3
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f7fe ffd0 	bl	80075c2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f000 fa06 	bl	8008a34 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008628:	e042      	b.n	80086b0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800862a:	4b24      	ldr	r3, [pc, #144]	; (80086bc <USBD_SetConfig+0x150>)
 800862c:	781b      	ldrb	r3, [r3, #0]
 800862e:	461a      	mov	r2, r3
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	685b      	ldr	r3, [r3, #4]
 8008634:	429a      	cmp	r2, r3
 8008636:	d02a      	beq.n	800868e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	685b      	ldr	r3, [r3, #4]
 800863c:	b2db      	uxtb	r3, r3
 800863e:	4619      	mov	r1, r3
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f7fe ffbe 	bl	80075c2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008646:	4b1d      	ldr	r3, [pc, #116]	; (80086bc <USBD_SetConfig+0x150>)
 8008648:	781b      	ldrb	r3, [r3, #0]
 800864a:	461a      	mov	r2, r3
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008650:	4b1a      	ldr	r3, [pc, #104]	; (80086bc <USBD_SetConfig+0x150>)
 8008652:	781b      	ldrb	r3, [r3, #0]
 8008654:	4619      	mov	r1, r3
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f7fe ff97 	bl	800758a <USBD_SetClassConfig>
 800865c:	4603      	mov	r3, r0
 800865e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008660:	7bfb      	ldrb	r3, [r7, #15]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d00f      	beq.n	8008686 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008666:	6839      	ldr	r1, [r7, #0]
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f000 f918 	bl	800889e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	685b      	ldr	r3, [r3, #4]
 8008672:	b2db      	uxtb	r3, r3
 8008674:	4619      	mov	r1, r3
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f7fe ffa3 	bl	80075c2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2202      	movs	r2, #2
 8008680:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008684:	e014      	b.n	80086b0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f000 f9d4 	bl	8008a34 <USBD_CtlSendStatus>
      break;
 800868c:	e010      	b.n	80086b0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f000 f9d0 	bl	8008a34 <USBD_CtlSendStatus>
      break;
 8008694:	e00c      	b.n	80086b0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008696:	6839      	ldr	r1, [r7, #0]
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f000 f900 	bl	800889e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800869e:	4b07      	ldr	r3, [pc, #28]	; (80086bc <USBD_SetConfig+0x150>)
 80086a0:	781b      	ldrb	r3, [r3, #0]
 80086a2:	4619      	mov	r1, r3
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f7fe ff8c 	bl	80075c2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80086aa:	2303      	movs	r3, #3
 80086ac:	73fb      	strb	r3, [r7, #15]
      break;
 80086ae:	bf00      	nop
  }

  return ret;
 80086b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	3710      	adds	r7, #16
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}
 80086ba:	bf00      	nop
 80086bc:	2000035c 	.word	0x2000035c

080086c0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b082      	sub	sp, #8
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	88db      	ldrh	r3, [r3, #6]
 80086ce:	2b01      	cmp	r3, #1
 80086d0:	d004      	beq.n	80086dc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80086d2:	6839      	ldr	r1, [r7, #0]
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f000 f8e2 	bl	800889e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80086da:	e023      	b.n	8008724 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086e2:	b2db      	uxtb	r3, r3
 80086e4:	2b02      	cmp	r3, #2
 80086e6:	dc02      	bgt.n	80086ee <USBD_GetConfig+0x2e>
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	dc03      	bgt.n	80086f4 <USBD_GetConfig+0x34>
 80086ec:	e015      	b.n	800871a <USBD_GetConfig+0x5a>
 80086ee:	2b03      	cmp	r3, #3
 80086f0:	d00b      	beq.n	800870a <USBD_GetConfig+0x4a>
 80086f2:	e012      	b.n	800871a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2200      	movs	r2, #0
 80086f8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	3308      	adds	r3, #8
 80086fe:	2201      	movs	r2, #1
 8008700:	4619      	mov	r1, r3
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f000 f93c 	bl	8008980 <USBD_CtlSendData>
        break;
 8008708:	e00c      	b.n	8008724 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	3304      	adds	r3, #4
 800870e:	2201      	movs	r2, #1
 8008710:	4619      	mov	r1, r3
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f000 f934 	bl	8008980 <USBD_CtlSendData>
        break;
 8008718:	e004      	b.n	8008724 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800871a:	6839      	ldr	r1, [r7, #0]
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f000 f8be 	bl	800889e <USBD_CtlError>
        break;
 8008722:	bf00      	nop
}
 8008724:	bf00      	nop
 8008726:	3708      	adds	r7, #8
 8008728:	46bd      	mov	sp, r7
 800872a:	bd80      	pop	{r7, pc}

0800872c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b082      	sub	sp, #8
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
 8008734:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800873c:	b2db      	uxtb	r3, r3
 800873e:	3b01      	subs	r3, #1
 8008740:	2b02      	cmp	r3, #2
 8008742:	d81e      	bhi.n	8008782 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	88db      	ldrh	r3, [r3, #6]
 8008748:	2b02      	cmp	r3, #2
 800874a:	d004      	beq.n	8008756 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800874c:	6839      	ldr	r1, [r7, #0]
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f000 f8a5 	bl	800889e <USBD_CtlError>
        break;
 8008754:	e01a      	b.n	800878c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2201      	movs	r2, #1
 800875a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008762:	2b00      	cmp	r3, #0
 8008764:	d005      	beq.n	8008772 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	68db      	ldr	r3, [r3, #12]
 800876a:	f043 0202 	orr.w	r2, r3, #2
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	330c      	adds	r3, #12
 8008776:	2202      	movs	r2, #2
 8008778:	4619      	mov	r1, r3
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f000 f900 	bl	8008980 <USBD_CtlSendData>
      break;
 8008780:	e004      	b.n	800878c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008782:	6839      	ldr	r1, [r7, #0]
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f000 f88a 	bl	800889e <USBD_CtlError>
      break;
 800878a:	bf00      	nop
  }
}
 800878c:	bf00      	nop
 800878e:	3708      	adds	r7, #8
 8008790:	46bd      	mov	sp, r7
 8008792:	bd80      	pop	{r7, pc}

08008794 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b082      	sub	sp, #8
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
 800879c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	885b      	ldrh	r3, [r3, #2]
 80087a2:	2b01      	cmp	r3, #1
 80087a4:	d107      	bne.n	80087b6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2201      	movs	r2, #1
 80087aa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 f940 	bl	8008a34 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80087b4:	e013      	b.n	80087de <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	885b      	ldrh	r3, [r3, #2]
 80087ba:	2b02      	cmp	r3, #2
 80087bc:	d10b      	bne.n	80087d6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	889b      	ldrh	r3, [r3, #4]
 80087c2:	0a1b      	lsrs	r3, r3, #8
 80087c4:	b29b      	uxth	r3, r3
 80087c6:	b2da      	uxtb	r2, r3
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f000 f930 	bl	8008a34 <USBD_CtlSendStatus>
}
 80087d4:	e003      	b.n	80087de <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80087d6:	6839      	ldr	r1, [r7, #0]
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f000 f860 	bl	800889e <USBD_CtlError>
}
 80087de:	bf00      	nop
 80087e0:	3708      	adds	r7, #8
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}

080087e6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087e6:	b580      	push	{r7, lr}
 80087e8:	b082      	sub	sp, #8
 80087ea:	af00      	add	r7, sp, #0
 80087ec:	6078      	str	r0, [r7, #4]
 80087ee:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087f6:	b2db      	uxtb	r3, r3
 80087f8:	3b01      	subs	r3, #1
 80087fa:	2b02      	cmp	r3, #2
 80087fc:	d80b      	bhi.n	8008816 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	885b      	ldrh	r3, [r3, #2]
 8008802:	2b01      	cmp	r3, #1
 8008804:	d10c      	bne.n	8008820 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2200      	movs	r2, #0
 800880a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f000 f910 	bl	8008a34 <USBD_CtlSendStatus>
      }
      break;
 8008814:	e004      	b.n	8008820 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008816:	6839      	ldr	r1, [r7, #0]
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f000 f840 	bl	800889e <USBD_CtlError>
      break;
 800881e:	e000      	b.n	8008822 <USBD_ClrFeature+0x3c>
      break;
 8008820:	bf00      	nop
  }
}
 8008822:	bf00      	nop
 8008824:	3708      	adds	r7, #8
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}

0800882a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800882a:	b580      	push	{r7, lr}
 800882c:	b084      	sub	sp, #16
 800882e:	af00      	add	r7, sp, #0
 8008830:	6078      	str	r0, [r7, #4]
 8008832:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	781a      	ldrb	r2, [r3, #0]
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	3301      	adds	r3, #1
 8008844:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	781a      	ldrb	r2, [r3, #0]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	3301      	adds	r3, #1
 8008852:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008854:	68f8      	ldr	r0, [r7, #12]
 8008856:	f7ff fa41 	bl	8007cdc <SWAPBYTE>
 800885a:	4603      	mov	r3, r0
 800885c:	461a      	mov	r2, r3
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	3301      	adds	r3, #1
 8008866:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	3301      	adds	r3, #1
 800886c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800886e:	68f8      	ldr	r0, [r7, #12]
 8008870:	f7ff fa34 	bl	8007cdc <SWAPBYTE>
 8008874:	4603      	mov	r3, r0
 8008876:	461a      	mov	r2, r3
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	3301      	adds	r3, #1
 8008880:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	3301      	adds	r3, #1
 8008886:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008888:	68f8      	ldr	r0, [r7, #12]
 800888a:	f7ff fa27 	bl	8007cdc <SWAPBYTE>
 800888e:	4603      	mov	r3, r0
 8008890:	461a      	mov	r2, r3
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	80da      	strh	r2, [r3, #6]
}
 8008896:	bf00      	nop
 8008898:	3710      	adds	r7, #16
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}

0800889e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800889e:	b580      	push	{r7, lr}
 80088a0:	b082      	sub	sp, #8
 80088a2:	af00      	add	r7, sp, #0
 80088a4:	6078      	str	r0, [r7, #4]
 80088a6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80088a8:	2180      	movs	r1, #128	; 0x80
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f001 fea4 	bl	800a5f8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80088b0:	2100      	movs	r1, #0
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f001 fea0 	bl	800a5f8 <USBD_LL_StallEP>
}
 80088b8:	bf00      	nop
 80088ba:	3708      	adds	r7, #8
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}

080088c0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b086      	sub	sp, #24
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	60f8      	str	r0, [r7, #12]
 80088c8:	60b9      	str	r1, [r7, #8]
 80088ca:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80088cc:	2300      	movs	r3, #0
 80088ce:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d036      	beq.n	8008944 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80088da:	6938      	ldr	r0, [r7, #16]
 80088dc:	f000 f836 	bl	800894c <USBD_GetLen>
 80088e0:	4603      	mov	r3, r0
 80088e2:	3301      	adds	r3, #1
 80088e4:	b29b      	uxth	r3, r3
 80088e6:	005b      	lsls	r3, r3, #1
 80088e8:	b29a      	uxth	r2, r3
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80088ee:	7dfb      	ldrb	r3, [r7, #23]
 80088f0:	68ba      	ldr	r2, [r7, #8]
 80088f2:	4413      	add	r3, r2
 80088f4:	687a      	ldr	r2, [r7, #4]
 80088f6:	7812      	ldrb	r2, [r2, #0]
 80088f8:	701a      	strb	r2, [r3, #0]
  idx++;
 80088fa:	7dfb      	ldrb	r3, [r7, #23]
 80088fc:	3301      	adds	r3, #1
 80088fe:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008900:	7dfb      	ldrb	r3, [r7, #23]
 8008902:	68ba      	ldr	r2, [r7, #8]
 8008904:	4413      	add	r3, r2
 8008906:	2203      	movs	r2, #3
 8008908:	701a      	strb	r2, [r3, #0]
  idx++;
 800890a:	7dfb      	ldrb	r3, [r7, #23]
 800890c:	3301      	adds	r3, #1
 800890e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008910:	e013      	b.n	800893a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008912:	7dfb      	ldrb	r3, [r7, #23]
 8008914:	68ba      	ldr	r2, [r7, #8]
 8008916:	4413      	add	r3, r2
 8008918:	693a      	ldr	r2, [r7, #16]
 800891a:	7812      	ldrb	r2, [r2, #0]
 800891c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	3301      	adds	r3, #1
 8008922:	613b      	str	r3, [r7, #16]
    idx++;
 8008924:	7dfb      	ldrb	r3, [r7, #23]
 8008926:	3301      	adds	r3, #1
 8008928:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800892a:	7dfb      	ldrb	r3, [r7, #23]
 800892c:	68ba      	ldr	r2, [r7, #8]
 800892e:	4413      	add	r3, r2
 8008930:	2200      	movs	r2, #0
 8008932:	701a      	strb	r2, [r3, #0]
    idx++;
 8008934:	7dfb      	ldrb	r3, [r7, #23]
 8008936:	3301      	adds	r3, #1
 8008938:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800893a:	693b      	ldr	r3, [r7, #16]
 800893c:	781b      	ldrb	r3, [r3, #0]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d1e7      	bne.n	8008912 <USBD_GetString+0x52>
 8008942:	e000      	b.n	8008946 <USBD_GetString+0x86>
    return;
 8008944:	bf00      	nop
  }
}
 8008946:	3718      	adds	r7, #24
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}

0800894c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800894c:	b480      	push	{r7}
 800894e:	b085      	sub	sp, #20
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008954:	2300      	movs	r3, #0
 8008956:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800895c:	e005      	b.n	800896a <USBD_GetLen+0x1e>
  {
    len++;
 800895e:	7bfb      	ldrb	r3, [r7, #15]
 8008960:	3301      	adds	r3, #1
 8008962:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	3301      	adds	r3, #1
 8008968:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	781b      	ldrb	r3, [r3, #0]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d1f5      	bne.n	800895e <USBD_GetLen+0x12>
  }

  return len;
 8008972:	7bfb      	ldrb	r3, [r7, #15]
}
 8008974:	4618      	mov	r0, r3
 8008976:	3714      	adds	r7, #20
 8008978:	46bd      	mov	sp, r7
 800897a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897e:	4770      	bx	lr

08008980 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b084      	sub	sp, #16
 8008984:	af00      	add	r7, sp, #0
 8008986:	60f8      	str	r0, [r7, #12]
 8008988:	60b9      	str	r1, [r7, #8]
 800898a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	2202      	movs	r2, #2
 8008990:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	687a      	ldr	r2, [r7, #4]
 8008998:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	687a      	ldr	r2, [r7, #4]
 800899e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	68ba      	ldr	r2, [r7, #8]
 80089a4:	2100      	movs	r1, #0
 80089a6:	68f8      	ldr	r0, [r7, #12]
 80089a8:	f001 feaf 	bl	800a70a <USBD_LL_Transmit>

  return USBD_OK;
 80089ac:	2300      	movs	r3, #0
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3710      	adds	r7, #16
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}

080089b6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80089b6:	b580      	push	{r7, lr}
 80089b8:	b084      	sub	sp, #16
 80089ba:	af00      	add	r7, sp, #0
 80089bc:	60f8      	str	r0, [r7, #12]
 80089be:	60b9      	str	r1, [r7, #8]
 80089c0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	68ba      	ldr	r2, [r7, #8]
 80089c6:	2100      	movs	r1, #0
 80089c8:	68f8      	ldr	r0, [r7, #12]
 80089ca:	f001 fe9e 	bl	800a70a <USBD_LL_Transmit>

  return USBD_OK;
 80089ce:	2300      	movs	r3, #0
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	3710      	adds	r7, #16
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}

080089d8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b084      	sub	sp, #16
 80089dc:	af00      	add	r7, sp, #0
 80089de:	60f8      	str	r0, [r7, #12]
 80089e0:	60b9      	str	r1, [r7, #8]
 80089e2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	2203      	movs	r2, #3
 80089e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	687a      	ldr	r2, [r7, #4]
 80089f0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	687a      	ldr	r2, [r7, #4]
 80089f8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	68ba      	ldr	r2, [r7, #8]
 8008a00:	2100      	movs	r1, #0
 8008a02:	68f8      	ldr	r0, [r7, #12]
 8008a04:	f001 fea2 	bl	800a74c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a08:	2300      	movs	r3, #0
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	3710      	adds	r7, #16
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}

08008a12 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008a12:	b580      	push	{r7, lr}
 8008a14:	b084      	sub	sp, #16
 8008a16:	af00      	add	r7, sp, #0
 8008a18:	60f8      	str	r0, [r7, #12]
 8008a1a:	60b9      	str	r1, [r7, #8]
 8008a1c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	68ba      	ldr	r2, [r7, #8]
 8008a22:	2100      	movs	r1, #0
 8008a24:	68f8      	ldr	r0, [r7, #12]
 8008a26:	f001 fe91 	bl	800a74c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a2a:	2300      	movs	r3, #0
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	3710      	adds	r7, #16
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}

08008a34 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b082      	sub	sp, #8
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2204      	movs	r2, #4
 8008a40:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008a44:	2300      	movs	r3, #0
 8008a46:	2200      	movs	r2, #0
 8008a48:	2100      	movs	r1, #0
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f001 fe5d 	bl	800a70a <USBD_LL_Transmit>

  return USBD_OK;
 8008a50:	2300      	movs	r3, #0
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	3708      	adds	r7, #8
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}

08008a5a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008a5a:	b580      	push	{r7, lr}
 8008a5c:	b082      	sub	sp, #8
 8008a5e:	af00      	add	r7, sp, #0
 8008a60:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2205      	movs	r2, #5
 8008a66:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	2100      	movs	r1, #0
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f001 fe6b 	bl	800a74c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a76:	2300      	movs	r3, #0
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3708      	adds	r7, #8
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}

08008a80 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008a80:	b480      	push	{r7}
 8008a82:	b085      	sub	sp, #20
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	4603      	mov	r3, r0
 8008a88:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008a8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008a92:	2b84      	cmp	r3, #132	; 0x84
 8008a94:	d005      	beq.n	8008aa2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008a96:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	4413      	add	r3, r2
 8008a9e:	3303      	adds	r3, #3
 8008aa0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3714      	adds	r7, #20
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aae:	4770      	bx	lr

08008ab0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008ab4:	f000 fa78 	bl	8008fa8 <vTaskStartScheduler>
  
  return osOK;
 8008ab8:	2300      	movs	r3, #0
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	bd80      	pop	{r7, pc}

08008abe <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008abe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ac0:	b087      	sub	sp, #28
 8008ac2:	af02      	add	r7, sp, #8
 8008ac4:	6078      	str	r0, [r7, #4]
 8008ac6:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	685c      	ldr	r4, [r3, #4]
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008ad4:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008adc:	4618      	mov	r0, r3
 8008ade:	f7ff ffcf 	bl	8008a80 <makeFreeRtosPriority>
 8008ae2:	4602      	mov	r2, r0
 8008ae4:	f107 030c 	add.w	r3, r7, #12
 8008ae8:	9301      	str	r3, [sp, #4]
 8008aea:	9200      	str	r2, [sp, #0]
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	4632      	mov	r2, r6
 8008af0:	4629      	mov	r1, r5
 8008af2:	4620      	mov	r0, r4
 8008af4:	f000 f8d2 	bl	8008c9c <xTaskCreate>
 8008af8:	4603      	mov	r3, r0
 8008afa:	2b01      	cmp	r3, #1
 8008afc:	d001      	beq.n	8008b02 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8008afe:	2300      	movs	r3, #0
 8008b00:	e000      	b.n	8008b04 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8008b02:	68fb      	ldr	r3, [r7, #12]
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	3714      	adds	r7, #20
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008b0c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b084      	sub	sp, #16
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d001      	beq.n	8008b22 <osDelay+0x16>
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	e000      	b.n	8008b24 <osDelay+0x18>
 8008b22:	2301      	movs	r3, #1
 8008b24:	4618      	mov	r0, r3
 8008b26:	f000 fa0b 	bl	8008f40 <vTaskDelay>
  
  return osOK;
 8008b2a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3710      	adds	r7, #16
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}

08008b34 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008b34:	b480      	push	{r7}
 8008b36:	b083      	sub	sp, #12
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f103 0208 	add.w	r2, r3, #8
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008b4c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f103 0208 	add.w	r2, r3, #8
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f103 0208 	add.w	r2, r3, #8
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2200      	movs	r2, #0
 8008b66:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008b68:	bf00      	nop
 8008b6a:	370c      	adds	r7, #12
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b72:	4770      	bx	lr

08008b74 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008b74:	b480      	push	{r7}
 8008b76:	b083      	sub	sp, #12
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2200      	movs	r2, #0
 8008b80:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008b82:	bf00      	nop
 8008b84:	370c      	adds	r7, #12
 8008b86:	46bd      	mov	sp, r7
 8008b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8c:	4770      	bx	lr

08008b8e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008b8e:	b480      	push	{r7}
 8008b90:	b085      	sub	sp, #20
 8008b92:	af00      	add	r7, sp, #0
 8008b94:	6078      	str	r0, [r7, #4]
 8008b96:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	685b      	ldr	r3, [r3, #4]
 8008b9c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	68fa      	ldr	r2, [r7, #12]
 8008ba2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	689a      	ldr	r2, [r3, #8]
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	689b      	ldr	r3, [r3, #8]
 8008bb0:	683a      	ldr	r2, [r7, #0]
 8008bb2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	683a      	ldr	r2, [r7, #0]
 8008bb8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	687a      	ldr	r2, [r7, #4]
 8008bbe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	1c5a      	adds	r2, r3, #1
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	601a      	str	r2, [r3, #0]
}
 8008bca:	bf00      	nop
 8008bcc:	3714      	adds	r7, #20
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd4:	4770      	bx	lr

08008bd6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008bd6:	b480      	push	{r7}
 8008bd8:	b085      	sub	sp, #20
 8008bda:	af00      	add	r7, sp, #0
 8008bdc:	6078      	str	r0, [r7, #4]
 8008bde:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008bec:	d103      	bne.n	8008bf6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	691b      	ldr	r3, [r3, #16]
 8008bf2:	60fb      	str	r3, [r7, #12]
 8008bf4:	e00c      	b.n	8008c10 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	3308      	adds	r3, #8
 8008bfa:	60fb      	str	r3, [r7, #12]
 8008bfc:	e002      	b.n	8008c04 <vListInsert+0x2e>
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	685b      	ldr	r3, [r3, #4]
 8008c02:	60fb      	str	r3, [r7, #12]
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	685b      	ldr	r3, [r3, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	68ba      	ldr	r2, [r7, #8]
 8008c0c:	429a      	cmp	r2, r3
 8008c0e:	d2f6      	bcs.n	8008bfe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	685a      	ldr	r2, [r3, #4]
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	685b      	ldr	r3, [r3, #4]
 8008c1c:	683a      	ldr	r2, [r7, #0]
 8008c1e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	68fa      	ldr	r2, [r7, #12]
 8008c24:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	683a      	ldr	r2, [r7, #0]
 8008c2a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	687a      	ldr	r2, [r7, #4]
 8008c30:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	1c5a      	adds	r2, r3, #1
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	601a      	str	r2, [r3, #0]
}
 8008c3c:	bf00      	nop
 8008c3e:	3714      	adds	r7, #20
 8008c40:	46bd      	mov	sp, r7
 8008c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c46:	4770      	bx	lr

08008c48 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b085      	sub	sp, #20
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	691b      	ldr	r3, [r3, #16]
 8008c54:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	685b      	ldr	r3, [r3, #4]
 8008c5a:	687a      	ldr	r2, [r7, #4]
 8008c5c:	6892      	ldr	r2, [r2, #8]
 8008c5e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	689b      	ldr	r3, [r3, #8]
 8008c64:	687a      	ldr	r2, [r7, #4]
 8008c66:	6852      	ldr	r2, [r2, #4]
 8008c68:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	685b      	ldr	r3, [r3, #4]
 8008c6e:	687a      	ldr	r2, [r7, #4]
 8008c70:	429a      	cmp	r2, r3
 8008c72:	d103      	bne.n	8008c7c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	689a      	ldr	r2, [r3, #8]
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2200      	movs	r2, #0
 8008c80:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	1e5a      	subs	r2, r3, #1
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681b      	ldr	r3, [r3, #0]
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	3714      	adds	r7, #20
 8008c94:	46bd      	mov	sp, r7
 8008c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9a:	4770      	bx	lr

08008c9c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b08c      	sub	sp, #48	; 0x30
 8008ca0:	af04      	add	r7, sp, #16
 8008ca2:	60f8      	str	r0, [r7, #12]
 8008ca4:	60b9      	str	r1, [r7, #8]
 8008ca6:	603b      	str	r3, [r7, #0]
 8008ca8:	4613      	mov	r3, r2
 8008caa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008cac:	88fb      	ldrh	r3, [r7, #6]
 8008cae:	009b      	lsls	r3, r3, #2
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	f000 fee1 	bl	8009a78 <pvPortMalloc>
 8008cb6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008cb8:	697b      	ldr	r3, [r7, #20]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d00e      	beq.n	8008cdc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008cbe:	20a0      	movs	r0, #160	; 0xa0
 8008cc0:	f000 feda 	bl	8009a78 <pvPortMalloc>
 8008cc4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008cc6:	69fb      	ldr	r3, [r7, #28]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d003      	beq.n	8008cd4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008ccc:	69fb      	ldr	r3, [r7, #28]
 8008cce:	697a      	ldr	r2, [r7, #20]
 8008cd0:	631a      	str	r2, [r3, #48]	; 0x30
 8008cd2:	e005      	b.n	8008ce0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008cd4:	6978      	ldr	r0, [r7, #20]
 8008cd6:	f000 ff9f 	bl	8009c18 <vPortFree>
 8008cda:	e001      	b.n	8008ce0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008ce0:	69fb      	ldr	r3, [r7, #28]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d013      	beq.n	8008d0e <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008ce6:	88fa      	ldrh	r2, [r7, #6]
 8008ce8:	2300      	movs	r3, #0
 8008cea:	9303      	str	r3, [sp, #12]
 8008cec:	69fb      	ldr	r3, [r7, #28]
 8008cee:	9302      	str	r3, [sp, #8]
 8008cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cf2:	9301      	str	r3, [sp, #4]
 8008cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cf6:	9300      	str	r3, [sp, #0]
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	68b9      	ldr	r1, [r7, #8]
 8008cfc:	68f8      	ldr	r0, [r7, #12]
 8008cfe:	f000 f80f 	bl	8008d20 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008d02:	69f8      	ldr	r0, [r7, #28]
 8008d04:	f000 f8b2 	bl	8008e6c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008d08:	2301      	movs	r3, #1
 8008d0a:	61bb      	str	r3, [r7, #24]
 8008d0c:	e002      	b.n	8008d14 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008d0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008d12:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008d14:	69bb      	ldr	r3, [r7, #24]
	}
 8008d16:	4618      	mov	r0, r3
 8008d18:	3720      	adds	r7, #32
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}
	...

08008d20 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b088      	sub	sp, #32
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	60f8      	str	r0, [r7, #12]
 8008d28:	60b9      	str	r1, [r7, #8]
 8008d2a:	607a      	str	r2, [r7, #4]
 8008d2c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d30:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	009b      	lsls	r3, r3, #2
 8008d36:	461a      	mov	r2, r3
 8008d38:	21a5      	movs	r1, #165	; 0xa5
 8008d3a:	f002 f8b1 	bl	800aea0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008d48:	3b01      	subs	r3, #1
 8008d4a:	009b      	lsls	r3, r3, #2
 8008d4c:	4413      	add	r3, r2
 8008d4e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008d50:	69bb      	ldr	r3, [r7, #24]
 8008d52:	f023 0307 	bic.w	r3, r3, #7
 8008d56:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008d58:	69bb      	ldr	r3, [r7, #24]
 8008d5a:	f003 0307 	and.w	r3, r3, #7
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d00a      	beq.n	8008d78 <prvInitialiseNewTask+0x58>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d66:	f383 8811 	msr	BASEPRI, r3
 8008d6a:	f3bf 8f6f 	isb	sy
 8008d6e:	f3bf 8f4f 	dsb	sy
 8008d72:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008d74:	bf00      	nop
 8008d76:	e7fe      	b.n	8008d76 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d01f      	beq.n	8008dbe <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008d7e:	2300      	movs	r3, #0
 8008d80:	61fb      	str	r3, [r7, #28]
 8008d82:	e012      	b.n	8008daa <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008d84:	68ba      	ldr	r2, [r7, #8]
 8008d86:	69fb      	ldr	r3, [r7, #28]
 8008d88:	4413      	add	r3, r2
 8008d8a:	7819      	ldrb	r1, [r3, #0]
 8008d8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d8e:	69fb      	ldr	r3, [r7, #28]
 8008d90:	4413      	add	r3, r2
 8008d92:	3334      	adds	r3, #52	; 0x34
 8008d94:	460a      	mov	r2, r1
 8008d96:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008d98:	68ba      	ldr	r2, [r7, #8]
 8008d9a:	69fb      	ldr	r3, [r7, #28]
 8008d9c:	4413      	add	r3, r2
 8008d9e:	781b      	ldrb	r3, [r3, #0]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d006      	beq.n	8008db2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008da4:	69fb      	ldr	r3, [r7, #28]
 8008da6:	3301      	adds	r3, #1
 8008da8:	61fb      	str	r3, [r7, #28]
 8008daa:	69fb      	ldr	r3, [r7, #28]
 8008dac:	2b0f      	cmp	r3, #15
 8008dae:	d9e9      	bls.n	8008d84 <prvInitialiseNewTask+0x64>
 8008db0:	e000      	b.n	8008db4 <prvInitialiseNewTask+0x94>
			{
				break;
 8008db2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008db6:	2200      	movs	r2, #0
 8008db8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008dbc:	e003      	b.n	8008dc6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dc8:	2b06      	cmp	r3, #6
 8008dca:	d901      	bls.n	8008dd0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008dcc:	2306      	movs	r3, #6
 8008dce:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008dd4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008dda:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dde:	2200      	movs	r2, #0
 8008de0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008de4:	3304      	adds	r3, #4
 8008de6:	4618      	mov	r0, r3
 8008de8:	f7ff fec4 	bl	8008b74 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dee:	3318      	adds	r3, #24
 8008df0:	4618      	mov	r0, r3
 8008df2:	f7ff febf 	bl	8008b74 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008df8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008dfa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dfe:	f1c3 0207 	rsb	r2, r3, #7
 8008e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e04:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e0a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e0e:	2200      	movs	r2, #0
 8008e10:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e16:	2200      	movs	r2, #0
 8008e18:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e1e:	334c      	adds	r3, #76	; 0x4c
 8008e20:	224c      	movs	r2, #76	; 0x4c
 8008e22:	2100      	movs	r1, #0
 8008e24:	4618      	mov	r0, r3
 8008e26:	f002 f83b 	bl	800aea0 <memset>
 8008e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e2c:	4a0c      	ldr	r2, [pc, #48]	; (8008e60 <prvInitialiseNewTask+0x140>)
 8008e2e:	651a      	str	r2, [r3, #80]	; 0x50
 8008e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e32:	4a0c      	ldr	r2, [pc, #48]	; (8008e64 <prvInitialiseNewTask+0x144>)
 8008e34:	655a      	str	r2, [r3, #84]	; 0x54
 8008e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e38:	4a0b      	ldr	r2, [pc, #44]	; (8008e68 <prvInitialiseNewTask+0x148>)
 8008e3a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008e3c:	683a      	ldr	r2, [r7, #0]
 8008e3e:	68f9      	ldr	r1, [r7, #12]
 8008e40:	69b8      	ldr	r0, [r7, #24]
 8008e42:	f000 fc0d 	bl	8009660 <pxPortInitialiseStack>
 8008e46:	4602      	mov	r2, r0
 8008e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e4a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d002      	beq.n	8008e58 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e56:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e58:	bf00      	nop
 8008e5a:	3720      	adds	r7, #32
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}
 8008e60:	20005d14 	.word	0x20005d14
 8008e64:	20005d7c 	.word	0x20005d7c
 8008e68:	20005de4 	.word	0x20005de4

08008e6c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b082      	sub	sp, #8
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008e74:	f000 fd1e 	bl	80098b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008e78:	4b2a      	ldr	r3, [pc, #168]	; (8008f24 <prvAddNewTaskToReadyList+0xb8>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	3301      	adds	r3, #1
 8008e7e:	4a29      	ldr	r2, [pc, #164]	; (8008f24 <prvAddNewTaskToReadyList+0xb8>)
 8008e80:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008e82:	4b29      	ldr	r3, [pc, #164]	; (8008f28 <prvAddNewTaskToReadyList+0xbc>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d109      	bne.n	8008e9e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008e8a:	4a27      	ldr	r2, [pc, #156]	; (8008f28 <prvAddNewTaskToReadyList+0xbc>)
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008e90:	4b24      	ldr	r3, [pc, #144]	; (8008f24 <prvAddNewTaskToReadyList+0xb8>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	2b01      	cmp	r3, #1
 8008e96:	d110      	bne.n	8008eba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008e98:	f000 fad8 	bl	800944c <prvInitialiseTaskLists>
 8008e9c:	e00d      	b.n	8008eba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008e9e:	4b23      	ldr	r3, [pc, #140]	; (8008f2c <prvAddNewTaskToReadyList+0xc0>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d109      	bne.n	8008eba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008ea6:	4b20      	ldr	r3, [pc, #128]	; (8008f28 <prvAddNewTaskToReadyList+0xbc>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eb0:	429a      	cmp	r2, r3
 8008eb2:	d802      	bhi.n	8008eba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008eb4:	4a1c      	ldr	r2, [pc, #112]	; (8008f28 <prvAddNewTaskToReadyList+0xbc>)
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008eba:	4b1d      	ldr	r3, [pc, #116]	; (8008f30 <prvAddNewTaskToReadyList+0xc4>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	3301      	adds	r3, #1
 8008ec0:	4a1b      	ldr	r2, [pc, #108]	; (8008f30 <prvAddNewTaskToReadyList+0xc4>)
 8008ec2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ec8:	2201      	movs	r2, #1
 8008eca:	409a      	lsls	r2, r3
 8008ecc:	4b19      	ldr	r3, [pc, #100]	; (8008f34 <prvAddNewTaskToReadyList+0xc8>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	4313      	orrs	r3, r2
 8008ed2:	4a18      	ldr	r2, [pc, #96]	; (8008f34 <prvAddNewTaskToReadyList+0xc8>)
 8008ed4:	6013      	str	r3, [r2, #0]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008eda:	4613      	mov	r3, r2
 8008edc:	009b      	lsls	r3, r3, #2
 8008ede:	4413      	add	r3, r2
 8008ee0:	009b      	lsls	r3, r3, #2
 8008ee2:	4a15      	ldr	r2, [pc, #84]	; (8008f38 <prvAddNewTaskToReadyList+0xcc>)
 8008ee4:	441a      	add	r2, r3
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	3304      	adds	r3, #4
 8008eea:	4619      	mov	r1, r3
 8008eec:	4610      	mov	r0, r2
 8008eee:	f7ff fe4e 	bl	8008b8e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008ef2:	f000 fd0f 	bl	8009914 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008ef6:	4b0d      	ldr	r3, [pc, #52]	; (8008f2c <prvAddNewTaskToReadyList+0xc0>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d00e      	beq.n	8008f1c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008efe:	4b0a      	ldr	r3, [pc, #40]	; (8008f28 <prvAddNewTaskToReadyList+0xbc>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f08:	429a      	cmp	r2, r3
 8008f0a:	d207      	bcs.n	8008f1c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008f0c:	4b0b      	ldr	r3, [pc, #44]	; (8008f3c <prvAddNewTaskToReadyList+0xd0>)
 8008f0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f12:	601a      	str	r2, [r3, #0]
 8008f14:	f3bf 8f4f 	dsb	sy
 8008f18:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008f1c:	bf00      	nop
 8008f1e:	3708      	adds	r7, #8
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}
 8008f24:	20000460 	.word	0x20000460
 8008f28:	20000360 	.word	0x20000360
 8008f2c:	2000046c 	.word	0x2000046c
 8008f30:	2000047c 	.word	0x2000047c
 8008f34:	20000468 	.word	0x20000468
 8008f38:	20000364 	.word	0x20000364
 8008f3c:	e000ed04 	.word	0xe000ed04

08008f40 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b084      	sub	sp, #16
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d017      	beq.n	8008f82 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008f52:	4b13      	ldr	r3, [pc, #76]	; (8008fa0 <vTaskDelay+0x60>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d00a      	beq.n	8008f70 <vTaskDelay+0x30>
	__asm volatile
 8008f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f5e:	f383 8811 	msr	BASEPRI, r3
 8008f62:	f3bf 8f6f 	isb	sy
 8008f66:	f3bf 8f4f 	dsb	sy
 8008f6a:	60bb      	str	r3, [r7, #8]
}
 8008f6c:	bf00      	nop
 8008f6e:	e7fe      	b.n	8008f6e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008f70:	f000 f86a 	bl	8009048 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008f74:	2100      	movs	r1, #0
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f000 fb0c 	bl	8009594 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008f7c:	f000 f872 	bl	8009064 <xTaskResumeAll>
 8008f80:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d107      	bne.n	8008f98 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008f88:	4b06      	ldr	r3, [pc, #24]	; (8008fa4 <vTaskDelay+0x64>)
 8008f8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f8e:	601a      	str	r2, [r3, #0]
 8008f90:	f3bf 8f4f 	dsb	sy
 8008f94:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008f98:	bf00      	nop
 8008f9a:	3710      	adds	r7, #16
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}
 8008fa0:	20000488 	.word	0x20000488
 8008fa4:	e000ed04 	.word	0xe000ed04

08008fa8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b086      	sub	sp, #24
 8008fac:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8008fae:	4b1e      	ldr	r3, [pc, #120]	; (8009028 <vTaskStartScheduler+0x80>)
 8008fb0:	9301      	str	r3, [sp, #4]
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	9300      	str	r3, [sp, #0]
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	2280      	movs	r2, #128	; 0x80
 8008fba:	491c      	ldr	r1, [pc, #112]	; (800902c <vTaskStartScheduler+0x84>)
 8008fbc:	481c      	ldr	r0, [pc, #112]	; (8009030 <vTaskStartScheduler+0x88>)
 8008fbe:	f7ff fe6d 	bl	8008c9c <xTaskCreate>
 8008fc2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	2b01      	cmp	r3, #1
 8008fc8:	d11b      	bne.n	8009002 <vTaskStartScheduler+0x5a>
	__asm volatile
 8008fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fce:	f383 8811 	msr	BASEPRI, r3
 8008fd2:	f3bf 8f6f 	isb	sy
 8008fd6:	f3bf 8f4f 	dsb	sy
 8008fda:	60bb      	str	r3, [r7, #8]
}
 8008fdc:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008fde:	4b15      	ldr	r3, [pc, #84]	; (8009034 <vTaskStartScheduler+0x8c>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	334c      	adds	r3, #76	; 0x4c
 8008fe4:	4a14      	ldr	r2, [pc, #80]	; (8009038 <vTaskStartScheduler+0x90>)
 8008fe6:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008fe8:	4b14      	ldr	r3, [pc, #80]	; (800903c <vTaskStartScheduler+0x94>)
 8008fea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008fee:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008ff0:	4b13      	ldr	r3, [pc, #76]	; (8009040 <vTaskStartScheduler+0x98>)
 8008ff2:	2201      	movs	r2, #1
 8008ff4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008ff6:	4b13      	ldr	r3, [pc, #76]	; (8009044 <vTaskStartScheduler+0x9c>)
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008ffc:	f000 fbb8 	bl	8009770 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009000:	e00e      	b.n	8009020 <vTaskStartScheduler+0x78>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009008:	d10a      	bne.n	8009020 <vTaskStartScheduler+0x78>
	__asm volatile
 800900a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800900e:	f383 8811 	msr	BASEPRI, r3
 8009012:	f3bf 8f6f 	isb	sy
 8009016:	f3bf 8f4f 	dsb	sy
 800901a:	607b      	str	r3, [r7, #4]
}
 800901c:	bf00      	nop
 800901e:	e7fe      	b.n	800901e <vTaskStartScheduler+0x76>
}
 8009020:	bf00      	nop
 8009022:	3710      	adds	r7, #16
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}
 8009028:	20000484 	.word	0x20000484
 800902c:	0800b090 	.word	0x0800b090
 8009030:	0800941d 	.word	0x0800941d
 8009034:	20000360 	.word	0x20000360
 8009038:	2000014c 	.word	0x2000014c
 800903c:	20000480 	.word	0x20000480
 8009040:	2000046c 	.word	0x2000046c
 8009044:	20000464 	.word	0x20000464

08009048 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009048:	b480      	push	{r7}
 800904a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800904c:	4b04      	ldr	r3, [pc, #16]	; (8009060 <vTaskSuspendAll+0x18>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	3301      	adds	r3, #1
 8009052:	4a03      	ldr	r2, [pc, #12]	; (8009060 <vTaskSuspendAll+0x18>)
 8009054:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009056:	bf00      	nop
 8009058:	46bd      	mov	sp, r7
 800905a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905e:	4770      	bx	lr
 8009060:	20000488 	.word	0x20000488

08009064 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b084      	sub	sp, #16
 8009068:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800906a:	2300      	movs	r3, #0
 800906c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800906e:	2300      	movs	r3, #0
 8009070:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009072:	4b41      	ldr	r3, [pc, #260]	; (8009178 <xTaskResumeAll+0x114>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d10a      	bne.n	8009090 <xTaskResumeAll+0x2c>
	__asm volatile
 800907a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800907e:	f383 8811 	msr	BASEPRI, r3
 8009082:	f3bf 8f6f 	isb	sy
 8009086:	f3bf 8f4f 	dsb	sy
 800908a:	603b      	str	r3, [r7, #0]
}
 800908c:	bf00      	nop
 800908e:	e7fe      	b.n	800908e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009090:	f000 fc10 	bl	80098b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009094:	4b38      	ldr	r3, [pc, #224]	; (8009178 <xTaskResumeAll+0x114>)
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	3b01      	subs	r3, #1
 800909a:	4a37      	ldr	r2, [pc, #220]	; (8009178 <xTaskResumeAll+0x114>)
 800909c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800909e:	4b36      	ldr	r3, [pc, #216]	; (8009178 <xTaskResumeAll+0x114>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d161      	bne.n	800916a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80090a6:	4b35      	ldr	r3, [pc, #212]	; (800917c <xTaskResumeAll+0x118>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d05d      	beq.n	800916a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80090ae:	e02e      	b.n	800910e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090b0:	4b33      	ldr	r3, [pc, #204]	; (8009180 <xTaskResumeAll+0x11c>)
 80090b2:	68db      	ldr	r3, [r3, #12]
 80090b4:	68db      	ldr	r3, [r3, #12]
 80090b6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	3318      	adds	r3, #24
 80090bc:	4618      	mov	r0, r3
 80090be:	f7ff fdc3 	bl	8008c48 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	3304      	adds	r3, #4
 80090c6:	4618      	mov	r0, r3
 80090c8:	f7ff fdbe 	bl	8008c48 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090d0:	2201      	movs	r2, #1
 80090d2:	409a      	lsls	r2, r3
 80090d4:	4b2b      	ldr	r3, [pc, #172]	; (8009184 <xTaskResumeAll+0x120>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	4313      	orrs	r3, r2
 80090da:	4a2a      	ldr	r2, [pc, #168]	; (8009184 <xTaskResumeAll+0x120>)
 80090dc:	6013      	str	r3, [r2, #0]
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090e2:	4613      	mov	r3, r2
 80090e4:	009b      	lsls	r3, r3, #2
 80090e6:	4413      	add	r3, r2
 80090e8:	009b      	lsls	r3, r3, #2
 80090ea:	4a27      	ldr	r2, [pc, #156]	; (8009188 <xTaskResumeAll+0x124>)
 80090ec:	441a      	add	r2, r3
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	3304      	adds	r3, #4
 80090f2:	4619      	mov	r1, r3
 80090f4:	4610      	mov	r0, r2
 80090f6:	f7ff fd4a 	bl	8008b8e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090fe:	4b23      	ldr	r3, [pc, #140]	; (800918c <xTaskResumeAll+0x128>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009104:	429a      	cmp	r2, r3
 8009106:	d302      	bcc.n	800910e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8009108:	4b21      	ldr	r3, [pc, #132]	; (8009190 <xTaskResumeAll+0x12c>)
 800910a:	2201      	movs	r2, #1
 800910c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800910e:	4b1c      	ldr	r3, [pc, #112]	; (8009180 <xTaskResumeAll+0x11c>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d1cc      	bne.n	80090b0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d001      	beq.n	8009120 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800911c:	f000 fa1a 	bl	8009554 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009120:	4b1c      	ldr	r3, [pc, #112]	; (8009194 <xTaskResumeAll+0x130>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d010      	beq.n	800914e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800912c:	f000 f836 	bl	800919c <xTaskIncrementTick>
 8009130:	4603      	mov	r3, r0
 8009132:	2b00      	cmp	r3, #0
 8009134:	d002      	beq.n	800913c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8009136:	4b16      	ldr	r3, [pc, #88]	; (8009190 <xTaskResumeAll+0x12c>)
 8009138:	2201      	movs	r2, #1
 800913a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	3b01      	subs	r3, #1
 8009140:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d1f1      	bne.n	800912c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8009148:	4b12      	ldr	r3, [pc, #72]	; (8009194 <xTaskResumeAll+0x130>)
 800914a:	2200      	movs	r2, #0
 800914c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800914e:	4b10      	ldr	r3, [pc, #64]	; (8009190 <xTaskResumeAll+0x12c>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d009      	beq.n	800916a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009156:	2301      	movs	r3, #1
 8009158:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800915a:	4b0f      	ldr	r3, [pc, #60]	; (8009198 <xTaskResumeAll+0x134>)
 800915c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009160:	601a      	str	r2, [r3, #0]
 8009162:	f3bf 8f4f 	dsb	sy
 8009166:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800916a:	f000 fbd3 	bl	8009914 <vPortExitCritical>

	return xAlreadyYielded;
 800916e:	68bb      	ldr	r3, [r7, #8]
}
 8009170:	4618      	mov	r0, r3
 8009172:	3710      	adds	r7, #16
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}
 8009178:	20000488 	.word	0x20000488
 800917c:	20000460 	.word	0x20000460
 8009180:	20000420 	.word	0x20000420
 8009184:	20000468 	.word	0x20000468
 8009188:	20000364 	.word	0x20000364
 800918c:	20000360 	.word	0x20000360
 8009190:	20000474 	.word	0x20000474
 8009194:	20000470 	.word	0x20000470
 8009198:	e000ed04 	.word	0xe000ed04

0800919c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b086      	sub	sp, #24
 80091a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80091a2:	2300      	movs	r3, #0
 80091a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80091a6:	4b4e      	ldr	r3, [pc, #312]	; (80092e0 <xTaskIncrementTick+0x144>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	f040 808e 	bne.w	80092cc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80091b0:	4b4c      	ldr	r3, [pc, #304]	; (80092e4 <xTaskIncrementTick+0x148>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	3301      	adds	r3, #1
 80091b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80091b8:	4a4a      	ldr	r2, [pc, #296]	; (80092e4 <xTaskIncrementTick+0x148>)
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80091be:	693b      	ldr	r3, [r7, #16]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d120      	bne.n	8009206 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80091c4:	4b48      	ldr	r3, [pc, #288]	; (80092e8 <xTaskIncrementTick+0x14c>)
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d00a      	beq.n	80091e4 <xTaskIncrementTick+0x48>
	__asm volatile
 80091ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091d2:	f383 8811 	msr	BASEPRI, r3
 80091d6:	f3bf 8f6f 	isb	sy
 80091da:	f3bf 8f4f 	dsb	sy
 80091de:	603b      	str	r3, [r7, #0]
}
 80091e0:	bf00      	nop
 80091e2:	e7fe      	b.n	80091e2 <xTaskIncrementTick+0x46>
 80091e4:	4b40      	ldr	r3, [pc, #256]	; (80092e8 <xTaskIncrementTick+0x14c>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	60fb      	str	r3, [r7, #12]
 80091ea:	4b40      	ldr	r3, [pc, #256]	; (80092ec <xTaskIncrementTick+0x150>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	4a3e      	ldr	r2, [pc, #248]	; (80092e8 <xTaskIncrementTick+0x14c>)
 80091f0:	6013      	str	r3, [r2, #0]
 80091f2:	4a3e      	ldr	r2, [pc, #248]	; (80092ec <xTaskIncrementTick+0x150>)
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	6013      	str	r3, [r2, #0]
 80091f8:	4b3d      	ldr	r3, [pc, #244]	; (80092f0 <xTaskIncrementTick+0x154>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	3301      	adds	r3, #1
 80091fe:	4a3c      	ldr	r2, [pc, #240]	; (80092f0 <xTaskIncrementTick+0x154>)
 8009200:	6013      	str	r3, [r2, #0]
 8009202:	f000 f9a7 	bl	8009554 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009206:	4b3b      	ldr	r3, [pc, #236]	; (80092f4 <xTaskIncrementTick+0x158>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	693a      	ldr	r2, [r7, #16]
 800920c:	429a      	cmp	r2, r3
 800920e:	d348      	bcc.n	80092a2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009210:	4b35      	ldr	r3, [pc, #212]	; (80092e8 <xTaskIncrementTick+0x14c>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d104      	bne.n	8009224 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800921a:	4b36      	ldr	r3, [pc, #216]	; (80092f4 <xTaskIncrementTick+0x158>)
 800921c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009220:	601a      	str	r2, [r3, #0]
					break;
 8009222:	e03e      	b.n	80092a2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009224:	4b30      	ldr	r3, [pc, #192]	; (80092e8 <xTaskIncrementTick+0x14c>)
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	68db      	ldr	r3, [r3, #12]
 800922a:	68db      	ldr	r3, [r3, #12]
 800922c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	685b      	ldr	r3, [r3, #4]
 8009232:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009234:	693a      	ldr	r2, [r7, #16]
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	429a      	cmp	r2, r3
 800923a:	d203      	bcs.n	8009244 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800923c:	4a2d      	ldr	r2, [pc, #180]	; (80092f4 <xTaskIncrementTick+0x158>)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009242:	e02e      	b.n	80092a2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	3304      	adds	r3, #4
 8009248:	4618      	mov	r0, r3
 800924a:	f7ff fcfd 	bl	8008c48 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009252:	2b00      	cmp	r3, #0
 8009254:	d004      	beq.n	8009260 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	3318      	adds	r3, #24
 800925a:	4618      	mov	r0, r3
 800925c:	f7ff fcf4 	bl	8008c48 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009264:	2201      	movs	r2, #1
 8009266:	409a      	lsls	r2, r3
 8009268:	4b23      	ldr	r3, [pc, #140]	; (80092f8 <xTaskIncrementTick+0x15c>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	4313      	orrs	r3, r2
 800926e:	4a22      	ldr	r2, [pc, #136]	; (80092f8 <xTaskIncrementTick+0x15c>)
 8009270:	6013      	str	r3, [r2, #0]
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009276:	4613      	mov	r3, r2
 8009278:	009b      	lsls	r3, r3, #2
 800927a:	4413      	add	r3, r2
 800927c:	009b      	lsls	r3, r3, #2
 800927e:	4a1f      	ldr	r2, [pc, #124]	; (80092fc <xTaskIncrementTick+0x160>)
 8009280:	441a      	add	r2, r3
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	3304      	adds	r3, #4
 8009286:	4619      	mov	r1, r3
 8009288:	4610      	mov	r0, r2
 800928a:	f7ff fc80 	bl	8008b8e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009292:	4b1b      	ldr	r3, [pc, #108]	; (8009300 <xTaskIncrementTick+0x164>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009298:	429a      	cmp	r2, r3
 800929a:	d3b9      	bcc.n	8009210 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800929c:	2301      	movs	r3, #1
 800929e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80092a0:	e7b6      	b.n	8009210 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80092a2:	4b17      	ldr	r3, [pc, #92]	; (8009300 <xTaskIncrementTick+0x164>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092a8:	4914      	ldr	r1, [pc, #80]	; (80092fc <xTaskIncrementTick+0x160>)
 80092aa:	4613      	mov	r3, r2
 80092ac:	009b      	lsls	r3, r3, #2
 80092ae:	4413      	add	r3, r2
 80092b0:	009b      	lsls	r3, r3, #2
 80092b2:	440b      	add	r3, r1
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	2b01      	cmp	r3, #1
 80092b8:	d901      	bls.n	80092be <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80092ba:	2301      	movs	r3, #1
 80092bc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80092be:	4b11      	ldr	r3, [pc, #68]	; (8009304 <xTaskIncrementTick+0x168>)
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d007      	beq.n	80092d6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80092c6:	2301      	movs	r3, #1
 80092c8:	617b      	str	r3, [r7, #20]
 80092ca:	e004      	b.n	80092d6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80092cc:	4b0e      	ldr	r3, [pc, #56]	; (8009308 <xTaskIncrementTick+0x16c>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	3301      	adds	r3, #1
 80092d2:	4a0d      	ldr	r2, [pc, #52]	; (8009308 <xTaskIncrementTick+0x16c>)
 80092d4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80092d6:	697b      	ldr	r3, [r7, #20]
}
 80092d8:	4618      	mov	r0, r3
 80092da:	3718      	adds	r7, #24
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}
 80092e0:	20000488 	.word	0x20000488
 80092e4:	20000464 	.word	0x20000464
 80092e8:	20000418 	.word	0x20000418
 80092ec:	2000041c 	.word	0x2000041c
 80092f0:	20000478 	.word	0x20000478
 80092f4:	20000480 	.word	0x20000480
 80092f8:	20000468 	.word	0x20000468
 80092fc:	20000364 	.word	0x20000364
 8009300:	20000360 	.word	0x20000360
 8009304:	20000474 	.word	0x20000474
 8009308:	20000470 	.word	0x20000470

0800930c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b088      	sub	sp, #32
 8009310:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009312:	4b3c      	ldr	r3, [pc, #240]	; (8009404 <vTaskSwitchContext+0xf8>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d003      	beq.n	8009322 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800931a:	4b3b      	ldr	r3, [pc, #236]	; (8009408 <vTaskSwitchContext+0xfc>)
 800931c:	2201      	movs	r2, #1
 800931e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009320:	e06b      	b.n	80093fa <vTaskSwitchContext+0xee>
		xYieldPending = pdFALSE;
 8009322:	4b39      	ldr	r3, [pc, #228]	; (8009408 <vTaskSwitchContext+0xfc>)
 8009324:	2200      	movs	r2, #0
 8009326:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8009328:	4b38      	ldr	r3, [pc, #224]	; (800940c <vTaskSwitchContext+0x100>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800932e:	61fb      	str	r3, [r7, #28]
 8009330:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8009334:	61bb      	str	r3, [r7, #24]
 8009336:	69fb      	ldr	r3, [r7, #28]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	69ba      	ldr	r2, [r7, #24]
 800933c:	429a      	cmp	r2, r3
 800933e:	d111      	bne.n	8009364 <vTaskSwitchContext+0x58>
 8009340:	69fb      	ldr	r3, [r7, #28]
 8009342:	3304      	adds	r3, #4
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	69ba      	ldr	r2, [r7, #24]
 8009348:	429a      	cmp	r2, r3
 800934a:	d10b      	bne.n	8009364 <vTaskSwitchContext+0x58>
 800934c:	69fb      	ldr	r3, [r7, #28]
 800934e:	3308      	adds	r3, #8
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	69ba      	ldr	r2, [r7, #24]
 8009354:	429a      	cmp	r2, r3
 8009356:	d105      	bne.n	8009364 <vTaskSwitchContext+0x58>
 8009358:	69fb      	ldr	r3, [r7, #28]
 800935a:	330c      	adds	r3, #12
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	69ba      	ldr	r2, [r7, #24]
 8009360:	429a      	cmp	r2, r3
 8009362:	d008      	beq.n	8009376 <vTaskSwitchContext+0x6a>
 8009364:	4b29      	ldr	r3, [pc, #164]	; (800940c <vTaskSwitchContext+0x100>)
 8009366:	681a      	ldr	r2, [r3, #0]
 8009368:	4b28      	ldr	r3, [pc, #160]	; (800940c <vTaskSwitchContext+0x100>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	3334      	adds	r3, #52	; 0x34
 800936e:	4619      	mov	r1, r3
 8009370:	4610      	mov	r0, r2
 8009372:	f7f7 f949 	bl	8000608 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009376:	4b26      	ldr	r3, [pc, #152]	; (8009410 <vTaskSwitchContext+0x104>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	fab3 f383 	clz	r3, r3
 8009382:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009384:	7afb      	ldrb	r3, [r7, #11]
 8009386:	f1c3 031f 	rsb	r3, r3, #31
 800938a:	617b      	str	r3, [r7, #20]
 800938c:	4921      	ldr	r1, [pc, #132]	; (8009414 <vTaskSwitchContext+0x108>)
 800938e:	697a      	ldr	r2, [r7, #20]
 8009390:	4613      	mov	r3, r2
 8009392:	009b      	lsls	r3, r3, #2
 8009394:	4413      	add	r3, r2
 8009396:	009b      	lsls	r3, r3, #2
 8009398:	440b      	add	r3, r1
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d10a      	bne.n	80093b6 <vTaskSwitchContext+0xaa>
	__asm volatile
 80093a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a4:	f383 8811 	msr	BASEPRI, r3
 80093a8:	f3bf 8f6f 	isb	sy
 80093ac:	f3bf 8f4f 	dsb	sy
 80093b0:	607b      	str	r3, [r7, #4]
}
 80093b2:	bf00      	nop
 80093b4:	e7fe      	b.n	80093b4 <vTaskSwitchContext+0xa8>
 80093b6:	697a      	ldr	r2, [r7, #20]
 80093b8:	4613      	mov	r3, r2
 80093ba:	009b      	lsls	r3, r3, #2
 80093bc:	4413      	add	r3, r2
 80093be:	009b      	lsls	r3, r3, #2
 80093c0:	4a14      	ldr	r2, [pc, #80]	; (8009414 <vTaskSwitchContext+0x108>)
 80093c2:	4413      	add	r3, r2
 80093c4:	613b      	str	r3, [r7, #16]
 80093c6:	693b      	ldr	r3, [r7, #16]
 80093c8:	685b      	ldr	r3, [r3, #4]
 80093ca:	685a      	ldr	r2, [r3, #4]
 80093cc:	693b      	ldr	r3, [r7, #16]
 80093ce:	605a      	str	r2, [r3, #4]
 80093d0:	693b      	ldr	r3, [r7, #16]
 80093d2:	685a      	ldr	r2, [r3, #4]
 80093d4:	693b      	ldr	r3, [r7, #16]
 80093d6:	3308      	adds	r3, #8
 80093d8:	429a      	cmp	r2, r3
 80093da:	d104      	bne.n	80093e6 <vTaskSwitchContext+0xda>
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	685b      	ldr	r3, [r3, #4]
 80093e0:	685a      	ldr	r2, [r3, #4]
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	605a      	str	r2, [r3, #4]
 80093e6:	693b      	ldr	r3, [r7, #16]
 80093e8:	685b      	ldr	r3, [r3, #4]
 80093ea:	68db      	ldr	r3, [r3, #12]
 80093ec:	4a07      	ldr	r2, [pc, #28]	; (800940c <vTaskSwitchContext+0x100>)
 80093ee:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80093f0:	4b06      	ldr	r3, [pc, #24]	; (800940c <vTaskSwitchContext+0x100>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	334c      	adds	r3, #76	; 0x4c
 80093f6:	4a08      	ldr	r2, [pc, #32]	; (8009418 <vTaskSwitchContext+0x10c>)
 80093f8:	6013      	str	r3, [r2, #0]
}
 80093fa:	bf00      	nop
 80093fc:	3720      	adds	r7, #32
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}
 8009402:	bf00      	nop
 8009404:	20000488 	.word	0x20000488
 8009408:	20000474 	.word	0x20000474
 800940c:	20000360 	.word	0x20000360
 8009410:	20000468 	.word	0x20000468
 8009414:	20000364 	.word	0x20000364
 8009418:	2000014c 	.word	0x2000014c

0800941c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b082      	sub	sp, #8
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009424:	f000 f852 	bl	80094cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009428:	4b06      	ldr	r3, [pc, #24]	; (8009444 <prvIdleTask+0x28>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	2b01      	cmp	r3, #1
 800942e:	d9f9      	bls.n	8009424 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009430:	4b05      	ldr	r3, [pc, #20]	; (8009448 <prvIdleTask+0x2c>)
 8009432:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009436:	601a      	str	r2, [r3, #0]
 8009438:	f3bf 8f4f 	dsb	sy
 800943c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009440:	e7f0      	b.n	8009424 <prvIdleTask+0x8>
 8009442:	bf00      	nop
 8009444:	20000364 	.word	0x20000364
 8009448:	e000ed04 	.word	0xe000ed04

0800944c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b082      	sub	sp, #8
 8009450:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009452:	2300      	movs	r3, #0
 8009454:	607b      	str	r3, [r7, #4]
 8009456:	e00c      	b.n	8009472 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009458:	687a      	ldr	r2, [r7, #4]
 800945a:	4613      	mov	r3, r2
 800945c:	009b      	lsls	r3, r3, #2
 800945e:	4413      	add	r3, r2
 8009460:	009b      	lsls	r3, r3, #2
 8009462:	4a12      	ldr	r2, [pc, #72]	; (80094ac <prvInitialiseTaskLists+0x60>)
 8009464:	4413      	add	r3, r2
 8009466:	4618      	mov	r0, r3
 8009468:	f7ff fb64 	bl	8008b34 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	3301      	adds	r3, #1
 8009470:	607b      	str	r3, [r7, #4]
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	2b06      	cmp	r3, #6
 8009476:	d9ef      	bls.n	8009458 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009478:	480d      	ldr	r0, [pc, #52]	; (80094b0 <prvInitialiseTaskLists+0x64>)
 800947a:	f7ff fb5b 	bl	8008b34 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800947e:	480d      	ldr	r0, [pc, #52]	; (80094b4 <prvInitialiseTaskLists+0x68>)
 8009480:	f7ff fb58 	bl	8008b34 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009484:	480c      	ldr	r0, [pc, #48]	; (80094b8 <prvInitialiseTaskLists+0x6c>)
 8009486:	f7ff fb55 	bl	8008b34 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800948a:	480c      	ldr	r0, [pc, #48]	; (80094bc <prvInitialiseTaskLists+0x70>)
 800948c:	f7ff fb52 	bl	8008b34 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009490:	480b      	ldr	r0, [pc, #44]	; (80094c0 <prvInitialiseTaskLists+0x74>)
 8009492:	f7ff fb4f 	bl	8008b34 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009496:	4b0b      	ldr	r3, [pc, #44]	; (80094c4 <prvInitialiseTaskLists+0x78>)
 8009498:	4a05      	ldr	r2, [pc, #20]	; (80094b0 <prvInitialiseTaskLists+0x64>)
 800949a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800949c:	4b0a      	ldr	r3, [pc, #40]	; (80094c8 <prvInitialiseTaskLists+0x7c>)
 800949e:	4a05      	ldr	r2, [pc, #20]	; (80094b4 <prvInitialiseTaskLists+0x68>)
 80094a0:	601a      	str	r2, [r3, #0]
}
 80094a2:	bf00      	nop
 80094a4:	3708      	adds	r7, #8
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}
 80094aa:	bf00      	nop
 80094ac:	20000364 	.word	0x20000364
 80094b0:	200003f0 	.word	0x200003f0
 80094b4:	20000404 	.word	0x20000404
 80094b8:	20000420 	.word	0x20000420
 80094bc:	20000434 	.word	0x20000434
 80094c0:	2000044c 	.word	0x2000044c
 80094c4:	20000418 	.word	0x20000418
 80094c8:	2000041c 	.word	0x2000041c

080094cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b082      	sub	sp, #8
 80094d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80094d2:	e019      	b.n	8009508 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80094d4:	f000 f9ee 	bl	80098b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094d8:	4b10      	ldr	r3, [pc, #64]	; (800951c <prvCheckTasksWaitingTermination+0x50>)
 80094da:	68db      	ldr	r3, [r3, #12]
 80094dc:	68db      	ldr	r3, [r3, #12]
 80094de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	3304      	adds	r3, #4
 80094e4:	4618      	mov	r0, r3
 80094e6:	f7ff fbaf 	bl	8008c48 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80094ea:	4b0d      	ldr	r3, [pc, #52]	; (8009520 <prvCheckTasksWaitingTermination+0x54>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	3b01      	subs	r3, #1
 80094f0:	4a0b      	ldr	r2, [pc, #44]	; (8009520 <prvCheckTasksWaitingTermination+0x54>)
 80094f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80094f4:	4b0b      	ldr	r3, [pc, #44]	; (8009524 <prvCheckTasksWaitingTermination+0x58>)
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	3b01      	subs	r3, #1
 80094fa:	4a0a      	ldr	r2, [pc, #40]	; (8009524 <prvCheckTasksWaitingTermination+0x58>)
 80094fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80094fe:	f000 fa09 	bl	8009914 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f000 f810 	bl	8009528 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009508:	4b06      	ldr	r3, [pc, #24]	; (8009524 <prvCheckTasksWaitingTermination+0x58>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d1e1      	bne.n	80094d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009510:	bf00      	nop
 8009512:	bf00      	nop
 8009514:	3708      	adds	r7, #8
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}
 800951a:	bf00      	nop
 800951c:	20000434 	.word	0x20000434
 8009520:	20000460 	.word	0x20000460
 8009524:	20000448 	.word	0x20000448

08009528 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009528:	b580      	push	{r7, lr}
 800952a:	b082      	sub	sp, #8
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	334c      	adds	r3, #76	; 0x4c
 8009534:	4618      	mov	r0, r3
 8009536:	f001 fcbb 	bl	800aeb0 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800953e:	4618      	mov	r0, r3
 8009540:	f000 fb6a 	bl	8009c18 <vPortFree>
			vPortFree( pxTCB );
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	f000 fb67 	bl	8009c18 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800954a:	bf00      	nop
 800954c:	3708      	adds	r7, #8
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}
	...

08009554 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009554:	b480      	push	{r7}
 8009556:	b083      	sub	sp, #12
 8009558:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800955a:	4b0c      	ldr	r3, [pc, #48]	; (800958c <prvResetNextTaskUnblockTime+0x38>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d104      	bne.n	800956e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009564:	4b0a      	ldr	r3, [pc, #40]	; (8009590 <prvResetNextTaskUnblockTime+0x3c>)
 8009566:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800956a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800956c:	e008      	b.n	8009580 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800956e:	4b07      	ldr	r3, [pc, #28]	; (800958c <prvResetNextTaskUnblockTime+0x38>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	68db      	ldr	r3, [r3, #12]
 8009574:	68db      	ldr	r3, [r3, #12]
 8009576:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	685b      	ldr	r3, [r3, #4]
 800957c:	4a04      	ldr	r2, [pc, #16]	; (8009590 <prvResetNextTaskUnblockTime+0x3c>)
 800957e:	6013      	str	r3, [r2, #0]
}
 8009580:	bf00      	nop
 8009582:	370c      	adds	r7, #12
 8009584:	46bd      	mov	sp, r7
 8009586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958a:	4770      	bx	lr
 800958c:	20000418 	.word	0x20000418
 8009590:	20000480 	.word	0x20000480

08009594 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b084      	sub	sp, #16
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
 800959c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800959e:	4b29      	ldr	r3, [pc, #164]	; (8009644 <prvAddCurrentTaskToDelayedList+0xb0>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80095a4:	4b28      	ldr	r3, [pc, #160]	; (8009648 <prvAddCurrentTaskToDelayedList+0xb4>)
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	3304      	adds	r3, #4
 80095aa:	4618      	mov	r0, r3
 80095ac:	f7ff fb4c 	bl	8008c48 <uxListRemove>
 80095b0:	4603      	mov	r3, r0
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d10b      	bne.n	80095ce <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80095b6:	4b24      	ldr	r3, [pc, #144]	; (8009648 <prvAddCurrentTaskToDelayedList+0xb4>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095bc:	2201      	movs	r2, #1
 80095be:	fa02 f303 	lsl.w	r3, r2, r3
 80095c2:	43da      	mvns	r2, r3
 80095c4:	4b21      	ldr	r3, [pc, #132]	; (800964c <prvAddCurrentTaskToDelayedList+0xb8>)
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	4013      	ands	r3, r2
 80095ca:	4a20      	ldr	r2, [pc, #128]	; (800964c <prvAddCurrentTaskToDelayedList+0xb8>)
 80095cc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80095d4:	d10a      	bne.n	80095ec <prvAddCurrentTaskToDelayedList+0x58>
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d007      	beq.n	80095ec <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80095dc:	4b1a      	ldr	r3, [pc, #104]	; (8009648 <prvAddCurrentTaskToDelayedList+0xb4>)
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	3304      	adds	r3, #4
 80095e2:	4619      	mov	r1, r3
 80095e4:	481a      	ldr	r0, [pc, #104]	; (8009650 <prvAddCurrentTaskToDelayedList+0xbc>)
 80095e6:	f7ff fad2 	bl	8008b8e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80095ea:	e026      	b.n	800963a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80095ec:	68fa      	ldr	r2, [r7, #12]
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	4413      	add	r3, r2
 80095f2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80095f4:	4b14      	ldr	r3, [pc, #80]	; (8009648 <prvAddCurrentTaskToDelayedList+0xb4>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	68ba      	ldr	r2, [r7, #8]
 80095fa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80095fc:	68ba      	ldr	r2, [r7, #8]
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	429a      	cmp	r2, r3
 8009602:	d209      	bcs.n	8009618 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009604:	4b13      	ldr	r3, [pc, #76]	; (8009654 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009606:	681a      	ldr	r2, [r3, #0]
 8009608:	4b0f      	ldr	r3, [pc, #60]	; (8009648 <prvAddCurrentTaskToDelayedList+0xb4>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	3304      	adds	r3, #4
 800960e:	4619      	mov	r1, r3
 8009610:	4610      	mov	r0, r2
 8009612:	f7ff fae0 	bl	8008bd6 <vListInsert>
}
 8009616:	e010      	b.n	800963a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009618:	4b0f      	ldr	r3, [pc, #60]	; (8009658 <prvAddCurrentTaskToDelayedList+0xc4>)
 800961a:	681a      	ldr	r2, [r3, #0]
 800961c:	4b0a      	ldr	r3, [pc, #40]	; (8009648 <prvAddCurrentTaskToDelayedList+0xb4>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	3304      	adds	r3, #4
 8009622:	4619      	mov	r1, r3
 8009624:	4610      	mov	r0, r2
 8009626:	f7ff fad6 	bl	8008bd6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800962a:	4b0c      	ldr	r3, [pc, #48]	; (800965c <prvAddCurrentTaskToDelayedList+0xc8>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	68ba      	ldr	r2, [r7, #8]
 8009630:	429a      	cmp	r2, r3
 8009632:	d202      	bcs.n	800963a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009634:	4a09      	ldr	r2, [pc, #36]	; (800965c <prvAddCurrentTaskToDelayedList+0xc8>)
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	6013      	str	r3, [r2, #0]
}
 800963a:	bf00      	nop
 800963c:	3710      	adds	r7, #16
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}
 8009642:	bf00      	nop
 8009644:	20000464 	.word	0x20000464
 8009648:	20000360 	.word	0x20000360
 800964c:	20000468 	.word	0x20000468
 8009650:	2000044c 	.word	0x2000044c
 8009654:	2000041c 	.word	0x2000041c
 8009658:	20000418 	.word	0x20000418
 800965c:	20000480 	.word	0x20000480

08009660 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009660:	b480      	push	{r7}
 8009662:	b085      	sub	sp, #20
 8009664:	af00      	add	r7, sp, #0
 8009666:	60f8      	str	r0, [r7, #12]
 8009668:	60b9      	str	r1, [r7, #8]
 800966a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	3b04      	subs	r3, #4
 8009670:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009678:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	3b04      	subs	r3, #4
 800967e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	f023 0201 	bic.w	r2, r3, #1
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	3b04      	subs	r3, #4
 800968e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009690:	4a0c      	ldr	r2, [pc, #48]	; (80096c4 <pxPortInitialiseStack+0x64>)
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	3b14      	subs	r3, #20
 800969a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800969c:	687a      	ldr	r2, [r7, #4]
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	3b04      	subs	r3, #4
 80096a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	f06f 0202 	mvn.w	r2, #2
 80096ae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	3b20      	subs	r3, #32
 80096b4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80096b6:	68fb      	ldr	r3, [r7, #12]
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	3714      	adds	r7, #20
 80096bc:	46bd      	mov	sp, r7
 80096be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c2:	4770      	bx	lr
 80096c4:	080096c9 	.word	0x080096c9

080096c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80096c8:	b480      	push	{r7}
 80096ca:	b085      	sub	sp, #20
 80096cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80096ce:	2300      	movs	r3, #0
 80096d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80096d2:	4b12      	ldr	r3, [pc, #72]	; (800971c <prvTaskExitError+0x54>)
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80096da:	d00a      	beq.n	80096f2 <prvTaskExitError+0x2a>
	__asm volatile
 80096dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e0:	f383 8811 	msr	BASEPRI, r3
 80096e4:	f3bf 8f6f 	isb	sy
 80096e8:	f3bf 8f4f 	dsb	sy
 80096ec:	60fb      	str	r3, [r7, #12]
}
 80096ee:	bf00      	nop
 80096f0:	e7fe      	b.n	80096f0 <prvTaskExitError+0x28>
	__asm volatile
 80096f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096f6:	f383 8811 	msr	BASEPRI, r3
 80096fa:	f3bf 8f6f 	isb	sy
 80096fe:	f3bf 8f4f 	dsb	sy
 8009702:	60bb      	str	r3, [r7, #8]
}
 8009704:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009706:	bf00      	nop
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d0fc      	beq.n	8009708 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800970e:	bf00      	nop
 8009710:	bf00      	nop
 8009712:	3714      	adds	r7, #20
 8009714:	46bd      	mov	sp, r7
 8009716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971a:	4770      	bx	lr
 800971c:	20000098 	.word	0x20000098

08009720 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009720:	4b07      	ldr	r3, [pc, #28]	; (8009740 <pxCurrentTCBConst2>)
 8009722:	6819      	ldr	r1, [r3, #0]
 8009724:	6808      	ldr	r0, [r1, #0]
 8009726:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800972a:	f380 8809 	msr	PSP, r0
 800972e:	f3bf 8f6f 	isb	sy
 8009732:	f04f 0000 	mov.w	r0, #0
 8009736:	f380 8811 	msr	BASEPRI, r0
 800973a:	4770      	bx	lr
 800973c:	f3af 8000 	nop.w

08009740 <pxCurrentTCBConst2>:
 8009740:	20000360 	.word	0x20000360
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009744:	bf00      	nop
 8009746:	bf00      	nop

08009748 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009748:	4808      	ldr	r0, [pc, #32]	; (800976c <prvPortStartFirstTask+0x24>)
 800974a:	6800      	ldr	r0, [r0, #0]
 800974c:	6800      	ldr	r0, [r0, #0]
 800974e:	f380 8808 	msr	MSP, r0
 8009752:	f04f 0000 	mov.w	r0, #0
 8009756:	f380 8814 	msr	CONTROL, r0
 800975a:	b662      	cpsie	i
 800975c:	b661      	cpsie	f
 800975e:	f3bf 8f4f 	dsb	sy
 8009762:	f3bf 8f6f 	isb	sy
 8009766:	df00      	svc	0
 8009768:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800976a:	bf00      	nop
 800976c:	e000ed08 	.word	0xe000ed08

08009770 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b086      	sub	sp, #24
 8009774:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009776:	4b46      	ldr	r3, [pc, #280]	; (8009890 <xPortStartScheduler+0x120>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	4a46      	ldr	r2, [pc, #280]	; (8009894 <xPortStartScheduler+0x124>)
 800977c:	4293      	cmp	r3, r2
 800977e:	d10a      	bne.n	8009796 <xPortStartScheduler+0x26>
	__asm volatile
 8009780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009784:	f383 8811 	msr	BASEPRI, r3
 8009788:	f3bf 8f6f 	isb	sy
 800978c:	f3bf 8f4f 	dsb	sy
 8009790:	613b      	str	r3, [r7, #16]
}
 8009792:	bf00      	nop
 8009794:	e7fe      	b.n	8009794 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009796:	4b3e      	ldr	r3, [pc, #248]	; (8009890 <xPortStartScheduler+0x120>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	4a3f      	ldr	r2, [pc, #252]	; (8009898 <xPortStartScheduler+0x128>)
 800979c:	4293      	cmp	r3, r2
 800979e:	d10a      	bne.n	80097b6 <xPortStartScheduler+0x46>
	__asm volatile
 80097a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097a4:	f383 8811 	msr	BASEPRI, r3
 80097a8:	f3bf 8f6f 	isb	sy
 80097ac:	f3bf 8f4f 	dsb	sy
 80097b0:	60fb      	str	r3, [r7, #12]
}
 80097b2:	bf00      	nop
 80097b4:	e7fe      	b.n	80097b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80097b6:	4b39      	ldr	r3, [pc, #228]	; (800989c <xPortStartScheduler+0x12c>)
 80097b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80097ba:	697b      	ldr	r3, [r7, #20]
 80097bc:	781b      	ldrb	r3, [r3, #0]
 80097be:	b2db      	uxtb	r3, r3
 80097c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80097c2:	697b      	ldr	r3, [r7, #20]
 80097c4:	22ff      	movs	r2, #255	; 0xff
 80097c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80097c8:	697b      	ldr	r3, [r7, #20]
 80097ca:	781b      	ldrb	r3, [r3, #0]
 80097cc:	b2db      	uxtb	r3, r3
 80097ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80097d0:	78fb      	ldrb	r3, [r7, #3]
 80097d2:	b2db      	uxtb	r3, r3
 80097d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80097d8:	b2da      	uxtb	r2, r3
 80097da:	4b31      	ldr	r3, [pc, #196]	; (80098a0 <xPortStartScheduler+0x130>)
 80097dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80097de:	4b31      	ldr	r3, [pc, #196]	; (80098a4 <xPortStartScheduler+0x134>)
 80097e0:	2207      	movs	r2, #7
 80097e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80097e4:	e009      	b.n	80097fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80097e6:	4b2f      	ldr	r3, [pc, #188]	; (80098a4 <xPortStartScheduler+0x134>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	3b01      	subs	r3, #1
 80097ec:	4a2d      	ldr	r2, [pc, #180]	; (80098a4 <xPortStartScheduler+0x134>)
 80097ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80097f0:	78fb      	ldrb	r3, [r7, #3]
 80097f2:	b2db      	uxtb	r3, r3
 80097f4:	005b      	lsls	r3, r3, #1
 80097f6:	b2db      	uxtb	r3, r3
 80097f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80097fa:	78fb      	ldrb	r3, [r7, #3]
 80097fc:	b2db      	uxtb	r3, r3
 80097fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009802:	2b80      	cmp	r3, #128	; 0x80
 8009804:	d0ef      	beq.n	80097e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009806:	4b27      	ldr	r3, [pc, #156]	; (80098a4 <xPortStartScheduler+0x134>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f1c3 0307 	rsb	r3, r3, #7
 800980e:	2b04      	cmp	r3, #4
 8009810:	d00a      	beq.n	8009828 <xPortStartScheduler+0xb8>
	__asm volatile
 8009812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009816:	f383 8811 	msr	BASEPRI, r3
 800981a:	f3bf 8f6f 	isb	sy
 800981e:	f3bf 8f4f 	dsb	sy
 8009822:	60bb      	str	r3, [r7, #8]
}
 8009824:	bf00      	nop
 8009826:	e7fe      	b.n	8009826 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009828:	4b1e      	ldr	r3, [pc, #120]	; (80098a4 <xPortStartScheduler+0x134>)
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	021b      	lsls	r3, r3, #8
 800982e:	4a1d      	ldr	r2, [pc, #116]	; (80098a4 <xPortStartScheduler+0x134>)
 8009830:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009832:	4b1c      	ldr	r3, [pc, #112]	; (80098a4 <xPortStartScheduler+0x134>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800983a:	4a1a      	ldr	r2, [pc, #104]	; (80098a4 <xPortStartScheduler+0x134>)
 800983c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	b2da      	uxtb	r2, r3
 8009842:	697b      	ldr	r3, [r7, #20]
 8009844:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009846:	4b18      	ldr	r3, [pc, #96]	; (80098a8 <xPortStartScheduler+0x138>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	4a17      	ldr	r2, [pc, #92]	; (80098a8 <xPortStartScheduler+0x138>)
 800984c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009850:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009852:	4b15      	ldr	r3, [pc, #84]	; (80098a8 <xPortStartScheduler+0x138>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	4a14      	ldr	r2, [pc, #80]	; (80098a8 <xPortStartScheduler+0x138>)
 8009858:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800985c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800985e:	f000 f8dd 	bl	8009a1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009862:	4b12      	ldr	r3, [pc, #72]	; (80098ac <xPortStartScheduler+0x13c>)
 8009864:	2200      	movs	r2, #0
 8009866:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009868:	f000 f8fc 	bl	8009a64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800986c:	4b10      	ldr	r3, [pc, #64]	; (80098b0 <xPortStartScheduler+0x140>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	4a0f      	ldr	r2, [pc, #60]	; (80098b0 <xPortStartScheduler+0x140>)
 8009872:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009876:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009878:	f7ff ff66 	bl	8009748 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800987c:	f7ff fd46 	bl	800930c <vTaskSwitchContext>
	prvTaskExitError();
 8009880:	f7ff ff22 	bl	80096c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009884:	2300      	movs	r3, #0
}
 8009886:	4618      	mov	r0, r3
 8009888:	3718      	adds	r7, #24
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}
 800988e:	bf00      	nop
 8009890:	e000ed00 	.word	0xe000ed00
 8009894:	410fc271 	.word	0x410fc271
 8009898:	410fc270 	.word	0x410fc270
 800989c:	e000e400 	.word	0xe000e400
 80098a0:	2000048c 	.word	0x2000048c
 80098a4:	20000490 	.word	0x20000490
 80098a8:	e000ed20 	.word	0xe000ed20
 80098ac:	20000098 	.word	0x20000098
 80098b0:	e000ef34 	.word	0xe000ef34

080098b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80098b4:	b480      	push	{r7}
 80098b6:	b083      	sub	sp, #12
 80098b8:	af00      	add	r7, sp, #0
	__asm volatile
 80098ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098be:	f383 8811 	msr	BASEPRI, r3
 80098c2:	f3bf 8f6f 	isb	sy
 80098c6:	f3bf 8f4f 	dsb	sy
 80098ca:	607b      	str	r3, [r7, #4]
}
 80098cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80098ce:	4b0f      	ldr	r3, [pc, #60]	; (800990c <vPortEnterCritical+0x58>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	3301      	adds	r3, #1
 80098d4:	4a0d      	ldr	r2, [pc, #52]	; (800990c <vPortEnterCritical+0x58>)
 80098d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80098d8:	4b0c      	ldr	r3, [pc, #48]	; (800990c <vPortEnterCritical+0x58>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	2b01      	cmp	r3, #1
 80098de:	d10f      	bne.n	8009900 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80098e0:	4b0b      	ldr	r3, [pc, #44]	; (8009910 <vPortEnterCritical+0x5c>)
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	b2db      	uxtb	r3, r3
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d00a      	beq.n	8009900 <vPortEnterCritical+0x4c>
	__asm volatile
 80098ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ee:	f383 8811 	msr	BASEPRI, r3
 80098f2:	f3bf 8f6f 	isb	sy
 80098f6:	f3bf 8f4f 	dsb	sy
 80098fa:	603b      	str	r3, [r7, #0]
}
 80098fc:	bf00      	nop
 80098fe:	e7fe      	b.n	80098fe <vPortEnterCritical+0x4a>
	}
}
 8009900:	bf00      	nop
 8009902:	370c      	adds	r7, #12
 8009904:	46bd      	mov	sp, r7
 8009906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990a:	4770      	bx	lr
 800990c:	20000098 	.word	0x20000098
 8009910:	e000ed04 	.word	0xe000ed04

08009914 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009914:	b480      	push	{r7}
 8009916:	b083      	sub	sp, #12
 8009918:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800991a:	4b12      	ldr	r3, [pc, #72]	; (8009964 <vPortExitCritical+0x50>)
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d10a      	bne.n	8009938 <vPortExitCritical+0x24>
	__asm volatile
 8009922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009926:	f383 8811 	msr	BASEPRI, r3
 800992a:	f3bf 8f6f 	isb	sy
 800992e:	f3bf 8f4f 	dsb	sy
 8009932:	607b      	str	r3, [r7, #4]
}
 8009934:	bf00      	nop
 8009936:	e7fe      	b.n	8009936 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009938:	4b0a      	ldr	r3, [pc, #40]	; (8009964 <vPortExitCritical+0x50>)
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	3b01      	subs	r3, #1
 800993e:	4a09      	ldr	r2, [pc, #36]	; (8009964 <vPortExitCritical+0x50>)
 8009940:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009942:	4b08      	ldr	r3, [pc, #32]	; (8009964 <vPortExitCritical+0x50>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d105      	bne.n	8009956 <vPortExitCritical+0x42>
 800994a:	2300      	movs	r3, #0
 800994c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009954:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009956:	bf00      	nop
 8009958:	370c      	adds	r7, #12
 800995a:	46bd      	mov	sp, r7
 800995c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009960:	4770      	bx	lr
 8009962:	bf00      	nop
 8009964:	20000098 	.word	0x20000098
	...

08009970 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009970:	f3ef 8009 	mrs	r0, PSP
 8009974:	f3bf 8f6f 	isb	sy
 8009978:	4b15      	ldr	r3, [pc, #84]	; (80099d0 <pxCurrentTCBConst>)
 800997a:	681a      	ldr	r2, [r3, #0]
 800997c:	f01e 0f10 	tst.w	lr, #16
 8009980:	bf08      	it	eq
 8009982:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009986:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800998a:	6010      	str	r0, [r2, #0]
 800998c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009990:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009994:	f380 8811 	msr	BASEPRI, r0
 8009998:	f3bf 8f4f 	dsb	sy
 800999c:	f3bf 8f6f 	isb	sy
 80099a0:	f7ff fcb4 	bl	800930c <vTaskSwitchContext>
 80099a4:	f04f 0000 	mov.w	r0, #0
 80099a8:	f380 8811 	msr	BASEPRI, r0
 80099ac:	bc09      	pop	{r0, r3}
 80099ae:	6819      	ldr	r1, [r3, #0]
 80099b0:	6808      	ldr	r0, [r1, #0]
 80099b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099b6:	f01e 0f10 	tst.w	lr, #16
 80099ba:	bf08      	it	eq
 80099bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80099c0:	f380 8809 	msr	PSP, r0
 80099c4:	f3bf 8f6f 	isb	sy
 80099c8:	4770      	bx	lr
 80099ca:	bf00      	nop
 80099cc:	f3af 8000 	nop.w

080099d0 <pxCurrentTCBConst>:
 80099d0:	20000360 	.word	0x20000360
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80099d4:	bf00      	nop
 80099d6:	bf00      	nop

080099d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b082      	sub	sp, #8
 80099dc:	af00      	add	r7, sp, #0
	__asm volatile
 80099de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099e2:	f383 8811 	msr	BASEPRI, r3
 80099e6:	f3bf 8f6f 	isb	sy
 80099ea:	f3bf 8f4f 	dsb	sy
 80099ee:	607b      	str	r3, [r7, #4]
}
 80099f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80099f2:	f7ff fbd3 	bl	800919c <xTaskIncrementTick>
 80099f6:	4603      	mov	r3, r0
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d003      	beq.n	8009a04 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80099fc:	4b06      	ldr	r3, [pc, #24]	; (8009a18 <SysTick_Handler+0x40>)
 80099fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a02:	601a      	str	r2, [r3, #0]
 8009a04:	2300      	movs	r3, #0
 8009a06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	f383 8811 	msr	BASEPRI, r3
}
 8009a0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009a10:	bf00      	nop
 8009a12:	3708      	adds	r7, #8
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}
 8009a18:	e000ed04 	.word	0xe000ed04

08009a1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009a20:	4b0b      	ldr	r3, [pc, #44]	; (8009a50 <vPortSetupTimerInterrupt+0x34>)
 8009a22:	2200      	movs	r2, #0
 8009a24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009a26:	4b0b      	ldr	r3, [pc, #44]	; (8009a54 <vPortSetupTimerInterrupt+0x38>)
 8009a28:	2200      	movs	r2, #0
 8009a2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009a2c:	4b0a      	ldr	r3, [pc, #40]	; (8009a58 <vPortSetupTimerInterrupt+0x3c>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	4a0a      	ldr	r2, [pc, #40]	; (8009a5c <vPortSetupTimerInterrupt+0x40>)
 8009a32:	fba2 2303 	umull	r2, r3, r2, r3
 8009a36:	099b      	lsrs	r3, r3, #6
 8009a38:	4a09      	ldr	r2, [pc, #36]	; (8009a60 <vPortSetupTimerInterrupt+0x44>)
 8009a3a:	3b01      	subs	r3, #1
 8009a3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009a3e:	4b04      	ldr	r3, [pc, #16]	; (8009a50 <vPortSetupTimerInterrupt+0x34>)
 8009a40:	2207      	movs	r2, #7
 8009a42:	601a      	str	r2, [r3, #0]
}
 8009a44:	bf00      	nop
 8009a46:	46bd      	mov	sp, r7
 8009a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4c:	4770      	bx	lr
 8009a4e:	bf00      	nop
 8009a50:	e000e010 	.word	0xe000e010
 8009a54:	e000e018 	.word	0xe000e018
 8009a58:	20000000 	.word	0x20000000
 8009a5c:	10624dd3 	.word	0x10624dd3
 8009a60:	e000e014 	.word	0xe000e014

08009a64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009a64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009a74 <vPortEnableVFP+0x10>
 8009a68:	6801      	ldr	r1, [r0, #0]
 8009a6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009a6e:	6001      	str	r1, [r0, #0]
 8009a70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009a72:	bf00      	nop
 8009a74:	e000ed88 	.word	0xe000ed88

08009a78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b08a      	sub	sp, #40	; 0x28
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009a80:	2300      	movs	r3, #0
 8009a82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009a84:	f7ff fae0 	bl	8009048 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009a88:	4b5d      	ldr	r3, [pc, #372]	; (8009c00 <pvPortMalloc+0x188>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d101      	bne.n	8009a94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009a90:	f000 f924 	bl	8009cdc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009a94:	4b5b      	ldr	r3, [pc, #364]	; (8009c04 <pvPortMalloc+0x18c>)
 8009a96:	681a      	ldr	r2, [r3, #0]
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	4013      	ands	r3, r2
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	f040 8093 	bne.w	8009bc8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d01d      	beq.n	8009ae4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009aa8:	2208      	movs	r2, #8
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	4413      	add	r3, r2
 8009aae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f003 0307 	and.w	r3, r3, #7
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d014      	beq.n	8009ae4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	f023 0307 	bic.w	r3, r3, #7
 8009ac0:	3308      	adds	r3, #8
 8009ac2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f003 0307 	and.w	r3, r3, #7
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d00a      	beq.n	8009ae4 <pvPortMalloc+0x6c>
	__asm volatile
 8009ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ad2:	f383 8811 	msr	BASEPRI, r3
 8009ad6:	f3bf 8f6f 	isb	sy
 8009ada:	f3bf 8f4f 	dsb	sy
 8009ade:	617b      	str	r3, [r7, #20]
}
 8009ae0:	bf00      	nop
 8009ae2:	e7fe      	b.n	8009ae2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d06e      	beq.n	8009bc8 <pvPortMalloc+0x150>
 8009aea:	4b47      	ldr	r3, [pc, #284]	; (8009c08 <pvPortMalloc+0x190>)
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	687a      	ldr	r2, [r7, #4]
 8009af0:	429a      	cmp	r2, r3
 8009af2:	d869      	bhi.n	8009bc8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009af4:	4b45      	ldr	r3, [pc, #276]	; (8009c0c <pvPortMalloc+0x194>)
 8009af6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009af8:	4b44      	ldr	r3, [pc, #272]	; (8009c0c <pvPortMalloc+0x194>)
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009afe:	e004      	b.n	8009b0a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b0c:	685b      	ldr	r3, [r3, #4]
 8009b0e:	687a      	ldr	r2, [r7, #4]
 8009b10:	429a      	cmp	r2, r3
 8009b12:	d903      	bls.n	8009b1c <pvPortMalloc+0xa4>
 8009b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d1f1      	bne.n	8009b00 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009b1c:	4b38      	ldr	r3, [pc, #224]	; (8009c00 <pvPortMalloc+0x188>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b22:	429a      	cmp	r2, r3
 8009b24:	d050      	beq.n	8009bc8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009b26:	6a3b      	ldr	r3, [r7, #32]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	2208      	movs	r2, #8
 8009b2c:	4413      	add	r3, r2
 8009b2e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b32:	681a      	ldr	r2, [r3, #0]
 8009b34:	6a3b      	ldr	r3, [r7, #32]
 8009b36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b3a:	685a      	ldr	r2, [r3, #4]
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	1ad2      	subs	r2, r2, r3
 8009b40:	2308      	movs	r3, #8
 8009b42:	005b      	lsls	r3, r3, #1
 8009b44:	429a      	cmp	r2, r3
 8009b46:	d91f      	bls.n	8009b88 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009b48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	4413      	add	r3, r2
 8009b4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b50:	69bb      	ldr	r3, [r7, #24]
 8009b52:	f003 0307 	and.w	r3, r3, #7
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d00a      	beq.n	8009b70 <pvPortMalloc+0xf8>
	__asm volatile
 8009b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b5e:	f383 8811 	msr	BASEPRI, r3
 8009b62:	f3bf 8f6f 	isb	sy
 8009b66:	f3bf 8f4f 	dsb	sy
 8009b6a:	613b      	str	r3, [r7, #16]
}
 8009b6c:	bf00      	nop
 8009b6e:	e7fe      	b.n	8009b6e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b72:	685a      	ldr	r2, [r3, #4]
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	1ad2      	subs	r2, r2, r3
 8009b78:	69bb      	ldr	r3, [r7, #24]
 8009b7a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b7e:	687a      	ldr	r2, [r7, #4]
 8009b80:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009b82:	69b8      	ldr	r0, [r7, #24]
 8009b84:	f000 f90c 	bl	8009da0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009b88:	4b1f      	ldr	r3, [pc, #124]	; (8009c08 <pvPortMalloc+0x190>)
 8009b8a:	681a      	ldr	r2, [r3, #0]
 8009b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b8e:	685b      	ldr	r3, [r3, #4]
 8009b90:	1ad3      	subs	r3, r2, r3
 8009b92:	4a1d      	ldr	r2, [pc, #116]	; (8009c08 <pvPortMalloc+0x190>)
 8009b94:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009b96:	4b1c      	ldr	r3, [pc, #112]	; (8009c08 <pvPortMalloc+0x190>)
 8009b98:	681a      	ldr	r2, [r3, #0]
 8009b9a:	4b1d      	ldr	r3, [pc, #116]	; (8009c10 <pvPortMalloc+0x198>)
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	429a      	cmp	r2, r3
 8009ba0:	d203      	bcs.n	8009baa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009ba2:	4b19      	ldr	r3, [pc, #100]	; (8009c08 <pvPortMalloc+0x190>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	4a1a      	ldr	r2, [pc, #104]	; (8009c10 <pvPortMalloc+0x198>)
 8009ba8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bac:	685a      	ldr	r2, [r3, #4]
 8009bae:	4b15      	ldr	r3, [pc, #84]	; (8009c04 <pvPortMalloc+0x18c>)
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	431a      	orrs	r2, r3
 8009bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bb6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bba:	2200      	movs	r2, #0
 8009bbc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009bbe:	4b15      	ldr	r3, [pc, #84]	; (8009c14 <pvPortMalloc+0x19c>)
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	3301      	adds	r3, #1
 8009bc4:	4a13      	ldr	r2, [pc, #76]	; (8009c14 <pvPortMalloc+0x19c>)
 8009bc6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009bc8:	f7ff fa4c 	bl	8009064 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8009bcc:	69fb      	ldr	r3, [r7, #28]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d101      	bne.n	8009bd6 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8009bd2:	f7f6 fd24 	bl	800061e <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009bd6:	69fb      	ldr	r3, [r7, #28]
 8009bd8:	f003 0307 	and.w	r3, r3, #7
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d00a      	beq.n	8009bf6 <pvPortMalloc+0x17e>
	__asm volatile
 8009be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009be4:	f383 8811 	msr	BASEPRI, r3
 8009be8:	f3bf 8f6f 	isb	sy
 8009bec:	f3bf 8f4f 	dsb	sy
 8009bf0:	60fb      	str	r3, [r7, #12]
}
 8009bf2:	bf00      	nop
 8009bf4:	e7fe      	b.n	8009bf4 <pvPortMalloc+0x17c>
	return pvReturn;
 8009bf6:	69fb      	ldr	r3, [r7, #28]
}
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	3728      	adds	r7, #40	; 0x28
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	bd80      	pop	{r7, pc}
 8009c00:	2000409c 	.word	0x2000409c
 8009c04:	200040b0 	.word	0x200040b0
 8009c08:	200040a0 	.word	0x200040a0
 8009c0c:	20004094 	.word	0x20004094
 8009c10:	200040a4 	.word	0x200040a4
 8009c14:	200040a8 	.word	0x200040a8

08009c18 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b086      	sub	sp, #24
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d04d      	beq.n	8009cc6 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009c2a:	2308      	movs	r3, #8
 8009c2c:	425b      	negs	r3, r3
 8009c2e:	697a      	ldr	r2, [r7, #20]
 8009c30:	4413      	add	r3, r2
 8009c32:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009c34:	697b      	ldr	r3, [r7, #20]
 8009c36:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009c38:	693b      	ldr	r3, [r7, #16]
 8009c3a:	685a      	ldr	r2, [r3, #4]
 8009c3c:	4b24      	ldr	r3, [pc, #144]	; (8009cd0 <vPortFree+0xb8>)
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	4013      	ands	r3, r2
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d10a      	bne.n	8009c5c <vPortFree+0x44>
	__asm volatile
 8009c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c4a:	f383 8811 	msr	BASEPRI, r3
 8009c4e:	f3bf 8f6f 	isb	sy
 8009c52:	f3bf 8f4f 	dsb	sy
 8009c56:	60fb      	str	r3, [r7, #12]
}
 8009c58:	bf00      	nop
 8009c5a:	e7fe      	b.n	8009c5a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009c5c:	693b      	ldr	r3, [r7, #16]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d00a      	beq.n	8009c7a <vPortFree+0x62>
	__asm volatile
 8009c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c68:	f383 8811 	msr	BASEPRI, r3
 8009c6c:	f3bf 8f6f 	isb	sy
 8009c70:	f3bf 8f4f 	dsb	sy
 8009c74:	60bb      	str	r3, [r7, #8]
}
 8009c76:	bf00      	nop
 8009c78:	e7fe      	b.n	8009c78 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009c7a:	693b      	ldr	r3, [r7, #16]
 8009c7c:	685a      	ldr	r2, [r3, #4]
 8009c7e:	4b14      	ldr	r3, [pc, #80]	; (8009cd0 <vPortFree+0xb8>)
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	4013      	ands	r3, r2
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d01e      	beq.n	8009cc6 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009c88:	693b      	ldr	r3, [r7, #16]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d11a      	bne.n	8009cc6 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009c90:	693b      	ldr	r3, [r7, #16]
 8009c92:	685a      	ldr	r2, [r3, #4]
 8009c94:	4b0e      	ldr	r3, [pc, #56]	; (8009cd0 <vPortFree+0xb8>)
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	43db      	mvns	r3, r3
 8009c9a:	401a      	ands	r2, r3
 8009c9c:	693b      	ldr	r3, [r7, #16]
 8009c9e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009ca0:	f7ff f9d2 	bl	8009048 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009ca4:	693b      	ldr	r3, [r7, #16]
 8009ca6:	685a      	ldr	r2, [r3, #4]
 8009ca8:	4b0a      	ldr	r3, [pc, #40]	; (8009cd4 <vPortFree+0xbc>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	4413      	add	r3, r2
 8009cae:	4a09      	ldr	r2, [pc, #36]	; (8009cd4 <vPortFree+0xbc>)
 8009cb0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009cb2:	6938      	ldr	r0, [r7, #16]
 8009cb4:	f000 f874 	bl	8009da0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009cb8:	4b07      	ldr	r3, [pc, #28]	; (8009cd8 <vPortFree+0xc0>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	3301      	adds	r3, #1
 8009cbe:	4a06      	ldr	r2, [pc, #24]	; (8009cd8 <vPortFree+0xc0>)
 8009cc0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009cc2:	f7ff f9cf 	bl	8009064 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009cc6:	bf00      	nop
 8009cc8:	3718      	adds	r7, #24
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}
 8009cce:	bf00      	nop
 8009cd0:	200040b0 	.word	0x200040b0
 8009cd4:	200040a0 	.word	0x200040a0
 8009cd8:	200040ac 	.word	0x200040ac

08009cdc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009cdc:	b480      	push	{r7}
 8009cde:	b085      	sub	sp, #20
 8009ce0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009ce2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009ce6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009ce8:	4b27      	ldr	r3, [pc, #156]	; (8009d88 <prvHeapInit+0xac>)
 8009cea:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	f003 0307 	and.w	r3, r3, #7
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d00c      	beq.n	8009d10 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	3307      	adds	r3, #7
 8009cfa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	f023 0307 	bic.w	r3, r3, #7
 8009d02:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009d04:	68ba      	ldr	r2, [r7, #8]
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	1ad3      	subs	r3, r2, r3
 8009d0a:	4a1f      	ldr	r2, [pc, #124]	; (8009d88 <prvHeapInit+0xac>)
 8009d0c:	4413      	add	r3, r2
 8009d0e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009d14:	4a1d      	ldr	r2, [pc, #116]	; (8009d8c <prvHeapInit+0xb0>)
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009d1a:	4b1c      	ldr	r3, [pc, #112]	; (8009d8c <prvHeapInit+0xb0>)
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	68ba      	ldr	r2, [r7, #8]
 8009d24:	4413      	add	r3, r2
 8009d26:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009d28:	2208      	movs	r2, #8
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	1a9b      	subs	r3, r3, r2
 8009d2e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	f023 0307 	bic.w	r3, r3, #7
 8009d36:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	4a15      	ldr	r2, [pc, #84]	; (8009d90 <prvHeapInit+0xb4>)
 8009d3c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009d3e:	4b14      	ldr	r3, [pc, #80]	; (8009d90 <prvHeapInit+0xb4>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	2200      	movs	r2, #0
 8009d44:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009d46:	4b12      	ldr	r3, [pc, #72]	; (8009d90 <prvHeapInit+0xb4>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	68fa      	ldr	r2, [r7, #12]
 8009d56:	1ad2      	subs	r2, r2, r3
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009d5c:	4b0c      	ldr	r3, [pc, #48]	; (8009d90 <prvHeapInit+0xb4>)
 8009d5e:	681a      	ldr	r2, [r3, #0]
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	685b      	ldr	r3, [r3, #4]
 8009d68:	4a0a      	ldr	r2, [pc, #40]	; (8009d94 <prvHeapInit+0xb8>)
 8009d6a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	685b      	ldr	r3, [r3, #4]
 8009d70:	4a09      	ldr	r2, [pc, #36]	; (8009d98 <prvHeapInit+0xbc>)
 8009d72:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009d74:	4b09      	ldr	r3, [pc, #36]	; (8009d9c <prvHeapInit+0xc0>)
 8009d76:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009d7a:	601a      	str	r2, [r3, #0]
}
 8009d7c:	bf00      	nop
 8009d7e:	3714      	adds	r7, #20
 8009d80:	46bd      	mov	sp, r7
 8009d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d86:	4770      	bx	lr
 8009d88:	20000494 	.word	0x20000494
 8009d8c:	20004094 	.word	0x20004094
 8009d90:	2000409c 	.word	0x2000409c
 8009d94:	200040a4 	.word	0x200040a4
 8009d98:	200040a0 	.word	0x200040a0
 8009d9c:	200040b0 	.word	0x200040b0

08009da0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009da0:	b480      	push	{r7}
 8009da2:	b085      	sub	sp, #20
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009da8:	4b28      	ldr	r3, [pc, #160]	; (8009e4c <prvInsertBlockIntoFreeList+0xac>)
 8009daa:	60fb      	str	r3, [r7, #12]
 8009dac:	e002      	b.n	8009db4 <prvInsertBlockIntoFreeList+0x14>
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	60fb      	str	r3, [r7, #12]
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	687a      	ldr	r2, [r7, #4]
 8009dba:	429a      	cmp	r2, r3
 8009dbc:	d8f7      	bhi.n	8009dae <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	685b      	ldr	r3, [r3, #4]
 8009dc6:	68ba      	ldr	r2, [r7, #8]
 8009dc8:	4413      	add	r3, r2
 8009dca:	687a      	ldr	r2, [r7, #4]
 8009dcc:	429a      	cmp	r2, r3
 8009dce:	d108      	bne.n	8009de2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	685a      	ldr	r2, [r3, #4]
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	685b      	ldr	r3, [r3, #4]
 8009dd8:	441a      	add	r2, r3
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	685b      	ldr	r3, [r3, #4]
 8009dea:	68ba      	ldr	r2, [r7, #8]
 8009dec:	441a      	add	r2, r3
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	429a      	cmp	r2, r3
 8009df4:	d118      	bne.n	8009e28 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	681a      	ldr	r2, [r3, #0]
 8009dfa:	4b15      	ldr	r3, [pc, #84]	; (8009e50 <prvInsertBlockIntoFreeList+0xb0>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	429a      	cmp	r2, r3
 8009e00:	d00d      	beq.n	8009e1e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	685a      	ldr	r2, [r3, #4]
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	685b      	ldr	r3, [r3, #4]
 8009e0c:	441a      	add	r2, r3
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	681a      	ldr	r2, [r3, #0]
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	601a      	str	r2, [r3, #0]
 8009e1c:	e008      	b.n	8009e30 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009e1e:	4b0c      	ldr	r3, [pc, #48]	; (8009e50 <prvInsertBlockIntoFreeList+0xb0>)
 8009e20:	681a      	ldr	r2, [r3, #0]
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	601a      	str	r2, [r3, #0]
 8009e26:	e003      	b.n	8009e30 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	681a      	ldr	r2, [r3, #0]
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009e30:	68fa      	ldr	r2, [r7, #12]
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	429a      	cmp	r2, r3
 8009e36:	d002      	beq.n	8009e3e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	687a      	ldr	r2, [r7, #4]
 8009e3c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009e3e:	bf00      	nop
 8009e40:	3714      	adds	r7, #20
 8009e42:	46bd      	mov	sp, r7
 8009e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e48:	4770      	bx	lr
 8009e4a:	bf00      	nop
 8009e4c:	20004094 	.word	0x20004094
 8009e50:	2000409c 	.word	0x2000409c

08009e54 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009e58:	2200      	movs	r2, #0
 8009e5a:	4912      	ldr	r1, [pc, #72]	; (8009ea4 <MX_USB_DEVICE_Init+0x50>)
 8009e5c:	4812      	ldr	r0, [pc, #72]	; (8009ea8 <MX_USB_DEVICE_Init+0x54>)
 8009e5e:	f7fd fb17 	bl	8007490 <USBD_Init>
 8009e62:	4603      	mov	r3, r0
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d001      	beq.n	8009e6c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009e68:	f7f6 fe82 	bl	8000b70 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009e6c:	490f      	ldr	r1, [pc, #60]	; (8009eac <MX_USB_DEVICE_Init+0x58>)
 8009e6e:	480e      	ldr	r0, [pc, #56]	; (8009ea8 <MX_USB_DEVICE_Init+0x54>)
 8009e70:	f7fd fb3e 	bl	80074f0 <USBD_RegisterClass>
 8009e74:	4603      	mov	r3, r0
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d001      	beq.n	8009e7e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009e7a:	f7f6 fe79 	bl	8000b70 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009e7e:	490c      	ldr	r1, [pc, #48]	; (8009eb0 <MX_USB_DEVICE_Init+0x5c>)
 8009e80:	4809      	ldr	r0, [pc, #36]	; (8009ea8 <MX_USB_DEVICE_Init+0x54>)
 8009e82:	f7fd fa75 	bl	8007370 <USBD_CDC_RegisterInterface>
 8009e86:	4603      	mov	r3, r0
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d001      	beq.n	8009e90 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009e8c:	f7f6 fe70 	bl	8000b70 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009e90:	4805      	ldr	r0, [pc, #20]	; (8009ea8 <MX_USB_DEVICE_Init+0x54>)
 8009e92:	f7fd fb63 	bl	800755c <USBD_Start>
 8009e96:	4603      	mov	r3, r0
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d001      	beq.n	8009ea0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009e9c:	f7f6 fe68 	bl	8000b70 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009ea0:	bf00      	nop
 8009ea2:	bd80      	pop	{r7, pc}
 8009ea4:	200000b0 	.word	0x200000b0
 8009ea8:	200040b4 	.word	0x200040b4
 8009eac:	20000018 	.word	0x20000018
 8009eb0:	2000009c 	.word	0x2000009c

08009eb4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009eb8:	2200      	movs	r2, #0
 8009eba:	4905      	ldr	r1, [pc, #20]	; (8009ed0 <CDC_Init_FS+0x1c>)
 8009ebc:	4805      	ldr	r0, [pc, #20]	; (8009ed4 <CDC_Init_FS+0x20>)
 8009ebe:	f7fd fa71 	bl	80073a4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009ec2:	4905      	ldr	r1, [pc, #20]	; (8009ed8 <CDC_Init_FS+0x24>)
 8009ec4:	4803      	ldr	r0, [pc, #12]	; (8009ed4 <CDC_Init_FS+0x20>)
 8009ec6:	f7fd fa8f 	bl	80073e8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009eca:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009ecc:	4618      	mov	r0, r3
 8009ece:	bd80      	pop	{r7, pc}
 8009ed0:	20004b90 	.word	0x20004b90
 8009ed4:	200040b4 	.word	0x200040b4
 8009ed8:	20004390 	.word	0x20004390

08009edc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009edc:	b480      	push	{r7}
 8009ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009ee0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eea:	4770      	bx	lr

08009eec <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009eec:	b480      	push	{r7}
 8009eee:	b083      	sub	sp, #12
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	6039      	str	r1, [r7, #0]
 8009ef6:	71fb      	strb	r3, [r7, #7]
 8009ef8:	4613      	mov	r3, r2
 8009efa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009efc:	79fb      	ldrb	r3, [r7, #7]
 8009efe:	2b23      	cmp	r3, #35	; 0x23
 8009f00:	d84a      	bhi.n	8009f98 <CDC_Control_FS+0xac>
 8009f02:	a201      	add	r2, pc, #4	; (adr r2, 8009f08 <CDC_Control_FS+0x1c>)
 8009f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f08:	08009f99 	.word	0x08009f99
 8009f0c:	08009f99 	.word	0x08009f99
 8009f10:	08009f99 	.word	0x08009f99
 8009f14:	08009f99 	.word	0x08009f99
 8009f18:	08009f99 	.word	0x08009f99
 8009f1c:	08009f99 	.word	0x08009f99
 8009f20:	08009f99 	.word	0x08009f99
 8009f24:	08009f99 	.word	0x08009f99
 8009f28:	08009f99 	.word	0x08009f99
 8009f2c:	08009f99 	.word	0x08009f99
 8009f30:	08009f99 	.word	0x08009f99
 8009f34:	08009f99 	.word	0x08009f99
 8009f38:	08009f99 	.word	0x08009f99
 8009f3c:	08009f99 	.word	0x08009f99
 8009f40:	08009f99 	.word	0x08009f99
 8009f44:	08009f99 	.word	0x08009f99
 8009f48:	08009f99 	.word	0x08009f99
 8009f4c:	08009f99 	.word	0x08009f99
 8009f50:	08009f99 	.word	0x08009f99
 8009f54:	08009f99 	.word	0x08009f99
 8009f58:	08009f99 	.word	0x08009f99
 8009f5c:	08009f99 	.word	0x08009f99
 8009f60:	08009f99 	.word	0x08009f99
 8009f64:	08009f99 	.word	0x08009f99
 8009f68:	08009f99 	.word	0x08009f99
 8009f6c:	08009f99 	.word	0x08009f99
 8009f70:	08009f99 	.word	0x08009f99
 8009f74:	08009f99 	.word	0x08009f99
 8009f78:	08009f99 	.word	0x08009f99
 8009f7c:	08009f99 	.word	0x08009f99
 8009f80:	08009f99 	.word	0x08009f99
 8009f84:	08009f99 	.word	0x08009f99
 8009f88:	08009f99 	.word	0x08009f99
 8009f8c:	08009f99 	.word	0x08009f99
 8009f90:	08009f99 	.word	0x08009f99
 8009f94:	08009f99 	.word	0x08009f99
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009f98:	bf00      	nop
  }

  return (USBD_OK);
 8009f9a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	370c      	adds	r7, #12
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa6:	4770      	bx	lr

08009fa8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b082      	sub	sp, #8
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
 8009fb0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009fb2:	6879      	ldr	r1, [r7, #4]
 8009fb4:	4805      	ldr	r0, [pc, #20]	; (8009fcc <CDC_Receive_FS+0x24>)
 8009fb6:	f7fd fa17 	bl	80073e8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009fba:	4804      	ldr	r0, [pc, #16]	; (8009fcc <CDC_Receive_FS+0x24>)
 8009fbc:	f7fd fa32 	bl	8007424 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009fc0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	3708      	adds	r7, #8
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}
 8009fca:	bf00      	nop
 8009fcc:	200040b4 	.word	0x200040b4

08009fd0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009fd0:	b480      	push	{r7}
 8009fd2:	b087      	sub	sp, #28
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	60f8      	str	r0, [r7, #12]
 8009fd8:	60b9      	str	r1, [r7, #8]
 8009fda:	4613      	mov	r3, r2
 8009fdc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009fde:	2300      	movs	r3, #0
 8009fe0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009fe2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	371c      	adds	r7, #28
 8009fea:	46bd      	mov	sp, r7
 8009fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff0:	4770      	bx	lr
	...

08009ff4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ff4:	b480      	push	{r7}
 8009ff6:	b083      	sub	sp, #12
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	6039      	str	r1, [r7, #0]
 8009ffe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	2212      	movs	r2, #18
 800a004:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a006:	4b03      	ldr	r3, [pc, #12]	; (800a014 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a008:	4618      	mov	r0, r3
 800a00a:	370c      	adds	r7, #12
 800a00c:	46bd      	mov	sp, r7
 800a00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a012:	4770      	bx	lr
 800a014:	200000cc 	.word	0x200000cc

0800a018 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a018:	b480      	push	{r7}
 800a01a:	b083      	sub	sp, #12
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	4603      	mov	r3, r0
 800a020:	6039      	str	r1, [r7, #0]
 800a022:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	2204      	movs	r2, #4
 800a028:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a02a:	4b03      	ldr	r3, [pc, #12]	; (800a038 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a02c:	4618      	mov	r0, r3
 800a02e:	370c      	adds	r7, #12
 800a030:	46bd      	mov	sp, r7
 800a032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a036:	4770      	bx	lr
 800a038:	200000e0 	.word	0x200000e0

0800a03c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b082      	sub	sp, #8
 800a040:	af00      	add	r7, sp, #0
 800a042:	4603      	mov	r3, r0
 800a044:	6039      	str	r1, [r7, #0]
 800a046:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a048:	79fb      	ldrb	r3, [r7, #7]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d105      	bne.n	800a05a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a04e:	683a      	ldr	r2, [r7, #0]
 800a050:	4907      	ldr	r1, [pc, #28]	; (800a070 <USBD_FS_ProductStrDescriptor+0x34>)
 800a052:	4808      	ldr	r0, [pc, #32]	; (800a074 <USBD_FS_ProductStrDescriptor+0x38>)
 800a054:	f7fe fc34 	bl	80088c0 <USBD_GetString>
 800a058:	e004      	b.n	800a064 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a05a:	683a      	ldr	r2, [r7, #0]
 800a05c:	4904      	ldr	r1, [pc, #16]	; (800a070 <USBD_FS_ProductStrDescriptor+0x34>)
 800a05e:	4805      	ldr	r0, [pc, #20]	; (800a074 <USBD_FS_ProductStrDescriptor+0x38>)
 800a060:	f7fe fc2e 	bl	80088c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a064:	4b02      	ldr	r3, [pc, #8]	; (800a070 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a066:	4618      	mov	r0, r3
 800a068:	3708      	adds	r7, #8
 800a06a:	46bd      	mov	sp, r7
 800a06c:	bd80      	pop	{r7, pc}
 800a06e:	bf00      	nop
 800a070:	20005390 	.word	0x20005390
 800a074:	0800b098 	.word	0x0800b098

0800a078 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b082      	sub	sp, #8
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	4603      	mov	r3, r0
 800a080:	6039      	str	r1, [r7, #0]
 800a082:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a084:	683a      	ldr	r2, [r7, #0]
 800a086:	4904      	ldr	r1, [pc, #16]	; (800a098 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a088:	4804      	ldr	r0, [pc, #16]	; (800a09c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a08a:	f7fe fc19 	bl	80088c0 <USBD_GetString>
  return USBD_StrDesc;
 800a08e:	4b02      	ldr	r3, [pc, #8]	; (800a098 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a090:	4618      	mov	r0, r3
 800a092:	3708      	adds	r7, #8
 800a094:	46bd      	mov	sp, r7
 800a096:	bd80      	pop	{r7, pc}
 800a098:	20005390 	.word	0x20005390
 800a09c:	0800b0b0 	.word	0x0800b0b0

0800a0a0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b082      	sub	sp, #8
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	6039      	str	r1, [r7, #0]
 800a0aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	221a      	movs	r2, #26
 800a0b0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a0b2:	f000 f843 	bl	800a13c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a0b6:	4b02      	ldr	r3, [pc, #8]	; (800a0c0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	3708      	adds	r7, #8
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd80      	pop	{r7, pc}
 800a0c0:	200000e4 	.word	0x200000e4

0800a0c4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b082      	sub	sp, #8
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	6039      	str	r1, [r7, #0]
 800a0ce:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a0d0:	79fb      	ldrb	r3, [r7, #7]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d105      	bne.n	800a0e2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a0d6:	683a      	ldr	r2, [r7, #0]
 800a0d8:	4907      	ldr	r1, [pc, #28]	; (800a0f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a0da:	4808      	ldr	r0, [pc, #32]	; (800a0fc <USBD_FS_ConfigStrDescriptor+0x38>)
 800a0dc:	f7fe fbf0 	bl	80088c0 <USBD_GetString>
 800a0e0:	e004      	b.n	800a0ec <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a0e2:	683a      	ldr	r2, [r7, #0]
 800a0e4:	4904      	ldr	r1, [pc, #16]	; (800a0f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a0e6:	4805      	ldr	r0, [pc, #20]	; (800a0fc <USBD_FS_ConfigStrDescriptor+0x38>)
 800a0e8:	f7fe fbea 	bl	80088c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a0ec:	4b02      	ldr	r3, [pc, #8]	; (800a0f8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	3708      	adds	r7, #8
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}
 800a0f6:	bf00      	nop
 800a0f8:	20005390 	.word	0x20005390
 800a0fc:	0800b0c4 	.word	0x0800b0c4

0800a100 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b082      	sub	sp, #8
 800a104:	af00      	add	r7, sp, #0
 800a106:	4603      	mov	r3, r0
 800a108:	6039      	str	r1, [r7, #0]
 800a10a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a10c:	79fb      	ldrb	r3, [r7, #7]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d105      	bne.n	800a11e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a112:	683a      	ldr	r2, [r7, #0]
 800a114:	4907      	ldr	r1, [pc, #28]	; (800a134 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a116:	4808      	ldr	r0, [pc, #32]	; (800a138 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a118:	f7fe fbd2 	bl	80088c0 <USBD_GetString>
 800a11c:	e004      	b.n	800a128 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a11e:	683a      	ldr	r2, [r7, #0]
 800a120:	4904      	ldr	r1, [pc, #16]	; (800a134 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a122:	4805      	ldr	r0, [pc, #20]	; (800a138 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a124:	f7fe fbcc 	bl	80088c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a128:	4b02      	ldr	r3, [pc, #8]	; (800a134 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	3708      	adds	r7, #8
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}
 800a132:	bf00      	nop
 800a134:	20005390 	.word	0x20005390
 800a138:	0800b0d0 	.word	0x0800b0d0

0800a13c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b084      	sub	sp, #16
 800a140:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a142:	4b0f      	ldr	r3, [pc, #60]	; (800a180 <Get_SerialNum+0x44>)
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a148:	4b0e      	ldr	r3, [pc, #56]	; (800a184 <Get_SerialNum+0x48>)
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a14e:	4b0e      	ldr	r3, [pc, #56]	; (800a188 <Get_SerialNum+0x4c>)
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a154:	68fa      	ldr	r2, [r7, #12]
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	4413      	add	r3, r2
 800a15a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d009      	beq.n	800a176 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a162:	2208      	movs	r2, #8
 800a164:	4909      	ldr	r1, [pc, #36]	; (800a18c <Get_SerialNum+0x50>)
 800a166:	68f8      	ldr	r0, [r7, #12]
 800a168:	f000 f814 	bl	800a194 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a16c:	2204      	movs	r2, #4
 800a16e:	4908      	ldr	r1, [pc, #32]	; (800a190 <Get_SerialNum+0x54>)
 800a170:	68b8      	ldr	r0, [r7, #8]
 800a172:	f000 f80f 	bl	800a194 <IntToUnicode>
  }
}
 800a176:	bf00      	nop
 800a178:	3710      	adds	r7, #16
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bd80      	pop	{r7, pc}
 800a17e:	bf00      	nop
 800a180:	1fff7a10 	.word	0x1fff7a10
 800a184:	1fff7a14 	.word	0x1fff7a14
 800a188:	1fff7a18 	.word	0x1fff7a18
 800a18c:	200000e6 	.word	0x200000e6
 800a190:	200000f6 	.word	0x200000f6

0800a194 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a194:	b480      	push	{r7}
 800a196:	b087      	sub	sp, #28
 800a198:	af00      	add	r7, sp, #0
 800a19a:	60f8      	str	r0, [r7, #12]
 800a19c:	60b9      	str	r1, [r7, #8]
 800a19e:	4613      	mov	r3, r2
 800a1a0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	75fb      	strb	r3, [r7, #23]
 800a1aa:	e027      	b.n	800a1fc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	0f1b      	lsrs	r3, r3, #28
 800a1b0:	2b09      	cmp	r3, #9
 800a1b2:	d80b      	bhi.n	800a1cc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	0f1b      	lsrs	r3, r3, #28
 800a1b8:	b2da      	uxtb	r2, r3
 800a1ba:	7dfb      	ldrb	r3, [r7, #23]
 800a1bc:	005b      	lsls	r3, r3, #1
 800a1be:	4619      	mov	r1, r3
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	440b      	add	r3, r1
 800a1c4:	3230      	adds	r2, #48	; 0x30
 800a1c6:	b2d2      	uxtb	r2, r2
 800a1c8:	701a      	strb	r2, [r3, #0]
 800a1ca:	e00a      	b.n	800a1e2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	0f1b      	lsrs	r3, r3, #28
 800a1d0:	b2da      	uxtb	r2, r3
 800a1d2:	7dfb      	ldrb	r3, [r7, #23]
 800a1d4:	005b      	lsls	r3, r3, #1
 800a1d6:	4619      	mov	r1, r3
 800a1d8:	68bb      	ldr	r3, [r7, #8]
 800a1da:	440b      	add	r3, r1
 800a1dc:	3237      	adds	r2, #55	; 0x37
 800a1de:	b2d2      	uxtb	r2, r2
 800a1e0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	011b      	lsls	r3, r3, #4
 800a1e6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a1e8:	7dfb      	ldrb	r3, [r7, #23]
 800a1ea:	005b      	lsls	r3, r3, #1
 800a1ec:	3301      	adds	r3, #1
 800a1ee:	68ba      	ldr	r2, [r7, #8]
 800a1f0:	4413      	add	r3, r2
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a1f6:	7dfb      	ldrb	r3, [r7, #23]
 800a1f8:	3301      	adds	r3, #1
 800a1fa:	75fb      	strb	r3, [r7, #23]
 800a1fc:	7dfa      	ldrb	r2, [r7, #23]
 800a1fe:	79fb      	ldrb	r3, [r7, #7]
 800a200:	429a      	cmp	r2, r3
 800a202:	d3d3      	bcc.n	800a1ac <IntToUnicode+0x18>
  }
}
 800a204:	bf00      	nop
 800a206:	bf00      	nop
 800a208:	371c      	adds	r7, #28
 800a20a:	46bd      	mov	sp, r7
 800a20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a210:	4770      	bx	lr
	...

0800a214 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b08a      	sub	sp, #40	; 0x28
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a21c:	f107 0314 	add.w	r3, r7, #20
 800a220:	2200      	movs	r2, #0
 800a222:	601a      	str	r2, [r3, #0]
 800a224:	605a      	str	r2, [r3, #4]
 800a226:	609a      	str	r2, [r3, #8]
 800a228:	60da      	str	r2, [r3, #12]
 800a22a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a234:	d13a      	bne.n	800a2ac <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a236:	2300      	movs	r3, #0
 800a238:	613b      	str	r3, [r7, #16]
 800a23a:	4b1e      	ldr	r3, [pc, #120]	; (800a2b4 <HAL_PCD_MspInit+0xa0>)
 800a23c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a23e:	4a1d      	ldr	r2, [pc, #116]	; (800a2b4 <HAL_PCD_MspInit+0xa0>)
 800a240:	f043 0301 	orr.w	r3, r3, #1
 800a244:	6313      	str	r3, [r2, #48]	; 0x30
 800a246:	4b1b      	ldr	r3, [pc, #108]	; (800a2b4 <HAL_PCD_MspInit+0xa0>)
 800a248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a24a:	f003 0301 	and.w	r3, r3, #1
 800a24e:	613b      	str	r3, [r7, #16]
 800a250:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 800a252:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a256:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a258:	2302      	movs	r3, #2
 800a25a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a25c:	2300      	movs	r3, #0
 800a25e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a260:	2303      	movs	r3, #3
 800a262:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a264:	230a      	movs	r3, #10
 800a266:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a268:	f107 0314 	add.w	r3, r7, #20
 800a26c:	4619      	mov	r1, r3
 800a26e:	4812      	ldr	r0, [pc, #72]	; (800a2b8 <HAL_PCD_MspInit+0xa4>)
 800a270:	f7f8 f884 	bl	800237c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a274:	4b0f      	ldr	r3, [pc, #60]	; (800a2b4 <HAL_PCD_MspInit+0xa0>)
 800a276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a278:	4a0e      	ldr	r2, [pc, #56]	; (800a2b4 <HAL_PCD_MspInit+0xa0>)
 800a27a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a27e:	6353      	str	r3, [r2, #52]	; 0x34
 800a280:	2300      	movs	r3, #0
 800a282:	60fb      	str	r3, [r7, #12]
 800a284:	4b0b      	ldr	r3, [pc, #44]	; (800a2b4 <HAL_PCD_MspInit+0xa0>)
 800a286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a288:	4a0a      	ldr	r2, [pc, #40]	; (800a2b4 <HAL_PCD_MspInit+0xa0>)
 800a28a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a28e:	6453      	str	r3, [r2, #68]	; 0x44
 800a290:	4b08      	ldr	r3, [pc, #32]	; (800a2b4 <HAL_PCD_MspInit+0xa0>)
 800a292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a294:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a298:	60fb      	str	r3, [r7, #12]
 800a29a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800a29c:	2200      	movs	r2, #0
 800a29e:	2105      	movs	r1, #5
 800a2a0:	2043      	movs	r0, #67	; 0x43
 800a2a2:	f7f8 f841 	bl	8002328 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a2a6:	2043      	movs	r0, #67	; 0x43
 800a2a8:	f7f8 f85a 	bl	8002360 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a2ac:	bf00      	nop
 800a2ae:	3728      	adds	r7, #40	; 0x28
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bd80      	pop	{r7, pc}
 800a2b4:	40023800 	.word	0x40023800
 800a2b8:	40020000 	.word	0x40020000

0800a2bc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b082      	sub	sp, #8
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800a2d0:	4619      	mov	r1, r3
 800a2d2:	4610      	mov	r0, r2
 800a2d4:	f7fd f98f 	bl	80075f6 <USBD_LL_SetupStage>
}
 800a2d8:	bf00      	nop
 800a2da:	3708      	adds	r7, #8
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bd80      	pop	{r7, pc}

0800a2e0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b082      	sub	sp, #8
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
 800a2e8:	460b      	mov	r3, r1
 800a2ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800a2f2:	78fa      	ldrb	r2, [r7, #3]
 800a2f4:	6879      	ldr	r1, [r7, #4]
 800a2f6:	4613      	mov	r3, r2
 800a2f8:	00db      	lsls	r3, r3, #3
 800a2fa:	4413      	add	r3, r2
 800a2fc:	009b      	lsls	r3, r3, #2
 800a2fe:	440b      	add	r3, r1
 800a300:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800a304:	681a      	ldr	r2, [r3, #0]
 800a306:	78fb      	ldrb	r3, [r7, #3]
 800a308:	4619      	mov	r1, r3
 800a30a:	f7fd f9c9 	bl	80076a0 <USBD_LL_DataOutStage>
}
 800a30e:	bf00      	nop
 800a310:	3708      	adds	r7, #8
 800a312:	46bd      	mov	sp, r7
 800a314:	bd80      	pop	{r7, pc}

0800a316 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a316:	b580      	push	{r7, lr}
 800a318:	b082      	sub	sp, #8
 800a31a:	af00      	add	r7, sp, #0
 800a31c:	6078      	str	r0, [r7, #4]
 800a31e:	460b      	mov	r3, r1
 800a320:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800a328:	78fa      	ldrb	r2, [r7, #3]
 800a32a:	6879      	ldr	r1, [r7, #4]
 800a32c:	4613      	mov	r3, r2
 800a32e:	00db      	lsls	r3, r3, #3
 800a330:	4413      	add	r3, r2
 800a332:	009b      	lsls	r3, r3, #2
 800a334:	440b      	add	r3, r1
 800a336:	3320      	adds	r3, #32
 800a338:	681a      	ldr	r2, [r3, #0]
 800a33a:	78fb      	ldrb	r3, [r7, #3]
 800a33c:	4619      	mov	r1, r3
 800a33e:	f7fd fa62 	bl	8007806 <USBD_LL_DataInStage>
}
 800a342:	bf00      	nop
 800a344:	3708      	adds	r7, #8
 800a346:	46bd      	mov	sp, r7
 800a348:	bd80      	pop	{r7, pc}

0800a34a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a34a:	b580      	push	{r7, lr}
 800a34c:	b082      	sub	sp, #8
 800a34e:	af00      	add	r7, sp, #0
 800a350:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a358:	4618      	mov	r0, r3
 800a35a:	f7fd fb9c 	bl	8007a96 <USBD_LL_SOF>
}
 800a35e:	bf00      	nop
 800a360:	3708      	adds	r7, #8
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}

0800a366 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a366:	b580      	push	{r7, lr}
 800a368:	b084      	sub	sp, #16
 800a36a:	af00      	add	r7, sp, #0
 800a36c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a36e:	2301      	movs	r3, #1
 800a370:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	79db      	ldrb	r3, [r3, #7]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d102      	bne.n	800a380 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a37a:	2300      	movs	r3, #0
 800a37c:	73fb      	strb	r3, [r7, #15]
 800a37e:	e008      	b.n	800a392 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	79db      	ldrb	r3, [r3, #7]
 800a384:	2b02      	cmp	r3, #2
 800a386:	d102      	bne.n	800a38e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a388:	2301      	movs	r3, #1
 800a38a:	73fb      	strb	r3, [r7, #15]
 800a38c:	e001      	b.n	800a392 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a38e:	f7f6 fbef 	bl	8000b70 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a398:	7bfa      	ldrb	r2, [r7, #15]
 800a39a:	4611      	mov	r1, r2
 800a39c:	4618      	mov	r0, r3
 800a39e:	f7fd fb36 	bl	8007a0e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	f7fd fade 	bl	800796a <USBD_LL_Reset>
}
 800a3ae:	bf00      	nop
 800a3b0:	3710      	adds	r7, #16
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bd80      	pop	{r7, pc}
	...

0800a3b8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b082      	sub	sp, #8
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	f7fd fb31 	bl	8007a2e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	687a      	ldr	r2, [r7, #4]
 800a3d8:	6812      	ldr	r2, [r2, #0]
 800a3da:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a3de:	f043 0301 	orr.w	r3, r3, #1
 800a3e2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	7adb      	ldrb	r3, [r3, #11]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d005      	beq.n	800a3f8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a3ec:	4b04      	ldr	r3, [pc, #16]	; (800a400 <HAL_PCD_SuspendCallback+0x48>)
 800a3ee:	691b      	ldr	r3, [r3, #16]
 800a3f0:	4a03      	ldr	r2, [pc, #12]	; (800a400 <HAL_PCD_SuspendCallback+0x48>)
 800a3f2:	f043 0306 	orr.w	r3, r3, #6
 800a3f6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a3f8:	bf00      	nop
 800a3fa:	3708      	adds	r7, #8
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	bd80      	pop	{r7, pc}
 800a400:	e000ed00 	.word	0xe000ed00

0800a404 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b082      	sub	sp, #8
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a412:	4618      	mov	r0, r3
 800a414:	f7fd fb27 	bl	8007a66 <USBD_LL_Resume>
}
 800a418:	bf00      	nop
 800a41a:	3708      	adds	r7, #8
 800a41c:	46bd      	mov	sp, r7
 800a41e:	bd80      	pop	{r7, pc}

0800a420 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b082      	sub	sp, #8
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
 800a428:	460b      	mov	r3, r1
 800a42a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a432:	78fa      	ldrb	r2, [r7, #3]
 800a434:	4611      	mov	r1, r2
 800a436:	4618      	mov	r0, r3
 800a438:	f7fd fb7f 	bl	8007b3a <USBD_LL_IsoOUTIncomplete>
}
 800a43c:	bf00      	nop
 800a43e:	3708      	adds	r7, #8
 800a440:	46bd      	mov	sp, r7
 800a442:	bd80      	pop	{r7, pc}

0800a444 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b082      	sub	sp, #8
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
 800a44c:	460b      	mov	r3, r1
 800a44e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a456:	78fa      	ldrb	r2, [r7, #3]
 800a458:	4611      	mov	r1, r2
 800a45a:	4618      	mov	r0, r3
 800a45c:	f7fd fb3b 	bl	8007ad6 <USBD_LL_IsoINIncomplete>
}
 800a460:	bf00      	nop
 800a462:	3708      	adds	r7, #8
 800a464:	46bd      	mov	sp, r7
 800a466:	bd80      	pop	{r7, pc}

0800a468 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b082      	sub	sp, #8
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a476:	4618      	mov	r0, r3
 800a478:	f7fd fb91 	bl	8007b9e <USBD_LL_DevConnected>
}
 800a47c:	bf00      	nop
 800a47e:	3708      	adds	r7, #8
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}

0800a484 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b082      	sub	sp, #8
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a492:	4618      	mov	r0, r3
 800a494:	f7fd fb8e 	bl	8007bb4 <USBD_LL_DevDisconnected>
}
 800a498:	bf00      	nop
 800a49a:	3708      	adds	r7, #8
 800a49c:	46bd      	mov	sp, r7
 800a49e:	bd80      	pop	{r7, pc}

0800a4a0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b082      	sub	sp, #8
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	781b      	ldrb	r3, [r3, #0]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d13c      	bne.n	800a52a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a4b0:	4a20      	ldr	r2, [pc, #128]	; (800a534 <USBD_LL_Init+0x94>)
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	4a1e      	ldr	r2, [pc, #120]	; (800a534 <USBD_LL_Init+0x94>)
 800a4bc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a4c0:	4b1c      	ldr	r3, [pc, #112]	; (800a534 <USBD_LL_Init+0x94>)
 800a4c2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a4c6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a4c8:	4b1a      	ldr	r3, [pc, #104]	; (800a534 <USBD_LL_Init+0x94>)
 800a4ca:	2204      	movs	r2, #4
 800a4cc:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a4ce:	4b19      	ldr	r3, [pc, #100]	; (800a534 <USBD_LL_Init+0x94>)
 800a4d0:	2202      	movs	r2, #2
 800a4d2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a4d4:	4b17      	ldr	r3, [pc, #92]	; (800a534 <USBD_LL_Init+0x94>)
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a4da:	4b16      	ldr	r3, [pc, #88]	; (800a534 <USBD_LL_Init+0x94>)
 800a4dc:	2202      	movs	r2, #2
 800a4de:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a4e0:	4b14      	ldr	r3, [pc, #80]	; (800a534 <USBD_LL_Init+0x94>)
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a4e6:	4b13      	ldr	r3, [pc, #76]	; (800a534 <USBD_LL_Init+0x94>)
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a4ec:	4b11      	ldr	r3, [pc, #68]	; (800a534 <USBD_LL_Init+0x94>)
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a4f2:	4b10      	ldr	r3, [pc, #64]	; (800a534 <USBD_LL_Init+0x94>)
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a4f8:	4b0e      	ldr	r3, [pc, #56]	; (800a534 <USBD_LL_Init+0x94>)
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a4fe:	480d      	ldr	r0, [pc, #52]	; (800a534 <USBD_LL_Init+0x94>)
 800a500:	f7f8 f91b 	bl	800273a <HAL_PCD_Init>
 800a504:	4603      	mov	r3, r0
 800a506:	2b00      	cmp	r3, #0
 800a508:	d001      	beq.n	800a50e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a50a:	f7f6 fb31 	bl	8000b70 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a50e:	2180      	movs	r1, #128	; 0x80
 800a510:	4808      	ldr	r0, [pc, #32]	; (800a534 <USBD_LL_Init+0x94>)
 800a512:	f7f9 fb46 	bl	8003ba2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a516:	2240      	movs	r2, #64	; 0x40
 800a518:	2100      	movs	r1, #0
 800a51a:	4806      	ldr	r0, [pc, #24]	; (800a534 <USBD_LL_Init+0x94>)
 800a51c:	f7f9 fafa 	bl	8003b14 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a520:	2280      	movs	r2, #128	; 0x80
 800a522:	2101      	movs	r1, #1
 800a524:	4803      	ldr	r0, [pc, #12]	; (800a534 <USBD_LL_Init+0x94>)
 800a526:	f7f9 faf5 	bl	8003b14 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a52a:	2300      	movs	r3, #0
}
 800a52c:	4618      	mov	r0, r3
 800a52e:	3708      	adds	r7, #8
 800a530:	46bd      	mov	sp, r7
 800a532:	bd80      	pop	{r7, pc}
 800a534:	20005590 	.word	0x20005590

0800a538 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b084      	sub	sp, #16
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a540:	2300      	movs	r3, #0
 800a542:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a544:	2300      	movs	r3, #0
 800a546:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a54e:	4618      	mov	r0, r3
 800a550:	f7f8 fa02 	bl	8002958 <HAL_PCD_Start>
 800a554:	4603      	mov	r3, r0
 800a556:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a558:	7bfb      	ldrb	r3, [r7, #15]
 800a55a:	4618      	mov	r0, r3
 800a55c:	f000 f942 	bl	800a7e4 <USBD_Get_USB_Status>
 800a560:	4603      	mov	r3, r0
 800a562:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a564:	7bbb      	ldrb	r3, [r7, #14]
}
 800a566:	4618      	mov	r0, r3
 800a568:	3710      	adds	r7, #16
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bd80      	pop	{r7, pc}

0800a56e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a56e:	b580      	push	{r7, lr}
 800a570:	b084      	sub	sp, #16
 800a572:	af00      	add	r7, sp, #0
 800a574:	6078      	str	r0, [r7, #4]
 800a576:	4608      	mov	r0, r1
 800a578:	4611      	mov	r1, r2
 800a57a:	461a      	mov	r2, r3
 800a57c:	4603      	mov	r3, r0
 800a57e:	70fb      	strb	r3, [r7, #3]
 800a580:	460b      	mov	r3, r1
 800a582:	70bb      	strb	r3, [r7, #2]
 800a584:	4613      	mov	r3, r2
 800a586:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a588:	2300      	movs	r3, #0
 800a58a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a58c:	2300      	movs	r3, #0
 800a58e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a596:	78bb      	ldrb	r3, [r7, #2]
 800a598:	883a      	ldrh	r2, [r7, #0]
 800a59a:	78f9      	ldrb	r1, [r7, #3]
 800a59c:	f7f8 fed6 	bl	800334c <HAL_PCD_EP_Open>
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a5a4:	7bfb      	ldrb	r3, [r7, #15]
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	f000 f91c 	bl	800a7e4 <USBD_Get_USB_Status>
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a5b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	3710      	adds	r7, #16
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	bd80      	pop	{r7, pc}

0800a5ba <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a5ba:	b580      	push	{r7, lr}
 800a5bc:	b084      	sub	sp, #16
 800a5be:	af00      	add	r7, sp, #0
 800a5c0:	6078      	str	r0, [r7, #4]
 800a5c2:	460b      	mov	r3, r1
 800a5c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a5d4:	78fa      	ldrb	r2, [r7, #3]
 800a5d6:	4611      	mov	r1, r2
 800a5d8:	4618      	mov	r0, r3
 800a5da:	f7f8 ff1f 	bl	800341c <HAL_PCD_EP_Close>
 800a5de:	4603      	mov	r3, r0
 800a5e0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a5e2:	7bfb      	ldrb	r3, [r7, #15]
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	f000 f8fd 	bl	800a7e4 <USBD_Get_USB_Status>
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a5ee:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	3710      	adds	r7, #16
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	bd80      	pop	{r7, pc}

0800a5f8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b084      	sub	sp, #16
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
 800a600:	460b      	mov	r3, r1
 800a602:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a604:	2300      	movs	r3, #0
 800a606:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a608:	2300      	movs	r3, #0
 800a60a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a612:	78fa      	ldrb	r2, [r7, #3]
 800a614:	4611      	mov	r1, r2
 800a616:	4618      	mov	r0, r3
 800a618:	f7f8 ffd7 	bl	80035ca <HAL_PCD_EP_SetStall>
 800a61c:	4603      	mov	r3, r0
 800a61e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a620:	7bfb      	ldrb	r3, [r7, #15]
 800a622:	4618      	mov	r0, r3
 800a624:	f000 f8de 	bl	800a7e4 <USBD_Get_USB_Status>
 800a628:	4603      	mov	r3, r0
 800a62a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a62c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a62e:	4618      	mov	r0, r3
 800a630:	3710      	adds	r7, #16
 800a632:	46bd      	mov	sp, r7
 800a634:	bd80      	pop	{r7, pc}

0800a636 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a636:	b580      	push	{r7, lr}
 800a638:	b084      	sub	sp, #16
 800a63a:	af00      	add	r7, sp, #0
 800a63c:	6078      	str	r0, [r7, #4]
 800a63e:	460b      	mov	r3, r1
 800a640:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a642:	2300      	movs	r3, #0
 800a644:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a646:	2300      	movs	r3, #0
 800a648:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a650:	78fa      	ldrb	r2, [r7, #3]
 800a652:	4611      	mov	r1, r2
 800a654:	4618      	mov	r0, r3
 800a656:	f7f9 f81b 	bl	8003690 <HAL_PCD_EP_ClrStall>
 800a65a:	4603      	mov	r3, r0
 800a65c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a65e:	7bfb      	ldrb	r3, [r7, #15]
 800a660:	4618      	mov	r0, r3
 800a662:	f000 f8bf 	bl	800a7e4 <USBD_Get_USB_Status>
 800a666:	4603      	mov	r3, r0
 800a668:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a66a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a66c:	4618      	mov	r0, r3
 800a66e:	3710      	adds	r7, #16
 800a670:	46bd      	mov	sp, r7
 800a672:	bd80      	pop	{r7, pc}

0800a674 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a674:	b480      	push	{r7}
 800a676:	b085      	sub	sp, #20
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
 800a67c:	460b      	mov	r3, r1
 800a67e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a686:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a688:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	da0b      	bge.n	800a6a8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a690:	78fb      	ldrb	r3, [r7, #3]
 800a692:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a696:	68f9      	ldr	r1, [r7, #12]
 800a698:	4613      	mov	r3, r2
 800a69a:	00db      	lsls	r3, r3, #3
 800a69c:	4413      	add	r3, r2
 800a69e:	009b      	lsls	r3, r3, #2
 800a6a0:	440b      	add	r3, r1
 800a6a2:	3316      	adds	r3, #22
 800a6a4:	781b      	ldrb	r3, [r3, #0]
 800a6a6:	e00b      	b.n	800a6c0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a6a8:	78fb      	ldrb	r3, [r7, #3]
 800a6aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a6ae:	68f9      	ldr	r1, [r7, #12]
 800a6b0:	4613      	mov	r3, r2
 800a6b2:	00db      	lsls	r3, r3, #3
 800a6b4:	4413      	add	r3, r2
 800a6b6:	009b      	lsls	r3, r3, #2
 800a6b8:	440b      	add	r3, r1
 800a6ba:	f203 2356 	addw	r3, r3, #598	; 0x256
 800a6be:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	3714      	adds	r7, #20
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ca:	4770      	bx	lr

0800a6cc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b084      	sub	sp, #16
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
 800a6d4:	460b      	mov	r3, r1
 800a6d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6d8:	2300      	movs	r3, #0
 800a6da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6dc:	2300      	movs	r3, #0
 800a6de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a6e6:	78fa      	ldrb	r2, [r7, #3]
 800a6e8:	4611      	mov	r1, r2
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	f7f8 fe0a 	bl	8003304 <HAL_PCD_SetAddress>
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a6f4:	7bfb      	ldrb	r3, [r7, #15]
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f000 f874 	bl	800a7e4 <USBD_Get_USB_Status>
 800a6fc:	4603      	mov	r3, r0
 800a6fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a700:	7bbb      	ldrb	r3, [r7, #14]
}
 800a702:	4618      	mov	r0, r3
 800a704:	3710      	adds	r7, #16
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}

0800a70a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a70a:	b580      	push	{r7, lr}
 800a70c:	b086      	sub	sp, #24
 800a70e:	af00      	add	r7, sp, #0
 800a710:	60f8      	str	r0, [r7, #12]
 800a712:	607a      	str	r2, [r7, #4]
 800a714:	603b      	str	r3, [r7, #0]
 800a716:	460b      	mov	r3, r1
 800a718:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a71a:	2300      	movs	r3, #0
 800a71c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a71e:	2300      	movs	r3, #0
 800a720:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a728:	7af9      	ldrb	r1, [r7, #11]
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	687a      	ldr	r2, [r7, #4]
 800a72e:	f7f8 ff12 	bl	8003556 <HAL_PCD_EP_Transmit>
 800a732:	4603      	mov	r3, r0
 800a734:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a736:	7dfb      	ldrb	r3, [r7, #23]
 800a738:	4618      	mov	r0, r3
 800a73a:	f000 f853 	bl	800a7e4 <USBD_Get_USB_Status>
 800a73e:	4603      	mov	r3, r0
 800a740:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a742:	7dbb      	ldrb	r3, [r7, #22]
}
 800a744:	4618      	mov	r0, r3
 800a746:	3718      	adds	r7, #24
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd80      	pop	{r7, pc}

0800a74c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b086      	sub	sp, #24
 800a750:	af00      	add	r7, sp, #0
 800a752:	60f8      	str	r0, [r7, #12]
 800a754:	607a      	str	r2, [r7, #4]
 800a756:	603b      	str	r3, [r7, #0]
 800a758:	460b      	mov	r3, r1
 800a75a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a75c:	2300      	movs	r3, #0
 800a75e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a760:	2300      	movs	r3, #0
 800a762:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a76a:	7af9      	ldrb	r1, [r7, #11]
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	687a      	ldr	r2, [r7, #4]
 800a770:	f7f8 fe9e 	bl	80034b0 <HAL_PCD_EP_Receive>
 800a774:	4603      	mov	r3, r0
 800a776:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a778:	7dfb      	ldrb	r3, [r7, #23]
 800a77a:	4618      	mov	r0, r3
 800a77c:	f000 f832 	bl	800a7e4 <USBD_Get_USB_Status>
 800a780:	4603      	mov	r3, r0
 800a782:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a784:	7dbb      	ldrb	r3, [r7, #22]
}
 800a786:	4618      	mov	r0, r3
 800a788:	3718      	adds	r7, #24
 800a78a:	46bd      	mov	sp, r7
 800a78c:	bd80      	pop	{r7, pc}

0800a78e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a78e:	b580      	push	{r7, lr}
 800a790:	b082      	sub	sp, #8
 800a792:	af00      	add	r7, sp, #0
 800a794:	6078      	str	r0, [r7, #4]
 800a796:	460b      	mov	r3, r1
 800a798:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a7a0:	78fa      	ldrb	r2, [r7, #3]
 800a7a2:	4611      	mov	r1, r2
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	f7f8 febe 	bl	8003526 <HAL_PCD_EP_GetRxCount>
 800a7aa:	4603      	mov	r3, r0
}
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	3708      	adds	r7, #8
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bd80      	pop	{r7, pc}

0800a7b4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a7b4:	b480      	push	{r7}
 800a7b6:	b083      	sub	sp, #12
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a7bc:	4b03      	ldr	r3, [pc, #12]	; (800a7cc <USBD_static_malloc+0x18>)
}
 800a7be:	4618      	mov	r0, r3
 800a7c0:	370c      	adds	r7, #12
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c8:	4770      	bx	lr
 800a7ca:	bf00      	nop
 800a7cc:	20005a74 	.word	0x20005a74

0800a7d0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a7d0:	b480      	push	{r7}
 800a7d2:	b083      	sub	sp, #12
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]

}
 800a7d8:	bf00      	nop
 800a7da:	370c      	adds	r7, #12
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e2:	4770      	bx	lr

0800a7e4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	b085      	sub	sp, #20
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a7f2:	79fb      	ldrb	r3, [r7, #7]
 800a7f4:	2b03      	cmp	r3, #3
 800a7f6:	d817      	bhi.n	800a828 <USBD_Get_USB_Status+0x44>
 800a7f8:	a201      	add	r2, pc, #4	; (adr r2, 800a800 <USBD_Get_USB_Status+0x1c>)
 800a7fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7fe:	bf00      	nop
 800a800:	0800a811 	.word	0x0800a811
 800a804:	0800a817 	.word	0x0800a817
 800a808:	0800a81d 	.word	0x0800a81d
 800a80c:	0800a823 	.word	0x0800a823
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a810:	2300      	movs	r3, #0
 800a812:	73fb      	strb	r3, [r7, #15]
    break;
 800a814:	e00b      	b.n	800a82e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a816:	2303      	movs	r3, #3
 800a818:	73fb      	strb	r3, [r7, #15]
    break;
 800a81a:	e008      	b.n	800a82e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a81c:	2301      	movs	r3, #1
 800a81e:	73fb      	strb	r3, [r7, #15]
    break;
 800a820:	e005      	b.n	800a82e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a822:	2303      	movs	r3, #3
 800a824:	73fb      	strb	r3, [r7, #15]
    break;
 800a826:	e002      	b.n	800a82e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a828:	2303      	movs	r3, #3
 800a82a:	73fb      	strb	r3, [r7, #15]
    break;
 800a82c:	bf00      	nop
  }
  return usb_status;
 800a82e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a830:	4618      	mov	r0, r3
 800a832:	3714      	adds	r7, #20
 800a834:	46bd      	mov	sp, r7
 800a836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83a:	4770      	bx	lr

0800a83c <abs_limit>:
#include <stdlib.h>
#include <string.h>
#include <math.h>

void abs_limit(float *a, float ABS_MAX)
{
 800a83c:	b480      	push	{r7}
 800a83e:	b083      	sub	sp, #12
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
 800a844:	ed87 0a00 	vstr	s0, [r7]
  if (*a > ABS_MAX)
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	edd3 7a00 	vldr	s15, [r3]
 800a84e:	ed97 7a00 	vldr	s14, [r7]
 800a852:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a85a:	d502      	bpl.n	800a862 <abs_limit+0x26>
    *a = ABS_MAX;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	683a      	ldr	r2, [r7, #0]
 800a860:	601a      	str	r2, [r3, #0]
  if (*a < -ABS_MAX)
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	ed93 7a00 	vldr	s14, [r3]
 800a868:	edd7 7a00 	vldr	s15, [r7]
 800a86c:	eef1 7a67 	vneg.f32	s15, s15
 800a870:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a878:	d400      	bmi.n	800a87c <abs_limit+0x40>
    *a = -ABS_MAX;
}
 800a87a:	e006      	b.n	800a88a <abs_limit+0x4e>
    *a = -ABS_MAX;
 800a87c:	edd7 7a00 	vldr	s15, [r7]
 800a880:	eef1 7a67 	vneg.f32	s15, s15
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	edc3 7a00 	vstr	s15, [r3]
}
 800a88a:	bf00      	nop
 800a88c:	370c      	adds	r7, #12
 800a88e:	46bd      	mov	sp, r7
 800a890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a894:	4770      	bx	lr

0800a896 <pid_init>:
 * @param kd The derivative gain parameter.
 * @param maxout The maximum output value of the controller.
 * @param integral_limit The limit for the integral term.
 */
void pid_init(struct pid *pid, float kp, float ki, float kd, float maxout, float integral_limit)
{
 800a896:	b480      	push	{r7}
 800a898:	b087      	sub	sp, #28
 800a89a:	af00      	add	r7, sp, #0
 800a89c:	6178      	str	r0, [r7, #20]
 800a89e:	ed87 0a04 	vstr	s0, [r7, #16]
 800a8a2:	edc7 0a03 	vstr	s1, [r7, #12]
 800a8a6:	ed87 1a02 	vstr	s2, [r7, #8]
 800a8aa:	edc7 1a01 	vstr	s3, [r7, #4]
 800a8ae:	ed87 2a00 	vstr	s4, [r7]
  pid->param.kp = kp;
 800a8b2:	697b      	ldr	r3, [r7, #20]
 800a8b4:	693a      	ldr	r2, [r7, #16]
 800a8b6:	601a      	str	r2, [r3, #0]
  pid->param.ki = ki;
 800a8b8:	697b      	ldr	r3, [r7, #20]
 800a8ba:	68fa      	ldr	r2, [r7, #12]
 800a8bc:	605a      	str	r2, [r3, #4]
  pid->param.kd = kd;
 800a8be:	697b      	ldr	r3, [r7, #20]
 800a8c0:	68ba      	ldr	r2, [r7, #8]
 800a8c2:	609a      	str	r2, [r3, #8]
  pid->param.integral_limit = integral_limit;
 800a8c4:	697b      	ldr	r3, [r7, #20]
 800a8c6:	683a      	ldr	r2, [r7, #0]
 800a8c8:	611a      	str	r2, [r3, #16]
  pid->param.max_out = maxout;
 800a8ca:	697b      	ldr	r3, [r7, #20]
 800a8cc:	687a      	ldr	r2, [r7, #4]
 800a8ce:	60da      	str	r2, [r3, #12]

  pid->set = 0;
 800a8d0:	697b      	ldr	r3, [r7, #20]
 800a8d2:	f04f 0200 	mov.w	r2, #0
 800a8d6:	615a      	str	r2, [r3, #20]
  pid->get = 0;
 800a8d8:	697b      	ldr	r3, [r7, #20]
 800a8da:	f04f 0200 	mov.w	r2, #0
 800a8de:	619a      	str	r2, [r3, #24]
  pid->err = 0;
 800a8e0:	697b      	ldr	r3, [r7, #20]
 800a8e2:	f04f 0200 	mov.w	r2, #0
 800a8e6:	61da      	str	r2, [r3, #28]
  pid->last_err = 0;
 800a8e8:	697b      	ldr	r3, [r7, #20]
 800a8ea:	f04f 0200 	mov.w	r2, #0
 800a8ee:	621a      	str	r2, [r3, #32]

  pid->pout = 0;
 800a8f0:	697b      	ldr	r3, [r7, #20]
 800a8f2:	f04f 0200 	mov.w	r2, #0
 800a8f6:	625a      	str	r2, [r3, #36]	; 0x24
  pid->iout = 0;
 800a8f8:	697b      	ldr	r3, [r7, #20]
 800a8fa:	f04f 0200 	mov.w	r2, #0
 800a8fe:	629a      	str	r2, [r3, #40]	; 0x28
  pid->dout = 0;
 800a900:	697b      	ldr	r3, [r7, #20]
 800a902:	f04f 0200 	mov.w	r2, #0
 800a906:	62da      	str	r2, [r3, #44]	; 0x2c
  pid->out = 0;
 800a908:	697b      	ldr	r3, [r7, #20]
 800a90a:	f04f 0200 	mov.w	r2, #0
 800a90e:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a910:	bf00      	nop
 800a912:	371c      	adds	r7, #28
 800a914:	46bd      	mov	sp, r7
 800a916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91a:	4770      	bx	lr

0800a91c <pid_calculate>:


float pid_calculate(struct pid *pid, float fdb, float ref)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b084      	sub	sp, #16
 800a920:	af00      	add	r7, sp, #0
 800a922:	60f8      	str	r0, [r7, #12]
 800a924:	ed87 0a02 	vstr	s0, [r7, #8]
 800a928:	edc7 0a01 	vstr	s1, [r7, #4]
  pid->get = fdb;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	68ba      	ldr	r2, [r7, #8]
 800a930:	619a      	str	r2, [r3, #24]
  pid->set = ref;
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	687a      	ldr	r2, [r7, #4]
 800a936:	615a      	str	r2, [r3, #20]
  pid->err = ref - fdb;
 800a938:	ed97 7a01 	vldr	s14, [r7, #4]
 800a93c:	edd7 7a02 	vldr	s15, [r7, #8]
 800a940:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	edc3 7a07 	vstr	s15, [r3, #28]

  pid->pout = pid->param.kp * pid->err;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	ed93 7a00 	vldr	s14, [r3]
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	edd3 7a07 	vldr	s15, [r3, #28]
 800a956:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
  pid->iout += pid->param.ki * pid->err;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	edd3 6a01 	vldr	s13, [r3, #4]
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	edd3 7a07 	vldr	s15, [r3, #28]
 800a972:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a976:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
  pid->dout = pid->param.kd * (pid->err - pid->last_err);
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	ed93 7a02 	vldr	s14, [r3, #8]
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	edd3 6a07 	vldr	s13, [r3, #28]
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	edd3 7a08 	vldr	s15, [r3, #32]
 800a992:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800a996:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

  abs_limit(&(pid->iout), pid->param.integral_limit);
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	edd3 7a04 	vldr	s15, [r3, #16]
 800a9ac:	eeb0 0a67 	vmov.f32	s0, s15
 800a9b0:	4610      	mov	r0, r2
 800a9b2:	f7ff ff43 	bl	800a83c <abs_limit>
  pid->out = pid->pout + pid->iout + pid->dout;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800a9c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800a9cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
  abs_limit(&(pid->out), pid->param.max_out);
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	edd3 7a03 	vldr	s15, [r3, #12]
 800a9e2:	eeb0 0a67 	vmov.f32	s0, s15
 800a9e6:	4610      	mov	r0, r2
 800a9e8:	f7ff ff28 	bl	800a83c <abs_limit>

  pid->last_err = pid->err;
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	69da      	ldr	r2, [r3, #28]
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	621a      	str	r2, [r3, #32]

  return pid->out;
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9f8:	ee07 3a90 	vmov	s15, r3
 800a9fc:	eeb0 0a67 	vmov.f32	s0, s15
 800aa00:	3710      	adds	r7, #16
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bd80      	pop	{r7, pc}
	...

0800aa08 <can_filter_init>:

struct motors_measure motors_readings;

struct motor_cmd motor_cmd;

void can_filter_init(void){
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b08a      	sub	sp, #40	; 0x28
 800aa0c:	af00      	add	r7, sp, #0
  CAN_FilterTypeDef can_filter_st;
  can_filter_st.FilterActivation = ENABLE;
 800aa0e:	2301      	movs	r3, #1
 800aa10:	623b      	str	r3, [r7, #32]
  can_filter_st.FilterMode = CAN_FILTERMODE_IDMASK;
 800aa12:	2300      	movs	r3, #0
 800aa14:	61bb      	str	r3, [r7, #24]
  can_filter_st.FilterScale = CAN_FILTERSCALE_32BIT;
 800aa16:	2301      	movs	r3, #1
 800aa18:	61fb      	str	r3, [r7, #28]
  can_filter_st.FilterIdHigh = 0x0000;
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	603b      	str	r3, [r7, #0]
  can_filter_st.FilterIdLow = 0x0000;
 800aa1e:	2300      	movs	r3, #0
 800aa20:	607b      	str	r3, [r7, #4]
  can_filter_st.FilterMaskIdHigh = 0x0000;
 800aa22:	2300      	movs	r3, #0
 800aa24:	60bb      	str	r3, [r7, #8]
  can_filter_st.FilterMaskIdLow = 0x0000;
 800aa26:	2300      	movs	r3, #0
 800aa28:	60fb      	str	r3, [r7, #12]
  can_filter_st.FilterBank = 0;
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	617b      	str	r3, [r7, #20]
  can_filter_st.SlaveStartFilterBank = 14;
 800aa2e:	230e      	movs	r3, #14
 800aa30:	627b      	str	r3, [r7, #36]	; 0x24
  can_filter_st.FilterFIFOAssignment = CAN_RX_FIFO0;
 800aa32:	2300      	movs	r3, #0
 800aa34:	613b      	str	r3, [r7, #16]

  if (HAL_CAN_ConfigFilter(&hcan1, &can_filter_st) != HAL_OK) {
 800aa36:	463b      	mov	r3, r7
 800aa38:	4619      	mov	r1, r3
 800aa3a:	480f      	ldr	r0, [pc, #60]	; (800aa78 <can_filter_init+0x70>)
 800aa3c:	f7f6 fe50 	bl	80016e0 <HAL_CAN_ConfigFilter>
 800aa40:	4603      	mov	r3, r0
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d001      	beq.n	800aa4a <can_filter_init+0x42>
	Error_Handler();
 800aa46:	f7f6 f893 	bl	8000b70 <Error_Handler>
  }
  if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 800aa4a:	480b      	ldr	r0, [pc, #44]	; (800aa78 <can_filter_init+0x70>)
 800aa4c:	f7f6 ff28 	bl	80018a0 <HAL_CAN_Start>
 800aa50:	4603      	mov	r3, r0
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d001      	beq.n	800aa5a <can_filter_init+0x52>
	Error_Handler();
 800aa56:	f7f6 f88b 	bl	8000b70 <Error_Handler>
  }
  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 800aa5a:	2102      	movs	r1, #2
 800aa5c:	4806      	ldr	r0, [pc, #24]	; (800aa78 <can_filter_init+0x70>)
 800aa5e:	f7f7 f955 	bl	8001d0c <HAL_CAN_ActivateNotification>
 800aa62:	4603      	mov	r3, r0
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d002      	beq.n	800aa6e <can_filter_init+0x66>
	Error_Handler();
 800aa68:	f7f6 f882 	bl	8000b70 <Error_Handler>
  }
  return;
 800aa6c:	bf00      	nop
 800aa6e:	bf00      	nop
}
 800aa70:	3728      	adds	r7, #40	; 0x28
 800aa72:	46bd      	mov	sp, r7
 800aa74:	bd80      	pop	{r7, pc}
 800aa76:	bf00      	nop
 800aa78:	2000016c 	.word	0x2000016c

0800aa7c <encoder_data_handler>:
//     ptr->ecd        = (uint16_t)(rxData[0] << 8 | rxData[1]);
//     ptr->offset_ecd = ptr->ecd;
// }

void encoder_data_handler(motor_measure_t* ptr, uint8_t rxData[])
{
 800aa7c:	b480      	push	{r7}
 800aa7e:	b083      	sub	sp, #12
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
 800aa84:	6039      	str	r1, [r7, #0]
  ptr->last_ecd = ptr->ecd;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	881a      	ldrh	r2, [r3, #0]
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	805a      	strh	r2, [r3, #2]
  ptr->ecd      = (uint16_t)(rxData[0] << 8 | rxData[1]);
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	781b      	ldrb	r3, [r3, #0]
 800aa92:	021b      	lsls	r3, r3, #8
 800aa94:	b21a      	sxth	r2, r3
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	3301      	adds	r3, #1
 800aa9a:	781b      	ldrb	r3, [r3, #0]
 800aa9c:	b21b      	sxth	r3, r3
 800aa9e:	4313      	orrs	r3, r2
 800aaa0:	b21b      	sxth	r3, r3
 800aaa2:	b29a      	uxth	r2, r3
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	801a      	strh	r2, [r3, #0]
  
  if (ptr->ecd - ptr->last_ecd > 4096)
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	881b      	ldrh	r3, [r3, #0]
 800aaac:	461a      	mov	r2, r3
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	885b      	ldrh	r3, [r3, #2]
 800aab2:	1ad3      	subs	r3, r2, r3
 800aab4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aab8:	dd0f      	ble.n	800aada <encoder_data_handler+0x5e>
  {
    ptr->round_cnt--;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	689b      	ldr	r3, [r3, #8]
 800aabe:	1e5a      	subs	r2, r3, #1
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	609a      	str	r2, [r3, #8]
    ptr->ecd_raw_rate = ptr->ecd - ptr->last_ecd - 8192;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	881b      	ldrh	r3, [r3, #0]
 800aac8:	461a      	mov	r2, r3
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	885b      	ldrh	r3, [r3, #2]
 800aace:	1ad3      	subs	r3, r2, r3
 800aad0:	f5a3 5200 	sub.w	r2, r3, #8192	; 0x2000
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	61da      	str	r2, [r3, #28]
 800aad8:	e020      	b.n	800ab1c <encoder_data_handler+0xa0>
  }
  else if (ptr->ecd - ptr->last_ecd < -4096)
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	881b      	ldrh	r3, [r3, #0]
 800aade:	461a      	mov	r2, r3
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	885b      	ldrh	r3, [r3, #2]
 800aae4:	1ad3      	subs	r3, r2, r3
 800aae6:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 800aaea:	da0f      	bge.n	800ab0c <encoder_data_handler+0x90>
  {
    ptr->round_cnt++;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	689b      	ldr	r3, [r3, #8]
 800aaf0:	1c5a      	adds	r2, r3, #1
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	609a      	str	r2, [r3, #8]
    ptr->ecd_raw_rate = ptr->ecd - ptr->last_ecd + 8192;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	881b      	ldrh	r3, [r3, #0]
 800aafa:	461a      	mov	r2, r3
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	885b      	ldrh	r3, [r3, #2]
 800ab00:	1ad3      	subs	r3, r2, r3
 800ab02:	f503 5200 	add.w	r2, r3, #8192	; 0x2000
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	61da      	str	r2, [r3, #28]
 800ab0a:	e007      	b.n	800ab1c <encoder_data_handler+0xa0>
  }
  else
  {
    ptr->ecd_raw_rate = ptr->ecd - ptr->last_ecd;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	881b      	ldrh	r3, [r3, #0]
 800ab10:	461a      	mov	r2, r3
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	885b      	ldrh	r3, [r3, #2]
 800ab16:	1ad2      	subs	r2, r2, r3
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	61da      	str	r2, [r3, #28]
  }

  ptr->total_ecd = ptr->round_cnt * ENCODER_CNT_PER_ROUND + ptr->ecd - ptr->offset_ecd;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	689b      	ldr	r3, [r3, #8]
 800ab20:	ee07 3a90 	vmov	s15, r3
 800ab24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ab28:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800abbc <encoder_data_handler+0x140>
 800ab2c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	881b      	ldrh	r3, [r3, #0]
 800ab34:	ee07 3a90 	vmov	s15, r3
 800ab38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ab3c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	8a9b      	ldrh	r3, [r3, #20]
 800ab44:	ee07 3a90 	vmov	s15, r3
 800ab48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ab4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ab50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ab54:	ee17 2a90 	vmov	r2, s15
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	60da      	str	r2, [r3, #12]
  /// total angle, unit is degree
  ptr->total_angle = ptr->total_ecd / ENCODER_ANGLE_RATIO;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	68db      	ldr	r3, [r3, #12]
 800ab60:	ee07 3a90 	vmov	s15, r3
 800ab64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ab68:	eddf 6a15 	vldr	s13, [pc, #84]	; 800abc0 <encoder_data_handler+0x144>
 800ab6c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ab70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ab74:	ee17 2a90 	vmov	r2, s15
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	611a      	str	r2, [r3, #16]
	ptr->speed_rpm     = ((int16_t)rxData[2] << 8 | rxData[3]);
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	3302      	adds	r3, #2
 800ab80:	781b      	ldrb	r3, [r3, #0]
 800ab82:	021b      	lsls	r3, r3, #8
 800ab84:	b21a      	sxth	r2, r3
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	3303      	adds	r3, #3
 800ab8a:	781b      	ldrb	r3, [r3, #0]
 800ab8c:	b21b      	sxth	r3, r3
 800ab8e:	4313      	orrs	r3, r2
 800ab90:	b21a      	sxth	r2, r3
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	809a      	strh	r2, [r3, #4]
  ptr->given_current = ((int16_t)rxData[4] << 8 | rxData[5]);
 800ab96:	683b      	ldr	r3, [r7, #0]
 800ab98:	3304      	adds	r3, #4
 800ab9a:	781b      	ldrb	r3, [r3, #0]
 800ab9c:	021b      	lsls	r3, r3, #8
 800ab9e:	b21a      	sxth	r2, r3
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	3305      	adds	r3, #5
 800aba4:	781b      	ldrb	r3, [r3, #0]
 800aba6:	b21b      	sxth	r3, r3
 800aba8:	4313      	orrs	r3, r2
 800abaa:	b21a      	sxth	r2, r3
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	80da      	strh	r2, [r3, #6]
}
 800abb0:	bf00      	nop
 800abb2:	370c      	adds	r7, #12
 800abb4:	46bd      	mov	sp, r7
 800abb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abba:	4770      	bx	lr
 800abbc:	46000000 	.word	0x46000000
 800abc0:	41b60b61 	.word	0x41b60b61

0800abc4 <can_receive_msg>:

void can_receive_msg(CAN_HandleTypeDef *hcan)
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b08c      	sub	sp, #48	; 0x30
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
  CAN_RxHeaderTypeDef rx_header;
  uint8_t rxData[8];

  if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &rx_header, rxData) != HAL_OK) {
 800abcc:	f107 030c 	add.w	r3, r7, #12
 800abd0:	f107 0214 	add.w	r2, r7, #20
 800abd4:	2100      	movs	r1, #0
 800abd6:	481d      	ldr	r0, [pc, #116]	; (800ac4c <can_receive_msg+0x88>)
 800abd8:	f7f6 ff76 	bl	8001ac8 <HAL_CAN_GetRxMessage>
 800abdc:	4603      	mov	r3, r0
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d001      	beq.n	800abe6 <can_receive_msg+0x22>
	Error_Handler();
 800abe2:	f7f5 ffc5 	bl	8000b70 <Error_Handler>
  }
  switch (rx_header.StdId)
 800abe6:	697b      	ldr	r3, [r7, #20]
 800abe8:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 800abec:	2b03      	cmp	r3, #3
 800abee:	d827      	bhi.n	800ac40 <can_receive_msg+0x7c>
 800abf0:	a201      	add	r2, pc, #4	; (adr r2, 800abf8 <can_receive_msg+0x34>)
 800abf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abf6:	bf00      	nop
 800abf8:	0800ac09 	.word	0x0800ac09
 800abfc:	0800ac17 	.word	0x0800ac17
 800ac00:	0800ac25 	.word	0x0800ac25
 800ac04:	0800ac33 	.word	0x0800ac33
  {
  case MOTOR_ID_1:
    encoder_data_handler(&motors_readings.motor_1_measure, rxData);
 800ac08:	f107 030c 	add.w	r3, r7, #12
 800ac0c:	4619      	mov	r1, r3
 800ac0e:	4810      	ldr	r0, [pc, #64]	; (800ac50 <can_receive_msg+0x8c>)
 800ac10:	f7ff ff34 	bl	800aa7c <encoder_data_handler>
    break;
 800ac14:	e015      	b.n	800ac42 <can_receive_msg+0x7e>
  case MOTOR_ID_2:
    encoder_data_handler(&motors_readings.motor_2_measure, rxData);
 800ac16:	f107 030c 	add.w	r3, r7, #12
 800ac1a:	4619      	mov	r1, r3
 800ac1c:	480d      	ldr	r0, [pc, #52]	; (800ac54 <can_receive_msg+0x90>)
 800ac1e:	f7ff ff2d 	bl	800aa7c <encoder_data_handler>
    break;
 800ac22:	e00e      	b.n	800ac42 <can_receive_msg+0x7e>
  case MOTOR_ID_3:
    encoder_data_handler(&motors_readings.motor_3_measure, rxData);
 800ac24:	f107 030c 	add.w	r3, r7, #12
 800ac28:	4619      	mov	r1, r3
 800ac2a:	480b      	ldr	r0, [pc, #44]	; (800ac58 <can_receive_msg+0x94>)
 800ac2c:	f7ff ff26 	bl	800aa7c <encoder_data_handler>
    break;
 800ac30:	e007      	b.n	800ac42 <can_receive_msg+0x7e>
  case MOTOR_ID_4:
    encoder_data_handler(&motors_readings.motor_4_measure, rxData);
 800ac32:	f107 030c 	add.w	r3, r7, #12
 800ac36:	4619      	mov	r1, r3
 800ac38:	4808      	ldr	r0, [pc, #32]	; (800ac5c <can_receive_msg+0x98>)
 800ac3a:	f7ff ff1f 	bl	800aa7c <encoder_data_handler>
    break;
 800ac3e:	e000      	b.n	800ac42 <can_receive_msg+0x7e>
  default:
    break;
 800ac40:	bf00      	nop
  }
  return;
 800ac42:	bf00      	nop
}
 800ac44:	3730      	adds	r7, #48	; 0x30
 800ac46:	46bd      	mov	sp, r7
 800ac48:	bd80      	pop	{r7, pc}
 800ac4a:	bf00      	nop
 800ac4c:	2000016c 	.word	0x2000016c
 800ac50:	20005c94 	.word	0x20005c94
 800ac54:	20005cb4 	.word	0x20005cb4
 800ac58:	20005cd4 	.word	0x20005cd4
 800ac5c:	20005cf4 	.word	0x20005cf4

0800ac60 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b082      	sub	sp, #8
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
  can_receive_msg(hcan);
 800ac68:	6878      	ldr	r0, [r7, #4]
 800ac6a:	f7ff ffab 	bl	800abc4 <can_receive_msg>
  return;
 800ac6e:	bf00      	nop
}
 800ac70:	3708      	adds	r7, #8
 800ac72:	46bd      	mov	sp, r7
 800ac74:	bd80      	pop	{r7, pc}
	...

0800ac78 <motor_send_bytes>:
 * @param motor2 The byte value for motor 2.
 * @param motor3 The byte value for motor 3.
 * @param motor4 The byte value for motor 4.
 */
void motor_send_bytes(int16_t motor1, int16_t motor2, int16_t motor3, int16_t motor4)
{
 800ac78:	b590      	push	{r4, r7, lr}
 800ac7a:	b087      	sub	sp, #28
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	4604      	mov	r4, r0
 800ac80:	4608      	mov	r0, r1
 800ac82:	4611      	mov	r1, r2
 800ac84:	461a      	mov	r2, r3
 800ac86:	4623      	mov	r3, r4
 800ac88:	80fb      	strh	r3, [r7, #6]
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	80bb      	strh	r3, [r7, #4]
 800ac8e:	460b      	mov	r3, r1
 800ac90:	807b      	strh	r3, [r7, #2]
 800ac92:	4613      	mov	r3, r2
 800ac94:	803b      	strh	r3, [r7, #0]
  struct can_std_msg motor_byte_msg;
  motor_byte_msg.std_id = 0x200;
 800ac96:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ac9a:	60bb      	str	r3, [r7, #8]
  motor_byte_msg.dlc = 8;
 800ac9c:	2308      	movs	r3, #8
 800ac9e:	733b      	strb	r3, [r7, #12]
  motor_byte_msg.data[0] = (motor1 >> 8);
 800aca0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800aca4:	121b      	asrs	r3, r3, #8
 800aca6:	b21b      	sxth	r3, r3
 800aca8:	b2db      	uxtb	r3, r3
 800acaa:	737b      	strb	r3, [r7, #13]
  motor_byte_msg.data[1] = motor1;
 800acac:	88fb      	ldrh	r3, [r7, #6]
 800acae:	b2db      	uxtb	r3, r3
 800acb0:	73bb      	strb	r3, [r7, #14]
  motor_byte_msg.data[2] = (motor2 >> 8);
 800acb2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800acb6:	121b      	asrs	r3, r3, #8
 800acb8:	b21b      	sxth	r3, r3
 800acba:	b2db      	uxtb	r3, r3
 800acbc:	73fb      	strb	r3, [r7, #15]
  motor_byte_msg.data[3] = motor2;
 800acbe:	88bb      	ldrh	r3, [r7, #4]
 800acc0:	b2db      	uxtb	r3, r3
 800acc2:	743b      	strb	r3, [r7, #16]
  motor_byte_msg.data[4] = (motor3 >> 8);
 800acc4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800acc8:	121b      	asrs	r3, r3, #8
 800acca:	b21b      	sxth	r3, r3
 800accc:	b2db      	uxtb	r3, r3
 800acce:	747b      	strb	r3, [r7, #17]
  motor_byte_msg.data[5] = motor3;
 800acd0:	887b      	ldrh	r3, [r7, #2]
 800acd2:	b2db      	uxtb	r3, r3
 800acd4:	74bb      	strb	r3, [r7, #18]
  motor_byte_msg.data[6] = (motor4 >> 8);
 800acd6:	f9b7 3000 	ldrsh.w	r3, [r7]
 800acda:	121b      	asrs	r3, r3, #8
 800acdc:	b21b      	sxth	r3, r3
 800acde:	b2db      	uxtb	r3, r3
 800ace0:	74fb      	strb	r3, [r7, #19]
  motor_byte_msg.data[7] = motor4;
 800ace2:	883b      	ldrh	r3, [r7, #0]
 800ace4:	b2db      	uxtb	r3, r3
 800ace6:	753b      	strb	r3, [r7, #20]
  can_send_msg(&hcan1, &motor_byte_msg);
 800ace8:	f107 0308 	add.w	r3, r7, #8
 800acec:	4619      	mov	r1, r3
 800acee:	4803      	ldr	r0, [pc, #12]	; (800acfc <motor_send_bytes+0x84>)
 800acf0:	f000 f806 	bl	800ad00 <can_send_msg>
}
 800acf4:	bf00      	nop
 800acf6:	371c      	adds	r7, #28
 800acf8:	46bd      	mov	sp, r7
 800acfa:	bd90      	pop	{r4, r7, pc}
 800acfc:	2000016c 	.word	0x2000016c

0800ad00 <can_send_msg>:
 * @brief Sends a CAN message. This function sends a CAN message using the specified CAN handle and message structure.
 * @param hcan Pointer to the CAN handle.
 * @param tx_msg Pointer to the CAN message structure.
 */
void can_send_msg(CAN_HandleTypeDef *hcan, struct can_std_msg *tx_msg)
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b08a      	sub	sp, #40	; 0x28
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
 800ad08:	6039      	str	r1, [r7, #0]
  // Function variables
  int32_t txMailbox;
  CAN_TxHeaderTypeDef tx_header;

  // Set the CAN message header parameters
  tx_header.StdId = tx_msg->std_id;
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	60fb      	str	r3, [r7, #12]
  tx_header.RTR = CAN_RTR_DATA;
 800ad10:	2300      	movs	r3, #0
 800ad12:	61bb      	str	r3, [r7, #24]
  tx_header.IDE = CAN_ID_STD;
 800ad14:	2300      	movs	r3, #0
 800ad16:	617b      	str	r3, [r7, #20]
  tx_header.DLC = tx_msg->dlc; // Number of data bytes
 800ad18:	683b      	ldr	r3, [r7, #0]
 800ad1a:	791b      	ldrb	r3, [r3, #4]
 800ad1c:	61fb      	str	r3, [r7, #28]
  tx_header.TransmitGlobalTime = DISABLE;
 800ad1e:	2300      	movs	r3, #0
 800ad20:	f887 3020 	strb.w	r3, [r7, #32]

  // Add the CAN message to the transmit queue
  if (HAL_CAN_AddTxMessage(hcan, &tx_header, tx_msg->data, &txMailbox) != HAL_OK) {
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	1d5a      	adds	r2, r3, #5
 800ad28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ad2c:	f107 010c 	add.w	r1, r7, #12
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	f7f6 fdf9 	bl	8001928 <HAL_CAN_AddTxMessage>
 800ad36:	4603      	mov	r3, r0
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d007      	beq.n	800ad4c <can_send_msg+0x4c>
    // Error handling
    HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, SET);
 800ad3c:	2201      	movs	r2, #1
 800ad3e:	2140      	movs	r1, #64	; 0x40
 800ad40:	4804      	ldr	r0, [pc, #16]	; (800ad54 <can_send_msg+0x54>)
 800ad42:	f7f7 fcc7 	bl	80026d4 <HAL_GPIO_WritePin>
    Error_Handler();
 800ad46:	f7f5 ff13 	bl	8000b70 <Error_Handler>
  }

  return;
 800ad4a:	bf00      	nop
 800ad4c:	bf00      	nop
}
 800ad4e:	3728      	adds	r7, #40	; 0x28
 800ad50:	46bd      	mov	sp, r7
 800ad52:	bd80      	pop	{r7, pc}
 800ad54:	40021800 	.word	0x40021800

0800ad58 <motor_test>:
/*
________________________________________________________________________________________________________________________

*/
void motor_test(void){
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b0bc      	sub	sp, #240	; 0xf0
 800ad5c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(POWER2_CTRL_GPIO_Port, POWER2_CTRL_Pin, SET);
 800ad5e:	2201      	movs	r2, #1
 800ad60:	2108      	movs	r1, #8
 800ad62:	4848      	ldr	r0, [pc, #288]	; (800ae84 <motor_test+0x12c>)
 800ad64:	f7f7 fcb6 	bl	80026d4 <HAL_GPIO_WritePin>
	can_filter_init();
 800ad68:	f7ff fe4e 	bl	800aa08 <can_filter_init>

  struct pid motor_1_pid; // MOTOR_ID_1
  struct pid motor_2_pid; // MOTOR_ID_2
  struct pid motor_3_pid; // MOTOR_ID_3
  struct pid motor_4_pid; // MOTOR_ID_4
  pid_init(&motor_1_pid, 6.5f, 0.1f, 0.0f, 15000, 500);
 800ad6c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800ad70:	ed9f 2a45 	vldr	s4, [pc, #276]	; 800ae88 <motor_test+0x130>
 800ad74:	eddf 1a45 	vldr	s3, [pc, #276]	; 800ae8c <motor_test+0x134>
 800ad78:	ed9f 1a45 	vldr	s2, [pc, #276]	; 800ae90 <motor_test+0x138>
 800ad7c:	eddf 0a45 	vldr	s1, [pc, #276]	; 800ae94 <motor_test+0x13c>
 800ad80:	eeb1 0a0a 	vmov.f32	s0, #26	; 0x40d00000  6.5
 800ad84:	4618      	mov	r0, r3
 800ad86:	f7ff fd86 	bl	800a896 <pid_init>

  struct motor_cmd motor_cmd;
  motor_cmd.motor1_rpm = 60.0f * GEAR_RATIO;
 800ad8a:	4b43      	ldr	r3, [pc, #268]	; (800ae98 <motor_test+0x140>)
 800ad8c:	603b      	str	r3, [r7, #0]
  motor_cmd.motor2_rpm = 0;
 800ad8e:	f04f 0300 	mov.w	r3, #0
 800ad92:	607b      	str	r3, [r7, #4]
  motor_cmd.motor3_rpm = 0;
 800ad94:	f04f 0300 	mov.w	r3, #0
 800ad98:	60bb      	str	r3, [r7, #8]
  motor_cmd.motor4_rpm = 0;
 800ad9a:	f04f 0300 	mov.w	r3, #0
 800ad9e:	60fb      	str	r3, [r7, #12]

	while (1)
	{
    float motor_1 = pid_calculate(&motor_1_pid, motors_readings.motor_1_measure.speed_rpm, motor_cmd.motor1_rpm);
 800ada0:	4b3e      	ldr	r3, [pc, #248]	; (800ae9c <motor_test+0x144>)
 800ada2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ada6:	ee07 3a90 	vmov	s15, r3
 800adaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800adae:	ed97 7a00 	vldr	s14, [r7]
 800adb2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800adb6:	eef0 0a47 	vmov.f32	s1, s14
 800adba:	eeb0 0a67 	vmov.f32	s0, s15
 800adbe:	4618      	mov	r0, r3
 800adc0:	f7ff fdac 	bl	800a91c <pid_calculate>
 800adc4:	ed87 0a3b 	vstr	s0, [r7, #236]	; 0xec
    float motor_2 = pid_calculate(&motor_1_pid, motors_readings.motor_2_measure.speed_rpm, motor_cmd.motor1_rpm);
 800adc8:	4b34      	ldr	r3, [pc, #208]	; (800ae9c <motor_test+0x144>)
 800adca:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800adce:	ee07 3a90 	vmov	s15, r3
 800add2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800add6:	ed97 7a00 	vldr	s14, [r7]
 800adda:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800adde:	eef0 0a47 	vmov.f32	s1, s14
 800ade2:	eeb0 0a67 	vmov.f32	s0, s15
 800ade6:	4618      	mov	r0, r3
 800ade8:	f7ff fd98 	bl	800a91c <pid_calculate>
 800adec:	ed87 0a3a 	vstr	s0, [r7, #232]	; 0xe8
    float motor_3 = pid_calculate(&motor_1_pid, motors_readings.motor_3_measure.speed_rpm, motor_cmd.motor1_rpm);
 800adf0:	4b2a      	ldr	r3, [pc, #168]	; (800ae9c <motor_test+0x144>)
 800adf2:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800adf6:	ee07 3a90 	vmov	s15, r3
 800adfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800adfe:	ed97 7a00 	vldr	s14, [r7]
 800ae02:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800ae06:	eef0 0a47 	vmov.f32	s1, s14
 800ae0a:	eeb0 0a67 	vmov.f32	s0, s15
 800ae0e:	4618      	mov	r0, r3
 800ae10:	f7ff fd84 	bl	800a91c <pid_calculate>
 800ae14:	ed87 0a39 	vstr	s0, [r7, #228]	; 0xe4
    float motor_4 = pid_calculate(&motor_1_pid, motors_readings.motor_4_measure.speed_rpm, motor_cmd.motor1_rpm);
 800ae18:	4b20      	ldr	r3, [pc, #128]	; (800ae9c <motor_test+0x144>)
 800ae1a:	f9b3 3064 	ldrsh.w	r3, [r3, #100]	; 0x64
 800ae1e:	ee07 3a90 	vmov	s15, r3
 800ae22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ae26:	ed97 7a00 	vldr	s14, [r7]
 800ae2a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800ae2e:	eef0 0a47 	vmov.f32	s1, s14
 800ae32:	eeb0 0a67 	vmov.f32	s0, s15
 800ae36:	4618      	mov	r0, r3
 800ae38:	f7ff fd70 	bl	800a91c <pid_calculate>
 800ae3c:	ed87 0a38 	vstr	s0, [r7, #224]	; 0xe0

    motor_send_bytes((int16_t)motor_1, (int16_t)motor_2, (int16_t)motor_3, (int16_t)motor_4);
 800ae40:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 800ae44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ae48:	ee17 3a90 	vmov	r3, s15
 800ae4c:	b218      	sxth	r0, r3
 800ae4e:	edd7 7a3a 	vldr	s15, [r7, #232]	; 0xe8
 800ae52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ae56:	ee17 3a90 	vmov	r3, s15
 800ae5a:	b219      	sxth	r1, r3
 800ae5c:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 800ae60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ae64:	ee17 3a90 	vmov	r3, s15
 800ae68:	b21a      	sxth	r2, r3
 800ae6a:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 800ae6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ae72:	ee17 3a90 	vmov	r3, s15
 800ae76:	b21b      	sxth	r3, r3
 800ae78:	f7ff fefe 	bl	800ac78 <motor_send_bytes>
		
		HAL_Delay(1);
 800ae7c:	2001      	movs	r0, #1
 800ae7e:	f7f6 fb0f 	bl	80014a0 <HAL_Delay>
	{
 800ae82:	e78d      	b.n	800ada0 <motor_test+0x48>
 800ae84:	40021c00 	.word	0x40021c00
 800ae88:	43fa0000 	.word	0x43fa0000
 800ae8c:	466a6000 	.word	0x466a6000
 800ae90:	00000000 	.word	0x00000000
 800ae94:	3dcccccd 	.word	0x3dcccccd
 800ae98:	44900629 	.word	0x44900629
 800ae9c:	20005c94 	.word	0x20005c94

0800aea0 <memset>:
 800aea0:	4402      	add	r2, r0
 800aea2:	4603      	mov	r3, r0
 800aea4:	4293      	cmp	r3, r2
 800aea6:	d100      	bne.n	800aeaa <memset+0xa>
 800aea8:	4770      	bx	lr
 800aeaa:	f803 1b01 	strb.w	r1, [r3], #1
 800aeae:	e7f9      	b.n	800aea4 <memset+0x4>

0800aeb0 <_reclaim_reent>:
 800aeb0:	4b29      	ldr	r3, [pc, #164]	; (800af58 <_reclaim_reent+0xa8>)
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	4283      	cmp	r3, r0
 800aeb6:	b570      	push	{r4, r5, r6, lr}
 800aeb8:	4604      	mov	r4, r0
 800aeba:	d04b      	beq.n	800af54 <_reclaim_reent+0xa4>
 800aebc:	69c3      	ldr	r3, [r0, #28]
 800aebe:	b143      	cbz	r3, 800aed2 <_reclaim_reent+0x22>
 800aec0:	68db      	ldr	r3, [r3, #12]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d144      	bne.n	800af50 <_reclaim_reent+0xa0>
 800aec6:	69e3      	ldr	r3, [r4, #28]
 800aec8:	6819      	ldr	r1, [r3, #0]
 800aeca:	b111      	cbz	r1, 800aed2 <_reclaim_reent+0x22>
 800aecc:	4620      	mov	r0, r4
 800aece:	f000 f86b 	bl	800afa8 <_free_r>
 800aed2:	6961      	ldr	r1, [r4, #20]
 800aed4:	b111      	cbz	r1, 800aedc <_reclaim_reent+0x2c>
 800aed6:	4620      	mov	r0, r4
 800aed8:	f000 f866 	bl	800afa8 <_free_r>
 800aedc:	69e1      	ldr	r1, [r4, #28]
 800aede:	b111      	cbz	r1, 800aee6 <_reclaim_reent+0x36>
 800aee0:	4620      	mov	r0, r4
 800aee2:	f000 f861 	bl	800afa8 <_free_r>
 800aee6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800aee8:	b111      	cbz	r1, 800aef0 <_reclaim_reent+0x40>
 800aeea:	4620      	mov	r0, r4
 800aeec:	f000 f85c 	bl	800afa8 <_free_r>
 800aef0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aef2:	b111      	cbz	r1, 800aefa <_reclaim_reent+0x4a>
 800aef4:	4620      	mov	r0, r4
 800aef6:	f000 f857 	bl	800afa8 <_free_r>
 800aefa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800aefc:	b111      	cbz	r1, 800af04 <_reclaim_reent+0x54>
 800aefe:	4620      	mov	r0, r4
 800af00:	f000 f852 	bl	800afa8 <_free_r>
 800af04:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800af06:	b111      	cbz	r1, 800af0e <_reclaim_reent+0x5e>
 800af08:	4620      	mov	r0, r4
 800af0a:	f000 f84d 	bl	800afa8 <_free_r>
 800af0e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800af10:	b111      	cbz	r1, 800af18 <_reclaim_reent+0x68>
 800af12:	4620      	mov	r0, r4
 800af14:	f000 f848 	bl	800afa8 <_free_r>
 800af18:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800af1a:	b111      	cbz	r1, 800af22 <_reclaim_reent+0x72>
 800af1c:	4620      	mov	r0, r4
 800af1e:	f000 f843 	bl	800afa8 <_free_r>
 800af22:	6a23      	ldr	r3, [r4, #32]
 800af24:	b1b3      	cbz	r3, 800af54 <_reclaim_reent+0xa4>
 800af26:	4620      	mov	r0, r4
 800af28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800af2c:	4718      	bx	r3
 800af2e:	5949      	ldr	r1, [r1, r5]
 800af30:	b941      	cbnz	r1, 800af44 <_reclaim_reent+0x94>
 800af32:	3504      	adds	r5, #4
 800af34:	69e3      	ldr	r3, [r4, #28]
 800af36:	2d80      	cmp	r5, #128	; 0x80
 800af38:	68d9      	ldr	r1, [r3, #12]
 800af3a:	d1f8      	bne.n	800af2e <_reclaim_reent+0x7e>
 800af3c:	4620      	mov	r0, r4
 800af3e:	f000 f833 	bl	800afa8 <_free_r>
 800af42:	e7c0      	b.n	800aec6 <_reclaim_reent+0x16>
 800af44:	680e      	ldr	r6, [r1, #0]
 800af46:	4620      	mov	r0, r4
 800af48:	f000 f82e 	bl	800afa8 <_free_r>
 800af4c:	4631      	mov	r1, r6
 800af4e:	e7ef      	b.n	800af30 <_reclaim_reent+0x80>
 800af50:	2500      	movs	r5, #0
 800af52:	e7ef      	b.n	800af34 <_reclaim_reent+0x84>
 800af54:	bd70      	pop	{r4, r5, r6, pc}
 800af56:	bf00      	nop
 800af58:	2000014c 	.word	0x2000014c

0800af5c <__libc_init_array>:
 800af5c:	b570      	push	{r4, r5, r6, lr}
 800af5e:	4d0d      	ldr	r5, [pc, #52]	; (800af94 <__libc_init_array+0x38>)
 800af60:	4c0d      	ldr	r4, [pc, #52]	; (800af98 <__libc_init_array+0x3c>)
 800af62:	1b64      	subs	r4, r4, r5
 800af64:	10a4      	asrs	r4, r4, #2
 800af66:	2600      	movs	r6, #0
 800af68:	42a6      	cmp	r6, r4
 800af6a:	d109      	bne.n	800af80 <__libc_init_array+0x24>
 800af6c:	4d0b      	ldr	r5, [pc, #44]	; (800af9c <__libc_init_array+0x40>)
 800af6e:	4c0c      	ldr	r4, [pc, #48]	; (800afa0 <__libc_init_array+0x44>)
 800af70:	f000 f872 	bl	800b058 <_init>
 800af74:	1b64      	subs	r4, r4, r5
 800af76:	10a4      	asrs	r4, r4, #2
 800af78:	2600      	movs	r6, #0
 800af7a:	42a6      	cmp	r6, r4
 800af7c:	d105      	bne.n	800af8a <__libc_init_array+0x2e>
 800af7e:	bd70      	pop	{r4, r5, r6, pc}
 800af80:	f855 3b04 	ldr.w	r3, [r5], #4
 800af84:	4798      	blx	r3
 800af86:	3601      	adds	r6, #1
 800af88:	e7ee      	b.n	800af68 <__libc_init_array+0xc>
 800af8a:	f855 3b04 	ldr.w	r3, [r5], #4
 800af8e:	4798      	blx	r3
 800af90:	3601      	adds	r6, #1
 800af92:	e7f2      	b.n	800af7a <__libc_init_array+0x1e>
 800af94:	0800b100 	.word	0x0800b100
 800af98:	0800b100 	.word	0x0800b100
 800af9c:	0800b100 	.word	0x0800b100
 800afa0:	0800b104 	.word	0x0800b104

0800afa4 <__retarget_lock_acquire_recursive>:
 800afa4:	4770      	bx	lr

0800afa6 <__retarget_lock_release_recursive>:
 800afa6:	4770      	bx	lr

0800afa8 <_free_r>:
 800afa8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800afaa:	2900      	cmp	r1, #0
 800afac:	d044      	beq.n	800b038 <_free_r+0x90>
 800afae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800afb2:	9001      	str	r0, [sp, #4]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	f1a1 0404 	sub.w	r4, r1, #4
 800afba:	bfb8      	it	lt
 800afbc:	18e4      	addlt	r4, r4, r3
 800afbe:	f000 f83f 	bl	800b040 <__malloc_lock>
 800afc2:	4a1e      	ldr	r2, [pc, #120]	; (800b03c <_free_r+0x94>)
 800afc4:	9801      	ldr	r0, [sp, #4]
 800afc6:	6813      	ldr	r3, [r2, #0]
 800afc8:	b933      	cbnz	r3, 800afd8 <_free_r+0x30>
 800afca:	6063      	str	r3, [r4, #4]
 800afcc:	6014      	str	r4, [r2, #0]
 800afce:	b003      	add	sp, #12
 800afd0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800afd4:	f000 b83a 	b.w	800b04c <__malloc_unlock>
 800afd8:	42a3      	cmp	r3, r4
 800afda:	d908      	bls.n	800afee <_free_r+0x46>
 800afdc:	6825      	ldr	r5, [r4, #0]
 800afde:	1961      	adds	r1, r4, r5
 800afe0:	428b      	cmp	r3, r1
 800afe2:	bf01      	itttt	eq
 800afe4:	6819      	ldreq	r1, [r3, #0]
 800afe6:	685b      	ldreq	r3, [r3, #4]
 800afe8:	1949      	addeq	r1, r1, r5
 800afea:	6021      	streq	r1, [r4, #0]
 800afec:	e7ed      	b.n	800afca <_free_r+0x22>
 800afee:	461a      	mov	r2, r3
 800aff0:	685b      	ldr	r3, [r3, #4]
 800aff2:	b10b      	cbz	r3, 800aff8 <_free_r+0x50>
 800aff4:	42a3      	cmp	r3, r4
 800aff6:	d9fa      	bls.n	800afee <_free_r+0x46>
 800aff8:	6811      	ldr	r1, [r2, #0]
 800affa:	1855      	adds	r5, r2, r1
 800affc:	42a5      	cmp	r5, r4
 800affe:	d10b      	bne.n	800b018 <_free_r+0x70>
 800b000:	6824      	ldr	r4, [r4, #0]
 800b002:	4421      	add	r1, r4
 800b004:	1854      	adds	r4, r2, r1
 800b006:	42a3      	cmp	r3, r4
 800b008:	6011      	str	r1, [r2, #0]
 800b00a:	d1e0      	bne.n	800afce <_free_r+0x26>
 800b00c:	681c      	ldr	r4, [r3, #0]
 800b00e:	685b      	ldr	r3, [r3, #4]
 800b010:	6053      	str	r3, [r2, #4]
 800b012:	440c      	add	r4, r1
 800b014:	6014      	str	r4, [r2, #0]
 800b016:	e7da      	b.n	800afce <_free_r+0x26>
 800b018:	d902      	bls.n	800b020 <_free_r+0x78>
 800b01a:	230c      	movs	r3, #12
 800b01c:	6003      	str	r3, [r0, #0]
 800b01e:	e7d6      	b.n	800afce <_free_r+0x26>
 800b020:	6825      	ldr	r5, [r4, #0]
 800b022:	1961      	adds	r1, r4, r5
 800b024:	428b      	cmp	r3, r1
 800b026:	bf04      	itt	eq
 800b028:	6819      	ldreq	r1, [r3, #0]
 800b02a:	685b      	ldreq	r3, [r3, #4]
 800b02c:	6063      	str	r3, [r4, #4]
 800b02e:	bf04      	itt	eq
 800b030:	1949      	addeq	r1, r1, r5
 800b032:	6021      	streq	r1, [r4, #0]
 800b034:	6054      	str	r4, [r2, #4]
 800b036:	e7ca      	b.n	800afce <_free_r+0x26>
 800b038:	b003      	add	sp, #12
 800b03a:	bd30      	pop	{r4, r5, pc}
 800b03c:	20005e50 	.word	0x20005e50

0800b040 <__malloc_lock>:
 800b040:	4801      	ldr	r0, [pc, #4]	; (800b048 <__malloc_lock+0x8>)
 800b042:	f7ff bfaf 	b.w	800afa4 <__retarget_lock_acquire_recursive>
 800b046:	bf00      	nop
 800b048:	20005e4c 	.word	0x20005e4c

0800b04c <__malloc_unlock>:
 800b04c:	4801      	ldr	r0, [pc, #4]	; (800b054 <__malloc_unlock+0x8>)
 800b04e:	f7ff bfaa 	b.w	800afa6 <__retarget_lock_release_recursive>
 800b052:	bf00      	nop
 800b054:	20005e4c 	.word	0x20005e4c

0800b058 <_init>:
 800b058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b05a:	bf00      	nop
 800b05c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b05e:	bc08      	pop	{r3}
 800b060:	469e      	mov	lr, r3
 800b062:	4770      	bx	lr

0800b064 <_fini>:
 800b064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b066:	bf00      	nop
 800b068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b06a:	bc08      	pop	{r3}
 800b06c:	469e      	mov	lr, r3
 800b06e:	4770      	bx	lr
