
motorsTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca3c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  0800cbec  0800cbec  0001cbec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cd24  0800cd24  00020180  2**0
                  CONTENTS
  4 .ARM          00000008  0800cd24  0800cd24  0001cd24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cd2c  0800cd2c  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cd2c  0800cd2c  0001cd2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cd30  0800cd30  0001cd30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  0800cd34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020180  2**0
                  CONTENTS
 10 .bss          00006700  20000180  20000180  00020180  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20006880  20006880  00020180  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00022dcb  00000000  00000000  000201f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000067da  00000000  00000000  00042fbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001e20  00000000  00000000  00049798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000016bc  00000000  00000000  0004b5b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002ca20  00000000  00000000  0004cc74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00029c85  00000000  00000000  00079694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e9032  00000000  00000000  000a3319  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007d14  00000000  00000000  0018c34c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000083  00000000  00000000  00194060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000180 	.word	0x20000180
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800cbd4 	.word	0x0800cbd4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000184 	.word	0x20000184
 80001ec:	0800cbd4 	.word	0x0800cbd4

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000210:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000214:	f000 b970 	b.w	80004f8 <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9e08      	ldr	r6, [sp, #32]
 8000236:	460d      	mov	r5, r1
 8000238:	4604      	mov	r4, r0
 800023a:	460f      	mov	r7, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14a      	bne.n	80002d6 <__udivmoddi4+0xa6>
 8000240:	428a      	cmp	r2, r1
 8000242:	4694      	mov	ip, r2
 8000244:	d965      	bls.n	8000312 <__udivmoddi4+0xe2>
 8000246:	fab2 f382 	clz	r3, r2
 800024a:	b143      	cbz	r3, 800025e <__udivmoddi4+0x2e>
 800024c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000250:	f1c3 0220 	rsb	r2, r3, #32
 8000254:	409f      	lsls	r7, r3
 8000256:	fa20 f202 	lsr.w	r2, r0, r2
 800025a:	4317      	orrs	r7, r2
 800025c:	409c      	lsls	r4, r3
 800025e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000262:	fa1f f58c 	uxth.w	r5, ip
 8000266:	fbb7 f1fe 	udiv	r1, r7, lr
 800026a:	0c22      	lsrs	r2, r4, #16
 800026c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000270:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000274:	fb01 f005 	mul.w	r0, r1, r5
 8000278:	4290      	cmp	r0, r2
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x62>
 800027c:	eb1c 0202 	adds.w	r2, ip, r2
 8000280:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000284:	f080 811c 	bcs.w	80004c0 <__udivmoddi4+0x290>
 8000288:	4290      	cmp	r0, r2
 800028a:	f240 8119 	bls.w	80004c0 <__udivmoddi4+0x290>
 800028e:	3902      	subs	r1, #2
 8000290:	4462      	add	r2, ip
 8000292:	1a12      	subs	r2, r2, r0
 8000294:	b2a4      	uxth	r4, r4
 8000296:	fbb2 f0fe 	udiv	r0, r2, lr
 800029a:	fb0e 2210 	mls	r2, lr, r0, r2
 800029e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a2:	fb00 f505 	mul.w	r5, r0, r5
 80002a6:	42a5      	cmp	r5, r4
 80002a8:	d90a      	bls.n	80002c0 <__udivmoddi4+0x90>
 80002aa:	eb1c 0404 	adds.w	r4, ip, r4
 80002ae:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x294>
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x294>
 80002bc:	4464      	add	r4, ip
 80002be:	3802      	subs	r0, #2
 80002c0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c4:	1b64      	subs	r4, r4, r5
 80002c6:	2100      	movs	r1, #0
 80002c8:	b11e      	cbz	r6, 80002d2 <__udivmoddi4+0xa2>
 80002ca:	40dc      	lsrs	r4, r3
 80002cc:	2300      	movs	r3, #0
 80002ce:	e9c6 4300 	strd	r4, r3, [r6]
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d908      	bls.n	80002ec <__udivmoddi4+0xbc>
 80002da:	2e00      	cmp	r6, #0
 80002dc:	f000 80ed 	beq.w	80004ba <__udivmoddi4+0x28a>
 80002e0:	2100      	movs	r1, #0
 80002e2:	e9c6 0500 	strd	r0, r5, [r6]
 80002e6:	4608      	mov	r0, r1
 80002e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ec:	fab3 f183 	clz	r1, r3
 80002f0:	2900      	cmp	r1, #0
 80002f2:	d149      	bne.n	8000388 <__udivmoddi4+0x158>
 80002f4:	42ab      	cmp	r3, r5
 80002f6:	d302      	bcc.n	80002fe <__udivmoddi4+0xce>
 80002f8:	4282      	cmp	r2, r0
 80002fa:	f200 80f8 	bhi.w	80004ee <__udivmoddi4+0x2be>
 80002fe:	1a84      	subs	r4, r0, r2
 8000300:	eb65 0203 	sbc.w	r2, r5, r3
 8000304:	2001      	movs	r0, #1
 8000306:	4617      	mov	r7, r2
 8000308:	2e00      	cmp	r6, #0
 800030a:	d0e2      	beq.n	80002d2 <__udivmoddi4+0xa2>
 800030c:	e9c6 4700 	strd	r4, r7, [r6]
 8000310:	e7df      	b.n	80002d2 <__udivmoddi4+0xa2>
 8000312:	b902      	cbnz	r2, 8000316 <__udivmoddi4+0xe6>
 8000314:	deff      	udf	#255	; 0xff
 8000316:	fab2 f382 	clz	r3, r2
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8090 	bne.w	8000440 <__udivmoddi4+0x210>
 8000320:	1a8a      	subs	r2, r1, r2
 8000322:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000326:	fa1f fe8c 	uxth.w	lr, ip
 800032a:	2101      	movs	r1, #1
 800032c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000330:	fb07 2015 	mls	r0, r7, r5, r2
 8000334:	0c22      	lsrs	r2, r4, #16
 8000336:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033a:	fb0e f005 	mul.w	r0, lr, r5
 800033e:	4290      	cmp	r0, r2
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x124>
 8000342:	eb1c 0202 	adds.w	r2, ip, r2
 8000346:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x122>
 800034c:	4290      	cmp	r0, r2
 800034e:	f200 80cb 	bhi.w	80004e8 <__udivmoddi4+0x2b8>
 8000352:	4645      	mov	r5, r8
 8000354:	1a12      	subs	r2, r2, r0
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb2 f0f7 	udiv	r0, r2, r7
 800035c:	fb07 2210 	mls	r2, r7, r0, r2
 8000360:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000364:	fb0e fe00 	mul.w	lr, lr, r0
 8000368:	45a6      	cmp	lr, r4
 800036a:	d908      	bls.n	800037e <__udivmoddi4+0x14e>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000374:	d202      	bcs.n	800037c <__udivmoddi4+0x14c>
 8000376:	45a6      	cmp	lr, r4
 8000378:	f200 80bb 	bhi.w	80004f2 <__udivmoddi4+0x2c2>
 800037c:	4610      	mov	r0, r2
 800037e:	eba4 040e 	sub.w	r4, r4, lr
 8000382:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000386:	e79f      	b.n	80002c8 <__udivmoddi4+0x98>
 8000388:	f1c1 0720 	rsb	r7, r1, #32
 800038c:	408b      	lsls	r3, r1
 800038e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000392:	ea4c 0c03 	orr.w	ip, ip, r3
 8000396:	fa05 f401 	lsl.w	r4, r5, r1
 800039a:	fa20 f307 	lsr.w	r3, r0, r7
 800039e:	40fd      	lsrs	r5, r7
 80003a0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a4:	4323      	orrs	r3, r4
 80003a6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003aa:	fa1f fe8c 	uxth.w	lr, ip
 80003ae:	fb09 5518 	mls	r5, r9, r8, r5
 80003b2:	0c1c      	lsrs	r4, r3, #16
 80003b4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003b8:	fb08 f50e 	mul.w	r5, r8, lr
 80003bc:	42a5      	cmp	r5, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	fa00 f001 	lsl.w	r0, r0, r1
 80003c6:	d90b      	bls.n	80003e0 <__udivmoddi4+0x1b0>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003d0:	f080 8088 	bcs.w	80004e4 <__udivmoddi4+0x2b4>
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	f240 8085 	bls.w	80004e4 <__udivmoddi4+0x2b4>
 80003da:	f1a8 0802 	sub.w	r8, r8, #2
 80003de:	4464      	add	r4, ip
 80003e0:	1b64      	subs	r4, r4, r5
 80003e2:	b29d      	uxth	r5, r3
 80003e4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e8:	fb09 4413 	mls	r4, r9, r3, r4
 80003ec:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f4:	45a6      	cmp	lr, r4
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x1da>
 80003f8:	eb1c 0404 	adds.w	r4, ip, r4
 80003fc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000400:	d26c      	bcs.n	80004dc <__udivmoddi4+0x2ac>
 8000402:	45a6      	cmp	lr, r4
 8000404:	d96a      	bls.n	80004dc <__udivmoddi4+0x2ac>
 8000406:	3b02      	subs	r3, #2
 8000408:	4464      	add	r4, ip
 800040a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800040e:	fba3 9502 	umull	r9, r5, r3, r2
 8000412:	eba4 040e 	sub.w	r4, r4, lr
 8000416:	42ac      	cmp	r4, r5
 8000418:	46c8      	mov	r8, r9
 800041a:	46ae      	mov	lr, r5
 800041c:	d356      	bcc.n	80004cc <__udivmoddi4+0x29c>
 800041e:	d053      	beq.n	80004c8 <__udivmoddi4+0x298>
 8000420:	b156      	cbz	r6, 8000438 <__udivmoddi4+0x208>
 8000422:	ebb0 0208 	subs.w	r2, r0, r8
 8000426:	eb64 040e 	sbc.w	r4, r4, lr
 800042a:	fa04 f707 	lsl.w	r7, r4, r7
 800042e:	40ca      	lsrs	r2, r1
 8000430:	40cc      	lsrs	r4, r1
 8000432:	4317      	orrs	r7, r2
 8000434:	e9c6 7400 	strd	r7, r4, [r6]
 8000438:	4618      	mov	r0, r3
 800043a:	2100      	movs	r1, #0
 800043c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000440:	f1c3 0120 	rsb	r1, r3, #32
 8000444:	fa02 fc03 	lsl.w	ip, r2, r3
 8000448:	fa20 f201 	lsr.w	r2, r0, r1
 800044c:	fa25 f101 	lsr.w	r1, r5, r1
 8000450:	409d      	lsls	r5, r3
 8000452:	432a      	orrs	r2, r5
 8000454:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000460:	fb07 1510 	mls	r5, r7, r0, r1
 8000464:	0c11      	lsrs	r1, r2, #16
 8000466:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046a:	fb00 f50e 	mul.w	r5, r0, lr
 800046e:	428d      	cmp	r5, r1
 8000470:	fa04 f403 	lsl.w	r4, r4, r3
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x258>
 8000476:	eb1c 0101 	adds.w	r1, ip, r1
 800047a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800047e:	d22f      	bcs.n	80004e0 <__udivmoddi4+0x2b0>
 8000480:	428d      	cmp	r5, r1
 8000482:	d92d      	bls.n	80004e0 <__udivmoddi4+0x2b0>
 8000484:	3802      	subs	r0, #2
 8000486:	4461      	add	r1, ip
 8000488:	1b49      	subs	r1, r1, r5
 800048a:	b292      	uxth	r2, r2
 800048c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000490:	fb07 1115 	mls	r1, r7, r5, r1
 8000494:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000498:	fb05 f10e 	mul.w	r1, r5, lr
 800049c:	4291      	cmp	r1, r2
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x282>
 80004a0:	eb1c 0202 	adds.w	r2, ip, r2
 80004a4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004a8:	d216      	bcs.n	80004d8 <__udivmoddi4+0x2a8>
 80004aa:	4291      	cmp	r1, r2
 80004ac:	d914      	bls.n	80004d8 <__udivmoddi4+0x2a8>
 80004ae:	3d02      	subs	r5, #2
 80004b0:	4462      	add	r2, ip
 80004b2:	1a52      	subs	r2, r2, r1
 80004b4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004b8:	e738      	b.n	800032c <__udivmoddi4+0xfc>
 80004ba:	4631      	mov	r1, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xa2>
 80004c0:	4639      	mov	r1, r7
 80004c2:	e6e6      	b.n	8000292 <__udivmoddi4+0x62>
 80004c4:	4610      	mov	r0, r2
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x90>
 80004c8:	4548      	cmp	r0, r9
 80004ca:	d2a9      	bcs.n	8000420 <__udivmoddi4+0x1f0>
 80004cc:	ebb9 0802 	subs.w	r8, r9, r2
 80004d0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d4:	3b01      	subs	r3, #1
 80004d6:	e7a3      	b.n	8000420 <__udivmoddi4+0x1f0>
 80004d8:	4645      	mov	r5, r8
 80004da:	e7ea      	b.n	80004b2 <__udivmoddi4+0x282>
 80004dc:	462b      	mov	r3, r5
 80004de:	e794      	b.n	800040a <__udivmoddi4+0x1da>
 80004e0:	4640      	mov	r0, r8
 80004e2:	e7d1      	b.n	8000488 <__udivmoddi4+0x258>
 80004e4:	46d0      	mov	r8, sl
 80004e6:	e77b      	b.n	80003e0 <__udivmoddi4+0x1b0>
 80004e8:	3d02      	subs	r5, #2
 80004ea:	4462      	add	r2, ip
 80004ec:	e732      	b.n	8000354 <__udivmoddi4+0x124>
 80004ee:	4608      	mov	r0, r1
 80004f0:	e70a      	b.n	8000308 <__udivmoddi4+0xd8>
 80004f2:	4464      	add	r4, ip
 80004f4:	3802      	subs	r0, #2
 80004f6:	e742      	b.n	800037e <__udivmoddi4+0x14e>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000500:	4b17      	ldr	r3, [pc, #92]	; (8000560 <MX_CAN1_Init+0x64>)
 8000502:	4a18      	ldr	r2, [pc, #96]	; (8000564 <MX_CAN1_Init+0x68>)
 8000504:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 7;
 8000506:	4b16      	ldr	r3, [pc, #88]	; (8000560 <MX_CAN1_Init+0x64>)
 8000508:	2207      	movs	r2, #7
 800050a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800050c:	4b14      	ldr	r3, [pc, #80]	; (8000560 <MX_CAN1_Init+0x64>)
 800050e:	2200      	movs	r2, #0
 8000510:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000512:	4b13      	ldr	r3, [pc, #76]	; (8000560 <MX_CAN1_Init+0x64>)
 8000514:	2200      	movs	r2, #0
 8000516:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000518:	4b11      	ldr	r3, [pc, #68]	; (8000560 <MX_CAN1_Init+0x64>)
 800051a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800051e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000520:	4b0f      	ldr	r3, [pc, #60]	; (8000560 <MX_CAN1_Init+0x64>)
 8000522:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000526:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000528:	4b0d      	ldr	r3, [pc, #52]	; (8000560 <MX_CAN1_Init+0x64>)
 800052a:	2200      	movs	r2, #0
 800052c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800052e:	4b0c      	ldr	r3, [pc, #48]	; (8000560 <MX_CAN1_Init+0x64>)
 8000530:	2200      	movs	r2, #0
 8000532:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000534:	4b0a      	ldr	r3, [pc, #40]	; (8000560 <MX_CAN1_Init+0x64>)
 8000536:	2200      	movs	r2, #0
 8000538:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800053a:	4b09      	ldr	r3, [pc, #36]	; (8000560 <MX_CAN1_Init+0x64>)
 800053c:	2200      	movs	r2, #0
 800053e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000540:	4b07      	ldr	r3, [pc, #28]	; (8000560 <MX_CAN1_Init+0x64>)
 8000542:	2200      	movs	r2, #0
 8000544:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 8000546:	4b06      	ldr	r3, [pc, #24]	; (8000560 <MX_CAN1_Init+0x64>)
 8000548:	2201      	movs	r2, #1
 800054a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800054c:	4804      	ldr	r0, [pc, #16]	; (8000560 <MX_CAN1_Init+0x64>)
 800054e:	f000 ffd5 	bl	80014fc <HAL_CAN_Init>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000558:	f000 fb14 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800055c:	bf00      	nop
 800055e:	bd80      	pop	{r7, pc}
 8000560:	2000019c 	.word	0x2000019c
 8000564:	40006400 	.word	0x40006400

08000568 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b08a      	sub	sp, #40	; 0x28
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000570:	f107 0314 	add.w	r3, r7, #20
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	605a      	str	r2, [r3, #4]
 800057a:	609a      	str	r2, [r3, #8]
 800057c:	60da      	str	r2, [r3, #12]
 800057e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a21      	ldr	r2, [pc, #132]	; (800060c <HAL_CAN_MspInit+0xa4>)
 8000586:	4293      	cmp	r3, r2
 8000588:	d13b      	bne.n	8000602 <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800058a:	2300      	movs	r3, #0
 800058c:	613b      	str	r3, [r7, #16]
 800058e:	4b20      	ldr	r3, [pc, #128]	; (8000610 <HAL_CAN_MspInit+0xa8>)
 8000590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000592:	4a1f      	ldr	r2, [pc, #124]	; (8000610 <HAL_CAN_MspInit+0xa8>)
 8000594:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000598:	6413      	str	r3, [r2, #64]	; 0x40
 800059a:	4b1d      	ldr	r3, [pc, #116]	; (8000610 <HAL_CAN_MspInit+0xa8>)
 800059c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800059e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005a2:	613b      	str	r3, [r7, #16]
 80005a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80005a6:	2300      	movs	r3, #0
 80005a8:	60fb      	str	r3, [r7, #12]
 80005aa:	4b19      	ldr	r3, [pc, #100]	; (8000610 <HAL_CAN_MspInit+0xa8>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	4a18      	ldr	r2, [pc, #96]	; (8000610 <HAL_CAN_MspInit+0xa8>)
 80005b0:	f043 0308 	orr.w	r3, r3, #8
 80005b4:	6313      	str	r3, [r2, #48]	; 0x30
 80005b6:	4b16      	ldr	r3, [pc, #88]	; (8000610 <HAL_CAN_MspInit+0xa8>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ba:	f003 0308 	and.w	r3, r3, #8
 80005be:	60fb      	str	r3, [r7, #12]
 80005c0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80005c2:	2303      	movs	r3, #3
 80005c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005c6:	2302      	movs	r3, #2
 80005c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ca:	2300      	movs	r3, #0
 80005cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005ce:	2303      	movs	r3, #3
 80005d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80005d2:	2309      	movs	r3, #9
 80005d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005d6:	f107 0314 	add.w	r3, r7, #20
 80005da:	4619      	mov	r1, r3
 80005dc:	480d      	ldr	r0, [pc, #52]	; (8000614 <HAL_CAN_MspInit+0xac>)
 80005de:	f001 ff07 	bl	80023f0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 80005e2:	2200      	movs	r2, #0
 80005e4:	2105      	movs	r1, #5
 80005e6:	2013      	movs	r0, #19
 80005e8:	f001 fed8 	bl	800239c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80005ec:	2013      	movs	r0, #19
 80005ee:	f001 fef1 	bl	80023d4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80005f2:	2200      	movs	r2, #0
 80005f4:	2105      	movs	r1, #5
 80005f6:	2014      	movs	r0, #20
 80005f8:	f001 fed0 	bl	800239c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80005fc:	2014      	movs	r0, #20
 80005fe:	f001 fee9 	bl	80023d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000602:	bf00      	nop
 8000604:	3728      	adds	r7, #40	; 0x28
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40006400 	.word	0x40006400
 8000610:	40023800 	.word	0x40023800
 8000614:	40020c00 	.word	0x40020c00

08000618 <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
 8000620:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000622:	bf00      	nop
 8000624:	370c      	adds	r7, #12
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr

0800062e <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 800062e:	b480      	push	{r7}
 8000630:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000632:	bf00      	nop
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr

0800063c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800063c:	b5b0      	push	{r4, r5, r7, lr}
 800063e:	b086      	sub	sp, #24
 8000640:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000642:	4b09      	ldr	r3, [pc, #36]	; (8000668 <MX_FREERTOS_Init+0x2c>)
 8000644:	1d3c      	adds	r4, r7, #4
 8000646:	461d      	mov	r5, r3
 8000648:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800064a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800064c:	682b      	ldr	r3, [r5, #0]
 800064e:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000650:	1d3b      	adds	r3, r7, #4
 8000652:	2100      	movs	r1, #0
 8000654:	4618      	mov	r0, r3
 8000656:	f008 fa8e 	bl	8008b76 <osThreadCreate>
 800065a:	4603      	mov	r3, r0
 800065c:	4a03      	ldr	r2, [pc, #12]	; (800066c <MX_FREERTOS_Init+0x30>)
 800065e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000660:	bf00      	nop
 8000662:	3718      	adds	r7, #24
 8000664:	46bd      	mov	sp, r7
 8000666:	bdb0      	pop	{r4, r5, r7, pc}
 8000668:	0800cbf8 	.word	0x0800cbf8
 800066c:	200001c4 	.word	0x200001c4

08000670 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000678:	f009 fd44 	bl	800a104 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800067c:	2001      	movs	r0, #1
 800067e:	f008 faa1 	bl	8008bc4 <osDelay>
 8000682:	e7fb      	b.n	800067c <StartDefaultTask+0xc>

08000684 <MX_GPIO_Init>:
     PB13   ------> CAN2_TX
     PD9   ------> USART3_RX
     PD8   ------> USART3_TX
*/
void MX_GPIO_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b08e      	sub	sp, #56	; 0x38
 8000688:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	605a      	str	r2, [r3, #4]
 8000694:	609a      	str	r2, [r3, #8]
 8000696:	60da      	str	r2, [r3, #12]
 8000698:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800069a:	2300      	movs	r3, #0
 800069c:	623b      	str	r3, [r7, #32]
 800069e:	4bb3      	ldr	r3, [pc, #716]	; (800096c <MX_GPIO_Init+0x2e8>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	4ab2      	ldr	r2, [pc, #712]	; (800096c <MX_GPIO_Init+0x2e8>)
 80006a4:	f043 0310 	orr.w	r3, r3, #16
 80006a8:	6313      	str	r3, [r2, #48]	; 0x30
 80006aa:	4bb0      	ldr	r3, [pc, #704]	; (800096c <MX_GPIO_Init+0x2e8>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	f003 0310 	and.w	r3, r3, #16
 80006b2:	623b      	str	r3, [r7, #32]
 80006b4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	61fb      	str	r3, [r7, #28]
 80006ba:	4bac      	ldr	r3, [pc, #688]	; (800096c <MX_GPIO_Init+0x2e8>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	4aab      	ldr	r2, [pc, #684]	; (800096c <MX_GPIO_Init+0x2e8>)
 80006c0:	f043 0302 	orr.w	r3, r3, #2
 80006c4:	6313      	str	r3, [r2, #48]	; 0x30
 80006c6:	4ba9      	ldr	r3, [pc, #676]	; (800096c <MX_GPIO_Init+0x2e8>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	f003 0302 	and.w	r3, r3, #2
 80006ce:	61fb      	str	r3, [r7, #28]
 80006d0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	61bb      	str	r3, [r7, #24]
 80006d6:	4ba5      	ldr	r3, [pc, #660]	; (800096c <MX_GPIO_Init+0x2e8>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	4aa4      	ldr	r2, [pc, #656]	; (800096c <MX_GPIO_Init+0x2e8>)
 80006dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006e0:	6313      	str	r3, [r2, #48]	; 0x30
 80006e2:	4ba2      	ldr	r3, [pc, #648]	; (800096c <MX_GPIO_Init+0x2e8>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006ea:	61bb      	str	r3, [r7, #24]
 80006ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	617b      	str	r3, [r7, #20]
 80006f2:	4b9e      	ldr	r3, [pc, #632]	; (800096c <MX_GPIO_Init+0x2e8>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	4a9d      	ldr	r2, [pc, #628]	; (800096c <MX_GPIO_Init+0x2e8>)
 80006f8:	f043 0308 	orr.w	r3, r3, #8
 80006fc:	6313      	str	r3, [r2, #48]	; 0x30
 80006fe:	4b9b      	ldr	r3, [pc, #620]	; (800096c <MX_GPIO_Init+0x2e8>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	f003 0308 	and.w	r3, r3, #8
 8000706:	617b      	str	r3, [r7, #20]
 8000708:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	613b      	str	r3, [r7, #16]
 800070e:	4b97      	ldr	r3, [pc, #604]	; (800096c <MX_GPIO_Init+0x2e8>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	4a96      	ldr	r2, [pc, #600]	; (800096c <MX_GPIO_Init+0x2e8>)
 8000714:	f043 0304 	orr.w	r3, r3, #4
 8000718:	6313      	str	r3, [r2, #48]	; 0x30
 800071a:	4b94      	ldr	r3, [pc, #592]	; (800096c <MX_GPIO_Init+0x2e8>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	f003 0304 	and.w	r3, r3, #4
 8000722:	613b      	str	r3, [r7, #16]
 8000724:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	60fb      	str	r3, [r7, #12]
 800072a:	4b90      	ldr	r3, [pc, #576]	; (800096c <MX_GPIO_Init+0x2e8>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a8f      	ldr	r2, [pc, #572]	; (800096c <MX_GPIO_Init+0x2e8>)
 8000730:	f043 0301 	orr.w	r3, r3, #1
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
 8000736:	4b8d      	ldr	r3, [pc, #564]	; (800096c <MX_GPIO_Init+0x2e8>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	f003 0301 	and.w	r3, r3, #1
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	60bb      	str	r3, [r7, #8]
 8000746:	4b89      	ldr	r3, [pc, #548]	; (800096c <MX_GPIO_Init+0x2e8>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a88      	ldr	r2, [pc, #544]	; (800096c <MX_GPIO_Init+0x2e8>)
 800074c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b86      	ldr	r3, [pc, #536]	; (800096c <MX_GPIO_Init+0x2e8>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800075a:	60bb      	str	r3, [r7, #8]
 800075c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	607b      	str	r3, [r7, #4]
 8000762:	4b82      	ldr	r3, [pc, #520]	; (800096c <MX_GPIO_Init+0x2e8>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a81      	ldr	r2, [pc, #516]	; (800096c <MX_GPIO_Init+0x2e8>)
 8000768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b7f      	ldr	r3, [pc, #508]	; (800096c <MX_GPIO_Init+0x2e8>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	603b      	str	r3, [r7, #0]
 800077e:	4b7b      	ldr	r3, [pc, #492]	; (800096c <MX_GPIO_Init+0x2e8>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a7a      	ldr	r2, [pc, #488]	; (800096c <MX_GPIO_Init+0x2e8>)
 8000784:	f043 0320 	orr.w	r3, r3, #32
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b78      	ldr	r3, [pc, #480]	; (800096c <MX_GPIO_Init+0x2e8>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0320 	and.w	r3, r3, #32
 8000792:	603b      	str	r3, [r7, #0]
 8000794:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, IST_RESET_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000796:	2200      	movs	r2, #0
 8000798:	f640 0104 	movw	r1, #2052	; 0x804
 800079c:	4874      	ldr	r0, [pc, #464]	; (8000970 <MX_GPIO_Init+0x2ec>)
 800079e:	f001 ffd3 	bl	8002748 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, POWER1_CTRL_Pin|POWER2_CTRL_Pin|POWER3_CTRL_Pin|POWER4_CTRL_Pin, GPIO_PIN_RESET);
 80007a2:	2200      	movs	r2, #0
 80007a4:	213c      	movs	r1, #60	; 0x3c
 80007a6:	4873      	ldr	r0, [pc, #460]	; (8000974 <MX_GPIO_Init+0x2f0>)
 80007a8:	f001 ffce 	bl	8002748 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED_A_Pin|LED_B_Pin|LED_C_Pin|LED_D_Pin
 80007ac:	2200      	movs	r2, #0
 80007ae:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 80007b2:	4871      	ldr	r0, [pc, #452]	; (8000978 <MX_GPIO_Init+0x2f4>)
 80007b4:	f001 ffc8 	bl	8002748 <HAL_GPIO_WritePin>
                          |LED_E_Pin|LED_F_Pin|LED_G_Pin|LED_H_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SPI5_NSS_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 80007b8:	2200      	movs	r2, #0
 80007ba:	f244 0140 	movw	r1, #16448	; 0x4040
 80007be:	486f      	ldr	r0, [pc, #444]	; (800097c <MX_GPIO_Init+0x2f8>)
 80007c0:	f001 ffc2 	bl	8002748 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IO_PROBE_GPIO_Port, IO_PROBE_Pin, GPIO_PIN_RESET);
 80007c4:	2200      	movs	r2, #0
 80007c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007ca:	486d      	ldr	r0, [pc, #436]	; (8000980 <MX_GPIO_Init+0x2fc>)
 80007cc:	f001 ffbc 	bl	8002748 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE1 PE0 PE4
                           PE5 PE6 PE13 PE8
                           PE9 PE7 PE10 PE12
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_4
 80007d0:	f24b 73fb 	movw	r3, #47099	; 0xb7fb
 80007d4:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_13|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007d6:	2303      	movs	r3, #3
 80007d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007e2:	4619      	mov	r1, r3
 80007e4:	4862      	ldr	r0, [pc, #392]	; (8000970 <MX_GPIO_Init+0x2ec>)
 80007e6:	f001 fe03 	bl	80023f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = IST_RESET_Pin|LED_RED_Pin;
 80007ea:	f640 0304 	movw	r3, #2052	; 0x804
 80007ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f0:	2301      	movs	r3, #1
 80007f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f4:	2300      	movs	r3, #0
 80007f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f8:	2300      	movs	r3, #0
 80007fa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000800:	4619      	mov	r1, r3
 8000802:	485b      	ldr	r0, [pc, #364]	; (8000970 <MX_GPIO_Init+0x2ec>)
 8000804:	f001 fdf4 	bl	80023f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB4 PB3 PB9
                           PB7 PB6 PB12 PB1
                           PB0 PB10 PB11 PB14
                           PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_9
 8000808:	f64d 73db 	movw	r3, #57307	; 0xdfdb
 800080c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_12|GPIO_PIN_1
                          |GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800080e:	2303      	movs	r3, #3
 8000810:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000816:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800081a:	4619      	mov	r1, r3
 800081c:	4859      	ldr	r0, [pc, #356]	; (8000984 <MX_GPIO_Init+0x300>)
 800081e:	f001 fde7 	bl	80023f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG14 PG13 PG15 PG12
                           PG11 PG10 PG9 PG0 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_12
 8000822:	f64f 6301 	movw	r3, #65025	; 0xfe01
 8000826:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000828:	2303      	movs	r3, #3
 800082a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082c:	2300      	movs	r3, #0
 800082e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000830:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000834:	4619      	mov	r1, r3
 8000836:	4850      	ldr	r0, [pc, #320]	; (8000978 <MX_GPIO_Init+0x2f4>)
 8000838:	f001 fdda 	bl	80023f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD7 PD5 PD4 PD3
                           PD2 PD15 PD14 PD13
                           PD11 PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3
 800083c:	f64e 43bc 	movw	r3, #60604	; 0xecbc
 8000840:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_2|GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13
                          |GPIO_PIN_11|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000842:	2303      	movs	r3, #3
 8000844:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800084a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800084e:	4619      	mov	r1, r3
 8000850:	484b      	ldr	r0, [pc, #300]	; (8000980 <MX_GPIO_Init+0x2fc>)
 8000852:	f001 fdcd 	bl	80023f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC12 PC11 PC10 PC13
                           PC14 PC15 PC9 PC8
                           PC7 PC6 PC0 PC1
                           PC2 PC3 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_13
 8000856:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800085a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800085c:	2303      	movs	r3, #3
 800085e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000864:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000868:	4619      	mov	r1, r3
 800086a:	4847      	ldr	r0, [pc, #284]	; (8000988 <MX_GPIO_Init+0x304>)
 800086c:	f001 fdc0 	bl	80023f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA15 PA10 PA9 PA4
                           PA6 PA5 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_4
 8000870:	f248 63f0 	movw	r3, #34544	; 0x86f0
 8000874:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000876:	2303      	movs	r3, #3
 8000878:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000882:	4619      	mov	r1, r3
 8000884:	4841      	ldr	r0, [pc, #260]	; (800098c <MX_GPIO_Init+0x308>)
 8000886:	f001 fdb3 	bl	80023f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SYS_CFG_Pin;
 800088a:	2340      	movs	r3, #64	; 0x40
 800088c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800088e:	2300      	movs	r3, #0
 8000890:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SYS_CFG_GPIO_Port, &GPIO_InitStruct);
 8000896:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800089a:	4619      	mov	r1, r3
 800089c:	4838      	ldr	r0, [pc, #224]	; (8000980 <MX_GPIO_Init+0x2fc>)
 800089e:	f001 fda7 	bl	80023f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = PIN_Y_Pin|PIN_X_Pin|PIN_V_Pin|PIN_Z_Pin;
 80008a2:	23e4      	movs	r3, #228	; 0xe4
 80008a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a6:	2300      	movs	r3, #0
 80008a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80008ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008b2:	4619      	mov	r1, r3
 80008b4:	4836      	ldr	r0, [pc, #216]	; (8000990 <MX_GPIO_Init+0x30c>)
 80008b6:	f001 fd9b 	bl	80023f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI3 PI8 PI9 PI4
                           PI1 PI10 PI11 PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_4
 80008ba:	f640 731b 	movw	r3, #3867	; 0xf1b
 80008be:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008c0:	2303      	movs	r3, #3
 80008c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80008c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008cc:	4619      	mov	r1, r3
 80008ce:	4830      	ldr	r0, [pc, #192]	; (8000990 <MX_GPIO_Init+0x30c>)
 80008d0:	f001 fd8e 	bl	80023f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH15 PH13 PH14 PH12
                           PH11 PH10 PH8 PH9
                           PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_12
 80008d4:	f64f 7380 	movw	r3, #65408	; 0xff80
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008da:	2303      	movs	r3, #3
 80008dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80008e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008e6:	4619      	mov	r1, r3
 80008e8:	4822      	ldr	r0, [pc, #136]	; (8000974 <MX_GPIO_Init+0x2f0>)
 80008ea:	f001 fd81 	bl	80023f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF2 PF1 PF3
                           PF4 PF5 PF13 PF12
                           PF15 PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_3
 80008ee:	f64b 033f 	movw	r3, #47167	; 0xb83f
 80008f2:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_13|GPIO_PIN_12
                          |GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008f4:	2303      	movs	r3, #3
 80008f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80008fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000900:	4619      	mov	r1, r3
 8000902:	481e      	ldr	r0, [pc, #120]	; (800097c <MX_GPIO_Init+0x2f8>)
 8000904:	f001 fd74 	bl	80023f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = POWER1_CTRL_Pin|POWER2_CTRL_Pin|POWER3_CTRL_Pin|POWER4_CTRL_Pin;
 8000908:	233c      	movs	r3, #60	; 0x3c
 800090a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090c:	2301      	movs	r3, #1
 800090e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000914:	2300      	movs	r3, #0
 8000916:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000918:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800091c:	4619      	mov	r1, r3
 800091e:	4815      	ldr	r0, [pc, #84]	; (8000974 <MX_GPIO_Init+0x2f0>)
 8000920:	f001 fd66 	bl	80023f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LED_A_Pin|LED_B_Pin|LED_C_Pin|LED_D_Pin
 8000924:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 8000928:	627b      	str	r3, [r7, #36]	; 0x24
                          |LED_E_Pin|LED_F_Pin|LED_G_Pin|LED_H_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092a:	2301      	movs	r3, #1
 800092c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000932:	2300      	movs	r3, #0
 8000934:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000936:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800093a:	4619      	mov	r1, r3
 800093c:	480e      	ldr	r0, [pc, #56]	; (8000978 <MX_GPIO_Init+0x2f4>)
 800093e:	f001 fd57 	bl	80023f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = SPI5_NSS_Pin|LED_GREEN_Pin;
 8000942:	f244 0340 	movw	r3, #16448	; 0x4040
 8000946:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000948:	2301      	movs	r3, #1
 800094a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000950:	2300      	movs	r3, #0
 8000952:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000958:	4619      	mov	r1, r3
 800095a:	4808      	ldr	r0, [pc, #32]	; (800097c <MX_GPIO_Init+0x2f8>)
 800095c:	f001 fd48 	bl	80023f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 8000960:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000966:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800096a:	e013      	b.n	8000994 <MX_GPIO_Init+0x310>
 800096c:	40023800 	.word	0x40023800
 8000970:	40021000 	.word	0x40021000
 8000974:	40021c00 	.word	0x40021c00
 8000978:	40021800 	.word	0x40021800
 800097c:	40021400 	.word	0x40021400
 8000980:	40020c00 	.word	0x40020c00
 8000984:	40020400 	.word	0x40020400
 8000988:	40020800 	.word	0x40020800
 800098c:	40020000 	.word	0x40020000
 8000990:	40022000 	.word	0x40022000
 8000994:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000996:	2301      	movs	r3, #1
 8000998:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 800099a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800099e:	4619      	mov	r1, r3
 80009a0:	4827      	ldr	r0, [pc, #156]	; (8000a40 <MX_GPIO_Init+0x3bc>)
 80009a2:	f001 fd25 	bl	80023f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_Pin;
 80009a6:	2304      	movs	r3, #4
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009aa:	2300      	movs	r3, #0
 80009ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 80009b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b6:	4619      	mov	r1, r3
 80009b8:	4822      	ldr	r0, [pc, #136]	; (8000a44 <MX_GPIO_Init+0x3c0>)
 80009ba:	f001 fd19 	bl	80023f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = PIN_YA1_Pin|PIN_ZA0_Pin|PIN_XA2_Pin|PIN_W_Pin;
 80009be:	230f      	movs	r3, #15
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c2:	2300      	movs	r3, #0
 80009c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ce:	4619      	mov	r1, r3
 80009d0:	481d      	ldr	r0, [pc, #116]	; (8000a48 <MX_GPIO_Init+0x3c4>)
 80009d2:	f001 fd0d 	bl	80023f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IO_PROBE_Pin;
 80009d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009dc:	2301      	movs	r3, #1
 80009de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e4:	2300      	movs	r3, #0
 80009e6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(IO_PROBE_GPIO_Port, &GPIO_InitStruct);
 80009e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ec:	4619      	mov	r1, r3
 80009ee:	4817      	ldr	r0, [pc, #92]	; (8000a4c <MX_GPIO_Init+0x3c8>)
 80009f0:	f001 fcfe 	bl	80023f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80009f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fa:	2302      	movs	r3, #2
 80009fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a02:	2303      	movs	r3, #3
 8000a04:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000a06:	2309      	movs	r3, #9
 8000a08:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a0e:	4619      	mov	r1, r3
 8000a10:	480c      	ldr	r0, [pc, #48]	; (8000a44 <MX_GPIO_Init+0x3c0>)
 8000a12:	f001 fced 	bl	80023f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8000a16:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a20:	2301      	movs	r3, #1
 8000a22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a24:	2303      	movs	r3, #3
 8000a26:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a28:	2307      	movs	r3, #7
 8000a2a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a30:	4619      	mov	r1, r3
 8000a32:	4806      	ldr	r0, [pc, #24]	; (8000a4c <MX_GPIO_Init+0x3c8>)
 8000a34:	f001 fcdc 	bl	80023f0 <HAL_GPIO_Init>

}
 8000a38:	bf00      	nop
 8000a3a:	3738      	adds	r7, #56	; 0x38
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	40021400 	.word	0x40021400
 8000a44:	40020400 	.word	0x40020400
 8000a48:	40020000 	.word	0x40020000
 8000a4c:	40020c00 	.word	0x40020c00

08000a50 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick.
   */
  HAL_Init();
 8000a54:	f000 fcec 	bl	8001430 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a58:	f000 f818 	bl	8000a8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a5c:	f7ff fe12 	bl	8000684 <MX_GPIO_Init>
  MX_SPI5_Init();
 8000a60:	f000 f8a0 	bl	8000ba4 <MX_SPI5_Init>
  MX_CAN1_Init();
 8000a64:	f7ff fd4a 	bl	80004fc <MX_CAN1_Init>
  MX_TIM1_Init();
 8000a68:	f000 fa1c 	bl	8000ea4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000a6c:	f000 faaa 	bl	8000fc4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a70:	f000 faf4 	bl	800105c <MX_TIM3_Init>
  MX_TIM12_Init();
 8000a74:	f000 fb4c 	bl	8001110 <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */
  hw_init();
 8000a78:	f00a f8ae 	bl	800abd8 <hw_init>
  init_task();
 8000a7c:	f00a f8b2 	bl	800abe4 <init_task>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000a80:	f7ff fddc 	bl	800063c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000a84:	f008 f860 	bl	8008b48 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 8000a88:	e7fe      	b.n	8000a88 <main+0x38>
	...

08000a8c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b094      	sub	sp, #80	; 0x50
 8000a90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a92:	f107 0320 	add.w	r3, r7, #32
 8000a96:	2230      	movs	r2, #48	; 0x30
 8000a98:	2100      	movs	r1, #0
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f00b ffbb 	bl	800ca16 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aa0:	f107 030c 	add.w	r3, r7, #12
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	60da      	str	r2, [r3, #12]
 8000aae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	60bb      	str	r3, [r7, #8]
 8000ab4:	4b28      	ldr	r3, [pc, #160]	; (8000b58 <SystemClock_Config+0xcc>)
 8000ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab8:	4a27      	ldr	r2, [pc, #156]	; (8000b58 <SystemClock_Config+0xcc>)
 8000aba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000abe:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac0:	4b25      	ldr	r3, [pc, #148]	; (8000b58 <SystemClock_Config+0xcc>)
 8000ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ac8:	60bb      	str	r3, [r7, #8]
 8000aca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000acc:	2300      	movs	r3, #0
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	4b22      	ldr	r3, [pc, #136]	; (8000b5c <SystemClock_Config+0xd0>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a21      	ldr	r2, [pc, #132]	; (8000b5c <SystemClock_Config+0xd0>)
 8000ad6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ada:	6013      	str	r3, [r2, #0]
 8000adc:	4b1f      	ldr	r3, [pc, #124]	; (8000b5c <SystemClock_Config+0xd0>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ae4:	607b      	str	r3, [r7, #4]
 8000ae6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000aec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000af2:	2302      	movs	r3, #2
 8000af4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000af6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000afa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8000afc:	2306      	movs	r3, #6
 8000afe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000b00:	23a8      	movs	r3, #168	; 0xa8
 8000b02:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b04:	2302      	movs	r3, #2
 8000b06:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b08:	2307      	movs	r3, #7
 8000b0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000b0c:	f107 0320 	add.w	r3, r7, #32
 8000b10:	4618      	mov	r0, r3
 8000b12:	f003 f89d 	bl	8003c50 <HAL_RCC_OscConfig>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <SystemClock_Config+0x94>
    Error_Handler();
 8000b1c:	f000 f832 	bl	8000b84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8000b20:	230f      	movs	r3, #15
 8000b22:	60fb      	str	r3, [r7, #12]
                                RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b24:	2302      	movs	r3, #2
 8000b26:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b2c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b30:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b36:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8000b38:	f107 030c 	add.w	r3, r7, #12
 8000b3c:	2105      	movs	r1, #5
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f003 fafe 	bl	8004140 <HAL_RCC_ClockConfig>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <SystemClock_Config+0xc2>
    Error_Handler();
 8000b4a:	f000 f81b 	bl	8000b84 <Error_Handler>
  }
}
 8000b4e:	bf00      	nop
 8000b50:	3750      	adds	r7, #80	; 0x50
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40023800 	.word	0x40023800
 8000b5c:	40007000 	.word	0x40007000

08000b60 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a04      	ldr	r2, [pc, #16]	; (8000b80 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d101      	bne.n	8000b76 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b72:	f000 fc7f 	bl	8001474 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40000c00 	.word	0x40000c00

08000b84 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b88:	b672      	cpsid	i
}
 8000b8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
    HAL_GPIO_TogglePin(LED_A_GPIO_Port, LED_A_Pin);
 8000b8c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b90:	4803      	ldr	r0, [pc, #12]	; (8000ba0 <Error_Handler+0x1c>)
 8000b92:	f001 fdf2 	bl	800277a <HAL_GPIO_TogglePin>
    HAL_Delay(100);
 8000b96:	2064      	movs	r0, #100	; 0x64
 8000b98:	f000 fc8c 	bl	80014b4 <HAL_Delay>
    HAL_GPIO_TogglePin(LED_A_GPIO_Port, LED_A_Pin);
 8000b9c:	e7f6      	b.n	8000b8c <Error_Handler+0x8>
 8000b9e:	bf00      	nop
 8000ba0:	40021800 	.word	0x40021800

08000ba4 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8000ba8:	4b17      	ldr	r3, [pc, #92]	; (8000c08 <MX_SPI5_Init+0x64>)
 8000baa:	4a18      	ldr	r2, [pc, #96]	; (8000c0c <MX_SPI5_Init+0x68>)
 8000bac:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000bae:	4b16      	ldr	r3, [pc, #88]	; (8000c08 <MX_SPI5_Init+0x64>)
 8000bb0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000bb4:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000bb6:	4b14      	ldr	r3, [pc, #80]	; (8000c08 <MX_SPI5_Init+0x64>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bbc:	4b12      	ldr	r3, [pc, #72]	; (8000c08 <MX_SPI5_Init+0x64>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bc2:	4b11      	ldr	r3, [pc, #68]	; (8000c08 <MX_SPI5_Init+0x64>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bc8:	4b0f      	ldr	r3, [pc, #60]	; (8000c08 <MX_SPI5_Init+0x64>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000bce:	4b0e      	ldr	r3, [pc, #56]	; (8000c08 <MX_SPI5_Init+0x64>)
 8000bd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bd4:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000bd6:	4b0c      	ldr	r3, [pc, #48]	; (8000c08 <MX_SPI5_Init+0x64>)
 8000bd8:	2230      	movs	r2, #48	; 0x30
 8000bda:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bdc:	4b0a      	ldr	r3, [pc, #40]	; (8000c08 <MX_SPI5_Init+0x64>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000be2:	4b09      	ldr	r3, [pc, #36]	; (8000c08 <MX_SPI5_Init+0x64>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000be8:	4b07      	ldr	r3, [pc, #28]	; (8000c08 <MX_SPI5_Init+0x64>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000bee:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <MX_SPI5_Init+0x64>)
 8000bf0:	220a      	movs	r2, #10
 8000bf2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000bf4:	4804      	ldr	r0, [pc, #16]	; (8000c08 <MX_SPI5_Init+0x64>)
 8000bf6:	f003 fca1 	bl	800453c <HAL_SPI_Init>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000c00:	f7ff ffc0 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000c04:	bf00      	nop
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	200001c8 	.word	0x200001c8
 8000c0c:	40015000 	.word	0x40015000

08000c10 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b08a      	sub	sp, #40	; 0x28
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c18:	f107 0314 	add.w	r3, r7, #20
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	605a      	str	r2, [r3, #4]
 8000c22:	609a      	str	r2, [r3, #8]
 8000c24:	60da      	str	r2, [r3, #12]
 8000c26:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a19      	ldr	r2, [pc, #100]	; (8000c94 <HAL_SPI_MspInit+0x84>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d12c      	bne.n	8000c8c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	613b      	str	r3, [r7, #16]
 8000c36:	4b18      	ldr	r3, [pc, #96]	; (8000c98 <HAL_SPI_MspInit+0x88>)
 8000c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3a:	4a17      	ldr	r2, [pc, #92]	; (8000c98 <HAL_SPI_MspInit+0x88>)
 8000c3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000c40:	6453      	str	r3, [r2, #68]	; 0x44
 8000c42:	4b15      	ldr	r3, [pc, #84]	; (8000c98 <HAL_SPI_MspInit+0x88>)
 8000c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c4a:	613b      	str	r3, [r7, #16]
 8000c4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	4b11      	ldr	r3, [pc, #68]	; (8000c98 <HAL_SPI_MspInit+0x88>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	4a10      	ldr	r2, [pc, #64]	; (8000c98 <HAL_SPI_MspInit+0x88>)
 8000c58:	f043 0320 	orr.w	r3, r3, #32
 8000c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5e:	4b0e      	ldr	r3, [pc, #56]	; (8000c98 <HAL_SPI_MspInit+0x88>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	f003 0320 	and.w	r3, r3, #32
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF9     ------> SPI5_MOSI
    PF8     ------> SPI5_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_8;
 8000c6a:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000c6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c70:	2302      	movs	r3, #2
 8000c72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c78:	2303      	movs	r3, #3
 8000c7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000c7c:	2305      	movs	r3, #5
 8000c7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c80:	f107 0314 	add.w	r3, r7, #20
 8000c84:	4619      	mov	r1, r3
 8000c86:	4805      	ldr	r0, [pc, #20]	; (8000c9c <HAL_SPI_MspInit+0x8c>)
 8000c88:	f001 fbb2 	bl	80023f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8000c8c:	bf00      	nop
 8000c8e:	3728      	adds	r7, #40	; 0x28
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	40015000 	.word	0x40015000
 8000c98:	40023800 	.word	0x40023800
 8000c9c:	40021400 	.word	0x40021400

08000ca0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	607b      	str	r3, [r7, #4]
 8000caa:	4b12      	ldr	r3, [pc, #72]	; (8000cf4 <HAL_MspInit+0x54>)
 8000cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cae:	4a11      	ldr	r2, [pc, #68]	; (8000cf4 <HAL_MspInit+0x54>)
 8000cb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000cb6:	4b0f      	ldr	r3, [pc, #60]	; (8000cf4 <HAL_MspInit+0x54>)
 8000cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cbe:	607b      	str	r3, [r7, #4]
 8000cc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	603b      	str	r3, [r7, #0]
 8000cc6:	4b0b      	ldr	r3, [pc, #44]	; (8000cf4 <HAL_MspInit+0x54>)
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cca:	4a0a      	ldr	r2, [pc, #40]	; (8000cf4 <HAL_MspInit+0x54>)
 8000ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cd2:	4b08      	ldr	r3, [pc, #32]	; (8000cf4 <HAL_MspInit+0x54>)
 8000cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cda:	603b      	str	r3, [r7, #0]
 8000cdc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	210f      	movs	r1, #15
 8000ce2:	f06f 0001 	mvn.w	r0, #1
 8000ce6:	f001 fb59 	bl	800239c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cea:	bf00      	nop
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40023800 	.word	0x40023800

08000cf8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b08e      	sub	sp, #56	; 0x38
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000d00:	2300      	movs	r3, #0
 8000d02:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000d04:	2300      	movs	r3, #0
 8000d06:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000d08:	2300      	movs	r3, #0
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	4b33      	ldr	r3, [pc, #204]	; (8000ddc <HAL_InitTick+0xe4>)
 8000d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d10:	4a32      	ldr	r2, [pc, #200]	; (8000ddc <HAL_InitTick+0xe4>)
 8000d12:	f043 0308 	orr.w	r3, r3, #8
 8000d16:	6413      	str	r3, [r2, #64]	; 0x40
 8000d18:	4b30      	ldr	r3, [pc, #192]	; (8000ddc <HAL_InitTick+0xe4>)
 8000d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1c:	f003 0308 	and.w	r3, r3, #8
 8000d20:	60fb      	str	r3, [r7, #12]
 8000d22:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d24:	f107 0210 	add.w	r2, r7, #16
 8000d28:	f107 0314 	add.w	r3, r7, #20
 8000d2c:	4611      	mov	r1, r2
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f003 fbd2 	bl	80044d8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000d34:	6a3b      	ldr	r3, [r7, #32]
 8000d36:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d103      	bne.n	8000d46 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d3e:	f003 fbb7 	bl	80044b0 <HAL_RCC_GetPCLK1Freq>
 8000d42:	6378      	str	r0, [r7, #52]	; 0x34
 8000d44:	e004      	b.n	8000d50 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000d46:	f003 fbb3 	bl	80044b0 <HAL_RCC_GetPCLK1Freq>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	005b      	lsls	r3, r3, #1
 8000d4e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d52:	4a23      	ldr	r2, [pc, #140]	; (8000de0 <HAL_InitTick+0xe8>)
 8000d54:	fba2 2303 	umull	r2, r3, r2, r3
 8000d58:	0c9b      	lsrs	r3, r3, #18
 8000d5a:	3b01      	subs	r3, #1
 8000d5c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000d5e:	4b21      	ldr	r3, [pc, #132]	; (8000de4 <HAL_InitTick+0xec>)
 8000d60:	4a21      	ldr	r2, [pc, #132]	; (8000de8 <HAL_InitTick+0xf0>)
 8000d62:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000d64:	4b1f      	ldr	r3, [pc, #124]	; (8000de4 <HAL_InitTick+0xec>)
 8000d66:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d6a:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000d6c:	4a1d      	ldr	r2, [pc, #116]	; (8000de4 <HAL_InitTick+0xec>)
 8000d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d70:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000d72:	4b1c      	ldr	r3, [pc, #112]	; (8000de4 <HAL_InitTick+0xec>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d78:	4b1a      	ldr	r3, [pc, #104]	; (8000de4 <HAL_InitTick+0xec>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d7e:	4b19      	ldr	r3, [pc, #100]	; (8000de4 <HAL_InitTick+0xec>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8000d84:	4817      	ldr	r0, [pc, #92]	; (8000de4 <HAL_InitTick+0xec>)
 8000d86:	f003 fc62 	bl	800464e <HAL_TIM_Base_Init>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000d90:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d11b      	bne.n	8000dd0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8000d98:	4812      	ldr	r0, [pc, #72]	; (8000de4 <HAL_InitTick+0xec>)
 8000d9a:	f003 fca7 	bl	80046ec <HAL_TIM_Base_Start_IT>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000da4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d111      	bne.n	8000dd0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000dac:	2032      	movs	r0, #50	; 0x32
 8000dae:	f001 fb11 	bl	80023d4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2b0f      	cmp	r3, #15
 8000db6:	d808      	bhi.n	8000dca <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8000db8:	2200      	movs	r2, #0
 8000dba:	6879      	ldr	r1, [r7, #4]
 8000dbc:	2032      	movs	r0, #50	; 0x32
 8000dbe:	f001 faed 	bl	800239c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dc2:	4a0a      	ldr	r2, [pc, #40]	; (8000dec <HAL_InitTick+0xf4>)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6013      	str	r3, [r2, #0]
 8000dc8:	e002      	b.n	8000dd0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000dd0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3738      	adds	r7, #56	; 0x38
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40023800 	.word	0x40023800
 8000de0:	431bde83 	.word	0x431bde83
 8000de4:	20000220 	.word	0x20000220
 8000de8:	40000c00 	.word	0x40000c00
 8000dec:	20000004 	.word	0x20000004

08000df0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000df4:	e7fe      	b.n	8000df4 <NMI_Handler+0x4>

08000df6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dfa:	e7fe      	b.n	8000dfa <HardFault_Handler+0x4>

08000dfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e00:	e7fe      	b.n	8000e00 <MemManage_Handler+0x4>

08000e02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e06:	e7fe      	b.n	8000e06 <BusFault_Handler+0x4>

08000e08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e0c:	e7fe      	b.n	8000e0c <UsageFault_Handler+0x4>

08000e0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr

08000e1c <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000e20:	4802      	ldr	r0, [pc, #8]	; (8000e2c <CAN1_TX_IRQHandler+0x10>)
 8000e22:	f000 ffd8 	bl	8001dd6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	2000019c 	.word	0x2000019c

08000e30 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000e34:	4802      	ldr	r0, [pc, #8]	; (8000e40 <CAN1_RX0_IRQHandler+0x10>)
 8000e36:	f000 ffce 	bl	8001dd6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	2000019c 	.word	0x2000019c

08000e44 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e48:	4802      	ldr	r0, [pc, #8]	; (8000e54 <TIM2_IRQHandler+0x10>)
 8000e4a:	f003 fd0e 	bl	800486a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	200002b0 	.word	0x200002b0

08000e58 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000e5c:	4802      	ldr	r0, [pc, #8]	; (8000e68 <TIM5_IRQHandler+0x10>)
 8000e5e:	f003 fd04 	bl	800486a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	20000220 	.word	0x20000220

08000e6c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000e70:	4802      	ldr	r0, [pc, #8]	; (8000e7c <OTG_FS_IRQHandler+0x10>)
 8000e72:	f001 fde0 	bl	8002a36 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	200055c0 	.word	0x200055c0

08000e80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e84:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <SystemInit+0x20>)
 8000e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e8a:	4a05      	ldr	r2, [pc, #20]	; (8000ea0 <SystemInit+0x20>)
 8000e8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b092      	sub	sp, #72	; 0x48
 8000ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eaa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
 8000eb2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
 8000ec2:	611a      	str	r2, [r3, #16]
 8000ec4:	615a      	str	r2, [r3, #20]
 8000ec6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ec8:	1d3b      	adds	r3, r7, #4
 8000eca:	2220      	movs	r2, #32
 8000ecc:	2100      	movs	r1, #0
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f00b fda1 	bl	800ca16 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ed4:	4b39      	ldr	r3, [pc, #228]	; (8000fbc <MX_TIM1_Init+0x118>)
 8000ed6:	4a3a      	ldr	r2, [pc, #232]	; (8000fc0 <MX_TIM1_Init+0x11c>)
 8000ed8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16;
 8000eda:	4b38      	ldr	r3, [pc, #224]	; (8000fbc <MX_TIM1_Init+0x118>)
 8000edc:	2210      	movs	r2, #16
 8000ede:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ee0:	4b36      	ldr	r3, [pc, #216]	; (8000fbc <MX_TIM1_Init+0x118>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 8000ee6:	4b35      	ldr	r3, [pc, #212]	; (8000fbc <MX_TIM1_Init+0x118>)
 8000ee8:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000eec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eee:	4b33      	ldr	r3, [pc, #204]	; (8000fbc <MX_TIM1_Init+0x118>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ef4:	4b31      	ldr	r3, [pc, #196]	; (8000fbc <MX_TIM1_Init+0x118>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000efa:	4b30      	ldr	r3, [pc, #192]	; (8000fbc <MX_TIM1_Init+0x118>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f00:	482e      	ldr	r0, [pc, #184]	; (8000fbc <MX_TIM1_Init+0x118>)
 8000f02:	f003 fc63 	bl	80047cc <HAL_TIM_PWM_Init>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000f0c:	f7ff fe3a 	bl	8000b84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f10:	2300      	movs	r3, #0
 8000f12:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f14:	2300      	movs	r3, #0
 8000f16:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f18:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4827      	ldr	r0, [pc, #156]	; (8000fbc <MX_TIM1_Init+0x118>)
 8000f20:	f004 fa3c 	bl	800539c <HAL_TIMEx_MasterConfigSynchronization>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000f2a:	f7ff fe2b 	bl	8000b84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f2e:	2360      	movs	r3, #96	; 0x60
 8000f30:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1000;
 8000f32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f36:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f40:	2300      	movs	r3, #0
 8000f42:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f44:	2300      	movs	r3, #0
 8000f46:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f50:	2200      	movs	r2, #0
 8000f52:	4619      	mov	r1, r3
 8000f54:	4819      	ldr	r0, [pc, #100]	; (8000fbc <MX_TIM1_Init+0x118>)
 8000f56:	f003 fd79 	bl	8004a4c <HAL_TIM_PWM_ConfigChannel>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8000f60:	f7ff fe10 	bl	8000b84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f68:	220c      	movs	r2, #12
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4813      	ldr	r0, [pc, #76]	; (8000fbc <MX_TIM1_Init+0x118>)
 8000f6e:	f003 fd6d 	bl	8004a4c <HAL_TIM_PWM_ConfigChannel>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8000f78:	f7ff fe04 	bl	8000b84 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f80:	2300      	movs	r3, #0
 8000f82:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f84:	2300      	movs	r3, #0
 8000f86:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f94:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f96:	2300      	movs	r3, #0
 8000f98:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f9a:	1d3b      	adds	r3, r7, #4
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4807      	ldr	r0, [pc, #28]	; (8000fbc <MX_TIM1_Init+0x118>)
 8000fa0:	f004 fa78 	bl	8005494 <HAL_TIMEx_ConfigBreakDeadTime>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8000faa:	f7ff fdeb 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000fae:	4803      	ldr	r0, [pc, #12]	; (8000fbc <MX_TIM1_Init+0x118>)
 8000fb0:	f000 f968 	bl	8001284 <HAL_TIM_MspPostInit>

}
 8000fb4:	bf00      	nop
 8000fb6:	3748      	adds	r7, #72	; 0x48
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20000268 	.word	0x20000268
 8000fc0:	40010000 	.word	0x40010000

08000fc4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fca:	f107 0308 	add.w	r3, r7, #8
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	605a      	str	r2, [r3, #4]
 8000fd4:	609a      	str	r2, [r3, #8]
 8000fd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fd8:	463b      	mov	r3, r7
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fe0:	4b1d      	ldr	r3, [pc, #116]	; (8001058 <MX_TIM2_Init+0x94>)
 8000fe2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fe6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8000fe8:	4b1b      	ldr	r3, [pc, #108]	; (8001058 <MX_TIM2_Init+0x94>)
 8000fea:	2253      	movs	r2, #83	; 0x53
 8000fec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fee:	4b1a      	ldr	r3, [pc, #104]	; (8001058 <MX_TIM2_Init+0x94>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000ff4:	4b18      	ldr	r3, [pc, #96]	; (8001058 <MX_TIM2_Init+0x94>)
 8000ff6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ffa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ffc:	4b16      	ldr	r3, [pc, #88]	; (8001058 <MX_TIM2_Init+0x94>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001002:	4b15      	ldr	r3, [pc, #84]	; (8001058 <MX_TIM2_Init+0x94>)
 8001004:	2200      	movs	r2, #0
 8001006:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001008:	4813      	ldr	r0, [pc, #76]	; (8001058 <MX_TIM2_Init+0x94>)
 800100a:	f003 fb20 	bl	800464e <HAL_TIM_Base_Init>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001014:	f7ff fdb6 	bl	8000b84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001018:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800101c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800101e:	f107 0308 	add.w	r3, r7, #8
 8001022:	4619      	mov	r1, r3
 8001024:	480c      	ldr	r0, [pc, #48]	; (8001058 <MX_TIM2_Init+0x94>)
 8001026:	f003 fdd3 	bl	8004bd0 <HAL_TIM_ConfigClockSource>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001030:	f7ff fda8 	bl	8000b84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001034:	2300      	movs	r3, #0
 8001036:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001038:	2300      	movs	r3, #0
 800103a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800103c:	463b      	mov	r3, r7
 800103e:	4619      	mov	r1, r3
 8001040:	4805      	ldr	r0, [pc, #20]	; (8001058 <MX_TIM2_Init+0x94>)
 8001042:	f004 f9ab 	bl	800539c <HAL_TIMEx_MasterConfigSynchronization>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800104c:	f7ff fd9a 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001050:	bf00      	nop
 8001052:	3718      	adds	r7, #24
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	200002b0 	.word	0x200002b0

0800105c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b08a      	sub	sp, #40	; 0x28
 8001060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001062:	f107 0320 	add.w	r3, r7, #32
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800106c:	1d3b      	adds	r3, r7, #4
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
 8001072:	605a      	str	r2, [r3, #4]
 8001074:	609a      	str	r2, [r3, #8]
 8001076:	60da      	str	r2, [r3, #12]
 8001078:	611a      	str	r2, [r3, #16]
 800107a:	615a      	str	r2, [r3, #20]
 800107c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800107e:	4b22      	ldr	r3, [pc, #136]	; (8001108 <MX_TIM3_Init+0xac>)
 8001080:	4a22      	ldr	r2, [pc, #136]	; (800110c <MX_TIM3_Init+0xb0>)
 8001082:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8001084:	4b20      	ldr	r3, [pc, #128]	; (8001108 <MX_TIM3_Init+0xac>)
 8001086:	2253      	movs	r2, #83	; 0x53
 8001088:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800108a:	4b1f      	ldr	r3, [pc, #124]	; (8001108 <MX_TIM3_Init+0xac>)
 800108c:	2200      	movs	r2, #0
 800108e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000-1;
 8001090:	4b1d      	ldr	r3, [pc, #116]	; (8001108 <MX_TIM3_Init+0xac>)
 8001092:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001096:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001098:	4b1b      	ldr	r3, [pc, #108]	; (8001108 <MX_TIM3_Init+0xac>)
 800109a:	2200      	movs	r2, #0
 800109c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800109e:	4b1a      	ldr	r3, [pc, #104]	; (8001108 <MX_TIM3_Init+0xac>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80010a4:	4818      	ldr	r0, [pc, #96]	; (8001108 <MX_TIM3_Init+0xac>)
 80010a6:	f003 fb91 	bl	80047cc <HAL_TIM_PWM_Init>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80010b0:	f7ff fd68 	bl	8000b84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010b4:	2300      	movs	r3, #0
 80010b6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010b8:	2300      	movs	r3, #0
 80010ba:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010bc:	f107 0320 	add.w	r3, r7, #32
 80010c0:	4619      	mov	r1, r3
 80010c2:	4811      	ldr	r0, [pc, #68]	; (8001108 <MX_TIM3_Init+0xac>)
 80010c4:	f004 f96a 	bl	800539c <HAL_TIMEx_MasterConfigSynchronization>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80010ce:	f7ff fd59 	bl	8000b84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010d2:	2360      	movs	r3, #96	; 0x60
 80010d4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80010d6:	2300      	movs	r3, #0
 80010d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010de:	2300      	movs	r3, #0
 80010e0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010e2:	1d3b      	adds	r3, r7, #4
 80010e4:	2204      	movs	r2, #4
 80010e6:	4619      	mov	r1, r3
 80010e8:	4807      	ldr	r0, [pc, #28]	; (8001108 <MX_TIM3_Init+0xac>)
 80010ea:	f003 fcaf 	bl	8004a4c <HAL_TIM_PWM_ConfigChannel>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80010f4:	f7ff fd46 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80010f8:	4803      	ldr	r0, [pc, #12]	; (8001108 <MX_TIM3_Init+0xac>)
 80010fa:	f000 f8c3 	bl	8001284 <HAL_TIM_MspPostInit>

}
 80010fe:	bf00      	nop
 8001100:	3728      	adds	r7, #40	; 0x28
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	200002f8 	.word	0x200002f8
 800110c:	40000400 	.word	0x40000400

08001110 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b088      	sub	sp, #32
 8001114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001116:	1d3b      	adds	r3, r7, #4
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]
 8001122:	611a      	str	r2, [r3, #16]
 8001124:	615a      	str	r2, [r3, #20]
 8001126:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001128:	4b1a      	ldr	r3, [pc, #104]	; (8001194 <MX_TIM12_Init+0x84>)
 800112a:	4a1b      	ldr	r2, [pc, #108]	; (8001198 <MX_TIM12_Init+0x88>)
 800112c:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 83;
 800112e:	4b19      	ldr	r3, [pc, #100]	; (8001194 <MX_TIM12_Init+0x84>)
 8001130:	2253      	movs	r2, #83	; 0x53
 8001132:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001134:	4b17      	ldr	r3, [pc, #92]	; (8001194 <MX_TIM12_Init+0x84>)
 8001136:	2200      	movs	r2, #0
 8001138:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 20000-1;
 800113a:	4b16      	ldr	r3, [pc, #88]	; (8001194 <MX_TIM12_Init+0x84>)
 800113c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001140:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001142:	4b14      	ldr	r3, [pc, #80]	; (8001194 <MX_TIM12_Init+0x84>)
 8001144:	2200      	movs	r2, #0
 8001146:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001148:	4b12      	ldr	r3, [pc, #72]	; (8001194 <MX_TIM12_Init+0x84>)
 800114a:	2200      	movs	r2, #0
 800114c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800114e:	4811      	ldr	r0, [pc, #68]	; (8001194 <MX_TIM12_Init+0x84>)
 8001150:	f003 fb3c 	bl	80047cc <HAL_TIM_PWM_Init>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 800115a:	f7ff fd13 	bl	8000b84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800115e:	2360      	movs	r3, #96	; 0x60
 8001160:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001162:	2300      	movs	r3, #0
 8001164:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001166:	2300      	movs	r3, #0
 8001168:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800116a:	2300      	movs	r3, #0
 800116c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800116e:	1d3b      	adds	r3, r7, #4
 8001170:	2200      	movs	r2, #0
 8001172:	4619      	mov	r1, r3
 8001174:	4807      	ldr	r0, [pc, #28]	; (8001194 <MX_TIM12_Init+0x84>)
 8001176:	f003 fc69 	bl	8004a4c <HAL_TIM_PWM_ConfigChannel>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8001180:	f7ff fd00 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001184:	4803      	ldr	r0, [pc, #12]	; (8001194 <MX_TIM12_Init+0x84>)
 8001186:	f000 f87d 	bl	8001284 <HAL_TIM_MspPostInit>

}
 800118a:	bf00      	nop
 800118c:	3720      	adds	r7, #32
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	20000340 	.word	0x20000340
 8001198:	40001800 	.word	0x40001800

0800119c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800119c:	b480      	push	{r7}
 800119e:	b087      	sub	sp, #28
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a1f      	ldr	r2, [pc, #124]	; (8001228 <HAL_TIM_PWM_MspInit+0x8c>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d10e      	bne.n	80011cc <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	617b      	str	r3, [r7, #20]
 80011b2:	4b1e      	ldr	r3, [pc, #120]	; (800122c <HAL_TIM_PWM_MspInit+0x90>)
 80011b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b6:	4a1d      	ldr	r2, [pc, #116]	; (800122c <HAL_TIM_PWM_MspInit+0x90>)
 80011b8:	f043 0301 	orr.w	r3, r3, #1
 80011bc:	6453      	str	r3, [r2, #68]	; 0x44
 80011be:	4b1b      	ldr	r3, [pc, #108]	; (800122c <HAL_TIM_PWM_MspInit+0x90>)
 80011c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c2:	f003 0301 	and.w	r3, r3, #1
 80011c6:	617b      	str	r3, [r7, #20]
 80011c8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 80011ca:	e026      	b.n	800121a <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM3)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a17      	ldr	r2, [pc, #92]	; (8001230 <HAL_TIM_PWM_MspInit+0x94>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d10e      	bne.n	80011f4 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	613b      	str	r3, [r7, #16]
 80011da:	4b14      	ldr	r3, [pc, #80]	; (800122c <HAL_TIM_PWM_MspInit+0x90>)
 80011dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011de:	4a13      	ldr	r2, [pc, #76]	; (800122c <HAL_TIM_PWM_MspInit+0x90>)
 80011e0:	f043 0302 	orr.w	r3, r3, #2
 80011e4:	6413      	str	r3, [r2, #64]	; 0x40
 80011e6:	4b11      	ldr	r3, [pc, #68]	; (800122c <HAL_TIM_PWM_MspInit+0x90>)
 80011e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ea:	f003 0302 	and.w	r3, r3, #2
 80011ee:	613b      	str	r3, [r7, #16]
 80011f0:	693b      	ldr	r3, [r7, #16]
}
 80011f2:	e012      	b.n	800121a <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM12)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a0e      	ldr	r2, [pc, #56]	; (8001234 <HAL_TIM_PWM_MspInit+0x98>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d10d      	bne.n	800121a <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	60fb      	str	r3, [r7, #12]
 8001202:	4b0a      	ldr	r3, [pc, #40]	; (800122c <HAL_TIM_PWM_MspInit+0x90>)
 8001204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001206:	4a09      	ldr	r2, [pc, #36]	; (800122c <HAL_TIM_PWM_MspInit+0x90>)
 8001208:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800120c:	6413      	str	r3, [r2, #64]	; 0x40
 800120e:	4b07      	ldr	r3, [pc, #28]	; (800122c <HAL_TIM_PWM_MspInit+0x90>)
 8001210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	68fb      	ldr	r3, [r7, #12]
}
 800121a:	bf00      	nop
 800121c:	371c      	adds	r7, #28
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	40010000 	.word	0x40010000
 800122c:	40023800 	.word	0x40023800
 8001230:	40000400 	.word	0x40000400
 8001234:	40001800 	.word	0x40001800

08001238 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001248:	d115      	bne.n	8001276 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	60fb      	str	r3, [r7, #12]
 800124e:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <HAL_TIM_Base_MspInit+0x48>)
 8001250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001252:	4a0b      	ldr	r2, [pc, #44]	; (8001280 <HAL_TIM_Base_MspInit+0x48>)
 8001254:	f043 0301 	orr.w	r3, r3, #1
 8001258:	6413      	str	r3, [r2, #64]	; 0x40
 800125a:	4b09      	ldr	r3, [pc, #36]	; (8001280 <HAL_TIM_Base_MspInit+0x48>)
 800125c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001266:	2200      	movs	r2, #0
 8001268:	2105      	movs	r1, #5
 800126a:	201c      	movs	r0, #28
 800126c:	f001 f896 	bl	800239c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001270:	201c      	movs	r0, #28
 8001272:	f001 f8af 	bl	80023d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001276:	bf00      	nop
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40023800 	.word	0x40023800

08001284 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b08c      	sub	sp, #48	; 0x30
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128c:	f107 031c 	add.w	r3, r7, #28
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a46      	ldr	r2, [pc, #280]	; (80013bc <HAL_TIM_MspPostInit+0x138>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d13e      	bne.n	8001324 <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	61bb      	str	r3, [r7, #24]
 80012aa:	4b45      	ldr	r3, [pc, #276]	; (80013c0 <HAL_TIM_MspPostInit+0x13c>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	4a44      	ldr	r2, [pc, #272]	; (80013c0 <HAL_TIM_MspPostInit+0x13c>)
 80012b0:	f043 0301 	orr.w	r3, r3, #1
 80012b4:	6313      	str	r3, [r2, #48]	; 0x30
 80012b6:	4b42      	ldr	r3, [pc, #264]	; (80013c0 <HAL_TIM_MspPostInit+0x13c>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	61bb      	str	r3, [r7, #24]
 80012c0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	617b      	str	r3, [r7, #20]
 80012c6:	4b3e      	ldr	r3, [pc, #248]	; (80013c0 <HAL_TIM_MspPostInit+0x13c>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	4a3d      	ldr	r2, [pc, #244]	; (80013c0 <HAL_TIM_MspPostInit+0x13c>)
 80012cc:	f043 0310 	orr.w	r3, r3, #16
 80012d0:	6313      	str	r3, [r2, #48]	; 0x30
 80012d2:	4b3b      	ldr	r3, [pc, #236]	; (80013c0 <HAL_TIM_MspPostInit+0x13c>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	f003 0310 	and.w	r3, r3, #16
 80012da:	617b      	str	r3, [r7, #20]
 80012dc:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80012de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e4:	2302      	movs	r3, #2
 80012e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ec:	2300      	movs	r3, #0
 80012ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80012f0:	2301      	movs	r3, #1
 80012f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f4:	f107 031c 	add.w	r3, r7, #28
 80012f8:	4619      	mov	r1, r3
 80012fa:	4832      	ldr	r0, [pc, #200]	; (80013c4 <HAL_TIM_MspPostInit+0x140>)
 80012fc:	f001 f878 	bl	80023f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001300:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001304:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001306:	2302      	movs	r3, #2
 8001308:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130a:	2300      	movs	r3, #0
 800130c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130e:	2300      	movs	r3, #0
 8001310:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001312:	2301      	movs	r3, #1
 8001314:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001316:	f107 031c 	add.w	r3, r7, #28
 800131a:	4619      	mov	r1, r3
 800131c:	482a      	ldr	r0, [pc, #168]	; (80013c8 <HAL_TIM_MspPostInit+0x144>)
 800131e:	f001 f867 	bl	80023f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8001322:	e046      	b.n	80013b2 <HAL_TIM_MspPostInit+0x12e>
  else if(timHandle->Instance==TIM3)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a28      	ldr	r2, [pc, #160]	; (80013cc <HAL_TIM_MspPostInit+0x148>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d11e      	bne.n	800136c <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	613b      	str	r3, [r7, #16]
 8001332:	4b23      	ldr	r3, [pc, #140]	; (80013c0 <HAL_TIM_MspPostInit+0x13c>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	4a22      	ldr	r2, [pc, #136]	; (80013c0 <HAL_TIM_MspPostInit+0x13c>)
 8001338:	f043 0302 	orr.w	r3, r3, #2
 800133c:	6313      	str	r3, [r2, #48]	; 0x30
 800133e:	4b20      	ldr	r3, [pc, #128]	; (80013c0 <HAL_TIM_MspPostInit+0x13c>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	f003 0302 	and.w	r3, r3, #2
 8001346:	613b      	str	r3, [r7, #16]
 8001348:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800134a:	2320      	movs	r3, #32
 800134c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134e:	2302      	movs	r3, #2
 8001350:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001352:	2300      	movs	r3, #0
 8001354:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001356:	2300      	movs	r3, #0
 8001358:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800135a:	2302      	movs	r3, #2
 800135c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800135e:	f107 031c 	add.w	r3, r7, #28
 8001362:	4619      	mov	r1, r3
 8001364:	481a      	ldr	r0, [pc, #104]	; (80013d0 <HAL_TIM_MspPostInit+0x14c>)
 8001366:	f001 f843 	bl	80023f0 <HAL_GPIO_Init>
}
 800136a:	e022      	b.n	80013b2 <HAL_TIM_MspPostInit+0x12e>
  else if(timHandle->Instance==TIM12)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a18      	ldr	r2, [pc, #96]	; (80013d4 <HAL_TIM_MspPostInit+0x150>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d11d      	bne.n	80013b2 <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <HAL_TIM_MspPostInit+0x13c>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	4a10      	ldr	r2, [pc, #64]	; (80013c0 <HAL_TIM_MspPostInit+0x13c>)
 8001380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001384:	6313      	str	r3, [r2, #48]	; 0x30
 8001386:	4b0e      	ldr	r3, [pc, #56]	; (80013c0 <HAL_TIM_MspPostInit+0x13c>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001392:	2340      	movs	r3, #64	; 0x40
 8001394:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001396:	2302      	movs	r3, #2
 8001398:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139e:	2300      	movs	r3, #0
 80013a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80013a2:	2309      	movs	r3, #9
 80013a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80013a6:	f107 031c 	add.w	r3, r7, #28
 80013aa:	4619      	mov	r1, r3
 80013ac:	480a      	ldr	r0, [pc, #40]	; (80013d8 <HAL_TIM_MspPostInit+0x154>)
 80013ae:	f001 f81f 	bl	80023f0 <HAL_GPIO_Init>
}
 80013b2:	bf00      	nop
 80013b4:	3730      	adds	r7, #48	; 0x30
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40010000 	.word	0x40010000
 80013c0:	40023800 	.word	0x40023800
 80013c4:	40020000 	.word	0x40020000
 80013c8:	40021000 	.word	0x40021000
 80013cc:	40000400 	.word	0x40000400
 80013d0:	40020400 	.word	0x40020400
 80013d4:	40001800 	.word	0x40001800
 80013d8:	40021c00 	.word	0x40021c00

080013dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001414 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013e0:	f7ff fd4e 	bl	8000e80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013e4:	480c      	ldr	r0, [pc, #48]	; (8001418 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013e6:	490d      	ldr	r1, [pc, #52]	; (800141c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013e8:	4a0d      	ldr	r2, [pc, #52]	; (8001420 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013ec:	e002      	b.n	80013f4 <LoopCopyDataInit>

080013ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013f2:	3304      	adds	r3, #4

080013f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013f8:	d3f9      	bcc.n	80013ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013fa:	4a0a      	ldr	r2, [pc, #40]	; (8001424 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013fc:	4c0a      	ldr	r4, [pc, #40]	; (8001428 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001400:	e001      	b.n	8001406 <LoopFillZerobss>

08001402 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001402:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001404:	3204      	adds	r2, #4

08001406 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001406:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001408:	d3fb      	bcc.n	8001402 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800140a:	f00b fb63 	bl	800cad4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800140e:	f7ff fb1f 	bl	8000a50 <main>
  bx  lr    
 8001412:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001414:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001418:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800141c:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8001420:	0800cd34 	.word	0x0800cd34
  ldr r2, =_sbss
 8001424:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8001428:	20006880 	.word	0x20006880

0800142c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800142c:	e7fe      	b.n	800142c <ADC_IRQHandler>
	...

08001430 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001434:	4b0e      	ldr	r3, [pc, #56]	; (8001470 <HAL_Init+0x40>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a0d      	ldr	r2, [pc, #52]	; (8001470 <HAL_Init+0x40>)
 800143a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800143e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001440:	4b0b      	ldr	r3, [pc, #44]	; (8001470 <HAL_Init+0x40>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a0a      	ldr	r2, [pc, #40]	; (8001470 <HAL_Init+0x40>)
 8001446:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800144a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800144c:	4b08      	ldr	r3, [pc, #32]	; (8001470 <HAL_Init+0x40>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a07      	ldr	r2, [pc, #28]	; (8001470 <HAL_Init+0x40>)
 8001452:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001456:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001458:	2003      	movs	r0, #3
 800145a:	f000 ff94 	bl	8002386 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800145e:	200f      	movs	r0, #15
 8001460:	f7ff fc4a 	bl	8000cf8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001464:	f7ff fc1c 	bl	8000ca0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001468:	2300      	movs	r3, #0
}
 800146a:	4618      	mov	r0, r3
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40023c00 	.word	0x40023c00

08001474 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001478:	4b06      	ldr	r3, [pc, #24]	; (8001494 <HAL_IncTick+0x20>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	461a      	mov	r2, r3
 800147e:	4b06      	ldr	r3, [pc, #24]	; (8001498 <HAL_IncTick+0x24>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4413      	add	r3, r2
 8001484:	4a04      	ldr	r2, [pc, #16]	; (8001498 <HAL_IncTick+0x24>)
 8001486:	6013      	str	r3, [r2, #0]
}
 8001488:	bf00      	nop
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	20000008 	.word	0x20000008
 8001498:	20000388 	.word	0x20000388

0800149c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  return uwTick;
 80014a0:	4b03      	ldr	r3, [pc, #12]	; (80014b0 <HAL_GetTick+0x14>)
 80014a2:	681b      	ldr	r3, [r3, #0]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	20000388 	.word	0x20000388

080014b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014bc:	f7ff ffee 	bl	800149c <HAL_GetTick>
 80014c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80014cc:	d005      	beq.n	80014da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014ce:	4b0a      	ldr	r3, [pc, #40]	; (80014f8 <HAL_Delay+0x44>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	461a      	mov	r2, r3
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	4413      	add	r3, r2
 80014d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014da:	bf00      	nop
 80014dc:	f7ff ffde 	bl	800149c <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	68fa      	ldr	r2, [r7, #12]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d8f7      	bhi.n	80014dc <HAL_Delay+0x28>
  {
  }
}
 80014ec:	bf00      	nop
 80014ee:	bf00      	nop
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000008 	.word	0x20000008

080014fc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d101      	bne.n	800150e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e0ed      	b.n	80016ea <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001514:	b2db      	uxtb	r3, r3
 8001516:	2b00      	cmp	r3, #0
 8001518:	d102      	bne.n	8001520 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f7ff f824 	bl	8000568 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f042 0201 	orr.w	r2, r2, #1
 800152e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001530:	f7ff ffb4 	bl	800149c <HAL_GetTick>
 8001534:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001536:	e012      	b.n	800155e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001538:	f7ff ffb0 	bl	800149c <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b0a      	cmp	r3, #10
 8001544:	d90b      	bls.n	800155e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800154a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2205      	movs	r2, #5
 8001556:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e0c5      	b.n	80016ea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f003 0301 	and.w	r3, r3, #1
 8001568:	2b00      	cmp	r3, #0
 800156a:	d0e5      	beq.n	8001538 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f022 0202 	bic.w	r2, r2, #2
 800157a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800157c:	f7ff ff8e 	bl	800149c <HAL_GetTick>
 8001580:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001582:	e012      	b.n	80015aa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001584:	f7ff ff8a 	bl	800149c <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	2b0a      	cmp	r3, #10
 8001590:	d90b      	bls.n	80015aa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001596:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2205      	movs	r2, #5
 80015a2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e09f      	b.n	80016ea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f003 0302 	and.w	r3, r3, #2
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d1e5      	bne.n	8001584 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	7e1b      	ldrb	r3, [r3, #24]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d108      	bne.n	80015d2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	e007      	b.n	80015e2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	7e5b      	ldrb	r3, [r3, #25]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d108      	bne.n	80015fc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	e007      	b.n	800160c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800160a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	7e9b      	ldrb	r3, [r3, #26]
 8001610:	2b01      	cmp	r3, #1
 8001612:	d108      	bne.n	8001626 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f042 0220 	orr.w	r2, r2, #32
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	e007      	b.n	8001636 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f022 0220 	bic.w	r2, r2, #32
 8001634:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	7edb      	ldrb	r3, [r3, #27]
 800163a:	2b01      	cmp	r3, #1
 800163c:	d108      	bne.n	8001650 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f022 0210 	bic.w	r2, r2, #16
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	e007      	b.n	8001660 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f042 0210 	orr.w	r2, r2, #16
 800165e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	7f1b      	ldrb	r3, [r3, #28]
 8001664:	2b01      	cmp	r3, #1
 8001666:	d108      	bne.n	800167a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f042 0208 	orr.w	r2, r2, #8
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	e007      	b.n	800168a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f022 0208 	bic.w	r2, r2, #8
 8001688:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	7f5b      	ldrb	r3, [r3, #29]
 800168e:	2b01      	cmp	r3, #1
 8001690:	d108      	bne.n	80016a4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f042 0204 	orr.w	r2, r2, #4
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	e007      	b.n	80016b4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f022 0204 	bic.w	r2, r2, #4
 80016b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689a      	ldr	r2, [r3, #8]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	431a      	orrs	r2, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	691b      	ldr	r3, [r3, #16]
 80016c2:	431a      	orrs	r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	695b      	ldr	r3, [r3, #20]
 80016c8:	ea42 0103 	orr.w	r1, r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	1e5a      	subs	r2, r3, #1
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	430a      	orrs	r2, r1
 80016d8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2200      	movs	r2, #0
 80016de:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2201      	movs	r2, #1
 80016e4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3710      	adds	r7, #16
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
	...

080016f4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b087      	sub	sp, #28
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f893 3020 	ldrb.w	r3, [r3, #32]
 800170a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800170c:	7cfb      	ldrb	r3, [r7, #19]
 800170e:	2b01      	cmp	r3, #1
 8001710:	d003      	beq.n	800171a <HAL_CAN_ConfigFilter+0x26>
 8001712:	7cfb      	ldrb	r3, [r7, #19]
 8001714:	2b02      	cmp	r3, #2
 8001716:	f040 80be 	bne.w	8001896 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800171a:	4b65      	ldr	r3, [pc, #404]	; (80018b0 <HAL_CAN_ConfigFilter+0x1bc>)
 800171c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001724:	f043 0201 	orr.w	r2, r3, #1
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001734:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001748:	021b      	lsls	r3, r3, #8
 800174a:	431a      	orrs	r2, r3
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	695b      	ldr	r3, [r3, #20]
 8001756:	f003 031f 	and.w	r3, r3, #31
 800175a:	2201      	movs	r2, #1
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	43db      	mvns	r3, r3
 800176c:	401a      	ands	r2, r3
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	69db      	ldr	r3, [r3, #28]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d123      	bne.n	80017c4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	43db      	mvns	r3, r3
 8001786:	401a      	ands	r2, r3
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800179a:	683a      	ldr	r2, [r7, #0]
 800179c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800179e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	3248      	adds	r2, #72	; 0x48
 80017a4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80017b8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80017ba:	6979      	ldr	r1, [r7, #20]
 80017bc:	3348      	adds	r3, #72	; 0x48
 80017be:	00db      	lsls	r3, r3, #3
 80017c0:	440b      	add	r3, r1
 80017c2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	69db      	ldr	r3, [r3, #28]
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d122      	bne.n	8001812 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	431a      	orrs	r2, r3
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80017e8:	683a      	ldr	r2, [r7, #0]
 80017ea:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80017ec:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	3248      	adds	r2, #72	; 0x48
 80017f2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001806:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001808:	6979      	ldr	r1, [r7, #20]
 800180a:	3348      	adds	r3, #72	; 0x48
 800180c:	00db      	lsls	r3, r3, #3
 800180e:	440b      	add	r3, r1
 8001810:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	699b      	ldr	r3, [r3, #24]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d109      	bne.n	800182e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	43db      	mvns	r3, r3
 8001824:	401a      	ands	r2, r3
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800182c:	e007      	b.n	800183e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	431a      	orrs	r2, r3
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	691b      	ldr	r3, [r3, #16]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d109      	bne.n	800185a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	43db      	mvns	r3, r3
 8001850:	401a      	ands	r2, r3
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001858:	e007      	b.n	800186a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	431a      	orrs	r2, r3
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	6a1b      	ldr	r3, [r3, #32]
 800186e:	2b01      	cmp	r3, #1
 8001870:	d107      	bne.n	8001882 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	431a      	orrs	r2, r3
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001888:	f023 0201 	bic.w	r2, r3, #1
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001892:	2300      	movs	r3, #0
 8001894:	e006      	b.n	80018a4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
  }
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	371c      	adds	r7, #28
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	40006400 	.word	0x40006400

080018b4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d12e      	bne.n	8001926 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2202      	movs	r2, #2
 80018cc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f022 0201 	bic.w	r2, r2, #1
 80018de:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80018e0:	f7ff fddc 	bl	800149c <HAL_GetTick>
 80018e4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80018e6:	e012      	b.n	800190e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80018e8:	f7ff fdd8 	bl	800149c <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b0a      	cmp	r3, #10
 80018f4:	d90b      	bls.n	800190e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2205      	movs	r2, #5
 8001906:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e012      	b.n	8001934 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f003 0301 	and.w	r3, r3, #1
 8001918:	2b00      	cmp	r3, #0
 800191a:	d1e5      	bne.n	80018e8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001922:	2300      	movs	r3, #0
 8001924:	e006      	b.n	8001934 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800192a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
  }
}
 8001934:	4618      	mov	r0, r3
 8001936:	3710      	adds	r7, #16
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}

0800193c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800193c:	b480      	push	{r7}
 800193e:	b089      	sub	sp, #36	; 0x24
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	60b9      	str	r1, [r7, #8]
 8001946:	607a      	str	r2, [r7, #4]
 8001948:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001950:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800195a:	7ffb      	ldrb	r3, [r7, #31]
 800195c:	2b01      	cmp	r3, #1
 800195e:	d003      	beq.n	8001968 <HAL_CAN_AddTxMessage+0x2c>
 8001960:	7ffb      	ldrb	r3, [r7, #31]
 8001962:	2b02      	cmp	r3, #2
 8001964:	f040 80ad 	bne.w	8001ac2 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d10a      	bne.n	8001988 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001978:	2b00      	cmp	r3, #0
 800197a:	d105      	bne.n	8001988 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001982:	2b00      	cmp	r3, #0
 8001984:	f000 8095 	beq.w	8001ab2 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	0e1b      	lsrs	r3, r3, #24
 800198c:	f003 0303 	and.w	r3, r3, #3
 8001990:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001992:	2201      	movs	r2, #1
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	409a      	lsls	r2, r3
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d10d      	bne.n	80019c0 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80019ae:	68f9      	ldr	r1, [r7, #12]
 80019b0:	6809      	ldr	r1, [r1, #0]
 80019b2:	431a      	orrs	r2, r3
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	3318      	adds	r3, #24
 80019b8:	011b      	lsls	r3, r3, #4
 80019ba:	440b      	add	r3, r1
 80019bc:	601a      	str	r2, [r3, #0]
 80019be:	e00f      	b.n	80019e0 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80019ca:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80019d0:	68f9      	ldr	r1, [r7, #12]
 80019d2:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80019d4:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	3318      	adds	r3, #24
 80019da:	011b      	lsls	r3, r3, #4
 80019dc:	440b      	add	r3, r1
 80019de:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	6819      	ldr	r1, [r3, #0]
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	691a      	ldr	r2, [r3, #16]
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	3318      	adds	r3, #24
 80019ec:	011b      	lsls	r3, r3, #4
 80019ee:	440b      	add	r3, r1
 80019f0:	3304      	adds	r3, #4
 80019f2:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	7d1b      	ldrb	r3, [r3, #20]
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d111      	bne.n	8001a20 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	3318      	adds	r3, #24
 8001a04:	011b      	lsls	r3, r3, #4
 8001a06:	4413      	add	r3, r2
 8001a08:	3304      	adds	r3, #4
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	68fa      	ldr	r2, [r7, #12]
 8001a0e:	6811      	ldr	r1, [r2, #0]
 8001a10:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	3318      	adds	r3, #24
 8001a18:	011b      	lsls	r3, r3, #4
 8001a1a:	440b      	add	r3, r1
 8001a1c:	3304      	adds	r3, #4
 8001a1e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	3307      	adds	r3, #7
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	061a      	lsls	r2, r3, #24
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	3306      	adds	r3, #6
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	041b      	lsls	r3, r3, #16
 8001a30:	431a      	orrs	r2, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	3305      	adds	r3, #5
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	021b      	lsls	r3, r3, #8
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	3204      	adds	r2, #4
 8001a40:	7812      	ldrb	r2, [r2, #0]
 8001a42:	4610      	mov	r0, r2
 8001a44:	68fa      	ldr	r2, [r7, #12]
 8001a46:	6811      	ldr	r1, [r2, #0]
 8001a48:	ea43 0200 	orr.w	r2, r3, r0
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	011b      	lsls	r3, r3, #4
 8001a50:	440b      	add	r3, r1
 8001a52:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001a56:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	3303      	adds	r3, #3
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	061a      	lsls	r2, r3, #24
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	3302      	adds	r3, #2
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	041b      	lsls	r3, r3, #16
 8001a68:	431a      	orrs	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	021b      	lsls	r3, r3, #8
 8001a72:	4313      	orrs	r3, r2
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	7812      	ldrb	r2, [r2, #0]
 8001a78:	4610      	mov	r0, r2
 8001a7a:	68fa      	ldr	r2, [r7, #12]
 8001a7c:	6811      	ldr	r1, [r2, #0]
 8001a7e:	ea43 0200 	orr.w	r2, r3, r0
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	011b      	lsls	r3, r3, #4
 8001a86:	440b      	add	r3, r1
 8001a88:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001a8c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	3318      	adds	r3, #24
 8001a96:	011b      	lsls	r3, r3, #4
 8001a98:	4413      	add	r3, r2
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	68fa      	ldr	r2, [r7, #12]
 8001a9e:	6811      	ldr	r1, [r2, #0]
 8001aa0:	f043 0201 	orr.w	r2, r3, #1
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	3318      	adds	r3, #24
 8001aa8:	011b      	lsls	r3, r3, #4
 8001aaa:	440b      	add	r3, r1
 8001aac:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	e00e      	b.n	8001ad0 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e006      	b.n	8001ad0 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
  }
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3724      	adds	r7, #36	; 0x24
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001aee:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8001af0:	7afb      	ldrb	r3, [r7, #11]
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d002      	beq.n	8001afc <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8001af6:	7afb      	ldrb	r3, [r7, #11]
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d11d      	bne.n	8001b38 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d002      	beq.n	8001b10 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d002      	beq.n	8001b24 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	3301      	adds	r3, #1
 8001b22:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d002      	beq.n	8001b38 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	3301      	adds	r3, #1
 8001b36:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8001b38:	68fb      	ldr	r3, [r7, #12]
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3714      	adds	r7, #20
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr

08001b46 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001b46:	b480      	push	{r7}
 8001b48:	b087      	sub	sp, #28
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	60f8      	str	r0, [r7, #12]
 8001b4e:	60b9      	str	r1, [r7, #8]
 8001b50:	607a      	str	r2, [r7, #4]
 8001b52:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b5a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001b5c:	7dfb      	ldrb	r3, [r7, #23]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d003      	beq.n	8001b6a <HAL_CAN_GetRxMessage+0x24>
 8001b62:	7dfb      	ldrb	r3, [r7, #23]
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	f040 8103 	bne.w	8001d70 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d10e      	bne.n	8001b8e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	f003 0303 	and.w	r3, r3, #3
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d116      	bne.n	8001bac <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b82:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e0f7      	b.n	8001d7e <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	f003 0303 	and.w	r3, r3, #3
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d107      	bne.n	8001bac <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e0e8      	b.n	8001d7e <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	331b      	adds	r3, #27
 8001bb4:	011b      	lsls	r3, r3, #4
 8001bb6:	4413      	add	r3, r2
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0204 	and.w	r2, r3, #4
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d10c      	bne.n	8001be4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	331b      	adds	r3, #27
 8001bd2:	011b      	lsls	r3, r3, #4
 8001bd4:	4413      	add	r3, r2
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	0d5b      	lsrs	r3, r3, #21
 8001bda:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	601a      	str	r2, [r3, #0]
 8001be2:	e00b      	b.n	8001bfc <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	331b      	adds	r3, #27
 8001bec:	011b      	lsls	r3, r3, #4
 8001bee:	4413      	add	r3, r2
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	08db      	lsrs	r3, r3, #3
 8001bf4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	331b      	adds	r3, #27
 8001c04:	011b      	lsls	r3, r3, #4
 8001c06:	4413      	add	r3, r2
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0202 	and.w	r2, r3, #2
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	331b      	adds	r3, #27
 8001c1a:	011b      	lsls	r3, r3, #4
 8001c1c:	4413      	add	r3, r2
 8001c1e:	3304      	adds	r3, #4
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0308 	and.w	r3, r3, #8
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d003      	beq.n	8001c32 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2208      	movs	r2, #8
 8001c2e:	611a      	str	r2, [r3, #16]
 8001c30:	e00b      	b.n	8001c4a <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	331b      	adds	r3, #27
 8001c3a:	011b      	lsls	r3, r3, #4
 8001c3c:	4413      	add	r3, r2
 8001c3e:	3304      	adds	r3, #4
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 020f 	and.w	r2, r3, #15
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	331b      	adds	r3, #27
 8001c52:	011b      	lsls	r3, r3, #4
 8001c54:	4413      	add	r3, r2
 8001c56:	3304      	adds	r3, #4
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	0a1b      	lsrs	r3, r3, #8
 8001c5c:	b2da      	uxtb	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	331b      	adds	r3, #27
 8001c6a:	011b      	lsls	r3, r3, #4
 8001c6c:	4413      	add	r3, r2
 8001c6e:	3304      	adds	r3, #4
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	0c1b      	lsrs	r3, r3, #16
 8001c74:	b29a      	uxth	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	011b      	lsls	r3, r3, #4
 8001c82:	4413      	add	r3, r2
 8001c84:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	b2da      	uxtb	r2, r3
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	011b      	lsls	r3, r3, #4
 8001c98:	4413      	add	r3, r2
 8001c9a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	0a1a      	lsrs	r2, r3, #8
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	b2d2      	uxtb	r2, r2
 8001ca8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	011b      	lsls	r3, r3, #4
 8001cb2:	4413      	add	r3, r2
 8001cb4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	0c1a      	lsrs	r2, r3, #16
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	3302      	adds	r3, #2
 8001cc0:	b2d2      	uxtb	r2, r2
 8001cc2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	011b      	lsls	r3, r3, #4
 8001ccc:	4413      	add	r3, r2
 8001cce:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	0e1a      	lsrs	r2, r3, #24
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	3303      	adds	r3, #3
 8001cda:	b2d2      	uxtb	r2, r2
 8001cdc:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	011b      	lsls	r3, r3, #4
 8001ce6:	4413      	add	r3, r2
 8001ce8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	3304      	adds	r3, #4
 8001cf2:	b2d2      	uxtb	r2, r2
 8001cf4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	011b      	lsls	r3, r3, #4
 8001cfe:	4413      	add	r3, r2
 8001d00:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	0a1a      	lsrs	r2, r3, #8
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	3305      	adds	r3, #5
 8001d0c:	b2d2      	uxtb	r2, r2
 8001d0e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	011b      	lsls	r3, r3, #4
 8001d18:	4413      	add	r3, r2
 8001d1a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	0c1a      	lsrs	r2, r3, #16
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	3306      	adds	r3, #6
 8001d26:	b2d2      	uxtb	r2, r2
 8001d28:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	011b      	lsls	r3, r3, #4
 8001d32:	4413      	add	r3, r2
 8001d34:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	0e1a      	lsrs	r2, r3, #24
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	3307      	adds	r3, #7
 8001d40:	b2d2      	uxtb	r2, r2
 8001d42:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d108      	bne.n	8001d5c <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	68da      	ldr	r2, [r3, #12]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f042 0220 	orr.w	r2, r2, #32
 8001d58:	60da      	str	r2, [r3, #12]
 8001d5a:	e007      	b.n	8001d6c <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	691a      	ldr	r2, [r3, #16]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f042 0220 	orr.w	r2, r2, #32
 8001d6a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	e006      	b.n	8001d7e <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d74:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
  }
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	371c      	adds	r7, #28
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr

08001d8a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	b085      	sub	sp, #20
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
 8001d92:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d9a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d9c:	7bfb      	ldrb	r3, [r7, #15]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d002      	beq.n	8001da8 <HAL_CAN_ActivateNotification+0x1e>
 8001da2:	7bfb      	ldrb	r3, [r7, #15]
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d109      	bne.n	8001dbc <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	6959      	ldr	r1, [r3, #20]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	683a      	ldr	r2, [r7, #0]
 8001db4:	430a      	orrs	r2, r1
 8001db6:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001db8:	2300      	movs	r3, #0
 8001dba:	e006      	b.n	8001dca <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
  }
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3714      	adds	r7, #20
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr

08001dd6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b08a      	sub	sp, #40	; 0x28
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001dde:	2300      	movs	r3, #0
 8001de0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	695b      	ldr	r3, [r3, #20]
 8001de8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	691b      	ldr	r3, [r3, #16]
 8001e08:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001e12:	6a3b      	ldr	r3, [r7, #32]
 8001e14:	f003 0301 	and.w	r3, r3, #1
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d07c      	beq.n	8001f16 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d023      	beq.n	8001e6e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	f003 0302 	and.w	r3, r3, #2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d003      	beq.n	8001e40 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f009 fa11 	bl	800b260 <HAL_CAN_TxMailbox0CompleteCallback>
 8001e3e:	e016      	b.n	8001e6e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	f003 0304 	and.w	r3, r3, #4
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d004      	beq.n	8001e54 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e50:	627b      	str	r3, [r7, #36]	; 0x24
 8001e52:	e00c      	b.n	8001e6e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	f003 0308 	and.w	r3, r3, #8
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d004      	beq.n	8001e68 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e64:	627b      	str	r3, [r7, #36]	; 0x24
 8001e66:	e002      	b.n	8001e6e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f000 f96b 	bl	8002144 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d024      	beq.n	8001ec2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e80:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d003      	beq.n	8001e94 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f009 f9fb 	bl	800b288 <HAL_CAN_TxMailbox1CompleteCallback>
 8001e92:	e016      	b.n	8001ec2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d004      	beq.n	8001ea8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ea4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ea6:	e00c      	b.n	8001ec2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d004      	beq.n	8001ebc <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eb8:	627b      	str	r3, [r7, #36]	; 0x24
 8001eba:	e002      	b.n	8001ec2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f000 f94b 	bl	8002158 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d024      	beq.n	8001f16 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001ed4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d003      	beq.n	8001ee8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f009 f9e5 	bl	800b2b0 <HAL_CAN_TxMailbox2CompleteCallback>
 8001ee6:	e016      	b.n	8001f16 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d004      	beq.n	8001efc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ef8:	627b      	str	r3, [r7, #36]	; 0x24
 8001efa:	e00c      	b.n	8001f16 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d004      	beq.n	8001f10 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f0c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f0e:	e002      	b.n	8001f16 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f000 f92b 	bl	800216c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001f16:	6a3b      	ldr	r3, [r7, #32]
 8001f18:	f003 0308 	and.w	r3, r3, #8
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d00c      	beq.n	8001f3a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	f003 0310 	and.w	r3, r3, #16
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d007      	beq.n	8001f3a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f30:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2210      	movs	r2, #16
 8001f38:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001f3a:	6a3b      	ldr	r3, [r7, #32]
 8001f3c:	f003 0304 	and.w	r3, r3, #4
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d00b      	beq.n	8001f5c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	f003 0308 	and.w	r3, r3, #8
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d006      	beq.n	8001f5c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	2208      	movs	r2, #8
 8001f54:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f000 f912 	bl	8002180 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001f5c:	6a3b      	ldr	r3, [r7, #32]
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d009      	beq.n	8001f7a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	f003 0303 	and.w	r3, r3, #3
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d002      	beq.n	8001f7a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f009 f9c5 	bl	800b304 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001f7a:	6a3b      	ldr	r3, [r7, #32]
 8001f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d00c      	beq.n	8001f9e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	f003 0310 	and.w	r3, r3, #16
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d007      	beq.n	8001f9e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f90:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f94:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2210      	movs	r2, #16
 8001f9c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001f9e:	6a3b      	ldr	r3, [r7, #32]
 8001fa0:	f003 0320 	and.w	r3, r3, #32
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d00b      	beq.n	8001fc0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	f003 0308 	and.w	r3, r3, #8
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d006      	beq.n	8001fc0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2208      	movs	r2, #8
 8001fb8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f000 f8f4 	bl	80021a8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001fc0:	6a3b      	ldr	r3, [r7, #32]
 8001fc2:	f003 0310 	and.w	r3, r3, #16
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d009      	beq.n	8001fde <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	691b      	ldr	r3, [r3, #16]
 8001fd0:	f003 0303 	and.w	r3, r3, #3
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d002      	beq.n	8001fde <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f000 f8db 	bl	8002194 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001fde:	6a3b      	ldr	r3, [r7, #32]
 8001fe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d00b      	beq.n	8002000 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	f003 0310 	and.w	r3, r3, #16
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d006      	beq.n	8002000 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2210      	movs	r2, #16
 8001ff8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f000 f8de 	bl	80021bc <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002000:	6a3b      	ldr	r3, [r7, #32]
 8002002:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d00b      	beq.n	8002022 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	f003 0308 	and.w	r3, r3, #8
 8002010:	2b00      	cmp	r3, #0
 8002012:	d006      	beq.n	8002022 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2208      	movs	r2, #8
 800201a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f000 f8d7 	bl	80021d0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002022:	6a3b      	ldr	r3, [r7, #32]
 8002024:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d07b      	beq.n	8002124 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	f003 0304 	and.w	r3, r3, #4
 8002032:	2b00      	cmp	r3, #0
 8002034:	d072      	beq.n	800211c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002036:	6a3b      	ldr	r3, [r7, #32]
 8002038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800203c:	2b00      	cmp	r3, #0
 800203e:	d008      	beq.n	8002052 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002046:	2b00      	cmp	r3, #0
 8002048:	d003      	beq.n	8002052 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800204a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204c:	f043 0301 	orr.w	r3, r3, #1
 8002050:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002052:	6a3b      	ldr	r3, [r7, #32]
 8002054:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002058:	2b00      	cmp	r3, #0
 800205a:	d008      	beq.n	800206e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002062:	2b00      	cmp	r3, #0
 8002064:	d003      	beq.n	800206e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002068:	f043 0302 	orr.w	r3, r3, #2
 800206c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800206e:	6a3b      	ldr	r3, [r7, #32]
 8002070:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002074:	2b00      	cmp	r3, #0
 8002076:	d008      	beq.n	800208a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800207e:	2b00      	cmp	r3, #0
 8002080:	d003      	beq.n	800208a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002084:	f043 0304 	orr.w	r3, r3, #4
 8002088:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800208a:	6a3b      	ldr	r3, [r7, #32]
 800208c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002090:	2b00      	cmp	r3, #0
 8002092:	d043      	beq.n	800211c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800209a:	2b00      	cmp	r3, #0
 800209c:	d03e      	beq.n	800211c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020a4:	2b60      	cmp	r3, #96	; 0x60
 80020a6:	d02b      	beq.n	8002100 <HAL_CAN_IRQHandler+0x32a>
 80020a8:	2b60      	cmp	r3, #96	; 0x60
 80020aa:	d82e      	bhi.n	800210a <HAL_CAN_IRQHandler+0x334>
 80020ac:	2b50      	cmp	r3, #80	; 0x50
 80020ae:	d022      	beq.n	80020f6 <HAL_CAN_IRQHandler+0x320>
 80020b0:	2b50      	cmp	r3, #80	; 0x50
 80020b2:	d82a      	bhi.n	800210a <HAL_CAN_IRQHandler+0x334>
 80020b4:	2b40      	cmp	r3, #64	; 0x40
 80020b6:	d019      	beq.n	80020ec <HAL_CAN_IRQHandler+0x316>
 80020b8:	2b40      	cmp	r3, #64	; 0x40
 80020ba:	d826      	bhi.n	800210a <HAL_CAN_IRQHandler+0x334>
 80020bc:	2b30      	cmp	r3, #48	; 0x30
 80020be:	d010      	beq.n	80020e2 <HAL_CAN_IRQHandler+0x30c>
 80020c0:	2b30      	cmp	r3, #48	; 0x30
 80020c2:	d822      	bhi.n	800210a <HAL_CAN_IRQHandler+0x334>
 80020c4:	2b10      	cmp	r3, #16
 80020c6:	d002      	beq.n	80020ce <HAL_CAN_IRQHandler+0x2f8>
 80020c8:	2b20      	cmp	r3, #32
 80020ca:	d005      	beq.n	80020d8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80020cc:	e01d      	b.n	800210a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80020ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d0:	f043 0308 	orr.w	r3, r3, #8
 80020d4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80020d6:	e019      	b.n	800210c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80020d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020da:	f043 0310 	orr.w	r3, r3, #16
 80020de:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80020e0:	e014      	b.n	800210c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80020e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e4:	f043 0320 	orr.w	r3, r3, #32
 80020e8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80020ea:	e00f      	b.n	800210c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80020ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020f2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80020f4:	e00a      	b.n	800210c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80020f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020fc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80020fe:	e005      	b.n	800210c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002102:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002106:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002108:	e000      	b.n	800210c <HAL_CAN_IRQHandler+0x336>
            break;
 800210a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	699a      	ldr	r2, [r3, #24]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800211a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2204      	movs	r2, #4
 8002122:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002126:	2b00      	cmp	r3, #0
 8002128:	d008      	beq.n	800213c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800212e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002130:	431a      	orrs	r2, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f009 f8ce 	bl	800b2d8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800213c:	bf00      	nop
 800213e:	3728      	adds	r7, #40	; 0x28
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}

08002144 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800219c:	bf00      	nop
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80021b0:	bf00      	nop
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80021c4:	bf00      	nop
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80021d8:	bf00      	nop
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <HAL_CAN_ResetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ResetError(CAN_HandleTypeDef *hcan)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021ec:	2300      	movs	r3, #0
 80021ee:	73fb      	strb	r3, [r7, #15]
  HAL_CAN_StateTypeDef state = hcan->State;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021f6:	73bb      	strb	r3, [r7, #14]

  if ((state == HAL_CAN_STATE_READY) ||
 80021f8:	7bbb      	ldrb	r3, [r7, #14]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d002      	beq.n	8002204 <HAL_CAN_ResetError+0x20>
 80021fe:	7bbb      	ldrb	r3, [r7, #14]
 8002200:	2b02      	cmp	r3, #2
 8002202:	d103      	bne.n	800220c <HAL_CAN_ResetError+0x28>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Reset CAN error code */
    hcan->ErrorCode = 0U;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	625a      	str	r2, [r3, #36]	; 0x24
 800220a:	e007      	b.n	800221c <HAL_CAN_ResetError+0x38>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002210:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	625a      	str	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the status */
  return status;
 800221c:	7bfb      	ldrb	r3, [r7, #15]
}
 800221e:	4618      	mov	r0, r3
 8002220:	3714      	adds	r7, #20
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
	...

0800222c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800222c:	b480      	push	{r7}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f003 0307 	and.w	r3, r3, #7
 800223a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800223c:	4b0c      	ldr	r3, [pc, #48]	; (8002270 <__NVIC_SetPriorityGrouping+0x44>)
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002242:	68ba      	ldr	r2, [r7, #8]
 8002244:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002248:	4013      	ands	r3, r2
 800224a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002254:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002258:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800225c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800225e:	4a04      	ldr	r2, [pc, #16]	; (8002270 <__NVIC_SetPriorityGrouping+0x44>)
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	60d3      	str	r3, [r2, #12]
}
 8002264:	bf00      	nop
 8002266:	3714      	adds	r7, #20
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr
 8002270:	e000ed00 	.word	0xe000ed00

08002274 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002278:	4b04      	ldr	r3, [pc, #16]	; (800228c <__NVIC_GetPriorityGrouping+0x18>)
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	0a1b      	lsrs	r3, r3, #8
 800227e:	f003 0307 	and.w	r3, r3, #7
}
 8002282:	4618      	mov	r0, r3
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr
 800228c:	e000ed00 	.word	0xe000ed00

08002290 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	4603      	mov	r3, r0
 8002298:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800229a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	db0b      	blt.n	80022ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022a2:	79fb      	ldrb	r3, [r7, #7]
 80022a4:	f003 021f 	and.w	r2, r3, #31
 80022a8:	4907      	ldr	r1, [pc, #28]	; (80022c8 <__NVIC_EnableIRQ+0x38>)
 80022aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ae:	095b      	lsrs	r3, r3, #5
 80022b0:	2001      	movs	r0, #1
 80022b2:	fa00 f202 	lsl.w	r2, r0, r2
 80022b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022ba:	bf00      	nop
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	e000e100 	.word	0xe000e100

080022cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	4603      	mov	r3, r0
 80022d4:	6039      	str	r1, [r7, #0]
 80022d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	db0a      	blt.n	80022f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	b2da      	uxtb	r2, r3
 80022e4:	490c      	ldr	r1, [pc, #48]	; (8002318 <__NVIC_SetPriority+0x4c>)
 80022e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ea:	0112      	lsls	r2, r2, #4
 80022ec:	b2d2      	uxtb	r2, r2
 80022ee:	440b      	add	r3, r1
 80022f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022f4:	e00a      	b.n	800230c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	b2da      	uxtb	r2, r3
 80022fa:	4908      	ldr	r1, [pc, #32]	; (800231c <__NVIC_SetPriority+0x50>)
 80022fc:	79fb      	ldrb	r3, [r7, #7]
 80022fe:	f003 030f 	and.w	r3, r3, #15
 8002302:	3b04      	subs	r3, #4
 8002304:	0112      	lsls	r2, r2, #4
 8002306:	b2d2      	uxtb	r2, r2
 8002308:	440b      	add	r3, r1
 800230a:	761a      	strb	r2, [r3, #24]
}
 800230c:	bf00      	nop
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr
 8002318:	e000e100 	.word	0xe000e100
 800231c:	e000ed00 	.word	0xe000ed00

08002320 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002320:	b480      	push	{r7}
 8002322:	b089      	sub	sp, #36	; 0x24
 8002324:	af00      	add	r7, sp, #0
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	60b9      	str	r1, [r7, #8]
 800232a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f003 0307 	and.w	r3, r3, #7
 8002332:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	f1c3 0307 	rsb	r3, r3, #7
 800233a:	2b04      	cmp	r3, #4
 800233c:	bf28      	it	cs
 800233e:	2304      	movcs	r3, #4
 8002340:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	3304      	adds	r3, #4
 8002346:	2b06      	cmp	r3, #6
 8002348:	d902      	bls.n	8002350 <NVIC_EncodePriority+0x30>
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	3b03      	subs	r3, #3
 800234e:	e000      	b.n	8002352 <NVIC_EncodePriority+0x32>
 8002350:	2300      	movs	r3, #0
 8002352:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002354:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	fa02 f303 	lsl.w	r3, r2, r3
 800235e:	43da      	mvns	r2, r3
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	401a      	ands	r2, r3
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002368:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	fa01 f303 	lsl.w	r3, r1, r3
 8002372:	43d9      	mvns	r1, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002378:	4313      	orrs	r3, r2
         );
}
 800237a:	4618      	mov	r0, r3
 800237c:	3724      	adds	r7, #36	; 0x24
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr

08002386 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b082      	sub	sp, #8
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f7ff ff4c 	bl	800222c <__NVIC_SetPriorityGrouping>
}
 8002394:	bf00      	nop
 8002396:	3708      	adds	r7, #8
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}

0800239c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800239c:	b580      	push	{r7, lr}
 800239e:	b086      	sub	sp, #24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	4603      	mov	r3, r0
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	607a      	str	r2, [r7, #4]
 80023a8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023aa:	2300      	movs	r3, #0
 80023ac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023ae:	f7ff ff61 	bl	8002274 <__NVIC_GetPriorityGrouping>
 80023b2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	68b9      	ldr	r1, [r7, #8]
 80023b8:	6978      	ldr	r0, [r7, #20]
 80023ba:	f7ff ffb1 	bl	8002320 <NVIC_EncodePriority>
 80023be:	4602      	mov	r2, r0
 80023c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023c4:	4611      	mov	r1, r2
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7ff ff80 	bl	80022cc <__NVIC_SetPriority>
}
 80023cc:	bf00      	nop
 80023ce:	3718      	adds	r7, #24
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	4603      	mov	r3, r0
 80023dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7ff ff54 	bl	8002290 <__NVIC_EnableIRQ>
}
 80023e8:	bf00      	nop
 80023ea:	3708      	adds	r7, #8
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b089      	sub	sp, #36	; 0x24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023fa:	2300      	movs	r3, #0
 80023fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023fe:	2300      	movs	r3, #0
 8002400:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002402:	2300      	movs	r3, #0
 8002404:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002406:	2300      	movs	r3, #0
 8002408:	61fb      	str	r3, [r7, #28]
 800240a:	e177      	b.n	80026fc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800240c:	2201      	movs	r2, #1
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	697a      	ldr	r2, [r7, #20]
 800241c:	4013      	ands	r3, r2
 800241e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002420:	693a      	ldr	r2, [r7, #16]
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	429a      	cmp	r2, r3
 8002426:	f040 8166 	bne.w	80026f6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f003 0303 	and.w	r3, r3, #3
 8002432:	2b01      	cmp	r3, #1
 8002434:	d005      	beq.n	8002442 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800243e:	2b02      	cmp	r3, #2
 8002440:	d130      	bne.n	80024a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	2203      	movs	r2, #3
 800244e:	fa02 f303 	lsl.w	r3, r2, r3
 8002452:	43db      	mvns	r3, r3
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	4013      	ands	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	68da      	ldr	r2, [r3, #12]
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	fa02 f303 	lsl.w	r3, r2, r3
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	4313      	orrs	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002478:	2201      	movs	r2, #1
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	fa02 f303 	lsl.w	r3, r2, r3
 8002480:	43db      	mvns	r3, r3
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	4013      	ands	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	091b      	lsrs	r3, r3, #4
 800248e:	f003 0201 	and.w	r2, r3, #1
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	fa02 f303 	lsl.w	r3, r2, r3
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	4313      	orrs	r3, r2
 800249c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f003 0303 	and.w	r3, r3, #3
 80024ac:	2b03      	cmp	r3, #3
 80024ae:	d017      	beq.n	80024e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	2203      	movs	r2, #3
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	43db      	mvns	r3, r3
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	4013      	ands	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	689a      	ldr	r2, [r3, #8]
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	005b      	lsls	r3, r3, #1
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f003 0303 	and.w	r3, r3, #3
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d123      	bne.n	8002534 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	08da      	lsrs	r2, r3, #3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	3208      	adds	r2, #8
 80024f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	f003 0307 	and.w	r3, r3, #7
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	220f      	movs	r2, #15
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	43db      	mvns	r3, r3
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	4013      	ands	r3, r2
 800250e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	691a      	ldr	r2, [r3, #16]
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	f003 0307 	and.w	r3, r3, #7
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	4313      	orrs	r3, r2
 8002524:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	08da      	lsrs	r2, r3, #3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	3208      	adds	r2, #8
 800252e:	69b9      	ldr	r1, [r7, #24]
 8002530:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	005b      	lsls	r3, r3, #1
 800253e:	2203      	movs	r2, #3
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	43db      	mvns	r3, r3
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	4013      	ands	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f003 0203 	and.w	r2, r3, #3
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	4313      	orrs	r3, r2
 8002560:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002570:	2b00      	cmp	r3, #0
 8002572:	f000 80c0 	beq.w	80026f6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002576:	2300      	movs	r3, #0
 8002578:	60fb      	str	r3, [r7, #12]
 800257a:	4b66      	ldr	r3, [pc, #408]	; (8002714 <HAL_GPIO_Init+0x324>)
 800257c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257e:	4a65      	ldr	r2, [pc, #404]	; (8002714 <HAL_GPIO_Init+0x324>)
 8002580:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002584:	6453      	str	r3, [r2, #68]	; 0x44
 8002586:	4b63      	ldr	r3, [pc, #396]	; (8002714 <HAL_GPIO_Init+0x324>)
 8002588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800258e:	60fb      	str	r3, [r7, #12]
 8002590:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002592:	4a61      	ldr	r2, [pc, #388]	; (8002718 <HAL_GPIO_Init+0x328>)
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	089b      	lsrs	r3, r3, #2
 8002598:	3302      	adds	r3, #2
 800259a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800259e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	f003 0303 	and.w	r3, r3, #3
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	220f      	movs	r2, #15
 80025aa:	fa02 f303 	lsl.w	r3, r2, r3
 80025ae:	43db      	mvns	r3, r3
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	4013      	ands	r3, r2
 80025b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a58      	ldr	r2, [pc, #352]	; (800271c <HAL_GPIO_Init+0x32c>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d037      	beq.n	800262e <HAL_GPIO_Init+0x23e>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a57      	ldr	r2, [pc, #348]	; (8002720 <HAL_GPIO_Init+0x330>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d031      	beq.n	800262a <HAL_GPIO_Init+0x23a>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a56      	ldr	r2, [pc, #344]	; (8002724 <HAL_GPIO_Init+0x334>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d02b      	beq.n	8002626 <HAL_GPIO_Init+0x236>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a55      	ldr	r2, [pc, #340]	; (8002728 <HAL_GPIO_Init+0x338>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d025      	beq.n	8002622 <HAL_GPIO_Init+0x232>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a54      	ldr	r2, [pc, #336]	; (800272c <HAL_GPIO_Init+0x33c>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d01f      	beq.n	800261e <HAL_GPIO_Init+0x22e>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a53      	ldr	r2, [pc, #332]	; (8002730 <HAL_GPIO_Init+0x340>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d019      	beq.n	800261a <HAL_GPIO_Init+0x22a>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a52      	ldr	r2, [pc, #328]	; (8002734 <HAL_GPIO_Init+0x344>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d013      	beq.n	8002616 <HAL_GPIO_Init+0x226>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a51      	ldr	r2, [pc, #324]	; (8002738 <HAL_GPIO_Init+0x348>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d00d      	beq.n	8002612 <HAL_GPIO_Init+0x222>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a50      	ldr	r2, [pc, #320]	; (800273c <HAL_GPIO_Init+0x34c>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d007      	beq.n	800260e <HAL_GPIO_Init+0x21e>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a4f      	ldr	r2, [pc, #316]	; (8002740 <HAL_GPIO_Init+0x350>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d101      	bne.n	800260a <HAL_GPIO_Init+0x21a>
 8002606:	2309      	movs	r3, #9
 8002608:	e012      	b.n	8002630 <HAL_GPIO_Init+0x240>
 800260a:	230a      	movs	r3, #10
 800260c:	e010      	b.n	8002630 <HAL_GPIO_Init+0x240>
 800260e:	2308      	movs	r3, #8
 8002610:	e00e      	b.n	8002630 <HAL_GPIO_Init+0x240>
 8002612:	2307      	movs	r3, #7
 8002614:	e00c      	b.n	8002630 <HAL_GPIO_Init+0x240>
 8002616:	2306      	movs	r3, #6
 8002618:	e00a      	b.n	8002630 <HAL_GPIO_Init+0x240>
 800261a:	2305      	movs	r3, #5
 800261c:	e008      	b.n	8002630 <HAL_GPIO_Init+0x240>
 800261e:	2304      	movs	r3, #4
 8002620:	e006      	b.n	8002630 <HAL_GPIO_Init+0x240>
 8002622:	2303      	movs	r3, #3
 8002624:	e004      	b.n	8002630 <HAL_GPIO_Init+0x240>
 8002626:	2302      	movs	r3, #2
 8002628:	e002      	b.n	8002630 <HAL_GPIO_Init+0x240>
 800262a:	2301      	movs	r3, #1
 800262c:	e000      	b.n	8002630 <HAL_GPIO_Init+0x240>
 800262e:	2300      	movs	r3, #0
 8002630:	69fa      	ldr	r2, [r7, #28]
 8002632:	f002 0203 	and.w	r2, r2, #3
 8002636:	0092      	lsls	r2, r2, #2
 8002638:	4093      	lsls	r3, r2
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	4313      	orrs	r3, r2
 800263e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002640:	4935      	ldr	r1, [pc, #212]	; (8002718 <HAL_GPIO_Init+0x328>)
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	089b      	lsrs	r3, r3, #2
 8002646:	3302      	adds	r3, #2
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800264e:	4b3d      	ldr	r3, [pc, #244]	; (8002744 <HAL_GPIO_Init+0x354>)
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	43db      	mvns	r3, r3
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	4013      	ands	r3, r2
 800265c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d003      	beq.n	8002672 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	4313      	orrs	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002672:	4a34      	ldr	r2, [pc, #208]	; (8002744 <HAL_GPIO_Init+0x354>)
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002678:	4b32      	ldr	r3, [pc, #200]	; (8002744 <HAL_GPIO_Init+0x354>)
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	43db      	mvns	r3, r3
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	4013      	ands	r3, r2
 8002686:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d003      	beq.n	800269c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	4313      	orrs	r3, r2
 800269a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800269c:	4a29      	ldr	r2, [pc, #164]	; (8002744 <HAL_GPIO_Init+0x354>)
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026a2:	4b28      	ldr	r3, [pc, #160]	; (8002744 <HAL_GPIO_Init+0x354>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	43db      	mvns	r3, r3
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	4013      	ands	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d003      	beq.n	80026c6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026c6:	4a1f      	ldr	r2, [pc, #124]	; (8002744 <HAL_GPIO_Init+0x354>)
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026cc:	4b1d      	ldr	r3, [pc, #116]	; (8002744 <HAL_GPIO_Init+0x354>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	43db      	mvns	r3, r3
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	4013      	ands	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d003      	beq.n	80026f0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026f0:	4a14      	ldr	r2, [pc, #80]	; (8002744 <HAL_GPIO_Init+0x354>)
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	3301      	adds	r3, #1
 80026fa:	61fb      	str	r3, [r7, #28]
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	2b0f      	cmp	r3, #15
 8002700:	f67f ae84 	bls.w	800240c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002704:	bf00      	nop
 8002706:	bf00      	nop
 8002708:	3724      	adds	r7, #36	; 0x24
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	40023800 	.word	0x40023800
 8002718:	40013800 	.word	0x40013800
 800271c:	40020000 	.word	0x40020000
 8002720:	40020400 	.word	0x40020400
 8002724:	40020800 	.word	0x40020800
 8002728:	40020c00 	.word	0x40020c00
 800272c:	40021000 	.word	0x40021000
 8002730:	40021400 	.word	0x40021400
 8002734:	40021800 	.word	0x40021800
 8002738:	40021c00 	.word	0x40021c00
 800273c:	40022000 	.word	0x40022000
 8002740:	40022400 	.word	0x40022400
 8002744:	40013c00 	.word	0x40013c00

08002748 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	460b      	mov	r3, r1
 8002752:	807b      	strh	r3, [r7, #2]
 8002754:	4613      	mov	r3, r2
 8002756:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002758:	787b      	ldrb	r3, [r7, #1]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d003      	beq.n	8002766 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800275e:	887a      	ldrh	r2, [r7, #2]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002764:	e003      	b.n	800276e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002766:	887b      	ldrh	r3, [r7, #2]
 8002768:	041a      	lsls	r2, r3, #16
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	619a      	str	r2, [r3, #24]
}
 800276e:	bf00      	nop
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr

0800277a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800277a:	b480      	push	{r7}
 800277c:	b085      	sub	sp, #20
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
 8002782:	460b      	mov	r3, r1
 8002784:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800278c:	887a      	ldrh	r2, [r7, #2]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	4013      	ands	r3, r2
 8002792:	041a      	lsls	r2, r3, #16
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	43d9      	mvns	r1, r3
 8002798:	887b      	ldrh	r3, [r7, #2]
 800279a:	400b      	ands	r3, r1
 800279c:	431a      	orrs	r2, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	619a      	str	r2, [r3, #24]
}
 80027a2:	bf00      	nop
 80027a4:	3714      	adds	r7, #20
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr

080027ae <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b086      	sub	sp, #24
 80027b2:	af02      	add	r7, sp, #8
 80027b4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d101      	bne.n	80027c0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e101      	b.n	80029c4 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d106      	bne.n	80027e0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f007 fe72 	bl	800a4c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2203      	movs	r2, #3
 80027e4:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027ee:	d102      	bne.n	80027f6 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f002 ffc7 	bl	800578e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6818      	ldr	r0, [r3, #0]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	7c1a      	ldrb	r2, [r3, #16]
 8002808:	f88d 2000 	strb.w	r2, [sp]
 800280c:	3304      	adds	r3, #4
 800280e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002810:	f002 fea6 	bl	8005560 <USB_CoreInit>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d005      	beq.n	8002826 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2202      	movs	r2, #2
 800281e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e0ce      	b.n	80029c4 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2100      	movs	r1, #0
 800282c:	4618      	mov	r0, r3
 800282e:	f002 ffbf 	bl	80057b0 <USB_SetCurrentMode>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d005      	beq.n	8002844 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2202      	movs	r2, #2
 800283c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e0bf      	b.n	80029c4 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002844:	2300      	movs	r3, #0
 8002846:	73fb      	strb	r3, [r7, #15]
 8002848:	e04a      	b.n	80028e0 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800284a:	7bfa      	ldrb	r2, [r7, #15]
 800284c:	6879      	ldr	r1, [r7, #4]
 800284e:	4613      	mov	r3, r2
 8002850:	00db      	lsls	r3, r3, #3
 8002852:	4413      	add	r3, r2
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	440b      	add	r3, r1
 8002858:	3315      	adds	r3, #21
 800285a:	2201      	movs	r2, #1
 800285c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800285e:	7bfa      	ldrb	r2, [r7, #15]
 8002860:	6879      	ldr	r1, [r7, #4]
 8002862:	4613      	mov	r3, r2
 8002864:	00db      	lsls	r3, r3, #3
 8002866:	4413      	add	r3, r2
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	440b      	add	r3, r1
 800286c:	3314      	adds	r3, #20
 800286e:	7bfa      	ldrb	r2, [r7, #15]
 8002870:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002872:	7bfa      	ldrb	r2, [r7, #15]
 8002874:	7bfb      	ldrb	r3, [r7, #15]
 8002876:	b298      	uxth	r0, r3
 8002878:	6879      	ldr	r1, [r7, #4]
 800287a:	4613      	mov	r3, r2
 800287c:	00db      	lsls	r3, r3, #3
 800287e:	4413      	add	r3, r2
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	440b      	add	r3, r1
 8002884:	332e      	adds	r3, #46	; 0x2e
 8002886:	4602      	mov	r2, r0
 8002888:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800288a:	7bfa      	ldrb	r2, [r7, #15]
 800288c:	6879      	ldr	r1, [r7, #4]
 800288e:	4613      	mov	r3, r2
 8002890:	00db      	lsls	r3, r3, #3
 8002892:	4413      	add	r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	440b      	add	r3, r1
 8002898:	3318      	adds	r3, #24
 800289a:	2200      	movs	r2, #0
 800289c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800289e:	7bfa      	ldrb	r2, [r7, #15]
 80028a0:	6879      	ldr	r1, [r7, #4]
 80028a2:	4613      	mov	r3, r2
 80028a4:	00db      	lsls	r3, r3, #3
 80028a6:	4413      	add	r3, r2
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	440b      	add	r3, r1
 80028ac:	331c      	adds	r3, #28
 80028ae:	2200      	movs	r2, #0
 80028b0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80028b2:	7bfa      	ldrb	r2, [r7, #15]
 80028b4:	6879      	ldr	r1, [r7, #4]
 80028b6:	4613      	mov	r3, r2
 80028b8:	00db      	lsls	r3, r3, #3
 80028ba:	4413      	add	r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	440b      	add	r3, r1
 80028c0:	3320      	adds	r3, #32
 80028c2:	2200      	movs	r2, #0
 80028c4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80028c6:	7bfa      	ldrb	r2, [r7, #15]
 80028c8:	6879      	ldr	r1, [r7, #4]
 80028ca:	4613      	mov	r3, r2
 80028cc:	00db      	lsls	r3, r3, #3
 80028ce:	4413      	add	r3, r2
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	440b      	add	r3, r1
 80028d4:	3324      	adds	r3, #36	; 0x24
 80028d6:	2200      	movs	r2, #0
 80028d8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028da:	7bfb      	ldrb	r3, [r7, #15]
 80028dc:	3301      	adds	r3, #1
 80028de:	73fb      	strb	r3, [r7, #15]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	791b      	ldrb	r3, [r3, #4]
 80028e4:	7bfa      	ldrb	r2, [r7, #15]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d3af      	bcc.n	800284a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028ea:	2300      	movs	r3, #0
 80028ec:	73fb      	strb	r3, [r7, #15]
 80028ee:	e044      	b.n	800297a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80028f0:	7bfa      	ldrb	r2, [r7, #15]
 80028f2:	6879      	ldr	r1, [r7, #4]
 80028f4:	4613      	mov	r3, r2
 80028f6:	00db      	lsls	r3, r3, #3
 80028f8:	4413      	add	r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	440b      	add	r3, r1
 80028fe:	f203 2355 	addw	r3, r3, #597	; 0x255
 8002902:	2200      	movs	r2, #0
 8002904:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002906:	7bfa      	ldrb	r2, [r7, #15]
 8002908:	6879      	ldr	r1, [r7, #4]
 800290a:	4613      	mov	r3, r2
 800290c:	00db      	lsls	r3, r3, #3
 800290e:	4413      	add	r3, r2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	440b      	add	r3, r1
 8002914:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8002918:	7bfa      	ldrb	r2, [r7, #15]
 800291a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800291c:	7bfa      	ldrb	r2, [r7, #15]
 800291e:	6879      	ldr	r1, [r7, #4]
 8002920:	4613      	mov	r3, r2
 8002922:	00db      	lsls	r3, r3, #3
 8002924:	4413      	add	r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	440b      	add	r3, r1
 800292a:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800292e:	2200      	movs	r2, #0
 8002930:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002932:	7bfa      	ldrb	r2, [r7, #15]
 8002934:	6879      	ldr	r1, [r7, #4]
 8002936:	4613      	mov	r3, r2
 8002938:	00db      	lsls	r3, r3, #3
 800293a:	4413      	add	r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	440b      	add	r3, r1
 8002940:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8002944:	2200      	movs	r2, #0
 8002946:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002948:	7bfa      	ldrb	r2, [r7, #15]
 800294a:	6879      	ldr	r1, [r7, #4]
 800294c:	4613      	mov	r3, r2
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	4413      	add	r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	440b      	add	r3, r1
 8002956:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800295a:	2200      	movs	r2, #0
 800295c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800295e:	7bfa      	ldrb	r2, [r7, #15]
 8002960:	6879      	ldr	r1, [r7, #4]
 8002962:	4613      	mov	r3, r2
 8002964:	00db      	lsls	r3, r3, #3
 8002966:	4413      	add	r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	440b      	add	r3, r1
 800296c:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8002970:	2200      	movs	r2, #0
 8002972:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002974:	7bfb      	ldrb	r3, [r7, #15]
 8002976:	3301      	adds	r3, #1
 8002978:	73fb      	strb	r3, [r7, #15]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	791b      	ldrb	r3, [r3, #4]
 800297e:	7bfa      	ldrb	r2, [r7, #15]
 8002980:	429a      	cmp	r2, r3
 8002982:	d3b5      	bcc.n	80028f0 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6818      	ldr	r0, [r3, #0]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	7c1a      	ldrb	r2, [r3, #16]
 800298c:	f88d 2000 	strb.w	r2, [sp]
 8002990:	3304      	adds	r3, #4
 8002992:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002994:	f002 ff58 	bl	8005848 <USB_DevInit>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d005      	beq.n	80029aa <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2202      	movs	r2, #2
 80029a2:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e00c      	b.n	80029c4 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4618      	mov	r0, r3
 80029be:	f003 ff9c 	bl	80068fa <USB_DevDisconnect>

  return HAL_OK;
 80029c2:	2300      	movs	r3, #0
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3710      	adds	r7, #16
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d101      	bne.n	80029e8 <HAL_PCD_Start+0x1c>
 80029e4:	2302      	movs	r3, #2
 80029e6:	e022      	b.n	8002a2e <HAL_PCD_Start+0x62>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d009      	beq.n	8002a10 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d105      	bne.n	8002a10 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a08:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f002 fea9 	bl	800576c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f003 ff4a 	bl	80068b8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3710      	adds	r7, #16
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002a36:	b590      	push	{r4, r7, lr}
 8002a38:	b08d      	sub	sp, #52	; 0x34
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a44:	6a3b      	ldr	r3, [r7, #32]
 8002a46:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f004 f808 	bl	8006a62 <USB_GetMode>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	f040 848c 	bne.w	8003372 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f003 ff6c 	bl	800693c <USB_ReadInterrupts>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	f000 8482 	beq.w	8003370 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	0a1b      	lsrs	r3, r3, #8
 8002a76:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4618      	mov	r0, r3
 8002a86:	f003 ff59 	bl	800693c <USB_ReadInterrupts>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	f003 0302 	and.w	r3, r3, #2
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d107      	bne.n	8002aa4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	695a      	ldr	r2, [r3, #20]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f002 0202 	and.w	r2, r2, #2
 8002aa2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f003 ff47 	bl	800693c <USB_ReadInterrupts>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	f003 0310 	and.w	r3, r3, #16
 8002ab4:	2b10      	cmp	r3, #16
 8002ab6:	d161      	bne.n	8002b7c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	699a      	ldr	r2, [r3, #24]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f022 0210 	bic.w	r2, r2, #16
 8002ac6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002ac8:	6a3b      	ldr	r3, [r7, #32]
 8002aca:	6a1b      	ldr	r3, [r3, #32]
 8002acc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	f003 020f 	and.w	r2, r3, #15
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	00db      	lsls	r3, r3, #3
 8002ad8:	4413      	add	r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	4413      	add	r3, r2
 8002ae4:	3304      	adds	r3, #4
 8002ae6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	0c5b      	lsrs	r3, r3, #17
 8002aec:	f003 030f 	and.w	r3, r3, #15
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d124      	bne.n	8002b3e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002afa:	4013      	ands	r3, r2
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d035      	beq.n	8002b6c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	091b      	lsrs	r3, r3, #4
 8002b08:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002b0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	461a      	mov	r2, r3
 8002b12:	6a38      	ldr	r0, [r7, #32]
 8002b14:	f003 fd7e 	bl	8006614 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	68da      	ldr	r2, [r3, #12]
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	091b      	lsrs	r3, r3, #4
 8002b20:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b24:	441a      	add	r2, r3
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	695a      	ldr	r2, [r3, #20]
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	091b      	lsrs	r3, r3, #4
 8002b32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b36:	441a      	add	r2, r3
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	615a      	str	r2, [r3, #20]
 8002b3c:	e016      	b.n	8002b6c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	0c5b      	lsrs	r3, r3, #17
 8002b42:	f003 030f 	and.w	r3, r3, #15
 8002b46:	2b06      	cmp	r3, #6
 8002b48:	d110      	bne.n	8002b6c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002b50:	2208      	movs	r2, #8
 8002b52:	4619      	mov	r1, r3
 8002b54:	6a38      	ldr	r0, [r7, #32]
 8002b56:	f003 fd5d 	bl	8006614 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	695a      	ldr	r2, [r3, #20]
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	091b      	lsrs	r3, r3, #4
 8002b62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b66:	441a      	add	r2, r3
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	699a      	ldr	r2, [r3, #24]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f042 0210 	orr.w	r2, r2, #16
 8002b7a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4618      	mov	r0, r3
 8002b82:	f003 fedb 	bl	800693c <USB_ReadInterrupts>
 8002b86:	4603      	mov	r3, r0
 8002b88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b8c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002b90:	f040 80a7 	bne.w	8002ce2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002b94:	2300      	movs	r3, #0
 8002b96:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f003 fee0 	bl	8006962 <USB_ReadDevAllOutEpInterrupt>
 8002ba2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002ba4:	e099      	b.n	8002cda <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba8:	f003 0301 	and.w	r3, r3, #1
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	f000 808e 	beq.w	8002cce <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bb8:	b2d2      	uxtb	r2, r2
 8002bba:	4611      	mov	r1, r2
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f003 ff04 	bl	80069ca <USB_ReadDevOutEPInterrupt>
 8002bc2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d00c      	beq.n	8002be8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd0:	015a      	lsls	r2, r3, #5
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bda:	461a      	mov	r2, r3
 8002bdc:	2301      	movs	r3, #1
 8002bde:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002be0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 fea2 	bl	800392c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	f003 0308 	and.w	r3, r3, #8
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d00c      	beq.n	8002c0c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf4:	015a      	lsls	r2, r3, #5
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bfe:	461a      	mov	r2, r3
 8002c00:	2308      	movs	r3, #8
 8002c02:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002c04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f000 ff78 	bl	8003afc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	f003 0310 	and.w	r3, r3, #16
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d008      	beq.n	8002c28 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c18:	015a      	lsls	r2, r3, #5
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	4413      	add	r3, r2
 8002c1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c22:	461a      	mov	r2, r3
 8002c24:	2310      	movs	r3, #16
 8002c26:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d030      	beq.n	8002c94 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002c32:	6a3b      	ldr	r3, [r7, #32]
 8002c34:	695b      	ldr	r3, [r3, #20]
 8002c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c3a:	2b80      	cmp	r3, #128	; 0x80
 8002c3c:	d109      	bne.n	8002c52 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	69fa      	ldr	r2, [r7, #28]
 8002c48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c4c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c50:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002c52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c54:	4613      	mov	r3, r2
 8002c56:	00db      	lsls	r3, r3, #3
 8002c58:	4413      	add	r3, r2
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	4413      	add	r3, r2
 8002c64:	3304      	adds	r3, #4
 8002c66:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	78db      	ldrb	r3, [r3, #3]
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d108      	bne.n	8002c82 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	2200      	movs	r2, #0
 8002c74:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f007 fd27 	bl	800a6d0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c84:	015a      	lsls	r2, r3, #5
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	4413      	add	r3, r2
 8002c8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c8e:	461a      	mov	r2, r3
 8002c90:	2302      	movs	r3, #2
 8002c92:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	f003 0320 	and.w	r3, r3, #32
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d008      	beq.n	8002cb0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca0:	015a      	lsls	r2, r3, #5
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	4413      	add	r3, r2
 8002ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002caa:	461a      	mov	r2, r3
 8002cac:	2320      	movs	r3, #32
 8002cae:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d009      	beq.n	8002cce <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbc:	015a      	lsls	r2, r3, #5
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	4413      	add	r3, r2
 8002cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ccc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd6:	085b      	lsrs	r3, r3, #1
 8002cd8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	f47f af62 	bne.w	8002ba6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f003 fe28 	bl	800693c <USB_ReadInterrupts>
 8002cec:	4603      	mov	r3, r0
 8002cee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cf2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002cf6:	f040 80db 	bne.w	8002eb0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f003 fe49 	bl	8006996 <USB_ReadDevAllInEpInterrupt>
 8002d04:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002d06:	2300      	movs	r3, #0
 8002d08:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002d0a:	e0cd      	b.n	8002ea8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d0e:	f003 0301 	and.w	r3, r3, #1
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	f000 80c2 	beq.w	8002e9c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d1e:	b2d2      	uxtb	r2, r2
 8002d20:	4611      	mov	r1, r2
 8002d22:	4618      	mov	r0, r3
 8002d24:	f003 fe6f 	bl	8006a06 <USB_ReadDevInEPInterrupt>
 8002d28:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	f003 0301 	and.w	r3, r3, #1
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d057      	beq.n	8002de4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d36:	f003 030f 	and.w	r3, r3, #15
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d40:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	43db      	mvns	r3, r3
 8002d4e:	69f9      	ldr	r1, [r7, #28]
 8002d50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002d54:	4013      	ands	r3, r2
 8002d56:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5a:	015a      	lsls	r2, r3, #5
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	4413      	add	r3, r2
 8002d60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d64:	461a      	mov	r2, r3
 8002d66:	2301      	movs	r3, #1
 8002d68:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	799b      	ldrb	r3, [r3, #6]
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d132      	bne.n	8002dd8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002d72:	6879      	ldr	r1, [r7, #4]
 8002d74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d76:	4613      	mov	r3, r2
 8002d78:	00db      	lsls	r3, r3, #3
 8002d7a:	4413      	add	r3, r2
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	440b      	add	r3, r1
 8002d80:	3320      	adds	r3, #32
 8002d82:	6819      	ldr	r1, [r3, #0]
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d88:	4613      	mov	r3, r2
 8002d8a:	00db      	lsls	r3, r3, #3
 8002d8c:	4413      	add	r3, r2
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	4403      	add	r3, r0
 8002d92:	331c      	adds	r3, #28
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4419      	add	r1, r3
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	00db      	lsls	r3, r3, #3
 8002da0:	4413      	add	r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	4403      	add	r3, r0
 8002da6:	3320      	adds	r3, #32
 8002da8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d113      	bne.n	8002dd8 <HAL_PCD_IRQHandler+0x3a2>
 8002db0:	6879      	ldr	r1, [r7, #4]
 8002db2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002db4:	4613      	mov	r3, r2
 8002db6:	00db      	lsls	r3, r3, #3
 8002db8:	4413      	add	r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	440b      	add	r3, r1
 8002dbe:	3324      	adds	r3, #36	; 0x24
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d108      	bne.n	8002dd8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6818      	ldr	r0, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	2101      	movs	r1, #1
 8002dd4:	f003 fe76 	bl	8006ac4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	4619      	mov	r1, r3
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f007 fbf1 	bl	800a5c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	f003 0308 	and.w	r3, r3, #8
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d008      	beq.n	8002e00 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df0:	015a      	lsls	r2, r3, #5
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	4413      	add	r3, r2
 8002df6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	2308      	movs	r3, #8
 8002dfe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	f003 0310 	and.w	r3, r3, #16
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d008      	beq.n	8002e1c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0c:	015a      	lsls	r2, r3, #5
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	4413      	add	r3, r2
 8002e12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e16:	461a      	mov	r2, r3
 8002e18:	2310      	movs	r3, #16
 8002e1a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d008      	beq.n	8002e38 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e28:	015a      	lsls	r2, r3, #5
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	4413      	add	r3, r2
 8002e2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e32:	461a      	mov	r2, r3
 8002e34:	2340      	movs	r3, #64	; 0x40
 8002e36:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d023      	beq.n	8002e8a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002e42:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e44:	6a38      	ldr	r0, [r7, #32]
 8002e46:	f002 fe63 	bl	8005b10 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002e4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	00db      	lsls	r3, r3, #3
 8002e50:	4413      	add	r3, r2
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	3310      	adds	r3, #16
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	4413      	add	r3, r2
 8002e5a:	3304      	adds	r3, #4
 8002e5c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	78db      	ldrb	r3, [r3, #3]
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d108      	bne.n	8002e78 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	4619      	mov	r1, r3
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f007 fc3e 	bl	800a6f4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7a:	015a      	lsls	r2, r3, #5
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	4413      	add	r3, r2
 8002e80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e84:	461a      	mov	r2, r3
 8002e86:	2302      	movs	r3, #2
 8002e88:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d003      	beq.n	8002e9c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002e94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 fcbb 	bl	8003812 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea4:	085b      	lsrs	r3, r3, #1
 8002ea6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	f47f af2e 	bne.w	8002d0c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f003 fd41 	bl	800693c <USB_ReadInterrupts>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002ec0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ec4:	d122      	bne.n	8002f0c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	69fa      	ldr	r2, [r7, #28]
 8002ed0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ed4:	f023 0301 	bic.w	r3, r3, #1
 8002ed8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d108      	bne.n	8002ef6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002eec:	2100      	movs	r1, #0
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f000 fea2 	bl	8003c38 <HAL_PCDEx_LPM_Callback>
 8002ef4:	e002      	b.n	8002efc <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f007 fbdc 	bl	800a6b4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	695a      	ldr	r2, [r3, #20]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002f0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4618      	mov	r0, r3
 8002f12:	f003 fd13 	bl	800693c <USB_ReadInterrupts>
 8002f16:	4603      	mov	r3, r0
 8002f18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f20:	d112      	bne.n	8002f48 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f003 0301 	and.w	r3, r3, #1
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d102      	bne.n	8002f38 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f007 fb98 	bl	800a668 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	695a      	ldr	r2, [r3, #20]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002f46:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f003 fcf5 	bl	800693c <USB_ReadInterrupts>
 8002f52:	4603      	mov	r3, r0
 8002f54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f5c:	f040 80b7 	bne.w	80030ce <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	69fa      	ldr	r2, [r7, #28]
 8002f6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f6e:	f023 0301 	bic.w	r3, r3, #1
 8002f72:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2110      	movs	r1, #16
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f002 fdc8 	bl	8005b10 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f80:	2300      	movs	r3, #0
 8002f82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f84:	e046      	b.n	8003014 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f88:	015a      	lsls	r2, r3, #5
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f92:	461a      	mov	r2, r3
 8002f94:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002f98:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f9c:	015a      	lsls	r2, r3, #5
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002faa:	0151      	lsls	r1, r2, #5
 8002fac:	69fa      	ldr	r2, [r7, #28]
 8002fae:	440a      	add	r2, r1
 8002fb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002fb4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002fb8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fbc:	015a      	lsls	r2, r3, #5
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002fcc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fd0:	015a      	lsls	r2, r3, #5
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fde:	0151      	lsls	r1, r2, #5
 8002fe0:	69fa      	ldr	r2, [r7, #28]
 8002fe2:	440a      	add	r2, r1
 8002fe4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002fe8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002fec:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ff0:	015a      	lsls	r2, r3, #5
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ffe:	0151      	lsls	r1, r2, #5
 8003000:	69fa      	ldr	r2, [r7, #28]
 8003002:	440a      	add	r2, r1
 8003004:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003008:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800300c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800300e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003010:	3301      	adds	r3, #1
 8003012:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	791b      	ldrb	r3, [r3, #4]
 8003018:	461a      	mov	r2, r3
 800301a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800301c:	4293      	cmp	r3, r2
 800301e:	d3b2      	bcc.n	8002f86 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003026:	69db      	ldr	r3, [r3, #28]
 8003028:	69fa      	ldr	r2, [r7, #28]
 800302a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800302e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003032:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	7bdb      	ldrb	r3, [r3, #15]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d016      	beq.n	800306a <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003042:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003046:	69fa      	ldr	r2, [r7, #28]
 8003048:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800304c:	f043 030b 	orr.w	r3, r3, #11
 8003050:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800305a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800305c:	69fa      	ldr	r2, [r7, #28]
 800305e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003062:	f043 030b 	orr.w	r3, r3, #11
 8003066:	6453      	str	r3, [r2, #68]	; 0x44
 8003068:	e015      	b.n	8003096 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003070:	695b      	ldr	r3, [r3, #20]
 8003072:	69fa      	ldr	r2, [r7, #28]
 8003074:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003078:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800307c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003080:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	69fa      	ldr	r2, [r7, #28]
 800308c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003090:	f043 030b 	orr.w	r3, r3, #11
 8003094:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	69fa      	ldr	r2, [r7, #28]
 80030a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030a4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80030a8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6818      	ldr	r0, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80030b8:	461a      	mov	r2, r3
 80030ba:	f003 fd03 	bl	8006ac4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	695a      	ldr	r2, [r3, #20]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80030cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f003 fc32 	bl	800693c <USB_ReadInterrupts>
 80030d8:	4603      	mov	r3, r0
 80030da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030e2:	d123      	bne.n	800312c <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4618      	mov	r0, r3
 80030ea:	f003 fcc8 	bl	8006a7e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4618      	mov	r0, r3
 80030f4:	f002 fd85 	bl	8005c02 <USB_GetDevSpeed>
 80030f8:	4603      	mov	r3, r0
 80030fa:	461a      	mov	r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681c      	ldr	r4, [r3, #0]
 8003104:	f001 f9c8 	bl	8004498 <HAL_RCC_GetHCLKFreq>
 8003108:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800310e:	461a      	mov	r2, r3
 8003110:	4620      	mov	r0, r4
 8003112:	f002 fa89 	bl	8005628 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f007 fa7d 	bl	800a616 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	695a      	ldr	r2, [r3, #20]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800312a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4618      	mov	r0, r3
 8003132:	f003 fc03 	bl	800693c <USB_ReadInterrupts>
 8003136:	4603      	mov	r3, r0
 8003138:	f003 0308 	and.w	r3, r3, #8
 800313c:	2b08      	cmp	r3, #8
 800313e:	d10a      	bne.n	8003156 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f007 fa5a 	bl	800a5fa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	695a      	ldr	r2, [r3, #20]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f002 0208 	and.w	r2, r2, #8
 8003154:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4618      	mov	r0, r3
 800315c:	f003 fbee 	bl	800693c <USB_ReadInterrupts>
 8003160:	4603      	mov	r3, r0
 8003162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003166:	2b80      	cmp	r3, #128	; 0x80
 8003168:	d123      	bne.n	80031b2 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800316a:	6a3b      	ldr	r3, [r7, #32]
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003172:	6a3b      	ldr	r3, [r7, #32]
 8003174:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003176:	2301      	movs	r3, #1
 8003178:	627b      	str	r3, [r7, #36]	; 0x24
 800317a:	e014      	b.n	80031a6 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800317c:	6879      	ldr	r1, [r7, #4]
 800317e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003180:	4613      	mov	r3, r2
 8003182:	00db      	lsls	r3, r3, #3
 8003184:	4413      	add	r3, r2
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	440b      	add	r3, r1
 800318a:	f203 2357 	addw	r3, r3, #599	; 0x257
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	2b01      	cmp	r3, #1
 8003192:	d105      	bne.n	80031a0 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003196:	b2db      	uxtb	r3, r3
 8003198:	4619      	mov	r1, r3
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 fb08 	bl	80037b0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80031a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a2:	3301      	adds	r3, #1
 80031a4:	627b      	str	r3, [r7, #36]	; 0x24
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	791b      	ldrb	r3, [r3, #4]
 80031aa:	461a      	mov	r2, r3
 80031ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d3e4      	bcc.n	800317c <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f003 fbc0 	bl	800693c <USB_ReadInterrupts>
 80031bc:	4603      	mov	r3, r0
 80031be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031c6:	d13c      	bne.n	8003242 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80031c8:	2301      	movs	r3, #1
 80031ca:	627b      	str	r3, [r7, #36]	; 0x24
 80031cc:	e02b      	b.n	8003226 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80031ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d0:	015a      	lsls	r2, r3, #5
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	4413      	add	r3, r2
 80031d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80031de:	6879      	ldr	r1, [r7, #4]
 80031e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031e2:	4613      	mov	r3, r2
 80031e4:	00db      	lsls	r3, r3, #3
 80031e6:	4413      	add	r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	440b      	add	r3, r1
 80031ec:	3318      	adds	r3, #24
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d115      	bne.n	8003220 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80031f4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	da12      	bge.n	8003220 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80031fa:	6879      	ldr	r1, [r7, #4]
 80031fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031fe:	4613      	mov	r3, r2
 8003200:	00db      	lsls	r3, r3, #3
 8003202:	4413      	add	r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	440b      	add	r3, r1
 8003208:	3317      	adds	r3, #23
 800320a:	2201      	movs	r2, #1
 800320c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800320e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003210:	b2db      	uxtb	r3, r3
 8003212:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003216:	b2db      	uxtb	r3, r3
 8003218:	4619      	mov	r1, r3
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f000 fac8 	bl	80037b0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003222:	3301      	adds	r3, #1
 8003224:	627b      	str	r3, [r7, #36]	; 0x24
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	791b      	ldrb	r3, [r3, #4]
 800322a:	461a      	mov	r2, r3
 800322c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322e:	4293      	cmp	r3, r2
 8003230:	d3cd      	bcc.n	80031ce <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	695a      	ldr	r2, [r3, #20]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003240:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4618      	mov	r0, r3
 8003248:	f003 fb78 	bl	800693c <USB_ReadInterrupts>
 800324c:	4603      	mov	r3, r0
 800324e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003252:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003256:	d156      	bne.n	8003306 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003258:	2301      	movs	r3, #1
 800325a:	627b      	str	r3, [r7, #36]	; 0x24
 800325c:	e045      	b.n	80032ea <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800325e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003260:	015a      	lsls	r2, r3, #5
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	4413      	add	r3, r2
 8003266:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800326e:	6879      	ldr	r1, [r7, #4]
 8003270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003272:	4613      	mov	r3, r2
 8003274:	00db      	lsls	r3, r3, #3
 8003276:	4413      	add	r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	440b      	add	r3, r1
 800327c:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	2b01      	cmp	r3, #1
 8003284:	d12e      	bne.n	80032e4 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003286:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003288:	2b00      	cmp	r3, #0
 800328a:	da2b      	bge.n	80032e4 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8003298:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800329c:	429a      	cmp	r2, r3
 800329e:	d121      	bne.n	80032e4 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80032a0:	6879      	ldr	r1, [r7, #4]
 80032a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032a4:	4613      	mov	r3, r2
 80032a6:	00db      	lsls	r3, r3, #3
 80032a8:	4413      	add	r3, r2
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	440b      	add	r3, r1
 80032ae:	f203 2357 	addw	r3, r3, #599	; 0x257
 80032b2:	2201      	movs	r2, #1
 80032b4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80032b6:	6a3b      	ldr	r3, [r7, #32]
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80032be:	6a3b      	ldr	r3, [r7, #32]
 80032c0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80032c2:	6a3b      	ldr	r3, [r7, #32]
 80032c4:	695b      	ldr	r3, [r3, #20]
 80032c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d10a      	bne.n	80032e4 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	69fa      	ldr	r2, [r7, #28]
 80032d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032e0:	6053      	str	r3, [r2, #4]
            break;
 80032e2:	e008      	b.n	80032f6 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80032e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e6:	3301      	adds	r3, #1
 80032e8:	627b      	str	r3, [r7, #36]	; 0x24
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	791b      	ldrb	r3, [r3, #4]
 80032ee:	461a      	mov	r2, r3
 80032f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d3b3      	bcc.n	800325e <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	695a      	ldr	r2, [r3, #20]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003304:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4618      	mov	r0, r3
 800330c:	f003 fb16 	bl	800693c <USB_ReadInterrupts>
 8003310:	4603      	mov	r3, r0
 8003312:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003316:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800331a:	d10a      	bne.n	8003332 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f007 f9fb 	bl	800a718 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	695a      	ldr	r2, [r3, #20]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003330:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4618      	mov	r0, r3
 8003338:	f003 fb00 	bl	800693c <USB_ReadInterrupts>
 800333c:	4603      	mov	r3, r0
 800333e:	f003 0304 	and.w	r3, r3, #4
 8003342:	2b04      	cmp	r3, #4
 8003344:	d115      	bne.n	8003372 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	f003 0304 	and.w	r3, r3, #4
 8003354:	2b00      	cmp	r3, #0
 8003356:	d002      	beq.n	800335e <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f007 f9eb 	bl	800a734 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	6859      	ldr	r1, [r3, #4]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	69ba      	ldr	r2, [r7, #24]
 800336a:	430a      	orrs	r2, r1
 800336c:	605a      	str	r2, [r3, #4]
 800336e:	e000      	b.n	8003372 <HAL_PCD_IRQHandler+0x93c>
      return;
 8003370:	bf00      	nop
    }
  }
}
 8003372:	3734      	adds	r7, #52	; 0x34
 8003374:	46bd      	mov	sp, r7
 8003376:	bd90      	pop	{r4, r7, pc}

08003378 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	460b      	mov	r3, r1
 8003382:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800338a:	2b01      	cmp	r3, #1
 800338c:	d101      	bne.n	8003392 <HAL_PCD_SetAddress+0x1a>
 800338e:	2302      	movs	r3, #2
 8003390:	e012      	b.n	80033b8 <HAL_PCD_SetAddress+0x40>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2201      	movs	r2, #1
 8003396:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	78fa      	ldrb	r2, [r7, #3]
 800339e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	78fa      	ldrb	r2, [r7, #3]
 80033a6:	4611      	mov	r1, r2
 80033a8:	4618      	mov	r0, r3
 80033aa:	f003 fa5f 	bl	800686c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3708      	adds	r7, #8
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	4608      	mov	r0, r1
 80033ca:	4611      	mov	r1, r2
 80033cc:	461a      	mov	r2, r3
 80033ce:	4603      	mov	r3, r0
 80033d0:	70fb      	strb	r3, [r7, #3]
 80033d2:	460b      	mov	r3, r1
 80033d4:	803b      	strh	r3, [r7, #0]
 80033d6:	4613      	mov	r3, r2
 80033d8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80033da:	2300      	movs	r3, #0
 80033dc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80033de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	da0f      	bge.n	8003406 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033e6:	78fb      	ldrb	r3, [r7, #3]
 80033e8:	f003 020f 	and.w	r2, r3, #15
 80033ec:	4613      	mov	r3, r2
 80033ee:	00db      	lsls	r3, r3, #3
 80033f0:	4413      	add	r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	3310      	adds	r3, #16
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	4413      	add	r3, r2
 80033fa:	3304      	adds	r3, #4
 80033fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2201      	movs	r2, #1
 8003402:	705a      	strb	r2, [r3, #1]
 8003404:	e00f      	b.n	8003426 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003406:	78fb      	ldrb	r3, [r7, #3]
 8003408:	f003 020f 	and.w	r2, r3, #15
 800340c:	4613      	mov	r3, r2
 800340e:	00db      	lsls	r3, r3, #3
 8003410:	4413      	add	r3, r2
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	4413      	add	r3, r2
 800341c:	3304      	adds	r3, #4
 800341e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2200      	movs	r2, #0
 8003424:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003426:	78fb      	ldrb	r3, [r7, #3]
 8003428:	f003 030f 	and.w	r3, r3, #15
 800342c:	b2da      	uxtb	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003432:	883a      	ldrh	r2, [r7, #0]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	78ba      	ldrb	r2, [r7, #2]
 800343c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	785b      	ldrb	r3, [r3, #1]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d004      	beq.n	8003450 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	b29a      	uxth	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003450:	78bb      	ldrb	r3, [r7, #2]
 8003452:	2b02      	cmp	r3, #2
 8003454:	d102      	bne.n	800345c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2200      	movs	r2, #0
 800345a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003462:	2b01      	cmp	r3, #1
 8003464:	d101      	bne.n	800346a <HAL_PCD_EP_Open+0xaa>
 8003466:	2302      	movs	r3, #2
 8003468:	e00e      	b.n	8003488 <HAL_PCD_EP_Open+0xc8>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68f9      	ldr	r1, [r7, #12]
 8003478:	4618      	mov	r0, r3
 800347a:	f002 fbe7 	bl	8005c4c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8003486:	7afb      	ldrb	r3, [r7, #11]
}
 8003488:	4618      	mov	r0, r3
 800348a:	3710      	adds	r7, #16
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}

08003490 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	460b      	mov	r3, r1
 800349a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800349c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	da0f      	bge.n	80034c4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034a4:	78fb      	ldrb	r3, [r7, #3]
 80034a6:	f003 020f 	and.w	r2, r3, #15
 80034aa:	4613      	mov	r3, r2
 80034ac:	00db      	lsls	r3, r3, #3
 80034ae:	4413      	add	r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	3310      	adds	r3, #16
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	4413      	add	r3, r2
 80034b8:	3304      	adds	r3, #4
 80034ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2201      	movs	r2, #1
 80034c0:	705a      	strb	r2, [r3, #1]
 80034c2:	e00f      	b.n	80034e4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034c4:	78fb      	ldrb	r3, [r7, #3]
 80034c6:	f003 020f 	and.w	r2, r3, #15
 80034ca:	4613      	mov	r3, r2
 80034cc:	00db      	lsls	r3, r3, #3
 80034ce:	4413      	add	r3, r2
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	4413      	add	r3, r2
 80034da:	3304      	adds	r3, #4
 80034dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80034e4:	78fb      	ldrb	r3, [r7, #3]
 80034e6:	f003 030f 	and.w	r3, r3, #15
 80034ea:	b2da      	uxtb	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d101      	bne.n	80034fe <HAL_PCD_EP_Close+0x6e>
 80034fa:	2302      	movs	r3, #2
 80034fc:	e00e      	b.n	800351c <HAL_PCD_EP_Close+0x8c>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2201      	movs	r2, #1
 8003502:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68f9      	ldr	r1, [r7, #12]
 800350c:	4618      	mov	r0, r3
 800350e:	f002 fc25 	bl	8005d5c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 800351a:	2300      	movs	r3, #0
}
 800351c:	4618      	mov	r0, r3
 800351e:	3710      	adds	r7, #16
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b086      	sub	sp, #24
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	607a      	str	r2, [r7, #4]
 800352e:	603b      	str	r3, [r7, #0]
 8003530:	460b      	mov	r3, r1
 8003532:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003534:	7afb      	ldrb	r3, [r7, #11]
 8003536:	f003 020f 	and.w	r2, r3, #15
 800353a:	4613      	mov	r3, r2
 800353c:	00db      	lsls	r3, r3, #3
 800353e:	4413      	add	r3, r2
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003546:	68fa      	ldr	r2, [r7, #12]
 8003548:	4413      	add	r3, r2
 800354a:	3304      	adds	r3, #4
 800354c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	683a      	ldr	r2, [r7, #0]
 8003558:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	2200      	movs	r2, #0
 800355e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	2200      	movs	r2, #0
 8003564:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003566:	7afb      	ldrb	r3, [r7, #11]
 8003568:	f003 030f 	and.w	r3, r3, #15
 800356c:	b2da      	uxtb	r2, r3
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	799b      	ldrb	r3, [r3, #6]
 8003576:	2b01      	cmp	r3, #1
 8003578:	d102      	bne.n	8003580 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6818      	ldr	r0, [r3, #0]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	799b      	ldrb	r3, [r3, #6]
 8003588:	461a      	mov	r2, r3
 800358a:	6979      	ldr	r1, [r7, #20]
 800358c:	f002 fcc2 	bl	8005f14 <USB_EPStartXfer>

  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3718      	adds	r7, #24
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800359a:	b480      	push	{r7}
 800359c:	b083      	sub	sp, #12
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
 80035a2:	460b      	mov	r3, r1
 80035a4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80035a6:	78fb      	ldrb	r3, [r7, #3]
 80035a8:	f003 020f 	and.w	r2, r3, #15
 80035ac:	6879      	ldr	r1, [r7, #4]
 80035ae:	4613      	mov	r3, r2
 80035b0:	00db      	lsls	r3, r3, #3
 80035b2:	4413      	add	r3, r2
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	440b      	add	r3, r1
 80035b8:	f503 731a 	add.w	r3, r3, #616	; 0x268
 80035bc:	681b      	ldr	r3, [r3, #0]
}
 80035be:	4618      	mov	r0, r3
 80035c0:	370c      	adds	r7, #12
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr

080035ca <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b086      	sub	sp, #24
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	60f8      	str	r0, [r7, #12]
 80035d2:	607a      	str	r2, [r7, #4]
 80035d4:	603b      	str	r3, [r7, #0]
 80035d6:	460b      	mov	r3, r1
 80035d8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035da:	7afb      	ldrb	r3, [r7, #11]
 80035dc:	f003 020f 	and.w	r2, r3, #15
 80035e0:	4613      	mov	r3, r2
 80035e2:	00db      	lsls	r3, r3, #3
 80035e4:	4413      	add	r3, r2
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	3310      	adds	r3, #16
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	4413      	add	r3, r2
 80035ee:	3304      	adds	r3, #4
 80035f0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	683a      	ldr	r2, [r7, #0]
 80035fc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	2200      	movs	r2, #0
 8003602:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	2201      	movs	r2, #1
 8003608:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800360a:	7afb      	ldrb	r3, [r7, #11]
 800360c:	f003 030f 	and.w	r3, r3, #15
 8003610:	b2da      	uxtb	r2, r3
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	799b      	ldrb	r3, [r3, #6]
 800361a:	2b01      	cmp	r3, #1
 800361c:	d102      	bne.n	8003624 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6818      	ldr	r0, [r3, #0]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	799b      	ldrb	r3, [r3, #6]
 800362c:	461a      	mov	r2, r3
 800362e:	6979      	ldr	r1, [r7, #20]
 8003630:	f002 fc70 	bl	8005f14 <USB_EPStartXfer>

  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3718      	adds	r7, #24
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}

0800363e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800363e:	b580      	push	{r7, lr}
 8003640:	b084      	sub	sp, #16
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
 8003646:	460b      	mov	r3, r1
 8003648:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800364a:	78fb      	ldrb	r3, [r7, #3]
 800364c:	f003 030f 	and.w	r3, r3, #15
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	7912      	ldrb	r2, [r2, #4]
 8003654:	4293      	cmp	r3, r2
 8003656:	d901      	bls.n	800365c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e04f      	b.n	80036fc <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800365c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003660:	2b00      	cmp	r3, #0
 8003662:	da0f      	bge.n	8003684 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003664:	78fb      	ldrb	r3, [r7, #3]
 8003666:	f003 020f 	and.w	r2, r3, #15
 800366a:	4613      	mov	r3, r2
 800366c:	00db      	lsls	r3, r3, #3
 800366e:	4413      	add	r3, r2
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	3310      	adds	r3, #16
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	4413      	add	r3, r2
 8003678:	3304      	adds	r3, #4
 800367a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2201      	movs	r2, #1
 8003680:	705a      	strb	r2, [r3, #1]
 8003682:	e00d      	b.n	80036a0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003684:	78fa      	ldrb	r2, [r7, #3]
 8003686:	4613      	mov	r3, r2
 8003688:	00db      	lsls	r3, r3, #3
 800368a:	4413      	add	r3, r2
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	4413      	add	r3, r2
 8003696:	3304      	adds	r3, #4
 8003698:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2200      	movs	r2, #0
 800369e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2201      	movs	r2, #1
 80036a4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036a6:	78fb      	ldrb	r3, [r7, #3]
 80036a8:	f003 030f 	and.w	r3, r3, #15
 80036ac:	b2da      	uxtb	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d101      	bne.n	80036c0 <HAL_PCD_EP_SetStall+0x82>
 80036bc:	2302      	movs	r3, #2
 80036be:	e01d      	b.n	80036fc <HAL_PCD_EP_SetStall+0xbe>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68f9      	ldr	r1, [r7, #12]
 80036ce:	4618      	mov	r0, r3
 80036d0:	f002 fff8 	bl	80066c4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80036d4:	78fb      	ldrb	r3, [r7, #3]
 80036d6:	f003 030f 	and.w	r3, r3, #15
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d109      	bne.n	80036f2 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6818      	ldr	r0, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	7999      	ldrb	r1, [r3, #6]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80036ec:	461a      	mov	r2, r3
 80036ee:	f003 f9e9 	bl	8006ac4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3710      	adds	r7, #16
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	460b      	mov	r3, r1
 800370e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003710:	78fb      	ldrb	r3, [r7, #3]
 8003712:	f003 030f 	and.w	r3, r3, #15
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	7912      	ldrb	r2, [r2, #4]
 800371a:	4293      	cmp	r3, r2
 800371c:	d901      	bls.n	8003722 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e042      	b.n	80037a8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003722:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003726:	2b00      	cmp	r3, #0
 8003728:	da0f      	bge.n	800374a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800372a:	78fb      	ldrb	r3, [r7, #3]
 800372c:	f003 020f 	and.w	r2, r3, #15
 8003730:	4613      	mov	r3, r2
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	4413      	add	r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	3310      	adds	r3, #16
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	4413      	add	r3, r2
 800373e:	3304      	adds	r3, #4
 8003740:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2201      	movs	r2, #1
 8003746:	705a      	strb	r2, [r3, #1]
 8003748:	e00f      	b.n	800376a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800374a:	78fb      	ldrb	r3, [r7, #3]
 800374c:	f003 020f 	and.w	r2, r3, #15
 8003750:	4613      	mov	r3, r2
 8003752:	00db      	lsls	r3, r3, #3
 8003754:	4413      	add	r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	4413      	add	r3, r2
 8003760:	3304      	adds	r3, #4
 8003762:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2200      	movs	r2, #0
 8003768:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2200      	movs	r2, #0
 800376e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003770:	78fb      	ldrb	r3, [r7, #3]
 8003772:	f003 030f 	and.w	r3, r3, #15
 8003776:	b2da      	uxtb	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003782:	2b01      	cmp	r3, #1
 8003784:	d101      	bne.n	800378a <HAL_PCD_EP_ClrStall+0x86>
 8003786:	2302      	movs	r3, #2
 8003788:	e00e      	b.n	80037a8 <HAL_PCD_EP_ClrStall+0xa4>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2201      	movs	r2, #1
 800378e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68f9      	ldr	r1, [r7, #12]
 8003798:	4618      	mov	r0, r3
 800379a:	f003 f801 	bl	80067a0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80037a6:	2300      	movs	r3, #0
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3710      	adds	r7, #16
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	460b      	mov	r3, r1
 80037ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80037bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	da0c      	bge.n	80037de <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037c4:	78fb      	ldrb	r3, [r7, #3]
 80037c6:	f003 020f 	and.w	r2, r3, #15
 80037ca:	4613      	mov	r3, r2
 80037cc:	00db      	lsls	r3, r3, #3
 80037ce:	4413      	add	r3, r2
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	3310      	adds	r3, #16
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	4413      	add	r3, r2
 80037d8:	3304      	adds	r3, #4
 80037da:	60fb      	str	r3, [r7, #12]
 80037dc:	e00c      	b.n	80037f8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037de:	78fb      	ldrb	r3, [r7, #3]
 80037e0:	f003 020f 	and.w	r2, r3, #15
 80037e4:	4613      	mov	r3, r2
 80037e6:	00db      	lsls	r3, r3, #3
 80037e8:	4413      	add	r3, r2
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	4413      	add	r3, r2
 80037f4:	3304      	adds	r3, #4
 80037f6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68f9      	ldr	r1, [r7, #12]
 80037fe:	4618      	mov	r0, r3
 8003800:	f002 fe20 	bl	8006444 <USB_EPStopXfer>
 8003804:	4603      	mov	r3, r0
 8003806:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003808:	7afb      	ldrb	r3, [r7, #11]
}
 800380a:	4618      	mov	r0, r3
 800380c:	3710      	adds	r7, #16
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}

08003812 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003812:	b580      	push	{r7, lr}
 8003814:	b08a      	sub	sp, #40	; 0x28
 8003816:	af02      	add	r7, sp, #8
 8003818:	6078      	str	r0, [r7, #4]
 800381a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003826:	683a      	ldr	r2, [r7, #0]
 8003828:	4613      	mov	r3, r2
 800382a:	00db      	lsls	r3, r3, #3
 800382c:	4413      	add	r3, r2
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	3310      	adds	r3, #16
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	4413      	add	r3, r2
 8003836:	3304      	adds	r3, #4
 8003838:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	695a      	ldr	r2, [r3, #20]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	429a      	cmp	r2, r3
 8003844:	d901      	bls.n	800384a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e06b      	b.n	8003922 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	691a      	ldr	r2, [r3, #16]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	69fa      	ldr	r2, [r7, #28]
 800385c:	429a      	cmp	r2, r3
 800385e:	d902      	bls.n	8003866 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	3303      	adds	r3, #3
 800386a:	089b      	lsrs	r3, r3, #2
 800386c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800386e:	e02a      	b.n	80038c6 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	691a      	ldr	r2, [r3, #16]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	695b      	ldr	r3, [r3, #20]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	69fa      	ldr	r2, [r7, #28]
 8003882:	429a      	cmp	r2, r3
 8003884:	d902      	bls.n	800388c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	3303      	adds	r3, #3
 8003890:	089b      	lsrs	r3, r3, #2
 8003892:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	68d9      	ldr	r1, [r3, #12]
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	b2da      	uxtb	r2, r3
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80038a4:	9300      	str	r3, [sp, #0]
 80038a6:	4603      	mov	r3, r0
 80038a8:	6978      	ldr	r0, [r7, #20]
 80038aa:	f002 fe75 	bl	8006598 <USB_WritePacket>

    ep->xfer_buff  += len;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	68da      	ldr	r2, [r3, #12]
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	441a      	add	r2, r3
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	695a      	ldr	r2, [r3, #20]
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	441a      	add	r2, r3
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	015a      	lsls	r2, r3, #5
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	4413      	add	r3, r2
 80038ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038d2:	699b      	ldr	r3, [r3, #24]
 80038d4:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80038d6:	69ba      	ldr	r2, [r7, #24]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d809      	bhi.n	80038f0 <PCD_WriteEmptyTxFifo+0xde>
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	695a      	ldr	r2, [r3, #20]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d203      	bcs.n	80038f0 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	691b      	ldr	r3, [r3, #16]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d1bf      	bne.n	8003870 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	691a      	ldr	r2, [r3, #16]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	695b      	ldr	r3, [r3, #20]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d811      	bhi.n	8003920 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	f003 030f 	and.w	r3, r3, #15
 8003902:	2201      	movs	r2, #1
 8003904:	fa02 f303 	lsl.w	r3, r2, r3
 8003908:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003910:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	43db      	mvns	r3, r3
 8003916:	6939      	ldr	r1, [r7, #16]
 8003918:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800391c:	4013      	ands	r3, r2
 800391e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003920:	2300      	movs	r3, #0
}
 8003922:	4618      	mov	r0, r3
 8003924:	3720      	adds	r7, #32
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
	...

0800392c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b088      	sub	sp, #32
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	333c      	adds	r3, #60	; 0x3c
 8003944:	3304      	adds	r3, #4
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	015a      	lsls	r2, r3, #5
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	4413      	add	r3, r2
 8003952:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	799b      	ldrb	r3, [r3, #6]
 800395e:	2b01      	cmp	r3, #1
 8003960:	d17b      	bne.n	8003a5a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	f003 0308 	and.w	r3, r3, #8
 8003968:	2b00      	cmp	r3, #0
 800396a:	d015      	beq.n	8003998 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	4a61      	ldr	r2, [pc, #388]	; (8003af4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003970:	4293      	cmp	r3, r2
 8003972:	f240 80b9 	bls.w	8003ae8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800397c:	2b00      	cmp	r3, #0
 800397e:	f000 80b3 	beq.w	8003ae8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	015a      	lsls	r2, r3, #5
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	4413      	add	r3, r2
 800398a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800398e:	461a      	mov	r2, r3
 8003990:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003994:	6093      	str	r3, [r2, #8]
 8003996:	e0a7      	b.n	8003ae8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	f003 0320 	and.w	r3, r3, #32
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d009      	beq.n	80039b6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	015a      	lsls	r2, r3, #5
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	4413      	add	r3, r2
 80039aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039ae:	461a      	mov	r2, r3
 80039b0:	2320      	movs	r3, #32
 80039b2:	6093      	str	r3, [r2, #8]
 80039b4:	e098      	b.n	8003ae8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80039bc:	2b00      	cmp	r3, #0
 80039be:	f040 8093 	bne.w	8003ae8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	4a4b      	ldr	r2, [pc, #300]	; (8003af4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d90f      	bls.n	80039ea <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d00a      	beq.n	80039ea <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	015a      	lsls	r2, r3, #5
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	4413      	add	r3, r2
 80039dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039e0:	461a      	mov	r2, r3
 80039e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039e6:	6093      	str	r3, [r2, #8]
 80039e8:	e07e      	b.n	8003ae8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80039ea:	683a      	ldr	r2, [r7, #0]
 80039ec:	4613      	mov	r3, r2
 80039ee:	00db      	lsls	r3, r3, #3
 80039f0:	4413      	add	r3, r2
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	4413      	add	r3, r2
 80039fc:	3304      	adds	r3, #4
 80039fe:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6a1a      	ldr	r2, [r3, #32]
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	0159      	lsls	r1, r3, #5
 8003a08:	69bb      	ldr	r3, [r7, #24]
 8003a0a:	440b      	add	r3, r1
 8003a0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a16:	1ad2      	subs	r2, r2, r3
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d114      	bne.n	8003a4c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	691b      	ldr	r3, [r3, #16]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d109      	bne.n	8003a3e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6818      	ldr	r0, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003a34:	461a      	mov	r2, r3
 8003a36:	2101      	movs	r1, #1
 8003a38:	f003 f844 	bl	8006ac4 <USB_EP0_OutStart>
 8003a3c:	e006      	b.n	8003a4c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	68da      	ldr	r2, [r3, #12]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	695b      	ldr	r3, [r3, #20]
 8003a46:	441a      	add	r2, r3
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	4619      	mov	r1, r3
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f006 fd9c 	bl	800a590 <HAL_PCD_DataOutStageCallback>
 8003a58:	e046      	b.n	8003ae8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	4a26      	ldr	r2, [pc, #152]	; (8003af8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d124      	bne.n	8003aac <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d00a      	beq.n	8003a82 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	015a      	lsls	r2, r3, #5
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	4413      	add	r3, r2
 8003a74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a78:	461a      	mov	r2, r3
 8003a7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a7e:	6093      	str	r3, [r2, #8]
 8003a80:	e032      	b.n	8003ae8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	f003 0320 	and.w	r3, r3, #32
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d008      	beq.n	8003a9e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	015a      	lsls	r2, r3, #5
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	4413      	add	r3, r2
 8003a94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a98:	461a      	mov	r2, r3
 8003a9a:	2320      	movs	r3, #32
 8003a9c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f006 fd73 	bl	800a590 <HAL_PCD_DataOutStageCallback>
 8003aaa:	e01d      	b.n	8003ae8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d114      	bne.n	8003adc <PCD_EP_OutXfrComplete_int+0x1b0>
 8003ab2:	6879      	ldr	r1, [r7, #4]
 8003ab4:	683a      	ldr	r2, [r7, #0]
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	00db      	lsls	r3, r3, #3
 8003aba:	4413      	add	r3, r2
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	440b      	add	r3, r1
 8003ac0:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d108      	bne.n	8003adc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6818      	ldr	r0, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	2100      	movs	r1, #0
 8003ad8:	f002 fff4 	bl	8006ac4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f006 fd54 	bl	800a590 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3720      	adds	r7, #32
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	4f54300a 	.word	0x4f54300a
 8003af8:	4f54310a 	.word	0x4f54310a

08003afc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b086      	sub	sp, #24
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	333c      	adds	r3, #60	; 0x3c
 8003b14:	3304      	adds	r3, #4
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	015a      	lsls	r2, r3, #5
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	4413      	add	r3, r2
 8003b22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	4a15      	ldr	r2, [pc, #84]	; (8003b84 <PCD_EP_OutSetupPacket_int+0x88>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d90e      	bls.n	8003b50 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d009      	beq.n	8003b50 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	015a      	lsls	r2, r3, #5
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	4413      	add	r3, r2
 8003b44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b48:	461a      	mov	r2, r3
 8003b4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b4e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f006 fd0b 	bl	800a56c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	4a0a      	ldr	r2, [pc, #40]	; (8003b84 <PCD_EP_OutSetupPacket_int+0x88>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d90c      	bls.n	8003b78 <PCD_EP_OutSetupPacket_int+0x7c>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	799b      	ldrb	r3, [r3, #6]
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d108      	bne.n	8003b78 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6818      	ldr	r0, [r3, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003b70:	461a      	mov	r2, r3
 8003b72:	2101      	movs	r1, #1
 8003b74:	f002 ffa6 	bl	8006ac4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3718      	adds	r7, #24
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	4f54300a 	.word	0x4f54300a

08003b88 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b085      	sub	sp, #20
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	460b      	mov	r3, r1
 8003b92:	70fb      	strb	r3, [r7, #3]
 8003b94:	4613      	mov	r3, r2
 8003b96:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003ba0:	78fb      	ldrb	r3, [r7, #3]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d107      	bne.n	8003bb6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003ba6:	883b      	ldrh	r3, [r7, #0]
 8003ba8:	0419      	lsls	r1, r3, #16
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	68ba      	ldr	r2, [r7, #8]
 8003bb0:	430a      	orrs	r2, r1
 8003bb2:	629a      	str	r2, [r3, #40]	; 0x28
 8003bb4:	e028      	b.n	8003c08 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bbc:	0c1b      	lsrs	r3, r3, #16
 8003bbe:	68ba      	ldr	r2, [r7, #8]
 8003bc0:	4413      	add	r3, r2
 8003bc2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	73fb      	strb	r3, [r7, #15]
 8003bc8:	e00d      	b.n	8003be6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	7bfb      	ldrb	r3, [r7, #15]
 8003bd0:	3340      	adds	r3, #64	; 0x40
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	4413      	add	r3, r2
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	0c1b      	lsrs	r3, r3, #16
 8003bda:	68ba      	ldr	r2, [r7, #8]
 8003bdc:	4413      	add	r3, r2
 8003bde:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003be0:	7bfb      	ldrb	r3, [r7, #15]
 8003be2:	3301      	adds	r3, #1
 8003be4:	73fb      	strb	r3, [r7, #15]
 8003be6:	7bfa      	ldrb	r2, [r7, #15]
 8003be8:	78fb      	ldrb	r3, [r7, #3]
 8003bea:	3b01      	subs	r3, #1
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d3ec      	bcc.n	8003bca <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003bf0:	883b      	ldrh	r3, [r7, #0]
 8003bf2:	0418      	lsls	r0, r3, #16
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6819      	ldr	r1, [r3, #0]
 8003bf8:	78fb      	ldrb	r3, [r7, #3]
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	68ba      	ldr	r2, [r7, #8]
 8003bfe:	4302      	orrs	r2, r0
 8003c00:	3340      	adds	r3, #64	; 0x40
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	440b      	add	r3, r1
 8003c06:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3714      	adds	r7, #20
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr

08003c16 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003c16:	b480      	push	{r7}
 8003c18:	b083      	sub	sp, #12
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
 8003c1e:	460b      	mov	r3, r1
 8003c20:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	887a      	ldrh	r2, [r7, #2]
 8003c28:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003c2a:	2300      	movs	r3, #0
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	460b      	mov	r3, r1
 8003c42:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003c44:	bf00      	nop
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b086      	sub	sp, #24
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d101      	bne.n	8003c62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e267      	b.n	8004132 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0301 	and.w	r3, r3, #1
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d075      	beq.n	8003d5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c6e:	4b88      	ldr	r3, [pc, #544]	; (8003e90 <HAL_RCC_OscConfig+0x240>)
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	f003 030c 	and.w	r3, r3, #12
 8003c76:	2b04      	cmp	r3, #4
 8003c78:	d00c      	beq.n	8003c94 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c7a:	4b85      	ldr	r3, [pc, #532]	; (8003e90 <HAL_RCC_OscConfig+0x240>)
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c82:	2b08      	cmp	r3, #8
 8003c84:	d112      	bne.n	8003cac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c86:	4b82      	ldr	r3, [pc, #520]	; (8003e90 <HAL_RCC_OscConfig+0x240>)
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c92:	d10b      	bne.n	8003cac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c94:	4b7e      	ldr	r3, [pc, #504]	; (8003e90 <HAL_RCC_OscConfig+0x240>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d05b      	beq.n	8003d58 <HAL_RCC_OscConfig+0x108>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d157      	bne.n	8003d58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e242      	b.n	8004132 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cb4:	d106      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x74>
 8003cb6:	4b76      	ldr	r3, [pc, #472]	; (8003e90 <HAL_RCC_OscConfig+0x240>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a75      	ldr	r2, [pc, #468]	; (8003e90 <HAL_RCC_OscConfig+0x240>)
 8003cbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cc0:	6013      	str	r3, [r2, #0]
 8003cc2:	e01d      	b.n	8003d00 <HAL_RCC_OscConfig+0xb0>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ccc:	d10c      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x98>
 8003cce:	4b70      	ldr	r3, [pc, #448]	; (8003e90 <HAL_RCC_OscConfig+0x240>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a6f      	ldr	r2, [pc, #444]	; (8003e90 <HAL_RCC_OscConfig+0x240>)
 8003cd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cd8:	6013      	str	r3, [r2, #0]
 8003cda:	4b6d      	ldr	r3, [pc, #436]	; (8003e90 <HAL_RCC_OscConfig+0x240>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a6c      	ldr	r2, [pc, #432]	; (8003e90 <HAL_RCC_OscConfig+0x240>)
 8003ce0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ce4:	6013      	str	r3, [r2, #0]
 8003ce6:	e00b      	b.n	8003d00 <HAL_RCC_OscConfig+0xb0>
 8003ce8:	4b69      	ldr	r3, [pc, #420]	; (8003e90 <HAL_RCC_OscConfig+0x240>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a68      	ldr	r2, [pc, #416]	; (8003e90 <HAL_RCC_OscConfig+0x240>)
 8003cee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cf2:	6013      	str	r3, [r2, #0]
 8003cf4:	4b66      	ldr	r3, [pc, #408]	; (8003e90 <HAL_RCC_OscConfig+0x240>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a65      	ldr	r2, [pc, #404]	; (8003e90 <HAL_RCC_OscConfig+0x240>)
 8003cfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d013      	beq.n	8003d30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d08:	f7fd fbc8 	bl	800149c <HAL_GetTick>
 8003d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d0e:	e008      	b.n	8003d22 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d10:	f7fd fbc4 	bl	800149c <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	2b64      	cmp	r3, #100	; 0x64
 8003d1c:	d901      	bls.n	8003d22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e207      	b.n	8004132 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d22:	4b5b      	ldr	r3, [pc, #364]	; (8003e90 <HAL_RCC_OscConfig+0x240>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d0f0      	beq.n	8003d10 <HAL_RCC_OscConfig+0xc0>
 8003d2e:	e014      	b.n	8003d5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d30:	f7fd fbb4 	bl	800149c <HAL_GetTick>
 8003d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d36:	e008      	b.n	8003d4a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d38:	f7fd fbb0 	bl	800149c <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	2b64      	cmp	r3, #100	; 0x64
 8003d44:	d901      	bls.n	8003d4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e1f3      	b.n	8004132 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d4a:	4b51      	ldr	r3, [pc, #324]	; (8003e90 <HAL_RCC_OscConfig+0x240>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1f0      	bne.n	8003d38 <HAL_RCC_OscConfig+0xe8>
 8003d56:	e000      	b.n	8003d5a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0302 	and.w	r3, r3, #2
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d063      	beq.n	8003e2e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d66:	4b4a      	ldr	r3, [pc, #296]	; (8003e90 <HAL_RCC_OscConfig+0x240>)
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f003 030c 	and.w	r3, r3, #12
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d00b      	beq.n	8003d8a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d72:	4b47      	ldr	r3, [pc, #284]	; (8003e90 <HAL_RCC_OscConfig+0x240>)
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d7a:	2b08      	cmp	r3, #8
 8003d7c:	d11c      	bne.n	8003db8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d7e:	4b44      	ldr	r3, [pc, #272]	; (8003e90 <HAL_RCC_OscConfig+0x240>)
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d116      	bne.n	8003db8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d8a:	4b41      	ldr	r3, [pc, #260]	; (8003e90 <HAL_RCC_OscConfig+0x240>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0302 	and.w	r3, r3, #2
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d005      	beq.n	8003da2 <HAL_RCC_OscConfig+0x152>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d001      	beq.n	8003da2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e1c7      	b.n	8004132 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003da2:	4b3b      	ldr	r3, [pc, #236]	; (8003e90 <HAL_RCC_OscConfig+0x240>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	00db      	lsls	r3, r3, #3
 8003db0:	4937      	ldr	r1, [pc, #220]	; (8003e90 <HAL_RCC_OscConfig+0x240>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003db6:	e03a      	b.n	8003e2e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d020      	beq.n	8003e02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003dc0:	4b34      	ldr	r3, [pc, #208]	; (8003e94 <HAL_RCC_OscConfig+0x244>)
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc6:	f7fd fb69 	bl	800149c <HAL_GetTick>
 8003dca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dcc:	e008      	b.n	8003de0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dce:	f7fd fb65 	bl	800149c <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d901      	bls.n	8003de0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e1a8      	b.n	8004132 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003de0:	4b2b      	ldr	r3, [pc, #172]	; (8003e90 <HAL_RCC_OscConfig+0x240>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0302 	and.w	r3, r3, #2
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d0f0      	beq.n	8003dce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dec:	4b28      	ldr	r3, [pc, #160]	; (8003e90 <HAL_RCC_OscConfig+0x240>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	691b      	ldr	r3, [r3, #16]
 8003df8:	00db      	lsls	r3, r3, #3
 8003dfa:	4925      	ldr	r1, [pc, #148]	; (8003e90 <HAL_RCC_OscConfig+0x240>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	600b      	str	r3, [r1, #0]
 8003e00:	e015      	b.n	8003e2e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e02:	4b24      	ldr	r3, [pc, #144]	; (8003e94 <HAL_RCC_OscConfig+0x244>)
 8003e04:	2200      	movs	r2, #0
 8003e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e08:	f7fd fb48 	bl	800149c <HAL_GetTick>
 8003e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e0e:	e008      	b.n	8003e22 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e10:	f7fd fb44 	bl	800149c <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d901      	bls.n	8003e22 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e187      	b.n	8004132 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e22:	4b1b      	ldr	r3, [pc, #108]	; (8003e90 <HAL_RCC_OscConfig+0x240>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0302 	and.w	r3, r3, #2
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d1f0      	bne.n	8003e10 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0308 	and.w	r3, r3, #8
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d036      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	695b      	ldr	r3, [r3, #20]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d016      	beq.n	8003e70 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e42:	4b15      	ldr	r3, [pc, #84]	; (8003e98 <HAL_RCC_OscConfig+0x248>)
 8003e44:	2201      	movs	r2, #1
 8003e46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e48:	f7fd fb28 	bl	800149c <HAL_GetTick>
 8003e4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e4e:	e008      	b.n	8003e62 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e50:	f7fd fb24 	bl	800149c <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e167      	b.n	8004132 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e62:	4b0b      	ldr	r3, [pc, #44]	; (8003e90 <HAL_RCC_OscConfig+0x240>)
 8003e64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e66:	f003 0302 	and.w	r3, r3, #2
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d0f0      	beq.n	8003e50 <HAL_RCC_OscConfig+0x200>
 8003e6e:	e01b      	b.n	8003ea8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e70:	4b09      	ldr	r3, [pc, #36]	; (8003e98 <HAL_RCC_OscConfig+0x248>)
 8003e72:	2200      	movs	r2, #0
 8003e74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e76:	f7fd fb11 	bl	800149c <HAL_GetTick>
 8003e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e7c:	e00e      	b.n	8003e9c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e7e:	f7fd fb0d 	bl	800149c <HAL_GetTick>
 8003e82:	4602      	mov	r2, r0
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d907      	bls.n	8003e9c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e150      	b.n	8004132 <HAL_RCC_OscConfig+0x4e2>
 8003e90:	40023800 	.word	0x40023800
 8003e94:	42470000 	.word	0x42470000
 8003e98:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e9c:	4b88      	ldr	r3, [pc, #544]	; (80040c0 <HAL_RCC_OscConfig+0x470>)
 8003e9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ea0:	f003 0302 	and.w	r3, r3, #2
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d1ea      	bne.n	8003e7e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0304 	and.w	r3, r3, #4
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	f000 8097 	beq.w	8003fe4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eba:	4b81      	ldr	r3, [pc, #516]	; (80040c0 <HAL_RCC_OscConfig+0x470>)
 8003ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d10f      	bne.n	8003ee6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	60bb      	str	r3, [r7, #8]
 8003eca:	4b7d      	ldr	r3, [pc, #500]	; (80040c0 <HAL_RCC_OscConfig+0x470>)
 8003ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ece:	4a7c      	ldr	r2, [pc, #496]	; (80040c0 <HAL_RCC_OscConfig+0x470>)
 8003ed0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ed4:	6413      	str	r3, [r2, #64]	; 0x40
 8003ed6:	4b7a      	ldr	r3, [pc, #488]	; (80040c0 <HAL_RCC_OscConfig+0x470>)
 8003ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ede:	60bb      	str	r3, [r7, #8]
 8003ee0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ee6:	4b77      	ldr	r3, [pc, #476]	; (80040c4 <HAL_RCC_OscConfig+0x474>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d118      	bne.n	8003f24 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ef2:	4b74      	ldr	r3, [pc, #464]	; (80040c4 <HAL_RCC_OscConfig+0x474>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a73      	ldr	r2, [pc, #460]	; (80040c4 <HAL_RCC_OscConfig+0x474>)
 8003ef8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003efc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003efe:	f7fd facd 	bl	800149c <HAL_GetTick>
 8003f02:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f04:	e008      	b.n	8003f18 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f06:	f7fd fac9 	bl	800149c <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d901      	bls.n	8003f18 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e10c      	b.n	8004132 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f18:	4b6a      	ldr	r3, [pc, #424]	; (80040c4 <HAL_RCC_OscConfig+0x474>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d0f0      	beq.n	8003f06 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d106      	bne.n	8003f3a <HAL_RCC_OscConfig+0x2ea>
 8003f2c:	4b64      	ldr	r3, [pc, #400]	; (80040c0 <HAL_RCC_OscConfig+0x470>)
 8003f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f30:	4a63      	ldr	r2, [pc, #396]	; (80040c0 <HAL_RCC_OscConfig+0x470>)
 8003f32:	f043 0301 	orr.w	r3, r3, #1
 8003f36:	6713      	str	r3, [r2, #112]	; 0x70
 8003f38:	e01c      	b.n	8003f74 <HAL_RCC_OscConfig+0x324>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	2b05      	cmp	r3, #5
 8003f40:	d10c      	bne.n	8003f5c <HAL_RCC_OscConfig+0x30c>
 8003f42:	4b5f      	ldr	r3, [pc, #380]	; (80040c0 <HAL_RCC_OscConfig+0x470>)
 8003f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f46:	4a5e      	ldr	r2, [pc, #376]	; (80040c0 <HAL_RCC_OscConfig+0x470>)
 8003f48:	f043 0304 	orr.w	r3, r3, #4
 8003f4c:	6713      	str	r3, [r2, #112]	; 0x70
 8003f4e:	4b5c      	ldr	r3, [pc, #368]	; (80040c0 <HAL_RCC_OscConfig+0x470>)
 8003f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f52:	4a5b      	ldr	r2, [pc, #364]	; (80040c0 <HAL_RCC_OscConfig+0x470>)
 8003f54:	f043 0301 	orr.w	r3, r3, #1
 8003f58:	6713      	str	r3, [r2, #112]	; 0x70
 8003f5a:	e00b      	b.n	8003f74 <HAL_RCC_OscConfig+0x324>
 8003f5c:	4b58      	ldr	r3, [pc, #352]	; (80040c0 <HAL_RCC_OscConfig+0x470>)
 8003f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f60:	4a57      	ldr	r2, [pc, #348]	; (80040c0 <HAL_RCC_OscConfig+0x470>)
 8003f62:	f023 0301 	bic.w	r3, r3, #1
 8003f66:	6713      	str	r3, [r2, #112]	; 0x70
 8003f68:	4b55      	ldr	r3, [pc, #340]	; (80040c0 <HAL_RCC_OscConfig+0x470>)
 8003f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f6c:	4a54      	ldr	r2, [pc, #336]	; (80040c0 <HAL_RCC_OscConfig+0x470>)
 8003f6e:	f023 0304 	bic.w	r3, r3, #4
 8003f72:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d015      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f7c:	f7fd fa8e 	bl	800149c <HAL_GetTick>
 8003f80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f82:	e00a      	b.n	8003f9a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f84:	f7fd fa8a 	bl	800149c <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d901      	bls.n	8003f9a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e0cb      	b.n	8004132 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f9a:	4b49      	ldr	r3, [pc, #292]	; (80040c0 <HAL_RCC_OscConfig+0x470>)
 8003f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f9e:	f003 0302 	and.w	r3, r3, #2
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d0ee      	beq.n	8003f84 <HAL_RCC_OscConfig+0x334>
 8003fa6:	e014      	b.n	8003fd2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fa8:	f7fd fa78 	bl	800149c <HAL_GetTick>
 8003fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fae:	e00a      	b.n	8003fc6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fb0:	f7fd fa74 	bl	800149c <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d901      	bls.n	8003fc6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e0b5      	b.n	8004132 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fc6:	4b3e      	ldr	r3, [pc, #248]	; (80040c0 <HAL_RCC_OscConfig+0x470>)
 8003fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fca:	f003 0302 	and.w	r3, r3, #2
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d1ee      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fd2:	7dfb      	ldrb	r3, [r7, #23]
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d105      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fd8:	4b39      	ldr	r3, [pc, #228]	; (80040c0 <HAL_RCC_OscConfig+0x470>)
 8003fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fdc:	4a38      	ldr	r2, [pc, #224]	; (80040c0 <HAL_RCC_OscConfig+0x470>)
 8003fde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fe2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	699b      	ldr	r3, [r3, #24]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	f000 80a1 	beq.w	8004130 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003fee:	4b34      	ldr	r3, [pc, #208]	; (80040c0 <HAL_RCC_OscConfig+0x470>)
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f003 030c 	and.w	r3, r3, #12
 8003ff6:	2b08      	cmp	r3, #8
 8003ff8:	d05c      	beq.n	80040b4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	699b      	ldr	r3, [r3, #24]
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d141      	bne.n	8004086 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004002:	4b31      	ldr	r3, [pc, #196]	; (80040c8 <HAL_RCC_OscConfig+0x478>)
 8004004:	2200      	movs	r2, #0
 8004006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004008:	f7fd fa48 	bl	800149c <HAL_GetTick>
 800400c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800400e:	e008      	b.n	8004022 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004010:	f7fd fa44 	bl	800149c <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	2b02      	cmp	r3, #2
 800401c:	d901      	bls.n	8004022 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e087      	b.n	8004132 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004022:	4b27      	ldr	r3, [pc, #156]	; (80040c0 <HAL_RCC_OscConfig+0x470>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1f0      	bne.n	8004010 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	69da      	ldr	r2, [r3, #28]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a1b      	ldr	r3, [r3, #32]
 8004036:	431a      	orrs	r2, r3
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403c:	019b      	lsls	r3, r3, #6
 800403e:	431a      	orrs	r2, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004044:	085b      	lsrs	r3, r3, #1
 8004046:	3b01      	subs	r3, #1
 8004048:	041b      	lsls	r3, r3, #16
 800404a:	431a      	orrs	r2, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004050:	061b      	lsls	r3, r3, #24
 8004052:	491b      	ldr	r1, [pc, #108]	; (80040c0 <HAL_RCC_OscConfig+0x470>)
 8004054:	4313      	orrs	r3, r2
 8004056:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004058:	4b1b      	ldr	r3, [pc, #108]	; (80040c8 <HAL_RCC_OscConfig+0x478>)
 800405a:	2201      	movs	r2, #1
 800405c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800405e:	f7fd fa1d 	bl	800149c <HAL_GetTick>
 8004062:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004064:	e008      	b.n	8004078 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004066:	f7fd fa19 	bl	800149c <HAL_GetTick>
 800406a:	4602      	mov	r2, r0
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	2b02      	cmp	r3, #2
 8004072:	d901      	bls.n	8004078 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e05c      	b.n	8004132 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004078:	4b11      	ldr	r3, [pc, #68]	; (80040c0 <HAL_RCC_OscConfig+0x470>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d0f0      	beq.n	8004066 <HAL_RCC_OscConfig+0x416>
 8004084:	e054      	b.n	8004130 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004086:	4b10      	ldr	r3, [pc, #64]	; (80040c8 <HAL_RCC_OscConfig+0x478>)
 8004088:	2200      	movs	r2, #0
 800408a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800408c:	f7fd fa06 	bl	800149c <HAL_GetTick>
 8004090:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004092:	e008      	b.n	80040a6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004094:	f7fd fa02 	bl	800149c <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d901      	bls.n	80040a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e045      	b.n	8004132 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040a6:	4b06      	ldr	r3, [pc, #24]	; (80040c0 <HAL_RCC_OscConfig+0x470>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d1f0      	bne.n	8004094 <HAL_RCC_OscConfig+0x444>
 80040b2:	e03d      	b.n	8004130 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	699b      	ldr	r3, [r3, #24]
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d107      	bne.n	80040cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e038      	b.n	8004132 <HAL_RCC_OscConfig+0x4e2>
 80040c0:	40023800 	.word	0x40023800
 80040c4:	40007000 	.word	0x40007000
 80040c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80040cc:	4b1b      	ldr	r3, [pc, #108]	; (800413c <HAL_RCC_OscConfig+0x4ec>)
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	699b      	ldr	r3, [r3, #24]
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d028      	beq.n	800412c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d121      	bne.n	800412c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d11a      	bne.n	800412c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040f6:	68fa      	ldr	r2, [r7, #12]
 80040f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80040fc:	4013      	ands	r3, r2
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004102:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004104:	4293      	cmp	r3, r2
 8004106:	d111      	bne.n	800412c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004112:	085b      	lsrs	r3, r3, #1
 8004114:	3b01      	subs	r3, #1
 8004116:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004118:	429a      	cmp	r2, r3
 800411a:	d107      	bne.n	800412c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004126:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004128:	429a      	cmp	r2, r3
 800412a:	d001      	beq.n	8004130 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e000      	b.n	8004132 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004130:	2300      	movs	r3, #0
}
 8004132:	4618      	mov	r0, r3
 8004134:	3718      	adds	r7, #24
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	40023800 	.word	0x40023800

08004140 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d101      	bne.n	8004154 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e0cc      	b.n	80042ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004154:	4b68      	ldr	r3, [pc, #416]	; (80042f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 030f 	and.w	r3, r3, #15
 800415c:	683a      	ldr	r2, [r7, #0]
 800415e:	429a      	cmp	r2, r3
 8004160:	d90c      	bls.n	800417c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004162:	4b65      	ldr	r3, [pc, #404]	; (80042f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004164:	683a      	ldr	r2, [r7, #0]
 8004166:	b2d2      	uxtb	r2, r2
 8004168:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800416a:	4b63      	ldr	r3, [pc, #396]	; (80042f8 <HAL_RCC_ClockConfig+0x1b8>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 030f 	and.w	r3, r3, #15
 8004172:	683a      	ldr	r2, [r7, #0]
 8004174:	429a      	cmp	r2, r3
 8004176:	d001      	beq.n	800417c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e0b8      	b.n	80042ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0302 	and.w	r3, r3, #2
 8004184:	2b00      	cmp	r3, #0
 8004186:	d020      	beq.n	80041ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0304 	and.w	r3, r3, #4
 8004190:	2b00      	cmp	r3, #0
 8004192:	d005      	beq.n	80041a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004194:	4b59      	ldr	r3, [pc, #356]	; (80042fc <HAL_RCC_ClockConfig+0x1bc>)
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	4a58      	ldr	r2, [pc, #352]	; (80042fc <HAL_RCC_ClockConfig+0x1bc>)
 800419a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800419e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0308 	and.w	r3, r3, #8
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d005      	beq.n	80041b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041ac:	4b53      	ldr	r3, [pc, #332]	; (80042fc <HAL_RCC_ClockConfig+0x1bc>)
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	4a52      	ldr	r2, [pc, #328]	; (80042fc <HAL_RCC_ClockConfig+0x1bc>)
 80041b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80041b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041b8:	4b50      	ldr	r3, [pc, #320]	; (80042fc <HAL_RCC_ClockConfig+0x1bc>)
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	494d      	ldr	r1, [pc, #308]	; (80042fc <HAL_RCC_ClockConfig+0x1bc>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0301 	and.w	r3, r3, #1
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d044      	beq.n	8004260 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d107      	bne.n	80041ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041de:	4b47      	ldr	r3, [pc, #284]	; (80042fc <HAL_RCC_ClockConfig+0x1bc>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d119      	bne.n	800421e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e07f      	b.n	80042ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d003      	beq.n	80041fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041fa:	2b03      	cmp	r3, #3
 80041fc:	d107      	bne.n	800420e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041fe:	4b3f      	ldr	r3, [pc, #252]	; (80042fc <HAL_RCC_ClockConfig+0x1bc>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d109      	bne.n	800421e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e06f      	b.n	80042ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800420e:	4b3b      	ldr	r3, [pc, #236]	; (80042fc <HAL_RCC_ClockConfig+0x1bc>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0302 	and.w	r3, r3, #2
 8004216:	2b00      	cmp	r3, #0
 8004218:	d101      	bne.n	800421e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e067      	b.n	80042ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800421e:	4b37      	ldr	r3, [pc, #220]	; (80042fc <HAL_RCC_ClockConfig+0x1bc>)
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	f023 0203 	bic.w	r2, r3, #3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	4934      	ldr	r1, [pc, #208]	; (80042fc <HAL_RCC_ClockConfig+0x1bc>)
 800422c:	4313      	orrs	r3, r2
 800422e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004230:	f7fd f934 	bl	800149c <HAL_GetTick>
 8004234:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004236:	e00a      	b.n	800424e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004238:	f7fd f930 	bl	800149c <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	f241 3288 	movw	r2, #5000	; 0x1388
 8004246:	4293      	cmp	r3, r2
 8004248:	d901      	bls.n	800424e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	e04f      	b.n	80042ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800424e:	4b2b      	ldr	r3, [pc, #172]	; (80042fc <HAL_RCC_ClockConfig+0x1bc>)
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	f003 020c 	and.w	r2, r3, #12
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	429a      	cmp	r2, r3
 800425e:	d1eb      	bne.n	8004238 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004260:	4b25      	ldr	r3, [pc, #148]	; (80042f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 030f 	and.w	r3, r3, #15
 8004268:	683a      	ldr	r2, [r7, #0]
 800426a:	429a      	cmp	r2, r3
 800426c:	d20c      	bcs.n	8004288 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800426e:	4b22      	ldr	r3, [pc, #136]	; (80042f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004270:	683a      	ldr	r2, [r7, #0]
 8004272:	b2d2      	uxtb	r2, r2
 8004274:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004276:	4b20      	ldr	r3, [pc, #128]	; (80042f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 030f 	and.w	r3, r3, #15
 800427e:	683a      	ldr	r2, [r7, #0]
 8004280:	429a      	cmp	r2, r3
 8004282:	d001      	beq.n	8004288 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e032      	b.n	80042ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0304 	and.w	r3, r3, #4
 8004290:	2b00      	cmp	r3, #0
 8004292:	d008      	beq.n	80042a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004294:	4b19      	ldr	r3, [pc, #100]	; (80042fc <HAL_RCC_ClockConfig+0x1bc>)
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	4916      	ldr	r1, [pc, #88]	; (80042fc <HAL_RCC_ClockConfig+0x1bc>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0308 	and.w	r3, r3, #8
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d009      	beq.n	80042c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042b2:	4b12      	ldr	r3, [pc, #72]	; (80042fc <HAL_RCC_ClockConfig+0x1bc>)
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	691b      	ldr	r3, [r3, #16]
 80042be:	00db      	lsls	r3, r3, #3
 80042c0:	490e      	ldr	r1, [pc, #56]	; (80042fc <HAL_RCC_ClockConfig+0x1bc>)
 80042c2:	4313      	orrs	r3, r2
 80042c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80042c6:	f000 f821 	bl	800430c <HAL_RCC_GetSysClockFreq>
 80042ca:	4602      	mov	r2, r0
 80042cc:	4b0b      	ldr	r3, [pc, #44]	; (80042fc <HAL_RCC_ClockConfig+0x1bc>)
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	091b      	lsrs	r3, r3, #4
 80042d2:	f003 030f 	and.w	r3, r3, #15
 80042d6:	490a      	ldr	r1, [pc, #40]	; (8004300 <HAL_RCC_ClockConfig+0x1c0>)
 80042d8:	5ccb      	ldrb	r3, [r1, r3]
 80042da:	fa22 f303 	lsr.w	r3, r2, r3
 80042de:	4a09      	ldr	r2, [pc, #36]	; (8004304 <HAL_RCC_ClockConfig+0x1c4>)
 80042e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80042e2:	4b09      	ldr	r3, [pc, #36]	; (8004308 <HAL_RCC_ClockConfig+0x1c8>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4618      	mov	r0, r3
 80042e8:	f7fc fd06 	bl	8000cf8 <HAL_InitTick>

  return HAL_OK;
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3710      	adds	r7, #16
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	40023c00 	.word	0x40023c00
 80042fc:	40023800 	.word	0x40023800
 8004300:	0800cd0c 	.word	0x0800cd0c
 8004304:	20000000 	.word	0x20000000
 8004308:	20000004 	.word	0x20000004

0800430c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800430c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004310:	b090      	sub	sp, #64	; 0x40
 8004312:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004314:	2300      	movs	r3, #0
 8004316:	637b      	str	r3, [r7, #52]	; 0x34
 8004318:	2300      	movs	r3, #0
 800431a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800431c:	2300      	movs	r3, #0
 800431e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004320:	2300      	movs	r3, #0
 8004322:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004324:	4b59      	ldr	r3, [pc, #356]	; (800448c <HAL_RCC_GetSysClockFreq+0x180>)
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	f003 030c 	and.w	r3, r3, #12
 800432c:	2b08      	cmp	r3, #8
 800432e:	d00d      	beq.n	800434c <HAL_RCC_GetSysClockFreq+0x40>
 8004330:	2b08      	cmp	r3, #8
 8004332:	f200 80a1 	bhi.w	8004478 <HAL_RCC_GetSysClockFreq+0x16c>
 8004336:	2b00      	cmp	r3, #0
 8004338:	d002      	beq.n	8004340 <HAL_RCC_GetSysClockFreq+0x34>
 800433a:	2b04      	cmp	r3, #4
 800433c:	d003      	beq.n	8004346 <HAL_RCC_GetSysClockFreq+0x3a>
 800433e:	e09b      	b.n	8004478 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004340:	4b53      	ldr	r3, [pc, #332]	; (8004490 <HAL_RCC_GetSysClockFreq+0x184>)
 8004342:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004344:	e09b      	b.n	800447e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004346:	4b53      	ldr	r3, [pc, #332]	; (8004494 <HAL_RCC_GetSysClockFreq+0x188>)
 8004348:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800434a:	e098      	b.n	800447e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800434c:	4b4f      	ldr	r3, [pc, #316]	; (800448c <HAL_RCC_GetSysClockFreq+0x180>)
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004354:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004356:	4b4d      	ldr	r3, [pc, #308]	; (800448c <HAL_RCC_GetSysClockFreq+0x180>)
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d028      	beq.n	80043b4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004362:	4b4a      	ldr	r3, [pc, #296]	; (800448c <HAL_RCC_GetSysClockFreq+0x180>)
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	099b      	lsrs	r3, r3, #6
 8004368:	2200      	movs	r2, #0
 800436a:	623b      	str	r3, [r7, #32]
 800436c:	627a      	str	r2, [r7, #36]	; 0x24
 800436e:	6a3b      	ldr	r3, [r7, #32]
 8004370:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004374:	2100      	movs	r1, #0
 8004376:	4b47      	ldr	r3, [pc, #284]	; (8004494 <HAL_RCC_GetSysClockFreq+0x188>)
 8004378:	fb03 f201 	mul.w	r2, r3, r1
 800437c:	2300      	movs	r3, #0
 800437e:	fb00 f303 	mul.w	r3, r0, r3
 8004382:	4413      	add	r3, r2
 8004384:	4a43      	ldr	r2, [pc, #268]	; (8004494 <HAL_RCC_GetSysClockFreq+0x188>)
 8004386:	fba0 1202 	umull	r1, r2, r0, r2
 800438a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800438c:	460a      	mov	r2, r1
 800438e:	62ba      	str	r2, [r7, #40]	; 0x28
 8004390:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004392:	4413      	add	r3, r2
 8004394:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004398:	2200      	movs	r2, #0
 800439a:	61bb      	str	r3, [r7, #24]
 800439c:	61fa      	str	r2, [r7, #28]
 800439e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043a2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80043a6:	f7fb ff2b 	bl	8000200 <__aeabi_uldivmod>
 80043aa:	4602      	mov	r2, r0
 80043ac:	460b      	mov	r3, r1
 80043ae:	4613      	mov	r3, r2
 80043b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043b2:	e053      	b.n	800445c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043b4:	4b35      	ldr	r3, [pc, #212]	; (800448c <HAL_RCC_GetSysClockFreq+0x180>)
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	099b      	lsrs	r3, r3, #6
 80043ba:	2200      	movs	r2, #0
 80043bc:	613b      	str	r3, [r7, #16]
 80043be:	617a      	str	r2, [r7, #20]
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80043c6:	f04f 0b00 	mov.w	fp, #0
 80043ca:	4652      	mov	r2, sl
 80043cc:	465b      	mov	r3, fp
 80043ce:	f04f 0000 	mov.w	r0, #0
 80043d2:	f04f 0100 	mov.w	r1, #0
 80043d6:	0159      	lsls	r1, r3, #5
 80043d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043dc:	0150      	lsls	r0, r2, #5
 80043de:	4602      	mov	r2, r0
 80043e0:	460b      	mov	r3, r1
 80043e2:	ebb2 080a 	subs.w	r8, r2, sl
 80043e6:	eb63 090b 	sbc.w	r9, r3, fp
 80043ea:	f04f 0200 	mov.w	r2, #0
 80043ee:	f04f 0300 	mov.w	r3, #0
 80043f2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80043f6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80043fa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80043fe:	ebb2 0408 	subs.w	r4, r2, r8
 8004402:	eb63 0509 	sbc.w	r5, r3, r9
 8004406:	f04f 0200 	mov.w	r2, #0
 800440a:	f04f 0300 	mov.w	r3, #0
 800440e:	00eb      	lsls	r3, r5, #3
 8004410:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004414:	00e2      	lsls	r2, r4, #3
 8004416:	4614      	mov	r4, r2
 8004418:	461d      	mov	r5, r3
 800441a:	eb14 030a 	adds.w	r3, r4, sl
 800441e:	603b      	str	r3, [r7, #0]
 8004420:	eb45 030b 	adc.w	r3, r5, fp
 8004424:	607b      	str	r3, [r7, #4]
 8004426:	f04f 0200 	mov.w	r2, #0
 800442a:	f04f 0300 	mov.w	r3, #0
 800442e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004432:	4629      	mov	r1, r5
 8004434:	028b      	lsls	r3, r1, #10
 8004436:	4621      	mov	r1, r4
 8004438:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800443c:	4621      	mov	r1, r4
 800443e:	028a      	lsls	r2, r1, #10
 8004440:	4610      	mov	r0, r2
 8004442:	4619      	mov	r1, r3
 8004444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004446:	2200      	movs	r2, #0
 8004448:	60bb      	str	r3, [r7, #8]
 800444a:	60fa      	str	r2, [r7, #12]
 800444c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004450:	f7fb fed6 	bl	8000200 <__aeabi_uldivmod>
 8004454:	4602      	mov	r2, r0
 8004456:	460b      	mov	r3, r1
 8004458:	4613      	mov	r3, r2
 800445a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800445c:	4b0b      	ldr	r3, [pc, #44]	; (800448c <HAL_RCC_GetSysClockFreq+0x180>)
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	0c1b      	lsrs	r3, r3, #16
 8004462:	f003 0303 	and.w	r3, r3, #3
 8004466:	3301      	adds	r3, #1
 8004468:	005b      	lsls	r3, r3, #1
 800446a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800446c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800446e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004470:	fbb2 f3f3 	udiv	r3, r2, r3
 8004474:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004476:	e002      	b.n	800447e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004478:	4b05      	ldr	r3, [pc, #20]	; (8004490 <HAL_RCC_GetSysClockFreq+0x184>)
 800447a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800447c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800447e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004480:	4618      	mov	r0, r3
 8004482:	3740      	adds	r7, #64	; 0x40
 8004484:	46bd      	mov	sp, r7
 8004486:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800448a:	bf00      	nop
 800448c:	40023800 	.word	0x40023800
 8004490:	00f42400 	.word	0x00f42400
 8004494:	00b71b00 	.word	0x00b71b00

08004498 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004498:	b480      	push	{r7}
 800449a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800449c:	4b03      	ldr	r3, [pc, #12]	; (80044ac <HAL_RCC_GetHCLKFreq+0x14>)
 800449e:	681b      	ldr	r3, [r3, #0]
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	20000000 	.word	0x20000000

080044b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80044b4:	f7ff fff0 	bl	8004498 <HAL_RCC_GetHCLKFreq>
 80044b8:	4602      	mov	r2, r0
 80044ba:	4b05      	ldr	r3, [pc, #20]	; (80044d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	0a9b      	lsrs	r3, r3, #10
 80044c0:	f003 0307 	and.w	r3, r3, #7
 80044c4:	4903      	ldr	r1, [pc, #12]	; (80044d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044c6:	5ccb      	ldrb	r3, [r1, r3]
 80044c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	40023800 	.word	0x40023800
 80044d4:	0800cd1c 	.word	0x0800cd1c

080044d8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	220f      	movs	r2, #15
 80044e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80044e8:	4b12      	ldr	r3, [pc, #72]	; (8004534 <HAL_RCC_GetClockConfig+0x5c>)
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	f003 0203 	and.w	r2, r3, #3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80044f4:	4b0f      	ldr	r3, [pc, #60]	; (8004534 <HAL_RCC_GetClockConfig+0x5c>)
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004500:	4b0c      	ldr	r3, [pc, #48]	; (8004534 <HAL_RCC_GetClockConfig+0x5c>)
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800450c:	4b09      	ldr	r3, [pc, #36]	; (8004534 <HAL_RCC_GetClockConfig+0x5c>)
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	08db      	lsrs	r3, r3, #3
 8004512:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800451a:	4b07      	ldr	r3, [pc, #28]	; (8004538 <HAL_RCC_GetClockConfig+0x60>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 020f 	and.w	r2, r3, #15
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	601a      	str	r2, [r3, #0]
}
 8004526:	bf00      	nop
 8004528:	370c      	adds	r7, #12
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr
 8004532:	bf00      	nop
 8004534:	40023800 	.word	0x40023800
 8004538:	40023c00 	.word	0x40023c00

0800453c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d101      	bne.n	800454e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e07b      	b.n	8004646 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004552:	2b00      	cmp	r3, #0
 8004554:	d108      	bne.n	8004568 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800455e:	d009      	beq.n	8004574 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	61da      	str	r2, [r3, #28]
 8004566:	e005      	b.n	8004574 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004580:	b2db      	uxtb	r3, r3
 8004582:	2b00      	cmp	r3, #0
 8004584:	d106      	bne.n	8004594 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f7fc fb3e 	bl	8000c10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2202      	movs	r2, #2
 8004598:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045aa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80045bc:	431a      	orrs	r2, r3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045c6:	431a      	orrs	r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	691b      	ldr	r3, [r3, #16]
 80045cc:	f003 0302 	and.w	r3, r3, #2
 80045d0:	431a      	orrs	r2, r3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	695b      	ldr	r3, [r3, #20]
 80045d6:	f003 0301 	and.w	r3, r3, #1
 80045da:	431a      	orrs	r2, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	699b      	ldr	r3, [r3, #24]
 80045e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045e4:	431a      	orrs	r2, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	69db      	ldr	r3, [r3, #28]
 80045ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80045ee:	431a      	orrs	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a1b      	ldr	r3, [r3, #32]
 80045f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045f8:	ea42 0103 	orr.w	r1, r2, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004600:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	430a      	orrs	r2, r1
 800460a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	699b      	ldr	r3, [r3, #24]
 8004610:	0c1b      	lsrs	r3, r3, #16
 8004612:	f003 0104 	and.w	r1, r3, #4
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461a:	f003 0210 	and.w	r2, r3, #16
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	430a      	orrs	r2, r1
 8004624:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	69da      	ldr	r2, [r3, #28]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004634:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	3708      	adds	r7, #8
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}

0800464e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800464e:	b580      	push	{r7, lr}
 8004650:	b082      	sub	sp, #8
 8004652:	af00      	add	r7, sp, #0
 8004654:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d101      	bne.n	8004660 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e041      	b.n	80046e4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004666:	b2db      	uxtb	r3, r3
 8004668:	2b00      	cmp	r3, #0
 800466a:	d106      	bne.n	800467a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f7fc fddf 	bl	8001238 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2202      	movs	r2, #2
 800467e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	3304      	adds	r3, #4
 800468a:	4619      	mov	r1, r3
 800468c:	4610      	mov	r0, r2
 800468e:	f000 fb8f 	bl	8004db0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2201      	movs	r2, #1
 8004696:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2201      	movs	r2, #1
 800469e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2201      	movs	r2, #1
 80046a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2201      	movs	r2, #1
 80046ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2201      	movs	r2, #1
 80046b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2201      	movs	r2, #1
 80046be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2201      	movs	r2, #1
 80046c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2201      	movs	r2, #1
 80046ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2201      	movs	r2, #1
 80046d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2201      	movs	r2, #1
 80046de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046e2:	2300      	movs	r3, #0
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3708      	adds	r7, #8
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}

080046ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b085      	sub	sp, #20
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d001      	beq.n	8004704 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e04e      	b.n	80047a2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2202      	movs	r2, #2
 8004708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68da      	ldr	r2, [r3, #12]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f042 0201 	orr.w	r2, r2, #1
 800471a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a23      	ldr	r2, [pc, #140]	; (80047b0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d022      	beq.n	800476c <HAL_TIM_Base_Start_IT+0x80>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800472e:	d01d      	beq.n	800476c <HAL_TIM_Base_Start_IT+0x80>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a1f      	ldr	r2, [pc, #124]	; (80047b4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d018      	beq.n	800476c <HAL_TIM_Base_Start_IT+0x80>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a1e      	ldr	r2, [pc, #120]	; (80047b8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d013      	beq.n	800476c <HAL_TIM_Base_Start_IT+0x80>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a1c      	ldr	r2, [pc, #112]	; (80047bc <HAL_TIM_Base_Start_IT+0xd0>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d00e      	beq.n	800476c <HAL_TIM_Base_Start_IT+0x80>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a1b      	ldr	r2, [pc, #108]	; (80047c0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d009      	beq.n	800476c <HAL_TIM_Base_Start_IT+0x80>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a19      	ldr	r2, [pc, #100]	; (80047c4 <HAL_TIM_Base_Start_IT+0xd8>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d004      	beq.n	800476c <HAL_TIM_Base_Start_IT+0x80>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a18      	ldr	r2, [pc, #96]	; (80047c8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d111      	bne.n	8004790 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	f003 0307 	and.w	r3, r3, #7
 8004776:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2b06      	cmp	r3, #6
 800477c:	d010      	beq.n	80047a0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f042 0201 	orr.w	r2, r2, #1
 800478c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800478e:	e007      	b.n	80047a0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f042 0201 	orr.w	r2, r2, #1
 800479e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3714      	adds	r7, #20
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop
 80047b0:	40010000 	.word	0x40010000
 80047b4:	40000400 	.word	0x40000400
 80047b8:	40000800 	.word	0x40000800
 80047bc:	40000c00 	.word	0x40000c00
 80047c0:	40010400 	.word	0x40010400
 80047c4:	40014000 	.word	0x40014000
 80047c8:	40001800 	.word	0x40001800

080047cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b082      	sub	sp, #8
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d101      	bne.n	80047de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e041      	b.n	8004862 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d106      	bne.n	80047f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f7fc fcd2 	bl	800119c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2202      	movs	r2, #2
 80047fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	3304      	adds	r3, #4
 8004808:	4619      	mov	r1, r3
 800480a:	4610      	mov	r0, r2
 800480c:	f000 fad0 	bl	8004db0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	3708      	adds	r7, #8
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}

0800486a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800486a:	b580      	push	{r7, lr}
 800486c:	b084      	sub	sp, #16
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	691b      	ldr	r3, [r3, #16]
 8004880:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	f003 0302 	and.w	r3, r3, #2
 8004888:	2b00      	cmp	r3, #0
 800488a:	d020      	beq.n	80048ce <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f003 0302 	and.w	r3, r3, #2
 8004892:	2b00      	cmp	r3, #0
 8004894:	d01b      	beq.n	80048ce <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f06f 0202 	mvn.w	r2, #2
 800489e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	699b      	ldr	r3, [r3, #24]
 80048ac:	f003 0303 	and.w	r3, r3, #3
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d003      	beq.n	80048bc <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f000 fa5c 	bl	8004d72 <HAL_TIM_IC_CaptureCallback>
 80048ba:	e005      	b.n	80048c8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f000 fa4e 	bl	8004d5e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 fa5f 	bl	8004d86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	f003 0304 	and.w	r3, r3, #4
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d020      	beq.n	800491a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f003 0304 	and.w	r3, r3, #4
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d01b      	beq.n	800491a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f06f 0204 	mvn.w	r2, #4
 80048ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2202      	movs	r2, #2
 80048f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	699b      	ldr	r3, [r3, #24]
 80048f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d003      	beq.n	8004908 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f000 fa36 	bl	8004d72 <HAL_TIM_IC_CaptureCallback>
 8004906:	e005      	b.n	8004914 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f000 fa28 	bl	8004d5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 fa39 	bl	8004d86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	f003 0308 	and.w	r3, r3, #8
 8004920:	2b00      	cmp	r3, #0
 8004922:	d020      	beq.n	8004966 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f003 0308 	and.w	r3, r3, #8
 800492a:	2b00      	cmp	r3, #0
 800492c:	d01b      	beq.n	8004966 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f06f 0208 	mvn.w	r2, #8
 8004936:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2204      	movs	r2, #4
 800493c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	69db      	ldr	r3, [r3, #28]
 8004944:	f003 0303 	and.w	r3, r3, #3
 8004948:	2b00      	cmp	r3, #0
 800494a:	d003      	beq.n	8004954 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f000 fa10 	bl	8004d72 <HAL_TIM_IC_CaptureCallback>
 8004952:	e005      	b.n	8004960 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f000 fa02 	bl	8004d5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 fa13 	bl	8004d86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	f003 0310 	and.w	r3, r3, #16
 800496c:	2b00      	cmp	r3, #0
 800496e:	d020      	beq.n	80049b2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f003 0310 	and.w	r3, r3, #16
 8004976:	2b00      	cmp	r3, #0
 8004978:	d01b      	beq.n	80049b2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f06f 0210 	mvn.w	r2, #16
 8004982:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2208      	movs	r2, #8
 8004988:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	69db      	ldr	r3, [r3, #28]
 8004990:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004994:	2b00      	cmp	r3, #0
 8004996:	d003      	beq.n	80049a0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f000 f9ea 	bl	8004d72 <HAL_TIM_IC_CaptureCallback>
 800499e:	e005      	b.n	80049ac <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f000 f9dc 	bl	8004d5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 f9ed 	bl	8004d86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	f003 0301 	and.w	r3, r3, #1
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d00c      	beq.n	80049d6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f003 0301 	and.w	r3, r3, #1
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d007      	beq.n	80049d6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f06f 0201 	mvn.w	r2, #1
 80049ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f7fc f8c5 	bl	8000b60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d00c      	beq.n	80049fa <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d007      	beq.n	80049fa <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80049f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f000 fda9 	bl	800554c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d00c      	beq.n	8004a1e <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d007      	beq.n	8004a1e <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f000 f9be 	bl	8004d9a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	f003 0320 	and.w	r3, r3, #32
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d00c      	beq.n	8004a42 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f003 0320 	and.w	r3, r3, #32
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d007      	beq.n	8004a42 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f06f 0220 	mvn.w	r2, #32
 8004a3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f000 fd7b 	bl	8005538 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a42:	bf00      	nop
 8004a44:	3710      	adds	r7, #16
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
	...

08004a4c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b086      	sub	sp, #24
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	60b9      	str	r1, [r7, #8]
 8004a56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d101      	bne.n	8004a6a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a66:	2302      	movs	r3, #2
 8004a68:	e0ae      	b.n	8004bc8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2b0c      	cmp	r3, #12
 8004a76:	f200 809f 	bhi.w	8004bb8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004a7a:	a201      	add	r2, pc, #4	; (adr r2, 8004a80 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a80:	08004ab5 	.word	0x08004ab5
 8004a84:	08004bb9 	.word	0x08004bb9
 8004a88:	08004bb9 	.word	0x08004bb9
 8004a8c:	08004bb9 	.word	0x08004bb9
 8004a90:	08004af5 	.word	0x08004af5
 8004a94:	08004bb9 	.word	0x08004bb9
 8004a98:	08004bb9 	.word	0x08004bb9
 8004a9c:	08004bb9 	.word	0x08004bb9
 8004aa0:	08004b37 	.word	0x08004b37
 8004aa4:	08004bb9 	.word	0x08004bb9
 8004aa8:	08004bb9 	.word	0x08004bb9
 8004aac:	08004bb9 	.word	0x08004bb9
 8004ab0:	08004b77 	.word	0x08004b77
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	68b9      	ldr	r1, [r7, #8]
 8004aba:	4618      	mov	r0, r3
 8004abc:	f000 fa24 	bl	8004f08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	699a      	ldr	r2, [r3, #24]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f042 0208 	orr.w	r2, r2, #8
 8004ace:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	699a      	ldr	r2, [r3, #24]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f022 0204 	bic.w	r2, r2, #4
 8004ade:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	6999      	ldr	r1, [r3, #24]
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	691a      	ldr	r2, [r3, #16]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	430a      	orrs	r2, r1
 8004af0:	619a      	str	r2, [r3, #24]
      break;
 8004af2:	e064      	b.n	8004bbe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68b9      	ldr	r1, [r7, #8]
 8004afa:	4618      	mov	r0, r3
 8004afc:	f000 fa74 	bl	8004fe8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	699a      	ldr	r2, [r3, #24]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	699a      	ldr	r2, [r3, #24]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	6999      	ldr	r1, [r3, #24]
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	691b      	ldr	r3, [r3, #16]
 8004b2a:	021a      	lsls	r2, r3, #8
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	430a      	orrs	r2, r1
 8004b32:	619a      	str	r2, [r3, #24]
      break;
 8004b34:	e043      	b.n	8004bbe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	68b9      	ldr	r1, [r7, #8]
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f000 fac9 	bl	80050d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	69da      	ldr	r2, [r3, #28]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f042 0208 	orr.w	r2, r2, #8
 8004b50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	69da      	ldr	r2, [r3, #28]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f022 0204 	bic.w	r2, r2, #4
 8004b60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	69d9      	ldr	r1, [r3, #28]
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	691a      	ldr	r2, [r3, #16]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	430a      	orrs	r2, r1
 8004b72:	61da      	str	r2, [r3, #28]
      break;
 8004b74:	e023      	b.n	8004bbe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	68b9      	ldr	r1, [r7, #8]
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f000 fb1d 	bl	80051bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	69da      	ldr	r2, [r3, #28]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	69da      	ldr	r2, [r3, #28]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ba0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	69d9      	ldr	r1, [r3, #28]
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	691b      	ldr	r3, [r3, #16]
 8004bac:	021a      	lsls	r2, r3, #8
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	430a      	orrs	r2, r1
 8004bb4:	61da      	str	r2, [r3, #28]
      break;
 8004bb6:	e002      	b.n	8004bbe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	75fb      	strb	r3, [r7, #23]
      break;
 8004bbc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004bc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3718      	adds	r7, #24
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d101      	bne.n	8004bec <HAL_TIM_ConfigClockSource+0x1c>
 8004be8:	2302      	movs	r3, #2
 8004bea:	e0b4      	b.n	8004d56 <HAL_TIM_ConfigClockSource+0x186>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2202      	movs	r2, #2
 8004bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	68ba      	ldr	r2, [r7, #8]
 8004c1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c24:	d03e      	beq.n	8004ca4 <HAL_TIM_ConfigClockSource+0xd4>
 8004c26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c2a:	f200 8087 	bhi.w	8004d3c <HAL_TIM_ConfigClockSource+0x16c>
 8004c2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c32:	f000 8086 	beq.w	8004d42 <HAL_TIM_ConfigClockSource+0x172>
 8004c36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c3a:	d87f      	bhi.n	8004d3c <HAL_TIM_ConfigClockSource+0x16c>
 8004c3c:	2b70      	cmp	r3, #112	; 0x70
 8004c3e:	d01a      	beq.n	8004c76 <HAL_TIM_ConfigClockSource+0xa6>
 8004c40:	2b70      	cmp	r3, #112	; 0x70
 8004c42:	d87b      	bhi.n	8004d3c <HAL_TIM_ConfigClockSource+0x16c>
 8004c44:	2b60      	cmp	r3, #96	; 0x60
 8004c46:	d050      	beq.n	8004cea <HAL_TIM_ConfigClockSource+0x11a>
 8004c48:	2b60      	cmp	r3, #96	; 0x60
 8004c4a:	d877      	bhi.n	8004d3c <HAL_TIM_ConfigClockSource+0x16c>
 8004c4c:	2b50      	cmp	r3, #80	; 0x50
 8004c4e:	d03c      	beq.n	8004cca <HAL_TIM_ConfigClockSource+0xfa>
 8004c50:	2b50      	cmp	r3, #80	; 0x50
 8004c52:	d873      	bhi.n	8004d3c <HAL_TIM_ConfigClockSource+0x16c>
 8004c54:	2b40      	cmp	r3, #64	; 0x40
 8004c56:	d058      	beq.n	8004d0a <HAL_TIM_ConfigClockSource+0x13a>
 8004c58:	2b40      	cmp	r3, #64	; 0x40
 8004c5a:	d86f      	bhi.n	8004d3c <HAL_TIM_ConfigClockSource+0x16c>
 8004c5c:	2b30      	cmp	r3, #48	; 0x30
 8004c5e:	d064      	beq.n	8004d2a <HAL_TIM_ConfigClockSource+0x15a>
 8004c60:	2b30      	cmp	r3, #48	; 0x30
 8004c62:	d86b      	bhi.n	8004d3c <HAL_TIM_ConfigClockSource+0x16c>
 8004c64:	2b20      	cmp	r3, #32
 8004c66:	d060      	beq.n	8004d2a <HAL_TIM_ConfigClockSource+0x15a>
 8004c68:	2b20      	cmp	r3, #32
 8004c6a:	d867      	bhi.n	8004d3c <HAL_TIM_ConfigClockSource+0x16c>
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d05c      	beq.n	8004d2a <HAL_TIM_ConfigClockSource+0x15a>
 8004c70:	2b10      	cmp	r3, #16
 8004c72:	d05a      	beq.n	8004d2a <HAL_TIM_ConfigClockSource+0x15a>
 8004c74:	e062      	b.n	8004d3c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c86:	f000 fb69 	bl	800535c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c98:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	68ba      	ldr	r2, [r7, #8]
 8004ca0:	609a      	str	r2, [r3, #8]
      break;
 8004ca2:	e04f      	b.n	8004d44 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004cb4:	f000 fb52 	bl	800535c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	689a      	ldr	r2, [r3, #8]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004cc6:	609a      	str	r2, [r3, #8]
      break;
 8004cc8:	e03c      	b.n	8004d44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	f000 fac6 	bl	8005268 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2150      	movs	r1, #80	; 0x50
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f000 fb1f 	bl	8005326 <TIM_ITRx_SetConfig>
      break;
 8004ce8:	e02c      	b.n	8004d44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	f000 fae5 	bl	80052c6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2160      	movs	r1, #96	; 0x60
 8004d02:	4618      	mov	r0, r3
 8004d04:	f000 fb0f 	bl	8005326 <TIM_ITRx_SetConfig>
      break;
 8004d08:	e01c      	b.n	8004d44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d16:	461a      	mov	r2, r3
 8004d18:	f000 faa6 	bl	8005268 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2140      	movs	r1, #64	; 0x40
 8004d22:	4618      	mov	r0, r3
 8004d24:	f000 faff 	bl	8005326 <TIM_ITRx_SetConfig>
      break;
 8004d28:	e00c      	b.n	8004d44 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4619      	mov	r1, r3
 8004d34:	4610      	mov	r0, r2
 8004d36:	f000 faf6 	bl	8005326 <TIM_ITRx_SetConfig>
      break;
 8004d3a:	e003      	b.n	8004d44 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	73fb      	strb	r3, [r7, #15]
      break;
 8004d40:	e000      	b.n	8004d44 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3710      	adds	r7, #16
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}

08004d5e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d5e:	b480      	push	{r7}
 8004d60:	b083      	sub	sp, #12
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d66:	bf00      	nop
 8004d68:	370c      	adds	r7, #12
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr

08004d72 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d72:	b480      	push	{r7}
 8004d74:	b083      	sub	sp, #12
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d7a:	bf00      	nop
 8004d7c:	370c      	adds	r7, #12
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr

08004d86 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d86:	b480      	push	{r7}
 8004d88:	b083      	sub	sp, #12
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d8e:	bf00      	nop
 8004d90:	370c      	adds	r7, #12
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr

08004d9a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d9a:	b480      	push	{r7}
 8004d9c:	b083      	sub	sp, #12
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004da2:	bf00      	nop
 8004da4:	370c      	adds	r7, #12
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr
	...

08004db0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b085      	sub	sp, #20
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	4a46      	ldr	r2, [pc, #280]	; (8004edc <TIM_Base_SetConfig+0x12c>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d013      	beq.n	8004df0 <TIM_Base_SetConfig+0x40>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dce:	d00f      	beq.n	8004df0 <TIM_Base_SetConfig+0x40>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4a43      	ldr	r2, [pc, #268]	; (8004ee0 <TIM_Base_SetConfig+0x130>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d00b      	beq.n	8004df0 <TIM_Base_SetConfig+0x40>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4a42      	ldr	r2, [pc, #264]	; (8004ee4 <TIM_Base_SetConfig+0x134>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d007      	beq.n	8004df0 <TIM_Base_SetConfig+0x40>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	4a41      	ldr	r2, [pc, #260]	; (8004ee8 <TIM_Base_SetConfig+0x138>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d003      	beq.n	8004df0 <TIM_Base_SetConfig+0x40>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4a40      	ldr	r2, [pc, #256]	; (8004eec <TIM_Base_SetConfig+0x13c>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d108      	bne.n	8004e02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004df6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	68fa      	ldr	r2, [r7, #12]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a35      	ldr	r2, [pc, #212]	; (8004edc <TIM_Base_SetConfig+0x12c>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d02b      	beq.n	8004e62 <TIM_Base_SetConfig+0xb2>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e10:	d027      	beq.n	8004e62 <TIM_Base_SetConfig+0xb2>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a32      	ldr	r2, [pc, #200]	; (8004ee0 <TIM_Base_SetConfig+0x130>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d023      	beq.n	8004e62 <TIM_Base_SetConfig+0xb2>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a31      	ldr	r2, [pc, #196]	; (8004ee4 <TIM_Base_SetConfig+0x134>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d01f      	beq.n	8004e62 <TIM_Base_SetConfig+0xb2>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a30      	ldr	r2, [pc, #192]	; (8004ee8 <TIM_Base_SetConfig+0x138>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d01b      	beq.n	8004e62 <TIM_Base_SetConfig+0xb2>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a2f      	ldr	r2, [pc, #188]	; (8004eec <TIM_Base_SetConfig+0x13c>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d017      	beq.n	8004e62 <TIM_Base_SetConfig+0xb2>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a2e      	ldr	r2, [pc, #184]	; (8004ef0 <TIM_Base_SetConfig+0x140>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d013      	beq.n	8004e62 <TIM_Base_SetConfig+0xb2>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a2d      	ldr	r2, [pc, #180]	; (8004ef4 <TIM_Base_SetConfig+0x144>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d00f      	beq.n	8004e62 <TIM_Base_SetConfig+0xb2>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a2c      	ldr	r2, [pc, #176]	; (8004ef8 <TIM_Base_SetConfig+0x148>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d00b      	beq.n	8004e62 <TIM_Base_SetConfig+0xb2>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a2b      	ldr	r2, [pc, #172]	; (8004efc <TIM_Base_SetConfig+0x14c>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d007      	beq.n	8004e62 <TIM_Base_SetConfig+0xb2>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a2a      	ldr	r2, [pc, #168]	; (8004f00 <TIM_Base_SetConfig+0x150>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d003      	beq.n	8004e62 <TIM_Base_SetConfig+0xb2>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a29      	ldr	r2, [pc, #164]	; (8004f04 <TIM_Base_SetConfig+0x154>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d108      	bne.n	8004e74 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	68fa      	ldr	r2, [r7, #12]
 8004e70:	4313      	orrs	r3, r2
 8004e72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	695b      	ldr	r3, [r3, #20]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	68fa      	ldr	r2, [r7, #12]
 8004e86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	689a      	ldr	r2, [r3, #8]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	4a10      	ldr	r2, [pc, #64]	; (8004edc <TIM_Base_SetConfig+0x12c>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d003      	beq.n	8004ea8 <TIM_Base_SetConfig+0xf8>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4a12      	ldr	r2, [pc, #72]	; (8004eec <TIM_Base_SetConfig+0x13c>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d103      	bne.n	8004eb0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	691a      	ldr	r2, [r3, #16]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	f003 0301 	and.w	r3, r3, #1
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d105      	bne.n	8004ece <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	f023 0201 	bic.w	r2, r3, #1
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	611a      	str	r2, [r3, #16]
  }
}
 8004ece:	bf00      	nop
 8004ed0:	3714      	adds	r7, #20
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	40010000 	.word	0x40010000
 8004ee0:	40000400 	.word	0x40000400
 8004ee4:	40000800 	.word	0x40000800
 8004ee8:	40000c00 	.word	0x40000c00
 8004eec:	40010400 	.word	0x40010400
 8004ef0:	40014000 	.word	0x40014000
 8004ef4:	40014400 	.word	0x40014400
 8004ef8:	40014800 	.word	0x40014800
 8004efc:	40001800 	.word	0x40001800
 8004f00:	40001c00 	.word	0x40001c00
 8004f04:	40002000 	.word	0x40002000

08004f08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b087      	sub	sp, #28
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a1b      	ldr	r3, [r3, #32]
 8004f16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6a1b      	ldr	r3, [r3, #32]
 8004f1c:	f023 0201 	bic.w	r2, r3, #1
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	699b      	ldr	r3, [r3, #24]
 8004f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f023 0303 	bic.w	r3, r3, #3
 8004f3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	68fa      	ldr	r2, [r7, #12]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	f023 0302 	bic.w	r3, r3, #2
 8004f50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	697a      	ldr	r2, [r7, #20]
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4a20      	ldr	r2, [pc, #128]	; (8004fe0 <TIM_OC1_SetConfig+0xd8>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d003      	beq.n	8004f6c <TIM_OC1_SetConfig+0x64>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4a1f      	ldr	r2, [pc, #124]	; (8004fe4 <TIM_OC1_SetConfig+0xdc>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d10c      	bne.n	8004f86 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	f023 0308 	bic.w	r3, r3, #8
 8004f72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	697a      	ldr	r2, [r7, #20]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	f023 0304 	bic.w	r3, r3, #4
 8004f84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a15      	ldr	r2, [pc, #84]	; (8004fe0 <TIM_OC1_SetConfig+0xd8>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d003      	beq.n	8004f96 <TIM_OC1_SetConfig+0x8e>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a14      	ldr	r2, [pc, #80]	; (8004fe4 <TIM_OC1_SetConfig+0xdc>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d111      	bne.n	8004fba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fa4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	695b      	ldr	r3, [r3, #20]
 8004faa:	693a      	ldr	r2, [r7, #16]
 8004fac:	4313      	orrs	r3, r2
 8004fae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	699b      	ldr	r3, [r3, #24]
 8004fb4:	693a      	ldr	r2, [r7, #16]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	693a      	ldr	r2, [r7, #16]
 8004fbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	68fa      	ldr	r2, [r7, #12]
 8004fc4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	685a      	ldr	r2, [r3, #4]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	697a      	ldr	r2, [r7, #20]
 8004fd2:	621a      	str	r2, [r3, #32]
}
 8004fd4:	bf00      	nop
 8004fd6:	371c      	adds	r7, #28
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr
 8004fe0:	40010000 	.word	0x40010000
 8004fe4:	40010400 	.word	0x40010400

08004fe8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b087      	sub	sp, #28
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a1b      	ldr	r3, [r3, #32]
 8004ff6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6a1b      	ldr	r3, [r3, #32]
 8004ffc:	f023 0210 	bic.w	r2, r3, #16
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	699b      	ldr	r3, [r3, #24]
 800500e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005016:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800501e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	021b      	lsls	r3, r3, #8
 8005026:	68fa      	ldr	r2, [r7, #12]
 8005028:	4313      	orrs	r3, r2
 800502a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	f023 0320 	bic.w	r3, r3, #32
 8005032:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	011b      	lsls	r3, r3, #4
 800503a:	697a      	ldr	r2, [r7, #20]
 800503c:	4313      	orrs	r3, r2
 800503e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	4a22      	ldr	r2, [pc, #136]	; (80050cc <TIM_OC2_SetConfig+0xe4>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d003      	beq.n	8005050 <TIM_OC2_SetConfig+0x68>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4a21      	ldr	r2, [pc, #132]	; (80050d0 <TIM_OC2_SetConfig+0xe8>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d10d      	bne.n	800506c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005056:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	011b      	lsls	r3, r3, #4
 800505e:	697a      	ldr	r2, [r7, #20]
 8005060:	4313      	orrs	r3, r2
 8005062:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800506a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	4a17      	ldr	r2, [pc, #92]	; (80050cc <TIM_OC2_SetConfig+0xe4>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d003      	beq.n	800507c <TIM_OC2_SetConfig+0x94>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4a16      	ldr	r2, [pc, #88]	; (80050d0 <TIM_OC2_SetConfig+0xe8>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d113      	bne.n	80050a4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005082:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800508a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	695b      	ldr	r3, [r3, #20]
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	693a      	ldr	r2, [r7, #16]
 8005094:	4313      	orrs	r3, r2
 8005096:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	699b      	ldr	r3, [r3, #24]
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	693a      	ldr	r2, [r7, #16]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	693a      	ldr	r2, [r7, #16]
 80050a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	685a      	ldr	r2, [r3, #4]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	697a      	ldr	r2, [r7, #20]
 80050bc:	621a      	str	r2, [r3, #32]
}
 80050be:	bf00      	nop
 80050c0:	371c      	adds	r7, #28
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr
 80050ca:	bf00      	nop
 80050cc:	40010000 	.word	0x40010000
 80050d0:	40010400 	.word	0x40010400

080050d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b087      	sub	sp, #28
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a1b      	ldr	r3, [r3, #32]
 80050e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6a1b      	ldr	r3, [r3, #32]
 80050e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	69db      	ldr	r3, [r3, #28]
 80050fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005102:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f023 0303 	bic.w	r3, r3, #3
 800510a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	68fa      	ldr	r2, [r7, #12]
 8005112:	4313      	orrs	r3, r2
 8005114:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800511c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	021b      	lsls	r3, r3, #8
 8005124:	697a      	ldr	r2, [r7, #20]
 8005126:	4313      	orrs	r3, r2
 8005128:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a21      	ldr	r2, [pc, #132]	; (80051b4 <TIM_OC3_SetConfig+0xe0>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d003      	beq.n	800513a <TIM_OC3_SetConfig+0x66>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4a20      	ldr	r2, [pc, #128]	; (80051b8 <TIM_OC3_SetConfig+0xe4>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d10d      	bne.n	8005156 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005140:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	021b      	lsls	r3, r3, #8
 8005148:	697a      	ldr	r2, [r7, #20]
 800514a:	4313      	orrs	r3, r2
 800514c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005154:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a16      	ldr	r2, [pc, #88]	; (80051b4 <TIM_OC3_SetConfig+0xe0>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d003      	beq.n	8005166 <TIM_OC3_SetConfig+0x92>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a15      	ldr	r2, [pc, #84]	; (80051b8 <TIM_OC3_SetConfig+0xe4>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d113      	bne.n	800518e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800516c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005174:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	695b      	ldr	r3, [r3, #20]
 800517a:	011b      	lsls	r3, r3, #4
 800517c:	693a      	ldr	r2, [r7, #16]
 800517e:	4313      	orrs	r3, r2
 8005180:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	699b      	ldr	r3, [r3, #24]
 8005186:	011b      	lsls	r3, r3, #4
 8005188:	693a      	ldr	r2, [r7, #16]
 800518a:	4313      	orrs	r3, r2
 800518c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	693a      	ldr	r2, [r7, #16]
 8005192:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	68fa      	ldr	r2, [r7, #12]
 8005198:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	685a      	ldr	r2, [r3, #4]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	697a      	ldr	r2, [r7, #20]
 80051a6:	621a      	str	r2, [r3, #32]
}
 80051a8:	bf00      	nop
 80051aa:	371c      	adds	r7, #28
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr
 80051b4:	40010000 	.word	0x40010000
 80051b8:	40010400 	.word	0x40010400

080051bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051bc:	b480      	push	{r7}
 80051be:	b087      	sub	sp, #28
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6a1b      	ldr	r3, [r3, #32]
 80051ca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6a1b      	ldr	r3, [r3, #32]
 80051d0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	69db      	ldr	r3, [r3, #28]
 80051e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	021b      	lsls	r3, r3, #8
 80051fa:	68fa      	ldr	r2, [r7, #12]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005206:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	031b      	lsls	r3, r3, #12
 800520e:	693a      	ldr	r2, [r7, #16]
 8005210:	4313      	orrs	r3, r2
 8005212:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4a12      	ldr	r2, [pc, #72]	; (8005260 <TIM_OC4_SetConfig+0xa4>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d003      	beq.n	8005224 <TIM_OC4_SetConfig+0x68>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a11      	ldr	r2, [pc, #68]	; (8005264 <TIM_OC4_SetConfig+0xa8>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d109      	bne.n	8005238 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800522a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	695b      	ldr	r3, [r3, #20]
 8005230:	019b      	lsls	r3, r3, #6
 8005232:	697a      	ldr	r2, [r7, #20]
 8005234:	4313      	orrs	r3, r2
 8005236:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	697a      	ldr	r2, [r7, #20]
 800523c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	68fa      	ldr	r2, [r7, #12]
 8005242:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	685a      	ldr	r2, [r3, #4]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	693a      	ldr	r2, [r7, #16]
 8005250:	621a      	str	r2, [r3, #32]
}
 8005252:	bf00      	nop
 8005254:	371c      	adds	r7, #28
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr
 800525e:	bf00      	nop
 8005260:	40010000 	.word	0x40010000
 8005264:	40010400 	.word	0x40010400

08005268 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005268:	b480      	push	{r7}
 800526a:	b087      	sub	sp, #28
 800526c:	af00      	add	r7, sp, #0
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	60b9      	str	r1, [r7, #8]
 8005272:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6a1b      	ldr	r3, [r3, #32]
 8005278:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6a1b      	ldr	r3, [r3, #32]
 800527e:	f023 0201 	bic.w	r2, r3, #1
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	699b      	ldr	r3, [r3, #24]
 800528a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005292:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	011b      	lsls	r3, r3, #4
 8005298:	693a      	ldr	r2, [r7, #16]
 800529a:	4313      	orrs	r3, r2
 800529c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	f023 030a 	bic.w	r3, r3, #10
 80052a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80052a6:	697a      	ldr	r2, [r7, #20]
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	693a      	ldr	r2, [r7, #16]
 80052b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	697a      	ldr	r2, [r7, #20]
 80052b8:	621a      	str	r2, [r3, #32]
}
 80052ba:	bf00      	nop
 80052bc:	371c      	adds	r7, #28
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr

080052c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052c6:	b480      	push	{r7}
 80052c8:	b087      	sub	sp, #28
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	60f8      	str	r0, [r7, #12]
 80052ce:	60b9      	str	r1, [r7, #8]
 80052d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6a1b      	ldr	r3, [r3, #32]
 80052d6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	6a1b      	ldr	r3, [r3, #32]
 80052dc:	f023 0210 	bic.w	r2, r3, #16
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	699b      	ldr	r3, [r3, #24]
 80052e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	031b      	lsls	r3, r3, #12
 80052f6:	693a      	ldr	r2, [r7, #16]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005302:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	011b      	lsls	r3, r3, #4
 8005308:	697a      	ldr	r2, [r7, #20]
 800530a:	4313      	orrs	r3, r2
 800530c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	693a      	ldr	r2, [r7, #16]
 8005312:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	697a      	ldr	r2, [r7, #20]
 8005318:	621a      	str	r2, [r3, #32]
}
 800531a:	bf00      	nop
 800531c:	371c      	adds	r7, #28
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr

08005326 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005326:	b480      	push	{r7}
 8005328:	b085      	sub	sp, #20
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
 800532e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800533c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800533e:	683a      	ldr	r2, [r7, #0]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	4313      	orrs	r3, r2
 8005344:	f043 0307 	orr.w	r3, r3, #7
 8005348:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	68fa      	ldr	r2, [r7, #12]
 800534e:	609a      	str	r2, [r3, #8]
}
 8005350:	bf00      	nop
 8005352:	3714      	adds	r7, #20
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800535c:	b480      	push	{r7}
 800535e:	b087      	sub	sp, #28
 8005360:	af00      	add	r7, sp, #0
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	607a      	str	r2, [r7, #4]
 8005368:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005376:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	021a      	lsls	r2, r3, #8
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	431a      	orrs	r2, r3
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	4313      	orrs	r3, r2
 8005384:	697a      	ldr	r2, [r7, #20]
 8005386:	4313      	orrs	r3, r2
 8005388:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	697a      	ldr	r2, [r7, #20]
 800538e:	609a      	str	r2, [r3, #8]
}
 8005390:	bf00      	nop
 8005392:	371c      	adds	r7, #28
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr

0800539c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800539c:	b480      	push	{r7}
 800539e:	b085      	sub	sp, #20
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d101      	bne.n	80053b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053b0:	2302      	movs	r3, #2
 80053b2:	e05a      	b.n	800546a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2202      	movs	r2, #2
 80053c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	68fa      	ldr	r2, [r7, #12]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68fa      	ldr	r2, [r7, #12]
 80053ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a21      	ldr	r2, [pc, #132]	; (8005478 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d022      	beq.n	800543e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005400:	d01d      	beq.n	800543e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a1d      	ldr	r2, [pc, #116]	; (800547c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d018      	beq.n	800543e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a1b      	ldr	r2, [pc, #108]	; (8005480 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d013      	beq.n	800543e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a1a      	ldr	r2, [pc, #104]	; (8005484 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d00e      	beq.n	800543e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a18      	ldr	r2, [pc, #96]	; (8005488 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d009      	beq.n	800543e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a17      	ldr	r2, [pc, #92]	; (800548c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d004      	beq.n	800543e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a15      	ldr	r2, [pc, #84]	; (8005490 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d10c      	bne.n	8005458 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005444:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	68ba      	ldr	r2, [r7, #8]
 800544c:	4313      	orrs	r3, r2
 800544e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68ba      	ldr	r2, [r7, #8]
 8005456:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005468:	2300      	movs	r3, #0
}
 800546a:	4618      	mov	r0, r3
 800546c:	3714      	adds	r7, #20
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr
 8005476:	bf00      	nop
 8005478:	40010000 	.word	0x40010000
 800547c:	40000400 	.word	0x40000400
 8005480:	40000800 	.word	0x40000800
 8005484:	40000c00 	.word	0x40000c00
 8005488:	40010400 	.word	0x40010400
 800548c:	40014000 	.word	0x40014000
 8005490:	40001800 	.word	0x40001800

08005494 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005494:	b480      	push	{r7}
 8005496:	b085      	sub	sp, #20
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800549e:	2300      	movs	r3, #0
 80054a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d101      	bne.n	80054b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80054ac:	2302      	movs	r3, #2
 80054ae:	e03d      	b.n	800552c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	4313      	orrs	r3, r2
 80054e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4313      	orrs	r3, r2
 80054ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	695b      	ldr	r3, [r3, #20]
 8005508:	4313      	orrs	r3, r2
 800550a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	69db      	ldr	r3, [r3, #28]
 8005516:	4313      	orrs	r3, r2
 8005518:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	68fa      	ldr	r2, [r7, #12]
 8005520:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800552a:	2300      	movs	r3, #0
}
 800552c:	4618      	mov	r0, r3
 800552e:	3714      	adds	r7, #20
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr

08005538 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005538:	b480      	push	{r7}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005540:	bf00      	nop
 8005542:	370c      	adds	r7, #12
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr

0800554c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005554:	bf00      	nop
 8005556:	370c      	adds	r7, #12
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr

08005560 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005560:	b084      	sub	sp, #16
 8005562:	b580      	push	{r7, lr}
 8005564:	b084      	sub	sp, #16
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]
 800556a:	f107 001c 	add.w	r0, r7, #28
 800556e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005572:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8005576:	2b01      	cmp	r3, #1
 8005578:	d123      	bne.n	80055c2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800557e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800558e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80055a2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d105      	bne.n	80055b6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f001 fae2 	bl	8006b80 <USB_CoreReset>
 80055bc:	4603      	mov	r3, r0
 80055be:	73fb      	strb	r3, [r7, #15]
 80055c0:	e01b      	b.n	80055fa <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f001 fad6 	bl	8006b80 <USB_CoreReset>
 80055d4:	4603      	mov	r3, r0
 80055d6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80055d8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d106      	bne.n	80055ee <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	639a      	str	r2, [r3, #56]	; 0x38
 80055ec:	e005      	b.n	80055fa <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80055fa:	7fbb      	ldrb	r3, [r7, #30]
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d10b      	bne.n	8005618 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	f043 0206 	orr.w	r2, r3, #6
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	f043 0220 	orr.w	r2, r3, #32
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005618:	7bfb      	ldrb	r3, [r7, #15]
}
 800561a:	4618      	mov	r0, r3
 800561c:	3710      	adds	r7, #16
 800561e:	46bd      	mov	sp, r7
 8005620:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005624:	b004      	add	sp, #16
 8005626:	4770      	bx	lr

08005628 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005628:	b480      	push	{r7}
 800562a:	b087      	sub	sp, #28
 800562c:	af00      	add	r7, sp, #0
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	60b9      	str	r1, [r7, #8]
 8005632:	4613      	mov	r3, r2
 8005634:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005636:	79fb      	ldrb	r3, [r7, #7]
 8005638:	2b02      	cmp	r3, #2
 800563a:	d165      	bne.n	8005708 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	4a41      	ldr	r2, [pc, #260]	; (8005744 <USB_SetTurnaroundTime+0x11c>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d906      	bls.n	8005652 <USB_SetTurnaroundTime+0x2a>
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	4a40      	ldr	r2, [pc, #256]	; (8005748 <USB_SetTurnaroundTime+0x120>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d202      	bcs.n	8005652 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800564c:	230f      	movs	r3, #15
 800564e:	617b      	str	r3, [r7, #20]
 8005650:	e062      	b.n	8005718 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	4a3c      	ldr	r2, [pc, #240]	; (8005748 <USB_SetTurnaroundTime+0x120>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d306      	bcc.n	8005668 <USB_SetTurnaroundTime+0x40>
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	4a3b      	ldr	r2, [pc, #236]	; (800574c <USB_SetTurnaroundTime+0x124>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d202      	bcs.n	8005668 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005662:	230e      	movs	r3, #14
 8005664:	617b      	str	r3, [r7, #20]
 8005666:	e057      	b.n	8005718 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	4a38      	ldr	r2, [pc, #224]	; (800574c <USB_SetTurnaroundTime+0x124>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d306      	bcc.n	800567e <USB_SetTurnaroundTime+0x56>
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	4a37      	ldr	r2, [pc, #220]	; (8005750 <USB_SetTurnaroundTime+0x128>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d202      	bcs.n	800567e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005678:	230d      	movs	r3, #13
 800567a:	617b      	str	r3, [r7, #20]
 800567c:	e04c      	b.n	8005718 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	4a33      	ldr	r2, [pc, #204]	; (8005750 <USB_SetTurnaroundTime+0x128>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d306      	bcc.n	8005694 <USB_SetTurnaroundTime+0x6c>
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	4a32      	ldr	r2, [pc, #200]	; (8005754 <USB_SetTurnaroundTime+0x12c>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d802      	bhi.n	8005694 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800568e:	230c      	movs	r3, #12
 8005690:	617b      	str	r3, [r7, #20]
 8005692:	e041      	b.n	8005718 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	4a2f      	ldr	r2, [pc, #188]	; (8005754 <USB_SetTurnaroundTime+0x12c>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d906      	bls.n	80056aa <USB_SetTurnaroundTime+0x82>
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	4a2e      	ldr	r2, [pc, #184]	; (8005758 <USB_SetTurnaroundTime+0x130>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d802      	bhi.n	80056aa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80056a4:	230b      	movs	r3, #11
 80056a6:	617b      	str	r3, [r7, #20]
 80056a8:	e036      	b.n	8005718 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	4a2a      	ldr	r2, [pc, #168]	; (8005758 <USB_SetTurnaroundTime+0x130>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d906      	bls.n	80056c0 <USB_SetTurnaroundTime+0x98>
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	4a29      	ldr	r2, [pc, #164]	; (800575c <USB_SetTurnaroundTime+0x134>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d802      	bhi.n	80056c0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80056ba:	230a      	movs	r3, #10
 80056bc:	617b      	str	r3, [r7, #20]
 80056be:	e02b      	b.n	8005718 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	4a26      	ldr	r2, [pc, #152]	; (800575c <USB_SetTurnaroundTime+0x134>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d906      	bls.n	80056d6 <USB_SetTurnaroundTime+0xae>
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	4a25      	ldr	r2, [pc, #148]	; (8005760 <USB_SetTurnaroundTime+0x138>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d202      	bcs.n	80056d6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80056d0:	2309      	movs	r3, #9
 80056d2:	617b      	str	r3, [r7, #20]
 80056d4:	e020      	b.n	8005718 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	4a21      	ldr	r2, [pc, #132]	; (8005760 <USB_SetTurnaroundTime+0x138>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d306      	bcc.n	80056ec <USB_SetTurnaroundTime+0xc4>
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	4a20      	ldr	r2, [pc, #128]	; (8005764 <USB_SetTurnaroundTime+0x13c>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d802      	bhi.n	80056ec <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80056e6:	2308      	movs	r3, #8
 80056e8:	617b      	str	r3, [r7, #20]
 80056ea:	e015      	b.n	8005718 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	4a1d      	ldr	r2, [pc, #116]	; (8005764 <USB_SetTurnaroundTime+0x13c>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d906      	bls.n	8005702 <USB_SetTurnaroundTime+0xda>
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	4a1c      	ldr	r2, [pc, #112]	; (8005768 <USB_SetTurnaroundTime+0x140>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d202      	bcs.n	8005702 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80056fc:	2307      	movs	r3, #7
 80056fe:	617b      	str	r3, [r7, #20]
 8005700:	e00a      	b.n	8005718 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005702:	2306      	movs	r3, #6
 8005704:	617b      	str	r3, [r7, #20]
 8005706:	e007      	b.n	8005718 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005708:	79fb      	ldrb	r3, [r7, #7]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d102      	bne.n	8005714 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800570e:	2309      	movs	r3, #9
 8005710:	617b      	str	r3, [r7, #20]
 8005712:	e001      	b.n	8005718 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005714:	2309      	movs	r3, #9
 8005716:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	68da      	ldr	r2, [r3, #12]
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	029b      	lsls	r3, r3, #10
 800572c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005730:	431a      	orrs	r2, r3
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005736:	2300      	movs	r3, #0
}
 8005738:	4618      	mov	r0, r3
 800573a:	371c      	adds	r7, #28
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr
 8005744:	00d8acbf 	.word	0x00d8acbf
 8005748:	00e4e1c0 	.word	0x00e4e1c0
 800574c:	00f42400 	.word	0x00f42400
 8005750:	01067380 	.word	0x01067380
 8005754:	011a499f 	.word	0x011a499f
 8005758:	01312cff 	.word	0x01312cff
 800575c:	014ca43f 	.word	0x014ca43f
 8005760:	016e3600 	.word	0x016e3600
 8005764:	01a6ab1f 	.word	0x01a6ab1f
 8005768:	01e84800 	.word	0x01e84800

0800576c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	f043 0201 	orr.w	r2, r3, #1
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005780:	2300      	movs	r3, #0
}
 8005782:	4618      	mov	r0, r3
 8005784:	370c      	adds	r7, #12
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr

0800578e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800578e:	b480      	push	{r7}
 8005790:	b083      	sub	sp, #12
 8005792:	af00      	add	r7, sp, #0
 8005794:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	f023 0201 	bic.w	r2, r3, #1
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80057a2:	2300      	movs	r3, #0
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b084      	sub	sp, #16
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	460b      	mov	r3, r1
 80057ba:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80057bc:	2300      	movs	r3, #0
 80057be:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80057cc:	78fb      	ldrb	r3, [r7, #3]
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d115      	bne.n	80057fe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80057de:	200a      	movs	r0, #10
 80057e0:	f7fb fe68 	bl	80014b4 <HAL_Delay>
      ms += 10U;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	330a      	adds	r3, #10
 80057e8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f001 f939 	bl	8006a62 <USB_GetMode>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d01e      	beq.n	8005834 <USB_SetCurrentMode+0x84>
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2bc7      	cmp	r3, #199	; 0xc7
 80057fa:	d9f0      	bls.n	80057de <USB_SetCurrentMode+0x2e>
 80057fc:	e01a      	b.n	8005834 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80057fe:	78fb      	ldrb	r3, [r7, #3]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d115      	bne.n	8005830 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005810:	200a      	movs	r0, #10
 8005812:	f7fb fe4f 	bl	80014b4 <HAL_Delay>
      ms += 10U;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	330a      	adds	r3, #10
 800581a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f001 f920 	bl	8006a62 <USB_GetMode>
 8005822:	4603      	mov	r3, r0
 8005824:	2b00      	cmp	r3, #0
 8005826:	d005      	beq.n	8005834 <USB_SetCurrentMode+0x84>
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2bc7      	cmp	r3, #199	; 0xc7
 800582c:	d9f0      	bls.n	8005810 <USB_SetCurrentMode+0x60>
 800582e:	e001      	b.n	8005834 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	e005      	b.n	8005840 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2bc8      	cmp	r3, #200	; 0xc8
 8005838:	d101      	bne.n	800583e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e000      	b.n	8005840 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800583e:	2300      	movs	r3, #0
}
 8005840:	4618      	mov	r0, r3
 8005842:	3710      	adds	r7, #16
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}

08005848 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005848:	b084      	sub	sp, #16
 800584a:	b580      	push	{r7, lr}
 800584c:	b086      	sub	sp, #24
 800584e:	af00      	add	r7, sp, #0
 8005850:	6078      	str	r0, [r7, #4]
 8005852:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005856:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800585a:	2300      	movs	r3, #0
 800585c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005862:	2300      	movs	r3, #0
 8005864:	613b      	str	r3, [r7, #16]
 8005866:	e009      	b.n	800587c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	3340      	adds	r3, #64	; 0x40
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	4413      	add	r3, r2
 8005872:	2200      	movs	r2, #0
 8005874:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	3301      	adds	r3, #1
 800587a:	613b      	str	r3, [r7, #16]
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	2b0e      	cmp	r3, #14
 8005880:	d9f2      	bls.n	8005868 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005882:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005886:	2b00      	cmp	r3, #0
 8005888:	d11c      	bne.n	80058c4 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	68fa      	ldr	r2, [r7, #12]
 8005894:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005898:	f043 0302 	orr.w	r3, r3, #2
 800589c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ae:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ba:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	639a      	str	r2, [r3, #56]	; 0x38
 80058c2:	e00b      	b.n	80058dc <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80058e2:	461a      	mov	r2, r3
 80058e4:	2300      	movs	r3, #0
 80058e6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80058e8:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d10d      	bne.n	800590c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80058f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d104      	bne.n	8005902 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80058f8:	2100      	movs	r1, #0
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 f968 	bl	8005bd0 <USB_SetDevSpeed>
 8005900:	e008      	b.n	8005914 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005902:	2101      	movs	r1, #1
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f000 f963 	bl	8005bd0 <USB_SetDevSpeed>
 800590a:	e003      	b.n	8005914 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800590c:	2103      	movs	r1, #3
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f000 f95e 	bl	8005bd0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005914:	2110      	movs	r1, #16
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 f8fa 	bl	8005b10 <USB_FlushTxFifo>
 800591c:	4603      	mov	r3, r0
 800591e:	2b00      	cmp	r3, #0
 8005920:	d001      	beq.n	8005926 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f000 f924 	bl	8005b74 <USB_FlushRxFifo>
 800592c:	4603      	mov	r3, r0
 800592e:	2b00      	cmp	r3, #0
 8005930:	d001      	beq.n	8005936 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800593c:	461a      	mov	r2, r3
 800593e:	2300      	movs	r3, #0
 8005940:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005948:	461a      	mov	r2, r3
 800594a:	2300      	movs	r3, #0
 800594c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005954:	461a      	mov	r2, r3
 8005956:	2300      	movs	r3, #0
 8005958:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800595a:	2300      	movs	r3, #0
 800595c:	613b      	str	r3, [r7, #16]
 800595e:	e043      	b.n	80059e8 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	015a      	lsls	r2, r3, #5
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	4413      	add	r3, r2
 8005968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005972:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005976:	d118      	bne.n	80059aa <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d10a      	bne.n	8005994 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	015a      	lsls	r2, r3, #5
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	4413      	add	r3, r2
 8005986:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800598a:	461a      	mov	r2, r3
 800598c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005990:	6013      	str	r3, [r2, #0]
 8005992:	e013      	b.n	80059bc <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	015a      	lsls	r2, r3, #5
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	4413      	add	r3, r2
 800599c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059a0:	461a      	mov	r2, r3
 80059a2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80059a6:	6013      	str	r3, [r2, #0]
 80059a8:	e008      	b.n	80059bc <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	015a      	lsls	r2, r3, #5
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	4413      	add	r3, r2
 80059b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059b6:	461a      	mov	r2, r3
 80059b8:	2300      	movs	r3, #0
 80059ba:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	015a      	lsls	r2, r3, #5
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	4413      	add	r3, r2
 80059c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059c8:	461a      	mov	r2, r3
 80059ca:	2300      	movs	r3, #0
 80059cc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	015a      	lsls	r2, r3, #5
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	4413      	add	r3, r2
 80059d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059da:	461a      	mov	r2, r3
 80059dc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80059e0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	3301      	adds	r3, #1
 80059e6:	613b      	str	r3, [r7, #16]
 80059e8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80059ec:	461a      	mov	r2, r3
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d3b5      	bcc.n	8005960 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059f4:	2300      	movs	r3, #0
 80059f6:	613b      	str	r3, [r7, #16]
 80059f8:	e043      	b.n	8005a82 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	015a      	lsls	r2, r3, #5
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	4413      	add	r3, r2
 8005a02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a10:	d118      	bne.n	8005a44 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d10a      	bne.n	8005a2e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	015a      	lsls	r2, r3, #5
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	4413      	add	r3, r2
 8005a20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a24:	461a      	mov	r2, r3
 8005a26:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005a2a:	6013      	str	r3, [r2, #0]
 8005a2c:	e013      	b.n	8005a56 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	015a      	lsls	r2, r3, #5
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	4413      	add	r3, r2
 8005a36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005a40:	6013      	str	r3, [r2, #0]
 8005a42:	e008      	b.n	8005a56 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	015a      	lsls	r2, r3, #5
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	4413      	add	r3, r2
 8005a4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a50:	461a      	mov	r2, r3
 8005a52:	2300      	movs	r3, #0
 8005a54:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	015a      	lsls	r2, r3, #5
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	4413      	add	r3, r2
 8005a5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a62:	461a      	mov	r2, r3
 8005a64:	2300      	movs	r3, #0
 8005a66:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	015a      	lsls	r2, r3, #5
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	4413      	add	r3, r2
 8005a70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a74:	461a      	mov	r2, r3
 8005a76:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005a7a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	3301      	adds	r3, #1
 8005a80:	613b      	str	r3, [r7, #16]
 8005a82:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005a86:	461a      	mov	r2, r3
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d3b5      	bcc.n	80059fa <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	68fa      	ldr	r2, [r7, #12]
 8005a98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005aa0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005aae:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005ab0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d105      	bne.n	8005ac4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	699b      	ldr	r3, [r3, #24]
 8005abc:	f043 0210 	orr.w	r2, r3, #16
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	699a      	ldr	r2, [r3, #24]
 8005ac8:	4b10      	ldr	r3, [pc, #64]	; (8005b0c <USB_DevInit+0x2c4>)
 8005aca:	4313      	orrs	r3, r2
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005ad0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d005      	beq.n	8005ae4 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	699b      	ldr	r3, [r3, #24]
 8005adc:	f043 0208 	orr.w	r2, r3, #8
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005ae4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d107      	bne.n	8005afc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	699b      	ldr	r3, [r3, #24]
 8005af0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005af4:	f043 0304 	orr.w	r3, r3, #4
 8005af8:	687a      	ldr	r2, [r7, #4]
 8005afa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005afc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3718      	adds	r7, #24
 8005b02:	46bd      	mov	sp, r7
 8005b04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b08:	b004      	add	sp, #16
 8005b0a:	4770      	bx	lr
 8005b0c:	803c3800 	.word	0x803c3800

08005b10 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b085      	sub	sp, #20
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	3301      	adds	r3, #1
 8005b22:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005b2a:	d901      	bls.n	8005b30 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005b2c:	2303      	movs	r3, #3
 8005b2e:	e01b      	b.n	8005b68 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	691b      	ldr	r3, [r3, #16]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	daf2      	bge.n	8005b1e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	019b      	lsls	r3, r3, #6
 8005b40:	f043 0220 	orr.w	r2, r3, #32
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005b54:	d901      	bls.n	8005b5a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005b56:	2303      	movs	r3, #3
 8005b58:	e006      	b.n	8005b68 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	f003 0320 	and.w	r3, r3, #32
 8005b62:	2b20      	cmp	r3, #32
 8005b64:	d0f0      	beq.n	8005b48 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005b66:	2300      	movs	r3, #0
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3714      	adds	r7, #20
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b085      	sub	sp, #20
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	3301      	adds	r3, #1
 8005b84:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005b8c:	d901      	bls.n	8005b92 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005b8e:	2303      	movs	r3, #3
 8005b90:	e018      	b.n	8005bc4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	691b      	ldr	r3, [r3, #16]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	daf2      	bge.n	8005b80 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2210      	movs	r2, #16
 8005ba2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	3301      	adds	r3, #1
 8005ba8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005bb0:	d901      	bls.n	8005bb6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005bb2:	2303      	movs	r3, #3
 8005bb4:	e006      	b.n	8005bc4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	f003 0310 	and.w	r3, r3, #16
 8005bbe:	2b10      	cmp	r3, #16
 8005bc0:	d0f0      	beq.n	8005ba4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005bc2:	2300      	movs	r3, #0
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3714      	adds	r7, #20
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b085      	sub	sp, #20
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	460b      	mov	r3, r1
 8005bda:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	78fb      	ldrb	r3, [r7, #3]
 8005bea:	68f9      	ldr	r1, [r7, #12]
 8005bec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005bf4:	2300      	movs	r3, #0
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3714      	adds	r7, #20
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr

08005c02 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005c02:	b480      	push	{r7}
 8005c04:	b087      	sub	sp, #28
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	f003 0306 	and.w	r3, r3, #6
 8005c1a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d102      	bne.n	8005c28 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005c22:	2300      	movs	r3, #0
 8005c24:	75fb      	strb	r3, [r7, #23]
 8005c26:	e00a      	b.n	8005c3e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2b02      	cmp	r3, #2
 8005c2c:	d002      	beq.n	8005c34 <USB_GetDevSpeed+0x32>
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2b06      	cmp	r3, #6
 8005c32:	d102      	bne.n	8005c3a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005c34:	2302      	movs	r3, #2
 8005c36:	75fb      	strb	r3, [r7, #23]
 8005c38:	e001      	b.n	8005c3e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005c3a:	230f      	movs	r3, #15
 8005c3c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005c3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	371c      	adds	r7, #28
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr

08005c4c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b085      	sub	sp, #20
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	785b      	ldrb	r3, [r3, #1]
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d13a      	bne.n	8005cde <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c6e:	69da      	ldr	r2, [r3, #28]
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	f003 030f 	and.w	r3, r3, #15
 8005c78:	2101      	movs	r1, #1
 8005c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	68f9      	ldr	r1, [r7, #12]
 8005c82:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c86:	4313      	orrs	r3, r2
 8005c88:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	015a      	lsls	r2, r3, #5
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	4413      	add	r3, r2
 8005c92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d155      	bne.n	8005d4c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	015a      	lsls	r2, r3, #5
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	4413      	add	r3, r2
 8005ca8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	791b      	ldrb	r3, [r3, #4]
 8005cba:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005cbc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	059b      	lsls	r3, r3, #22
 8005cc2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	68ba      	ldr	r2, [r7, #8]
 8005cc8:	0151      	lsls	r1, r2, #5
 8005cca:	68fa      	ldr	r2, [r7, #12]
 8005ccc:	440a      	add	r2, r1
 8005cce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cda:	6013      	str	r3, [r2, #0]
 8005cdc:	e036      	b.n	8005d4c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ce4:	69da      	ldr	r2, [r3, #28]
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	f003 030f 	and.w	r3, r3, #15
 8005cee:	2101      	movs	r1, #1
 8005cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8005cf4:	041b      	lsls	r3, r3, #16
 8005cf6:	68f9      	ldr	r1, [r7, #12]
 8005cf8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	015a      	lsls	r2, r3, #5
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	4413      	add	r3, r2
 8005d08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d11a      	bne.n	8005d4c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	015a      	lsls	r2, r3, #5
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	4413      	add	r3, r2
 8005d1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	791b      	ldrb	r3, [r3, #4]
 8005d30:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005d32:	430b      	orrs	r3, r1
 8005d34:	4313      	orrs	r3, r2
 8005d36:	68ba      	ldr	r2, [r7, #8]
 8005d38:	0151      	lsls	r1, r2, #5
 8005d3a:	68fa      	ldr	r2, [r7, #12]
 8005d3c:	440a      	add	r2, r1
 8005d3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d4a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005d4c:	2300      	movs	r3, #0
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3714      	adds	r7, #20
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr
	...

08005d5c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b085      	sub	sp, #20
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	781b      	ldrb	r3, [r3, #0]
 8005d6e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	785b      	ldrb	r3, [r3, #1]
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d161      	bne.n	8005e3c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	015a      	lsls	r2, r3, #5
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	4413      	add	r3, r2
 8005d80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d8e:	d11f      	bne.n	8005dd0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	015a      	lsls	r2, r3, #5
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	4413      	add	r3, r2
 8005d98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	68ba      	ldr	r2, [r7, #8]
 8005da0:	0151      	lsls	r1, r2, #5
 8005da2:	68fa      	ldr	r2, [r7, #12]
 8005da4:	440a      	add	r2, r1
 8005da6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005daa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005dae:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	015a      	lsls	r2, r3, #5
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	4413      	add	r3, r2
 8005db8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	68ba      	ldr	r2, [r7, #8]
 8005dc0:	0151      	lsls	r1, r2, #5
 8005dc2:	68fa      	ldr	r2, [r7, #12]
 8005dc4:	440a      	add	r2, r1
 8005dc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005dce:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	781b      	ldrb	r3, [r3, #0]
 8005ddc:	f003 030f 	and.w	r3, r3, #15
 8005de0:	2101      	movs	r1, #1
 8005de2:	fa01 f303 	lsl.w	r3, r1, r3
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	43db      	mvns	r3, r3
 8005dea:	68f9      	ldr	r1, [r7, #12]
 8005dec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005df0:	4013      	ands	r3, r2
 8005df2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dfa:	69da      	ldr	r2, [r3, #28]
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	f003 030f 	and.w	r3, r3, #15
 8005e04:	2101      	movs	r1, #1
 8005e06:	fa01 f303 	lsl.w	r3, r1, r3
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	43db      	mvns	r3, r3
 8005e0e:	68f9      	ldr	r1, [r7, #12]
 8005e10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e14:	4013      	ands	r3, r2
 8005e16:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	015a      	lsls	r2, r3, #5
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	4413      	add	r3, r2
 8005e20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	0159      	lsls	r1, r3, #5
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	440b      	add	r3, r1
 8005e2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e32:	4619      	mov	r1, r3
 8005e34:	4b35      	ldr	r3, [pc, #212]	; (8005f0c <USB_DeactivateEndpoint+0x1b0>)
 8005e36:	4013      	ands	r3, r2
 8005e38:	600b      	str	r3, [r1, #0]
 8005e3a:	e060      	b.n	8005efe <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	015a      	lsls	r2, r3, #5
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	4413      	add	r3, r2
 8005e44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e52:	d11f      	bne.n	8005e94 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	015a      	lsls	r2, r3, #5
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	4413      	add	r3, r2
 8005e5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	68ba      	ldr	r2, [r7, #8]
 8005e64:	0151      	lsls	r1, r2, #5
 8005e66:	68fa      	ldr	r2, [r7, #12]
 8005e68:	440a      	add	r2, r1
 8005e6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e6e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005e72:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	015a      	lsls	r2, r3, #5
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	4413      	add	r3, r2
 8005e7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	68ba      	ldr	r2, [r7, #8]
 8005e84:	0151      	lsls	r1, r2, #5
 8005e86:	68fa      	ldr	r2, [r7, #12]
 8005e88:	440a      	add	r2, r1
 8005e8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e8e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e92:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	f003 030f 	and.w	r3, r3, #15
 8005ea4:	2101      	movs	r1, #1
 8005ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8005eaa:	041b      	lsls	r3, r3, #16
 8005eac:	43db      	mvns	r3, r3
 8005eae:	68f9      	ldr	r1, [r7, #12]
 8005eb0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005eb4:	4013      	ands	r3, r2
 8005eb6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ebe:	69da      	ldr	r2, [r3, #28]
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	f003 030f 	and.w	r3, r3, #15
 8005ec8:	2101      	movs	r1, #1
 8005eca:	fa01 f303 	lsl.w	r3, r1, r3
 8005ece:	041b      	lsls	r3, r3, #16
 8005ed0:	43db      	mvns	r3, r3
 8005ed2:	68f9      	ldr	r1, [r7, #12]
 8005ed4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ed8:	4013      	ands	r3, r2
 8005eda:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	015a      	lsls	r2, r3, #5
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	4413      	add	r3, r2
 8005ee4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	0159      	lsls	r1, r3, #5
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	440b      	add	r3, r1
 8005ef2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ef6:	4619      	mov	r1, r3
 8005ef8:	4b05      	ldr	r3, [pc, #20]	; (8005f10 <USB_DeactivateEndpoint+0x1b4>)
 8005efa:	4013      	ands	r3, r2
 8005efc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005efe:	2300      	movs	r3, #0
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3714      	adds	r7, #20
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr
 8005f0c:	ec337800 	.word	0xec337800
 8005f10:	eff37800 	.word	0xeff37800

08005f14 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b08a      	sub	sp, #40	; 0x28
 8005f18:	af02      	add	r7, sp, #8
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	60b9      	str	r1, [r7, #8]
 8005f1e:	4613      	mov	r3, r2
 8005f20:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	785b      	ldrb	r3, [r3, #1]
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	f040 817a 	bne.w	800622a <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	691b      	ldr	r3, [r3, #16]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d132      	bne.n	8005fa4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005f3e:	69bb      	ldr	r3, [r7, #24]
 8005f40:	015a      	lsls	r2, r3, #5
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	4413      	add	r3, r2
 8005f46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f4a:	691b      	ldr	r3, [r3, #16]
 8005f4c:	69ba      	ldr	r2, [r7, #24]
 8005f4e:	0151      	lsls	r1, r2, #5
 8005f50:	69fa      	ldr	r2, [r7, #28]
 8005f52:	440a      	add	r2, r1
 8005f54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f58:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f5c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f60:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	015a      	lsls	r2, r3, #5
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	4413      	add	r3, r2
 8005f6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f6e:	691b      	ldr	r3, [r3, #16]
 8005f70:	69ba      	ldr	r2, [r7, #24]
 8005f72:	0151      	lsls	r1, r2, #5
 8005f74:	69fa      	ldr	r2, [r7, #28]
 8005f76:	440a      	add	r2, r1
 8005f78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f7c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f80:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005f82:	69bb      	ldr	r3, [r7, #24]
 8005f84:	015a      	lsls	r2, r3, #5
 8005f86:	69fb      	ldr	r3, [r7, #28]
 8005f88:	4413      	add	r3, r2
 8005f8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f8e:	691b      	ldr	r3, [r3, #16]
 8005f90:	69ba      	ldr	r2, [r7, #24]
 8005f92:	0151      	lsls	r1, r2, #5
 8005f94:	69fa      	ldr	r2, [r7, #28]
 8005f96:	440a      	add	r2, r1
 8005f98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f9c:	0cdb      	lsrs	r3, r3, #19
 8005f9e:	04db      	lsls	r3, r3, #19
 8005fa0:	6113      	str	r3, [r2, #16]
 8005fa2:	e092      	b.n	80060ca <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005fa4:	69bb      	ldr	r3, [r7, #24]
 8005fa6:	015a      	lsls	r2, r3, #5
 8005fa8:	69fb      	ldr	r3, [r7, #28]
 8005faa:	4413      	add	r3, r2
 8005fac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fb0:	691b      	ldr	r3, [r3, #16]
 8005fb2:	69ba      	ldr	r2, [r7, #24]
 8005fb4:	0151      	lsls	r1, r2, #5
 8005fb6:	69fa      	ldr	r2, [r7, #28]
 8005fb8:	440a      	add	r2, r1
 8005fba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fbe:	0cdb      	lsrs	r3, r3, #19
 8005fc0:	04db      	lsls	r3, r3, #19
 8005fc2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005fc4:	69bb      	ldr	r3, [r7, #24]
 8005fc6:	015a      	lsls	r2, r3, #5
 8005fc8:	69fb      	ldr	r3, [r7, #28]
 8005fca:	4413      	add	r3, r2
 8005fcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fd0:	691b      	ldr	r3, [r3, #16]
 8005fd2:	69ba      	ldr	r2, [r7, #24]
 8005fd4:	0151      	lsls	r1, r2, #5
 8005fd6:	69fa      	ldr	r2, [r7, #28]
 8005fd8:	440a      	add	r2, r1
 8005fda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fde:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005fe2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005fe6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005fe8:	69bb      	ldr	r3, [r7, #24]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d11a      	bne.n	8006024 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	691a      	ldr	r2, [r3, #16]
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d903      	bls.n	8006002 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	689a      	ldr	r2, [r3, #8]
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006002:	69bb      	ldr	r3, [r7, #24]
 8006004:	015a      	lsls	r2, r3, #5
 8006006:	69fb      	ldr	r3, [r7, #28]
 8006008:	4413      	add	r3, r2
 800600a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800600e:	691b      	ldr	r3, [r3, #16]
 8006010:	69ba      	ldr	r2, [r7, #24]
 8006012:	0151      	lsls	r1, r2, #5
 8006014:	69fa      	ldr	r2, [r7, #28]
 8006016:	440a      	add	r2, r1
 8006018:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800601c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006020:	6113      	str	r3, [r2, #16]
 8006022:	e01b      	b.n	800605c <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006024:	69bb      	ldr	r3, [r7, #24]
 8006026:	015a      	lsls	r2, r3, #5
 8006028:	69fb      	ldr	r3, [r7, #28]
 800602a:	4413      	add	r3, r2
 800602c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006030:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	6919      	ldr	r1, [r3, #16]
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	440b      	add	r3, r1
 800603c:	1e59      	subs	r1, r3, #1
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	fbb1 f3f3 	udiv	r3, r1, r3
 8006046:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006048:	4ba2      	ldr	r3, [pc, #648]	; (80062d4 <USB_EPStartXfer+0x3c0>)
 800604a:	400b      	ands	r3, r1
 800604c:	69b9      	ldr	r1, [r7, #24]
 800604e:	0148      	lsls	r0, r1, #5
 8006050:	69f9      	ldr	r1, [r7, #28]
 8006052:	4401      	add	r1, r0
 8006054:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006058:	4313      	orrs	r3, r2
 800605a:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800605c:	69bb      	ldr	r3, [r7, #24]
 800605e:	015a      	lsls	r2, r3, #5
 8006060:	69fb      	ldr	r3, [r7, #28]
 8006062:	4413      	add	r3, r2
 8006064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006068:	691a      	ldr	r2, [r3, #16]
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	691b      	ldr	r3, [r3, #16]
 800606e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006072:	69b9      	ldr	r1, [r7, #24]
 8006074:	0148      	lsls	r0, r1, #5
 8006076:	69f9      	ldr	r1, [r7, #28]
 8006078:	4401      	add	r1, r0
 800607a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800607e:	4313      	orrs	r3, r2
 8006080:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	791b      	ldrb	r3, [r3, #4]
 8006086:	2b01      	cmp	r3, #1
 8006088:	d11f      	bne.n	80060ca <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800608a:	69bb      	ldr	r3, [r7, #24]
 800608c:	015a      	lsls	r2, r3, #5
 800608e:	69fb      	ldr	r3, [r7, #28]
 8006090:	4413      	add	r3, r2
 8006092:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006096:	691b      	ldr	r3, [r3, #16]
 8006098:	69ba      	ldr	r2, [r7, #24]
 800609a:	0151      	lsls	r1, r2, #5
 800609c:	69fa      	ldr	r2, [r7, #28]
 800609e:	440a      	add	r2, r1
 80060a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060a4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80060a8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80060aa:	69bb      	ldr	r3, [r7, #24]
 80060ac:	015a      	lsls	r2, r3, #5
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	4413      	add	r3, r2
 80060b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060b6:	691b      	ldr	r3, [r3, #16]
 80060b8:	69ba      	ldr	r2, [r7, #24]
 80060ba:	0151      	lsls	r1, r2, #5
 80060bc:	69fa      	ldr	r2, [r7, #28]
 80060be:	440a      	add	r2, r1
 80060c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80060c8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80060ca:	79fb      	ldrb	r3, [r7, #7]
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d14b      	bne.n	8006168 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	69db      	ldr	r3, [r3, #28]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d009      	beq.n	80060ec <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80060d8:	69bb      	ldr	r3, [r7, #24]
 80060da:	015a      	lsls	r2, r3, #5
 80060dc:	69fb      	ldr	r3, [r7, #28]
 80060de:	4413      	add	r3, r2
 80060e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060e4:	461a      	mov	r2, r3
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	69db      	ldr	r3, [r3, #28]
 80060ea:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	791b      	ldrb	r3, [r3, #4]
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d128      	bne.n	8006146 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80060f4:	69fb      	ldr	r3, [r7, #28]
 80060f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006100:	2b00      	cmp	r3, #0
 8006102:	d110      	bne.n	8006126 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	015a      	lsls	r2, r3, #5
 8006108:	69fb      	ldr	r3, [r7, #28]
 800610a:	4413      	add	r3, r2
 800610c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	69ba      	ldr	r2, [r7, #24]
 8006114:	0151      	lsls	r1, r2, #5
 8006116:	69fa      	ldr	r2, [r7, #28]
 8006118:	440a      	add	r2, r1
 800611a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800611e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006122:	6013      	str	r3, [r2, #0]
 8006124:	e00f      	b.n	8006146 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006126:	69bb      	ldr	r3, [r7, #24]
 8006128:	015a      	lsls	r2, r3, #5
 800612a:	69fb      	ldr	r3, [r7, #28]
 800612c:	4413      	add	r3, r2
 800612e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	69ba      	ldr	r2, [r7, #24]
 8006136:	0151      	lsls	r1, r2, #5
 8006138:	69fa      	ldr	r2, [r7, #28]
 800613a:	440a      	add	r2, r1
 800613c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006140:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006144:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006146:	69bb      	ldr	r3, [r7, #24]
 8006148:	015a      	lsls	r2, r3, #5
 800614a:	69fb      	ldr	r3, [r7, #28]
 800614c:	4413      	add	r3, r2
 800614e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	69ba      	ldr	r2, [r7, #24]
 8006156:	0151      	lsls	r1, r2, #5
 8006158:	69fa      	ldr	r2, [r7, #28]
 800615a:	440a      	add	r2, r1
 800615c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006160:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006164:	6013      	str	r3, [r2, #0]
 8006166:	e165      	b.n	8006434 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006168:	69bb      	ldr	r3, [r7, #24]
 800616a:	015a      	lsls	r2, r3, #5
 800616c:	69fb      	ldr	r3, [r7, #28]
 800616e:	4413      	add	r3, r2
 8006170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	69ba      	ldr	r2, [r7, #24]
 8006178:	0151      	lsls	r1, r2, #5
 800617a:	69fa      	ldr	r2, [r7, #28]
 800617c:	440a      	add	r2, r1
 800617e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006182:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006186:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	791b      	ldrb	r3, [r3, #4]
 800618c:	2b01      	cmp	r3, #1
 800618e:	d015      	beq.n	80061bc <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	691b      	ldr	r3, [r3, #16]
 8006194:	2b00      	cmp	r3, #0
 8006196:	f000 814d 	beq.w	8006434 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800619a:	69fb      	ldr	r3, [r7, #28]
 800619c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	f003 030f 	and.w	r3, r3, #15
 80061aa:	2101      	movs	r1, #1
 80061ac:	fa01 f303 	lsl.w	r3, r1, r3
 80061b0:	69f9      	ldr	r1, [r7, #28]
 80061b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061b6:	4313      	orrs	r3, r2
 80061b8:	634b      	str	r3, [r1, #52]	; 0x34
 80061ba:	e13b      	b.n	8006434 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d110      	bne.n	80061ee <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	015a      	lsls	r2, r3, #5
 80061d0:	69fb      	ldr	r3, [r7, #28]
 80061d2:	4413      	add	r3, r2
 80061d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	69ba      	ldr	r2, [r7, #24]
 80061dc:	0151      	lsls	r1, r2, #5
 80061de:	69fa      	ldr	r2, [r7, #28]
 80061e0:	440a      	add	r2, r1
 80061e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80061ea:	6013      	str	r3, [r2, #0]
 80061ec:	e00f      	b.n	800620e <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80061ee:	69bb      	ldr	r3, [r7, #24]
 80061f0:	015a      	lsls	r2, r3, #5
 80061f2:	69fb      	ldr	r3, [r7, #28]
 80061f4:	4413      	add	r3, r2
 80061f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	69ba      	ldr	r2, [r7, #24]
 80061fe:	0151      	lsls	r1, r2, #5
 8006200:	69fa      	ldr	r2, [r7, #28]
 8006202:	440a      	add	r2, r1
 8006204:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800620c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	68d9      	ldr	r1, [r3, #12]
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	781a      	ldrb	r2, [r3, #0]
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	691b      	ldr	r3, [r3, #16]
 800621a:	b298      	uxth	r0, r3
 800621c:	79fb      	ldrb	r3, [r7, #7]
 800621e:	9300      	str	r3, [sp, #0]
 8006220:	4603      	mov	r3, r0
 8006222:	68f8      	ldr	r0, [r7, #12]
 8006224:	f000 f9b8 	bl	8006598 <USB_WritePacket>
 8006228:	e104      	b.n	8006434 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	015a      	lsls	r2, r3, #5
 800622e:	69fb      	ldr	r3, [r7, #28]
 8006230:	4413      	add	r3, r2
 8006232:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006236:	691b      	ldr	r3, [r3, #16]
 8006238:	69ba      	ldr	r2, [r7, #24]
 800623a:	0151      	lsls	r1, r2, #5
 800623c:	69fa      	ldr	r2, [r7, #28]
 800623e:	440a      	add	r2, r1
 8006240:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006244:	0cdb      	lsrs	r3, r3, #19
 8006246:	04db      	lsls	r3, r3, #19
 8006248:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800624a:	69bb      	ldr	r3, [r7, #24]
 800624c:	015a      	lsls	r2, r3, #5
 800624e:	69fb      	ldr	r3, [r7, #28]
 8006250:	4413      	add	r3, r2
 8006252:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006256:	691b      	ldr	r3, [r3, #16]
 8006258:	69ba      	ldr	r2, [r7, #24]
 800625a:	0151      	lsls	r1, r2, #5
 800625c:	69fa      	ldr	r2, [r7, #28]
 800625e:	440a      	add	r2, r1
 8006260:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006264:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006268:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800626c:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800626e:	69bb      	ldr	r3, [r7, #24]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d131      	bne.n	80062d8 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	691b      	ldr	r3, [r3, #16]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d003      	beq.n	8006284 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	689a      	ldr	r2, [r3, #8]
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	689a      	ldr	r2, [r3, #8]
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	015a      	lsls	r2, r3, #5
 8006290:	69fb      	ldr	r3, [r7, #28]
 8006292:	4413      	add	r3, r2
 8006294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006298:	691a      	ldr	r2, [r3, #16]
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	6a1b      	ldr	r3, [r3, #32]
 800629e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062a2:	69b9      	ldr	r1, [r7, #24]
 80062a4:	0148      	lsls	r0, r1, #5
 80062a6:	69f9      	ldr	r1, [r7, #28]
 80062a8:	4401      	add	r1, r0
 80062aa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80062ae:	4313      	orrs	r3, r2
 80062b0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80062b2:	69bb      	ldr	r3, [r7, #24]
 80062b4:	015a      	lsls	r2, r3, #5
 80062b6:	69fb      	ldr	r3, [r7, #28]
 80062b8:	4413      	add	r3, r2
 80062ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	69ba      	ldr	r2, [r7, #24]
 80062c2:	0151      	lsls	r1, r2, #5
 80062c4:	69fa      	ldr	r2, [r7, #28]
 80062c6:	440a      	add	r2, r1
 80062c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80062d0:	6113      	str	r3, [r2, #16]
 80062d2:	e061      	b.n	8006398 <USB_EPStartXfer+0x484>
 80062d4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	691b      	ldr	r3, [r3, #16]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d123      	bne.n	8006328 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80062e0:	69bb      	ldr	r3, [r7, #24]
 80062e2:	015a      	lsls	r2, r3, #5
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	4413      	add	r3, r2
 80062e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062ec:	691a      	ldr	r2, [r3, #16]
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062f6:	69b9      	ldr	r1, [r7, #24]
 80062f8:	0148      	lsls	r0, r1, #5
 80062fa:	69f9      	ldr	r1, [r7, #28]
 80062fc:	4401      	add	r1, r0
 80062fe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006302:	4313      	orrs	r3, r2
 8006304:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006306:	69bb      	ldr	r3, [r7, #24]
 8006308:	015a      	lsls	r2, r3, #5
 800630a:	69fb      	ldr	r3, [r7, #28]
 800630c:	4413      	add	r3, r2
 800630e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006312:	691b      	ldr	r3, [r3, #16]
 8006314:	69ba      	ldr	r2, [r7, #24]
 8006316:	0151      	lsls	r1, r2, #5
 8006318:	69fa      	ldr	r2, [r7, #28]
 800631a:	440a      	add	r2, r1
 800631c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006320:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006324:	6113      	str	r3, [r2, #16]
 8006326:	e037      	b.n	8006398 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	691a      	ldr	r2, [r3, #16]
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	4413      	add	r3, r2
 8006332:	1e5a      	subs	r2, r3, #1
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	fbb2 f3f3 	udiv	r3, r2, r3
 800633c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	8afa      	ldrh	r2, [r7, #22]
 8006344:	fb03 f202 	mul.w	r2, r3, r2
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800634c:	69bb      	ldr	r3, [r7, #24]
 800634e:	015a      	lsls	r2, r3, #5
 8006350:	69fb      	ldr	r3, [r7, #28]
 8006352:	4413      	add	r3, r2
 8006354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006358:	691a      	ldr	r2, [r3, #16]
 800635a:	8afb      	ldrh	r3, [r7, #22]
 800635c:	04d9      	lsls	r1, r3, #19
 800635e:	4b38      	ldr	r3, [pc, #224]	; (8006440 <USB_EPStartXfer+0x52c>)
 8006360:	400b      	ands	r3, r1
 8006362:	69b9      	ldr	r1, [r7, #24]
 8006364:	0148      	lsls	r0, r1, #5
 8006366:	69f9      	ldr	r1, [r7, #28]
 8006368:	4401      	add	r1, r0
 800636a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800636e:	4313      	orrs	r3, r2
 8006370:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006372:	69bb      	ldr	r3, [r7, #24]
 8006374:	015a      	lsls	r2, r3, #5
 8006376:	69fb      	ldr	r3, [r7, #28]
 8006378:	4413      	add	r3, r2
 800637a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800637e:	691a      	ldr	r2, [r3, #16]
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	6a1b      	ldr	r3, [r3, #32]
 8006384:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006388:	69b9      	ldr	r1, [r7, #24]
 800638a:	0148      	lsls	r0, r1, #5
 800638c:	69f9      	ldr	r1, [r7, #28]
 800638e:	4401      	add	r1, r0
 8006390:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006394:	4313      	orrs	r3, r2
 8006396:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006398:	79fb      	ldrb	r3, [r7, #7]
 800639a:	2b01      	cmp	r3, #1
 800639c:	d10d      	bne.n	80063ba <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	68db      	ldr	r3, [r3, #12]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d009      	beq.n	80063ba <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	68d9      	ldr	r1, [r3, #12]
 80063aa:	69bb      	ldr	r3, [r7, #24]
 80063ac:	015a      	lsls	r2, r3, #5
 80063ae:	69fb      	ldr	r3, [r7, #28]
 80063b0:	4413      	add	r3, r2
 80063b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063b6:	460a      	mov	r2, r1
 80063b8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	791b      	ldrb	r3, [r3, #4]
 80063be:	2b01      	cmp	r3, #1
 80063c0:	d128      	bne.n	8006414 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80063c2:	69fb      	ldr	r3, [r7, #28]
 80063c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d110      	bne.n	80063f4 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80063d2:	69bb      	ldr	r3, [r7, #24]
 80063d4:	015a      	lsls	r2, r3, #5
 80063d6:	69fb      	ldr	r3, [r7, #28]
 80063d8:	4413      	add	r3, r2
 80063da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	69ba      	ldr	r2, [r7, #24]
 80063e2:	0151      	lsls	r1, r2, #5
 80063e4:	69fa      	ldr	r2, [r7, #28]
 80063e6:	440a      	add	r2, r1
 80063e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80063f0:	6013      	str	r3, [r2, #0]
 80063f2:	e00f      	b.n	8006414 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80063f4:	69bb      	ldr	r3, [r7, #24]
 80063f6:	015a      	lsls	r2, r3, #5
 80063f8:	69fb      	ldr	r3, [r7, #28]
 80063fa:	4413      	add	r3, r2
 80063fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	69ba      	ldr	r2, [r7, #24]
 8006404:	0151      	lsls	r1, r2, #5
 8006406:	69fa      	ldr	r2, [r7, #28]
 8006408:	440a      	add	r2, r1
 800640a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800640e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006412:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006414:	69bb      	ldr	r3, [r7, #24]
 8006416:	015a      	lsls	r2, r3, #5
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	4413      	add	r3, r2
 800641c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	69ba      	ldr	r2, [r7, #24]
 8006424:	0151      	lsls	r1, r2, #5
 8006426:	69fa      	ldr	r2, [r7, #28]
 8006428:	440a      	add	r2, r1
 800642a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800642e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006432:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006434:	2300      	movs	r3, #0
}
 8006436:	4618      	mov	r0, r3
 8006438:	3720      	adds	r7, #32
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
 800643e:	bf00      	nop
 8006440:	1ff80000 	.word	0x1ff80000

08006444 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006444:	b480      	push	{r7}
 8006446:	b087      	sub	sp, #28
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800644e:	2300      	movs	r3, #0
 8006450:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006452:	2300      	movs	r3, #0
 8006454:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	785b      	ldrb	r3, [r3, #1]
 800645e:	2b01      	cmp	r3, #1
 8006460:	d14a      	bne.n	80064f8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	015a      	lsls	r2, r3, #5
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	4413      	add	r3, r2
 800646c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006476:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800647a:	f040 8086 	bne.w	800658a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	015a      	lsls	r2, r3, #5
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	4413      	add	r3, r2
 8006488:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	683a      	ldr	r2, [r7, #0]
 8006490:	7812      	ldrb	r2, [r2, #0]
 8006492:	0151      	lsls	r1, r2, #5
 8006494:	693a      	ldr	r2, [r7, #16]
 8006496:	440a      	add	r2, r1
 8006498:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800649c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80064a0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	781b      	ldrb	r3, [r3, #0]
 80064a6:	015a      	lsls	r2, r3, #5
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	4413      	add	r3, r2
 80064ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	683a      	ldr	r2, [r7, #0]
 80064b4:	7812      	ldrb	r2, [r2, #0]
 80064b6:	0151      	lsls	r1, r2, #5
 80064b8:	693a      	ldr	r2, [r7, #16]
 80064ba:	440a      	add	r2, r1
 80064bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80064c4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	3301      	adds	r3, #1
 80064ca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f242 7210 	movw	r2, #10000	; 0x2710
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d902      	bls.n	80064dc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	75fb      	strb	r3, [r7, #23]
          break;
 80064da:	e056      	b.n	800658a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	781b      	ldrb	r3, [r3, #0]
 80064e0:	015a      	lsls	r2, r3, #5
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	4413      	add	r3, r2
 80064e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064f4:	d0e7      	beq.n	80064c6 <USB_EPStopXfer+0x82>
 80064f6:	e048      	b.n	800658a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	781b      	ldrb	r3, [r3, #0]
 80064fc:	015a      	lsls	r2, r3, #5
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	4413      	add	r3, r2
 8006502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800650c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006510:	d13b      	bne.n	800658a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	015a      	lsls	r2, r3, #5
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	4413      	add	r3, r2
 800651c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	683a      	ldr	r2, [r7, #0]
 8006524:	7812      	ldrb	r2, [r2, #0]
 8006526:	0151      	lsls	r1, r2, #5
 8006528:	693a      	ldr	r2, [r7, #16]
 800652a:	440a      	add	r2, r1
 800652c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006530:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006534:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	781b      	ldrb	r3, [r3, #0]
 800653a:	015a      	lsls	r2, r3, #5
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	4413      	add	r3, r2
 8006540:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	683a      	ldr	r2, [r7, #0]
 8006548:	7812      	ldrb	r2, [r2, #0]
 800654a:	0151      	lsls	r1, r2, #5
 800654c:	693a      	ldr	r2, [r7, #16]
 800654e:	440a      	add	r2, r1
 8006550:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006554:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006558:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	3301      	adds	r3, #1
 800655e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f242 7210 	movw	r2, #10000	; 0x2710
 8006566:	4293      	cmp	r3, r2
 8006568:	d902      	bls.n	8006570 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	75fb      	strb	r3, [r7, #23]
          break;
 800656e:	e00c      	b.n	800658a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	781b      	ldrb	r3, [r3, #0]
 8006574:	015a      	lsls	r2, r3, #5
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	4413      	add	r3, r2
 800657a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006584:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006588:	d0e7      	beq.n	800655a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800658a:	7dfb      	ldrb	r3, [r7, #23]
}
 800658c:	4618      	mov	r0, r3
 800658e:	371c      	adds	r7, #28
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr

08006598 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006598:	b480      	push	{r7}
 800659a:	b089      	sub	sp, #36	; 0x24
 800659c:	af00      	add	r7, sp, #0
 800659e:	60f8      	str	r0, [r7, #12]
 80065a0:	60b9      	str	r1, [r7, #8]
 80065a2:	4611      	mov	r1, r2
 80065a4:	461a      	mov	r2, r3
 80065a6:	460b      	mov	r3, r1
 80065a8:	71fb      	strb	r3, [r7, #7]
 80065aa:	4613      	mov	r3, r2
 80065ac:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80065b6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d123      	bne.n	8006606 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80065be:	88bb      	ldrh	r3, [r7, #4]
 80065c0:	3303      	adds	r3, #3
 80065c2:	089b      	lsrs	r3, r3, #2
 80065c4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80065c6:	2300      	movs	r3, #0
 80065c8:	61bb      	str	r3, [r7, #24]
 80065ca:	e018      	b.n	80065fe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80065cc:	79fb      	ldrb	r3, [r7, #7]
 80065ce:	031a      	lsls	r2, r3, #12
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	4413      	add	r3, r2
 80065d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065d8:	461a      	mov	r2, r3
 80065da:	69fb      	ldr	r3, [r7, #28]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	6013      	str	r3, [r2, #0]
      pSrc++;
 80065e0:	69fb      	ldr	r3, [r7, #28]
 80065e2:	3301      	adds	r3, #1
 80065e4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80065e6:	69fb      	ldr	r3, [r7, #28]
 80065e8:	3301      	adds	r3, #1
 80065ea:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	3301      	adds	r3, #1
 80065f0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80065f2:	69fb      	ldr	r3, [r7, #28]
 80065f4:	3301      	adds	r3, #1
 80065f6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80065f8:	69bb      	ldr	r3, [r7, #24]
 80065fa:	3301      	adds	r3, #1
 80065fc:	61bb      	str	r3, [r7, #24]
 80065fe:	69ba      	ldr	r2, [r7, #24]
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	429a      	cmp	r2, r3
 8006604:	d3e2      	bcc.n	80065cc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006606:	2300      	movs	r3, #0
}
 8006608:	4618      	mov	r0, r3
 800660a:	3724      	adds	r7, #36	; 0x24
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr

08006614 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006614:	b480      	push	{r7}
 8006616:	b08b      	sub	sp, #44	; 0x2c
 8006618:	af00      	add	r7, sp, #0
 800661a:	60f8      	str	r0, [r7, #12]
 800661c:	60b9      	str	r1, [r7, #8]
 800661e:	4613      	mov	r3, r2
 8006620:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800662a:	88fb      	ldrh	r3, [r7, #6]
 800662c:	089b      	lsrs	r3, r3, #2
 800662e:	b29b      	uxth	r3, r3
 8006630:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006632:	88fb      	ldrh	r3, [r7, #6]
 8006634:	f003 0303 	and.w	r3, r3, #3
 8006638:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800663a:	2300      	movs	r3, #0
 800663c:	623b      	str	r3, [r7, #32]
 800663e:	e014      	b.n	800666a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006640:	69bb      	ldr	r3, [r7, #24]
 8006642:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006646:	681a      	ldr	r2, [r3, #0]
 8006648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664a:	601a      	str	r2, [r3, #0]
    pDest++;
 800664c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664e:	3301      	adds	r3, #1
 8006650:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006654:	3301      	adds	r3, #1
 8006656:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665a:	3301      	adds	r3, #1
 800665c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800665e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006660:	3301      	adds	r3, #1
 8006662:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006664:	6a3b      	ldr	r3, [r7, #32]
 8006666:	3301      	adds	r3, #1
 8006668:	623b      	str	r3, [r7, #32]
 800666a:	6a3a      	ldr	r2, [r7, #32]
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	429a      	cmp	r2, r3
 8006670:	d3e6      	bcc.n	8006640 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006672:	8bfb      	ldrh	r3, [r7, #30]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d01e      	beq.n	80066b6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006678:	2300      	movs	r3, #0
 800667a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800667c:	69bb      	ldr	r3, [r7, #24]
 800667e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006682:	461a      	mov	r2, r3
 8006684:	f107 0310 	add.w	r3, r7, #16
 8006688:	6812      	ldr	r2, [r2, #0]
 800668a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800668c:	693a      	ldr	r2, [r7, #16]
 800668e:	6a3b      	ldr	r3, [r7, #32]
 8006690:	b2db      	uxtb	r3, r3
 8006692:	00db      	lsls	r3, r3, #3
 8006694:	fa22 f303 	lsr.w	r3, r2, r3
 8006698:	b2da      	uxtb	r2, r3
 800669a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669c:	701a      	strb	r2, [r3, #0]
      i++;
 800669e:	6a3b      	ldr	r3, [r7, #32]
 80066a0:	3301      	adds	r3, #1
 80066a2:	623b      	str	r3, [r7, #32]
      pDest++;
 80066a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a6:	3301      	adds	r3, #1
 80066a8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80066aa:	8bfb      	ldrh	r3, [r7, #30]
 80066ac:	3b01      	subs	r3, #1
 80066ae:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80066b0:	8bfb      	ldrh	r3, [r7, #30]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d1ea      	bne.n	800668c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80066b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	372c      	adds	r7, #44	; 0x2c
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr

080066c4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b085      	sub	sp, #20
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	781b      	ldrb	r3, [r3, #0]
 80066d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	785b      	ldrb	r3, [r3, #1]
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d12c      	bne.n	800673a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	015a      	lsls	r2, r3, #5
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	4413      	add	r3, r2
 80066e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	db12      	blt.n	8006718 <USB_EPSetStall+0x54>
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d00f      	beq.n	8006718 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	015a      	lsls	r2, r3, #5
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	4413      	add	r3, r2
 8006700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	68ba      	ldr	r2, [r7, #8]
 8006708:	0151      	lsls	r1, r2, #5
 800670a:	68fa      	ldr	r2, [r7, #12]
 800670c:	440a      	add	r2, r1
 800670e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006712:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006716:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	015a      	lsls	r2, r3, #5
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	4413      	add	r3, r2
 8006720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	68ba      	ldr	r2, [r7, #8]
 8006728:	0151      	lsls	r1, r2, #5
 800672a:	68fa      	ldr	r2, [r7, #12]
 800672c:	440a      	add	r2, r1
 800672e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006732:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006736:	6013      	str	r3, [r2, #0]
 8006738:	e02b      	b.n	8006792 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	015a      	lsls	r2, r3, #5
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	4413      	add	r3, r2
 8006742:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	2b00      	cmp	r3, #0
 800674a:	db12      	blt.n	8006772 <USB_EPSetStall+0xae>
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d00f      	beq.n	8006772 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	015a      	lsls	r2, r3, #5
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	4413      	add	r3, r2
 800675a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	68ba      	ldr	r2, [r7, #8]
 8006762:	0151      	lsls	r1, r2, #5
 8006764:	68fa      	ldr	r2, [r7, #12]
 8006766:	440a      	add	r2, r1
 8006768:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800676c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006770:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	015a      	lsls	r2, r3, #5
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	4413      	add	r3, r2
 800677a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	68ba      	ldr	r2, [r7, #8]
 8006782:	0151      	lsls	r1, r2, #5
 8006784:	68fa      	ldr	r2, [r7, #12]
 8006786:	440a      	add	r2, r1
 8006788:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800678c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006790:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006792:	2300      	movs	r3, #0
}
 8006794:	4618      	mov	r0, r3
 8006796:	3714      	adds	r7, #20
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr

080067a0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b085      	sub	sp, #20
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	785b      	ldrb	r3, [r3, #1]
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d128      	bne.n	800680e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	015a      	lsls	r2, r3, #5
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	4413      	add	r3, r2
 80067c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	68ba      	ldr	r2, [r7, #8]
 80067cc:	0151      	lsls	r1, r2, #5
 80067ce:	68fa      	ldr	r2, [r7, #12]
 80067d0:	440a      	add	r2, r1
 80067d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80067da:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	791b      	ldrb	r3, [r3, #4]
 80067e0:	2b03      	cmp	r3, #3
 80067e2:	d003      	beq.n	80067ec <USB_EPClearStall+0x4c>
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	791b      	ldrb	r3, [r3, #4]
 80067e8:	2b02      	cmp	r3, #2
 80067ea:	d138      	bne.n	800685e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	015a      	lsls	r2, r3, #5
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	4413      	add	r3, r2
 80067f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	68ba      	ldr	r2, [r7, #8]
 80067fc:	0151      	lsls	r1, r2, #5
 80067fe:	68fa      	ldr	r2, [r7, #12]
 8006800:	440a      	add	r2, r1
 8006802:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006806:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800680a:	6013      	str	r3, [r2, #0]
 800680c:	e027      	b.n	800685e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	015a      	lsls	r2, r3, #5
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	4413      	add	r3, r2
 8006816:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	68ba      	ldr	r2, [r7, #8]
 800681e:	0151      	lsls	r1, r2, #5
 8006820:	68fa      	ldr	r2, [r7, #12]
 8006822:	440a      	add	r2, r1
 8006824:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006828:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800682c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	791b      	ldrb	r3, [r3, #4]
 8006832:	2b03      	cmp	r3, #3
 8006834:	d003      	beq.n	800683e <USB_EPClearStall+0x9e>
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	791b      	ldrb	r3, [r3, #4]
 800683a:	2b02      	cmp	r3, #2
 800683c:	d10f      	bne.n	800685e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	015a      	lsls	r2, r3, #5
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	4413      	add	r3, r2
 8006846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	68ba      	ldr	r2, [r7, #8]
 800684e:	0151      	lsls	r1, r2, #5
 8006850:	68fa      	ldr	r2, [r7, #12]
 8006852:	440a      	add	r2, r1
 8006854:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800685c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800685e:	2300      	movs	r3, #0
}
 8006860:	4618      	mov	r0, r3
 8006862:	3714      	adds	r7, #20
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr

0800686c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800686c:	b480      	push	{r7}
 800686e:	b085      	sub	sp, #20
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	460b      	mov	r3, r1
 8006876:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	68fa      	ldr	r2, [r7, #12]
 8006886:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800688a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800688e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	78fb      	ldrb	r3, [r7, #3]
 800689a:	011b      	lsls	r3, r3, #4
 800689c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80068a0:	68f9      	ldr	r1, [r7, #12]
 80068a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068a6:	4313      	orrs	r3, r2
 80068a8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80068aa:	2300      	movs	r3, #0
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3714      	adds	r7, #20
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr

080068b8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b085      	sub	sp, #20
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	68fa      	ldr	r2, [r7, #12]
 80068ce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80068d2:	f023 0303 	bic.w	r3, r3, #3
 80068d6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	68fa      	ldr	r2, [r7, #12]
 80068e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068e6:	f023 0302 	bic.w	r3, r3, #2
 80068ea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80068ec:	2300      	movs	r3, #0
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3714      	adds	r7, #20
 80068f2:	46bd      	mov	sp, r7
 80068f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f8:	4770      	bx	lr

080068fa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80068fa:	b480      	push	{r7}
 80068fc:	b085      	sub	sp, #20
 80068fe:	af00      	add	r7, sp, #0
 8006900:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	68fa      	ldr	r2, [r7, #12]
 8006910:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006914:	f023 0303 	bic.w	r3, r3, #3
 8006918:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	68fa      	ldr	r2, [r7, #12]
 8006924:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006928:	f043 0302 	orr.w	r3, r3, #2
 800692c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800692e:	2300      	movs	r3, #0
}
 8006930:	4618      	mov	r0, r3
 8006932:	3714      	adds	r7, #20
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr

0800693c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800693c:	b480      	push	{r7}
 800693e:	b085      	sub	sp, #20
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	695b      	ldr	r3, [r3, #20]
 8006948:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	699b      	ldr	r3, [r3, #24]
 800694e:	68fa      	ldr	r2, [r7, #12]
 8006950:	4013      	ands	r3, r2
 8006952:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006954:	68fb      	ldr	r3, [r7, #12]
}
 8006956:	4618      	mov	r0, r3
 8006958:	3714      	adds	r7, #20
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr

08006962 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006962:	b480      	push	{r7}
 8006964:	b085      	sub	sp, #20
 8006966:	af00      	add	r7, sp, #0
 8006968:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006974:	699b      	ldr	r3, [r3, #24]
 8006976:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800697e:	69db      	ldr	r3, [r3, #28]
 8006980:	68ba      	ldr	r2, [r7, #8]
 8006982:	4013      	ands	r3, r2
 8006984:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	0c1b      	lsrs	r3, r3, #16
}
 800698a:	4618      	mov	r0, r3
 800698c:	3714      	adds	r7, #20
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr

08006996 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006996:	b480      	push	{r7}
 8006998:	b085      	sub	sp, #20
 800699a:	af00      	add	r7, sp, #0
 800699c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069a8:	699b      	ldr	r3, [r3, #24]
 80069aa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069b2:	69db      	ldr	r3, [r3, #28]
 80069b4:	68ba      	ldr	r2, [r7, #8]
 80069b6:	4013      	ands	r3, r2
 80069b8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	b29b      	uxth	r3, r3
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3714      	adds	r7, #20
 80069c2:	46bd      	mov	sp, r7
 80069c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c8:	4770      	bx	lr

080069ca <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80069ca:	b480      	push	{r7}
 80069cc:	b085      	sub	sp, #20
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	6078      	str	r0, [r7, #4]
 80069d2:	460b      	mov	r3, r1
 80069d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80069da:	78fb      	ldrb	r3, [r7, #3]
 80069dc:	015a      	lsls	r2, r3, #5
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	4413      	add	r3, r2
 80069e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069f0:	695b      	ldr	r3, [r3, #20]
 80069f2:	68ba      	ldr	r2, [r7, #8]
 80069f4:	4013      	ands	r3, r2
 80069f6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80069f8:	68bb      	ldr	r3, [r7, #8]
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3714      	adds	r7, #20
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr

08006a06 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006a06:	b480      	push	{r7}
 8006a08:	b087      	sub	sp, #28
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	6078      	str	r0, [r7, #4]
 8006a0e:	460b      	mov	r3, r1
 8006a10:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a1c:	691b      	ldr	r3, [r3, #16]
 8006a1e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a28:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006a2a:	78fb      	ldrb	r3, [r7, #3]
 8006a2c:	f003 030f 	and.w	r3, r3, #15
 8006a30:	68fa      	ldr	r2, [r7, #12]
 8006a32:	fa22 f303 	lsr.w	r3, r2, r3
 8006a36:	01db      	lsls	r3, r3, #7
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	693a      	ldr	r2, [r7, #16]
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006a40:	78fb      	ldrb	r3, [r7, #3]
 8006a42:	015a      	lsls	r2, r3, #5
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	4413      	add	r3, r2
 8006a48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a4c:	689b      	ldr	r3, [r3, #8]
 8006a4e:	693a      	ldr	r2, [r7, #16]
 8006a50:	4013      	ands	r3, r2
 8006a52:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006a54:	68bb      	ldr	r3, [r7, #8]
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	371c      	adds	r7, #28
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a60:	4770      	bx	lr

08006a62 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006a62:	b480      	push	{r7}
 8006a64:	b083      	sub	sp, #12
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	695b      	ldr	r3, [r3, #20]
 8006a6e:	f003 0301 	and.w	r3, r3, #1
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	370c      	adds	r7, #12
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr

08006a7e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006a7e:	b480      	push	{r7}
 8006a80:	b085      	sub	sp, #20
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	68fa      	ldr	r2, [r7, #12]
 8006a94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a98:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006a9c:	f023 0307 	bic.w	r3, r3, #7
 8006aa0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	68fa      	ldr	r2, [r7, #12]
 8006aac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ab4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006ab6:	2300      	movs	r3, #0
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3714      	adds	r7, #20
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b087      	sub	sp, #28
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	60f8      	str	r0, [r7, #12]
 8006acc:	460b      	mov	r3, r1
 8006ace:	607a      	str	r2, [r7, #4]
 8006ad0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	333c      	adds	r3, #60	; 0x3c
 8006ada:	3304      	adds	r3, #4
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	4a26      	ldr	r2, [pc, #152]	; (8006b7c <USB_EP0_OutStart+0xb8>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d90a      	bls.n	8006afe <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006af4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006af8:	d101      	bne.n	8006afe <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006afa:	2300      	movs	r3, #0
 8006afc:	e037      	b.n	8006b6e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b04:	461a      	mov	r2, r3
 8006b06:	2300      	movs	r3, #0
 8006b08:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b10:	691b      	ldr	r3, [r3, #16]
 8006b12:	697a      	ldr	r2, [r7, #20]
 8006b14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b18:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b1c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b24:	691b      	ldr	r3, [r3, #16]
 8006b26:	697a      	ldr	r2, [r7, #20]
 8006b28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b2c:	f043 0318 	orr.w	r3, r3, #24
 8006b30:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b38:	691b      	ldr	r3, [r3, #16]
 8006b3a:	697a      	ldr	r2, [r7, #20]
 8006b3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b40:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006b44:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006b46:	7afb      	ldrb	r3, [r7, #11]
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d10f      	bne.n	8006b6c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b52:	461a      	mov	r2, r3
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	697a      	ldr	r2, [r7, #20]
 8006b62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b66:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006b6a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006b6c:	2300      	movs	r3, #0
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	371c      	adds	r7, #28
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr
 8006b7a:	bf00      	nop
 8006b7c:	4f54300a 	.word	0x4f54300a

08006b80 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b085      	sub	sp, #20
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	3301      	adds	r3, #1
 8006b90:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006b98:	d901      	bls.n	8006b9e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006b9a:	2303      	movs	r3, #3
 8006b9c:	e01b      	b.n	8006bd6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	691b      	ldr	r3, [r3, #16]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	daf2      	bge.n	8006b8c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	691b      	ldr	r3, [r3, #16]
 8006bae:	f043 0201 	orr.w	r2, r3, #1
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	3301      	adds	r3, #1
 8006bba:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006bc2:	d901      	bls.n	8006bc8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006bc4:	2303      	movs	r3, #3
 8006bc6:	e006      	b.n	8006bd6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	691b      	ldr	r3, [r3, #16]
 8006bcc:	f003 0301 	and.w	r3, r3, #1
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	d0f0      	beq.n	8006bb6 <USB_CoreReset+0x36>

  return HAL_OK;
 8006bd4:	2300      	movs	r3, #0
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3714      	adds	r7, #20
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr
	...

08006be4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b084      	sub	sp, #16
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	460b      	mov	r3, r1
 8006bee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006bf0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006bf4:	f003 ff36 	bl	800aa64 <USBD_static_malloc>
 8006bf8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d109      	bne.n	8006c14 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	32b0      	adds	r2, #176	; 0xb0
 8006c0a:	2100      	movs	r1, #0
 8006c0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006c10:	2302      	movs	r3, #2
 8006c12:	e0d4      	b.n	8006dbe <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006c14:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006c18:	2100      	movs	r1, #0
 8006c1a:	68f8      	ldr	r0, [r7, #12]
 8006c1c:	f005 fefb 	bl	800ca16 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	32b0      	adds	r2, #176	; 0xb0
 8006c2a:	68f9      	ldr	r1, [r7, #12]
 8006c2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	32b0      	adds	r2, #176	; 0xb0
 8006c3a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	7c1b      	ldrb	r3, [r3, #16]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d138      	bne.n	8006cbe <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006c4c:	4b5e      	ldr	r3, [pc, #376]	; (8006dc8 <USBD_CDC_Init+0x1e4>)
 8006c4e:	7819      	ldrb	r1, [r3, #0]
 8006c50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c54:	2202      	movs	r2, #2
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f003 fde1 	bl	800a81e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006c5c:	4b5a      	ldr	r3, [pc, #360]	; (8006dc8 <USBD_CDC_Init+0x1e4>)
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	f003 020f 	and.w	r2, r3, #15
 8006c64:	6879      	ldr	r1, [r7, #4]
 8006c66:	4613      	mov	r3, r2
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	4413      	add	r3, r2
 8006c6c:	009b      	lsls	r3, r3, #2
 8006c6e:	440b      	add	r3, r1
 8006c70:	3324      	adds	r3, #36	; 0x24
 8006c72:	2201      	movs	r2, #1
 8006c74:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006c76:	4b55      	ldr	r3, [pc, #340]	; (8006dcc <USBD_CDC_Init+0x1e8>)
 8006c78:	7819      	ldrb	r1, [r3, #0]
 8006c7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c7e:	2202      	movs	r2, #2
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f003 fdcc 	bl	800a81e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006c86:	4b51      	ldr	r3, [pc, #324]	; (8006dcc <USBD_CDC_Init+0x1e8>)
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	f003 020f 	and.w	r2, r3, #15
 8006c8e:	6879      	ldr	r1, [r7, #4]
 8006c90:	4613      	mov	r3, r2
 8006c92:	009b      	lsls	r3, r3, #2
 8006c94:	4413      	add	r3, r2
 8006c96:	009b      	lsls	r3, r3, #2
 8006c98:	440b      	add	r3, r1
 8006c9a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006ca2:	4b4b      	ldr	r3, [pc, #300]	; (8006dd0 <USBD_CDC_Init+0x1ec>)
 8006ca4:	781b      	ldrb	r3, [r3, #0]
 8006ca6:	f003 020f 	and.w	r2, r3, #15
 8006caa:	6879      	ldr	r1, [r7, #4]
 8006cac:	4613      	mov	r3, r2
 8006cae:	009b      	lsls	r3, r3, #2
 8006cb0:	4413      	add	r3, r2
 8006cb2:	009b      	lsls	r3, r3, #2
 8006cb4:	440b      	add	r3, r1
 8006cb6:	3326      	adds	r3, #38	; 0x26
 8006cb8:	2210      	movs	r2, #16
 8006cba:	801a      	strh	r2, [r3, #0]
 8006cbc:	e035      	b.n	8006d2a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006cbe:	4b42      	ldr	r3, [pc, #264]	; (8006dc8 <USBD_CDC_Init+0x1e4>)
 8006cc0:	7819      	ldrb	r1, [r3, #0]
 8006cc2:	2340      	movs	r3, #64	; 0x40
 8006cc4:	2202      	movs	r2, #2
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f003 fda9 	bl	800a81e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006ccc:	4b3e      	ldr	r3, [pc, #248]	; (8006dc8 <USBD_CDC_Init+0x1e4>)
 8006cce:	781b      	ldrb	r3, [r3, #0]
 8006cd0:	f003 020f 	and.w	r2, r3, #15
 8006cd4:	6879      	ldr	r1, [r7, #4]
 8006cd6:	4613      	mov	r3, r2
 8006cd8:	009b      	lsls	r3, r3, #2
 8006cda:	4413      	add	r3, r2
 8006cdc:	009b      	lsls	r3, r3, #2
 8006cde:	440b      	add	r3, r1
 8006ce0:	3324      	adds	r3, #36	; 0x24
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006ce6:	4b39      	ldr	r3, [pc, #228]	; (8006dcc <USBD_CDC_Init+0x1e8>)
 8006ce8:	7819      	ldrb	r1, [r3, #0]
 8006cea:	2340      	movs	r3, #64	; 0x40
 8006cec:	2202      	movs	r2, #2
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f003 fd95 	bl	800a81e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006cf4:	4b35      	ldr	r3, [pc, #212]	; (8006dcc <USBD_CDC_Init+0x1e8>)
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	f003 020f 	and.w	r2, r3, #15
 8006cfc:	6879      	ldr	r1, [r7, #4]
 8006cfe:	4613      	mov	r3, r2
 8006d00:	009b      	lsls	r3, r3, #2
 8006d02:	4413      	add	r3, r2
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	440b      	add	r3, r1
 8006d08:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006d0c:	2201      	movs	r2, #1
 8006d0e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006d10:	4b2f      	ldr	r3, [pc, #188]	; (8006dd0 <USBD_CDC_Init+0x1ec>)
 8006d12:	781b      	ldrb	r3, [r3, #0]
 8006d14:	f003 020f 	and.w	r2, r3, #15
 8006d18:	6879      	ldr	r1, [r7, #4]
 8006d1a:	4613      	mov	r3, r2
 8006d1c:	009b      	lsls	r3, r3, #2
 8006d1e:	4413      	add	r3, r2
 8006d20:	009b      	lsls	r3, r3, #2
 8006d22:	440b      	add	r3, r1
 8006d24:	3326      	adds	r3, #38	; 0x26
 8006d26:	2210      	movs	r2, #16
 8006d28:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006d2a:	4b29      	ldr	r3, [pc, #164]	; (8006dd0 <USBD_CDC_Init+0x1ec>)
 8006d2c:	7819      	ldrb	r1, [r3, #0]
 8006d2e:	2308      	movs	r3, #8
 8006d30:	2203      	movs	r2, #3
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f003 fd73 	bl	800a81e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006d38:	4b25      	ldr	r3, [pc, #148]	; (8006dd0 <USBD_CDC_Init+0x1ec>)
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	f003 020f 	and.w	r2, r3, #15
 8006d40:	6879      	ldr	r1, [r7, #4]
 8006d42:	4613      	mov	r3, r2
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	4413      	add	r3, r2
 8006d48:	009b      	lsls	r3, r3, #2
 8006d4a:	440b      	add	r3, r1
 8006d4c:	3324      	adds	r3, #36	; 0x24
 8006d4e:	2201      	movs	r2, #1
 8006d50:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2200      	movs	r2, #0
 8006d56:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	33b0      	adds	r3, #176	; 0xb0
 8006d64:	009b      	lsls	r3, r3, #2
 8006d66:	4413      	add	r3, r2
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2200      	movs	r2, #0
 8006d72:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d101      	bne.n	8006d8c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006d88:	2302      	movs	r3, #2
 8006d8a:	e018      	b.n	8006dbe <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	7c1b      	ldrb	r3, [r3, #16]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d10a      	bne.n	8006daa <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006d94:	4b0d      	ldr	r3, [pc, #52]	; (8006dcc <USBD_CDC_Init+0x1e8>)
 8006d96:	7819      	ldrb	r1, [r3, #0]
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f003 fe2a 	bl	800a9fc <USBD_LL_PrepareReceive>
 8006da8:	e008      	b.n	8006dbc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006daa:	4b08      	ldr	r3, [pc, #32]	; (8006dcc <USBD_CDC_Init+0x1e8>)
 8006dac:	7819      	ldrb	r1, [r3, #0]
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006db4:	2340      	movs	r3, #64	; 0x40
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f003 fe20 	bl	800a9fc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006dbc:	2300      	movs	r3, #0
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3710      	adds	r7, #16
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}
 8006dc6:	bf00      	nop
 8006dc8:	20000093 	.word	0x20000093
 8006dcc:	20000094 	.word	0x20000094
 8006dd0:	20000095 	.word	0x20000095

08006dd4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b082      	sub	sp, #8
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	460b      	mov	r3, r1
 8006dde:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006de0:	4b3a      	ldr	r3, [pc, #232]	; (8006ecc <USBD_CDC_DeInit+0xf8>)
 8006de2:	781b      	ldrb	r3, [r3, #0]
 8006de4:	4619      	mov	r1, r3
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f003 fd3f 	bl	800a86a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006dec:	4b37      	ldr	r3, [pc, #220]	; (8006ecc <USBD_CDC_DeInit+0xf8>)
 8006dee:	781b      	ldrb	r3, [r3, #0]
 8006df0:	f003 020f 	and.w	r2, r3, #15
 8006df4:	6879      	ldr	r1, [r7, #4]
 8006df6:	4613      	mov	r3, r2
 8006df8:	009b      	lsls	r3, r3, #2
 8006dfa:	4413      	add	r3, r2
 8006dfc:	009b      	lsls	r3, r3, #2
 8006dfe:	440b      	add	r3, r1
 8006e00:	3324      	adds	r3, #36	; 0x24
 8006e02:	2200      	movs	r2, #0
 8006e04:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006e06:	4b32      	ldr	r3, [pc, #200]	; (8006ed0 <USBD_CDC_DeInit+0xfc>)
 8006e08:	781b      	ldrb	r3, [r3, #0]
 8006e0a:	4619      	mov	r1, r3
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f003 fd2c 	bl	800a86a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006e12:	4b2f      	ldr	r3, [pc, #188]	; (8006ed0 <USBD_CDC_DeInit+0xfc>)
 8006e14:	781b      	ldrb	r3, [r3, #0]
 8006e16:	f003 020f 	and.w	r2, r3, #15
 8006e1a:	6879      	ldr	r1, [r7, #4]
 8006e1c:	4613      	mov	r3, r2
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	4413      	add	r3, r2
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	440b      	add	r3, r1
 8006e26:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006e2e:	4b29      	ldr	r3, [pc, #164]	; (8006ed4 <USBD_CDC_DeInit+0x100>)
 8006e30:	781b      	ldrb	r3, [r3, #0]
 8006e32:	4619      	mov	r1, r3
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f003 fd18 	bl	800a86a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006e3a:	4b26      	ldr	r3, [pc, #152]	; (8006ed4 <USBD_CDC_DeInit+0x100>)
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	f003 020f 	and.w	r2, r3, #15
 8006e42:	6879      	ldr	r1, [r7, #4]
 8006e44:	4613      	mov	r3, r2
 8006e46:	009b      	lsls	r3, r3, #2
 8006e48:	4413      	add	r3, r2
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	440b      	add	r3, r1
 8006e4e:	3324      	adds	r3, #36	; 0x24
 8006e50:	2200      	movs	r2, #0
 8006e52:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006e54:	4b1f      	ldr	r3, [pc, #124]	; (8006ed4 <USBD_CDC_DeInit+0x100>)
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	f003 020f 	and.w	r2, r3, #15
 8006e5c:	6879      	ldr	r1, [r7, #4]
 8006e5e:	4613      	mov	r3, r2
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	4413      	add	r3, r2
 8006e64:	009b      	lsls	r3, r3, #2
 8006e66:	440b      	add	r3, r1
 8006e68:	3326      	adds	r3, #38	; 0x26
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	32b0      	adds	r2, #176	; 0xb0
 8006e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d01f      	beq.n	8006ec0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	33b0      	adds	r3, #176	; 0xb0
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	4413      	add	r3, r2
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	32b0      	adds	r2, #176	; 0xb0
 8006e9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f003 fdec 	bl	800aa80 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	32b0      	adds	r2, #176	; 0xb0
 8006eb2:	2100      	movs	r1, #0
 8006eb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006ec0:	2300      	movs	r3, #0
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3708      	adds	r7, #8
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}
 8006eca:	bf00      	nop
 8006ecc:	20000093 	.word	0x20000093
 8006ed0:	20000094 	.word	0x20000094
 8006ed4:	20000095 	.word	0x20000095

08006ed8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b086      	sub	sp, #24
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
 8006ee0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	32b0      	adds	r2, #176	; 0xb0
 8006eec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ef0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006efa:	2300      	movs	r3, #0
 8006efc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d101      	bne.n	8006f08 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006f04:	2303      	movs	r3, #3
 8006f06:	e0bf      	b.n	8007088 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	781b      	ldrb	r3, [r3, #0]
 8006f0c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d050      	beq.n	8006fb6 <USBD_CDC_Setup+0xde>
 8006f14:	2b20      	cmp	r3, #32
 8006f16:	f040 80af 	bne.w	8007078 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	88db      	ldrh	r3, [r3, #6]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d03a      	beq.n	8006f98 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	781b      	ldrb	r3, [r3, #0]
 8006f26:	b25b      	sxtb	r3, r3
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	da1b      	bge.n	8006f64 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006f32:	687a      	ldr	r2, [r7, #4]
 8006f34:	33b0      	adds	r3, #176	; 0xb0
 8006f36:	009b      	lsls	r3, r3, #2
 8006f38:	4413      	add	r3, r2
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	689b      	ldr	r3, [r3, #8]
 8006f3e:	683a      	ldr	r2, [r7, #0]
 8006f40:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006f42:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006f44:	683a      	ldr	r2, [r7, #0]
 8006f46:	88d2      	ldrh	r2, [r2, #6]
 8006f48:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	88db      	ldrh	r3, [r3, #6]
 8006f4e:	2b07      	cmp	r3, #7
 8006f50:	bf28      	it	cs
 8006f52:	2307      	movcs	r3, #7
 8006f54:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	89fa      	ldrh	r2, [r7, #14]
 8006f5a:	4619      	mov	r1, r3
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f001 fd49 	bl	80089f4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006f62:	e090      	b.n	8007086 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	785a      	ldrb	r2, [r3, #1]
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	88db      	ldrh	r3, [r3, #6]
 8006f72:	2b3f      	cmp	r3, #63	; 0x3f
 8006f74:	d803      	bhi.n	8006f7e <USBD_CDC_Setup+0xa6>
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	88db      	ldrh	r3, [r3, #6]
 8006f7a:	b2da      	uxtb	r2, r3
 8006f7c:	e000      	b.n	8006f80 <USBD_CDC_Setup+0xa8>
 8006f7e:	2240      	movs	r2, #64	; 0x40
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006f86:	6939      	ldr	r1, [r7, #16]
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006f8e:	461a      	mov	r2, r3
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f001 fd5b 	bl	8008a4c <USBD_CtlPrepareRx>
      break;
 8006f96:	e076      	b.n	8007086 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006f9e:	687a      	ldr	r2, [r7, #4]
 8006fa0:	33b0      	adds	r3, #176	; 0xb0
 8006fa2:	009b      	lsls	r3, r3, #2
 8006fa4:	4413      	add	r3, r2
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	689b      	ldr	r3, [r3, #8]
 8006faa:	683a      	ldr	r2, [r7, #0]
 8006fac:	7850      	ldrb	r0, [r2, #1]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	6839      	ldr	r1, [r7, #0]
 8006fb2:	4798      	blx	r3
      break;
 8006fb4:	e067      	b.n	8007086 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	785b      	ldrb	r3, [r3, #1]
 8006fba:	2b0b      	cmp	r3, #11
 8006fbc:	d851      	bhi.n	8007062 <USBD_CDC_Setup+0x18a>
 8006fbe:	a201      	add	r2, pc, #4	; (adr r2, 8006fc4 <USBD_CDC_Setup+0xec>)
 8006fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fc4:	08006ff5 	.word	0x08006ff5
 8006fc8:	08007071 	.word	0x08007071
 8006fcc:	08007063 	.word	0x08007063
 8006fd0:	08007063 	.word	0x08007063
 8006fd4:	08007063 	.word	0x08007063
 8006fd8:	08007063 	.word	0x08007063
 8006fdc:	08007063 	.word	0x08007063
 8006fe0:	08007063 	.word	0x08007063
 8006fe4:	08007063 	.word	0x08007063
 8006fe8:	08007063 	.word	0x08007063
 8006fec:	0800701f 	.word	0x0800701f
 8006ff0:	08007049 	.word	0x08007049
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ffa:	b2db      	uxtb	r3, r3
 8006ffc:	2b03      	cmp	r3, #3
 8006ffe:	d107      	bne.n	8007010 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007000:	f107 030a 	add.w	r3, r7, #10
 8007004:	2202      	movs	r2, #2
 8007006:	4619      	mov	r1, r3
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f001 fcf3 	bl	80089f4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800700e:	e032      	b.n	8007076 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007010:	6839      	ldr	r1, [r7, #0]
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f001 fc7d 	bl	8008912 <USBD_CtlError>
            ret = USBD_FAIL;
 8007018:	2303      	movs	r3, #3
 800701a:	75fb      	strb	r3, [r7, #23]
          break;
 800701c:	e02b      	b.n	8007076 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007024:	b2db      	uxtb	r3, r3
 8007026:	2b03      	cmp	r3, #3
 8007028:	d107      	bne.n	800703a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800702a:	f107 030d 	add.w	r3, r7, #13
 800702e:	2201      	movs	r2, #1
 8007030:	4619      	mov	r1, r3
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f001 fcde 	bl	80089f4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007038:	e01d      	b.n	8007076 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800703a:	6839      	ldr	r1, [r7, #0]
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f001 fc68 	bl	8008912 <USBD_CtlError>
            ret = USBD_FAIL;
 8007042:	2303      	movs	r3, #3
 8007044:	75fb      	strb	r3, [r7, #23]
          break;
 8007046:	e016      	b.n	8007076 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800704e:	b2db      	uxtb	r3, r3
 8007050:	2b03      	cmp	r3, #3
 8007052:	d00f      	beq.n	8007074 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007054:	6839      	ldr	r1, [r7, #0]
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f001 fc5b 	bl	8008912 <USBD_CtlError>
            ret = USBD_FAIL;
 800705c:	2303      	movs	r3, #3
 800705e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007060:	e008      	b.n	8007074 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007062:	6839      	ldr	r1, [r7, #0]
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f001 fc54 	bl	8008912 <USBD_CtlError>
          ret = USBD_FAIL;
 800706a:	2303      	movs	r3, #3
 800706c:	75fb      	strb	r3, [r7, #23]
          break;
 800706e:	e002      	b.n	8007076 <USBD_CDC_Setup+0x19e>
          break;
 8007070:	bf00      	nop
 8007072:	e008      	b.n	8007086 <USBD_CDC_Setup+0x1ae>
          break;
 8007074:	bf00      	nop
      }
      break;
 8007076:	e006      	b.n	8007086 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007078:	6839      	ldr	r1, [r7, #0]
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f001 fc49 	bl	8008912 <USBD_CtlError>
      ret = USBD_FAIL;
 8007080:	2303      	movs	r3, #3
 8007082:	75fb      	strb	r3, [r7, #23]
      break;
 8007084:	bf00      	nop
  }

  return (uint8_t)ret;
 8007086:	7dfb      	ldrb	r3, [r7, #23]
}
 8007088:	4618      	mov	r0, r3
 800708a:	3718      	adds	r7, #24
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}

08007090 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b084      	sub	sp, #16
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	460b      	mov	r3, r1
 800709a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80070a2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	32b0      	adds	r2, #176	; 0xb0
 80070ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d101      	bne.n	80070ba <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80070b6:	2303      	movs	r3, #3
 80070b8:	e065      	b.n	8007186 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	32b0      	adds	r2, #176	; 0xb0
 80070c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070c8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80070ca:	78fb      	ldrb	r3, [r7, #3]
 80070cc:	f003 020f 	and.w	r2, r3, #15
 80070d0:	6879      	ldr	r1, [r7, #4]
 80070d2:	4613      	mov	r3, r2
 80070d4:	009b      	lsls	r3, r3, #2
 80070d6:	4413      	add	r3, r2
 80070d8:	009b      	lsls	r3, r3, #2
 80070da:	440b      	add	r3, r1
 80070dc:	3318      	adds	r3, #24
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d02f      	beq.n	8007144 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80070e4:	78fb      	ldrb	r3, [r7, #3]
 80070e6:	f003 020f 	and.w	r2, r3, #15
 80070ea:	6879      	ldr	r1, [r7, #4]
 80070ec:	4613      	mov	r3, r2
 80070ee:	009b      	lsls	r3, r3, #2
 80070f0:	4413      	add	r3, r2
 80070f2:	009b      	lsls	r3, r3, #2
 80070f4:	440b      	add	r3, r1
 80070f6:	3318      	adds	r3, #24
 80070f8:	681a      	ldr	r2, [r3, #0]
 80070fa:	78fb      	ldrb	r3, [r7, #3]
 80070fc:	f003 010f 	and.w	r1, r3, #15
 8007100:	68f8      	ldr	r0, [r7, #12]
 8007102:	460b      	mov	r3, r1
 8007104:	00db      	lsls	r3, r3, #3
 8007106:	440b      	add	r3, r1
 8007108:	009b      	lsls	r3, r3, #2
 800710a:	4403      	add	r3, r0
 800710c:	331c      	adds	r3, #28
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	fbb2 f1f3 	udiv	r1, r2, r3
 8007114:	fb01 f303 	mul.w	r3, r1, r3
 8007118:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800711a:	2b00      	cmp	r3, #0
 800711c:	d112      	bne.n	8007144 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800711e:	78fb      	ldrb	r3, [r7, #3]
 8007120:	f003 020f 	and.w	r2, r3, #15
 8007124:	6879      	ldr	r1, [r7, #4]
 8007126:	4613      	mov	r3, r2
 8007128:	009b      	lsls	r3, r3, #2
 800712a:	4413      	add	r3, r2
 800712c:	009b      	lsls	r3, r3, #2
 800712e:	440b      	add	r3, r1
 8007130:	3318      	adds	r3, #24
 8007132:	2200      	movs	r2, #0
 8007134:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007136:	78f9      	ldrb	r1, [r7, #3]
 8007138:	2300      	movs	r3, #0
 800713a:	2200      	movs	r2, #0
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f003 fc3c 	bl	800a9ba <USBD_LL_Transmit>
 8007142:	e01f      	b.n	8007184 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	2200      	movs	r2, #0
 8007148:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007152:	687a      	ldr	r2, [r7, #4]
 8007154:	33b0      	adds	r3, #176	; 0xb0
 8007156:	009b      	lsls	r3, r3, #2
 8007158:	4413      	add	r3, r2
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	691b      	ldr	r3, [r3, #16]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d010      	beq.n	8007184 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007168:	687a      	ldr	r2, [r7, #4]
 800716a:	33b0      	adds	r3, #176	; 0xb0
 800716c:	009b      	lsls	r3, r3, #2
 800716e:	4413      	add	r3, r2
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	691b      	ldr	r3, [r3, #16]
 8007174:	68ba      	ldr	r2, [r7, #8]
 8007176:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800717a:	68ba      	ldr	r2, [r7, #8]
 800717c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007180:	78fa      	ldrb	r2, [r7, #3]
 8007182:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007184:	2300      	movs	r3, #0
}
 8007186:	4618      	mov	r0, r3
 8007188:	3710      	adds	r7, #16
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}

0800718e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800718e:	b580      	push	{r7, lr}
 8007190:	b084      	sub	sp, #16
 8007192:	af00      	add	r7, sp, #0
 8007194:	6078      	str	r0, [r7, #4]
 8007196:	460b      	mov	r3, r1
 8007198:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	32b0      	adds	r2, #176	; 0xb0
 80071a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071a8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	32b0      	adds	r2, #176	; 0xb0
 80071b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d101      	bne.n	80071c0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80071bc:	2303      	movs	r3, #3
 80071be:	e01a      	b.n	80071f6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80071c0:	78fb      	ldrb	r3, [r7, #3]
 80071c2:	4619      	mov	r1, r3
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f003 fc3a 	bl	800aa3e <USBD_LL_GetRxDataSize>
 80071ca:	4602      	mov	r2, r0
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80071d8:	687a      	ldr	r2, [r7, #4]
 80071da:	33b0      	adds	r3, #176	; 0xb0
 80071dc:	009b      	lsls	r3, r3, #2
 80071de:	4413      	add	r3, r2
 80071e0:	685b      	ldr	r3, [r3, #4]
 80071e2:	68db      	ldr	r3, [r3, #12]
 80071e4:	68fa      	ldr	r2, [r7, #12]
 80071e6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80071ea:	68fa      	ldr	r2, [r7, #12]
 80071ec:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80071f0:	4611      	mov	r1, r2
 80071f2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80071f4:	2300      	movs	r3, #0
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3710      	adds	r7, #16
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}

080071fe <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80071fe:	b580      	push	{r7, lr}
 8007200:	b084      	sub	sp, #16
 8007202:	af00      	add	r7, sp, #0
 8007204:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	32b0      	adds	r2, #176	; 0xb0
 8007210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007214:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d101      	bne.n	8007220 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800721c:	2303      	movs	r3, #3
 800721e:	e025      	b.n	800726c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	33b0      	adds	r3, #176	; 0xb0
 800722a:	009b      	lsls	r3, r3, #2
 800722c:	4413      	add	r3, r2
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d01a      	beq.n	800726a <USBD_CDC_EP0_RxReady+0x6c>
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800723a:	2bff      	cmp	r3, #255	; 0xff
 800723c:	d015      	beq.n	800726a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007244:	687a      	ldr	r2, [r7, #4]
 8007246:	33b0      	adds	r3, #176	; 0xb0
 8007248:	009b      	lsls	r3, r3, #2
 800724a:	4413      	add	r3, r2
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	689b      	ldr	r3, [r3, #8]
 8007250:	68fa      	ldr	r2, [r7, #12]
 8007252:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8007256:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007258:	68fa      	ldr	r2, [r7, #12]
 800725a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800725e:	b292      	uxth	r2, r2
 8007260:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	22ff      	movs	r2, #255	; 0xff
 8007266:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800726a:	2300      	movs	r3, #0
}
 800726c:	4618      	mov	r0, r3
 800726e:	3710      	adds	r7, #16
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b086      	sub	sp, #24
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800727c:	2182      	movs	r1, #130	; 0x82
 800727e:	4818      	ldr	r0, [pc, #96]	; (80072e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007280:	f000 fd0f 	bl	8007ca2 <USBD_GetEpDesc>
 8007284:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007286:	2101      	movs	r1, #1
 8007288:	4815      	ldr	r0, [pc, #84]	; (80072e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800728a:	f000 fd0a 	bl	8007ca2 <USBD_GetEpDesc>
 800728e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007290:	2181      	movs	r1, #129	; 0x81
 8007292:	4813      	ldr	r0, [pc, #76]	; (80072e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007294:	f000 fd05 	bl	8007ca2 <USBD_GetEpDesc>
 8007298:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d002      	beq.n	80072a6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	2210      	movs	r2, #16
 80072a4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d006      	beq.n	80072ba <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	2200      	movs	r2, #0
 80072b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072b4:	711a      	strb	r2, [r3, #4]
 80072b6:	2200      	movs	r2, #0
 80072b8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d006      	beq.n	80072ce <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2200      	movs	r2, #0
 80072c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072c8:	711a      	strb	r2, [r3, #4]
 80072ca:	2200      	movs	r2, #0
 80072cc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2243      	movs	r2, #67	; 0x43
 80072d2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80072d4:	4b02      	ldr	r3, [pc, #8]	; (80072e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3718      	adds	r7, #24
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}
 80072de:	bf00      	nop
 80072e0:	20000050 	.word	0x20000050

080072e4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b086      	sub	sp, #24
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80072ec:	2182      	movs	r1, #130	; 0x82
 80072ee:	4818      	ldr	r0, [pc, #96]	; (8007350 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80072f0:	f000 fcd7 	bl	8007ca2 <USBD_GetEpDesc>
 80072f4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80072f6:	2101      	movs	r1, #1
 80072f8:	4815      	ldr	r0, [pc, #84]	; (8007350 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80072fa:	f000 fcd2 	bl	8007ca2 <USBD_GetEpDesc>
 80072fe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007300:	2181      	movs	r1, #129	; 0x81
 8007302:	4813      	ldr	r0, [pc, #76]	; (8007350 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007304:	f000 fccd 	bl	8007ca2 <USBD_GetEpDesc>
 8007308:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d002      	beq.n	8007316 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	2210      	movs	r2, #16
 8007314:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d006      	beq.n	800732a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	2200      	movs	r2, #0
 8007320:	711a      	strb	r2, [r3, #4]
 8007322:	2200      	movs	r2, #0
 8007324:	f042 0202 	orr.w	r2, r2, #2
 8007328:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d006      	beq.n	800733e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2200      	movs	r2, #0
 8007334:	711a      	strb	r2, [r3, #4]
 8007336:	2200      	movs	r2, #0
 8007338:	f042 0202 	orr.w	r2, r2, #2
 800733c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2243      	movs	r2, #67	; 0x43
 8007342:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007344:	4b02      	ldr	r3, [pc, #8]	; (8007350 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007346:	4618      	mov	r0, r3
 8007348:	3718      	adds	r7, #24
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}
 800734e:	bf00      	nop
 8007350:	20000050 	.word	0x20000050

08007354 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b086      	sub	sp, #24
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800735c:	2182      	movs	r1, #130	; 0x82
 800735e:	4818      	ldr	r0, [pc, #96]	; (80073c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007360:	f000 fc9f 	bl	8007ca2 <USBD_GetEpDesc>
 8007364:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007366:	2101      	movs	r1, #1
 8007368:	4815      	ldr	r0, [pc, #84]	; (80073c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800736a:	f000 fc9a 	bl	8007ca2 <USBD_GetEpDesc>
 800736e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007370:	2181      	movs	r1, #129	; 0x81
 8007372:	4813      	ldr	r0, [pc, #76]	; (80073c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007374:	f000 fc95 	bl	8007ca2 <USBD_GetEpDesc>
 8007378:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d002      	beq.n	8007386 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	2210      	movs	r2, #16
 8007384:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d006      	beq.n	800739a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	2200      	movs	r2, #0
 8007390:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007394:	711a      	strb	r2, [r3, #4]
 8007396:	2200      	movs	r2, #0
 8007398:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d006      	beq.n	80073ae <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2200      	movs	r2, #0
 80073a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80073a8:	711a      	strb	r2, [r3, #4]
 80073aa:	2200      	movs	r2, #0
 80073ac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2243      	movs	r2, #67	; 0x43
 80073b2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80073b4:	4b02      	ldr	r3, [pc, #8]	; (80073c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3718      	adds	r7, #24
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	bf00      	nop
 80073c0:	20000050 	.word	0x20000050

080073c4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b083      	sub	sp, #12
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	220a      	movs	r2, #10
 80073d0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80073d2:	4b03      	ldr	r3, [pc, #12]	; (80073e0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	370c      	adds	r7, #12
 80073d8:	46bd      	mov	sp, r7
 80073da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073de:	4770      	bx	lr
 80073e0:	2000000c 	.word	0x2000000c

080073e4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b083      	sub	sp, #12
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
 80073ec:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d101      	bne.n	80073f8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80073f4:	2303      	movs	r3, #3
 80073f6:	e009      	b.n	800740c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80073fe:	687a      	ldr	r2, [r7, #4]
 8007400:	33b0      	adds	r3, #176	; 0xb0
 8007402:	009b      	lsls	r3, r3, #2
 8007404:	4413      	add	r3, r2
 8007406:	683a      	ldr	r2, [r7, #0]
 8007408:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800740a:	2300      	movs	r3, #0
}
 800740c:	4618      	mov	r0, r3
 800740e:	370c      	adds	r7, #12
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr

08007418 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007418:	b480      	push	{r7}
 800741a:	b087      	sub	sp, #28
 800741c:	af00      	add	r7, sp, #0
 800741e:	60f8      	str	r0, [r7, #12]
 8007420:	60b9      	str	r1, [r7, #8]
 8007422:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	32b0      	adds	r2, #176	; 0xb0
 800742e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007432:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d101      	bne.n	800743e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800743a:	2303      	movs	r3, #3
 800743c:	e008      	b.n	8007450 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	68ba      	ldr	r2, [r7, #8]
 8007442:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	687a      	ldr	r2, [r7, #4]
 800744a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800744e:	2300      	movs	r3, #0
}
 8007450:	4618      	mov	r0, r3
 8007452:	371c      	adds	r7, #28
 8007454:	46bd      	mov	sp, r7
 8007456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745a:	4770      	bx	lr

0800745c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800745c:	b480      	push	{r7}
 800745e:	b085      	sub	sp, #20
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	32b0      	adds	r2, #176	; 0xb0
 8007470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007474:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d101      	bne.n	8007480 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800747c:	2303      	movs	r3, #3
 800747e:	e004      	b.n	800748a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	683a      	ldr	r2, [r7, #0]
 8007484:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007488:	2300      	movs	r3, #0
}
 800748a:	4618      	mov	r0, r3
 800748c:	3714      	adds	r7, #20
 800748e:	46bd      	mov	sp, r7
 8007490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007494:	4770      	bx	lr
	...

08007498 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b084      	sub	sp, #16
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	32b0      	adds	r2, #176	; 0xb0
 80074aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074ae:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	32b0      	adds	r2, #176	; 0xb0
 80074ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d101      	bne.n	80074c6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80074c2:	2303      	movs	r3, #3
 80074c4:	e018      	b.n	80074f8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	7c1b      	ldrb	r3, [r3, #16]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d10a      	bne.n	80074e4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80074ce:	4b0c      	ldr	r3, [pc, #48]	; (8007500 <USBD_CDC_ReceivePacket+0x68>)
 80074d0:	7819      	ldrb	r1, [r3, #0]
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80074d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f003 fa8d 	bl	800a9fc <USBD_LL_PrepareReceive>
 80074e2:	e008      	b.n	80074f6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80074e4:	4b06      	ldr	r3, [pc, #24]	; (8007500 <USBD_CDC_ReceivePacket+0x68>)
 80074e6:	7819      	ldrb	r1, [r3, #0]
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80074ee:	2340      	movs	r3, #64	; 0x40
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f003 fa83 	bl	800a9fc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80074f6:	2300      	movs	r3, #0
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3710      	adds	r7, #16
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}
 8007500:	20000094 	.word	0x20000094

08007504 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b086      	sub	sp, #24
 8007508:	af00      	add	r7, sp, #0
 800750a:	60f8      	str	r0, [r7, #12]
 800750c:	60b9      	str	r1, [r7, #8]
 800750e:	4613      	mov	r3, r2
 8007510:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d101      	bne.n	800751c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007518:	2303      	movs	r3, #3
 800751a:	e01f      	b.n	800755c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2200      	movs	r2, #0
 8007520:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	2200      	movs	r2, #0
 8007528:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2200      	movs	r2, #0
 8007530:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d003      	beq.n	8007542 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	68ba      	ldr	r2, [r7, #8]
 800753e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	2201      	movs	r2, #1
 8007546:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	79fa      	ldrb	r2, [r7, #7]
 800754e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007550:	68f8      	ldr	r0, [r7, #12]
 8007552:	f003 f8fd 	bl	800a750 <USBD_LL_Init>
 8007556:	4603      	mov	r3, r0
 8007558:	75fb      	strb	r3, [r7, #23]

  return ret;
 800755a:	7dfb      	ldrb	r3, [r7, #23]
}
 800755c:	4618      	mov	r0, r3
 800755e:	3718      	adds	r7, #24
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}

08007564 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b084      	sub	sp, #16
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
 800756c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800756e:	2300      	movs	r3, #0
 8007570:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d101      	bne.n	800757c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007578:	2303      	movs	r3, #3
 800757a:	e025      	b.n	80075c8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	683a      	ldr	r2, [r7, #0]
 8007580:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	32ae      	adds	r2, #174	; 0xae
 800758e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007594:	2b00      	cmp	r3, #0
 8007596:	d00f      	beq.n	80075b8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	32ae      	adds	r2, #174	; 0xae
 80075a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075a8:	f107 020e 	add.w	r2, r7, #14
 80075ac:	4610      	mov	r0, r2
 80075ae:	4798      	blx	r3
 80075b0:	4602      	mov	r2, r0
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80075be:	1c5a      	adds	r2, r3, #1
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80075c6:	2300      	movs	r3, #0
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3710      	adds	r7, #16
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b082      	sub	sp, #8
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f003 f905 	bl	800a7e8 <USBD_LL_Start>
 80075de:	4603      	mov	r3, r0
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3708      	adds	r7, #8
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}

080075e8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b083      	sub	sp, #12
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80075f0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	370c      	adds	r7, #12
 80075f6:	46bd      	mov	sp, r7
 80075f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fc:	4770      	bx	lr

080075fe <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80075fe:	b580      	push	{r7, lr}
 8007600:	b084      	sub	sp, #16
 8007602:	af00      	add	r7, sp, #0
 8007604:	6078      	str	r0, [r7, #4]
 8007606:	460b      	mov	r3, r1
 8007608:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800760a:	2300      	movs	r3, #0
 800760c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007614:	2b00      	cmp	r3, #0
 8007616:	d009      	beq.n	800762c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	78fa      	ldrb	r2, [r7, #3]
 8007622:	4611      	mov	r1, r2
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	4798      	blx	r3
 8007628:	4603      	mov	r3, r0
 800762a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800762c:	7bfb      	ldrb	r3, [r7, #15]
}
 800762e:	4618      	mov	r0, r3
 8007630:	3710      	adds	r7, #16
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}

08007636 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007636:	b580      	push	{r7, lr}
 8007638:	b084      	sub	sp, #16
 800763a:	af00      	add	r7, sp, #0
 800763c:	6078      	str	r0, [r7, #4]
 800763e:	460b      	mov	r3, r1
 8007640:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007642:	2300      	movs	r3, #0
 8007644:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	78fa      	ldrb	r2, [r7, #3]
 8007650:	4611      	mov	r1, r2
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	4798      	blx	r3
 8007656:	4603      	mov	r3, r0
 8007658:	2b00      	cmp	r3, #0
 800765a:	d001      	beq.n	8007660 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800765c:	2303      	movs	r3, #3
 800765e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007660:	7bfb      	ldrb	r3, [r7, #15]
}
 8007662:	4618      	mov	r0, r3
 8007664:	3710      	adds	r7, #16
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}

0800766a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800766a:	b580      	push	{r7, lr}
 800766c:	b084      	sub	sp, #16
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]
 8007672:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800767a:	6839      	ldr	r1, [r7, #0]
 800767c:	4618      	mov	r0, r3
 800767e:	f001 f90e 	bl	800889e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2201      	movs	r2, #1
 8007686:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007690:	461a      	mov	r2, r3
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800769e:	f003 031f 	and.w	r3, r3, #31
 80076a2:	2b02      	cmp	r3, #2
 80076a4:	d01a      	beq.n	80076dc <USBD_LL_SetupStage+0x72>
 80076a6:	2b02      	cmp	r3, #2
 80076a8:	d822      	bhi.n	80076f0 <USBD_LL_SetupStage+0x86>
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d002      	beq.n	80076b4 <USBD_LL_SetupStage+0x4a>
 80076ae:	2b01      	cmp	r3, #1
 80076b0:	d00a      	beq.n	80076c8 <USBD_LL_SetupStage+0x5e>
 80076b2:	e01d      	b.n	80076f0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80076ba:	4619      	mov	r1, r3
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f000 fb65 	bl	8007d8c <USBD_StdDevReq>
 80076c2:	4603      	mov	r3, r0
 80076c4:	73fb      	strb	r3, [r7, #15]
      break;
 80076c6:	e020      	b.n	800770a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80076ce:	4619      	mov	r1, r3
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f000 fbcd 	bl	8007e70 <USBD_StdItfReq>
 80076d6:	4603      	mov	r3, r0
 80076d8:	73fb      	strb	r3, [r7, #15]
      break;
 80076da:	e016      	b.n	800770a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80076e2:	4619      	mov	r1, r3
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f000 fc2f 	bl	8007f48 <USBD_StdEPReq>
 80076ea:	4603      	mov	r3, r0
 80076ec:	73fb      	strb	r3, [r7, #15]
      break;
 80076ee:	e00c      	b.n	800770a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80076f6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80076fa:	b2db      	uxtb	r3, r3
 80076fc:	4619      	mov	r1, r3
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f003 f8d2 	bl	800a8a8 <USBD_LL_StallEP>
 8007704:	4603      	mov	r3, r0
 8007706:	73fb      	strb	r3, [r7, #15]
      break;
 8007708:	bf00      	nop
  }

  return ret;
 800770a:	7bfb      	ldrb	r3, [r7, #15]
}
 800770c:	4618      	mov	r0, r3
 800770e:	3710      	adds	r7, #16
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}

08007714 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b086      	sub	sp, #24
 8007718:	af00      	add	r7, sp, #0
 800771a:	60f8      	str	r0, [r7, #12]
 800771c:	460b      	mov	r3, r1
 800771e:	607a      	str	r2, [r7, #4]
 8007720:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007722:	2300      	movs	r3, #0
 8007724:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007726:	7afb      	ldrb	r3, [r7, #11]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d16e      	bne.n	800780a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007732:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800773a:	2b03      	cmp	r3, #3
 800773c:	f040 8098 	bne.w	8007870 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	689a      	ldr	r2, [r3, #8]
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	68db      	ldr	r3, [r3, #12]
 8007748:	429a      	cmp	r2, r3
 800774a:	d913      	bls.n	8007774 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	689a      	ldr	r2, [r3, #8]
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	68db      	ldr	r3, [r3, #12]
 8007754:	1ad2      	subs	r2, r2, r3
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	68da      	ldr	r2, [r3, #12]
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	689b      	ldr	r3, [r3, #8]
 8007762:	4293      	cmp	r3, r2
 8007764:	bf28      	it	cs
 8007766:	4613      	movcs	r3, r2
 8007768:	461a      	mov	r2, r3
 800776a:	6879      	ldr	r1, [r7, #4]
 800776c:	68f8      	ldr	r0, [r7, #12]
 800776e:	f001 f98a 	bl	8008a86 <USBD_CtlContinueRx>
 8007772:	e07d      	b.n	8007870 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800777a:	f003 031f 	and.w	r3, r3, #31
 800777e:	2b02      	cmp	r3, #2
 8007780:	d014      	beq.n	80077ac <USBD_LL_DataOutStage+0x98>
 8007782:	2b02      	cmp	r3, #2
 8007784:	d81d      	bhi.n	80077c2 <USBD_LL_DataOutStage+0xae>
 8007786:	2b00      	cmp	r3, #0
 8007788:	d002      	beq.n	8007790 <USBD_LL_DataOutStage+0x7c>
 800778a:	2b01      	cmp	r3, #1
 800778c:	d003      	beq.n	8007796 <USBD_LL_DataOutStage+0x82>
 800778e:	e018      	b.n	80077c2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007790:	2300      	movs	r3, #0
 8007792:	75bb      	strb	r3, [r7, #22]
            break;
 8007794:	e018      	b.n	80077c8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800779c:	b2db      	uxtb	r3, r3
 800779e:	4619      	mov	r1, r3
 80077a0:	68f8      	ldr	r0, [r7, #12]
 80077a2:	f000 fa64 	bl	8007c6e <USBD_CoreFindIF>
 80077a6:	4603      	mov	r3, r0
 80077a8:	75bb      	strb	r3, [r7, #22]
            break;
 80077aa:	e00d      	b.n	80077c8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80077b2:	b2db      	uxtb	r3, r3
 80077b4:	4619      	mov	r1, r3
 80077b6:	68f8      	ldr	r0, [r7, #12]
 80077b8:	f000 fa66 	bl	8007c88 <USBD_CoreFindEP>
 80077bc:	4603      	mov	r3, r0
 80077be:	75bb      	strb	r3, [r7, #22]
            break;
 80077c0:	e002      	b.n	80077c8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80077c2:	2300      	movs	r3, #0
 80077c4:	75bb      	strb	r3, [r7, #22]
            break;
 80077c6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80077c8:	7dbb      	ldrb	r3, [r7, #22]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d119      	bne.n	8007802 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077d4:	b2db      	uxtb	r3, r3
 80077d6:	2b03      	cmp	r3, #3
 80077d8:	d113      	bne.n	8007802 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80077da:	7dba      	ldrb	r2, [r7, #22]
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	32ae      	adds	r2, #174	; 0xae
 80077e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077e4:	691b      	ldr	r3, [r3, #16]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d00b      	beq.n	8007802 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80077ea:	7dba      	ldrb	r2, [r7, #22]
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80077f2:	7dba      	ldrb	r2, [r7, #22]
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	32ae      	adds	r2, #174	; 0xae
 80077f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077fc:	691b      	ldr	r3, [r3, #16]
 80077fe:	68f8      	ldr	r0, [r7, #12]
 8007800:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007802:	68f8      	ldr	r0, [r7, #12]
 8007804:	f001 f950 	bl	8008aa8 <USBD_CtlSendStatus>
 8007808:	e032      	b.n	8007870 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800780a:	7afb      	ldrb	r3, [r7, #11]
 800780c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007810:	b2db      	uxtb	r3, r3
 8007812:	4619      	mov	r1, r3
 8007814:	68f8      	ldr	r0, [r7, #12]
 8007816:	f000 fa37 	bl	8007c88 <USBD_CoreFindEP>
 800781a:	4603      	mov	r3, r0
 800781c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800781e:	7dbb      	ldrb	r3, [r7, #22]
 8007820:	2bff      	cmp	r3, #255	; 0xff
 8007822:	d025      	beq.n	8007870 <USBD_LL_DataOutStage+0x15c>
 8007824:	7dbb      	ldrb	r3, [r7, #22]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d122      	bne.n	8007870 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007830:	b2db      	uxtb	r3, r3
 8007832:	2b03      	cmp	r3, #3
 8007834:	d117      	bne.n	8007866 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007836:	7dba      	ldrb	r2, [r7, #22]
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	32ae      	adds	r2, #174	; 0xae
 800783c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007840:	699b      	ldr	r3, [r3, #24]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d00f      	beq.n	8007866 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007846:	7dba      	ldrb	r2, [r7, #22]
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800784e:	7dba      	ldrb	r2, [r7, #22]
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	32ae      	adds	r2, #174	; 0xae
 8007854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007858:	699b      	ldr	r3, [r3, #24]
 800785a:	7afa      	ldrb	r2, [r7, #11]
 800785c:	4611      	mov	r1, r2
 800785e:	68f8      	ldr	r0, [r7, #12]
 8007860:	4798      	blx	r3
 8007862:	4603      	mov	r3, r0
 8007864:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007866:	7dfb      	ldrb	r3, [r7, #23]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d001      	beq.n	8007870 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800786c:	7dfb      	ldrb	r3, [r7, #23]
 800786e:	e000      	b.n	8007872 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007870:	2300      	movs	r3, #0
}
 8007872:	4618      	mov	r0, r3
 8007874:	3718      	adds	r7, #24
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}

0800787a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800787a:	b580      	push	{r7, lr}
 800787c:	b086      	sub	sp, #24
 800787e:	af00      	add	r7, sp, #0
 8007880:	60f8      	str	r0, [r7, #12]
 8007882:	460b      	mov	r3, r1
 8007884:	607a      	str	r2, [r7, #4]
 8007886:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007888:	7afb      	ldrb	r3, [r7, #11]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d16f      	bne.n	800796e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	3314      	adds	r3, #20
 8007892:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800789a:	2b02      	cmp	r3, #2
 800789c:	d15a      	bne.n	8007954 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	689a      	ldr	r2, [r3, #8]
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	68db      	ldr	r3, [r3, #12]
 80078a6:	429a      	cmp	r2, r3
 80078a8:	d914      	bls.n	80078d4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	689a      	ldr	r2, [r3, #8]
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	68db      	ldr	r3, [r3, #12]
 80078b2:	1ad2      	subs	r2, r2, r3
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	689b      	ldr	r3, [r3, #8]
 80078bc:	461a      	mov	r2, r3
 80078be:	6879      	ldr	r1, [r7, #4]
 80078c0:	68f8      	ldr	r0, [r7, #12]
 80078c2:	f001 f8b2 	bl	8008a2a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80078c6:	2300      	movs	r3, #0
 80078c8:	2200      	movs	r2, #0
 80078ca:	2100      	movs	r1, #0
 80078cc:	68f8      	ldr	r0, [r7, #12]
 80078ce:	f003 f895 	bl	800a9fc <USBD_LL_PrepareReceive>
 80078d2:	e03f      	b.n	8007954 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	68da      	ldr	r2, [r3, #12]
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	689b      	ldr	r3, [r3, #8]
 80078dc:	429a      	cmp	r2, r3
 80078de:	d11c      	bne.n	800791a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	685a      	ldr	r2, [r3, #4]
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80078e8:	429a      	cmp	r2, r3
 80078ea:	d316      	bcc.n	800791a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	685a      	ldr	r2, [r3, #4]
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80078f6:	429a      	cmp	r2, r3
 80078f8:	d20f      	bcs.n	800791a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80078fa:	2200      	movs	r2, #0
 80078fc:	2100      	movs	r1, #0
 80078fe:	68f8      	ldr	r0, [r7, #12]
 8007900:	f001 f893 	bl	8008a2a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2200      	movs	r2, #0
 8007908:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800790c:	2300      	movs	r3, #0
 800790e:	2200      	movs	r2, #0
 8007910:	2100      	movs	r1, #0
 8007912:	68f8      	ldr	r0, [r7, #12]
 8007914:	f003 f872 	bl	800a9fc <USBD_LL_PrepareReceive>
 8007918:	e01c      	b.n	8007954 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007920:	b2db      	uxtb	r3, r3
 8007922:	2b03      	cmp	r3, #3
 8007924:	d10f      	bne.n	8007946 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800792c:	68db      	ldr	r3, [r3, #12]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d009      	beq.n	8007946 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2200      	movs	r2, #0
 8007936:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007940:	68db      	ldr	r3, [r3, #12]
 8007942:	68f8      	ldr	r0, [r7, #12]
 8007944:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007946:	2180      	movs	r1, #128	; 0x80
 8007948:	68f8      	ldr	r0, [r7, #12]
 800794a:	f002 ffad 	bl	800a8a8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800794e:	68f8      	ldr	r0, [r7, #12]
 8007950:	f001 f8bd 	bl	8008ace <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800795a:	2b00      	cmp	r3, #0
 800795c:	d03a      	beq.n	80079d4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800795e:	68f8      	ldr	r0, [r7, #12]
 8007960:	f7ff fe42 	bl	80075e8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2200      	movs	r2, #0
 8007968:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800796c:	e032      	b.n	80079d4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800796e:	7afb      	ldrb	r3, [r7, #11]
 8007970:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007974:	b2db      	uxtb	r3, r3
 8007976:	4619      	mov	r1, r3
 8007978:	68f8      	ldr	r0, [r7, #12]
 800797a:	f000 f985 	bl	8007c88 <USBD_CoreFindEP>
 800797e:	4603      	mov	r3, r0
 8007980:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007982:	7dfb      	ldrb	r3, [r7, #23]
 8007984:	2bff      	cmp	r3, #255	; 0xff
 8007986:	d025      	beq.n	80079d4 <USBD_LL_DataInStage+0x15a>
 8007988:	7dfb      	ldrb	r3, [r7, #23]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d122      	bne.n	80079d4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007994:	b2db      	uxtb	r3, r3
 8007996:	2b03      	cmp	r3, #3
 8007998:	d11c      	bne.n	80079d4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800799a:	7dfa      	ldrb	r2, [r7, #23]
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	32ae      	adds	r2, #174	; 0xae
 80079a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079a4:	695b      	ldr	r3, [r3, #20]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d014      	beq.n	80079d4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80079aa:	7dfa      	ldrb	r2, [r7, #23]
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80079b2:	7dfa      	ldrb	r2, [r7, #23]
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	32ae      	adds	r2, #174	; 0xae
 80079b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079bc:	695b      	ldr	r3, [r3, #20]
 80079be:	7afa      	ldrb	r2, [r7, #11]
 80079c0:	4611      	mov	r1, r2
 80079c2:	68f8      	ldr	r0, [r7, #12]
 80079c4:	4798      	blx	r3
 80079c6:	4603      	mov	r3, r0
 80079c8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80079ca:	7dbb      	ldrb	r3, [r7, #22]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d001      	beq.n	80079d4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80079d0:	7dbb      	ldrb	r3, [r7, #22]
 80079d2:	e000      	b.n	80079d6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80079d4:	2300      	movs	r3, #0
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3718      	adds	r7, #24
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}

080079de <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80079de:	b580      	push	{r7, lr}
 80079e0:	b084      	sub	sp, #16
 80079e2:	af00      	add	r7, sp, #0
 80079e4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80079e6:	2300      	movs	r3, #0
 80079e8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2201      	movs	r2, #1
 80079ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2200      	movs	r2, #0
 80079f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2200      	movs	r2, #0
 80079fe:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2200      	movs	r2, #0
 8007a04:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d014      	beq.n	8007a44 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d00e      	beq.n	8007a44 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	687a      	ldr	r2, [r7, #4]
 8007a30:	6852      	ldr	r2, [r2, #4]
 8007a32:	b2d2      	uxtb	r2, r2
 8007a34:	4611      	mov	r1, r2
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	4798      	blx	r3
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d001      	beq.n	8007a44 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007a40:	2303      	movs	r3, #3
 8007a42:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007a44:	2340      	movs	r3, #64	; 0x40
 8007a46:	2200      	movs	r2, #0
 8007a48:	2100      	movs	r1, #0
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f002 fee7 	bl	800a81e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2201      	movs	r2, #1
 8007a54:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2240      	movs	r2, #64	; 0x40
 8007a5c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007a60:	2340      	movs	r3, #64	; 0x40
 8007a62:	2200      	movs	r2, #0
 8007a64:	2180      	movs	r1, #128	; 0x80
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f002 fed9 	bl	800a81e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2201      	movs	r2, #1
 8007a70:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2240      	movs	r2, #64	; 0x40
 8007a76:	621a      	str	r2, [r3, #32]

  return ret;
 8007a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3710      	adds	r7, #16
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}

08007a82 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007a82:	b480      	push	{r7}
 8007a84:	b083      	sub	sp, #12
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	6078      	str	r0, [r7, #4]
 8007a8a:	460b      	mov	r3, r1
 8007a8c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	78fa      	ldrb	r2, [r7, #3]
 8007a92:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007a94:	2300      	movs	r3, #0
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	370c      	adds	r7, #12
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa0:	4770      	bx	lr

08007aa2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007aa2:	b480      	push	{r7}
 8007aa4:	b083      	sub	sp, #12
 8007aa6:	af00      	add	r7, sp, #0
 8007aa8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ab0:	b2db      	uxtb	r3, r3
 8007ab2:	2b04      	cmp	r3, #4
 8007ab4:	d006      	beq.n	8007ac4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007abc:	b2da      	uxtb	r2, r3
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2204      	movs	r2, #4
 8007ac8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007acc:	2300      	movs	r3, #0
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	370c      	adds	r7, #12
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad8:	4770      	bx	lr

08007ada <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007ada:	b480      	push	{r7}
 8007adc:	b083      	sub	sp, #12
 8007ade:	af00      	add	r7, sp, #0
 8007ae0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ae8:	b2db      	uxtb	r3, r3
 8007aea:	2b04      	cmp	r3, #4
 8007aec:	d106      	bne.n	8007afc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007af4:	b2da      	uxtb	r2, r3
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007afc:	2300      	movs	r3, #0
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	370c      	adds	r7, #12
 8007b02:	46bd      	mov	sp, r7
 8007b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b08:	4770      	bx	lr

08007b0a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007b0a:	b580      	push	{r7, lr}
 8007b0c:	b082      	sub	sp, #8
 8007b0e:	af00      	add	r7, sp, #0
 8007b10:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b18:	b2db      	uxtb	r3, r3
 8007b1a:	2b03      	cmp	r3, #3
 8007b1c:	d110      	bne.n	8007b40 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d00b      	beq.n	8007b40 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b2e:	69db      	ldr	r3, [r3, #28]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d005      	beq.n	8007b40 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b3a:	69db      	ldr	r3, [r3, #28]
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007b40:	2300      	movs	r3, #0
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3708      	adds	r7, #8
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}

08007b4a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007b4a:	b580      	push	{r7, lr}
 8007b4c:	b082      	sub	sp, #8
 8007b4e:	af00      	add	r7, sp, #0
 8007b50:	6078      	str	r0, [r7, #4]
 8007b52:	460b      	mov	r3, r1
 8007b54:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	32ae      	adds	r2, #174	; 0xae
 8007b60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d101      	bne.n	8007b6c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007b68:	2303      	movs	r3, #3
 8007b6a:	e01c      	b.n	8007ba6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b72:	b2db      	uxtb	r3, r3
 8007b74:	2b03      	cmp	r3, #3
 8007b76:	d115      	bne.n	8007ba4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	32ae      	adds	r2, #174	; 0xae
 8007b82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b86:	6a1b      	ldr	r3, [r3, #32]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d00b      	beq.n	8007ba4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	32ae      	adds	r2, #174	; 0xae
 8007b96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b9a:	6a1b      	ldr	r3, [r3, #32]
 8007b9c:	78fa      	ldrb	r2, [r7, #3]
 8007b9e:	4611      	mov	r1, r2
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007ba4:	2300      	movs	r3, #0
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3708      	adds	r7, #8
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}

08007bae <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007bae:	b580      	push	{r7, lr}
 8007bb0:	b082      	sub	sp, #8
 8007bb2:	af00      	add	r7, sp, #0
 8007bb4:	6078      	str	r0, [r7, #4]
 8007bb6:	460b      	mov	r3, r1
 8007bb8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	32ae      	adds	r2, #174	; 0xae
 8007bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d101      	bne.n	8007bd0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007bcc:	2303      	movs	r3, #3
 8007bce:	e01c      	b.n	8007c0a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bd6:	b2db      	uxtb	r3, r3
 8007bd8:	2b03      	cmp	r3, #3
 8007bda:	d115      	bne.n	8007c08 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	32ae      	adds	r2, #174	; 0xae
 8007be6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d00b      	beq.n	8007c08 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	32ae      	adds	r2, #174	; 0xae
 8007bfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c00:	78fa      	ldrb	r2, [r7, #3]
 8007c02:	4611      	mov	r1, r2
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007c08:	2300      	movs	r3, #0
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3708      	adds	r7, #8
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}

08007c12 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007c12:	b480      	push	{r7}
 8007c14:	b083      	sub	sp, #12
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007c1a:	2300      	movs	r3, #0
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	370c      	adds	r7, #12
 8007c20:	46bd      	mov	sp, r7
 8007c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c26:	4770      	bx	lr

08007c28 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b084      	sub	sp, #16
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007c30:	2300      	movs	r3, #0
 8007c32:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2201      	movs	r2, #1
 8007c38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d00e      	beq.n	8007c64 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	687a      	ldr	r2, [r7, #4]
 8007c50:	6852      	ldr	r2, [r2, #4]
 8007c52:	b2d2      	uxtb	r2, r2
 8007c54:	4611      	mov	r1, r2
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	4798      	blx	r3
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d001      	beq.n	8007c64 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007c60:	2303      	movs	r3, #3
 8007c62:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	3710      	adds	r7, #16
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}

08007c6e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007c6e:	b480      	push	{r7}
 8007c70:	b083      	sub	sp, #12
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	6078      	str	r0, [r7, #4]
 8007c76:	460b      	mov	r3, r1
 8007c78:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007c7a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	370c      	adds	r7, #12
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr

08007c88 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b083      	sub	sp, #12
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	460b      	mov	r3, r1
 8007c92:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007c94:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	370c      	adds	r7, #12
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca0:	4770      	bx	lr

08007ca2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007ca2:	b580      	push	{r7, lr}
 8007ca4:	b086      	sub	sp, #24
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6078      	str	r0, [r7, #4]
 8007caa:	460b      	mov	r3, r1
 8007cac:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	885b      	ldrh	r3, [r3, #2]
 8007cbe:	b29a      	uxth	r2, r3
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	781b      	ldrb	r3, [r3, #0]
 8007cc4:	b29b      	uxth	r3, r3
 8007cc6:	429a      	cmp	r2, r3
 8007cc8:	d920      	bls.n	8007d0c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	781b      	ldrb	r3, [r3, #0]
 8007cce:	b29b      	uxth	r3, r3
 8007cd0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007cd2:	e013      	b.n	8007cfc <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007cd4:	f107 030a 	add.w	r3, r7, #10
 8007cd8:	4619      	mov	r1, r3
 8007cda:	6978      	ldr	r0, [r7, #20]
 8007cdc:	f000 f81b 	bl	8007d16 <USBD_GetNextDesc>
 8007ce0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	785b      	ldrb	r3, [r3, #1]
 8007ce6:	2b05      	cmp	r3, #5
 8007ce8:	d108      	bne.n	8007cfc <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007cee:	693b      	ldr	r3, [r7, #16]
 8007cf0:	789b      	ldrb	r3, [r3, #2]
 8007cf2:	78fa      	ldrb	r2, [r7, #3]
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d008      	beq.n	8007d0a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	885b      	ldrh	r3, [r3, #2]
 8007d00:	b29a      	uxth	r2, r3
 8007d02:	897b      	ldrh	r3, [r7, #10]
 8007d04:	429a      	cmp	r2, r3
 8007d06:	d8e5      	bhi.n	8007cd4 <USBD_GetEpDesc+0x32>
 8007d08:	e000      	b.n	8007d0c <USBD_GetEpDesc+0x6a>
          break;
 8007d0a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007d0c:	693b      	ldr	r3, [r7, #16]
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3718      	adds	r7, #24
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}

08007d16 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007d16:	b480      	push	{r7}
 8007d18:	b085      	sub	sp, #20
 8007d1a:	af00      	add	r7, sp, #0
 8007d1c:	6078      	str	r0, [r7, #4]
 8007d1e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	881a      	ldrh	r2, [r3, #0]
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	781b      	ldrb	r3, [r3, #0]
 8007d2c:	b29b      	uxth	r3, r3
 8007d2e:	4413      	add	r3, r2
 8007d30:	b29a      	uxth	r2, r3
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	781b      	ldrb	r3, [r3, #0]
 8007d3a:	461a      	mov	r2, r3
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	4413      	add	r3, r2
 8007d40:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007d42:	68fb      	ldr	r3, [r7, #12]
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	3714      	adds	r7, #20
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4e:	4770      	bx	lr

08007d50 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b087      	sub	sp, #28
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	781b      	ldrb	r3, [r3, #0]
 8007d60:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007d62:	697b      	ldr	r3, [r7, #20]
 8007d64:	3301      	adds	r3, #1
 8007d66:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	781b      	ldrb	r3, [r3, #0]
 8007d6c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007d6e:	8a3b      	ldrh	r3, [r7, #16]
 8007d70:	021b      	lsls	r3, r3, #8
 8007d72:	b21a      	sxth	r2, r3
 8007d74:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	b21b      	sxth	r3, r3
 8007d7c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007d7e:	89fb      	ldrh	r3, [r7, #14]
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	371c      	adds	r7, #28
 8007d84:	46bd      	mov	sp, r7
 8007d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8a:	4770      	bx	lr

08007d8c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b084      	sub	sp, #16
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
 8007d94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d96:	2300      	movs	r3, #0
 8007d98:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	781b      	ldrb	r3, [r3, #0]
 8007d9e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007da2:	2b40      	cmp	r3, #64	; 0x40
 8007da4:	d005      	beq.n	8007db2 <USBD_StdDevReq+0x26>
 8007da6:	2b40      	cmp	r3, #64	; 0x40
 8007da8:	d857      	bhi.n	8007e5a <USBD_StdDevReq+0xce>
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d00f      	beq.n	8007dce <USBD_StdDevReq+0x42>
 8007dae:	2b20      	cmp	r3, #32
 8007db0:	d153      	bne.n	8007e5a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	32ae      	adds	r2, #174	; 0xae
 8007dbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dc0:	689b      	ldr	r3, [r3, #8]
 8007dc2:	6839      	ldr	r1, [r7, #0]
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	4798      	blx	r3
 8007dc8:	4603      	mov	r3, r0
 8007dca:	73fb      	strb	r3, [r7, #15]
      break;
 8007dcc:	e04a      	b.n	8007e64 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	785b      	ldrb	r3, [r3, #1]
 8007dd2:	2b09      	cmp	r3, #9
 8007dd4:	d83b      	bhi.n	8007e4e <USBD_StdDevReq+0xc2>
 8007dd6:	a201      	add	r2, pc, #4	; (adr r2, 8007ddc <USBD_StdDevReq+0x50>)
 8007dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ddc:	08007e31 	.word	0x08007e31
 8007de0:	08007e45 	.word	0x08007e45
 8007de4:	08007e4f 	.word	0x08007e4f
 8007de8:	08007e3b 	.word	0x08007e3b
 8007dec:	08007e4f 	.word	0x08007e4f
 8007df0:	08007e0f 	.word	0x08007e0f
 8007df4:	08007e05 	.word	0x08007e05
 8007df8:	08007e4f 	.word	0x08007e4f
 8007dfc:	08007e27 	.word	0x08007e27
 8007e00:	08007e19 	.word	0x08007e19
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007e04:	6839      	ldr	r1, [r7, #0]
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f000 fa3c 	bl	8008284 <USBD_GetDescriptor>
          break;
 8007e0c:	e024      	b.n	8007e58 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007e0e:	6839      	ldr	r1, [r7, #0]
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f000 fba1 	bl	8008558 <USBD_SetAddress>
          break;
 8007e16:	e01f      	b.n	8007e58 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007e18:	6839      	ldr	r1, [r7, #0]
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f000 fbe0 	bl	80085e0 <USBD_SetConfig>
 8007e20:	4603      	mov	r3, r0
 8007e22:	73fb      	strb	r3, [r7, #15]
          break;
 8007e24:	e018      	b.n	8007e58 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007e26:	6839      	ldr	r1, [r7, #0]
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f000 fc83 	bl	8008734 <USBD_GetConfig>
          break;
 8007e2e:	e013      	b.n	8007e58 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007e30:	6839      	ldr	r1, [r7, #0]
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f000 fcb4 	bl	80087a0 <USBD_GetStatus>
          break;
 8007e38:	e00e      	b.n	8007e58 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007e3a:	6839      	ldr	r1, [r7, #0]
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f000 fce3 	bl	8008808 <USBD_SetFeature>
          break;
 8007e42:	e009      	b.n	8007e58 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007e44:	6839      	ldr	r1, [r7, #0]
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f000 fd07 	bl	800885a <USBD_ClrFeature>
          break;
 8007e4c:	e004      	b.n	8007e58 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007e4e:	6839      	ldr	r1, [r7, #0]
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f000 fd5e 	bl	8008912 <USBD_CtlError>
          break;
 8007e56:	bf00      	nop
      }
      break;
 8007e58:	e004      	b.n	8007e64 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007e5a:	6839      	ldr	r1, [r7, #0]
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f000 fd58 	bl	8008912 <USBD_CtlError>
      break;
 8007e62:	bf00      	nop
  }

  return ret;
 8007e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3710      	adds	r7, #16
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}
 8007e6e:	bf00      	nop

08007e70 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b084      	sub	sp, #16
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
 8007e78:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	781b      	ldrb	r3, [r3, #0]
 8007e82:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e86:	2b40      	cmp	r3, #64	; 0x40
 8007e88:	d005      	beq.n	8007e96 <USBD_StdItfReq+0x26>
 8007e8a:	2b40      	cmp	r3, #64	; 0x40
 8007e8c:	d852      	bhi.n	8007f34 <USBD_StdItfReq+0xc4>
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d001      	beq.n	8007e96 <USBD_StdItfReq+0x26>
 8007e92:	2b20      	cmp	r3, #32
 8007e94:	d14e      	bne.n	8007f34 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e9c:	b2db      	uxtb	r3, r3
 8007e9e:	3b01      	subs	r3, #1
 8007ea0:	2b02      	cmp	r3, #2
 8007ea2:	d840      	bhi.n	8007f26 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	889b      	ldrh	r3, [r3, #4]
 8007ea8:	b2db      	uxtb	r3, r3
 8007eaa:	2b01      	cmp	r3, #1
 8007eac:	d836      	bhi.n	8007f1c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	889b      	ldrh	r3, [r3, #4]
 8007eb2:	b2db      	uxtb	r3, r3
 8007eb4:	4619      	mov	r1, r3
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f7ff fed9 	bl	8007c6e <USBD_CoreFindIF>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007ec0:	7bbb      	ldrb	r3, [r7, #14]
 8007ec2:	2bff      	cmp	r3, #255	; 0xff
 8007ec4:	d01d      	beq.n	8007f02 <USBD_StdItfReq+0x92>
 8007ec6:	7bbb      	ldrb	r3, [r7, #14]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d11a      	bne.n	8007f02 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007ecc:	7bba      	ldrb	r2, [r7, #14]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	32ae      	adds	r2, #174	; 0xae
 8007ed2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ed6:	689b      	ldr	r3, [r3, #8]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d00f      	beq.n	8007efc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007edc:	7bba      	ldrb	r2, [r7, #14]
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007ee4:	7bba      	ldrb	r2, [r7, #14]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	32ae      	adds	r2, #174	; 0xae
 8007eea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007eee:	689b      	ldr	r3, [r3, #8]
 8007ef0:	6839      	ldr	r1, [r7, #0]
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	4798      	blx	r3
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007efa:	e004      	b.n	8007f06 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007efc:	2303      	movs	r3, #3
 8007efe:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007f00:	e001      	b.n	8007f06 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007f02:	2303      	movs	r3, #3
 8007f04:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	88db      	ldrh	r3, [r3, #6]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d110      	bne.n	8007f30 <USBD_StdItfReq+0xc0>
 8007f0e:	7bfb      	ldrb	r3, [r7, #15]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d10d      	bne.n	8007f30 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f000 fdc7 	bl	8008aa8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007f1a:	e009      	b.n	8007f30 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007f1c:	6839      	ldr	r1, [r7, #0]
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f000 fcf7 	bl	8008912 <USBD_CtlError>
          break;
 8007f24:	e004      	b.n	8007f30 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007f26:	6839      	ldr	r1, [r7, #0]
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f000 fcf2 	bl	8008912 <USBD_CtlError>
          break;
 8007f2e:	e000      	b.n	8007f32 <USBD_StdItfReq+0xc2>
          break;
 8007f30:	bf00      	nop
      }
      break;
 8007f32:	e004      	b.n	8007f3e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007f34:	6839      	ldr	r1, [r7, #0]
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f000 fceb 	bl	8008912 <USBD_CtlError>
      break;
 8007f3c:	bf00      	nop
  }

  return ret;
 8007f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3710      	adds	r7, #16
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}

08007f48 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b084      	sub	sp, #16
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007f52:	2300      	movs	r3, #0
 8007f54:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	889b      	ldrh	r3, [r3, #4]
 8007f5a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	781b      	ldrb	r3, [r3, #0]
 8007f60:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f64:	2b40      	cmp	r3, #64	; 0x40
 8007f66:	d007      	beq.n	8007f78 <USBD_StdEPReq+0x30>
 8007f68:	2b40      	cmp	r3, #64	; 0x40
 8007f6a:	f200 817f 	bhi.w	800826c <USBD_StdEPReq+0x324>
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d02a      	beq.n	8007fc8 <USBD_StdEPReq+0x80>
 8007f72:	2b20      	cmp	r3, #32
 8007f74:	f040 817a 	bne.w	800826c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007f78:	7bbb      	ldrb	r3, [r7, #14]
 8007f7a:	4619      	mov	r1, r3
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f7ff fe83 	bl	8007c88 <USBD_CoreFindEP>
 8007f82:	4603      	mov	r3, r0
 8007f84:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007f86:	7b7b      	ldrb	r3, [r7, #13]
 8007f88:	2bff      	cmp	r3, #255	; 0xff
 8007f8a:	f000 8174 	beq.w	8008276 <USBD_StdEPReq+0x32e>
 8007f8e:	7b7b      	ldrb	r3, [r7, #13]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	f040 8170 	bne.w	8008276 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007f96:	7b7a      	ldrb	r2, [r7, #13]
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007f9e:	7b7a      	ldrb	r2, [r7, #13]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	32ae      	adds	r2, #174	; 0xae
 8007fa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fa8:	689b      	ldr	r3, [r3, #8]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	f000 8163 	beq.w	8008276 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007fb0:	7b7a      	ldrb	r2, [r7, #13]
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	32ae      	adds	r2, #174	; 0xae
 8007fb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fba:	689b      	ldr	r3, [r3, #8]
 8007fbc:	6839      	ldr	r1, [r7, #0]
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	4798      	blx	r3
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007fc6:	e156      	b.n	8008276 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	785b      	ldrb	r3, [r3, #1]
 8007fcc:	2b03      	cmp	r3, #3
 8007fce:	d008      	beq.n	8007fe2 <USBD_StdEPReq+0x9a>
 8007fd0:	2b03      	cmp	r3, #3
 8007fd2:	f300 8145 	bgt.w	8008260 <USBD_StdEPReq+0x318>
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	f000 809b 	beq.w	8008112 <USBD_StdEPReq+0x1ca>
 8007fdc:	2b01      	cmp	r3, #1
 8007fde:	d03c      	beq.n	800805a <USBD_StdEPReq+0x112>
 8007fe0:	e13e      	b.n	8008260 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fe8:	b2db      	uxtb	r3, r3
 8007fea:	2b02      	cmp	r3, #2
 8007fec:	d002      	beq.n	8007ff4 <USBD_StdEPReq+0xac>
 8007fee:	2b03      	cmp	r3, #3
 8007ff0:	d016      	beq.n	8008020 <USBD_StdEPReq+0xd8>
 8007ff2:	e02c      	b.n	800804e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ff4:	7bbb      	ldrb	r3, [r7, #14]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d00d      	beq.n	8008016 <USBD_StdEPReq+0xce>
 8007ffa:	7bbb      	ldrb	r3, [r7, #14]
 8007ffc:	2b80      	cmp	r3, #128	; 0x80
 8007ffe:	d00a      	beq.n	8008016 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008000:	7bbb      	ldrb	r3, [r7, #14]
 8008002:	4619      	mov	r1, r3
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f002 fc4f 	bl	800a8a8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800800a:	2180      	movs	r1, #128	; 0x80
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f002 fc4b 	bl	800a8a8 <USBD_LL_StallEP>
 8008012:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008014:	e020      	b.n	8008058 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008016:	6839      	ldr	r1, [r7, #0]
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f000 fc7a 	bl	8008912 <USBD_CtlError>
              break;
 800801e:	e01b      	b.n	8008058 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	885b      	ldrh	r3, [r3, #2]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d10e      	bne.n	8008046 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008028:	7bbb      	ldrb	r3, [r7, #14]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d00b      	beq.n	8008046 <USBD_StdEPReq+0xfe>
 800802e:	7bbb      	ldrb	r3, [r7, #14]
 8008030:	2b80      	cmp	r3, #128	; 0x80
 8008032:	d008      	beq.n	8008046 <USBD_StdEPReq+0xfe>
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	88db      	ldrh	r3, [r3, #6]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d104      	bne.n	8008046 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800803c:	7bbb      	ldrb	r3, [r7, #14]
 800803e:	4619      	mov	r1, r3
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f002 fc31 	bl	800a8a8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f000 fd2e 	bl	8008aa8 <USBD_CtlSendStatus>

              break;
 800804c:	e004      	b.n	8008058 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800804e:	6839      	ldr	r1, [r7, #0]
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f000 fc5e 	bl	8008912 <USBD_CtlError>
              break;
 8008056:	bf00      	nop
          }
          break;
 8008058:	e107      	b.n	800826a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008060:	b2db      	uxtb	r3, r3
 8008062:	2b02      	cmp	r3, #2
 8008064:	d002      	beq.n	800806c <USBD_StdEPReq+0x124>
 8008066:	2b03      	cmp	r3, #3
 8008068:	d016      	beq.n	8008098 <USBD_StdEPReq+0x150>
 800806a:	e04b      	b.n	8008104 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800806c:	7bbb      	ldrb	r3, [r7, #14]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d00d      	beq.n	800808e <USBD_StdEPReq+0x146>
 8008072:	7bbb      	ldrb	r3, [r7, #14]
 8008074:	2b80      	cmp	r3, #128	; 0x80
 8008076:	d00a      	beq.n	800808e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008078:	7bbb      	ldrb	r3, [r7, #14]
 800807a:	4619      	mov	r1, r3
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f002 fc13 	bl	800a8a8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008082:	2180      	movs	r1, #128	; 0x80
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f002 fc0f 	bl	800a8a8 <USBD_LL_StallEP>
 800808a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800808c:	e040      	b.n	8008110 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800808e:	6839      	ldr	r1, [r7, #0]
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f000 fc3e 	bl	8008912 <USBD_CtlError>
              break;
 8008096:	e03b      	b.n	8008110 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	885b      	ldrh	r3, [r3, #2]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d136      	bne.n	800810e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80080a0:	7bbb      	ldrb	r3, [r7, #14]
 80080a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d004      	beq.n	80080b4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80080aa:	7bbb      	ldrb	r3, [r7, #14]
 80080ac:	4619      	mov	r1, r3
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f002 fc19 	bl	800a8e6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f000 fcf7 	bl	8008aa8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80080ba:	7bbb      	ldrb	r3, [r7, #14]
 80080bc:	4619      	mov	r1, r3
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f7ff fde2 	bl	8007c88 <USBD_CoreFindEP>
 80080c4:	4603      	mov	r3, r0
 80080c6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80080c8:	7b7b      	ldrb	r3, [r7, #13]
 80080ca:	2bff      	cmp	r3, #255	; 0xff
 80080cc:	d01f      	beq.n	800810e <USBD_StdEPReq+0x1c6>
 80080ce:	7b7b      	ldrb	r3, [r7, #13]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d11c      	bne.n	800810e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80080d4:	7b7a      	ldrb	r2, [r7, #13]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80080dc:	7b7a      	ldrb	r2, [r7, #13]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	32ae      	adds	r2, #174	; 0xae
 80080e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080e6:	689b      	ldr	r3, [r3, #8]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d010      	beq.n	800810e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80080ec:	7b7a      	ldrb	r2, [r7, #13]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	32ae      	adds	r2, #174	; 0xae
 80080f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080f6:	689b      	ldr	r3, [r3, #8]
 80080f8:	6839      	ldr	r1, [r7, #0]
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	4798      	blx	r3
 80080fe:	4603      	mov	r3, r0
 8008100:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008102:	e004      	b.n	800810e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008104:	6839      	ldr	r1, [r7, #0]
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 fc03 	bl	8008912 <USBD_CtlError>
              break;
 800810c:	e000      	b.n	8008110 <USBD_StdEPReq+0x1c8>
              break;
 800810e:	bf00      	nop
          }
          break;
 8008110:	e0ab      	b.n	800826a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008118:	b2db      	uxtb	r3, r3
 800811a:	2b02      	cmp	r3, #2
 800811c:	d002      	beq.n	8008124 <USBD_StdEPReq+0x1dc>
 800811e:	2b03      	cmp	r3, #3
 8008120:	d032      	beq.n	8008188 <USBD_StdEPReq+0x240>
 8008122:	e097      	b.n	8008254 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008124:	7bbb      	ldrb	r3, [r7, #14]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d007      	beq.n	800813a <USBD_StdEPReq+0x1f2>
 800812a:	7bbb      	ldrb	r3, [r7, #14]
 800812c:	2b80      	cmp	r3, #128	; 0x80
 800812e:	d004      	beq.n	800813a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008130:	6839      	ldr	r1, [r7, #0]
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f000 fbed 	bl	8008912 <USBD_CtlError>
                break;
 8008138:	e091      	b.n	800825e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800813a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800813e:	2b00      	cmp	r3, #0
 8008140:	da0b      	bge.n	800815a <USBD_StdEPReq+0x212>
 8008142:	7bbb      	ldrb	r3, [r7, #14]
 8008144:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008148:	4613      	mov	r3, r2
 800814a:	009b      	lsls	r3, r3, #2
 800814c:	4413      	add	r3, r2
 800814e:	009b      	lsls	r3, r3, #2
 8008150:	3310      	adds	r3, #16
 8008152:	687a      	ldr	r2, [r7, #4]
 8008154:	4413      	add	r3, r2
 8008156:	3304      	adds	r3, #4
 8008158:	e00b      	b.n	8008172 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800815a:	7bbb      	ldrb	r3, [r7, #14]
 800815c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008160:	4613      	mov	r3, r2
 8008162:	009b      	lsls	r3, r3, #2
 8008164:	4413      	add	r3, r2
 8008166:	009b      	lsls	r3, r3, #2
 8008168:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800816c:	687a      	ldr	r2, [r7, #4]
 800816e:	4413      	add	r3, r2
 8008170:	3304      	adds	r3, #4
 8008172:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	2200      	movs	r2, #0
 8008178:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	2202      	movs	r2, #2
 800817e:	4619      	mov	r1, r3
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f000 fc37 	bl	80089f4 <USBD_CtlSendData>
              break;
 8008186:	e06a      	b.n	800825e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008188:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800818c:	2b00      	cmp	r3, #0
 800818e:	da11      	bge.n	80081b4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008190:	7bbb      	ldrb	r3, [r7, #14]
 8008192:	f003 020f 	and.w	r2, r3, #15
 8008196:	6879      	ldr	r1, [r7, #4]
 8008198:	4613      	mov	r3, r2
 800819a:	009b      	lsls	r3, r3, #2
 800819c:	4413      	add	r3, r2
 800819e:	009b      	lsls	r3, r3, #2
 80081a0:	440b      	add	r3, r1
 80081a2:	3324      	adds	r3, #36	; 0x24
 80081a4:	881b      	ldrh	r3, [r3, #0]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d117      	bne.n	80081da <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80081aa:	6839      	ldr	r1, [r7, #0]
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f000 fbb0 	bl	8008912 <USBD_CtlError>
                  break;
 80081b2:	e054      	b.n	800825e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80081b4:	7bbb      	ldrb	r3, [r7, #14]
 80081b6:	f003 020f 	and.w	r2, r3, #15
 80081ba:	6879      	ldr	r1, [r7, #4]
 80081bc:	4613      	mov	r3, r2
 80081be:	009b      	lsls	r3, r3, #2
 80081c0:	4413      	add	r3, r2
 80081c2:	009b      	lsls	r3, r3, #2
 80081c4:	440b      	add	r3, r1
 80081c6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80081ca:	881b      	ldrh	r3, [r3, #0]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d104      	bne.n	80081da <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80081d0:	6839      	ldr	r1, [r7, #0]
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f000 fb9d 	bl	8008912 <USBD_CtlError>
                  break;
 80081d8:	e041      	b.n	800825e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80081da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	da0b      	bge.n	80081fa <USBD_StdEPReq+0x2b2>
 80081e2:	7bbb      	ldrb	r3, [r7, #14]
 80081e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80081e8:	4613      	mov	r3, r2
 80081ea:	009b      	lsls	r3, r3, #2
 80081ec:	4413      	add	r3, r2
 80081ee:	009b      	lsls	r3, r3, #2
 80081f0:	3310      	adds	r3, #16
 80081f2:	687a      	ldr	r2, [r7, #4]
 80081f4:	4413      	add	r3, r2
 80081f6:	3304      	adds	r3, #4
 80081f8:	e00b      	b.n	8008212 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80081fa:	7bbb      	ldrb	r3, [r7, #14]
 80081fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008200:	4613      	mov	r3, r2
 8008202:	009b      	lsls	r3, r3, #2
 8008204:	4413      	add	r3, r2
 8008206:	009b      	lsls	r3, r3, #2
 8008208:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800820c:	687a      	ldr	r2, [r7, #4]
 800820e:	4413      	add	r3, r2
 8008210:	3304      	adds	r3, #4
 8008212:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008214:	7bbb      	ldrb	r3, [r7, #14]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d002      	beq.n	8008220 <USBD_StdEPReq+0x2d8>
 800821a:	7bbb      	ldrb	r3, [r7, #14]
 800821c:	2b80      	cmp	r3, #128	; 0x80
 800821e:	d103      	bne.n	8008228 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	2200      	movs	r2, #0
 8008224:	601a      	str	r2, [r3, #0]
 8008226:	e00e      	b.n	8008246 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008228:	7bbb      	ldrb	r3, [r7, #14]
 800822a:	4619      	mov	r1, r3
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f002 fb79 	bl	800a924 <USBD_LL_IsStallEP>
 8008232:	4603      	mov	r3, r0
 8008234:	2b00      	cmp	r3, #0
 8008236:	d003      	beq.n	8008240 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	2201      	movs	r2, #1
 800823c:	601a      	str	r2, [r3, #0]
 800823e:	e002      	b.n	8008246 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	2200      	movs	r2, #0
 8008244:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	2202      	movs	r2, #2
 800824a:	4619      	mov	r1, r3
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f000 fbd1 	bl	80089f4 <USBD_CtlSendData>
              break;
 8008252:	e004      	b.n	800825e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008254:	6839      	ldr	r1, [r7, #0]
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f000 fb5b 	bl	8008912 <USBD_CtlError>
              break;
 800825c:	bf00      	nop
          }
          break;
 800825e:	e004      	b.n	800826a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008260:	6839      	ldr	r1, [r7, #0]
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 fb55 	bl	8008912 <USBD_CtlError>
          break;
 8008268:	bf00      	nop
      }
      break;
 800826a:	e005      	b.n	8008278 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800826c:	6839      	ldr	r1, [r7, #0]
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f000 fb4f 	bl	8008912 <USBD_CtlError>
      break;
 8008274:	e000      	b.n	8008278 <USBD_StdEPReq+0x330>
      break;
 8008276:	bf00      	nop
  }

  return ret;
 8008278:	7bfb      	ldrb	r3, [r7, #15]
}
 800827a:	4618      	mov	r0, r3
 800827c:	3710      	adds	r7, #16
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}
	...

08008284 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b084      	sub	sp, #16
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
 800828c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800828e:	2300      	movs	r3, #0
 8008290:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008292:	2300      	movs	r3, #0
 8008294:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008296:	2300      	movs	r3, #0
 8008298:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	885b      	ldrh	r3, [r3, #2]
 800829e:	0a1b      	lsrs	r3, r3, #8
 80082a0:	b29b      	uxth	r3, r3
 80082a2:	3b01      	subs	r3, #1
 80082a4:	2b06      	cmp	r3, #6
 80082a6:	f200 8128 	bhi.w	80084fa <USBD_GetDescriptor+0x276>
 80082aa:	a201      	add	r2, pc, #4	; (adr r2, 80082b0 <USBD_GetDescriptor+0x2c>)
 80082ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082b0:	080082cd 	.word	0x080082cd
 80082b4:	080082e5 	.word	0x080082e5
 80082b8:	08008325 	.word	0x08008325
 80082bc:	080084fb 	.word	0x080084fb
 80082c0:	080084fb 	.word	0x080084fb
 80082c4:	0800849b 	.word	0x0800849b
 80082c8:	080084c7 	.word	0x080084c7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	687a      	ldr	r2, [r7, #4]
 80082d6:	7c12      	ldrb	r2, [r2, #16]
 80082d8:	f107 0108 	add.w	r1, r7, #8
 80082dc:	4610      	mov	r0, r2
 80082de:	4798      	blx	r3
 80082e0:	60f8      	str	r0, [r7, #12]
      break;
 80082e2:	e112      	b.n	800850a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	7c1b      	ldrb	r3, [r3, #16]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d10d      	bne.n	8008308 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082f4:	f107 0208 	add.w	r2, r7, #8
 80082f8:	4610      	mov	r0, r2
 80082fa:	4798      	blx	r3
 80082fc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	3301      	adds	r3, #1
 8008302:	2202      	movs	r2, #2
 8008304:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008306:	e100      	b.n	800850a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800830e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008310:	f107 0208 	add.w	r2, r7, #8
 8008314:	4610      	mov	r0, r2
 8008316:	4798      	blx	r3
 8008318:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	3301      	adds	r3, #1
 800831e:	2202      	movs	r2, #2
 8008320:	701a      	strb	r2, [r3, #0]
      break;
 8008322:	e0f2      	b.n	800850a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	885b      	ldrh	r3, [r3, #2]
 8008328:	b2db      	uxtb	r3, r3
 800832a:	2b05      	cmp	r3, #5
 800832c:	f200 80ac 	bhi.w	8008488 <USBD_GetDescriptor+0x204>
 8008330:	a201      	add	r2, pc, #4	; (adr r2, 8008338 <USBD_GetDescriptor+0xb4>)
 8008332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008336:	bf00      	nop
 8008338:	08008351 	.word	0x08008351
 800833c:	08008385 	.word	0x08008385
 8008340:	080083b9 	.word	0x080083b9
 8008344:	080083ed 	.word	0x080083ed
 8008348:	08008421 	.word	0x08008421
 800834c:	08008455 	.word	0x08008455
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008356:	685b      	ldr	r3, [r3, #4]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d00b      	beq.n	8008374 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	687a      	ldr	r2, [r7, #4]
 8008366:	7c12      	ldrb	r2, [r2, #16]
 8008368:	f107 0108 	add.w	r1, r7, #8
 800836c:	4610      	mov	r0, r2
 800836e:	4798      	blx	r3
 8008370:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008372:	e091      	b.n	8008498 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008374:	6839      	ldr	r1, [r7, #0]
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f000 facb 	bl	8008912 <USBD_CtlError>
            err++;
 800837c:	7afb      	ldrb	r3, [r7, #11]
 800837e:	3301      	adds	r3, #1
 8008380:	72fb      	strb	r3, [r7, #11]
          break;
 8008382:	e089      	b.n	8008498 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800838a:	689b      	ldr	r3, [r3, #8]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d00b      	beq.n	80083a8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008396:	689b      	ldr	r3, [r3, #8]
 8008398:	687a      	ldr	r2, [r7, #4]
 800839a:	7c12      	ldrb	r2, [r2, #16]
 800839c:	f107 0108 	add.w	r1, r7, #8
 80083a0:	4610      	mov	r0, r2
 80083a2:	4798      	blx	r3
 80083a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083a6:	e077      	b.n	8008498 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083a8:	6839      	ldr	r1, [r7, #0]
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f000 fab1 	bl	8008912 <USBD_CtlError>
            err++;
 80083b0:	7afb      	ldrb	r3, [r7, #11]
 80083b2:	3301      	adds	r3, #1
 80083b4:	72fb      	strb	r3, [r7, #11]
          break;
 80083b6:	e06f      	b.n	8008498 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083be:	68db      	ldr	r3, [r3, #12]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d00b      	beq.n	80083dc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083ca:	68db      	ldr	r3, [r3, #12]
 80083cc:	687a      	ldr	r2, [r7, #4]
 80083ce:	7c12      	ldrb	r2, [r2, #16]
 80083d0:	f107 0108 	add.w	r1, r7, #8
 80083d4:	4610      	mov	r0, r2
 80083d6:	4798      	blx	r3
 80083d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083da:	e05d      	b.n	8008498 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083dc:	6839      	ldr	r1, [r7, #0]
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f000 fa97 	bl	8008912 <USBD_CtlError>
            err++;
 80083e4:	7afb      	ldrb	r3, [r7, #11]
 80083e6:	3301      	adds	r3, #1
 80083e8:	72fb      	strb	r3, [r7, #11]
          break;
 80083ea:	e055      	b.n	8008498 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083f2:	691b      	ldr	r3, [r3, #16]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d00b      	beq.n	8008410 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083fe:	691b      	ldr	r3, [r3, #16]
 8008400:	687a      	ldr	r2, [r7, #4]
 8008402:	7c12      	ldrb	r2, [r2, #16]
 8008404:	f107 0108 	add.w	r1, r7, #8
 8008408:	4610      	mov	r0, r2
 800840a:	4798      	blx	r3
 800840c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800840e:	e043      	b.n	8008498 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008410:	6839      	ldr	r1, [r7, #0]
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f000 fa7d 	bl	8008912 <USBD_CtlError>
            err++;
 8008418:	7afb      	ldrb	r3, [r7, #11]
 800841a:	3301      	adds	r3, #1
 800841c:	72fb      	strb	r3, [r7, #11]
          break;
 800841e:	e03b      	b.n	8008498 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008426:	695b      	ldr	r3, [r3, #20]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d00b      	beq.n	8008444 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008432:	695b      	ldr	r3, [r3, #20]
 8008434:	687a      	ldr	r2, [r7, #4]
 8008436:	7c12      	ldrb	r2, [r2, #16]
 8008438:	f107 0108 	add.w	r1, r7, #8
 800843c:	4610      	mov	r0, r2
 800843e:	4798      	blx	r3
 8008440:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008442:	e029      	b.n	8008498 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008444:	6839      	ldr	r1, [r7, #0]
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f000 fa63 	bl	8008912 <USBD_CtlError>
            err++;
 800844c:	7afb      	ldrb	r3, [r7, #11]
 800844e:	3301      	adds	r3, #1
 8008450:	72fb      	strb	r3, [r7, #11]
          break;
 8008452:	e021      	b.n	8008498 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800845a:	699b      	ldr	r3, [r3, #24]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d00b      	beq.n	8008478 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008466:	699b      	ldr	r3, [r3, #24]
 8008468:	687a      	ldr	r2, [r7, #4]
 800846a:	7c12      	ldrb	r2, [r2, #16]
 800846c:	f107 0108 	add.w	r1, r7, #8
 8008470:	4610      	mov	r0, r2
 8008472:	4798      	blx	r3
 8008474:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008476:	e00f      	b.n	8008498 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008478:	6839      	ldr	r1, [r7, #0]
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f000 fa49 	bl	8008912 <USBD_CtlError>
            err++;
 8008480:	7afb      	ldrb	r3, [r7, #11]
 8008482:	3301      	adds	r3, #1
 8008484:	72fb      	strb	r3, [r7, #11]
          break;
 8008486:	e007      	b.n	8008498 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008488:	6839      	ldr	r1, [r7, #0]
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f000 fa41 	bl	8008912 <USBD_CtlError>
          err++;
 8008490:	7afb      	ldrb	r3, [r7, #11]
 8008492:	3301      	adds	r3, #1
 8008494:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008496:	bf00      	nop
      }
      break;
 8008498:	e037      	b.n	800850a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	7c1b      	ldrb	r3, [r3, #16]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d109      	bne.n	80084b6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084aa:	f107 0208 	add.w	r2, r7, #8
 80084ae:	4610      	mov	r0, r2
 80084b0:	4798      	blx	r3
 80084b2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80084b4:	e029      	b.n	800850a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80084b6:	6839      	ldr	r1, [r7, #0]
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f000 fa2a 	bl	8008912 <USBD_CtlError>
        err++;
 80084be:	7afb      	ldrb	r3, [r7, #11]
 80084c0:	3301      	adds	r3, #1
 80084c2:	72fb      	strb	r3, [r7, #11]
      break;
 80084c4:	e021      	b.n	800850a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	7c1b      	ldrb	r3, [r3, #16]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d10d      	bne.n	80084ea <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084d6:	f107 0208 	add.w	r2, r7, #8
 80084da:	4610      	mov	r0, r2
 80084dc:	4798      	blx	r3
 80084de:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	3301      	adds	r3, #1
 80084e4:	2207      	movs	r2, #7
 80084e6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80084e8:	e00f      	b.n	800850a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80084ea:	6839      	ldr	r1, [r7, #0]
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f000 fa10 	bl	8008912 <USBD_CtlError>
        err++;
 80084f2:	7afb      	ldrb	r3, [r7, #11]
 80084f4:	3301      	adds	r3, #1
 80084f6:	72fb      	strb	r3, [r7, #11]
      break;
 80084f8:	e007      	b.n	800850a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80084fa:	6839      	ldr	r1, [r7, #0]
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f000 fa08 	bl	8008912 <USBD_CtlError>
      err++;
 8008502:	7afb      	ldrb	r3, [r7, #11]
 8008504:	3301      	adds	r3, #1
 8008506:	72fb      	strb	r3, [r7, #11]
      break;
 8008508:	bf00      	nop
  }

  if (err != 0U)
 800850a:	7afb      	ldrb	r3, [r7, #11]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d11e      	bne.n	800854e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	88db      	ldrh	r3, [r3, #6]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d016      	beq.n	8008546 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008518:	893b      	ldrh	r3, [r7, #8]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d00e      	beq.n	800853c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	88da      	ldrh	r2, [r3, #6]
 8008522:	893b      	ldrh	r3, [r7, #8]
 8008524:	4293      	cmp	r3, r2
 8008526:	bf28      	it	cs
 8008528:	4613      	movcs	r3, r2
 800852a:	b29b      	uxth	r3, r3
 800852c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800852e:	893b      	ldrh	r3, [r7, #8]
 8008530:	461a      	mov	r2, r3
 8008532:	68f9      	ldr	r1, [r7, #12]
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f000 fa5d 	bl	80089f4 <USBD_CtlSendData>
 800853a:	e009      	b.n	8008550 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800853c:	6839      	ldr	r1, [r7, #0]
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f000 f9e7 	bl	8008912 <USBD_CtlError>
 8008544:	e004      	b.n	8008550 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f000 faae 	bl	8008aa8 <USBD_CtlSendStatus>
 800854c:	e000      	b.n	8008550 <USBD_GetDescriptor+0x2cc>
    return;
 800854e:	bf00      	nop
  }
}
 8008550:	3710      	adds	r7, #16
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}
 8008556:	bf00      	nop

08008558 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b084      	sub	sp, #16
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
 8008560:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	889b      	ldrh	r3, [r3, #4]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d131      	bne.n	80085ce <USBD_SetAddress+0x76>
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	88db      	ldrh	r3, [r3, #6]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d12d      	bne.n	80085ce <USBD_SetAddress+0x76>
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	885b      	ldrh	r3, [r3, #2]
 8008576:	2b7f      	cmp	r3, #127	; 0x7f
 8008578:	d829      	bhi.n	80085ce <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	885b      	ldrh	r3, [r3, #2]
 800857e:	b2db      	uxtb	r3, r3
 8008580:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008584:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800858c:	b2db      	uxtb	r3, r3
 800858e:	2b03      	cmp	r3, #3
 8008590:	d104      	bne.n	800859c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008592:	6839      	ldr	r1, [r7, #0]
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f000 f9bc 	bl	8008912 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800859a:	e01d      	b.n	80085d8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	7bfa      	ldrb	r2, [r7, #15]
 80085a0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80085a4:	7bfb      	ldrb	r3, [r7, #15]
 80085a6:	4619      	mov	r1, r3
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f002 f9e7 	bl	800a97c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f000 fa7a 	bl	8008aa8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80085b4:	7bfb      	ldrb	r3, [r7, #15]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d004      	beq.n	80085c4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2202      	movs	r2, #2
 80085be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085c2:	e009      	b.n	80085d8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2201      	movs	r2, #1
 80085c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085cc:	e004      	b.n	80085d8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80085ce:	6839      	ldr	r1, [r7, #0]
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f000 f99e 	bl	8008912 <USBD_CtlError>
  }
}
 80085d6:	bf00      	nop
 80085d8:	bf00      	nop
 80085da:	3710      	adds	r7, #16
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}

080085e0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b084      	sub	sp, #16
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80085ea:	2300      	movs	r3, #0
 80085ec:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	885b      	ldrh	r3, [r3, #2]
 80085f2:	b2da      	uxtb	r2, r3
 80085f4:	4b4e      	ldr	r3, [pc, #312]	; (8008730 <USBD_SetConfig+0x150>)
 80085f6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80085f8:	4b4d      	ldr	r3, [pc, #308]	; (8008730 <USBD_SetConfig+0x150>)
 80085fa:	781b      	ldrb	r3, [r3, #0]
 80085fc:	2b01      	cmp	r3, #1
 80085fe:	d905      	bls.n	800860c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008600:	6839      	ldr	r1, [r7, #0]
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f000 f985 	bl	8008912 <USBD_CtlError>
    return USBD_FAIL;
 8008608:	2303      	movs	r3, #3
 800860a:	e08c      	b.n	8008726 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008612:	b2db      	uxtb	r3, r3
 8008614:	2b02      	cmp	r3, #2
 8008616:	d002      	beq.n	800861e <USBD_SetConfig+0x3e>
 8008618:	2b03      	cmp	r3, #3
 800861a:	d029      	beq.n	8008670 <USBD_SetConfig+0x90>
 800861c:	e075      	b.n	800870a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800861e:	4b44      	ldr	r3, [pc, #272]	; (8008730 <USBD_SetConfig+0x150>)
 8008620:	781b      	ldrb	r3, [r3, #0]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d020      	beq.n	8008668 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008626:	4b42      	ldr	r3, [pc, #264]	; (8008730 <USBD_SetConfig+0x150>)
 8008628:	781b      	ldrb	r3, [r3, #0]
 800862a:	461a      	mov	r2, r3
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008630:	4b3f      	ldr	r3, [pc, #252]	; (8008730 <USBD_SetConfig+0x150>)
 8008632:	781b      	ldrb	r3, [r3, #0]
 8008634:	4619      	mov	r1, r3
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f7fe ffe1 	bl	80075fe <USBD_SetClassConfig>
 800863c:	4603      	mov	r3, r0
 800863e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008640:	7bfb      	ldrb	r3, [r7, #15]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d008      	beq.n	8008658 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008646:	6839      	ldr	r1, [r7, #0]
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f000 f962 	bl	8008912 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2202      	movs	r2, #2
 8008652:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008656:	e065      	b.n	8008724 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f000 fa25 	bl	8008aa8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2203      	movs	r2, #3
 8008662:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008666:	e05d      	b.n	8008724 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f000 fa1d 	bl	8008aa8 <USBD_CtlSendStatus>
      break;
 800866e:	e059      	b.n	8008724 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008670:	4b2f      	ldr	r3, [pc, #188]	; (8008730 <USBD_SetConfig+0x150>)
 8008672:	781b      	ldrb	r3, [r3, #0]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d112      	bne.n	800869e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2202      	movs	r2, #2
 800867c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008680:	4b2b      	ldr	r3, [pc, #172]	; (8008730 <USBD_SetConfig+0x150>)
 8008682:	781b      	ldrb	r3, [r3, #0]
 8008684:	461a      	mov	r2, r3
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800868a:	4b29      	ldr	r3, [pc, #164]	; (8008730 <USBD_SetConfig+0x150>)
 800868c:	781b      	ldrb	r3, [r3, #0]
 800868e:	4619      	mov	r1, r3
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f7fe ffd0 	bl	8007636 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f000 fa06 	bl	8008aa8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800869c:	e042      	b.n	8008724 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800869e:	4b24      	ldr	r3, [pc, #144]	; (8008730 <USBD_SetConfig+0x150>)
 80086a0:	781b      	ldrb	r3, [r3, #0]
 80086a2:	461a      	mov	r2, r3
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	685b      	ldr	r3, [r3, #4]
 80086a8:	429a      	cmp	r2, r3
 80086aa:	d02a      	beq.n	8008702 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	685b      	ldr	r3, [r3, #4]
 80086b0:	b2db      	uxtb	r3, r3
 80086b2:	4619      	mov	r1, r3
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f7fe ffbe 	bl	8007636 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80086ba:	4b1d      	ldr	r3, [pc, #116]	; (8008730 <USBD_SetConfig+0x150>)
 80086bc:	781b      	ldrb	r3, [r3, #0]
 80086be:	461a      	mov	r2, r3
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80086c4:	4b1a      	ldr	r3, [pc, #104]	; (8008730 <USBD_SetConfig+0x150>)
 80086c6:	781b      	ldrb	r3, [r3, #0]
 80086c8:	4619      	mov	r1, r3
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f7fe ff97 	bl	80075fe <USBD_SetClassConfig>
 80086d0:	4603      	mov	r3, r0
 80086d2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80086d4:	7bfb      	ldrb	r3, [r7, #15]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d00f      	beq.n	80086fa <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80086da:	6839      	ldr	r1, [r7, #0]
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f000 f918 	bl	8008912 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	685b      	ldr	r3, [r3, #4]
 80086e6:	b2db      	uxtb	r3, r3
 80086e8:	4619      	mov	r1, r3
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f7fe ffa3 	bl	8007636 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2202      	movs	r2, #2
 80086f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80086f8:	e014      	b.n	8008724 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f000 f9d4 	bl	8008aa8 <USBD_CtlSendStatus>
      break;
 8008700:	e010      	b.n	8008724 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f000 f9d0 	bl	8008aa8 <USBD_CtlSendStatus>
      break;
 8008708:	e00c      	b.n	8008724 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800870a:	6839      	ldr	r1, [r7, #0]
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f000 f900 	bl	8008912 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008712:	4b07      	ldr	r3, [pc, #28]	; (8008730 <USBD_SetConfig+0x150>)
 8008714:	781b      	ldrb	r3, [r3, #0]
 8008716:	4619      	mov	r1, r3
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f7fe ff8c 	bl	8007636 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800871e:	2303      	movs	r3, #3
 8008720:	73fb      	strb	r3, [r7, #15]
      break;
 8008722:	bf00      	nop
  }

  return ret;
 8008724:	7bfb      	ldrb	r3, [r7, #15]
}
 8008726:	4618      	mov	r0, r3
 8008728:	3710      	adds	r7, #16
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}
 800872e:	bf00      	nop
 8008730:	2000038c 	.word	0x2000038c

08008734 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b082      	sub	sp, #8
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
 800873c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	88db      	ldrh	r3, [r3, #6]
 8008742:	2b01      	cmp	r3, #1
 8008744:	d004      	beq.n	8008750 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008746:	6839      	ldr	r1, [r7, #0]
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f000 f8e2 	bl	8008912 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800874e:	e023      	b.n	8008798 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008756:	b2db      	uxtb	r3, r3
 8008758:	2b02      	cmp	r3, #2
 800875a:	dc02      	bgt.n	8008762 <USBD_GetConfig+0x2e>
 800875c:	2b00      	cmp	r3, #0
 800875e:	dc03      	bgt.n	8008768 <USBD_GetConfig+0x34>
 8008760:	e015      	b.n	800878e <USBD_GetConfig+0x5a>
 8008762:	2b03      	cmp	r3, #3
 8008764:	d00b      	beq.n	800877e <USBD_GetConfig+0x4a>
 8008766:	e012      	b.n	800878e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2200      	movs	r2, #0
 800876c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	3308      	adds	r3, #8
 8008772:	2201      	movs	r2, #1
 8008774:	4619      	mov	r1, r3
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f000 f93c 	bl	80089f4 <USBD_CtlSendData>
        break;
 800877c:	e00c      	b.n	8008798 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	3304      	adds	r3, #4
 8008782:	2201      	movs	r2, #1
 8008784:	4619      	mov	r1, r3
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f000 f934 	bl	80089f4 <USBD_CtlSendData>
        break;
 800878c:	e004      	b.n	8008798 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800878e:	6839      	ldr	r1, [r7, #0]
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f000 f8be 	bl	8008912 <USBD_CtlError>
        break;
 8008796:	bf00      	nop
}
 8008798:	bf00      	nop
 800879a:	3708      	adds	r7, #8
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}

080087a0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b082      	sub	sp, #8
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
 80087a8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087b0:	b2db      	uxtb	r3, r3
 80087b2:	3b01      	subs	r3, #1
 80087b4:	2b02      	cmp	r3, #2
 80087b6:	d81e      	bhi.n	80087f6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	88db      	ldrh	r3, [r3, #6]
 80087bc:	2b02      	cmp	r3, #2
 80087be:	d004      	beq.n	80087ca <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80087c0:	6839      	ldr	r1, [r7, #0]
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f000 f8a5 	bl	8008912 <USBD_CtlError>
        break;
 80087c8:	e01a      	b.n	8008800 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2201      	movs	r2, #1
 80087ce:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d005      	beq.n	80087e6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	68db      	ldr	r3, [r3, #12]
 80087de:	f043 0202 	orr.w	r2, r3, #2
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	330c      	adds	r3, #12
 80087ea:	2202      	movs	r2, #2
 80087ec:	4619      	mov	r1, r3
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f000 f900 	bl	80089f4 <USBD_CtlSendData>
      break;
 80087f4:	e004      	b.n	8008800 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80087f6:	6839      	ldr	r1, [r7, #0]
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f000 f88a 	bl	8008912 <USBD_CtlError>
      break;
 80087fe:	bf00      	nop
  }
}
 8008800:	bf00      	nop
 8008802:	3708      	adds	r7, #8
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}

08008808 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b082      	sub	sp, #8
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
 8008810:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	885b      	ldrh	r3, [r3, #2]
 8008816:	2b01      	cmp	r3, #1
 8008818:	d107      	bne.n	800882a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2201      	movs	r2, #1
 800881e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f000 f940 	bl	8008aa8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008828:	e013      	b.n	8008852 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	885b      	ldrh	r3, [r3, #2]
 800882e:	2b02      	cmp	r3, #2
 8008830:	d10b      	bne.n	800884a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	889b      	ldrh	r3, [r3, #4]
 8008836:	0a1b      	lsrs	r3, r3, #8
 8008838:	b29b      	uxth	r3, r3
 800883a:	b2da      	uxtb	r2, r3
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f000 f930 	bl	8008aa8 <USBD_CtlSendStatus>
}
 8008848:	e003      	b.n	8008852 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800884a:	6839      	ldr	r1, [r7, #0]
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f000 f860 	bl	8008912 <USBD_CtlError>
}
 8008852:	bf00      	nop
 8008854:	3708      	adds	r7, #8
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}

0800885a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800885a:	b580      	push	{r7, lr}
 800885c:	b082      	sub	sp, #8
 800885e:	af00      	add	r7, sp, #0
 8008860:	6078      	str	r0, [r7, #4]
 8008862:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800886a:	b2db      	uxtb	r3, r3
 800886c:	3b01      	subs	r3, #1
 800886e:	2b02      	cmp	r3, #2
 8008870:	d80b      	bhi.n	800888a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	885b      	ldrh	r3, [r3, #2]
 8008876:	2b01      	cmp	r3, #1
 8008878:	d10c      	bne.n	8008894 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2200      	movs	r2, #0
 800887e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f000 f910 	bl	8008aa8 <USBD_CtlSendStatus>
      }
      break;
 8008888:	e004      	b.n	8008894 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800888a:	6839      	ldr	r1, [r7, #0]
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f000 f840 	bl	8008912 <USBD_CtlError>
      break;
 8008892:	e000      	b.n	8008896 <USBD_ClrFeature+0x3c>
      break;
 8008894:	bf00      	nop
  }
}
 8008896:	bf00      	nop
 8008898:	3708      	adds	r7, #8
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}

0800889e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800889e:	b580      	push	{r7, lr}
 80088a0:	b084      	sub	sp, #16
 80088a2:	af00      	add	r7, sp, #0
 80088a4:	6078      	str	r0, [r7, #4]
 80088a6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	781a      	ldrb	r2, [r3, #0]
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	3301      	adds	r3, #1
 80088b8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	781a      	ldrb	r2, [r3, #0]
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	3301      	adds	r3, #1
 80088c6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80088c8:	68f8      	ldr	r0, [r7, #12]
 80088ca:	f7ff fa41 	bl	8007d50 <SWAPBYTE>
 80088ce:	4603      	mov	r3, r0
 80088d0:	461a      	mov	r2, r3
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	3301      	adds	r3, #1
 80088da:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	3301      	adds	r3, #1
 80088e0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80088e2:	68f8      	ldr	r0, [r7, #12]
 80088e4:	f7ff fa34 	bl	8007d50 <SWAPBYTE>
 80088e8:	4603      	mov	r3, r0
 80088ea:	461a      	mov	r2, r3
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	3301      	adds	r3, #1
 80088f4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	3301      	adds	r3, #1
 80088fa:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80088fc:	68f8      	ldr	r0, [r7, #12]
 80088fe:	f7ff fa27 	bl	8007d50 <SWAPBYTE>
 8008902:	4603      	mov	r3, r0
 8008904:	461a      	mov	r2, r3
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	80da      	strh	r2, [r3, #6]
}
 800890a:	bf00      	nop
 800890c:	3710      	adds	r7, #16
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}

08008912 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008912:	b580      	push	{r7, lr}
 8008914:	b082      	sub	sp, #8
 8008916:	af00      	add	r7, sp, #0
 8008918:	6078      	str	r0, [r7, #4]
 800891a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800891c:	2180      	movs	r1, #128	; 0x80
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f001 ffc2 	bl	800a8a8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008924:	2100      	movs	r1, #0
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f001 ffbe 	bl	800a8a8 <USBD_LL_StallEP>
}
 800892c:	bf00      	nop
 800892e:	3708      	adds	r7, #8
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}

08008934 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b086      	sub	sp, #24
 8008938:	af00      	add	r7, sp, #0
 800893a:	60f8      	str	r0, [r7, #12]
 800893c:	60b9      	str	r1, [r7, #8]
 800893e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008940:	2300      	movs	r3, #0
 8008942:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d036      	beq.n	80089b8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800894e:	6938      	ldr	r0, [r7, #16]
 8008950:	f000 f836 	bl	80089c0 <USBD_GetLen>
 8008954:	4603      	mov	r3, r0
 8008956:	3301      	adds	r3, #1
 8008958:	b29b      	uxth	r3, r3
 800895a:	005b      	lsls	r3, r3, #1
 800895c:	b29a      	uxth	r2, r3
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008962:	7dfb      	ldrb	r3, [r7, #23]
 8008964:	68ba      	ldr	r2, [r7, #8]
 8008966:	4413      	add	r3, r2
 8008968:	687a      	ldr	r2, [r7, #4]
 800896a:	7812      	ldrb	r2, [r2, #0]
 800896c:	701a      	strb	r2, [r3, #0]
  idx++;
 800896e:	7dfb      	ldrb	r3, [r7, #23]
 8008970:	3301      	adds	r3, #1
 8008972:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008974:	7dfb      	ldrb	r3, [r7, #23]
 8008976:	68ba      	ldr	r2, [r7, #8]
 8008978:	4413      	add	r3, r2
 800897a:	2203      	movs	r2, #3
 800897c:	701a      	strb	r2, [r3, #0]
  idx++;
 800897e:	7dfb      	ldrb	r3, [r7, #23]
 8008980:	3301      	adds	r3, #1
 8008982:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008984:	e013      	b.n	80089ae <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008986:	7dfb      	ldrb	r3, [r7, #23]
 8008988:	68ba      	ldr	r2, [r7, #8]
 800898a:	4413      	add	r3, r2
 800898c:	693a      	ldr	r2, [r7, #16]
 800898e:	7812      	ldrb	r2, [r2, #0]
 8008990:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	3301      	adds	r3, #1
 8008996:	613b      	str	r3, [r7, #16]
    idx++;
 8008998:	7dfb      	ldrb	r3, [r7, #23]
 800899a:	3301      	adds	r3, #1
 800899c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800899e:	7dfb      	ldrb	r3, [r7, #23]
 80089a0:	68ba      	ldr	r2, [r7, #8]
 80089a2:	4413      	add	r3, r2
 80089a4:	2200      	movs	r2, #0
 80089a6:	701a      	strb	r2, [r3, #0]
    idx++;
 80089a8:	7dfb      	ldrb	r3, [r7, #23]
 80089aa:	3301      	adds	r3, #1
 80089ac:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	781b      	ldrb	r3, [r3, #0]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d1e7      	bne.n	8008986 <USBD_GetString+0x52>
 80089b6:	e000      	b.n	80089ba <USBD_GetString+0x86>
    return;
 80089b8:	bf00      	nop
  }
}
 80089ba:	3718      	adds	r7, #24
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}

080089c0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80089c0:	b480      	push	{r7}
 80089c2:	b085      	sub	sp, #20
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80089c8:	2300      	movs	r3, #0
 80089ca:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80089d0:	e005      	b.n	80089de <USBD_GetLen+0x1e>
  {
    len++;
 80089d2:	7bfb      	ldrb	r3, [r7, #15]
 80089d4:	3301      	adds	r3, #1
 80089d6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	3301      	adds	r3, #1
 80089dc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	781b      	ldrb	r3, [r3, #0]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d1f5      	bne.n	80089d2 <USBD_GetLen+0x12>
  }

  return len;
 80089e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80089e8:	4618      	mov	r0, r3
 80089ea:	3714      	adds	r7, #20
 80089ec:	46bd      	mov	sp, r7
 80089ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f2:	4770      	bx	lr

080089f4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b084      	sub	sp, #16
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	60f8      	str	r0, [r7, #12]
 80089fc:	60b9      	str	r1, [r7, #8]
 80089fe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	2202      	movs	r2, #2
 8008a04:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	687a      	ldr	r2, [r7, #4]
 8008a0c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	687a      	ldr	r2, [r7, #4]
 8008a12:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	68ba      	ldr	r2, [r7, #8]
 8008a18:	2100      	movs	r1, #0
 8008a1a:	68f8      	ldr	r0, [r7, #12]
 8008a1c:	f001 ffcd 	bl	800a9ba <USBD_LL_Transmit>

  return USBD_OK;
 8008a20:	2300      	movs	r3, #0
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3710      	adds	r7, #16
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}

08008a2a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008a2a:	b580      	push	{r7, lr}
 8008a2c:	b084      	sub	sp, #16
 8008a2e:	af00      	add	r7, sp, #0
 8008a30:	60f8      	str	r0, [r7, #12]
 8008a32:	60b9      	str	r1, [r7, #8]
 8008a34:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	68ba      	ldr	r2, [r7, #8]
 8008a3a:	2100      	movs	r1, #0
 8008a3c:	68f8      	ldr	r0, [r7, #12]
 8008a3e:	f001 ffbc 	bl	800a9ba <USBD_LL_Transmit>

  return USBD_OK;
 8008a42:	2300      	movs	r3, #0
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	3710      	adds	r7, #16
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}

08008a4c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b084      	sub	sp, #16
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	60f8      	str	r0, [r7, #12]
 8008a54:	60b9      	str	r1, [r7, #8]
 8008a56:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	2203      	movs	r2, #3
 8008a5c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	687a      	ldr	r2, [r7, #4]
 8008a64:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	687a      	ldr	r2, [r7, #4]
 8008a6c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	68ba      	ldr	r2, [r7, #8]
 8008a74:	2100      	movs	r1, #0
 8008a76:	68f8      	ldr	r0, [r7, #12]
 8008a78:	f001 ffc0 	bl	800a9fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a7c:	2300      	movs	r3, #0
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3710      	adds	r7, #16
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}

08008a86 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008a86:	b580      	push	{r7, lr}
 8008a88:	b084      	sub	sp, #16
 8008a8a:	af00      	add	r7, sp, #0
 8008a8c:	60f8      	str	r0, [r7, #12]
 8008a8e:	60b9      	str	r1, [r7, #8]
 8008a90:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	68ba      	ldr	r2, [r7, #8]
 8008a96:	2100      	movs	r1, #0
 8008a98:	68f8      	ldr	r0, [r7, #12]
 8008a9a:	f001 ffaf 	bl	800a9fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a9e:	2300      	movs	r3, #0
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3710      	adds	r7, #16
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}

08008aa8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b082      	sub	sp, #8
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2204      	movs	r2, #4
 8008ab4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008ab8:	2300      	movs	r3, #0
 8008aba:	2200      	movs	r2, #0
 8008abc:	2100      	movs	r1, #0
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f001 ff7b 	bl	800a9ba <USBD_LL_Transmit>

  return USBD_OK;
 8008ac4:	2300      	movs	r3, #0
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3708      	adds	r7, #8
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}

08008ace <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008ace:	b580      	push	{r7, lr}
 8008ad0:	b082      	sub	sp, #8
 8008ad2:	af00      	add	r7, sp, #0
 8008ad4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2205      	movs	r2, #5
 8008ada:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008ade:	2300      	movs	r3, #0
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	2100      	movs	r1, #0
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f001 ff89 	bl	800a9fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008aea:	2300      	movs	r3, #0
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3708      	adds	r7, #8
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}

08008af4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b085      	sub	sp, #20
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	4603      	mov	r3, r0
 8008afc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008afe:	2300      	movs	r3, #0
 8008b00:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008b02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008b06:	2b84      	cmp	r3, #132	; 0x84
 8008b08:	d005      	beq.n	8008b16 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008b0a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	4413      	add	r3, r2
 8008b12:	3303      	adds	r3, #3
 8008b14:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008b16:	68fb      	ldr	r3, [r7, #12]
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	3714      	adds	r7, #20
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b22:	4770      	bx	lr

08008b24 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8008b24:	b480      	push	{r7}
 8008b26:	b083      	sub	sp, #12
 8008b28:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b2a:	f3ef 8305 	mrs	r3, IPSR
 8008b2e:	607b      	str	r3, [r7, #4]
  return(result);
 8008b30:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	bf14      	ite	ne
 8008b36:	2301      	movne	r3, #1
 8008b38:	2300      	moveq	r3, #0
 8008b3a:	b2db      	uxtb	r3, r3
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	370c      	adds	r7, #12
 8008b40:	46bd      	mov	sp, r7
 8008b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b46:	4770      	bx	lr

08008b48 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008b4c:	f000 fb1c 	bl	8009188 <vTaskStartScheduler>
  
  return osOK;
 8008b50:	2300      	movs	r3, #0
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	bd80      	pop	{r7, pc}

08008b56 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8008b56:	b580      	push	{r7, lr}
 8008b58:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8008b5a:	f7ff ffe3 	bl	8008b24 <inHandlerMode>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d003      	beq.n	8008b6c <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8008b64:	f000 fc1a 	bl	800939c <xTaskGetTickCountFromISR>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	e002      	b.n	8008b72 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8008b6c:	f000 fc06 	bl	800937c <xTaskGetTickCount>
 8008b70:	4603      	mov	r3, r0
  }
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	bd80      	pop	{r7, pc}

08008b76 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008b76:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b78:	b087      	sub	sp, #28
 8008b7a:	af02      	add	r7, sp, #8
 8008b7c:	6078      	str	r0, [r7, #4]
 8008b7e:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	685c      	ldr	r4, [r3, #4]
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008b8c:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008b94:	4618      	mov	r0, r3
 8008b96:	f7ff ffad 	bl	8008af4 <makeFreeRtosPriority>
 8008b9a:	4602      	mov	r2, r0
 8008b9c:	f107 030c 	add.w	r3, r7, #12
 8008ba0:	9301      	str	r3, [sp, #4]
 8008ba2:	9200      	str	r2, [sp, #0]
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	4632      	mov	r2, r6
 8008ba8:	4629      	mov	r1, r5
 8008baa:	4620      	mov	r0, r4
 8008bac:	f000 f8e8 	bl	8008d80 <xTaskCreate>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	2b01      	cmp	r3, #1
 8008bb4:	d001      	beq.n	8008bba <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	e000      	b.n	8008bbc <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8008bba:	68fb      	ldr	r3, [r7, #12]
}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	3714      	adds	r7, #20
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008bc4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b084      	sub	sp, #16
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d001      	beq.n	8008bda <osDelay+0x16>
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	e000      	b.n	8008bdc <osDelay+0x18>
 8008bda:	2301      	movs	r3, #1
 8008bdc:	4618      	mov	r0, r3
 8008bde:	f000 fa9f 	bl	8009120 <vTaskDelay>
  
  return osOK;
 8008be2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	3710      	adds	r7, #16
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bd80      	pop	{r7, pc}

08008bec <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b084      	sub	sp, #16
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
 8008bf4:	6039      	str	r1, [r7, #0]
#if INCLUDE_vTaskDelayUntil
  TickType_t ticks = (millisec / portTICK_PERIOD_MS);
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	60fb      	str	r3, [r7, #12]
  vTaskDelayUntil((TickType_t *) PreviousWakeTime, ticks ? ticks : 1);
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d001      	beq.n	8008c04 <osDelayUntil+0x18>
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	e000      	b.n	8008c06 <osDelayUntil+0x1a>
 8008c04:	2301      	movs	r3, #1
 8008c06:	4619      	mov	r1, r3
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f000 fa0b 	bl	8009024 <vTaskDelayUntil>
  
  return osOK;
 8008c0e:	2300      	movs	r3, #0
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
#endif
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	3710      	adds	r7, #16
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}

08008c18 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b083      	sub	sp, #12
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f103 0208 	add.w	r2, r3, #8
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008c30:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	f103 0208 	add.w	r2, r3, #8
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f103 0208 	add.w	r2, r3, #8
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008c4c:	bf00      	nop
 8008c4e:	370c      	adds	r7, #12
 8008c50:	46bd      	mov	sp, r7
 8008c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c56:	4770      	bx	lr

08008c58 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b083      	sub	sp, #12
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2200      	movs	r2, #0
 8008c64:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008c66:	bf00      	nop
 8008c68:	370c      	adds	r7, #12
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c70:	4770      	bx	lr

08008c72 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008c72:	b480      	push	{r7}
 8008c74:	b085      	sub	sp, #20
 8008c76:	af00      	add	r7, sp, #0
 8008c78:	6078      	str	r0, [r7, #4]
 8008c7a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	685b      	ldr	r3, [r3, #4]
 8008c80:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	68fa      	ldr	r2, [r7, #12]
 8008c86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	689a      	ldr	r2, [r3, #8]
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	689b      	ldr	r3, [r3, #8]
 8008c94:	683a      	ldr	r2, [r7, #0]
 8008c96:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	683a      	ldr	r2, [r7, #0]
 8008c9c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	687a      	ldr	r2, [r7, #4]
 8008ca2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	1c5a      	adds	r2, r3, #1
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	601a      	str	r2, [r3, #0]
}
 8008cae:	bf00      	nop
 8008cb0:	3714      	adds	r7, #20
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb8:	4770      	bx	lr

08008cba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008cba:	b480      	push	{r7}
 8008cbc:	b085      	sub	sp, #20
 8008cbe:	af00      	add	r7, sp, #0
 8008cc0:	6078      	str	r0, [r7, #4]
 8008cc2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008cd0:	d103      	bne.n	8008cda <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	691b      	ldr	r3, [r3, #16]
 8008cd6:	60fb      	str	r3, [r7, #12]
 8008cd8:	e00c      	b.n	8008cf4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	3308      	adds	r3, #8
 8008cde:	60fb      	str	r3, [r7, #12]
 8008ce0:	e002      	b.n	8008ce8 <vListInsert+0x2e>
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	685b      	ldr	r3, [r3, #4]
 8008ce6:	60fb      	str	r3, [r7, #12]
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	685b      	ldr	r3, [r3, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	68ba      	ldr	r2, [r7, #8]
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	d2f6      	bcs.n	8008ce2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	685a      	ldr	r2, [r3, #4]
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	685b      	ldr	r3, [r3, #4]
 8008d00:	683a      	ldr	r2, [r7, #0]
 8008d02:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	68fa      	ldr	r2, [r7, #12]
 8008d08:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	683a      	ldr	r2, [r7, #0]
 8008d0e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	687a      	ldr	r2, [r7, #4]
 8008d14:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	1c5a      	adds	r2, r3, #1
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	601a      	str	r2, [r3, #0]
}
 8008d20:	bf00      	nop
 8008d22:	3714      	adds	r7, #20
 8008d24:	46bd      	mov	sp, r7
 8008d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2a:	4770      	bx	lr

08008d2c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b085      	sub	sp, #20
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	691b      	ldr	r3, [r3, #16]
 8008d38:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	685b      	ldr	r3, [r3, #4]
 8008d3e:	687a      	ldr	r2, [r7, #4]
 8008d40:	6892      	ldr	r2, [r2, #8]
 8008d42:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	689b      	ldr	r3, [r3, #8]
 8008d48:	687a      	ldr	r2, [r7, #4]
 8008d4a:	6852      	ldr	r2, [r2, #4]
 8008d4c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	685b      	ldr	r3, [r3, #4]
 8008d52:	687a      	ldr	r2, [r7, #4]
 8008d54:	429a      	cmp	r2, r3
 8008d56:	d103      	bne.n	8008d60 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	689a      	ldr	r2, [r3, #8]
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2200      	movs	r2, #0
 8008d64:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	1e5a      	subs	r2, r3, #1
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	3714      	adds	r7, #20
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7e:	4770      	bx	lr

08008d80 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b08c      	sub	sp, #48	; 0x30
 8008d84:	af04      	add	r7, sp, #16
 8008d86:	60f8      	str	r0, [r7, #12]
 8008d88:	60b9      	str	r1, [r7, #8]
 8008d8a:	603b      	str	r3, [r7, #0]
 8008d8c:	4613      	mov	r3, r2
 8008d8e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008d90:	88fb      	ldrh	r3, [r7, #6]
 8008d92:	009b      	lsls	r3, r3, #2
 8008d94:	4618      	mov	r0, r3
 8008d96:	f000 ffc7 	bl	8009d28 <pvPortMalloc>
 8008d9a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008d9c:	697b      	ldr	r3, [r7, #20]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d00e      	beq.n	8008dc0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008da2:	20a0      	movs	r0, #160	; 0xa0
 8008da4:	f000 ffc0 	bl	8009d28 <pvPortMalloc>
 8008da8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008daa:	69fb      	ldr	r3, [r7, #28]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d003      	beq.n	8008db8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008db0:	69fb      	ldr	r3, [r7, #28]
 8008db2:	697a      	ldr	r2, [r7, #20]
 8008db4:	631a      	str	r2, [r3, #48]	; 0x30
 8008db6:	e005      	b.n	8008dc4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008db8:	6978      	ldr	r0, [r7, #20]
 8008dba:	f001 f885 	bl	8009ec8 <vPortFree>
 8008dbe:	e001      	b.n	8008dc4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008dc4:	69fb      	ldr	r3, [r7, #28]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d013      	beq.n	8008df2 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008dca:	88fa      	ldrh	r2, [r7, #6]
 8008dcc:	2300      	movs	r3, #0
 8008dce:	9303      	str	r3, [sp, #12]
 8008dd0:	69fb      	ldr	r3, [r7, #28]
 8008dd2:	9302      	str	r3, [sp, #8]
 8008dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dd6:	9301      	str	r3, [sp, #4]
 8008dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dda:	9300      	str	r3, [sp, #0]
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	68b9      	ldr	r1, [r7, #8]
 8008de0:	68f8      	ldr	r0, [r7, #12]
 8008de2:	f000 f80f 	bl	8008e04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008de6:	69f8      	ldr	r0, [r7, #28]
 8008de8:	f000 f8b2 	bl	8008f50 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008dec:	2301      	movs	r3, #1
 8008dee:	61bb      	str	r3, [r7, #24]
 8008df0:	e002      	b.n	8008df8 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008df2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008df6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008df8:	69bb      	ldr	r3, [r7, #24]
	}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	3720      	adds	r7, #32
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}
	...

08008e04 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b088      	sub	sp, #32
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	60f8      	str	r0, [r7, #12]
 8008e0c:	60b9      	str	r1, [r7, #8]
 8008e0e:	607a      	str	r2, [r7, #4]
 8008e10:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e14:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	009b      	lsls	r3, r3, #2
 8008e1a:	461a      	mov	r2, r3
 8008e1c:	21a5      	movs	r1, #165	; 0xa5
 8008e1e:	f003 fdfa 	bl	800ca16 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008e2c:	3b01      	subs	r3, #1
 8008e2e:	009b      	lsls	r3, r3, #2
 8008e30:	4413      	add	r3, r2
 8008e32:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008e34:	69bb      	ldr	r3, [r7, #24]
 8008e36:	f023 0307 	bic.w	r3, r3, #7
 8008e3a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008e3c:	69bb      	ldr	r3, [r7, #24]
 8008e3e:	f003 0307 	and.w	r3, r3, #7
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d00a      	beq.n	8008e5c <prvInitialiseNewTask+0x58>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e4a:	f383 8811 	msr	BASEPRI, r3
 8008e4e:	f3bf 8f6f 	isb	sy
 8008e52:	f3bf 8f4f 	dsb	sy
 8008e56:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008e58:	bf00      	nop
 8008e5a:	e7fe      	b.n	8008e5a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d01f      	beq.n	8008ea2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008e62:	2300      	movs	r3, #0
 8008e64:	61fb      	str	r3, [r7, #28]
 8008e66:	e012      	b.n	8008e8e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008e68:	68ba      	ldr	r2, [r7, #8]
 8008e6a:	69fb      	ldr	r3, [r7, #28]
 8008e6c:	4413      	add	r3, r2
 8008e6e:	7819      	ldrb	r1, [r3, #0]
 8008e70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e72:	69fb      	ldr	r3, [r7, #28]
 8008e74:	4413      	add	r3, r2
 8008e76:	3334      	adds	r3, #52	; 0x34
 8008e78:	460a      	mov	r2, r1
 8008e7a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008e7c:	68ba      	ldr	r2, [r7, #8]
 8008e7e:	69fb      	ldr	r3, [r7, #28]
 8008e80:	4413      	add	r3, r2
 8008e82:	781b      	ldrb	r3, [r3, #0]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d006      	beq.n	8008e96 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008e88:	69fb      	ldr	r3, [r7, #28]
 8008e8a:	3301      	adds	r3, #1
 8008e8c:	61fb      	str	r3, [r7, #28]
 8008e8e:	69fb      	ldr	r3, [r7, #28]
 8008e90:	2b0f      	cmp	r3, #15
 8008e92:	d9e9      	bls.n	8008e68 <prvInitialiseNewTask+0x64>
 8008e94:	e000      	b.n	8008e98 <prvInitialiseNewTask+0x94>
			{
				break;
 8008e96:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008ea0:	e003      	b.n	8008eaa <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eac:	2b06      	cmp	r3, #6
 8008eae:	d901      	bls.n	8008eb4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008eb0:	2306      	movs	r3, #6
 8008eb2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008eb8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ebc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ebe:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ec8:	3304      	adds	r3, #4
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f7ff fec4 	bl	8008c58 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ed2:	3318      	adds	r3, #24
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f7ff febf 	bl	8008c58 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008edc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ede:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ee2:	f1c3 0207 	rsb	r2, r3, #7
 8008ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ee8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008eee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008efa:	2200      	movs	r2, #0
 8008efc:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f02:	334c      	adds	r3, #76	; 0x4c
 8008f04:	224c      	movs	r2, #76	; 0x4c
 8008f06:	2100      	movs	r1, #0
 8008f08:	4618      	mov	r0, r3
 8008f0a:	f003 fd84 	bl	800ca16 <memset>
 8008f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f10:	4a0c      	ldr	r2, [pc, #48]	; (8008f44 <prvInitialiseNewTask+0x140>)
 8008f12:	651a      	str	r2, [r3, #80]	; 0x50
 8008f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f16:	4a0c      	ldr	r2, [pc, #48]	; (8008f48 <prvInitialiseNewTask+0x144>)
 8008f18:	655a      	str	r2, [r3, #84]	; 0x54
 8008f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f1c:	4a0b      	ldr	r2, [pc, #44]	; (8008f4c <prvInitialiseNewTask+0x148>)
 8008f1e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008f20:	683a      	ldr	r2, [r7, #0]
 8008f22:	68f9      	ldr	r1, [r7, #12]
 8008f24:	69b8      	ldr	r0, [r7, #24]
 8008f26:	f000 fcad 	bl	8009884 <pxPortInitialiseStack>
 8008f2a:	4602      	mov	r2, r0
 8008f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f2e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d002      	beq.n	8008f3c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f3a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008f3c:	bf00      	nop
 8008f3e:	3720      	adds	r7, #32
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd80      	pop	{r7, pc}
 8008f44:	20006744 	.word	0x20006744
 8008f48:	200067ac 	.word	0x200067ac
 8008f4c:	20006814 	.word	0x20006814

08008f50 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b082      	sub	sp, #8
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008f58:	f000 fdc4 	bl	8009ae4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008f5c:	4b2a      	ldr	r3, [pc, #168]	; (8009008 <prvAddNewTaskToReadyList+0xb8>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	3301      	adds	r3, #1
 8008f62:	4a29      	ldr	r2, [pc, #164]	; (8009008 <prvAddNewTaskToReadyList+0xb8>)
 8008f64:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008f66:	4b29      	ldr	r3, [pc, #164]	; (800900c <prvAddNewTaskToReadyList+0xbc>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d109      	bne.n	8008f82 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008f6e:	4a27      	ldr	r2, [pc, #156]	; (800900c <prvAddNewTaskToReadyList+0xbc>)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008f74:	4b24      	ldr	r3, [pc, #144]	; (8009008 <prvAddNewTaskToReadyList+0xb8>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	2b01      	cmp	r3, #1
 8008f7a:	d110      	bne.n	8008f9e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008f7c:	f000 fb78 	bl	8009670 <prvInitialiseTaskLists>
 8008f80:	e00d      	b.n	8008f9e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008f82:	4b23      	ldr	r3, [pc, #140]	; (8009010 <prvAddNewTaskToReadyList+0xc0>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d109      	bne.n	8008f9e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008f8a:	4b20      	ldr	r3, [pc, #128]	; (800900c <prvAddNewTaskToReadyList+0xbc>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f94:	429a      	cmp	r2, r3
 8008f96:	d802      	bhi.n	8008f9e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008f98:	4a1c      	ldr	r2, [pc, #112]	; (800900c <prvAddNewTaskToReadyList+0xbc>)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008f9e:	4b1d      	ldr	r3, [pc, #116]	; (8009014 <prvAddNewTaskToReadyList+0xc4>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	3301      	adds	r3, #1
 8008fa4:	4a1b      	ldr	r2, [pc, #108]	; (8009014 <prvAddNewTaskToReadyList+0xc4>)
 8008fa6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fac:	2201      	movs	r2, #1
 8008fae:	409a      	lsls	r2, r3
 8008fb0:	4b19      	ldr	r3, [pc, #100]	; (8009018 <prvAddNewTaskToReadyList+0xc8>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	4313      	orrs	r3, r2
 8008fb6:	4a18      	ldr	r2, [pc, #96]	; (8009018 <prvAddNewTaskToReadyList+0xc8>)
 8008fb8:	6013      	str	r3, [r2, #0]
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fbe:	4613      	mov	r3, r2
 8008fc0:	009b      	lsls	r3, r3, #2
 8008fc2:	4413      	add	r3, r2
 8008fc4:	009b      	lsls	r3, r3, #2
 8008fc6:	4a15      	ldr	r2, [pc, #84]	; (800901c <prvAddNewTaskToReadyList+0xcc>)
 8008fc8:	441a      	add	r2, r3
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	3304      	adds	r3, #4
 8008fce:	4619      	mov	r1, r3
 8008fd0:	4610      	mov	r0, r2
 8008fd2:	f7ff fe4e 	bl	8008c72 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008fd6:	f000 fdb5 	bl	8009b44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008fda:	4b0d      	ldr	r3, [pc, #52]	; (8009010 <prvAddNewTaskToReadyList+0xc0>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d00e      	beq.n	8009000 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008fe2:	4b0a      	ldr	r3, [pc, #40]	; (800900c <prvAddNewTaskToReadyList+0xbc>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fec:	429a      	cmp	r2, r3
 8008fee:	d207      	bcs.n	8009000 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008ff0:	4b0b      	ldr	r3, [pc, #44]	; (8009020 <prvAddNewTaskToReadyList+0xd0>)
 8008ff2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ff6:	601a      	str	r2, [r3, #0]
 8008ff8:	f3bf 8f4f 	dsb	sy
 8008ffc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009000:	bf00      	nop
 8009002:	3708      	adds	r7, #8
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}
 8009008:	20000490 	.word	0x20000490
 800900c:	20000390 	.word	0x20000390
 8009010:	2000049c 	.word	0x2000049c
 8009014:	200004ac 	.word	0x200004ac
 8009018:	20000498 	.word	0x20000498
 800901c:	20000394 	.word	0x20000394
 8009020:	e000ed04 	.word	0xe000ed04

08009024 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8009024:	b580      	push	{r7, lr}
 8009026:	b08a      	sub	sp, #40	; 0x28
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
 800902c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800902e:	2300      	movs	r3, #0
 8009030:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d10a      	bne.n	800904e <vTaskDelayUntil+0x2a>
	__asm volatile
 8009038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800903c:	f383 8811 	msr	BASEPRI, r3
 8009040:	f3bf 8f6f 	isb	sy
 8009044:	f3bf 8f4f 	dsb	sy
 8009048:	617b      	str	r3, [r7, #20]
}
 800904a:	bf00      	nop
 800904c:	e7fe      	b.n	800904c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d10a      	bne.n	800906a <vTaskDelayUntil+0x46>
	__asm volatile
 8009054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009058:	f383 8811 	msr	BASEPRI, r3
 800905c:	f3bf 8f6f 	isb	sy
 8009060:	f3bf 8f4f 	dsb	sy
 8009064:	613b      	str	r3, [r7, #16]
}
 8009066:	bf00      	nop
 8009068:	e7fe      	b.n	8009068 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800906a:	4b2a      	ldr	r3, [pc, #168]	; (8009114 <vTaskDelayUntil+0xf0>)
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d00a      	beq.n	8009088 <vTaskDelayUntil+0x64>
	__asm volatile
 8009072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009076:	f383 8811 	msr	BASEPRI, r3
 800907a:	f3bf 8f6f 	isb	sy
 800907e:	f3bf 8f4f 	dsb	sy
 8009082:	60fb      	str	r3, [r7, #12]
}
 8009084:	bf00      	nop
 8009086:	e7fe      	b.n	8009086 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8009088:	f000 f8ce 	bl	8009228 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800908c:	4b22      	ldr	r3, [pc, #136]	; (8009118 <vTaskDelayUntil+0xf4>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	683a      	ldr	r2, [r7, #0]
 8009098:	4413      	add	r3, r2
 800909a:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	6a3a      	ldr	r2, [r7, #32]
 80090a2:	429a      	cmp	r2, r3
 80090a4:	d20b      	bcs.n	80090be <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	69fa      	ldr	r2, [r7, #28]
 80090ac:	429a      	cmp	r2, r3
 80090ae:	d211      	bcs.n	80090d4 <vTaskDelayUntil+0xb0>
 80090b0:	69fa      	ldr	r2, [r7, #28]
 80090b2:	6a3b      	ldr	r3, [r7, #32]
 80090b4:	429a      	cmp	r2, r3
 80090b6:	d90d      	bls.n	80090d4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80090b8:	2301      	movs	r3, #1
 80090ba:	627b      	str	r3, [r7, #36]	; 0x24
 80090bc:	e00a      	b.n	80090d4 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	69fa      	ldr	r2, [r7, #28]
 80090c4:	429a      	cmp	r2, r3
 80090c6:	d303      	bcc.n	80090d0 <vTaskDelayUntil+0xac>
 80090c8:	69fa      	ldr	r2, [r7, #28]
 80090ca:	6a3b      	ldr	r3, [r7, #32]
 80090cc:	429a      	cmp	r2, r3
 80090ce:	d901      	bls.n	80090d4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80090d0:	2301      	movs	r3, #1
 80090d2:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	69fa      	ldr	r2, [r7, #28]
 80090d8:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80090da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d006      	beq.n	80090ee <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80090e0:	69fa      	ldr	r2, [r7, #28]
 80090e2:	6a3b      	ldr	r3, [r7, #32]
 80090e4:	1ad3      	subs	r3, r2, r3
 80090e6:	2100      	movs	r1, #0
 80090e8:	4618      	mov	r0, r3
 80090ea:	f000 fb65 	bl	80097b8 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80090ee:	f000 f8a9 	bl	8009244 <xTaskResumeAll>
 80090f2:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80090f4:	69bb      	ldr	r3, [r7, #24]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d107      	bne.n	800910a <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 80090fa:	4b08      	ldr	r3, [pc, #32]	; (800911c <vTaskDelayUntil+0xf8>)
 80090fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009100:	601a      	str	r2, [r3, #0]
 8009102:	f3bf 8f4f 	dsb	sy
 8009106:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800910a:	bf00      	nop
 800910c:	3728      	adds	r7, #40	; 0x28
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}
 8009112:	bf00      	nop
 8009114:	200004b8 	.word	0x200004b8
 8009118:	20000494 	.word	0x20000494
 800911c:	e000ed04 	.word	0xe000ed04

08009120 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009120:	b580      	push	{r7, lr}
 8009122:	b084      	sub	sp, #16
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009128:	2300      	movs	r3, #0
 800912a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d017      	beq.n	8009162 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009132:	4b13      	ldr	r3, [pc, #76]	; (8009180 <vTaskDelay+0x60>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d00a      	beq.n	8009150 <vTaskDelay+0x30>
	__asm volatile
 800913a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800913e:	f383 8811 	msr	BASEPRI, r3
 8009142:	f3bf 8f6f 	isb	sy
 8009146:	f3bf 8f4f 	dsb	sy
 800914a:	60bb      	str	r3, [r7, #8]
}
 800914c:	bf00      	nop
 800914e:	e7fe      	b.n	800914e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009150:	f000 f86a 	bl	8009228 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009154:	2100      	movs	r1, #0
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	f000 fb2e 	bl	80097b8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800915c:	f000 f872 	bl	8009244 <xTaskResumeAll>
 8009160:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d107      	bne.n	8009178 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009168:	4b06      	ldr	r3, [pc, #24]	; (8009184 <vTaskDelay+0x64>)
 800916a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800916e:	601a      	str	r2, [r3, #0]
 8009170:	f3bf 8f4f 	dsb	sy
 8009174:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009178:	bf00      	nop
 800917a:	3710      	adds	r7, #16
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}
 8009180:	200004b8 	.word	0x200004b8
 8009184:	e000ed04 	.word	0xe000ed04

08009188 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b086      	sub	sp, #24
 800918c:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800918e:	4b1e      	ldr	r3, [pc, #120]	; (8009208 <vTaskStartScheduler+0x80>)
 8009190:	9301      	str	r3, [sp, #4]
 8009192:	2300      	movs	r3, #0
 8009194:	9300      	str	r3, [sp, #0]
 8009196:	2300      	movs	r3, #0
 8009198:	2280      	movs	r2, #128	; 0x80
 800919a:	491c      	ldr	r1, [pc, #112]	; (800920c <vTaskStartScheduler+0x84>)
 800919c:	481c      	ldr	r0, [pc, #112]	; (8009210 <vTaskStartScheduler+0x88>)
 800919e:	f7ff fdef 	bl	8008d80 <xTaskCreate>
 80091a2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	2b01      	cmp	r3, #1
 80091a8:	d11b      	bne.n	80091e2 <vTaskStartScheduler+0x5a>
	__asm volatile
 80091aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ae:	f383 8811 	msr	BASEPRI, r3
 80091b2:	f3bf 8f6f 	isb	sy
 80091b6:	f3bf 8f4f 	dsb	sy
 80091ba:	60bb      	str	r3, [r7, #8]
}
 80091bc:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80091be:	4b15      	ldr	r3, [pc, #84]	; (8009214 <vTaskStartScheduler+0x8c>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	334c      	adds	r3, #76	; 0x4c
 80091c4:	4a14      	ldr	r2, [pc, #80]	; (8009218 <vTaskStartScheduler+0x90>)
 80091c6:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80091c8:	4b14      	ldr	r3, [pc, #80]	; (800921c <vTaskStartScheduler+0x94>)
 80091ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80091ce:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80091d0:	4b13      	ldr	r3, [pc, #76]	; (8009220 <vTaskStartScheduler+0x98>)
 80091d2:	2201      	movs	r2, #1
 80091d4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80091d6:	4b13      	ldr	r3, [pc, #76]	; (8009224 <vTaskStartScheduler+0x9c>)
 80091d8:	2200      	movs	r2, #0
 80091da:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80091dc:	f000 fbe0 	bl	80099a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80091e0:	e00e      	b.n	8009200 <vTaskStartScheduler+0x78>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80091e8:	d10a      	bne.n	8009200 <vTaskStartScheduler+0x78>
	__asm volatile
 80091ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ee:	f383 8811 	msr	BASEPRI, r3
 80091f2:	f3bf 8f6f 	isb	sy
 80091f6:	f3bf 8f4f 	dsb	sy
 80091fa:	607b      	str	r3, [r7, #4]
}
 80091fc:	bf00      	nop
 80091fe:	e7fe      	b.n	80091fe <vTaskStartScheduler+0x76>
}
 8009200:	bf00      	nop
 8009202:	3710      	adds	r7, #16
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}
 8009208:	200004b4 	.word	0x200004b4
 800920c:	0800cc0c 	.word	0x0800cc0c
 8009210:	08009641 	.word	0x08009641
 8009214:	20000390 	.word	0x20000390
 8009218:	2000017c 	.word	0x2000017c
 800921c:	200004b0 	.word	0x200004b0
 8009220:	2000049c 	.word	0x2000049c
 8009224:	20000494 	.word	0x20000494

08009228 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009228:	b480      	push	{r7}
 800922a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800922c:	4b04      	ldr	r3, [pc, #16]	; (8009240 <vTaskSuspendAll+0x18>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	3301      	adds	r3, #1
 8009232:	4a03      	ldr	r2, [pc, #12]	; (8009240 <vTaskSuspendAll+0x18>)
 8009234:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009236:	bf00      	nop
 8009238:	46bd      	mov	sp, r7
 800923a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923e:	4770      	bx	lr
 8009240:	200004b8 	.word	0x200004b8

08009244 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b084      	sub	sp, #16
 8009248:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800924a:	2300      	movs	r3, #0
 800924c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800924e:	2300      	movs	r3, #0
 8009250:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009252:	4b41      	ldr	r3, [pc, #260]	; (8009358 <xTaskResumeAll+0x114>)
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d10a      	bne.n	8009270 <xTaskResumeAll+0x2c>
	__asm volatile
 800925a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800925e:	f383 8811 	msr	BASEPRI, r3
 8009262:	f3bf 8f6f 	isb	sy
 8009266:	f3bf 8f4f 	dsb	sy
 800926a:	603b      	str	r3, [r7, #0]
}
 800926c:	bf00      	nop
 800926e:	e7fe      	b.n	800926e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009270:	f000 fc38 	bl	8009ae4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009274:	4b38      	ldr	r3, [pc, #224]	; (8009358 <xTaskResumeAll+0x114>)
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	3b01      	subs	r3, #1
 800927a:	4a37      	ldr	r2, [pc, #220]	; (8009358 <xTaskResumeAll+0x114>)
 800927c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800927e:	4b36      	ldr	r3, [pc, #216]	; (8009358 <xTaskResumeAll+0x114>)
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d161      	bne.n	800934a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009286:	4b35      	ldr	r3, [pc, #212]	; (800935c <xTaskResumeAll+0x118>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d05d      	beq.n	800934a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800928e:	e02e      	b.n	80092ee <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009290:	4b33      	ldr	r3, [pc, #204]	; (8009360 <xTaskResumeAll+0x11c>)
 8009292:	68db      	ldr	r3, [r3, #12]
 8009294:	68db      	ldr	r3, [r3, #12]
 8009296:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	3318      	adds	r3, #24
 800929c:	4618      	mov	r0, r3
 800929e:	f7ff fd45 	bl	8008d2c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	3304      	adds	r3, #4
 80092a6:	4618      	mov	r0, r3
 80092a8:	f7ff fd40 	bl	8008d2c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092b0:	2201      	movs	r2, #1
 80092b2:	409a      	lsls	r2, r3
 80092b4:	4b2b      	ldr	r3, [pc, #172]	; (8009364 <xTaskResumeAll+0x120>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	4313      	orrs	r3, r2
 80092ba:	4a2a      	ldr	r2, [pc, #168]	; (8009364 <xTaskResumeAll+0x120>)
 80092bc:	6013      	str	r3, [r2, #0]
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092c2:	4613      	mov	r3, r2
 80092c4:	009b      	lsls	r3, r3, #2
 80092c6:	4413      	add	r3, r2
 80092c8:	009b      	lsls	r3, r3, #2
 80092ca:	4a27      	ldr	r2, [pc, #156]	; (8009368 <xTaskResumeAll+0x124>)
 80092cc:	441a      	add	r2, r3
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	3304      	adds	r3, #4
 80092d2:	4619      	mov	r1, r3
 80092d4:	4610      	mov	r0, r2
 80092d6:	f7ff fccc 	bl	8008c72 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092de:	4b23      	ldr	r3, [pc, #140]	; (800936c <xTaskResumeAll+0x128>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092e4:	429a      	cmp	r2, r3
 80092e6:	d302      	bcc.n	80092ee <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80092e8:	4b21      	ldr	r3, [pc, #132]	; (8009370 <xTaskResumeAll+0x12c>)
 80092ea:	2201      	movs	r2, #1
 80092ec:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80092ee:	4b1c      	ldr	r3, [pc, #112]	; (8009360 <xTaskResumeAll+0x11c>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d1cc      	bne.n	8009290 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d001      	beq.n	8009300 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80092fc:	f000 fa3c 	bl	8009778 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009300:	4b1c      	ldr	r3, [pc, #112]	; (8009374 <xTaskResumeAll+0x130>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d010      	beq.n	800932e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800930c:	f000 f858 	bl	80093c0 <xTaskIncrementTick>
 8009310:	4603      	mov	r3, r0
 8009312:	2b00      	cmp	r3, #0
 8009314:	d002      	beq.n	800931c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8009316:	4b16      	ldr	r3, [pc, #88]	; (8009370 <xTaskResumeAll+0x12c>)
 8009318:	2201      	movs	r2, #1
 800931a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	3b01      	subs	r3, #1
 8009320:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d1f1      	bne.n	800930c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8009328:	4b12      	ldr	r3, [pc, #72]	; (8009374 <xTaskResumeAll+0x130>)
 800932a:	2200      	movs	r2, #0
 800932c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800932e:	4b10      	ldr	r3, [pc, #64]	; (8009370 <xTaskResumeAll+0x12c>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d009      	beq.n	800934a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009336:	2301      	movs	r3, #1
 8009338:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800933a:	4b0f      	ldr	r3, [pc, #60]	; (8009378 <xTaskResumeAll+0x134>)
 800933c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009340:	601a      	str	r2, [r3, #0]
 8009342:	f3bf 8f4f 	dsb	sy
 8009346:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800934a:	f000 fbfb 	bl	8009b44 <vPortExitCritical>

	return xAlreadyYielded;
 800934e:	68bb      	ldr	r3, [r7, #8]
}
 8009350:	4618      	mov	r0, r3
 8009352:	3710      	adds	r7, #16
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}
 8009358:	200004b8 	.word	0x200004b8
 800935c:	20000490 	.word	0x20000490
 8009360:	20000450 	.word	0x20000450
 8009364:	20000498 	.word	0x20000498
 8009368:	20000394 	.word	0x20000394
 800936c:	20000390 	.word	0x20000390
 8009370:	200004a4 	.word	0x200004a4
 8009374:	200004a0 	.word	0x200004a0
 8009378:	e000ed04 	.word	0xe000ed04

0800937c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800937c:	b480      	push	{r7}
 800937e:	b083      	sub	sp, #12
 8009380:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009382:	4b05      	ldr	r3, [pc, #20]	; (8009398 <xTaskGetTickCount+0x1c>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009388:	687b      	ldr	r3, [r7, #4]
}
 800938a:	4618      	mov	r0, r3
 800938c:	370c      	adds	r7, #12
 800938e:	46bd      	mov	sp, r7
 8009390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009394:	4770      	bx	lr
 8009396:	bf00      	nop
 8009398:	20000494 	.word	0x20000494

0800939c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b082      	sub	sp, #8
 80093a0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80093a2:	f000 fc81 	bl	8009ca8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80093a6:	2300      	movs	r3, #0
 80093a8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80093aa:	4b04      	ldr	r3, [pc, #16]	; (80093bc <xTaskGetTickCountFromISR+0x20>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80093b0:	683b      	ldr	r3, [r7, #0]
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	3708      	adds	r7, #8
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}
 80093ba:	bf00      	nop
 80093bc:	20000494 	.word	0x20000494

080093c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b086      	sub	sp, #24
 80093c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80093c6:	2300      	movs	r3, #0
 80093c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80093ca:	4b4e      	ldr	r3, [pc, #312]	; (8009504 <xTaskIncrementTick+0x144>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	f040 808e 	bne.w	80094f0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80093d4:	4b4c      	ldr	r3, [pc, #304]	; (8009508 <xTaskIncrementTick+0x148>)
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	3301      	adds	r3, #1
 80093da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80093dc:	4a4a      	ldr	r2, [pc, #296]	; (8009508 <xTaskIncrementTick+0x148>)
 80093de:	693b      	ldr	r3, [r7, #16]
 80093e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d120      	bne.n	800942a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80093e8:	4b48      	ldr	r3, [pc, #288]	; (800950c <xTaskIncrementTick+0x14c>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d00a      	beq.n	8009408 <xTaskIncrementTick+0x48>
	__asm volatile
 80093f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093f6:	f383 8811 	msr	BASEPRI, r3
 80093fa:	f3bf 8f6f 	isb	sy
 80093fe:	f3bf 8f4f 	dsb	sy
 8009402:	603b      	str	r3, [r7, #0]
}
 8009404:	bf00      	nop
 8009406:	e7fe      	b.n	8009406 <xTaskIncrementTick+0x46>
 8009408:	4b40      	ldr	r3, [pc, #256]	; (800950c <xTaskIncrementTick+0x14c>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	60fb      	str	r3, [r7, #12]
 800940e:	4b40      	ldr	r3, [pc, #256]	; (8009510 <xTaskIncrementTick+0x150>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	4a3e      	ldr	r2, [pc, #248]	; (800950c <xTaskIncrementTick+0x14c>)
 8009414:	6013      	str	r3, [r2, #0]
 8009416:	4a3e      	ldr	r2, [pc, #248]	; (8009510 <xTaskIncrementTick+0x150>)
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	6013      	str	r3, [r2, #0]
 800941c:	4b3d      	ldr	r3, [pc, #244]	; (8009514 <xTaskIncrementTick+0x154>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	3301      	adds	r3, #1
 8009422:	4a3c      	ldr	r2, [pc, #240]	; (8009514 <xTaskIncrementTick+0x154>)
 8009424:	6013      	str	r3, [r2, #0]
 8009426:	f000 f9a7 	bl	8009778 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800942a:	4b3b      	ldr	r3, [pc, #236]	; (8009518 <xTaskIncrementTick+0x158>)
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	693a      	ldr	r2, [r7, #16]
 8009430:	429a      	cmp	r2, r3
 8009432:	d348      	bcc.n	80094c6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009434:	4b35      	ldr	r3, [pc, #212]	; (800950c <xTaskIncrementTick+0x14c>)
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d104      	bne.n	8009448 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800943e:	4b36      	ldr	r3, [pc, #216]	; (8009518 <xTaskIncrementTick+0x158>)
 8009440:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009444:	601a      	str	r2, [r3, #0]
					break;
 8009446:	e03e      	b.n	80094c6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009448:	4b30      	ldr	r3, [pc, #192]	; (800950c <xTaskIncrementTick+0x14c>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	68db      	ldr	r3, [r3, #12]
 800944e:	68db      	ldr	r3, [r3, #12]
 8009450:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	685b      	ldr	r3, [r3, #4]
 8009456:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009458:	693a      	ldr	r2, [r7, #16]
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	429a      	cmp	r2, r3
 800945e:	d203      	bcs.n	8009468 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009460:	4a2d      	ldr	r2, [pc, #180]	; (8009518 <xTaskIncrementTick+0x158>)
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009466:	e02e      	b.n	80094c6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	3304      	adds	r3, #4
 800946c:	4618      	mov	r0, r3
 800946e:	f7ff fc5d 	bl	8008d2c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009476:	2b00      	cmp	r3, #0
 8009478:	d004      	beq.n	8009484 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800947a:	68bb      	ldr	r3, [r7, #8]
 800947c:	3318      	adds	r3, #24
 800947e:	4618      	mov	r0, r3
 8009480:	f7ff fc54 	bl	8008d2c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009488:	2201      	movs	r2, #1
 800948a:	409a      	lsls	r2, r3
 800948c:	4b23      	ldr	r3, [pc, #140]	; (800951c <xTaskIncrementTick+0x15c>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	4313      	orrs	r3, r2
 8009492:	4a22      	ldr	r2, [pc, #136]	; (800951c <xTaskIncrementTick+0x15c>)
 8009494:	6013      	str	r3, [r2, #0]
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800949a:	4613      	mov	r3, r2
 800949c:	009b      	lsls	r3, r3, #2
 800949e:	4413      	add	r3, r2
 80094a0:	009b      	lsls	r3, r3, #2
 80094a2:	4a1f      	ldr	r2, [pc, #124]	; (8009520 <xTaskIncrementTick+0x160>)
 80094a4:	441a      	add	r2, r3
 80094a6:	68bb      	ldr	r3, [r7, #8]
 80094a8:	3304      	adds	r3, #4
 80094aa:	4619      	mov	r1, r3
 80094ac:	4610      	mov	r0, r2
 80094ae:	f7ff fbe0 	bl	8008c72 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80094b2:	68bb      	ldr	r3, [r7, #8]
 80094b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094b6:	4b1b      	ldr	r3, [pc, #108]	; (8009524 <xTaskIncrementTick+0x164>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094bc:	429a      	cmp	r2, r3
 80094be:	d3b9      	bcc.n	8009434 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80094c0:	2301      	movs	r3, #1
 80094c2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80094c4:	e7b6      	b.n	8009434 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80094c6:	4b17      	ldr	r3, [pc, #92]	; (8009524 <xTaskIncrementTick+0x164>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094cc:	4914      	ldr	r1, [pc, #80]	; (8009520 <xTaskIncrementTick+0x160>)
 80094ce:	4613      	mov	r3, r2
 80094d0:	009b      	lsls	r3, r3, #2
 80094d2:	4413      	add	r3, r2
 80094d4:	009b      	lsls	r3, r3, #2
 80094d6:	440b      	add	r3, r1
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	2b01      	cmp	r3, #1
 80094dc:	d901      	bls.n	80094e2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80094de:	2301      	movs	r3, #1
 80094e0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80094e2:	4b11      	ldr	r3, [pc, #68]	; (8009528 <xTaskIncrementTick+0x168>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d007      	beq.n	80094fa <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80094ea:	2301      	movs	r3, #1
 80094ec:	617b      	str	r3, [r7, #20]
 80094ee:	e004      	b.n	80094fa <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80094f0:	4b0e      	ldr	r3, [pc, #56]	; (800952c <xTaskIncrementTick+0x16c>)
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	3301      	adds	r3, #1
 80094f6:	4a0d      	ldr	r2, [pc, #52]	; (800952c <xTaskIncrementTick+0x16c>)
 80094f8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80094fa:	697b      	ldr	r3, [r7, #20]
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	3718      	adds	r7, #24
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}
 8009504:	200004b8 	.word	0x200004b8
 8009508:	20000494 	.word	0x20000494
 800950c:	20000448 	.word	0x20000448
 8009510:	2000044c 	.word	0x2000044c
 8009514:	200004a8 	.word	0x200004a8
 8009518:	200004b0 	.word	0x200004b0
 800951c:	20000498 	.word	0x20000498
 8009520:	20000394 	.word	0x20000394
 8009524:	20000390 	.word	0x20000390
 8009528:	200004a4 	.word	0x200004a4
 800952c:	200004a0 	.word	0x200004a0

08009530 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b088      	sub	sp, #32
 8009534:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009536:	4b3c      	ldr	r3, [pc, #240]	; (8009628 <vTaskSwitchContext+0xf8>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d003      	beq.n	8009546 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800953e:	4b3b      	ldr	r3, [pc, #236]	; (800962c <vTaskSwitchContext+0xfc>)
 8009540:	2201      	movs	r2, #1
 8009542:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009544:	e06b      	b.n	800961e <vTaskSwitchContext+0xee>
		xYieldPending = pdFALSE;
 8009546:	4b39      	ldr	r3, [pc, #228]	; (800962c <vTaskSwitchContext+0xfc>)
 8009548:	2200      	movs	r2, #0
 800954a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800954c:	4b38      	ldr	r3, [pc, #224]	; (8009630 <vTaskSwitchContext+0x100>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009552:	61fb      	str	r3, [r7, #28]
 8009554:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8009558:	61bb      	str	r3, [r7, #24]
 800955a:	69fb      	ldr	r3, [r7, #28]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	69ba      	ldr	r2, [r7, #24]
 8009560:	429a      	cmp	r2, r3
 8009562:	d111      	bne.n	8009588 <vTaskSwitchContext+0x58>
 8009564:	69fb      	ldr	r3, [r7, #28]
 8009566:	3304      	adds	r3, #4
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	69ba      	ldr	r2, [r7, #24]
 800956c:	429a      	cmp	r2, r3
 800956e:	d10b      	bne.n	8009588 <vTaskSwitchContext+0x58>
 8009570:	69fb      	ldr	r3, [r7, #28]
 8009572:	3308      	adds	r3, #8
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	69ba      	ldr	r2, [r7, #24]
 8009578:	429a      	cmp	r2, r3
 800957a:	d105      	bne.n	8009588 <vTaskSwitchContext+0x58>
 800957c:	69fb      	ldr	r3, [r7, #28]
 800957e:	330c      	adds	r3, #12
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	69ba      	ldr	r2, [r7, #24]
 8009584:	429a      	cmp	r2, r3
 8009586:	d008      	beq.n	800959a <vTaskSwitchContext+0x6a>
 8009588:	4b29      	ldr	r3, [pc, #164]	; (8009630 <vTaskSwitchContext+0x100>)
 800958a:	681a      	ldr	r2, [r3, #0]
 800958c:	4b28      	ldr	r3, [pc, #160]	; (8009630 <vTaskSwitchContext+0x100>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	3334      	adds	r3, #52	; 0x34
 8009592:	4619      	mov	r1, r3
 8009594:	4610      	mov	r0, r2
 8009596:	f7f7 f83f 	bl	8000618 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800959a:	4b26      	ldr	r3, [pc, #152]	; (8009634 <vTaskSwitchContext+0x104>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	fab3 f383 	clz	r3, r3
 80095a6:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80095a8:	7afb      	ldrb	r3, [r7, #11]
 80095aa:	f1c3 031f 	rsb	r3, r3, #31
 80095ae:	617b      	str	r3, [r7, #20]
 80095b0:	4921      	ldr	r1, [pc, #132]	; (8009638 <vTaskSwitchContext+0x108>)
 80095b2:	697a      	ldr	r2, [r7, #20]
 80095b4:	4613      	mov	r3, r2
 80095b6:	009b      	lsls	r3, r3, #2
 80095b8:	4413      	add	r3, r2
 80095ba:	009b      	lsls	r3, r3, #2
 80095bc:	440b      	add	r3, r1
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d10a      	bne.n	80095da <vTaskSwitchContext+0xaa>
	__asm volatile
 80095c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095c8:	f383 8811 	msr	BASEPRI, r3
 80095cc:	f3bf 8f6f 	isb	sy
 80095d0:	f3bf 8f4f 	dsb	sy
 80095d4:	607b      	str	r3, [r7, #4]
}
 80095d6:	bf00      	nop
 80095d8:	e7fe      	b.n	80095d8 <vTaskSwitchContext+0xa8>
 80095da:	697a      	ldr	r2, [r7, #20]
 80095dc:	4613      	mov	r3, r2
 80095de:	009b      	lsls	r3, r3, #2
 80095e0:	4413      	add	r3, r2
 80095e2:	009b      	lsls	r3, r3, #2
 80095e4:	4a14      	ldr	r2, [pc, #80]	; (8009638 <vTaskSwitchContext+0x108>)
 80095e6:	4413      	add	r3, r2
 80095e8:	613b      	str	r3, [r7, #16]
 80095ea:	693b      	ldr	r3, [r7, #16]
 80095ec:	685b      	ldr	r3, [r3, #4]
 80095ee:	685a      	ldr	r2, [r3, #4]
 80095f0:	693b      	ldr	r3, [r7, #16]
 80095f2:	605a      	str	r2, [r3, #4]
 80095f4:	693b      	ldr	r3, [r7, #16]
 80095f6:	685a      	ldr	r2, [r3, #4]
 80095f8:	693b      	ldr	r3, [r7, #16]
 80095fa:	3308      	adds	r3, #8
 80095fc:	429a      	cmp	r2, r3
 80095fe:	d104      	bne.n	800960a <vTaskSwitchContext+0xda>
 8009600:	693b      	ldr	r3, [r7, #16]
 8009602:	685b      	ldr	r3, [r3, #4]
 8009604:	685a      	ldr	r2, [r3, #4]
 8009606:	693b      	ldr	r3, [r7, #16]
 8009608:	605a      	str	r2, [r3, #4]
 800960a:	693b      	ldr	r3, [r7, #16]
 800960c:	685b      	ldr	r3, [r3, #4]
 800960e:	68db      	ldr	r3, [r3, #12]
 8009610:	4a07      	ldr	r2, [pc, #28]	; (8009630 <vTaskSwitchContext+0x100>)
 8009612:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009614:	4b06      	ldr	r3, [pc, #24]	; (8009630 <vTaskSwitchContext+0x100>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	334c      	adds	r3, #76	; 0x4c
 800961a:	4a08      	ldr	r2, [pc, #32]	; (800963c <vTaskSwitchContext+0x10c>)
 800961c:	6013      	str	r3, [r2, #0]
}
 800961e:	bf00      	nop
 8009620:	3720      	adds	r7, #32
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}
 8009626:	bf00      	nop
 8009628:	200004b8 	.word	0x200004b8
 800962c:	200004a4 	.word	0x200004a4
 8009630:	20000390 	.word	0x20000390
 8009634:	20000498 	.word	0x20000498
 8009638:	20000394 	.word	0x20000394
 800963c:	2000017c 	.word	0x2000017c

08009640 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b082      	sub	sp, #8
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009648:	f000 f852 	bl	80096f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800964c:	4b06      	ldr	r3, [pc, #24]	; (8009668 <prvIdleTask+0x28>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	2b01      	cmp	r3, #1
 8009652:	d9f9      	bls.n	8009648 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009654:	4b05      	ldr	r3, [pc, #20]	; (800966c <prvIdleTask+0x2c>)
 8009656:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800965a:	601a      	str	r2, [r3, #0]
 800965c:	f3bf 8f4f 	dsb	sy
 8009660:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009664:	e7f0      	b.n	8009648 <prvIdleTask+0x8>
 8009666:	bf00      	nop
 8009668:	20000394 	.word	0x20000394
 800966c:	e000ed04 	.word	0xe000ed04

08009670 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b082      	sub	sp, #8
 8009674:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009676:	2300      	movs	r3, #0
 8009678:	607b      	str	r3, [r7, #4]
 800967a:	e00c      	b.n	8009696 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800967c:	687a      	ldr	r2, [r7, #4]
 800967e:	4613      	mov	r3, r2
 8009680:	009b      	lsls	r3, r3, #2
 8009682:	4413      	add	r3, r2
 8009684:	009b      	lsls	r3, r3, #2
 8009686:	4a12      	ldr	r2, [pc, #72]	; (80096d0 <prvInitialiseTaskLists+0x60>)
 8009688:	4413      	add	r3, r2
 800968a:	4618      	mov	r0, r3
 800968c:	f7ff fac4 	bl	8008c18 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	3301      	adds	r3, #1
 8009694:	607b      	str	r3, [r7, #4]
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2b06      	cmp	r3, #6
 800969a:	d9ef      	bls.n	800967c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800969c:	480d      	ldr	r0, [pc, #52]	; (80096d4 <prvInitialiseTaskLists+0x64>)
 800969e:	f7ff fabb 	bl	8008c18 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80096a2:	480d      	ldr	r0, [pc, #52]	; (80096d8 <prvInitialiseTaskLists+0x68>)
 80096a4:	f7ff fab8 	bl	8008c18 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80096a8:	480c      	ldr	r0, [pc, #48]	; (80096dc <prvInitialiseTaskLists+0x6c>)
 80096aa:	f7ff fab5 	bl	8008c18 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80096ae:	480c      	ldr	r0, [pc, #48]	; (80096e0 <prvInitialiseTaskLists+0x70>)
 80096b0:	f7ff fab2 	bl	8008c18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80096b4:	480b      	ldr	r0, [pc, #44]	; (80096e4 <prvInitialiseTaskLists+0x74>)
 80096b6:	f7ff faaf 	bl	8008c18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80096ba:	4b0b      	ldr	r3, [pc, #44]	; (80096e8 <prvInitialiseTaskLists+0x78>)
 80096bc:	4a05      	ldr	r2, [pc, #20]	; (80096d4 <prvInitialiseTaskLists+0x64>)
 80096be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80096c0:	4b0a      	ldr	r3, [pc, #40]	; (80096ec <prvInitialiseTaskLists+0x7c>)
 80096c2:	4a05      	ldr	r2, [pc, #20]	; (80096d8 <prvInitialiseTaskLists+0x68>)
 80096c4:	601a      	str	r2, [r3, #0]
}
 80096c6:	bf00      	nop
 80096c8:	3708      	adds	r7, #8
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}
 80096ce:	bf00      	nop
 80096d0:	20000394 	.word	0x20000394
 80096d4:	20000420 	.word	0x20000420
 80096d8:	20000434 	.word	0x20000434
 80096dc:	20000450 	.word	0x20000450
 80096e0:	20000464 	.word	0x20000464
 80096e4:	2000047c 	.word	0x2000047c
 80096e8:	20000448 	.word	0x20000448
 80096ec:	2000044c 	.word	0x2000044c

080096f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b082      	sub	sp, #8
 80096f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80096f6:	e019      	b.n	800972c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80096f8:	f000 f9f4 	bl	8009ae4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096fc:	4b10      	ldr	r3, [pc, #64]	; (8009740 <prvCheckTasksWaitingTermination+0x50>)
 80096fe:	68db      	ldr	r3, [r3, #12]
 8009700:	68db      	ldr	r3, [r3, #12]
 8009702:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	3304      	adds	r3, #4
 8009708:	4618      	mov	r0, r3
 800970a:	f7ff fb0f 	bl	8008d2c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800970e:	4b0d      	ldr	r3, [pc, #52]	; (8009744 <prvCheckTasksWaitingTermination+0x54>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	3b01      	subs	r3, #1
 8009714:	4a0b      	ldr	r2, [pc, #44]	; (8009744 <prvCheckTasksWaitingTermination+0x54>)
 8009716:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009718:	4b0b      	ldr	r3, [pc, #44]	; (8009748 <prvCheckTasksWaitingTermination+0x58>)
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	3b01      	subs	r3, #1
 800971e:	4a0a      	ldr	r2, [pc, #40]	; (8009748 <prvCheckTasksWaitingTermination+0x58>)
 8009720:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009722:	f000 fa0f 	bl	8009b44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f000 f810 	bl	800974c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800972c:	4b06      	ldr	r3, [pc, #24]	; (8009748 <prvCheckTasksWaitingTermination+0x58>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d1e1      	bne.n	80096f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009734:	bf00      	nop
 8009736:	bf00      	nop
 8009738:	3708      	adds	r7, #8
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}
 800973e:	bf00      	nop
 8009740:	20000464 	.word	0x20000464
 8009744:	20000490 	.word	0x20000490
 8009748:	20000478 	.word	0x20000478

0800974c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800974c:	b580      	push	{r7, lr}
 800974e:	b082      	sub	sp, #8
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	334c      	adds	r3, #76	; 0x4c
 8009758:	4618      	mov	r0, r3
 800975a:	f003 f965 	bl	800ca28 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009762:	4618      	mov	r0, r3
 8009764:	f000 fbb0 	bl	8009ec8 <vPortFree>
			vPortFree( pxTCB );
 8009768:	6878      	ldr	r0, [r7, #4]
 800976a:	f000 fbad 	bl	8009ec8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800976e:	bf00      	nop
 8009770:	3708      	adds	r7, #8
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}
	...

08009778 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009778:	b480      	push	{r7}
 800977a:	b083      	sub	sp, #12
 800977c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800977e:	4b0c      	ldr	r3, [pc, #48]	; (80097b0 <prvResetNextTaskUnblockTime+0x38>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d104      	bne.n	8009792 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009788:	4b0a      	ldr	r3, [pc, #40]	; (80097b4 <prvResetNextTaskUnblockTime+0x3c>)
 800978a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800978e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009790:	e008      	b.n	80097a4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009792:	4b07      	ldr	r3, [pc, #28]	; (80097b0 <prvResetNextTaskUnblockTime+0x38>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	68db      	ldr	r3, [r3, #12]
 8009798:	68db      	ldr	r3, [r3, #12]
 800979a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	685b      	ldr	r3, [r3, #4]
 80097a0:	4a04      	ldr	r2, [pc, #16]	; (80097b4 <prvResetNextTaskUnblockTime+0x3c>)
 80097a2:	6013      	str	r3, [r2, #0]
}
 80097a4:	bf00      	nop
 80097a6:	370c      	adds	r7, #12
 80097a8:	46bd      	mov	sp, r7
 80097aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ae:	4770      	bx	lr
 80097b0:	20000448 	.word	0x20000448
 80097b4:	200004b0 	.word	0x200004b0

080097b8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b084      	sub	sp, #16
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
 80097c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80097c2:	4b29      	ldr	r3, [pc, #164]	; (8009868 <prvAddCurrentTaskToDelayedList+0xb0>)
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80097c8:	4b28      	ldr	r3, [pc, #160]	; (800986c <prvAddCurrentTaskToDelayedList+0xb4>)
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	3304      	adds	r3, #4
 80097ce:	4618      	mov	r0, r3
 80097d0:	f7ff faac 	bl	8008d2c <uxListRemove>
 80097d4:	4603      	mov	r3, r0
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d10b      	bne.n	80097f2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80097da:	4b24      	ldr	r3, [pc, #144]	; (800986c <prvAddCurrentTaskToDelayedList+0xb4>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097e0:	2201      	movs	r2, #1
 80097e2:	fa02 f303 	lsl.w	r3, r2, r3
 80097e6:	43da      	mvns	r2, r3
 80097e8:	4b21      	ldr	r3, [pc, #132]	; (8009870 <prvAddCurrentTaskToDelayedList+0xb8>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	4013      	ands	r3, r2
 80097ee:	4a20      	ldr	r2, [pc, #128]	; (8009870 <prvAddCurrentTaskToDelayedList+0xb8>)
 80097f0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80097f8:	d10a      	bne.n	8009810 <prvAddCurrentTaskToDelayedList+0x58>
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d007      	beq.n	8009810 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009800:	4b1a      	ldr	r3, [pc, #104]	; (800986c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	3304      	adds	r3, #4
 8009806:	4619      	mov	r1, r3
 8009808:	481a      	ldr	r0, [pc, #104]	; (8009874 <prvAddCurrentTaskToDelayedList+0xbc>)
 800980a:	f7ff fa32 	bl	8008c72 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800980e:	e026      	b.n	800985e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009810:	68fa      	ldr	r2, [r7, #12]
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	4413      	add	r3, r2
 8009816:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009818:	4b14      	ldr	r3, [pc, #80]	; (800986c <prvAddCurrentTaskToDelayedList+0xb4>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	68ba      	ldr	r2, [r7, #8]
 800981e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009820:	68ba      	ldr	r2, [r7, #8]
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	429a      	cmp	r2, r3
 8009826:	d209      	bcs.n	800983c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009828:	4b13      	ldr	r3, [pc, #76]	; (8009878 <prvAddCurrentTaskToDelayedList+0xc0>)
 800982a:	681a      	ldr	r2, [r3, #0]
 800982c:	4b0f      	ldr	r3, [pc, #60]	; (800986c <prvAddCurrentTaskToDelayedList+0xb4>)
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	3304      	adds	r3, #4
 8009832:	4619      	mov	r1, r3
 8009834:	4610      	mov	r0, r2
 8009836:	f7ff fa40 	bl	8008cba <vListInsert>
}
 800983a:	e010      	b.n	800985e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800983c:	4b0f      	ldr	r3, [pc, #60]	; (800987c <prvAddCurrentTaskToDelayedList+0xc4>)
 800983e:	681a      	ldr	r2, [r3, #0]
 8009840:	4b0a      	ldr	r3, [pc, #40]	; (800986c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	3304      	adds	r3, #4
 8009846:	4619      	mov	r1, r3
 8009848:	4610      	mov	r0, r2
 800984a:	f7ff fa36 	bl	8008cba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800984e:	4b0c      	ldr	r3, [pc, #48]	; (8009880 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	68ba      	ldr	r2, [r7, #8]
 8009854:	429a      	cmp	r2, r3
 8009856:	d202      	bcs.n	800985e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009858:	4a09      	ldr	r2, [pc, #36]	; (8009880 <prvAddCurrentTaskToDelayedList+0xc8>)
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	6013      	str	r3, [r2, #0]
}
 800985e:	bf00      	nop
 8009860:	3710      	adds	r7, #16
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}
 8009866:	bf00      	nop
 8009868:	20000494 	.word	0x20000494
 800986c:	20000390 	.word	0x20000390
 8009870:	20000498 	.word	0x20000498
 8009874:	2000047c 	.word	0x2000047c
 8009878:	2000044c 	.word	0x2000044c
 800987c:	20000448 	.word	0x20000448
 8009880:	200004b0 	.word	0x200004b0

08009884 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009884:	b480      	push	{r7}
 8009886:	b085      	sub	sp, #20
 8009888:	af00      	add	r7, sp, #0
 800988a:	60f8      	str	r0, [r7, #12]
 800988c:	60b9      	str	r1, [r7, #8]
 800988e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	3b04      	subs	r3, #4
 8009894:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800989c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	3b04      	subs	r3, #4
 80098a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	f023 0201 	bic.w	r2, r3, #1
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	3b04      	subs	r3, #4
 80098b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80098b4:	4a0c      	ldr	r2, [pc, #48]	; (80098e8 <pxPortInitialiseStack+0x64>)
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	3b14      	subs	r3, #20
 80098be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80098c0:	687a      	ldr	r2, [r7, #4]
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	3b04      	subs	r3, #4
 80098ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	f06f 0202 	mvn.w	r2, #2
 80098d2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	3b20      	subs	r3, #32
 80098d8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80098da:	68fb      	ldr	r3, [r7, #12]
}
 80098dc:	4618      	mov	r0, r3
 80098de:	3714      	adds	r7, #20
 80098e0:	46bd      	mov	sp, r7
 80098e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e6:	4770      	bx	lr
 80098e8:	080098ed 	.word	0x080098ed

080098ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80098ec:	b480      	push	{r7}
 80098ee:	b085      	sub	sp, #20
 80098f0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80098f2:	2300      	movs	r3, #0
 80098f4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80098f6:	4b12      	ldr	r3, [pc, #72]	; (8009940 <prvTaskExitError+0x54>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80098fe:	d00a      	beq.n	8009916 <prvTaskExitError+0x2a>
	__asm volatile
 8009900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009904:	f383 8811 	msr	BASEPRI, r3
 8009908:	f3bf 8f6f 	isb	sy
 800990c:	f3bf 8f4f 	dsb	sy
 8009910:	60fb      	str	r3, [r7, #12]
}
 8009912:	bf00      	nop
 8009914:	e7fe      	b.n	8009914 <prvTaskExitError+0x28>
	__asm volatile
 8009916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800991a:	f383 8811 	msr	BASEPRI, r3
 800991e:	f3bf 8f6f 	isb	sy
 8009922:	f3bf 8f4f 	dsb	sy
 8009926:	60bb      	str	r3, [r7, #8]
}
 8009928:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800992a:	bf00      	nop
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d0fc      	beq.n	800992c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009932:	bf00      	nop
 8009934:	bf00      	nop
 8009936:	3714      	adds	r7, #20
 8009938:	46bd      	mov	sp, r7
 800993a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993e:	4770      	bx	lr
 8009940:	20000098 	.word	0x20000098
	...

08009950 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009950:	4b07      	ldr	r3, [pc, #28]	; (8009970 <pxCurrentTCBConst2>)
 8009952:	6819      	ldr	r1, [r3, #0]
 8009954:	6808      	ldr	r0, [r1, #0]
 8009956:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800995a:	f380 8809 	msr	PSP, r0
 800995e:	f3bf 8f6f 	isb	sy
 8009962:	f04f 0000 	mov.w	r0, #0
 8009966:	f380 8811 	msr	BASEPRI, r0
 800996a:	4770      	bx	lr
 800996c:	f3af 8000 	nop.w

08009970 <pxCurrentTCBConst2>:
 8009970:	20000390 	.word	0x20000390
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009974:	bf00      	nop
 8009976:	bf00      	nop

08009978 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009978:	4808      	ldr	r0, [pc, #32]	; (800999c <prvPortStartFirstTask+0x24>)
 800997a:	6800      	ldr	r0, [r0, #0]
 800997c:	6800      	ldr	r0, [r0, #0]
 800997e:	f380 8808 	msr	MSP, r0
 8009982:	f04f 0000 	mov.w	r0, #0
 8009986:	f380 8814 	msr	CONTROL, r0
 800998a:	b662      	cpsie	i
 800998c:	b661      	cpsie	f
 800998e:	f3bf 8f4f 	dsb	sy
 8009992:	f3bf 8f6f 	isb	sy
 8009996:	df00      	svc	0
 8009998:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800999a:	bf00      	nop
 800999c:	e000ed08 	.word	0xe000ed08

080099a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b086      	sub	sp, #24
 80099a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80099a6:	4b46      	ldr	r3, [pc, #280]	; (8009ac0 <xPortStartScheduler+0x120>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	4a46      	ldr	r2, [pc, #280]	; (8009ac4 <xPortStartScheduler+0x124>)
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d10a      	bne.n	80099c6 <xPortStartScheduler+0x26>
	__asm volatile
 80099b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099b4:	f383 8811 	msr	BASEPRI, r3
 80099b8:	f3bf 8f6f 	isb	sy
 80099bc:	f3bf 8f4f 	dsb	sy
 80099c0:	613b      	str	r3, [r7, #16]
}
 80099c2:	bf00      	nop
 80099c4:	e7fe      	b.n	80099c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80099c6:	4b3e      	ldr	r3, [pc, #248]	; (8009ac0 <xPortStartScheduler+0x120>)
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	4a3f      	ldr	r2, [pc, #252]	; (8009ac8 <xPortStartScheduler+0x128>)
 80099cc:	4293      	cmp	r3, r2
 80099ce:	d10a      	bne.n	80099e6 <xPortStartScheduler+0x46>
	__asm volatile
 80099d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099d4:	f383 8811 	msr	BASEPRI, r3
 80099d8:	f3bf 8f6f 	isb	sy
 80099dc:	f3bf 8f4f 	dsb	sy
 80099e0:	60fb      	str	r3, [r7, #12]
}
 80099e2:	bf00      	nop
 80099e4:	e7fe      	b.n	80099e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80099e6:	4b39      	ldr	r3, [pc, #228]	; (8009acc <xPortStartScheduler+0x12c>)
 80099e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	781b      	ldrb	r3, [r3, #0]
 80099ee:	b2db      	uxtb	r3, r3
 80099f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80099f2:	697b      	ldr	r3, [r7, #20]
 80099f4:	22ff      	movs	r2, #255	; 0xff
 80099f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80099f8:	697b      	ldr	r3, [r7, #20]
 80099fa:	781b      	ldrb	r3, [r3, #0]
 80099fc:	b2db      	uxtb	r3, r3
 80099fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009a00:	78fb      	ldrb	r3, [r7, #3]
 8009a02:	b2db      	uxtb	r3, r3
 8009a04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009a08:	b2da      	uxtb	r2, r3
 8009a0a:	4b31      	ldr	r3, [pc, #196]	; (8009ad0 <xPortStartScheduler+0x130>)
 8009a0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009a0e:	4b31      	ldr	r3, [pc, #196]	; (8009ad4 <xPortStartScheduler+0x134>)
 8009a10:	2207      	movs	r2, #7
 8009a12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009a14:	e009      	b.n	8009a2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009a16:	4b2f      	ldr	r3, [pc, #188]	; (8009ad4 <xPortStartScheduler+0x134>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	3b01      	subs	r3, #1
 8009a1c:	4a2d      	ldr	r2, [pc, #180]	; (8009ad4 <xPortStartScheduler+0x134>)
 8009a1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009a20:	78fb      	ldrb	r3, [r7, #3]
 8009a22:	b2db      	uxtb	r3, r3
 8009a24:	005b      	lsls	r3, r3, #1
 8009a26:	b2db      	uxtb	r3, r3
 8009a28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009a2a:	78fb      	ldrb	r3, [r7, #3]
 8009a2c:	b2db      	uxtb	r3, r3
 8009a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a32:	2b80      	cmp	r3, #128	; 0x80
 8009a34:	d0ef      	beq.n	8009a16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009a36:	4b27      	ldr	r3, [pc, #156]	; (8009ad4 <xPortStartScheduler+0x134>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	f1c3 0307 	rsb	r3, r3, #7
 8009a3e:	2b04      	cmp	r3, #4
 8009a40:	d00a      	beq.n	8009a58 <xPortStartScheduler+0xb8>
	__asm volatile
 8009a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a46:	f383 8811 	msr	BASEPRI, r3
 8009a4a:	f3bf 8f6f 	isb	sy
 8009a4e:	f3bf 8f4f 	dsb	sy
 8009a52:	60bb      	str	r3, [r7, #8]
}
 8009a54:	bf00      	nop
 8009a56:	e7fe      	b.n	8009a56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009a58:	4b1e      	ldr	r3, [pc, #120]	; (8009ad4 <xPortStartScheduler+0x134>)
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	021b      	lsls	r3, r3, #8
 8009a5e:	4a1d      	ldr	r2, [pc, #116]	; (8009ad4 <xPortStartScheduler+0x134>)
 8009a60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009a62:	4b1c      	ldr	r3, [pc, #112]	; (8009ad4 <xPortStartScheduler+0x134>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009a6a:	4a1a      	ldr	r2, [pc, #104]	; (8009ad4 <xPortStartScheduler+0x134>)
 8009a6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	b2da      	uxtb	r2, r3
 8009a72:	697b      	ldr	r3, [r7, #20]
 8009a74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009a76:	4b18      	ldr	r3, [pc, #96]	; (8009ad8 <xPortStartScheduler+0x138>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	4a17      	ldr	r2, [pc, #92]	; (8009ad8 <xPortStartScheduler+0x138>)
 8009a7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009a80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009a82:	4b15      	ldr	r3, [pc, #84]	; (8009ad8 <xPortStartScheduler+0x138>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	4a14      	ldr	r2, [pc, #80]	; (8009ad8 <xPortStartScheduler+0x138>)
 8009a88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009a8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009a8e:	f000 f8dd 	bl	8009c4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009a92:	4b12      	ldr	r3, [pc, #72]	; (8009adc <xPortStartScheduler+0x13c>)
 8009a94:	2200      	movs	r2, #0
 8009a96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009a98:	f000 f8fc 	bl	8009c94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009a9c:	4b10      	ldr	r3, [pc, #64]	; (8009ae0 <xPortStartScheduler+0x140>)
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	4a0f      	ldr	r2, [pc, #60]	; (8009ae0 <xPortStartScheduler+0x140>)
 8009aa2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009aa6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009aa8:	f7ff ff66 	bl	8009978 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009aac:	f7ff fd40 	bl	8009530 <vTaskSwitchContext>
	prvTaskExitError();
 8009ab0:	f7ff ff1c 	bl	80098ec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009ab4:	2300      	movs	r3, #0
}
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	3718      	adds	r7, #24
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}
 8009abe:	bf00      	nop
 8009ac0:	e000ed00 	.word	0xe000ed00
 8009ac4:	410fc271 	.word	0x410fc271
 8009ac8:	410fc270 	.word	0x410fc270
 8009acc:	e000e400 	.word	0xe000e400
 8009ad0:	200004bc 	.word	0x200004bc
 8009ad4:	200004c0 	.word	0x200004c0
 8009ad8:	e000ed20 	.word	0xe000ed20
 8009adc:	20000098 	.word	0x20000098
 8009ae0:	e000ef34 	.word	0xe000ef34

08009ae4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009ae4:	b480      	push	{r7}
 8009ae6:	b083      	sub	sp, #12
 8009ae8:	af00      	add	r7, sp, #0
	__asm volatile
 8009aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aee:	f383 8811 	msr	BASEPRI, r3
 8009af2:	f3bf 8f6f 	isb	sy
 8009af6:	f3bf 8f4f 	dsb	sy
 8009afa:	607b      	str	r3, [r7, #4]
}
 8009afc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009afe:	4b0f      	ldr	r3, [pc, #60]	; (8009b3c <vPortEnterCritical+0x58>)
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	3301      	adds	r3, #1
 8009b04:	4a0d      	ldr	r2, [pc, #52]	; (8009b3c <vPortEnterCritical+0x58>)
 8009b06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009b08:	4b0c      	ldr	r3, [pc, #48]	; (8009b3c <vPortEnterCritical+0x58>)
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	2b01      	cmp	r3, #1
 8009b0e:	d10f      	bne.n	8009b30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009b10:	4b0b      	ldr	r3, [pc, #44]	; (8009b40 <vPortEnterCritical+0x5c>)
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	b2db      	uxtb	r3, r3
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d00a      	beq.n	8009b30 <vPortEnterCritical+0x4c>
	__asm volatile
 8009b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b1e:	f383 8811 	msr	BASEPRI, r3
 8009b22:	f3bf 8f6f 	isb	sy
 8009b26:	f3bf 8f4f 	dsb	sy
 8009b2a:	603b      	str	r3, [r7, #0]
}
 8009b2c:	bf00      	nop
 8009b2e:	e7fe      	b.n	8009b2e <vPortEnterCritical+0x4a>
	}
}
 8009b30:	bf00      	nop
 8009b32:	370c      	adds	r7, #12
 8009b34:	46bd      	mov	sp, r7
 8009b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3a:	4770      	bx	lr
 8009b3c:	20000098 	.word	0x20000098
 8009b40:	e000ed04 	.word	0xe000ed04

08009b44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009b44:	b480      	push	{r7}
 8009b46:	b083      	sub	sp, #12
 8009b48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009b4a:	4b12      	ldr	r3, [pc, #72]	; (8009b94 <vPortExitCritical+0x50>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d10a      	bne.n	8009b68 <vPortExitCritical+0x24>
	__asm volatile
 8009b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b56:	f383 8811 	msr	BASEPRI, r3
 8009b5a:	f3bf 8f6f 	isb	sy
 8009b5e:	f3bf 8f4f 	dsb	sy
 8009b62:	607b      	str	r3, [r7, #4]
}
 8009b64:	bf00      	nop
 8009b66:	e7fe      	b.n	8009b66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009b68:	4b0a      	ldr	r3, [pc, #40]	; (8009b94 <vPortExitCritical+0x50>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	3b01      	subs	r3, #1
 8009b6e:	4a09      	ldr	r2, [pc, #36]	; (8009b94 <vPortExitCritical+0x50>)
 8009b70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009b72:	4b08      	ldr	r3, [pc, #32]	; (8009b94 <vPortExitCritical+0x50>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d105      	bne.n	8009b86 <vPortExitCritical+0x42>
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009b84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009b86:	bf00      	nop
 8009b88:	370c      	adds	r7, #12
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b90:	4770      	bx	lr
 8009b92:	bf00      	nop
 8009b94:	20000098 	.word	0x20000098
	...

08009ba0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009ba0:	f3ef 8009 	mrs	r0, PSP
 8009ba4:	f3bf 8f6f 	isb	sy
 8009ba8:	4b15      	ldr	r3, [pc, #84]	; (8009c00 <pxCurrentTCBConst>)
 8009baa:	681a      	ldr	r2, [r3, #0]
 8009bac:	f01e 0f10 	tst.w	lr, #16
 8009bb0:	bf08      	it	eq
 8009bb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009bb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bba:	6010      	str	r0, [r2, #0]
 8009bbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009bc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009bc4:	f380 8811 	msr	BASEPRI, r0
 8009bc8:	f3bf 8f4f 	dsb	sy
 8009bcc:	f3bf 8f6f 	isb	sy
 8009bd0:	f7ff fcae 	bl	8009530 <vTaskSwitchContext>
 8009bd4:	f04f 0000 	mov.w	r0, #0
 8009bd8:	f380 8811 	msr	BASEPRI, r0
 8009bdc:	bc09      	pop	{r0, r3}
 8009bde:	6819      	ldr	r1, [r3, #0]
 8009be0:	6808      	ldr	r0, [r1, #0]
 8009be2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009be6:	f01e 0f10 	tst.w	lr, #16
 8009bea:	bf08      	it	eq
 8009bec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009bf0:	f380 8809 	msr	PSP, r0
 8009bf4:	f3bf 8f6f 	isb	sy
 8009bf8:	4770      	bx	lr
 8009bfa:	bf00      	nop
 8009bfc:	f3af 8000 	nop.w

08009c00 <pxCurrentTCBConst>:
 8009c00:	20000390 	.word	0x20000390
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009c04:	bf00      	nop
 8009c06:	bf00      	nop

08009c08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b082      	sub	sp, #8
 8009c0c:	af00      	add	r7, sp, #0
	__asm volatile
 8009c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c12:	f383 8811 	msr	BASEPRI, r3
 8009c16:	f3bf 8f6f 	isb	sy
 8009c1a:	f3bf 8f4f 	dsb	sy
 8009c1e:	607b      	str	r3, [r7, #4]
}
 8009c20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009c22:	f7ff fbcd 	bl	80093c0 <xTaskIncrementTick>
 8009c26:	4603      	mov	r3, r0
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d003      	beq.n	8009c34 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009c2c:	4b06      	ldr	r3, [pc, #24]	; (8009c48 <SysTick_Handler+0x40>)
 8009c2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c32:	601a      	str	r2, [r3, #0]
 8009c34:	2300      	movs	r3, #0
 8009c36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	f383 8811 	msr	BASEPRI, r3
}
 8009c3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009c40:	bf00      	nop
 8009c42:	3708      	adds	r7, #8
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bd80      	pop	{r7, pc}
 8009c48:	e000ed04 	.word	0xe000ed04

08009c4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009c4c:	b480      	push	{r7}
 8009c4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009c50:	4b0b      	ldr	r3, [pc, #44]	; (8009c80 <vPortSetupTimerInterrupt+0x34>)
 8009c52:	2200      	movs	r2, #0
 8009c54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009c56:	4b0b      	ldr	r3, [pc, #44]	; (8009c84 <vPortSetupTimerInterrupt+0x38>)
 8009c58:	2200      	movs	r2, #0
 8009c5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009c5c:	4b0a      	ldr	r3, [pc, #40]	; (8009c88 <vPortSetupTimerInterrupt+0x3c>)
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	4a0a      	ldr	r2, [pc, #40]	; (8009c8c <vPortSetupTimerInterrupt+0x40>)
 8009c62:	fba2 2303 	umull	r2, r3, r2, r3
 8009c66:	099b      	lsrs	r3, r3, #6
 8009c68:	4a09      	ldr	r2, [pc, #36]	; (8009c90 <vPortSetupTimerInterrupt+0x44>)
 8009c6a:	3b01      	subs	r3, #1
 8009c6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009c6e:	4b04      	ldr	r3, [pc, #16]	; (8009c80 <vPortSetupTimerInterrupt+0x34>)
 8009c70:	2207      	movs	r2, #7
 8009c72:	601a      	str	r2, [r3, #0]
}
 8009c74:	bf00      	nop
 8009c76:	46bd      	mov	sp, r7
 8009c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7c:	4770      	bx	lr
 8009c7e:	bf00      	nop
 8009c80:	e000e010 	.word	0xe000e010
 8009c84:	e000e018 	.word	0xe000e018
 8009c88:	20000000 	.word	0x20000000
 8009c8c:	10624dd3 	.word	0x10624dd3
 8009c90:	e000e014 	.word	0xe000e014

08009c94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009c94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009ca4 <vPortEnableVFP+0x10>
 8009c98:	6801      	ldr	r1, [r0, #0]
 8009c9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009c9e:	6001      	str	r1, [r0, #0]
 8009ca0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009ca2:	bf00      	nop
 8009ca4:	e000ed88 	.word	0xe000ed88

08009ca8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009ca8:	b480      	push	{r7}
 8009caa:	b085      	sub	sp, #20
 8009cac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009cae:	f3ef 8305 	mrs	r3, IPSR
 8009cb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	2b0f      	cmp	r3, #15
 8009cb8:	d914      	bls.n	8009ce4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009cba:	4a17      	ldr	r2, [pc, #92]	; (8009d18 <vPortValidateInterruptPriority+0x70>)
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	4413      	add	r3, r2
 8009cc0:	781b      	ldrb	r3, [r3, #0]
 8009cc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009cc4:	4b15      	ldr	r3, [pc, #84]	; (8009d1c <vPortValidateInterruptPriority+0x74>)
 8009cc6:	781b      	ldrb	r3, [r3, #0]
 8009cc8:	7afa      	ldrb	r2, [r7, #11]
 8009cca:	429a      	cmp	r2, r3
 8009ccc:	d20a      	bcs.n	8009ce4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cd2:	f383 8811 	msr	BASEPRI, r3
 8009cd6:	f3bf 8f6f 	isb	sy
 8009cda:	f3bf 8f4f 	dsb	sy
 8009cde:	607b      	str	r3, [r7, #4]
}
 8009ce0:	bf00      	nop
 8009ce2:	e7fe      	b.n	8009ce2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009ce4:	4b0e      	ldr	r3, [pc, #56]	; (8009d20 <vPortValidateInterruptPriority+0x78>)
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009cec:	4b0d      	ldr	r3, [pc, #52]	; (8009d24 <vPortValidateInterruptPriority+0x7c>)
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	429a      	cmp	r2, r3
 8009cf2:	d90a      	bls.n	8009d0a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cf8:	f383 8811 	msr	BASEPRI, r3
 8009cfc:	f3bf 8f6f 	isb	sy
 8009d00:	f3bf 8f4f 	dsb	sy
 8009d04:	603b      	str	r3, [r7, #0]
}
 8009d06:	bf00      	nop
 8009d08:	e7fe      	b.n	8009d08 <vPortValidateInterruptPriority+0x60>
	}
 8009d0a:	bf00      	nop
 8009d0c:	3714      	adds	r7, #20
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d14:	4770      	bx	lr
 8009d16:	bf00      	nop
 8009d18:	e000e3f0 	.word	0xe000e3f0
 8009d1c:	200004bc 	.word	0x200004bc
 8009d20:	e000ed0c 	.word	0xe000ed0c
 8009d24:	200004c0 	.word	0x200004c0

08009d28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b08a      	sub	sp, #40	; 0x28
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009d30:	2300      	movs	r3, #0
 8009d32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009d34:	f7ff fa78 	bl	8009228 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009d38:	4b5d      	ldr	r3, [pc, #372]	; (8009eb0 <pvPortMalloc+0x188>)
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d101      	bne.n	8009d44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009d40:	f000 f924 	bl	8009f8c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009d44:	4b5b      	ldr	r3, [pc, #364]	; (8009eb4 <pvPortMalloc+0x18c>)
 8009d46:	681a      	ldr	r2, [r3, #0]
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	4013      	ands	r3, r2
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	f040 8093 	bne.w	8009e78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d01d      	beq.n	8009d94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009d58:	2208      	movs	r2, #8
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	4413      	add	r3, r2
 8009d5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f003 0307 	and.w	r3, r3, #7
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d014      	beq.n	8009d94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	f023 0307 	bic.w	r3, r3, #7
 8009d70:	3308      	adds	r3, #8
 8009d72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f003 0307 	and.w	r3, r3, #7
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d00a      	beq.n	8009d94 <pvPortMalloc+0x6c>
	__asm volatile
 8009d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d82:	f383 8811 	msr	BASEPRI, r3
 8009d86:	f3bf 8f6f 	isb	sy
 8009d8a:	f3bf 8f4f 	dsb	sy
 8009d8e:	617b      	str	r3, [r7, #20]
}
 8009d90:	bf00      	nop
 8009d92:	e7fe      	b.n	8009d92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d06e      	beq.n	8009e78 <pvPortMalloc+0x150>
 8009d9a:	4b47      	ldr	r3, [pc, #284]	; (8009eb8 <pvPortMalloc+0x190>)
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	687a      	ldr	r2, [r7, #4]
 8009da0:	429a      	cmp	r2, r3
 8009da2:	d869      	bhi.n	8009e78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009da4:	4b45      	ldr	r3, [pc, #276]	; (8009ebc <pvPortMalloc+0x194>)
 8009da6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009da8:	4b44      	ldr	r3, [pc, #272]	; (8009ebc <pvPortMalloc+0x194>)
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009dae:	e004      	b.n	8009dba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dbc:	685b      	ldr	r3, [r3, #4]
 8009dbe:	687a      	ldr	r2, [r7, #4]
 8009dc0:	429a      	cmp	r2, r3
 8009dc2:	d903      	bls.n	8009dcc <pvPortMalloc+0xa4>
 8009dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d1f1      	bne.n	8009db0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009dcc:	4b38      	ldr	r3, [pc, #224]	; (8009eb0 <pvPortMalloc+0x188>)
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009dd2:	429a      	cmp	r2, r3
 8009dd4:	d050      	beq.n	8009e78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009dd6:	6a3b      	ldr	r3, [r7, #32]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	2208      	movs	r2, #8
 8009ddc:	4413      	add	r3, r2
 8009dde:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009de2:	681a      	ldr	r2, [r3, #0]
 8009de4:	6a3b      	ldr	r3, [r7, #32]
 8009de6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dea:	685a      	ldr	r2, [r3, #4]
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	1ad2      	subs	r2, r2, r3
 8009df0:	2308      	movs	r3, #8
 8009df2:	005b      	lsls	r3, r3, #1
 8009df4:	429a      	cmp	r2, r3
 8009df6:	d91f      	bls.n	8009e38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009df8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	4413      	add	r3, r2
 8009dfe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e00:	69bb      	ldr	r3, [r7, #24]
 8009e02:	f003 0307 	and.w	r3, r3, #7
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d00a      	beq.n	8009e20 <pvPortMalloc+0xf8>
	__asm volatile
 8009e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e0e:	f383 8811 	msr	BASEPRI, r3
 8009e12:	f3bf 8f6f 	isb	sy
 8009e16:	f3bf 8f4f 	dsb	sy
 8009e1a:	613b      	str	r3, [r7, #16]
}
 8009e1c:	bf00      	nop
 8009e1e:	e7fe      	b.n	8009e1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e22:	685a      	ldr	r2, [r3, #4]
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	1ad2      	subs	r2, r2, r3
 8009e28:	69bb      	ldr	r3, [r7, #24]
 8009e2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e2e:	687a      	ldr	r2, [r7, #4]
 8009e30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009e32:	69b8      	ldr	r0, [r7, #24]
 8009e34:	f000 f90c 	bl	800a050 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009e38:	4b1f      	ldr	r3, [pc, #124]	; (8009eb8 <pvPortMalloc+0x190>)
 8009e3a:	681a      	ldr	r2, [r3, #0]
 8009e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e3e:	685b      	ldr	r3, [r3, #4]
 8009e40:	1ad3      	subs	r3, r2, r3
 8009e42:	4a1d      	ldr	r2, [pc, #116]	; (8009eb8 <pvPortMalloc+0x190>)
 8009e44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009e46:	4b1c      	ldr	r3, [pc, #112]	; (8009eb8 <pvPortMalloc+0x190>)
 8009e48:	681a      	ldr	r2, [r3, #0]
 8009e4a:	4b1d      	ldr	r3, [pc, #116]	; (8009ec0 <pvPortMalloc+0x198>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	429a      	cmp	r2, r3
 8009e50:	d203      	bcs.n	8009e5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009e52:	4b19      	ldr	r3, [pc, #100]	; (8009eb8 <pvPortMalloc+0x190>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	4a1a      	ldr	r2, [pc, #104]	; (8009ec0 <pvPortMalloc+0x198>)
 8009e58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e5c:	685a      	ldr	r2, [r3, #4]
 8009e5e:	4b15      	ldr	r3, [pc, #84]	; (8009eb4 <pvPortMalloc+0x18c>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	431a      	orrs	r2, r3
 8009e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009e6e:	4b15      	ldr	r3, [pc, #84]	; (8009ec4 <pvPortMalloc+0x19c>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	3301      	adds	r3, #1
 8009e74:	4a13      	ldr	r2, [pc, #76]	; (8009ec4 <pvPortMalloc+0x19c>)
 8009e76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009e78:	f7ff f9e4 	bl	8009244 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8009e7c:	69fb      	ldr	r3, [r7, #28]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d101      	bne.n	8009e86 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8009e82:	f7f6 fbd4 	bl	800062e <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e86:	69fb      	ldr	r3, [r7, #28]
 8009e88:	f003 0307 	and.w	r3, r3, #7
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d00a      	beq.n	8009ea6 <pvPortMalloc+0x17e>
	__asm volatile
 8009e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e94:	f383 8811 	msr	BASEPRI, r3
 8009e98:	f3bf 8f6f 	isb	sy
 8009e9c:	f3bf 8f4f 	dsb	sy
 8009ea0:	60fb      	str	r3, [r7, #12]
}
 8009ea2:	bf00      	nop
 8009ea4:	e7fe      	b.n	8009ea4 <pvPortMalloc+0x17c>
	return pvReturn;
 8009ea6:	69fb      	ldr	r3, [r7, #28]
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	3728      	adds	r7, #40	; 0x28
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bd80      	pop	{r7, pc}
 8009eb0:	200040cc 	.word	0x200040cc
 8009eb4:	200040e0 	.word	0x200040e0
 8009eb8:	200040d0 	.word	0x200040d0
 8009ebc:	200040c4 	.word	0x200040c4
 8009ec0:	200040d4 	.word	0x200040d4
 8009ec4:	200040d8 	.word	0x200040d8

08009ec8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b086      	sub	sp, #24
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d04d      	beq.n	8009f76 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009eda:	2308      	movs	r3, #8
 8009edc:	425b      	negs	r3, r3
 8009ede:	697a      	ldr	r2, [r7, #20]
 8009ee0:	4413      	add	r3, r2
 8009ee2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009ee4:	697b      	ldr	r3, [r7, #20]
 8009ee6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009ee8:	693b      	ldr	r3, [r7, #16]
 8009eea:	685a      	ldr	r2, [r3, #4]
 8009eec:	4b24      	ldr	r3, [pc, #144]	; (8009f80 <vPortFree+0xb8>)
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	4013      	ands	r3, r2
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d10a      	bne.n	8009f0c <vPortFree+0x44>
	__asm volatile
 8009ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009efa:	f383 8811 	msr	BASEPRI, r3
 8009efe:	f3bf 8f6f 	isb	sy
 8009f02:	f3bf 8f4f 	dsb	sy
 8009f06:	60fb      	str	r3, [r7, #12]
}
 8009f08:	bf00      	nop
 8009f0a:	e7fe      	b.n	8009f0a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009f0c:	693b      	ldr	r3, [r7, #16]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d00a      	beq.n	8009f2a <vPortFree+0x62>
	__asm volatile
 8009f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f18:	f383 8811 	msr	BASEPRI, r3
 8009f1c:	f3bf 8f6f 	isb	sy
 8009f20:	f3bf 8f4f 	dsb	sy
 8009f24:	60bb      	str	r3, [r7, #8]
}
 8009f26:	bf00      	nop
 8009f28:	e7fe      	b.n	8009f28 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009f2a:	693b      	ldr	r3, [r7, #16]
 8009f2c:	685a      	ldr	r2, [r3, #4]
 8009f2e:	4b14      	ldr	r3, [pc, #80]	; (8009f80 <vPortFree+0xb8>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	4013      	ands	r3, r2
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d01e      	beq.n	8009f76 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009f38:	693b      	ldr	r3, [r7, #16]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d11a      	bne.n	8009f76 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009f40:	693b      	ldr	r3, [r7, #16]
 8009f42:	685a      	ldr	r2, [r3, #4]
 8009f44:	4b0e      	ldr	r3, [pc, #56]	; (8009f80 <vPortFree+0xb8>)
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	43db      	mvns	r3, r3
 8009f4a:	401a      	ands	r2, r3
 8009f4c:	693b      	ldr	r3, [r7, #16]
 8009f4e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009f50:	f7ff f96a 	bl	8009228 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009f54:	693b      	ldr	r3, [r7, #16]
 8009f56:	685a      	ldr	r2, [r3, #4]
 8009f58:	4b0a      	ldr	r3, [pc, #40]	; (8009f84 <vPortFree+0xbc>)
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	4413      	add	r3, r2
 8009f5e:	4a09      	ldr	r2, [pc, #36]	; (8009f84 <vPortFree+0xbc>)
 8009f60:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009f62:	6938      	ldr	r0, [r7, #16]
 8009f64:	f000 f874 	bl	800a050 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009f68:	4b07      	ldr	r3, [pc, #28]	; (8009f88 <vPortFree+0xc0>)
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	3301      	adds	r3, #1
 8009f6e:	4a06      	ldr	r2, [pc, #24]	; (8009f88 <vPortFree+0xc0>)
 8009f70:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009f72:	f7ff f967 	bl	8009244 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009f76:	bf00      	nop
 8009f78:	3718      	adds	r7, #24
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	bd80      	pop	{r7, pc}
 8009f7e:	bf00      	nop
 8009f80:	200040e0 	.word	0x200040e0
 8009f84:	200040d0 	.word	0x200040d0
 8009f88:	200040dc 	.word	0x200040dc

08009f8c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009f8c:	b480      	push	{r7}
 8009f8e:	b085      	sub	sp, #20
 8009f90:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009f92:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009f96:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009f98:	4b27      	ldr	r3, [pc, #156]	; (800a038 <prvHeapInit+0xac>)
 8009f9a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	f003 0307 	and.w	r3, r3, #7
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d00c      	beq.n	8009fc0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	3307      	adds	r3, #7
 8009faa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	f023 0307 	bic.w	r3, r3, #7
 8009fb2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009fb4:	68ba      	ldr	r2, [r7, #8]
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	1ad3      	subs	r3, r2, r3
 8009fba:	4a1f      	ldr	r2, [pc, #124]	; (800a038 <prvHeapInit+0xac>)
 8009fbc:	4413      	add	r3, r2
 8009fbe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009fc4:	4a1d      	ldr	r2, [pc, #116]	; (800a03c <prvHeapInit+0xb0>)
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009fca:	4b1c      	ldr	r3, [pc, #112]	; (800a03c <prvHeapInit+0xb0>)
 8009fcc:	2200      	movs	r2, #0
 8009fce:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	68ba      	ldr	r2, [r7, #8]
 8009fd4:	4413      	add	r3, r2
 8009fd6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009fd8:	2208      	movs	r2, #8
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	1a9b      	subs	r3, r3, r2
 8009fde:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	f023 0307 	bic.w	r3, r3, #7
 8009fe6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	4a15      	ldr	r2, [pc, #84]	; (800a040 <prvHeapInit+0xb4>)
 8009fec:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009fee:	4b14      	ldr	r3, [pc, #80]	; (800a040 <prvHeapInit+0xb4>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009ff6:	4b12      	ldr	r3, [pc, #72]	; (800a040 <prvHeapInit+0xb4>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	68fa      	ldr	r2, [r7, #12]
 800a006:	1ad2      	subs	r2, r2, r3
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a00c:	4b0c      	ldr	r3, [pc, #48]	; (800a040 <prvHeapInit+0xb4>)
 800a00e:	681a      	ldr	r2, [r3, #0]
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	685b      	ldr	r3, [r3, #4]
 800a018:	4a0a      	ldr	r2, [pc, #40]	; (800a044 <prvHeapInit+0xb8>)
 800a01a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	685b      	ldr	r3, [r3, #4]
 800a020:	4a09      	ldr	r2, [pc, #36]	; (800a048 <prvHeapInit+0xbc>)
 800a022:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a024:	4b09      	ldr	r3, [pc, #36]	; (800a04c <prvHeapInit+0xc0>)
 800a026:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a02a:	601a      	str	r2, [r3, #0]
}
 800a02c:	bf00      	nop
 800a02e:	3714      	adds	r7, #20
 800a030:	46bd      	mov	sp, r7
 800a032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a036:	4770      	bx	lr
 800a038:	200004c4 	.word	0x200004c4
 800a03c:	200040c4 	.word	0x200040c4
 800a040:	200040cc 	.word	0x200040cc
 800a044:	200040d4 	.word	0x200040d4
 800a048:	200040d0 	.word	0x200040d0
 800a04c:	200040e0 	.word	0x200040e0

0800a050 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a050:	b480      	push	{r7}
 800a052:	b085      	sub	sp, #20
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a058:	4b28      	ldr	r3, [pc, #160]	; (800a0fc <prvInsertBlockIntoFreeList+0xac>)
 800a05a:	60fb      	str	r3, [r7, #12]
 800a05c:	e002      	b.n	800a064 <prvInsertBlockIntoFreeList+0x14>
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	60fb      	str	r3, [r7, #12]
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	687a      	ldr	r2, [r7, #4]
 800a06a:	429a      	cmp	r2, r3
 800a06c:	d8f7      	bhi.n	800a05e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	685b      	ldr	r3, [r3, #4]
 800a076:	68ba      	ldr	r2, [r7, #8]
 800a078:	4413      	add	r3, r2
 800a07a:	687a      	ldr	r2, [r7, #4]
 800a07c:	429a      	cmp	r2, r3
 800a07e:	d108      	bne.n	800a092 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	685a      	ldr	r2, [r3, #4]
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	685b      	ldr	r3, [r3, #4]
 800a088:	441a      	add	r2, r3
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	685b      	ldr	r3, [r3, #4]
 800a09a:	68ba      	ldr	r2, [r7, #8]
 800a09c:	441a      	add	r2, r3
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	429a      	cmp	r2, r3
 800a0a4:	d118      	bne.n	800a0d8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	681a      	ldr	r2, [r3, #0]
 800a0aa:	4b15      	ldr	r3, [pc, #84]	; (800a100 <prvInsertBlockIntoFreeList+0xb0>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	429a      	cmp	r2, r3
 800a0b0:	d00d      	beq.n	800a0ce <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	685a      	ldr	r2, [r3, #4]
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	685b      	ldr	r3, [r3, #4]
 800a0bc:	441a      	add	r2, r3
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	681a      	ldr	r2, [r3, #0]
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	601a      	str	r2, [r3, #0]
 800a0cc:	e008      	b.n	800a0e0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a0ce:	4b0c      	ldr	r3, [pc, #48]	; (800a100 <prvInsertBlockIntoFreeList+0xb0>)
 800a0d0:	681a      	ldr	r2, [r3, #0]
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	601a      	str	r2, [r3, #0]
 800a0d6:	e003      	b.n	800a0e0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	681a      	ldr	r2, [r3, #0]
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a0e0:	68fa      	ldr	r2, [r7, #12]
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	429a      	cmp	r2, r3
 800a0e6:	d002      	beq.n	800a0ee <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	687a      	ldr	r2, [r7, #4]
 800a0ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a0ee:	bf00      	nop
 800a0f0:	3714      	adds	r7, #20
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f8:	4770      	bx	lr
 800a0fa:	bf00      	nop
 800a0fc:	200040c4 	.word	0x200040c4
 800a100:	200040cc 	.word	0x200040cc

0800a104 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a108:	2200      	movs	r2, #0
 800a10a:	4912      	ldr	r1, [pc, #72]	; (800a154 <MX_USB_DEVICE_Init+0x50>)
 800a10c:	4812      	ldr	r0, [pc, #72]	; (800a158 <MX_USB_DEVICE_Init+0x54>)
 800a10e:	f7fd f9f9 	bl	8007504 <USBD_Init>
 800a112:	4603      	mov	r3, r0
 800a114:	2b00      	cmp	r3, #0
 800a116:	d001      	beq.n	800a11c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a118:	f7f6 fd34 	bl	8000b84 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a11c:	490f      	ldr	r1, [pc, #60]	; (800a15c <MX_USB_DEVICE_Init+0x58>)
 800a11e:	480e      	ldr	r0, [pc, #56]	; (800a158 <MX_USB_DEVICE_Init+0x54>)
 800a120:	f7fd fa20 	bl	8007564 <USBD_RegisterClass>
 800a124:	4603      	mov	r3, r0
 800a126:	2b00      	cmp	r3, #0
 800a128:	d001      	beq.n	800a12e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a12a:	f7f6 fd2b 	bl	8000b84 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a12e:	490c      	ldr	r1, [pc, #48]	; (800a160 <MX_USB_DEVICE_Init+0x5c>)
 800a130:	4809      	ldr	r0, [pc, #36]	; (800a158 <MX_USB_DEVICE_Init+0x54>)
 800a132:	f7fd f957 	bl	80073e4 <USBD_CDC_RegisterInterface>
 800a136:	4603      	mov	r3, r0
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d001      	beq.n	800a140 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a13c:	f7f6 fd22 	bl	8000b84 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a140:	4805      	ldr	r0, [pc, #20]	; (800a158 <MX_USB_DEVICE_Init+0x54>)
 800a142:	f7fd fa45 	bl	80075d0 <USBD_Start>
 800a146:	4603      	mov	r3, r0
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d001      	beq.n	800a150 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a14c:	f7f6 fd1a 	bl	8000b84 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a150:	bf00      	nop
 800a152:	bd80      	pop	{r7, pc}
 800a154:	200000b0 	.word	0x200000b0
 800a158:	200040e4 	.word	0x200040e4
 800a15c:	20000018 	.word	0x20000018
 800a160:	2000009c 	.word	0x2000009c

0800a164 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a168:	2200      	movs	r2, #0
 800a16a:	4905      	ldr	r1, [pc, #20]	; (800a180 <CDC_Init_FS+0x1c>)
 800a16c:	4805      	ldr	r0, [pc, #20]	; (800a184 <CDC_Init_FS+0x20>)
 800a16e:	f7fd f953 	bl	8007418 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a172:	4905      	ldr	r1, [pc, #20]	; (800a188 <CDC_Init_FS+0x24>)
 800a174:	4803      	ldr	r0, [pc, #12]	; (800a184 <CDC_Init_FS+0x20>)
 800a176:	f7fd f971 	bl	800745c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a17a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a17c:	4618      	mov	r0, r3
 800a17e:	bd80      	pop	{r7, pc}
 800a180:	20004bc0 	.word	0x20004bc0
 800a184:	200040e4 	.word	0x200040e4
 800a188:	200043c0 	.word	0x200043c0

0800a18c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a18c:	b480      	push	{r7}
 800a18e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a190:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a192:	4618      	mov	r0, r3
 800a194:	46bd      	mov	sp, r7
 800a196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19a:	4770      	bx	lr

0800a19c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a19c:	b480      	push	{r7}
 800a19e:	b083      	sub	sp, #12
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	6039      	str	r1, [r7, #0]
 800a1a6:	71fb      	strb	r3, [r7, #7]
 800a1a8:	4613      	mov	r3, r2
 800a1aa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a1ac:	79fb      	ldrb	r3, [r7, #7]
 800a1ae:	2b23      	cmp	r3, #35	; 0x23
 800a1b0:	d84a      	bhi.n	800a248 <CDC_Control_FS+0xac>
 800a1b2:	a201      	add	r2, pc, #4	; (adr r2, 800a1b8 <CDC_Control_FS+0x1c>)
 800a1b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1b8:	0800a249 	.word	0x0800a249
 800a1bc:	0800a249 	.word	0x0800a249
 800a1c0:	0800a249 	.word	0x0800a249
 800a1c4:	0800a249 	.word	0x0800a249
 800a1c8:	0800a249 	.word	0x0800a249
 800a1cc:	0800a249 	.word	0x0800a249
 800a1d0:	0800a249 	.word	0x0800a249
 800a1d4:	0800a249 	.word	0x0800a249
 800a1d8:	0800a249 	.word	0x0800a249
 800a1dc:	0800a249 	.word	0x0800a249
 800a1e0:	0800a249 	.word	0x0800a249
 800a1e4:	0800a249 	.word	0x0800a249
 800a1e8:	0800a249 	.word	0x0800a249
 800a1ec:	0800a249 	.word	0x0800a249
 800a1f0:	0800a249 	.word	0x0800a249
 800a1f4:	0800a249 	.word	0x0800a249
 800a1f8:	0800a249 	.word	0x0800a249
 800a1fc:	0800a249 	.word	0x0800a249
 800a200:	0800a249 	.word	0x0800a249
 800a204:	0800a249 	.word	0x0800a249
 800a208:	0800a249 	.word	0x0800a249
 800a20c:	0800a249 	.word	0x0800a249
 800a210:	0800a249 	.word	0x0800a249
 800a214:	0800a249 	.word	0x0800a249
 800a218:	0800a249 	.word	0x0800a249
 800a21c:	0800a249 	.word	0x0800a249
 800a220:	0800a249 	.word	0x0800a249
 800a224:	0800a249 	.word	0x0800a249
 800a228:	0800a249 	.word	0x0800a249
 800a22c:	0800a249 	.word	0x0800a249
 800a230:	0800a249 	.word	0x0800a249
 800a234:	0800a249 	.word	0x0800a249
 800a238:	0800a249 	.word	0x0800a249
 800a23c:	0800a249 	.word	0x0800a249
 800a240:	0800a249 	.word	0x0800a249
 800a244:	0800a249 	.word	0x0800a249
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a248:	bf00      	nop
  }

  return (USBD_OK);
 800a24a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a24c:	4618      	mov	r0, r3
 800a24e:	370c      	adds	r7, #12
 800a250:	46bd      	mov	sp, r7
 800a252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a256:	4770      	bx	lr

0800a258 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b082      	sub	sp, #8
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
 800a260:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a262:	6879      	ldr	r1, [r7, #4]
 800a264:	4805      	ldr	r0, [pc, #20]	; (800a27c <CDC_Receive_FS+0x24>)
 800a266:	f7fd f8f9 	bl	800745c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a26a:	4804      	ldr	r0, [pc, #16]	; (800a27c <CDC_Receive_FS+0x24>)
 800a26c:	f7fd f914 	bl	8007498 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a270:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a272:	4618      	mov	r0, r3
 800a274:	3708      	adds	r7, #8
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}
 800a27a:	bf00      	nop
 800a27c:	200040e4 	.word	0x200040e4

0800a280 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a280:	b480      	push	{r7}
 800a282:	b087      	sub	sp, #28
 800a284:	af00      	add	r7, sp, #0
 800a286:	60f8      	str	r0, [r7, #12]
 800a288:	60b9      	str	r1, [r7, #8]
 800a28a:	4613      	mov	r3, r2
 800a28c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a28e:	2300      	movs	r3, #0
 800a290:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a292:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a296:	4618      	mov	r0, r3
 800a298:	371c      	adds	r7, #28
 800a29a:	46bd      	mov	sp, r7
 800a29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a0:	4770      	bx	lr
	...

0800a2a4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	b083      	sub	sp, #12
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	6039      	str	r1, [r7, #0]
 800a2ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	2212      	movs	r2, #18
 800a2b4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a2b6:	4b03      	ldr	r3, [pc, #12]	; (800a2c4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	370c      	adds	r7, #12
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c2:	4770      	bx	lr
 800a2c4:	200000cc 	.word	0x200000cc

0800a2c8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2c8:	b480      	push	{r7}
 800a2ca:	b083      	sub	sp, #12
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	6039      	str	r1, [r7, #0]
 800a2d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	2204      	movs	r2, #4
 800a2d8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a2da:	4b03      	ldr	r3, [pc, #12]	; (800a2e8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a2dc:	4618      	mov	r0, r3
 800a2de:	370c      	adds	r7, #12
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e6:	4770      	bx	lr
 800a2e8:	200000e0 	.word	0x200000e0

0800a2ec <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b082      	sub	sp, #8
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	6039      	str	r1, [r7, #0]
 800a2f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a2f8:	79fb      	ldrb	r3, [r7, #7]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d105      	bne.n	800a30a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a2fe:	683a      	ldr	r2, [r7, #0]
 800a300:	4907      	ldr	r1, [pc, #28]	; (800a320 <USBD_FS_ProductStrDescriptor+0x34>)
 800a302:	4808      	ldr	r0, [pc, #32]	; (800a324 <USBD_FS_ProductStrDescriptor+0x38>)
 800a304:	f7fe fb16 	bl	8008934 <USBD_GetString>
 800a308:	e004      	b.n	800a314 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a30a:	683a      	ldr	r2, [r7, #0]
 800a30c:	4904      	ldr	r1, [pc, #16]	; (800a320 <USBD_FS_ProductStrDescriptor+0x34>)
 800a30e:	4805      	ldr	r0, [pc, #20]	; (800a324 <USBD_FS_ProductStrDescriptor+0x38>)
 800a310:	f7fe fb10 	bl	8008934 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a314:	4b02      	ldr	r3, [pc, #8]	; (800a320 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a316:	4618      	mov	r0, r3
 800a318:	3708      	adds	r7, #8
 800a31a:	46bd      	mov	sp, r7
 800a31c:	bd80      	pop	{r7, pc}
 800a31e:	bf00      	nop
 800a320:	200053c0 	.word	0x200053c0
 800a324:	0800cc14 	.word	0x0800cc14

0800a328 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b082      	sub	sp, #8
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	4603      	mov	r3, r0
 800a330:	6039      	str	r1, [r7, #0]
 800a332:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a334:	683a      	ldr	r2, [r7, #0]
 800a336:	4904      	ldr	r1, [pc, #16]	; (800a348 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a338:	4804      	ldr	r0, [pc, #16]	; (800a34c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a33a:	f7fe fafb 	bl	8008934 <USBD_GetString>
  return USBD_StrDesc;
 800a33e:	4b02      	ldr	r3, [pc, #8]	; (800a348 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a340:	4618      	mov	r0, r3
 800a342:	3708      	adds	r7, #8
 800a344:	46bd      	mov	sp, r7
 800a346:	bd80      	pop	{r7, pc}
 800a348:	200053c0 	.word	0x200053c0
 800a34c:	0800cc2c 	.word	0x0800cc2c

0800a350 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b082      	sub	sp, #8
 800a354:	af00      	add	r7, sp, #0
 800a356:	4603      	mov	r3, r0
 800a358:	6039      	str	r1, [r7, #0]
 800a35a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	221a      	movs	r2, #26
 800a360:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a362:	f000 f843 	bl	800a3ec <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a366:	4b02      	ldr	r3, [pc, #8]	; (800a370 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a368:	4618      	mov	r0, r3
 800a36a:	3708      	adds	r7, #8
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bd80      	pop	{r7, pc}
 800a370:	200000e4 	.word	0x200000e4

0800a374 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b082      	sub	sp, #8
 800a378:	af00      	add	r7, sp, #0
 800a37a:	4603      	mov	r3, r0
 800a37c:	6039      	str	r1, [r7, #0]
 800a37e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a380:	79fb      	ldrb	r3, [r7, #7]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d105      	bne.n	800a392 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a386:	683a      	ldr	r2, [r7, #0]
 800a388:	4907      	ldr	r1, [pc, #28]	; (800a3a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a38a:	4808      	ldr	r0, [pc, #32]	; (800a3ac <USBD_FS_ConfigStrDescriptor+0x38>)
 800a38c:	f7fe fad2 	bl	8008934 <USBD_GetString>
 800a390:	e004      	b.n	800a39c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a392:	683a      	ldr	r2, [r7, #0]
 800a394:	4904      	ldr	r1, [pc, #16]	; (800a3a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a396:	4805      	ldr	r0, [pc, #20]	; (800a3ac <USBD_FS_ConfigStrDescriptor+0x38>)
 800a398:	f7fe facc 	bl	8008934 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a39c:	4b02      	ldr	r3, [pc, #8]	; (800a3a8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a39e:	4618      	mov	r0, r3
 800a3a0:	3708      	adds	r7, #8
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}
 800a3a6:	bf00      	nop
 800a3a8:	200053c0 	.word	0x200053c0
 800a3ac:	0800cc40 	.word	0x0800cc40

0800a3b0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b082      	sub	sp, #8
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	6039      	str	r1, [r7, #0]
 800a3ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a3bc:	79fb      	ldrb	r3, [r7, #7]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d105      	bne.n	800a3ce <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a3c2:	683a      	ldr	r2, [r7, #0]
 800a3c4:	4907      	ldr	r1, [pc, #28]	; (800a3e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a3c6:	4808      	ldr	r0, [pc, #32]	; (800a3e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a3c8:	f7fe fab4 	bl	8008934 <USBD_GetString>
 800a3cc:	e004      	b.n	800a3d8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a3ce:	683a      	ldr	r2, [r7, #0]
 800a3d0:	4904      	ldr	r1, [pc, #16]	; (800a3e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a3d2:	4805      	ldr	r0, [pc, #20]	; (800a3e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a3d4:	f7fe faae 	bl	8008934 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a3d8:	4b02      	ldr	r3, [pc, #8]	; (800a3e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a3da:	4618      	mov	r0, r3
 800a3dc:	3708      	adds	r7, #8
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}
 800a3e2:	bf00      	nop
 800a3e4:	200053c0 	.word	0x200053c0
 800a3e8:	0800cc4c 	.word	0x0800cc4c

0800a3ec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b084      	sub	sp, #16
 800a3f0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a3f2:	4b0f      	ldr	r3, [pc, #60]	; (800a430 <Get_SerialNum+0x44>)
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a3f8:	4b0e      	ldr	r3, [pc, #56]	; (800a434 <Get_SerialNum+0x48>)
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a3fe:	4b0e      	ldr	r3, [pc, #56]	; (800a438 <Get_SerialNum+0x4c>)
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a404:	68fa      	ldr	r2, [r7, #12]
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	4413      	add	r3, r2
 800a40a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d009      	beq.n	800a426 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a412:	2208      	movs	r2, #8
 800a414:	4909      	ldr	r1, [pc, #36]	; (800a43c <Get_SerialNum+0x50>)
 800a416:	68f8      	ldr	r0, [r7, #12]
 800a418:	f000 f814 	bl	800a444 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a41c:	2204      	movs	r2, #4
 800a41e:	4908      	ldr	r1, [pc, #32]	; (800a440 <Get_SerialNum+0x54>)
 800a420:	68b8      	ldr	r0, [r7, #8]
 800a422:	f000 f80f 	bl	800a444 <IntToUnicode>
  }
}
 800a426:	bf00      	nop
 800a428:	3710      	adds	r7, #16
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bd80      	pop	{r7, pc}
 800a42e:	bf00      	nop
 800a430:	1fff7a10 	.word	0x1fff7a10
 800a434:	1fff7a14 	.word	0x1fff7a14
 800a438:	1fff7a18 	.word	0x1fff7a18
 800a43c:	200000e6 	.word	0x200000e6
 800a440:	200000f6 	.word	0x200000f6

0800a444 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a444:	b480      	push	{r7}
 800a446:	b087      	sub	sp, #28
 800a448:	af00      	add	r7, sp, #0
 800a44a:	60f8      	str	r0, [r7, #12]
 800a44c:	60b9      	str	r1, [r7, #8]
 800a44e:	4613      	mov	r3, r2
 800a450:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a452:	2300      	movs	r3, #0
 800a454:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a456:	2300      	movs	r3, #0
 800a458:	75fb      	strb	r3, [r7, #23]
 800a45a:	e027      	b.n	800a4ac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	0f1b      	lsrs	r3, r3, #28
 800a460:	2b09      	cmp	r3, #9
 800a462:	d80b      	bhi.n	800a47c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	0f1b      	lsrs	r3, r3, #28
 800a468:	b2da      	uxtb	r2, r3
 800a46a:	7dfb      	ldrb	r3, [r7, #23]
 800a46c:	005b      	lsls	r3, r3, #1
 800a46e:	4619      	mov	r1, r3
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	440b      	add	r3, r1
 800a474:	3230      	adds	r2, #48	; 0x30
 800a476:	b2d2      	uxtb	r2, r2
 800a478:	701a      	strb	r2, [r3, #0]
 800a47a:	e00a      	b.n	800a492 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	0f1b      	lsrs	r3, r3, #28
 800a480:	b2da      	uxtb	r2, r3
 800a482:	7dfb      	ldrb	r3, [r7, #23]
 800a484:	005b      	lsls	r3, r3, #1
 800a486:	4619      	mov	r1, r3
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	440b      	add	r3, r1
 800a48c:	3237      	adds	r2, #55	; 0x37
 800a48e:	b2d2      	uxtb	r2, r2
 800a490:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	011b      	lsls	r3, r3, #4
 800a496:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a498:	7dfb      	ldrb	r3, [r7, #23]
 800a49a:	005b      	lsls	r3, r3, #1
 800a49c:	3301      	adds	r3, #1
 800a49e:	68ba      	ldr	r2, [r7, #8]
 800a4a0:	4413      	add	r3, r2
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a4a6:	7dfb      	ldrb	r3, [r7, #23]
 800a4a8:	3301      	adds	r3, #1
 800a4aa:	75fb      	strb	r3, [r7, #23]
 800a4ac:	7dfa      	ldrb	r2, [r7, #23]
 800a4ae:	79fb      	ldrb	r3, [r7, #7]
 800a4b0:	429a      	cmp	r2, r3
 800a4b2:	d3d3      	bcc.n	800a45c <IntToUnicode+0x18>
  }
}
 800a4b4:	bf00      	nop
 800a4b6:	bf00      	nop
 800a4b8:	371c      	adds	r7, #28
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c0:	4770      	bx	lr
	...

0800a4c4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b08a      	sub	sp, #40	; 0x28
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a4cc:	f107 0314 	add.w	r3, r7, #20
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	601a      	str	r2, [r3, #0]
 800a4d4:	605a      	str	r2, [r3, #4]
 800a4d6:	609a      	str	r2, [r3, #8]
 800a4d8:	60da      	str	r2, [r3, #12]
 800a4da:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a4e4:	d13a      	bne.n	800a55c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	613b      	str	r3, [r7, #16]
 800a4ea:	4b1e      	ldr	r3, [pc, #120]	; (800a564 <HAL_PCD_MspInit+0xa0>)
 800a4ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4ee:	4a1d      	ldr	r2, [pc, #116]	; (800a564 <HAL_PCD_MspInit+0xa0>)
 800a4f0:	f043 0301 	orr.w	r3, r3, #1
 800a4f4:	6313      	str	r3, [r2, #48]	; 0x30
 800a4f6:	4b1b      	ldr	r3, [pc, #108]	; (800a564 <HAL_PCD_MspInit+0xa0>)
 800a4f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4fa:	f003 0301 	and.w	r3, r3, #1
 800a4fe:	613b      	str	r3, [r7, #16]
 800a500:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 800a502:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a506:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a508:	2302      	movs	r3, #2
 800a50a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a50c:	2300      	movs	r3, #0
 800a50e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a510:	2303      	movs	r3, #3
 800a512:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a514:	230a      	movs	r3, #10
 800a516:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a518:	f107 0314 	add.w	r3, r7, #20
 800a51c:	4619      	mov	r1, r3
 800a51e:	4812      	ldr	r0, [pc, #72]	; (800a568 <HAL_PCD_MspInit+0xa4>)
 800a520:	f7f7 ff66 	bl	80023f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a524:	4b0f      	ldr	r3, [pc, #60]	; (800a564 <HAL_PCD_MspInit+0xa0>)
 800a526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a528:	4a0e      	ldr	r2, [pc, #56]	; (800a564 <HAL_PCD_MspInit+0xa0>)
 800a52a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a52e:	6353      	str	r3, [r2, #52]	; 0x34
 800a530:	2300      	movs	r3, #0
 800a532:	60fb      	str	r3, [r7, #12]
 800a534:	4b0b      	ldr	r3, [pc, #44]	; (800a564 <HAL_PCD_MspInit+0xa0>)
 800a536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a538:	4a0a      	ldr	r2, [pc, #40]	; (800a564 <HAL_PCD_MspInit+0xa0>)
 800a53a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a53e:	6453      	str	r3, [r2, #68]	; 0x44
 800a540:	4b08      	ldr	r3, [pc, #32]	; (800a564 <HAL_PCD_MspInit+0xa0>)
 800a542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a544:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a548:	60fb      	str	r3, [r7, #12]
 800a54a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800a54c:	2200      	movs	r2, #0
 800a54e:	2105      	movs	r1, #5
 800a550:	2043      	movs	r0, #67	; 0x43
 800a552:	f7f7 ff23 	bl	800239c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a556:	2043      	movs	r0, #67	; 0x43
 800a558:	f7f7 ff3c 	bl	80023d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a55c:	bf00      	nop
 800a55e:	3728      	adds	r7, #40	; 0x28
 800a560:	46bd      	mov	sp, r7
 800a562:	bd80      	pop	{r7, pc}
 800a564:	40023800 	.word	0x40023800
 800a568:	40020000 	.word	0x40020000

0800a56c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b082      	sub	sp, #8
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800a580:	4619      	mov	r1, r3
 800a582:	4610      	mov	r0, r2
 800a584:	f7fd f871 	bl	800766a <USBD_LL_SetupStage>
}
 800a588:	bf00      	nop
 800a58a:	3708      	adds	r7, #8
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd80      	pop	{r7, pc}

0800a590 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b082      	sub	sp, #8
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
 800a598:	460b      	mov	r3, r1
 800a59a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800a5a2:	78fa      	ldrb	r2, [r7, #3]
 800a5a4:	6879      	ldr	r1, [r7, #4]
 800a5a6:	4613      	mov	r3, r2
 800a5a8:	00db      	lsls	r3, r3, #3
 800a5aa:	4413      	add	r3, r2
 800a5ac:	009b      	lsls	r3, r3, #2
 800a5ae:	440b      	add	r3, r1
 800a5b0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800a5b4:	681a      	ldr	r2, [r3, #0]
 800a5b6:	78fb      	ldrb	r3, [r7, #3]
 800a5b8:	4619      	mov	r1, r3
 800a5ba:	f7fd f8ab 	bl	8007714 <USBD_LL_DataOutStage>
}
 800a5be:	bf00      	nop
 800a5c0:	3708      	adds	r7, #8
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd80      	pop	{r7, pc}

0800a5c6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5c6:	b580      	push	{r7, lr}
 800a5c8:	b082      	sub	sp, #8
 800a5ca:	af00      	add	r7, sp, #0
 800a5cc:	6078      	str	r0, [r7, #4]
 800a5ce:	460b      	mov	r3, r1
 800a5d0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800a5d8:	78fa      	ldrb	r2, [r7, #3]
 800a5da:	6879      	ldr	r1, [r7, #4]
 800a5dc:	4613      	mov	r3, r2
 800a5de:	00db      	lsls	r3, r3, #3
 800a5e0:	4413      	add	r3, r2
 800a5e2:	009b      	lsls	r3, r3, #2
 800a5e4:	440b      	add	r3, r1
 800a5e6:	3320      	adds	r3, #32
 800a5e8:	681a      	ldr	r2, [r3, #0]
 800a5ea:	78fb      	ldrb	r3, [r7, #3]
 800a5ec:	4619      	mov	r1, r3
 800a5ee:	f7fd f944 	bl	800787a <USBD_LL_DataInStage>
}
 800a5f2:	bf00      	nop
 800a5f4:	3708      	adds	r7, #8
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	bd80      	pop	{r7, pc}

0800a5fa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5fa:	b580      	push	{r7, lr}
 800a5fc:	b082      	sub	sp, #8
 800a5fe:	af00      	add	r7, sp, #0
 800a600:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a608:	4618      	mov	r0, r3
 800a60a:	f7fd fa7e 	bl	8007b0a <USBD_LL_SOF>
}
 800a60e:	bf00      	nop
 800a610:	3708      	adds	r7, #8
 800a612:	46bd      	mov	sp, r7
 800a614:	bd80      	pop	{r7, pc}

0800a616 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a616:	b580      	push	{r7, lr}
 800a618:	b084      	sub	sp, #16
 800a61a:	af00      	add	r7, sp, #0
 800a61c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a61e:	2301      	movs	r3, #1
 800a620:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	79db      	ldrb	r3, [r3, #7]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d102      	bne.n	800a630 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a62a:	2300      	movs	r3, #0
 800a62c:	73fb      	strb	r3, [r7, #15]
 800a62e:	e008      	b.n	800a642 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	79db      	ldrb	r3, [r3, #7]
 800a634:	2b02      	cmp	r3, #2
 800a636:	d102      	bne.n	800a63e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a638:	2301      	movs	r3, #1
 800a63a:	73fb      	strb	r3, [r7, #15]
 800a63c:	e001      	b.n	800a642 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a63e:	f7f6 faa1 	bl	8000b84 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a648:	7bfa      	ldrb	r2, [r7, #15]
 800a64a:	4611      	mov	r1, r2
 800a64c:	4618      	mov	r0, r3
 800a64e:	f7fd fa18 	bl	8007a82 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a658:	4618      	mov	r0, r3
 800a65a:	f7fd f9c0 	bl	80079de <USBD_LL_Reset>
}
 800a65e:	bf00      	nop
 800a660:	3710      	adds	r7, #16
 800a662:	46bd      	mov	sp, r7
 800a664:	bd80      	pop	{r7, pc}
	...

0800a668 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b082      	sub	sp, #8
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a676:	4618      	mov	r0, r3
 800a678:	f7fd fa13 	bl	8007aa2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	687a      	ldr	r2, [r7, #4]
 800a688:	6812      	ldr	r2, [r2, #0]
 800a68a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a68e:	f043 0301 	orr.w	r3, r3, #1
 800a692:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	7adb      	ldrb	r3, [r3, #11]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d005      	beq.n	800a6a8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a69c:	4b04      	ldr	r3, [pc, #16]	; (800a6b0 <HAL_PCD_SuspendCallback+0x48>)
 800a69e:	691b      	ldr	r3, [r3, #16]
 800a6a0:	4a03      	ldr	r2, [pc, #12]	; (800a6b0 <HAL_PCD_SuspendCallback+0x48>)
 800a6a2:	f043 0306 	orr.w	r3, r3, #6
 800a6a6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a6a8:	bf00      	nop
 800a6aa:	3708      	adds	r7, #8
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bd80      	pop	{r7, pc}
 800a6b0:	e000ed00 	.word	0xe000ed00

0800a6b4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b082      	sub	sp, #8
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f7fd fa09 	bl	8007ada <USBD_LL_Resume>
}
 800a6c8:	bf00      	nop
 800a6ca:	3708      	adds	r7, #8
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	bd80      	pop	{r7, pc}

0800a6d0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b082      	sub	sp, #8
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
 800a6d8:	460b      	mov	r3, r1
 800a6da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a6e2:	78fa      	ldrb	r2, [r7, #3]
 800a6e4:	4611      	mov	r1, r2
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	f7fd fa61 	bl	8007bae <USBD_LL_IsoOUTIncomplete>
}
 800a6ec:	bf00      	nop
 800a6ee:	3708      	adds	r7, #8
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bd80      	pop	{r7, pc}

0800a6f4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b082      	sub	sp, #8
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
 800a6fc:	460b      	mov	r3, r1
 800a6fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a706:	78fa      	ldrb	r2, [r7, #3]
 800a708:	4611      	mov	r1, r2
 800a70a:	4618      	mov	r0, r3
 800a70c:	f7fd fa1d 	bl	8007b4a <USBD_LL_IsoINIncomplete>
}
 800a710:	bf00      	nop
 800a712:	3708      	adds	r7, #8
 800a714:	46bd      	mov	sp, r7
 800a716:	bd80      	pop	{r7, pc}

0800a718 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b082      	sub	sp, #8
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a726:	4618      	mov	r0, r3
 800a728:	f7fd fa73 	bl	8007c12 <USBD_LL_DevConnected>
}
 800a72c:	bf00      	nop
 800a72e:	3708      	adds	r7, #8
 800a730:	46bd      	mov	sp, r7
 800a732:	bd80      	pop	{r7, pc}

0800a734 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b082      	sub	sp, #8
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a742:	4618      	mov	r0, r3
 800a744:	f7fd fa70 	bl	8007c28 <USBD_LL_DevDisconnected>
}
 800a748:	bf00      	nop
 800a74a:	3708      	adds	r7, #8
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bd80      	pop	{r7, pc}

0800a750 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b082      	sub	sp, #8
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	781b      	ldrb	r3, [r3, #0]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d13c      	bne.n	800a7da <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a760:	4a20      	ldr	r2, [pc, #128]	; (800a7e4 <USBD_LL_Init+0x94>)
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	4a1e      	ldr	r2, [pc, #120]	; (800a7e4 <USBD_LL_Init+0x94>)
 800a76c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a770:	4b1c      	ldr	r3, [pc, #112]	; (800a7e4 <USBD_LL_Init+0x94>)
 800a772:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a776:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a778:	4b1a      	ldr	r3, [pc, #104]	; (800a7e4 <USBD_LL_Init+0x94>)
 800a77a:	2204      	movs	r2, #4
 800a77c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a77e:	4b19      	ldr	r3, [pc, #100]	; (800a7e4 <USBD_LL_Init+0x94>)
 800a780:	2202      	movs	r2, #2
 800a782:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a784:	4b17      	ldr	r3, [pc, #92]	; (800a7e4 <USBD_LL_Init+0x94>)
 800a786:	2200      	movs	r2, #0
 800a788:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a78a:	4b16      	ldr	r3, [pc, #88]	; (800a7e4 <USBD_LL_Init+0x94>)
 800a78c:	2202      	movs	r2, #2
 800a78e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a790:	4b14      	ldr	r3, [pc, #80]	; (800a7e4 <USBD_LL_Init+0x94>)
 800a792:	2200      	movs	r2, #0
 800a794:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a796:	4b13      	ldr	r3, [pc, #76]	; (800a7e4 <USBD_LL_Init+0x94>)
 800a798:	2200      	movs	r2, #0
 800a79a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a79c:	4b11      	ldr	r3, [pc, #68]	; (800a7e4 <USBD_LL_Init+0x94>)
 800a79e:	2200      	movs	r2, #0
 800a7a0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a7a2:	4b10      	ldr	r3, [pc, #64]	; (800a7e4 <USBD_LL_Init+0x94>)
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a7a8:	4b0e      	ldr	r3, [pc, #56]	; (800a7e4 <USBD_LL_Init+0x94>)
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a7ae:	480d      	ldr	r0, [pc, #52]	; (800a7e4 <USBD_LL_Init+0x94>)
 800a7b0:	f7f7 fffd 	bl	80027ae <HAL_PCD_Init>
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d001      	beq.n	800a7be <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a7ba:	f7f6 f9e3 	bl	8000b84 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a7be:	2180      	movs	r1, #128	; 0x80
 800a7c0:	4808      	ldr	r0, [pc, #32]	; (800a7e4 <USBD_LL_Init+0x94>)
 800a7c2:	f7f9 fa28 	bl	8003c16 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a7c6:	2240      	movs	r2, #64	; 0x40
 800a7c8:	2100      	movs	r1, #0
 800a7ca:	4806      	ldr	r0, [pc, #24]	; (800a7e4 <USBD_LL_Init+0x94>)
 800a7cc:	f7f9 f9dc 	bl	8003b88 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a7d0:	2280      	movs	r2, #128	; 0x80
 800a7d2:	2101      	movs	r1, #1
 800a7d4:	4803      	ldr	r0, [pc, #12]	; (800a7e4 <USBD_LL_Init+0x94>)
 800a7d6:	f7f9 f9d7 	bl	8003b88 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a7da:	2300      	movs	r3, #0
}
 800a7dc:	4618      	mov	r0, r3
 800a7de:	3708      	adds	r7, #8
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	bd80      	pop	{r7, pc}
 800a7e4:	200055c0 	.word	0x200055c0

0800a7e8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b084      	sub	sp, #16
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a7fe:	4618      	mov	r0, r3
 800a800:	f7f8 f8e4 	bl	80029cc <HAL_PCD_Start>
 800a804:	4603      	mov	r3, r0
 800a806:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a808:	7bfb      	ldrb	r3, [r7, #15]
 800a80a:	4618      	mov	r0, r3
 800a80c:	f000 f942 	bl	800aa94 <USBD_Get_USB_Status>
 800a810:	4603      	mov	r3, r0
 800a812:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a814:	7bbb      	ldrb	r3, [r7, #14]
}
 800a816:	4618      	mov	r0, r3
 800a818:	3710      	adds	r7, #16
 800a81a:	46bd      	mov	sp, r7
 800a81c:	bd80      	pop	{r7, pc}

0800a81e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a81e:	b580      	push	{r7, lr}
 800a820:	b084      	sub	sp, #16
 800a822:	af00      	add	r7, sp, #0
 800a824:	6078      	str	r0, [r7, #4]
 800a826:	4608      	mov	r0, r1
 800a828:	4611      	mov	r1, r2
 800a82a:	461a      	mov	r2, r3
 800a82c:	4603      	mov	r3, r0
 800a82e:	70fb      	strb	r3, [r7, #3]
 800a830:	460b      	mov	r3, r1
 800a832:	70bb      	strb	r3, [r7, #2]
 800a834:	4613      	mov	r3, r2
 800a836:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a838:	2300      	movs	r3, #0
 800a83a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a83c:	2300      	movs	r3, #0
 800a83e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a846:	78bb      	ldrb	r3, [r7, #2]
 800a848:	883a      	ldrh	r2, [r7, #0]
 800a84a:	78f9      	ldrb	r1, [r7, #3]
 800a84c:	f7f8 fdb8 	bl	80033c0 <HAL_PCD_EP_Open>
 800a850:	4603      	mov	r3, r0
 800a852:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a854:	7bfb      	ldrb	r3, [r7, #15]
 800a856:	4618      	mov	r0, r3
 800a858:	f000 f91c 	bl	800aa94 <USBD_Get_USB_Status>
 800a85c:	4603      	mov	r3, r0
 800a85e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a860:	7bbb      	ldrb	r3, [r7, #14]
}
 800a862:	4618      	mov	r0, r3
 800a864:	3710      	adds	r7, #16
 800a866:	46bd      	mov	sp, r7
 800a868:	bd80      	pop	{r7, pc}

0800a86a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a86a:	b580      	push	{r7, lr}
 800a86c:	b084      	sub	sp, #16
 800a86e:	af00      	add	r7, sp, #0
 800a870:	6078      	str	r0, [r7, #4]
 800a872:	460b      	mov	r3, r1
 800a874:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a876:	2300      	movs	r3, #0
 800a878:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a87a:	2300      	movs	r3, #0
 800a87c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a884:	78fa      	ldrb	r2, [r7, #3]
 800a886:	4611      	mov	r1, r2
 800a888:	4618      	mov	r0, r3
 800a88a:	f7f8 fe01 	bl	8003490 <HAL_PCD_EP_Close>
 800a88e:	4603      	mov	r3, r0
 800a890:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a892:	7bfb      	ldrb	r3, [r7, #15]
 800a894:	4618      	mov	r0, r3
 800a896:	f000 f8fd 	bl	800aa94 <USBD_Get_USB_Status>
 800a89a:	4603      	mov	r3, r0
 800a89c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a89e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	3710      	adds	r7, #16
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}

0800a8a8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b084      	sub	sp, #16
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
 800a8b0:	460b      	mov	r3, r1
 800a8b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a8c2:	78fa      	ldrb	r2, [r7, #3]
 800a8c4:	4611      	mov	r1, r2
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	f7f8 feb9 	bl	800363e <HAL_PCD_EP_SetStall>
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8d0:	7bfb      	ldrb	r3, [r7, #15]
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	f000 f8de 	bl	800aa94 <USBD_Get_USB_Status>
 800a8d8:	4603      	mov	r3, r0
 800a8da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a8dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8de:	4618      	mov	r0, r3
 800a8e0:	3710      	adds	r7, #16
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	bd80      	pop	{r7, pc}

0800a8e6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a8e6:	b580      	push	{r7, lr}
 800a8e8:	b084      	sub	sp, #16
 800a8ea:	af00      	add	r7, sp, #0
 800a8ec:	6078      	str	r0, [r7, #4]
 800a8ee:	460b      	mov	r3, r1
 800a8f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a900:	78fa      	ldrb	r2, [r7, #3]
 800a902:	4611      	mov	r1, r2
 800a904:	4618      	mov	r0, r3
 800a906:	f7f8 fefd 	bl	8003704 <HAL_PCD_EP_ClrStall>
 800a90a:	4603      	mov	r3, r0
 800a90c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a90e:	7bfb      	ldrb	r3, [r7, #15]
 800a910:	4618      	mov	r0, r3
 800a912:	f000 f8bf 	bl	800aa94 <USBD_Get_USB_Status>
 800a916:	4603      	mov	r3, r0
 800a918:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a91a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a91c:	4618      	mov	r0, r3
 800a91e:	3710      	adds	r7, #16
 800a920:	46bd      	mov	sp, r7
 800a922:	bd80      	pop	{r7, pc}

0800a924 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a924:	b480      	push	{r7}
 800a926:	b085      	sub	sp, #20
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
 800a92c:	460b      	mov	r3, r1
 800a92e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a936:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a938:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	da0b      	bge.n	800a958 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a940:	78fb      	ldrb	r3, [r7, #3]
 800a942:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a946:	68f9      	ldr	r1, [r7, #12]
 800a948:	4613      	mov	r3, r2
 800a94a:	00db      	lsls	r3, r3, #3
 800a94c:	4413      	add	r3, r2
 800a94e:	009b      	lsls	r3, r3, #2
 800a950:	440b      	add	r3, r1
 800a952:	3316      	adds	r3, #22
 800a954:	781b      	ldrb	r3, [r3, #0]
 800a956:	e00b      	b.n	800a970 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a958:	78fb      	ldrb	r3, [r7, #3]
 800a95a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a95e:	68f9      	ldr	r1, [r7, #12]
 800a960:	4613      	mov	r3, r2
 800a962:	00db      	lsls	r3, r3, #3
 800a964:	4413      	add	r3, r2
 800a966:	009b      	lsls	r3, r3, #2
 800a968:	440b      	add	r3, r1
 800a96a:	f203 2356 	addw	r3, r3, #598	; 0x256
 800a96e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a970:	4618      	mov	r0, r3
 800a972:	3714      	adds	r7, #20
 800a974:	46bd      	mov	sp, r7
 800a976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97a:	4770      	bx	lr

0800a97c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b084      	sub	sp, #16
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
 800a984:	460b      	mov	r3, r1
 800a986:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a988:	2300      	movs	r3, #0
 800a98a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a98c:	2300      	movs	r3, #0
 800a98e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a996:	78fa      	ldrb	r2, [r7, #3]
 800a998:	4611      	mov	r1, r2
 800a99a:	4618      	mov	r0, r3
 800a99c:	f7f8 fcec 	bl	8003378 <HAL_PCD_SetAddress>
 800a9a0:	4603      	mov	r3, r0
 800a9a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9a4:	7bfb      	ldrb	r3, [r7, #15]
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	f000 f874 	bl	800aa94 <USBD_Get_USB_Status>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	3710      	adds	r7, #16
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	bd80      	pop	{r7, pc}

0800a9ba <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a9ba:	b580      	push	{r7, lr}
 800a9bc:	b086      	sub	sp, #24
 800a9be:	af00      	add	r7, sp, #0
 800a9c0:	60f8      	str	r0, [r7, #12]
 800a9c2:	607a      	str	r2, [r7, #4]
 800a9c4:	603b      	str	r3, [r7, #0]
 800a9c6:	460b      	mov	r3, r1
 800a9c8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a9d8:	7af9      	ldrb	r1, [r7, #11]
 800a9da:	683b      	ldr	r3, [r7, #0]
 800a9dc:	687a      	ldr	r2, [r7, #4]
 800a9de:	f7f8 fdf4 	bl	80035ca <HAL_PCD_EP_Transmit>
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9e6:	7dfb      	ldrb	r3, [r7, #23]
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	f000 f853 	bl	800aa94 <USBD_Get_USB_Status>
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a9f2:	7dbb      	ldrb	r3, [r7, #22]
}
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	3718      	adds	r7, #24
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	bd80      	pop	{r7, pc}

0800a9fc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b086      	sub	sp, #24
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	60f8      	str	r0, [r7, #12]
 800aa04:	607a      	str	r2, [r7, #4]
 800aa06:	603b      	str	r3, [r7, #0]
 800aa08:	460b      	mov	r3, r1
 800aa0a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa10:	2300      	movs	r3, #0
 800aa12:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800aa1a:	7af9      	ldrb	r1, [r7, #11]
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	687a      	ldr	r2, [r7, #4]
 800aa20:	f7f8 fd80 	bl	8003524 <HAL_PCD_EP_Receive>
 800aa24:	4603      	mov	r3, r0
 800aa26:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa28:	7dfb      	ldrb	r3, [r7, #23]
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	f000 f832 	bl	800aa94 <USBD_Get_USB_Status>
 800aa30:	4603      	mov	r3, r0
 800aa32:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800aa34:	7dbb      	ldrb	r3, [r7, #22]
}
 800aa36:	4618      	mov	r0, r3
 800aa38:	3718      	adds	r7, #24
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bd80      	pop	{r7, pc}

0800aa3e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa3e:	b580      	push	{r7, lr}
 800aa40:	b082      	sub	sp, #8
 800aa42:	af00      	add	r7, sp, #0
 800aa44:	6078      	str	r0, [r7, #4]
 800aa46:	460b      	mov	r3, r1
 800aa48:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800aa50:	78fa      	ldrb	r2, [r7, #3]
 800aa52:	4611      	mov	r1, r2
 800aa54:	4618      	mov	r0, r3
 800aa56:	f7f8 fda0 	bl	800359a <HAL_PCD_EP_GetRxCount>
 800aa5a:	4603      	mov	r3, r0
}
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	3708      	adds	r7, #8
 800aa60:	46bd      	mov	sp, r7
 800aa62:	bd80      	pop	{r7, pc}

0800aa64 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800aa64:	b480      	push	{r7}
 800aa66:	b083      	sub	sp, #12
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800aa6c:	4b03      	ldr	r3, [pc, #12]	; (800aa7c <USBD_static_malloc+0x18>)
}
 800aa6e:	4618      	mov	r0, r3
 800aa70:	370c      	adds	r7, #12
 800aa72:	46bd      	mov	sp, r7
 800aa74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa78:	4770      	bx	lr
 800aa7a:	bf00      	nop
 800aa7c:	20005aa4 	.word	0x20005aa4

0800aa80 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800aa80:	b480      	push	{r7}
 800aa82:	b083      	sub	sp, #12
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]

}
 800aa88:	bf00      	nop
 800aa8a:	370c      	adds	r7, #12
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa92:	4770      	bx	lr

0800aa94 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800aa94:	b480      	push	{r7}
 800aa96:	b085      	sub	sp, #20
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800aaa2:	79fb      	ldrb	r3, [r7, #7]
 800aaa4:	2b03      	cmp	r3, #3
 800aaa6:	d817      	bhi.n	800aad8 <USBD_Get_USB_Status+0x44>
 800aaa8:	a201      	add	r2, pc, #4	; (adr r2, 800aab0 <USBD_Get_USB_Status+0x1c>)
 800aaaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaae:	bf00      	nop
 800aab0:	0800aac1 	.word	0x0800aac1
 800aab4:	0800aac7 	.word	0x0800aac7
 800aab8:	0800aacd 	.word	0x0800aacd
 800aabc:	0800aad3 	.word	0x0800aad3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800aac0:	2300      	movs	r3, #0
 800aac2:	73fb      	strb	r3, [r7, #15]
    break;
 800aac4:	e00b      	b.n	800aade <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800aac6:	2303      	movs	r3, #3
 800aac8:	73fb      	strb	r3, [r7, #15]
    break;
 800aaca:	e008      	b.n	800aade <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800aacc:	2301      	movs	r3, #1
 800aace:	73fb      	strb	r3, [r7, #15]
    break;
 800aad0:	e005      	b.n	800aade <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800aad2:	2303      	movs	r3, #3
 800aad4:	73fb      	strb	r3, [r7, #15]
    break;
 800aad6:	e002      	b.n	800aade <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800aad8:	2303      	movs	r3, #3
 800aada:	73fb      	strb	r3, [r7, #15]
    break;
 800aadc:	bf00      	nop
  }
  return usb_status;
 800aade:	7bfb      	ldrb	r3, [r7, #15]
}
 800aae0:	4618      	mov	r0, r3
 800aae2:	3714      	adds	r7, #20
 800aae4:	46bd      	mov	sp, r7
 800aae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaea:	4770      	bx	lr

0800aaec <toggle_led_green>:
#include "blinky_task.h"

#include "main.h"
#include "timer_task.h"

int32_t toggle_led_green(void *argc){
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b082      	sub	sp, #8
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 800aaf4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800aaf8:	4803      	ldr	r0, [pc, #12]	; (800ab08 <toggle_led_green+0x1c>)
 800aafa:	f7f7 fe3e 	bl	800277a <HAL_GPIO_TogglePin>
	return 0;
 800aafe:	2300      	movs	r3, #0
}
 800ab00:	4618      	mov	r0, r3
 800ab02:	3708      	adds	r7, #8
 800ab04:	46bd      	mov	sp, r7
 800ab06:	bd80      	pop	{r7, pc}
 800ab08:	40021400 	.word	0x40021400

0800ab0c <blinky_task>:

void blinky_task (void const *argument){
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b084      	sub	sp, #16
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
	uint32_t t = osKernelSysTick();
 800ab14:	f7fe f81f 	bl	8008b56 <osKernelSysTick>
 800ab18:	4603      	mov	r3, r0
 800ab1a:	60bb      	str	r3, [r7, #8]
	uint32_t period = 100;
 800ab1c:	2364      	movs	r3, #100	; 0x64
 800ab1e:	60fb      	str	r3, [r7, #12]

	soft_timer_register(toggle_led_green, NULL, 1000);
 800ab20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ab24:	2100      	movs	r1, #0
 800ab26:	482a      	ldr	r0, [pc, #168]	; (800abd0 <blinky_task+0xc4>)
 800ab28:	f000 f9ce 	bl	800aec8 <soft_timer_register>

	 for(;;){
		HAL_GPIO_TogglePin(LED_A_GPIO_Port, LED_A_Pin);
 800ab2c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ab30:	4828      	ldr	r0, [pc, #160]	; (800abd4 <blinky_task+0xc8>)
 800ab32:	f7f7 fe22 	bl	800277a <HAL_GPIO_TogglePin>
		osDelayUntil(&t, period);
 800ab36:	f107 0308 	add.w	r3, r7, #8
 800ab3a:	68f9      	ldr	r1, [r7, #12]
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	f7fe f855 	bl	8008bec <osDelayUntil>

		HAL_GPIO_TogglePin(LED_B_GPIO_Port, LED_B_Pin);
 800ab42:	2180      	movs	r1, #128	; 0x80
 800ab44:	4823      	ldr	r0, [pc, #140]	; (800abd4 <blinky_task+0xc8>)
 800ab46:	f7f7 fe18 	bl	800277a <HAL_GPIO_TogglePin>
		osDelayUntil(&t, period);
 800ab4a:	f107 0308 	add.w	r3, r7, #8
 800ab4e:	68f9      	ldr	r1, [r7, #12]
 800ab50:	4618      	mov	r0, r3
 800ab52:	f7fe f84b 	bl	8008bec <osDelayUntil>

		HAL_GPIO_TogglePin(LED_C_GPIO_Port, LED_C_Pin);
 800ab56:	2140      	movs	r1, #64	; 0x40
 800ab58:	481e      	ldr	r0, [pc, #120]	; (800abd4 <blinky_task+0xc8>)
 800ab5a:	f7f7 fe0e 	bl	800277a <HAL_GPIO_TogglePin>
		osDelayUntil(&t, period);
 800ab5e:	f107 0308 	add.w	r3, r7, #8
 800ab62:	68f9      	ldr	r1, [r7, #12]
 800ab64:	4618      	mov	r0, r3
 800ab66:	f7fe f841 	bl	8008bec <osDelayUntil>

		HAL_GPIO_TogglePin(LED_D_GPIO_Port, LED_D_Pin);
 800ab6a:	2120      	movs	r1, #32
 800ab6c:	4819      	ldr	r0, [pc, #100]	; (800abd4 <blinky_task+0xc8>)
 800ab6e:	f7f7 fe04 	bl	800277a <HAL_GPIO_TogglePin>
		osDelayUntil(&t, period);
 800ab72:	f107 0308 	add.w	r3, r7, #8
 800ab76:	68f9      	ldr	r1, [r7, #12]
 800ab78:	4618      	mov	r0, r3
 800ab7a:	f7fe f837 	bl	8008bec <osDelayUntil>

		HAL_GPIO_TogglePin(LED_E_GPIO_Port, LED_E_Pin);
 800ab7e:	2110      	movs	r1, #16
 800ab80:	4814      	ldr	r0, [pc, #80]	; (800abd4 <blinky_task+0xc8>)
 800ab82:	f7f7 fdfa 	bl	800277a <HAL_GPIO_TogglePin>
		osDelayUntil(&t, period);
 800ab86:	f107 0308 	add.w	r3, r7, #8
 800ab8a:	68f9      	ldr	r1, [r7, #12]
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	f7fe f82d 	bl	8008bec <osDelayUntil>

		HAL_GPIO_TogglePin(LED_F_GPIO_Port, LED_F_Pin);
 800ab92:	2108      	movs	r1, #8
 800ab94:	480f      	ldr	r0, [pc, #60]	; (800abd4 <blinky_task+0xc8>)
 800ab96:	f7f7 fdf0 	bl	800277a <HAL_GPIO_TogglePin>
		osDelayUntil(&t, period);
 800ab9a:	f107 0308 	add.w	r3, r7, #8
 800ab9e:	68f9      	ldr	r1, [r7, #12]
 800aba0:	4618      	mov	r0, r3
 800aba2:	f7fe f823 	bl	8008bec <osDelayUntil>

		HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
 800aba6:	2104      	movs	r1, #4
 800aba8:	480a      	ldr	r0, [pc, #40]	; (800abd4 <blinky_task+0xc8>)
 800abaa:	f7f7 fde6 	bl	800277a <HAL_GPIO_TogglePin>
		osDelayUntil(&t, period);
 800abae:	f107 0308 	add.w	r3, r7, #8
 800abb2:	68f9      	ldr	r1, [r7, #12]
 800abb4:	4618      	mov	r0, r3
 800abb6:	f7fe f819 	bl	8008bec <osDelayUntil>

		HAL_GPIO_TogglePin(LED_H_GPIO_Port, LED_H_Pin);
 800abba:	2102      	movs	r1, #2
 800abbc:	4805      	ldr	r0, [pc, #20]	; (800abd4 <blinky_task+0xc8>)
 800abbe:	f7f7 fddc 	bl	800277a <HAL_GPIO_TogglePin>
		osDelayUntil(&t, period);
 800abc2:	f107 0308 	add.w	r3, r7, #8
 800abc6:	68f9      	ldr	r1, [r7, #12]
 800abc8:	4618      	mov	r0, r3
 800abca:	f7fe f80f 	bl	8008bec <osDelayUntil>
		HAL_GPIO_TogglePin(LED_A_GPIO_Port, LED_A_Pin);
 800abce:	e7ad      	b.n	800ab2c <blinky_task+0x20>
 800abd0:	0800aaed 	.word	0x0800aaed
 800abd4:	40021800 	.word	0x40021800

0800abd8 <hw_init>:

osThreadId timer_task_t;
osThreadId blinky_task_t;
osThreadId motor_task_t;

void hw_init() { motor_task_init(); }
 800abd8:	b580      	push	{r7, lr}
 800abda:	af00      	add	r7, sp, #0
 800abdc:	f000 f890 	bl	800ad00 <motor_task_init>
 800abe0:	bf00      	nop
 800abe2:	bd80      	pop	{r7, pc}

0800abe4 <init_task>:

void init_task() {
 800abe4:	b5b0      	push	{r4, r5, r7, lr}
 800abe6:	b090      	sub	sp, #64	; 0x40
 800abe8:	af00      	add	r7, sp, #0
  osThreadDef(TIMER_1MS, timer_task, osPriorityRealtime, 0, 512);
 800abea:	4b1a      	ldr	r3, [pc, #104]	; (800ac54 <init_task+0x70>)
 800abec:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 800abf0:	461d      	mov	r5, r3
 800abf2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800abf4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800abf6:	682b      	ldr	r3, [r5, #0]
 800abf8:	6023      	str	r3, [r4, #0]
  timer_task_t = osThreadCreate(osThread(TIMER_1MS), NULL);
 800abfa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800abfe:	2100      	movs	r1, #0
 800ac00:	4618      	mov	r0, r3
 800ac02:	f7fd ffb8 	bl	8008b76 <osThreadCreate>
 800ac06:	4603      	mov	r3, r0
 800ac08:	4a13      	ldr	r2, [pc, #76]	; (800ac58 <init_task+0x74>)
 800ac0a:	6013      	str	r3, [r2, #0]

  osThreadDef(BLINKY_TASK, blinky_task, osPriorityIdle, 0, 64);
 800ac0c:	4b13      	ldr	r3, [pc, #76]	; (800ac5c <init_task+0x78>)
 800ac0e:	f107 0418 	add.w	r4, r7, #24
 800ac12:	461d      	mov	r5, r3
 800ac14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ac16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ac18:	682b      	ldr	r3, [r5, #0]
 800ac1a:	6023      	str	r3, [r4, #0]
  blinky_task_t = osThreadCreate(osThread(BLINKY_TASK), NULL);
 800ac1c:	f107 0318 	add.w	r3, r7, #24
 800ac20:	2100      	movs	r1, #0
 800ac22:	4618      	mov	r0, r3
 800ac24:	f7fd ffa7 	bl	8008b76 <osThreadCreate>
 800ac28:	4603      	mov	r3, r0
 800ac2a:	4a0d      	ldr	r2, [pc, #52]	; (800ac60 <init_task+0x7c>)
 800ac2c:	6013      	str	r3, [r2, #0]

  osThreadDef(MOTOR_TASK, motor_task, osPriorityNormal, 0, 512);
 800ac2e:	4b0d      	ldr	r3, [pc, #52]	; (800ac64 <init_task+0x80>)
 800ac30:	1d3c      	adds	r4, r7, #4
 800ac32:	461d      	mov	r5, r3
 800ac34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ac36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ac38:	682b      	ldr	r3, [r5, #0]
 800ac3a:	6023      	str	r3, [r4, #0]
  motor_task_t = osThreadCreate(osThread(MOTOR_TASK), NULL);
 800ac3c:	1d3b      	adds	r3, r7, #4
 800ac3e:	2100      	movs	r1, #0
 800ac40:	4618      	mov	r0, r3
 800ac42:	f7fd ff98 	bl	8008b76 <osThreadCreate>
 800ac46:	4603      	mov	r3, r0
 800ac48:	4a07      	ldr	r2, [pc, #28]	; (800ac68 <init_task+0x84>)
 800ac4a:	6013      	str	r3, [r2, #0]
}
 800ac4c:	bf00      	nop
 800ac4e:	3740      	adds	r7, #64	; 0x40
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bdb0      	pop	{r4, r5, r7, pc}
 800ac54:	0800cc68 	.word	0x0800cc68
 800ac58:	20005cc4 	.word	0x20005cc4
 800ac5c:	0800cc88 	.word	0x0800cc88
 800ac60:	20005cc8 	.word	0x20005cc8
 800ac64:	0800cca8 	.word	0x0800cca8
 800ac68:	20005ccc 	.word	0x20005ccc

0800ac6c <motor_can1_output_1ms>:
// source: infantry_cmd_task
struct motor_cluster_info cmd_motor_cluster_info;

// soft timer callback
// source: board.c
int32_t motor_can1_output_1ms(void *argc) {
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b082      	sub	sp, #8
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
  motor_device_can_output(DEVICE_CAN1); // from motor.c
 800ac74:	2000      	movs	r0, #0
 800ac76:	f000 fecd 	bl	800ba14 <motor_device_can_output>
  return 0;
 800ac7a:	2300      	movs	r3, #0
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	3708      	adds	r7, #8
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bd80      	pop	{r7, pc}

0800ac84 <motor_canstd_send>:

struct can_msg test_can_msg;
/// sends the can message
int32_t motor_canstd_send(enum device_can can, struct can_msg msg) {
 800ac84:	b084      	sub	sp, #16
 800ac86:	b590      	push	{r4, r7, lr}
 800ac88:	b083      	sub	sp, #12
 800ac8a:	af00      	add	r7, sp, #0
 800ac8c:	4604      	mov	r4, r0
 800ac8e:	f107 001c 	add.w	r0, r7, #28
 800ac92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800ac96:	4623      	mov	r3, r4
 800ac98:	71fb      	strb	r3, [r7, #7]
  test_can_msg = msg;
 800ac9a:	4b0e      	ldr	r3, [pc, #56]	; (800acd4 <motor_canstd_send+0x50>)
 800ac9c:	461c      	mov	r4, r3
 800ac9e:	f107 031c 	add.w	r3, r7, #28
 800aca2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800aca4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  //  data[3] = current;
  //  data[4] = current >> 8;
  //  data[5] = current;
  //  data[6] = current >> 8;
  //  data[7] = current;
  can_msg_bytes_send(&hcan1, msg.data, 8, msg.id);
 800aca8:	69fb      	ldr	r3, [r7, #28]
 800acaa:	f3c3 031c 	ubfx	r3, r3, #0, #29
 800acae:	b29a      	uxth	r2, r3
 800acb0:	f107 031c 	add.w	r3, r7, #28
 800acb4:	f103 0108 	add.w	r1, r3, #8
 800acb8:	4613      	mov	r3, r2
 800acba:	2208      	movs	r2, #8
 800acbc:	4806      	ldr	r0, [pc, #24]	; (800acd8 <motor_canstd_send+0x54>)
 800acbe:	f000 f9a9 	bl	800b014 <can_msg_bytes_send>
  //  can_msg_bytes_send(&hcan1, data, 8, 0x200);
  return RM_OK;
 800acc2:	2300      	movs	r3, #0
}
 800acc4:	4618      	mov	r0, r3
 800acc6:	370c      	adds	r7, #12
 800acc8:	46bd      	mov	sp, r7
 800acca:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800acce:	b004      	add	sp, #16
 800acd0:	4770      	bx	lr
 800acd2:	bf00      	nop
 800acd4:	200060dc 	.word	0x200060dc
 800acd8:	2000019c 	.word	0x2000019c

0800acdc <can1_motor_msg_rec>:

/// receives the can message
int32_t can1_motor_msg_rec(CAN_RxHeaderTypeDef *header, uint8_t *data) {
 800acdc:	b580      	push	{r7, lr}
 800acde:	b082      	sub	sp, #8
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
 800ace4:	6039      	str	r1, [r7, #0]
  motor_device_data_update(DEVICE_CAN1, header->StdId, data); // from motor.c
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	b29b      	uxth	r3, r3
 800acec:	683a      	ldr	r2, [r7, #0]
 800acee:	4619      	mov	r1, r3
 800acf0:	2000      	movs	r0, #0
 800acf2:	f000 ff85 	bl	800bc00 <motor_device_data_update>
  return RM_OK;
 800acf6:	2300      	movs	r3, #0
}
 800acf8:	4618      	mov	r0, r3
 800acfa:	3708      	adds	r7, #8
 800acfc:	46bd      	mov	sp, r7
 800acfe:	bd80      	pop	{r7, pc}

0800ad00 <motor_task_init>:

void motor_task_init(void) {
 800ad00:	b580      	push	{r7, lr}
 800ad02:	af00      	add	r7, sp, #0
  // Enable the motors
  HAL_GPIO_WritePin(POWER1_CTRL_GPIO_Port, POWER1_CTRL_Pin, SET);
 800ad04:	2201      	movs	r2, #1
 800ad06:	2104      	movs	r1, #4
 800ad08:	4815      	ldr	r0, [pc, #84]	; (800ad60 <motor_task_init+0x60>)
 800ad0a:	f7f7 fd1d 	bl	8002748 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(POWER2_CTRL_GPIO_Port, POWER2_CTRL_Pin, SET);
 800ad0e:	2201      	movs	r2, #1
 800ad10:	2108      	movs	r1, #8
 800ad12:	4813      	ldr	r0, [pc, #76]	; (800ad60 <motor_task_init+0x60>)
 800ad14:	f7f7 fd18 	bl	8002748 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(POWER3_CTRL_GPIO_Port, POWER3_CTRL_Pin, SET);
 800ad18:	2201      	movs	r2, #1
 800ad1a:	2110      	movs	r1, #16
 800ad1c:	4810      	ldr	r0, [pc, #64]	; (800ad60 <motor_task_init+0x60>)
 800ad1e:	f7f7 fd13 	bl	8002748 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(POWER4_CTRL_GPIO_Port, POWER4_CTRL_Pin, SET);
 800ad22:	2201      	movs	r2, #1
 800ad24:	2120      	movs	r1, #32
 800ad26:	480e      	ldr	r0, [pc, #56]	; (800ad60 <motor_task_init+0x60>)
 800ad28:	f7f7 fd0e 	bl	8002748 <HAL_GPIO_WritePin>

  // board.c -> board_config()
  soft_timer_init();
 800ad2c:	f001 fd82 	bl	800c834 <soft_timer_init>
  can_manage_init();
 800ad30:	f000 f90a 	bl	800af48 <can_manage_init>
  soft_timer_register(motor_can1_output_1ms, NULL, 1);
 800ad34:	2201      	movs	r2, #1
 800ad36:	2100      	movs	r1, #0
 800ad38:	480a      	ldr	r0, [pc, #40]	; (800ad64 <motor_task_init+0x64>)
 800ad3a:	f000 f8c5 	bl	800aec8 <soft_timer_register>

  motor_device_can_send_register(motor_canstd_send); // from motor.c
 800ad3e:	480a      	ldr	r0, [pc, #40]	; (800ad68 <motor_task_init+0x68>)
 800ad40:	f000 fde4 	bl	800b90c <motor_device_can_send_register>
  can_fifo0_rx_callback_register(&can1_manage,
 800ad44:	4909      	ldr	r1, [pc, #36]	; (800ad6c <motor_task_init+0x6c>)
 800ad46:	480a      	ldr	r0, [pc, #40]	; (800ad70 <motor_task_init+0x70>)
 800ad48:	f000 fa10 	bl	800b16c <can_fifo0_rx_callback_register>
                                 can1_motor_msg_rec); // from drv_can.c

  // init.c
  motor_cluster_pid_register(&motor_cluster, "motor_cluster",
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	4909      	ldr	r1, [pc, #36]	; (800ad74 <motor_task_init+0x74>)
 800ad50:	4809      	ldr	r0, [pc, #36]	; (800ad78 <motor_task_init+0x78>)
 800ad52:	f001 f835 	bl	800bdc0 <motor_cluster_pid_register>
                             DEVICE_CAN1); // from motor_cluster.c
  motor_cluster_disable(&motor_cluster);   // from motor_cluster.c
 800ad56:	4808      	ldr	r0, [pc, #32]	; (800ad78 <motor_task_init+0x78>)
 800ad58:	f001 fadb 	bl	800c312 <motor_cluster_disable>
}
 800ad5c:	bf00      	nop
 800ad5e:	bd80      	pop	{r7, pc}
 800ad60:	40021c00 	.word	0x40021c00
 800ad64:	0800ac6d 	.word	0x0800ac6d
 800ad68:	0800ac85 	.word	0x0800ac85
 800ad6c:	0800acdd 	.word	0x0800acdd
 800ad70:	2000621c 	.word	0x2000621c
 800ad74:	0800ccbc 	.word	0x0800ccbc
 800ad78:	20005cd0 	.word	0x20005cd0

0800ad7c <motor_cluster_push_info>:

int32_t motor_cluster_push_info(void *argc) {
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b088      	sub	sp, #32
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
  struct motor_cluster_info info;
  motor_cluster_t pmotor_cluster = (motor_cluster_t)argc;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	61fb      	str	r3, [r7, #28]
  motor_cluster_get_info(pmotor_cluster, &info);
 800ad88:	f107 030c 	add.w	r3, r7, #12
 800ad8c:	4619      	mov	r1, r3
 800ad8e:	69f8      	ldr	r0, [r7, #28]
 800ad90:	f001 fa66 	bl	800c260 <motor_cluster_get_info>

  cmd_motor_cluster_info.wheel_rpm[0] = info.wheel_rpm[0];
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	4a08      	ldr	r2, [pc, #32]	; (800adb8 <motor_cluster_push_info+0x3c>)
 800ad98:	6013      	str	r3, [r2, #0]
  cmd_motor_cluster_info.wheel_rpm[1] = info.wheel_rpm[1];
 800ad9a:	693b      	ldr	r3, [r7, #16]
 800ad9c:	4a06      	ldr	r2, [pc, #24]	; (800adb8 <motor_cluster_push_info+0x3c>)
 800ad9e:	6053      	str	r3, [r2, #4]
  cmd_motor_cluster_info.wheel_rpm[2] = info.wheel_rpm[2];
 800ada0:	697b      	ldr	r3, [r7, #20]
 800ada2:	4a05      	ldr	r2, [pc, #20]	; (800adb8 <motor_cluster_push_info+0x3c>)
 800ada4:	6093      	str	r3, [r2, #8]
  cmd_motor_cluster_info.wheel_rpm[3] = info.wheel_rpm[3];
 800ada6:	69bb      	ldr	r3, [r7, #24]
 800ada8:	4a03      	ldr	r2, [pc, #12]	; (800adb8 <motor_cluster_push_info+0x3c>)
 800adaa:	60d3      	str	r3, [r2, #12]

  return 0;
 800adac:	2300      	movs	r3, #0
}
 800adae:	4618      	mov	r0, r3
 800adb0:	3720      	adds	r7, #32
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bd80      	pop	{r7, pc}
 800adb6:	bf00      	nop
 800adb8:	200060cc 	.word	0x200060cc

0800adbc <motor_task>:

// source: chassis_task
void motor_task(void const *argument) {
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b084      	sub	sp, #16
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
  uint32_t period = osKernelSysTick();
 800adc4:	f7fd fec7 	bl	8008b56 <osKernelSysTick>
 800adc8:	4603      	mov	r3, r0
 800adca:	60bb      	str	r3, [r7, #8]
  motor_cluster_t pmotor_cluster = NULL;
 800adcc:	2300      	movs	r3, #0
 800adce:	60fb      	str	r3, [r7, #12]
  pmotor_cluster = motor_cluster_find("motor_cluster");
 800add0:	4810      	ldr	r0, [pc, #64]	; (800ae14 <motor_task+0x58>)
 800add2:	f001 fa6b 	bl	800c2ac <motor_cluster_find>
 800add6:	60f8      	str	r0, [r7, #12]

  soft_timer_register(motor_cluster_push_info, (void *)pmotor_cluster, 10);
 800add8:	220a      	movs	r2, #10
 800adda:	68f9      	ldr	r1, [r7, #12]
 800addc:	480e      	ldr	r0, [pc, #56]	; (800ae18 <motor_task+0x5c>)
 800adde:	f000 f873 	bl	800aec8 <soft_timer_register>
  motor_cluster_enable(pmotor_cluster);
 800ade2:	68f8      	ldr	r0, [r7, #12]
 800ade4:	f001 fa70 	bl	800c2c8 <motor_cluster_enable>

  for (;;) {

    motor_cluster_set_rpm(pmotor_cluster, 100, 100, 100, 100);
 800ade8:	eddf 1a0c 	vldr	s3, [pc, #48]	; 800ae1c <motor_task+0x60>
 800adec:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 800ae1c <motor_task+0x60>
 800adf0:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800ae1c <motor_task+0x60>
 800adf4:	ed9f 0a09 	vldr	s0, [pc, #36]	; 800ae1c <motor_task+0x60>
 800adf8:	68f8      	ldr	r0, [r7, #12]
 800adfa:	f001 fa0c 	bl	800c216 <motor_cluster_set_rpm>

    motor_cluster_execute(pmotor_cluster);
 800adfe:	68f8      	ldr	r0, [r7, #12]
 800ae00:	f001 f988 	bl	800c114 <motor_cluster_execute>
    osDelayUntil(&period, 2);
 800ae04:	f107 0308 	add.w	r3, r7, #8
 800ae08:	2102      	movs	r1, #2
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	f7fd feee 	bl	8008bec <osDelayUntil>
    motor_cluster_set_rpm(pmotor_cluster, 100, 100, 100, 100);
 800ae10:	e7ea      	b.n	800ade8 <motor_task+0x2c>
 800ae12:	bf00      	nop
 800ae14:	0800ccbc 	.word	0x0800ccbc
 800ae18:	0800ad7d 	.word	0x0800ad7d
 800ae1c:	42c80000 	.word	0x42c80000

0800ae20 <timer_task>:
 * The function runs in an infinite loop and delays for a specified period.
 * 
 * @param argument Pointer to the task argument (not used in this function).
 */
void timer_task(void const *argument)
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b084      	sub	sp, #16
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
  uint32_t period = osKernelSysTick();
 800ae28:	f7fd fe95 	bl	8008b56 <osKernelSysTick>
 800ae2c:	4603      	mov	r3, r0
 800ae2e:	60bb      	str	r3, [r7, #8]

  while (1)
  {
    TimerISR_Hook();
 800ae30:	f001 fcd4 	bl	800c7dc <TimerISR_Hook>

    for (int i = 0; i < TIMER_ELEMENT_NUM_MAX - 1; i++)
 800ae34:	2300      	movs	r3, #0
 800ae36:	60fb      	str	r3, [r7, #12]
 800ae38:	e03a      	b.n	800aeb0 <timer_task+0x90>
    {
      if ((soft_timer[i].id != 0) && (soft_timer[i].soft_timer_callback != NULL))
 800ae3a:	4a22      	ldr	r2, [pc, #136]	; (800aec4 <timer_task+0xa4>)
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	011b      	lsls	r3, r3, #4
 800ae40:	4413      	add	r3, r2
 800ae42:	781b      	ldrb	r3, [r3, #0]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d030      	beq.n	800aeaa <timer_task+0x8a>
 800ae48:	4a1e      	ldr	r2, [pc, #120]	; (800aec4 <timer_task+0xa4>)
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	011b      	lsls	r3, r3, #4
 800ae4e:	4413      	add	r3, r2
 800ae50:	330c      	adds	r3, #12
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d028      	beq.n	800aeaa <timer_task+0x8a>
      {
        if (soft_timer_check(soft_timer[i].id) == SOFT_TIMER_TIMEOUT)
 800ae58:	4a1a      	ldr	r2, [pc, #104]	; (800aec4 <timer_task+0xa4>)
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	011b      	lsls	r3, r3, #4
 800ae5e:	4413      	add	r3, r2
 800ae60:	781b      	ldrb	r3, [r3, #0]
 800ae62:	b29b      	uxth	r3, r3
 800ae64:	4618      	mov	r0, r3
 800ae66:	f001 fd75 	bl	800c954 <soft_timer_check>
 800ae6a:	4603      	mov	r3, r0
 800ae6c:	2b02      	cmp	r3, #2
 800ae6e:	d11c      	bne.n	800aeaa <timer_task+0x8a>
        {
          soft_timer[i].soft_timer_callback(soft_timer[i].argc);
 800ae70:	4a14      	ldr	r2, [pc, #80]	; (800aec4 <timer_task+0xa4>)
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	011b      	lsls	r3, r3, #4
 800ae76:	4413      	add	r3, r2
 800ae78:	330c      	adds	r3, #12
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	4911      	ldr	r1, [pc, #68]	; (800aec4 <timer_task+0xa4>)
 800ae7e:	68fa      	ldr	r2, [r7, #12]
 800ae80:	0112      	lsls	r2, r2, #4
 800ae82:	440a      	add	r2, r1
 800ae84:	3208      	adds	r2, #8
 800ae86:	6812      	ldr	r2, [r2, #0]
 800ae88:	4610      	mov	r0, r2
 800ae8a:	4798      	blx	r3

          soft_timer_update(soft_timer[i].id, soft_timer[i].ticks);
 800ae8c:	4a0d      	ldr	r2, [pc, #52]	; (800aec4 <timer_task+0xa4>)
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	011b      	lsls	r3, r3, #4
 800ae92:	4413      	add	r3, r2
 800ae94:	781b      	ldrb	r3, [r3, #0]
 800ae96:	4618      	mov	r0, r3
 800ae98:	4a0a      	ldr	r2, [pc, #40]	; (800aec4 <timer_task+0xa4>)
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	011b      	lsls	r3, r3, #4
 800ae9e:	4413      	add	r3, r2
 800aea0:	3304      	adds	r3, #4
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	4619      	mov	r1, r3
 800aea6:	f001 fd21 	bl	800c8ec <soft_timer_update>
    for (int i = 0; i < TIMER_ELEMENT_NUM_MAX - 1; i++)
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	3301      	adds	r3, #1
 800aeae:	60fb      	str	r3, [r7, #12]
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	2b12      	cmp	r3, #18
 800aeb4:	ddc1      	ble.n	800ae3a <timer_task+0x1a>
        }
      }
    }

    osDelayUntil(&period, 1);
 800aeb6:	f107 0308 	add.w	r3, r7, #8
 800aeba:	2101      	movs	r1, #1
 800aebc:	4618      	mov	r0, r3
 800aebe:	f7fd fe95 	bl	8008bec <osDelayUntil>
    TimerISR_Hook();
 800aec2:	e7b5      	b.n	800ae30 <timer_task+0x10>
 800aec4:	200060ec 	.word	0x200060ec

0800aec8 <soft_timer_register>:
 *
 * @return                    The index of the registered timer element if successful,
 *                            or -1 if the registration fails (e.g., no available timer element).
 */
int32_t soft_timer_register(int32_t (*soft_timer_callback)(void *argc), void *argc, uint32_t ticks)
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b086      	sub	sp, #24
 800aecc:	af00      	add	r7, sp, #0
 800aece:	60f8      	str	r0, [r7, #12]
 800aed0:	60b9      	str	r1, [r7, #8]
 800aed2:	607a      	str	r2, [r7, #4]
  for (int i = 0; i < TIMER_ELEMENT_NUM_MAX - 1; i++)
 800aed4:	2300      	movs	r3, #0
 800aed6:	617b      	str	r3, [r7, #20]
 800aed8:	e02b      	b.n	800af32 <soft_timer_register+0x6a>
  {
    if (soft_timer[i].id == 0)
 800aeda:	4a1a      	ldr	r2, [pc, #104]	; (800af44 <soft_timer_register+0x7c>)
 800aedc:	697b      	ldr	r3, [r7, #20]
 800aede:	011b      	lsls	r3, r3, #4
 800aee0:	4413      	add	r3, r2
 800aee2:	781b      	ldrb	r3, [r3, #0]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d121      	bne.n	800af2c <soft_timer_register+0x64>
    {
      soft_timer[i].id = soft_timer_req(ticks);
 800aee8:	6878      	ldr	r0, [r7, #4]
 800aeea:	f001 fcc5 	bl	800c878 <soft_timer_req>
 800aeee:	4603      	mov	r3, r0
 800aef0:	b2d9      	uxtb	r1, r3
 800aef2:	4a14      	ldr	r2, [pc, #80]	; (800af44 <soft_timer_register+0x7c>)
 800aef4:	697b      	ldr	r3, [r7, #20]
 800aef6:	011b      	lsls	r3, r3, #4
 800aef8:	4413      	add	r3, r2
 800aefa:	460a      	mov	r2, r1
 800aefc:	701a      	strb	r2, [r3, #0]
      soft_timer[i].ticks = ticks;
 800aefe:	4a11      	ldr	r2, [pc, #68]	; (800af44 <soft_timer_register+0x7c>)
 800af00:	697b      	ldr	r3, [r7, #20]
 800af02:	011b      	lsls	r3, r3, #4
 800af04:	4413      	add	r3, r2
 800af06:	3304      	adds	r3, #4
 800af08:	687a      	ldr	r2, [r7, #4]
 800af0a:	601a      	str	r2, [r3, #0]
      soft_timer[i].argc = argc;
 800af0c:	4a0d      	ldr	r2, [pc, #52]	; (800af44 <soft_timer_register+0x7c>)
 800af0e:	697b      	ldr	r3, [r7, #20]
 800af10:	011b      	lsls	r3, r3, #4
 800af12:	4413      	add	r3, r2
 800af14:	3308      	adds	r3, #8
 800af16:	68ba      	ldr	r2, [r7, #8]
 800af18:	601a      	str	r2, [r3, #0]
      soft_timer[i].soft_timer_callback = soft_timer_callback;
 800af1a:	4a0a      	ldr	r2, [pc, #40]	; (800af44 <soft_timer_register+0x7c>)
 800af1c:	697b      	ldr	r3, [r7, #20]
 800af1e:	011b      	lsls	r3, r3, #4
 800af20:	4413      	add	r3, r2
 800af22:	330c      	adds	r3, #12
 800af24:	68fa      	ldr	r2, [r7, #12]
 800af26:	601a      	str	r2, [r3, #0]
      return i;
 800af28:	697b      	ldr	r3, [r7, #20]
 800af2a:	e007      	b.n	800af3c <soft_timer_register+0x74>
  for (int i = 0; i < TIMER_ELEMENT_NUM_MAX - 1; i++)
 800af2c:	697b      	ldr	r3, [r7, #20]
 800af2e:	3301      	adds	r3, #1
 800af30:	617b      	str	r3, [r7, #20]
 800af32:	697b      	ldr	r3, [r7, #20]
 800af34:	2b12      	cmp	r3, #18
 800af36:	ddd0      	ble.n	800aeda <soft_timer_register+0x12>
    }
  }
  return -1;
 800af38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800af3c:	4618      	mov	r0, r3
 800af3e:	3718      	adds	r7, #24
 800af40:	46bd      	mov	sp, r7
 800af42:	bd80      	pop	{r7, pc}
 800af44:	200060ec 	.word	0x200060ec

0800af48 <can_manage_init>:
struct can_manage_obj can1_manage;

static uint8_t can1_tx_fifo_buff[CAN1_TX_FIFO_SIZE];

void can_manage_init(void)
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b08c      	sub	sp, #48	; 0x30
 800af4c:	af00      	add	r7, sp, #0
  can1_manage.is_sending = 0;
 800af4e:	4b2d      	ldr	r3, [pc, #180]	; (800b004 <can_manage_init+0xbc>)
 800af50:	2200      	movs	r2, #0
 800af52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  can1_manage.hcan = &hcan1;
 800af56:	4b2b      	ldr	r3, [pc, #172]	; (800b004 <can_manage_init+0xbc>)
 800af58:	4a2b      	ldr	r2, [pc, #172]	; (800b008 <can_manage_init+0xc0>)
 800af5a:	601a      	str	r2, [r3, #0]

  for (int i = 0; i < MAX_CAN_REGISTER_NUM; i++)
 800af5c:	2300      	movs	r3, #0
 800af5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800af60:	e008      	b.n	800af74 <can_manage_init+0x2c>
  {
    can1_manage.can_rec_callback[i] = NULL;
 800af62:	4a28      	ldr	r2, [pc, #160]	; (800b004 <can_manage_init+0xbc>)
 800af64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af66:	330a      	adds	r3, #10
 800af68:	2100      	movs	r1, #0
 800af6a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (int i = 0; i < MAX_CAN_REGISTER_NUM; i++)
 800af6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af70:	3301      	adds	r3, #1
 800af72:	62fb      	str	r3, [r7, #44]	; 0x2c
 800af74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af76:	2b04      	cmp	r3, #4
 800af78:	ddf3      	ble.n	800af62 <can_manage_init+0x1a>
  }

  fifo_init(&(can1_manage.tx_fifo),
 800af7a:	2340      	movs	r3, #64	; 0x40
 800af7c:	2210      	movs	r2, #16
 800af7e:	4923      	ldr	r1, [pc, #140]	; (800b00c <can_manage_init+0xc4>)
 800af80:	4823      	ldr	r0, [pc, #140]	; (800b010 <can_manage_init+0xc8>)
 800af82:	f001 fb1e 	bl	800c5c2 <fifo_init>
            can1_tx_fifo_buff,
            sizeof(struct can_std_msg),
            CAN1_TX_FIFO_UNIT_NUM);

  CAN_FilterTypeDef can_filter_st;
  can_filter_st.FilterActivation = ENABLE;
 800af86:	2301      	movs	r3, #1
 800af88:	627b      	str	r3, [r7, #36]	; 0x24
  can_filter_st.FilterMode = CAN_FILTERMODE_IDMASK;
 800af8a:	2300      	movs	r3, #0
 800af8c:	61fb      	str	r3, [r7, #28]
  can_filter_st.FilterScale = CAN_FILTERSCALE_32BIT;
 800af8e:	2301      	movs	r3, #1
 800af90:	623b      	str	r3, [r7, #32]
  can_filter_st.FilterIdHigh = 0x0000;
 800af92:	2300      	movs	r3, #0
 800af94:	607b      	str	r3, [r7, #4]
  can_filter_st.FilterIdLow = 0x0000;
 800af96:	2300      	movs	r3, #0
 800af98:	60bb      	str	r3, [r7, #8]
  can_filter_st.FilterMaskIdHigh = 0x0000;
 800af9a:	2300      	movs	r3, #0
 800af9c:	60fb      	str	r3, [r7, #12]
  can_filter_st.FilterMaskIdLow = 0x0000;
 800af9e:	2300      	movs	r3, #0
 800afa0:	613b      	str	r3, [r7, #16]
  can_filter_st.FilterBank = 0;
 800afa2:	2300      	movs	r3, #0
 800afa4:	61bb      	str	r3, [r7, #24]
  can_filter_st.FilterFIFOAssignment = CAN_RX_FIFO0;
 800afa6:	2300      	movs	r3, #0
 800afa8:	617b      	str	r3, [r7, #20]
  HAL_CAN_ConfigFilter(&hcan1, &can_filter_st);
 800afaa:	1d3b      	adds	r3, r7, #4
 800afac:	4619      	mov	r1, r3
 800afae:	4816      	ldr	r0, [pc, #88]	; (800b008 <can_manage_init+0xc0>)
 800afb0:	f7f6 fba0 	bl	80016f4 <HAL_CAN_ConfigFilter>
  HAL_CAN_Start(&hcan1);
 800afb4:	4814      	ldr	r0, [pc, #80]	; (800b008 <can_manage_init+0xc0>)
 800afb6:	f7f6 fc7d 	bl	80018b4 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800afba:	2102      	movs	r1, #2
 800afbc:	4812      	ldr	r0, [pc, #72]	; (800b008 <can_manage_init+0xc0>)
 800afbe:	f7f6 fee4 	bl	8001d8a <HAL_CAN_ActivateNotification>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_TX_MAILBOX_EMPTY);
 800afc2:	2101      	movs	r1, #1
 800afc4:	4810      	ldr	r0, [pc, #64]	; (800b008 <can_manage_init+0xc0>)
 800afc6:	f7f6 fee0 	bl	8001d8a <HAL_CAN_ActivateNotification>

  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_ERROR);
 800afca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800afce:	480e      	ldr	r0, [pc, #56]	; (800b008 <can_manage_init+0xc0>)
 800afd0:	f7f6 fedb 	bl	8001d8a <HAL_CAN_ActivateNotification>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_ERROR_WARNING);
 800afd4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800afd8:	480b      	ldr	r0, [pc, #44]	; (800b008 <can_manage_init+0xc0>)
 800afda:	f7f6 fed6 	bl	8001d8a <HAL_CAN_ActivateNotification>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_BUSOFF);
 800afde:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800afe2:	4809      	ldr	r0, [pc, #36]	; (800b008 <can_manage_init+0xc0>)
 800afe4:	f7f6 fed1 	bl	8001d8a <HAL_CAN_ActivateNotification>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_ERROR_PASSIVE);
 800afe8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800afec:	4806      	ldr	r0, [pc, #24]	; (800b008 <can_manage_init+0xc0>)
 800afee:	f7f6 fecc 	bl	8001d8a <HAL_CAN_ActivateNotification>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_LAST_ERROR_CODE);
 800aff2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800aff6:	4804      	ldr	r0, [pc, #16]	; (800b008 <can_manage_init+0xc0>)
 800aff8:	f7f6 fec7 	bl	8001d8a <HAL_CAN_ActivateNotification>

  return;
 800affc:	bf00      	nop
}
 800affe:	3730      	adds	r7, #48	; 0x30
 800b000:	46bd      	mov	sp, r7
 800b002:	bd80      	pop	{r7, pc}
 800b004:	2000621c 	.word	0x2000621c
 800b008:	2000019c 	.word	0x2000019c
 800b00c:	20006258 	.word	0x20006258
 800b010:	20006220 	.word	0x20006220

0800b014 <can_msg_bytes_send>:

uint32_t can_msg_bytes_send(CAN_HandleTypeDef *hcan,
                            uint8_t *data, uint16_t len, uint16_t std_id)
{
 800b014:	b590      	push	{r4, r7, lr}
 800b016:	b093      	sub	sp, #76	; 0x4c
 800b018:	af00      	add	r7, sp, #0
 800b01a:	60f8      	str	r0, [r7, #12]
 800b01c:	60b9      	str	r1, [r7, #8]
 800b01e:	4611      	mov	r1, r2
 800b020:	461a      	mov	r2, r3
 800b022:	460b      	mov	r3, r1
 800b024:	80fb      	strh	r3, [r7, #6]
 800b026:	4613      	mov	r3, r2
 800b028:	80bb      	strh	r3, [r7, #4]
  uint8_t *send_ptr;
  uint16_t send_num;
  can_manage_obj_t m_obj;
  struct can_std_msg msg;

  send_ptr = data;
 800b02a:	68bb      	ldr	r3, [r7, #8]
 800b02c:	647b      	str	r3, [r7, #68]	; 0x44
  msg.std_id = std_id;
 800b02e:	88bb      	ldrh	r3, [r7, #4]
 800b030:	62fb      	str	r3, [r7, #44]	; 0x2c
  send_num = 0;
 800b032:	2300      	movs	r3, #0
 800b034:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  if (hcan == &hcan1)
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	4a4a      	ldr	r2, [pc, #296]	; (800b164 <can_msg_bytes_send+0x150>)
 800b03c:	4293      	cmp	r3, r2
 800b03e:	d102      	bne.n	800b046 <can_msg_bytes_send+0x32>
  {
    m_obj = &can1_manage;
 800b040:	4b49      	ldr	r3, [pc, #292]	; (800b168 <can_msg_bytes_send+0x154>)
 800b042:	63fb      	str	r3, [r7, #60]	; 0x3c
  else
  {
    return 0;
  }

  while (send_num < len)
 800b044:	e044      	b.n	800b0d0 <can_msg_bytes_send+0xbc>
    return 0;
 800b046:	2300      	movs	r3, #0
 800b048:	e088      	b.n	800b15c <can_msg_bytes_send+0x148>
  {
    if (fifo_is_full(&(m_obj->tx_fifo)))
 800b04a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b04c:	3304      	adds	r3, #4
 800b04e:	4618      	mov	r0, r3
 800b050:	f001 fbb2 	bl	800c7b8 <fifo_is_full>
 800b054:	4603      	mov	r3, r0
 800b056:	2b00      	cmp	r3, #0
 800b058:	d004      	beq.n	800b064 <can_msg_bytes_send+0x50>
    {
      //can is error
      m_obj->is_sending = 0;
 800b05a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b05c:	2200      	movs	r2, #0
 800b05e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      break;
 800b062:	e03a      	b.n	800b0da <can_msg_bytes_send+0xc6>
    }

    if (len - send_num >= 8)
 800b064:	88fa      	ldrh	r2, [r7, #6]
 800b066:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b06a:	1ad3      	subs	r3, r2, r3
 800b06c:	2b07      	cmp	r3, #7
 800b06e:	dd03      	ble.n	800b078 <can_msg_bytes_send+0x64>
    {
      msg.dlc = 8;
 800b070:	2308      	movs	r3, #8
 800b072:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 800b076:	e008      	b.n	800b08a <can_msg_bytes_send+0x76>
    }
    else
    {
      msg.dlc = len - send_num;
 800b078:	88fb      	ldrh	r3, [r7, #6]
 800b07a:	b2da      	uxtb	r2, r3
 800b07c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b080:	b2db      	uxtb	r3, r3
 800b082:	1ad3      	subs	r3, r2, r3
 800b084:	b2db      	uxtb	r3, r3
 800b086:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    }

    //memcpy(msg.data, data, msg.dlc);
    *((uint32_t *)(msg.data)) = *((uint32_t *)(send_ptr));
 800b08a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b08e:	3305      	adds	r3, #5
 800b090:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b092:	6812      	ldr	r2, [r2, #0]
 800b094:	601a      	str	r2, [r3, #0]
    *((uint32_t *)(msg.data + 4)) = *((uint32_t *)(send_ptr + 4));
 800b096:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b09a:	3305      	adds	r3, #5
 800b09c:	3304      	adds	r3, #4
 800b09e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b0a0:	6852      	ldr	r2, [r2, #4]
 800b0a2:	601a      	str	r2, [r3, #0]

    send_ptr += msg.dlc;
 800b0a4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800b0a8:	461a      	mov	r2, r3
 800b0aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b0ac:	4413      	add	r3, r2
 800b0ae:	647b      	str	r3, [r7, #68]	; 0x44
    send_num += msg.dlc;
 800b0b0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800b0b4:	b29a      	uxth	r2, r3
 800b0b6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b0ba:	4413      	add	r3, r2
 800b0bc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

    fifo_put(&(m_obj->tx_fifo), &msg);
 800b0c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0c2:	3304      	adds	r3, #4
 800b0c4:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800b0c8:	4611      	mov	r1, r2
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	f001 faa3 	bl	800c616 <fifo_put>
  while (send_num < len)
 800b0d0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b0d4:	88fb      	ldrh	r3, [r7, #6]
 800b0d6:	429a      	cmp	r2, r3
 800b0d8:	d3b7      	bcc.n	800b04a <can_msg_bytes_send+0x36>
  }

  if ((m_obj->is_sending) == 0 && (!(fifo_is_empty(&(m_obj->tx_fifo)))))
 800b0da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d139      	bne.n	800b158 <can_msg_bytes_send+0x144>
 800b0e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0e6:	3304      	adds	r3, #4
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	f001 fb54 	bl	800c796 <fifo_is_empty>
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d131      	bne.n	800b158 <can_msg_bytes_send+0x144>
  {
    CAN_TxHeaderTypeDef header;
    uint32_t send_mail_box;

    header.StdId = std_id;
 800b0f4:	88bb      	ldrh	r3, [r7, #4]
 800b0f6:	617b      	str	r3, [r7, #20]
    header.IDE = CAN_ID_STD;
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	61fb      	str	r3, [r7, #28]
    header.RTR = CAN_RTR_DATA;
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	623b      	str	r3, [r7, #32]

    while (HAL_CAN_GetTxMailboxesFreeLevel(m_obj->hcan) && (!(fifo_is_empty(&(m_obj->tx_fifo)))))
 800b100:	e01a      	b.n	800b138 <can_msg_bytes_send+0x124>
    {
      fifo_get(&(m_obj->tx_fifo), &msg);
 800b102:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b104:	3304      	adds	r3, #4
 800b106:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800b10a:	4611      	mov	r1, r2
 800b10c:	4618      	mov	r0, r3
 800b10e:	f001 fac8 	bl	800c6a2 <fifo_get>
      header.DLC = msg.dlc;
 800b112:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800b116:	627b      	str	r3, [r7, #36]	; 0x24
      HAL_CAN_AddTxMessage(m_obj->hcan, &header, msg.data, &send_mail_box);
 800b118:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b11a:	6818      	ldr	r0, [r3, #0]
 800b11c:	f107 0410 	add.w	r4, r7, #16
 800b120:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b124:	1d5a      	adds	r2, r3, #5
 800b126:	f107 0114 	add.w	r1, r7, #20
 800b12a:	4623      	mov	r3, r4
 800b12c:	f7f6 fc06 	bl	800193c <HAL_CAN_AddTxMessage>

      m_obj->is_sending = 1;
 800b130:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b132:	2201      	movs	r2, #1
 800b134:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    while (HAL_CAN_GetTxMailboxesFreeLevel(m_obj->hcan) && (!(fifo_is_empty(&(m_obj->tx_fifo)))))
 800b138:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	4618      	mov	r0, r3
 800b13e:	f7f6 fccd 	bl	8001adc <HAL_CAN_GetTxMailboxesFreeLevel>
 800b142:	4603      	mov	r3, r0
 800b144:	2b00      	cmp	r3, #0
 800b146:	d007      	beq.n	800b158 <can_msg_bytes_send+0x144>
 800b148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b14a:	3304      	adds	r3, #4
 800b14c:	4618      	mov	r0, r3
 800b14e:	f001 fb22 	bl	800c796 <fifo_is_empty>
 800b152:	4603      	mov	r3, r0
 800b154:	2b00      	cmp	r3, #0
 800b156:	d0d4      	beq.n	800b102 <can_msg_bytes_send+0xee>
    }
  }

  return send_num;
 800b158:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
}
 800b15c:	4618      	mov	r0, r3
 800b15e:	374c      	adds	r7, #76	; 0x4c
 800b160:	46bd      	mov	sp, r7
 800b162:	bd90      	pop	{r4, r7, pc}
 800b164:	2000019c 	.word	0x2000019c
 800b168:	2000621c 	.word	0x2000621c

0800b16c <can_fifo0_rx_callback_register>:

int32_t can_fifo0_rx_callback_register(can_manage_obj_t m_obj, can_stdmsg_rx_callback_t fun)
{
 800b16c:	b480      	push	{r7}
 800b16e:	b085      	sub	sp, #20
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
 800b174:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < MAX_CAN_REGISTER_NUM; i++)
 800b176:	2300      	movs	r3, #0
 800b178:	60fb      	str	r3, [r7, #12]
 800b17a:	e011      	b.n	800b1a0 <can_fifo0_rx_callback_register+0x34>
  {
    if (m_obj->can_rec_callback[i] == NULL)
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	68fa      	ldr	r2, [r7, #12]
 800b180:	320a      	adds	r2, #10
 800b182:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d107      	bne.n	800b19a <can_fifo0_rx_callback_register+0x2e>
    {
      m_obj->can_rec_callback[i] = fun;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	68fa      	ldr	r2, [r7, #12]
 800b18e:	320a      	adds	r2, #10
 800b190:	6839      	ldr	r1, [r7, #0]
 800b192:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      return i;
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	e007      	b.n	800b1aa <can_fifo0_rx_callback_register+0x3e>
  for (int i = 0; i < MAX_CAN_REGISTER_NUM; i++)
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	3301      	adds	r3, #1
 800b19e:	60fb      	str	r3, [r7, #12]
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	2b04      	cmp	r3, #4
 800b1a4:	ddea      	ble.n	800b17c <can_fifo0_rx_callback_register+0x10>
    }
  }
  return -1;
 800b1a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	3714      	adds	r7, #20
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b4:	4770      	bx	lr

0800b1b6 <can_tx_mailbox_complete_hanle>:
static void can_tx_mailbox_complete_hanle(can_manage_obj_t m_obj)
{
 800b1b6:	b5b0      	push	{r4, r5, r7, lr}
 800b1b8:	b090      	sub	sp, #64	; 0x40
 800b1ba:	af00      	add	r7, sp, #0
 800b1bc:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800b1be:	f3ef 8310 	mrs	r3, PRIMASK
 800b1c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800b1c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  struct can_std_msg msg;
  CAN_TxHeaderTypeDef header;
  uint32_t send_mail_box;

  FIFO_CPU_SR_TYPE cpu_sr;
  cpu_sr = FIFO_GET_CPU_SR();
 800b1c6:	461d      	mov	r5, r3
  __ASM volatile ("cpsid i" : : : "memory");
 800b1c8:	b672      	cpsid	i
}
 800b1ca:	bf00      	nop
  FIFO_ENTER_CRITICAL();

  if (!fifo_is_empty(&(m_obj->tx_fifo)))
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	3304      	adds	r3, #4
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	f001 fae0 	bl	800c796 <fifo_is_empty>
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d133      	bne.n	800b244 <can_tx_mailbox_complete_hanle+0x8e>
  {
    while (!fifo_is_empty(&(m_obj->tx_fifo)))
 800b1dc:	e029      	b.n	800b232 <can_tx_mailbox_complete_hanle+0x7c>
    {
      if (HAL_CAN_GetTxMailboxesFreeLevel(m_obj->hcan))
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	f7f6 fc7a 	bl	8001adc <HAL_CAN_GetTxMailboxesFreeLevel>
 800b1e8:	4603      	mov	r3, r0
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d01d      	beq.n	800b22a <can_tx_mailbox_complete_hanle+0x74>
      {

        fifo_get_noprotect(&(m_obj->tx_fifo), &msg);
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	3304      	adds	r3, #4
 800b1f2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800b1f6:	4611      	mov	r1, r2
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	f001 fa98 	bl	800c72e <fifo_get_noprotect>

        header.StdId = msg.std_id;
 800b1fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b200:	613b      	str	r3, [r7, #16]
        header.DLC = msg.dlc;
 800b202:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b206:	623b      	str	r3, [r7, #32]
        header.IDE = CAN_ID_STD;
 800b208:	2300      	movs	r3, #0
 800b20a:	61bb      	str	r3, [r7, #24]
        header.RTR = CAN_RTR_DATA;
 800b20c:	2300      	movs	r3, #0
 800b20e:	61fb      	str	r3, [r7, #28]

        HAL_CAN_AddTxMessage(m_obj->hcan, &header, msg.data, &send_mail_box);
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	6818      	ldr	r0, [r3, #0]
 800b214:	f107 040c 	add.w	r4, r7, #12
 800b218:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b21c:	1d5a      	adds	r2, r3, #5
 800b21e:	f107 0110 	add.w	r1, r7, #16
 800b222:	4623      	mov	r3, r4
 800b224:	f7f6 fb8a 	bl	800193c <HAL_CAN_AddTxMessage>
 800b228:	e003      	b.n	800b232 <can_tx_mailbox_complete_hanle+0x7c>
      }
      else
      {
        m_obj->is_sending = 0;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	2200      	movs	r2, #0
 800b22e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    while (!fifo_is_empty(&(m_obj->tx_fifo)))
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	3304      	adds	r3, #4
 800b236:	4618      	mov	r0, r3
 800b238:	f001 faad 	bl	800c796 <fifo_is_empty>
 800b23c:	4603      	mov	r3, r0
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d0cd      	beq.n	800b1de <can_tx_mailbox_complete_hanle+0x28>
 800b242:	e003      	b.n	800b24c <can_tx_mailbox_complete_hanle+0x96>
      }
    }
  }
  else
  {
    m_obj->is_sending = 0;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	2200      	movs	r2, #0
 800b248:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800b24c:	63bd      	str	r5, [r7, #56]	; 0x38
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b24e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b250:	f383 8810 	msr	PRIMASK, r3
}
 800b254:	bf00      	nop
  }

  FIFO_RESTORE_CPU_SR(cpu_sr);

  return;
 800b256:	bf00      	nop
}
 800b258:	3740      	adds	r7, #64	; 0x40
 800b25a:	46bd      	mov	sp, r7
 800b25c:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800b260 <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b082      	sub	sp, #8
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
  if (hcan == &hcan1)
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	4a05      	ldr	r2, [pc, #20]	; (800b280 <HAL_CAN_TxMailbox0CompleteCallback+0x20>)
 800b26c:	4293      	cmp	r3, r2
 800b26e:	d102      	bne.n	800b276 <HAL_CAN_TxMailbox0CompleteCallback+0x16>
  {
    can_tx_mailbox_complete_hanle(&can1_manage);
 800b270:	4804      	ldr	r0, [pc, #16]	; (800b284 <HAL_CAN_TxMailbox0CompleteCallback+0x24>)
 800b272:	f7ff ffa0 	bl	800b1b6 <can_tx_mailbox_complete_hanle>
  }
}
 800b276:	bf00      	nop
 800b278:	3708      	adds	r7, #8
 800b27a:	46bd      	mov	sp, r7
 800b27c:	bd80      	pop	{r7, pc}
 800b27e:	bf00      	nop
 800b280:	2000019c 	.word	0x2000019c
 800b284:	2000621c 	.word	0x2000621c

0800b288 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b082      	sub	sp, #8
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
  if (hcan == &hcan1)
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	4a05      	ldr	r2, [pc, #20]	; (800b2a8 <HAL_CAN_TxMailbox1CompleteCallback+0x20>)
 800b294:	4293      	cmp	r3, r2
 800b296:	d102      	bne.n	800b29e <HAL_CAN_TxMailbox1CompleteCallback+0x16>
  {
    can_tx_mailbox_complete_hanle(&can1_manage);
 800b298:	4804      	ldr	r0, [pc, #16]	; (800b2ac <HAL_CAN_TxMailbox1CompleteCallback+0x24>)
 800b29a:	f7ff ff8c 	bl	800b1b6 <can_tx_mailbox_complete_hanle>
  }
}
 800b29e:	bf00      	nop
 800b2a0:	3708      	adds	r7, #8
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	bd80      	pop	{r7, pc}
 800b2a6:	bf00      	nop
 800b2a8:	2000019c 	.word	0x2000019c
 800b2ac:	2000621c 	.word	0x2000621c

0800b2b0 <HAL_CAN_TxMailbox2CompleteCallback>:
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b082      	sub	sp, #8
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
  if (hcan == &hcan1)
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	4a05      	ldr	r2, [pc, #20]	; (800b2d0 <HAL_CAN_TxMailbox2CompleteCallback+0x20>)
 800b2bc:	4293      	cmp	r3, r2
 800b2be:	d102      	bne.n	800b2c6 <HAL_CAN_TxMailbox2CompleteCallback+0x16>
  {
    can_tx_mailbox_complete_hanle(&can1_manage);
 800b2c0:	4804      	ldr	r0, [pc, #16]	; (800b2d4 <HAL_CAN_TxMailbox2CompleteCallback+0x24>)
 800b2c2:	f7ff ff78 	bl	800b1b6 <can_tx_mailbox_complete_hanle>
  }
}
 800b2c6:	bf00      	nop
 800b2c8:	3708      	adds	r7, #8
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	bd80      	pop	{r7, pc}
 800b2ce:	bf00      	nop
 800b2d0:	2000019c 	.word	0x2000019c
 800b2d4:	2000621c 	.word	0x2000621c

0800b2d8 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b082      	sub	sp, #8
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
  if (hcan == &hcan1)
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	4a06      	ldr	r2, [pc, #24]	; (800b2fc <HAL_CAN_ErrorCallback+0x24>)
 800b2e4:	4293      	cmp	r3, r2
 800b2e6:	d102      	bne.n	800b2ee <HAL_CAN_ErrorCallback+0x16>
  {
    can_tx_mailbox_complete_hanle(&can1_manage);
 800b2e8:	4805      	ldr	r0, [pc, #20]	; (800b300 <HAL_CAN_ErrorCallback+0x28>)
 800b2ea:	f7ff ff64 	bl	800b1b6 <can_tx_mailbox_complete_hanle>
  }
  HAL_CAN_ResetError(hcan);
 800b2ee:	6878      	ldr	r0, [r7, #4]
 800b2f0:	f7f6 ff78 	bl	80021e4 <HAL_CAN_ResetError>
}
 800b2f4:	bf00      	nop
 800b2f6:	3708      	adds	r7, #8
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	bd80      	pop	{r7, pc}
 800b2fc:	2000019c 	.word	0x2000019c
 800b300:	2000621c 	.word	0x2000621c

0800b304 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800b304:	b580      	push	{r7, lr}
 800b306:	b08c      	sub	sp, #48	; 0x30
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
  CAN_RxHeaderTypeDef rx_header;
  uint8_t rx_data[8];

  HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data);
 800b30c:	f107 0308 	add.w	r3, r7, #8
 800b310:	f107 0210 	add.w	r2, r7, #16
 800b314:	2100      	movs	r1, #0
 800b316:	6878      	ldr	r0, [r7, #4]
 800b318:	f7f6 fc15 	bl	8001b46 <HAL_CAN_GetRxMessage>

  if (hcan == &hcan1)
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	4a11      	ldr	r2, [pc, #68]	; (800b364 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 800b320:	4293      	cmp	r3, r2
 800b322:	d11a      	bne.n	800b35a <HAL_CAN_RxFifo0MsgPendingCallback+0x56>
  {
    for (int i = 0; i < MAX_CAN_REGISTER_NUM; i++)
 800b324:	2300      	movs	r3, #0
 800b326:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b328:	e014      	b.n	800b354 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>
    {
      if (can1_manage.can_rec_callback[i] != NULL)
 800b32a:	4a0f      	ldr	r2, [pc, #60]	; (800b368 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 800b32c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b32e:	330a      	adds	r3, #10
 800b330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d00a      	beq.n	800b34e <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
      {
        (*(can1_manage.can_rec_callback[i]))(&rx_header, rx_data);
 800b338:	4a0b      	ldr	r2, [pc, #44]	; (800b368 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 800b33a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b33c:	330a      	adds	r3, #10
 800b33e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b342:	f107 0108 	add.w	r1, r7, #8
 800b346:	f107 0210 	add.w	r2, r7, #16
 800b34a:	4610      	mov	r0, r2
 800b34c:	4798      	blx	r3
    for (int i = 0; i < MAX_CAN_REGISTER_NUM; i++)
 800b34e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b350:	3301      	adds	r3, #1
 800b352:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b356:	2b04      	cmp	r3, #4
 800b358:	dde7      	ble.n	800b32a <HAL_CAN_RxFifo0MsgPendingCallback+0x26>
      }
    }
  }
}
 800b35a:	bf00      	nop
 800b35c:	3730      	adds	r7, #48	; 0x30
 800b35e:	46bd      	mov	sp, r7
 800b360:	bd80      	pop	{r7, pc}
 800b362:	bf00      	nop
 800b364:	2000019c 	.word	0x2000019c
 800b368:	2000621c 	.word	0x2000621c

0800b36c <abs_limit>:

#include "sys.h"
#include "pid.h"

void abs_limit(float *a, float ABS_MAX)
{
 800b36c:	b480      	push	{r7}
 800b36e:	b083      	sub	sp, #12
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
 800b374:	ed87 0a00 	vstr	s0, [r7]
  if (*a > ABS_MAX)
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	edd3 7a00 	vldr	s15, [r3]
 800b37e:	ed97 7a00 	vldr	s14, [r7]
 800b382:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b38a:	d502      	bpl.n	800b392 <abs_limit+0x26>
    *a = ABS_MAX;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	683a      	ldr	r2, [r7, #0]
 800b390:	601a      	str	r2, [r3, #0]
  if (*a < -ABS_MAX)
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	ed93 7a00 	vldr	s14, [r3]
 800b398:	edd7 7a00 	vldr	s15, [r7]
 800b39c:	eef1 7a67 	vneg.f32	s15, s15
 800b3a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b3a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3a8:	d400      	bmi.n	800b3ac <abs_limit+0x40>
    *a = -ABS_MAX;
}
 800b3aa:	e006      	b.n	800b3ba <abs_limit+0x4e>
    *a = -ABS_MAX;
 800b3ac:	edd7 7a00 	vldr	s15, [r7]
 800b3b0:	eef1 7a67 	vneg.f32	s15, s15
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	edc3 7a00 	vstr	s15, [r3]
}
 800b3ba:	bf00      	nop
 800b3bc:	370c      	adds	r7, #12
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c4:	4770      	bx	lr

0800b3c6 <pid_param_init>:
    float maxout,
    float inte_limit,
    float kp,
    float ki,
    float kd)
{
 800b3c6:	b480      	push	{r7}
 800b3c8:	b087      	sub	sp, #28
 800b3ca:	af00      	add	r7, sp, #0
 800b3cc:	6178      	str	r0, [r7, #20]
 800b3ce:	ed87 0a04 	vstr	s0, [r7, #16]
 800b3d2:	edc7 0a03 	vstr	s1, [r7, #12]
 800b3d6:	ed87 1a02 	vstr	s2, [r7, #8]
 800b3da:	edc7 1a01 	vstr	s3, [r7, #4]
 800b3de:	ed87 2a00 	vstr	s4, [r7]

  pid->param.inte_limit = inte_limit;
 800b3e2:	697b      	ldr	r3, [r7, #20]
 800b3e4:	68fa      	ldr	r2, [r7, #12]
 800b3e6:	615a      	str	r2, [r3, #20]
  pid->param.max_out = maxout;
 800b3e8:	697b      	ldr	r3, [r7, #20]
 800b3ea:	693a      	ldr	r2, [r7, #16]
 800b3ec:	611a      	str	r2, [r3, #16]

  pid->param.p = kp;
 800b3ee:	697b      	ldr	r3, [r7, #20]
 800b3f0:	68ba      	ldr	r2, [r7, #8]
 800b3f2:	601a      	str	r2, [r3, #0]
  pid->param.i = ki;
 800b3f4:	697b      	ldr	r3, [r7, #20]
 800b3f6:	687a      	ldr	r2, [r7, #4]
 800b3f8:	605a      	str	r2, [r3, #4]
  pid->param.d = kd;
 800b3fa:	697b      	ldr	r3, [r7, #20]
 800b3fc:	683a      	ldr	r2, [r7, #0]
 800b3fe:	609a      	str	r2, [r3, #8]
}
 800b400:	bf00      	nop
 800b402:	371c      	adds	r7, #28
 800b404:	46bd      	mov	sp, r7
 800b406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40a:	4770      	bx	lr

0800b40c <pid_reset>:
  * @param[in] pid: control pid struct
  * @param[in] p/i/d: pid parameter
  * @retval    none
  */
static void pid_reset(struct pid *pid, float kp, float ki, float kd)
{
 800b40c:	b480      	push	{r7}
 800b40e:	b085      	sub	sp, #20
 800b410:	af00      	add	r7, sp, #0
 800b412:	60f8      	str	r0, [r7, #12]
 800b414:	ed87 0a02 	vstr	s0, [r7, #8]
 800b418:	edc7 0a01 	vstr	s1, [r7, #4]
 800b41c:	ed87 1a00 	vstr	s2, [r7]
  pid->param.p = kp;
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	68ba      	ldr	r2, [r7, #8]
 800b424:	601a      	str	r2, [r3, #0]
  pid->param.i = ki;
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	687a      	ldr	r2, [r7, #4]
 800b42a:	605a      	str	r2, [r3, #4]
  pid->param.d = kd;
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	683a      	ldr	r2, [r7, #0]
 800b430:	609a      	str	r2, [r3, #8]

  pid->pout = 0;
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	f04f 0200 	mov.w	r2, #0
 800b438:	629a      	str	r2, [r3, #40]	; 0x28
  pid->iout = 0;
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	f04f 0200 	mov.w	r2, #0
 800b440:	62da      	str	r2, [r3, #44]	; 0x2c
  pid->dout = 0;
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	f04f 0200 	mov.w	r2, #0
 800b448:	631a      	str	r2, [r3, #48]	; 0x30
  pid->out = 0;
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	f04f 0200 	mov.w	r2, #0
 800b450:	635a      	str	r2, [r3, #52]	; 0x34
}
 800b452:	bf00      	nop
 800b454:	3714      	adds	r7, #20
 800b456:	46bd      	mov	sp, r7
 800b458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45c:	4770      	bx	lr

0800b45e <pid_calculate>:
  * @param[in] get: measure feedback value
  * @param[in] set: target value
  * @retval    pid calculate output 
  */
float pid_calculate(struct pid *pid, float get, float set)
{
 800b45e:	b580      	push	{r7, lr}
 800b460:	b084      	sub	sp, #16
 800b462:	af00      	add	r7, sp, #0
 800b464:	60f8      	str	r0, [r7, #12]
 800b466:	ed87 0a02 	vstr	s0, [r7, #8]
 800b46a:	edc7 0a01 	vstr	s1, [r7, #4]
  pid->get = get;
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	68ba      	ldr	r2, [r7, #8]
 800b472:	61da      	str	r2, [r3, #28]
  pid->set = set;
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	687a      	ldr	r2, [r7, #4]
 800b478:	619a      	str	r2, [r3, #24]
  pid->err = set - get;
 800b47a:	ed97 7a01 	vldr	s14, [r7, #4]
 800b47e:	edd7 7a02 	vldr	s15, [r7, #8]
 800b482:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	edc3 7a08 	vstr	s15, [r3, #32]
  if ((pid->param.input_max_err != 0) && (fabs(pid->err) > pid->param.input_max_err))
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	edd3 7a03 	vldr	s15, [r3, #12]
 800b492:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b49a:	d00f      	beq.n	800b4bc <pid_calculate+0x5e>
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	edd3 7a08 	vldr	s15, [r3, #32]
 800b4a2:	eeb0 7ae7 	vabs.f32	s14, s15
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	edd3 7a03 	vldr	s15, [r3, #12]
 800b4ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b4b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4b4:	dd02      	ble.n	800b4bc <pid_calculate+0x5e>
    return 0;
 800b4b6:	f04f 0300 	mov.w	r3, #0
 800b4ba:	e052      	b.n	800b562 <pid_calculate+0x104>

  pid->pout = pid->param.p * pid->err;
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	ed93 7a00 	vldr	s14, [r3]
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	edd3 7a08 	vldr	s15, [r3, #32]
 800b4c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
  pid->iout += pid->param.i * pid->err;
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	edd3 6a01 	vldr	s13, [r3, #4]
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	edd3 7a08 	vldr	s15, [r3, #32]
 800b4e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b4e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
  pid->dout = pid->param.d * (pid->err - pid->last_err);
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	ed93 7a02 	vldr	s14, [r3, #8]
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	edd3 6a08 	vldr	s13, [r3, #32]
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800b504:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800b508:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

  abs_limit(&(pid->iout), pid->param.inte_limit);
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	edd3 7a05 	vldr	s15, [r3, #20]
 800b51e:	eeb0 0a67 	vmov.f32	s0, s15
 800b522:	4610      	mov	r0, r2
 800b524:	f7ff ff22 	bl	800b36c <abs_limit>
  pid->out = pid->pout + pid->iout + pid->dout;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800b534:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800b53e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
  abs_limit(&(pid->out), pid->param.max_out);
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	edd3 7a04 	vldr	s15, [r3, #16]
 800b554:	eeb0 0a67 	vmov.f32	s0, s15
 800b558:	4610      	mov	r0, r2
 800b55a:	f7ff ff07 	bl	800b36c <abs_limit>

  return pid->out;
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 800b562:	ee07 3a90 	vmov	s15, r3
 800b566:	eeb0 0a67 	vmov.f32	s0, s15
 800b56a:	3710      	adds	r7, #16
 800b56c:	46bd      	mov	sp, r7
 800b56e:	bd80      	pop	{r7, pc}

0800b570 <pid_struct_init>:
    float inte_limit,

    float kp,
    float ki,
    float kd)
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b086      	sub	sp, #24
 800b574:	af00      	add	r7, sp, #0
 800b576:	6178      	str	r0, [r7, #20]
 800b578:	ed87 0a04 	vstr	s0, [r7, #16]
 800b57c:	edc7 0a03 	vstr	s1, [r7, #12]
 800b580:	ed87 1a02 	vstr	s2, [r7, #8]
 800b584:	edc7 1a01 	vstr	s3, [r7, #4]
 800b588:	ed87 2a00 	vstr	s4, [r7]
  pid->f_param_init = pid_param_init;
 800b58c:	697b      	ldr	r3, [r7, #20]
 800b58e:	4a10      	ldr	r2, [pc, #64]	; (800b5d0 <pid_struct_init+0x60>)
 800b590:	639a      	str	r2, [r3, #56]	; 0x38
  pid->f_pid_reset = pid_reset;
 800b592:	697b      	ldr	r3, [r7, #20]
 800b594:	4a0f      	ldr	r2, [pc, #60]	; (800b5d4 <pid_struct_init+0x64>)
 800b596:	63da      	str	r2, [r3, #60]	; 0x3c

  pid->f_param_init(pid, maxout, inte_limit, kp, ki, kd);
 800b598:	697b      	ldr	r3, [r7, #20]
 800b59a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b59c:	ed97 2a00 	vldr	s4, [r7]
 800b5a0:	edd7 1a01 	vldr	s3, [r7, #4]
 800b5a4:	ed97 1a02 	vldr	s2, [r7, #8]
 800b5a8:	edd7 0a03 	vldr	s1, [r7, #12]
 800b5ac:	ed97 0a04 	vldr	s0, [r7, #16]
 800b5b0:	6978      	ldr	r0, [r7, #20]
 800b5b2:	4798      	blx	r3
  pid->f_pid_reset(pid, kp, ki, kd);
 800b5b4:	697b      	ldr	r3, [r7, #20]
 800b5b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5b8:	ed97 1a00 	vldr	s2, [r7]
 800b5bc:	edd7 0a01 	vldr	s1, [r7, #4]
 800b5c0:	ed97 0a02 	vldr	s0, [r7, #8]
 800b5c4:	6978      	ldr	r0, [r7, #20]
 800b5c6:	4798      	blx	r3
}
 800b5c8:	bf00      	nop
 800b5ca:	3718      	adds	r7, #24
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	bd80      	pop	{r7, pc}
 800b5d0:	0800b3c7 	.word	0x0800b3c7
 800b5d4:	0800b40d 	.word	0x0800b40d

0800b5d8 <controller_register>:
                            const char *name,
                            enum controller_type type,
                            void *param,
                            void *feedback,
                            uint8_t enable)
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b084      	sub	sp, #16
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	60f8      	str	r0, [r7, #12]
 800b5e0:	60b9      	str	r1, [r7, #8]
 800b5e2:	603b      	str	r3, [r7, #0]
 800b5e4:	4613      	mov	r3, r2
 800b5e6:	71fb      	strb	r3, [r7, #7]
  if (ctrl == NULL)
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d102      	bne.n	800b5f4 <controller_register+0x1c>
    return -RM_INVAL;
 800b5ee:	f06f 0301 	mvn.w	r3, #1
 800b5f2:	e01d      	b.n	800b630 <controller_register+0x58>
  if (controller_find(name) != NULL)
 800b5f4:	68b8      	ldr	r0, [r7, #8]
 800b5f6:	f000 f81f 	bl	800b638 <controller_find>
 800b5fa:	4603      	mov	r3, r0
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d002      	beq.n	800b606 <controller_register+0x2e>
    return -RM_EXISTED;
 800b600:	f06f 0302 	mvn.w	r3, #2
 800b604:	e014      	b.n	800b630 <controller_register+0x58>

  object_init(&(ctrl->parent), Object_Class_Controller, name);
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	68ba      	ldr	r2, [r7, #8]
 800b60a:	2102      	movs	r1, #2
 800b60c:	4618      	mov	r0, r3
 800b60e:	f000 ff33 	bl	800c478 <object_init>

  ctrl->type = type;
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	79fa      	ldrb	r2, [r7, #7]
 800b616:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  ctrl->enable = enable;
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	7f3a      	ldrb	r2, [r7, #28]
 800b61e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  ctrl->param = param;
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	683a      	ldr	r2, [r7, #0]
 800b626:	631a      	str	r2, [r3, #48]	; 0x30
  ctrl->feedback = feedback;
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	69ba      	ldr	r2, [r7, #24]
 800b62c:	635a      	str	r2, [r3, #52]	; 0x34

  return RM_OK;
 800b62e:	2300      	movs	r3, #0
}
 800b630:	4618      	mov	r0, r3
 800b632:	3710      	adds	r7, #16
 800b634:	46bd      	mov	sp, r7
 800b636:	bd80      	pop	{r7, pc}

0800b638 <controller_find>:

  return RM_OK;
}

controller_t controller_find(const char *name)
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b084      	sub	sp, #16
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
  struct object *object;

  object = object_find(name, Object_Class_Controller);
 800b640:	2102      	movs	r1, #2
 800b642:	6878      	ldr	r0, [r7, #4]
 800b644:	f000 ff54 	bl	800c4f0 <object_find>
 800b648:	60f8      	str	r0, [r7, #12]

  return (controller_t)object;
 800b64a:	68fb      	ldr	r3, [r7, #12]
}
 800b64c:	4618      	mov	r0, r3
 800b64e:	3710      	adds	r7, #16
 800b650:	46bd      	mov	sp, r7
 800b652:	bd80      	pop	{r7, pc}

0800b654 <controller_execute>:

  return RM_OK;
}

int32_t controller_execute(struct controller *ctrl, void *feedback)
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b082      	sub	sp, #8
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
 800b65c:	6039      	str	r1, [r7, #0]
  if (ctrl == NULL)
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d102      	bne.n	800b66a <controller_execute+0x16>
    return -RM_INVAL;
 800b664:	f06f 0301 	mvn.w	r3, #1
 800b668:	e029      	b.n	800b6be <controller_execute+0x6a>

  if (feedback == NULL)
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d102      	bne.n	800b676 <controller_execute+0x22>
    return -RM_INVAL;
 800b670:	f06f 0301 	mvn.w	r3, #1
 800b674:	e023      	b.n	800b6be <controller_execute+0x6a>

  if (ctrl->convert_feedback == NULL)
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d102      	bne.n	800b684 <controller_execute+0x30>
  {
    return -RM_INVAL;
 800b67e:	f06f 0301 	mvn.w	r3, #1
 800b682:	e01c      	b.n	800b6be <controller_execute+0x6a>
  }
  else
  {
    ctrl->convert_feedback(ctrl, feedback);
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b688:	6839      	ldr	r1, [r7, #0]
 800b68a:	6878      	ldr	r0, [r7, #4]
 800b68c:	4798      	blx	r3
  }

  if ((ctrl->control != NULL) && (ctrl->enable == 1))
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b692:	2b00      	cmp	r3, #0
 800b694:	d012      	beq.n	800b6bc <controller_execute+0x68>
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b69c:	2b01      	cmp	r3, #1
 800b69e:	d10d      	bne.n	800b6bc <controller_execute+0x68>
  {
    ctrl->control(ctrl, ctrl->param, ctrl->feedback, ctrl->input);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6a4:	687a      	ldr	r2, [r7, #4]
 800b6a6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800b6a8:	687a      	ldr	r2, [r7, #4]
 800b6aa:	6b50      	ldr	r0, [r2, #52]	; 0x34
 800b6ac:	687a      	ldr	r2, [r7, #4]
 800b6ae:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 800b6b2:	eeb0 0a67 	vmov.f32	s0, s15
 800b6b6:	4602      	mov	r2, r0
 800b6b8:	6878      	ldr	r0, [r7, #4]
 800b6ba:	4798      	blx	r3
  }

  return RM_OK;
 800b6bc:	2300      	movs	r3, #0
}
 800b6be:	4618      	mov	r0, r3
 800b6c0:	3708      	adds	r7, #8
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	bd80      	pop	{r7, pc}

0800b6c6 <controller_set_input>:

int32_t controller_set_input(struct controller *ctrl, float input)
{
 800b6c6:	b480      	push	{r7}
 800b6c8:	b083      	sub	sp, #12
 800b6ca:	af00      	add	r7, sp, #0
 800b6cc:	6078      	str	r0, [r7, #4]
 800b6ce:	ed87 0a00 	vstr	s0, [r7]
  if (ctrl == NULL)
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d101      	bne.n	800b6dc <controller_set_input+0x16>
    return 0;
 800b6d8:	2300      	movs	r3, #0
 800b6da:	e003      	b.n	800b6e4 <controller_set_input+0x1e>
  ctrl->input = input;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	683a      	ldr	r2, [r7, #0]
 800b6e0:	639a      	str	r2, [r3, #56]	; 0x38
  return RM_OK;
 800b6e2:	2300      	movs	r3, #0
}
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	370c      	adds	r7, #12
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ee:	4770      	bx	lr

0800b6f0 <controller_get_output>:

float controller_get_output(struct controller *ctrl, float *out)
{
 800b6f0:	b480      	push	{r7}
 800b6f2:	b083      	sub	sp, #12
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
 800b6f8:	6039      	str	r1, [r7, #0]
  if (ctrl == NULL)
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d102      	bne.n	800b706 <controller_get_output+0x16>
    return 0;
 800b700:	f04f 0300 	mov.w	r3, #0
 800b704:	e005      	b.n	800b712 <controller_get_output+0x22>
  *out = ctrl->output;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b70a:	683b      	ldr	r3, [r7, #0]
 800b70c:	601a      	str	r2, [r3, #0]
  return ctrl->output;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 800b712:	ee07 3a90 	vmov	s15, r3
 800b716:	eeb0 0a67 	vmov.f32	s0, s15
 800b71a:	370c      	adds	r7, #12
 800b71c:	46bd      	mov	sp, r7
 800b71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b722:	4770      	bx	lr

0800b724 <controller_enable>:

  return ctrl->type;
}

int32_t controller_enable(struct controller *ctrl)
{
 800b724:	b480      	push	{r7}
 800b726:	b083      	sub	sp, #12
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
  if (ctrl == NULL)
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d101      	bne.n	800b736 <controller_enable+0x12>
    return RM_INVAL;
 800b732:	2302      	movs	r3, #2
 800b734:	e004      	b.n	800b740 <controller_enable+0x1c>
  ctrl->enable = 1;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	2201      	movs	r2, #1
 800b73a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  return RM_OK;
 800b73e:	2300      	movs	r3, #0
}
 800b740:	4618      	mov	r0, r3
 800b742:	370c      	adds	r7, #12
 800b744:	46bd      	mov	sp, r7
 800b746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74a:	4770      	bx	lr

0800b74c <controller_disable>:

int32_t controller_disable(struct controller *ctrl)
{
 800b74c:	b480      	push	{r7}
 800b74e:	b083      	sub	sp, #12
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
  if (ctrl == NULL)
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d101      	bne.n	800b75e <controller_disable+0x12>
    return RM_INVAL;
 800b75a:	2302      	movs	r3, #2
 800b75c:	e00c      	b.n	800b778 <controller_disable+0x2c>
  ctrl->enable = 0;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	2200      	movs	r2, #0
 800b762:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  ctrl->output = 0;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	f04f 0200 	mov.w	r2, #0
 800b76c:	63da      	str	r2, [r3, #60]	; 0x3c
  ctrl->input = 0;
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	f04f 0200 	mov.w	r2, #0
 800b774:	639a      	str	r2, [r3, #56]	; 0x38
  return RM_OK;
 800b776:	2300      	movs	r3, #0
}
 800b778:	4618      	mov	r0, r3
 800b77a:	370c      	adds	r7, #12
 800b77c:	46bd      	mov	sp, r7
 800b77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b782:	4770      	bx	lr

0800b784 <pid_controller_register>:
int32_t pid_controller_register(struct controller *ctrl,
                                const char *name,
                                struct pid *param,
                                struct pid_feedback *feedback,
                                uint8_t enable)
{
 800b784:	b580      	push	{r7, lr}
 800b786:	b086      	sub	sp, #24
 800b788:	af02      	add	r7, sp, #8
 800b78a:	60f8      	str	r0, [r7, #12]
 800b78c:	60b9      	str	r1, [r7, #8]
 800b78e:	607a      	str	r2, [r7, #4]
 800b790:	603b      	str	r3, [r7, #0]
  if (ctrl == NULL)
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d102      	bne.n	800b79e <pid_controller_register+0x1a>
    return -RM_INVAL;
 800b798:	f06f 0301 	mvn.w	r3, #1
 800b79c:	e00d      	b.n	800b7ba <pid_controller_register+0x36>
  
  ctrl->control = pid_control;
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	4a08      	ldr	r2, [pc, #32]	; (800b7c4 <pid_controller_register+0x40>)
 800b7a2:	645a      	str	r2, [r3, #68]	; 0x44
  controller_register(ctrl, name, Controller_Class_PID, (void *)param, (void *)feedback, enable);
 800b7a4:	7e3b      	ldrb	r3, [r7, #24]
 800b7a6:	9301      	str	r3, [sp, #4]
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	9300      	str	r3, [sp, #0]
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	68b9      	ldr	r1, [r7, #8]
 800b7b2:	68f8      	ldr	r0, [r7, #12]
 800b7b4:	f7ff ff10 	bl	800b5d8 <controller_register>

  return RM_OK;
 800b7b8:	2300      	movs	r3, #0
}              
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	3710      	adds	r7, #16
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	bd80      	pop	{r7, pc}
 800b7c2:	bf00      	nop
 800b7c4:	0800b7c9 	.word	0x0800b7c9

0800b7c8 <pid_control>:

int32_t pid_control(struct controller *ctrl, void *param, void *feedback, float input)
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b086      	sub	sp, #24
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	60f8      	str	r0, [r7, #12]
 800b7d0:	60b9      	str	r1, [r7, #8]
 800b7d2:	607a      	str	r2, [r7, #4]
 800b7d4:	ed87 0a00 	vstr	s0, [r7]
  pid_t pid_param = (pid_t)param;
 800b7d8:	68bb      	ldr	r3, [r7, #8]
 800b7da:	617b      	str	r3, [r7, #20]
  pid_feedback_t pid_feedback = (pid_feedback_t)feedback;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	613b      	str	r3, [r7, #16]
  
  pid_calculate(pid_param, pid_feedback->feedback, input);
 800b7e0:	693b      	ldr	r3, [r7, #16]
 800b7e2:	edd3 7a00 	vldr	s15, [r3]
 800b7e6:	edd7 0a00 	vldr	s1, [r7]
 800b7ea:	eeb0 0a67 	vmov.f32	s0, s15
 800b7ee:	6978      	ldr	r0, [r7, #20]
 800b7f0:	f7ff fe35 	bl	800b45e <pid_calculate>
  
  ctrl->output = pid_param->out;
 800b7f4:	697b      	ldr	r3, [r7, #20]
 800b7f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	63da      	str	r2, [r3, #60]	; 0x3c

  return RM_OK; 
 800b7fc:	2300      	movs	r3, #0
}
 800b7fe:	4618      	mov	r0, r3
 800b800:	3718      	adds	r7, #24
 800b802:	46bd      	mov	sp, r7
 800b804:	bd80      	pop	{r7, pc}

0800b806 <device_register>:
#include "device.h"

int32_t device_register(struct device *dev,
                        const char *name,
                        uint16_t flags)
{
 800b806:	b580      	push	{r7, lr}
 800b808:	b084      	sub	sp, #16
 800b80a:	af00      	add	r7, sp, #0
 800b80c:	60f8      	str	r0, [r7, #12]
 800b80e:	60b9      	str	r1, [r7, #8]
 800b810:	4613      	mov	r3, r2
 800b812:	80fb      	strh	r3, [r7, #6]
  if (dev == NULL)
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d102      	bne.n	800b820 <device_register+0x1a>
    return -RM_INVAL;
 800b81a:	f06f 0301 	mvn.w	r3, #1
 800b81e:	e019      	b.n	800b854 <device_register+0x4e>
  if (device_find(name) != NULL)
 800b820:	68b8      	ldr	r0, [r7, #8]
 800b822:	f000 f81b 	bl	800b85c <device_find>
 800b826:	4603      	mov	r3, r0
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d002      	beq.n	800b832 <device_register+0x2c>
    return -RM_EXISTED;
 800b82c:	f06f 0302 	mvn.w	r3, #2
 800b830:	e010      	b.n	800b854 <device_register+0x4e>

  object_init(&(dev->parent), Object_Class_Device, name);
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	68ba      	ldr	r2, [r7, #8]
 800b836:	2100      	movs	r1, #0
 800b838:	4618      	mov	r0, r3
 800b83a:	f000 fe1d 	bl	800c478 <object_init>

  dev->flag = flags;
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	88fa      	ldrh	r2, [r7, #6]
 800b842:	85da      	strh	r2, [r3, #46]	; 0x2e
  dev->ref_count = 0;
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	2200      	movs	r2, #0
 800b848:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  dev->open_flag = 0;
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	2200      	movs	r2, #0
 800b850:	861a      	strh	r2, [r3, #48]	; 0x30

  return RM_OK;
 800b852:	2300      	movs	r3, #0
}
 800b854:	4618      	mov	r0, r3
 800b856:	3710      	adds	r7, #16
 800b858:	46bd      	mov	sp, r7
 800b85a:	bd80      	pop	{r7, pc}

0800b85c <device_find>:

  return RM_OK;
}

device_t device_find(const char *name)
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b084      	sub	sp, #16
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
  struct object *object;

  object = object_find(name, Object_Class_Device);
 800b864:	2100      	movs	r1, #0
 800b866:	6878      	ldr	r0, [r7, #4]
 800b868:	f000 fe42 	bl	800c4f0 <object_find>
 800b86c:	60f8      	str	r0, [r7, #12]

  return (device_t)object;
 800b86e:	68fb      	ldr	r3, [r7, #12]
}
 800b870:	4618      	mov	r0, r3
 800b872:	3710      	adds	r7, #16
 800b874:	46bd      	mov	sp, r7
 800b876:	bd80      	pop	{r7, pc}

0800b878 <motor_device_register>:
static void get_motor_offset(motor_data_t ptr, uint8_t can_rx_data[]);

static fn_can_send motor_can_send = NULL;

int32_t motor_device_register(motor_device_t motor_dev, const char *name,
                              uint16_t flags) {
 800b878:	b580      	push	{r7, lr}
 800b87a:	b084      	sub	sp, #16
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	60f8      	str	r0, [r7, #12]
 800b880:	60b9      	str	r1, [r7, #8]
 800b882:	4613      	mov	r3, r2
 800b884:	80fb      	strh	r3, [r7, #6]
  if (motor_dev == NULL)
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d102      	bne.n	800b892 <motor_device_register+0x1a>
    return -RM_INVAL;
 800b88c:	f06f 0301 	mvn.w	r3, #1
 800b890:	e035      	b.n	800b8fe <motor_device_register+0x86>

  if (device_find(name) != NULL)
 800b892:	68b8      	ldr	r0, [r7, #8]
 800b894:	f7ff ffe2 	bl	800b85c <device_find>
 800b898:	4603      	mov	r3, r0
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d002      	beq.n	800b8a4 <motor_device_register+0x2c>
    return -RM_EXISTED;
 800b89e:	f06f 0302 	mvn.w	r3, #2
 800b8a2:	e02c      	b.n	800b8fe <motor_device_register+0x86>

  if (motor_device_find_by_canid(motor_dev->can_periph, motor_dev->can_id) !=
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b8b0:	4619      	mov	r1, r3
 800b8b2:	4610      	mov	r0, r2
 800b8b4:	f000 f864 	bl	800b980 <motor_device_find_by_canid>
 800b8b8:	4603      	mov	r3, r0
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d002      	beq.n	800b8c4 <motor_device_register+0x4c>
      NULL)
    return -RM_EXISTED;
 800b8be:	f06f 0302 	mvn.w	r3, #2
 800b8c2:	e01c      	b.n	800b8fe <motor_device_register+0x86>

  if ((motor_dev->can_id < 0x201) && (motor_dev->can_id > 0x208))
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b8ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b8ce:	d808      	bhi.n	800b8e2 <motor_device_register+0x6a>
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b8d6:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 800b8da:	d902      	bls.n	800b8e2 <motor_device_register+0x6a>
    return -RM_ERROR;
 800b8dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b8e0:	e00d      	b.n	800b8fe <motor_device_register+0x86>

  motor_dev->parent.type = Device_Class_Motor;
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  motor_dev->get_data = get_encoder_data;
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	4a06      	ldr	r2, [pc, #24]	; (800b908 <motor_device_register+0x90>)
 800b8ee:	661a      	str	r2, [r3, #96]	; 0x60

  device_register(&(motor_dev->parent), name, flags);
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	88fa      	ldrh	r2, [r7, #6]
 800b8f4:	68b9      	ldr	r1, [r7, #8]
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	f7ff ff85 	bl	800b806 <device_register>

  return RM_OK;
 800b8fc:	2300      	movs	r3, #0
}
 800b8fe:	4618      	mov	r0, r3
 800b900:	3710      	adds	r7, #16
 800b902:	46bd      	mov	sp, r7
 800b904:	bd80      	pop	{r7, pc}
 800b906:	bf00      	nop
 800b908:	0800bc41 	.word	0x0800bc41

0800b90c <motor_device_can_send_register>:

void motor_device_can_send_register(fn_can_send fn) {
 800b90c:	b480      	push	{r7}
 800b90e:	b083      	sub	sp, #12
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
  if (fn != NULL)
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d002      	beq.n	800b920 <motor_device_can_send_register+0x14>
    motor_can_send = fn;
 800b91a:	4a04      	ldr	r2, [pc, #16]	; (800b92c <motor_device_can_send_register+0x20>)
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	6013      	str	r3, [r2, #0]
}
 800b920:	bf00      	nop
 800b922:	370c      	adds	r7, #12
 800b924:	46bd      	mov	sp, r7
 800b926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92a:	4770      	bx	lr
 800b92c:	20006658 	.word	0x20006658

0800b930 <motor_device_get_data>:
  } else {
    return NULL;
  }
}

motor_data_t motor_device_get_data(motor_device_t motor_dev) {
 800b930:	b480      	push	{r7}
 800b932:	b083      	sub	sp, #12
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
  if (motor_dev != NULL) {
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d002      	beq.n	800b944 <motor_device_get_data+0x14>
    return &(motor_dev->data);
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	3338      	adds	r3, #56	; 0x38
 800b942:	e000      	b.n	800b946 <motor_device_get_data+0x16>
  }
  return NULL;
 800b944:	2300      	movs	r3, #0
}
 800b946:	4618      	mov	r0, r3
 800b948:	370c      	adds	r7, #12
 800b94a:	46bd      	mov	sp, r7
 800b94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b950:	4770      	bx	lr

0800b952 <motor_device_set_current>:

int32_t motor_device_set_current(motor_device_t motor_dev, int16_t current) {
 800b952:	b480      	push	{r7}
 800b954:	b083      	sub	sp, #12
 800b956:	af00      	add	r7, sp, #0
 800b958:	6078      	str	r0, [r7, #4]
 800b95a:	460b      	mov	r3, r1
 800b95c:	807b      	strh	r3, [r7, #2]

  if (motor_dev != NULL) {
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d005      	beq.n	800b970 <motor_device_set_current+0x1e>
    motor_dev->current = current;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	887a      	ldrh	r2, [r7, #2]
 800b968:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    return RM_OK;
 800b96c:	2300      	movs	r3, #0
 800b96e:	e001      	b.n	800b974 <motor_device_set_current+0x22>
  }
  return -RM_ERROR;
 800b970:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800b974:	4618      	mov	r0, r3
 800b976:	370c      	adds	r7, #12
 800b978:	46bd      	mov	sp, r7
 800b97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97e:	4770      	bx	lr

0800b980 <motor_device_find_by_canid>:

motor_device_t motor_device_find_by_canid(enum device_can can,
                                          uint16_t can_id) {
 800b980:	b590      	push	{r4, r7, lr}
 800b982:	b08b      	sub	sp, #44	; 0x2c
 800b984:	af00      	add	r7, sp, #0
 800b986:	4603      	mov	r3, r0
 800b988:	460a      	mov	r2, r1
 800b98a:	71fb      	strb	r3, [r7, #7]
 800b98c:	4613      	mov	r3, r2
 800b98e:	80bb      	strh	r3, [r7, #4]
  struct object *object;
  list_t *node = NULL;
 800b990:	2300      	movs	r3, #0
 800b992:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800b994:	f3ef 8310 	mrs	r3, PRIMASK
 800b998:	617b      	str	r3, [r7, #20]
  return(result);
 800b99a:	697b      	ldr	r3, [r7, #20]
  enum device_type type;

  var_cpu_sr();

  /* enter critical */
  enter_critical();
 800b99c:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 800b99e:	b672      	cpsid	i
}
 800b9a0:	bf00      	nop

  /* try to find device object */
  information = object_get_information(Object_Class_Device);
 800b9a2:	2000      	movs	r0, #0
 800b9a4:	f000 fd3e 	bl	800c424 <object_get_information>
 800b9a8:	6238      	str	r0, [r7, #32]

  for (node = information->object_list.next;
 800b9aa:	6a3b      	ldr	r3, [r7, #32]
 800b9ac:	685b      	ldr	r3, [r3, #4]
 800b9ae:	627b      	str	r3, [r7, #36]	; 0x24
 800b9b0:	e020      	b.n	800b9f4 <motor_device_find_by_canid+0x74>
       node != &(information->object_list); node = node->next) {
    object = list_entry(node, struct object, list);
 800b9b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9b4:	3b24      	subs	r3, #36	; 0x24
 800b9b6:	61fb      	str	r3, [r7, #28]

    type = (enum device_type)(((device_t)object)->type);
 800b9b8:	69fb      	ldr	r3, [r7, #28]
 800b9ba:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b9be:	76fb      	strb	r3, [r7, #27]

    if (type != Device_Class_Motor) {
 800b9c0:	7efb      	ldrb	r3, [r7, #27]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d112      	bne.n	800b9ec <motor_device_find_by_canid+0x6c>
      continue;
    } else if ((((motor_device_t)object)->can_id == can_id) &&
 800b9c6:	69fb      	ldr	r3, [r7, #28]
 800b9c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b9cc:	88ba      	ldrh	r2, [r7, #4]
 800b9ce:	429a      	cmp	r2, r3
 800b9d0:	d10d      	bne.n	800b9ee <motor_device_find_by_canid+0x6e>
               (((motor_device_t)object)->can_periph == can)) {
 800b9d2:	69fb      	ldr	r3, [r7, #28]
 800b9d4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
    } else if ((((motor_device_t)object)->can_id == can_id) &&
 800b9d8:	79fa      	ldrb	r2, [r7, #7]
 800b9da:	429a      	cmp	r2, r3
 800b9dc:	d107      	bne.n	800b9ee <motor_device_find_by_canid+0x6e>
 800b9de:	613c      	str	r4, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b9e0:	693b      	ldr	r3, [r7, #16]
 800b9e2:	f383 8810 	msr	PRIMASK, r3
}
 800b9e6:	bf00      	nop
      /* leave critical */
      exit_critical();
      return (motor_device_t)object;
 800b9e8:	69fb      	ldr	r3, [r7, #28]
 800b9ea:	e00e      	b.n	800ba0a <motor_device_find_by_canid+0x8a>
      continue;
 800b9ec:	bf00      	nop
       node != &(information->object_list); node = node->next) {
 800b9ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	627b      	str	r3, [r7, #36]	; 0x24
 800b9f4:	6a3b      	ldr	r3, [r7, #32]
 800b9f6:	3304      	adds	r3, #4
 800b9f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9fa:	429a      	cmp	r2, r3
 800b9fc:	d1d9      	bne.n	800b9b2 <motor_device_find_by_canid+0x32>
 800b9fe:	60fc      	str	r4, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	f383 8810 	msr	PRIMASK, r3
}
 800ba06:	bf00      	nop

  /* leave critical */
  exit_critical();

  /* not found */
  return NULL;
 800ba08:	2300      	movs	r3, #0
}
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	372c      	adds	r7, #44	; 0x2c
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	bd90      	pop	{r4, r7, pc}
	...

0800ba14 <motor_device_can_output>:

static uint8_t motor_send_flag[DEVICE_CAN_NUM][2];
static struct can_msg motor_msg[DEVICE_CAN_NUM][2];


int32_t motor_device_can_output(enum device_can m_can) {
 800ba14:	b590      	push	{r4, r7, lr}
 800ba16:	b08d      	sub	sp, #52	; 0x34
 800ba18:	af02      	add	r7, sp, #8
 800ba1a:	4603      	mov	r3, r0
 800ba1c:	71fb      	strb	r3, [r7, #7]
  struct object *object;
  list_t *node = NULL;
 800ba1e:	2300      	movs	r3, #0
 800ba20:	627b      	str	r3, [r7, #36]	; 0x24
  struct object_information *information;
  motor_device_t motor_dev;

  memset(motor_msg, 0, sizeof(motor_msg));
 800ba22:	2240      	movs	r2, #64	; 0x40
 800ba24:	2100      	movs	r1, #0
 800ba26:	4873      	ldr	r0, [pc, #460]	; (800bbf4 <motor_device_can_output+0x1e0>)
 800ba28:	f000 fff5 	bl	800ca16 <memset>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800ba2c:	f3ef 8310 	mrs	r3, PRIMASK
 800ba30:	613b      	str	r3, [r7, #16]
  return(result);
 800ba32:	693b      	ldr	r3, [r7, #16]

  var_cpu_sr();

  /* enter critical */
  enter_critical();
 800ba34:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 800ba36:	b672      	cpsid	i
}
 800ba38:	bf00      	nop

  /* try to find device object */
  information = object_get_information(Object_Class_Device);
 800ba3a:	2000      	movs	r0, #0
 800ba3c:	f000 fcf2 	bl	800c424 <object_get_information>
 800ba40:	61f8      	str	r0, [r7, #28]

  for (node = information->object_list.next;
 800ba42:	69fb      	ldr	r3, [r7, #28]
 800ba44:	685b      	ldr	r3, [r3, #4]
 800ba46:	627b      	str	r3, [r7, #36]	; 0x24
 800ba48:	e098      	b.n	800bb7c <motor_device_can_output+0x168>
       node != &(information->object_list); node = node->next) {
    object = list_entry(node, struct object, list);
 800ba4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba4c:	3b24      	subs	r3, #36	; 0x24
 800ba4e:	61bb      	str	r3, [r7, #24]
    motor_dev = (motor_device_t)object;
 800ba50:	69bb      	ldr	r3, [r7, #24]
 800ba52:	617b      	str	r3, [r7, #20]
    if (motor_dev->parent.type == Device_Class_Motor) {
 800ba54:	697b      	ldr	r3, [r7, #20]
 800ba56:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	f040 808b 	bne.w	800bb76 <motor_device_can_output+0x162>
      if (((motor_device_t)object)->can_id < 0x205) {
 800ba60:	69bb      	ldr	r3, [r7, #24]
 800ba62:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ba66:	f5b3 7f01 	cmp.w	r3, #516	; 0x204
 800ba6a:	d841      	bhi.n	800baf0 <motor_device_can_output+0xdc>
        motor_msg[motor_dev->can_periph][0].id = 0x200;
 800ba6c:	697b      	ldr	r3, [r7, #20]
 800ba6e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800ba72:	4a60      	ldr	r2, [pc, #384]	; (800bbf4 <motor_device_can_output+0x1e0>)
 800ba74:	015b      	lsls	r3, r3, #5
 800ba76:	441a      	add	r2, r3
 800ba78:	6813      	ldr	r3, [r2, #0]
 800ba7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ba7e:	f361 031c 	bfi	r3, r1, #0, #29
 800ba82:	6013      	str	r3, [r2, #0]
        motor_msg[motor_dev->can_periph][0]
            .data[(motor_dev->can_id - 0x201) * 2] = motor_dev->current >> 8;
 800ba84:	697b      	ldr	r3, [r7, #20]
 800ba86:	f9b3 305e 	ldrsh.w	r3, [r3, #94]	; 0x5e
 800ba8a:	121b      	asrs	r3, r3, #8
 800ba8c:	b219      	sxth	r1, r3
        motor_msg[motor_dev->can_periph][0]
 800ba8e:	697b      	ldr	r3, [r7, #20]
 800ba90:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800ba94:	461a      	mov	r2, r3
            .data[(motor_dev->can_id - 0x201) * 2] = motor_dev->current >> 8;
 800ba96:	697b      	ldr	r3, [r7, #20]
 800ba98:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ba9c:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 800baa0:	005b      	lsls	r3, r3, #1
 800baa2:	b2c8      	uxtb	r0, r1
 800baa4:	4953      	ldr	r1, [pc, #332]	; (800bbf4 <motor_device_can_output+0x1e0>)
 800baa6:	0152      	lsls	r2, r2, #5
 800baa8:	440a      	add	r2, r1
 800baaa:	4413      	add	r3, r2
 800baac:	3308      	adds	r3, #8
 800baae:	4602      	mov	r2, r0
 800bab0:	701a      	strb	r2, [r3, #0]
        motor_msg[motor_dev->can_periph][0]
            .data[(motor_dev->can_id - 0x201) * 2 + 1] = motor_dev->current;
 800bab2:	697b      	ldr	r3, [r7, #20]
 800bab4:	f9b3 105e 	ldrsh.w	r1, [r3, #94]	; 0x5e
        motor_msg[motor_dev->can_periph][0]
 800bab8:	697b      	ldr	r3, [r7, #20]
 800baba:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800babe:	461a      	mov	r2, r3
            .data[(motor_dev->can_id - 0x201) * 2 + 1] = motor_dev->current;
 800bac0:	697b      	ldr	r3, [r7, #20]
 800bac2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800bac6:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 800baca:	005b      	lsls	r3, r3, #1
 800bacc:	3301      	adds	r3, #1
 800bace:	b2c8      	uxtb	r0, r1
 800bad0:	4948      	ldr	r1, [pc, #288]	; (800bbf4 <motor_device_can_output+0x1e0>)
 800bad2:	0152      	lsls	r2, r2, #5
 800bad4:	440a      	add	r2, r1
 800bad6:	4413      	add	r3, r2
 800bad8:	3308      	adds	r3, #8
 800bada:	4602      	mov	r2, r0
 800badc:	701a      	strb	r2, [r3, #0]
        motor_send_flag[motor_dev->can_periph][0] = 1;
 800bade:	697b      	ldr	r3, [r7, #20]
 800bae0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800bae4:	461a      	mov	r2, r3
 800bae6:	4b44      	ldr	r3, [pc, #272]	; (800bbf8 <motor_device_can_output+0x1e4>)
 800bae8:	2101      	movs	r1, #1
 800baea:	f803 1012 	strb.w	r1, [r3, r2, lsl #1]
 800baee:	e042      	b.n	800bb76 <motor_device_can_output+0x162>
      } else {
        motor_msg[motor_dev->can_periph][1].id = 0x1FF;
 800baf0:	697b      	ldr	r3, [r7, #20]
 800baf2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800baf6:	4a3f      	ldr	r2, [pc, #252]	; (800bbf4 <motor_device_can_output+0x1e0>)
 800baf8:	015b      	lsls	r3, r3, #5
 800bafa:	4413      	add	r3, r2
 800bafc:	f103 0210 	add.w	r2, r3, #16
 800bb00:	6813      	ldr	r3, [r2, #0]
 800bb02:	f240 11ff 	movw	r1, #511	; 0x1ff
 800bb06:	f361 031c 	bfi	r3, r1, #0, #29
 800bb0a:	6013      	str	r3, [r2, #0]
        motor_msg[motor_dev->can_periph][1]
            .data[(motor_dev->can_id - 0x205) * 2] = motor_dev->current >> 8;
 800bb0c:	697b      	ldr	r3, [r7, #20]
 800bb0e:	f9b3 305e 	ldrsh.w	r3, [r3, #94]	; 0x5e
 800bb12:	121b      	asrs	r3, r3, #8
 800bb14:	b219      	sxth	r1, r3
        motor_msg[motor_dev->can_periph][1]
 800bb16:	697b      	ldr	r3, [r7, #20]
 800bb18:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800bb1c:	461a      	mov	r2, r3
            .data[(motor_dev->can_id - 0x205) * 2] = motor_dev->current >> 8;
 800bb1e:	697b      	ldr	r3, [r7, #20]
 800bb20:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800bb24:	f2a3 2305 	subw	r3, r3, #517	; 0x205
 800bb28:	005b      	lsls	r3, r3, #1
 800bb2a:	b2c8      	uxtb	r0, r1
 800bb2c:	4931      	ldr	r1, [pc, #196]	; (800bbf4 <motor_device_can_output+0x1e0>)
 800bb2e:	0152      	lsls	r2, r2, #5
 800bb30:	440a      	add	r2, r1
 800bb32:	4413      	add	r3, r2
 800bb34:	3318      	adds	r3, #24
 800bb36:	4602      	mov	r2, r0
 800bb38:	701a      	strb	r2, [r3, #0]
        motor_msg[motor_dev->can_periph][1]
            .data[(motor_dev->can_id - 0x205) * 2 + 1] = motor_dev->current;
 800bb3a:	697b      	ldr	r3, [r7, #20]
 800bb3c:	f9b3 105e 	ldrsh.w	r1, [r3, #94]	; 0x5e
        motor_msg[motor_dev->can_periph][1]
 800bb40:	697b      	ldr	r3, [r7, #20]
 800bb42:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800bb46:	461a      	mov	r2, r3
            .data[(motor_dev->can_id - 0x205) * 2 + 1] = motor_dev->current;
 800bb48:	697b      	ldr	r3, [r7, #20]
 800bb4a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800bb4e:	f2a3 2305 	subw	r3, r3, #517	; 0x205
 800bb52:	005b      	lsls	r3, r3, #1
 800bb54:	3301      	adds	r3, #1
 800bb56:	b2c8      	uxtb	r0, r1
 800bb58:	4926      	ldr	r1, [pc, #152]	; (800bbf4 <motor_device_can_output+0x1e0>)
 800bb5a:	0152      	lsls	r2, r2, #5
 800bb5c:	440a      	add	r2, r1
 800bb5e:	4413      	add	r3, r2
 800bb60:	3318      	adds	r3, #24
 800bb62:	4602      	mov	r2, r0
 800bb64:	701a      	strb	r2, [r3, #0]
        motor_send_flag[motor_dev->can_periph][1] = 1;
 800bb66:	697b      	ldr	r3, [r7, #20]
 800bb68:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800bb6c:	4a22      	ldr	r2, [pc, #136]	; (800bbf8 <motor_device_can_output+0x1e4>)
 800bb6e:	005b      	lsls	r3, r3, #1
 800bb70:	4413      	add	r3, r2
 800bb72:	2201      	movs	r2, #1
 800bb74:	705a      	strb	r2, [r3, #1]
       node != &(information->object_list); node = node->next) {
 800bb76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	627b      	str	r3, [r7, #36]	; 0x24
 800bb7c:	69fb      	ldr	r3, [r7, #28]
 800bb7e:	3304      	adds	r3, #4
 800bb80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb82:	429a      	cmp	r2, r3
 800bb84:	f47f af61 	bne.w	800ba4a <motor_device_can_output+0x36>
 800bb88:	60fc      	str	r4, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	f383 8810 	msr	PRIMASK, r3
}
 800bb90:	bf00      	nop
  }

  /* leave critical */
  exit_critical();

  for (int j = 0; j < 2; j++) {
 800bb92:	2300      	movs	r3, #0
 800bb94:	623b      	str	r3, [r7, #32]
 800bb96:	e025      	b.n	800bbe4 <motor_device_can_output+0x1d0>
    if (motor_send_flag[m_can][j] == 1) {
 800bb98:	79fb      	ldrb	r3, [r7, #7]
 800bb9a:	4a17      	ldr	r2, [pc, #92]	; (800bbf8 <motor_device_can_output+0x1e4>)
 800bb9c:	005b      	lsls	r3, r3, #1
 800bb9e:	441a      	add	r2, r3
 800bba0:	6a3b      	ldr	r3, [r7, #32]
 800bba2:	4413      	add	r3, r2
 800bba4:	781b      	ldrb	r3, [r3, #0]
 800bba6:	2b01      	cmp	r3, #1
 800bba8:	d119      	bne.n	800bbde <motor_device_can_output+0x1ca>
      if (motor_can_send != NULL)
 800bbaa:	4b14      	ldr	r3, [pc, #80]	; (800bbfc <motor_device_can_output+0x1e8>)
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d00d      	beq.n	800bbce <motor_device_can_output+0x1ba>
        motor_can_send(m_can, motor_msg[m_can][j]);
 800bbb2:	4b12      	ldr	r3, [pc, #72]	; (800bbfc <motor_device_can_output+0x1e8>)
 800bbb4:	681c      	ldr	r4, [r3, #0]
 800bbb6:	79fb      	ldrb	r3, [r7, #7]
 800bbb8:	490e      	ldr	r1, [pc, #56]	; (800bbf4 <motor_device_can_output+0x1e0>)
 800bbba:	005a      	lsls	r2, r3, #1
 800bbbc:	6a3b      	ldr	r3, [r7, #32]
 800bbbe:	4413      	add	r3, r2
 800bbc0:	011b      	lsls	r3, r3, #4
 800bbc2:	440b      	add	r3, r1
 800bbc4:	79f8      	ldrb	r0, [r7, #7]
 800bbc6:	68da      	ldr	r2, [r3, #12]
 800bbc8:	9200      	str	r2, [sp, #0]
 800bbca:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bbcc:	47a0      	blx	r4
      motor_send_flag[m_can][j] = 0;
 800bbce:	79fb      	ldrb	r3, [r7, #7]
 800bbd0:	4a09      	ldr	r2, [pc, #36]	; (800bbf8 <motor_device_can_output+0x1e4>)
 800bbd2:	005b      	lsls	r3, r3, #1
 800bbd4:	441a      	add	r2, r3
 800bbd6:	6a3b      	ldr	r3, [r7, #32]
 800bbd8:	4413      	add	r3, r2
 800bbda:	2200      	movs	r2, #0
 800bbdc:	701a      	strb	r2, [r3, #0]
  for (int j = 0; j < 2; j++) {
 800bbde:	6a3b      	ldr	r3, [r7, #32]
 800bbe0:	3301      	adds	r3, #1
 800bbe2:	623b      	str	r3, [r7, #32]
 800bbe4:	6a3b      	ldr	r3, [r7, #32]
 800bbe6:	2b01      	cmp	r3, #1
 800bbe8:	ddd6      	ble.n	800bb98 <motor_device_can_output+0x184>
    }
  }

  /* not found */
  return RM_OK;
 800bbea:	2300      	movs	r3, #0
}
 800bbec:	4618      	mov	r0, r3
 800bbee:	372c      	adds	r7, #44	; 0x2c
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	bd90      	pop	{r4, r7, pc}
 800bbf4:	20006660 	.word	0x20006660
 800bbf8:	2000665c 	.word	0x2000665c
 800bbfc:	20006658 	.word	0x20006658

0800bc00 <motor_device_data_update>:

int32_t motor_device_data_update(enum device_can can, uint16_t can_id,
                                 uint8_t can_rx_data[]) {
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b084      	sub	sp, #16
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	4603      	mov	r3, r0
 800bc08:	603a      	str	r2, [r7, #0]
 800bc0a:	71fb      	strb	r3, [r7, #7]
 800bc0c:	460b      	mov	r3, r1
 800bc0e:	80bb      	strh	r3, [r7, #4]
  motor_device_t motor_dev;
  motor_dev = motor_device_find_by_canid(can, can_id);
 800bc10:	88ba      	ldrh	r2, [r7, #4]
 800bc12:	79fb      	ldrb	r3, [r7, #7]
 800bc14:	4611      	mov	r1, r2
 800bc16:	4618      	mov	r0, r3
 800bc18:	f7ff feb2 	bl	800b980 <motor_device_find_by_canid>
 800bc1c:	60f8      	str	r0, [r7, #12]
  if (motor_dev != NULL) {
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d006      	beq.n	800bc32 <motor_device_data_update+0x32>
    motor_dev->get_data(motor_dev, can_rx_data);
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bc28:	6839      	ldr	r1, [r7, #0]
 800bc2a:	68f8      	ldr	r0, [r7, #12]
 800bc2c:	4798      	blx	r3
    return RM_OK;
 800bc2e:	2300      	movs	r3, #0
 800bc30:	e001      	b.n	800bc36 <motor_device_data_update+0x36>
  }
  return -RM_UNREGISTERED;
 800bc32:	f06f 0303 	mvn.w	r3, #3
}
 800bc36:	4618      	mov	r0, r3
 800bc38:	3710      	adds	r7, #16
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	bd80      	pop	{r7, pc}
	...

0800bc40 <get_encoder_data>:

static void get_encoder_data(motor_device_t motor, uint8_t can_rx_data[]) {
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b084      	sub	sp, #16
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
 800bc48:	6039      	str	r1, [r7, #0]
  motor_data_t ptr = &(motor->data);
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	3338      	adds	r3, #56	; 0x38
 800bc4e:	60fb      	str	r3, [r7, #12]
  ptr->msg_cnt++;
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	699b      	ldr	r3, [r3, #24]
 800bc54:	1c5a      	adds	r2, r3, #1
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	619a      	str	r2, [r3, #24]

  if (ptr->msg_cnt > 50) {
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	699b      	ldr	r3, [r3, #24]
 800bc5e:	2b32      	cmp	r3, #50	; 0x32
 800bc60:	d903      	bls.n	800bc6a <get_encoder_data+0x2a>
    motor->init_offset_f = 0;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	2200      	movs	r2, #0
 800bc66:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  }

  if (motor->init_offset_f == 1) {
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bc70:	2b01      	cmp	r3, #1
 800bc72:	d104      	bne.n	800bc7e <get_encoder_data+0x3e>
    get_motor_offset(ptr, can_rx_data);
 800bc74:	6839      	ldr	r1, [r7, #0]
 800bc76:	68f8      	ldr	r0, [r7, #12]
 800bc78:	f000 f886 	bl	800bd88 <get_motor_offset>
    return;
 800bc7c:	e07f      	b.n	800bd7e <get_encoder_data+0x13e>
  }

  ptr->last_ecd = ptr->ecd;
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	881a      	ldrh	r2, [r3, #0]
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	805a      	strh	r2, [r3, #2]
  ptr->ecd = (uint16_t)(can_rx_data[0] << 8 | can_rx_data[1]);
 800bc86:	683b      	ldr	r3, [r7, #0]
 800bc88:	781b      	ldrb	r3, [r3, #0]
 800bc8a:	021b      	lsls	r3, r3, #8
 800bc8c:	b21a      	sxth	r2, r3
 800bc8e:	683b      	ldr	r3, [r7, #0]
 800bc90:	3301      	adds	r3, #1
 800bc92:	781b      	ldrb	r3, [r3, #0]
 800bc94:	b21b      	sxth	r3, r3
 800bc96:	4313      	orrs	r3, r2
 800bc98:	b21b      	sxth	r3, r3
 800bc9a:	b29a      	uxth	r2, r3
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	801a      	strh	r2, [r3, #0]

  if (ptr->ecd - ptr->last_ecd > 4096) {
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	881b      	ldrh	r3, [r3, #0]
 800bca4:	461a      	mov	r2, r3
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	885b      	ldrh	r3, [r3, #2]
 800bcaa:	1ad3      	subs	r3, r2, r3
 800bcac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bcb0:	dd0f      	ble.n	800bcd2 <get_encoder_data+0x92>
    ptr->round_cnt--;
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	689b      	ldr	r3, [r3, #8]
 800bcb6:	1e5a      	subs	r2, r3, #1
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	609a      	str	r2, [r3, #8]
    ptr->ecd_raw_rate = ptr->ecd - ptr->last_ecd - 8192;
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	881b      	ldrh	r3, [r3, #0]
 800bcc0:	461a      	mov	r2, r3
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	885b      	ldrh	r3, [r3, #2]
 800bcc6:	1ad3      	subs	r3, r2, r3
 800bcc8:	f5a3 5200 	sub.w	r2, r3, #8192	; 0x2000
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	615a      	str	r2, [r3, #20]
 800bcd0:	e020      	b.n	800bd14 <get_encoder_data+0xd4>
  } else if (ptr->ecd - ptr->last_ecd < -4096) {
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	881b      	ldrh	r3, [r3, #0]
 800bcd6:	461a      	mov	r2, r3
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	885b      	ldrh	r3, [r3, #2]
 800bcdc:	1ad3      	subs	r3, r2, r3
 800bcde:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 800bce2:	da0f      	bge.n	800bd04 <get_encoder_data+0xc4>
    ptr->round_cnt++;
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	689b      	ldr	r3, [r3, #8]
 800bce8:	1c5a      	adds	r2, r3, #1
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	609a      	str	r2, [r3, #8]
    ptr->ecd_raw_rate = ptr->ecd - ptr->last_ecd + 8192;
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	881b      	ldrh	r3, [r3, #0]
 800bcf2:	461a      	mov	r2, r3
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	885b      	ldrh	r3, [r3, #2]
 800bcf8:	1ad3      	subs	r3, r2, r3
 800bcfa:	f503 5200 	add.w	r2, r3, #8192	; 0x2000
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	615a      	str	r2, [r3, #20]
 800bd02:	e007      	b.n	800bd14 <get_encoder_data+0xd4>
  } else {
    ptr->ecd_raw_rate = ptr->ecd - ptr->last_ecd;
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	881b      	ldrh	r3, [r3, #0]
 800bd08:	461a      	mov	r2, r3
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	885b      	ldrh	r3, [r3, #2]
 800bd0e:	1ad2      	subs	r2, r2, r3
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	615a      	str	r2, [r3, #20]
  }

  ptr->total_ecd = ptr->round_cnt * 8192 + ptr->ecd - ptr->offset_ecd;
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	689b      	ldr	r3, [r3, #8]
 800bd18:	035b      	lsls	r3, r3, #13
 800bd1a:	68fa      	ldr	r2, [r7, #12]
 800bd1c:	8812      	ldrh	r2, [r2, #0]
 800bd1e:	4413      	add	r3, r2
 800bd20:	68fa      	ldr	r2, [r7, #12]
 800bd22:	8b92      	ldrh	r2, [r2, #28]
 800bd24:	1a9a      	subs	r2, r3, r2
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	60da      	str	r2, [r3, #12]
  /* total angle, unit is degree */
  ptr->total_angle = ptr->total_ecd / ENCODER_ANGLE_RATIO;
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	68db      	ldr	r3, [r3, #12]
 800bd2e:	ee07 3a90 	vmov	s15, r3
 800bd32:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bd36:	eddf 6a13 	vldr	s13, [pc, #76]	; 800bd84 <get_encoder_data+0x144>
 800bd3a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800bd3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bd42:	ee17 2a90 	vmov	r2, s15
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	611a      	str	r2, [r3, #16]

  ptr->speed_rpm = (int16_t)(can_rx_data[2] << 8 | can_rx_data[3]);
 800bd4a:	683b      	ldr	r3, [r7, #0]
 800bd4c:	3302      	adds	r3, #2
 800bd4e:	781b      	ldrb	r3, [r3, #0]
 800bd50:	021b      	lsls	r3, r3, #8
 800bd52:	b21a      	sxth	r2, r3
 800bd54:	683b      	ldr	r3, [r7, #0]
 800bd56:	3303      	adds	r3, #3
 800bd58:	781b      	ldrb	r3, [r3, #0]
 800bd5a:	b21b      	sxth	r3, r3
 800bd5c:	4313      	orrs	r3, r2
 800bd5e:	b21a      	sxth	r2, r3
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	809a      	strh	r2, [r3, #4]
  ptr->given_current = (int16_t)(can_rx_data[4] << 8 | can_rx_data[5]);
 800bd64:	683b      	ldr	r3, [r7, #0]
 800bd66:	3304      	adds	r3, #4
 800bd68:	781b      	ldrb	r3, [r3, #0]
 800bd6a:	021b      	lsls	r3, r3, #8
 800bd6c:	b21a      	sxth	r2, r3
 800bd6e:	683b      	ldr	r3, [r7, #0]
 800bd70:	3305      	adds	r3, #5
 800bd72:	781b      	ldrb	r3, [r3, #0]
 800bd74:	b21b      	sxth	r3, r3
 800bd76:	4313      	orrs	r3, r2
 800bd78:	b21a      	sxth	r2, r3
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	80da      	strh	r2, [r3, #6]
}
 800bd7e:	3710      	adds	r7, #16
 800bd80:	46bd      	mov	sp, r7
 800bd82:	bd80      	pop	{r7, pc}
 800bd84:	41b60b61 	.word	0x41b60b61

0800bd88 <get_motor_offset>:

static void get_motor_offset(motor_data_t ptr, uint8_t can_rx_data[]) {
 800bd88:	b480      	push	{r7}
 800bd8a:	b083      	sub	sp, #12
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
 800bd90:	6039      	str	r1, [r7, #0]
  ptr->ecd = (uint16_t)(can_rx_data[0] << 8 | can_rx_data[1]);
 800bd92:	683b      	ldr	r3, [r7, #0]
 800bd94:	781b      	ldrb	r3, [r3, #0]
 800bd96:	021b      	lsls	r3, r3, #8
 800bd98:	b21a      	sxth	r2, r3
 800bd9a:	683b      	ldr	r3, [r7, #0]
 800bd9c:	3301      	adds	r3, #1
 800bd9e:	781b      	ldrb	r3, [r3, #0]
 800bda0:	b21b      	sxth	r3, r3
 800bda2:	4313      	orrs	r3, r2
 800bda4:	b21b      	sxth	r3, r3
 800bda6:	b29a      	uxth	r2, r3
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	801a      	strh	r2, [r3, #0]
  ptr->offset_ecd = ptr->ecd;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	881a      	ldrh	r2, [r3, #0]
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	839a      	strh	r2, [r3, #28]
}
 800bdb4:	bf00      	nop
 800bdb6:	370c      	adds	r7, #12
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdbe:	4770      	bx	lr

0800bdc0 <motor_cluster_pid_register>:
/// @param motor_cluster The motor cluster structure to register
/// @param name The name of the motor cluster
/// @param can The CAN bus to use
/// @return RM_OK if the motor cluster is registered successfully
int32_t motor_cluster_pid_register(struct motor_cluster *motor_cluster,
                                   const char *name, enum device_can can) {
 800bdc0:	b590      	push	{r4, r7, lr}
 800bdc2:	b0cb      	sub	sp, #300	; 0x12c
 800bdc4:	af02      	add	r7, sp, #8
 800bdc6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800bdca:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800bdce:	6018      	str	r0, [r3, #0]
 800bdd0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800bdd4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800bdd8:	6019      	str	r1, [r3, #0]
 800bdda:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800bdde:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 800bde2:	701a      	strb	r2, [r3, #0]
  char motor_name[4][OBJECT_NAME_MAX_LEN] = {0};
 800bde4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800bde8:	2280      	movs	r2, #128	; 0x80
 800bdea:	2100      	movs	r1, #0
 800bdec:	4618      	mov	r0, r3
 800bdee:	f000 fe12 	bl	800ca16 <memset>
  char controller_name[4][OBJECT_NAME_MAX_LEN] = {0};
 800bdf2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800bdf6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	2380      	movs	r3, #128	; 0x80
 800bdfe:	461a      	mov	r2, r3
 800be00:	2100      	movs	r1, #0
 800be02:	f000 fe08 	bl	800ca16 <memset>
  uint8_t name_len;

  int32_t err;

  // finds the motor cluster
  if (motor_cluster == NULL)
 800be06:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800be0a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d102      	bne.n	800be1a <motor_cluster_pid_register+0x5a>
    return -RM_INVAL;
 800be14:	f06f 0301 	mvn.w	r3, #1
 800be18:	e15d      	b.n	800c0d6 <motor_cluster_pid_register+0x316>
  if (motor_cluster_find(name) != NULL)
 800be1a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800be1e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800be22:	6818      	ldr	r0, [r3, #0]
 800be24:	f000 fa42 	bl	800c2ac <motor_cluster_find>
 800be28:	4603      	mov	r3, r0
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d002      	beq.n	800be34 <motor_cluster_pid_register+0x74>
    return -RM_EXISTED;
 800be2e:	f06f 0302 	mvn.w	r3, #2
 800be32:	e150      	b.n	800c0d6 <motor_cluster_pid_register+0x316>

  object_init(&(motor_cluster->parent), Object_Class_Chassis, name);
 800be34:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800be38:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800be3c:	6818      	ldr	r0, [r3, #0]
 800be3e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800be42:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800be46:	681a      	ldr	r2, [r3, #0]
 800be48:	2103      	movs	r1, #3
 800be4a:	f000 fb15 	bl	800c478 <object_init>

  name_len = strlen(name);
 800be4e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800be52:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800be56:	6818      	ldr	r0, [r3, #0]
 800be58:	f7f4 f9ca 	bl	80001f0 <strlen>
 800be5c:	4603      	mov	r3, r0
 800be5e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

  if (name_len > OBJECT_NAME_MAX_LEN / 2) {
 800be62:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800be66:	2b10      	cmp	r3, #16
 800be68:	d902      	bls.n	800be70 <motor_cluster_pid_register+0xb0>
    name_len = OBJECT_NAME_MAX_LEN / 2;
 800be6a:	2310      	movs	r3, #16
 800be6c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  }

  // names the motors
  memcpy(&motor_name[0][name_len], "MOTOR0\0", 7);
 800be70:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800be74:	f107 0294 	add.w	r2, r7, #148	; 0x94
 800be78:	4413      	add	r3, r2
 800be7a:	2207      	movs	r2, #7
 800be7c:	4998      	ldr	r1, [pc, #608]	; (800c0e0 <motor_cluster_pid_register+0x320>)
 800be7e:	4618      	mov	r0, r3
 800be80:	f000 fe4e 	bl	800cb20 <memcpy>
  memcpy(&motor_name[1][name_len], "MOTOR1\0", 7);
 800be84:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800be88:	f107 0294 	add.w	r2, r7, #148	; 0x94
 800be8c:	3320      	adds	r3, #32
 800be8e:	4413      	add	r3, r2
 800be90:	2207      	movs	r2, #7
 800be92:	4994      	ldr	r1, [pc, #592]	; (800c0e4 <motor_cluster_pid_register+0x324>)
 800be94:	4618      	mov	r0, r3
 800be96:	f000 fe43 	bl	800cb20 <memcpy>
  memcpy(&motor_name[2][name_len], "MOTOR2\0", 7);
 800be9a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800be9e:	f107 0294 	add.w	r2, r7, #148	; 0x94
 800bea2:	3340      	adds	r3, #64	; 0x40
 800bea4:	4413      	add	r3, r2
 800bea6:	2207      	movs	r2, #7
 800bea8:	498f      	ldr	r1, [pc, #572]	; (800c0e8 <motor_cluster_pid_register+0x328>)
 800beaa:	4618      	mov	r0, r3
 800beac:	f000 fe38 	bl	800cb20 <memcpy>
  memcpy(&motor_name[3][name_len], "MOTOR3\0", 7);
 800beb0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800beb4:	f107 0294 	add.w	r2, r7, #148	; 0x94
 800beb8:	3360      	adds	r3, #96	; 0x60
 800beba:	4413      	add	r3, r2
 800bebc:	2207      	movs	r2, #7
 800bebe:	498b      	ldr	r1, [pc, #556]	; (800c0ec <motor_cluster_pid_register+0x32c>)
 800bec0:	4618      	mov	r0, r3
 800bec2:	f000 fe2d 	bl	800cb20 <memcpy>

  // names the controllers
  memcpy(&controller_name[0][name_len], "CTRLR0\0", 7);
 800bec6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800beca:	f107 0214 	add.w	r2, r7, #20
 800bece:	4413      	add	r3, r2
 800bed0:	2207      	movs	r2, #7
 800bed2:	4987      	ldr	r1, [pc, #540]	; (800c0f0 <motor_cluster_pid_register+0x330>)
 800bed4:	4618      	mov	r0, r3
 800bed6:	f000 fe23 	bl	800cb20 <memcpy>
  memcpy(&controller_name[1][name_len], "CTRLR1\0", 7);
 800beda:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bede:	f107 0214 	add.w	r2, r7, #20
 800bee2:	3320      	adds	r3, #32
 800bee4:	4413      	add	r3, r2
 800bee6:	2207      	movs	r2, #7
 800bee8:	4982      	ldr	r1, [pc, #520]	; (800c0f4 <motor_cluster_pid_register+0x334>)
 800beea:	4618      	mov	r0, r3
 800beec:	f000 fe18 	bl	800cb20 <memcpy>
  memcpy(&controller_name[2][name_len], "CTRLR2\0", 7);
 800bef0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bef4:	f107 0214 	add.w	r2, r7, #20
 800bef8:	3340      	adds	r3, #64	; 0x40
 800befa:	4413      	add	r3, r2
 800befc:	2207      	movs	r2, #7
 800befe:	497e      	ldr	r1, [pc, #504]	; (800c0f8 <motor_cluster_pid_register+0x338>)
 800bf00:	4618      	mov	r0, r3
 800bf02:	f000 fe0d 	bl	800cb20 <memcpy>
  memcpy(&controller_name[3][name_len], "CTRLR3\0", 7);
 800bf06:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bf0a:	f107 0214 	add.w	r2, r7, #20
 800bf0e:	3360      	adds	r3, #96	; 0x60
 800bf10:	4413      	add	r3, r2
 800bf12:	2207      	movs	r2, #7
 800bf14:	4979      	ldr	r1, [pc, #484]	; (800c0fc <motor_cluster_pid_register+0x33c>)
 800bf16:	4618      	mov	r0, r3
 800bf18:	f000 fe02 	bl	800cb20 <memcpy>

  // initializes the motor cluster (motors and controllers)
  for (int i = 0; i < 4; i++) {
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800bf22:	e0c4      	b.n	800c0ae <motor_cluster_pid_register+0x2ee>
    // registers the motors
    memcpy(&motor_name[i], name, name_len);
 800bf24:	f107 0294 	add.w	r2, r7, #148	; 0x94
 800bf28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf2c:	015b      	lsls	r3, r3, #5
 800bf2e:	18d0      	adds	r0, r2, r3
 800bf30:	f897 211f 	ldrb.w	r2, [r7, #287]	; 0x11f
 800bf34:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800bf38:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800bf3c:	6819      	ldr	r1, [r3, #0]
 800bf3e:	f000 fdef 	bl	800cb20 <memcpy>
    motor_cluster->motor[i].can_periph = can;
 800bf42:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800bf46:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800bf4a:	681a      	ldr	r2, [r3, #0]
 800bf4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf50:	2164      	movs	r1, #100	; 0x64
 800bf52:	fb01 f303 	mul.w	r3, r1, r3
 800bf56:	4413      	add	r3, r2
 800bf58:	3394      	adds	r3, #148	; 0x94
 800bf5a:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800bf5e:	f2a2 1219 	subw	r2, r2, #281	; 0x119
 800bf62:	7812      	ldrb	r2, [r2, #0]
 800bf64:	701a      	strb	r2, [r3, #0]
    motor_cluster->motor[i].can_id = 0x201 + i;
 800bf66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf6a:	b29b      	uxth	r3, r3
 800bf6c:	f203 2301 	addw	r3, r3, #513	; 0x201
 800bf70:	b298      	uxth	r0, r3
 800bf72:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800bf76:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800bf7a:	681a      	ldr	r2, [r3, #0]
 800bf7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf80:	2164      	movs	r1, #100	; 0x64
 800bf82:	fb01 f303 	mul.w	r3, r1, r3
 800bf86:	4413      	add	r3, r2
 800bf88:	3396      	adds	r3, #150	; 0x96
 800bf8a:	4602      	mov	r2, r0
 800bf8c:	801a      	strh	r2, [r3, #0]
    motor_cluster->motor[i].init_offset_f = 1;
 800bf8e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800bf92:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800bf96:	681a      	ldr	r2, [r3, #0]
 800bf98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf9c:	2164      	movs	r1, #100	; 0x64
 800bf9e:	fb01 f303 	mul.w	r3, r1, r3
 800bfa2:	4413      	add	r3, r2
 800bfa4:	3398      	adds	r3, #152	; 0x98
 800bfa6:	2201      	movs	r2, #1
 800bfa8:	801a      	strh	r2, [r3, #0]
    err = motor_device_register(&(motor_cluster->motor[i]), motor_name[i], 0);
 800bfaa:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800bfae:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 800bfb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfb6:	2164      	movs	r1, #100	; 0x64
 800bfb8:	fb01 f303 	mul.w	r3, r1, r3
 800bfbc:	3338      	adds	r3, #56	; 0x38
 800bfbe:	6812      	ldr	r2, [r2, #0]
 800bfc0:	4413      	add	r3, r2
 800bfc2:	1d18      	adds	r0, r3, #4
 800bfc4:	f107 0294 	add.w	r2, r7, #148	; 0x94
 800bfc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfcc:	015b      	lsls	r3, r3, #5
 800bfce:	4413      	add	r3, r2
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	4619      	mov	r1, r3
 800bfd4:	f7ff fc50 	bl	800b878 <motor_device_register>
 800bfd8:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
    if (err != RM_OK)
 800bfdc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d16b      	bne.n	800c0bc <motor_cluster_pid_register+0x2fc>
      goto end;

    // registers the controllers
    pid_struct_init(&motor_cluster->motor_pid[i], 10000, 500, 4.5f, 0.05, 0);
 800bfe4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800bfe8:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 800bfec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bff0:	019b      	lsls	r3, r3, #6
 800bff2:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800bff6:	6812      	ldr	r2, [r2, #0]
 800bff8:	4413      	add	r3, r2
 800bffa:	3304      	adds	r3, #4
 800bffc:	ed9f 2a40 	vldr	s4, [pc, #256]	; 800c100 <motor_cluster_pid_register+0x340>
 800c000:	eddf 1a40 	vldr	s3, [pc, #256]	; 800c104 <motor_cluster_pid_register+0x344>
 800c004:	eeb1 1a02 	vmov.f32	s2, #18	; 0x40900000  4.5
 800c008:	eddf 0a3f 	vldr	s1, [pc, #252]	; 800c108 <motor_cluster_pid_register+0x348>
 800c00c:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 800c10c <motor_cluster_pid_register+0x34c>
 800c010:	4618      	mov	r0, r3
 800c012:	f7ff faad 	bl	800b570 <pid_struct_init>
    motor_cluster->ctrl[i].convert_feedback = motor_pid_input_convert;
 800c016:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800c01a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800c01e:	6819      	ldr	r1, [r3, #0]
 800c020:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800c024:	4613      	mov	r3, r2
 800c026:	00db      	lsls	r3, r3, #3
 800c028:	4413      	add	r3, r2
 800c02a:	00db      	lsls	r3, r3, #3
 800c02c:	440b      	add	r3, r1
 800c02e:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 800c032:	4a37      	ldr	r2, [pc, #220]	; (800c110 <motor_cluster_pid_register+0x350>)
 800c034:	601a      	str	r2, [r3, #0]
    err = pid_controller_register(&(motor_cluster->ctrl[i]), controller_name[i],
 800c036:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800c03a:	f5a3 718a 	sub.w	r1, r3, #276	; 0x114
 800c03e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800c042:	4613      	mov	r3, r2
 800c044:	00db      	lsls	r3, r3, #3
 800c046:	4413      	add	r3, r2
 800c048:	00db      	lsls	r3, r3, #3
 800c04a:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 800c04e:	680a      	ldr	r2, [r1, #0]
 800c050:	4413      	add	r3, r2
 800c052:	1d18      	adds	r0, r3, #4
 800c054:	f107 0214 	add.w	r2, r7, #20
 800c058:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c05c:	015b      	lsls	r3, r3, #5
 800c05e:	18d1      	adds	r1, r2, r3
 800c060:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800c064:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 800c068:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c06c:	019b      	lsls	r3, r3, #6
 800c06e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c072:	6812      	ldr	r2, [r2, #0]
 800c074:	4413      	add	r3, r2
 800c076:	1d1c      	adds	r4, r3, #4
 800c078:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800c07c:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 800c080:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c084:	33b2      	adds	r3, #178	; 0xb2
 800c086:	009b      	lsls	r3, r3, #2
 800c088:	6812      	ldr	r2, [r2, #0]
 800c08a:	4413      	add	r3, r2
 800c08c:	3304      	adds	r3, #4
 800c08e:	2201      	movs	r2, #1
 800c090:	9200      	str	r2, [sp, #0]
 800c092:	4622      	mov	r2, r4
 800c094:	f7ff fb76 	bl	800b784 <pid_controller_register>
 800c098:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
                                  &(motor_cluster->motor_pid[i]),
                                  &(motor_cluster->motor_feedback[i]), 1);
    if (err != RM_OK)
 800c09c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d10d      	bne.n	800c0c0 <motor_cluster_pid_register+0x300>
  for (int i = 0; i < 4; i++) {
 800c0a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0a8:	3301      	adds	r3, #1
 800c0aa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800c0ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0b2:	2b03      	cmp	r3, #3
 800c0b4:	f77f af36 	ble.w	800bf24 <motor_cluster_pid_register+0x164>
      goto end;
  }

  return RM_OK;
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	e00c      	b.n	800c0d6 <motor_cluster_pid_register+0x316>
      goto end;
 800c0bc:	bf00      	nop
 800c0be:	e000      	b.n	800c0c2 <motor_cluster_pid_register+0x302>
      goto end;
 800c0c0:	bf00      	nop
end:
  object_detach(&(motor_cluster->parent));
 800c0c2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800c0c6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	f000 fa5b 	bl	800c588 <object_detach>

  return err;
 800c0d2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
}
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	f507 7792 	add.w	r7, r7, #292	; 0x124
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	bd90      	pop	{r4, r7, pc}
 800c0e0:	0800cccc 	.word	0x0800cccc
 800c0e4:	0800ccd4 	.word	0x0800ccd4
 800c0e8:	0800ccdc 	.word	0x0800ccdc
 800c0ec:	0800cce4 	.word	0x0800cce4
 800c0f0:	0800ccec 	.word	0x0800ccec
 800c0f4:	0800ccf4 	.word	0x0800ccf4
 800c0f8:	0800ccfc 	.word	0x0800ccfc
 800c0fc:	0800cd04 	.word	0x0800cd04
 800c100:	00000000 	.word	0x00000000
 800c104:	3d4ccccd 	.word	0x3d4ccccd
 800c108:	43fa0000 	.word	0x43fa0000
 800c10c:	461c4000 	.word	0x461c4000
 800c110:	0800c35d 	.word	0x0800c35d

0800c114 <motor_cluster_execute>:

/// @brief Executes the motor cluster
/// @param motor_cluster The motor cluster to execute
/// @return RM_OK if the motor cluster is executed successfully
int32_t motor_cluster_execute(struct motor_cluster *motor_cluster) {
 800c114:	b580      	push	{r7, lr}
 800c116:	b08e      	sub	sp, #56	; 0x38
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
  struct wheel_fdb wheel_fdb[4];

  //  if (motor_cluster == NULL)
  //    return -RM_INVAL;

  for (int i = 0; i < 4; i++) {
 800c11c:	2300      	movs	r3, #0
 800c11e:	637b      	str	r3, [r7, #52]	; 0x34
 800c120:	e071      	b.n	800c206 <motor_cluster_execute+0xf2>
    pdata = motor_device_get_data(&(motor_cluster->motor[i]));
 800c122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c124:	2264      	movs	r2, #100	; 0x64
 800c126:	fb02 f303 	mul.w	r3, r2, r3
 800c12a:	3338      	adds	r3, #56	; 0x38
 800c12c:	687a      	ldr	r2, [r7, #4]
 800c12e:	4413      	add	r3, r2
 800c130:	3304      	adds	r3, #4
 800c132:	4618      	mov	r0, r3
 800c134:	f7ff fbfc 	bl	800b930 <motor_device_get_data>
 800c138:	6338      	str	r0, [r7, #48]	; 0x30

    wheel_fdb[i].total_ecd = pdata->total_ecd;
 800c13a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c13c:	68db      	ldr	r3, [r3, #12]
 800c13e:	ee07 3a90 	vmov	s15, r3
 800c142:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c148:	00db      	lsls	r3, r3, #3
 800c14a:	3338      	adds	r3, #56	; 0x38
 800c14c:	443b      	add	r3, r7
 800c14e:	3b2c      	subs	r3, #44	; 0x2c
 800c150:	edc3 7a00 	vstr	s15, [r3]
    wheel_fdb[i].speed_rpm = pdata->speed_rpm;
 800c154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c156:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800c15a:	ee07 3a90 	vmov	s15, r3
 800c15e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c164:	00db      	lsls	r3, r3, #3
 800c166:	3338      	adds	r3, #56	; 0x38
 800c168:	443b      	add	r3, r7
 800c16a:	3b28      	subs	r3, #40	; 0x28
 800c16c:	edc3 7a00 	vstr	s15, [r3]

    controller_set_input(&motor_cluster->ctrl[i],
 800c170:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c172:	4613      	mov	r3, r2
 800c174:	00db      	lsls	r3, r3, #3
 800c176:	4413      	add	r3, r2
 800c178:	00db      	lsls	r3, r3, #3
 800c17a:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 800c17e:	687a      	ldr	r2, [r7, #4]
 800c180:	4413      	add	r3, r2
 800c182:	1d19      	adds	r1, r3, #4
 800c184:	687a      	ldr	r2, [r7, #4]
 800c186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c188:	330a      	adds	r3, #10
 800c18a:	009b      	lsls	r3, r3, #2
 800c18c:	4413      	add	r3, r2
 800c18e:	3304      	adds	r3, #4
 800c190:	edd3 7a00 	vldr	s15, [r3]
 800c194:	eeb0 0a67 	vmov.f32	s0, s15
 800c198:	4608      	mov	r0, r1
 800c19a:	f7ff fa94 	bl	800b6c6 <controller_set_input>
                         motor_cluster->wheels.wheel_rpm[i]);
    controller_execute(&motor_cluster->ctrl[i], (void *)pdata);
 800c19e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c1a0:	4613      	mov	r3, r2
 800c1a2:	00db      	lsls	r3, r3, #3
 800c1a4:	4413      	add	r3, r2
 800c1a6:	00db      	lsls	r3, r3, #3
 800c1a8:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 800c1ac:	687a      	ldr	r2, [r7, #4]
 800c1ae:	4413      	add	r3, r2
 800c1b0:	3304      	adds	r3, #4
 800c1b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	f7ff fa4d 	bl	800b654 <controller_execute>
    controller_get_output(&motor_cluster->ctrl[i], &motor_out);
 800c1ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c1bc:	4613      	mov	r3, r2
 800c1be:	00db      	lsls	r3, r3, #3
 800c1c0:	4413      	add	r3, r2
 800c1c2:	00db      	lsls	r3, r3, #3
 800c1c4:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 800c1c8:	687a      	ldr	r2, [r7, #4]
 800c1ca:	4413      	add	r3, r2
 800c1cc:	3304      	adds	r3, #4
 800c1ce:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800c1d2:	4611      	mov	r1, r2
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	f7ff fa8b 	bl	800b6f0 <controller_get_output>

    motor_device_set_current(&motor_cluster->motor[i], (int16_t)motor_out);
 800c1da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1dc:	2264      	movs	r2, #100	; 0x64
 800c1de:	fb02 f303 	mul.w	r3, r2, r3
 800c1e2:	3338      	adds	r3, #56	; 0x38
 800c1e4:	687a      	ldr	r2, [r7, #4]
 800c1e6:	4413      	add	r3, r2
 800c1e8:	3304      	adds	r3, #4
 800c1ea:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800c1ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c1f2:	ee17 2a90 	vmov	r2, s15
 800c1f6:	b212      	sxth	r2, r2
 800c1f8:	4611      	mov	r1, r2
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	f7ff fba9 	bl	800b952 <motor_device_set_current>
  for (int i = 0; i < 4; i++) {
 800c200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c202:	3301      	adds	r3, #1
 800c204:	637b      	str	r3, [r7, #52]	; 0x34
 800c206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c208:	2b03      	cmp	r3, #3
 800c20a:	dd8a      	ble.n	800c122 <motor_cluster_execute+0xe>
  }

  return RM_OK;
 800c20c:	2300      	movs	r3, #0
}
 800c20e:	4618      	mov	r0, r3
 800c210:	3738      	adds	r7, #56	; 0x38
 800c212:	46bd      	mov	sp, r7
 800c214:	bd80      	pop	{r7, pc}

0800c216 <motor_cluster_set_rpm>:
/// @param motor1 The RPM of the first motor
/// @param motor2 The RPM of the second motor
/// @param motor3 The RPM of the third motor
/// @param motor4 The RPM of the fourth motor
int32_t motor_cluster_set_rpm(struct motor_cluster *motor_cluster, float motor1,
                              float motor2, float motor3, float motor4) {
 800c216:	b480      	push	{r7}
 800c218:	b087      	sub	sp, #28
 800c21a:	af00      	add	r7, sp, #0
 800c21c:	6178      	str	r0, [r7, #20]
 800c21e:	ed87 0a04 	vstr	s0, [r7, #16]
 800c222:	edc7 0a03 	vstr	s1, [r7, #12]
 800c226:	ed87 1a02 	vstr	s2, [r7, #8]
 800c22a:	edc7 1a01 	vstr	s3, [r7, #4]
  if (motor_cluster == NULL)
 800c22e:	697b      	ldr	r3, [r7, #20]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d102      	bne.n	800c23a <motor_cluster_set_rpm+0x24>
    return -RM_INVAL;
 800c234:	f06f 0301 	mvn.w	r3, #1
 800c238:	e00c      	b.n	800c254 <motor_cluster_set_rpm+0x3e>
  motor_cluster->wheels.wheel_rpm[0] = motor1;
 800c23a:	697b      	ldr	r3, [r7, #20]
 800c23c:	693a      	ldr	r2, [r7, #16]
 800c23e:	62da      	str	r2, [r3, #44]	; 0x2c
  motor_cluster->wheels.wheel_rpm[1] = motor2;
 800c240:	697b      	ldr	r3, [r7, #20]
 800c242:	68fa      	ldr	r2, [r7, #12]
 800c244:	631a      	str	r2, [r3, #48]	; 0x30
  motor_cluster->wheels.wheel_rpm[2] = motor3;
 800c246:	697b      	ldr	r3, [r7, #20]
 800c248:	68ba      	ldr	r2, [r7, #8]
 800c24a:	635a      	str	r2, [r3, #52]	; 0x34
  motor_cluster->wheels.wheel_rpm[3] = motor4;
 800c24c:	697b      	ldr	r3, [r7, #20]
 800c24e:	687a      	ldr	r2, [r7, #4]
 800c250:	639a      	str	r2, [r3, #56]	; 0x38
  return RM_OK;
 800c252:	2300      	movs	r3, #0
}
 800c254:	4618      	mov	r0, r3
 800c256:	371c      	adds	r7, #28
 800c258:	46bd      	mov	sp, r7
 800c25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25e:	4770      	bx	lr

0800c260 <motor_cluster_get_info>:

/// @brief Gets the information of the motor cluster
/// @param motor_cluster The motor cluster to get the information of
/// @param info The information of the motor cluster
int32_t motor_cluster_get_info(struct motor_cluster *motor_cluster,
                               struct motor_cluster_info *info) {
 800c260:	b480      	push	{r7}
 800c262:	b085      	sub	sp, #20
 800c264:	af00      	add	r7, sp, #0
 800c266:	6078      	str	r0, [r7, #4]
 800c268:	6039      	str	r1, [r7, #0]
  if (motor_cluster == NULL)
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d101      	bne.n	800c274 <motor_cluster_get_info+0x14>
    return RM_ERROR;
 800c270:	2301      	movs	r3, #1
 800c272:	e015      	b.n	800c2a0 <motor_cluster_get_info+0x40>

  for (int i = 0; i < 4; i++) {
 800c274:	2300      	movs	r3, #0
 800c276:	60fb      	str	r3, [r7, #12]
 800c278:	e00e      	b.n	800c298 <motor_cluster_get_info+0x38>
    info->wheel_rpm[i] = motor_cluster->wheels.wheel_rpm[i];
 800c27a:	687a      	ldr	r2, [r7, #4]
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	330a      	adds	r3, #10
 800c280:	009b      	lsls	r3, r3, #2
 800c282:	4413      	add	r3, r2
 800c284:	3304      	adds	r3, #4
 800c286:	681a      	ldr	r2, [r3, #0]
 800c288:	6839      	ldr	r1, [r7, #0]
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	009b      	lsls	r3, r3, #2
 800c28e:	440b      	add	r3, r1
 800c290:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < 4; i++) {
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	3301      	adds	r3, #1
 800c296:	60fb      	str	r3, [r7, #12]
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	2b03      	cmp	r3, #3
 800c29c:	dded      	ble.n	800c27a <motor_cluster_get_info+0x1a>
  }

  return RM_OK;
 800c29e:	2300      	movs	r3, #0
}
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	3714      	adds	r7, #20
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2aa:	4770      	bx	lr

0800c2ac <motor_cluster_find>:

/// @brief Finds a motor cluster by name
/// @param name The name of the motor cluster
motor_cluster_t motor_cluster_find(const char *name) {
 800c2ac:	b580      	push	{r7, lr}
 800c2ae:	b084      	sub	sp, #16
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]
  struct object *object;

  object = object_find(name, Object_Class_Chassis);
 800c2b4:	2103      	movs	r1, #3
 800c2b6:	6878      	ldr	r0, [r7, #4]
 800c2b8:	f000 f91a 	bl	800c4f0 <object_find>
 800c2bc:	60f8      	str	r0, [r7, #12]

  return (motor_cluster_t)object;
 800c2be:	68fb      	ldr	r3, [r7, #12]
}
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	3710      	adds	r7, #16
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	bd80      	pop	{r7, pc}

0800c2c8 <motor_cluster_enable>:

/// @brief Enables the motor cluster
/// @param motor_cluster The motor cluster to enable
int32_t motor_cluster_enable(struct motor_cluster *motor_cluster) {
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	b084      	sub	sp, #16
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	6078      	str	r0, [r7, #4]
  if (motor_cluster == NULL)
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d102      	bne.n	800c2dc <motor_cluster_enable+0x14>
    return -RM_INVAL;
 800c2d6:	f06f 0301 	mvn.w	r3, #1
 800c2da:	e016      	b.n	800c30a <motor_cluster_enable+0x42>

  for (int i = 0; i < 4; i++) {
 800c2dc:	2300      	movs	r3, #0
 800c2de:	60fb      	str	r3, [r7, #12]
 800c2e0:	e00f      	b.n	800c302 <motor_cluster_enable+0x3a>
    controller_enable(&(motor_cluster->ctrl[i]));
 800c2e2:	68fa      	ldr	r2, [r7, #12]
 800c2e4:	4613      	mov	r3, r2
 800c2e6:	00db      	lsls	r3, r3, #3
 800c2e8:	4413      	add	r3, r2
 800c2ea:	00db      	lsls	r3, r3, #3
 800c2ec:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 800c2f0:	687a      	ldr	r2, [r7, #4]
 800c2f2:	4413      	add	r3, r2
 800c2f4:	3304      	adds	r3, #4
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	f7ff fa14 	bl	800b724 <controller_enable>
  for (int i = 0; i < 4; i++) {
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	3301      	adds	r3, #1
 800c300:	60fb      	str	r3, [r7, #12]
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	2b03      	cmp	r3, #3
 800c306:	ddec      	ble.n	800c2e2 <motor_cluster_enable+0x1a>
  }

  return RM_OK;
 800c308:	2300      	movs	r3, #0
}
 800c30a:	4618      	mov	r0, r3
 800c30c:	3710      	adds	r7, #16
 800c30e:	46bd      	mov	sp, r7
 800c310:	bd80      	pop	{r7, pc}

0800c312 <motor_cluster_disable>:

/// @brief Disables the motor cluster
/// @param motor_cluster The motor cluster to disable
int32_t motor_cluster_disable(struct motor_cluster *motor_cluster) {
 800c312:	b580      	push	{r7, lr}
 800c314:	b084      	sub	sp, #16
 800c316:	af00      	add	r7, sp, #0
 800c318:	6078      	str	r0, [r7, #4]
  if (motor_cluster == NULL)
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d102      	bne.n	800c326 <motor_cluster_disable+0x14>
    return -RM_INVAL;
 800c320:	f06f 0301 	mvn.w	r3, #1
 800c324:	e016      	b.n	800c354 <motor_cluster_disable+0x42>

  for (int i = 0; i < 4; i++) {
 800c326:	2300      	movs	r3, #0
 800c328:	60fb      	str	r3, [r7, #12]
 800c32a:	e00f      	b.n	800c34c <motor_cluster_disable+0x3a>
    controller_disable(&(motor_cluster->ctrl[i]));
 800c32c:	68fa      	ldr	r2, [r7, #12]
 800c32e:	4613      	mov	r3, r2
 800c330:	00db      	lsls	r3, r3, #3
 800c332:	4413      	add	r3, r2
 800c334:	00db      	lsls	r3, r3, #3
 800c336:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 800c33a:	687a      	ldr	r2, [r7, #4]
 800c33c:	4413      	add	r3, r2
 800c33e:	3304      	adds	r3, #4
 800c340:	4618      	mov	r0, r3
 800c342:	f7ff fa03 	bl	800b74c <controller_disable>
  for (int i = 0; i < 4; i++) {
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	3301      	adds	r3, #1
 800c34a:	60fb      	str	r3, [r7, #12]
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	2b03      	cmp	r3, #3
 800c350:	ddec      	ble.n	800c32c <motor_cluster_disable+0x1a>
  }

  return RM_OK;
 800c352:	2300      	movs	r3, #0
}
 800c354:	4618      	mov	r0, r3
 800c356:	3710      	adds	r7, #16
 800c358:	46bd      	mov	sp, r7
 800c35a:	bd80      	pop	{r7, pc}

0800c35c <motor_pid_input_convert>:

/// @brief Converts the input of the PID controller
/// @param ctrl The controller
static int32_t motor_pid_input_convert(struct controller *ctrl, void *input) {
 800c35c:	b480      	push	{r7}
 800c35e:	b085      	sub	sp, #20
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
 800c364:	6039      	str	r1, [r7, #0]
  pid_feedback_t pid_fdb = (pid_feedback_t)(ctrl->feedback);
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c36a:	60fb      	str	r3, [r7, #12]
  motor_data_t data = (motor_data_t)input;
 800c36c:	683b      	ldr	r3, [r7, #0]
 800c36e:	60bb      	str	r3, [r7, #8]
  pid_fdb->feedback = data->speed_rpm;
 800c370:	68bb      	ldr	r3, [r7, #8]
 800c372:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800c376:	ee07 3a90 	vmov	s15, r3
 800c37a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	edc3 7a00 	vstr	s15, [r3]

  return RM_OK;
 800c384:	2300      	movs	r3, #0
}
 800c386:	4618      	mov	r0, r3
 800c388:	3714      	adds	r7, #20
 800c38a:	46bd      	mov	sp, r7
 800c38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c390:	4770      	bx	lr

0800c392 <__list_add>:
 * the prev/next entries already!
 */
static __inline void __list_add(list_t *new,
                                list_t *prev,
                                list_t *next)
{
 800c392:	b480      	push	{r7}
 800c394:	b085      	sub	sp, #20
 800c396:	af00      	add	r7, sp, #0
 800c398:	60f8      	str	r0, [r7, #12]
 800c39a:	60b9      	str	r1, [r7, #8]
 800c39c:	607a      	str	r2, [r7, #4]
  next->prev = new;
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	68fa      	ldr	r2, [r7, #12]
 800c3a2:	605a      	str	r2, [r3, #4]
  new->next = next;
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	687a      	ldr	r2, [r7, #4]
 800c3a8:	601a      	str	r2, [r3, #0]
  new->prev = prev;
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	68ba      	ldr	r2, [r7, #8]
 800c3ae:	605a      	str	r2, [r3, #4]
  prev->next = new;
 800c3b0:	68bb      	ldr	r3, [r7, #8]
 800c3b2:	68fa      	ldr	r2, [r7, #12]
 800c3b4:	601a      	str	r2, [r3, #0]
}
 800c3b6:	bf00      	nop
 800c3b8:	3714      	adds	r7, #20
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c0:	4770      	bx	lr

0800c3c2 <list_add>:
 *
 * Insert a new entry after the specified head.
 * This is good for implementing stacks.
 */
static __inline void list_add(list_t *new, list_t *head)
{
 800c3c2:	b580      	push	{r7, lr}
 800c3c4:	b082      	sub	sp, #8
 800c3c6:	af00      	add	r7, sp, #0
 800c3c8:	6078      	str	r0, [r7, #4]
 800c3ca:	6039      	str	r1, [r7, #0]
  __list_add(new, head, head->next);
 800c3cc:	683b      	ldr	r3, [r7, #0]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	461a      	mov	r2, r3
 800c3d2:	6839      	ldr	r1, [r7, #0]
 800c3d4:	6878      	ldr	r0, [r7, #4]
 800c3d6:	f7ff ffdc 	bl	800c392 <__list_add>
}
 800c3da:	bf00      	nop
 800c3dc:	3708      	adds	r7, #8
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	bd80      	pop	{r7, pc}

0800c3e2 <__list_del>:
 *
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 */
static __inline void __list_del(list_t *prev, list_t *next)
{
 800c3e2:	b480      	push	{r7}
 800c3e4:	b083      	sub	sp, #12
 800c3e6:	af00      	add	r7, sp, #0
 800c3e8:	6078      	str	r0, [r7, #4]
 800c3ea:	6039      	str	r1, [r7, #0]
  next->prev = prev;
 800c3ec:	683b      	ldr	r3, [r7, #0]
 800c3ee:	687a      	ldr	r2, [r7, #4]
 800c3f0:	605a      	str	r2, [r3, #4]
  prev->next = next;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	683a      	ldr	r2, [r7, #0]
 800c3f6:	601a      	str	r2, [r3, #0]
}
 800c3f8:	bf00      	nop
 800c3fa:	370c      	adds	r7, #12
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c402:	4770      	bx	lr

0800c404 <list_del>:
 * @entry: the element to delete from the list.
 * Note: list_empty() on entry does not return true after this, the entry is
 * in an undefined state.
 */
static __inline void list_del(list_t *entry)
{
 800c404:	b580      	push	{r7, lr}
 800c406:	b082      	sub	sp, #8
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
  __list_del(entry->prev, entry->next);
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	685a      	ldr	r2, [r3, #4]
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	4619      	mov	r1, r3
 800c416:	4610      	mov	r0, r2
 800c418:	f7ff ffe3 	bl	800c3e2 <__list_del>
}
 800c41c:	bf00      	nop
 800c41e:	3708      	adds	r7, #8
 800c420:	46bd      	mov	sp, r7
 800c422:	bd80      	pop	{r7, pc}

0800c424 <object_get_information>:
    // {Object_Class_Gimbal, _OBJ_CONTAINER_LIST_INIT(Object_Info_Gimbal)},
    // /* initialize object container - Controller */
    // {Object_Class_Shoot, _OBJ_CONTAINER_LIST_INIT(Object_Info_Shoot)},
};

struct object_information *object_get_information(enum object_class_type type) {
 800c424:	b480      	push	{r7}
 800c426:	b085      	sub	sp, #20
 800c428:	af00      	add	r7, sp, #0
 800c42a:	4603      	mov	r3, r0
 800c42c:	71fb      	strb	r3, [r7, #7]
  int index;

  for (index = 0; index < Object_Info_Unknown; index++)
 800c42e:	2300      	movs	r3, #0
 800c430:	60fb      	str	r3, [r7, #12]
 800c432:	e015      	b.n	800c460 <object_get_information+0x3c>
    if (object_container[index].type == type)
 800c434:	490f      	ldr	r1, [pc, #60]	; (800c474 <object_get_information+0x50>)
 800c436:	68fa      	ldr	r2, [r7, #12]
 800c438:	4613      	mov	r3, r2
 800c43a:	005b      	lsls	r3, r3, #1
 800c43c:	4413      	add	r3, r2
 800c43e:	009b      	lsls	r3, r3, #2
 800c440:	440b      	add	r3, r1
 800c442:	781b      	ldrb	r3, [r3, #0]
 800c444:	79fa      	ldrb	r2, [r7, #7]
 800c446:	429a      	cmp	r2, r3
 800c448:	d107      	bne.n	800c45a <object_get_information+0x36>
      return &object_container[index];
 800c44a:	68fa      	ldr	r2, [r7, #12]
 800c44c:	4613      	mov	r3, r2
 800c44e:	005b      	lsls	r3, r3, #1
 800c450:	4413      	add	r3, r2
 800c452:	009b      	lsls	r3, r3, #2
 800c454:	4a07      	ldr	r2, [pc, #28]	; (800c474 <object_get_information+0x50>)
 800c456:	4413      	add	r3, r2
 800c458:	e006      	b.n	800c468 <object_get_information+0x44>
  for (index = 0; index < Object_Info_Unknown; index++)
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	3301      	adds	r3, #1
 800c45e:	60fb      	str	r3, [r7, #12]
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	2b03      	cmp	r3, #3
 800c464:	dde6      	ble.n	800c434 <object_get_information+0x10>

  return NULL;
 800c466:	2300      	movs	r3, #0
}
 800c468:	4618      	mov	r0, r3
 800c46a:	3714      	adds	r7, #20
 800c46c:	46bd      	mov	sp, r7
 800c46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c472:	4770      	bx	lr
 800c474:	20000100 	.word	0x20000100

0800c478 <object_init>:

int32_t object_init(struct object *object, enum object_class_type type,
                    const char *name) {
 800c478:	b590      	push	{r4, r7, lr}
 800c47a:	b089      	sub	sp, #36	; 0x24
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	60f8      	str	r0, [r7, #12]
 800c480:	460b      	mov	r3, r1
 800c482:	607a      	str	r2, [r7, #4]
 800c484:	72fb      	strb	r3, [r7, #11]
  struct object_information *information;

  var_cpu_sr();

  /* get object information */
  information = object_get_information(type);
 800c486:	7afb      	ldrb	r3, [r7, #11]
 800c488:	4618      	mov	r0, r3
 800c48a:	f7ff ffcb 	bl	800c424 <object_get_information>
 800c48e:	61f8      	str	r0, [r7, #28]
  assert_param_obj(information != NULL);

  /* initialize object's parameters */
  object->type = type;
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	7afa      	ldrb	r2, [r7, #11]
 800c494:	f883 2020 	strb.w	r2, [r3, #32]

  /* copy name */
  if (strlen(name) > OBJECT_NAME_MAX_LEN - 1) {
 800c498:	6878      	ldr	r0, [r7, #4]
 800c49a:	f7f3 fea9 	bl	80001f0 <strlen>
 800c49e:	4603      	mov	r3, r0
 800c4a0:	2b1f      	cmp	r3, #31
 800c4a2:	d902      	bls.n	800c4aa <object_init+0x32>
    return -1;
 800c4a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c4a8:	e01e      	b.n	800c4e8 <object_init+0x70>
  }

  strncpy(object->name, name, OBJECT_NAME_MAX_LEN);
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	2220      	movs	r2, #32
 800c4ae:	6879      	ldr	r1, [r7, #4]
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	f000 fa9d 	bl	800c9f0 <strncpy>
  object->name[OBJECT_NAME_MAX_LEN - 1] = '\0';
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	2200      	movs	r2, #0
 800c4ba:	77da      	strb	r2, [r3, #31]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800c4bc:	f3ef 8310 	mrs	r3, PRIMASK
 800c4c0:	617b      	str	r3, [r7, #20]
  return(result);
 800c4c2:	697b      	ldr	r3, [r7, #20]

  /* lock interrupt */
  enter_critical();
 800c4c4:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 800c4c6:	b672      	cpsid	i
}
 800c4c8:	bf00      	nop

  {
    /* insert object into information object list */
    list_add(&(object->list), &(information->object_list));
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800c4d0:	69fb      	ldr	r3, [r7, #28]
 800c4d2:	3304      	adds	r3, #4
 800c4d4:	4619      	mov	r1, r3
 800c4d6:	4610      	mov	r0, r2
 800c4d8:	f7ff ff73 	bl	800c3c2 <list_add>
 800c4dc:	61bc      	str	r4, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c4de:	69bb      	ldr	r3, [r7, #24]
 800c4e0:	f383 8810 	msr	PRIMASK, r3
}
 800c4e4:	bf00      	nop
  }

  /* unlock interrupt */
  exit_critical();
  return 0;
 800c4e6:	2300      	movs	r3, #0
}
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	3724      	adds	r7, #36	; 0x24
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	bd90      	pop	{r4, r7, pc}

0800c4f0 <object_find>:

object_t object_find(const char *name, enum object_class_type type) {
 800c4f0:	b590      	push	{r4, r7, lr}
 800c4f2:	b089      	sub	sp, #36	; 0x24
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
 800c4f8:	460b      	mov	r3, r1
 800c4fa:	70fb      	strb	r3, [r7, #3]
  struct object *object = NULL;
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	617b      	str	r3, [r7, #20]
  struct object_information *information = NULL;
 800c500:	2300      	movs	r3, #0
 800c502:	61fb      	str	r3, [r7, #28]
  list_t *node = NULL;
 800c504:	2300      	movs	r3, #0
 800c506:	61bb      	str	r3, [r7, #24]

  var_cpu_sr();

  /* parameter check */
  if ((name == NULL) || (type >= Object_Class_Unknown))
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d002      	beq.n	800c514 <object_find+0x24>
 800c50e:	78fb      	ldrb	r3, [r7, #3]
 800c510:	2b05      	cmp	r3, #5
 800c512:	d901      	bls.n	800c518 <object_find+0x28>
    return NULL;
 800c514:	2300      	movs	r3, #0
 800c516:	e033      	b.n	800c580 <object_find+0x90>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800c518:	f3ef 8310 	mrs	r3, PRIMASK
 800c51c:	613b      	str	r3, [r7, #16]
  return(result);
 800c51e:	693b      	ldr	r3, [r7, #16]

  /* enter critical */
  enter_critical();
 800c520:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 800c522:	b672      	cpsid	i
}
 800c524:	bf00      	nop

  /* try to find object */
  if (information == NULL) {
 800c526:	69fb      	ldr	r3, [r7, #28]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d104      	bne.n	800c536 <object_find+0x46>
    information = object_get_information(type);
 800c52c:	78fb      	ldrb	r3, [r7, #3]
 800c52e:	4618      	mov	r0, r3
 800c530:	f7ff ff78 	bl	800c424 <object_get_information>
 800c534:	61f8      	str	r0, [r7, #28]
    assert_param_obj(information != NULL);
  }
  for (node = information->object_list.next;
 800c536:	69fb      	ldr	r3, [r7, #28]
 800c538:	685b      	ldr	r3, [r3, #4]
 800c53a:	61bb      	str	r3, [r7, #24]
 800c53c:	e015      	b.n	800c56a <object_find+0x7a>
       node != &(information->object_list); node = node->next) {
    object = list_entry(node, struct object, list);
 800c53e:	69bb      	ldr	r3, [r7, #24]
 800c540:	3b24      	subs	r3, #36	; 0x24
 800c542:	617b      	str	r3, [r7, #20]
    if (strncmp(object->name, name, OBJECT_NAME_MAX_LEN) == 0) {
 800c544:	697b      	ldr	r3, [r7, #20]
 800c546:	2220      	movs	r2, #32
 800c548:	6879      	ldr	r1, [r7, #4]
 800c54a:	4618      	mov	r0, r3
 800c54c:	f000 fa3e 	bl	800c9cc <strncmp>
 800c550:	4603      	mov	r3, r0
 800c552:	2b00      	cmp	r3, #0
 800c554:	d106      	bne.n	800c564 <object_find+0x74>
 800c556:	60fc      	str	r4, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	f383 8810 	msr	PRIMASK, r3
}
 800c55e:	bf00      	nop
      /* leave critical */
      exit_critical();

      return object;
 800c560:	697b      	ldr	r3, [r7, #20]
 800c562:	e00d      	b.n	800c580 <object_find+0x90>
       node != &(information->object_list); node = node->next) {
 800c564:	69bb      	ldr	r3, [r7, #24]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	61bb      	str	r3, [r7, #24]
 800c56a:	69fb      	ldr	r3, [r7, #28]
 800c56c:	3304      	adds	r3, #4
 800c56e:	69ba      	ldr	r2, [r7, #24]
 800c570:	429a      	cmp	r2, r3
 800c572:	d1e4      	bne.n	800c53e <object_find+0x4e>
 800c574:	60bc      	str	r4, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c576:	68bb      	ldr	r3, [r7, #8]
 800c578:	f383 8810 	msr	PRIMASK, r3
}
 800c57c:	bf00      	nop
  }

  /* leave critical */
  exit_critical();

  return NULL;
 800c57e:	2300      	movs	r3, #0
}
 800c580:	4618      	mov	r0, r3
 800c582:	3724      	adds	r7, #36	; 0x24
 800c584:	46bd      	mov	sp, r7
 800c586:	bd90      	pop	{r4, r7, pc}

0800c588 <object_detach>:

void object_detach(object_t object) {
 800c588:	b590      	push	{r4, r7, lr}
 800c58a:	b085      	sub	sp, #20
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]

  /* object check */
  assert_param_obj(object != NULL);

  /* reset object type */
  object->type = Object_Class_Unknown;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	2206      	movs	r2, #6
 800c594:	f883 2020 	strb.w	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800c598:	f3ef 8310 	mrs	r3, PRIMASK
 800c59c:	60bb      	str	r3, [r7, #8]
  return(result);
 800c59e:	68bb      	ldr	r3, [r7, #8]

  /* lock interrupt */
  enter_critical();
 800c5a0:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 800c5a2:	b672      	cpsid	i
}
 800c5a4:	bf00      	nop

  /* remove from old list */
  list_del(&(object->list));
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	3324      	adds	r3, #36	; 0x24
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	f7ff ff2a 	bl	800c404 <list_del>
 800c5b0:	60fc      	str	r4, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	f383 8810 	msr	PRIMASK, r3
}
 800c5b8:	bf00      	nop

  /* unlock interrupt */
  exit_critical();
}
 800c5ba:	bf00      	nop
 800c5bc:	3714      	adds	r7, #20
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	bd90      	pop	{r4, r7, pc}

0800c5c2 <fifo_init>:
//! \param  [in] UnitCnt is count of fifo elements.
//! \retval 0 if initialize successfully, otherwise return -1.
//
//******************************************************************************************
int fifo_init(fifo_t *p_fifo, void *p_base_addr, char unit_size, int unit_cnt)
{
 800c5c2:	b480      	push	{r7}
 800c5c4:	b085      	sub	sp, #20
 800c5c6:	af00      	add	r7, sp, #0
 800c5c8:	60f8      	str	r0, [r7, #12]
 800c5ca:	60b9      	str	r1, [r7, #8]
 800c5cc:	603b      	str	r3, [r7, #0]
 800c5ce:	4613      	mov	r3, r2
 800c5d0:	71fb      	strb	r3, [r7, #7]
  ASSERT(p_base_addr);
  ASSERT(unit_size);
  ASSERT(unit_cnt);

  //! Initialize FIFO Control Block.
  p_fifo->p_start_addr = (char *)p_base_addr;
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	68ba      	ldr	r2, [r7, #8]
 800c5d6:	601a      	str	r2, [r3, #0]
  p_fifo->p_end_addr = (char *)p_base_addr + unit_size * unit_cnt - 1;
 800c5d8:	79fb      	ldrb	r3, [r7, #7]
 800c5da:	683a      	ldr	r2, [r7, #0]
 800c5dc:	fb02 f303 	mul.w	r3, r2, r3
 800c5e0:	3b01      	subs	r3, #1
 800c5e2:	68ba      	ldr	r2, [r7, #8]
 800c5e4:	441a      	add	r2, r3
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	605a      	str	r2, [r3, #4]
  p_fifo->free_num = unit_cnt;
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	683a      	ldr	r2, [r7, #0]
 800c5ee:	609a      	str	r2, [r3, #8]
  p_fifo->used_num = 0;
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	60da      	str	r2, [r3, #12]
  p_fifo->unit_size = unit_size;
 800c5f6:	79fa      	ldrb	r2, [r7, #7]
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	611a      	str	r2, [r3, #16]
  p_fifo->p_read_addr = (char *)p_base_addr;
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	68ba      	ldr	r2, [r7, #8]
 800c600:	615a      	str	r2, [r3, #20]
  p_fifo->p_write_addr = (char *)p_base_addr;
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	68ba      	ldr	r2, [r7, #8]
 800c606:	619a      	str	r2, [r3, #24]

  return (0);
 800c608:	2300      	movs	r3, #0
}
 800c60a:	4618      	mov	r0, r3
 800c60c:	3714      	adds	r7, #20
 800c60e:	46bd      	mov	sp, r7
 800c610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c614:	4770      	bx	lr

0800c616 <fifo_put>:
//!
//! \retval 0 if operate successfully, otherwise return -1.
//
//******************************************************************************************
int fifo_put(fifo_t *p_fifo, void *p_element)
{
 800c616:	b590      	push	{r4, r7, lr}
 800c618:	b087      	sub	sp, #28
 800c61a:	af00      	add	r7, sp, #0
 800c61c:	6078      	str	r0, [r7, #4]
 800c61e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800c620:	f3ef 8310 	mrs	r3, PRIMASK
 800c624:	617b      	str	r3, [r7, #20]
  return(result);
 800c626:	697b      	ldr	r3, [r7, #20]
  FIFO_CPU_SR_TYPE cpu_sr;
  ASSERT(p_fifo);
  ASSERT(p_element);

    //Interrupt Off;
  cpu_sr = FIFO_GET_CPU_SR();
 800c628:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 800c62a:	b672      	cpsid	i
}
 800c62c:	bf00      	nop
  FIFO_ENTER_CRITICAL();

  // Full ?
  if (0 == p_fifo->free_num)
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	689b      	ldr	r3, [r3, #8]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d029      	beq.n	800c68a <fifo_put+0x74>
    goto end;
  }

  //! Copy Data

  if (p_fifo->p_write_addr > p_fifo->p_end_addr)
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	699a      	ldr	r2, [r3, #24]
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	685b      	ldr	r3, [r3, #4]
 800c63e:	429a      	cmp	r2, r3
 800c640:	d903      	bls.n	800c64a <fifo_put+0x34>
    p_fifo->p_write_addr = p_fifo->p_start_addr;
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	681a      	ldr	r2, [r3, #0]
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	619a      	str	r2, [r3, #24]

  memcpy(p_fifo->p_write_addr, p_element, p_fifo->unit_size);
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	6998      	ldr	r0, [r3, #24]
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	691b      	ldr	r3, [r3, #16]
 800c652:	461a      	mov	r2, r3
 800c654:	6839      	ldr	r1, [r7, #0]
 800c656:	f000 fa63 	bl	800cb20 <memcpy>
  p_fifo->p_write_addr += p_fifo->unit_size;
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	699b      	ldr	r3, [r3, #24]
 800c65e:	687a      	ldr	r2, [r7, #4]
 800c660:	6912      	ldr	r2, [r2, #16]
 800c662:	441a      	add	r2, r3
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	619a      	str	r2, [r3, #24]
  p_fifo->free_num--;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	689b      	ldr	r3, [r3, #8]
 800c66c:	1e5a      	subs	r2, r3, #1
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	609a      	str	r2, [r3, #8]
  p_fifo->used_num++;
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	68db      	ldr	r3, [r3, #12]
 800c676:	1c5a      	adds	r2, r3, #1
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	60da      	str	r2, [r3, #12]
 800c67c:	613c      	str	r4, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c67e:	693b      	ldr	r3, [r7, #16]
 800c680:	f383 8810 	msr	PRIMASK, r3
}
 800c684:	bf00      	nop
  //Interrupt On
  FIFO_RESTORE_CPU_SR(cpu_sr);
  return (0);
 800c686:	2300      	movs	r3, #0
 800c688:	e007      	b.n	800c69a <fifo_put+0x84>
    goto end;
 800c68a:	bf00      	nop
 800c68c:	60fc      	str	r4, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	f383 8810 	msr	PRIMASK, r3
}
 800c694:	bf00      	nop
end:
  //Interrupt On
  FIFO_RESTORE_CPU_SR(cpu_sr);
  return (-1);
 800c696:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800c69a:	4618      	mov	r0, r3
 800c69c:	371c      	adds	r7, #28
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	bd90      	pop	{r4, r7, pc}

0800c6a2 <fifo_get>:
//!
//! \retval 0 if operate successfully, otherwise return -1.
//
//******************************************************************************************
int fifo_get(fifo_t *p_fifo, void *p_element)
{
 800c6a2:	b590      	push	{r4, r7, lr}
 800c6a4:	b087      	sub	sp, #28
 800c6a6:	af00      	add	r7, sp, #0
 800c6a8:	6078      	str	r0, [r7, #4]
 800c6aa:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800c6ac:	f3ef 8310 	mrs	r3, PRIMASK
 800c6b0:	617b      	str	r3, [r7, #20]
  return(result);
 800c6b2:	697b      	ldr	r3, [r7, #20]
  //! Check input parameters.
  ASSERT(p_fifo);
  ASSERT(p_element);
  
      //Interrupt Off;
  cpu_sr = FIFO_GET_CPU_SR();
 800c6b4:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 800c6b6:	b672      	cpsid	i
}
 800c6b8:	bf00      	nop
  FIFO_ENTER_CRITICAL();

  // Empty ?
  if (0 == p_fifo->used_num)
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	68db      	ldr	r3, [r3, #12]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d029      	beq.n	800c716 <fifo_get+0x74>
    goto end;
  }

  //! Copy Data

  if (p_fifo->p_read_addr > p_fifo->p_end_addr)
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	695a      	ldr	r2, [r3, #20]
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	685b      	ldr	r3, [r3, #4]
 800c6ca:	429a      	cmp	r2, r3
 800c6cc:	d903      	bls.n	800c6d6 <fifo_get+0x34>
  {
    p_fifo->p_read_addr = p_fifo->p_start_addr;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	681a      	ldr	r2, [r3, #0]
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	615a      	str	r2, [r3, #20]
  }
  memcpy(p_element, p_fifo->p_read_addr, p_fifo->unit_size);
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	6959      	ldr	r1, [r3, #20]
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	691b      	ldr	r3, [r3, #16]
 800c6de:	461a      	mov	r2, r3
 800c6e0:	6838      	ldr	r0, [r7, #0]
 800c6e2:	f000 fa1d 	bl	800cb20 <memcpy>
  p_fifo->p_read_addr += p_fifo->unit_size;
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	695b      	ldr	r3, [r3, #20]
 800c6ea:	687a      	ldr	r2, [r7, #4]
 800c6ec:	6912      	ldr	r2, [r2, #16]
 800c6ee:	441a      	add	r2, r3
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	615a      	str	r2, [r3, #20]
  p_fifo->free_num++;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	689b      	ldr	r3, [r3, #8]
 800c6f8:	1c5a      	adds	r2, r3, #1
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	609a      	str	r2, [r3, #8]
  p_fifo->used_num--;
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	68db      	ldr	r3, [r3, #12]
 800c702:	1e5a      	subs	r2, r3, #1
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	60da      	str	r2, [r3, #12]
 800c708:	613c      	str	r4, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c70a:	693b      	ldr	r3, [r7, #16]
 800c70c:	f383 8810 	msr	PRIMASK, r3
}
 800c710:	bf00      	nop
  //Interrupt On
  FIFO_RESTORE_CPU_SR(cpu_sr);
  return (0);
 800c712:	2300      	movs	r3, #0
 800c714:	e007      	b.n	800c726 <fifo_get+0x84>
    goto end;
 800c716:	bf00      	nop
 800c718:	60fc      	str	r4, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	f383 8810 	msr	PRIMASK, r3
}
 800c720:	bf00      	nop
end:
  //Interrupt On
  FIFO_RESTORE_CPU_SR(cpu_sr);
  return (-1);
 800c722:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800c726:	4618      	mov	r0, r3
 800c728:	371c      	adds	r7, #28
 800c72a:	46bd      	mov	sp, r7
 800c72c:	bd90      	pop	{r4, r7, pc}

0800c72e <fifo_get_noprotect>:
//!
//! \retval 0 if operate successfully, otherwise return -1.
//
//******************************************************************************************
int fifo_get_noprotect(fifo_t *p_fifo, void *p_element)
{
 800c72e:	b580      	push	{r7, lr}
 800c730:	b082      	sub	sp, #8
 800c732:	af00      	add	r7, sp, #0
 800c734:	6078      	str	r0, [r7, #4]
 800c736:	6039      	str	r1, [r7, #0]
  //! Check input parameters.
  ASSERT(p_fifo);
  ASSERT(p_element);

  // Empty ?
  if (0 == p_fifo->used_num)
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	68db      	ldr	r3, [r3, #12]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d102      	bne.n	800c746 <fifo_get_noprotect+0x18>
  {
    //! Error, FIFO is Empty!
    return (-1);
 800c740:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c744:	e023      	b.n	800c78e <fifo_get_noprotect+0x60>
  }

  //! Copy Data
  if (p_fifo->p_read_addr > p_fifo->p_end_addr)
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	695a      	ldr	r2, [r3, #20]
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	685b      	ldr	r3, [r3, #4]
 800c74e:	429a      	cmp	r2, r3
 800c750:	d903      	bls.n	800c75a <fifo_get_noprotect+0x2c>
  {
    p_fifo->p_read_addr = p_fifo->p_start_addr;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681a      	ldr	r2, [r3, #0]
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	615a      	str	r2, [r3, #20]
  }
  memcpy(p_element, p_fifo->p_read_addr, p_fifo->unit_size);
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	6959      	ldr	r1, [r3, #20]
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	691b      	ldr	r3, [r3, #16]
 800c762:	461a      	mov	r2, r3
 800c764:	6838      	ldr	r0, [r7, #0]
 800c766:	f000 f9db 	bl	800cb20 <memcpy>
  p_fifo->p_read_addr += p_fifo->unit_size;
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	695b      	ldr	r3, [r3, #20]
 800c76e:	687a      	ldr	r2, [r7, #4]
 800c770:	6912      	ldr	r2, [r2, #16]
 800c772:	441a      	add	r2, r3
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	615a      	str	r2, [r3, #20]
  p_fifo->free_num++;
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	689b      	ldr	r3, [r3, #8]
 800c77c:	1c5a      	adds	r2, r3, #1
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	609a      	str	r2, [r3, #8]
  p_fifo->used_num--;
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	68db      	ldr	r3, [r3, #12]
 800c786:	1e5a      	subs	r2, r3, #1
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	60da      	str	r2, [r3, #12]

  return (0);
 800c78c:	2300      	movs	r3, #0
}
 800c78e:	4618      	mov	r0, r3
 800c790:	3708      	adds	r7, #8
 800c792:	46bd      	mov	sp, r7
 800c794:	bd80      	pop	{r7, pc}

0800c796 <fifo_is_empty>:
//! \retval - None-zero(true) if empty.
//!         - Zero(false) if not empty.
//
//******************************************************************************************
int fifo_is_empty(fifo_t *p_fifo)
{
 800c796:	b480      	push	{r7}
 800c798:	b083      	sub	sp, #12
 800c79a:	af00      	add	r7, sp, #0
 800c79c:	6078      	str	r0, [r7, #4]
  //! Check input parameter.
  ASSERT(p_fifo);

  return (0 == p_fifo->used_num);
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	68db      	ldr	r3, [r3, #12]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	bf0c      	ite	eq
 800c7a6:	2301      	moveq	r3, #1
 800c7a8:	2300      	movne	r3, #0
 800c7aa:	b2db      	uxtb	r3, r3
}
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	370c      	adds	r7, #12
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b6:	4770      	bx	lr

0800c7b8 <fifo_is_full>:
//! \retval - None-zero(true) if full.
//!         - Zero(false) if not full.
//
//******************************************************************************************
int fifo_is_full(fifo_t *p_fifo)
{
 800c7b8:	b480      	push	{r7}
 800c7ba:	b083      	sub	sp, #12
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	6078      	str	r0, [r7, #4]
  //! Check input parameter.
  ASSERT(p_fifo);

  return (0 == p_fifo->free_num);
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	689b      	ldr	r3, [r3, #8]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	bf0c      	ite	eq
 800c7c8:	2301      	moveq	r3, #1
 800c7ca:	2300      	movne	r3, #0
 800c7cc:	b2db      	uxtb	r3, r3
}
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	370c      	adds	r7, #12
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d8:	4770      	bx	lr
	...

0800c7dc <TimerISR_Hook>:
//!
//! \note   Typical 1ms interval
//
//******************************************************************************************
void TimerISR_Hook(void)
{    
 800c7dc:	b480      	push	{r7}
 800c7de:	b083      	sub	sp, #12
 800c7e0:	af00      	add	r7, sp, #0
    for(uint8_t i = 1; i < TIMER_ELEMENT_NUM_MAX; i++)
 800c7e2:	2301      	movs	r3, #1
 800c7e4:	71fb      	strb	r3, [r7, #7]
 800c7e6:	e019      	b.n	800c81c <TimerISR_Hook+0x40>
    {
        if(SoftTimer[i].handle !=  0)
 800c7e8:	79fb      	ldrb	r3, [r7, #7]
 800c7ea:	4a11      	ldr	r2, [pc, #68]	; (800c830 <TimerISR_Hook+0x54>)
 800c7ec:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d010      	beq.n	800c816 <TimerISR_Hook+0x3a>
        {
            if(SoftTimer[i].delay)
 800c7f4:	79fb      	ldrb	r3, [r7, #7]
 800c7f6:	4a0e      	ldr	r2, [pc, #56]	; (800c830 <TimerISR_Hook+0x54>)
 800c7f8:	00db      	lsls	r3, r3, #3
 800c7fa:	4413      	add	r3, r2
 800c7fc:	685b      	ldr	r3, [r3, #4]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d009      	beq.n	800c816 <TimerISR_Hook+0x3a>
            {
                SoftTimer[i].delay--;
 800c802:	79fa      	ldrb	r2, [r7, #7]
 800c804:	490a      	ldr	r1, [pc, #40]	; (800c830 <TimerISR_Hook+0x54>)
 800c806:	00d3      	lsls	r3, r2, #3
 800c808:	440b      	add	r3, r1
 800c80a:	685b      	ldr	r3, [r3, #4]
 800c80c:	1e59      	subs	r1, r3, #1
 800c80e:	4808      	ldr	r0, [pc, #32]	; (800c830 <TimerISR_Hook+0x54>)
 800c810:	00d3      	lsls	r3, r2, #3
 800c812:	4403      	add	r3, r0
 800c814:	6059      	str	r1, [r3, #4]
    for(uint8_t i = 1; i < TIMER_ELEMENT_NUM_MAX; i++)
 800c816:	79fb      	ldrb	r3, [r7, #7]
 800c818:	3301      	adds	r3, #1
 800c81a:	71fb      	strb	r3, [r7, #7]
 800c81c:	79fb      	ldrb	r3, [r7, #7]
 800c81e:	2b13      	cmp	r3, #19
 800c820:	d9e2      	bls.n	800c7e8 <TimerISR_Hook+0xc>
            }
        }
    }
}
 800c822:	bf00      	nop
 800c824:	bf00      	nop
 800c826:	370c      	adds	r7, #12
 800c828:	46bd      	mov	sp, r7
 800c82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c82e:	4770      	bx	lr
 800c830:	200066a0 	.word	0x200066a0

0800c834 <soft_timer_init>:
//!         - This function must be called first !.
//!         
//
//******************************************************************************************
uint16_t soft_timer_init(void)
{
 800c834:	b480      	push	{r7}
 800c836:	b083      	sub	sp, #12
 800c838:	af00      	add	r7, sp, #0
    uint8_t i = 0;
 800c83a:	2300      	movs	r3, #0
 800c83c:	71fb      	strb	r3, [r7, #7]

    // Clear All Elements
    for(i = 1; i < TIMER_ELEMENT_NUM_MAX; i++)
 800c83e:	2301      	movs	r3, #1
 800c840:	71fb      	strb	r3, [r7, #7]
 800c842:	e00d      	b.n	800c860 <soft_timer_init+0x2c>
    {
        SoftTimer[i].handle    = 0;
 800c844:	79fb      	ldrb	r3, [r7, #7]
 800c846:	4a0b      	ldr	r2, [pc, #44]	; (800c874 <soft_timer_init+0x40>)
 800c848:	2100      	movs	r1, #0
 800c84a:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
        SoftTimer[i].delay     = 0;        
 800c84e:	79fb      	ldrb	r3, [r7, #7]
 800c850:	4a08      	ldr	r2, [pc, #32]	; (800c874 <soft_timer_init+0x40>)
 800c852:	00db      	lsls	r3, r3, #3
 800c854:	4413      	add	r3, r2
 800c856:	2200      	movs	r2, #0
 800c858:	605a      	str	r2, [r3, #4]
    for(i = 1; i < TIMER_ELEMENT_NUM_MAX; i++)
 800c85a:	79fb      	ldrb	r3, [r7, #7]
 800c85c:	3301      	adds	r3, #1
 800c85e:	71fb      	strb	r3, [r7, #7]
 800c860:	79fb      	ldrb	r3, [r7, #7]
 800c862:	2b13      	cmp	r3, #19
 800c864:	d9ee      	bls.n	800c844 <soft_timer_init+0x10>
    }

    return (SOFT_TIMER_SUCCESS);
 800c866:	2300      	movs	r3, #0
}
 800c868:	4618      	mov	r0, r3
 800c86a:	370c      	adds	r7, #12
 800c86c:	46bd      	mov	sp, r7
 800c86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c872:	4770      	bx	lr
 800c874:	200066a0 	.word	0x200066a0

0800c878 <soft_timer_req>:
//!         - Timer handle only can be used once.
//!         
//
//******************************************************************************************
uint16_t soft_timer_req(uint32_t Tick)
{
 800c878:	b480      	push	{r7}
 800c87a:	b087      	sub	sp, #28
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	6078      	str	r0, [r7, #4]
    uint8_t i = 0;
 800c880:	2300      	movs	r3, #0
 800c882:	75fb      	strb	r3, [r7, #23]

    for (i = 1; i < TIMER_ELEMENT_NUM_MAX; i++)
 800c884:	2301      	movs	r3, #1
 800c886:	75fb      	strb	r3, [r7, #23]
 800c888:	e024      	b.n	800c8d4 <soft_timer_req+0x5c>
    {
        if (SoftTimer[i].handle == 0)
 800c88a:	7dfb      	ldrb	r3, [r7, #23]
 800c88c:	4a16      	ldr	r2, [pc, #88]	; (800c8e8 <soft_timer_req+0x70>)
 800c88e:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 800c892:	2b00      	cmp	r3, #0
 800c894:	d11b      	bne.n	800c8ce <soft_timer_req+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800c896:	f3ef 8310 	mrs	r3, PRIMASK
 800c89a:	60bb      	str	r3, [r7, #8]
  return(result);
 800c89c:	68bb      	ldr	r3, [r7, #8]
        {
            CRITICAL_SETCION_ENTER();
 800c89e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800c8a0:	b672      	cpsid	i
}
 800c8a2:	bf00      	nop

            SoftTimer[i].handle    = i;
 800c8a4:	7dfb      	ldrb	r3, [r7, #23]
 800c8a6:	7dfa      	ldrb	r2, [r7, #23]
 800c8a8:	b291      	uxth	r1, r2
 800c8aa:	4a0f      	ldr	r2, [pc, #60]	; (800c8e8 <soft_timer_req+0x70>)
 800c8ac:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
            SoftTimer[i].delay     = Tick;            
 800c8b0:	7dfb      	ldrb	r3, [r7, #23]
 800c8b2:	4a0d      	ldr	r2, [pc, #52]	; (800c8e8 <soft_timer_req+0x70>)
 800c8b4:	00db      	lsls	r3, r3, #3
 800c8b6:	4413      	add	r3, r2
 800c8b8:	687a      	ldr	r2, [r7, #4]
 800c8ba:	605a      	str	r2, [r3, #4]
 800c8bc:	693b      	ldr	r3, [r7, #16]
 800c8be:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	f383 8810 	msr	PRIMASK, r3
}
 800c8c6:	bf00      	nop

            CRITICAL_SETCION_EXIT();

            return (i);
 800c8c8:	7dfb      	ldrb	r3, [r7, #23]
 800c8ca:	b29b      	uxth	r3, r3
 800c8cc:	e006      	b.n	800c8dc <soft_timer_req+0x64>
    for (i = 1; i < TIMER_ELEMENT_NUM_MAX; i++)
 800c8ce:	7dfb      	ldrb	r3, [r7, #23]
 800c8d0:	3301      	adds	r3, #1
 800c8d2:	75fb      	strb	r3, [r7, #23]
 800c8d4:	7dfb      	ldrb	r3, [r7, #23]
 800c8d6:	2b13      	cmp	r3, #19
 800c8d8:	d9d7      	bls.n	800c88a <soft_timer_req+0x12>
        }
    }

    return (0);
 800c8da:	2300      	movs	r3, #0
}
 800c8dc:	4618      	mov	r0, r3
 800c8de:	371c      	adds	r7, #28
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e6:	4770      	bx	lr
 800c8e8:	200066a0 	.word	0x200066a0

0800c8ec <soft_timer_update>:
//!         - Non-Zero                 failure
//!         
//
//******************************************************************************************
uint16_t soft_timer_update(uint32_t Id, uint32_t Tick)
{
 800c8ec:	b480      	push	{r7}
 800c8ee:	b087      	sub	sp, #28
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	6078      	str	r0, [r7, #4]
 800c8f4:	6039      	str	r1, [r7, #0]
    for (uint8_t i = 1; i < TIMER_ELEMENT_NUM_MAX; i++)
 800c8f6:	2301      	movs	r3, #1
 800c8f8:	75fb      	strb	r3, [r7, #23]
 800c8fa:	e01f      	b.n	800c93c <soft_timer_update+0x50>
    {
        if (SoftTimer[i].handle == Id)
 800c8fc:	7dfb      	ldrb	r3, [r7, #23]
 800c8fe:	4a14      	ldr	r2, [pc, #80]	; (800c950 <soft_timer_update+0x64>)
 800c900:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 800c904:	461a      	mov	r2, r3
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	4293      	cmp	r3, r2
 800c90a:	d114      	bne.n	800c936 <soft_timer_update+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800c90c:	f3ef 8310 	mrs	r3, PRIMASK
 800c910:	60bb      	str	r3, [r7, #8]
  return(result);
 800c912:	68bb      	ldr	r3, [r7, #8]
        {
            CRITICAL_SETCION_ENTER();
 800c914:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800c916:	b672      	cpsid	i
}
 800c918:	bf00      	nop

            SoftTimer[i].delay = Tick;
 800c91a:	7dfb      	ldrb	r3, [r7, #23]
 800c91c:	4a0c      	ldr	r2, [pc, #48]	; (800c950 <soft_timer_update+0x64>)
 800c91e:	00db      	lsls	r3, r3, #3
 800c920:	4413      	add	r3, r2
 800c922:	683a      	ldr	r2, [r7, #0]
 800c924:	605a      	str	r2, [r3, #4]
 800c926:	693b      	ldr	r3, [r7, #16]
 800c928:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	f383 8810 	msr	PRIMASK, r3
}
 800c930:	bf00      	nop

            CRITICAL_SETCION_EXIT();

            // Success
            return (0);
 800c932:	2300      	movs	r3, #0
 800c934:	e006      	b.n	800c944 <soft_timer_update+0x58>
    for (uint8_t i = 1; i < TIMER_ELEMENT_NUM_MAX; i++)
 800c936:	7dfb      	ldrb	r3, [r7, #23]
 800c938:	3301      	adds	r3, #1
 800c93a:	75fb      	strb	r3, [r7, #23]
 800c93c:	7dfb      	ldrb	r3, [r7, #23]
 800c93e:	2b13      	cmp	r3, #19
 800c940:	d9dc      	bls.n	800c8fc <soft_timer_update+0x10>
        }
    }

    // Failure
    return (1);
 800c942:	2301      	movs	r3, #1
}
 800c944:	4618      	mov	r0, r3
 800c946:	371c      	adds	r7, #28
 800c948:	46bd      	mov	sp, r7
 800c94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94e:	4770      	bx	lr
 800c950:	200066a0 	.word	0x200066a0

0800c954 <soft_timer_check>:
//!         - Timer handle only can be used once.
//!         
//
//******************************************************************************************
uint16_t soft_timer_check(uint16_t Handle)
{    
 800c954:	b480      	push	{r7}
 800c956:	b087      	sub	sp, #28
 800c958:	af00      	add	r7, sp, #0
 800c95a:	4603      	mov	r3, r0
 800c95c:	80fb      	strh	r3, [r7, #6]
    uint16_t retval = SOFT_TIMER_ERR;
 800c95e:	2303      	movs	r3, #3
 800c960:	82fb      	strh	r3, [r7, #22]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800c962:	f3ef 8310 	mrs	r3, PRIMASK
 800c966:	60fb      	str	r3, [r7, #12]
  return(result);
 800c968:	68fb      	ldr	r3, [r7, #12]

    CRITICAL_SETCION_ENTER();    
 800c96a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800c96c:	b672      	cpsid	i
}
 800c96e:	bf00      	nop
    if(SoftTimer[Handle].handle ==  Handle)
 800c970:	88fb      	ldrh	r3, [r7, #6]
 800c972:	4a0f      	ldr	r2, [pc, #60]	; (800c9b0 <soft_timer_check+0x5c>)
 800c974:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 800c978:	88fa      	ldrh	r2, [r7, #6]
 800c97a:	429a      	cmp	r2, r3
 800c97c:	d10b      	bne.n	800c996 <soft_timer_check+0x42>
    {
        if(SoftTimer[Handle].delay)
 800c97e:	88fb      	ldrh	r3, [r7, #6]
 800c980:	4a0b      	ldr	r2, [pc, #44]	; (800c9b0 <soft_timer_check+0x5c>)
 800c982:	00db      	lsls	r3, r3, #3
 800c984:	4413      	add	r3, r2
 800c986:	685b      	ldr	r3, [r3, #4]
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d002      	beq.n	800c992 <soft_timer_check+0x3e>
        {
            retval = SOFT_TIMER_ING;
 800c98c:	2301      	movs	r3, #1
 800c98e:	82fb      	strh	r3, [r7, #22]
 800c990:	e001      	b.n	800c996 <soft_timer_check+0x42>
        }
        else
        {
            retval = SOFT_TIMER_TIMEOUT;
 800c992:	2302      	movs	r3, #2
 800c994:	82fb      	strh	r3, [r7, #22]
 800c996:	693b      	ldr	r3, [r7, #16]
 800c998:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c99a:	68bb      	ldr	r3, [r7, #8]
 800c99c:	f383 8810 	msr	PRIMASK, r3
}
 800c9a0:	bf00      	nop
        }
    }
    CRITICAL_SETCION_EXIT();

    return (retval);
 800c9a2:	8afb      	ldrh	r3, [r7, #22]
}
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	371c      	adds	r7, #28
 800c9a8:	46bd      	mov	sp, r7
 800c9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ae:	4770      	bx	lr
 800c9b0:	200066a0 	.word	0x200066a0

0800c9b4 <__malloc_lock>:
 800c9b4:	4801      	ldr	r0, [pc, #4]	; (800c9bc <__malloc_lock+0x8>)
 800c9b6:	f000 b8b1 	b.w	800cb1c <__retarget_lock_acquire_recursive>
 800c9ba:	bf00      	nop
 800c9bc:	2000687c 	.word	0x2000687c

0800c9c0 <__malloc_unlock>:
 800c9c0:	4801      	ldr	r0, [pc, #4]	; (800c9c8 <__malloc_unlock+0x8>)
 800c9c2:	f000 b8ac 	b.w	800cb1e <__retarget_lock_release_recursive>
 800c9c6:	bf00      	nop
 800c9c8:	2000687c 	.word	0x2000687c

0800c9cc <strncmp>:
 800c9cc:	b510      	push	{r4, lr}
 800c9ce:	b16a      	cbz	r2, 800c9ec <strncmp+0x20>
 800c9d0:	3901      	subs	r1, #1
 800c9d2:	1884      	adds	r4, r0, r2
 800c9d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c9d8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c9dc:	429a      	cmp	r2, r3
 800c9de:	d103      	bne.n	800c9e8 <strncmp+0x1c>
 800c9e0:	42a0      	cmp	r0, r4
 800c9e2:	d001      	beq.n	800c9e8 <strncmp+0x1c>
 800c9e4:	2a00      	cmp	r2, #0
 800c9e6:	d1f5      	bne.n	800c9d4 <strncmp+0x8>
 800c9e8:	1ad0      	subs	r0, r2, r3
 800c9ea:	bd10      	pop	{r4, pc}
 800c9ec:	4610      	mov	r0, r2
 800c9ee:	e7fc      	b.n	800c9ea <strncmp+0x1e>

0800c9f0 <strncpy>:
 800c9f0:	b510      	push	{r4, lr}
 800c9f2:	3901      	subs	r1, #1
 800c9f4:	4603      	mov	r3, r0
 800c9f6:	b132      	cbz	r2, 800ca06 <strncpy+0x16>
 800c9f8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c9fc:	f803 4b01 	strb.w	r4, [r3], #1
 800ca00:	3a01      	subs	r2, #1
 800ca02:	2c00      	cmp	r4, #0
 800ca04:	d1f7      	bne.n	800c9f6 <strncpy+0x6>
 800ca06:	441a      	add	r2, r3
 800ca08:	2100      	movs	r1, #0
 800ca0a:	4293      	cmp	r3, r2
 800ca0c:	d100      	bne.n	800ca10 <strncpy+0x20>
 800ca0e:	bd10      	pop	{r4, pc}
 800ca10:	f803 1b01 	strb.w	r1, [r3], #1
 800ca14:	e7f9      	b.n	800ca0a <strncpy+0x1a>

0800ca16 <memset>:
 800ca16:	4402      	add	r2, r0
 800ca18:	4603      	mov	r3, r0
 800ca1a:	4293      	cmp	r3, r2
 800ca1c:	d100      	bne.n	800ca20 <memset+0xa>
 800ca1e:	4770      	bx	lr
 800ca20:	f803 1b01 	strb.w	r1, [r3], #1
 800ca24:	e7f9      	b.n	800ca1a <memset+0x4>
	...

0800ca28 <_reclaim_reent>:
 800ca28:	4b29      	ldr	r3, [pc, #164]	; (800cad0 <_reclaim_reent+0xa8>)
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	4283      	cmp	r3, r0
 800ca2e:	b570      	push	{r4, r5, r6, lr}
 800ca30:	4604      	mov	r4, r0
 800ca32:	d04b      	beq.n	800cacc <_reclaim_reent+0xa4>
 800ca34:	69c3      	ldr	r3, [r0, #28]
 800ca36:	b143      	cbz	r3, 800ca4a <_reclaim_reent+0x22>
 800ca38:	68db      	ldr	r3, [r3, #12]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d144      	bne.n	800cac8 <_reclaim_reent+0xa0>
 800ca3e:	69e3      	ldr	r3, [r4, #28]
 800ca40:	6819      	ldr	r1, [r3, #0]
 800ca42:	b111      	cbz	r1, 800ca4a <_reclaim_reent+0x22>
 800ca44:	4620      	mov	r0, r4
 800ca46:	f000 f879 	bl	800cb3c <_free_r>
 800ca4a:	6961      	ldr	r1, [r4, #20]
 800ca4c:	b111      	cbz	r1, 800ca54 <_reclaim_reent+0x2c>
 800ca4e:	4620      	mov	r0, r4
 800ca50:	f000 f874 	bl	800cb3c <_free_r>
 800ca54:	69e1      	ldr	r1, [r4, #28]
 800ca56:	b111      	cbz	r1, 800ca5e <_reclaim_reent+0x36>
 800ca58:	4620      	mov	r0, r4
 800ca5a:	f000 f86f 	bl	800cb3c <_free_r>
 800ca5e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800ca60:	b111      	cbz	r1, 800ca68 <_reclaim_reent+0x40>
 800ca62:	4620      	mov	r0, r4
 800ca64:	f000 f86a 	bl	800cb3c <_free_r>
 800ca68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ca6a:	b111      	cbz	r1, 800ca72 <_reclaim_reent+0x4a>
 800ca6c:	4620      	mov	r0, r4
 800ca6e:	f000 f865 	bl	800cb3c <_free_r>
 800ca72:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ca74:	b111      	cbz	r1, 800ca7c <_reclaim_reent+0x54>
 800ca76:	4620      	mov	r0, r4
 800ca78:	f000 f860 	bl	800cb3c <_free_r>
 800ca7c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ca7e:	b111      	cbz	r1, 800ca86 <_reclaim_reent+0x5e>
 800ca80:	4620      	mov	r0, r4
 800ca82:	f000 f85b 	bl	800cb3c <_free_r>
 800ca86:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800ca88:	b111      	cbz	r1, 800ca90 <_reclaim_reent+0x68>
 800ca8a:	4620      	mov	r0, r4
 800ca8c:	f000 f856 	bl	800cb3c <_free_r>
 800ca90:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800ca92:	b111      	cbz	r1, 800ca9a <_reclaim_reent+0x72>
 800ca94:	4620      	mov	r0, r4
 800ca96:	f000 f851 	bl	800cb3c <_free_r>
 800ca9a:	6a23      	ldr	r3, [r4, #32]
 800ca9c:	b1b3      	cbz	r3, 800cacc <_reclaim_reent+0xa4>
 800ca9e:	4620      	mov	r0, r4
 800caa0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800caa4:	4718      	bx	r3
 800caa6:	5949      	ldr	r1, [r1, r5]
 800caa8:	b941      	cbnz	r1, 800cabc <_reclaim_reent+0x94>
 800caaa:	3504      	adds	r5, #4
 800caac:	69e3      	ldr	r3, [r4, #28]
 800caae:	2d80      	cmp	r5, #128	; 0x80
 800cab0:	68d9      	ldr	r1, [r3, #12]
 800cab2:	d1f8      	bne.n	800caa6 <_reclaim_reent+0x7e>
 800cab4:	4620      	mov	r0, r4
 800cab6:	f000 f841 	bl	800cb3c <_free_r>
 800caba:	e7c0      	b.n	800ca3e <_reclaim_reent+0x16>
 800cabc:	680e      	ldr	r6, [r1, #0]
 800cabe:	4620      	mov	r0, r4
 800cac0:	f000 f83c 	bl	800cb3c <_free_r>
 800cac4:	4631      	mov	r1, r6
 800cac6:	e7ef      	b.n	800caa8 <_reclaim_reent+0x80>
 800cac8:	2500      	movs	r5, #0
 800caca:	e7ef      	b.n	800caac <_reclaim_reent+0x84>
 800cacc:	bd70      	pop	{r4, r5, r6, pc}
 800cace:	bf00      	nop
 800cad0:	2000017c 	.word	0x2000017c

0800cad4 <__libc_init_array>:
 800cad4:	b570      	push	{r4, r5, r6, lr}
 800cad6:	4d0d      	ldr	r5, [pc, #52]	; (800cb0c <__libc_init_array+0x38>)
 800cad8:	4c0d      	ldr	r4, [pc, #52]	; (800cb10 <__libc_init_array+0x3c>)
 800cada:	1b64      	subs	r4, r4, r5
 800cadc:	10a4      	asrs	r4, r4, #2
 800cade:	2600      	movs	r6, #0
 800cae0:	42a6      	cmp	r6, r4
 800cae2:	d109      	bne.n	800caf8 <__libc_init_array+0x24>
 800cae4:	4d0b      	ldr	r5, [pc, #44]	; (800cb14 <__libc_init_array+0x40>)
 800cae6:	4c0c      	ldr	r4, [pc, #48]	; (800cb18 <__libc_init_array+0x44>)
 800cae8:	f000 f874 	bl	800cbd4 <_init>
 800caec:	1b64      	subs	r4, r4, r5
 800caee:	10a4      	asrs	r4, r4, #2
 800caf0:	2600      	movs	r6, #0
 800caf2:	42a6      	cmp	r6, r4
 800caf4:	d105      	bne.n	800cb02 <__libc_init_array+0x2e>
 800caf6:	bd70      	pop	{r4, r5, r6, pc}
 800caf8:	f855 3b04 	ldr.w	r3, [r5], #4
 800cafc:	4798      	blx	r3
 800cafe:	3601      	adds	r6, #1
 800cb00:	e7ee      	b.n	800cae0 <__libc_init_array+0xc>
 800cb02:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb06:	4798      	blx	r3
 800cb08:	3601      	adds	r6, #1
 800cb0a:	e7f2      	b.n	800caf2 <__libc_init_array+0x1e>
 800cb0c:	0800cd2c 	.word	0x0800cd2c
 800cb10:	0800cd2c 	.word	0x0800cd2c
 800cb14:	0800cd2c 	.word	0x0800cd2c
 800cb18:	0800cd30 	.word	0x0800cd30

0800cb1c <__retarget_lock_acquire_recursive>:
 800cb1c:	4770      	bx	lr

0800cb1e <__retarget_lock_release_recursive>:
 800cb1e:	4770      	bx	lr

0800cb20 <memcpy>:
 800cb20:	440a      	add	r2, r1
 800cb22:	4291      	cmp	r1, r2
 800cb24:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800cb28:	d100      	bne.n	800cb2c <memcpy+0xc>
 800cb2a:	4770      	bx	lr
 800cb2c:	b510      	push	{r4, lr}
 800cb2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cb32:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cb36:	4291      	cmp	r1, r2
 800cb38:	d1f9      	bne.n	800cb2e <memcpy+0xe>
 800cb3a:	bd10      	pop	{r4, pc}

0800cb3c <_free_r>:
 800cb3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cb3e:	2900      	cmp	r1, #0
 800cb40:	d044      	beq.n	800cbcc <_free_r+0x90>
 800cb42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb46:	9001      	str	r0, [sp, #4]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	f1a1 0404 	sub.w	r4, r1, #4
 800cb4e:	bfb8      	it	lt
 800cb50:	18e4      	addlt	r4, r4, r3
 800cb52:	f7ff ff2f 	bl	800c9b4 <__malloc_lock>
 800cb56:	4a1e      	ldr	r2, [pc, #120]	; (800cbd0 <_free_r+0x94>)
 800cb58:	9801      	ldr	r0, [sp, #4]
 800cb5a:	6813      	ldr	r3, [r2, #0]
 800cb5c:	b933      	cbnz	r3, 800cb6c <_free_r+0x30>
 800cb5e:	6063      	str	r3, [r4, #4]
 800cb60:	6014      	str	r4, [r2, #0]
 800cb62:	b003      	add	sp, #12
 800cb64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cb68:	f7ff bf2a 	b.w	800c9c0 <__malloc_unlock>
 800cb6c:	42a3      	cmp	r3, r4
 800cb6e:	d908      	bls.n	800cb82 <_free_r+0x46>
 800cb70:	6825      	ldr	r5, [r4, #0]
 800cb72:	1961      	adds	r1, r4, r5
 800cb74:	428b      	cmp	r3, r1
 800cb76:	bf01      	itttt	eq
 800cb78:	6819      	ldreq	r1, [r3, #0]
 800cb7a:	685b      	ldreq	r3, [r3, #4]
 800cb7c:	1949      	addeq	r1, r1, r5
 800cb7e:	6021      	streq	r1, [r4, #0]
 800cb80:	e7ed      	b.n	800cb5e <_free_r+0x22>
 800cb82:	461a      	mov	r2, r3
 800cb84:	685b      	ldr	r3, [r3, #4]
 800cb86:	b10b      	cbz	r3, 800cb8c <_free_r+0x50>
 800cb88:	42a3      	cmp	r3, r4
 800cb8a:	d9fa      	bls.n	800cb82 <_free_r+0x46>
 800cb8c:	6811      	ldr	r1, [r2, #0]
 800cb8e:	1855      	adds	r5, r2, r1
 800cb90:	42a5      	cmp	r5, r4
 800cb92:	d10b      	bne.n	800cbac <_free_r+0x70>
 800cb94:	6824      	ldr	r4, [r4, #0]
 800cb96:	4421      	add	r1, r4
 800cb98:	1854      	adds	r4, r2, r1
 800cb9a:	42a3      	cmp	r3, r4
 800cb9c:	6011      	str	r1, [r2, #0]
 800cb9e:	d1e0      	bne.n	800cb62 <_free_r+0x26>
 800cba0:	681c      	ldr	r4, [r3, #0]
 800cba2:	685b      	ldr	r3, [r3, #4]
 800cba4:	6053      	str	r3, [r2, #4]
 800cba6:	440c      	add	r4, r1
 800cba8:	6014      	str	r4, [r2, #0]
 800cbaa:	e7da      	b.n	800cb62 <_free_r+0x26>
 800cbac:	d902      	bls.n	800cbb4 <_free_r+0x78>
 800cbae:	230c      	movs	r3, #12
 800cbb0:	6003      	str	r3, [r0, #0]
 800cbb2:	e7d6      	b.n	800cb62 <_free_r+0x26>
 800cbb4:	6825      	ldr	r5, [r4, #0]
 800cbb6:	1961      	adds	r1, r4, r5
 800cbb8:	428b      	cmp	r3, r1
 800cbba:	bf04      	itt	eq
 800cbbc:	6819      	ldreq	r1, [r3, #0]
 800cbbe:	685b      	ldreq	r3, [r3, #4]
 800cbc0:	6063      	str	r3, [r4, #4]
 800cbc2:	bf04      	itt	eq
 800cbc4:	1949      	addeq	r1, r1, r5
 800cbc6:	6021      	streq	r1, [r4, #0]
 800cbc8:	6054      	str	r4, [r2, #4]
 800cbca:	e7ca      	b.n	800cb62 <_free_r+0x26>
 800cbcc:	b003      	add	sp, #12
 800cbce:	bd30      	pop	{r4, r5, pc}
 800cbd0:	20006740 	.word	0x20006740

0800cbd4 <_init>:
 800cbd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbd6:	bf00      	nop
 800cbd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbda:	bc08      	pop	{r3}
 800cbdc:	469e      	mov	lr, r3
 800cbde:	4770      	bx	lr

0800cbe0 <_fini>:
 800cbe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbe2:	bf00      	nop
 800cbe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbe6:	bc08      	pop	{r3}
 800cbe8:	469e      	mov	lr, r3
 800cbea:	4770      	bx	lr
